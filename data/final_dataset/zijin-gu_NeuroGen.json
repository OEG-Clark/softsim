{"home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.encoding.Torch_fwRF_voxel_block.__init__": [[42, 72], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "_fmaps_fn", "enumerate", "enumerate", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "encoding.Torch_fwRF_voxel_block.register_parameter", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "src.make_gaussian_mass_stack", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "_fm.size", "_fm.size", "_fm.size", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.Alexnet_fmaps.__init__", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.make_gaussian_mass_stack"], ["    ", "def", "__init__", "(", "self", ",", "_fmaps_fn", ",", "params", ",", "_nonlinearity", "=", "None", ",", "input_shape", "=", "(", "1", ",", "3", ",", "227", ",", "227", ")", ",", "aperture", "=", "1.0", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", ":", "\n", "        ", "super", "(", "Torch_fwRF_voxel_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "aperture", "=", "aperture", "\n", "models", ",", "weights", ",", "bias", ",", "mstmt", ",", "mstst", "=", "params", "\n", "_x", "=", "torch", ".", "empty", "(", "(", "1", ",", ")", "+", "input_shape", "[", "1", ":", "]", ",", "device", "=", "device", ")", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "_fmaps", "=", "_fmaps_fn", "(", "_x", ")", "\n", "self", ".", "fmaps_rez", "=", "[", "]", "\n", "for", "k", ",", "_fm", "in", "enumerate", "(", "_fmaps", ")", ":", "\n", "            ", "assert", "_fm", ".", "size", "(", ")", "[", "2", "]", "==", "_fm", ".", "size", "(", ")", "[", "3", "]", ",", "'All feature maps need to be square'", "\n", "self", ".", "fmaps_rez", "+=", "[", "_fm", ".", "size", "(", ")", "[", "2", "]", ",", "]", "\n", "\n", "", "self", ".", "pfs", "=", "[", "]", "\n", "for", "k", ",", "n_pix", "in", "enumerate", "(", "self", ".", "fmaps_rez", ")", ":", "\n", "            ", "pf", "=", "pnu", ".", "make_gaussian_mass_stack", "(", "models", "[", ":", ",", "0", "]", ",", "models", "[", ":", ",", "1", "]", ",", "models", "[", ":", ",", "2", "]", ",", "n_pix", ",", "size", "=", "aperture", ",", "dtype", "=", "np", ".", "float32", ")", "[", "2", "]", "\n", "self", ".", "pfs", "+=", "[", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "pf", ")", ".", "to", "(", "device", ")", ",", "requires_grad", "=", "False", ")", ",", "]", "\n", "self", ".", "register_parameter", "(", "'pf%d'", "%", "k", ",", "self", ".", "pfs", "[", "-", "1", "]", ")", "\n", "\n", "", "self", ".", "weights", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "weights", ")", ".", "to", "(", "device", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "bias", "=", "None", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "bias", ")", ".", "to", "(", "device", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "", "self", ".", "mstm", "=", "None", "\n", "self", ".", "msts", "=", "None", "\n", "if", "mstmt", "is", "not", "None", ":", "\n", "            ", "self", ".", "mstm", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "mstmt", ".", "T", ")", ".", "to", "(", "device", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "if", "mstst", "is", "not", "None", ":", "\n", "            ", "self", ".", "msts", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "mstst", ".", "T", ")", ".", "to", "(", "device", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "self", ".", "_nl", "=", "_nonlinearity", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.encoding.Torch_fwRF_voxel_block.load_voxel_block": [[73, 99], ["zip", "zip", "zip", "src.make_gaussian_mass_stack", "len", "numpy.zeros", "encoding.set_value", "encoding.set_value", "_pf.size", "len", "numpy.zeros", "encoding.set_value", "encoding.set_value", "len", "numpy.zeros", "encoding.set_value", "encoding.set_value", "_pf.size", "len", "_p.size", "_p.size", "_p.size", "len", "len", "_p.size", "_p.size"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.make_gaussian_mass_stack", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value"], ["", "def", "load_voxel_block", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "models", "=", "params", "[", "0", "]", "\n", "for", "_pf", ",", "n_pix", "in", "zip", "(", "self", ".", "pfs", ",", "self", ".", "fmaps_rez", ")", ":", "\n", "            ", "pf", "=", "pnu", ".", "make_gaussian_mass_stack", "(", "models", "[", ":", ",", "0", "]", ",", "models", "[", ":", ",", "1", "]", ",", "models", "[", ":", ",", "2", "]", ",", "n_pix", ",", "size", "=", "self", ".", "aperture", ",", "dtype", "=", "np", ".", "float32", ")", "[", "2", "]", "\n", "if", "len", "(", "pf", ")", "<", "_pf", ".", "size", "(", ")", "[", "0", "]", ":", "\n", "                ", "pp", "=", "np", ".", "zeros", "(", "shape", "=", "_pf", ".", "size", "(", ")", ",", "dtype", "=", "pf", ".", "dtype", ")", "\n", "pp", "[", ":", "len", "(", "pf", ")", "]", "=", "pf", "\n", "set_value", "(", "_pf", ",", "pp", ")", "\n", "", "else", ":", "\n", "                ", "set_value", "(", "_pf", ",", "pf", ")", "\n", "", "", "for", "_p", ",", "p", "in", "zip", "(", "[", "self", ".", "weights", ",", "self", ".", "bias", "]", ",", "params", "[", "1", ":", "3", "]", ")", ":", "\n", "            ", "if", "_p", "is", "not", "None", ":", "\n", "                ", "if", "len", "(", "p", ")", "<", "_p", ".", "size", "(", ")", "[", "0", "]", ":", "\n", "                    ", "pp", "=", "np", ".", "zeros", "(", "shape", "=", "_p", ".", "size", "(", ")", ",", "dtype", "=", "p", ".", "dtype", ")", "\n", "pp", "[", ":", "len", "(", "p", ")", "]", "=", "p", "\n", "set_value", "(", "_p", ",", "pp", ")", "\n", "", "else", ":", "\n", "                    ", "set_value", "(", "_p", ",", "p", ")", "\n", "", "", "", "for", "_p", ",", "p", "in", "zip", "(", "[", "self", ".", "mstm", ",", "self", ".", "msts", "]", ",", "params", "[", "3", ":", "]", ")", ":", "\n", "            ", "if", "_p", "is", "not", "None", ":", "\n", "                ", "if", "len", "(", "p", ")", "<", "_p", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "                    ", "pp", "=", "np", ".", "zeros", "(", "shape", "=", "(", "_p", ".", "size", "(", ")", "[", "1", "]", ",", "_p", ".", "size", "(", ")", "[", "0", "]", ")", ",", "dtype", "=", "p", ".", "dtype", ")", "\n", "pp", "[", ":", "len", "(", "p", ")", "]", "=", "p", "\n", "set_value", "(", "_p", ",", "pp", ".", "T", ")", "\n", "", "else", ":", "\n", "                    ", "set_value", "(", "_p", ",", "p", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.encoding.Torch_fwRF_voxel_block.forward": [[100, 113], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "encoding.Torch_fwRF_voxel_block._nl", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "zip", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "_fmaps", ")", ":", "\n", "        ", "_mst", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensordot", "(", "_fm", ",", "_pf", ",", "dims", "=", "[", "[", "2", ",", "3", "]", ",", "[", "1", ",", "2", "]", "]", ")", "for", "_fm", ",", "_pf", "in", "zip", "(", "_fmaps", ",", "self", ".", "pfs", ")", "]", ",", "dim", "=", "1", ")", "# [#samples, #features, #voxels] ", "\n", "if", "self", ".", "_nl", "is", "not", "None", ":", "\n", "            ", "_mst", "=", "self", ".", "_nl", "(", "_mst", ")", "\n", "", "if", "self", ".", "mstm", "is", "not", "None", ":", "\n", "            ", "_mst", "-=", "self", ".", "mstm", "[", "None", "]", "\n", "", "if", "self", ".", "msts", "is", "not", "None", ":", "\n", "            ", "_mst", "/=", "self", ".", "msts", "[", "None", "]", "\n", "", "_mst", "=", "torch", ".", "transpose", "(", "torch", ".", "transpose", "(", "_mst", ",", "0", ",", "2", ")", ",", "1", ",", "2", ")", "# [#voxels, #samples, features]", "\n", "_r", "=", "torch", ".", "squeeze", "(", "torch", ".", "bmm", "(", "_mst", ",", "torch", ".", "unsqueeze", "(", "self", ".", "weights", ",", "2", ")", ")", ")", ".", "t", "(", ")", "# [#samples, #voxels]", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "_r", "+=", "self", ".", "bias", "\n", "", "return", "_r", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.encoding.Torch_filter_fmaps.__init__": [[115, 123], ["torch.Module.__init__", "enumerate", "next", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "encoding.Torch_filter_fmaps.register_parameter", "_fmaps.parameters", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.Alexnet_fmaps.__init__"], ["    ", "def", "__init__", "(", "self", ",", "_fmaps", ",", "lmask", ",", "fmask", ")", ":", "\n", "        ", "super", "(", "Torch_filter_fmaps", ",", "self", ")", ".", "__init__", "(", ")", "\n", "device", "=", "next", "(", "_fmaps", ".", "parameters", "(", ")", ")", ".", "device", "\n", "self", ".", "fmaps", "=", "_fmaps", "\n", "self", ".", "lmask", "=", "lmask", "\n", "self", ".", "fmask", "=", "[", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "fm", ")", ".", "to", "(", "device", ")", ",", "requires_grad", "=", "False", ")", "for", "fm", "in", "fmask", "]", "\n", "for", "k", ",", "fm", "in", "enumerate", "(", "self", ".", "fmask", ")", ":", "\n", "             ", "self", ".", "register_parameter", "(", "'fm%d'", "%", "k", ",", "fm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.encoding.Torch_filter_fmaps.forward": [[124, 127], ["encoding.Torch_filter_fmaps.fmaps", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "_x", ")", ":", "\n", "        ", "_fmaps", "=", "self", ".", "fmaps", "(", "_x", ")", "\n", "return", "[", "torch", ".", "index_select", "(", "torch", ".", "cat", "(", "[", "_fmaps", "[", "l", "]", "for", "l", "in", "lm", "]", ",", "1", ")", ",", "dim", "=", "1", ",", "index", "=", "fm", ")", "for", "lm", ",", "fm", "in", "zip", "(", "self", ".", "lmask", ",", "self", ".", "fmask", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.encoding.iterate_range": [[22, 29], ["int", "int", "range", "range", "range"], "function", ["None"], ["def", "iterate_range", "(", "start", ",", "length", ",", "batchsize", ")", ":", "\n", "    ", "batch_count", "=", "int", "(", "length", "//", "batchsize", ")", "\n", "residual", "=", "int", "(", "length", "%", "batchsize", ")", "\n", "for", "i", "in", "range", "(", "batch_count", ")", ":", "\n", "        ", "yield", "range", "(", "start", "+", "i", "*", "batchsize", ",", "start", "+", "(", "i", "+", "1", ")", "*", "batchsize", ")", ",", "batchsize", "\n", "", "if", "(", "residual", ">", "0", ")", ":", "\n", "        ", "yield", "range", "(", "start", "+", "batch_count", "*", "batchsize", ",", "start", "+", "length", ")", ",", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.encoding.get_value": [[30, 32], ["numpy.copy", "_x.data.cpu().numpy", "_x.data.cpu"], "function", ["None"], ["", "", "def", "get_value", "(", "_x", ")", ":", "\n", "    ", "return", "np", ".", "copy", "(", "_x", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "def", "set_value", "(", "_x", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.encoding.set_value": [[32, 36], ["_x.data.copy_", "list", "list", "_x.resize_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "_x.size"], "function", ["None"], ["", "def", "set_value", "(", "_x", ",", "x", ")", ":", "\n", "    ", "if", "list", "(", "x", ".", "shape", ")", "!=", "list", "(", "_x", ".", "size", "(", ")", ")", ":", "\n", "        ", "_x", ".", "resize_", "(", "x", ".", "shape", ")", "\n", "", "_x", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.encoding._to_torch": [[37, 39], ["torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "_to_torch", "(", "x", ",", "device", "=", "None", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "x", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.encoding.load_encoding": [[129, 155], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "h5py.File", "src.file_utility.embed_dict", "h5py.File.close", "torchmodel.models.alexnet.Alexnet_fmaps().to", "encoding.Torch_filter_fmaps", "encoding.Torch_fwRF_voxel_block", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "encoding.Torch_fwRF_voxel_block.load_voxel_block", "numpy.copy", "torchmodel.models.alexnet.Alexnet_fmaps", "h5py.File.items"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.embed_dict", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.Torch_fwRF_voxel_block.load_voxel_block"], ["", "", "def", "load_encoding", "(", "subject", ",", "model_name", "=", "'dnn_fwrf'", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", ":", "\n", "\n", "    ", "voxel_batch_size", "=", "24", "\n", "\n", "root_dir", "=", "\"./\"", "\n", "output_dir", "=", "root_dir", "+", "\"output/S%02d/%s/\"", "%", "(", "subject", ",", "model_name", ")", "\n", "model_params_set", "=", "h5py", ".", "File", "(", "output_dir", "+", "'model_params.h5py'", ",", "'r'", ")", "\n", "model_params", "=", "embed_dict", "(", "{", "k", ":", "np", ".", "copy", "(", "d", ")", "for", "k", ",", "d", "in", "model_params_set", ".", "items", "(", ")", "}", ")", "\n", "model_params_set", ".", "close", "(", ")", "\n", "\n", "_fmaps_fn", "=", "Alexnet_fmaps", "(", ")", ".", "to", "(", "device", ")", "\n", "_fmaps_fn", "=", "Torch_filter_fmaps", "(", "_fmaps_fn", ",", "model_params", "[", "'lmask'", "]", ",", "model_params", "[", "'fmask'", "]", ")", "\n", "\n", "params", "=", "[", "p", "[", ":", "voxel_batch_size", "]", "if", "p", "is", "not", "None", "else", "None", "for", "p", "in", "model_params", "[", "'params'", "]", "]", "\n", "\n", "_fwrf_fn", "=", "Torch_fwRF_voxel_block", "(", "_fmaps_fn", ",", "params", ",", "_nonlinearity", "=", "None", ",", "input_shape", "=", "(", "1", ",", "3", ",", "227", ",", "227", ")", ",", "aperture", "=", "1.0", ",", "device", "=", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "_fwrf_fn", ".", "load_voxel_block", "(", "*", "[", "p", "[", "0", ":", "voxel_batch_size", "]", "if", "p", "is", "not", "None", "else", "None", "for", "p", "in", "model_params", "[", "'params'", "]", "]", ")", "\n", "\n", "\n", "#device = next(_fmaps_fn.parameters()).device", "\n", "#_params = [_p for _p in _fwrf_fn.parameters()]", "\n", "#voxel_batch_size = _params[0].size()[0]    ", "\n", "#nt, nv = len(data), len(params[0])", "\n", "\n", "", "return", "_fwrf_fn", ",", "_fmaps_fn", "\n", "", ""]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.neurogen.get_args": [[12, 31], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "\n", "# Init a parser.", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'NeuroGen'", ",", "\n", "description", "=", "'Provide an ROI ID to get the optimized images that maxmize its activation.'", "\n", ")", "\n", "\n", "# Add arguments to parser.", "\n", "parser", ".", "add_argument", "(", "'--roi'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'ROI ID, range=[0, 24]'", ")", "\n", "parser", ".", "add_argument", "(", "'--steps'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number of generations for the optimization.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'GPU ID'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--subj'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'subject ID, rangr [1,8]'", ")", "\n", "parser", ".", "add_argument", "(", "'--reptime'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of repeatations'", ")", "\n", "parser", ".", "add_argument", "(", "'--truncation'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'truncation parameter'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.neurogen.neurogen": [[32, 106], ["torch.device", "pytorch_pretrained_biggan.truncated_noise_sample", "torch.from_numpy().to", "pytorch_pretrained_biggan.one_hot_from_int", "torch.from_numpy().to", "torch.optim.Adam", "model.eval", "classifier.eval", "maps.eval", "numpy.argmax", "print", "print", "torch.optim.Adam.step", "step_loss.append", "model", "visualize.center_crop", "classifier", "keep_act.append", "numpy.moveaxis", "keep_imgs.append", "keep_code.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().to.requires_grad_", "torch.optim.Adam.zero_grad", "model", "visualize.center_crop", "classifier", "loss.backward", "print", "maps", "act[].cpu().detach().numpy", "maps", "neurogen.neurogen.closure"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.center_crop", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.center_crop"], ["", "def", "neurogen", "(", "model", ",", "classifier", ",", "maps", ",", "num_class", ",", "roi", ",", "num_steps", "=", "1000", ",", "lr", "=", "0.01", ",", "wdecay", "=", "0.0001", ",", "dims", "=", "(", "227", ",", "227", ",", "3", ")", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "repeat_time", "=", "1", ",", "truncation", "=", "1", ")", ":", "\n", "\n", "# Init a random code to start from.", "\n", "\t", "code", "=", "truncated_noise_sample", "(", "batch_size", "=", "1", ",", "truncation", "=", "truncation", ",", "seed", "=", "repeat_time", ")", "\n", "code", "=", "torch", ".", "from_numpy", "(", "code", ")", ".", "to", "(", "device", ")", "\n", "class_vector", "=", "one_hot_from_int", "(", "[", "num_class", "]", ",", "batch_size", "=", "1", ")", "\n", "class_vector", "=", "torch", ".", "from_numpy", "(", "class_vector", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "code", ".", "requires_grad_", "(", ")", "]", ",", "lr", "=", "lr", ")", "\n", "\n", "# Make sure we're in evaluation mode.", "\n", "model", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "maps", ".", "eval", "(", ")", "\n", "\n", "step", "=", "0", "\n", "keep_imgs", "=", "[", "]", "\n", "step_loss", "=", "[", "]", "\n", "keep_act", "=", "[", "]", "\n", "keep_code", "=", "[", "]", "\n", "while", "step", "<", "num_steps", ":", "\n", "\t\t", "step", "+=", "1", "\n", "meta", "=", "0", "\n", "\n", "def", "closure", "(", ")", ":", "\n", "\n", "\t\t\t", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Produce an image from the code and the conditional class.          ", "\n", "y", "=", "model", "(", "code", ",", "class_vector", ",", "truncation", ")", "\n", "# Normalize said image s.t. values are between 0 and 1.", "\n", "y", "=", "(", "y", "+", "1.0", ")", "/", "2.0", "\n", "y", "=", "center_crop", "(", "y", ",", "256", ",", "227", ")", "\n", "# Try to classify this image", "\n", "pred", "=", "classifier", "(", "maps", "(", "y", ")", ")", "\n", "\n", "out", "=", "pred", "[", "roi", "]", "\n", "\n", "# Get the loss with L2 weight decay.", "\n", "loss", "=", "-", "out", "+", "wdecay", "*", "torch", ".", "sum", "(", "code", "**", "2", ")", "\n", "\n", "#loss.backward(retain_graph=True)", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "\n", "print", "(", "\"Step %d\"", "%", "step", ",", "\n", "\"\\n   loss  = {}\"", ".", "format", "(", "loss", ".", "data", ")", ",", "\n", "\"\\n   act   = {}\"", ".", "format", "(", "out", ".", "data", ")", ",", "\n", "\"\\n   code  = {}\"", ".", "format", "(", "code", "[", "0", ",", ":", "5", "]", ".", "data", ")", ")", "\n", "\n", "return", "loss", "\n", "\n", "", "optimizer", ".", "step", "(", "closure", ")", "\n", "step_loss", ".", "append", "(", "closure", "(", ")", ".", "data", ")", "\n", "\n", "y", "=", "model", "(", "code", ",", "class_vector", ",", "truncation", ")", "\n", "y", "=", "(", "y", "+", "1.0", ")", "/", "2.0", "\n", "y_crop", "=", "center_crop", "(", "y", ",", "256", ",", "227", ")", "\n", "act", "=", "classifier", "(", "maps", "(", "y_crop", ")", ")", "\n", "keep_act", ".", "append", "(", "act", "[", "roi", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "y", "=", "np", ".", "moveaxis", "(", "y", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "0", ",", "-", "1", ")", "\n", "keep_imgs", ".", "append", "(", "y", ")", "\n", "keep_code", ".", "append", "(", "code", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "\n", "", "opt_step", "=", "np", ".", "argmax", "(", "keep_act", ")", "\n", "out_img", "=", "keep_imgs", "[", "opt_step", "]", "\n", "out_code", "=", "keep_code", "[", "opt_step", "]", "\n", "out_act", "=", "keep_act", "[", "opt_step", "]", "\n", "\n", "print", "(", "\"Optimal step is \"", ",", "opt_step", ")", "\n", "print", "(", "\"Optimal act  is \"", ",", "out_act", ")", "\n", "return", "out_img", ",", "keep_imgs", ",", "keep_act", ",", "out_code", ",", "out_act", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.neurogen.main": [[107, 153], ["neurogen.get_args", "time.ctime", "torch.device", "encoding.load_encoding", "pytorch_pretrained_biggan.BigGAN.from_pretrained", "BigGAN.from_pretrained.to", "numpy.load", "numpy.zeros", "range", "numpy.save", "range", "torch.cuda.is_available", "time.time", "neurogen.neurogen", "time.time", "print", "visualize.save_image", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.neurogen.get_args", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.encoding.load_encoding", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.neurogen.neurogen", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.visualize.save_image"], ["", "def", "main", "(", ")", ":", "\n", "# Pull some arguments from the CL.", "\n", "\t", "args", "=", "get_args", "(", ")", "\n", "now", "=", "time", ".", "ctime", "(", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "args", ".", "gpu", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "fwrf", ",", "fmaps", "=", "load_encoding", "(", "subject", "=", "args", ".", "subj", ",", "model_name", "=", "'dnn_fwrf'", ",", "device", "=", "device", ")", "\n", "\n", "model", "=", "BigGAN", ".", "from_pretrained", "(", "'biggan-deep-256'", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "top_idx", "=", "np", ".", "load", "(", "'./img/S%d'", "%", "args", ".", "subj", "+", "'/top10_class.npy'", ")", "\n", "top_idx", "=", "top_idx", "[", ":", ",", "args", ".", "roi", "]", "\n", "\n", "#start", "\n", "all_act", "=", "np", ".", "zeros", "(", "[", "10", ",", "args", ".", "reptime", "]", ")", "\n", "for", "cate", "in", "range", "(", "10", ")", ":", "\n", "\t\t", "for", "repeat", "in", "range", "(", "args", ".", "reptime", ")", ":", "\n", "\t\t\t", "begin", "=", "time", ".", "time", "(", ")", "\n", "sim_image", ",", "sim_video", ",", "keep_act", ",", "final_code", ",", "final_act", "=", "neurogen", "(", "\n", "model", "=", "model", ",", "\n", "classifier", "=", "fwrf", ",", "\n", "maps", "=", "fmaps", ",", "\n", "num_class", "=", "top_idx", "[", "cate", "]", ",", "\n", "roi", "=", "args", ".", "roi", ",", "\n", "num_steps", "=", "args", ".", "steps", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "wdecay", "=", "0.001", ",", "\n", "device", "=", "device", ",", "\n", "repeat_time", "=", "repeat", ",", "\n", "truncation", "=", "args", ".", "truncation", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Let me know when things have finished processing.", "\n", "print", "(", "'[INFO] Completed processing SIM in {:0.4}(s)!! Requested ROI {} '", ".", "format", "(", "end", "-", "begin", ",", "args", ".", "roi", ")", ")", "\n", "\n", "# Save/Show the image.", "\n", "save_image", "(", "img", "=", "sim_image", ",", "subject", "=", "args", ".", "subj", ",", "category", "=", "top_idx", "[", "cate", "]", ",", "repeat", "=", "repeat", ",", "roi", "=", "args", ".", "roi", ")", "\n", "#save_gif(img=sim_video, subject=args.subj,  repeat=repeat, roi=args.roi)", "\n", "\n", "output_dir", "=", "'./img/S%0d'", "%", "args", ".", "subj", "+", "'/ROI%02d'", "%", "args", ".", "roi", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "all_act", "[", "cate", ",", "repeat", "]", "=", "final_act", "\n", "", "", "np", ".", "save", "(", "output_dir", "+", "'all_activations.npy'", ",", "all_act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.visualize.center_crop": [[7, 10], ["int"], "function", ["None"], ["def", "center_crop", "(", "x", ",", "current_size", ",", "desired_size", ")", ":", "\n", "    ", "start", "=", "int", "(", "(", "current_size", "-", "desired_size", ")", "/", "2", ")", "\n", "return", "x", "[", ":", ",", ":", ",", "start", ":", "(", "start", "+", "desired_size", ")", ",", "start", ":", "(", "start", "+", "desired_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.visualize.convert": [[11, 20], ["img.min", "img.max", "numpy.np.uint8"], "function", ["None"], ["", "def", "convert", "(", "img", ",", "target_type_min", ",", "target_type_max", ",", "target_type", ")", ":", "\n", "\t", "imin", "=", "img", ".", "min", "(", ")", "\n", "imax", "=", "img", ".", "max", "(", ")", "\n", "\n", "a", "=", "(", "target_type_max", "-", "target_type_min", ")", "/", "(", "imax", "-", "imin", ")", "\n", "b", "=", "target_type_max", "-", "a", "*", "imax", "\n", "new_img", "=", "(", "a", "*", "img", "+", "b", ")", ".", "astype", "(", "target_type", ")", "\n", "\n", "return", "new_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.visualize.save_image": [[22, 34], ["matplotlib.figure", "matplotlib.imshow", "matplotlib.tight_layout", "matplotlib.axis", "matplotlib.imsave", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "save_image", "(", "img", ",", "subject", ",", "category", ",", "repeat", ",", "roi", ")", ":", "\n", "\n", "\t", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "img", ",", "aspect", "=", "'equal'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "output_dir", "=", "'./img/S%0d'", "%", "subject", "+", "'/ROI%02d'", "%", "roi", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "plt", ".", "imsave", "(", "output_dir", "+", "'C%04d'", "%", "category", "+", "'_repeat%d'", "%", "repeat", "+", "'.png'", ",", "img", ",", "format", "=", "'png'", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.visualize.save_gif": [[36, 54], ["matplotlib.figure", "matplotlib.tight_layout", "matplotlib.axis", "matplotlib.animation.ArtistAnimation", "visualize.convert", "imageio.mimwrite", "matplotlib.imshow", "ima.append", "os.path.exists", "os.makedirs", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.None.visualize.convert"], ["", "def", "save_gif", "(", "img", ",", "subject", ",", "category", ",", "repeat", ",", "roi", ")", ":", "\n", "\n", "\t", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "ima", "=", "[", "]", "\n", "for", "cur", "in", "img", ":", "\n", "\t\t", "im", "=", "plt", ".", "imshow", "(", "cur", ",", "animated", "=", "True", ",", "aspect", "=", "'equal'", ")", "\n", "ima", ".", "append", "(", "[", "im", "]", ")", "\n", "", "ani", "=", "ArtistAnimation", "(", "fig", ",", "ima", ",", "interval", "=", "30", ",", "blit", "=", "True", ")", "\n", "\n", "output_dir", "=", "output_dir", "=", "'./img/S%0d'", "%", "subject", "+", "'/ROI%02d'", "%", "roi", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "img_gif", "=", "convert", "(", "np", ".", "asarray", "(", "img", ")", ",", "0", ",", "255", ",", "np", ".", "uint8", ")", "\n", "imageio", ".", "mimwrite", "(", "output_dir", "+", "'C%04d'", "%", "category", "+", "'_repeat%d'", "%", "repeat", "+", "'.png'", ",", "img_gif", ",", "fps", "=", "32", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.plots.display_candidate_loss": [[11, 32], ["numpy.unravel_index", "matplotlib.Circle", "matplotlib.figure", "numpy.min", "numpy.max", "range", "scores.reshape().transpose", "numpy.argmin", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.clim", "matplotlib.grid", "matplotlib.gca", "plt.gca.add_artist", "scores.reshape"], "function", ["None"], ["def", "display_candidate_loss", "(", "scores", ",", "nx", ",", "ny", ",", "ns", ")", ":", "\n", "    ", "dis_y", "=", "ns", "//", "3", "if", "ns", "%", "3", "==", "0", "else", "ns", "//", "3", "+", "1", "\n", "s", "=", "scores", ".", "reshape", "(", "(", "nx", ",", "ny", ",", "ns", ")", ")", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "## The transpose and flip is just so that the candidate ", "\n", "#coordinate maatch the normal cartesian coordinate of the rf position when viewed through imshow.", "\n", "idxs", "=", "np", ".", "unravel_index", "(", "np", ".", "argmin", "(", "s", ")", ",", "(", "nx", ",", "ny", ",", "ns", ")", ")", "\n", "best", "=", "plt", ".", "Circle", "(", "(", "idxs", "[", "1", "]", ",", "idxs", "[", "0", "]", ")", ",", "0.5", ",", "color", "=", "'r'", ",", "fill", "=", "False", ",", "lw", "=", "2", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "5", "*", "dis_y", ")", ")", "\n", "smin", "=", "np", ".", "min", "(", "s", ")", "\n", "smax", "=", "np", ".", "max", "(", "s", ")", "\n", "# print \"score range = (%f, %f)\" % (smin, smax)", "\n", "for", "i", "in", "range", "(", "ns", ")", ":", "\n", "        ", "plt", ".", "subplot", "(", "dis_y", ",", "3", ",", "i", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "s", "[", ":", ",", ":", ",", "i", "]", ",", "interpolation", "=", "'None'", ",", "cmap", "=", "'jet'", ")", "\n", "plt", ".", "title", "(", "'sigma canditate = %d'", "%", "i", ")", "\n", "plt", ".", "clim", "(", "smin", ",", "smax", ")", "\n", "plt", ".", "grid", "(", "'off'", ")", "\n", "if", "(", "idxs", "[", "2", "]", "==", "i", ")", ":", "\n", "            ", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "add_artist", "(", "best", ")", "\n", "", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.plots.plot_rf_as_circles": [[48, 62], ["matplotlib.Normalize", "matplotlib.ScalarMappable", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.gca().set_aspect", "cmx.ScalarMappable.to_rgba", "matplotlib.Circle", "matplotlib.gca().add_artist", "matplotlib.Circle", "matplotlib.gca().add_artist", "matplotlib.get_cmap", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca"], "function", ["None"], ["", "def", "plot_rf_as_circles", "(", "rfs", ",", "smin", ",", "smax", ")", ":", "\n", "    ", "cNorm", "=", "colors", ".", "Normalize", "(", "vmin", "=", "smin", ",", "vmax", "=", "smax", ")", "\n", "scalarMap", "=", "cmx", ".", "ScalarMappable", "(", "norm", "=", "cNorm", ",", "cmap", "=", "plt", ".", "get_cmap", "(", "'jet'", ")", ")", "\n", "# print scalarMap.get_clim()", "\n", "for", "rf", "in", "rfs", ":", "\n", "        ", "colorVal", "=", "scalarMap", ".", "to_rgba", "(", "rf", "[", "2", "]", ")", "\n", "c", "=", "plt", ".", "Circle", "(", "(", "rf", "[", "0", "]", ",", "rf", "[", "1", "]", ")", ",", "rf", "[", "2", "]", ",", "color", "=", "colorVal", ",", "fill", "=", "True", ",", "alpha", "=", "0.1", ",", "lw", "=", "1.", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_artist", "(", "c", ")", "\n", "c", "=", "plt", ".", "Circle", "(", "(", "rf", "[", "0", "]", ",", "rf", "[", "1", "]", ")", ",", "rf", "[", "2", "]", ",", "color", "=", "colorVal", ",", "fill", "=", "False", ",", "alpha", "=", "0.5", ",", "lw", "=", "2.", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_artist", "(", "c", ")", "\n", "#plt.scatter([rf[0],], [rf[1],], color=colorVal, marker='o')", "\n", "", "plt", ".", "xlabel", "(", "'x (degree)'", ")", "\n", "plt", ".", "ylabel", "(", "'y (degree)'", ",", "labelpad", "=", "0", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_aspect", "(", "'equal'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.plots.plot_pretty_compare": [[64, 93], ["matplotlib.pyplot.cm.get_cmap", "cm.get_cmap.", "cm.get_cmap.", "seaborn.JointGrid", "numpy.logical_or", "sns.JointGrid.plot_joint", "sns.JointGrid.ax_marg_x.hist", "sns.JointGrid.ax_marg_y.hist", "sns.JointGrid.ax_marg_x.get_yaxis().reset_ticks", "sns.JointGrid.ax_marg_x.get_yaxis().set_ticks", "sns.JointGrid.ax_marg_x.get_yaxis().set_ticklabels", "sns.JointGrid.ax_marg_x.set_ylabel", "sns.JointGrid.ax_marg_x.get_yaxis().grid", "sns.JointGrid.ax_marg_x.get_yaxis().set_major_formatter", "sns.JointGrid.ax_joint.plot", "sns.JointGrid.ax_joint.plot", "sns.JointGrid.ax_joint.plot", "matplotlib.ticker.FormatStrFormatter", "min", "max", "sns.JointGrid.ax_marg_x.get_yaxis", "sns.JointGrid.ax_marg_x.get_yaxis", "sns.JointGrid.ax_marg_x.get_yaxis", "sns.JointGrid.ax_marg_x.get_yaxis", "sns.JointGrid.ax_marg_x.get_yaxis"], "function", ["None"], ["", "def", "plot_pretty_compare", "(", "X", ",", "Y", ",", "threshold", ",", "xlim", ",", "ylim", ",", "cmap", "=", "'Blues'", ")", ":", "\n", "    ", "from", "matplotlib", ".", "pyplot", "import", "cm", "\n", "from", "matplotlib", ".", "ticker", "import", "FormatStrFormatter", "\n", "cmap", "=", "cm", ".", "get_cmap", "(", "cmap", ")", "\n", "color1", "=", "cmap", "(", "0.4", ")", "\n", "color2", "=", "cmap", "(", "0.4", ")", "\n", "x", "=", "X", "\n", "y", "=", "Y", "\n", "\n", "g", "=", "sns", ".", "JointGrid", "(", "x", ",", "y", ",", "size", "=", "8", ",", "xlim", "=", "xlim", ",", "ylim", "=", "ylim", ")", "\n", "# marg. plot", "\n", "mask", "=", "np", ".", "logical_or", "(", "X", ">", "threshold", ",", "Y", ">", "threshold", ")", "#np.where(Xt[1]>threshold)[0]", "\n", "_", "=", "g", ".", "plot_joint", "(", "plt", ".", "hexbin", ",", "bins", "=", "'log'", ",", "gridsize", "=", "30", ",", "cmap", "=", "cmap", ",", "extent", "=", "xlim", "+", "ylim", ")", "\n", "ax1", "=", "g", ".", "ax_marg_x", ".", "hist", "(", "x", ",", "log", "=", "True", ",", "color", "=", "color1", ",", "bins", "=", "30", ",", "range", "=", "xlim", ")", "#distplot(color=\".5\",kde=False) #hist_kws={'log':True}", "\n", "ax2", "=", "g", ".", "ax_marg_y", ".", "hist", "(", "y", ",", "log", "=", "True", ",", "color", "=", "color2", ",", "bins", "=", "30", ",", "orientation", "=", "'horizontal'", ",", "range", "=", "ylim", ")", "\n", "\n", "g", ".", "ax_marg_x", ".", "get_yaxis", "(", ")", ".", "reset_ticks", "(", ")", "\n", "g", ".", "ax_marg_x", ".", "get_yaxis", "(", ")", ".", "set_ticks", "(", "[", "1e0", ",", "1e1", ",", "1e2", "]", ")", "\n", "g", ".", "ax_marg_x", ".", "get_yaxis", "(", ")", ".", "set_ticklabels", "(", "[", "1e0", ",", "1e1", ",", "1e2", "]", ")", "\n", "g", ".", "ax_marg_x", ".", "set_ylabel", "(", "'Count'", ",", "labelpad", "=", "10", ")", "\n", "g", ".", "ax_marg_x", ".", "get_yaxis", "(", ")", ".", "grid", "(", "True", ")", "\n", "g", ".", "ax_marg_x", ".", "get_yaxis", "(", ")", ".", "set_major_formatter", "(", "FormatStrFormatter", "(", "'%d'", ")", ")", "\n", "#g.ax_marg_y.set_visible(False)", "\n", "\n", "mm", "=", "[", "min", "(", "xlim", "[", "0", "]", ",", "ylim", "[", "0", "]", ")", ",", "max", "(", "xlim", "[", "1", "]", ",", "ylim", "[", "1", "]", ")", "]", "\n", "g", ".", "ax_joint", ".", "plot", "(", "mm", ",", "mm", ",", "'--r'", ",", "lw", "=", "2", ")", "\n", "g", ".", "ax_joint", ".", "plot", "(", "[", "threshold", ",", "threshold", "]", ",", "[", "mm", "[", "0", "]", ",", "threshold", "]", ",", "'-r'", ",", "lw", "=", "2", ")", "\n", "g", ".", "ax_joint", ".", "plot", "(", "[", "mm", "[", "0", "]", ",", "threshold", "]", ",", "[", "threshold", ",", "threshold", "]", ",", "'-r'", ",", "lw", "=", "2", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.plots.plot_fwrf_paper_compare": [[96, 135], ["matplotlib.pyplot.cm.get_cmap", "seaborn.JointGrid", "numpy.logical_or", "sns.JointGrid.plot_joint", "sns.JointGrid.ax_marg_x.hist", "sns.JointGrid.ax_marg_x.hist", "max", "int", "sns.JointGrid.ax_marg_x.text", "sns.JointGrid.ax_marg_x.text", "sns.JointGrid.ax_marg_x.set_ylim", "sns.JointGrid.ax_marg_x.get_yaxis().reset_ticks", "sns.JointGrid.ax_marg_x.get_yaxis().set_ticks", "sns.JointGrid.ax_marg_x.get_yaxis().set_ticklabels", "sns.JointGrid.ax_marg_x.set_ylabel", "sns.JointGrid.ax_marg_x.get_yaxis().grid", "sns.JointGrid.ax_marg_x.get_yaxis().set_major_formatter", "sns.JointGrid.ax_marg_y.set_visible", "sns.JointGrid.ax_joint.plot", "sns.JointGrid.ax_joint.plot", "sns.JointGrid.ax_joint.plot", "matplotlib.gca().set_xlabel", "matplotlib.gca().set_ylabel", "numpy.nan_to_num", "numpy.nan_to_num", "numpy.max", "numpy.max", "numpy.ceil", "numpy.sum", "matplotlib.ticker.FormatStrFormatter", "numpy.zeros", "numpy.log10", "numpy.sum", "numpy.sum", "sns.JointGrid.ax_marg_x.get_yaxis", "sns.JointGrid.ax_marg_x.get_yaxis", "sns.JointGrid.ax_marg_x.get_yaxis", "sns.JointGrid.ax_marg_x.get_yaxis", "sns.JointGrid.ax_marg_x.get_yaxis", "len", "matplotlib.gca", "matplotlib.gca", "numpy.logical_and", "numpy.logical_and", "range", "range"], "function", ["None"], ["", "def", "plot_fwrf_paper_compare", "(", "X", ",", "Y", ",", "threshold", ",", "xlim", ",", "ylim", ",", "cmap", "=", "'Blues'", ")", ":", "\n", "    ", "from", "matplotlib", ".", "pyplot", "import", "cm", "\n", "from", "matplotlib", ".", "ticker", "import", "FormatStrFormatter", "\n", "cmap", "=", "cm", ".", "get_cmap", "(", "cmap", ")", "\n", "color1", "=", "'#084990'", "\n", "color2", "=", "'#3989c1'", "\n", "X", ",", "Y", "=", "np", ".", "nan_to_num", "(", "X", ")", ",", "np", ".", "nan_to_num", "(", "Y", ")", "\n", "x", ",", "y", "=", "(", "X", "-", "Y", ")", ",", "(", "X", "+", "Y", ")", "/", "2", "\n", "\n", "g", "=", "sns", ".", "JointGrid", "(", "x", ",", "y", ",", "height", "=", "8", ",", "xlim", "=", "xlim", ",", "ylim", "=", "ylim", ")", "\n", "# marg. plot", "\n", "mask", "=", "np", ".", "logical_or", "(", "X", ">", "threshold", ",", "Y", ">", "threshold", ")", "#np.where(Xt[1]>threshold)[0]", "\n", "_", "=", "g", ".", "plot_joint", "(", "plt", ".", "hexbin", ",", "bins", "=", "'log'", ",", "gridsize", "=", "30", ",", "cmap", "=", "'Blues'", ",", "extent", "=", "xlim", "+", "ylim", ")", "\n", "ax1", "=", "g", ".", "ax_marg_x", ".", "hist", "(", "x", "[", "np", ".", "logical_and", "(", "mask", ",", "x", "<", "0", ")", "]", ",", "log", "=", "True", ",", "color", "=", "color1", ",", "bins", "=", "50", ",", "range", "=", "xlim", ")", "#distplot(color=\".5\",kde=False) #hist_kws={'log':True}", "\n", "ax2", "=", "g", ".", "ax_marg_x", ".", "hist", "(", "x", "[", "np", ".", "logical_and", "(", "mask", ",", "x", ">=", "0", ")", "]", ",", "log", "=", "True", ",", "color", "=", "color2", ",", "bins", "=", "50", ",", "range", "=", "xlim", ")", "\n", "\n", "maxcount", "=", "max", "(", "np", ".", "max", "(", "ax1", "[", "0", "]", ")", ",", "np", ".", "max", "(", "ax2", "[", "0", "]", ")", ")", "\n", "maxdecade", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "log10", "(", "maxcount", ")", ")", ")", "\n", "\n", "adv", "=", "np", ".", "sum", "(", "ax1", "[", "0", "]", ")", "/", "(", "np", ".", "sum", "(", "ax1", "[", "0", "]", ")", "+", "np", ".", "sum", "(", "ax2", "[", "0", "]", ")", ")", "\n", "g", ".", "ax_marg_x", ".", "text", "(", "-", "0.45", ",", "50.", ",", "'%.2f'", "%", "adv", ",", "horizontalalignment", "=", "'left'", ",", "fontsize", "=", "18", ",", "color", "=", "color1", ",", "weight", "=", "'bold'", ")", "\n", "g", ".", "ax_marg_x", ".", "text", "(", "0.35", ",", "50.", ",", "'%.2f'", "%", "(", "1.", "-", "adv", ")", ",", "horizontalalignment", "=", "'left'", ",", "fontsize", "=", "18", ",", "color", "=", "color2", ",", "weight", "=", "'bold'", ")", "\n", "g", ".", "ax_marg_x", ".", "set_ylim", "(", "[", "0.5", ",", "5e2", "]", ")", "\n", "\n", "g", ".", "ax_marg_x", ".", "get_yaxis", "(", ")", ".", "reset_ticks", "(", ")", "\n", "g", ".", "ax_marg_x", ".", "get_yaxis", "(", ")", ".", "set_ticks", "(", "[", "10", "**", "d", "for", "d", "in", "range", "(", "maxdecade", ")", "]", ")", "\n", "g", ".", "ax_marg_x", ".", "get_yaxis", "(", ")", ".", "set_ticklabels", "(", "[", "10", "**", "d", "for", "d", "in", "range", "(", "maxdecade", ")", "]", ")", "\n", "g", ".", "ax_marg_x", ".", "set_ylabel", "(", "'Count'", ",", "labelpad", "=", "10", ")", "\n", "g", ".", "ax_marg_x", ".", "get_yaxis", "(", ")", ".", "grid", "(", "True", ")", "\n", "g", ".", "ax_marg_x", ".", "get_yaxis", "(", ")", ".", "set_major_formatter", "(", "FormatStrFormatter", "(", "'%d'", ")", ")", "\n", "g", ".", "ax_marg_y", ".", "set_visible", "(", "False", ")", "\n", "\n", "g", ".", "ax_joint", ".", "plot", "(", "np", ".", "zeros", "(", "len", "(", "ylim", ")", ")", ",", "ylim", ",", "':k'", ",", "lw", "=", "2", ")", "\n", "#g.ax_joint.plot(xlim, np.ones(len(xlim)) * threshold, '--r', lw=2)", "\n", "g", ".", "ax_joint", ".", "plot", "(", "[", "0.", ",", "xlim", "[", "1", "]", "]", ",", "[", "threshold", ",", "threshold", "-", "xlim", "[", "1", "]", "/", "2", "]", ",", "'--r'", ",", "lw", "=", "2", ")", "\n", "g", ".", "ax_joint", ".", "plot", "(", "[", "xlim", "[", "0", "]", ",", "0.", "]", ",", "[", "threshold", "+", "xlim", "[", "0", "]", "/", "2", ",", "threshold", "]", ",", "'--r'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_xlabel", "(", "'X-Y'", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_ylabel", "(", "'(X+Y)/2'", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.normal_init.__init__": [[38, 40], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "1.", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "", "def", "__call__", "(", "self", ",", "shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.normal_init.__call__": [[40, 42], ["numpy.random.normal().astype", "numpy.random.normal"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "shape", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "normal", "(", "0", ",", "self", ".", "scale", ",", "size", "=", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.Torch_fwRF_voxel_block.__init__": [[53, 110], ["torch.Module.__init__", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "_fmaps_fn", "enumerate", "numpy.sum", "enumerate", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "next", "min", "torch_pfwrf.Torch_fwRF_voxel_block.register_parameter", "enumerate", "torch_pfwrf.downsampling", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "_fmaps_fn.parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "_fm.size", "numpy.max", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "min", "print", "_fm.size", "_fm.size", "_fm.size", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch_pfwrf.Torch_fwRF_voxel_block.register_parameter", "torch_pfwrf.Torch_fwRF_voxel_block.register_parameter", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "_fm.size", "_fm.size", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "print", "numpy.random.normal().astype", "numpy.full", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.ones", "u.astype", "numpy.random.normal", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.Alexnet_fmaps.__init__", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.downsampling"], ["    ", "def", "__init__", "(", "self", ",", "_fmaps_fn", ",", "_nonlinearity", "=", "None", ",", "input_shape", "=", "(", "1", ",", "3", ",", "227", ",", "227", ")", ",", "max_fpf_resolution", "=", "21", ",", "voxel_batch_size", "=", "1000", ",", "shared_fpf", "=", "False", ")", ":", "\n", "        ", "super", "(", "Torch_fwRF_voxel_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "###", "\n", "nv", "=", "voxel_batch_size", "\n", "device", "=", "next", "(", "_fmaps_fn", ".", "parameters", "(", ")", ")", ".", "device", "\n", "_x", "=", "torch", ".", "empty", "(", "(", "1", ",", ")", "+", "input_shape", "[", "1", ":", "]", ",", "device", "=", "device", ")", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "_fmaps", "=", "_fmaps_fn", "(", "_x", ")", "\n", "###", "\n", "self", ".", "fmaps_shapes", ",", "self", ".", "fmaps_rez", "=", "[", "]", ",", "[", "]", "\n", "for", "k", ",", "_fm", "in", "enumerate", "(", "_fmaps", ")", ":", "\n", "            ", "assert", "_fm", ".", "size", "(", ")", "[", "2", "]", "==", "_fm", ".", "size", "(", ")", "[", "3", "]", ",", "'All feature maps need to be square'", "\n", "self", ".", "fmaps_rez", "+=", "[", "_fm", ".", "size", "(", ")", "[", "2", "]", ",", "]", "\n", "self", ".", "fmaps_shapes", "+=", "[", "_fm", ".", "size", "(", ")", ",", "]", "\n", "", "nf", "=", "np", ".", "sum", "(", "[", "s", "[", "1", "]", "for", "s", "in", "self", ".", "fmaps_shapes", "]", ")", "\n", "###", "\n", "self", ".", "rfs", ",", "self", ".", "fpf_rez", "=", "[", "]", ",", "[", "]", "\n", "if", "shared_fpf", ":", "\n", "            ", "nr", "=", "min", "(", "max_fpf_resolution", ",", "np", ".", "max", "(", "self", ".", "fmaps_rez", ")", ")", "\n", "self", ".", "fpf_rez", "+=", "[", "nr", ",", "]", "\n", "self", ".", "rfs", "+=", "[", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "np", ".", "ones", "(", "shape", "=", "(", "nv", ",", "nr", ",", "nr", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "device", ")", ")", ",", "]", "\n", "self", ".", "register_parameter", "(", "'rf'", ",", "self", ".", "rfs", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "for", "k", ",", "fm_rez", "in", "enumerate", "(", "self", ".", "fmaps_rez", ")", ":", "\n", "                ", "assert", "_fm", ".", "size", "(", ")", "[", "2", "]", "==", "_fm", ".", "size", "(", ")", "[", "3", "]", ",", "'All feature maps need to be square'", "\n", "nr", "=", "min", "(", "max_fpf_resolution", ",", "fm_rez", ")", "\n", "self", ".", "fpf_rez", "+=", "[", "nr", ",", "]", "\n", "if", "nr", "==", "1", ":", "\n", "                    ", "self", ".", "rfs", "+=", "[", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "np", ".", "ones", "(", "shape", "=", "(", "nv", ",", "nr", ",", "nr", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "device", ")", ")", ",", "]", "\n", "self", ".", "register_parameter", "(", "'rf%d'", "%", "k", ",", "self", ".", "rfs", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "rfs", "+=", "[", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "np", ".", "ones", "(", "shape", "=", "(", "nv", ",", "nr", ",", "nr", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "device", ")", ")", ",", "]", "\n", "self", ".", "register_parameter", "(", "'rf%d'", "%", "k", ",", "self", ".", "rfs", "[", "-", "1", "]", ")", "\n", "###", "\n", "", "", "", "self", ".", "dl", "=", "[", "]", "\n", "self", ".", "ul", "=", "[", "]", "\n", "for", "k", ",", "fm_rez", "in", "enumerate", "(", "self", ".", "fmaps_rez", ")", ":", "\n", "            ", "if", "shared_fpf", ":", "\n", "                ", "nr", "=", "self", ".", "fpf_rez", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "nr", "=", "self", ".", "fpf_rez", "[", "k", "]", "\n", "", "d", ",", "u", "=", "downsampling", "(", "[", "fm_rez", ",", "fm_rez", "]", ",", "[", "nr", ",", "nr", "]", ")", "\n", "self", ".", "dl", "+=", "[", "d", ",", "]", "\n", "if", "u", "is", "not", "None", ":", "\n", "                ", "self", ".", "ul", "+=", "[", "torch", ".", "tensor", "(", "u", ".", "astype", "(", "np", ".", "float32", ")", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "device", ")", ",", "]", "\n", "if", "d", "<", "0", ":", "# downsample rf", "\n", "                    ", "print", "(", "'downsample fpf from'", ",", "nr", ",", "'to'", ",", "fm_rez", ")", "\n", "", "elif", "d", ">", "0", ":", "# downsample fm", "\n", "                    ", "print", "(", "'downsample fmaps from'", ",", "fm_rez", ",", "'to'", ",", "nr", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "ul", "+=", "[", "None", ",", "]", "\n", "print", "(", "'native fpf resolution'", ",", "fm_rez", ")", "\n", "###", "\n", "", "", "self", ".", "nl", "=", "_nonlinearity", "\n", "self", ".", "sm", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "0.001", ",", "size", "=", "(", "nv", ",", "nf", ")", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "device", ")", ")", "\n", "self", ".", "b", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "np", ".", "full", "(", "fill_value", "=", "0.0", ",", "shape", "=", "(", "nv", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.Torch_fwRF_voxel_block.get_param_inits": [[111, 113], ["len", "torch_pfwrf.normal_init"], "methods", ["None"], ["", "def", "get_param_inits", "(", "self", ")", ":", "\n", "        ", "return", "[", "ones_init", ",", "]", "*", "len", "(", "self", ".", "rfs", ")", "+", "[", "normal_init", "(", "0.001", ")", ",", "zeros_init", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.Torch_fwRF_voxel_block.reset_params": [[114, 117], ["zip", "torch_pfwrf.Torch_fwRF_voxel_block.parameters", "torch_pfwrf.Torch_fwRF_voxel_block.get_param_inits", "torch_pfwrf.set_value", "init", "_p.size"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.Torch_fwRF_voxel_block.get_param_inits", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "        ", "for", "_p", ",", "init", "in", "zip", "(", "self", ".", "parameters", "(", ")", ",", "self", ".", "get_param_inits", "(", ")", ")", ":", "\n", "            ", "set_value", "(", "_p", ",", "init", "(", "_p", ".", "size", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.Torch_fwRF_voxel_block.load_voxel_block": [[118, 126], ["zip", "torch_pfwrf.Torch_fwRF_voxel_block.parameters", "len", "numpy.zeros", "torch_pfwrf.set_value", "torch_pfwrf.set_value", "_p.size", "_p.size", "len"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value"], ["", "", "def", "load_voxel_block", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "for", "_p", ",", "p", "in", "zip", "(", "self", ".", "parameters", "(", ")", ",", "params", ")", ":", "\n", "            ", "if", "len", "(", "p", ")", "<", "_p", ".", "size", "(", ")", "[", "0", "]", ":", "\n", "                ", "pp", "=", "np", ".", "zeros", "(", "shape", "=", "_p", ".", "size", "(", ")", ",", "dtype", "=", "p", ".", "dtype", ")", "\n", "pp", "[", ":", "len", "(", "p", ")", "]", "=", "p", "\n", "set_value", "(", "_p", ",", "pp", ")", "\n", "", "else", ":", "\n", "                ", "set_value", "(", "_p", ",", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.Torch_fwRF_voxel_block.forward": [[127, 155], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "zip", "zip", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch_pfwrf.Torch_fwRF_voxel_block.sm", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch_pfwrf.Torch_fwRF_voxel_block.sm", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch_pfwrf.Torch_fwRF_voxel_block.nl", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch_pfwrf.Torch_fwRF_voxel_block.nl", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "_fmaps", ")", ":", "\n", "        ", "phi", "=", "[", "]", "\n", "if", "len", "(", "self", ".", "rfs", ")", "==", "1", ":", "\n", "            ", "for", "fm", ",", "d", ",", "u", "in", "zip", "(", "_fmaps", ",", "self", ".", "dl", ",", "self", ".", "ul", ")", ":", "\n", "                ", "g", "=", "self", ".", "sm", "(", "torch", ".", "flatten", "(", "self", ".", "rfs", "[", "0", "]", ",", "start_dim", "=", "1", ")", ")", "\n", "f", "=", "torch", ".", "flatten", "(", "fm", ",", "start_dim", "=", "2", ")", "\n", "if", "self", ".", "nl", "is", "not", "None", ":", "\n", "                    ", "f", "=", "self", ".", "nl", "(", "f", ")", "\n", "", "if", "d", "<", "0", ":", "# downsample rf", "\n", "                    ", "g", "=", "torch", ".", "mm", "(", "g", ",", "u", ")", "# g : [nv, space]", "\n", "", "elif", "d", ">", "0", ":", "# downsample fm     ", "\n", "                    ", "f", "=", "torch", ".", "tensordot", "(", "f", ",", "u", ",", "dims", "=", "[", "[", "2", "]", ",", "[", "0", "]", "]", ")", "# f : [batch, features, space]", "\n", "", "phi", "+=", "[", "torch", ".", "tensordot", "(", "g", ",", "f", ",", "dims", "=", "[", "[", "1", "]", ",", "[", "2", "]", "]", ")", ",", "]", "# apply pooling field and add to list. phi : [nv, batch, features]              ", "\n", "", "", "else", ":", "\n", "            ", "for", "fm", ",", "rf", ",", "d", ",", "u", "in", "zip", "(", "_fmaps", ",", "self", ".", "rfs", ",", "self", ".", "dl", ",", "self", ".", "ul", ")", ":", "\n", "                ", "g", "=", "self", ".", "sm", "(", "torch", ".", "flatten", "(", "rf", ",", "start_dim", "=", "1", ")", ")", "\n", "f", "=", "torch", ".", "flatten", "(", "fm", ",", "start_dim", "=", "2", ")", "\n", "if", "self", ".", "nl", "is", "not", "None", ":", "\n", "                    ", "f", "=", "self", ".", "nl", "(", "f", ")", "\n", "", "if", "d", "<", "0", ":", "# downsample rf", "\n", "                    ", "g", "=", "torch", ".", "mm", "(", "g", ",", "u", ")", "\n", "", "elif", "d", ">", "0", ":", "# downsample fm               ", "\n", "                    ", "f", "=", "torch", ".", "tensordot", "(", "f", ",", "u", ",", "dims", "=", "[", "[", "2", "]", ",", "[", "0", "]", "]", ")", "\n", "", "phi", "+=", "[", "torch", ".", "tensordot", "(", "g", ",", "f", ",", "dims", "=", "[", "[", "1", "]", ",", "[", "2", "]", "]", ")", ",", "]", "\n", "###", "\n", "", "", "Phi", "=", "torch", ".", "cat", "(", "phi", ",", "dim", "=", "2", ")", "\n", "_r", "=", "torch", ".", "squeeze", "(", "torch", ".", "bmm", "(", "Phi", ",", "torch", ".", "unsqueeze", "(", "self", ".", "w", ",", "2", ")", ")", ")", ".", "t", "(", ")", "+", "torch", ".", "unsqueeze", "(", "self", ".", "b", ",", "0", ")", "# _r : [batch, nv]", "\n", "return", "_r", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf._to_torch": [[21, 23], ["torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "_to_torch", "(", "x", ",", "device", "=", "None", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "x", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.get_value": [[24, 26], ["numpy.copy", "_x.data.cpu().numpy", "_x.data.cpu"], "function", ["None"], ["", "def", "get_value", "(", "_x", ")", ":", "\n", "    ", "return", "np", ".", "copy", "(", "_x", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "def", "set_value", "(", "_x", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.set_value": [[26, 30], ["_x.data.copy_", "list", "list", "_x.resize_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "_x.size"], "function", ["None"], ["", "def", "set_value", "(", "_x", ",", "x", ")", ":", "\n", "    ", "if", "list", "(", "x", ".", "shape", ")", "!=", "list", "(", "_x", ".", "size", "(", ")", ")", ":", "\n", "        ", "_x", ".", "resize_", "(", "x", ".", "shape", ")", "\n", "", "_x", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.flat_init": [[31, 33], ["numpy.full", "numpy.prod"], "function", ["None"], ["", "def", "flat_init", "(", "shape", ")", ":", "\n", "    ", "return", "np", ".", "full", "(", "shape", "=", "shape", ",", "fill_value", "=", "1.", "/", "np", ".", "prod", "(", "shape", "[", "1", ":", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "def", "zeros_init", "(", "shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.zeros_init": [[33, 35], ["numpy.zeros"], "function", ["None"], ["", "def", "zeros_init", "(", "shape", ")", ":", "\n", "    ", "return", "np", ".", "zeros", "(", "shape", "=", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "def", "ones_init", "(", "shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.ones_init": [[35, 37], ["numpy.ones"], "function", ["None"], ["", "def", "ones_init", "(", "shape", ")", ":", "\n", "    ", "return", "np", ".", "ones", "(", "shape", "=", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "class", "normal_init", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.downsampling": [[43, 50], ["src.create_downsampling_array", "src.create_downsampling_array"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.create_downsampling_array", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.create_downsampling_array"], ["", "", "def", "downsampling", "(", "fm_s", ",", "rf_s", ")", ":", "\n", "    ", "if", "fm_s", "==", "rf_s", ":", "\n", "        ", "return", "0", ",", "None", "\n", "", "elif", "fm_s", "[", "0", "]", "<", "rf_s", "[", "0", "]", ":", "\n", "        ", "return", "-", "1", ",", "pnu", ".", "create_downsampling_array", "(", "old_dim", "=", "rf_s", ",", "new_dim", "=", "fm_s", ")", ".", "T", "\n", "", "else", ":", "\n", "        ", "return", "1", ",", "pnu", ".", "create_downsampling_array", "(", "old_dim", "=", "fm_s", ",", "new_dim", "=", "rf_s", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.learn_params_gradient": [[157, 231], ["print", "print", "print", "print", "numpy.arange", "torch.Adam", "numpy.full", "numpy.full", "_fwrf_fn.get_param_inits", "src.numpy_utility.iterate_range", "sys.stdout.flush", "_fwrf_fn", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "next", "numpy.random.shuffle", "_params[].size", "init", "_fwrf_fn.reset_params", "range", "_fmaps_fn", "float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "_fmaps_fn.parameters", "_fwrf_fn.parameters", "float", "zip", "numpy.concatenate", "src.numpy_utility.iterate_range", "numpy.zeros", "src.numpy_utility.iterate_range", "sys.stdout.write", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "optim.Adam.zero_grad", "torch_pfwrf.learn_params_gradient.loss_fn"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.Torch_fwRF_voxel_block.get_param_inits", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.iterate_range", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.Torch_fwRF_voxel_block.reset_params", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.iterate_range", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.iterate_range"], ["", "", "def", "learn_params_gradient", "(", "data", ",", "voxels", ",", "_fmaps_fn", ",", "_fwrf_fn", ",", "sample_batch_size", "=", "100", ",", "holdout_size", "=", "100", ",", "num_epochs", "=", "100", ",", "lr", "=", "1.", ",", "l1", "=", "0.", ",", "l2", "=", "0.", ",", "shuffle", "=", "False", ")", ":", "\n", "    ", "'''The fwrf_fn module needs to have some extra methods:\n    1) get_param_inits()\n    2) reset_params()\n    '''", "\n", "###", "\n", "def", "loss_fn", "(", "x", ",", "v", ")", ":", "\n", "        ", "r", "=", "_fwrf_fn", "(", "_fmaps_fn", "(", "x", ")", ")", "\n", "err", "=", "torch", ".", "sum", "(", "(", "r", "-", "v", ")", "**", "2", ",", "dim", "=", "0", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "err", ")", "\n", "loss", "+=", "float", "(", "l1", ")", "*", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "_fwrf_fn", ".", "w", ")", ")", "\n", "return", "err", ",", "loss", "\n", "\n", "", "dtype", "=", "voxels", ".", "dtype", ".", "type", "\n", "nt", ",", "nv", "=", "voxels", ".", "shape", "\n", "device", "=", "next", "(", "_fmaps_fn", ".", "parameters", "(", ")", ")", ".", "device", "\n", "trn_size", "=", "nt", "-", "holdout_size", "\n", "assert", "trn_size", ">", "0", ",", "'Training size needs to be greater than zero'", "\n", "print", "(", "'trn_size = %d (%.1f%%)'", "%", "(", "trn_size", ",", "float", "(", "trn_size", ")", "*", "100", "/", "nt", ")", ")", "\n", "print", "(", "'dtype = %s'", "%", "dtype", ")", "\n", "print", "(", "'device = %s'", "%", "device", ")", "\n", "print", "(", "'---------------------------------------'", ")", "\n", "\n", "order", "=", "np", ".", "arange", "(", "nt", ",", "dtype", "=", "int", ")", "\n", "if", "shuffle", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "order", ")", "\n", "data", "=", "data", "[", "order", "]", "\n", "voxels", "=", "voxels", "[", "order", "]", "\n", "\n", "", "_params", "=", "[", "_p", "for", "_p", "in", "_fwrf_fn", ".", "parameters", "(", ")", "]", "\n", "voxel_batch_size", "=", "_params", "[", "0", "]", ".", "size", "(", ")", "[", "0", "]", "\n", "import", "torch", ".", "optim", "as", "optim", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "_params", ",", "lr", "=", "float", "(", "lr", ")", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-08", ")", "\n", "\n", "best_epochs", "=", "np", ".", "full", "(", "fill_value", "=", "-", "1", ",", "shape", "=", "(", "nv", ")", ",", "dtype", "=", "int", ")", "\n", "best_losses", "=", "np", ".", "full", "(", "fill_value", "=", "np", ".", "inf", ",", "shape", "=", "(", "nv", ")", ",", "dtype", "=", "dtype", ")", "\n", "param_inits", "=", "_fwrf_fn", ".", "get_param_inits", "(", ")", "\n", "best_param_values", "=", "[", "init", "(", "shape", "=", "(", "nv", ",", ")", "+", "_p", ".", "size", "(", ")", "[", "1", ":", "]", ")", "for", "_p", ",", "init", "in", "zip", "(", "_params", ",", "param_inits", ")", "]", "\n", "\n", "for", "rv", ",", "lv", "in", "iterate_range", "(", "0", ",", "nv", ",", "voxel_batch_size", ")", ":", "\n", "        ", "voxel_batch", "=", "voxels", "[", ":", ",", "rv", "]", "\n", "if", "lv", "<", "voxel_batch_size", ":", "\n", "            ", "voxel_batch", "=", "np", ".", "concatenate", "(", "[", "voxel_batch", ",", "np", ".", "zeros", "(", "shape", "=", "(", "nt", ",", "voxel_batch_size", "-", "lv", ")", ",", "dtype", "=", "dtype", ")", "]", ",", "axis", "=", "1", ")", "\n", "# reset param block", "\n", "", "_fwrf_fn", ".", "reset_params", "(", ")", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "### training loop", "\n", "            ", "for", "rt", ",", "lt", "in", "iterate_range", "(", "0", ",", "trn_size", ",", "sample_batch_size", ")", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "loss", "=", "loss_fn", "(", "_to_torch", "(", "data", "[", "rt", "]", ",", "device", ")", ",", "_to_torch", "(", "voxel_batch", "[", "rt", "]", ",", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "### holdout validation loop", "\n", "", "val_err", "=", "np", ".", "zeros", "(", "shape", "=", "(", "voxel_batch_size", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "rt", ",", "lt", "in", "iterate_range", "(", "trn_size", ",", "holdout_size", ",", "sample_batch_size", ")", ":", "\n", "                ", "err", ",", "_", "=", "loss_fn", "(", "_to_torch", "(", "data", "[", "rt", "]", ",", "device", ")", ",", "_to_torch", "(", "voxel_batch", "[", "rt", "]", ",", "device", ")", ")", "\n", "val_err", "+=", "get_value", "(", "err", ")", "\n", "### save params", "\n", "", "cur_losses", "=", "val_err", "/", "holdout_size", "\n", "cur_params", "=", "[", "get_value", "(", "_p", ")", "for", "_p", "in", "_params", "]", "\n", "\n", "improvement", "=", "(", "cur_losses", "[", ":", "lv", "]", "<=", "best_losses", "[", "rv", "]", ")", "\n", "if", "np", ".", "sum", "(", "improvement", ")", ">", "0", ":", "\n", "                ", "rvimp", "=", "np", ".", "array", "(", "rv", ")", "[", "improvement", "]", "\n", "for", "bpar", ",", "cpar", "in", "zip", "(", "best_param_values", ",", "cur_params", ")", ":", "\n", "                    ", "bpar", "[", "rvimp", "]", "=", "np", ".", "copy", "(", "cpar", "[", ":", "lv", "]", "[", "improvement", "]", ")", "\n", "", "best_losses", "[", "rvimp", "]", "=", "cur_losses", "[", ":", "lv", "]", "[", "improvement", "]", "\n", "best_epochs", "[", "rvimp", "]", "=", "epoch", "+", "1", "\n", "## Then we print the results for this epoch:", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'\\rvoxels [%6d:%-6d] of %d, epoch %3d of %3d, loss = %.6f (%d)'", "%", "(", "rv", "[", "0", "]", ",", "rv", "[", "-", "1", "]", ",", "nv", ",", "epoch", "+", "1", ",", "num_epochs", ",", "np", ".", "mean", "(", "cur_losses", ")", ",", "np", ".", "sum", "(", "improvement", ")", ")", ")", "\n", "", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "return", "best_losses", ",", "best_epochs", ",", "best_param_values", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_pfwrf.get_predictions": [[233, 257], ["print", "numpy.full", "time.time", "print", "print", "print", "print", "sys.stdout.flush", "next", "_params[].size", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "src.numpy_utility.iterate_range", "time.time", "_fmaps_fn.parameters", "_fwrf_fn.parameters", "_fwrf_fn.load_voxel_block", "numpy.full", "src.numpy_utility.iterate_range", "sys.stdout.write", "torch_pfwrf.get_value", "_fwrf_fn", "_fmaps_fn", "torch_pfwrf._to_torch"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.iterate_range", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.Torch_fwRF_voxel_block.load_voxel_block", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.iterate_range", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.get_value", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_feature_space._to_torch"], ["", "def", "get_predictions", "(", "data", ",", "_fmaps_fn", ",", "_fwrf_fn", ",", "params", ",", "sample_batch_size", "=", "100", ")", ":", "\n", "    ", "dtype", "=", "data", ".", "dtype", ".", "type", "\n", "device", "=", "next", "(", "_fmaps_fn", ".", "parameters", "(", ")", ")", ".", "device", "\n", "_params", "=", "[", "_p", "for", "_p", "in", "_fwrf_fn", ".", "parameters", "(", ")", "]", "\n", "voxel_batch_size", "=", "_params", "[", "0", "]", ".", "size", "(", ")", "[", "0", "]", "\n", "nt", ",", "nv", "=", "len", "(", "data", ")", ",", "len", "(", "params", "[", "0", "]", ")", "\n", "print", "(", "'val_size = %d'", "%", "nt", ")", "\n", "pred", "=", "np", ".", "full", "(", "fill_value", "=", "0", ",", "shape", "=", "(", "nt", ",", "nv", ")", ",", "dtype", "=", "dtype", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "rv", ",", "lv", "in", "iterate_range", "(", "0", ",", "nv", ",", "voxel_batch_size", ")", ":", "\n", "            ", "_fwrf_fn", ".", "load_voxel_block", "(", "*", "[", "p", "[", "rv", "]", "for", "p", "in", "params", "]", ")", "\n", "pred_block", "=", "np", ".", "full", "(", "fill_value", "=", "0", ",", "shape", "=", "(", "nt", ",", "voxel_batch_size", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "rt", ",", "lt", "in", "iterate_range", "(", "0", ",", "nt", ",", "sample_batch_size", ")", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "'\\rsamples [%5d:%-5d] of %d, voxels [%6d:%-6d] of %d'", "%", "(", "rt", "[", "0", "]", ",", "rt", "[", "-", "1", "]", ",", "nt", ",", "rv", "[", "0", "]", ",", "rv", "[", "-", "1", "]", ",", "nv", ")", ")", "\n", "pred_block", "[", "rt", "]", "=", "get_value", "(", "_fwrf_fn", "(", "_fmaps_fn", "(", "_to_torch", "(", "data", "[", "rt", "]", ",", "device", ")", ")", ")", ")", "\n", "", "pred", "[", ":", ",", "rv", "]", "=", "pred_block", "[", ":", ",", ":", "lv", "]", "\n", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "'---------------------------------------'", ")", "\n", "print", "(", "'total time = %fs'", "%", "total_time", ")", "\n", "print", "(", "'sample throughput = %fs/sample'", "%", "(", "total_time", "/", "nt", ")", ")", "\n", "print", "(", "'voxel throughput = %fs/voxel'", "%", "(", "total_time", "/", "nv", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "return", "pred", "\n", "", ""]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.timing.frame_to_start_time": [[9, 11], ["None"], "function", ["None"], ["def", "frame_to_start_time", "(", "frame", ",", "timing", ")", ":", "\n", "    ", "return", "timing", "[", "frame", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.timing.frame_to_end_time": [[12, 14], ["None"], "function", ["None"], ["", "def", "frame_to_end_time", "(", "frame", ",", "timing", ")", ":", "\n", "    ", "return", "timing", "[", "frame", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.timing.frame_to_interval": [[15, 17], ["None"], "function", ["None"], ["", "def", "frame_to_interval", "(", "frame", ",", "timing", ")", ":", "\n", "    ", "return", "timing", "[", "frame", "+", "1", "]", "-", "timing", "[", "frame", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.timing.frame_to_image_index": [[18, 23], ["int", "int"], "function", ["None"], ["", "def", "frame_to_image_index", "(", "frame", ")", ":", "\n", "    ", "if", "frame", "%", "2", "==", "0", ":", "# even, now correspond to image", "\n", "        ", "return", "int", "(", "frame", "//", "2", "+", "1", ")", "\n", "", "else", ":", "# odd, correspond to isi, indexed at 0 in array", "\n", "        ", "return", "int", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.timing.sample_to_time": [[26, 28], ["numpy.float32"], "function", ["None"], ["", "", "def", "sample_to_time", "(", "sample_index", ",", "sample_freq", ",", "time_start", "=", "0", ",", "sample_start", "=", "0", ")", ":", "\n", "    ", "return", "np", ".", "float32", "(", "sample_index", "-", "sample_start", ")", "/", "sample_freq", "+", "time_start", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.timing.time_to_sample": [[29, 31], ["int", "numpy.floor"], "function", ["None"], ["", "def", "time_to_sample", "(", "time", ",", "sample_freq", ",", "time_start", "=", "0", ",", "sample_start", "=", "0", ")", ":", "\n", "    ", "return", "int", "(", "np", ".", "floor", "(", "(", "time", "-", "time_start", ")", "*", "sample_freq", ")", ")", "+", "sample_start", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.timing.time_to_frame": [[34, 37], ["int", "numpy.sum"], "function", ["None"], ["", "def", "time_to_frame", "(", "time", ",", "timing", ")", ":", "\n", "    ", "'''return -1 if time requested is before the start of the experiment'''", "\n", "return", "int", "(", "np", ".", "sum", "(", "(", "timing", "-", "time", ")", "<", "0", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.timing.time_to_image_index": [[38, 40], ["timing.frame_to_image_index", "timing.time_to_frame"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.timing.frame_to_image_index", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.timing.time_to_frame"], ["", "def", "time_to_image_index", "(", "time", ",", "timing", ")", ":", "\n", "    ", "return", "frame_to_image_index", "(", "time_to_frame", "(", "time", ",", "timing", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.Gaborizer.__init__": [[282, 342], ["torch.Module.__init__", "gabor_feature_extractor.make_feature_table", "gabor_feature_extractor.make_filter_stack", "numpy.unique", "gabor_feature_extractor.Gaborizer.feature_table[].unique", "numpy.min", "numpy.max", "len", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "gabor_feature_extractor.GaborFeatExtractor", "gabor_feature_extractor.Gaborizer.gfe_list.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.real", "numpy.imag"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.Alexnet_fmaps.__init__", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.make_feature_table", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.make_filter_stack"], ["def", "__init__", "(", "self", ",", "num_orientations", ",", "cycles_per_stim", ",", "\n", "freq_spacing", "=", "'log'", ",", "pix_per_cycle", "=", "2", ",", "cycles_per_radius", "=", "1", ",", "\n", "radii_per_filter", "=", "4", ",", "complex_cell", "=", "True", ",", "pad_type", "=", "'half'", ",", "\n", "crop", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "Gaborizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_orientations", "=", "num_orientations", "\n", "self", ".", "freq_spacing", "=", "freq_spacing", ",", "\n", "self", ".", "pix_per_cycle", "=", "pix_per_cycle", "\n", "self", ".", "cycles_per_radius", "=", "cycles_per_radius", ",", "\n", "self", ".", "radii_per_filter", "=", "radii_per_filter", "\n", "self", ".", "complex_cell", "=", "complex_cell", "\n", "self", ".", "pad_type", "=", "pad_type", "\n", "self", ".", "crop", "=", "crop", "\n", "\n", "(", "self", ".", "feature_table", ",", "\n", "self", ".", "pix_per_filter", ",", "\n", "self", ".", "cycles_per_filter", ",", "\n", "self", ".", "envelope_radius_pix", ")", "=", "make_feature_table", "(", "num_orientations", ",", "\n", "cycles_per_stim", ",", "\n", "freq_spacing", ",", "\n", "pix_per_cycle", ",", "\n", "cycles_per_radius", ",", "\n", "radii_per_filter", ",", "\n", "complex_cell", "=", "self", ".", "complex_cell", ")", "\n", "\n", "self", ".", "filter_stack_expanded", "=", "make_filter_stack", "(", "self", ".", "feature_table", ",", "\n", "self", ".", "pix_per_filter", ",", "\n", "self", ".", "cycles_per_filter", ",", "\n", "self", ".", "envelope_radius_pix", ",", "\n", "complex_cell", "=", "self", ".", "complex_cell", ")", "\n", "\n", "\n", "#narrow filter stack down to only unique filters (should = num_orientations)", "\n", "uniq_filters", "=", "np", ".", "unique", "(", "self", ".", "filter_stack_expanded", ",", "axis", "=", "0", ")", "\n", "\n", "#split into real and imag gabor filters and represent ea. as tensor ", "\n", "if", "complex_cell", ":", "\n", "            ", "self", ".", "real_filters_tnsr", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "np", ".", "real", "(", "uniq_filters", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "imag_filters_tnsr", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "np", ".", "imag", "(", "uniq_filters", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "requires_grad", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "real_filters_tnsr", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "uniq_filters", ",", "dtype", "=", "torch", ".", "float32", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "imag_filters_tnsr", "=", "None", "\n", "\n", "#from table, get unique stim resolutions (corresponds to the diff. spatial frequencies being extracted)", "\n", "", "stim_sizes", "=", "self", ".", "feature_table", "[", "'pix per stimulus'", "]", ".", "unique", "(", ")", "\n", "self", ".", "lowest_freq", "=", "np", ".", "min", "(", "stim_sizes", ")", "\n", "self", ".", "highest_freq", "=", "np", ".", "max", "(", "stim_sizes", ")", "\n", "self", ".", "num_sp_freq", "=", "len", "(", "stim_sizes", ")", "\n", "\n", "#make a list of feature extractors, ea. extracting a diff freq (by resampling image to diff size before conv)", "\n", "self", ".", "gfe_list", "=", "[", "]", "\n", "\n", "for", "new_dim", "in", "stim_sizes", ":", "\n", "\n", "#create instance of torch feature extractor with the given resampling parameter", "\n", "            ", "feature_extractor", "=", "GaborFeatExtractor", "(", "self", ".", "real_filters_tnsr", ",", "self", ".", "imag_filters_tnsr", ",", "\n", "(", "new_dim", ",", "new_dim", ")", ",", "pad_type", "=", "self", ".", "pad_type", ",", "crop", "=", "self", ".", "crop", ")", "\n", "self", ".", "gfe_list", ".", "append", "(", "feature_extractor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.Gaborizer.forward": [[345, 358], ["enumerate", "gfe", "feature_map_list.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "minibatch_stim_tnsr", ")", ":", "\n", "\n", "        ", "feature_map_list", "=", "[", "]", "\n", "\n", "for", "n", ",", "gfe", "in", "enumerate", "(", "self", ".", "gfe_list", ")", ":", "\n", "\n", "#for given freq, create feature map for each gabor orientation ", "\n", "            ", "sing_freq_features", "=", "gfe", "(", "minibatch_stim_tnsr", ")", "#size [num stim, num orientations, stim pix, stim pix]", "\n", "\n", "#put each feature map tensor into a list of tensors ", "\n", "feature_map_list", ".", "append", "(", "sing_freq_features", ")", "\n", "\n", "", "return", "feature_map_list", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.GaborFeatExtractor.__init__": [[363, 373], ["torch.Module.__init__", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.Alexnet_fmaps.__init__"], ["    ", "def", "__init__", "(", "self", ",", "real_filters_tnsr", ",", "imag_filters_tnsr", ",", "new_dim", ",", "pad_type", "=", "'half'", ",", "crop", "=", "False", ")", ":", "\n", "        ", "super", "(", "GaborFeatExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "real_filters_tnsr", "=", "real_filters_tnsr", "\n", "self", ".", "imag_filters_tnsr", "=", "imag_filters_tnsr", "\n", "self", ".", "pad_type", "=", "pad_type", "\n", "self", ".", "crop", "=", "crop", "\n", "\n", "#this will be the stimulus resampling function ", "\n", "self", ".", "resam", "=", "torch", ".", "nn", ".", "Upsample", "(", "new_dim", ",", "mode", "=", "\"bilinear\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.GaborFeatExtractor.forward": [[375, 406], ["gabor_feature_extractor.GaborFeatExtractor.resam", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "numpy.round().astype", "numpy.round"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "minibatch_stim_tnsr", ")", ":", "\n", "\n", "#resize stimuli", "\n", "        ", "resampled_stim_stack", "=", "self", ".", "resam", "(", "minibatch_stim_tnsr", ")", "\n", "input_sz", "=", "resampled_stim_stack", ".", "shape", "[", "2", "]", "\n", "\n", "#sort out stimulus padding", "\n", "assert", "self", ".", "pad_type", "in", "[", "'half'", ",", "'full'", "]", ",", "'pad_type must be either \\'half\\' or \\'full\\''", "\n", "if", "self", ".", "pad_type", "is", "'half'", ":", "\n", "            ", "pad_sz", "=", "self", ".", "real_filters_tnsr", ".", "shape", "[", "2", "]", "//", "2", "#pad input w/ sym. border that is the floor the filter width/2", "\n", "", "else", ":", "\n", "            ", "pad_sz", "=", "self", ".", "real_filters_tnsr", ".", "shape", "[", "2", "]", "-", "1", "#apply filter wherever it partly overlaps with the input", "\n", "\n", "#convolve stim with filters (returns feat maps of size [num stim, num orientations, stim pix, stim pix])", "\n", "", "real_feature_map_tnsr", "=", "F", ".", "conv2d", "(", "resampled_stim_stack", ",", "self", ".", "real_filters_tnsr", ",", "stride", "=", "1", ",", "padding", "=", "pad_sz", ")", "\n", "\n", "#if was complex_cell, get imag feature map as well and square/sum real and imag parts", "\n", "if", "self", ".", "imag_filters_tnsr", "is", "not", "None", ":", "\n", "            ", "imag_feature_map_tnsr", "=", "F", ".", "conv2d", "(", "resampled_stim_stack", ",", "self", ".", "imag_filters_tnsr", ",", "stride", "=", "1", ",", "padding", "=", "pad_sz", ")", "\n", "sngl_sf_featmap_tnsr", "=", "torch", ".", "sqrt", "(", "(", "real_feature_map_tnsr", "**", "2", ")", "+", "(", "imag_feature_map_tnsr", "**", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "sngl_sf_featmap_tnsr", "=", "real_feature_map_tnsr", "\n", "\n", "#crop image back down to input size, if desired", "\n", "", "if", "self", ".", "crop", ":", "\n", "            ", "crop_start", "=", "np", ".", "round", "(", "(", "sngl_sf_featmap_tnsr", ".", "shape", "[", "2", "]", "-", "input_sz", ")", "/", "2", ")", ".", "astype", "(", "'int'", ")", "\n", "crop_stop", "=", "crop_start", "+", "input_sz", "\n", "\n", "sngl_sf_featmap_tnsr", "=", "sngl_sf_featmap_tnsr", "[", ":", ",", ":", ",", "crop_start", ":", "crop_stop", ",", "crop_start", ":", "crop_stop", "]", "\n", "\n", "", "return", "sngl_sf_featmap_tnsr", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.make_2D_sinewave": [[8, 26], ["numpy.meshgrid", "numpy.array().T.dot", "numpy.sin", "Dt.reshape.reshape", "numpy.linspace", "numpy.linspace", "numpy.array", "numpy.array", "Xm.ravel", "Ym.ravel", "numpy.cos", "numpy.sin"], "function", ["None"], ["def", "make_2D_sinewave", "(", "freq", ",", "theta", ",", "phase", ",", "n_pix", ")", ":", "\n", "    ", "'''\n    freq is cycles/image\n    theta is in radians\n    phase is in radians (0 pi)\n    center is (x,y) in pixel coordinates\n    n_pix is size of the kernel in pixels\n    '''", "\n", "vec", "=", "np", ".", "array", "(", "[", "np", ".", "cos", "(", "theta", ")", ",", "np", ".", "sin", "(", "theta", ")", "]", ")", "*", "2", "*", "np", ".", "pi", "*", "freq", "/", "n_pix", "\n", "\n", "[", "Xm", ",", "Ym", "]", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", ".5", "*", "n_pix", ",", ".5", "*", "n_pix", ",", "n_pix", ")", ",", "np", ".", "linspace", "(", "-", ".5", "*", "n_pix", ",", ".5", "*", "n_pix", ",", "n_pix", ")", ")", "\n", "\n", "proj", "=", "np", ".", "array", "(", "[", "Xm", ".", "ravel", "(", ")", ",", "Ym", ".", "ravel", "(", ")", "]", ")", ".", "T", ".", "dot", "(", "vec", ")", "\n", "\n", "Dt", "=", "np", ".", "sin", "(", "proj", "+", "phase", ")", "# compute proportion of Xm for given orientation", "\n", "Dt", "=", "Dt", ".", "reshape", "(", "Xm", ".", "shape", ")", "\n", "\n", "return", "Dt", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.make_gaussian": [[30, 46], ["numpy.meshgrid", "numpy.linspace", "numpy.linspace", "numpy.exp"], "function", ["None"], ["", "def", "make_gaussian", "(", "center", ",", "sig", ",", "n_pix", ")", ":", "\n", "    ", "\"\"\"\n    Make a picture of a circular gaussian blob.\n    center is the center of the blob in pixels. center of image is (0,0)\n    sig is one std. of the gaussian (pixels)\n    n_pix is the size of the picture of the gaussian blob. i.e., output will be an 2D array that is n_pix-by-n_pix\n    \"\"\"", "\n", "\n", "[", "Xm", ",", "Ym", "]", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", ".5", "*", "n_pix", ",", ".5", "*", "n_pix", ",", "n_pix", ")", ",", "np", ".", "linspace", "(", "-", ".5", "*", "n_pix", ",", ".5", "*", "n_pix", ",", "n_pix", ")", ")", "\n", "\n", "x0", "=", "center", "[", "0", "]", "\n", "y0", "=", "center", "[", "1", "]", "\n", "\n", "Z", "=", "(", "1.", "/", "(", "2", "*", "np", ".", "pi", "*", "sig", "**", "2", ")", ")", "\n", "\n", "return", "Z", "*", "np", ".", "exp", "(", "-", "(", "(", "Xm", "-", "x0", ")", "**", "2", "+", "(", "Ym", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "sig", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.make_gabor": [[50, 52], ["gabor_feature_extractor.make_2D_sinewave", "gabor_feature_extractor.make_gaussian"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.make_2D_sinewave", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.make_gaussian"], ["", "def", "make_gabor", "(", "freq", ",", "theta", ",", "phase", ",", "center", ",", "sig", ",", "n_pix", ")", ":", "\n", "    ", "return", "make_2D_sinewave", "(", "freq", ",", "theta", ",", "phase", ",", "n_pix", ")", "*", "make_gaussian", "(", "center", ",", "sig", ",", "n_pix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.make_complex_gabor": [[56, 72], ["gabor_feature_extractor.make_gabor", "gabor_feature_extractor.make_gabor"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.make_gabor", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.make_gabor"], ["", "def", "make_complex_gabor", "(", "freq", ",", "theta", ",", "center", ",", "sig", ",", "n_pix", ")", ":", "\n", "    ", "'''\n    make_complex_gabor(freq, theta, center, sig, n_pix)\n    freq is spatial frequency in cycles/image\n    theta is orientation in radians\n    center is (x,y) in pixel coordinates. center of image is (0,0)\n    sig is one std of the gaussian envelope (pixels)\n    n_pix is size of the kernel in pixels\n    \n    '''", "\n", "phase", "=", "0", "\n", "on_gabor", "=", "make_gabor", "(", "freq", ",", "theta", ",", "phase", ",", "center", ",", "sig", ",", "n_pix", ")", "\n", "phase", "=", "np", ".", "pi", "/", "2.", "\n", "off_gabor", "=", "make_gabor", "(", "freq", ",", "theta", ",", "phase", ",", "center", ",", "sig", ",", "n_pix", ")", "\n", "\n", "return", "off_gabor", "+", "1j", "*", "on_gabor", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.make_feature_table": [[76, 190], ["numpy.linspace", "isinstance", "int", "numpy.round().astype", "pandas.DataFrame", "pd.concat.copy", "type", "numpy.round", "pd.concat.copy", "pandas.concat", "pandas.concat", "len", "numpy.logspace", "type", "numpy.array", "numpy.round", "numpy.log10", "numpy.log10", "numpy.linspace", "type"], "function", ["None"], ["", "def", "make_feature_table", "(", "num_orientations", ",", "cycles_per_stim", ",", "\n", "freq_spacing", "=", "'log'", ",", "pix_per_cycle", "=", "2", ",", "cycles_per_radius", "=", "1", ",", "\n", "radii_per_filter", "=", "4", ",", "complex_cell", "=", "True", ")", ":", "\n", "    ", "'''\n    Generates a table of parameters used to apply a gabor transform.\n    This approach assumes that the gabors will be of fixed size (in pixels), but the image\n    the gabors are applied to are downsampled, effectively determining the spatial frequency extracted \n    from the image.\n    \n    Returns everything needed to construct a stack of gabor filters. \n    \n    feature_table, pix_per_filter, cyc_per_filter, envelope_radius_pix =\n                                      make_feature_table((num_orientations, \n                                                          cycles_per_stim,\n                                                          freq_spacing='log', \n                                                          pix_per_cycle=2, \n                                                          cycles_per_radius=1, \n                                                          radii_per_filter=4, \n                                                          complex_cell=True)\n                     \n    num_orientations  ~ number of linearly spaced orientations in [0,pi]\n    cycles_per_stim   ~ either a tuple specifying range and number of spatial frequencies in cyc/stim \n                        (lowest, highest, num), or an explicit list of spatial frequencies (as np array or list)    \n    freq_spacing      ~ log or linear. spacing of spatial frequencies. used only if cycles_per_stim is given as \n                        range. \n    pix_per_cycle     ~ how many pixels will be used to depict one cycle. default = 2, i.e., the Nyquist limit.\n                        If too low, will result in jaggy edges or aliasing, but if too high, usually will require \n                        stimuli with larger than native resolution.\n    cycles_per_radius ~ determines radius of gaussian envelop. we specify how many cycles the sinewave completes\n                        per radius (1std.) of the gaussian envelope. default = 1 = one cycle of the sinewave per \n                        std. of the gaussian envelope.\n    radii_per_filter  ~ determines the size of the filter. we specify how many radii (1std. each) of the gaussian\n                        envelope fits inside of the filter. default = 4.\n    complex_cell      ~ default = True, meaning that ea. feature map represents a given spatial frequency \n                        that is phase invariant (the absolute value is taken between a pair of feature maps \n                        constructed using filters with 0 and pi/2 phase). if False, we distinguish between \n                        filters with 0 and pi/2 phase, resulting in 2 feature maps for each spatial frequency.\n    \n    returns\n    feature_table        ~ a pandas table with details of each feature to be extracted from images.\n    pix_per_filter       ~ number of pixels per filter.  a constant.\n    cyc_per_filter       ~ number of cycles per filter.  a constant.\n    envelope_radius_pix  ~ number of pixels needed for one std. of the gaussian envelope. a constant.\n            \n    \n    Note: depending on the size of your stimuli and the given parameters, you will be limited to a certain range \n    of spatial frequencies. If the lowest frequency is too low, the filter will be larger than the downsampled \n    image, which is kind of dumb. If the highest frequency is too high, the image will have to be upsampled to \n    obtain the required number of pixels per cycle, which is also dumb (not possible to capture a spatial \n    frequency that is higher than the original resolution of the image). The \"full\" range will have a lowest \n    frequency where the image is downsampled to the size of the filter, and a highest frequency where the image \n    is not downsampled at all. The larger the number of pixels per cycle, the smaller this range will be.\n    \n    '''", "\n", "\n", "oris", "=", "np", ".", "linspace", "(", "0", ",", "np", ".", "pi", ",", "num", "=", "num_orientations", ",", "endpoint", "=", "False", ")", "\n", "\n", "##------Sort out spatial frequencies to extract", "\n", "assert", "isinstance", "(", "cycles_per_stim", ",", "(", "tuple", ",", "list", ",", "np", ".", "ndarray", ")", ")", ",", "'cycles_per_stim must either be a tuple of len 3 (min, max, num), or an explicit list of spatial freqs (np array or list)'", "\n", "\n", "##if range of freqs given", "\n", "if", "type", "(", "cycles_per_stim", ")", "is", "tuple", ":", "\n", "        ", "assert", "len", "(", "cycles_per_stim", ")", "==", "3", ",", "'exactly 3 args required if cycles_per_stim is given as tuple (min, max, num)'", "\n", "if", "freq_spacing", "==", "'log'", ":", "\n", "            ", "cycles_per_stim", "=", "np", ".", "logspace", "(", "np", ".", "log10", "(", "cycles_per_stim", "[", "0", "]", ")", ",", "np", ".", "log10", "(", "cycles_per_stim", "[", "1", "]", ")", ",", "num", "=", "cycles_per_stim", "[", "2", "]", ")", "\n", "", "elif", "freq_spacing", "==", "'linear'", ":", "\n", "            ", "cycles_per_stim", "=", "np", ".", "linspace", "(", "cycles_per_stim", "[", "0", "]", ",", "cycles_per_stim", "[", "1", "]", ",", "num", "=", "cycles_per_stim", "[", "2", "]", ")", "\n", "\n", "#if explicit freqs given", "\n", "", "", "elif", "type", "(", "cycles_per_stim", ")", "is", "list", ":", "\n", "        ", "cycles_per_stim", "=", "np", ".", "array", "(", "cycles_per_stim", ")", "\n", "", "elif", "type", "(", "cycles_per_stim", ")", "is", "np", ".", "ndarray", ":", "\n", "        ", "pass", "\n", "\n", "\n", "##------Inferred from your choices", "\n", "##radius (1 std) of gaussian envelope of gabor filters in pixels", "\n", "", "envelope_radius_pix", "=", "pix_per_cycle", "*", "cycles_per_radius", "\n", "\n", "##cycles per filter", "\n", "cycles_per_filter", "=", "cycles_per_radius", "*", "radii_per_filter", "##should be constant", "\n", "\n", "##given the num of cycles in a filter and the pix/cyc, this is how big the filter should be in pixels", "\n", "pix_per_filter", "=", "int", "(", "np", ".", "round", "(", "cycles_per_filter", "*", "pix_per_cycle", ")", ")", "##should be constant", "\n", "\n", "##given the num of cycles in a stim and the pix/cyc, this is how big the stim should be in pixels", "\n", "pix_per_stim", "=", "np", ".", "round", "(", "cycles_per_stim", "*", "pix_per_cycle", ")", ".", "astype", "(", "'int'", ")", "\n", "\n", "\n", "##------Construct pandas table of features ", "\n", "metrics", "=", "{", "'cycles per stimulus'", ":", "cycles_per_stim", ",", "\n", "'pix per stimulus'", ":", "pix_per_stim", ",", "\n", "'cycles per filter'", ":", "cycles_per_filter", ",", "\n", "'pix per filter'", ":", "pix_per_filter", ",", "\n", "'gauss. env. radius (pix)'", ":", "envelope_radius_pix", "}", "\n", "\n", "feature_table", "=", "pd", ".", "DataFrame", "(", "metrics", ")", "\n", "if", "not", "complex_cell", ":", "\n", "        ", "feature_table", "[", "'phase'", "]", "=", "0", "\n", "other_feature_table", "=", "feature_table", ".", "copy", "(", ")", "\n", "other_feature_table", "[", "'phase'", "]", "=", "np", ".", "pi", "/", "2.", "\n", "feature_table", "=", "pd", ".", "concat", "(", "[", "feature_table", ",", "other_feature_table", "]", ",", "axis", "=", "0", ",", "ignore_index", "=", "True", ")", "\n", "\n", "", "feature_table", "[", "'orientation'", "]", "=", "oris", "[", "0", "]", "\n", "tmp_feature_table", "=", "feature_table", ".", "copy", "(", ")", "\n", "for", "o", "in", "oris", "[", "1", ":", "]", ":", "\n", "        ", "tmp_feature_table", "[", "'orientation'", "]", "=", "o", "\n", "feature_table", "=", "pd", ".", "concat", "(", "[", "feature_table", ",", "tmp_feature_table", "]", ",", "axis", "=", "0", ",", "ignore_index", "=", "True", ")", "\n", "\n", "\n", "", "return", "(", "feature_table", ",", "\n", "pix_per_filter", ",", "\n", "cycles_per_filter", ",", "\n", "envelope_radius_pix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.make_filter_stack": [[194, 215], ["numpy.zeros", "numpy.float32", "enumerate", "range", "gabor_feature_extractor.make_complex_gabor", "gabor_feature_extractor.make_gabor"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.make_complex_gabor", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.gabor_feature_extractor.make_gabor"], ["", "def", "make_filter_stack", "(", "feature_table", ",", "pix_per_filter", ",", "cycles_per_filter", ",", "envelope_radius_pix", ",", "complex_cell", "=", "True", ",", "color_channels", "=", "1", ")", ":", "\n", "\n", "##initialize", "\n", "    ", "filter_stack", "=", "np", ".", "zeros", "(", "(", "feature_table", ".", "shape", "[", "0", "]", ",", "color_channels", ",", "pix_per_filter", ",", "pix_per_filter", ")", ")", "\n", "if", "complex_cell", ":", "\n", "        ", "filter_stack", "=", "filter_stack", "+", "1j", "\n", "\n", "##args to gaborme", "\n", "", "center", "=", "(", "0", ",", "0", ")", "\n", "freq", "=", "cycles_per_filter", "\n", "radius", "=", "np", ".", "float32", "(", "envelope_radius_pix", ")", "\n", "for", "ii", ",", "tx", "in", "enumerate", "(", "feature_table", ".", "index", ")", ":", "\n", "        ", "ori", "=", "feature_table", ".", "loc", "[", "tx", ",", "'orientation'", "]", "\n", "for", "c", "in", "range", "(", "color_channels", ")", ":", "\n", "            ", "if", "complex_cell", ":", "\n", "                ", "filter_stack", "[", "ii", ",", "c", ",", ":", ",", ":", "]", "=", "make_complex_gabor", "(", "freq", ",", "ori", ",", "center", ",", "radius", ",", "pix_per_filter", ")", "\n", "", "else", ":", "\n", "                ", "ph", "=", "feature_table", ".", "loc", "[", "ii", ",", "'phase'", "]", "\n", "filter_stack", "[", "ii", ",", "c", ",", ":", ",", ":", "]", "=", "make_gabor", "(", "freq", ",", "ori", ",", "ph", ",", "center", ",", "radius", ",", "pix_per_filter", ")", "\n", "\n", "", "", "", "return", "filter_stack", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.Torch_fwRF_voxel_block.__init__": [[35, 66], ["torch.Module.__init__", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "_fmaps_fn", "enumerate", "enumerate", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "next", "torch_fwrf.Torch_fwRF_voxel_block.register_parameter", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "_fmaps_fn.parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "src.make_gaussian_mass_stack", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "_fm.size", "_fm.size", "_fm.size", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.Alexnet_fmaps.__init__", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.make_gaussian_mass_stack"], ["def", "__init__", "(", "self", ",", "_fmaps_fn", ",", "params", ",", "_nonlinearity", "=", "None", ",", "input_shape", "=", "(", "1", ",", "3", ",", "227", ",", "227", ")", ",", "aperture", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Torch_fwRF_voxel_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "aperture", "=", "aperture", "\n", "models", ",", "weights", ",", "bias", ",", "mstmt", ",", "mstst", "=", "params", "\n", "device", "=", "next", "(", "_fmaps_fn", ".", "parameters", "(", ")", ")", ".", "device", "\n", "_x", "=", "torch", ".", "empty", "(", "(", "1", ",", ")", "+", "input_shape", "[", "1", ":", "]", ",", "device", "=", "device", ")", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "_fmaps", "=", "_fmaps_fn", "(", "_x", ")", "\n", "self", ".", "fmaps_rez", "=", "[", "]", "\n", "for", "k", ",", "_fm", "in", "enumerate", "(", "_fmaps", ")", ":", "\n", "            ", "assert", "_fm", ".", "size", "(", ")", "[", "2", "]", "==", "_fm", ".", "size", "(", ")", "[", "3", "]", ",", "'All feature maps need to be square'", "\n", "self", ".", "fmaps_rez", "+=", "[", "_fm", ".", "size", "(", ")", "[", "2", "]", ",", "]", "\n", "\n", "", "self", ".", "pfs", "=", "[", "]", "\n", "for", "k", ",", "n_pix", "in", "enumerate", "(", "self", ".", "fmaps_rez", ")", ":", "\n", "            ", "pf", "=", "pnu", ".", "make_gaussian_mass_stack", "(", "models", "[", ":", ",", "0", "]", ",", "models", "[", ":", ",", "1", "]", ",", "models", "[", ":", ",", "2", "]", ",", "n_pix", ",", "size", "=", "aperture", ",", "dtype", "=", "np", ".", "float32", ")", "[", "2", "]", "\n", "self", ".", "pfs", "+=", "[", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "pf", ")", ".", "to", "(", "device", ")", ",", "requires_grad", "=", "False", ")", ",", "]", "\n", "self", ".", "register_parameter", "(", "'pf%d'", "%", "k", ",", "self", ".", "pfs", "[", "-", "1", "]", ")", "\n", "\n", "", "self", ".", "weights", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "weights", ")", ".", "to", "(", "device", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "bias", "=", "None", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "bias", ")", ".", "to", "(", "device", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "", "self", ".", "mstm", "=", "None", "\n", "self", ".", "msts", "=", "None", "\n", "if", "mstmt", "is", "not", "None", ":", "\n", "            ", "self", ".", "mstm", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "mstmt", ".", "T", ")", ".", "to", "(", "device", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "if", "mstst", "is", "not", "None", ":", "\n", "            ", "self", ".", "msts", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "mstst", ".", "T", ")", ".", "to", "(", "device", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "self", ".", "_nl", "=", "_nonlinearity", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.Torch_fwRF_voxel_block.load_voxel_block": [[67, 93], ["zip", "zip", "zip", "src.make_gaussian_mass_stack", "len", "numpy.zeros", "torch_fwrf.set_value", "torch_fwrf.set_value", "_pf.size", "len", "numpy.zeros", "torch_fwrf.set_value", "torch_fwrf.set_value", "len", "numpy.zeros", "torch_fwrf.set_value", "torch_fwrf.set_value", "_pf.size", "len", "_p.size", "_p.size", "_p.size", "len", "len", "_p.size", "_p.size"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.make_gaussian_mass_stack", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value"], ["", "def", "load_voxel_block", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "models", "=", "params", "[", "0", "]", "\n", "for", "_pf", ",", "n_pix", "in", "zip", "(", "self", ".", "pfs", ",", "self", ".", "fmaps_rez", ")", ":", "\n", "            ", "pf", "=", "pnu", ".", "make_gaussian_mass_stack", "(", "models", "[", ":", ",", "0", "]", ",", "models", "[", ":", ",", "1", "]", ",", "models", "[", ":", ",", "2", "]", ",", "n_pix", ",", "size", "=", "self", ".", "aperture", ",", "dtype", "=", "np", ".", "float32", ")", "[", "2", "]", "\n", "if", "len", "(", "pf", ")", "<", "_pf", ".", "size", "(", ")", "[", "0", "]", ":", "\n", "                ", "pp", "=", "np", ".", "zeros", "(", "shape", "=", "_pf", ".", "size", "(", ")", ",", "dtype", "=", "pf", ".", "dtype", ")", "\n", "pp", "[", ":", "len", "(", "pf", ")", "]", "=", "pf", "\n", "set_value", "(", "_pf", ",", "pp", ")", "\n", "", "else", ":", "\n", "                ", "set_value", "(", "_pf", ",", "pf", ")", "\n", "", "", "for", "_p", ",", "p", "in", "zip", "(", "[", "self", ".", "weights", ",", "self", ".", "bias", "]", ",", "params", "[", "1", ":", "3", "]", ")", ":", "\n", "            ", "if", "_p", "is", "not", "None", ":", "\n", "                ", "if", "len", "(", "p", ")", "<", "_p", ".", "size", "(", ")", "[", "0", "]", ":", "\n", "                    ", "pp", "=", "np", ".", "zeros", "(", "shape", "=", "_p", ".", "size", "(", ")", ",", "dtype", "=", "p", ".", "dtype", ")", "\n", "pp", "[", ":", "len", "(", "p", ")", "]", "=", "p", "\n", "set_value", "(", "_p", ",", "pp", ")", "\n", "", "else", ":", "\n", "                    ", "set_value", "(", "_p", ",", "p", ")", "\n", "", "", "", "for", "_p", ",", "p", "in", "zip", "(", "[", "self", ".", "mstm", ",", "self", ".", "msts", "]", ",", "params", "[", "3", ":", "]", ")", ":", "\n", "            ", "if", "_p", "is", "not", "None", ":", "\n", "                ", "if", "len", "(", "p", ")", "<", "_p", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "                    ", "pp", "=", "np", ".", "zeros", "(", "shape", "=", "(", "_p", ".", "size", "(", ")", "[", "1", "]", ",", "_p", ".", "size", "(", ")", "[", "0", "]", ")", ",", "dtype", "=", "p", ".", "dtype", ")", "\n", "pp", "[", ":", "len", "(", "p", ")", "]", "=", "p", "\n", "set_value", "(", "_p", ",", "pp", ".", "T", ")", "\n", "", "else", ":", "\n", "                    ", "set_value", "(", "_p", ",", "p", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.Torch_fwRF_voxel_block.forward": [[94, 107], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch_fwrf.Torch_fwRF_voxel_block._nl", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "zip", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "_fmaps", ")", ":", "\n", "        ", "_mst", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensordot", "(", "_fm", ",", "_pf", ",", "dims", "=", "[", "[", "2", ",", "3", "]", ",", "[", "1", ",", "2", "]", "]", ")", "for", "_fm", ",", "_pf", "in", "zip", "(", "_fmaps", ",", "self", ".", "pfs", ")", "]", ",", "dim", "=", "1", ")", "# [#samples, #features, #voxels] ", "\n", "if", "self", ".", "_nl", "is", "not", "None", ":", "\n", "            ", "_mst", "=", "self", ".", "_nl", "(", "_mst", ")", "\n", "", "if", "self", ".", "mstm", "is", "not", "None", ":", "\n", "            ", "_mst", "-=", "self", ".", "mstm", "[", "None", "]", "\n", "", "if", "self", ".", "msts", "is", "not", "None", ":", "\n", "            ", "_mst", "/=", "self", ".", "msts", "[", "None", "]", "\n", "", "_mst", "=", "torch", ".", "transpose", "(", "torch", ".", "transpose", "(", "_mst", ",", "0", ",", "2", ")", ",", "1", ",", "2", ")", "# [#voxels, #samples, features]", "\n", "_r", "=", "torch", ".", "squeeze", "(", "torch", ".", "bmm", "(", "_mst", ",", "torch", ".", "unsqueeze", "(", "self", ".", "weights", ",", "2", ")", ")", ")", ".", "t", "(", ")", "# [#samples, #voxels]", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "_r", "+=", "torch", ".", "unsqueeze", "(", "self", ".", "bias", ",", "0", ")", "\n", "", "return", "_r", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.get_value": [[20, 22], ["numpy.copy", "_x.data.cpu().numpy", "_x.data.cpu"], "function", ["None"], ["def", "get_value", "(", "_x", ")", ":", "\n", "    ", "return", "np", ".", "copy", "(", "_x", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "def", "set_value", "(", "_x", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.set_value": [[22, 26], ["_x.data.copy_", "list", "list", "_x.resize_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "_x.size"], "function", ["None"], ["", "def", "set_value", "(", "_x", ",", "x", ")", ":", "\n", "    ", "if", "list", "(", "x", ".", "shape", ")", "!=", "list", "(", "_x", ".", "size", "(", ")", ")", ":", "\n", "        ", "_x", ".", "resize_", "(", "x", ".", "shape", ")", "\n", "", "_x", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf._to_torch": [[27, 29], ["torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "_to_torch", "(", "x", ",", "device", "=", "None", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "x", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.learn_params_ridge_regression": [[110, 282], ["print", "print", "print", "print", "len", "len", "numpy.arange", "_fmaps_fn", "enumerate", "print", "numpy.full", "numpy.full", "numpy.full", "numpy.zeros", "time.time", "print", "print", "print", "print", "print", "print", "sys.stdout.flush", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "next", "len", "len", "numpy.random.shuffle", "torch_fwrf._to_torch", "print", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "time.time", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "_fmaps_fn.parameters", "_fm.size", "_fm.size", "numpy.zeros", "src.numpy_utility.iterate_range", "torch_fwrf._to_torch", "torch_fwrf._to_torch", "torch_fwrf.learn_params_ridge_regression._cofactor_fn"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_feature_space._to_torch", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.iterate_range", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_feature_space._to_torch", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_feature_space._to_torch"], ["", "", "def", "learn_params_ridge_regression", "(", "data", ",", "voxels", ",", "_fmaps_fn", ",", "models", ",", "lambdas", ",", "aperture", "=", "1.0", ",", "_nonlinearity", "=", "None", ",", "zscore", "=", "False", ",", "sample_batch_size", "=", "100", ",", "voxel_batch_size", "=", "100", ",", "holdout_size", "=", "100", ",", "shuffle", "=", "True", ",", "add_bias", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Learn the parameters of the fwRF model\n\n    Parameters\n    ----------\n    data : ndarray, shape (#samples, #channels, x, y)\n        Input image block.\n    voxels: ndarray, shape (#samples, #voxels)\n        Input voxel activities.\n    _fmaps_fn: Torch module\n        Torch module that returns a list of torch tensors.\n    models: ndarray, shape (#candidateRF, 3)\n        The (x, y, sigma) of all candidate RFs for gridsearch.\n    lambdas: ndarray, shape (#candidateRegression)\n        The rigde parameter candidates.\n    aperture (default: 1.0): scalar\n        The span of the stimulus in the unit used for the RF models.\n    _nonlinearity (default: None)\n        A nonlinearity expressed with torch's functions.\n    zscore (default: False)\n        Whether to zscore the feature maps or not.\n    sample_batch_size (default: 100)\n        The sample batch size (used where appropriate)\n    voxel_batch_size (default: 100) \n        The voxel batch size (used where appropriate)\n    holdout_size (default: 100) \n        The holdout size for model and hyperparameter selection\n    shuffle (default: True)\n        Whether to shuffle the training set or not.\n    add_bias (default: False)\n        Whether to add a bias term to the rigde regression or not.\n\n    Returns\n    -------\n    losses : ndarray, shape (#voxels)\n        The final loss for each voxel.\n    lambdas : ndarray, shape (#voxels)\n        The regression regularization index for each voxel.\n    models : ndarray, shape (#voxels, 3)\n        The RF model (x, y, sigma) associated with each voxel.\n    params : list of ndarray, shape (#voxels, #features)\n        Can contain a bias parameter of shape (#voxels) if add_bias is True.\n    mst_mean : ndarray, shape (#voxels, #feature)\n        None if zscore is False. Otherwise returns zscoring average per feature.\n    mst_std : ndarray, shape (#voxels, #feature)\n        None if zscore is False. Otherwise returns zscoring std.dev. per feature.\n    \"\"\"", "\n", "def", "_cofactor_fn", "(", "_x", ",", "lambdas", ")", ":", "\n", "        ", "'''input matrix [#samples, #features], a list of lambda values'''", "\n", "_f", "=", "torch", ".", "stack", "(", "[", "(", "torch", ".", "mm", "(", "torch", ".", "t", "(", "_x", ")", ",", "_x", ")", "+", "torch", ".", "eye", "(", "_x", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "device", ")", "*", "l", ")", ".", "inverse", "(", ")", "for", "l", "in", "lambdas", "]", ",", "0", ")", "# [#lambdas, #feature, #feature]       ", "\n", "return", "torch", ".", "tensordot", "(", "_f", ",", "_x", ",", "dims", "=", "[", "[", "2", "]", ",", "[", "1", "]", "]", ")", "# [#lambdas, #feature, #sample]", "\n", "\n", "", "def", "_loss_fn", "(", "_cofactor", ",", "_vtrn", ",", "_xout", ",", "_vout", ")", ":", "\n", "        ", "'''input '''", "\n", "_beta", "=", "torch", ".", "tensordot", "(", "_cofactor", ",", "_vtrn", ",", "dims", "=", "[", "[", "2", "]", ",", "[", "0", "]", "]", ")", "# [#lambdas, #feature, #voxel]", "\n", "_pred", "=", "torch", ".", "tensordot", "(", "_xout", ",", "_beta", ",", "dims", "=", "[", "[", "1", "]", ",", "[", "1", "]", "]", ")", "# [#samples, #lambdas, #voxels]", "\n", "_loss", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "_vout", "[", ":", ",", "None", ",", ":", "]", "-", "_pred", ",", "2", ")", ",", "dim", "=", "0", ")", "# [#lambdas, #voxels]", "\n", "return", "_beta", ",", "_loss", "\n", "\n", "#############################################################################", "\n", "", "dtype", "=", "data", ".", "dtype", ".", "type", "\n", "device", "=", "next", "(", "_fmaps_fn", ".", "parameters", "(", ")", ")", ".", "device", "\n", "trn_size", "=", "len", "(", "voxels", ")", "-", "holdout_size", "\n", "assert", "trn_size", ">", "0", ",", "'Training size needs to be greater than zero'", "\n", "print", "(", "'trn_size = %d (%.1f%%)'", "%", "(", "trn_size", ",", "float", "(", "trn_size", ")", "*", "100", "/", "len", "(", "voxels", ")", ")", ")", "\n", "print", "(", "'dtype = %s'", "%", "dtype", ")", "\n", "print", "(", "'device = %s'", "%", "device", ")", "\n", "print", "(", "'---------------------------------------'", ")", "\n", "# shuffle", "\n", "nt", "=", "len", "(", "data", ")", "# number of images", "\n", "nm", "=", "len", "(", "models", ")", "\n", "nv", "=", "voxels", ".", "shape", "[", "1", "]", "\n", "order", "=", "np", ".", "arange", "(", "len", "(", "voxels", ")", ",", "dtype", "=", "int", ")", "\n", "if", "shuffle", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "order", ")", "\n", "", "data", "=", "data", "[", "order", "]", "\n", "voxels", "=", "voxels", "[", "order", "]", "\n", "trn_voxels", "=", "voxels", "[", ":", "trn_size", "]", "\n", "out_voxels", "=", "voxels", "[", "trn_size", ":", "]", "\n", "### Calculate total feature count", "\n", "nf", "=", "0", "# number of channels of the feature maps", "\n", "_fmaps", "=", "_fmaps_fn", "(", "_to_torch", "(", "data", "[", ":", "sample_batch_size", "]", ",", "device", "=", "device", ")", ")", "#this is the feature maps got from the sample batch ", "\n", "\n", "fmaps_rez", "=", "[", "]", "\n", "for", "k", ",", "_fm", "in", "enumerate", "(", "_fmaps", ")", ":", "\n", "        ", "nf", "+=", "_fm", ".", "size", "(", ")", "[", "1", "]", "\n", "assert", "_fm", ".", "size", "(", ")", "[", "2", "]", "==", "_fm", ".", "size", "(", ")", "[", "3", "]", ",", "'All feature maps need to be square'", "\n", "fmaps_rez", "+=", "[", "_fm", "[", "k", "]", ".", "size", "(", ")", "[", "2", "]", ",", "]", "\n", "print", "(", "_fm", ".", "size", "(", ")", ")", "\n", "", "print", "(", "'---------------------------------------'", ")", "\n", "#############################################################################        ", "\n", "### Create full model value buffers    ", "\n", "best_models", "=", "np", ".", "full", "(", "shape", "=", "(", "nv", ",", ")", ",", "fill_value", "=", "-", "1", ",", "dtype", "=", "np", ".", "int", ")", "\n", "best_lambdas", "=", "np", ".", "full", "(", "shape", "=", "(", "nv", ",", ")", ",", "fill_value", "=", "-", "1", ",", "dtype", "=", "np", ".", "int", ")", "\n", "best_losses", "=", "np", ".", "full", "(", "fill_value", "=", "np", ".", "inf", ",", "shape", "=", "(", "nv", ")", ",", "dtype", "=", "dtype", ")", "\n", "best_w_params", "=", "np", ".", "zeros", "(", "shape", "=", "(", "nv", ",", "nf", ")", ",", "dtype", "=", "dtype", ")", "\n", "if", "add_bias", ":", "# add bias to the parameters", "\n", "        ", "best_w_params", "=", "np", ".", "concatenate", "(", "[", "best_w_params", ",", "np", ".", "ones", "(", "shape", "=", "(", "len", "(", "best_w_params", ")", ",", "1", ")", ",", "dtype", "=", "dtype", ")", "]", ",", "axis", "=", "1", ")", "\n", "", "mst_mean", "=", "None", "\n", "mst_std", "=", "None", "\n", "if", "zscore", ":", "# for every voxel and every feature channel, there is a mena and std for zscore", "\n", "        ", "mst_mean", "=", "np", ".", "zeros", "(", "shape", "=", "(", "nv", ",", "nf", ")", ",", "dtype", "=", "dtype", ")", "\n", "mst_std", "=", "np", ".", "zeros", "(", "shape", "=", "(", "nv", ",", "nf", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "vox_loop_time", "=", "0", "\n", "print", "(", "''", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "m", ",", "(", "x", ",", "y", ",", "sigma", ")", "in", "enumerate", "(", "models", ")", ":", "# for each combination of the hyperparameters", "\n", "            ", "mst", "=", "np", ".", "zeros", "(", "shape", "=", "(", "nt", ",", "nf", ")", ",", "dtype", "=", "dtype", ")", "# [#images, #features]", "\n", "_pfs", "=", "[", "_to_torch", "(", "pnu", ".", "make_gaussian_mass", "(", "x", ",", "y", ",", "sigma", ",", "n_pix", ",", "size", "=", "aperture", ",", "dtype", "=", "dtype", ")", "[", "2", "]", ",", "device", "=", "device", ")", "for", "n_pix", "in", "fmaps_rez", "]", "\n", "for", "rt", ",", "rl", "in", "iterate_range", "(", "0", ",", "nt", ",", "sample_batch_size", ")", ":", "# loop through images", "\n", "                ", "_mst", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensordot", "(", "_fm", ",", "_pf", ",", "dims", "=", "[", "[", "2", ",", "3", "]", ",", "[", "0", ",", "1", "]", "]", ")", "for", "_fm", ",", "_pf", "in", "zip", "(", "_fmaps_fn", "(", "_to_torch", "(", "data", "[", "rt", "]", ",", "device", "=", "device", ")", ")", ",", "_pfs", ")", "]", ",", "dim", "=", "1", ")", "# [#samples, #features]", "\n", "if", "_nonlinearity", "is", "not", "None", ":", "\n", "                    ", "_mst", "=", "_nonlinearity", "(", "_mst", ")", "\n", "", "mst", "[", "rt", "]", "=", "get_value", "(", "_mst", ")", "\n", "", "if", "zscore", ":", "\n", "                ", "mstm", "=", "np", ".", "mean", "(", "mst", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "#[:trn_size]", "\n", "msts", "=", "np", ".", "std", "(", "mst", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-6", "\n", "mst", "-=", "mstm", "\n", "mst", "/=", "msts", "\n", "", "if", "add_bias", ":", "\n", "                ", "mst", "=", "np", ".", "concatenate", "(", "[", "mst", ",", "np", ".", "ones", "(", "shape", "=", "(", "len", "(", "mst", ")", ",", "1", ")", ",", "dtype", "=", "dtype", ")", "]", ",", "axis", "=", "1", ")", "\n", "", "trn_mst", "=", "mst", "[", ":", "trn_size", "]", "\n", "out_mst", "=", "mst", "[", "trn_size", ":", "]", "\n", "\n", "_xtrn", "=", "_to_torch", "(", "trn_mst", ",", "device", "=", "device", ")", "\n", "_xout", "=", "_to_torch", "(", "out_mst", ",", "device", "=", "device", ")", "\n", "_cof", "=", "_cofactor_fn", "(", "_xtrn", ",", "lambdas", ")", "#[#lambdas, #feature, #sample]", "\n", "\n", "###    ", "\n", "vox_start", "=", "time", ".", "time", "(", ")", "\n", "for", "rv", ",", "lv", "in", "iterate_range", "(", "0", ",", "nv", ",", "voxel_batch_size", ")", ":", "# loop for each voxel", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "'\\rmodel %4d of %-4d, voxels [%6d:%-6d] of %d'", "%", "(", "m", ",", "nm", ",", "rv", "[", "0", "]", ",", "rv", "[", "-", "1", "]", ",", "nv", ")", ")", "\n", "\n", "_vtrn", "=", "_to_torch", "(", "trn_voxels", "[", ":", ",", "rv", "]", ",", "device", "=", "device", ")", "\n", "_vout", "=", "_to_torch", "(", "out_voxels", "[", ":", ",", "rv", "]", ",", "device", "=", "device", ")", "\n", "\n", "_betas", ",", "_loss", "=", "_loss_fn", "(", "_cof", ",", "_vtrn", ",", "_xout", ",", "_vout", ")", "#   [#lambda, #feature, #voxel, ], [#lambda, #voxel]", "\n", "_values", ",", "_select", "=", "torch", ".", "min", "(", "_loss", ",", "dim", "=", "0", ")", "\n", "\n", "betas", "=", "get_value", "(", "_betas", ")", "\n", "values", ",", "select", "=", "get_value", "(", "_values", ")", ",", "get_value", "(", "_select", ")", "\n", "imp", "=", "values", "<", "best_losses", "[", "rv", "]", "\n", "if", "np", ".", "sum", "(", "imp", ")", ">", "0", ":", "\n", "                    ", "arv", "=", "np", ".", "array", "(", "rv", ")", "[", "imp", "]", "\n", "li", "=", "select", "[", "imp", "]", "\n", "best_lambdas", "[", "arv", "]", "=", "li", "\n", "best_losses", "[", "arv", "]", "=", "values", "[", "imp", "]", "\n", "best_models", "[", "arv", "]", "=", "m", "\n", "if", "zscore", ":", "\n", "                        ", "mst_mean", "[", "arv", "]", "=", "mstm", "# broadcast over updated voxels", "\n", "mst_std", "[", "arv", "]", "=", "msts", "\n", "", "best_w_params", "[", "arv", ",", ":", "]", "=", "pnu", ".", "select_along_axis", "(", "betas", "[", ":", ",", ":", ",", "imp", "]", ",", "li", ",", "run_axis", "=", "2", ",", "choice_axis", "=", "0", ")", ".", "T", "\n", "", "", "vox_loop_time", "+=", "(", "time", ".", "time", "(", ")", "-", "vox_start", ")", "\n", "\n", "#############################################################################   ", "\n", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "inv_time", "=", "total_time", "-", "vox_loop_time", "\n", "return_params", "=", "[", "best_w_params", "[", ":", ",", ":", "nf", "]", ",", "]", "\n", "if", "add_bias", ":", "\n", "        ", "return_params", "+=", "[", "best_w_params", "[", ":", ",", "-", "1", "]", ",", "]", "\n", "", "else", ":", "\n", "        ", "return_params", "+=", "[", "None", ",", "]", "\n", "", "print", "(", "'\\n---------------------------------------'", ")", "\n", "print", "(", "'total time = %fs'", "%", "total_time", ")", "\n", "print", "(", "'total throughput = %fs/voxel'", "%", "(", "total_time", "/", "nv", ")", ")", "\n", "print", "(", "'voxel throughput = %fs/voxel'", "%", "(", "vox_loop_time", "/", "nv", ")", ")", "\n", "print", "(", "'setup throughput = %fs/model'", "%", "(", "inv_time", "/", "nm", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "return", "best_losses", ",", "best_lambdas", ",", "[", "models", "[", "best_models", "]", ",", "]", "+", "return_params", "+", "[", "mst_mean", ",", "mst_std", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.get_predictions": [[285, 342], ["numpy.full", "time.time", "print", "print", "print", "print", "sys.stdout.flush", "next", "_params[].size", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "src.numpy_utility.iterate_range", "time.time", "_fmaps_fn.parameters", "_fwrf_fn.parameters", "_fwrf_fn.load_voxel_block", "numpy.full", "src.numpy_utility.iterate_range", "sys.stdout.write", "torch_fwrf.get_value", "_fwrf_fn", "_fmaps_fn", "torch_fwrf._to_torch"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.iterate_range", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.Torch_fwRF_voxel_block.load_voxel_block", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.iterate_range", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_fwrf.get_value", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_feature_space._to_torch"], ["", "def", "get_predictions", "(", "data", ",", "_fmaps_fn", ",", "_fwrf_fn", ",", "params", ",", "sample_batch_size", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    The predictive fwRF model for arbitrary input image.\n\n    Parameters\n    ----------\n    data : ndarray, shape (#samples, #channels, x, y)\n        Input image block.\n    _fmaps_fn: Torch module\n        Torch module that returns a list of torch tensors.\n    _fwrf_fn: Torch module\n\tTorch module that compute the fwrf model for one batch of voxels\n    params: list including all of the following:\n    [\n        models : ndarray, shape (#voxels, 3)\n            The RF model (x, y, sigma) associated with each voxel.\n        weights : ndarray, shape (#voxels, #features)\n            Tuning weights\n        bias: Can contain a bias parameter of shape (#voxels) if add_bias is True.\n           Tuning biases: None if there are no bias\n        mst_mean (optional): ndarray, shape (#voxels, #feature)\n            None if zscore is False. Otherwise returns zscoring average per feature.\n        mst_std (optional): ndarray, shape (#voxels, #feature)\n            None if zscore is False. Otherwise returns zscoring std.dev. per feature.\n    ]\n    sample_batch_size (default: 100)\n        The sample batch size (used where appropriate)\n\n    Returns\n    -------\n    pred : ndarray, shape (#samples, #voxels)\n        The prediction of voxel activities for each voxels associated with the input data.\n    \"\"\"", "\n", "dtype", "=", "data", ".", "dtype", ".", "type", "\n", "device", "=", "next", "(", "_fmaps_fn", ".", "parameters", "(", ")", ")", ".", "device", "\n", "_params", "=", "[", "_p", "for", "_p", "in", "_fwrf_fn", ".", "parameters", "(", ")", "]", "\n", "voxel_batch_size", "=", "_params", "[", "0", "]", ".", "size", "(", ")", "[", "0", "]", "\n", "nt", ",", "nv", "=", "len", "(", "data", ")", ",", "len", "(", "params", "[", "0", "]", ")", "\n", "#print ('val_size = %d' % nt)", "\n", "pred", "=", "np", ".", "full", "(", "fill_value", "=", "0", ",", "shape", "=", "(", "nt", ",", "nv", ")", ",", "dtype", "=", "dtype", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "rv", ",", "lv", "in", "iterate_range", "(", "0", ",", "nv", ",", "voxel_batch_size", ")", ":", "\n", "            ", "_fwrf_fn", ".", "load_voxel_block", "(", "*", "[", "p", "[", "rv", "]", "if", "p", "is", "not", "None", "else", "None", "for", "p", "in", "params", "]", ")", "\n", "pred_block", "=", "np", ".", "full", "(", "fill_value", "=", "0", ",", "shape", "=", "(", "nt", ",", "voxel_batch_size", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "rt", ",", "lt", "in", "iterate_range", "(", "0", ",", "nt", ",", "sample_batch_size", ")", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "'\\rsamples [%5d:%-5d] of %d, voxels [%6d:%-6d] of %d'", "%", "(", "rt", "[", "0", "]", ",", "rt", "[", "-", "1", "]", ",", "nt", ",", "rv", "[", "0", "]", ",", "rv", "[", "-", "1", "]", ",", "nv", ")", ")", "\n", "pred_block", "[", "rt", "]", "=", "get_value", "(", "_fwrf_fn", "(", "_fmaps_fn", "(", "_to_torch", "(", "data", "[", "rt", "]", ",", "device", ")", ")", ")", ")", "\n", "\n", "", "pred", "[", ":", ",", "rv", "]", "=", "pred_block", "[", ":", ",", ":", "lv", "]", "\n", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "'\\n---------------------------------------'", ")", "\n", "print", "(", "'total time = %fs'", "%", "total_time", ")", "\n", "print", "(", "'sample throughput = %fs/sample'", "%", "(", "total_time", "/", "nt", ")", ")", "\n", "print", "(", "'voxel throughput = %fs/voxel'", "%", "(", "total_time", "/", "nv", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.load_nsd.load_beta_file": [[8, 39], ["h5py.File", "numpy.copy", "print", "h5py.File.close", "numpy.mean", "numpy.std", "numpy.nan_to_num", "print", "numpy.min", "numpy.max", "load_mask_from_nii().transpose", "print", "load_mask_from_nii().transpose.reshape().astype", "[].astype", "numpy.min", "numpy.max", "print", "print", "load_mask_from_nii", "load_mask_from_nii().transpose.reshape().astype", "[].astype", "numpy.mean", "numpy.mean", "load_mask_from_nii().transpose.reshape", "load_mask_from_nii().transpose.reshape", "load_mask_from_nii().transpose.reshape", "len", "load_mask_from_nii().transpose.reshape", "len", "voxel_mask.flatten", "len", "len", "voxel_mask.flatten"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.load_mask_from_nii"], ["def", "load_beta_file", "(", "filename", ",", "voxel_mask", "=", "None", ",", "zscore", "=", "True", ")", ":", "\n", "    ", "from", "src", ".", "file_utility", "import", "load_mask_from_nii", "\n", "if", "\".mat\"", "in", "filename", ":", "\n", "        ", "beta_data_set", "=", "h5py", ".", "File", "(", "filename", ",", "'r'", ")", "\n", "values", "=", "np", ".", "copy", "(", "beta_data_set", "[", "'betas'", "]", ")", "\n", "print", "(", "values", ".", "dtype", ",", "np", ".", "min", "(", "values", ")", ",", "np", ".", "max", "(", "values", ")", ",", "values", ".", "shape", ")", "\n", "if", "voxel_mask", "is", "None", ":", "\n", "            ", "beta", "=", "values", ".", "reshape", "(", "(", "len", "(", "values", ")", ",", "-", "1", ")", ",", "order", "=", "'F'", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "300.", "\n", "", "else", ":", "\n", "            ", "beta", "=", "values", ".", "reshape", "(", "(", "len", "(", "values", ")", ",", "-", "1", ")", ",", "order", "=", "'F'", ")", "[", ":", ",", "voxel_mask", ".", "flatten", "(", ")", "]", ".", "astype", "(", "np", ".", "float32", ")", "/", "300.", "\n", "", "beta_data_set", ".", "close", "(", ")", "\n", "", "elif", "\".nii\"", "in", "filename", ":", "\n", "        ", "values", "=", "load_mask_from_nii", "(", "filename", ")", ".", "transpose", "(", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "\n", "print", "(", "values", ".", "dtype", ",", "np", ".", "min", "(", "values", ")", ",", "np", ".", "max", "(", "values", ")", ",", "values", ".", "shape", ")", "\n", "if", "voxel_mask", "is", "None", ":", "\n", "            ", "beta", "=", "values", ".", "reshape", "(", "(", "len", "(", "values", ")", ",", "-", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "300.", "\n", "", "else", ":", "\n", "            ", "beta", "=", "values", ".", "reshape", "(", "(", "len", "(", "values", ")", ",", "-", "1", ")", ")", "[", ":", ",", "voxel_mask", ".", "flatten", "(", ")", "]", ".", "astype", "(", "np", ".", "float32", ")", "/", "300.", "\n", "", "", "elif", "\".h5\"", "in", "filename", ":", "\n", "        ", "print", "(", "\".h5 not yet implemented\"", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unknown file format\"", ")", "\n", "return", "None", "\n", "###", "\n", "", "if", "zscore", ":", "\n", "        ", "mb", "=", "np", ".", "mean", "(", "beta", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "sb", "=", "np", ".", "std", "(", "beta", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "beta", "=", "np", ".", "nan_to_num", "(", "(", "beta", "-", "mb", ")", "/", "(", "sb", "+", "1e-6", ")", ")", "\n", "print", "(", "\"<beta> = %.3f, <sigma> = %.3f\"", "%", "(", "np", ".", "mean", "(", "mb", ")", ",", "np", ".", "mean", "(", "sb", ")", ")", ")", "\n", "", "return", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.load_nsd.load_betas": [[42, 57], ["list_files", "numpy.concatenate", "filename.split", "print", "load_nsd.load_beta_file"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.list_files", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.load_nsd.load_beta_file"], ["", "def", "load_betas", "(", "folder_name", ",", "zscore", "=", "False", ",", "voxel_mask", "=", "None", ",", "up_to", "=", "0", ",", "load_ext", "=", "'.mat'", ")", ":", "\n", "    ", "'''load beta value in the structure of the NSD experiemnt'''", "\n", "from", "src", ".", "file_utility", "import", "list_files", "\n", "matfiles", ",", "betas", "=", "[", "]", ",", "[", "]", "\n", "k", "=", "0", "\n", "for", "filename", "in", "list_files", "(", "folder_name", ")", ":", "\n", "        ", "filename_no_path", "=", "filename", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "'betas'", "in", "filename_no_path", "and", "load_ext", "in", "filename_no_path", ":", "\n", "            ", "k", "+=", "1", "\n", "if", "up_to", ">", "0", "and", "k", ">", "up_to", ":", "\n", "                ", "break", "\n", "", "print", "(", "filename", ")", "\n", "matfiles", "+=", "[", "filename", ",", "]", "\n", "betas", "+=", "[", "load_beta_file", "(", "filename", ",", "voxel_mask", "=", "voxel_mask", ",", "zscore", "=", "zscore", ")", ",", "]", "\n", "", "", "return", "np", ".", "concatenate", "(", "betas", ",", "axis", "=", "0", ")", ",", "matfiles", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.load_nsd.image_feature_fn": [[58, 61], ["image.astype"], "function", ["None"], ["", "def", "image_feature_fn", "(", "image", ")", ":", "\n", "    ", "'''take uint8 image and return floating point (0,1), either color or bw'''", "\n", "return", "image", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.load_nsd.image_uncolorize_fn": [[62, 65], ["image.astype"], "function", ["None"], ["", "def", "image_uncolorize_fn", "(", "image", ")", ":", "\n", "    ", "data", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "\n", "return", "(", "0.2126", "*", "data", "[", ":", ",", "0", ":", "1", "]", "+", "0.7152", "*", "data", "[", ":", ",", "1", ":", "2", "]", "+", "0.0722", "*", "data", "[", ":", ",", "2", ":", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.load_nsd.data_split": [[68, 95], ["print", "numpy.unique", "numpy.zeros", "enumerate", "numpy.mean", "len"], "function", ["None"], ["", "def", "data_split", "(", "stim", ",", "voxel", ",", "ordering", ",", "imagewise", "=", "True", ")", ":", "\n", "    ", "data_size", ",", "nv", "=", "voxel", ".", "shape", "\n", "print", "(", "\"Total number of voxels = %d\"", "%", "nv", ")", "\n", "ordering_data", "=", "ordering", "[", ":", "data_size", "]", "\n", "shared_mask", "=", "ordering_data", "<", "1000", "# the first 1000 indices are the shared indices", "\n", "\n", "val_voxel_st", "=", "voxel", "[", "shared_mask", "]", "\n", "val_stim_st", "=", "stim", "[", "ordering_data", "[", "shared_mask", "]", "]", "\n", "\n", "idx", ",", "idx_count", "=", "np", ".", "unique", "(", "ordering_data", ",", "return_counts", "=", "True", ")", "\n", "idx_list", "=", "[", "ordering_data", "==", "i", "for", "i", "in", "idx", "]", "\n", "voxel_avg_data", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "idx", ")", ",", "nv", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "idx_list", ")", ":", "\n", "        ", "voxel_avg_data", "[", "i", "]", "=", "np", ".", "mean", "(", "voxel", "[", "m", "]", ",", "axis", "=", "0", ")", "\n", "", "shared_mask_mt", "=", "idx", "<", "1000", "\n", "\n", "val_voxel_mt", "=", "voxel_avg_data", "[", "shared_mask_mt", "]", "\n", "val_stim_mt", "=", "stim", "[", "idx", "]", "[", "shared_mask_mt", "]", "\n", "\n", "if", "imagewise", ":", "\n", "        ", "trn_voxel", "=", "voxel_avg_data", "[", "~", "shared_mask_mt", "]", "\n", "trn_stim", "=", "stim", "[", "idx", "]", "[", "~", "shared_mask_mt", "]", "\n", "return", "trn_stim", ",", "trn_voxel", ",", "val_stim_st", ",", "val_voxel_st", ",", "val_stim_mt", ",", "val_voxel_mt", "\n", "", "else", ":", "\n", "        ", "trn_voxel", "=", "voxel", "[", "~", "shared_mask", "]", "\n", "trn_stim", "=", "stim", "[", "ordering_data", "[", "~", "shared_mask", "]", "]", "\n", "return", "trn_stim", ",", "trn_voxel", ",", "val_stim_st", ",", "val_voxel_st", ",", "val_stim_mt", ",", "val_voxel_mt", "", "", "", ""]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_feature_space.Torch_filter_fmaps.__init__": [[27, 35], ["torch.Module.__init__", "enumerate", "next", "torch.Parameter", "torch.Parameter", "torch_feature_space.Torch_filter_fmaps.register_parameter", "_fmaps.parameters", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.Alexnet_fmaps.__init__"], ["    ", "def", "__init__", "(", "self", ",", "_fmaps", ",", "lmask", ",", "fmask", ")", ":", "\n", "        ", "super", "(", "Torch_filter_fmaps", ",", "self", ")", ".", "__init__", "(", ")", "\n", "device", "=", "next", "(", "_fmaps", ".", "parameters", "(", ")", ")", ".", "device", "\n", "self", ".", "fmaps", "=", "_fmaps", "\n", "self", ".", "lmask", "=", "lmask", "\n", "self", ".", "fmask", "=", "[", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "fm", ")", ".", "to", "(", "device", ")", ",", "requires_grad", "=", "False", ")", "for", "fm", "in", "fmask", "]", "\n", "for", "k", ",", "fm", "in", "enumerate", "(", "self", ".", "fmask", ")", ":", "\n", "             ", "self", ".", "register_parameter", "(", "'fm%d'", "%", "k", ",", "fm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_feature_space.Torch_filter_fmaps.forward": [[36, 39], ["torch_feature_space.Torch_filter_fmaps.fmaps", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "_x", ")", ":", "\n", "        ", "_fmaps", "=", "self", ".", "fmaps", "(", "_x", ")", "\n", "return", "[", "torch", ".", "index_select", "(", "torch", ".", "cat", "(", "[", "_fmaps", "[", "l", "]", "for", "l", "in", "lm", "]", ",", "1", ")", ",", "dim", "=", "1", ",", "index", "=", "fm", ")", "for", "lm", ",", "fm", "in", "zip", "(", "self", ".", "lmask", ",", "self", ".", "fmask", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_feature_space._to_torch": [[14, 16], ["torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "_to_torch", "(", "x", ",", "device", "=", "None", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "x", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_feature_space.iterate_range": [[17, 24], ["int", "int", "range", "range", "range"], "function", ["None"], ["", "def", "iterate_range", "(", "start", ",", "length", ",", "batchsize", ")", ":", "\n", "    ", "batch_count", "=", "int", "(", "length", "//", "batchsize", ")", "\n", "residual", "=", "int", "(", "length", "%", "batchsize", ")", "\n", "for", "i", "in", "range", "(", "batch_count", ")", ":", "\n", "        ", "yield", "range", "(", "start", "+", "i", "*", "batchsize", ",", "start", "+", "(", "i", "+", "1", ")", "*", "batchsize", ")", ",", "batchsize", "\n", "", "if", "(", "residual", ">", "0", ")", ":", "\n", "        ", "yield", "range", "(", "start", "+", "batch_count", "*", "batchsize", ",", "start", "+", "length", ")", ",", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_feature_space.get_tuning_masks": [[42, 49], ["numpy.zeros"], "function", ["None"], ["", "", "def", "get_tuning_masks", "(", "layer_rlist", ",", "fmaps_count", ")", ":", "\n", "    ", "tuning_masks", "=", "[", "]", "\n", "for", "rl", "in", "layer_rlist", ":", "\n", "        ", "tm", "=", "np", ".", "zeros", "(", "shape", "=", "(", "fmaps_count", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "tm", "[", "rl", "]", "=", "True", "\n", "tuning_masks", "+=", "[", "tm", ",", "]", "\n", "", "return", "tuning_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_feature_space.filter_dnn_feature_maps": [[51, 119], ["fmaps_fn", "tqdm.tqdm", "range", "enumerate", "sum", "print", "sys.stdout.flush", "torch_feature_space.get_tuning_masks", "next", "len", "numpy.zeros", "numpy.zeros", "torch_feature_space.iterate_range", "fmaps_fn", "enumerate", "len", "numpy.zeros", "numpy.zeros", "print", "sys.stdout.flush", "range", "enumerate", "enumerate", "numpy.sum", "torch_feature_space.Torch_filter_fmaps", "_fmaps_fn.parameters", "numpy.copy", "zip", "numpy.array", "numpy.concatenate", "print", "sys.stdout.flush", "sum", "numpy.sum", "_fm.data.cpu().numpy", "_fmaps_fn", "numpy.sum", "numpy.sum", "fmap_var[].argsort", "numpy.unique", "numpy.arange", "numpy.concatenate", "numpy.array", "sum", "torch_feature_space._to_torch", "numpy.mean", "numpy.mean", "len", "numpy.arange", "numpy.arange", "_fm.data.cpu", "f.astype", "numpy.square", "numpy.square", "numpy.sort", "numpy.prod", "numpy.prod", "len", "len", "f.astype"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_feature_space.get_tuning_masks", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.iterate_range", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.torch_feature_space._to_torch"], ["", "def", "filter_dnn_feature_maps", "(", "data", ",", "_fmaps_fn", ",", "batch_size", ",", "fmap_max", "=", "1024", ",", "concatenate", "=", "True", ",", "trn_size", "=", "None", ")", ":", "\n", "    ", "'''Runs over the image set and keep the fmap_max features with the most variance withing each layer of the network.\n    Return an updated torch function and a list of binary mask that match the new feature space to identify the layer provenance of the feature'''", "\n", "device", "=", "next", "(", "_fmaps_fn", ".", "parameters", "(", ")", ")", ".", "device", "\n", "size", "=", "trn_size", "if", "trn_size", "is", "not", "None", "else", "len", "(", "data", ")", "\n", "#    _fmaps = _fmaps_fn(_to_torch(data[:batch_size], device=device))", "\n", "fmaps_fn", "=", "lambda", "x", ":", "[", "np", ".", "copy", "(", "_fm", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "for", "_fm", "in", "_fmaps_fn", "(", "_to_torch", "(", "x", ",", "device", "=", "device", ")", ")", "]", "\n", "fmaps", "=", "fmaps_fn", "(", "data", "[", ":", "batch_size", "]", ")", "\n", "run_avg", "=", "[", "np", ".", "zeros", "(", "shape", "=", "(", "fm", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float64", ")", "for", "fm", "in", "fmaps", "]", "\n", "run_sqr", "=", "[", "np", ".", "zeros", "(", "shape", "=", "(", "fm", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float64", ")", "for", "fm", "in", "fmaps", "]", "\n", "for", "rr", ",", "rl", "in", "tqdm", "(", "iterate_range", "(", "0", ",", "size", ",", "batch_size", ")", ")", ":", "\n", "        ", "fb", "=", "fmaps_fn", "(", "data", "[", "rr", "]", ")", "\n", "for", "k", ",", "f", "in", "enumerate", "(", "fb", ")", ":", "\n", "            ", "if", "f", ".", "shape", "[", "1", "]", ">", "fmap_max", ":", "# only need the average if we're going to use them to reduce the number of feature maps", "\n", "                ", "run_avg", "[", "k", "]", "+=", "np", ".", "sum", "(", "np", ".", "mean", "(", "f", ".", "astype", "(", "np", ".", "float64", ")", ",", "axis", "=", "(", "2", ",", "3", ")", ")", ",", "axis", "=", "0", ")", "\n", "run_sqr", "[", "k", "]", "+=", "np", ".", "sum", "(", "np", ".", "mean", "(", "np", ".", "square", "(", "f", ".", "astype", "(", "np", ".", "float64", ")", ")", ",", "axis", "=", "(", "2", ",", "3", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "", "for", "k", "in", "range", "(", "len", "(", "fb", ")", ")", ":", "\n", "        ", "run_avg", "[", "k", "]", "/=", "size", "\n", "run_sqr", "[", "k", "]", "/=", "size", "\n", "###", "\n", "", "fmask", "=", "[", "np", ".", "zeros", "(", "shape", "=", "(", "fm", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "bool", ")", "for", "fm", "in", "fmaps", "]", "\n", "fmap_var", "=", "[", "np", ".", "zeros", "(", "shape", "=", "(", "fm", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "fm", "in", "fmaps", "]", "\n", "for", "k", ",", "fm", "in", "enumerate", "(", "fmaps", ")", ":", "\n", "        ", "if", "fm", ".", "shape", "[", "1", "]", ">", "fmap_max", ":", "\n", "#select the feature map with the most variance to the dataset", "\n", "            ", "fmap_var", "[", "k", "]", "=", "(", "run_sqr", "[", "k", "]", "-", "np", ".", "square", "(", "run_avg", "[", "k", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "most_var", "=", "fmap_var", "[", "k", "]", ".", "argsort", "(", ")", "[", "-", "fmap_max", ":", "]", "#the feature indices with the top-fmap_max variance", "\n", "fmaps", "[", "k", "]", "=", "fm", "[", ":", ",", "np", ".", "sort", "(", "most_var", ")", ",", ":", ",", ":", "]", "\n", "fmask", "[", "k", "]", "[", "most_var", "]", "=", "True", "\n", "", "else", ":", "\n", "            ", "fmask", "[", "k", "]", "[", ":", "]", "=", "True", "\n", "", "print", "(", "\"layer: %s, shape=%s\"", "%", "(", "k", ",", "(", "fmaps", "[", "k", "]", ".", "shape", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# ORIGINAL PARTITIONING OF LAYERS", "\n", "", "fmaps_sizes", "=", "[", "fm", ".", "shape", "for", "fm", "in", "fmaps", "]", "\n", "fmaps_count", "=", "sum", "(", "[", "fm", "[", "1", "]", "for", "fm", "in", "fmaps_sizes", "]", ")", "\n", "partitions", "=", "[", "0", ",", "]", "\n", "for", "r", "in", "fmaps_sizes", ":", "\n", "        ", "partitions", "+=", "[", "partitions", "[", "-", "1", "]", "+", "r", "[", "1", "]", ",", "]", "\n", "", "layer_rlist", "=", "[", "range", "(", "start", ",", "stop", ")", "for", "start", ",", "stop", "in", "zip", "(", "partitions", "[", ":", "-", "1", "]", ",", "partitions", "[", "1", ":", "]", ")", "]", "# the frequency ranges list", "\n", "# concatenate fmaps of identical dimension to speed up rf application", "\n", "clmask", ",", "cfmask", ",", "cfmaps", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "print", "(", "\"\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "# I would need to make sure about the order and contiguousness of the fmaps to preserve the inital order.", "\n", "# It isn't done right now but since the original feature maps are monotonically decreasing in resultion in", "\n", "# the examples I treated, the previous issue doesn't arise.", "\n", "if", "concatenate", ":", "\n", "        ", "for", "k", ",", "us", "in", "enumerate", "(", "np", ".", "unique", "(", "[", "np", ".", "prod", "(", "fs", "[", "2", ":", "4", "]", ")", "for", "fs", "in", "fmaps_sizes", "]", ")", "[", ":", ":", "-", "1", "]", ")", ":", "## they appear sorted from small to large, so I reversed the order", "\n", "            ", "mask", "=", "np", ".", "array", "(", "[", "np", ".", "prod", "(", "fs", "[", "2", ":", "4", "]", ")", "==", "us", "for", "fs", "in", "fmaps_sizes", "]", ")", "# mask over layers that have that spatial size", "\n", "lmask", "=", "np", ".", "arange", "(", "len", "(", "fmaps_sizes", ")", ")", "[", "mask", "]", "# list of index for layers that have that size", "\n", "bfmask", "=", "np", ".", "concatenate", "(", "[", "fmask", "[", "l", "]", "for", "l", "in", "lmask", "]", ",", "axis", "=", "0", ")", "\n", "clmask", "+=", "[", "lmask", ",", "]", "\n", "cfmask", "+=", "[", "np", ".", "arange", "(", "len", "(", "bfmask", ")", ")", "[", "bfmask", "]", ",", "]", "\n", "cfmaps", "+=", "[", "np", ".", "concatenate", "(", "[", "fmaps", "[", "l", "]", "for", "l", "in", "lmask", "]", ",", "axis", "=", "1", ")", ",", "]", "\n", "print", "(", "\"fmaps: %s, shape=%s\"", "%", "(", "k", ",", "(", "cfmaps", "[", "-", "1", "]", ".", "shape", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "fmaps_sizes", "=", "[", "fm", ".", "shape", "for", "fm", "in", "cfmaps", "]", "\n", "", "else", ":", "\n", "        ", "for", "k", ",", "fm", "in", "enumerate", "(", "fmask", ")", ":", "\n", "            ", "clmask", "+=", "[", "np", ".", "array", "(", "[", "k", "]", ")", ",", "]", "\n", "cfmask", "+=", "[", "np", ".", "arange", "(", "len", "(", "fm", ")", ")", "[", "fm", "]", ",", "]", "\n", "###", "\n", "", "", "tuning_masks", "=", "get_tuning_masks", "(", "layer_rlist", ",", "fmaps_count", ")", "\n", "assert", "np", ".", "sum", "(", "sum", "(", "tuning_masks", ")", ")", "==", "fmaps_count", ",", "\"%d != %d\"", "%", "(", "np", ".", "sum", "(", "sum", "(", "tuning_masks", ")", ")", ",", "fmaps_count", ")", "\n", "#layer_rlist, fmaps_sizes, fmaps_count, clmask, cfmask #, scaling", "\n", "return", "Torch_filter_fmaps", "(", "_fmaps_fn", ",", "clmask", ",", "cfmask", ")", ",", "clmask", ",", "cfmask", ",", "tuning_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.rf_grid.subdivision_1d.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_div", "=", "1", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "        ", "self", ".", "length", "=", "n_div", "\n", "self", ".", "dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.rf_grid.subdivision_1d.__call__": [[10, 13], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "center", ",", "width", ")", ":", "\n", "        ", "'''\treturns a list of point positions '''", "\n", "return", "[", "center", "]", "*", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.rf_grid.linspace.__init__": [[15, 18], ["rf_grid.subdivision_1d.__init__"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.Alexnet_fmaps.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_div", ",", "right_bound", "=", "False", ",", "dtype", "=", "np", ".", "float32", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "linspace", ",", "self", ")", ".", "__init__", "(", "n_div", ",", "dtype", "=", "np", ".", "float32", ",", "**", "kwargs", ")", "\n", "self", ".", "__rb", "=", "right_bound", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.rf_grid.linspace.__call__": [[19, 29], ["numpy.arange().astype", "numpy.float32", "numpy.float32", "numpy.arange"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "center", ",", "width", ")", ":", "\n", "        ", "if", "self", ".", "length", "<=", "1", ":", "\n", "            ", "return", "[", "center", "]", "\n", "", "if", "self", ".", "__rb", ":", "\n", "            ", "d", "=", "np", ".", "float32", "(", "width", ")", "/", "(", "self", ".", "length", "-", "1", ")", "\n", "vmin", ",", "vmax", "=", "center", ",", "center", "+", "width", "\n", "", "else", ":", "\n", "            ", "d", "=", "np", ".", "float32", "(", "width", ")", "/", "self", ".", "length", "\n", "vmin", ",", "vmax", "=", "center", "+", "(", "d", "-", "width", ")", "/", "2", ",", "center", "+", "width", "/", "2", "\n", "", "return", "np", ".", "arange", "(", "vmin", ",", "vmax", "+", "1e-12", ",", "d", ")", ".", "astype", "(", "dtype", "=", "self", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.rf_grid.logspace.__init__": [[31, 33], ["rf_grid.subdivision_1d.__init__"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.Alexnet_fmaps.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_div", ",", "dtype", "=", "np", ".", "float32", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "logspace", ",", "self", ")", ".", "__init__", "(", "n_div", ",", "dtype", "=", "np", ".", "float32", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.rf_grid.logspace.__call__": [[34, 41], ["numpy.log", "numpy.log", "numpy.exp().astype", "numpy.exp", "numpy.arange"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "start", ",", "stop", ")", ":", "\n", "        ", "if", "self", ".", "length", "<=", "1", ":", "\n", "            ", "return", "[", "start", "]", "\n", "", "lstart", "=", "np", ".", "log", "(", "start", "+", "1e-12", ")", "\n", "lstop", "=", "np", ".", "log", "(", "stop", "+", "1e-12", ")", "\n", "dlog", "=", "(", "lstop", "-", "lstart", ")", "/", "(", "self", ".", "length", "-", "1", ")", "\n", "return", "np", ".", "exp", "(", "np", ".", "arange", "(", "lstart", ",", "lstop", "+", "1e-12", ",", "dlog", ")", ")", ".", "astype", "(", "self", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.rf_grid.model_space": [[42, 50], ["numpy.asarray", "numpy.prod", "numpy.meshgrid", "numpy.concatenate", "sms", "enumerate", "xs.reshape().astype", "ys.reshape().astype", "ss.reshape().astype", "xs.reshape", "ys.reshape", "ss.reshape"], "function", ["None"], ["", "", "def", "model_space", "(", "model_specs", ")", ":", "\n", "    ", "vm", "=", "np", ".", "asarray", "(", "model_specs", "[", "0", "]", ")", "\n", "nt", "=", "np", ".", "prod", "(", "[", "sms", ".", "length", "for", "sms", "in", "model_specs", "[", "1", "]", "]", ")", "\n", "rx", ",", "ry", ",", "rs", "=", "[", "sms", "(", "vm", "[", "i", ",", "0", "]", ",", "vm", "[", "i", ",", "1", "]", ")", "for", "i", ",", "sms", "in", "enumerate", "(", "model_specs", "[", "1", "]", ")", "]", "\n", "xs", ",", "ys", ",", "ss", "=", "np", ".", "meshgrid", "(", "rx", ",", "ry", ",", "rs", ",", "indexing", "=", "'ij'", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "xs", ".", "reshape", "(", "(", "nt", ",", "1", ")", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "ys", ".", "reshape", "(", "(", "nt", ",", "1", ")", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "ss", ".", "reshape", "(", "(", "nt", ",", "1", ")", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.rf_grid.model_space_pyramid": [[51, 58], ["numpy.concatenate", "numpy.meshgrid", "numpy.linspace", "numpy.linspace", "numpy.stack", "int", "int", "numpy.ceil", "numpy.ceil", "X.flatten", "Y.flatten", "numpy.full", "X.flatten"], "function", ["None"], ["", "def", "model_space_pyramid", "(", "sigmas", ",", "min_spacing", ",", "aperture", ")", ":", "\n", "    ", "rf", "=", "[", "]", "\n", "for", "s", "in", "sigmas", ":", "\n", "        ", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "aperture", "/", "2", ",", "aperture", "/", "2", ",", "int", "(", "np", ".", "ceil", "(", "aperture", "/", "(", "s", "*", "min_spacing", ")", ")", ")", ")", ",", "\n", "np", ".", "linspace", "(", "-", "aperture", "/", "2", ",", "aperture", "/", "2", ",", "int", "(", "np", ".", "ceil", "(", "aperture", "/", "(", "s", "*", "min_spacing", ")", ")", ")", ")", ")", "\n", "rf", "+=", "[", "np", ".", "stack", "(", "[", "X", ".", "flatten", "(", ")", ",", "Y", ".", "flatten", "(", ")", ",", "np", ".", "full", "(", "fill_value", "=", "s", ",", "shape", "=", "X", ".", "flatten", "(", ")", ".", "shape", ")", "]", ",", "axis", "=", "1", ")", ",", "]", "\n", "", "return", "np", ".", "concatenate", "(", "rf", ",", "axis", "=", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.roi.iterate_roi": [[8, 17], ["enumerate", "numpy.zeros", "enumerate", "numpy.logical_or", "len"], "function", ["None"], ["def", "iterate_roi", "(", "group", ",", "voxelroi", ",", "roimap", ",", "group_name", "=", "None", ")", ":", "\n", "    ", "for", "k", ",", "g", "in", "enumerate", "(", "group", ")", ":", "\n", "        ", "g_name", "=", "(", "''", "if", "group_name", "is", "None", "else", "group_name", "[", "k", "]", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "shape", "=", "voxelroi", ".", "shape", ",", "dtype", "=", "bool", ")", "\n", "for", "i", ",", "roi", "in", "enumerate", "(", "g", ")", ":", "\n", "            ", "if", "group_name", "is", "None", ":", "\n", "                ", "g_name", "+=", "roimap", "[", "roi", "]", "+", "(", "'-'", "if", "i", "+", "1", "<", "len", "(", "g", ")", "else", "''", ")", "\n", "", "mask", "=", "np", ".", "logical_or", "(", "mask", ",", "voxelroi", "==", "roi", ")", "\n", "", "yield", "mask", ",", "g_name", "", "", "", ""]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.iterate_range": [[6, 13], ["int", "int", "range", "range", "range"], "function", ["None"], ["def", "iterate_range", "(", "start", ",", "length", ",", "batchsize", ")", ":", "\n", "    ", "batch_count", "=", "int", "(", "length", "//", "batchsize", ")", "\n", "residual", "=", "int", "(", "length", "%", "batchsize", ")", "\n", "for", "i", "in", "range", "(", "batch_count", ")", ":", "\n", "        ", "yield", "range", "(", "start", "+", "i", "*", "batchsize", ",", "start", "+", "(", "i", "+", "1", ")", "*", "batchsize", ")", ",", "batchsize", "\n", "", "if", "(", "residual", ">", "0", ")", ":", "\n", "        ", "yield", "range", "(", "start", "+", "batch_count", "*", "batchsize", ",", "start", "+", "length", ")", ",", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.iterate_minibatches": [[14, 20], ["range", "len", "len", "len", "slice"], "function", ["None"], ["", "", "def", "iterate_minibatches", "(", "inputs", ",", "targets", ",", "batchsize", ")", ":", "\n", "    ", "'''return inputs.shape[0]//batchsize batches plus one residual batches smaller than batchsize if needed'''", "\n", "assert", "len", "(", "inputs", ")", "==", "len", "(", "targets", ")", "\n", "for", "start_idx", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "batchsize", ")", ":", "\n", "        ", "excerpt", "=", "slice", "(", "start_idx", ",", "start_idx", "+", "batchsize", ")", "\n", "yield", "inputs", "[", "excerpt", "]", ",", "targets", "[", "excerpt", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.create_downsampling_array": [[21, 59], ["numpy.arange", "numpy.arange", "numpy.floor().astype", "numpy.ceil().astype", "enumerate", "numpy.floor().astype", "numpy.ceil().astype", "enumerate", "numpy.array().reshape", "int", "int", "float", "float", "zip", "numpy.zeros", "numpy.ones", "zip", "numpy.zeros", "numpy.ones", "numpy.array", "float", "float", "float", "float", "numpy.ceil", "numpy.ceil", "float", "float", "numpy.floor", "numpy.ceil", "numpy.floor", "numpy.ceil", "numpy.array", "numpy.array", "len", "numpy.outer"], "function", ["None"], ["", "", "def", "create_downsampling_array", "(", "old_dim", "=", "(", "1", ",", "1", ")", ",", "new_dim", "=", "(", "1", ",", "1", ")", ",", "symmetric", "=", "True", ")", ":", "\n", "    ", "ratios", "=", "(", "float", "(", "old_dim", "[", "0", "]", ")", "/", "float", "(", "new_dim", "[", "0", "]", ")", ",", "float", "(", "old_dim", "[", "1", "]", ")", "/", "float", "(", "new_dim", "[", "1", "]", ")", ")", "\n", "i_ratios", "=", "(", "int", "(", "np", ".", "ceil", "(", "ratios", "[", "0", "]", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "ratios", "[", "1", "]", ")", ")", ")", "\n", "x_range", "=", "np", ".", "arange", "(", "float", "(", "0", ")", ",", "float", "(", "old_dim", "[", "0", "]", ")", "+", "ratios", "[", "0", "]", "/", "2", ",", "ratios", "[", "0", "]", ")", "\n", "y_range", "=", "np", ".", "arange", "(", "float", "(", "0", ")", ",", "float", "(", "old_dim", "[", "1", "]", ")", "+", "ratios", "[", "1", "]", "/", "2", ",", "ratios", "[", "1", "]", ")", "\n", "x_min", "=", "np", ".", "floor", "(", "x_range", ")", ".", "astype", "(", "int", ")", "\n", "x_max", "=", "np", ".", "ceil", "(", "x_range", ")", ".", "astype", "(", "int", ")", "\n", "x_min_frac", "=", "x_range", "-", "x_min", "\n", "x_max_frac", "=", "x_max", "-", "x_range", "\n", "x_stack", "=", "[", "]", "\n", "for", "k", ",", "(", "xi", ",", "xf", ")", "in", "enumerate", "(", "zip", "(", "x_max", "[", ":", "-", "1", "]", ",", "x_min", "[", "1", ":", "]", ")", ")", ":", "\n", "        ", "z", "=", "np", ".", "zeros", "(", "old_dim", "[", "0", "]", ")", "\n", "z", "[", "xi", ":", "xf", "]", "=", "np", ".", "ones", "(", "xf", "-", "xi", ")", "\n", "if", "xi", ">", "0", ":", "\n", "            ", "z", "[", "xi", "-", "1", "]", "=", "x_max_frac", "[", "k", "]", "\n", "", "if", "xf", "<", "old_dim", "[", "0", "]", ":", "\n", "            ", "z", "[", "xf", "]", "=", "x_min_frac", "[", "k", "+", "1", "]", "\n", "", "x_stack", "+=", "[", "z", ",", "]", "\n", "###", "\n", "", "y_min", "=", "np", ".", "floor", "(", "y_range", ")", ".", "astype", "(", "int", ")", "\n", "y_max", "=", "np", ".", "ceil", "(", "y_range", ")", ".", "astype", "(", "int", ")", "\n", "y_min_frac", "=", "y_range", "-", "y_min", "\n", "y_max_frac", "=", "y_max", "-", "y_range", "\n", "y_stack", "=", "[", "]", "\n", "for", "k", ",", "(", "xi", ",", "xf", ")", "in", "enumerate", "(", "zip", "(", "y_max", "[", ":", "-", "1", "]", ",", "y_min", "[", "1", ":", "]", ")", ")", ":", "\n", "        ", "z", "=", "np", ".", "zeros", "(", "old_dim", "[", "1", "]", ")", "\n", "z", "[", "xi", ":", "xf", "]", "=", "np", ".", "ones", "(", "xf", "-", "xi", ")", "\n", "if", "xi", ">", "0", ":", "\n", "            ", "z", "[", "xi", "-", "1", "]", "=", "y_max_frac", "[", "k", "]", "\n", "", "if", "xf", "<", "old_dim", "[", "1", "]", ":", "\n", "            ", "z", "[", "xf", "]", "=", "y_min_frac", "[", "k", "+", "1", "]", "\n", "", "y_stack", "+=", "[", "z", ",", "]", "\n", "# create a matrix that re-mix the entries", "\n", "", "stack", "=", "[", "]", "\n", "for", "vx", "in", "np", ".", "array", "(", "x_stack", ")", "/", "ratios", "[", "0", "]", ":", "\n", "        ", "for", "vy", "in", "np", ".", "array", "(", "y_stack", ")", "/", "ratios", "[", "1", "]", ":", "\n", "            ", "stack", "+=", "[", "np", ".", "outer", "(", "vx", ",", "vy", ")", ",", "]", "\n", "", "", "return", "np", ".", "array", "(", "stack", ")", ".", "reshape", "(", "(", "len", "(", "stack", ")", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.create_upsampling_array": [[61, 91], ["numpy.arange", "numpy.arange", "enumerate", "enumerate", "numpy.array", "numpy.array().reshape", "float", "float", "numpy.arange", "numpy.zeros", "int", "numpy.arange", "numpy.zeros", "int", "numpy.array", "float", "float", "float", "float", "float", "float", "numpy.floor", "numpy.floor", "numpy.array", "len", "float", "float", "numpy.outer"], "function", ["None"], ["", "def", "create_upsampling_array", "(", "old_dim", "=", "(", "1", ",", "1", ")", ",", "new_dim", "=", "(", "1", ",", "1", ")", ",", "symmetric", "=", "True", ")", ":", "\n", "    ", "ratios", "=", "(", "float", "(", "new_dim", "[", "0", "]", ")", "/", "float", "(", "old_dim", "[", "0", "]", "-", "1", ")", ",", "float", "(", "new_dim", "[", "1", "]", ")", "/", "float", "(", "old_dim", "[", "1", "]", "-", "1", ")", ")", "\n", "x_range", "=", "np", ".", "arange", "(", "float", "(", "0", ")", ",", "float", "(", "new_dim", "[", "0", "]", ")", "+", "ratios", "[", "0", "]", "/", "2", ",", "ratios", "[", "0", "]", ")", "\n", "y_range", "=", "np", ".", "arange", "(", "float", "(", "0", ")", ",", "float", "(", "new_dim", "[", "1", "]", ")", "+", "ratios", "[", "1", "]", "/", "2", ",", "ratios", "[", "1", "]", ")", "\n", "x_stack", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "enumerate", "(", "np", ".", "arange", "(", "0", ",", "new_dim", "[", "0", "]", "+", "1e-3", ",", "float", "(", "new_dim", "[", "0", "]", ")", "/", "(", "new_dim", "[", "0", "]", "-", "1", ")", ")", ")", ":", "\n", "        ", "z", "=", "np", ".", "zeros", "(", "old_dim", "[", "0", "]", ")", "\n", "i", "=", "int", "(", "np", ".", "floor", "(", "v", "/", "ratios", "[", "0", "]", ")", ")", "\n", "if", "i", "+", "1", "<", "old_dim", "[", "0", "]", ":", "\n", "            ", "d", "=", "(", "v", "-", "x_range", "[", "i", "]", ")", "/", "(", "x_range", "[", "i", "+", "1", "]", "-", "x_range", "[", "i", "]", ")", "\n", "z", "[", "i", "]", ",", "z", "[", "i", "+", "1", "]", "=", "1", "-", "d", ",", "d", "\n", "", "else", ":", "\n", "            ", "z", "[", "i", "]", "=", "1.0", "\n", "", "x_stack", "+=", "[", "z", ",", "]", "\n", "", "y_stack", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "enumerate", "(", "np", ".", "arange", "(", "0", ",", "new_dim", "[", "1", "]", "+", "1e-3", ",", "float", "(", "new_dim", "[", "1", "]", ")", "/", "(", "new_dim", "[", "1", "]", "-", "1", ")", ")", ")", ":", "\n", "        ", "z", "=", "np", ".", "zeros", "(", "old_dim", "[", "1", "]", ")", "\n", "i", "=", "int", "(", "np", ".", "floor", "(", "v", "/", "ratios", "[", "1", "]", ")", ")", "\n", "if", "i", "+", "1", "<", "old_dim", "[", "1", "]", ":", "\n", "            ", "d", "=", "(", "v", "-", "y_range", "[", "i", "]", ")", "/", "(", "y_range", "[", "i", "+", "1", "]", "-", "y_range", "[", "i", "]", ")", "\n", "z", "[", "i", "]", ",", "z", "[", "i", "+", "1", "]", "=", "1", "-", "d", ",", "d", "\n", "", "else", ":", "\n", "            ", "z", "[", "i", "]", "=", "1.0", "\n", "", "y_stack", "+=", "[", "z", ",", "]", "\n", "# create a matrix that re-mix the entries", "\n", "", "stack", "=", "[", "]", "\n", "for", "vx", "in", "np", ".", "array", "(", "x_stack", ")", ":", "\n", "        ", "for", "vy", "in", "np", ".", "array", "(", "y_stack", ")", ":", "\n", "            ", "stack", "+=", "[", "np", ".", "outer", "(", "vx", ",", "vy", ")", ",", "]", "\n", "", "", "return", "np", ".", "array", "(", "stack", ")", ".", "reshape", "(", "(", "len", "(", "stack", ")", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.create_sampling_array": [[93, 98], ["numpy_utility.create_upsampling_array", "numpy_utility.create_downsampling_array"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.create_upsampling_array", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.create_downsampling_array"], ["", "def", "create_sampling_array", "(", "old_dim", "=", "(", "1", ",", "1", ")", ",", "new_dim", "=", "(", "1", ",", "1", ")", ",", "symmetric", "=", "True", ")", ":", "\n", "    ", "if", "new_dim", ">", "old_dim", ":", "\n", "        ", "return", "create_upsampling_array", "(", "old_dim", ",", "new_dim", ",", "symmetric", ")", "\n", "", "else", ":", "\n", "        ", "return", "create_downsampling_array", "(", "old_dim", ",", "new_dim", ",", "symmetric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.make_gaussian": [[100, 113], ["numpy.meshgrid", "dtype", "dtype", "dtype", "numpy.arange", "numpy.arange", "numpy.exp", "numpy.sum", "Zm.astype", "dtype"], "function", ["None"], ["", "", "def", "make_gaussian", "(", "x", ",", "y", ",", "sigma", ",", "n_pix", ",", "size", "=", "None", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "'''This will create a gaussian with respect to a standard coordinate system in which the center of the image is at (0,0) and the top-left corner correspond to (-size/2, size/2)'''", "\n", "deg", "=", "dtype", "(", "n_pix", ")", "if", "size", "==", "None", "else", "size", "\n", "dpix", "=", "dtype", "(", "deg", ")", "/", "n_pix", "\n", "pix_min", "=", "-", "deg", "/", "2.", "+", "0.5", "*", "dpix", "\n", "pix_max", "=", "deg", "/", "2.", "\n", "[", "Xm", ",", "Ym", "]", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "pix_min", ",", "pix_max", ",", "dpix", ")", ",", "np", ".", "arange", "(", "pix_min", ",", "pix_max", ",", "dpix", ")", ")", ";", "\n", "d", "=", "(", "2", "*", "dtype", "(", "sigma", ")", "**", "2", ")", "\n", "A", "=", "dtype", "(", "1.", "/", "(", "d", "*", "np", ".", "pi", ")", ")", "\n", "Zm", "=", "dpix", "**", "2", "*", "A", "*", "np", ".", "exp", "(", "-", "(", "(", "Xm", "-", "x", ")", "**", "2", "+", "(", "-", "Ym", "-", "y", ")", "**", "2", ")", "/", "d", ")", "\n", "if", "(", "sigma", "<", "dpix", "/", "2", ")", ":", "\n", "        ", "Zm", "/=", "np", ".", "sum", "(", "Zm", ")", "\n", "", "return", "Xm", ",", "-", "Ym", ",", "Zm", ".", "astype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.make_gaussian_stack": [[114, 122], ["min", "numpy.ndarray", "numpy_utility.make_gaussian", "range", "len", "len", "len", "numpy_utility.make_gaussian"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.make_gaussian", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.make_gaussian"], ["", "def", "make_gaussian_stack", "(", "xs", ",", "ys", ",", "sigmas", ",", "n_pix", ",", "size", "=", "None", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "stack_size", "=", "min", "(", "len", "(", "xs", ")", ",", "len", "(", "ys", ")", ",", "len", "(", "sigmas", ")", ")", "\n", "assert", "stack_size", ">", "0", "\n", "Z", "=", "np", ".", "ndarray", "(", "shape", "=", "(", "stack_size", ",", "n_pix", ",", "n_pix", ")", ",", "dtype", "=", "dtype", ")", "\n", "X", ",", "Y", ",", "Z", "[", "0", ",", ":", ",", ":", "]", "=", "make_gaussian", "(", "xs", "[", "0", "]", ",", "ys", "[", "0", "]", ",", "sigmas", "[", "0", "]", ",", "n_pix", ",", "size", "=", "size", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "stack_size", ")", ":", "\n", "        ", "_", ",", "_", ",", "Z", "[", "i", ",", ":", ",", ":", "]", "=", "make_gaussian", "(", "xs", "[", "i", "]", ",", "ys", "[", "i", "]", ",", "sigmas", "[", "i", "]", ",", "n_pix", ",", "size", "=", "size", ",", "dtype", "=", "dtype", ")", "\n", "", "return", "X", ",", "Y", ",", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.gaussian_mass": [[124, 126], ["scipy.special.erf", "scipy.special.erf", "scipy.special.erf", "scipy.special.erf", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "gaussian_mass", "(", "xi", ",", "yi", ",", "dx", ",", "dy", ",", "x", ",", "y", ",", "sigma", ")", ":", "\n", "    ", "return", "0.25", "*", "(", "erf", "(", "(", "xi", "-", "x", "+", "dx", "/", "2", ")", "/", "(", "np", ".", "sqrt", "(", "2", ")", "*", "sigma", ")", ")", "-", "erf", "(", "(", "xi", "-", "x", "-", "dx", "/", "2", ")", "/", "(", "np", ".", "sqrt", "(", "2", ")", "*", "sigma", ")", ")", ")", "*", "(", "erf", "(", "(", "yi", "-", "y", "+", "dy", "/", "2", ")", "/", "(", "np", ".", "sqrt", "(", "2", ")", "*", "sigma", ")", ")", "-", "erf", "(", "(", "yi", "-", "y", "-", "dy", "/", "2", ")", "/", "(", "np", ".", "sqrt", "(", "2", ")", "*", "sigma", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.make_gaussian_mass": [[127, 143], ["numpy.meshgrid", "dtype", "dtype", "numpy.arange", "numpy.arange", "numpy.zeros_like", "g_mass.astype", "numpy.vectorize", "np.vectorize.", "dtype", "numpy.exp", "numpy_utility.gaussian_mass", "dtype"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.gaussian_mass"], ["", "def", "make_gaussian_mass", "(", "x", ",", "y", ",", "sigma", ",", "n_pix", ",", "size", "=", "None", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "deg", "=", "dtype", "(", "n_pix", ")", "if", "size", "==", "None", "else", "size", "\n", "dpix", "=", "dtype", "(", "deg", ")", "/", "n_pix", "\n", "pix_min", "=", "-", "deg", "/", "2.", "+", "0.5", "*", "dpix", "\n", "pix_max", "=", "deg", "/", "2.", "\n", "[", "Xm", ",", "Ym", "]", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "pix_min", ",", "pix_max", ",", "dpix", ")", ",", "np", ".", "arange", "(", "pix_min", ",", "pix_max", ",", "dpix", ")", ")", ";", "\n", "if", "sigma", "<=", "0", ":", "\n", "        ", "Zm", "=", "np", ".", "zeros_like", "(", "Xm", ")", "\n", "", "elif", "sigma", "<", "dpix", ":", "\n", "        ", "g_mass", "=", "np", ".", "vectorize", "(", "lambda", "a", ",", "b", ":", "gaussian_mass", "(", "a", ",", "b", ",", "dpix", ",", "dpix", ",", "x", ",", "y", ",", "sigma", ")", ")", "\n", "Zm", "=", "g_mass", "(", "Xm", ",", "-", "Ym", ")", "\n", "", "else", ":", "\n", "        ", "d", "=", "(", "2", "*", "dtype", "(", "sigma", ")", "**", "2", ")", "\n", "A", "=", "dtype", "(", "1.", "/", "(", "d", "*", "np", ".", "pi", ")", ")", "\n", "Zm", "=", "dpix", "**", "2", "*", "A", "*", "np", ".", "exp", "(", "-", "(", "(", "Xm", "-", "x", ")", "**", "2", "+", "(", "-", "Ym", "-", "y", ")", "**", "2", ")", "/", "d", ")", "\n", "", "return", "Xm", ",", "-", "Ym", ",", "Zm", ".", "astype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.make_gaussian_mass_stack": [[144, 152], ["min", "numpy.ndarray", "numpy_utility.make_gaussian_mass", "range", "len", "len", "len", "numpy_utility.make_gaussian_mass"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.make_gaussian_mass", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.make_gaussian_mass"], ["", "def", "make_gaussian_mass_stack", "(", "xs", ",", "ys", ",", "sigmas", ",", "n_pix", ",", "size", "=", "None", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "stack_size", "=", "min", "(", "len", "(", "xs", ")", ",", "len", "(", "ys", ")", ",", "len", "(", "sigmas", ")", ")", "\n", "assert", "stack_size", ">", "0", "\n", "Z", "=", "np", ".", "ndarray", "(", "shape", "=", "(", "stack_size", ",", "n_pix", ",", "n_pix", ")", ",", "dtype", "=", "dtype", ")", "\n", "X", ",", "Y", ",", "Z", "[", "0", ",", ":", ",", ":", "]", "=", "make_gaussian_mass", "(", "xs", "[", "0", "]", ",", "ys", "[", "0", "]", ",", "sigmas", "[", "0", "]", ",", "n_pix", ",", "size", "=", "size", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "stack_size", ")", ":", "\n", "        ", "_", ",", "_", ",", "Z", "[", "i", ",", ":", ",", ":", "]", "=", "make_gaussian_mass", "(", "xs", "[", "i", "]", ",", "ys", "[", "i", "]", ",", "sigmas", "[", "i", "]", ",", "n_pix", ",", "size", "=", "size", ",", "dtype", "=", "dtype", ")", "\n", "", "return", "X", ",", "Y", ",", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.pruning_mask": [[155, 158], ["numpy.random.choice"], "function", ["None"], ["", "def", "pruning_mask", "(", "shaped_as", ",", "prune_ratio", "=", "0.0", ")", ":", "\n", "    ", "'''prune_ratio = 1. means discard everything'''", "\n", "return", "np", ".", "random", ".", "choice", "(", "[", "True", ",", "False", "]", ",", "size", "=", "shaped_as", ".", "shape", "[", "1", "]", ",", "replace", "=", "True", ",", "p", "=", "[", "1.", "-", "prune_ratio", ",", "prune_ratio", "]", ")", "#astype(np.bool)", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.uniform_nsphere": [[159, 164], ["numpy.random.normal().astype", "numpy.sqrt", "numpy.sum", "numpy.random.normal", "numpy.square"], "function", ["None"], ["", "def", "uniform_nsphere", "(", "batch", ",", "size", ")", ":", "\n", "    ", "'''Returns a batch of uniformly distributed points on a nsphere'''", "\n", "nns", "=", "np", ".", "random", ".", "normal", "(", "0.", ",", "1.", ",", "size", "=", "(", "batch", ",", "size", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "nnss", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "nns", ")", ",", "axis", "=", "1", ")", ")", "\n", "return", "(", "nns", ".", "T", "/", "nnss", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.uniform_ncube": [[165, 167], ["numpy.random.uniform().astype", "numpy.random.uniform"], "function", ["None"], ["", "def", "uniform_ncube", "(", "batch", ",", "size", ")", ":", "\n", "    ", "return", "np", ".", "random", ".", "uniform", "(", "-", "1.", ",", "1.", ",", "size", "=", "(", "batch", ",", "size", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.normal_ncube": [[168, 170], ["numpy.random.normal().astype", "numpy.random.normal"], "function", ["None"], ["", "def", "normal_ncube", "(", "batch", ",", "size", ")", ":", "\n", "    ", "return", "np", ".", "random", ".", "normal", "(", "0.", ",", "1.", ",", "size", "=", "(", "batch", ",", "size", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.sie": [[173, 178], ["numpy.zeros", "len", "numpy.arange", "len"], "function", ["None"], ["", "def", "sie", "(", "x", ",", "c", "=", "10", ")", ":", "\n", "    ", "'''SparseIntegerEmbedding'''", "\n", "y", "=", "np", ".", "zeros", "(", "(", "len", "(", "x", ")", ",", "c", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y", "[", "np", ".", "arange", "(", "len", "(", "x", ")", ")", ",", "x", "]", "=", "1", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.place_tile_in": [[179, 190], ["numpy.zeros", "numpy.random.randint", "numpy.random.randint", "range"], "function", ["None"], ["", "def", "place_tile_in", "(", "tile", ",", "new_npx", ")", ":", "\n", "    ", "batch_size", "=", "tile", ".", "shape", "[", "0", "]", "\n", "features", "=", "tile", ".", "shape", "[", "1", "]", "\n", "A", "=", "np", ".", "zeros", "(", "shape", "=", "(", "batch_size", ",", "features", ",", "new_npx", ",", "new_npx", ")", ",", "dtype", "=", "tile", ".", "dtype", ")", "\n", "dx", "=", "tile", ".", "shape", "[", "2", "]", "\n", "max_x", "=", "new_npx", "-", "dx", "\n", "pos_x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "max_x", ",", "size", "=", "batch_size", ")", "\n", "pos_y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "max_x", ",", "size", "=", "batch_size", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "A", "[", "b", ",", ":", ",", "pos_x", "[", "b", "]", ":", "pos_x", "[", "b", "]", "+", "dx", ",", "pos_y", "[", "b", "]", ":", "pos_y", "[", "b", "]", "+", "dx", "]", "=", "tile", "[", "b", ",", "...", "]", "\n", "", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.mosaic_vis": [[191, 214], ["int", "numpy.amin", "numpy.amax", "numpy.ceil", "len", "numpy.zeros", "enumerate", "numpy.zeros", "enumerate", "imsave", "X.astype", "numpy.sqrt", "numpy.float32"], "function", ["None"], ["", "def", "mosaic_vis", "(", "X", ",", "pad", "=", "0", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "xmin", ",", "xmax", "=", "np", ".", "amin", "(", "X", ")", ",", "np", ".", "amax", "(", "X", ")", "\n", "S", "=", "(", "X", ".", "astype", "(", "np", ".", "float32", ")", "-", "xmin", ")", "/", "(", "xmax", "-", "xmin", ")", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "x", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "np", ".", "float32", "(", "n", ")", ")", ")", ")", "\n", "y", "=", "n", "//", "x", "\n", "while", "x", "*", "y", "<", "n", ":", "\n", "        ", "y", "+=", "1", "\n", "", "h", ",", "w", "=", "X", ".", "shape", "[", "1", ":", "3", "]", "\n", "if", "len", "(", "X", ".", "shape", ")", "==", "4", ":", "\n", "        ", "img", "=", "np", ".", "zeros", "(", "(", "h", "*", "y", "+", "(", "y", "-", "1", ")", "*", "pad", ",", "w", "*", "x", "+", "(", "x", "-", "1", ")", "*", "pad", ",", "X", ".", "shape", "[", "3", "]", ")", ")", "\n", "for", "k", ",", "s", "in", "enumerate", "(", "S", ")", ":", "\n", "            ", "j", ",", "i", "=", "k", "//", "x", ",", "k", "%", "x", "\n", "img", "[", "j", "*", "pad", "+", "j", "*", "h", ":", "j", "*", "pad", "+", "j", "*", "h", "+", "h", ",", "i", "*", "pad", "+", "i", "*", "w", ":", "i", "*", "pad", "+", "i", "*", "w", "+", "w", ",", ":", "]", "=", "s", "\n", "", "", "else", ":", "\n", "        ", "img", "=", "np", ".", "zeros", "(", "(", "h", "*", "y", "+", "(", "y", "-", "1", ")", "*", "pad", ",", "w", "*", "x", "+", "(", "x", "-", "1", ")", "*", "pad", ")", ")", "\n", "for", "k", ",", "s", "in", "enumerate", "(", "S", ")", ":", "\n", "            ", "j", ",", "i", "=", "k", "//", "x", ",", "k", "%", "x", "\n", "img", "[", "j", "*", "pad", "+", "j", "*", "h", ":", "j", "*", "pad", "+", "j", "*", "h", "+", "h", ",", "i", "*", "pad", "+", "i", "*", "w", ":", "i", "*", "pad", "+", "i", "*", "w", "+", "w", "]", "=", "s", "\n", "\n", "", "", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "imsave", "(", "save_path", ",", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.numpy_utility.select_along_axis": [[216, 234], ["numpy.moveaxis", "list", "list.pop", "numpy.ndarray", "range", "numpy.moveaxis", "len", "len", "tuple"], "function", ["None"], ["", "def", "select_along_axis", "(", "a", ",", "choice", ",", "run_axis", "=", "0", ",", "choice_axis", "=", "1", ")", ":", "\n", "    ", "''' run axis of lenght N\n        choice axis of lenght M\n        choice is a vector of lenght N with integer entries between 0 and M (exclusive).\n        Equivalent to:\n        >   for i in range(N):\n        >       r[...,i] = a[...,i,...,choice[i],...]\n        returns an array with the same shape as 'a' minus the choice_axis dimension\n    '''", "\n", "assert", "len", "(", "choice", ")", "==", "a", ".", "shape", "[", "run_axis", "]", ",", "\"underspecified choice\"", "\n", "final_pos", "=", "run_axis", "-", "(", "1", "if", "choice_axis", "<", "run_axis", "else", "0", ")", "\n", "val", "=", "np", ".", "moveaxis", "(", "a", ",", "source", "=", "[", "run_axis", ",", "choice_axis", "]", ",", "destination", "=", "[", "0", ",", "1", "]", ")", "\n", "il", "=", "list", "(", "val", ".", "shape", ")", "\n", "il", ".", "pop", "(", "1", ")", "\n", "r", "=", "np", ".", "ndarray", "(", "shape", "=", "tuple", "(", "il", ")", ",", "dtype", "=", "a", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "choice", ")", ")", ":", "\n", "        ", "r", "[", "i", "]", "=", "val", "[", "i", ",", "choice", "[", "i", "]", "]", "\n", "", "return", "np", ".", "moveaxis", "(", "r", ",", "source", "=", "0", ",", "destination", "=", "final_pos", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.save_stuff": [[34, 51], ["h5py.File", "data_objects_dict.items", "open", "hf.create_dataset", "print", "pickle.dump", "print", "failed.append", "print", "print"], "function", ["None"], ["def", "save_stuff", "(", "save_to_this_file", ",", "data_objects_dict", ")", ":", "\n", "    ", "failed", "=", "[", "]", "\n", "with", "h5py", ".", "File", "(", "save_to_this_file", "+", "'.h5py'", ",", "'w'", ")", "as", "hf", ":", "\n", "        ", "for", "k", ",", "v", "in", "data_objects_dict", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "hf", ".", "create_dataset", "(", "k", ",", "data", "=", "v", ")", "\n", "print", "(", "'saved %s in h5py file'", "%", "(", "k", ")", ")", "\n", "", "except", ":", "\n", "                ", "failed", ".", "append", "(", "k", ")", "\n", "print", "(", "'failed to save %s as h5py. will try pickle'", "%", "(", "k", ")", ")", "\n", "", "", "", "for", "k", "in", "failed", ":", "\n", "        ", "with", "open", "(", "save_to_this_file", "+", "'_'", "+", "'%s.pkl'", "%", "(", "k", ")", ",", "'w'", ")", "as", "pkl", ":", "\n", "            ", "try", ":", "\n", "                ", "pickle", ".", "dump", "(", "data_objects_dict", "[", "k", "]", ",", "pkl", ")", "\n", "print", "(", "'saved %s as pkl'", "%", "(", "k", ")", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'failed to save %s in any format. lost.'", "%", "(", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.get_last_token": [[52, 62], ["tokens.items", "s.split", "len", "tok.join", "len", "len"], "function", ["None"], ["", "", "", "", "def", "get_last_token", "(", "s", ",", "tokens", "=", "{", "'@'", ":", "list", ",", "'.'", ":", "dict", "}", ")", ":", "\n", "    ", "l", ",", "name", ",", "entry", ",", "t", "=", "2", "**", "31", ",", "''", ",", "''", ",", "None", "\n", "for", "tok", ",", "toktype", "in", "tokens", ".", "items", "(", ")", ":", "\n", "        ", "ss", "=", "s", ".", "split", "(", "tok", ")", "\n", "if", "len", "(", "ss", ")", ">", "1", "and", "len", "(", "ss", "[", "-", "1", "]", ")", "<", "l", ":", "\n", "            ", "l", "=", "len", "(", "ss", "[", "-", "1", "]", ")", "\n", "entry", "=", "ss", "[", "-", "1", "]", "\n", "name", "=", "tok", ".", "join", "(", "ss", "[", ":", "-", "1", "]", ")", "\n", "t", "=", "toktype", "\n", "", "", "return", "name", ",", "entry", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.has_token": [[64, 70], ["None"], "function", ["None"], ["", "def", "has_token", "(", "s", ",", "tokens", "=", "{", "'@'", ":", "list", ",", "'.'", ":", "dict", "}", ")", ":", "\n", "    ", "isin", "=", "False", "\n", "for", "tok", "in", "tokens", ":", "\n", "        ", "if", "tok", "in", "s", ":", "\n", "            ", "isin", "=", "True", "\n", "", "", "return", "isin", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.extend_list": [[71, 76], ["len", "len"], "function", ["None"], ["", "def", "extend_list", "(", "l", ",", "i", ",", "v", ")", ":", "\n", "    ", "if", "len", "(", "l", ")", "<", "i", "+", "1", ":", "\n", "        ", "l", "+=", "[", "None", ",", "]", "*", "(", "i", "+", "1", "-", "len", "(", "l", ")", ")", "\n", "", "l", "[", "i", "]", "=", "v", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.flatten_dict": [[77, 88], ["base.items", "type", "flat.update", "file_utility.flatten_dict", "type", "flat.update", "file_utility.flatten_dict", "enumerate"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.flatten_dict", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.flatten_dict"], ["", "def", "flatten_dict", "(", "base", ",", "append", "=", "''", ")", ":", "\n", "    ", "'''flatten nested dictionary and lists'''", "\n", "flat", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "base", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "v", ")", "==", "dict", ":", "\n", "            ", "flat", ".", "update", "(", "flatten_dict", "(", "v", ",", "'%s%s.'", "%", "(", "append", ",", "k", ")", ")", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "list", ":", "\n", "            ", "flat", ".", "update", "(", "flatten_dict", "(", "{", "'%s%s@%d'", "%", "(", "append", ",", "k", ",", "i", ")", ":", "vv", "for", "i", ",", "vv", "in", "enumerate", "(", "v", ")", "}", ")", ")", "\n", "", "else", ":", "\n", "            ", "flat", "[", "'%s%s'", "%", "(", "append", ",", "k", ")", "]", "=", "v", "\n", "", "", "return", "flat", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.embed_dict": [[89, 107], ["fd.items", "file_utility.get_last_token", "file_utility.has_token", "file_utility.embed_dict", "d.keys", "file_utility.extend_list", "file_utility.extend_list", "d.keys", "int", "int", "d.keys", "d[].update"], "function", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.get_last_token", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.has_token", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.embed_dict", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.extend_list", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.extend_list"], ["", "def", "embed_dict", "(", "fd", ")", ":", "\n", "    ", "d", "=", "{", "}", "\n", "\n", "for", "k", ",", "v", "in", "fd", ".", "items", "(", ")", ":", "\n", "        ", "name", ",", "entry", ",", "ty", "=", "get_last_token", "(", "k", ",", "{", "'@'", ":", "list", ",", "'.'", ":", "dict", "}", ")", "\n", "if", "ty", "==", "list", ":", "\n", "            ", "if", "name", "in", "d", ".", "keys", "(", ")", ":", "\n", "                ", "d", "[", "name", "]", "=", "extend_list", "(", "d", "[", "name", "]", ",", "int", "(", "entry", ")", ",", "v", ")", "\n", "", "else", ":", "\n", "                ", "d", "[", "name", "]", "=", "extend_list", "(", "[", "]", ",", "int", "(", "entry", ")", ",", "v", ")", "\n", "", "", "elif", "ty", "==", "dict", ":", "\n", "            ", "if", "name", "in", "d", ".", "keys", "(", ")", ":", "\n", "                ", "d", "[", "name", "]", ".", "update", "(", "{", "entry", ":", "v", "}", ")", "\n", "", "else", ":", "\n", "                ", "d", "[", "name", "]", "=", "{", "entry", ":", "v", "}", "\n", "", "", "else", ":", "\n", "            ", "d", "[", "k", "]", "=", "v", "\n", "", "", "return", "embed_dict", "(", "d", ")", "if", "has_token", "(", "''", ".", "join", "(", "d", ".", "keys", "(", ")", ")", ",", "tokens", "=", "{", "'@'", ":", "list", ",", "'.'", ":", "dict", "}", ")", "else", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.load_mask_from_nii": [[110, 112], ["nibabel.load().get_data", "nibabel.load"], "function", ["None"], ["", "def", "load_mask_from_nii", "(", "mask_nii_file", ")", ":", "\n", "    ", "return", "nib", ".", "load", "(", "mask_nii_file", ")", ".", "get_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.view_data": [[113, 120], ["view_vol.reshape.reshape", "numpy.ones", "nibabel.save", "numpy.prod", "idx_mask.astype().flatten", "nibabel.Nifti1Image", "idx_mask.astype", "numpy.eye"], "function", ["None"], ["", "def", "view_data", "(", "vol_shape", ",", "idx_mask", ",", "data_vol", ",", "order", "=", "'C'", ",", "save_to", "=", "None", ")", ":", "\n", "    ", "view_vol", "=", "np", ".", "ones", "(", "np", ".", "prod", "(", "vol_shape", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "np", ".", "nan", "\n", "view_vol", "[", "idx_mask", ".", "astype", "(", "'int'", ")", ".", "flatten", "(", ")", "]", "=", "data_vol", "\n", "view_vol", "=", "view_vol", ".", "reshape", "(", "vol_shape", ",", "order", "=", "order", ")", "\n", "if", "save_to", ":", "\n", "        ", "nib", ".", "save", "(", "nib", ".", "Nifti1Image", "(", "view_vol", ",", "affine", "=", "np", ".", "eye", "(", "4", ")", ")", ",", "save_to", ")", "\n", "", "return", "view_vol", "\n", "###", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.rgb2gray": [[123, 125], ["None"], "function", ["None"], ["", "def", "rgb2gray", "(", "im", ")", ":", "\n", "    ", "return", "0.299", "*", "im", "[", ":", ",", ":", ",", "0", "]", "+", "0.587", "*", "im", "[", ":", ",", ":", ",", "1", "]", "+", "0.114", "*", "im", "[", ":", ",", ":", ",", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.center_crop": [[126, 132], ["numpy.argmax", "im.crop", "im.crop", "max", "min"], "function", ["None"], ["", "def", "center_crop", "(", "im", ")", ":", "\n", "    ", "wax", "=", "np", ".", "argmax", "(", "im", ".", "size", ")", "\n", "border", "=", "(", "max", "(", "im", ".", "size", ")", "-", "min", "(", "im", ".", "size", ")", ")", "/", "2", "\n", "if", "(", "wax", "==", "0", ")", ":", "\n", "        ", "return", "im", ".", "crop", "(", "box", "=", "(", "border", ",", "0", ",", "im", ".", "size", "[", "0", "]", "-", "border", ",", "im", ".", "size", "[", "1", "]", ")", ")", "\n", "", "return", "im", ".", "crop", "(", "box", "=", "(", "0", ",", "border", ",", "im", ".", "size", "[", "0", "]", ",", "im", ".", "size", "[", "1", "]", "-", "border", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.list_files": [[134, 140], ["os.listdir", "sorted", "os.path.isfile"], "function", ["None"], ["", "def", "list_files", "(", "dir_path", ")", ":", "\n", "    ", "fileNames", "=", "[", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "dir_path", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "dir_path", "+", "f", ")", ":", "\n", "            ", "fileNames", "+=", "[", "dir_path", "+", "f", ",", "]", "\n", "", "", "return", "sorted", "(", "fileNames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.src.file_utility.list_dir": [[141, 147], ["os.listdir", "sorted", "os.path.isdir"], "function", ["None"], ["", "def", "list_dir", "(", "dir_path", ")", ":", "\n", "    ", "dirNames", "=", "[", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "dir_path", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "dir_path", "+", "f", ")", ":", "\n", "            ", "dirNames", "+=", "[", "f", ",", "]", "\n", "", "", "return", "sorted", "(", "dirNames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.AlexNet.__init__": [[23, 62], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.Alexnet_fmaps.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "6", ",", "6", ")", ")", "\n", ")", "\n", "self", ".", "fc6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "fc8", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.AlexNet.forward": [[64, 76], ["alexnet.AlexNet.conv1", "alexnet.AlexNet.conv2", "alexnet.AlexNet.conv3", "alexnet.AlexNet.conv4", "alexnet.AlexNet.conv5", "alexnet.AlexNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "alexnet.AlexNet.fc6", "alexnet.AlexNet.fc7", "alexnet.AlexNet.fc8"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "c2", "=", "self", ".", "conv2", "(", "c1", ")", "\n", "c3", "=", "self", ".", "conv3", "(", "c2", ")", "\n", "c4", "=", "self", ".", "conv4", "(", "c3", ")", "\n", "c5", "=", "self", ".", "conv5", "(", "c4", ")", "\n", "y", "=", "self", ".", "avgpool", "(", "c5", ")", "\n", "y", "=", "torch", ".", "flatten", "(", "y", ",", "1", ")", "\n", "f6", "=", "self", ".", "fc6", "(", "y", ")", "\n", "f7", "=", "self", ".", "fc7", "(", "f6", ")", "\n", "f8", "=", "self", ".", "fc8", "(", "f7", ")", "\n", "return", "[", "c1", ",", "c2", ",", "c3", ",", "c4", ",", "c5", ",", "f6", "[", ":", ",", ":", ",", "None", ",", "None", "]", ",", "f7", "[", ":", ",", ":", ",", "None", ",", "None", "]", ",", "f8", "[", ":", ",", ":", ",", "None", ",", "None", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.Alexnet_fmaps.__init__": [[119, 124], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "alexnet.build_alexnet_fmaps", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.Alexnet_fmaps.__init__", "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.build_alexnet_fmaps"], ["def", "__init__", "(", "self", ",", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "        ", "super", "(", "Alexnet_fmaps", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Parameter", "(", "torch", ".", "as_tensor", "(", "mean", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "std", "=", "nn", ".", "Parameter", "(", "torch", ".", "as_tensor", "(", "std", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "extractor", "=", "build_alexnet_fmaps", "(", "pretrained", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.Alexnet_fmaps.forward": [[125, 127], ["alexnet.Alexnet_fmaps.extractor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "_x", ")", ":", "\n", "        ", "return", "self", ".", "extractor", "(", "(", "_x", "-", "self", ".", "mean", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "/", "self", ".", "std", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zijin-gu_NeuroGen.models.alexnet.build_alexnet_fmaps": [[78, 110], ["alexnet.AlexNet", "load_state_dict_from_url", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "load_state_dict_from_url.pop", "AlexNet.load_state_dict"], "function", ["None"], ["", "", "def", "build_alexnet_fmaps", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"AlexNet model architecture from the\n    `\"One weird trick...\" <https://arxiv.org/abs/1404.5997>`_ paper.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "model", "=", "AlexNet", "(", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'alexnet'", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "### Rename dictionary keys to match new breakdown", "\n", "state_dict", "[", "'conv1.0.weight'", "]", "=", "state_dict", ".", "pop", "(", "'features.0.weight'", ")", "\n", "state_dict", "[", "'conv1.0.bias'", "]", "=", "state_dict", ".", "pop", "(", "'features.0.bias'", ")", "\n", "state_dict", "[", "'conv2.0.weight'", "]", "=", "state_dict", ".", "pop", "(", "'features.3.weight'", ")", "\n", "state_dict", "[", "'conv2.0.bias'", "]", "=", "state_dict", ".", "pop", "(", "'features.3.bias'", ")", "\n", "state_dict", "[", "'conv3.1.weight'", "]", "=", "state_dict", ".", "pop", "(", "'features.6.weight'", ")", "\n", "state_dict", "[", "'conv3.1.bias'", "]", "=", "state_dict", ".", "pop", "(", "'features.6.bias'", ")", "\n", "state_dict", "[", "'conv4.0.weight'", "]", "=", "state_dict", ".", "pop", "(", "'features.8.weight'", ")", "\n", "state_dict", "[", "'conv4.0.bias'", "]", "=", "state_dict", ".", "pop", "(", "'features.8.bias'", ")", "\n", "state_dict", "[", "'conv5.0.weight'", "]", "=", "state_dict", ".", "pop", "(", "'features.10.weight'", ")", "\n", "state_dict", "[", "'conv5.0.bias'", "]", "=", "state_dict", ".", "pop", "(", "'features.10.bias'", ")", "\n", "###", "\n", "state_dict", "[", "'fc6.0.weight'", "]", "=", "state_dict", ".", "pop", "(", "'classifier.1.weight'", ")", "\n", "state_dict", "[", "'fc6.0.bias'", "]", "=", "state_dict", ".", "pop", "(", "'classifier.1.bias'", ")", "\n", "state_dict", "[", "'fc7.0.weight'", "]", "=", "state_dict", ".", "pop", "(", "'classifier.4.weight'", ")", "\n", "state_dict", "[", "'fc7.0.bias'", "]", "=", "state_dict", ".", "pop", "(", "'classifier.4.bias'", ")", "\n", "state_dict", "[", "'fc8.0.weight'", "]", "=", "state_dict", ".", "pop", "(", "'classifier.6.weight'", ")", "\n", "state_dict", "[", "'fc8.0.bias'", "]", "=", "state_dict", ".", "pop", "(", "'classifier.6.bias'", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]]}