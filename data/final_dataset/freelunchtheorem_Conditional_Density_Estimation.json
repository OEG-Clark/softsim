{"home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.setUp": [[18, 20], ["numpy.random.seed"], "methods", ["None"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "23", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.get_samples": [[21, 27], ["numpy.random.seed", "numpy.random.normal"], "methods", ["None"], ["", "def", "get_samples", "(", "self", ",", "std", "=", "1.0", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "data", "=", "np", ".", "random", ".", "normal", "(", "[", "2", ",", "2", "]", ",", "std", ",", "size", "=", "(", "2000", ",", "2", ")", ")", "\n", "X", "=", "data", "[", ":", ",", "0", "]", "\n", "Y", "=", "data", "[", ":", ",", "1", "]", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_value_at_risk_mc": [[28, 41], ["numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy.fit", "tests.dummies.GaussianDummy.value_at_risk", "scipy.stats.norm.ppf", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.identity", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk"], ["", "def", "test_value_at_risk_mc", "(", "self", ")", ":", "\n", "    ", "for", "mu", ",", "sigma", "in", "[", "(", "-", "2", ",", "0.5", ")", ",", "(", "0.4", ",", "0.01", ")", ",", "(", "9", ",", "3", ")", "]", ":", "\n", "# prepare estimator dummy", "\n", "      ", "mu1", "=", "np", ".", "array", "(", "[", "mu", "]", ")", "\n", "sigma1", "=", "np", ".", "identity", "(", "n", "=", "1", ")", "*", "sigma", "\n", "est", "=", "GaussianDummy", "(", "mean", "=", "mu1", ",", "cov", "=", "sigma1", "**", "2", ",", "ndim_x", "=", "1", ",", "ndim_y", "=", "1", ",", "has_cdf", "=", "False", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "alpha", "=", "0.05", "\n", "VaR_est", "=", "est", ".", "value_at_risk", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "1", "]", "]", ")", ",", "alpha", "=", "alpha", ")", "\n", "VaR_true", "=", "norm", ".", "ppf", "(", "alpha", ",", "loc", "=", "mu", ",", "scale", "=", "sigma", ")", "\n", "self", ".", "assertAlmostEqual", "(", "VaR_est", "[", "0", "]", ",", "VaR_true", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "VaR_est", "[", "1", "]", ",", "VaR_true", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_value_at_risk_cdf": [[42, 55], ["numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy.fit", "tests.dummies.GaussianDummy.value_at_risk", "scipy.stats.norm.ppf", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.identity", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk"], ["", "", "def", "test_value_at_risk_cdf", "(", "self", ")", ":", "\n", "    ", "for", "mu", ",", "sigma", "in", "[", "(", "-", "2", ",", "0.5", ")", ",", "(", "0.4", ",", "0.01", ")", ",", "(", "22", ",", "3", ")", "]", ":", "\n", "# prepare estimator dummy", "\n", "      ", "mu1", "=", "np", ".", "array", "(", "[", "mu", "]", ")", "\n", "sigma1", "=", "np", ".", "identity", "(", "n", "=", "1", ")", "*", "sigma", "\n", "est", "=", "GaussianDummy", "(", "mean", "=", "mu1", ",", "cov", "=", "sigma1", "**", "2", ",", "ndim_x", "=", "1", ",", "ndim_y", "=", "1", ",", "has_cdf", "=", "True", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "alpha", "=", "0.05", "\n", "VaR_est", "=", "est", ".", "value_at_risk", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "1", "]", "]", ")", ",", "alpha", "=", "alpha", ")", "\n", "VaR_true", "=", "norm", ".", "ppf", "(", "alpha", ",", "loc", "=", "mu", ",", "scale", "=", "sigma", ")", "\n", "self", ".", "assertAlmostEqual", "(", "VaR_est", "[", "0", "]", ",", "VaR_true", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "VaR_est", "[", "1", "]", ",", "VaR_true", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_conditional_value_at_risk_mc": [[56, 73], ["numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy.fit", "tests.dummies.GaussianDummy.conditional_value_at_risk", "print", "print", "print", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.identity", "tests.dummies.GaussianDummy.value_at_risk", "scipy.stats.norm.pdf", "numpy.array", "scipy.stats.norm.ppf", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.conditional_value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "", "def", "test_conditional_value_at_risk_mc", "(", "self", ")", ":", "\n", "    ", "for", "mu", ",", "sigma", ",", "alpha", "in", "[", "(", "1", ",", "1", ",", "0.05", ")", ",", "(", "0.4", ",", "0.1", ",", "0.02", ")", ",", "(", "0.1", ",", "2", ",", "0.01", ")", "]", ":", "\n", "# prepare estimator dummy", "\n", "      ", "mu1", "=", "np", ".", "array", "(", "[", "mu", "]", ")", "\n", "sigma1", "=", "np", ".", "identity", "(", "n", "=", "1", ")", "*", "sigma", "\n", "est", "=", "GaussianDummy", "(", "mean", "=", "mu1", ",", "cov", "=", "sigma1", "**", "2", ",", "ndim_x", "=", "1", ",", "ndim_y", "=", "1", ",", "has_pdf", "=", "True", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "CVaR_true", "=", "mu", "-", "sigma", "/", "alpha", "*", "norm", ".", "pdf", "(", "norm", ".", "ppf", "(", "alpha", ")", ")", "\n", "CVaR_est", "=", "est", ".", "conditional_value_at_risk", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "1", "]", "]", ")", ",", "alpha", "=", "alpha", ")", "\n", "\n", "print", "(", "\"CVaR True (%.2f, %.2f):\"", "%", "(", "mu", ",", "sigma", ")", ",", "CVaR_true", ")", "\n", "print", "(", "\"CVaR_est (%.2f, %.2f):\"", "%", "(", "mu", ",", "sigma", ")", ",", "CVaR_est", ")", "\n", "print", "(", "\"VaR (%.2f, %.2f):\"", "%", "(", "mu", ",", "sigma", ")", ",", "est", ".", "value_at_risk", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "1", "]", "]", ")", ",", "alpha", "=", "alpha", ")", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "CVaR_est", "[", "0", "]", ",", "CVaR_true", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "CVaR_est", "[", "1", "]", ",", "CVaR_true", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_conditional_value_at_risk_sample": [[74, 89], ["numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy.fit", "tests.dummies.GaussianDummy.conditional_value_at_risk", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.identity", "scipy.stats.norm.pdf", "numpy.array", "scipy.stats.norm.ppf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.conditional_value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "", "def", "test_conditional_value_at_risk_sample", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "for", "mu", ",", "sigma", "in", "[", "(", "-", "6", ",", "0.25", ")", ",", "(", "0.4", ",", "0.1", ")", ",", "(", "22", ",", "3", ")", "]", ":", "\n", "      ", "mu1", "=", "np", ".", "array", "(", "[", "mu", "]", ")", "\n", "sigma1", "=", "np", ".", "identity", "(", "n", "=", "1", ")", "*", "sigma", "\n", "est", "=", "GaussianDummy", "(", "mean", "=", "mu1", ",", "cov", "=", "sigma1", "**", "2", ",", "ndim_x", "=", "1", ",", "ndim_y", "=", "1", ",", "has_pdf", "=", "False", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "alpha", "=", "0.02", "\n", "\n", "CVaR_true", "=", "mu", "-", "sigma", "/", "alpha", "*", "norm", ".", "pdf", "(", "norm", ".", "ppf", "(", "alpha", ")", ")", "\n", "CVaR_est", "=", "est", ".", "conditional_value_at_risk", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "1", "]", "]", ")", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "2", "*", "10", "**", "6", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "CVaR_est", "[", "0", "]", ",", "CVaR_true", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "CVaR_est", "[", "1", "]", ",", "CVaR_true", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_mean_mc": [[90, 100], ["numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy.fit", "tests.dummies.GaussianDummy.mean_", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.identity", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_"], ["", "", "def", "test_mean_mc", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "mu", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "sigma", "=", "np", ".", "identity", "(", "n", "=", "2", ")", "*", "1", "\n", "est", "=", "GaussianDummy", "(", "mean", "=", "mu", ",", "cov", "=", "sigma", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ",", "has_cdf", "=", "False", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "mean_est", "=", "est", ".", "mean_", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "mean_est", "[", "0", "]", "[", "0", "]", ",", "mu", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "mean_est", "[", "0", "]", "[", "1", "]", ",", "mu", "[", "1", "]", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_mean_pdf": [[101, 111], ["numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy.fit", "tests.dummies.GaussianDummy.mean_", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.identity", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_"], ["", "def", "test_mean_pdf", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "mu", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "sigma", "=", "np", ".", "identity", "(", "n", "=", "2", ")", "*", "1", "\n", "est", "=", "GaussianDummy", "(", "mean", "=", "mu", ",", "cov", "=", "sigma", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ",", "can_sample", "=", "False", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "mean_est", "=", "est", ".", "mean_", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "mean_est", "[", "0", "]", "[", "0", "]", ",", "mu", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "mean_est", "[", "0", "]", "[", "1", "]", ",", "mu", "[", "1", "]", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_mean_mixture": [[112, 127], ["numpy.random.seed", "set_random_seed", "numpy.random.normal", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "cde.density_estimator.MixtureDensityNetwork.mean_", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_"], ["", "def", "test_mean_mixture", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "24", ")", "\n", "from", "tensorflow", "import", "set_random_seed", "\n", "set_random_seed", "(", "24", ")", "\n", "\n", "data", "=", "np", ".", "random", ".", "normal", "(", "[", "2", ",", "2", ",", "7", ",", "-", "2", "]", ",", "1", ",", "size", "=", "(", "5000", ",", "4", ")", ")", "\n", "X", "=", "data", "[", ":", ",", "0", ":", "2", "]", "\n", "Y", "=", "data", "[", ":", ",", "2", ":", "4", "]", "\n", "\n", "model", "=", "MixtureDensityNetwork", "(", "\"mdn_mean\"", ",", "2", ",", "2", ",", "n_centers", "=", "3", ",", "y_noise_std", "=", "0.1", ",", "x_noise_std", "=", "0.1", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "mean_est", "=", "model", ".", "mean_", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "1.5", ",", "2", "]", "]", ")", ",", "n_samples", "=", "10", "**", "7", ")", "\n", "self", ".", "assertAlmostEqual", "(", "mean_est", "[", "0", "]", "[", "0", "]", ",", "7", ",", "places", "=", "0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "mean_est", "[", "0", "]", "[", "1", "]", ",", "-", "2", ",", "places", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_std1": [[128, 138], ["numpy.array", "numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy.fit", "tests.dummies.GaussianDummy.std_", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.sqrt", "numpy.sqrt", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.std_"], ["", "def", "test_std1", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "mu", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "sigma", "=", "np", ".", "array", "(", "[", "[", "1", ",", "-", "0.2", "]", ",", "[", "-", "0.2", ",", "2", "]", "]", ")", "\n", "est", "=", "GaussianDummy", "(", "mean", "=", "mu", ",", "cov", "=", "sigma", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ",", "can_sample", "=", "False", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "std", "=", "est", ".", "std_", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "std", "[", "0", "]", "[", "0", "]", ",", "np", ".", "sqrt", "(", "sigma", "[", "0", "]", "[", "0", "]", ")", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "std", "[", "0", "]", "[", "1", "]", ",", "np", ".", "sqrt", "(", "sigma", "[", "1", "]", "[", "1", "]", ")", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_std2": [[139, 149], ["numpy.array", "numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy.fit", "tests.dummies.GaussianDummy.std_", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.std_"], ["", "def", "test_std2", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "mu", "=", "np", ".", "array", "(", "[", "14", "]", ")", "\n", "sigma", "=", "np", ".", "array", "(", "[", "[", "0.1", "]", "]", ")", "\n", "est", "=", "GaussianDummy", "(", "mean", "=", "mu", ",", "cov", "=", "sigma", ",", "ndim_x", "=", "1", ",", "ndim_y", "=", "1", ",", "can_sample", "=", "False", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "std_est", "=", "est", ".", "std_", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0.0", "]", ",", "[", "1.0", "]", "]", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "std_est", "[", "0", "]", "[", "0", "]", "**", "2", ",", "sigma", "[", "0", "]", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "std_est", "[", "1", "]", "[", "0", "]", "**", "2", ",", "sigma", "[", "0", "]", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_covariance1": [[150, 159], ["numpy.array", "numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy.fit", "tests.dummies.GaussianDummy.covariance", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["", "def", "test_covariance1", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "mu", "=", "np", ".", "array", "(", "[", "-", "1", "]", ")", "\n", "sigma", "=", "np", ".", "array", "(", "[", "[", "0.1", "]", "]", ")", "\n", "est", "=", "GaussianDummy", "(", "mean", "=", "mu", ",", "cov", "=", "sigma", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "1", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "cov_est", "=", "est", ".", "covariance", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0.5", ",", "2", "]", "]", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "cov_est", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "sigma", "[", "0", "]", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_covariance2": [[160, 170], ["numpy.array", "numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy.fit", "tests.dummies.GaussianDummy.covariance", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["", "def", "test_covariance2", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "mu", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "sigma", "=", "np", ".", "array", "(", "[", "[", "1", ",", "-", "0.2", "]", ",", "[", "-", "0.2", ",", "2", "]", "]", ")", "\n", "est", "=", "GaussianDummy", "(", "mean", "=", "mu", ",", "cov", "=", "sigma", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ",", "can_sample", "=", "False", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "cov_est", "=", "est", ".", "covariance", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "cov_est", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "sigma", "[", "0", "]", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "cov_est", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "sigma", "[", "1", "]", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_mean_std": [[171, 182], ["numpy.array", "numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy.fit", "tests.dummies.GaussianDummy.mean_std", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation.mean_std"], ["", "def", "test_mean_std", "(", "self", ")", ":", "\n", "    ", "mu", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "sigma", "=", "np", ".", "array", "(", "[", "[", "1", ",", "-", "0.2", "]", ",", "[", "-", "0.2", ",", "2", "]", "]", ")", "\n", "est", "=", "GaussianDummy", "(", "mean", "=", "mu", ",", "cov", "=", "sigma", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ",", "can_sample", "=", "False", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "mean_est", ",", "std_est", "=", "est", ".", "mean_std", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "mean_est", "[", "0", "]", "[", "0", "]", ",", "mu", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "mean_est", "[", "0", "]", "[", "1", "]", ",", "mu", "[", "1", "]", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "std_est", "[", "0", "]", "[", "0", "]", "**", "2", ",", "sigma", "[", "0", "]", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "std_est", "[", "0", "]", "[", "1", "]", "**", "2", ",", "sigma", "[", "1", "]", "[", "1", "]", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_covariance_mixture": [[183, 200], ["numpy.random.seed", "set_random_seed", "numpy.random.normal", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "cde.density_estimator.MixtureDensityNetwork.covariance", "print", "unittests_evaluations.TestRiskMeasures.assertLessEqual", "unittests_evaluations.TestRiskMeasures.assertLessEqual", "numpy.abs", "numpy.abs", "numpy.array", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["", "def", "test_covariance_mixture", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "24", ")", "\n", "from", "tensorflow", "import", "set_random_seed", "\n", "set_random_seed", "(", "24", ")", "\n", "\n", "scale", "=", "2.0", "\n", "data", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "[", "2", ",", "2", ",", "7", ",", "-", "2", "]", ",", "scale", "=", "scale", ",", "size", "=", "(", "10000", ",", "4", ")", ")", "\n", "X", "=", "data", "[", ":", ",", "0", ":", "2", "]", "\n", "Y", "=", "data", "[", ":", ",", "2", ":", "4", "]", "\n", "\n", "model", "=", "MixtureDensityNetwork", "(", "\"mdn_cov\"", ",", "2", ",", "2", ",", "n_centers", "=", "5", ",", "x_noise_std", "=", "0.1", ",", "y_noise_std", "=", "0.1", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "cov_est", "=", "model", ".", "covariance", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ")", "\n", "print", "(", "cov_est", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "abs", "(", "cov_est", "[", "0", "]", "[", "1", "]", "[", "0", "]", "-", "0.0", ")", ",", "0.2", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "abs", "(", "np", ".", "sqrt", "(", "cov_est", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "-", "scale", ")", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_skewness1": [[201, 214], ["numpy.array", "numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy.fit", "tests.dummies.GaussianDummy._skewness_mc", "print", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "tests.dummies.GaussianDummy._skewness_pdf", "print", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._skewness_mc", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._skewness_pdf"], ["", "def", "test_skewness1", "(", "self", ")", ":", "\n", "    ", "mu", "=", "np", ".", "array", "(", "[", "-", "0.001", "]", ")", "\n", "sigma", "=", "np", ".", "array", "(", "[", "[", "0.02", "]", "]", ")", "\n", "est", "=", "GaussianDummy", "(", "mean", "=", "mu", ",", "cov", "=", "sigma", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "1", ",", "can_sample", "=", "False", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "skew", "=", "est", ".", "_skewness_mc", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ")", "\n", "print", "(", "\"Skewness sample estimate:\"", ",", "skew", ")", "\n", "self", ".", "assertAlmostEqual", "(", "skew", "[", "0", "]", ",", "0", ",", "places", "=", "1", ")", "\n", "\n", "skew", "=", "est", ".", "_skewness_pdf", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ")", "\n", "print", "(", "\"Skewness pdf estimate:\"", ",", "skew", ")", "\n", "self", ".", "assertAlmostEqual", "(", "skew", "[", "0", "]", ",", "0", ",", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_skewness2": [[215, 228], ["tests.dummies.SkewNormalDummy", "tests.dummies.SkewNormalDummy.fit", "tests.dummies.SkewNormalDummy._skewness_mc", "print", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "tests.dummies.SkewNormalDummy._skewness_pdf", "print", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "print", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._skewness_mc", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._skewness_pdf"], ["", "def", "test_skewness2", "(", "self", ")", ":", "\n", "    ", "est", "=", "SkewNormalDummy", "(", "shape", "=", "-", "2", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "1", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "skew", "=", "est", ".", "_skewness_mc", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ",", "n_samples", "=", "10", "**", "6", ")", "\n", "print", "(", "\"Skewness sample estimate:\"", ",", "skew", ")", "\n", "self", ".", "assertAlmostEqual", "(", "skew", "[", "0", "]", ",", "est", ".", "skewness", ",", "places", "=", "1", ")", "\n", "\n", "skew", "=", "est", ".", "_skewness_pdf", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ",", "n_samples", "=", "10", "**", "6", ")", "\n", "print", "(", "\"Skewness pdf estimate:\"", ",", "skew", ")", "\n", "self", ".", "assertAlmostEqual", "(", "skew", "[", "0", "]", ",", "est", ".", "skewness", ",", "places", "=", "1", ")", "\n", "\n", "print", "(", "\"True Skewness value\"", ",", "est", ".", "skewness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_kurtosis1": [[229, 242], ["numpy.array", "numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy.fit", "tests.dummies.GaussianDummy._kurtosis_mc", "print", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "tests.dummies.GaussianDummy._kurtosis_pdf", "print", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._kurtosis_mc", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._kurtosis_pdf"], ["", "def", "test_kurtosis1", "(", "self", ")", ":", "\n", "    ", "mu", "=", "np", ".", "array", "(", "[", "-", "0.001", "]", ")", "\n", "sigma", "=", "np", ".", "array", "(", "[", "[", "0.02", "]", "]", ")", "\n", "est", "=", "GaussianDummy", "(", "mean", "=", "mu", ",", "cov", "=", "sigma", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "1", ",", "can_sample", "=", "False", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "kurt", "=", "est", ".", "_kurtosis_mc", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ",", "n_samples", "=", "10", "**", "6", ")", "\n", "print", "(", "\"Kurtosis sample estimate:\"", ",", "kurt", ")", "\n", "self", ".", "assertAlmostEqual", "(", "kurt", "[", "0", "]", ",", "0", ",", "places", "=", "1", ")", "\n", "\n", "kurt", "=", "est", ".", "_kurtosis_pdf", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ",", "n_samples", "=", "10", "**", "6", ")", "\n", "print", "(", "\"Kurtosis pdf estimate:\"", ",", "kurt", ")", "\n", "self", ".", "assertAlmostEqual", "(", "kurt", "[", "0", "]", ",", "0", ",", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_kurtosis2": [[243, 256], ["tests.dummies.SkewNormalDummy", "tests.dummies.SkewNormalDummy.fit", "tests.dummies.SkewNormalDummy._kurtosis_mc", "print", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "tests.dummies.SkewNormalDummy._kurtosis_pdf", "print", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "print", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._kurtosis_mc", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._kurtosis_pdf"], ["", "def", "test_kurtosis2", "(", "self", ")", ":", "\n", "    ", "est", "=", "SkewNormalDummy", "(", "shape", "=", "-", "2", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "1", ")", "\n", "est", ".", "fit", "(", "None", ",", "None", ")", "\n", "\n", "kurt", "=", "est", ".", "_kurtosis_mc", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ",", "n_samples", "=", "10", "**", "6", ")", "\n", "print", "(", "\"Kurtosis sample estimate:\"", ",", "kurt", ")", "\n", "self", ".", "assertAlmostEqual", "(", "kurt", "[", "0", "]", ",", "est", ".", "kurtosis", ",", "places", "=", "1", ")", "\n", "\n", "kurt", "=", "est", ".", "_kurtosis_pdf", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ",", "n_samples", "=", "10", "**", "6", ")", "\n", "print", "(", "\"Kurtosis pdf estimate:\"", ",", "kurt", ")", "\n", "self", ".", "assertAlmostEqual", "(", "kurt", "[", "0", "]", ",", "est", ".", "kurtosis", ",", "places", "=", "1", ")", "\n", "\n", "print", "(", "\"True Kurtosis value\"", ",", "est", ".", "kurtosis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_conditional_value_at_risk_mixture": [[257, 273], ["numpy.random.seed", "unittests_evaluations.TestRiskMeasures.get_samples", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "numpy.array", "cde.density_estimator.KernelMixtureNetwork.conditional_value_at_risk", "cde.density_estimator.BaseDensityEstimator.conditional_value_at_risk", "print", "print", "numpy.mean", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.conditional_value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.conditional_value_at_risk"], ["", "def", "test_conditional_value_at_risk_mixture", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "20", ")", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "std", "=", "0.5", ")", "\n", "model", "=", "KernelMixtureNetwork", "(", "\"kmn-var\"", ",", "1", ",", "1", ",", "center_sampling_method", "=", "\"k_means\"", ",", "n_centers", "=", "5", ",", "n_training_epochs", "=", "500", ",", "random_seed", "=", "24", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "1", "]", "]", ")", "\n", "\n", "CVaR_mixture", "=", "model", ".", "conditional_value_at_risk", "(", "x_cond", ",", "alpha", "=", "0.05", ")", "\n", "CVaR_cdf", "=", "BaseDensityEstimator", ".", "conditional_value_at_risk", "(", "model", ",", "x_cond", ",", "alpha", "=", "0.05", ",", "n_samples", "=", "5", "*", "10", "**", "7", ")", "\n", "\n", "print", "(", "\"CVaR mixture:\"", ",", "CVaR_mixture", ")", "\n", "print", "(", "\"CVaR cdf:\"", ",", "CVaR_cdf", ")", "\n", "\n", "diff", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "CVaR_cdf", "-", "CVaR_mixture", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "diff", ",", "0", ",", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestRiskMeasures.test_tail_risks_risk_mixture": [[274, 292], ["unittests_evaluations.TestRiskMeasures.get_samples", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "numpy.array", "cde.density_estimator.KernelMixtureNetwork.tail_risk_measures", "cde.density_estimator.BaseDensityEstimator.tail_risk_measures", "print", "print", "numpy.mean", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.mean", "unittests_evaluations.TestRiskMeasures.assertAlmostEqual", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.tail_risk_measures", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.tail_risk_measures"], ["", "def", "test_tail_risks_risk_mixture", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "std", "=", "0.5", ")", "\n", "model", "=", "KernelMixtureNetwork", "(", "\"kmn-var2\"", ",", "1", ",", "1", ",", "center_sampling_method", "=", "\"k_means\"", ",", "n_centers", "=", "5", ",", "n_training_epochs", "=", "50", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "1", "]", "]", ")", "\n", "\n", "VaR_mixture", ",", "CVaR_mixture", "=", "model", ".", "tail_risk_measures", "(", "x_cond", ",", "alpha", "=", "0.07", ")", "\n", "VaR_cdf", ",", "CVaR_mc", "=", "BaseDensityEstimator", ".", "tail_risk_measures", "(", "model", ",", "x_cond", ",", "alpha", "=", "0.07", ")", "\n", "\n", "print", "(", "\"CVaR mixture:\"", ",", "CVaR_mixture", ")", "\n", "print", "(", "\"CVaR cdf:\"", ",", "CVaR_mc", ")", "\n", "\n", "diff_cvar", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "CVaR_mc", "-", "CVaR_mixture", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "diff_cvar", ",", "0", ",", "places", "=", "1", ")", "\n", "\n", "diff_var", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "VaR_mixture", "-", "VaR_cdf", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "diff_var", ",", "0", ",", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestDivergenceMeasures.setUp": [[295, 311], ["numpy.array", "numpy.eye", "numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy", "numpy.array", "numpy.array", "numpy.array", "tests.dummies.GaussianDummy", "tests.dummies.GaussianDummy", "numpy.eye", "numpy.eye"], "methods", ["None"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "self", ".", "mu1", "=", "np", ".", "array", "(", "[", "0.0", "]", ")", "\n", "self", ".", "cov1", "=", "np", ".", "eye", "(", "1", ")", "\n", "self", ".", "mu2", "=", "np", ".", "array", "(", "[", "1.0", "]", ")", "\n", "self", ".", "cov2", "=", "np", ".", "eye", "(", "1", ")", "*", "2", "\n", "\n", "self", ".", "gaussian1", "=", "GaussianDummy", "(", "mean", "=", "self", ".", "mu1", ",", "cov", "=", "self", ".", "cov1", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "1", ")", "\n", "self", ".", "gaussian2", "=", "GaussianDummy", "(", "mean", "=", "self", ".", "mu2", ",", "cov", "=", "self", ".", "cov2", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "1", ")", "\n", "\n", "self", ".", "mu3", "=", "np", ".", "array", "(", "[", "1.6", ",", "-", "7.0", "]", ")", "\n", "self", ".", "cov3", "=", "np", ".", "array", "(", "[", "[", "2.0", ",", "0.5", "]", ",", "[", "0.5", ",", "4.5", "]", "]", ")", "\n", "self", ".", "mu4", "=", "np", ".", "array", "(", "[", "1.0", ",", "-", "5.0", "]", ")", "\n", "self", ".", "cov4", "=", "np", ".", "eye", "(", "2", ")", "*", "2", "\n", "\n", "self", ".", "gaussian3", "=", "GaussianDummy", "(", "mean", "=", "self", ".", "mu3", ",", "cov", "=", "self", ".", "cov3", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ")", "\n", "self", ".", "gaussian4", "=", "GaussianDummy", "(", "mean", "=", "self", ".", "mu4", ",", "cov", "=", "self", ".", "cov4", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestDivergenceMeasures.test_kl_gaussian": [[312, 323], ["unittests_evaluations._kl_gaussians", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual", "unittests_evaluations._kl_gaussians", "unittests_evaluations.TestDivergenceMeasures.assertGreater", "numpy.array", "numpy.array", "unittests_evaluations._kl_gaussians", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians"], ["", "def", "test_kl_gaussian", "(", "self", ")", ":", "\n", "    ", "kl1", "=", "_kl_gaussians", "(", "self", ".", "mu1", ",", "self", ".", "cov1", ",", "self", ".", "mu1", ",", "self", ".", "cov1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "float", "(", "kl1", ")", ",", "0.0", ")", "\n", "\n", "kl2", "=", "_kl_gaussians", "(", "self", ".", "mu1", ",", "self", ".", "cov1", ",", "self", ".", "mu2", ",", "self", ".", "cov2", ")", "\n", "self", ".", "assertGreater", "(", "float", "(", "kl2", ")", ",", "0.0", ")", "\n", "\n", "mu", "=", "np", ".", "array", "(", "[", "1.6", ",", "-", "7.0", "]", ")", "\n", "cov", "=", "np", ".", "array", "(", "[", "[", "2.0", ",", "0.5", "]", ",", "[", "0.5", ",", "4.5", "]", "]", ")", "\n", "kl3", "=", "_kl_gaussians", "(", "mu", ",", "cov", ",", "mu", ",", "cov", ")", "\n", "self", ".", "assertAlmostEqual", "(", "float", "(", "kl3", ")", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestDivergenceMeasures.test_hellinger_gaussian": [[324, 335], ["unittests_evaluations._hellinger_gaussians", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual", "unittests_evaluations._hellinger_gaussians", "unittests_evaluations.TestDivergenceMeasures.assertGreater", "numpy.array", "numpy.array", "unittests_evaluations._hellinger_gaussians", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._hellinger_gaussians", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._hellinger_gaussians", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._hellinger_gaussians"], ["", "def", "test_hellinger_gaussian", "(", "self", ")", ":", "\n", "    ", "kl1", "=", "_hellinger_gaussians", "(", "self", ".", "mu1", ",", "self", ".", "cov1", ",", "self", ".", "mu1", ",", "self", ".", "cov1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "float", "(", "kl1", ")", ",", "0.0", ")", "\n", "\n", "kl2", "=", "_hellinger_gaussians", "(", "self", ".", "mu1", ",", "self", ".", "cov1", ",", "self", ".", "mu2", ",", "self", ".", "cov2", ")", "\n", "self", ".", "assertGreater", "(", "float", "(", "kl2", ")", ",", "0.0", ")", "\n", "\n", "mu", "=", "np", ".", "array", "(", "[", "1.6", ",", "-", "7.0", "]", ")", "\n", "cov", "=", "np", ".", "array", "(", "[", "[", "2.0", ",", "0.5", "]", ",", "[", "0.5", ",", "4.5", "]", "]", ")", "\n", "kl3", "=", "_hellinger_gaussians", "(", "mu", ",", "cov", ",", "mu", ",", "cov", ")", "\n", "self", ".", "assertAlmostEqual", "(", "float", "(", "kl3", ")", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestDivergenceMeasures.test_kl_mc_1d": [[336, 342], ["numpy.array", "cde.model_fitting.divergences.kl_divergence_pdf", "unittests_evaluations._kl_gaussians", "print", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences.kl_divergence_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians"], ["", "def", "test_kl_mc_1d", "(", "self", ")", ":", "\n", "    ", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "1.0", "]", "]", ")", "\n", "kl_est", "=", "kl_divergence_pdf", "(", "self", ".", "gaussian1", ",", "self", ".", "gaussian2", ",", "x_cond", "=", "x_cond", ")", "\n", "kl_true", "=", "_kl_gaussians", "(", "self", ".", "mu1", ",", "self", ".", "cov1", ",", "self", ".", "mu2", ",", "self", ".", "cov2", ")", "\n", "print", "(", "kl_est", "[", "0", "]", ",", "kl_true", ")", "\n", "self", ".", "assertAlmostEqual", "(", "kl_est", "[", "0", "]", ",", "kl_true", ",", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestDivergenceMeasures.test_kl_mc_2d": [[343, 349], ["numpy.array", "cde.model_fitting.divergences.kl_divergence_pdf", "unittests_evaluations._kl_gaussians", "print", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences.kl_divergence_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians"], ["", "def", "test_kl_mc_2d", "(", "self", ")", ":", "\n", "    ", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "1.0", "]", "]", ")", "\n", "kl_est", "=", "kl_divergence_pdf", "(", "self", ".", "gaussian3", ",", "self", ".", "gaussian4", ",", "x_cond", "=", "x_cond", ")", "\n", "kl_true", "=", "_kl_gaussians", "(", "self", ".", "mu3", ",", "self", ".", "cov3", ",", "self", ".", "mu4", ",", "self", ".", "cov4", ")", "\n", "print", "(", "kl_est", "[", "0", "]", ",", "kl_true", ")", "\n", "self", ".", "assertAlmostEqual", "(", "kl_est", "[", "0", "]", ",", "kl_true", ",", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestDivergenceMeasures.test_hellinger_mc_1d": [[350, 356], ["numpy.array", "cde.model_fitting.divergences.hellinger_distance_pdf", "unittests_evaluations._hellinger_gaussians", "print", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences.hellinger_distance_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._hellinger_gaussians"], ["", "def", "test_hellinger_mc_1d", "(", "self", ")", ":", "\n", "    ", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "1.0", "]", "]", ")", "\n", "h_est", "=", "hellinger_distance_pdf", "(", "self", ".", "gaussian1", ",", "self", ".", "gaussian2", ",", "x_cond", "=", "x_cond", ")", "\n", "h_true", "=", "_hellinger_gaussians", "(", "self", ".", "mu1", ",", "self", ".", "cov1", ",", "self", ".", "mu2", ",", "self", ".", "cov2", ")", "\n", "print", "(", "h_est", "[", "0", "]", ",", "h_true", ")", "\n", "self", ".", "assertAlmostEqual", "(", "h_est", "[", "0", "]", ",", "h_true", ",", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestDivergenceMeasures.test_hellinger_mc_2d": [[357, 363], ["numpy.array", "cde.model_fitting.divergences.hellinger_distance_pdf", "unittests_evaluations._hellinger_gaussians", "print", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences.hellinger_distance_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._hellinger_gaussians"], ["", "def", "test_hellinger_mc_2d", "(", "self", ")", ":", "\n", "    ", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "1.0", "]", "]", ")", "\n", "h_est", "=", "hellinger_distance_pdf", "(", "self", ".", "gaussian3", ",", "self", ".", "gaussian4", ",", "x_cond", "=", "x_cond", ")", "\n", "h_true", "=", "_hellinger_gaussians", "(", "self", ".", "mu3", ",", "self", ".", "cov3", ",", "self", ".", "mu4", ",", "self", ".", "cov4", ")", "\n", "print", "(", "h_est", "[", "0", "]", ",", "h_true", ")", "\n", "self", ".", "assertAlmostEqual", "(", "h_est", "[", "0", "]", ",", "h_true", ",", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestDivergenceMeasures.test_js_mc_1d": [[364, 370], ["numpy.array", "cde.model_fitting.divergences.js_divergence_pdf", "print", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual", "unittests_evaluations._kl_gaussians", "unittests_evaluations._kl_gaussians"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences.js_divergence_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians"], ["", "def", "test_js_mc_1d", "(", "self", ")", ":", "\n", "    ", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "1.0", "]", "]", ")", "\n", "js_est", "=", "js_divergence_pdf", "(", "self", ".", "gaussian1", ",", "self", ".", "gaussian2", ",", "x_cond", "=", "x_cond", ")", "\n", "js_true", "=", "0.5", "*", "_kl_gaussians", "(", "self", ".", "mu1", ",", "self", ".", "cov1", ",", "self", ".", "mu2", ",", "self", ".", "cov2", ")", "+", "0.5", "*", "_kl_gaussians", "(", "self", ".", "mu2", ",", "self", ".", "cov2", ",", "self", ".", "mu1", ",", "self", ".", "cov1", ")", "\n", "print", "(", "js_est", "[", "0", "]", ",", "js_true", ")", "\n", "self", ".", "assertAlmostEqual", "(", "js_est", "[", "0", "]", ",", "js_true", ",", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestDivergenceMeasures.test_js_mc_2d": [[371, 377], ["numpy.array", "cde.model_fitting.divergences.js_divergence_pdf", "print", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual", "unittests_evaluations._kl_gaussians", "unittests_evaluations._kl_gaussians"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences.js_divergence_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians"], ["", "def", "test_js_mc_2d", "(", "self", ")", ":", "\n", "    ", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "1.0", "]", "]", ")", "\n", "kl_est", "=", "js_divergence_pdf", "(", "self", ".", "gaussian3", ",", "self", ".", "gaussian4", ",", "x_cond", "=", "x_cond", ")", "\n", "kl_true", "=", "0.5", "*", "_kl_gaussians", "(", "self", ".", "mu3", ",", "self", ".", "cov3", ",", "self", ".", "mu4", ",", "self", ".", "cov4", ")", "+", "0.5", "*", "_kl_gaussians", "(", "self", ".", "mu4", ",", "self", ".", "cov4", ",", "self", ".", "mu3", ",", "self", ".", "cov3", ")", "\n", "print", "(", "kl_est", "[", "0", "]", ",", "kl_true", ")", "\n", "self", ".", "assertAlmostEqual", "(", "kl_est", "[", "0", "]", ",", "kl_true", ",", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestDivergenceMeasures.test_divmeasures_mc_1d": [[378, 391], ["numpy.random.seed", "numpy.array", "cde.model_fitting.divergences.divergence_measures_pdf", "unittests_evaluations._hellinger_gaussians", "unittests_evaluations._kl_gaussians", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual", "unittests_evaluations._kl_gaussians", "unittests_evaluations._kl_gaussians"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences.divergence_measures_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._hellinger_gaussians", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians"], ["", "def", "test_divmeasures_mc_1d", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "1.0", "]", ",", "[", "2.0", ",", "0.5", "]", "]", ")", "\n", "# todo: check, indeterministic behavior (sometimes fails)", "\n", "h_est", ",", "kl_est", ",", "js_est", "=", "divergence_measures_pdf", "(", "self", ".", "gaussian1", ",", "self", ".", "gaussian2", ",", "x_cond", "=", "x_cond", ")", "\n", "\n", "js_true", "=", "0.5", "*", "_kl_gaussians", "(", "self", ".", "mu1", ",", "self", ".", "cov1", ",", "self", ".", "mu2", ",", "self", ".", "cov2", ")", "+", "0.5", "*", "_kl_gaussians", "(", "self", ".", "mu2", ",", "self", ".", "cov2", ",", "self", ".", "mu1", ",", "self", ".", "cov1", ")", "\n", "h_true", "=", "_hellinger_gaussians", "(", "self", ".", "mu1", ",", "self", ".", "cov1", ",", "self", ".", "mu2", ",", "self", ".", "cov2", ")", "\n", "kl_true", "=", "_kl_gaussians", "(", "self", ".", "mu1", ",", "self", ".", "cov1", ",", "self", ".", "mu2", ",", "self", ".", "cov2", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "js_est", "[", "1", "]", ",", "js_true", ",", "places", "=", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "kl_est", "[", "0", "]", ",", "kl_true", ",", "places", "=", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "h_est", "[", "0", "]", ",", "h_true", ",", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations.TestDivergenceMeasures.test_divmeasures_mc_2d": [[392, 405], ["numpy.random.seed", "numpy.array", "cde.model_fitting.divergences.divergence_measures_pdf", "unittests_evaluations._hellinger_gaussians", "unittests_evaluations._kl_gaussians", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual", "unittests_evaluations.TestDivergenceMeasures.assertAlmostEqual", "unittests_evaluations._kl_gaussians", "unittests_evaluations._kl_gaussians"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences.divergence_measures_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._hellinger_gaussians", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians"], ["", "def", "test_divmeasures_mc_2d", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "1.0", "]", "]", ")", "\n", "h_est", ",", "kl_est", ",", "js_est", "=", "divergence_measures_pdf", "(", "self", ".", "gaussian3", ",", "self", ".", "gaussian4", ",", "x_cond", "=", "x_cond", ")", "\n", "\n", "js_true", "=", "0.5", "*", "_kl_gaussians", "(", "self", ".", "mu3", ",", "self", ".", "cov3", ",", "self", ".", "mu4", ",", "self", ".", "cov4", ")", "+", "0.5", "*", "_kl_gaussians", "(", "self", ".", "mu4", ",", "self", ".", "cov4", ",", "\n", "self", ".", "mu3", ",", "self", ".", "cov3", ")", "\n", "h_true", "=", "_hellinger_gaussians", "(", "self", ".", "mu3", ",", "self", ".", "cov3", ",", "self", ".", "mu4", ",", "self", ".", "cov4", ")", "\n", "kl_true", "=", "_kl_gaussians", "(", "self", ".", "mu3", ",", "self", ".", "cov3", ",", "self", ".", "mu4", ",", "self", ".", "cov4", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "js_est", "[", "0", "]", ",", "js_true", ",", "places", "=", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "kl_est", "[", "0", "]", ",", "kl_true", ",", "places", "=", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "h_est", "[", "0", "]", ",", "h_true", ",", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._kl_gaussians": [[406, 413], ["numpy.trace", "numpy.transpose().dot().dot", "numpy.log", "numpy.log", "numpy.linalg.inv().dot", "numpy.linalg.det", "numpy.linalg.det", "numpy.transpose().dot", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.transpose"], "function", ["None"], ["", "", "def", "_kl_gaussians", "(", "mu1", ",", "cov1", ",", "mu2", ",", "cov2", ")", ":", "\n", "  ", "assert", "cov1", ".", "shape", "==", "cov2", ".", "shape", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", "\n", "term1", "=", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "cov2", ")", ")", "-", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "cov1", ")", ")", "\n", "term2", "=", "np", ".", "trace", "(", "np", ".", "linalg", ".", "inv", "(", "cov2", ")", ".", "dot", "(", "cov1", ")", ")", "\n", "term3", "=", "np", ".", "transpose", "(", "mu2", "-", "mu1", ")", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "cov2", ")", ")", ".", "dot", "(", "mu2", "-", "mu1", ")", "\n", "return", "0.5", "*", "(", "term1", "-", "cov1", ".", "shape", "[", "0", "]", "+", "term2", "+", "term3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_evaluations._hellinger_gaussians": [[414, 421], ["numpy.exp", "numpy.sqrt", "numpy.linalg.det", "numpy.linalg.det", "numpy.linalg.det", "numpy.transpose().dot().dot", "numpy.transpose().dot", "numpy.linalg.inv", "numpy.transpose"], "function", ["None"], ["", "def", "_hellinger_gaussians", "(", "mu1", ",", "cov1", ",", "mu2", ",", "cov2", ")", ":", "\n", "  ", "assert", "cov1", ".", "shape", "==", "cov2", ".", "shape", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", "\n", "term1", "=", "np", ".", "linalg", ".", "det", "(", "cov1", ")", "**", "0.25", "*", "np", ".", "linalg", ".", "det", "(", "cov2", ")", "**", "0.25", "\n", "term2", "=", "np", ".", "linalg", ".", "det", "(", "0.5", "*", "(", "cov1", "+", "cov2", ")", ")", "**", "0.5", "\n", "term3", "=", "np", ".", "exp", "(", "-", "0.125", "*", "np", ".", "transpose", "(", "mu2", "-", "mu1", ")", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "0.5", "*", "(", "cov1", "+", "cov2", ")", ")", ")", ".", "dot", "(", "mu2", "-", "mu1", ")", ")", "\n", "return", "np", ".", "sqrt", "(", "1", "-", "term1", "/", "term2", "*", "term3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestHelpers.test_1_shape_center_point": [[23, 30], ["numpy.random.uniform", "cde.utils.center_point_select.sample_center_points", "unittests_utils.TestHelpers.assertEqual", "unittests_utils.TestHelpers.assertEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.center_point_select.sample_center_points"], ["def", "test_1_shape_center_point", "(", "self", ")", ":", "\n", "    ", "methods", "=", "[", "\"all\"", ",", "\"random\"", ",", "\"k_means\"", ",", "\"agglomerative\"", ",", "\"distance\"", "]", "\n", "for", "m", "in", "methods", ":", "\n", "      ", "Y", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "120", ",", "2", ")", ")", "\n", "centers", "=", "sample_center_points", "(", "Y", ",", "method", "=", "m", ",", "k", "=", "50", ")", "\n", "self", ".", "assertEqual", "(", "centers", ".", "ndim", ",", "Y", ".", "ndim", ")", "\n", "self", ".", "assertEqual", "(", "centers", ".", "shape", "[", "1", "]", ",", "Y", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestHelpers.test_1_center_point_k_means": [[31, 35], ["numpy.asarray", "cde.utils.center_point_select.sample_center_points", "unittests_utils.TestHelpers.assertAlmostEqual", "numpy.asarray.mean", "cde.utils.center_point_select.sample_center_points.mean"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.center_point_select.sample_center_points"], ["", "", "def", "test_1_center_point_k_means", "(", "self", ")", ":", "\n", "    ", "Y", "=", "np", ".", "asarray", "(", "[", "1.0", ",", "2.0", "]", ")", "\n", "centers", "=", "sample_center_points", "(", "Y", ",", "method", "=", "\"k_means\"", ",", "k", "=", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "Y", ".", "mean", "(", ")", ",", "centers", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestHelpers.test_1_center_point_agglomerative": [[36, 40], ["numpy.random.uniform", "cde.utils.center_point_select.sample_center_points", "unittests_utils.TestHelpers.assertAlmostEqual", "numpy.random.uniform.mean", "cde.utils.center_point_select.sample_center_points.mean"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.center_point_select.sample_center_points"], ["", "def", "test_1_center_point_agglomerative", "(", "self", ")", ":", "\n", "    ", "Y", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "[", "20", ",", "3", "]", ")", "\n", "centers", "=", "sample_center_points", "(", "Y", ",", "method", "=", "\"agglomerative\"", ",", "k", "=", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "Y", ".", "mean", "(", ")", ",", "centers", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestHelpers.test_1_shape_center_point_distance": [[41, 53], ["numpy.asarray", "cde.utils.center_point_select.sample_center_points", "unittests_utils.TestHelpers.assertAlmostEqual", "numpy.asarray", "cde.utils.center_point_select.sample_center_points", "unittests_utils.TestHelpers.assertAlmostEqual", "numpy.asarray", "cde.utils.center_point_select.sample_center_points", "unittests_utils.TestHelpers.assertAlmostEqual", "cde.utils.center_point_select.sample_center_points.mean", "cde.utils.center_point_select.sample_center_points.mean", "list", "cde.utils.center_point_select.sample_center_points.mean", "reversed"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.center_point_select.sample_center_points", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.center_point_select.sample_center_points", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.center_point_select.sample_center_points"], ["", "def", "test_1_shape_center_point_distance", "(", "self", ")", ":", "\n", "    ", "Y", "=", "np", ".", "asarray", "(", "[", "1.0", ",", "1.2", ",", "1.7", ",", "1.9", ",", "2.0", "]", ")", "\n", "centers", "=", "sample_center_points", "(", "Y", ",", "method", "=", "\"distance\"", ",", "k", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "centers", ".", "mean", "(", ")", ",", "1.5", ")", "\n", "\n", "Y", "=", "np", ".", "asarray", "(", "[", "1.0", ",", "1.2", ",", "1.5", ",", "1.7", ",", "1.9", ",", "2.0", "]", ")", "\n", "centers", "=", "sample_center_points", "(", "Y", ",", "method", "=", "\"distance\"", ",", "k", "=", "3", ")", "\n", "self", ".", "assertAlmostEqual", "(", "centers", ".", "mean", "(", ")", ",", "1.5", ")", "\n", "\n", "Y", "=", "np", ".", "asarray", "(", "list", "(", "reversed", "(", "[", "1.0", ",", "1.2", ",", "1.7", ",", "1.9", ",", "2.0", "]", ")", ")", ")", "\n", "centers", "=", "sample_center_points", "(", "Y", ",", "method", "=", "\"distance\"", ",", "k", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "centers", ".", "mean", "(", ")", ",", "1.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestHelpers.test_1_shape_center_point_keep_edges": [[54, 61], ["numpy.random.uniform", "cde.utils.center_point_select.sample_center_points", "unittests_utils.TestHelpers.assertEqual", "unittests_utils.TestHelpers.assertEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.center_point_select.sample_center_points"], ["", "def", "test_1_shape_center_point_keep_edges", "(", "self", ")", ":", "\n", "    ", "methods", "=", "[", "\"random\"", ",", "\"k_means\"", ",", "\"agglomerative\"", "]", "\n", "for", "m", "in", "methods", ":", "\n", "      ", "Y", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "100", ",", "2", ")", ")", "\n", "centers", "=", "sample_center_points", "(", "Y", ",", "method", "=", "m", ",", "k", "=", "5", ",", "keep_edges", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "centers", ".", "ndim", ",", "Y", ".", "ndim", ")", "\n", "self", ".", "assertEqual", "(", "centers", ".", "shape", "[", "1", "]", ",", "Y", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestHelpers.test_2_norm_along_axis_1": [[64, 71], ["numpy.asarray", "numpy.asarray", "cde.utils.misc.norm_along_axis_1", "cde.utils.misc.norm_along_axis_1", "unittests_utils.TestHelpers.assertEqual", "unittests_utils.TestHelpers.assertEqual", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.norm_along_axis_1", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.norm_along_axis_1"], ["def", "test_2_norm_along_axis_1", "(", "self", ")", ":", "\n", "    ", "A", "=", "np", ".", "asarray", "(", "[", "[", "1.0", ",", "0.0", "]", ",", "[", "1.0", ",", "0.0", "]", "]", ")", "\n", "B", "=", "np", ".", "asarray", "(", "[", "[", "0.0", ",", "0.0", "]", ",", "[", "0.0", ",", "0.0", "]", "]", ")", "\n", "dist1", "=", "norm_along_axis_1", "(", "A", ",", "B", ",", "squared", "=", "True", ")", "\n", "dist2", "=", "norm_along_axis_1", "(", "A", ",", "B", ",", "squared", "=", "False", ")", "\n", "self", ".", "assertEqual", "(", "np", ".", "mean", "(", "dist1", ")", ",", "1.0", ")", "\n", "self", ".", "assertEqual", "(", "np", ".", "mean", "(", "dist2", ")", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestHelpers.test_2_norm_along_axis_2": [[72, 79], ["numpy.asarray", "numpy.asarray", "cde.utils.misc.norm_along_axis_1", "cde.utils.misc.norm_along_axis_1", "unittests_utils.TestHelpers.assertEqual", "unittests_utils.TestHelpers.assertEqual", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.norm_along_axis_1", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.norm_along_axis_1"], ["", "def", "test_2_norm_along_axis_2", "(", "self", ")", ":", "\n", "    ", "A", "=", "np", ".", "asarray", "(", "[", "[", "1.0", ",", "0.0", "]", "]", ")", "\n", "B", "=", "np", ".", "asarray", "(", "[", "[", "0.0", ",", "0.0", "]", "]", ")", "\n", "dist1", "=", "norm_along_axis_1", "(", "A", ",", "B", ",", "squared", "=", "True", ")", "\n", "dist2", "=", "norm_along_axis_1", "(", "A", ",", "B", ",", "squared", "=", "False", ")", "\n", "self", ".", "assertEqual", "(", "np", ".", "mean", "(", "dist1", ")", ",", "1.0", ")", "\n", "self", ".", "assertEqual", "(", "np", ".", "mean", "(", "dist2", ")", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestHelpers.test_2_norm_along_axis_3": [[80, 85], ["numpy.random.uniform", "numpy.random.uniform", "cde.utils.misc.norm_along_axis_1", "unittests_utils.TestHelpers.assertEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.norm_along_axis_1"], ["", "def", "test_2_norm_along_axis_3", "(", "self", ")", ":", "\n", "    ", "A", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "[", "20", ",", "3", "]", ")", "\n", "B", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "[", "10", ",", "3", "]", ")", "\n", "dist", "=", "norm_along_axis_1", "(", "A", ",", "B", ",", "squared", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "dist", ".", "shape", ",", "(", "20", ",", "10", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestHelpers.test_mc_integration_t_1": [[88, 92], ["cde.utils.integration.mc_integration_student_t", "unittests_utils.TestHelpers.assertAlmostEqual", "numpy.expand_dims", "scipy.multivariate_normal.pdf", "numpy.diag"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.mc_integration_student_t", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["def", "test_mc_integration_t_1", "(", "self", ")", ":", "\n", "    ", "func", "=", "lambda", "y", ":", "np", ".", "expand_dims", "(", "stats", ".", "multivariate_normal", ".", "pdf", "(", "y", ",", "mean", "=", "[", "0", ",", "0", "]", ",", "cov", "=", "np", ".", "diag", "(", "[", "2", ",", "2", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "integral", "=", "mc_integration_student_t", "(", "func", ",", "ndim", "=", "2", ",", "n_samples", "=", "10", "**", "7", ",", "batch_size", "=", "10", "**", "6", ")", "\n", "self", ".", "assertAlmostEqual", "(", "1.0", ",", "integral", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestHelpers.test_mc_integration_t_2": [[93, 98], ["cde.utils.integration.mc_integration_student_t", "unittests_utils.TestHelpers.assertAlmostEqual", "unittests_utils.TestHelpers.assertAlmostEqual", "numpy.tile", "numpy.expand_dims", "scipy.multivariate_normal.pdf", "numpy.diag"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.mc_integration_student_t", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_mc_integration_t_2", "(", "self", ")", ":", "\n", "    ", "func", "=", "lambda", "y", ":", "y", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "stats", ".", "multivariate_normal", ".", "pdf", "(", "y", ",", "mean", "=", "[", "1", ",", "2", "]", ",", "cov", "=", "np", ".", "diag", "(", "[", "2", ",", "2", "]", ")", ")", ",", "axis", "=", "1", ")", ",", "(", "1", ",", "2", ")", ")", "\n", "integral", "=", "mc_integration_student_t", "(", "func", ",", "ndim", "=", "2", ",", "n_samples", "=", "10", "**", "7", ",", "batch_size", "=", "10", "**", "6", ")", "\n", "self", ".", "assertAlmostEqual", "(", "1", ",", "integral", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "2", ",", "integral", "[", "1", "]", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestExecAsyncBatch.test_batch_exec_1": [[101, 113], ["numpy.stack", "unittests_utils.TestExecAsyncBatch.test_batch_exec_1.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["  ", "def", "test_batch_exec_1", "(", "self", ")", ":", "\n", "    ", "def", "pdf", "(", "X", ",", "Y", ")", ":", "\n", "      ", "return", "Y", "[", ":", ",", "0", "]", "\n", "\n", "", "n_queries", "=", "10", "**", "3", "\n", "X", "=", "np", ".", "ones", "(", "(", "n_queries", ",", "2", ")", ")", "*", "2", "\n", "Y", "=", "np", ".", "stack", "(", "[", "np", ".", "linspace", "(", "-", "3", ",", "3", ",", "num", "=", "n_queries", ")", ",", "np", ".", "linspace", "(", "-", "3", ",", "3", ",", "num", "=", "n_queries", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "p_true", "=", "pdf", "(", "X", ",", "Y", ")", "\n", "\n", "p_batched", "=", "execute_batch_async_pdf", "(", "pdf", ",", "X", ",", "Y", ",", "batch_size", "=", "10000", ")", "\n", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "(", "p_true", "-", "p_batched", ")", "**", "2", ")", ",", "0.00001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestExecAsyncBatch.test_batch_exec_2": [[114, 130], ["numpy.stack", "unittests_utils.TestExecAsyncBatch.test_batch_exec_1.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_batch_exec_2", "(", "self", ")", ":", "\n", "    ", "from", "scipy", ".", "stats", "import", "multivariate_normal", "\n", "\n", "def", "pdf", "(", "X", ",", "Y", ")", ":", "\n", "      ", "std", "=", "1", "\n", "ndim_y", "=", "Y", ".", "shape", "[", "1", "]", "\n", "return", "multivariate_normal", ".", "pdf", "(", "Y", ",", "mean", "=", "np", ".", "zeros", "(", "ndim_y", ")", ",", "cov", "=", "np", ".", "eye", "(", "ndim_y", ")", "*", "std", "**", "2", ")", "\n", "\n", "", "n_queries", "=", "8", "*", "10", "**", "4", "\n", "X", "=", "np", ".", "ones", "(", "(", "n_queries", ",", "2", ")", ")", "*", "2", "\n", "Y", "=", "np", ".", "stack", "(", "[", "np", ".", "linspace", "(", "-", "3", ",", "3", ",", "num", "=", "n_queries", ")", ",", "np", ".", "linspace", "(", "-", "3", ",", "3", ",", "num", "=", "n_queries", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "p_true", "=", "pdf", "(", "X", ",", "Y", ")", "\n", "\n", "p_batched", "=", "execute_batch_async_pdf", "(", "pdf", ",", "X", ",", "Y", ",", "batch_size", "=", "10000", ",", "n_jobs", "=", "8", ")", "\n", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "(", "p_true", "-", "p_batched", ")", "**", "2", ")", ",", "0.00001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestIntegration.test_integration1": [[133, 145], ["cde.utils.integration.numeric_integation", "print", "unittests_utils.TestIntegration.assertAlmostEqual", "cde.utils.integration.numeric_integation", "print", "unittests_utils.TestIntegration.assertAlmostEqual", "float", "float", "scipy.norm.pdf().flatten", "scipy.norm.pdf().flatten", "scipy.norm.pdf", "scipy.norm.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.numeric_integation", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.numeric_integation", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["  ", "def", "test_integration1", "(", "self", ")", ":", "\n", "    ", "skew", "=", "lambda", "x", ":", "x", "**", "3", "*", "stats", ".", "norm", ".", "pdf", "(", "x", ")", ".", "flatten", "(", ")", "\n", "\n", "result", "=", "numeric_integation", "(", "skew", ",", "n_samples", "=", "10", "**", "5", ")", "\n", "print", "(", "\"skew\"", ",", "result", ")", "\n", "self", ".", "assertAlmostEqual", "(", "float", "(", "result", ")", ",", "0.0", ",", "places", "=", "1", ")", "\n", "\n", "kurt", "=", "lambda", "x", ":", "x", "**", "4", "*", "stats", ".", "norm", ".", "pdf", "(", "x", ")", ".", "flatten", "(", ")", "\n", "\n", "result", "=", "numeric_integation", "(", "kurt", ",", "n_samples", "=", "10", "**", "5", ")", "\n", "print", "(", "\"kurt\"", ",", "result", ")", "\n", "self", ".", "assertAlmostEqual", "(", "float", "(", "result", ")", ",", "3", ",", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestDistribution.test_multidim_student_t": [[148, 161], ["numpy.random.uniform", "numpy.prod", "multidim_t_pdf", "unittests_utils.TestDistribution.assertLessEqual", "numpy.ones", "numpy.ones", "t.pdf", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.multidim_t_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["  ", "def", "test_multidim_student_t", "(", "self", ")", ":", "\n", "    ", "from", "scipy", ".", "stats", "import", "t", "\n", "from", "cde", ".", "utils", ".", "distribution", "import", "multidim_t_pdf", "\n", "mu", "=", "5", "*", "np", ".", "ones", "(", "3", ")", "\n", "sigma", "=", "3", "*", "np", ".", "ones", "(", "3", ")", "\n", "dof", "=", "6", "\n", "\n", "x", "=", "np", ".", "random", ".", "uniform", "(", "-", "10", ",", "10", ",", "size", "=", "(", "100", ",", "3", ")", ")", "\n", "p1", "=", "np", ".", "prod", "(", "t", ".", "pdf", "(", "x", ",", "loc", "=", "5", ",", "scale", "=", "3", ",", "df", "=", "dof", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "p2", "=", "multidim_t_pdf", "(", "x", ",", "mu", ",", "sigma", ",", "dof", ")", "\n", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "sum", "(", "(", "p1", "-", "p2", ")", "**", "2", ")", ",", "0.0001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestDistribution.test_batched_student_t_pdf": [[162, 174], ["numpy.random.normal", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.normal", "cde.utils.distribution.batched_univ_t_pdf", "range", "scipy.t.pdf", "unittests_utils.TestDistribution.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.batched_univ_t_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_batched_student_t_pdf", "(", "self", ")", ":", "\n", "    ", "locs", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "3", ",", "size", "=", "10", ")", "\n", "scales", "=", "np", ".", "random", ".", "uniform", "(", "0.1", ",", "10", ",", "size", "=", "10", ")", "\n", "dofs", "=", "np", ".", "random", ".", "uniform", "(", "3", ",", "10", ",", "size", "=", "10", ")", "\n", "x", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "3", ",", "size", "=", "10", ")", "\n", "\n", "p", "=", "batched_univ_t_pdf", "(", "x", ",", "locs", ",", "scales", ",", "dofs", ")", "\n", "assert", "p", ".", "shape", "==", "(", "10", ",", ")", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "      ", "p_check", "=", "stats", ".", "t", ".", "pdf", "(", "x", "[", "i", "]", ",", "df", "=", "dofs", "[", "i", "]", ",", "loc", "=", "locs", "[", "i", "]", ",", "scale", "=", "scales", "[", "i", "]", ")", "\n", "self", ".", "assertAlmostEqual", "(", "p_check", ",", "p", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestDistribution.test_batched_student_t_cdf": [[175, 187], ["numpy.random.normal", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.normal", "cde.utils.distribution.batched_univ_t_cdf", "range", "scipy.t.cdf", "unittests_utils.TestDistribution.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.batched_univ_t_cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "", "def", "test_batched_student_t_cdf", "(", "self", ")", ":", "\n", "    ", "locs", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "3", ",", "size", "=", "10", ")", "\n", "scales", "=", "np", ".", "random", ".", "uniform", "(", "0.1", ",", "10", ",", "size", "=", "10", ")", "\n", "dofs", "=", "np", ".", "random", ".", "uniform", "(", "3", ",", "10", ",", "size", "=", "10", ")", "\n", "x", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "3", ",", "size", "=", "10", ")", "\n", "\n", "p", "=", "batched_univ_t_cdf", "(", "x", ",", "locs", ",", "scales", ",", "dofs", ")", "\n", "assert", "p", ".", "shape", "==", "(", "10", ",", ")", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "      ", "p_check", "=", "stats", ".", "t", ".", "cdf", "(", "x", "[", "i", "]", ",", "df", "=", "dofs", "[", "i", "]", ",", "loc", "=", "locs", "[", "i", "]", ",", "scale", "=", "scales", "[", "i", "]", ")", "\n", "self", ".", "assertAlmostEqual", "(", "p_check", ",", "p", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_utils.TestDistribution.test_batched_student_t_rvs": [[188, 202], ["numpy.random.seed", "cde.utils.distribution.batched_univ_t_rvs", "scipy.kstest", "print", "unittests_utils.TestDistribution.assertGreaterEqual", "numpy.ones", "numpy.ones", "numpy.ones", "scipy.t.cdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.batched_univ_t_rvs", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "", "def", "test_batched_student_t_rvs", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "123", ")", "\n", "n", "=", "5000", "\n", "locs", "=", "np", ".", "ones", "(", "n", ")", "*", "5", "\n", "scales", "=", "np", ".", "ones", "(", "n", ")", "*", "2", "\n", "dofs", "=", "np", ".", "ones", "(", "n", ")", "*", "4", "\n", "\n", "rvs", "=", "batched_univ_t_rvs", "(", "locs", ",", "scales", ",", "dofs", ")", "\n", "\n", "cdf_callable", "=", "lambda", "y", ":", "stats", ".", "t", ".", "cdf", "(", "y", ",", "df", "=", "4", ",", "loc", "=", "5", ",", "scale", "=", "2", ")", "\n", "_", ",", "p_val", "=", "stats", ".", "kstest", "(", "rvs", ",", "cdf_callable", ")", "\n", "print", "(", "\"P-Val Kolmogorov:\"", ",", "p_val", ")", "\n", "\n", "self", ".", "assertGreaterEqual", "(", "p_val", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestArmaJump.test_skewness": [[16, 31], ["numpy.random.seed", "cde.density_simulation.ArmaJump", "numpy.asarray", "cde.density_simulation.ArmaJump.simulate_conditional", "scipy.skew", "cde.density_simulation.ArmaJump", "cde.density_simulation.ArmaJump.simulate_conditional", "scipy.skew", "print", "unittests_simulations.TestArmaJump.assertLessEqual", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate_conditional", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate_conditional"], ["  ", "def", "test_skewness", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "arj", "=", "ArmaJump", "(", "jump_prob", "=", "0.01", ")", "\n", "x_cond", "=", "np", ".", "asarray", "(", "[", "0.1", "for", "_", "in", "range", "(", "200000", ")", "]", ")", "\n", "_", ",", "y_sample", "=", "arj", ".", "simulate_conditional", "(", "x_cond", ")", "\n", "\n", "skew1", "=", "stats", ".", "skew", "(", "y_sample", ")", "\n", "\n", "arj", "=", "ArmaJump", "(", "jump_prob", "=", "0.1", ")", "\n", "_", ",", "y_sample", "=", "arj", ".", "simulate_conditional", "(", "x_cond", ")", "\n", "\n", "skew2", "=", "stats", ".", "skew", "(", "y_sample", ")", "\n", "\n", "print", "(", "skew1", ",", "skew2", ")", "\n", "self", ".", "assertLessEqual", "(", "skew2", ",", "skew1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestArmaJump.test_mean": [[32, 42], ["numpy.random.seed", "cde.density_simulation.ArmaJump", "numpy.asarray", "cde.density_simulation.ArmaJump.mean_().flatten", "unittests_simulations.TestArmaJump.assertAlmostEqual", "cde.density_simulation.ArmaJump", "cde.density_simulation.ArmaJump.mean_().flatten", "unittests_simulations.TestArmaJump.assertLessEqual", "float", "float", "cde.density_simulation.ArmaJump.mean_", "cde.density_simulation.ArmaJump.mean_"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_"], ["", "def", "test_mean", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "arj", "=", "ArmaJump", "(", "c", "=", "0.1", ",", "jump_prob", "=", "0.00", ")", "\n", "x_cond", "=", "np", ".", "asarray", "(", "[", "0.1", "]", ")", "\n", "mean", "=", "arj", ".", "mean_", "(", "x_cond", ")", ".", "flatten", "(", ")", "\n", "self", ".", "assertAlmostEqual", "(", "float", "(", "mean", ")", ",", "0.1", ")", "\n", "\n", "arj", "=", "ArmaJump", "(", "c", "=", "0.1", ",", "jump_prob", "=", "0.1", ")", "\n", "mean", "=", "arj", ".", "mean_", "(", "x_cond", ")", ".", "flatten", "(", ")", "\n", "self", ".", "assertLessEqual", "(", "float", "(", "mean", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestArmaJump.test_cov": [[43, 53], ["numpy.random.seed", "cde.density_simulation.ArmaJump", "numpy.asarray", "unittests_simulations.TestArmaJump.assertAlmostEqual", "cde.density_simulation.ArmaJump", "unittests_simulations.TestArmaJump.assertGreater", "cde.density_simulation.ArmaJump.covariance", "cde.density_simulation.ArmaJump.covariance"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["", "def", "test_cov", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "arj", "=", "ArmaJump", "(", "c", "=", "0.1", ",", "jump_prob", "=", "0.00", ",", "std", "=", "0.1", ")", "\n", "x_cond", "=", "np", ".", "asarray", "(", "[", "0.1", "]", ")", "\n", "cov", "=", "arj", ".", "covariance", "(", "x_cond", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "assertAlmostEqual", "(", "cov", ",", "0.1", "**", "2", ")", "\n", "\n", "arj", "=", "ArmaJump", "(", "c", "=", "0.1", ",", "jump_prob", "=", "0.1", ",", "std", "=", "0.1", ")", "\n", "cov", "=", "arj", ".", "covariance", "(", "x_cond", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "assertGreater", "(", "cov", ",", "0.1", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestGaussianMixture.test_mean": [[56, 68], ["cde.density_simulation.GaussianMixture", "numpy.array", "unittests_simulations.mean_pdf", "cde.density_simulation.GaussianMixture.mean_().flatten", "print", "print", "unittests_simulations.TestGaussianMixture.assertLessEqual", "numpy.sum", "cde.density_simulation.GaussianMixture.mean_"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.mean_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_"], ["  ", "def", "test_mean", "(", "self", ")", ":", "\n", "    ", "gmm", "=", "GaussianMixture", "(", "n_kernels", "=", "5", ",", "random_seed", "=", "24", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ")", "\n", "\n", "x_cond", "=", "np", ".", "array", "(", "[", "[", "1.0", ",", "1.0", "]", "]", ")", "\n", "mean_mc", "=", "mean_pdf", "(", "gmm", ",", "x_cond", ")", "\n", "\n", "mean", "=", "gmm", ".", "mean_", "(", "x_cond", ")", ".", "flatten", "(", ")", "\n", "\n", "print", "(", "mean_mc", ")", "\n", "print", "(", "mean", ")", "\n", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "sum", "(", "(", "mean_mc", "-", "mean", ")", "**", "2", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestGaussianMixture.test_covariance": [[69, 75], ["cde.density_simulation.GaussianMixture", "numpy.array", "cde.density_simulation.GaussianMixture.covariance", "unittests_simulations.covariance_pdf", "unittests_simulations.TestGaussianMixture.assertLessEqual", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.covariance_pdf"], ["", "def", "test_covariance", "(", "self", ")", ":", "\n", "    ", "gmm", "=", "GaussianMixture", "(", "n_kernels", "=", "2", ",", "random_seed", "=", "54", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ")", "\n", "x_cond", "=", "np", ".", "array", "(", "[", "[", "1.0", ",", "1.0", "]", "]", ")", "\n", "cov", "=", "gmm", ".", "covariance", "(", "x_cond", ")", "\n", "cov_mc", "=", "covariance_pdf", "(", "gmm", ",", "x_cond", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "sum", "(", "(", "cov_mc", "-", "cov", ")", "**", "2", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestGaussianMixture.test_sampling": [[76, 98], ["cde.density_simulation.GaussianMixture", "cde.density_simulation.GaussianMixture.mean_().squeeze", "cde.density_simulation.GaussianMixture.covariance().squeeze", "cde.density_simulation.GaussianMixture.weights.dot", "numpy.zeros", "range", "cde.density_simulation.GaussianMixture.simulate", "numpy.random.multivariate_normal", "numpy.random.multivariate_normal", "numpy.mean", "numpy.mean", "unittests_simulations.TestGaussianMixture.assertLess", "cde.density_simulation.GaussianMixture.pdf", "cde.density_simulation.GaussianMixture.pdf", "cde.density_simulation.GaussianMixture.mean_", "cde.density_simulation.GaussianMixture.covariance", "numpy.outer", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["", "def", "test_sampling", "(", "self", ")", ":", "\n", "    ", "gmm", "=", "GaussianMixture", "(", "n_kernels", "=", "5", ",", "random_seed", "=", "54", ",", "ndim_x", "=", "3", ",", "ndim_y", "=", "2", ")", "\n", "\n", "mean_y", "=", "gmm", ".", "mean_", "(", "x_cond", "=", "np", ".", "zeros", "(", "(", "1", ",", "3", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "cov_y", "=", "gmm", ".", "covariance", "(", "x_cond", "=", "np", ".", "zeros", "(", "(", "1", ",", "3", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "mean_x", "=", "gmm", ".", "weights", ".", "dot", "(", "gmm", ".", "means_x", ")", "\n", "cov_x", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "for", "j", "in", "range", "(", "gmm", ".", "weights", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "cov_x", "+=", "gmm", ".", "weights", "[", "j", "]", "*", "gmm", ".", "covariances_x", "[", "j", "]", "\n", "a", "=", "(", "gmm", ".", "means_x", "[", "j", "]", "-", "mean_x", ")", "\n", "cov_x", "+=", "gmm", ".", "weights", "[", "j", "]", "*", "np", ".", "outer", "(", "a", ",", "a", ")", "\n", "\n", "## simulate unconditionally from GMM", "\n", "", "x_gmm", ",", "y_gmm", "=", "gmm", ".", "simulate", "(", "n_samples", "=", "10", "**", "6", ")", "\n", "y_gauss", "=", "np", ".", "random", ".", "multivariate_normal", "(", "mean_y", ",", "cov_y", ",", "size", "=", "10", "**", "6", ")", "\n", "x_gauss", "=", "np", ".", "random", ".", "multivariate_normal", "(", "mean_x", ",", "cov_x", ",", "size", "=", "10", "**", "6", ")", "\n", "\n", "score_gauss", "=", "np", ".", "mean", "(", "gmm", ".", "pdf", "(", "x_gauss", ",", "y_gauss", ")", ")", "\n", "score_gmm", "=", "np", ".", "mean", "(", "gmm", ".", "pdf", "(", "x_gmm", ",", "y_gmm", ")", ")", "\n", "\n", "self", ".", "assertLess", "(", "score_gauss", ",", "score_gmm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestGaussianMixture.test_sampling2": [[99, 119], ["cde.density_simulation.GaussianMixture", "cde.density_simulation.GaussianMixture.simulate", "numpy.mean", "numpy.cov", "numpy.mean", "numpy.cov", "numpy.random.multivariate_normal", "numpy.random.multivariate_normal", "numpy.mean", "numpy.mean", "print", "unittests_simulations.TestGaussianMixture.assertLess", "cde.density_simulation.GaussianMixture.log_pdf", "cde.density_simulation.GaussianMixture.log_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.log_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.log_pdf"], ["", "def", "test_sampling2", "(", "self", ")", ":", "\n", "    ", "gmm", "=", "GaussianMixture", "(", "n_kernels", "=", "5", ",", "random_seed", "=", "54", ",", "ndim_x", "=", "3", ",", "ndim_y", "=", "2", ")", "\n", "\n", "## simulate unconditionally from GMM", "\n", "x_gmm", ",", "y_gmm", "=", "gmm", ".", "simulate", "(", "n_samples", "=", "10", "**", "6", ")", "\n", "\n", "mean_x", "=", "np", ".", "mean", "(", "x_gmm", ",", "axis", "=", "0", ")", "\n", "cov_x", "=", "np", ".", "cov", "(", "x_gmm", ".", "T", ")", "\n", "\n", "mean_y", "=", "np", ".", "mean", "(", "y_gmm", ",", "axis", "=", "0", ")", "\n", "cov_y", "=", "np", ".", "cov", "(", "y_gmm", ".", "T", ")", "\n", "\n", "y_gauss", "=", "np", ".", "random", ".", "multivariate_normal", "(", "mean_y", ",", "cov_y", ",", "size", "=", "10", "**", "6", ")", "\n", "x_gauss", "=", "np", ".", "random", ".", "multivariate_normal", "(", "mean_x", ",", "cov_x", ",", "size", "=", "10", "**", "6", ")", "\n", "\n", "score_gauss", "=", "np", ".", "mean", "(", "gmm", ".", "log_pdf", "(", "x_gauss", ",", "y_gauss", ")", ")", "\n", "score_gmm", "=", "np", ".", "mean", "(", "gmm", ".", "log_pdf", "(", "x_gmm", ",", "y_gmm", ")", ")", "\n", "\n", "print", "(", "score_gmm", ",", "score_gauss", ")", "\n", "self", ".", "assertLess", "(", "score_gauss", ",", "score_gmm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestGaussianMixture.test_sampling3": [[120, 131], ["cde.density_simulation.GaussianMixture", "cde.density_simulation.GaussianMixture.simulate", "numpy.concatenate", "numpy.mean", "cde.density_simulation.GaussianMixture.weights.dot", "numpy.mean", "unittests_simulations.TestGaussianMixture.assertLess", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate"], ["", "def", "test_sampling3", "(", "self", ")", ":", "\n", "    ", "gmm", "=", "GaussianMixture", "(", "n_kernels", "=", "4", ",", "random_seed", "=", "54", ",", "ndim_x", "=", "3", ",", "ndim_y", "=", "2", ")", "\n", "\n", "## simulate unconditionally from GMM", "\n", "x_gmm", ",", "y_gmm", "=", "gmm", ".", "simulate", "(", "n_samples", "=", "10", "**", "5", ")", "\n", "samples", "=", "np", ".", "concatenate", "(", "[", "x_gmm", ",", "y_gmm", "]", ",", "axis", "=", "-", "1", ")", "\n", "mean_emp", "=", "np", ".", "mean", "(", "samples", ",", "axis", "=", "0", ")", "\n", "mean_true", "=", "gmm", ".", "weights", ".", "dot", "(", "gmm", ".", "means", ")", "\n", "mean_diff", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "mean_emp", "-", "mean_true", ")", ")", "\n", "\n", "self", ".", "assertLess", "(", "mean_diff", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestGaussianMixture.test_conditional_sampling1": [[132, 139], ["cde.density_simulation.GaussianMixture", "cde.density_simulation.GaussianMixture.simulate_conditional", "unittests_simulations.TestGaussianMixture.assertLessEqual", "numpy.ones", "numpy.mean", "numpy.abs", "y_sample.mean", "cde.density_simulation.GaussianMixture.mean_"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate_conditional", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_"], ["", "def", "test_conditional_sampling1", "(", "self", ")", ":", "\n", "    ", "gmm", "=", "GaussianMixture", "(", "n_kernels", "=", "2", ",", "random_seed", "=", "54", ",", "ndim_x", "=", "4", ",", "ndim_y", "=", "5", ")", "\n", "\n", "# simulate conditionally", "\n", "x_cond", "=", "2", "*", "np", ".", "ones", "(", "shape", "=", "(", "10", "**", "5", ",", "4", ")", ")", "\n", "_", ",", "y_sample", "=", "gmm", ".", "simulate_conditional", "(", "x_cond", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "gmm", ".", "mean_", "(", "x_cond", ")", "[", "0", "]", "-", "y_sample", ".", "mean", "(", "axis", "=", "0", ")", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestGaussianMixture.test_conditional_sampling2": [[140, 148], ["cde.density_simulation.GaussianMixture", "numpy.zeros", "cde.density_simulation.GaussianMixture.simulate_conditional", "unittests_simulations.TestGaussianMixture.assertLessEqual", "numpy.mean", "numpy.abs", "y_sample.mean", "cde.density_simulation.GaussianMixture.mean_"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate_conditional", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_"], ["", "def", "test_conditional_sampling2", "(", "self", ")", ":", "\n", "    ", "gmm", "=", "GaussianMixture", "(", "n_kernels", "=", "2", ",", "random_seed", "=", "54", ",", "ndim_x", "=", "4", ",", "ndim_y", "=", "2", ")", "\n", "\n", "# simulate conditionally", "\n", "x_cond", "=", "np", ".", "zeros", "(", "shape", "=", "(", "10", "**", "4", ",", "4", ")", ")", "\n", "x_cond", "[", "0", "]", "[", "0", "]", "=", "0.001", "\n", "_", ",", "y_sample", "=", "gmm", ".", "simulate_conditional", "(", "x_cond", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "gmm", ".", "mean_", "(", "x_cond", ")", "[", "0", "]", "-", "y_sample", ".", "mean", "(", "axis", "=", "0", ")", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestGaussianMixture.test_sampling_consistency": [[149, 164], ["cde.density_simulation.GaussianMixture", "cde.density_simulation.GaussianMixture.simulate", "make_hash_sha256", "make_hash_sha256", "cde.density_simulation.GaussianMixture", "cde.density_simulation.GaussianMixture.simulate", "make_hash_sha256", "make_hash_sha256", "unittests_simulations.TestGaussianMixture.assertEqual", "unittests_simulations.TestGaussianMixture.assertEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.make_hash_sha256", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.make_hash_sha256", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.make_hash_sha256", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.make_hash_sha256"], ["", "def", "test_sampling_consistency", "(", "self", ")", ":", "\n", "    ", "from", "cde", ".", "model_fitting", ".", "ConfigRunner", "import", "make_hash_sha256", "\n", "gmm1", "=", "GaussianMixture", "(", "n_kernels", "=", "2", ",", "random_seed", "=", "54", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ")", "\n", "x1", ",", "y1", "=", "gmm1", ".", "simulate", "(", "n_samples", "=", "10", "**", "3", ")", "\n", "hash_x1", "=", "make_hash_sha256", "(", "x1", ")", "\n", "hash_y1", "=", "make_hash_sha256", "(", "y1", ")", "\n", "\n", "gmm2", "=", "GaussianMixture", "(", "n_kernels", "=", "2", ",", "random_seed", "=", "54", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ")", "\n", "x2", ",", "y2", "=", "gmm2", ".", "simulate", "(", "n_samples", "=", "10", "**", "3", ")", "\n", "\n", "hash_x2", "=", "make_hash_sha256", "(", "x2", ")", "\n", "hash_y2", "=", "make_hash_sha256", "(", "y2", ")", "\n", "\n", "self", ".", "assertEqual", "(", "hash_x1", ",", "hash_x2", ")", "\n", "self", ".", "assertEqual", "(", "hash_y1", ",", "hash_y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestGaussianMixture.test_parameter_consistency": [[165, 176], ["cde.density_simulation.GaussianMixture", "cde.density_simulation.GaussianMixture", "numpy.random.normal", "numpy.random.normal", "cde.density_simulation.GaussianMixture.pdf", "cde.density_simulation.GaussianMixture.pdf", "numpy.all", "numpy.equal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_parameter_consistency", "(", "self", ")", ":", "\n", "    ", "gmm1", "=", "GaussianMixture", "(", "n_kernels", "=", "2", ",", "random_seed", "=", "54", ",", "ndim_x", "=", "3", ",", "ndim_y", "=", "5", ")", "\n", "gmm2", "=", "GaussianMixture", "(", "n_kernels", "=", "2", ",", "random_seed", "=", "57", ",", "ndim_x", "=", "3", ",", "ndim_y", "=", "5", ")", "\n", "\n", "X", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "30", ",", "3", ")", ")", "\n", "Y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "30", ",", "5", ")", ")", "\n", "\n", "p1", "=", "gmm1", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "p2", "=", "gmm2", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "\n", "assert", "np", ".", "all", "(", "np", ".", "equal", "(", "p1", ",", "p2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestGaussianMixture.test_hash": [[177, 184], ["cde.density_simulation.GaussianMixture", "cde.density_simulation.GaussianMixture", "make_hash_sha256", "make_hash_sha256", "unittests_simulations.TestGaussianMixture.assertEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.make_hash_sha256", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.make_hash_sha256"], ["", "def", "test_hash", "(", "self", ")", ":", "\n", "    ", "from", "cde", ".", "model_fitting", ".", "ConfigRunner", "import", "make_hash_sha256", "\n", "gmm1", "=", "GaussianMixture", "(", "n_kernels", "=", "2", ",", "random_seed", "=", "54", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ")", "\n", "gmm2", "=", "GaussianMixture", "(", "n_kernels", "=", "2", ",", "random_seed", "=", "54", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ")", "\n", "hash1", "=", "make_hash_sha256", "(", "gmm1", ")", "\n", "hash2", "=", "make_hash_sha256", "(", "gmm2", ")", "\n", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestEconDensity.test_cdf_sample_consistency": [[187, 199], ["cde.density_simulation.EconDensity", "numpy.asarray", "cde.density_simulation.EconDensity.simulate_conditional", "ECDF", "numpy.mean", "unittests_simulations.TestEconDensity.assertLessEqual", "y_sample.flatten", "cde.density_simulation.EconDensity.cdf", "numpy.abs", "range", "ECDF.flatten", "cdf().flatten", "ECDF.", "cdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate_conditional", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["  ", "def", "test_cdf_sample_consistency", "(", "self", ")", ":", "\n", "    ", "from", "statsmodels", ".", "distributions", ".", "empirical_distribution", "import", "ECDF", "\n", "model", "=", "EconDensity", "(", ")", "\n", "\n", "x_cond", "=", "np", ".", "asarray", "(", "[", "0.1", "for", "_", "in", "range", "(", "200000", ")", "]", ")", "\n", "_", ",", "y_sample", "=", "model", ".", "simulate_conditional", "(", "x_cond", ")", "\n", "\n", "emp_cdf", "=", "ECDF", "(", "y_sample", ".", "flatten", "(", ")", ")", "\n", "cdf", "=", "lambda", "y", ":", "model", ".", "cdf", "(", "x_cond", ",", "y", ")", "\n", "\n", "mean_cdf_diff", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "emp_cdf", "(", "y_sample", ")", ".", "flatten", "(", ")", "-", "cdf", "(", "y_sample", ")", ".", "flatten", "(", ")", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "mean_cdf_diff", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestEconDensity.test_pdf": [[200, 208], ["cde.density_simulation.EconDensity", "numpy.ones", "numpy.random.uniform", "cde.density_simulation.EconDensity.pdf", "scipy.norm.pdf", "numpy.sum", "unittests_simulations.TestEconDensity.assertAlmostEquals", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_pdf", "(", "self", ")", ":", "\n", "    ", "sim_model", "=", "EconDensity", "(", ")", "\n", "x", "=", "np", ".", "ones", "(", "shape", "=", "(", "2000", ",", "1", ")", ")", "\n", "y", "=", "np", ".", "random", ".", "uniform", "(", "0.01", ",", "5", ",", "size", "=", "(", "2000", ",", "1", ")", ")", "\n", "p_sim", "=", "sim_model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "stats", ".", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "1", ",", "scale", "=", "2", ")", "\n", "diff", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "p_sim", "-", "p_true", ")", ")", "\n", "self", ".", "assertAlmostEquals", "(", "diff", ",", "0.0", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestEconDensity.test_cdf": [[209, 217], ["cde.density_simulation.EconDensity", "numpy.ones", "numpy.random.uniform", "cde.density_simulation.EconDensity.cdf", "scipy.norm.cdf", "numpy.sum", "unittests_simulations.TestEconDensity.assertAlmostEquals", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "test_cdf", "(", "self", ")", ":", "\n", "    ", "sim_model", "=", "EconDensity", "(", ")", "\n", "x", "=", "np", ".", "ones", "(", "shape", "=", "(", "2000", ",", "1", ")", ")", "\n", "y", "=", "np", ".", "random", ".", "uniform", "(", "0.01", ",", "5", ",", "size", "=", "(", "2000", ",", "1", ")", ")", "\n", "p_sim", "=", "sim_model", ".", "cdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "stats", ".", "norm", ".", "cdf", "(", "y", ",", "loc", "=", "1", ",", "scale", "=", "2", ")", "\n", "diff", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "p_sim", "-", "p_true", ")", ")", "\n", "self", ".", "assertAlmostEquals", "(", "diff", ",", "0.0", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestEconDensity.test_value_at_risk": [[218, 230], ["cde.density_simulation.EconDensity", "numpy.array", "cde.density_simulation.EconDensity.value_at_risk", "super().value_at_risk", "numpy.sum", "unittests_simulations.TestEconDensity.assertAlmostEqual", "unittests_simulations.TestEconDensity.assertAlmostEqual", "unittests_simulations.TestEconDensity.assertAlmostEqual", "numpy.abs", "scipy.norm.ppf", "scipy.norm.ppf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk"], ["", "def", "test_value_at_risk", "(", "self", ")", ":", "\n", "    ", "sim_model", "=", "EconDensity", "(", ")", "\n", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "1", "]", "]", ")", "\n", "VaR", "=", "sim_model", ".", "value_at_risk", "(", "x_cond", ",", "alpha", "=", "0.05", ")", "\n", "\n", "VaR_cdf", "=", "super", "(", "EconDensity", ",", "sim_model", ")", ".", "value_at_risk", "(", "x_cond", ",", "alpha", "=", "0.05", ")", "\n", "\n", "diff", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "VaR_cdf", "-", "VaR", ")", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "VaR", "[", "0", "]", ",", "stats", ".", "norm", ".", "ppf", "(", "0.05", ",", "loc", "=", "0", ",", "scale", "=", "1", ")", ",", "places", "=", "4", ")", "\n", "self", ".", "assertAlmostEqual", "(", "VaR", "[", "1", "]", ",", "stats", ".", "norm", ".", "ppf", "(", "0.05", ",", "loc", "=", "1", ",", "scale", "=", "2", ")", ",", "places", "=", "4", ")", "\n", "self", ".", "assertAlmostEqual", "(", "diff", ",", "0", ",", "places", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestEconDensity.test_conditional_value_at_risk": [[231, 245], ["cde.density_simulation.EconDensity", "numpy.array", "cde.density_simulation.EconDensity.conditional_value_at_risk", "super().conditional_value_at_risk", "print", "print", "print", "numpy.mean", "unittests_simulations.TestEconDensity.assertAlmostEqual", "cde.density_simulation.EconDensity.value_at_risk", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.conditional_value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.conditional_value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk"], ["", "def", "test_conditional_value_at_risk", "(", "self", ")", ":", "\n", "    ", "sim_model", "=", "EconDensity", "(", ")", "\n", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "1", "]", "]", ")", "\n", "CVaR", "=", "sim_model", ".", "conditional_value_at_risk", "(", "x_cond", ",", "alpha", "=", "0.03", ")", "\n", "\n", "CVaR_mc", "=", "super", "(", "EconDensity", ",", "sim_model", ")", ".", "conditional_value_at_risk", "(", "x_cond", ",", "alpha", "=", "0.03", ",", "n_samples", "=", "10", "**", "7", ")", "\n", "\n", "print", "(", "\"CVaR Analytic:\"", ",", "CVaR", ")", "\n", "print", "(", "\"CVaR MC:\"", ",", "CVaR_mc", ")", "\n", "print", "(", "\"VaR\"", ",", "sim_model", ".", "value_at_risk", "(", "x_cond", ",", "alpha", "=", "0.03", ")", ")", "\n", "\n", "diff", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "CVaR_mc", "-", "CVaR", ")", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "diff", ",", "0", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestEconDensity.test_random_seed": [[246, 257], ["cde.density_simulation.EconDensity", "cde.density_simulation.EconDensity.simulate", "cde.density_simulation.EconDensity", "cde.density_simulation.EconDensity.simulate", "numpy.sum", "numpy.sum", "unittests_simulations.TestEconDensity.assertAlmostEquals", "unittests_simulations.TestEconDensity.assertAlmostEquals", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate"], ["", "def", "test_random_seed", "(", "self", ")", ":", "\n", "    ", "sim_model1", "=", "EconDensity", "(", "random_seed", "=", "22", ")", "\n", "X1", ",", "Y1", "=", "sim_model1", ".", "simulate", "(", "n_samples", "=", "100", ")", "\n", "\n", "sim_model2", "=", "EconDensity", "(", "random_seed", "=", "22", ")", "\n", "X2", ",", "Y2", "=", "sim_model2", ".", "simulate", "(", "n_samples", "=", "100", ")", "\n", "\n", "diff_x", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "X1", "[", ":", "100", "]", "-", "X2", "[", ":", "]", ")", ")", "\n", "diff_y", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "Y1", "[", ":", "100", "]", "-", "Y2", "[", ":", "]", ")", ")", "\n", "self", ".", "assertAlmostEquals", "(", "diff_x", ",", "0", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEquals", "(", "diff_y", ",", "0", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TetsSkewNormal.setUp": [[259, 261], ["cde.density_simulation.SkewNormal"], "methods", ["None"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "self", ".", "dist", "=", "SkewNormal", "(", "random_seed", "=", "22", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TetsSkewNormal.test_pdf": [[262, 267], ["numpy.linspace", "numpy.linspace", "unittests_simulations.TetsSkewNormal.dist.pdf", "unittests_simulations.TetsSkewNormal.assertEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_pdf", "(", "self", ")", ":", "\n", "    ", "X", "=", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "num", "=", "1000", ")", "\n", "Y", "=", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "num", "=", "1000", ")", "\n", "p", "=", "self", ".", "dist", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "self", ".", "assertEqual", "(", "p", ".", "shape", ",", "(", "1000", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TetsSkewNormal.test_cdf": [[268, 273], ["numpy.linspace", "numpy.linspace", "unittests_simulations.TetsSkewNormal.dist.cdf", "unittests_simulations.TetsSkewNormal.assertEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "test_cdf", "(", "self", ")", ":", "\n", "    ", "X", "=", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "num", "=", "1000", ")", "\n", "Y", "=", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "num", "=", "1000", ")", "\n", "p", "=", "self", ".", "dist", ".", "cdf", "(", "X", ",", "Y", ")", "\n", "self", ".", "assertEqual", "(", "p", ".", "shape", ",", "(", "1000", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TetsSkewNormal.test_simulate_conditional_skew": [[274, 285], ["unittests_simulations.TetsSkewNormal.dist.simulate_conditional", "unittests_simulations.TetsSkewNormal.assertEqual", "unittests_simulations.TetsSkewNormal.dist.simulate_conditional", "unittests_simulations.TetsSkewNormal.assertEqual", "scipy.skew", "scipy.skew", "unittests_simulations.TetsSkewNormal.assertLess", "numpy.ones", "int", "numpy.ones", "int"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate_conditional", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate_conditional"], ["", "def", "test_simulate_conditional_skew", "(", "self", ")", ":", "\n", "    ", "x_cond_pos", "=", "np", ".", "ones", "(", "10", "**", "4", ")", "*", "0.1", "\n", "y_samples_pos", "=", "self", ".", "dist", ".", "simulate_conditional", "(", "x_cond_pos", ")", "\n", "self", ".", "assertEqual", "(", "y_samples_pos", ".", "shape", ",", "(", "int", "(", "10", "**", "4", ")", ",", "1", ")", ")", "\n", "x_cond_neg", "=", "-", "np", ".", "ones", "(", "10", "**", "4", ")", "*", "0.1", "\n", "y_samples_neg", "=", "self", ".", "dist", ".", "simulate_conditional", "(", "x_cond_neg", ")", "\n", "self", ".", "assertEqual", "(", "y_samples_neg", ".", "shape", ",", "(", "int", "(", "10", "**", "4", ")", ",", "1", ")", ")", "\n", "\n", "skew_pos", "=", "stats", ".", "skew", "(", "y_samples_pos", ")", "\n", "skew_neg", "=", "stats", ".", "skew", "(", "y_samples_neg", ")", "\n", "self", ".", "assertLess", "(", "skew_neg", ",", "skew_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TetsSkewNormal.test_simulate": [[286, 290], ["unittests_simulations.TetsSkewNormal.dist.simulate", "unittests_simulations.TetsSkewNormal.assertEqual", "unittests_simulations.TetsSkewNormal.assertEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate"], ["", "def", "test_simulate", "(", "self", ")", ":", "\n", "    ", "x", ",", "y", "=", "self", ".", "dist", ".", "simulate", "(", "n_samples", "=", "1000", ")", "\n", "self", ".", "assertEqual", "(", "x", ".", "shape", ",", "(", "1000", ",", "1", ")", ")", "\n", "self", ".", "assertEqual", "(", "y", ".", "shape", ",", "(", "1000", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TetsSkewNormal.test_seed": [[291, 297], ["cde.density_simulation.SkewNormal", "cde.density_simulation.SkewNormal.simulate", "cde.density_simulation.SkewNormal", "cde.density_simulation.SkewNormal.simulate", "unittests_simulations.TetsSkewNormal.assertTrue", "numpy.allclose"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate"], ["", "def", "test_seed", "(", "self", ")", ":", "\n", "    ", "sim_1", "=", "SkewNormal", "(", "random_seed", "=", "22", ")", "\n", "x1", "=", "sim_1", ".", "simulate", "(", "100", ")", "\n", "sim_2", "=", "SkewNormal", "(", "random_seed", "=", "22", ")", "\n", "x2", "=", "sim_2", ".", "simulate", "(", "100", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "x1", ",", "x2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestJumpDiffusionModel.test_simulate_on_skewness": [[300, 306], ["numpy.random.seed", "cde.density_simulation.JumpDiffusionModel", "cde.density_simulation.JumpDiffusionModel.simulate", "scipy.skew", "unittests_simulations.TestJumpDiffusionModel.assertLessEqual"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate"], ["  ", "def", "test_simulate_on_skewness", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "jdm", "=", "JumpDiffusionModel", "(", ")", "\n", "_", ",", "y", "=", "jdm", ".", "simulate", "(", "n_samples", "=", "10000", ")", "\n", "skew", "=", "stats", ".", "skew", "(", "y", ")", "\n", "self", ".", "assertLessEqual", "(", "skew", ",", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestJumpDiffusionModel.test_simulate_conditional_on_skewness": [[307, 316], ["numpy.random.seed", "cde.density_simulation.JumpDiffusionModel", "cde.density_simulation.JumpDiffusionModel.simulate", "numpy.tile", "cde.density_simulation.JumpDiffusionModel.simulate_conditional", "scipy.skew", "unittests_simulations.TestJumpDiffusionModel.assertLessEqual", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate_conditional"], ["", "def", "test_simulate_conditional_on_skewness", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "jdm", "=", "JumpDiffusionModel", "(", ")", "\n", "x", ",", "y", "=", "jdm", ".", "simulate", "(", "n_samples", "=", "10000", ")", "\n", "x_cond", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "x", "[", "5", "]", ",", "axis", "=", "0", ")", ",", "(", "10000", ",", "1", ")", ")", "\n", "_", ",", "y2", "=", "jdm", ".", "simulate_conditional", "(", "x_cond", ")", "\n", "\n", "skew", "=", "stats", ".", "skew", "(", "y2", ")", "\n", "self", ".", "assertLessEqual", "(", "skew", ",", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestJumpDiffusionModel.test_mean": [[317, 323], ["numpy.random.seed", "cde.density_simulation.JumpDiffusionModel", "numpy.array", "unittests_simulations.TestJumpDiffusionModel.assertAlmostEqual", "cde.density_simulation.JumpDiffusionModel.mean_"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_"], ["", "def", "test_mean", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "jdm", "=", "JumpDiffusionModel", "(", ")", "\n", "x_cond", "=", "np", ".", "array", "(", "[", "[", "jdm", ".", "V_0", ",", "jdm", ".", "L_0", ",", "jdm", ".", "Psi_0", "]", "]", ")", "\n", "mean", "=", "jdm", ".", "mean_", "(", "x_cond", ")", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "assertAlmostEqual", "(", "mean", ",", "0.0", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestJumpDiffusionModel.test_covariance": [[324, 330], ["numpy.random.seed", "cde.density_simulation.JumpDiffusionModel", "numpy.array", "unittests_simulations.TestJumpDiffusionModel.assertAlmostEqual", "cde.density_simulation.JumpDiffusionModel.covariance"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["", "def", "test_covariance", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "jdm", "=", "JumpDiffusionModel", "(", ")", "\n", "x_cond", "=", "np", ".", "array", "(", "[", "[", "jdm", ".", "V_0", ",", "jdm", ".", "L_0", ",", "jdm", ".", "Psi_0", "]", "]", ")", "\n", "cov", "=", "jdm", ".", "covariance", "(", "x_cond", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "assertAlmostEqual", "(", "cov", ",", "0.0", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestJumpDiffusionModel.test_VaR": [[331, 337], ["numpy.random.seed", "cde.density_simulation.JumpDiffusionModel", "numpy.array", "unittests_simulations.TestJumpDiffusionModel.assertLessEqual", "cde.density_simulation.JumpDiffusionModel.value_at_risk"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk"], ["", "def", "test_VaR", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "jdm", "=", "JumpDiffusionModel", "(", ")", "\n", "x_cond", "=", "np", ".", "array", "(", "[", "[", "jdm", ".", "V_0", ",", "jdm", ".", "L_0", ",", "jdm", ".", "Psi_0", "]", "]", ")", "\n", "VaR", "=", "jdm", ".", "value_at_risk", "(", "x_cond", ")", "[", "0", "]", "\n", "self", ".", "assertLessEqual", "(", "VaR", ",", "-", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestLinearStudentT.test_cdf_sample_consistency": [[340, 352], ["cde.density_simulation.LinearStudentT", "numpy.asarray", "cde.density_simulation.LinearStudentT.simulate_conditional", "ECDF", "numpy.mean", "unittests_simulations.TestLinearStudentT.assertLessEqual", "y_sample.flatten", "cde.density_simulation.LinearStudentT.cdf", "numpy.abs", "range", "ECDF.flatten", "cdf", "ECDF."], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate_conditional", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["  ", "def", "test_cdf_sample_consistency", "(", "self", ")", ":", "\n", "    ", "from", "statsmodels", ".", "distributions", ".", "empirical_distribution", "import", "ECDF", "\n", "model", "=", "LinearStudentT", "(", ")", "\n", "\n", "x_cond", "=", "np", ".", "asarray", "(", "[", "-", "1", "for", "_", "in", "range", "(", "200000", ")", "]", ")", "\n", "_", ",", "y_sample", "=", "model", ".", "simulate_conditional", "(", "x_cond", ")", "\n", "\n", "emp_cdf", "=", "ECDF", "(", "y_sample", ".", "flatten", "(", ")", ")", "\n", "cdf", "=", "lambda", "y", ":", "model", ".", "cdf", "(", "x_cond", ",", "y", ")", "\n", "\n", "mean_cdf_diff", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "emp_cdf", "(", "y_sample", ")", ".", "flatten", "(", ")", "-", "cdf", "(", "y_sample", ")", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "mean_cdf_diff", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestLinearStudentT.test_pdf_mean_consistency": [[353, 359], ["cde.density_simulation.LinearStudentT", "numpy.ones", "float", "float", "unittests_simulations.TestLinearStudentT.assertAlmostEqual", "cde.density_simulation.LinearStudentT.mean_().flatten", "cde.density_simulation.LinearStudentT._mean_pdf().flatten", "cde.density_simulation.LinearStudentT.mean_", "cde.density_simulation.LinearStudentT._mean_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._mean_pdf"], ["", "def", "test_pdf_mean_consistency", "(", "self", ")", ":", "\n", "    ", "model", "=", "LinearStudentT", "(", "ndim_x", "=", "10", ")", "\n", "x_cond", "=", "np", ".", "ones", "(", "(", "1", ",", "model", ".", "ndim_x", ")", ")", "\n", "mean", "=", "float", "(", "model", ".", "mean_", "(", "x_cond", ")", ".", "flatten", "(", ")", ")", "\n", "mean_pdf", "=", "float", "(", "model", ".", "_mean_pdf", "(", "x_cond", ")", ".", "flatten", "(", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "mean", ",", "mean_pdf", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestLinearStudentT.test_pdf_std_consistency": [[360, 371], ["cde.density_simulation.LinearStudentT", "numpy.ones", "float", "float", "unittests_simulations.TestLinearStudentT.assertAlmostEqual", "float", "float", "unittests_simulations.TestLinearStudentT.assertAlmostEqual", "cde.density_simulation.LinearStudentT.std_().flatten", "cde.density_simulation.LinearStudentT._std_pdf().flatten", "numpy.ones", "cde.density_simulation.LinearStudentT.std_().flatten", "cde.density_simulation.LinearStudentT._std_pdf().flatten", "cde.density_simulation.LinearStudentT.std_", "cde.density_simulation.LinearStudentT._std_pdf", "cde.density_simulation.LinearStudentT.std_", "cde.density_simulation.LinearStudentT._std_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.std_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._std_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.std_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._std_pdf"], ["", "def", "test_pdf_std_consistency", "(", "self", ")", ":", "\n", "    ", "model", "=", "LinearStudentT", "(", "ndim_x", "=", "10", ")", "\n", "x_cond", "=", "np", ".", "ones", "(", "(", "1", ",", "model", ".", "ndim_x", ")", ")", "\n", "std", "=", "float", "(", "model", ".", "std_", "(", "x_cond", ")", ".", "flatten", "(", ")", ")", "\n", "std_pdf", "=", "float", "(", "model", ".", "_std_pdf", "(", "x_cond", ")", ".", "flatten", "(", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "std_pdf", ",", "std", ",", "places", "=", "2", ")", "\n", "\n", "x_cond", "=", "-", "np", ".", "ones", "(", "(", "1", ",", "model", ".", "ndim_x", ")", ")", "\n", "std", "=", "float", "(", "model", ".", "std_", "(", "x_cond", ")", ".", "flatten", "(", ")", ")", "\n", "std_pdf", "=", "float", "(", "model", ".", "_std_pdf", "(", "x_cond", ")", ".", "flatten", "(", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "std_pdf", ",", "std", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestLinearStudentT.test_shapes": [[372, 392], ["cde.density_simulation.LinearStudentT", "cde.density_simulation.LinearStudentT.simulate", "cde.density_simulation.LinearStudentT.simulate_conditional", "cde.density_simulation.LinearStudentT.pdf", "cde.density_simulation.LinearStudentT.cdf", "cde.density_simulation.LinearStudentT.mean_", "cde.density_simulation.LinearStudentT.std_"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate_conditional", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.std_"], ["", "def", "test_shapes", "(", "self", ")", ":", "\n", "    ", "model", "=", "LinearStudentT", "(", "ndim_x", "=", "5", ")", "\n", "X", ",", "Y", "=", "model", ".", "simulate", "(", "200", ")", "\n", "assert", "X", ".", "shape", "==", "(", "200", ",", "model", ".", "ndim_x", ")", "\n", "assert", "Y", ".", "shape", "==", "(", "200", ",", "model", ".", "ndim_y", ")", "\n", "\n", "X", ",", "Y", "=", "model", ".", "simulate_conditional", "(", "X", ")", "\n", "assert", "Y", ".", "shape", "==", "(", "200", ",", "model", ".", "ndim_y", ")", "\n", "\n", "p", "=", "model", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "assert", "p", ".", "shape", "==", "(", "200", ",", ")", "\n", "\n", "p", "=", "model", ".", "cdf", "(", "X", ",", "Y", ")", "\n", "assert", "p", ".", "shape", "==", "(", "200", ",", ")", "\n", "\n", "mean", "=", "model", ".", "mean_", "(", "X", ")", "\n", "assert", "mean", ".", "shape", "==", "(", "200", ",", "model", ".", "ndim_y", ")", "\n", "\n", "std", "=", "model", ".", "std_", "(", "X", ")", "\n", "assert", "std", ".", "shape", "==", "(", "200", ",", "model", ".", "ndim_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestLinearStudentT.test_serializarion": [[393, 400], ["cde.density_simulation.LinearStudentT", "cde.density_simulation.LinearStudentT.simulate", "dill.dumps", "dill.loads"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate"], ["", "def", "test_serializarion", "(", "self", ")", ":", "\n", "    ", "import", "pickle", ",", "dill", "\n", "model", "=", "LinearStudentT", "(", "ndim_x", "=", "5", ",", "mu", "=", "5", ",", "random_seed", "=", "22", ")", "\n", "X", ",", "Y", "=", "model", ".", "simulate", "(", "200", ")", "\n", "\n", "pkl_str", "=", "dill", ".", "dumps", "(", "model", ")", "\n", "model_loaded", "=", "dill", ".", "loads", "(", "pkl_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestLinearStudentT.test_mean_std": [[401, 413], ["cde.density_simulation.LinearStudentT", "numpy.ones", "unittests_simulations.TestLinearStudentT.assertAlmostEqual", "unittests_simulations.TestLinearStudentT.assertAlmostEqual", "cde.density_simulation.LinearStudentT.mean_", "cde.density_simulation.LinearStudentT._mean_pdf", "cde.density_simulation.LinearStudentT.std_", "cde.density_simulation.LinearStudentT._std_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._mean_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.std_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._std_pdf"], ["", "def", "test_mean_std", "(", "self", ")", ":", "\n", "    ", "model", "=", "LinearStudentT", "(", "ndim_x", "=", "5", ")", "\n", "x_cond", "=", "np", ".", "ones", "(", "(", "2", ",", "5", ")", ")", "\n", "mean1", "=", "model", ".", "mean_", "(", "x_cond", ")", "[", "0", "]", "[", "0", "]", "\n", "mean2", "=", "model", ".", "_mean_pdf", "(", "x_cond", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "mean1", ",", "mean2", ",", "places", "=", "2", ")", "\n", "\n", "std1", "=", "model", ".", "std_", "(", "x_cond", ")", "[", "0", "]", "[", "0", "]", "\n", "std2", "=", "model", ".", "_std_pdf", "(", "x_cond", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "std1", ",", "std2", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestRiskMeasures.test_value_at_risk_mc": [[415, 426], ["numpy.array", "tests.dummies.SimulationDummy", "tests.dummies.SimulationDummy.value_at_risk", "scipy.norm.ppf", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "numpy.identity", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk"], ["  ", "def", "test_value_at_risk_mc", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "mu1", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "sigma1", "=", "np", ".", "identity", "(", "n", "=", "1", ")", "*", "1", "\n", "est", "=", "SimulationDummy", "(", "mean", "=", "mu1", ",", "cov", "=", "sigma1", ",", "ndim_x", "=", "1", ",", "ndim_y", "=", "1", ",", "has_cdf", "=", "False", ")", "\n", "\n", "alpha", "=", "0.01", "\n", "VaR_est", "=", "est", ".", "value_at_risk", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "1", "]", "]", ")", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "10", "**", "7", ")", "\n", "VaR_true", "=", "stats", ".", "norm", ".", "ppf", "(", "alpha", ",", "loc", "=", "0", ",", "scale", "=", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "VaR_est", "[", "0", "]", ",", "VaR_true", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "VaR_est", "[", "1", "]", ",", "VaR_true", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestRiskMeasures.test_value_at_risk_cdf": [[427, 438], ["numpy.array", "tests.dummies.SimulationDummy", "tests.dummies.SimulationDummy.value_at_risk", "scipy.norm.ppf", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "numpy.identity", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk"], ["", "def", "test_value_at_risk_cdf", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "mu1", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "sigma1", "=", "np", ".", "identity", "(", "n", "=", "1", ")", "*", "1", "\n", "est", "=", "SimulationDummy", "(", "mean", "=", "mu1", ",", "cov", "=", "sigma1", ",", "ndim_x", "=", "1", ",", "ndim_y", "=", "1", ",", "has_cdf", "=", "True", ")", "\n", "\n", "alpha", "=", "0.05", "\n", "VaR_est", "=", "est", ".", "value_at_risk", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "1", "]", "]", ")", ",", "alpha", "=", "alpha", ")", "\n", "VaR_true", "=", "stats", ".", "norm", ".", "ppf", "(", "alpha", ",", "loc", "=", "0", ",", "scale", "=", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "VaR_est", "[", "0", "]", ",", "VaR_true", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "VaR_est", "[", "1", "]", ",", "VaR_true", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestRiskMeasures.test_conditional_value_at_risk_mc": [[439, 455], ["numpy.random.seed", "numpy.array", "tests.dummies.SimulationDummy", "tests.dummies.SimulationDummy.conditional_value_at_risk", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "numpy.identity", "scipy.norm.pdf", "numpy.array", "scipy.norm.ppf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.conditional_value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_conditional_value_at_risk_mc", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "mu", "=", "0", "\n", "sigma", "=", "1", "\n", "mu1", "=", "np", ".", "array", "(", "[", "mu", "]", ")", "\n", "sigma1", "=", "np", ".", "identity", "(", "n", "=", "1", ")", "*", "sigma", "\n", "est", "=", "SimulationDummy", "(", "mean", "=", "mu1", ",", "cov", "=", "sigma1", ",", "ndim_x", "=", "1", ",", "ndim_y", "=", "1", ",", "has_cdf", "=", "True", ")", "\n", "\n", "alpha", "=", "0.02", "\n", "\n", "CVaR_true", "=", "mu", "-", "sigma", "/", "alpha", "*", "stats", ".", "norm", ".", "pdf", "(", "stats", ".", "norm", ".", "ppf", "(", "alpha", ",", "loc", "=", "0", ",", "scale", "=", "1", ")", ")", "\n", "CVaR_est", "=", "est", ".", "conditional_value_at_risk", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "1", "]", "]", ")", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "10", "**", "7", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "CVaR_est", "[", "0", "]", ",", "CVaR_true", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "CVaR_est", "[", "1", "]", ",", "CVaR_true", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestRiskMeasures.test_conditional_value_at_risk_mc_2dim_xcond": [[456, 471], ["numpy.array", "tests.dummies.SimulationDummy", "tests.dummies.SimulationDummy.conditional_value_at_risk", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "numpy.identity", "scipy.norm.pdf", "numpy.array", "scipy.norm.ppf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.conditional_value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_conditional_value_at_risk_mc_2dim_xcond", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "mu", "=", "0", "\n", "sigma", "=", "1", "\n", "mu1", "=", "np", ".", "array", "(", "[", "mu", "]", ")", "\n", "sigma1", "=", "np", ".", "identity", "(", "n", "=", "1", ")", "*", "sigma", "\n", "est", "=", "SimulationDummy", "(", "mean", "=", "mu1", ",", "cov", "=", "sigma1", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "1", ",", "has_cdf", "=", "False", ")", "\n", "\n", "alpha", "=", "0.02", "\n", "# x_cond shape (2,2)", "\n", "CVaR_true", "=", "mu", "-", "sigma", "/", "alpha", "*", "stats", ".", "norm", ".", "pdf", "(", "stats", ".", "norm", ".", "ppf", "(", "alpha", ",", "loc", "=", "0", ",", "scale", "=", "1", ")", ")", "\n", "CVaR_est", "=", "est", ".", "conditional_value_at_risk", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", "]", ")", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "10", "**", "8", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "CVaR_est", "[", "0", "]", ",", "CVaR_true", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "CVaR_est", "[", "1", "]", ",", "CVaR_true", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestRiskMeasures.test_conditional_value_at_risk_mc_1dim_xcond_flattend": [[472, 489], ["numpy.random.seed", "numpy.array", "tests.dummies.SimulationDummy", "tests.dummies.SimulationDummy.conditional_value_at_risk", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "numpy.identity", "scipy.norm.pdf", "numpy.array().flatten", "scipy.norm.ppf", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.conditional_value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_conditional_value_at_risk_mc_1dim_xcond_flattend", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "mu", "=", "0", "\n", "sigma", "=", "1", "\n", "mu1", "=", "np", ".", "array", "(", "[", "mu", "]", ")", "\n", "sigma1", "=", "np", ".", "identity", "(", "n", "=", "1", ")", "*", "sigma", "\n", "est", "=", "SimulationDummy", "(", "mean", "=", "mu1", ",", "cov", "=", "sigma1", ",", "ndim_x", "=", "1", ",", "ndim_y", "=", "1", ",", "has_cdf", "=", "False", ")", "\n", "\n", "alpha", "=", "0.02", "\n", "\n", "# x_cond shape (2,)", "\n", "CVaR_true", "=", "mu", "-", "sigma", "/", "alpha", "*", "stats", ".", "norm", ".", "pdf", "(", "stats", ".", "norm", ".", "ppf", "(", "alpha", ",", "loc", "=", "0", ",", "scale", "=", "1", ")", ")", "\n", "CVaR_est", "=", "est", ".", "conditional_value_at_risk", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "1", "]", "]", ")", ".", "flatten", "(", ")", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "4", "*", "10", "**", "7", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "CVaR_est", "[", "0", "]", ",", "CVaR_true", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "CVaR_est", "[", "1", "]", ",", "CVaR_true", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestRiskMeasures.test_mean_mc": [[490, 499], ["numpy.array", "tests.dummies.SimulationDummy", "tests.dummies.SimulationDummy.mean_", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "numpy.identity", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_"], ["", "def", "test_mean_mc", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "mu", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "sigma", "=", "np", ".", "identity", "(", "n", "=", "2", ")", "*", "1", "\n", "est", "=", "SimulationDummy", "(", "mean", "=", "mu", ",", "cov", "=", "sigma", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ",", "has_cdf", "=", "False", ")", "\n", "\n", "mean_est", "=", "est", ".", "mean_", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "mean_est", "[", "0", "]", "[", "0", "]", ",", "mu", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "mean_est", "[", "0", "]", "[", "1", "]", ",", "mu", "[", "1", "]", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestRiskMeasures.test_mean_pdf": [[500, 509], ["numpy.array", "tests.dummies.SimulationDummy", "tests.dummies.SimulationDummy.mean_", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "numpy.identity", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_"], ["", "def", "test_mean_pdf", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "mu", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "sigma", "=", "np", ".", "identity", "(", "n", "=", "2", ")", "*", "1", "\n", "est", "=", "SimulationDummy", "(", "mean", "=", "mu", ",", "cov", "=", "sigma", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ",", "can_sample", "=", "False", ")", "\n", "\n", "mean_est", "=", "est", ".", "mean_", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "mean_est", "[", "0", "]", "[", "0", "]", ",", "mu", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "mean_est", "[", "0", "]", "[", "1", "]", ",", "mu", "[", "1", "]", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.TestRiskMeasures.test_covariance": [[510, 519], ["numpy.array", "numpy.array", "tests.dummies.SimulationDummy", "tests.dummies.SimulationDummy.covariance", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "unittests_simulations.TestRiskMeasures.assertAlmostEqual", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["", "def", "test_covariance", "(", "self", ")", ":", "\n", "# prepare estimator dummy", "\n", "    ", "mu", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "sigma", "=", "np", ".", "array", "(", "[", "[", "1", ",", "-", "0.2", "]", ",", "[", "-", "0.2", ",", "2", "]", "]", ")", "\n", "est", "=", "SimulationDummy", "(", "mean", "=", "mu", ",", "cov", "=", "sigma", ",", "ndim_x", "=", "2", ",", "ndim_y", "=", "2", ",", "can_sample", "=", "False", ")", "\n", "\n", "cov_est", "=", "est", ".", "covariance", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", "]", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "cov_est", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "sigma", "[", "0", "]", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "self", ".", "assertAlmostEqual", "(", "cov_est", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "sigma", "[", "1", "]", "[", "0", "]", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.mean_pdf": [[521, 529], ["numpy.zeros", "range", "numpy.tile", "cde.utils.integration.mc_integration_student_t", "x_cond[].reshape", "numpy.tile", "numpy.expand_dims", "density.pdf"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.mc_integration_student_t", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "", "def", "mean_pdf", "(", "density", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "  ", "means", "=", "np", ".", "zeros", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "density", ".", "ndim_y", ")", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "x", "=", "x", "=", "np", ".", "tile", "(", "x_cond", "[", "i", "]", ".", "reshape", "(", "(", "1", ",", "x_cond", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", ",", "(", "n_samples", ",", "1", ")", ")", "\n", "func", "=", "lambda", "y", ":", "y", "*", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "density", ".", "pdf", "(", "x", ",", "y", ")", ",", "axis", "=", "1", ")", ",", "(", "1", ",", "density", ".", "ndim_y", ")", ")", "\n", "integral", "=", "mc_integration_student_t", "(", "func", ",", "ndim", "=", "2", ",", "n_samples", "=", "n_samples", ")", "\n", "means", "[", "i", "]", "=", "integral", "\n", "", "return", "means", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_simulations.covariance_pdf": [[530, 551], ["numpy.zeros", "density.mean_", "range", "numpy.tile", "cde.utils.integration.mc_integration_student_t", "cde.utils.integration.mc_integration_student_t.reshape", "x_cond[].reshape", "numpy.empty", "range", "numpy.tile", "numpy.outer().flatten", "numpy.expand_dims", "density.pdf", "numpy.outer"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.mc_integration_student_t", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "covariance_pdf", "(", "density", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "  ", "covs", "=", "np", ".", "zeros", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "density", ".", "ndim_y", ",", "density", ".", "ndim_y", ")", ")", "\n", "mean", "=", "density", ".", "mean_", "(", "x_cond", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "x", "=", "x", "=", "np", ".", "tile", "(", "x_cond", "[", "i", "]", ".", "reshape", "(", "(", "1", ",", "x_cond", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", ",", "(", "n_samples", ",", "1", ")", ")", "\n", "\n", "def", "cov", "(", "y", ")", ":", "\n", "      ", "a", "=", "(", "y", "-", "mean", "[", "i", "]", ")", "\n", "\n", "#compute cov matrices c for sampled instances and weight them with the probability p from the pdf", "\n", "c", "=", "np", ".", "empty", "(", "(", "a", ".", "shape", "[", "0", "]", ",", "a", ".", "shape", "[", "1", "]", "**", "2", ")", ")", "\n", "for", "j", "in", "range", "(", "a", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "c", "[", "j", ",", ":", "]", "=", "np", ".", "outer", "(", "a", "[", "j", "]", ",", "a", "[", "j", "]", ")", ".", "flatten", "(", ")", "\n", "\n", "", "p", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "density", ".", "pdf", "(", "x", ",", "y", ")", ",", "axis", "=", "1", ")", ",", "(", "1", ",", "density", ".", "ndim_y", "**", "2", ")", ")", "\n", "res", "=", "c", "*", "p", "\n", "return", "res", "\n", "\n", "", "integral", "=", "mc_integration_student_t", "(", "cov", ",", "ndim", "=", "density", ".", "ndim_y", ",", "n_samples", "=", "n_samples", ")", "\n", "covs", "[", "i", "]", "=", "integral", ".", "reshape", "(", "(", "density", ".", "ndim_y", ",", "density", ".", "ndim_y", ")", ")", "\n", "", "return", "covs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.get_samples": [[17, 23], ["numpy.random.seed", "numpy.random.normal"], "methods", ["None"], ["  ", "def", "get_samples", "(", "self", ",", "mu", "=", "2", ",", "std", "=", "1.0", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "data", "=", "np", ".", "random", ".", "normal", "(", "[", "mu", ",", "mu", "]", ",", "std", ",", "size", "=", "(", "2000", ",", "2", ")", ")", "\n", "X", "=", "data", "[", ":", ",", "0", "]", "\n", "Y", "=", "data", "[", ":", ",", "1", "]", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.test_NKDE_with_4d_gaussian": [[24, 40], ["numpy.random.normal", "numpy.random.normal", "cde.density_estimator.NeighborKernelDensityEstimation", "cde.density_estimator.NeighborKernelDensityEstimation.fit", "numpy.random.uniform", "cde.density_estimator.NeighborKernelDensityEstimation.pdf", "scipy.multivariate_normal.pdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "numpy.ones", "numpy.mean", "numpy.abs", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_NKDE_with_4d_gaussian", "(", "self", ")", ":", "\n", "    ", "mu", "=", "5", "\n", "std", "=", "2.0", "\n", "X", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "mu", ",", "scale", "=", "std", ",", "size", "=", "(", "4000", ",", "2", ")", ")", "\n", "Y", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "mu", ",", "scale", "=", "std", ",", "size", "=", "(", "4000", ",", "2", ")", ")", "\n", "\n", "model", "=", "NeighborKernelDensityEstimation", "(", "epsilon", "=", "0.3", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "[", "1.0", ",", "1.0", "]", ",", "high", "=", "[", "9.0", ",", "9.0", "]", ",", "size", "=", "(", "500", ",", "2", ")", ")", "\n", "x", "=", "np", ".", "ones", "(", "shape", "=", "(", "500", ",", "2", ")", ")", "*", "mu", "\n", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "stats", ".", "multivariate_normal", ".", "pdf", "(", "y", ",", "mean", "=", "np", ".", "ones", "(", "2", ")", "*", "mu", ",", "cov", "=", "std", "**", "2", ")", "\n", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.test_NKDE_with_2d_gaussian": [[41, 62], ["numpy.random.uniform", "cde.density_estimator.NeighborKernelDensityEstimation", "cde.density_estimator.NeighborKernelDensityEstimation.fit", "numpy.linspace", "cde.density_estimator.NeighborKernelDensityEstimation.pdf", "scipy.stats.norm.pdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "numpy.linspace", "cde.density_estimator.NeighborKernelDensityEstimation.pdf", "scipy.stats.norm.pdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "numpy.random.normal", "numpy.ones", "numpy.mean", "numpy.mean", "numpy.abs", "numpy.ones", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_NKDE_with_2d_gaussian", "(", "self", ")", ":", "\n", "    ", "X", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "size", "=", "4000", ")", "\n", "Y", "=", "(", "2", "+", "X", ")", "*", "np", ".", "random", ".", "normal", "(", "size", "=", "4000", ")", "+", "2", "*", "X", "\n", "\n", "for", "weighted", "in", "[", "True", ",", "False", "]", ":", "\n", "      ", "model", "=", "NeighborKernelDensityEstimation", "(", "epsilon", "=", "0.3", ",", "weighted", "=", "weighted", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "linspace", "(", "-", "5", ",", "5", ",", "num", "=", "100", ")", "\n", "x", "=", "np", ".", "ones", "(", "100", ")", "*", "0", "\n", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "0", ",", "scale", "=", "2", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n", "y", "=", "np", ".", "linspace", "(", "-", "5", ",", "5", ",", "num", "=", "100", ")", "\n", "x", "=", "-", "np", ".", "ones", "(", "100", ")", "*", "0.5", "\n", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "-", "1", ",", "scale", "=", "1.5", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.test_NKDE_loo_log_likelihood": [[63, 79], ["numpy.random.normal", "numpy.random.normal", "cde.density_estimator.NeighborKernelDensityEstimation", "cde.density_estimator.NeighborKernelDensityEstimation.fit", "numpy.array", "cde.density_estimator.NeighborKernelDensityEstimation.loo_likelihood", "numpy.array", "cde.density_estimator.NeighborKernelDensityEstimation.loo_likelihood", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertGreater"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.loo_likelihood", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.loo_likelihood"], ["", "", "def", "test_NKDE_loo_log_likelihood", "(", "self", ")", ":", "\n", "    ", "mu", "=", "1", "\n", "std", "=", "1", "\n", "X", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "mu", ",", "scale", "=", "std", ",", "size", "=", "(", "500", ",", "2", ")", ")", "\n", "Y", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "mu", ",", "scale", "=", "std", ",", "size", "=", "(", "500", ",", "2", ")", ")", "\n", "\n", "model", "=", "NeighborKernelDensityEstimation", "(", "epsilon", "=", "0.3", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "bw", "=", "np", ".", "array", "(", "[", "0.5", "]", ")", "\n", "epsilon", "=", "0.3", "\n", "ll1", "=", "model", ".", "loo_likelihood", "(", "bandwidth", "=", "bw", ",", "epsilon", "=", "epsilon", ")", "\n", "\n", "bw", "=", "np", ".", "array", "(", "[", "0.05", "]", ")", "\n", "epsilon", "=", "0.1", "\n", "ll2", "=", "model", ".", "loo_likelihood", "(", "bandwidth", "=", "bw", ",", "epsilon", "=", "epsilon", ")", "\n", "self", ".", "assertGreater", "(", "ll1", ",", "ll2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.test_NKDE_param_selection": [[80, 107], ["numpy.random.normal", "numpy.random.normal", "cde.density_estimator.NeighborKernelDensityEstimation", "cde.density_estimator.NeighborKernelDensityEstimation.fit", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertAlmostEqual", "cde.density_estimator.NeighborKernelDensityEstimation", "cde.density_estimator.NeighborKernelDensityEstimation.fit", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertAlmostEqual", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertGreaterEqual", "cde.density_estimator.NeighborKernelDensityEstimation", "cde.density_estimator.NeighborKernelDensityEstimation.fit", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertNotEqual", "cde.density_estimator.NeighborKernelDensityEstimation.score", "cde.density_estimator.NeighborKernelDensityEstimation.score", "cde.density_estimator.NeighborKernelDensityEstimation.score", "print", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertGreaterEqual", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertGreaterEqual", "numpy.mean", "numpy.random.normal", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.score", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.score", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.score"], ["", "def", "test_NKDE_param_selection", "(", "self", ")", ":", "\n", "    ", "mu", "=", "5", "\n", "std", "=", "2", "\n", "X", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "mu", ",", "scale", "=", "std", ",", "size", "=", "(", "500", ",", "2", ")", ")", "\n", "Y", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "mu", ",", "scale", "=", "std", ",", "size", "=", "(", "500", ",", "2", ")", ")", "\n", "\n", "model1", "=", "NeighborKernelDensityEstimation", "(", "'NKDE'", ",", "2", ",", "2", ",", "epsilon", "=", "0.1", ",", "bandwidth", "=", "0.3", ",", "param_selection", "=", "None", ")", "\n", "model1", ".", "fit", "(", "X", ",", "Y", ")", "\n", "self", ".", "assertAlmostEqual", "(", "model1", ".", "epsilon", ",", "0.1", ")", "\n", "\n", "model2", "=", "NeighborKernelDensityEstimation", "(", "'NKDE'", ",", "2", ",", "2", ",", "epsilon", "=", "0.1", ",", "bandwidth", "=", "0.3", ",", "param_selection", "=", "'normal_reference'", ")", "\n", "model2", ".", "fit", "(", "X", ",", "Y", ")", "\n", "self", ".", "assertAlmostEqual", "(", "model1", ".", "epsilon", ",", "0.1", ")", "\n", "self", ".", "assertGreaterEqual", "(", "np", ".", "mean", "(", "model2", ".", "bandwidth", "-", "model1", ".", "bandwidth", ")", ",", "0.0", ")", "\n", "\n", "model3", "=", "NeighborKernelDensityEstimation", "(", "'NKDE'", ",", "2", ",", "2", ",", "epsilon", "=", "0.1", ",", "bandwidth", "=", "0.3", ",", "param_selection", "=", "'cv_ml'", ")", "\n", "model3", ".", "fit", "(", "X", ",", "Y", ")", "\n", "self", ".", "assertNotEqual", "(", "model3", ".", "epsilon", ",", "0.1", ")", "\n", "\n", "X_test", ",", "Y_test", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "mu", ",", "scale", "=", "std", ",", "size", "=", "(", "2000", ",", "2", ")", ")", ",", "np", ".", "random", ".", "normal", "(", "loc", "=", "mu", ",", "scale", "=", "std", ",", "size", "=", "(", "2000", ",", "2", ")", ")", "\n", "score1", "=", "model1", ".", "score", "(", "X_test", ",", "Y_test", ")", "\n", "score2", "=", "model2", ".", "score", "(", "X_test", ",", "Y_test", ")", "\n", "score3", "=", "model3", ".", "score", "(", "X_test", ",", "Y_test", ")", "\n", "print", "(", "score1", ",", "score2", ",", "score3", ")", "\n", "\n", "self", ".", "assertGreaterEqual", "(", "score2", ",", "score1", ")", "\n", "self", ".", "assertGreaterEqual", "(", "score3", ",", "score2", "-", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.test_LSCD_with_4d_gaussian": [[108, 125], ["numpy.random.normal", "numpy.random.normal", "cde.density_estimator.LSConditionalDensityEstimation", "cde.density_estimator.LSConditionalDensityEstimation.fit", "numpy.random.uniform", "cde.density_estimator.LSConditionalDensityEstimation.pdf", "scipy.multivariate_normal.pdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "numpy.ones", "numpy.mean", "numpy.abs", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_LSCD_with_4d_gaussian", "(", "self", ")", ":", "\n", "    ", "mu", "=", "5", "\n", "std", "=", "2.0", "\n", "X", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "mu", ",", "scale", "=", "std", ",", "size", "=", "(", "4000", ",", "2", ")", ")", "\n", "Y", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "mu", ",", "scale", "=", "std", ",", "size", "=", "(", "4000", ",", "2", ")", ")", "\n", "\n", "for", "method", "in", "[", "\"all\"", ",", "\"k_means\"", "]", ":", "\n", "      ", "model", "=", "LSConditionalDensityEstimation", "(", "center_sampling_method", "=", "method", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "[", "1.0", ",", "1.0", "]", ",", "high", "=", "[", "9.0", ",", "9.0", "]", ",", "size", "=", "(", "500", ",", "2", ")", ")", "\n", "x", "=", "np", ".", "ones", "(", "shape", "=", "(", "500", ",", "2", ")", ")", "*", "mu", "\n", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "stats", ".", "multivariate_normal", ".", "pdf", "(", "y", ",", "mean", "=", "np", ".", "ones", "(", "2", ")", "*", "mu", ",", "cov", "=", "std", "**", "2", ")", "\n", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.test_LSCD_with_2d_gaussian": [[126, 146], ["numpy.random.uniform", "cde.density_estimator.LSConditionalDensityEstimation", "cde.density_estimator.LSConditionalDensityEstimation.fit", "numpy.linspace", "cde.density_estimator.LSConditionalDensityEstimation.pdf", "scipy.stats.norm.pdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "numpy.linspace", "cde.density_estimator.LSConditionalDensityEstimation.pdf", "scipy.stats.norm.pdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "numpy.ones", "numpy.mean", "numpy.mean", "numpy.random.normal", "numpy.abs", "numpy.ones", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "", "def", "test_LSCD_with_2d_gaussian", "(", "self", ")", ":", "\n", "    ", "X", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "size", "=", "4000", ")", "\n", "Y", "=", "(", "2", "+", "X", ")", "*", "np", ".", "random", ".", "normal", "(", "size", "=", "4000", ")", "+", "2", "*", "X", "\n", "\n", "model", "=", "LSConditionalDensityEstimation", "(", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "linspace", "(", "-", "5", ",", "5", ",", "num", "=", "100", ")", "\n", "x", "=", "np", ".", "ones", "(", "100", ")", "*", "0", "\n", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "0", ",", "scale", "=", "2", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n", "y", "=", "np", ".", "linspace", "(", "-", "5", ",", "5", ",", "num", "=", "100", ")", "\n", "x", "=", "-", "np", ".", "ones", "(", "100", ")", "*", "0.5", "\n", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "-", "1", ",", "scale", "=", "1.5", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.test_KMN_with_2d_gaussian": [[147, 168], ["unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.get_samples", "tensorflow.Session", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "numpy.arange", "numpy.asarray", "cde.density_estimator.KernelMixtureNetwork.pdf", "scipy.stats.norm.pdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "cde.density_estimator.KernelMixtureNetwork.cdf", "scipy.stats.norm.cdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "numpy.mean", "numpy.mean", "numpy.array", "numpy.abs", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "test_KMN_with_2d_gaussian", "(", "self", ")", ":", "\n", "    ", "mu", "=", "-", "2.0", "\n", "std", "=", "2.0", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "\n", "for", "method", "in", "[", "\"agglomerative\"", "]", ":", "\n", "      ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "model", "=", "KernelMixtureNetwork", "(", "\"kmn_\"", "+", "method", ",", "1", ",", "1", ",", "center_sampling_method", "=", "method", ",", "n_centers", "=", "20", ",", "\n", "hidden_sizes", "=", "(", "16", ",", "16", ")", ",", "init_scales", "=", "np", ".", "array", "(", "[", "0.5", "]", ")", ",", "train_scales", "=", "True", ",", "\n", "data_normalization", "=", "False", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n", "p_est", "=", "model", ".", "cdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "cdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.test_KMN_with_2d_gaussian_2": [[169, 190], ["unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.get_samples", "tensorflow.Session", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "numpy.arange", "numpy.asarray", "cde.density_estimator.KernelMixtureNetwork.pdf", "scipy.stats.norm.pdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "cde.density_estimator.KernelMixtureNetwork.cdf", "scipy.stats.norm.cdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "numpy.mean", "numpy.mean", "numpy.array", "numpy.abs", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "", "", "def", "test_KMN_with_2d_gaussian_2", "(", "self", ")", ":", "\n", "    ", "mu", "=", "200", "\n", "std", "=", "23", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "\n", "for", "method", "in", "[", "\"agglomerative\"", "]", ":", "\n", "      ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "model", "=", "KernelMixtureNetwork", "(", "\"kmn2_\"", "+", "method", ",", "1", ",", "1", ",", "center_sampling_method", "=", "method", ",", "n_centers", "=", "10", ",", "\n", "hidden_sizes", "=", "(", "16", ",", "16", ")", ",", "init_scales", "=", "np", ".", "array", "(", "[", "1.0", "]", ")", ",", "train_scales", "=", "True", ",", "\n", "data_normalization", "=", "True", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n", "p_est", "=", "model", ".", "cdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "cdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.test_KMN_with_2d_gaussian_sampling": [[191, 216], ["numpy.random.seed", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.get_samples", "time.time", "cde.density_estimator.KernelMixtureNetwork", "print", "time.time", "cde.density_estimator.KernelMixtureNetwork.fit", "print", "cde.density_estimator.KernelMixtureNetwork.sample", "print", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertAlmostEqual", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertAlmostEqual", "numpy.ones", "cde.density_estimator.KernelMixtureNetwork.sample", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertAlmostEqual", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertAlmostEqual", "numpy.ones", "numpy.mean", "numpy.std", "numpy.mean", "float", "numpy.std", "float", "numpy.mean", "float", "numpy.std", "float", "time.time", "time.time", "cde.density_estimator.KernelMixtureNetwork.mean_", "cde.density_estimator.KernelMixtureNetwork.covariance", "cde.density_estimator.KernelMixtureNetwork.mean_", "numpy.sqrt", "cde.density_estimator.KernelMixtureNetwork.covariance"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["", "", "", "def", "test_KMN_with_2d_gaussian_sampling", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "5", ")", "\n", "\n", "import", "time", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "KernelMixtureNetwork", "(", "\"kmn_sampling\"", ",", "1", ",", "1", ",", "center_sampling_method", "=", "'k_means'", ",", "n_centers", "=", "5", ",", "\n", "n_training_epochs", "=", "1000", ",", "data_normalization", "=", "True", ")", "\n", "print", "(", "\"time to build model:\"", ",", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "print", "(", "\"time to fit model:\"", ",", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "\n", "x_cond", "=", "5", "*", "np", ".", "ones", "(", "shape", "=", "(", "2000000", ",", "1", ")", ")", "\n", "_", ",", "y_sample", "=", "model", ".", "sample", "(", "x_cond", ")", "\n", "print", "(", "np", ".", "mean", "(", "y_sample", ")", ",", "np", ".", "std", "(", "y_sample", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "np", ".", "mean", "(", "y_sample", ")", ",", "float", "(", "model", ".", "mean_", "(", "x_cond", "[", "1", "]", ")", ")", ",", "places", "=", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "np", ".", "std", "(", "y_sample", ")", ",", "float", "(", "model", ".", "covariance", "(", "x_cond", "[", "1", "]", ")", ")", ",", "places", "=", "1", ")", "\n", "\n", "x_cond", "=", "np", ".", "ones", "(", "shape", "=", "(", "400000", ",", "1", ")", ")", "\n", "x_cond", "[", "0", ",", "0", "]", "=", "5.0", "\n", "_", ",", "y_sample", "=", "model", ".", "sample", "(", "x_cond", ")", "\n", "self", ".", "assertAlmostEqual", "(", "np", ".", "mean", "(", "y_sample", ")", ",", "float", "(", "model", ".", "mean_", "(", "x_cond", "[", "1", "]", ")", ")", ",", "places", "=", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "np", ".", "std", "(", "y_sample", ")", ",", "float", "(", "np", ".", "sqrt", "(", "model", ".", "covariance", "(", "x_cond", "[", "1", "]", ")", ")", ")", ",", "places", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.test_MDN_with_2d_gaussian_sampling": [[217, 227], ["unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.get_samples", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "numpy.ones", "cde.density_estimator.MixtureDensityNetwork.sample", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertAlmostEqual", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertAlmostEqual", "numpy.mean", "float", "numpy.std", "float", "cde.density_estimator.MixtureDensityNetwork.mean_", "cde.density_estimator.MixtureDensityNetwork.covariance"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["", "def", "test_MDN_with_2d_gaussian_sampling", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "self", ".", "get_samples", "(", ")", "\n", "\n", "model", "=", "MixtureDensityNetwork", "(", "\"mdn_gaussian_sampling\"", ",", "1", ",", "1", ",", "n_centers", "=", "5", ",", "n_training_epochs", "=", "200", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "x_cond", "=", "np", ".", "ones", "(", "shape", "=", "(", "10", "**", "6", ",", "1", ")", ")", "\n", "_", ",", "y_sample", "=", "model", ".", "sample", "(", "x_cond", ")", "\n", "self", ".", "assertAlmostEqual", "(", "np", ".", "mean", "(", "y_sample", ")", ",", "float", "(", "model", ".", "mean_", "(", "y_sample", "[", "1", "]", ")", ")", ",", "places", "=", "0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "np", ".", "std", "(", "y_sample", ")", ",", "float", "(", "model", ".", "covariance", "(", "y_sample", "[", "1", "]", ")", ")", ",", "places", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.test_MDN_with_2d_gaussian": [[228, 245], ["unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.get_samples", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "numpy.arange", "numpy.asarray", "cde.density_estimator.MixtureDensityNetwork.pdf", "scipy.stats.norm.pdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "cde.density_estimator.MixtureDensityNetwork.cdf", "scipy.stats.norm.cdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "numpy.mean", "numpy.mean", "numpy.abs", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "test_MDN_with_2d_gaussian", "(", "self", ")", ":", "\n", "    ", "mu", "=", "200", "\n", "std", "=", "23", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "\n", "model", "=", "MixtureDensityNetwork", "(", "\"mdn\"", ",", "1", ",", "1", ",", "n_centers", "=", "10", ",", "data_normalization", "=", "True", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n", "p_est", "=", "model", ".", "cdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "cdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.test_MDN_with_2d_gaussian2": [[247, 264], ["unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.get_samples", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "numpy.arange", "numpy.asarray", "cde.density_estimator.MixtureDensityNetwork.pdf", "scipy.stats.norm.pdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "cde.density_estimator.MixtureDensityNetwork.cdf", "scipy.stats.norm.cdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "numpy.mean", "numpy.mean", "numpy.abs", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "test_MDN_with_2d_gaussian2", "(", "self", ")", ":", "\n", "    ", "mu", "=", "-", "5", "\n", "std", "=", "2.5", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "\n", "model", "=", "MixtureDensityNetwork", "(", "\"mdn2\"", ",", "1", ",", "1", ",", "n_centers", "=", "5", ",", "weight_normalization", "=", "True", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n", "p_est", "=", "model", ".", "cdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "cdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.test_CDE_with_2d_gaussian": [[265, 280], ["unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.get_samples", "cde.density_estimator.ConditionalKernelDensityEstimation", "cde.density_estimator.ConditionalKernelDensityEstimation.fit", "numpy.arange", "numpy.asarray", "cde.density_estimator.ConditionalKernelDensityEstimation.pdf", "scipy.stats.norm.pdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "cde.density_estimator.ConditionalKernelDensityEstimation.cdf", "scipy.stats.norm.cdf", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.assertLessEqual", "numpy.mean", "numpy.mean", "numpy.abs", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "test_CDE_with_2d_gaussian", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "self", ".", "get_samples", "(", ")", "\n", "\n", "model", "=", "ConditionalKernelDensityEstimation", "(", "'cde'", ",", "1", ",", "1", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "-", "1", ",", "5", ",", "0.5", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "2", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "2", ",", "scale", "=", "1", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n", "p_est", "=", "model", ".", "cdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "cdf", "(", "y", ",", "loc", "=", "2", ",", "scale", "=", "1", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.test_MDN_KMN_eval_set": [[281, 293], ["unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.get_samples", "unittests_estimators.TestConditionalDensityEstimators_2d_gaussian.get_samples", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit"], ["", "def", "test_MDN_KMN_eval_set", "(", "self", ")", ":", "\n", "    ", "mu", "=", "200", "\n", "std", "=", "23", "\n", "X_train", ",", "Y_train", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "X_test", ",", "Y_test", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "X_test", "=", "X_test", "\n", "\n", "model", "=", "MixtureDensityNetwork", "(", "\"mdn_eval_set\"", ",", "1", ",", "1", ",", "n_centers", "=", "10", ",", "data_normalization", "=", "True", ",", "n_training_epochs", "=", "100", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "eval_set", "=", "(", "X_test", ",", "Y_test", ")", ")", "\n", "\n", "model", "=", "KernelMixtureNetwork", "(", "\"kmn_eval_set\"", ",", "1", ",", "1", ",", "n_centers", "=", "10", ",", "data_normalization", "=", "True", ",", "n_training_epochs", "=", "100", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "eval_set", "=", "(", "X_test", ",", "Y_test", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestSerializationDensityEstimators.get_samples": [[296, 302], ["numpy.random.seed", "numpy.random.normal"], "methods", ["None"], ["  ", "def", "get_samples", "(", "self", ",", "std", "=", "1.0", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "data", "=", "np", ".", "random", ".", "normal", "(", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "std", ",", "size", "=", "(", "2000", ",", "4", ")", ")", "\n", "X", "=", "data", "[", ":", ",", "0", ":", "2", "]", "\n", "Y", "=", "data", "[", ":", ",", "2", ":", "4", "]", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestSerializationDensityEstimators.testPickleUnpickleMDN": [[303, 319], ["unittests_estimators.TestSerializationDensityEstimators.get_samples", "tensorflow.reset_default_graph", "numpy.sum", "unittests_estimators.TestSerializationDensityEstimators.assertAlmostEqual", "tensorflow.Session", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "cde.density_estimator.MixtureDensityNetwork.pdf", "pickle.dumps", "tensorflow.Session", "pickle.loads", "pickle.loads.pdf", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "testPickleUnpickleMDN", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "self", ".", "get_samples", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "model", "=", "MixtureDensityNetwork", "(", "\"mdn_pickle\"", ",", "2", ",", "2", ",", "n_training_epochs", "=", "10", ",", "data_normalization", "=", "True", ",", "weight_normalization", "=", "False", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "pdf_before", "=", "model", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "\n", "# pickle and unpickle model", "\n", "dump_string", "=", "pickle", ".", "dumps", "(", "model", ")", "\n", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "model_loaded", "=", "pickle", ".", "loads", "(", "dump_string", ")", "\n", "pdf_after", "=", "model_loaded", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "\n", "", "diff", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "pdf_after", "-", "pdf_before", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "diff", ",", "0", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestSerializationDensityEstimators.testPickleUnpickleKDN": [[320, 336], ["unittests_estimators.TestSerializationDensityEstimators.get_samples", "tensorflow.reset_default_graph", "numpy.sum", "unittests_estimators.TestSerializationDensityEstimators.assertAlmostEqual", "tensorflow.Session", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "cde.density_estimator.KernelMixtureNetwork.pdf", "pickle.dumps", "tensorflow.Session", "pickle.loads", "pickle.loads.pdf", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "testPickleUnpickleKDN", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "self", ".", "get_samples", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "model", "=", "KernelMixtureNetwork", "(", "\"kde\"", ",", "2", ",", "2", ",", "n_centers", "=", "10", ",", "n_training_epochs", "=", "10", ",", "data_normalization", "=", "True", ",", "weight_normalization", "=", "True", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "pdf_before", "=", "model", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "\n", "# pickle and unpickle model", "\n", "dump_string", "=", "pickle", ".", "dumps", "(", "model", ")", "\n", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "model_loaded", "=", "pickle", ".", "loads", "(", "dump_string", ")", "\n", "pdf_after", "=", "model_loaded", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "\n", "", "diff", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "pdf_after", "-", "pdf_before", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "diff", ",", "0", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestRegularization.get_samples": [[339, 345], ["numpy.random.seed", "numpy.random.normal"], "methods", ["None"], ["  ", "def", "get_samples", "(", "self", ",", "std", "=", "1.0", ",", "mu", "=", "2", ",", "n_samples", "=", "2000", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "data", "=", "np", ".", "random", ".", "normal", "(", "[", "mu", ",", "mu", "]", ",", "std", ",", "size", "=", "(", "n_samples", ",", "2", ")", ")", "\n", "X", "=", "data", "[", ":", ",", "0", "]", "\n", "Y", "=", "data", "[", ":", ",", "1", "]", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestRegularization.test1_KMN_with_2d_gaussian_noise_y": [[346, 362], ["unittests_estimators.TestRegularization.get_samples", "tensorflow.Session", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "print", "print", "unittests_estimators.TestRegularization.assertGreaterEqual", "cde.density_estimator.KernelMixtureNetwork.covariance", "cde.density_estimator.KernelMixtureNetwork.covariance", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["", "def", "test1_KMN_with_2d_gaussian_noise_y", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "std", "=", "0.5", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", ":", "\n", "      ", "model_no_noise", "=", "KernelMixtureNetwork", "(", "\"kmn_no_noise_y\"", ",", "1", ",", "1", ",", "n_centers", "=", "5", ",", "x_noise_std", "=", "None", ",", "y_noise_std", "=", "None", ")", "\n", "model_no_noise", ".", "fit", "(", "X", ",", "Y", ")", "\n", "var_no_noise", "=", "model_no_noise", ".", "covariance", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "2", "]", "]", ")", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "model_noise", "=", "KernelMixtureNetwork", "(", "\"kmn_noise_y\"", ",", "1", ",", "1", ",", "n_centers", "=", "5", ",", "x_noise_std", "=", "None", ",", "y_noise_std", "=", "1", ")", "\n", "model_noise", ".", "fit", "(", "X", ",", "Y", ")", "\n", "var_noise", "=", "model_noise", ".", "covariance", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "2", "]", "]", ")", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "print", "(", "\"Training w/o noise:\"", ",", "var_no_noise", ")", "\n", "print", "(", "\"Training w/ noise:\"", ",", "var_noise", ")", "\n", "\n", "self", ".", "assertGreaterEqual", "(", "var_noise", "-", "var_no_noise", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestRegularization.test2_KMN_with_2d_gaussian_noise_x": [[363, 385], ["numpy.random.seed", "numpy.random.uniform", "numpy.linspace", "numpy.random.normal", "numpy.ones", "numpy.ones", "tensorflow.Session", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "numpy.mean", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "numpy.mean", "print", "print", "unittests_estimators.TestRegularization.assertGreaterEqual", "numpy.abs", "numpy.abs", "cde.density_estimator.KernelMixtureNetwork.pdf", "cde.density_estimator.KernelMixtureNetwork.pdf", "cde.density_estimator.KernelMixtureNetwork.pdf", "cde.density_estimator.KernelMixtureNetwork.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "", "def", "test2_KMN_with_2d_gaussian_noise_x", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "X", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "6", ",", "size", "=", "4000", ")", "\n", "Y", "=", "X", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "4000", ")", "\n", "\n", "x_test_2", "=", "np", ".", "ones", "(", "100", ")", "*", "2", "\n", "x_test_4", "=", "np", ".", "ones", "(", "100", ")", "*", "4", "\n", "y_test", "=", "np", ".", "linspace", "(", "1", ",", "5", ",", "num", "=", "100", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", ":", "\n", "      ", "model_no_noise", "=", "KernelMixtureNetwork", "(", "\"kmn_no_noise_x\"", ",", "1", ",", "1", ",", "n_centers", "=", "5", ",", "x_noise_std", "=", "None", ",", "y_noise_std", "=", "None", ")", "\n", "model_no_noise", ".", "fit", "(", "X", ",", "Y", ")", "\n", "pdf_distance_no_noise", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "model_no_noise", ".", "pdf", "(", "x_test_2", ",", "y_test", ")", "-", "model_no_noise", ".", "pdf", "(", "x_test_4", ",", "y_test", ")", ")", ")", "\n", "\n", "model_noise", "=", "KernelMixtureNetwork", "(", "\"kmn_noise_x\"", ",", "1", ",", "1", ",", "n_centers", "=", "5", ",", "x_noise_std", "=", "2", ",", "y_noise_std", "=", "None", ")", "\n", "model_noise", ".", "fit", "(", "X", ",", "Y", ")", "\n", "pdf_distance_noise", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "model_noise", ".", "pdf", "(", "x_test_2", ",", "y_test", ")", "-", "model_noise", ".", "pdf", "(", "x_test_4", ",", "y_test", ")", ")", ")", "\n", "\n", "print", "(", "\"Training w/o noise - pdf distance:\"", ",", "pdf_distance_no_noise", ")", "\n", "print", "(", "\"Training w/ noise - pdf distance\"", ",", "pdf_distance_noise", ")", "\n", "\n", "self", ".", "assertGreaterEqual", "(", "pdf_distance_no_noise", "/", "pdf_distance_noise", ",", "2.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestRegularization.test3_MDN_with_2d_gaussian_noise_y": [[386, 402], ["unittests_estimators.TestRegularization.get_samples", "tensorflow.Session", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "print", "print", "unittests_estimators.TestRegularization.assertGreaterEqual", "cde.density_estimator.MixtureDensityNetwork.covariance", "cde.density_estimator.MixtureDensityNetwork.covariance", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["", "", "def", "test3_MDN_with_2d_gaussian_noise_y", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "std", "=", "0.5", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", ":", "\n", "      ", "model_no_noise", "=", "MixtureDensityNetwork", "(", "\"mdn_no_noise_y\"", ",", "1", ",", "1", ",", "n_centers", "=", "1", ",", "x_noise_std", "=", "None", ",", "y_noise_std", "=", "None", ")", "\n", "model_no_noise", ".", "fit", "(", "X", ",", "Y", ")", "\n", "var_no_noise", "=", "model_no_noise", ".", "covariance", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "2", "]", "]", ")", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "model_noise", "=", "MixtureDensityNetwork", "(", "\"mdn_noise_y\"", ",", "1", ",", "1", ",", "n_centers", "=", "1", ",", "x_noise_std", "=", "None", ",", "y_noise_std", "=", "1", ")", "\n", "model_noise", ".", "fit", "(", "X", ",", "Y", ")", "\n", "var_noise", "=", "model_noise", ".", "covariance", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "2", "]", "]", ")", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "print", "(", "\"Training w/o noise:\"", ",", "var_no_noise", ")", "\n", "print", "(", "\"Training w/ noise:\"", ",", "var_noise", ")", "\n", "\n", "self", ".", "assertGreaterEqual", "(", "var_noise", "-", "var_no_noise", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestRegularization.test4_MDN_with_2d_gaussian_noise_x": [[403, 425], ["numpy.random.seed", "numpy.random.uniform", "numpy.linspace", "numpy.random.normal", "numpy.ones", "numpy.ones", "tensorflow.Session", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "numpy.mean", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "numpy.mean", "print", "print", "unittests_estimators.TestRegularization.assertGreaterEqual", "numpy.abs", "numpy.abs", "cde.density_estimator.MixtureDensityNetwork.pdf", "cde.density_estimator.MixtureDensityNetwork.pdf", "cde.density_estimator.MixtureDensityNetwork.pdf", "cde.density_estimator.MixtureDensityNetwork.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "", "def", "test4_MDN_with_2d_gaussian_noise_x", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "X", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "6", ",", "size", "=", "4000", ")", "\n", "Y", "=", "X", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "4000", ")", "\n", "\n", "x_test_2", "=", "np", ".", "ones", "(", "100", ")", "*", "2", "\n", "x_test_4", "=", "np", ".", "ones", "(", "100", ")", "*", "4", "\n", "y_test", "=", "np", ".", "linspace", "(", "1", ",", "5", ",", "num", "=", "100", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", ":", "\n", "      ", "model_no_noise", "=", "MixtureDensityNetwork", "(", "\"mdn_no_noise_x\"", ",", "1", ",", "1", ",", "n_centers", "=", "1", ",", "x_noise_std", "=", "None", ",", "y_noise_std", "=", "None", ")", "\n", "model_no_noise", ".", "fit", "(", "X", ",", "Y", ")", "\n", "pdf_distance_no_noise", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "model_no_noise", ".", "pdf", "(", "x_test_2", ",", "y_test", ")", "-", "model_no_noise", ".", "pdf", "(", "x_test_4", ",", "y_test", ")", ")", ")", "\n", "\n", "model_noise", "=", "MixtureDensityNetwork", "(", "\"mdn_noise_x\"", ",", "1", ",", "1", ",", "n_centers", "=", "1", ",", "x_noise_std", "=", "2", ",", "y_noise_std", "=", "None", ")", "\n", "model_noise", ".", "fit", "(", "X", ",", "Y", ")", "\n", "pdf_distance_noise", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "model_noise", ".", "pdf", "(", "x_test_2", ",", "y_test", ")", "-", "model_noise", ".", "pdf", "(", "x_test_4", ",", "y_test", ")", ")", ")", "\n", "\n", "print", "(", "\"Training w/o noise - pdf distance:\"", ",", "pdf_distance_no_noise", ")", "\n", "print", "(", "\"Training w/ noise - pdf distance\"", ",", "pdf_distance_noise", ")", "\n", "\n", "self", ".", "assertGreaterEqual", "(", "pdf_distance_no_noise", "/", "pdf_distance_noise", ",", "2.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestRegularization.test7_data_normalization": [[426, 440], ["unittests_estimators.TestRegularization.get_samples", "tensorflow.Session", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "sess.run", "print", "float", "float", "unittests_estimators.TestRegularization.assertLessEqual", "unittests_estimators.TestRegularization.assertLessEqual", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "", "def", "test7_data_normalization", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "std", "=", "2", ",", "mu", "=", "20", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "model", "=", "KernelMixtureNetwork", "(", "\"kmn_data_normalization\"", ",", "1", ",", "1", ",", "n_centers", "=", "2", ",", "x_noise_std", "=", "None", ",", "y_noise_std", "=", "None", ",", "\n", "data_normalization", "=", "True", ",", "n_training_epochs", "=", "100", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "# test if data statistics were properly assigned to tf graph", "\n", "x_mean", ",", "x_std", "=", "sess", ".", "run", "(", "[", "model", ".", "mean_x_sym", ",", "model", ".", "std_x_sym", "]", ")", "\n", "print", "(", "x_mean", ",", "x_std", ")", "\n", "mean_diff", "=", "float", "(", "np", ".", "abs", "(", "x_mean", "-", "20", ")", ")", "\n", "std_diff", "=", "float", "(", "np", ".", "abs", "(", "x_std", "-", "2", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "mean_diff", ",", "0.5", ")", "\n", "self", ".", "assertLessEqual", "(", "std_diff", ",", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestRegularization.test8_data_normalization": [[441, 465], ["numpy.random.seed", "numpy.random.normal", "tensorflow.Session", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "sess.run", "print", "cde.density_estimator.MixtureDensityNetwork.mean_", "numpy.abs", "unittests_estimators.TestRegularization.assertLessEqual", "numpy.mean", "print", "unittests_estimators.TestRegularization.assertGreaterEqual", "unittests_estimators.TestRegularization.assertLessEqual", "unittests_estimators.TestRegularization.assertGreaterEqual", "unittests_estimators.TestRegularization.assertLessEqual", "cde.density_estimator.MixtureDensityNetwork.covariance", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["", "", "def", "test8_data_normalization", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "24", ")", "\n", "mean", "=", "10", "\n", "std", "=", "2", "\n", "data", "=", "np", ".", "random", ".", "normal", "(", "[", "mean", ",", "mean", ",", "mean", ",", "mean", "]", ",", "std", ",", "size", "=", "(", "2000", ",", "4", ")", ")", "\n", "X", "=", "data", "[", ":", ",", "0", ":", "2", "]", "\n", "Y", "=", "data", "[", ":", ",", "2", ":", "4", "]", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "model", "=", "MixtureDensityNetwork", "(", "\"mdn_data_normalization\"", ",", "2", ",", "2", ",", "n_centers", "=", "2", ",", "x_noise_std", "=", "None", ",", "y_noise_std", "=", "None", ",", "\n", "data_normalization", "=", "True", ",", "n_training_epochs", "=", "2000", ",", "random_seed", "=", "22", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "y_mean", ",", "y_std", "=", "sess", ".", "run", "(", "[", "model", ".", "mean_y_sym", ",", "model", ".", "std_y_sym", "]", ")", "\n", "print", "(", "y_mean", ",", "y_std", ")", "\n", "cond_mean", "=", "model", ".", "mean_", "(", "Y", ")", "\n", "mean_diff", "=", "np", ".", "abs", "(", "mean", "-", "np", ".", "mean", "(", "cond_mean", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "mean_diff", ",", "0.5", ")", "\n", "\n", "cond_cov", "=", "np", ".", "mean", "(", "model", ".", "covariance", "(", "Y", ")", ",", "axis", "=", "0", ")", "\n", "print", "(", "cond_cov", ")", "\n", "self", ".", "assertGreaterEqual", "(", "cond_cov", "[", "0", "]", "[", "0", "]", ",", "std", "**", "2", "*", "0.7", ")", "\n", "self", ".", "assertLessEqual", "(", "cond_cov", "[", "0", "]", "[", "0", "]", ",", "std", "**", "2", "*", "1.3", ")", "\n", "self", ".", "assertGreaterEqual", "(", "cond_cov", "[", "1", "]", "[", "1", "]", ",", "std", "**", "2", "*", "0.7", ")", "\n", "self", ".", "assertLessEqual", "(", "cond_cov", "[", "1", "]", "[", "1", "]", ",", "std", "**", "2", "*", "1.3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestRegularization.test9_data_normalization": [[466, 491], ["numpy.random.seed", "numpy.random.normal", "tensorflow.Session", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "cde.density_estimator.KernelMixtureNetwork.mean_", "print", "numpy.abs", "unittests_estimators.TestRegularization.assertLessEqual", "numpy.mean", "print", "unittests_estimators.TestRegularization.assertGreaterEqual", "unittests_estimators.TestRegularization.assertLessEqual", "unittests_estimators.TestRegularization.assertGreaterEqual", "unittests_estimators.TestRegularization.assertLessEqual", "numpy.mean", "cde.density_estimator.KernelMixtureNetwork.covariance", "numpy.array", "numpy.mean", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["", "", "def", "test9_data_normalization", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "24", ")", "\n", "mean", "=", "-", "80", "\n", "std", "=", "7", "\n", "data", "=", "np", ".", "random", ".", "normal", "(", "[", "mean", ",", "mean", ",", "mean", ",", "mean", "]", ",", "std", ",", "size", "=", "(", "4000", ",", "4", ")", ")", "\n", "X", "=", "data", "[", ":", ",", "0", ":", "2", "]", "\n", "Y", "=", "data", "[", ":", ",", "2", ":", "4", "]", "\n", "\n", "with", "tf", ".", "Session", "(", ")", ":", "\n", "      ", "model", "=", "KernelMixtureNetwork", "(", "\"kmn_data_normalization_2\"", ",", "2", ",", "2", ",", "n_centers", "=", "5", ",", "x_noise_std", "=", "None", ",", "y_noise_std", "=", "None", ",", "\n", "data_normalization", "=", "True", ",", "n_training_epochs", "=", "2000", ",", "random_seed", "=", "22", ",", "keep_edges", "=", "False", ",", "\n", "train_scales", "=", "True", ",", "weight_normalization", "=", "True", ",", "init_scales", "=", "np", ".", "array", "(", "[", "1.0", "]", ")", ")", "\n", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "cond_mean", "=", "model", ".", "mean_", "(", "Y", ")", "\n", "print", "(", "np", ".", "mean", "(", "cond_mean", ")", ")", "\n", "mean_diff", "=", "np", ".", "abs", "(", "mean", "-", "np", ".", "mean", "(", "cond_mean", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "mean_diff", ",", "np", ".", "abs", "(", "mean", ")", "*", "0.1", ")", "\n", "\n", "cond_cov", "=", "np", ".", "mean", "(", "model", ".", "covariance", "(", "Y", ")", ",", "axis", "=", "0", ")", "\n", "print", "(", "cond_cov", ")", "\n", "self", ".", "assertGreaterEqual", "(", "cond_cov", "[", "0", "]", "[", "0", "]", ",", "std", "**", "2", "*", "0.7", ")", "\n", "self", ".", "assertLessEqual", "(", "cond_cov", "[", "0", "]", "[", "0", "]", ",", "std", "**", "2", "*", "1.3", ")", "\n", "self", ".", "assertGreaterEqual", "(", "cond_cov", "[", "1", "]", "[", "1", "]", ",", "std", "**", "2", "*", "0.7", ")", "\n", "self", ".", "assertLessEqual", "(", "cond_cov", "[", "1", "]", "[", "1", "]", ",", "std", "**", "2", "*", "1.3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestRegularization.test_MDN_adaptive_noise": [[492, 511], ["unittests_estimators.TestRegularization.get_samples", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "unittests_estimators.TestRegularization.get_samples", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "unittests_estimators.TestRegularization.assertLess", "unittests_estimators.TestRegularization.assertGreater", "cde.density_estimator.MixtureDensityNetwork.std_", "cde.density_estimator.MixtureDensityNetwork.std_", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.std_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.std_"], ["", "", "def", "test_MDN_adaptive_noise", "(", "self", ")", ":", "\n", "    ", "adaptive_noise_fn", "=", "lambda", "n", ",", "d", ":", "0.0", "if", "n", "<", "1000", "else", "5.0", "\n", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "0", ",", "std", "=", "1", ",", "n_samples", "=", "999", ")", "\n", "est", "=", "MixtureDensityNetwork", "(", "\"mdn_adaptive_noise_999\"", ",", "1", ",", "1", ",", "n_centers", "=", "1", ",", "y_noise_std", "=", "0.0", ",", "x_noise_std", "=", "0.0", ",", "\n", "hidden_sizes", "=", "(", "8", ",", "8", ")", ",", "\n", "adaptive_noise_fn", "=", "adaptive_noise_fn", ",", "n_training_epochs", "=", "500", ")", "\n", "est", ".", "fit", "(", "X", ",", "Y", ")", "\n", "std_999", "=", "est", ".", "std_", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0.0", "]", "]", ")", ")", "[", "0", "]", "\n", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "0", ",", "std", "=", "1", ",", "n_samples", "=", "1002", ")", "\n", "est", "=", "MixtureDensityNetwork", "(", "\"mdn_adaptive_noise_1002\"", ",", "1", ",", "1", ",", "n_centers", "=", "1", ",", "y_noise_std", "=", "0.0", ",", "x_noise_std", "=", "0.0", ",", "\n", "hidden_sizes", "=", "(", "8", ",", "8", ")", ",", "\n", "adaptive_noise_fn", "=", "adaptive_noise_fn", ",", "n_training_epochs", "=", "500", ")", "\n", "est", ".", "fit", "(", "X", ",", "Y", ")", "\n", "std_1002", "=", "est", ".", "std_", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0.0", "]", "]", ")", ")", "[", "0", "]", "\n", "\n", "self", ".", "assertLess", "(", "std_999", ",", "std_1002", ")", "\n", "self", ".", "assertGreater", "(", "std_1002", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestRegularization.test_NF_adaptive_noise": [[512, 531], ["unittests_estimators.TestRegularization.get_samples", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "unittests_estimators.TestRegularization.get_samples", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "unittests_estimators.TestRegularization.assertLess", "unittests_estimators.TestRegularization.assertGreater", "cde.density_estimator.NormalizingFlowEstimator.std_", "cde.density_estimator.NormalizingFlowEstimator.std_", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.std_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.std_"], ["", "def", "test_NF_adaptive_noise", "(", "self", ")", ":", "\n", "    ", "adaptive_noise_fn", "=", "lambda", "n", ",", "d", ":", "0.0", "if", "n", "<", "1000", "else", "5.0", "\n", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "0", ",", "std", "=", "1", ",", "n_samples", "=", "999", ")", "\n", "est", "=", "NormalizingFlowEstimator", "(", "\"nf_999\"", ",", "1", ",", "1", ",", "y_noise_std", "=", "0.0", ",", "n_flows", "=", "2", ",", "hidden_sizes", "=", "(", "8", ",", "8", ")", ",", "\n", "x_noise_std", "=", "0.0", ",", "adaptive_noise_fn", "=", "adaptive_noise_fn", ",", "\n", "n_training_epochs", "=", "500", ")", "\n", "est", ".", "fit", "(", "X", ",", "Y", ")", "\n", "std_999", "=", "est", ".", "std_", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0.0", "]", "]", ")", ")", "[", "0", "]", "\n", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "0", ",", "std", "=", "1", ",", "n_samples", "=", "1002", ")", "\n", "est", "=", "NormalizingFlowEstimator", "(", "\"nf_1002\"", ",", "1", ",", "1", ",", "y_noise_std", "=", "0.0", ",", "n_flows", "=", "2", ",", "hidden_sizes", "=", "(", "8", ",", "8", ")", ",", "\n", "x_noise_std", "=", "0.0", ",", "adaptive_noise_fn", "=", "adaptive_noise_fn", ",", "\n", "n_training_epochs", "=", "500", ")", "\n", "est", ".", "fit", "(", "X", ",", "Y", ")", "\n", "std_1002", "=", "est", ".", "std_", "(", "x_cond", "=", "np", ".", "array", "(", "[", "[", "0.0", "]", "]", ")", ")", "[", "0", "]", "\n", "\n", "self", ".", "assertLess", "(", "std_999", ",", "std_1002", ")", "\n", "self", ".", "assertGreater", "(", "std_1002", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestRegularization.test_MDN_weight_decay": [[532, 552], ["unittests_estimators.TestRegularization.get_samples", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "cde.density_estimator.MixtureDensityNetwork.fit", "numpy.arange", "numpy.asarray", "scipy.stats.norm.pdf", "numpy.mean", "numpy.mean", "unittests_estimators.TestRegularization.assertLessEqual", "unittests_estimators.TestRegularization.assertLessEqual", "numpy.abs", "numpy.abs", "range", "cde.density_estimator.MixtureDensityNetwork.pdf", "cde.density_estimator.MixtureDensityNetwork.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_MDN_weight_decay", "(", "self", ")", ":", "\n", "    ", "mu", "=", "5", "\n", "std", "=", "5", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "\n", "no_decay", "=", "MixtureDensityNetwork", "(", "\"mdn_no_weight_decay\"", ",", "1", ",", "1", ",", "hidden_sizes", "=", "(", "32", ",", "32", ")", ",", "n_centers", "=", "10", ",", "\n", "n_training_epochs", "=", "2000", ",", "weight_decay", "=", "0.0", ",", "weight_normalization", "=", "False", ")", "\n", "decay", "=", "MixtureDensityNetwork", "(", "\"mdn_weight_decay\"", ",", "1", ",", "1", ",", "n_centers", "=", "10", ",", "hidden_sizes", "=", "(", "32", ",", "32", ")", ",", "\n", "n_training_epochs", "=", "2000", ",", "weight_decay", "=", "1e-3", ",", "weight_normalization", "=", "False", ")", "\n", "no_decay", ".", "fit", "(", "X", ",", "Y", ")", "\n", "decay", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "l1_err_no_dec", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "no_decay", ".", "pdf", "(", "x", ",", "y", ")", "-", "p_true", ")", ")", "\n", "l1_err_dec", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "decay", ".", "pdf", "(", "x", ",", "y", ")", "-", "p_true", ")", ")", "\n", "\n", "self", ".", "assertLessEqual", "(", "l1_err_dec", ",", "0.1", ")", "\n", "self", ".", "assertLessEqual", "(", "l1_err_dec", ",", "l1_err_no_dec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestRegularization.test_KMN_l2_regularization": [[553, 572], ["unittests_estimators.TestRegularization.get_samples", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "cde.density_estimator.KernelMixtureNetwork.fit", "numpy.arange", "numpy.asarray", "scipy.stats.norm.pdf", "numpy.mean", "numpy.mean", "unittests_estimators.TestRegularization.assertLessEqual", "numpy.abs", "numpy.abs", "range", "cde.density_estimator.KernelMixtureNetwork.pdf", "cde.density_estimator.KernelMixtureNetwork.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_KMN_l2_regularization", "(", "self", ")", ":", "\n", "    ", "mu", "=", "5", "\n", "std", "=", "5", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ",", "n_samples", "=", "500", ")", "\n", "\n", "kmn_no_reg", "=", "KernelMixtureNetwork", "(", "\"kmn_no_reg\"", ",", "1", ",", "1", ",", "n_centers", "=", "10", ",", "\n", "n_training_epochs", "=", "200", ",", "l2_reg", "=", "0.0", ",", "weight_normalization", "=", "False", ")", "\n", "kmn_reg_l2", "=", "KernelMixtureNetwork", "(", "\"kmn_reg_l2\"", ",", "1", ",", "1", ",", "n_centers", "=", "10", ",", "hidden_sizes", "=", "(", "16", ",", "16", ")", ",", "\n", "n_training_epochs", "=", "200", ",", "l2_reg", "=", "1.0", ",", "weight_normalization", "=", "False", ")", "\n", "kmn_no_reg", ".", "fit", "(", "X", ",", "Y", ")", "\n", "kmn_reg_l2", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "err_no_reg", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "kmn_no_reg", ".", "pdf", "(", "x", ",", "y", ")", "-", "p_true", ")", ")", "\n", "err_reg_l2", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "kmn_reg_l2", ".", "pdf", "(", "x", ",", "y", ")", "-", "p_true", ")", ")", "\n", "\n", "self", ".", "assertLessEqual", "(", "err_reg_l2", ",", "err_no_reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestRegularization.test_NF_l1_regularization": [[573, 594], ["unittests_estimators.TestRegularization.get_samples", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "cde.density_estimator.NormalizingFlowEstimator.fit", "numpy.arange", "numpy.asarray", "scipy.stats.norm.pdf", "numpy.mean", "numpy.mean", "print", "unittests_estimators.TestRegularization.assertLessEqual", "numpy.abs", "numpy.abs", "range", "cde.density_estimator.NormalizingFlowEstimator.pdf", "cde.density_estimator.NormalizingFlowEstimator.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_NF_l1_regularization", "(", "self", ")", ":", "\n", "    ", "mu", "=", "5", "\n", "std", "=", "5", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ",", "n_samples", "=", "500", ")", "\n", "\n", "nf_no_reg", "=", "NormalizingFlowEstimator", "(", "\"nf_no_reg\"", ",", "1", ",", "1", ",", "hidden_sizes", "=", "(", "16", ",", "16", ")", ",", "n_flows", "=", "10", ",", "\n", "weight_normalization", "=", "False", ",", "l1_reg", "=", "0.0", ",", "l2_reg", "=", "0.0", ",", "n_training_epochs", "=", "500", ")", "\n", "nf_reg_l1", "=", "NormalizingFlowEstimator", "(", "\"nf_reg_l1\"", ",", "1", ",", "1", ",", "hidden_sizes", "=", "(", "16", ",", "16", ")", ",", "n_flows", "=", "10", ",", "\n", "weight_normalization", "=", "False", ",", "l1_reg", "=", "10.0", ",", "l2_reg", "=", "0.0", ",", "n_training_epochs", "=", "500", ")", "\n", "nf_no_reg", ".", "fit", "(", "X", ",", "Y", ")", "\n", "nf_reg_l1", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "err_no_reg", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "nf_no_reg", ".", "pdf", "(", "x", ",", "y", ")", "-", "p_true", ")", ")", "\n", "err_reg_l1", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "nf_reg_l1", ".", "pdf", "(", "x", ",", "y", ")", "-", "p_true", ")", ")", "\n", "\n", "print", "(", "err_no_reg", ",", "err_reg_l1", ")", "\n", "\n", "self", ".", "assertLessEqual", "(", "err_reg_l1", ",", "err_no_reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestRegularization.test_MDN_dropout": [[595, 613], ["unittests_estimators.TestRegularization.get_samples", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "numpy.arange", "numpy.asarray", "cde.density_estimator.MixtureDensityNetwork.pdf", "scipy.stats.norm.pdf", "unittests_estimators.TestRegularization.assertLessEqual", "cde.density_estimator.MixtureDensityNetwork.cdf", "scipy.stats.norm.cdf", "unittests_estimators.TestRegularization.assertLessEqual", "numpy.mean", "numpy.mean", "numpy.abs", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "test_MDN_dropout", "(", "self", ")", ":", "\n", "    ", "mu", "=", "-", "8", "\n", "std", "=", "2.5", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "\n", "dropout_model", "=", "MixtureDensityNetwork", "(", "\"mdn_dropout_reasonable\"", ",", "1", ",", "1", ",", "n_centers", "=", "5", ",", "weight_normalization", "=", "True", ",", "\n", "dropout", "=", "0.5", ",", "n_training_epochs", "=", "400", ")", "\n", "dropout_model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "dropout_model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n", "p_est", "=", "dropout_model", ".", "cdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "cdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestLogProbability.test_KMN_log_pdf": [[616, 629], ["numpy.random.normal", "numpy.random.normal", "tensorflow.Session", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "cde.density_estimator.KernelMixtureNetwork.pdf", "cde.density_estimator.KernelMixtureNetwork.log_pdf", "unittests_estimators.TestLogProbability.assertLessEqual", "numpy.random.normal", "numpy.random.normal", "numpy.mean", "str", "numpy.array", "numpy.abs", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.log_pdf"], ["  ", "def", "test_KMN_log_pdf", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1000", ",", "3", ")", ")", ",", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1000", ",", "2", ")", ")", "\n", "\n", "for", "data_norm", "in", "[", "True", ",", "False", "]", ":", "\n", "      ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "model", "=", "KernelMixtureNetwork", "(", "\"kmn_logprob\"", "+", "str", "(", "data_norm", ")", ",", "3", ",", "2", ",", "n_centers", "=", "5", ",", "\n", "hidden_sizes", "=", "(", "8", ",", "8", ")", ",", "init_scales", "=", "np", ".", "array", "(", "[", "0.5", "]", ")", ",", "n_training_epochs", "=", "10", ",", "data_normalization", "=", "data_norm", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "x", ",", "y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1000", ",", "3", ")", ")", ",", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1000", ",", "2", ")", ")", "\n", "prob", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "log_prob", "=", "model", ".", "log_pdf", "(", "x", ",", "y", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "prob", "-", "np", ".", "exp", "(", "log_prob", ")", ")", ")", ",", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestLogProbability.test_MDN_log_pdf": [[630, 643], ["numpy.random.normal", "numpy.random.normal", "tensorflow.Session", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit", "cde.density_estimator.MixtureDensityNetwork.pdf", "cde.density_estimator.MixtureDensityNetwork.log_pdf", "unittests_estimators.TestLogProbability.assertLessEqual", "numpy.random.normal", "numpy.random.normal", "numpy.mean", "str", "numpy.abs", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.log_pdf"], ["", "", "", "def", "test_MDN_log_pdf", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1000", ",", "3", ")", ")", ",", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1000", ",", "2", ")", ")", "\n", "\n", "for", "data_norm", "in", "[", "True", ",", "False", "]", ":", "\n", "      ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "model", "=", "MixtureDensityNetwork", "(", "\"mdn_logprob\"", "+", "str", "(", "data_norm", ")", ",", "3", ",", "2", ",", "n_centers", "=", "1", ",", "\n", "hidden_sizes", "=", "(", "8", ",", "8", ")", ",", "n_training_epochs", "=", "10", ",", "data_normalization", "=", "data_norm", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "x", ",", "y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1000", ",", "3", ")", ")", ",", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1000", ",", "2", ")", ")", "\n", "prob", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "log_prob", "=", "model", ".", "log_pdf", "(", "x", ",", "y", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "prob", "-", "np", ".", "exp", "(", "log_prob", ")", ")", ")", ",", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestLogProbability.test_CKDE_log_pdf": [[644, 654], ["cde.density_estimator.ConditionalKernelDensityEstimation", "cde.density_estimator.ConditionalKernelDensityEstimation.fit", "cde.density_estimator.ConditionalKernelDensityEstimation.pdf", "cde.density_estimator.ConditionalKernelDensityEstimation.log_pdf", "unittests_estimators.TestLogProbability.assertLessEqual", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.mean", "numpy.abs", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.log_pdf"], ["", "", "", "def", "test_CKDE_log_pdf", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "500", ",", "2", ")", ")", ",", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "500", ",", "2", ")", ")", "\n", "\n", "model", "=", "ConditionalKernelDensityEstimation", "(", "bandwidth", "=", "'normal_reference'", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "x", ",", "y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "100", ",", "2", ")", ")", ",", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "100", ",", "2", ")", ")", "\n", "prob", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "log_prob", "=", "model", ".", "log_pdf", "(", "x", ",", "y", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "prob", "-", "np", ".", "exp", "(", "log_prob", ")", ")", ")", ",", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestLogProbability.test_NKDE_log_pdf": [[655, 665], ["cde.density_estimator.NeighborKernelDensityEstimation", "cde.density_estimator.NeighborKernelDensityEstimation.fit", "cde.density_estimator.NeighborKernelDensityEstimation.pdf", "cde.density_estimator.NeighborKernelDensityEstimation.log_pdf", "unittests_estimators.TestLogProbability.assertLessEqual", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.mean", "numpy.abs", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.log_pdf"], ["", "def", "test_NKDE_log_pdf", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "500", ",", "2", ")", ")", ",", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "500", ",", "2", ")", ")", "\n", "\n", "model", "=", "NeighborKernelDensityEstimation", "(", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "x", ",", "y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "100", ",", "2", ")", ")", ",", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "100", ",", "2", ")", ")", "\n", "prob", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "log_prob", "=", "model", ".", "log_pdf", "(", "x", ",", "y", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "prob", "-", "np", ".", "exp", "(", "log_prob", ")", ")", ")", ",", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestLogProbability.test_LSCDE_log_pdf": [[666, 676], ["cde.density_estimator.LSConditionalDensityEstimation", "cde.density_estimator.LSConditionalDensityEstimation.fit", "cde.density_estimator.LSConditionalDensityEstimation.pdf", "cde.density_estimator.LSConditionalDensityEstimation.log_pdf", "unittests_estimators.TestLogProbability.assertLessEqual", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.mean", "numpy.abs", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.log_pdf"], ["", "def", "test_LSCDE_log_pdf", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "500", ",", "2", ")", ")", ",", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "500", ",", "2", ")", ")", "\n", "\n", "model", "=", "LSConditionalDensityEstimation", "(", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "x", ",", "y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "100", ",", "2", ")", ")", ",", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "100", ",", "2", ")", ")", "\n", "prob", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "log_prob", "=", "model", ".", "log_pdf", "(", "x", ",", "y", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "prob", "-", "np", ".", "exp", "(", "log_prob", ")", ")", ")", ",", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_fit_by_crossval.get_samples": [[678, 684], ["numpy.random.seed", "numpy.concatenate", "numpy.random.normal", "range"], "methods", ["None"], ["  ", "def", "get_samples", "(", "self", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "data", "=", "np", ".", "concatenate", "(", "[", "np", ".", "random", ".", "normal", "(", "[", "i", ",", "-", "i", "]", ",", "1", ",", "size", "=", "(", "500", ",", "2", ")", ")", "for", "i", "in", "range", "(", "-", "20", ",", "20", ",", "4", ")", "]", ",", "axis", "=", "0", ")", "\n", "X", "=", "data", "[", ":", ",", "0", "]", "\n", "Y", "=", "data", "[", ":", ",", "1", "]", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_fit_by_crossval.test_1_KMN_with_2d_gaussian_fit_by_crossval": [[685, 703], ["unittests_estimators.TestConditionalDensityEstimators_fit_by_crossval.get_samples", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit_by_cv", "numpy.arange", "numpy.asarray", "cde.density_estimator.KernelMixtureNetwork.pdf", "scipy.stats.norm.pdf", "unittests_estimators.TestConditionalDensityEstimators_fit_by_crossval.assertEqual", "unittests_estimators.TestConditionalDensityEstimators_fit_by_crossval.assertLessEqual", "numpy.mean", "cde.density_estimator.KernelMixtureNetwork.get_params", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.fit_by_cv", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_params"], ["", "def", "test_1_KMN_with_2d_gaussian_fit_by_crossval", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "self", ".", "get_samples", "(", ")", "\n", "\n", "param_grid", "=", "{", "\n", "\"n_centers\"", ":", "[", "3", ",", "10", "]", ",", "\n", "\"center_sampling_method\"", ":", "[", "\"k_means\"", "]", ",", "\n", "\"keep_edges\"", ":", "[", "True", "]", "\n", "}", "\n", "\n", "model", "=", "KernelMixtureNetwork", "(", "center_sampling_method", "=", "\"k_means\"", ",", "n_centers", "=", "20", ")", "\n", "model", ".", "fit_by_cv", "(", "X", ",", "Y", ",", "param_grid", "=", "param_grid", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "-", "1", ",", "5", ",", "0.5", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "2", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "2", ",", "scale", "=", "1", ")", "\n", "self", ".", "assertEqual", "(", "model", ".", "get_params", "(", ")", "[", "\"n_centers\"", "]", ",", "10", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_estimators.TestConditionalDensityEstimators_fit_by_crossval.test_2_MDN_with_2d_gaussian_fit_by_crossval": [[705, 721], ["unittests_estimators.TestConditionalDensityEstimators_fit_by_crossval.get_samples", "cde.density_estimator.MixtureDensityNetwork", "cde.density_estimator.MixtureDensityNetwork.fit_by_cv", "numpy.arange", "numpy.asarray", "cde.density_estimator.MixtureDensityNetwork.pdf", "scipy.stats.norm.pdf", "unittests_estimators.TestConditionalDensityEstimators_fit_by_crossval.assertEqual", "unittests_estimators.TestConditionalDensityEstimators_fit_by_crossval.assertLessEqual", "numpy.mean", "cde.density_estimator.MixtureDensityNetwork.get_params", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.fit_by_cv", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_params"], ["", "def", "test_2_MDN_with_2d_gaussian_fit_by_crossval", "(", "self", ")", ":", "\n", "    ", "X", ",", "Y", "=", "self", ".", "get_samples", "(", ")", "\n", "\n", "param_grid", "=", "{", "\n", "\"n_centers\"", ":", "[", "2", ",", "10", ",", "50", "]", "\n", "}", "\n", "\n", "model", "=", "MixtureDensityNetwork", "(", ")", "\n", "model", ".", "fit_by_cv", "(", "X", ",", "Y", ",", "param_grid", "=", "param_grid", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "-", "1", ",", "5", ",", "0.5", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "2", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "2", ",", "scale", "=", "1", ")", "\n", "self", ".", "assertEqual", "(", "model", ".", "get_params", "(", ")", "[", "\"n_centers\"", "]", ",", "10", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_io.TestIO.test_loading_time_series": [[12, 29], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "type", "unittests_io.TestIO.assertFalse", "unittests_io.TestIO.assertFalse", "cde.utils.io.load_time_series_csv", "cde.utils.io.load_time_series_csv"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.load_time_series_csv", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.load_time_series_csv"], ["  ", "def", "test_loading_time_series", "(", "self", ")", ":", "\n", "    ", "to_test", "=", "[", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "\"2_Eurostoxx50/eur_ois.csv\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "\"2_Eurostoxx50/eurostoxx50_prices_eod.csv\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "\"2_Eurostoxx50/eurostoxx50_exp_tail_variation_measures.csv\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "\"2_Eurostoxx50/eurostoxx50_realized_volmeasures.csv\"", ")", ",", "\n", "[", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "\"2_Eurostoxx50/eurostoxx50_riskneutralmeasures.csv\"", ")", ",", "\";\"", "]", ",", "\n", "[", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "\"2_Eurostoxx50/eurostoxx50_vrp.csv\"", ")", ",", "\";\"", "]", ",", "\n", "[", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "\"2_Eurostoxx50/FamaFrench_Europe_3_Factors_Daily.csv\"", ")", ",", "\",\"", ",", "\"%Y%m%d\"", "]", ",", "\n", "[", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "\"2_Eurostoxx50/FamaFrench_Europe_MOM_Factor_Daily.csv\"", ")", ",", "\",\"", ",", "\"%Y%m%d\"", "]", ",", "\n", "]", "\n", "\n", "\n", "for", "charge", "in", "to_test", ":", "\n", "      ", "if", "type", "(", "charge", ")", "==", "list", ":", "\n", "        ", "self", ".", "assertFalse", "(", "load_time_series_csv", "(", "*", "charge", ")", ".", "empty", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "assertFalse", "(", "load_time_series_csv", "(", "charge", ")", ".", "empty", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_configrunner.configrunner.test_store_load_configrunner_pipeline": [[22, 63], ["ml_logger.logger.configure", "os.path.join", "os.path.exists", "cde.evaluation.simulation_eval.question1_noise_reg_xy.question1", "cde.model_fitting.ConfigRunner.ConfigRunner", "random.sample", "cde.model_fitting.ConfigRunner.ConfigRunner.run_configurations", "dict", "os.path.join", "os.listdir", "shutil.rmtree", "unittests_configrunner.configrunner.assertTrue", "ml_logger.logger.load_pkl", "os.path.splitext", "tensorflow.Session", "ml_logger.logger.load_pkl", "unittests_configrunner.configrunner.assertTrue", "unittests_configrunner.configrunner.assertTrue", "tensorflow.Graph", "ml_logger.logger.load_pkl.plot3d"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question1_noise_reg_xy.question1", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb.run_configurations", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity.plot3d"], ["  ", "def", "test_store_load_configrunner_pipeline", "(", "self", ")", ":", "\n", "\n", "    ", "logger", ".", "configure", "(", "log_directory", "=", "config", ".", "DATA_DIR", ",", "prefix", "=", "EXP_PREFIX", ")", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "log_directory", ",", "logger", ".", "prefix", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "test_dir", ")", ":", "\n", "      ", "shutil", ".", "rmtree", "(", "test_dir", ")", "\n", "\n", "\n", "", "keys_of_interest", "=", "[", "'task_name'", ",", "'estimator'", ",", "'simulator'", ",", "'n_observations'", ",", "'center_sampling_method'", ",", "'x_noise_std'", ",", "'y_noise_std'", ",", "\n", "'ndim_x'", ",", "'ndim_y'", ",", "'n_centers'", ",", "\"n_mc_samples\"", ",", "\"n_x_cond\"", ",", "'mean_est'", ",", "'cov_est'", ",", "'mean_sim'", ",", "'cov_sim'", ",", "\n", "'kl_divergence'", ",", "'hellinger_distance'", ",", "'js_divergence'", ",", "'x_cond'", ",", "'random_seed'", ",", "\"mean_sim\"", ",", "\"cov_sim\"", ",", "\n", "\"mean_abs_diff\"", ",", "\"cov_abs_diff\"", ",", "\"VaR_sim\"", ",", "\"VaR_est\"", ",", "\"VaR_abs_diff\"", ",", "\"CVaR_sim\"", ",", "\"CVaR_est\"", ",", "\"CVaR_abs_diff\"", ",", "\n", "\"time_to_fit\"", "]", "\n", "\n", "\n", "conf_est", ",", "conf_sim", ",", "observations", "=", "question1", "(", ")", "\n", "conf_runner", "=", "ConfigRunner", "(", "EXP_PREFIX", ",", "conf_est", ",", "conf_sim", ",", "observations", "=", "observations", ",", "keys_of_interest", "=", "keys_of_interest", ",", "\n", "n_mc_samples", "=", "1", "*", "10", "**", "2", ",", "n_x_cond", "=", "5", ",", "n_seeds", "=", "5", ")", "\n", "\n", "conf_runner", ".", "configs", "=", "random", ".", "sample", "(", "conf_runner", ".", "configs", ",", "NUM_CONFIGS_TO_TEST", ")", "\n", "\n", "conf_runner", ".", "run_configurations", "(", "dump_models", "=", "True", ",", "multiprocessing", "=", "False", ")", "\n", "results_from_pkl_file", "=", "dict", "(", "{", "logger", ".", "load_pkl", "(", "RESULTS_FILE", ")", "}", ")", "\n", "\n", "\"\"\" check if model dumps have all been created \"\"\"", "\n", "dump_dir", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "log_directory", ",", "logger", ".", "prefix", ",", "'model_dumps'", ")", "\n", "model_dumps_list", "=", "os", ".", "listdir", "(", "dump_dir", ")", "# get list of all model files", "\n", "model_dumps_list_no_suffix", "=", "[", "os", ".", "path", ".", "splitext", "(", "entry", ")", "[", "0", "]", "for", "entry", "in", "model_dumps_list", "]", "# remove suffix", "\n", "\n", "for", "conf", "in", "conf_runner", ".", "configs", ":", "\n", "      ", "self", ".", "assertTrue", "(", "conf", "[", "'task_name'", "]", "in", "model_dumps_list_no_suffix", ")", "\n", "\n", "\n", "", "\"\"\" check if model dumps can be used successfully\"\"\"", "\n", "for", "model_dump_i", "in", "model_dumps_list", ":", "\n", "#tf.reset_default_graph()", "\n", "      ", "with", "tf", ".", "Session", "(", "graph", "=", "tf", ".", "Graph", "(", ")", ")", ":", "\n", "        ", "model", "=", "logger", ".", "load_pkl", "(", "\"model_dumps/\"", "+", "model_dump_i", ")", "\n", "self", ".", "assertTrue", "(", "model", ")", "\n", "if", "model", ".", "ndim_x", "==", "1", "and", "model", ".", "ndim_y", "==", "1", ":", "\n", "          ", "self", ".", "assertTrue", "(", "model", ".", "plot3d", "(", "show", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.GaussianDummy.__init__": [[14, 39], ["isinstance", "numpy.sqrt", "scipy.multivariate_normal", "numpy.array", "numpy.identity", "numpy.diagonal"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "mean", "=", "2", ",", "cov", "=", "None", ",", "ndim_x", "=", "1", ",", "ndim_y", "=", "1", ",", "has_cdf", "=", "True", ",", "has_pdf", "=", "True", ",", "can_sample", "=", "True", ")", ":", "\n", "    ", "self", ".", "ndim_x", "=", "ndim_x", "\n", "self", ".", "ndim_y", "=", "ndim_y", "\n", "self", ".", "ndim", "=", "self", ".", "ndim_x", "+", "self", ".", "ndim_y", "\n", "\n", "self", ".", "mean", "=", "mean", "\n", "# check if mean is scalar", "\n", "if", "isinstance", "(", "self", ".", "mean", ",", "list", ")", ":", "\n", "      ", "self", ".", "mean", "=", "np", ".", "array", "(", "self", ".", "ndim_y", "*", "[", "self", ".", "mean", "]", ")", "\n", "\n", "", "self", ".", "cov", "=", "cov", "\n", "if", "self", ".", "cov", "is", "None", ":", "\n", "      ", "self", ".", "cov", "=", "np", ".", "identity", "(", "self", ".", "ndim_y", ")", "\n", "", "assert", "self", ".", "cov", ".", "shape", "[", "0", "]", "==", "self", ".", "cov", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_y", "\n", "\n", "# safe data stats", "\n", "self", ".", "y_mean", "=", "self", ".", "mean", "\n", "self", ".", "y_std", "=", "np", ".", "sqrt", "(", "np", ".", "diagonal", "(", "self", ".", "cov", ")", ")", "\n", "\n", "self", ".", "gaussian", "=", "stats", ".", "multivariate_normal", "(", "mean", "=", "self", ".", "mean", ",", "cov", "=", "self", ".", "cov", ")", "\n", "self", ".", "fitted", "=", "False", "\n", "\n", "self", ".", "can_sample", "=", "can_sample", "\n", "self", ".", "has_pdf", "=", "has_pdf", "\n", "self", ".", "has_cdf", "=", "has_cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.GaussianDummy.fit": [[40, 42], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "self", ".", "fitted", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.GaussianDummy.pdf": [[43, 46], ["dummies.GaussianDummy._handle_input_dimensionality", "dummies.GaussianDummy.gaussian.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "return", "self", ".", "gaussian", ".", "pdf", "(", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.GaussianDummy.cdf": [[47, 50], ["dummies.GaussianDummy._handle_input_dimensionality", "dummies.GaussianDummy.gaussian.cdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "cdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "return", "self", ".", "gaussian", ".", "cdf", "(", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.GaussianDummy.sample": [[51, 58], ["dummies.GaussianDummy._handle_input_dimensionality", "numpy.size", "dummies.GaussianDummy.gaussian.rvs", "dummies.GaussianDummy.gaussian.rvs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality"], ["", "def", "sample", "(", "self", ",", "X", ")", ":", "\n", "    ", "X", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ")", "\n", "if", "np", ".", "size", "(", "X", ")", "==", "1", ":", "\n", "      ", "Y", "=", "self", ".", "gaussian", ".", "rvs", "(", "size", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "Y", "=", "self", ".", "gaussian", ".", "rvs", "(", "size", "=", "(", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.GaussianDummy.__str__": [[59, 61], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "str", "(", "'\\nEstimator type: {}\\n n_dim_x: {}\\n n_dim_y: {}\\n mean: {}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "ndim_x", ",", "self", ".", "ndim_y", ",", "self", ".", "mean", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.SkewNormalDummy.__init__": [[65, 80], ["scipy.skewnorm"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "shape", "=", "1", ",", "ndim_x", "=", "1", ",", "ndim_y", "=", "1", ",", "has_cdf", "=", "True", ",", "has_pdf", "=", "True", ",", "can_sample", "=", "True", ")", ":", "\n", "    ", "self", ".", "ndim_x", "=", "ndim_x", "\n", "self", ".", "ndim_y", "=", "ndim_y", "\n", "self", ".", "ndim", "=", "self", ".", "ndim_x", "+", "self", ".", "ndim_y", "\n", "\n", "assert", "ndim_y", "==", "1", ",", "\"only on-dimensional y supported for skew normal dummy\"", "\n", "\n", "self", ".", "shape", "=", "shape", "\n", "\n", "self", ".", "distribution", "=", "stats", ".", "skewnorm", "(", "a", "=", "shape", ")", "\n", "self", ".", "fitted", "=", "False", "\n", "\n", "self", ".", "can_sample", "=", "can_sample", "\n", "self", ".", "has_pdf", "=", "has_pdf", "\n", "self", ".", "has_cdf", "=", "has_cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.SkewNormalDummy.fit": [[81, 83], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "self", ".", "fitted", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.SkewNormalDummy.pdf": [[84, 87], ["dummies.SkewNormalDummy._handle_input_dimensionality", "dummies.SkewNormalDummy.distribution.pdf().flatten", "dummies.SkewNormalDummy.distribution.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "return", "self", ".", "distribution", ".", "pdf", "(", "Y", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.SkewNormalDummy.cdf": [[88, 91], ["dummies.SkewNormalDummy._handle_input_dimensionality", "dummies.SkewNormalDummy.distribution.cdf().flatten", "dummies.SkewNormalDummy.distribution.cdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "cdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "return", "self", ".", "distribution", ".", "cdf", "(", "Y", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.SkewNormalDummy.sample": [[92, 99], ["dummies.SkewNormalDummy._handle_input_dimensionality", "numpy.size", "dummies.SkewNormalDummy.distribution.rvs", "dummies.SkewNormalDummy.distribution.rvs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality"], ["", "def", "sample", "(", "self", ",", "X", ")", ":", "\n", "    ", "X", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ")", "\n", "if", "np", ".", "size", "(", "X", ")", "==", "1", ":", "\n", "      ", "Y", "=", "self", ".", "distribution", ".", "rvs", "(", "size", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "Y", "=", "self", ".", "distribution", ".", "rvs", "(", "size", "=", "(", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.SkewNormalDummy.skewness": [[100, 105], ["numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "@", "property", "\n", "def", "skewness", "(", "self", ")", ":", "\n", "    ", "gamma", "=", "self", ".", "shape", "/", "np", ".", "sqrt", "(", "1", "+", "self", ".", "shape", "**", "2", ")", "\n", "skew", "=", "(", "(", "4", "-", "np", ".", "pi", ")", "/", "2", ")", "*", "(", "(", "gamma", "*", "np", ".", "sqrt", "(", "2", "/", "np", ".", "pi", ")", ")", "**", "3", "/", "(", "1", "-", "2", "*", "gamma", "**", "2", "/", "np", ".", "pi", ")", "**", "(", "3", "/", "2", ")", ")", "\n", "return", "skew", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.SkewNormalDummy.kurtosis": [[106, 111], ["numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "@", "property", "\n", "def", "kurtosis", "(", "self", ")", ":", "\n", "    ", "gamma", "=", "self", ".", "shape", "/", "np", ".", "sqrt", "(", "1", "+", "self", ".", "shape", "**", "2", ")", "\n", "kurt", "=", "2", "*", "(", "np", ".", "pi", "-", "3", ")", "*", "(", "gamma", "*", "np", ".", "sqrt", "(", "2", "/", "np", ".", "pi", ")", ")", "**", "4", "/", "(", "1", "-", "2", "*", "gamma", "**", "2", "/", "np", ".", "pi", ")", "**", "2", "\n", "return", "kurt", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.SimulationDummy.__init__": [[114, 134], ["isinstance", "scipy.multivariate_normal", "numpy.array", "numpy.identity"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "mean", "=", "2", ",", "cov", "=", "None", ",", "ndim_x", "=", "1", ",", "ndim_y", "=", "1", ",", "has_cdf", "=", "True", ",", "has_pdf", "=", "True", ",", "can_sample", "=", "True", ")", ":", "\n", "    ", "self", ".", "ndim_x", "=", "ndim_x", "\n", "self", ".", "ndim_y", "=", "ndim_y", "\n", "self", ".", "ndim", "=", "self", ".", "ndim_x", "+", "self", ".", "ndim_y", "\n", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "cov", "=", "cov", "\n", "# check if mean is scalar", "\n", "if", "isinstance", "(", "self", ".", "mean", ",", "list", ")", ":", "\n", "      ", "self", ".", "mean", "=", "np", ".", "array", "(", "self", ".", "ndim_y", "*", "[", "self", ".", "mean", "]", ")", "\n", "\n", "", "if", "self", ".", "cov", "is", "None", ":", "\n", "      ", "self", ".", "cov", "=", "np", ".", "identity", "(", "self", ".", "ndim_y", ")", "\n", "\n", "", "self", ".", "gaussian", "=", "stats", ".", "multivariate_normal", "(", "mean", "=", "self", ".", "mean", ",", "cov", "=", "self", ".", "cov", ")", "\n", "self", ".", "fitted", "=", "False", "\n", "\n", "self", ".", "can_sample", "=", "can_sample", "\n", "self", ".", "has_pdf", "=", "has_pdf", "\n", "self", ".", "has_cdf", "=", "has_cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.SimulationDummy.pdf": [[135, 137], ["dummies.SimulationDummy.gaussian.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "return", "self", ".", "gaussian", ".", "pdf", "(", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.SimulationDummy.cdf": [[138, 140], ["dummies.SimulationDummy.gaussian.cdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "cdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "return", "self", ".", "gaussian", ".", "cdf", "(", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.SimulationDummy.simulate": [[141, 146], ["dummies.SimulationDummy.gaussian.rvs", "dummies.SimulationDummy.gaussian.rvs"], "methods", ["None"], ["", "def", "simulate", "(", "self", ",", "n_samples", "=", "1000", ")", ":", "\n", "    ", "assert", "n_samples", ">", "0", "\n", "X", "=", "self", ".", "gaussian", ".", "rvs", "(", "size", "=", "n_samples", ")", "\n", "Y", "=", "self", ".", "gaussian", ".", "rvs", "(", "size", "=", "n_samples", ")", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.SimulationDummy.simulate_conditional": [[147, 150], ["dummies.SimulationDummy.gaussian.rvs"], "methods", ["None"], ["", "def", "simulate_conditional", "(", "self", ",", "X", ")", ":", "\n", "    ", "Y", "=", "self", ".", "gaussian", ".", "rvs", "(", "size", "=", "X", ".", "shape", "[", "0", "]", ")", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.dummies.SimulationDummy.__str__": [[151, 154], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "str", "(", "'\\nProbabilistic model type: {}\\n n_dim_x: {}\\n n_dim_y: {}\\n mean: {}\\n cov: {}\\n'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "ndim_x", ",", "\n", "self", ".", "ndim_y", ",", "self", ".", "mean", ",", "self", ".", "cov", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows.test_planar_invertibel": [[17, 25], ["tensorflow.Session", "tensorflow.constant", "tensorflow.constant", "sess.run", "unittests_normalizing_flows.TestFlows.assertGreater", "cde.density_estimator.normalizing_flows.InvertedPlanarFlow._u_circ"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.PlanarFlow.InvertedPlanarFlow._u_circ"], ["    ", "def", "test_planar_invertibel", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "u", "=", "tf", ".", "constant", "(", "[", "[", "-", "2.", "]", ",", "[", "1.", "]", ",", "[", "10.", "]", ",", "[", "2.", "]", "]", ")", "\n", "w", "=", "tf", ".", "constant", "(", "[", "[", "80.", "]", ",", "[", "-", "1.", "]", ",", "[", "1.", "]", ",", "[", "1.", "]", "]", ")", "\n", "# Compute w * \u00fb", "\n", "inv", "=", "sess", ".", "run", "(", "w", "*", "InvertedPlanarFlow", ".", "_u_circ", "(", "u", ",", "w", ")", ")", "\n", "for", "i", "in", "inv", ":", "\n", "                ", "self", ".", "assertGreater", "(", "i", ",", "-", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows.test_affine_shift_and_scale": [[26, 43], ["tensorflow.Session", "tensorflow.distributions.Normal", "tensorflow.distributions.Normal", "cde.density_estimator.normalizing_flows.AffineFlow", "tensorflow.contrib.distributions.TransformedDistribution", "sess.run", "tensorflow.squeeze", "tensorflow.distributions.Normal.prob", "sess.run", "unittests_normalizing_flows.TestFlows.assertLessEqual", "tensorflow.constant", "tensorflow.distributions.Normal.sample", "tensorflow.contrib.distributions.TransformedDistribution.prob", "numpy.mean", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample"], ["", "", "", "def", "test_affine_shift_and_scale", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "base_dist", "=", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "0.", ",", "scale", "=", "1.", ")", "\n", "# shift the distribution three to the right", "\n", "transf_dist", "=", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "3.", ",", "scale", "=", "1.", ")", "\n", "\n", "flow", "=", "AffineFlow", "(", "tf", ".", "constant", "(", "[", "[", "0.", ",", "3.", "]", "]", ")", ",", "1", ")", "\n", "flow_dist", "=", "tf", ".", "contrib", ".", "distributions", ".", "TransformedDistribution", "(", "distribution", "=", "base_dist", ",", "bijector", "=", "flow", ")", "\n", "\n", "# eval the samples so they stay constant", "\n", "samples", "=", "sess", ".", "run", "(", "base_dist", ".", "sample", "(", "[", "1000", "]", ")", ")", "\n", "\n", "# the output is of shape (?, 1) so it needs to be squeezed", "\n", "pdf_estimate", "=", "tf", ".", "squeeze", "(", "flow_dist", ".", "prob", "(", "samples", ")", ")", "\n", "pdf_actual", "=", "transf_dist", ".", "prob", "(", "samples", ")", "\n", "pdf_estimate", ",", "pdf_actual", "=", "sess", ".", "run", "(", "[", "pdf_estimate", ",", "pdf_actual", "]", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "pdf_actual", "-", "pdf_estimate", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows._test_flow_correct_dims_NN": [[44, 102], ["tensorflow.Session", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "cde.density_estimator.NormalizingFlowEstimator.pdf", "unittests_normalizing_flows.TestFlows.assertEqual", "unittests_normalizing_flows.TestFlows.assertAlmostEqual", "unittests_normalizing_flows.TestFlows.assertNotAlmostEqual", "numpy.array", "numpy.array", "str", "len", "tests.index"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "", "def", "_test_flow_correct_dims_NN", "(", "self", ",", "flow_name", ")", ":", "\n", "        ", "\"\"\"\n        General structure:\n        flow_params = MLP(x)\n        pdf(y|x) = flow(y, flow_params)\n\n        The tensor being transformed (=y) are of shape (batch_size, event_dims)\n        - batch_size = len(x) == len(y)\n        - event_dims = rank(y)\n\n        For each element of x, the MLP outputs one parametrization for the flows\n        for each of these parameters, the flow transforms one element of y\n        therefore len(x) == len(y)\n        the event dimension describes the rank of the base probability distribution that's being transformed\n\n        Tensorflow's MultivariateNormal doesn't implement a CDF. Therefore we switch to a Normal for 1-D Problems\n        Caveat:\n          MultivariateNormal PDF output shape: (batch_size, )\n          UnivariateNormal PDF output shape: (batch_size, 1)\n        Therefore we adapt the output shape of the ildj to be (batch_size, 1) for 1-D, (batch_size, ) for N-D\n\n        The flows are transforming tensors (batch_size, event_size)\n        Forward: (batch_size, event_size) -> (batch_size, event_size)\n        Inverse: (batch_size, event_size) -> (batch_size, event_size)\n        ILDJ: (batch_size, event_size) -> (batch_size, 1) [1-D] or (batch_size, ) [N-D]\n\n        This forms a transformed distribution:\n        Sample:  -> (batch_size, event_size)\n        PDF: (batch_size, event_size) -> (batch_size, 1) [1-D] or (batch_size, ) [N-D]\n        CDF: (batch_size, event_size) -> (batch_size, 1) [EXISTS ONLY FOR 1-D!]\n        \"\"\"", "\n", "tests", "=", "[", "\n", "{", "\n", "'x'", ":", "[", "[", "1.", "]", ",", "[", "0.", "]", ",", "[", "2.", "]", ",", "[", "4.", "]", ",", "[", "1.", "]", "]", ",", "\n", "'y'", ":", "[", "[", "1.", "]", ",", "[", "0.", "]", ",", "[", "2.", "]", ",", "[", "3.", "]", ",", "[", "1.", "]", "]", ",", "\n", "'ndim_x'", ":", "1", ",", "\n", "'ndim_y'", ":", "1", "\n", "}", ",", "\n", "{", "\n", "'x'", ":", "[", "[", "1.", ",", "1.", "]", ",", "[", "0.", ",", "0.", "]", ",", "[", "2.", ",", "2.", "]", ",", "[", "4.", ",", "4.", "]", ",", "[", "1.", ",", "1.", "]", "]", ",", "\n", "'y'", ":", "[", "[", "1.", ",", "1.", "]", ",", "[", "0.", ",", "0.", "]", ",", "[", "2.", ",", "2.", "]", ",", "[", "3.", ",", "3.", "]", ",", "[", "1.", ",", "1.", "]", "]", ",", "\n", "'ndim_x'", ":", "2", ",", "\n", "'ndim_y'", ":", "2", "\n", "}", "\n", "]", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "for", "test", "in", "tests", ":", "\n", "                ", "model", "=", "NormalizingFlowEstimator", "(", "'nf_dimtest_'", "+", "flow_name", "+", "str", "(", "tests", ".", "index", "(", "test", ")", ")", ",", "\n", "test", "[", "'ndim_x'", "]", ",", "test", "[", "'ndim_y'", "]", ",", "\n", "random_seed", "=", "22", ",", "n_training_epochs", "=", "2", ",", "\n", "flows_type", "=", "(", "flow_name", ",", ")", ")", "\n", "x", ",", "y", "=", "np", ".", "array", "(", "test", "[", "'x'", "]", ")", ",", "np", ".", "array", "(", "test", "[", "'y'", "]", ")", "\n", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "p", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "self", ".", "assertEqual", "(", "p", ".", "shape", ",", "(", "len", "(", "y", ")", ",", ")", ")", "\n", "# every test has equal first and last elements, theses are basic sanity tests", "\n", "self", ".", "assertAlmostEqual", "(", "p", "[", "0", "]", ",", "p", "[", "-", "1", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertNotAlmostEqual", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "places", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows._test_flow_correct_dims": [[103, 149], ["tensorflow.Session", "len", "numpy.array", "tensorflow.ones", "flow_class", "tensorflow.contrib.distributions.TransformedDistribution", "unittests_normalizing_flows.TestFlows.assertEqual", "flow_class.inverse().eval", "unittests_normalizing_flows.TestFlows.assertEqual", "unittests_normalizing_flows.TestFlows.assertEqual", "flow_class.inverse_log_det_jacobian().eval", "unittests_normalizing_flows.TestFlows.assertEqual", "tensorflow.contrib.distributions.TransformedDistribution.prob().eval", "unittests_normalizing_flows.TestFlows.assertEqual", "unittests_normalizing_flows.TestFlows.assertNotEqual", "tensorflow.distributions.Normal", "tensorflow.contrib.distributions.MultivariateNormalDiag", "unittests_normalizing_flows.TestFlows.assertEqual", "unittests_normalizing_flows.TestFlows.assertEqual", "unittests_normalizing_flows.TestFlows.assertEqual", "unittests_normalizing_flows.TestFlows.assertEqual", "flow_class.inverse", "flow_class.inverse_log_det_jacobian", "tensorflow.contrib.distributions.TransformedDistribution.prob", "flow_class.get_param_size"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow.get_param_size"], ["", "", "", "def", "_test_flow_correct_dims", "(", "self", ",", "flow_class", ")", ":", "\n", "        ", "tests", "=", "[", "\n", "(", "[", "[", "1.", "]", ",", "[", "2.", "]", ",", "[", "1.", "]", "]", ",", "1", ")", ",", "\n", "(", "[", "[", "1.", ",", "1.", "]", ",", "[", "2.", ",", "2.", "]", ",", "[", "1.", ",", "1.", "]", "]", ",", "2", ")", ",", "\n", "]", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "for", "test", "in", "tests", ":", "\n", "                ", "y", ",", "event_dims", "=", "test", "\n", "batch_size", "=", "len", "(", "y", ")", "\n", "\n", "y", "=", "np", ".", "array", "(", "y", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "event_dims", "==", "1", ":", "\n", "                    ", "base_dist", "=", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "0.", ",", "scale", "=", "1.", ")", "\n", "", "else", ":", "\n", "                    ", "base_dist", "=", "tf", ".", "contrib", ".", "distributions", ".", "MultivariateNormalDiag", "(", "loc", "=", "[", "0.", "]", "*", "event_dims", ",", "\n", "scale_diag", "=", "[", "1.", "]", "*", "event_dims", ")", "\n", "", "params", "=", "tf", ".", "ones", "(", "shape", "=", "(", "batch_size", ",", "flow_class", ".", "get_param_size", "(", "event_dims", ")", ")", ")", "\n", "flow", "=", "flow_class", "(", "params", ",", "event_dims", ")", "\n", "flow_dist", "=", "tf", ".", "contrib", ".", "distributions", ".", "TransformedDistribution", "(", "distribution", "=", "base_dist", ",", "bijector", "=", "flow", ")", "\n", "\n", "# reverse should transform (batch_size, event_dims) -> (batch_size, event_dims)", "\n", "self", ".", "assertEqual", "(", "y", ".", "shape", ",", "(", "batch_size", ",", "event_dims", ")", ")", "\n", "inverse_y", "=", "flow", ".", "inverse", "(", "y", ")", ".", "eval", "(", ")", "\n", "self", ".", "assertEqual", "(", "inverse_y", ".", "shape", ",", "(", "batch_size", ",", "event_dims", ")", ")", "\n", "\n", "# ildj is a reduction over event_dims", "\n", "# therefore transforms: (batch_size, event_dims) -> (batch_size, 1)", "\n", "self", ".", "assertEqual", "(", "y", ".", "shape", ",", "(", "batch_size", ",", "event_dims", ")", ")", "\n", "ildj_y", "=", "flow", ".", "inverse_log_det_jacobian", "(", "y", ")", ".", "eval", "(", ")", "\n", "if", "event_dims", "==", "1", ":", "\n", "                    ", "self", ".", "assertEqual", "(", "ildj_y", ".", "shape", ",", "(", "batch_size", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "assertEqual", "(", "ildj_y", ".", "shape", ",", "(", "batch_size", ",", ")", ")", "\n", "\n", "# probability: (batch_size, event_dims) -> (batch_size, 1)", "\n", "", "self", ".", "assertEqual", "(", "y", ".", "shape", ",", "(", "batch_size", ",", "event_dims", ")", ")", "\n", "p", "=", "flow_dist", ".", "prob", "(", "y", ")", ".", "eval", "(", ")", "\n", "if", "event_dims", "==", "1", ":", "\n", "                    ", "self", ".", "assertEqual", "(", "p", ".", "shape", ",", "(", "batch_size", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "assertEqual", "(", "p", ".", "shape", ",", "(", "batch_size", ",", ")", ")", "\n", "\n", "# the first an same element of every test is the same, this is a basic sanity test", "\n", "", "self", ".", "assertEqual", "(", "p", "[", "0", "]", ",", "p", "[", "2", "]", ")", "\n", "self", ".", "assertNotEqual", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows.test_affine_flow_correct_dimension": [[150, 153], ["unittests_normalizing_flows.TestFlows._test_flow_correct_dims", "unittests_normalizing_flows.TestFlows._test_flow_correct_dims_NN"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows._test_flow_correct_dims", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows._test_flow_correct_dims_NN"], ["", "", "", "def", "test_affine_flow_correct_dimension", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_flow_correct_dims", "(", "AffineFlow", ")", "\n", "self", ".", "_test_flow_correct_dims_NN", "(", "'affine'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows.test_identity_flow_correct_dimension": [[154, 156], ["unittests_normalizing_flows.TestFlows._test_flow_correct_dims"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows._test_flow_correct_dims"], ["", "def", "test_identity_flow_correct_dimension", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_flow_correct_dims", "(", "IdentityFlow", ")", "\n", "# we don't test NN dimensions for the Identity flow as it contains no trainable variables", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows.test_planar_flow_correct_dimension": [[158, 161], ["unittests_normalizing_flows.TestFlows._test_flow_correct_dims", "unittests_normalizing_flows.TestFlows._test_flow_correct_dims_NN"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows._test_flow_correct_dims", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows._test_flow_correct_dims_NN"], ["", "def", "test_planar_flow_correct_dimension", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_flow_correct_dims", "(", "InvertedPlanarFlow", ")", "\n", "self", ".", "_test_flow_correct_dims_NN", "(", "'planar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows.test_radial_flow_correct_dimension": [[162, 165], ["unittests_normalizing_flows.TestFlows._test_flow_correct_dims", "unittests_normalizing_flows.TestFlows._test_flow_correct_dims_NN"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows._test_flow_correct_dims", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFlows._test_flow_correct_dims_NN"], ["", "def", "test_radial_flow_correct_dimension", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_flow_correct_dims", "(", "InvertedRadialFlow", ")", "\n", "self", ".", "_test_flow_correct_dims_NN", "(", "'radial'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.Test_NF_2d_gaussian.get_samples": [[168, 174], ["numpy.random.seed", "numpy.random.normal"], "methods", ["None"], ["    ", "def", "get_samples", "(", "self", ",", "mu", "=", "2", ",", "std", "=", "1.0", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "data", "=", "np", ".", "random", ".", "normal", "(", "[", "mu", ",", "mu", "]", ",", "std", ",", "size", "=", "(", "2000", ",", "2", ")", ")", "\n", "X", "=", "data", "[", ":", ",", "0", "]", "\n", "Y", "=", "data", "[", ":", ",", "1", "]", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.Test_NF_2d_gaussian.test_NF_radial_with_2d_gaussian": [[175, 189], ["unittests_normalizing_flows.Test_NF_2d_gaussian.get_samples", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "numpy.arange", "numpy.asarray", "cde.density_estimator.NormalizingFlowEstimator.pdf", "scipy.stats.norm.pdf", "unittests_normalizing_flows.Test_NF_2d_gaussian.assertLessEqual", "numpy.mean", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_NF_radial_with_2d_gaussian", "(", "self", ")", ":", "\n", "        ", "mu", "=", "200", "\n", "std", "=", "23", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "\n", "model", "=", "NormalizingFlowEstimator", "(", "\"nf_estimator_2d_radial\"", ",", "1", ",", "1", ",", "flows_type", "=", "(", "'radial'", ",", ")", ",", "\n", "n_training_epochs", "=", "500", ",", "random_seed", "=", "22", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.Test_NF_2d_gaussian.test_NF_affine_with_2d_gaussian": [[190, 204], ["unittests_normalizing_flows.Test_NF_2d_gaussian.get_samples", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "numpy.arange", "numpy.asarray", "cde.density_estimator.NormalizingFlowEstimator.pdf", "scipy.stats.norm.pdf", "unittests_normalizing_flows.Test_NF_2d_gaussian.assertLessEqual", "numpy.mean", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_NF_affine_with_2d_gaussian", "(", "self", ")", ":", "\n", "        ", "mu", "=", "3", "\n", "std", "=", "2", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "\n", "model", "=", "NormalizingFlowEstimator", "(", "\"nf_estimator_2d_affine\"", ",", "1", ",", "1", ",", "flows_type", "=", "(", "'affine'", ",", ")", ",", "\n", "n_training_epochs", "=", "500", ",", "random_seed", "=", "22", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.Test_NF_2d_gaussian.test_NF_planar_with_2d_gaussian": [[205, 219], ["unittests_normalizing_flows.Test_NF_2d_gaussian.get_samples", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "numpy.arange", "numpy.asarray", "cde.density_estimator.NormalizingFlowEstimator.pdf", "scipy.stats.norm.pdf", "unittests_normalizing_flows.Test_NF_2d_gaussian.assertLessEqual", "numpy.mean", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_NF_planar_with_2d_gaussian", "(", "self", ")", ":", "\n", "        ", "mu", "=", "200", "\n", "std", "=", "23", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "\n", "model", "=", "NormalizingFlowEstimator", "(", "\"nf_estimator_2d_planar\"", ",", "1", ",", "1", ",", "flows_type", "=", "(", "'planar'", ",", ")", ",", "\n", "n_training_epochs", "=", "500", ",", "random_seed", "=", "22", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.Test_NF_2d_gaussian.test_NF_identitiy_with_2d_gaussian": [[220, 237], ["unittests_normalizing_flows.Test_NF_2d_gaussian.get_samples", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "cde.density_estimator.NormalizingFlowEstimator.fit", "numpy.arange", "numpy.asarray", "cde.density_estimator.NormalizingFlowEstimator.pdf", "cde.density_estimator.NormalizingFlowEstimator.pdf", "unittests_normalizing_flows.Test_NF_2d_gaussian.assertLessEqual", "numpy.mean", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_NF_identitiy_with_2d_gaussian", "(", "self", ")", ":", "\n", "        ", "mu", "=", "200", "\n", "std", "=", "23", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "\n", "model1", "=", "NormalizingFlowEstimator", "(", "\"nf_estimator_2d_planar_no_id\"", ",", "1", ",", "1", ",", "flows_type", "=", "(", "'planar'", ",", ")", ",", "\n", "n_training_epochs", "=", "50", ",", "random_seed", "=", "22", ")", "\n", "model2", "=", "NormalizingFlowEstimator", "(", "\"nf_estimator_2d_planar_id\"", ",", "1", ",", "1", ",", "flows_type", "=", "(", "'planar'", ",", "'identity'", ")", ",", "\n", "n_training_epochs", "=", "50", ",", "random_seed", "=", "22", ")", "\n", "model1", ".", "fit", "(", "X", ",", "Y", ")", "\n", "model2", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p", "=", "model1", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_id", "=", "model2", ".", "pdf", "(", "x", ",", "y", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p", "-", "p_id", ")", ")", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.Test_NF_2d_gaussian.test_NF_chain_with_2d_gaussian": [[238, 252], ["unittests_normalizing_flows.Test_NF_2d_gaussian.get_samples", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "numpy.arange", "numpy.asarray", "cde.density_estimator.NormalizingFlowEstimator.pdf", "scipy.stats.norm.pdf", "unittests_normalizing_flows.Test_NF_2d_gaussian.assertLessEqual", "numpy.mean", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_NF_chain_with_2d_gaussian", "(", "self", ")", ":", "\n", "        ", "mu", "=", "200", "\n", "std", "=", "23", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "\n", "model", "=", "NormalizingFlowEstimator", "(", "\"nf_estimator_2d_chain\"", ",", "1", ",", "1", ",", "flows_type", "=", "(", "'planar'", ",", "'radial'", ")", ",", "\n", "n_training_epochs", "=", "500", ",", "random_seed", "=", "22", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.Test_NF_2d_gaussian.test_NF_radial_with_2d_gaussian2": [[253, 267], ["unittests_normalizing_flows.Test_NF_2d_gaussian.get_samples", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "numpy.arange", "numpy.asarray", "cde.density_estimator.NormalizingFlowEstimator.pdf", "scipy.stats.norm.pdf", "unittests_normalizing_flows.Test_NF_2d_gaussian.assertLessEqual", "numpy.mean", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_NF_radial_with_2d_gaussian2", "(", "self", ")", ":", "\n", "        ", "mu", "=", "-", "5", "\n", "std", "=", "2.5", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "\n", "model", "=", "NormalizingFlowEstimator", "(", "\"nf_estimator_2d_radial_2\"", ",", "1", ",", "1", ",", "flows_type", "=", "(", "'radial'", ",", ")", ",", "\n", "n_training_epochs", "=", "500", ",", "random_seed", "=", "22", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.Test_NF_2d_gaussian.test_NF_chain_with_2d_gaussian2": [[268, 283], ["unittests_normalizing_flows.Test_NF_2d_gaussian.get_samples", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "numpy.arange", "numpy.asarray", "cde.density_estimator.NormalizingFlowEstimator.pdf", "scipy.stats.norm.pdf", "unittests_normalizing_flows.Test_NF_2d_gaussian.assertLessEqual", "numpy.mean", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_NF_chain_with_2d_gaussian2", "(", "self", ")", ":", "\n", "        ", "mu", "=", "-", "5", "\n", "std", "=", "2.5", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "\n", "model", "=", "NormalizingFlowEstimator", "(", "\"nf_estimator_2d_chain_2\"", ",", "1", ",", "1", ",", "flows_type", "=", "(", "'affine'", ",", "'planar'", ",", "'planar'", ")", ",", "\n", "n_training_epochs", "=", "1000", ",", "random_seed", "=", "22", ")", "\n", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.Test_NF_2d_gaussian.test_NF_chain2_with_2d_gaussian2": [[284, 298], ["unittests_normalizing_flows.Test_NF_2d_gaussian.get_samples", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "numpy.arange", "numpy.asarray", "cde.density_estimator.NormalizingFlowEstimator.pdf", "scipy.stats.norm.pdf", "unittests_normalizing_flows.Test_NF_2d_gaussian.assertLessEqual", "numpy.mean", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_NF_chain2_with_2d_gaussian2", "(", "self", ")", ":", "\n", "        ", "mu", "=", "-", "5", "\n", "std", "=", "2.5", "\n", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "mu", "=", "mu", ",", "std", "=", "std", ")", "\n", "\n", "model", "=", "NormalizingFlowEstimator", "(", "\"nf_estimator_2d_chain2_2\"", ",", "1", ",", "1", ",", "flows_type", "=", "(", "'radial'", ",", "'planar'", ",", "'radial'", ")", ",", "\n", "n_training_epochs", "=", "500", ",", "random_seed", "=", "22", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "mu", "-", "3", "*", "std", ",", "mu", "+", "3", "*", "std", ",", "6", "*", "std", "/", "20", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "mu", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "mu", ",", "scale", "=", "std", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestMultiModal.test_bi_modal_planar_chain": [[306, 326], ["tensorflow.Session", "tensorflow.contrib.distributions.Mixture", "tensorflow.distributions.Normal().sample", "tensorflow.contrib.distributions.Mixture.sample", "sess.run", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "cde.density_estimator.NormalizingFlowEstimator.pdf", "sess.run", "unittests_normalizing_flows.TestMultiModal.assertLessEqual", "tensorflow.contrib.distributions.Mixture.prob", "numpy.mean", "tensorflow.distributions.Categorical", "tensorflow.distributions.Normal", "numpy.abs", "tensorflow.distributions.Normal", "tensorflow.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["def", "test_bi_modal_planar_chain", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "bimix_gauss", "=", "tf", ".", "contrib", ".", "distributions", ".", "Mixture", "(", "\n", "cat", "=", "tf", ".", "distributions", ".", "Categorical", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ")", ",", "\n", "components", "=", "[", "\n", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "-", ".4", ",", "scale", "=", "0.4", ")", ",", "\n", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "+", ".4", ",", "scale", "=", "0.4", ")", ",", "\n", "]", ")", "\n", "x", "=", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "0.", ",", "scale", "=", "1.", ")", ".", "sample", "(", "[", "5000", "]", ")", "\n", "y", "=", "bimix_gauss", ".", "sample", "(", "[", "5000", "]", ")", "\n", "x", ",", "y", "=", "sess", ".", "run", "(", "[", "x", ",", "y", "]", ")", "\n", "\n", "model", "=", "NormalizingFlowEstimator", "(", "\"nf_estimator_bimodal_planar\"", ",", "1", ",", "1", ",", "\n", "flows_type", "=", "(", "'affine'", ",", "'planar'", ",", "'planar'", ",", "'planar'", ")", ",", "\n", "n_training_epochs", "=", "1000", ",", "random_seed", "=", "22", ")", "\n", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "sess", ".", "run", "(", "bimix_gauss", ".", "prob", "(", "y", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestMultiModal.test_bi_modal_mixed_chain": [[327, 347], ["tensorflow.Session", "tensorflow.contrib.distributions.Mixture", "tensorflow.distributions.Normal().sample", "tensorflow.contrib.distributions.Mixture.sample", "sess.run", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "cde.density_estimator.NormalizingFlowEstimator.pdf", "sess.run", "unittests_normalizing_flows.TestMultiModal.assertLessEqual", "tensorflow.contrib.distributions.Mixture.prob", "numpy.mean", "tensorflow.distributions.Categorical", "tensorflow.distributions.Normal", "numpy.abs", "tensorflow.distributions.Normal", "tensorflow.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "", "def", "test_bi_modal_mixed_chain", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "bimix_gauss", "=", "tf", ".", "contrib", ".", "distributions", ".", "Mixture", "(", "\n", "cat", "=", "tf", ".", "distributions", ".", "Categorical", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ")", ",", "\n", "components", "=", "[", "\n", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "-", ".5", ",", "scale", "=", "0.4", ")", ",", "\n", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "+", ".5", ",", "scale", "=", "0.4", ")", ",", "\n", "]", ")", "\n", "x", "=", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "0.", ",", "scale", "=", "1.", ")", ".", "sample", "(", "[", "5000", "]", ")", "\n", "y", "=", "bimix_gauss", ".", "sample", "(", "[", "5000", "]", ")", "\n", "x", ",", "y", "=", "sess", ".", "run", "(", "[", "x", ",", "y", "]", ")", "\n", "\n", "model", "=", "NormalizingFlowEstimator", "(", "\"nf_estimator_trimodal_chain\"", ",", "1", ",", "1", ",", "\n", "flows_type", "=", "(", "'affine'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ")", ",", "\n", "n_training_epochs", "=", "1000", ",", "random_seed", "=", "22", ")", "\n", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "sess", ".", "run", "(", "bimix_gauss", ".", "prob", "(", "y", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestMultiModal.test_tri_modal_radial_chain": [[348, 368], ["tensorflow.Session", "tensorflow.contrib.distributions.Mixture", "numpy.ones", "sess.run", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "cde.density_estimator.NormalizingFlowEstimator.pdf", "sess.run", "unittests_normalizing_flows.TestMultiModal.assertLessEqual", "tensorflow.contrib.distributions.Mixture.sample", "tensorflow.contrib.distributions.Mixture.prob", "numpy.mean", "tensorflow.distributions.Categorical", "numpy.abs", "tensorflow.distributions.Normal", "tensorflow.distributions.Normal", "tensorflow.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample"], ["", "", "def", "test_tri_modal_radial_chain", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "bimix_gauss", "=", "tf", ".", "contrib", ".", "distributions", ".", "Mixture", "(", "\n", "cat", "=", "tf", ".", "distributions", ".", "Categorical", "(", "probs", "=", "[", "0.3", ",", "0.4", ",", "0.3", "]", ")", ",", "\n", "components", "=", "[", "\n", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "-", "1.", ",", "scale", "=", "0.4", ")", ",", "\n", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "0.", ",", "scale", "=", "0.4", ")", ",", "\n", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "+", "1.", ",", "scale", "=", "0.4", ")", ",", "\n", "]", ")", "\n", "x", "=", "np", ".", "ones", "(", "5000", ")", "\n", "y", "=", "sess", ".", "run", "(", "bimix_gauss", ".", "sample", "(", "[", "5000", "]", ")", ")", "\n", "\n", "model", "=", "NormalizingFlowEstimator", "(", "\"nf_estimator_bimodal_radial\"", ",", "1", ",", "1", ",", "\n", "flows_type", "=", "(", "'radial'", ",", "'radial'", ",", "'radial'", ")", ",", "\n", "n_training_epochs", "=", "1000", ",", "random_seed", "=", "22", ")", "\n", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "sess", ".", "run", "(", "bimix_gauss", ".", "prob", "(", "y", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestLogProbability.test_NF_log_pdf": [[372, 384], ["numpy.random.normal", "numpy.random.normal", "tensorflow.Session", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "cde.density_estimator.NormalizingFlowEstimator.pdf", "cde.density_estimator.NormalizingFlowEstimator.log_pdf", "unittests_normalizing_flows.TestLogProbability.assertLessEqual", "numpy.random.normal", "numpy.random.normal", "numpy.mean", "numpy.abs", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.log_pdf"], ["    ", "def", "test_NF_log_pdf", "(", "self", ")", ":", "\n", "        ", "X", ",", "Y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1000", ",", "3", ")", ")", ",", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1000", ",", "3", ")", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "model", "=", "NormalizingFlowEstimator", "(", "\"nf_logprob\"", ",", "3", ",", "3", ",", "flows_type", "=", "(", "'affine'", ",", "'planar'", ")", ",", "\n", "n_training_epochs", "=", "10", ",", "random_seed", "=", "22", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "x", ",", "y", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1000", ",", "3", ")", ")", ",", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1000", ",", "3", ")", ")", "\n", "prob", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "log_prob", "=", "model", ".", "log_pdf", "(", "x", ",", "y", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "prob", "-", "np", ".", "exp", "(", "log_prob", ")", ")", ")", ",", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestRegularization.get_samples": [[387, 393], ["numpy.random.seed", "numpy.random.normal"], "methods", ["None"], ["    ", "def", "get_samples", "(", "self", ",", "std", "=", "1.0", ",", "mean", "=", "2", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "data", "=", "np", ".", "random", ".", "normal", "(", "[", "mean", ",", "mean", "]", ",", "std", ",", "size", "=", "(", "2000", ",", "2", ")", ")", "\n", "X", "=", "data", "[", ":", ",", "0", "]", "\n", "Y", "=", "data", "[", ":", ",", "1", "]", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestRegularization.test_data_normalization": [[394, 409], ["unittests_normalizing_flows.TestRegularization.get_samples", "tensorflow.Session", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "cde.density_estimator.NormalizingFlowEstimator.sess.run", "print", "float", "float", "unittests_normalizing_flows.TestRegularization.assertLessEqual", "unittests_normalizing_flows.TestRegularization.assertLessEqual", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "test_data_normalization", "(", "self", ")", ":", "\n", "        ", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "std", "=", "2", ",", "mean", "=", "20", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "model", "=", "NormalizingFlowEstimator", "(", "\"nf_data_normalization\"", ",", "1", ",", "1", ",", "flows_type", "=", "(", "'affine'", ",", "'radial'", ",", "'radial'", ")", ",", "\n", "x_noise_std", "=", "None", ",", "y_noise_std", "=", "None", ",", "data_normalization", "=", "True", ",", "\n", "n_training_epochs", "=", "100", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "# test if data statistics were properly assigned to tf graph", "\n", "x_mean", ",", "x_std", "=", "model", ".", "sess", ".", "run", "(", "[", "model", ".", "mean_x_sym", ",", "model", ".", "std_x_sym", "]", ")", "\n", "print", "(", "x_mean", ",", "x_std", ")", "\n", "mean_diff", "=", "float", "(", "np", ".", "abs", "(", "x_mean", "-", "20", ")", ")", "\n", "std_diff", "=", "float", "(", "np", ".", "abs", "(", "x_std", "-", "2", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "mean_diff", ",", "0.5", ")", "\n", "self", ".", "assertLessEqual", "(", "std_diff", ",", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestRegularization.test_bi_modal_radial_chain_w_gaussian_noise": [[410, 430], ["tensorflow.Session", "tensorflow.contrib.distributions.Mixture", "numpy.ones", "sess.run", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "cde.density_estimator.NormalizingFlowEstimator.pdf", "sess.run", "unittests_normalizing_flows.TestRegularization.assertLessEqual", "tensorflow.contrib.distributions.Mixture.sample", "tensorflow.contrib.distributions.Mixture.prob", "numpy.mean", "tensorflow.distributions.Categorical", "numpy.abs", "tensorflow.distributions.Normal", "tensorflow.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample"], ["", "", "def", "test_bi_modal_radial_chain_w_gaussian_noise", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "bimix_gauss", "=", "tf", ".", "contrib", ".", "distributions", ".", "Mixture", "(", "\n", "cat", "=", "tf", ".", "distributions", ".", "Categorical", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ")", ",", "\n", "components", "=", "[", "\n", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "-", "1.", ",", "scale", "=", "0.5", ")", ",", "\n", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "+", "1.", ",", "scale", "=", "0.5", ")", ",", "\n", "]", ")", "\n", "x", "=", "np", ".", "ones", "(", "5000", ")", "\n", "y", "=", "sess", ".", "run", "(", "bimix_gauss", ".", "sample", "(", "[", "5000", "]", ")", ")", "\n", "\n", "model", "=", "NormalizingFlowEstimator", "(", "\"nf_estimator_bimodal_radial_gaussian\"", ",", "1", ",", "1", ",", "\n", "flows_type", "=", "(", "'radial'", ",", "'radial'", ",", "'radial'", ")", ",", "\n", "data_normalization", "=", "True", ",", "x_noise_std", "=", "0.1", ",", "y_noise_std", "=", "0.1", ",", "\n", "n_training_epochs", "=", "1000", ",", "random_seed", "=", "22", ")", "\n", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "sess", ".", "run", "(", "bimix_gauss", ".", "prob", "(", "y", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestRegularization.test_weight_decay": [[431, 450], ["tensorflow.Session", "tensorflow.contrib.distributions.Mixture", "numpy.ones", "sess.run", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "cde.density_estimator.NormalizingFlowEstimator.pdf", "sess.run", "unittests_normalizing_flows.TestRegularization.assertLessEqual", "tensorflow.contrib.distributions.Mixture.sample", "tensorflow.contrib.distributions.Mixture.prob", "numpy.mean", "tensorflow.distributions.Categorical", "numpy.abs", "tensorflow.distributions.Normal", "tensorflow.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample"], ["", "", "def", "test_weight_decay", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "bimix_gauss", "=", "tf", ".", "contrib", ".", "distributions", ".", "Mixture", "(", "\n", "cat", "=", "tf", ".", "distributions", ".", "Categorical", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ")", ",", "\n", "components", "=", "[", "\n", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "-", "1.", ",", "scale", "=", "0.5", ")", ",", "\n", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "+", "1.", ",", "scale", "=", "0.5", ")", ",", "\n", "]", ")", "\n", "x", "=", "np", ".", "ones", "(", "5000", ")", "\n", "y", "=", "sess", ".", "run", "(", "bimix_gauss", ".", "sample", "(", "[", "5000", "]", ")", ")", "\n", "model", "=", "NormalizingFlowEstimator", "(", "\"nf_estimator_weight_decay\"", ",", "1", ",", "1", ",", "\n", "flows_type", "=", "(", "'affine'", ",", "'radial'", ",", "'radial'", ")", ",", "\n", "data_normalization", "=", "True", ",", "weight_decay", "=", "0.0001", ",", "n_training_epochs", "=", "1000", ",", "\n", "random_seed", "=", "22", ")", "\n", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "sess", ".", "run", "(", "bimix_gauss", ".", "prob", "(", "y", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestRegularization.test_dropout": [[451, 477], ["tensorflow.Session", "tensorflow.contrib.distributions.Mixture", "numpy.ones", "sess.run", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "cde.density_estimator.NormalizingFlowEstimator.fit", "cde.density_estimator.NormalizingFlowEstimator.pdf", "cde.density_estimator.NormalizingFlowEstimator.pdf", "sess.run", "unittests_normalizing_flows.TestRegularization.assertLessEqual", "unittests_normalizing_flows.TestRegularization.assertGreater", "tensorflow.contrib.distributions.Mixture.sample", "tensorflow.contrib.distributions.Mixture.prob", "numpy.mean", "numpy.mean", "tensorflow.distributions.Categorical", "numpy.abs", "numpy.abs", "tensorflow.distributions.Normal", "tensorflow.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample"], ["", "", "def", "test_dropout", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "bimix_gauss", "=", "tf", ".", "contrib", ".", "distributions", ".", "Mixture", "(", "\n", "cat", "=", "tf", ".", "distributions", ".", "Categorical", "(", "probs", "=", "[", "0.5", ",", "0.5", "]", ")", ",", "\n", "components", "=", "[", "\n", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "-", "1.", ",", "scale", "=", "0.5", ")", ",", "\n", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "+", "1.", ",", "scale", "=", "0.5", ")", ",", "\n", "]", ")", "\n", "x", "=", "np", ".", "ones", "(", "5000", ")", "\n", "y", "=", "sess", ".", "run", "(", "bimix_gauss", ".", "sample", "(", "[", "5000", "]", ")", ")", "\n", "\n", "dropout_model", "=", "NormalizingFlowEstimator", "(", "\"nf_dropout_reasonable\"", ",", "1", ",", "1", ",", "\n", "flows_type", "=", "(", "'affine'", ",", "'radial'", ",", "'radial'", ")", ",", "\n", "data_normalization", "=", "True", ",", "dropout", "=", "0.5", ",", "random_seed", "=", "22", ")", "\n", "full_dropout", "=", "NormalizingFlowEstimator", "(", "\"nf_dropout_full\"", ",", "1", ",", "1", ",", "\n", "flows_type", "=", "(", "'affine'", ",", "'radial'", ",", "'radial'", ")", ",", "\n", "data_normalization", "=", "True", ",", "dropout", "=", "0.85", ",", "random_seed", "=", "22", ")", "\n", "dropout_model", ".", "fit", "(", "x", ",", "y", ")", "\n", "full_dropout", ".", "fit", "(", "x", ",", "y", ")", "\n", "\n", "p_est", "=", "dropout_model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_est_trash", "=", "full_dropout", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "sess", ".", "run", "(", "bimix_gauss", ".", "prob", "(", "y", ")", ")", "\n", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.02", ")", "\n", "self", ".", "assertGreater", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est_trash", ")", ")", ",", "0.02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestSerialization.get_samples": [[480, 486], ["numpy.random.seed", "numpy.random.normal"], "methods", ["None"], ["    ", "def", "get_samples", "(", "self", ",", "std", "=", "1.0", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "data", "=", "np", ".", "random", ".", "normal", "(", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "std", ",", "size", "=", "(", "2000", ",", "4", ")", ")", "\n", "X", "=", "data", "[", ":", ",", "0", ":", "2", "]", "\n", "Y", "=", "data", "[", ":", ",", "2", ":", "4", "]", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestSerialization.test_pickle_unpickle_NF_estimator": [[487, 501], ["unittests_normalizing_flows.TestSerialization.get_samples", "tensorflow.reset_default_graph", "numpy.sum", "unittests_normalizing_flows.TestSerialization.assertAlmostEqual", "tensorflow.Session", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit", "cde.density_estimator.NormalizingFlowEstimator.pdf", "pickle.dumps", "tensorflow.Session", "pickle.loads", "pickle.loads.pdf", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "test_pickle_unpickle_NF_estimator", "(", "self", ")", ":", "\n", "        ", "X", ",", "Y", "=", "self", ".", "get_samples", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "model", "=", "NormalizingFlowEstimator", "(", "'nf_pickle'", ",", "2", ",", "2", ",", "(", "'affine'", ",", "'radial'", ",", "'radial'", ")", ",", "\n", "data_normalization", "=", "True", ",", "random_seed", "=", "22", ",", "n_training_epochs", "=", "10", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "pdf_before", "=", "model", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "dump_string", "=", "pickle", ".", "dumps", "(", "model", ")", "\n", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "model_loaded", "=", "pickle", ".", "loads", "(", "dump_string", ")", "\n", "pdf_after", "=", "model_loaded", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "", "diff", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "pdf_after", "-", "pdf_before", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "diff", ",", "0", ",", "places", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples": [[504, 510], ["numpy.random.seed", "numpy.random.normal"], "methods", ["None"], ["    ", "def", "get_samples", "(", "self", ",", "std", "=", "1.0", ",", "mean", "=", "2", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "data", "=", "np", ".", "random", ".", "normal", "(", "[", "mean", ",", "mean", "]", ",", "std", ",", "size", "=", "(", "2000", ",", "2", ")", ")", "\n", "X", "=", "data", "[", ":", ",", "0", "]", "\n", "Y", "=", "data", "[", ":", ",", "1", "]", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.test_NF_fit_by_crossval": [[511, 527], ["unittests_normalizing_flows.TestFitByCrossval.get_samples", "cde.density_estimator.NormalizingFlowEstimator", "cde.density_estimator.NormalizingFlowEstimator.fit_by_cv", "numpy.arange", "numpy.asarray", "cde.density_estimator.NormalizingFlowEstimator.pdf", "scipy.stats.norm.pdf", "unittests_normalizing_flows.TestFitByCrossval.assertEqual", "unittests_normalizing_flows.TestFitByCrossval.assertLessEqual", "numpy.mean", "cde.density_estimator.NormalizingFlowEstimator.get_params", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tests.unittests_normalizing_flows.TestFitByCrossval.get_samples", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.fit_by_cv", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_params"], ["", "def", "test_NF_fit_by_crossval", "(", "self", ")", ":", "\n", "        ", "X", ",", "Y", "=", "self", ".", "get_samples", "(", "std", "=", "1.", ",", "mean", "=", "-", "4", ")", "\n", "\n", "param_grid", "=", "{", "\n", "'n_training_epochs'", ":", "[", "0", ",", "500", "]", ",", "\n", "'data_normalization'", ":", "[", "False", "]", "\n", "}", "\n", "model", "=", "NormalizingFlowEstimator", "(", "'nf_crossval'", ",", "1", ",", "1", ")", "\n", "model", ".", "fit_by_cv", "(", "X", ",", "Y", ",", "param_grid", "=", "param_grid", ")", "\n", "\n", "y", "=", "np", ".", "arange", "(", "-", "1", ",", "5", ",", "0.5", ")", "\n", "x", "=", "np", ".", "asarray", "(", "[", "2", "for", "_", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "p_est", "=", "model", ".", "pdf", "(", "x", ",", "y", ")", "\n", "p_true", "=", "norm", ".", "pdf", "(", "y", ",", "loc", "=", "2", ",", "scale", "=", "1", ")", "\n", "self", ".", "assertEqual", "(", "model", ".", "get_params", "(", ")", "[", "\"n_training_epochs\"", "]", ",", "500", ")", "\n", "self", ".", "assertLessEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "p_true", "-", "p_est", ")", ")", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._mean_mc": [[30, 44], ["hasattr", "np.zeros", "range", "hasattr", "np.tile", "sample", "np.mean", "AssertionError", "x_cond[].reshape"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample"], ["def", "_mean_mc", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "if", "hasattr", "(", "self", ",", "'sample'", ")", ":", "\n", "      ", "sample", "=", "self", ".", "sample", "\n", "", "elif", "hasattr", "(", "self", ",", "'simulate_conditional'", ")", ":", "\n", "      ", "sample", "=", "self", ".", "simulate_conditional", "\n", "", "else", ":", "\n", "      ", "raise", "AssertionError", "(", "\"Requires sample or simulate_conditional method\"", ")", "\n", "\n", "", "means", "=", "np", ".", "zeros", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "x", "=", "np", ".", "tile", "(", "x_cond", "[", "i", "]", ".", "reshape", "(", "(", "1", ",", "x_cond", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", ",", "(", "n_samples", ",", "1", ")", ")", "\n", "_", ",", "samples", "=", "sample", "(", "x", ")", "\n", "means", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "samples", ",", "axis", "=", "0", ")", "\n", "", "return", "means", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._mean_pdf": [[45, 60], ["np.zeros", "range", "BaseConditionalDensity.ConditionalDensity._determine_integration_bounds", "cde.utils.integration.numeric_integation", "BaseConditionalDensity.ConditionalDensity._determine_mc_proposal_dist", "cde.utils.integration.mc_integration_student_t", "mean_fun", "np.squeeze", "mean_fun", "BaseConditionalDensity.ConditionalDensity._tiled_pdf", "BaseConditionalDensity.ConditionalDensity._tiled_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._determine_integration_bounds", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.numeric_integation", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._determine_mc_proposal_dist", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.mc_integration_student_t", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._tiled_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._tiled_pdf"], ["", "def", "_mean_pdf", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "means", "=", "np", ".", "zeros", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "mean_fun", "=", "lambda", "y", ":", "y", "\n", "if", "self", ".", "ndim_y", "==", "1", ":", "\n", "        ", "n_samples_int", ",", "lower", ",", "upper", "=", "self", ".", "_determine_integration_bounds", "(", ")", "\n", "func_to_integrate", "=", "lambda", "y", ":", "mean_fun", "(", "y", ")", "*", "np", ".", "squeeze", "(", "self", ".", "_tiled_pdf", "(", "y", ",", "x_cond", "[", "i", "]", ",", "n_samples_int", ")", ")", "\n", "integral", "=", "numeric_integation", "(", "func_to_integrate", ",", "n_samples_int", ",", "lower", ",", "upper", ")", "\n", "", "else", ":", "\n", "        ", "loc_proposal", ",", "scale_proposal", "=", "self", ".", "_determine_mc_proposal_dist", "(", ")", "\n", "func_to_integrate", "=", "lambda", "y", ":", "mean_fun", "(", "y", ")", "*", "self", ".", "_tiled_pdf", "(", "y", ",", "x_cond", "[", "i", "]", ",", "n_samples", ")", "\n", "integral", "=", "mc_integration_student_t", "(", "func_to_integrate", ",", "ndim", "=", "self", ".", "ndim_y", ",", "n_samples", "=", "n_samples", ",", "\n", "loc_proposal", "=", "loc_proposal", ",", "scale_proposal", "=", "scale_proposal", ")", "\n", "", "means", "[", "i", "]", "=", "integral", "\n", "", "return", "means", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._std_pdf": [[63, 82], ["hasattr", "hasattr", "BaseConditionalDensity.ConditionalDensity.mean_", "np.zeros", "range", "BaseConditionalDensity.ConditionalDensity.covariance", "np.sqrt", "np.squeeze", "BaseConditionalDensity.ConditionalDensity._determine_integration_bounds", "np.sqrt", "np.diagonal", "cde.utils.integration.numeric_integation", "np.squeeze", "BaseConditionalDensity.ConditionalDensity._tiled_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._determine_integration_bounds", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.numeric_integation", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._tiled_pdf"], ["def", "_std_pdf", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ",", "mean", "=", "None", ")", ":", "\n", "    ", "assert", "hasattr", "(", "self", ",", "\"mean_\"", ")", "\n", "assert", "hasattr", "(", "self", ",", "\"pdf\"", ")", "\n", "\n", "if", "mean", "is", "None", ":", "\n", "      ", "mean", "=", "self", ".", "mean_", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "\n", "", "if", "self", ".", "ndim_y", "==", "1", ":", "# compute with numerical integration", "\n", "      ", "stds", "=", "np", ".", "zeros", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "mu", "=", "np", ".", "squeeze", "(", "mean", "[", "i", "]", ")", "\n", "n_samples_int", ",", "lower", ",", "upper", "=", "self", ".", "_determine_integration_bounds", "(", ")", "\n", "func_to_integrate", "=", "lambda", "y", ":", "(", "y", "-", "mu", ")", "**", "2", "*", "np", ".", "squeeze", "(", "self", ".", "_tiled_pdf", "(", "y", ",", "x_cond", "[", "i", "]", ",", "n_samples_int", ")", ")", "\n", "stds", "[", "i", "]", "=", "np", ".", "sqrt", "(", "numeric_integation", "(", "func_to_integrate", ",", "n_samples_int", ",", "lower", ",", "upper", ")", ")", "\n", "", "", "else", ":", "# call covariance and return sqrt of diagonal", "\n", "      ", "covs", "=", "self", ".", "covariance", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "stds", "=", "np", ".", "sqrt", "(", "np", ".", "diagonal", "(", "covs", ",", "axis1", "=", "1", ",", "axis2", "=", "2", ")", ")", "\n", "\n", "", "return", "stds", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._std_mc": [[83, 97], ["hasattr", "np.zeros", "range", "hasattr", "np.tile", "sample", "np.std", "AssertionError", "x_cond[].reshape"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample"], ["", "def", "_std_mc", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "if", "hasattr", "(", "self", ",", "'sample'", ")", ":", "\n", "      ", "sample", "=", "self", ".", "sample", "\n", "", "elif", "hasattr", "(", "self", ",", "'simulate_conditional'", ")", ":", "\n", "      ", "sample", "=", "self", ".", "simulate_conditional", "\n", "", "else", ":", "\n", "      ", "raise", "AssertionError", "(", "\"Requires sample or simulate_conditional method\"", ")", "\n", "\n", "", "stds", "=", "np", ".", "zeros", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "x", "=", "np", ".", "tile", "(", "x_cond", "[", "i", "]", ".", "reshape", "(", "(", "1", ",", "x_cond", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", ",", "(", "n_samples", ",", "1", ")", ")", "\n", "_", ",", "samples", "=", "sample", "(", "x", ")", "\n", "stds", "[", "i", ",", ":", "]", "=", "np", ".", "std", "(", "samples", ",", "axis", "=", "0", ")", "\n", "", "return", "stds", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._covariance_pdf": [[100, 130], ["hasattr", "hasattr", "BaseConditionalDensity.ConditionalDensity._determine_mc_proposal_dist", "np.zeros", "range", "BaseConditionalDensity.ConditionalDensity.mean_", "np.tile", "cde.utils.integration.mc_integration_student_t", "cde.utils.integration.mc_integration_student_t.reshape", "x_cond[].reshape", "np.empty", "range", "np.tile", "np.reshape", "np.expand_dims", "np.outer", "BaseConditionalDensity.ConditionalDensity.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._determine_mc_proposal_dist", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.mc_integration_student_t", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["def", "_covariance_pdf", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ",", "mean", "=", "None", ")", ":", "\n", "    ", "assert", "hasattr", "(", "self", ",", "\"mean_\"", ")", "\n", "assert", "hasattr", "(", "self", ",", "\"pdf\"", ")", "\n", "assert", "mean", "is", "None", "or", "mean", ".", "shape", "==", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", "\n", "\n", "loc_proposal", ",", "scale_proposal", "=", "self", ".", "_determine_mc_proposal_dist", "(", ")", "\n", "\n", "if", "mean", "is", "None", ":", "\n", "      ", "mean", "=", "self", ".", "mean_", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "\n", "", "covs", "=", "np", ".", "zeros", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ",", "self", ".", "ndim_y", ")", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "x", "=", "x", "=", "np", ".", "tile", "(", "x_cond", "[", "i", "]", ".", "reshape", "(", "(", "1", ",", "x_cond", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", ",", "(", "n_samples", ",", "1", ")", ")", "\n", "\n", "def", "cov", "(", "y", ")", ":", "\n", "        ", "a", "=", "(", "y", "-", "mean", "[", "i", "]", ")", "\n", "\n", "# compute cov matrices c for sampled instances and weight them with the probability p from the pdf", "\n", "c", "=", "np", ".", "empty", "(", "(", "a", ".", "shape", "[", "0", "]", ",", "a", ".", "shape", "[", "1", "]", "**", "2", ")", ")", "\n", "for", "j", "in", "range", "(", "a", ".", "shape", "[", "0", "]", ")", ":", "\n", "          ", "c", "[", "j", ",", ":", "]", "=", "np", ".", "reshape", "(", "np", ".", "outer", "(", "a", "[", "j", "]", ",", "a", "[", "j", "]", ")", ",", "(", "a", ".", "shape", "[", "1", "]", "**", "2", ",", ")", ")", "\n", "\n", "", "p", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "self", ".", "pdf", "(", "x", ",", "y", ")", ",", "axis", "=", "1", ")", ",", "(", "1", ",", "self", ".", "ndim_y", "**", "2", ")", ")", "\n", "res", "=", "c", "*", "p", "\n", "return", "res", "\n", "\n", "", "integral", "=", "mc_integration_student_t", "(", "cov", ",", "ndim", "=", "self", ".", "ndim_y", ",", "n_samples", "=", "n_samples", ",", "\n", "loc_proposal", "=", "loc_proposal", ",", "scale_proposal", "=", "scale_proposal", ")", "\n", "covs", "[", "i", "]", "=", "integral", ".", "reshape", "(", "(", "self", ".", "ndim_y", ",", "self", ".", "ndim_y", ")", ")", "\n", "", "return", "covs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._covariance_mc": [[131, 147], ["hasattr", "np.zeros", "range", "hasattr", "np.tile", "sample", "np.cov", "AssertionError", "x_cond[].reshape"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample"], ["", "def", "_covariance_mc", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "if", "hasattr", "(", "self", ",", "'sample'", ")", ":", "\n", "      ", "sample", "=", "self", ".", "sample", "\n", "", "elif", "hasattr", "(", "self", ",", "'simulate_conditional'", ")", ":", "\n", "      ", "sample", "=", "self", ".", "simulate_conditional", "\n", "", "else", ":", "\n", "      ", "raise", "AssertionError", "(", "\"Requires sample or simulate_conditional method\"", ")", "\n", "\n", "", "covs", "=", "np", ".", "zeros", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ",", "self", ".", "ndim_y", ")", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "x", "=", "np", ".", "tile", "(", "x_cond", "[", "i", "]", ".", "reshape", "(", "(", "1", ",", "x_cond", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", ",", "(", "n_samples", ",", "1", ")", ")", "\n", "_", ",", "y_sample", "=", "sample", "(", "x", ")", "\n", "\n", "c", "=", "np", ".", "cov", "(", "y_sample", ",", "rowvar", "=", "False", ")", "\n", "covs", "[", "i", "]", "=", "c", "\n", "", "return", "covs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._skewness_pdf": [[150, 171], ["hasattr", "hasattr", "hasattr", "np.empty", "BaseConditionalDensity.ConditionalDensity._determine_integration_bounds", "range", "np.reshape", "np.reshape", "np.squeeze", "np.squeeze", "cde.utils.integration.numeric_integation", "BaseConditionalDensity.ConditionalDensity.mean_", "np.sqrt", "BaseConditionalDensity.ConditionalDensity.covariance", "np.squeeze", "BaseConditionalDensity.ConditionalDensity._tiled_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._determine_integration_bounds", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.numeric_integation", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._tiled_pdf"], ["def", "_skewness_pdf", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ",", "mean", "=", "None", ",", "std", "=", "None", ")", ":", "\n", "    ", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"this function does not support co-skewness - target variable y must be one-dimensional\"", "\n", "assert", "hasattr", "(", "self", ",", "\"mean_\"", ")", "\n", "assert", "hasattr", "(", "self", ",", "\"pdf\"", ")", "\n", "assert", "hasattr", "(", "self", ",", "\"covariance\"", ")", "\n", "\n", "if", "mean", "is", "None", ":", "\n", "      ", "mean", "=", "np", ".", "reshape", "(", "self", ".", "mean_", "(", "x_cond", ",", "n_samples", ")", ",", "(", "x_cond", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "", "if", "std", "is", "None", ":", "\n", "      ", "std", "=", "np", ".", "reshape", "(", "np", ".", "sqrt", "(", "self", ".", "covariance", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", ")", ",", "(", "x_cond", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "\n", "", "skewness", "=", "np", ".", "empty", "(", "shape", "=", "(", "x_cond", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "n_samples_int", ",", "lower", ",", "upper", "=", "self", ".", "_determine_integration_bounds", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "mu", "=", "np", ".", "squeeze", "(", "mean", "[", "i", "]", ")", "\n", "sigm", "=", "np", ".", "squeeze", "(", "std", "[", "i", "]", ")", "\n", "func_skew", "=", "lambda", "y", ":", "(", "(", "y", "-", "mu", ")", "/", "sigm", ")", "**", "3", "*", "np", ".", "squeeze", "(", "self", ".", "_tiled_pdf", "(", "y", ",", "x_cond", "[", "i", "]", ",", "n_samples_int", ")", ")", "\n", "skewness", "[", "i", "]", "=", "numeric_integation", "(", "func_skew", ",", "n_samples", "=", "n_samples_int", ")", "\n", "\n", "", "return", "skewness", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._skewness_mc": [[172, 187], ["hasattr", "np.empty", "range", "hasattr", "np.tile", "sample", "scipy.stats.skew", "scipy.stats.skew", "scipy.stats.skew", "scipy.stats.skew", "AssertionError", "x_cond[].reshape"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample"], ["", "def", "_skewness_mc", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "if", "hasattr", "(", "self", ",", "'sample'", ")", ":", "\n", "      ", "sample", "=", "self", ".", "sample", "\n", "", "elif", "hasattr", "(", "self", ",", "'simulate_conditional'", ")", ":", "\n", "      ", "sample", "=", "self", ".", "simulate_conditional", "\n", "", "else", ":", "\n", "      ", "raise", "AssertionError", "(", "\"Requires sample or simulate_conditional method\"", ")", "\n", "\n", "", "skewness", "=", "np", ".", "empty", "(", "shape", "=", "(", "x_cond", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "x", "=", "np", ".", "tile", "(", "x_cond", "[", "i", "]", ".", "reshape", "(", "(", "1", ",", "x_cond", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", ",", "(", "n_samples", ",", "1", ")", ")", "\n", "_", ",", "y_sample", "=", "sample", "(", "x", ")", "\n", "\n", "skewness", "[", "i", "]", "=", "scipy", ".", "stats", ".", "skew", "(", "y_sample", ")", "\n", "", "return", "skewness", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._kurtosis_pdf": [[190, 211], ["hasattr", "hasattr", "hasattr", "BaseConditionalDensity.ConditionalDensity._determine_integration_bounds", "np.empty", "range", "np.reshape", "np.reshape", "np.squeeze", "np.squeeze", "cde.utils.integration.numeric_integation", "BaseConditionalDensity.ConditionalDensity.mean_", "np.sqrt", "BaseConditionalDensity.ConditionalDensity.covariance", "np.squeeze", "BaseConditionalDensity.ConditionalDensity._tiled_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._determine_integration_bounds", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.numeric_integation", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._tiled_pdf"], ["def", "_kurtosis_pdf", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ",", "mean", "=", "None", ",", "std", "=", "None", ")", ":", "\n", "    ", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"this function does not support co-kurtosis - target variable y must be one-dimensional\"", "\n", "assert", "hasattr", "(", "self", ",", "\"mean_\"", ")", "\n", "assert", "hasattr", "(", "self", ",", "\"pdf\"", ")", "\n", "assert", "hasattr", "(", "self", ",", "\"covariance\"", ")", "\n", "\n", "if", "mean", "is", "None", ":", "\n", "      ", "mean", "=", "np", ".", "reshape", "(", "self", ".", "mean_", "(", "x_cond", ",", "n_samples", ")", ",", "(", "x_cond", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "", "if", "std", "is", "None", ":", "\n", "      ", "std", "=", "np", ".", "reshape", "(", "np", ".", "sqrt", "(", "self", ".", "covariance", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", ")", ",", "(", "x_cond", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "\n", "", "n_samples_int", ",", "lower", ",", "upper", "=", "self", ".", "_determine_integration_bounds", "(", ")", "\n", "kurtosis", "=", "np", ".", "empty", "(", "shape", "=", "(", "x_cond", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "mu", "=", "np", ".", "squeeze", "(", "mean", "[", "i", "]", ")", "\n", "sigm", "=", "np", ".", "squeeze", "(", "std", "[", "i", "]", ")", "\n", "func_skew", "=", "lambda", "y", ":", "(", "(", "y", "-", "mu", ")", "**", "4", "/", "sigm", "**", "4", ")", "*", "np", ".", "squeeze", "(", "self", ".", "_tiled_pdf", "(", "y", ",", "x_cond", "[", "i", "]", ",", "n_samples_int", ")", ")", "\n", "kurtosis", "[", "i", "]", "=", "numeric_integation", "(", "func_skew", ",", "n_samples", "=", "n_samples_int", ")", "\n", "\n", "", "return", "kurtosis", "-", "3", "# excess kurtosis", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._kurtosis_mc": [[212, 227], ["hasattr", "np.empty", "range", "hasattr", "np.tile", "sample", "scipy.stats.kurtosis", "scipy.stats.kurtosis", "scipy.stats.kurtosis", "scipy.stats.kurtosis", "AssertionError", "x_cond[].reshape"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.kurtosis", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.kurtosis", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.kurtosis", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.kurtosis"], ["", "def", "_kurtosis_mc", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "if", "hasattr", "(", "self", ",", "'sample'", ")", ":", "\n", "      ", "sample", "=", "self", ".", "sample", "\n", "", "elif", "hasattr", "(", "self", ",", "'simulate_conditional'", ")", ":", "\n", "      ", "sample", "=", "self", ".", "simulate_conditional", "\n", "", "else", ":", "\n", "      ", "raise", "AssertionError", "(", "\"Requires sample or simulate_conditional method\"", ")", "\n", "\n", "", "kurtosis", "=", "np", ".", "empty", "(", "shape", "=", "(", "x_cond", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "x", "=", "np", ".", "tile", "(", "x_cond", "[", "i", "]", ".", "reshape", "(", "(", "1", ",", "x_cond", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", ",", "(", "n_samples", ",", "1", ")", ")", "\n", "_", ",", "y_sample", "=", "sample", "(", "x", ")", "\n", "\n", "kurtosis", "[", "i", "]", "=", "scipy", ".", "stats", ".", "kurtosis", "(", "y_sample", ")", "\n", "", "return", "kurtosis", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._quantile_mc": [[230, 245], ["hasattr", "np.zeros", "np.tile", "range", "hasattr", "np.tile.reshape", "sample", "np.percentile", "AssertionError"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample"], ["def", "_quantile_mc", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "if", "hasattr", "(", "self", ",", "'sample'", ")", ":", "\n", "      ", "sample", "=", "self", ".", "sample", "\n", "", "elif", "hasattr", "(", "self", ",", "'simulate_conditional'", ")", ":", "\n", "      ", "sample", "=", "self", ".", "simulate_conditional", "\n", "", "else", ":", "\n", "      ", "raise", "AssertionError", "(", "\"Requires sample or simulate_conditional method\"", ")", "\n", "\n", "", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "VaRs", "=", "np", ".", "zeros", "(", "x_cond", ".", "shape", "[", "0", "]", ")", "\n", "x_cond", "=", "np", ".", "tile", "(", "x_cond", ".", "reshape", "(", "(", "1", ",", "x_cond", ".", "shape", "[", "0", "]", ",", "x_cond", ".", "shape", "[", "1", "]", ")", ")", ",", "(", "n_samples", ",", "1", ",", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "1", "]", ")", ":", "\n", "      ", "_", ",", "samples", "=", "sample", "(", "x_cond", "[", ":", ",", "i", ",", ":", "]", ")", "\n", "VaRs", "[", "i", "]", "=", "np", ".", "percentile", "(", "samples", ",", "alpha", "*", "100.0", ")", "\n", "", "return", "VaRs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._quantile_cdf": [[246, 252], ["cde.utils.optimizers.find_root_by_bounding", "np.ones", "BaseConditionalDensity.ConditionalDensity.cdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.optimizers.find_root_by_bounding", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "_quantile_cdf", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "eps", "=", "1e-8", ",", "init_bound", "=", "1e3", ")", ":", "\n", "# finds the alpha quantile of the distribution through root finding by bounding", "\n", "\n", "    ", "cdf_fun", "=", "lambda", "y", ":", "self", ".", "cdf", "(", "x_cond", ",", "y", ")", "-", "alpha", "\n", "init_bound", "=", "init_bound", "*", "np", ".", "ones", "(", "x_cond", ".", "shape", "[", "0", "]", ")", "\n", "return", "find_root_by_bounding", "(", "cdf_fun", ",", "left", "=", "-", "init_bound", ",", "right", "=", "init_bound", ",", "eps", "=", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._conditional_value_at_risk_mc_pdf": [[255, 271], ["BaseConditionalDensity.ConditionalDensity._determine_integration_bounds", "np.zeros", "range", "float", "cde.utils.integration.numeric_integation", "np.squeeze", "BaseConditionalDensity.ConditionalDensity._tiled_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._determine_integration_bounds", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.numeric_integation", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._tiled_pdf"], ["def", "_conditional_value_at_risk_mc_pdf", "(", "self", ",", "VaRs", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "assert", "VaRs", ".", "shape", "[", "0", "]", "==", "x_cond", ".", "shape", "[", "0", "]", ",", "\"same number of x_cond must match the number of values_at_risk provided\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "'this function only supports only ndim_y = 1'", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "n_samples_int", ",", "lower", ",", "_", "=", "self", ".", "_determine_integration_bounds", "(", ")", "\n", "\n", "CVaRs", "=", "np", ".", "zeros", "(", "x_cond", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "upper", "=", "float", "(", "VaRs", "[", "i", "]", ")", "\n", "func_to_integrate", "=", "lambda", "y", ":", "y", "*", "np", ".", "squeeze", "(", "self", ".", "_tiled_pdf", "(", "y", ",", "x_cond", "[", "i", "]", ",", "n_samples_int", ")", ")", "\n", "integral", "=", "numeric_integation", "(", "func_to_integrate", ",", "n_samples_int", ",", "lower", ",", "upper", ")", "\n", "CVaRs", "[", "i", "]", "=", "integral", "/", "alpha", "\n", "\n", "", "return", "CVaRs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._conditional_value_at_risk_sampling": [[272, 288], ["hasattr", "np.zeros", "np.tile", "range", "hasattr", "np.tile.reshape", "sample", "np.ma.masked_where", "np.mean", "AssertionError"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample"], ["", "def", "_conditional_value_at_risk_sampling", "(", "self", ",", "VaRs", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "if", "hasattr", "(", "self", ",", "'sample'", ")", ":", "\n", "      ", "sample", "=", "self", ".", "sample", "\n", "", "elif", "hasattr", "(", "self", ",", "'simulate_conditional'", ")", ":", "\n", "      ", "sample", "=", "self", ".", "simulate_conditional", "\n", "", "else", ":", "\n", "      ", "raise", "AssertionError", "(", "\"Requires sample or simulate_conditional method\"", ")", "\n", "\n", "", "CVaRs", "=", "np", ".", "zeros", "(", "x_cond", ".", "shape", "[", "0", "]", ")", "\n", "x_cond", "=", "np", ".", "tile", "(", "x_cond", ".", "reshape", "(", "(", "1", ",", "x_cond", ".", "shape", "[", "0", "]", ",", "x_cond", ".", "shape", "[", "1", "]", ")", ")", ",", "(", "n_samples", ",", "1", ",", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "1", "]", ")", ":", "\n", "      ", "_", ",", "samples", "=", "sample", "(", "x_cond", "[", ":", ",", "i", ",", ":", "]", ")", "\n", "shortfall_samples", "=", "np", ".", "ma", ".", "masked_where", "(", "VaRs", "[", "i", "]", "<", "samples", ",", "samples", ")", "\n", "CVaRs", "[", "i", "]", "=", "np", ".", "mean", "(", "shortfall_samples", ")", "\n", "\n", "", "return", "CVaRs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._handle_input_dimensionality": [[291, 316], ["np.expand_dims", "np.expand_dims"], "methods", ["None"], ["def", "_handle_input_dimensionality", "(", "self", ",", "X", ",", "Y", "=", "None", ",", "fitting", "=", "False", ")", ":", "\n", "# assert that both X an Y are 2D arrays with shape (n_samples, n_dim)", "\n", "\n", "    ", "if", "X", ".", "ndim", "==", "1", ":", "\n", "      ", "X", "=", "np", ".", "expand_dims", "(", "X", ",", "axis", "=", "1", ")", "\n", "\n", "", "if", "Y", "is", "not", "None", ":", "\n", "      ", "if", "Y", ".", "ndim", "==", "1", ":", "\n", "        ", "Y", "=", "np", ".", "expand_dims", "(", "Y", ",", "axis", "=", "1", ")", "\n", "\n", "", "assert", "X", ".", "shape", "[", "0", "]", "==", "Y", ".", "shape", "[", "0", "]", ",", "\"X and Y must have the same length along axis 0\"", "\n", "assert", "X", ".", "ndim", "==", "Y", ".", "ndim", "==", "2", ",", "\"X and Y must be matrices\"", "\n", "\n", "", "if", "fitting", ":", "# store n_dim of training data", "\n", "      ", "self", ".", "ndim_y", ",", "self", ".", "ndim_x", "=", "Y", ".", "shape", "[", "1", "]", ",", "X", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "      ", "assert", "X", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_x", ",", "\"X must have shape (?, %i) but provided X has shape %s\"", "%", "(", "self", ".", "ndim_x", ",", "X", ".", "shape", ")", "\n", "if", "Y", "is", "not", "None", ":", "\n", "        ", "assert", "Y", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_y", ",", "\"Y must have shape (?, %i) but provided Y has shape %s\"", "%", "(", "\n", "self", ".", "ndim_y", ",", "Y", ".", "shape", ")", "\n", "\n", "", "", "if", "Y", "is", "None", ":", "\n", "      ", "return", "X", "\n", "", "else", ":", "\n", "      ", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity.plot2d": [[317, 369], ["matplotlib.figure", "matplotlib.figure", "range", "matplotlib.legend", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.is_interactive", "matplotlib.is_interactive", "matplotlib.ioff", "matplotlib.ioff", "matplotlib.use", "matplotlib.use", "len", "np.linspace", "np.array", "labels.append", "matplotlib.plot", "matplotlib.plot", "matplotlib.show", "matplotlib.show", "matplotlib.figure.tight_layout", "matplotlib.figure.canvas.draw", "np.fromstring", "numpy_img.reshape.reshape.reshape", "BaseConditionalDensity.ConditionalDensity.pdf", "matplotlib.figure.canvas.tostring_rgb", "BaseConditionalDensity.ConditionalDensity.cdf", "str", "range", "BaseConditionalDensity.ConditionalDensity.joint_pdf", "matplotlib.figure.canvas.get_width_height"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.plot", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.plot", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.JumpDiffusionModel.JumpDiffusionModel.joint_pdf"], ["", "", "def", "plot2d", "(", "self", ",", "x_cond", "=", "[", "0", ",", "1", ",", "2", "]", ",", "ylim", "=", "(", "-", "8", ",", "8", ")", ",", "resolution", "=", "100", ",", "mode", "=", "'pdf'", ",", "show", "=", "True", ",", "prefix", "=", "''", ",", "numpyfig", "=", "False", ")", ":", "\n", "    ", "\"\"\" Generates a 3d surface plot of the fitted conditional distribution if x and y are 1-dimensional each\n\n        Args:\n          xlim: 2-tuple specifying the x axis limits\n          ylim: 2-tuple specifying the y axis limits\n          resolution: integer specifying the resolution of plot\n        \"\"\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Can only plot two dimensional distributions\"", "\n", "# prepare mesh", "\n", "\n", "# turn off interactive mode is show is set to False", "\n", "if", "show", "==", "False", "and", "mpl", ".", "is_interactive", "(", ")", ":", "\n", "      ", "plt", ".", "ioff", "(", ")", "\n", "mpl", ".", "use", "(", "'Agg'", ")", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "300", ")", "\n", "labels", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "x_cond", ")", ")", ":", "\n", "      ", "Y", "=", "np", ".", "linspace", "(", "ylim", "[", "0", "]", ",", "ylim", "[", "1", "]", ",", "num", "=", "resolution", ")", "\n", "X", "=", "np", ".", "array", "(", "[", "x_cond", "[", "i", "]", "for", "_", "in", "range", "(", "resolution", ")", "]", ")", "\n", "# calculate values of distribution", "\n", "\n", "if", "mode", "==", "\"pdf\"", ":", "\n", "        ", "Z", "=", "self", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "", "elif", "mode", "==", "\"cdf\"", ":", "\n", "        ", "Z", "=", "self", ".", "cdf", "(", "X", ",", "Y", ")", "\n", "", "elif", "mode", "==", "\"joint_pdf\"", ":", "\n", "        ", "Z", "=", "self", ".", "joint_pdf", "(", "X", ",", "Y", ")", "\n", "\n", "\n", "", "label", "=", "\"x=\"", "+", "str", "(", "x_cond", "[", "i", "]", ")", "if", "self", ".", "ndim_x", ">", "1", "else", "'x=%.2f'", "%", "x_cond", "[", "i", "]", "\n", "labels", ".", "append", "(", "label", ")", "\n", "\n", "plt_out", "=", "plt", ".", "plot", "(", "Y", ",", "Z", ",", "label", "=", "label", ")", "\n", "\n", "", "plt", ".", "legend", "(", "[", "prefix", "+", "label", "for", "label", "in", "labels", "]", ",", "loc", "=", "'upper right'", ")", "\n", "\n", "plt", ".", "xlabel", "(", "\"x\"", ")", "\n", "plt", ".", "ylabel", "(", "\"y\"", ")", "\n", "if", "show", ":", "\n", "      ", "plt", ".", "show", "(", ")", "\n", "\n", "", "if", "numpyfig", ":", "\n", "      ", "fig", ".", "tight_layout", "(", "pad", "=", "0", ")", "\n", "fig", ".", "canvas", ".", "draw", "(", ")", "\n", "numpy_img", "=", "np", ".", "fromstring", "(", "fig", ".", "canvas", ".", "tostring_rgb", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "numpy_img", "=", "numpy_img", ".", "reshape", "(", "fig", ".", "canvas", ".", "get_width_height", "(", ")", "[", ":", ":", "-", "1", "]", "+", "(", "3", ",", ")", ")", "\n", "return", "numpy_img", "\n", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity.plot3d": [[370, 412], ["np.linspace", "np.linspace", "np.meshgrid", "BaseConditionalDensity.ConditionalDensity.pdf", "matplotlib.figure", "matplotlib.figure", "matplotlib.figure.gca", "plt.figure.gca.plot_surface", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.is_interactive", "matplotlib.is_interactive", "matplotlib.ioff", "matplotlib.ioff", "matplotlib.use", "matplotlib.use", "X.flatten", "Y.flatten", "X.reshape", "Y.reshape", "BaseConditionalDensity.ConditionalDensity.reshape", "matplotlib.show", "matplotlib.show", "matplotlib.figure.tight_layout", "matplotlib.figure.canvas.draw", "np.fromstring", "numpy_img.reshape.reshape.reshape", "matplotlib.figure.canvas.tostring_rgb", "matplotlib.figure.canvas.get_width_height"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "plot3d", "(", "self", ",", "xlim", "=", "(", "-", "5", ",", "5", ")", ",", "ylim", "=", "(", "-", "8", ",", "8", ")", ",", "resolution", "=", "100", ",", "show", "=", "False", ",", "numpyfig", "=", "False", ")", ":", "\n", "    ", "\"\"\" Generates a 3d surface plot of the fitted conditional distribution if x and y are 1-dimensional each\n\n    Args:\n      xlim: 2-tuple specifying the x axis limits\n      ylim: 2-tuple specifying the y axis limits\n      resolution: integer specifying the resolution of plot\n    \"\"\"", "\n", "assert", "self", ".", "ndim_x", "+", "self", ".", "ndim_y", "==", "2", ",", "\"Can only plot two dimensional distributions\"", "\n", "\n", "if", "show", "==", "False", "and", "mpl", ".", "is_interactive", "(", ")", ":", "\n", "      ", "plt", ".", "ioff", "(", ")", "\n", "mpl", ".", "use", "(", "'Agg'", ")", "\n", "\n", "# prepare mesh", "\n", "", "linspace_x", "=", "np", ".", "linspace", "(", "xlim", "[", "0", "]", ",", "xlim", "[", "1", "]", ",", "num", "=", "resolution", ")", "\n", "linspace_y", "=", "np", ".", "linspace", "(", "ylim", "[", "0", "]", ",", "ylim", "[", "1", "]", ",", "num", "=", "resolution", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "linspace_x", ",", "linspace_y", ")", "\n", "X", ",", "Y", "=", "X", ".", "flatten", "(", ")", ",", "Y", ".", "flatten", "(", ")", "\n", "\n", "# calculate values of distribution", "\n", "Z", "=", "self", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "\n", "X", ",", "Y", ",", "Z", "=", "X", ".", "reshape", "(", "[", "resolution", ",", "resolution", "]", ")", ",", "Y", ".", "reshape", "(", "[", "resolution", ",", "resolution", "]", ")", ",", "Z", ".", "reshape", "(", "\n", "[", "resolution", ",", "resolution", "]", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "300", ")", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "'3d'", ")", "\n", "surf", "=", "ax", ".", "plot_surface", "(", "X", ",", "Y", ",", "Z", ",", "cmap", "=", "cm", ".", "coolwarm", ",", "rcount", "=", "resolution", ",", "ccount", "=", "resolution", ",", "\n", "linewidth", "=", "100", ",", "antialiased", "=", "True", ")", "\n", "plt", ".", "xlabel", "(", "\"x\"", ")", "\n", "plt", ".", "ylabel", "(", "\"y\"", ")", "\n", "if", "show", ":", "\n", "      ", "plt", ".", "show", "(", ")", "\n", "\n", "", "if", "numpyfig", ":", "\n", "      ", "fig", ".", "tight_layout", "(", "pad", "=", "0", ")", "\n", "fig", ".", "canvas", ".", "draw", "(", ")", "\n", "numpy_img", "=", "np", ".", "fromstring", "(", "fig", ".", "canvas", ".", "tostring_rgb", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "numpy_img", "=", "numpy_img", ".", "reshape", "(", "fig", ".", "canvas", ".", "get_width_height", "(", ")", "[", ":", ":", "-", "1", "]", "+", "(", "3", ",", ")", ")", "\n", "return", "numpy_img", "\n", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._determine_integration_bounds": [[413, 421], ["hasattr", "hasattr"], "methods", ["None"], ["", "def", "_determine_integration_bounds", "(", "self", ")", ":", "\n", "    ", "if", "hasattr", "(", "self", ",", "'y_std'", ")", "and", "hasattr", "(", "self", ",", "'y_mean'", ")", ":", "\n", "      ", "lower", "=", "self", ".", "y_mean", "-", "10", "*", "self", ".", "y_std", "\n", "upper", "=", "self", ".", "y_mean", "+", "10", "*", "self", ".", "y_std", "\n", "\n", "return", "N_SAMPLES_INT_TIGHT_BOUNDS", ",", "lower", ",", "upper", "\n", "", "else", ":", "\n", "      ", "return", "N_SAMPLES_INT", ",", "LOWER_BOUND", ",", "UPPER_BOUND", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._determine_mc_proposal_dist": [[422, 429], ["hasattr", "hasattr", "np.ones", "np.ones"], "methods", ["None"], ["", "", "def", "_determine_mc_proposal_dist", "(", "self", ")", ":", "\n", "    ", "if", "hasattr", "(", "self", ",", "'y_std'", ")", "and", "hasattr", "(", "self", ",", "'y_mean'", ")", ":", "\n", "      ", "mu_proposal", "=", "self", ".", "y_mean", "\n", "std_proposal", "=", "1", "*", "self", ".", "y_std", "\n", "return", "mu_proposal", ",", "std_proposal", "\n", "", "else", ":", "\n", "      ", "return", "np", ".", "ones", "(", "self", ".", "ndim_y", ")", "*", "LOC_PROPOSAL", ",", "np", ".", "ones", "(", "self", ".", "ndim_y", ")", "*", "SCALE_PROPOSAL", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._tiled_pdf": [[430, 433], ["np.tile", "np.tile", "x_cond.reshape", "np.expand_dims", "BaseConditionalDensity.ConditionalDensity.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "", "def", "_tiled_pdf", "(", "self", ",", "Y", ",", "x_cond", ",", "n_samples", ")", ":", "\n", "    ", "x", "=", "np", ".", "tile", "(", "x_cond", ".", "reshape", "(", "(", "1", ",", "x_cond", ".", "shape", "[", "0", "]", ")", ")", ",", "(", "n_samples", ",", "1", ")", ")", "\n", "return", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "self", ".", "pdf", "(", "x", ",", "Y", ")", ",", "axis", "=", "1", ")", ",", "(", "1", ",", "self", ".", "ndim_y", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.store_dataframe": [[7, 12], ["io.get_full_path", "dataframe.to_pickle", "print"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.get_full_path"], ["def", "store_dataframe", "(", "dataframe", ",", "output_dir", ",", "file_name", "=", "None", ")", ":", "\n", "  ", "suffix", "=", "\".pickle\"", "\n", "full_path", "=", "get_full_path", "(", "output_dir", "=", "output_dir", ",", "suffix", "=", "suffix", ",", "file_name", "=", "file_name", ")", "\n", "dataframe", ".", "to_pickle", "(", "full_path", ")", "\n", "print", "(", "\"Dumped dataframe pickle to\"", ",", "full_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.store_csv": [[14, 20], ["io.get_full_path", "dataframe.to_csv", "print"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.get_full_path"], ["", "def", "store_csv", "(", "dataframe", ",", "output_dir", ",", "file_name", "=", "None", ")", ":", "\n", "  ", "suffix", "=", "\".csv\"", "\n", "full_path", "=", "get_full_path", "(", "output_dir", "=", "output_dir", ",", "suffix", "=", "suffix", ",", "file_name", "=", "file_name", ")", "\n", "\n", "dataframe", ".", "to_csv", "(", "full_path", ",", "sep", "=", "';'", ",", "header", "=", "True", ")", "\n", "print", "(", "\"Dumped dataframe csv to\"", ",", "full_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.store_objects": [[22, 29], ["io.get_full_path", "print", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.get_full_path"], ["", "def", "store_objects", "(", "objs", ",", "output_dir", ",", "file_name", "=", "None", ")", ":", "\n", "  ", "suffix", "=", "\".pickle\"", "\n", "full_path", "=", "get_full_path", "(", "output_dir", "=", "output_dir", ",", "suffix", "=", "suffix", ",", "file_name", "=", "file_name", ")", "\n", "\n", "with", "open", "(", "full_path", ",", "'wb'", ")", "as", "output_file", ":", "\n", "    ", "pickle", ".", "dump", "(", "objs", ",", "output_file", ")", "\n", "", "print", "(", "\"Dumped pickle to\"", ",", "full_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.dump_as_pickle": [[31, 40], ["pickle.dump", "print", "print", "print", "str", "os.path.abspath"], "function", ["None"], ["", "def", "dump_as_pickle", "(", "file_handle", ",", "obj", ",", "verbose", "=", "False", ")", ":", "\n", "  ", "try", ":", "\n", "    ", "pickle", ".", "dump", "(", "obj", "=", "obj", ",", "file", "=", "file_handle", ")", "\n", "if", "verbose", ":", "\n", "      ", "print", "(", "\"successfully dumped pickle file to {}\"", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "file_handle", ".", "name", ")", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "    ", "print", "(", "\"dumping pickle object not successful\"", ")", "\n", "print", "(", "str", "(", "e", ")", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.append_result_to_csv": [[42, 54], ["result.to_csv", "result.to_csv", "print", "print", "os.stat", "str"], "function", ["None"], ["", "def", "append_result_to_csv", "(", "file_handle", ",", "result", ")", ":", "\n", "  ", "if", "file_handle", ".", "closed", ":", "\n", "    ", "return", "False", "\n", "", "try", ":", "\n", "    ", "if", "os", ".", "stat", "(", "file_handle", ".", "name", ")", ".", "st_size", "==", "0", ":", "# checks if csv file is empty", "\n", "      ", "result", ".", "to_csv", "(", "file_handle", ".", "name", ",", "sep", "=", "';'", ",", "header", "=", "True", ",", "mode", "=", "'a'", ",", "index", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "result", ".", "to_csv", "(", "file_handle", ".", "name", ",", "sep", "=", "';'", ",", "header", "=", "False", ",", "mode", "=", "'a'", ",", "index", "=", "False", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "    ", "print", "(", "\"appending to csv not successful\"", ")", "\n", "print", "(", "str", "(", "e", ")", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.get_full_path": [[55, 63], ["os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "os.path.abspath", "str", "str", "os.path.join", "datetime.datetime.now().strftime", "str", "os.getcwd", "str", "datetime.datetime.now", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_full_path", "(", "output_dir", ",", "suffix", "=", "\".pickle\"", ",", "file_name", "=", "None", ")", ":", "\n", "  ", "assert", "os", ".", "path", ".", "exists", "(", "output_dir", ")", "or", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "output_dir", ")", ")", ")", ",", "\"invalid path to output directory\"", "\n", "if", "file_name", "is", "None", ":", "\n", "    ", "file_name", "=", "str", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m-%d-%y_%H-%M-%S\"", ")", ")", "+", "str", "(", "suffix", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "file_name", ")", "\n", "", "else", ":", "\n", "    ", "full_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "file_name", "+", "str", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m-%d-%y_%H-%M-%S\"", ")", ")", "+", "str", "(", "suffix", ")", ")", "\n", "", "return", "full_path", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.load_time_series_csv": [[65, 113], ["os.path.exists", "pandas.read_csv", "list", "time_series.set_index.sort_index", "time_series.set_index.set_index", "pandas.to_datetime"], "function", ["None"], ["", "def", "load_time_series_csv", "(", "file_path", ",", "delimiter", "=", "','", ",", "time_format", "=", "None", ",", "time_columns", "=", "None", ")", ":", "\n", "  ", "\"\"\" Loads a .csv time series file (e.g. EuroStoxx50) as a pandas dataframe and applies some basic formatting.\n  The basic formatting includes:\n  a) if no time column is available in the .csv, calling this function sorts the data according to the first column\n  b) if a time column is available (i.e. some column containing the string 'time'), the function tries to re-arrange the column into an\n  expected format, sets it as an index and sorts it according to the date stamps\n\n\n  Args:\n    file_path: an absolute or relative path to the .csv file as str\n    delimiter: the column separator used in the .csv file\n    time_format: optional but if set (must be str), the function tries to re-arrange the date column into a deviating format\n    time_columns: optional list of strings indicating the names of the time columns within the csv file\n\n  Returns:\n    a pandas dataframe containing the information from the .csv file. If a time or date colum is available, the df contains the date as\n    index and is sorted according to this column.\n  \"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "file_path", ")", ",", "\"invalid path to output directory\"", "\n", "time_series", "=", "pd", ".", "read_csv", "(", "file_path", ",", "delimiter", "=", "delimiter", ")", "\n", "\n", "if", "time_format", "is", "None", ":", "\n", "    ", "POSSIBLE_TIME_FORMATS", "=", "[", "'%Y-%m-%d %H:%M:%S'", ",", "'%d-%m-%y %H:%M:%S'", ",", "\"%Y%m%d\"", "]", "\n", "", "else", ":", "\n", "    ", "POSSIBLE_TIME_FORMATS", "=", "[", "time_format", "]", "\n", "\n", "", "columns", "=", "list", "(", "time_series", ".", "columns", ".", "values", ")", "\n", "if", "time_columns", "is", "None", ":", "\n", "    ", "TIME_COLUMNS", "=", "[", "'time'", ",", "'date'", "]", "\n", "", "else", ":", "\n", "    ", "TIME_COLUMNS", "=", "time_columns", "\n", "#time_col = [s for s in columns if \"time\" in s]", "\n", "", "time_col", "=", "[", "s", "for", "s", "in", "columns", "for", "t", "in", "TIME_COLUMNS", "if", "t", "in", "s", "]", "\n", "\n", "\n", "if", "time_col", ":", "\n", "    ", "time_col", "=", "time_col", "[", "0", "]", "# take first occurrence", "\n", "for", "format", "in", "POSSIBLE_TIME_FORMATS", ":", "\n", "      ", "try", ":", "\n", "        ", "time_series", "[", "time_col", "]", "=", "pd", ".", "to_datetime", "(", "time_series", "[", "time_col", "]", ",", "format", "=", "format", ")", "# try to get the date", "\n", "break", "# if correct format, don't test any other formats", "\n", "", "except", "ValueError", ":", "\n", "        ", "pass", "# if incorrect format, keep trying other formats", "\n", "\n", "", "", "time_series", "=", "time_series", ".", "set_index", "(", "time_col", ")", "\n", "\n", "", "time_series", "=", "time_series", ".", "sort_index", "(", ")", "\n", "return", "time_series", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.center_point_select.sample_center_points": [[7, 96], ["numpy.random.RandomState", "numpy.expand_dims", "min", "sklearn.metrics.pairwise.cosine_distances", "range", "numpy.delete", "numpy.concatenate", "numpy.argsort", "selected_indices.append", "sklearn.metrics.pairwise.euclidean_distances", "range", "numpy.linalg.norm", "numpy.ix_", "numpy.argsort", "numpy.ix_", "numpy.ix_", "np.random.RandomState.choice", "selected_indices.append", "sklearn.cluster.KMeans", "sklearn.cluster.AgglomerativeClustering.fit", "numpy.min", "range", "numpy.argsort", "numpy.ix_", "sklearn.cluster.AgglomerativeClustering", "sklearn.cluster.AgglomerativeClustering.fit", "pandas.Series", "pandas.DataFrame", "pandas.concat", "ValueError", "np.delete.mean", "numpy.min", "[].mean", "numpy.ix_", "range", "numpy.ix_", "pd.concat.groupby", "range", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit"], ["def", "sample_center_points", "(", "Y", ",", "method", "=", "'all'", ",", "k", "=", "100", ",", "keep_edges", "=", "False", ",", "parallelize", "=", "False", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\" function to define kernel centers with various downsampling alternatives\n\n    Args:\n      Y: numpy array from which kernel centers shall be selected - shape (n_samples,) or (n_samples, n_dim)\n      method: kernel center selection method - choices: [all, random, distance, k_means, agglomerative]\n      k: number of centers to be returned (not relevant for 'all' method)\n      random_state: numpy.RandomState object\n\n    Returns: selected center points - numpy array of shape (k, n_dim). In case method is 'all' k is equal to n_samples\n    \"\"\"", "\n", "assert", "k", "<=", "Y", ".", "shape", "[", "0", "]", ",", "\"k must not exceed the number of samples in Y\"", "\n", "\n", "if", "random_state", "is", "None", ":", "\n", "        ", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", ")", "\n", "\n", "", "n_jobs", "=", "1", "\n", "if", "parallelize", ":", "\n", "        ", "n_jobs", "=", "-", "2", "# use all cpu's but one", "\n", "\n", "# make sure Y is 2d array of shape (", "\n", "", "if", "Y", ".", "ndim", "==", "1", ":", "\n", "        ", "Y", "=", "np", ".", "expand_dims", "(", "Y", ",", "axis", "=", "1", ")", "\n", "", "assert", "Y", ".", "ndim", "==", "2", "\n", "\n", "# keep all points as kernel centers", "\n", "if", "method", "==", "'all'", ":", "\n", "        ", "return", "Y", "\n", "\n", "# retain outer points to ensure expressiveness at the target borders", "\n", "", "if", "keep_edges", ":", "\n", "        ", "ndim_y", "=", "Y", ".", "shape", "[", "1", "]", "\n", "n_edge_points", "=", "min", "(", "2", "*", "ndim_y", ",", "k", "//", "2", ")", "\n", "\n", "# select 2*n_edge_points that are the farthest away from mean", "\n", "fathest_points_idx", "=", "np", ".", "argsort", "(", "np", ".", "linalg", ".", "norm", "(", "Y", "-", "Y", ".", "mean", "(", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", ")", "[", "-", "2", "*", "n_edge_points", ":", "]", "\n", "Y_farthest", "=", "Y", "[", "np", ".", "ix_", "(", "fathest_points_idx", ")", "]", "\n", "\n", "# choose points among Y farthest so that pairwise cosine similarity maximized", "\n", "dists", "=", "cosine_distances", "(", "Y_farthest", ")", "\n", "selected_indices", "=", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "1", ",", "n_edge_points", ")", ":", "\n", "            ", "idx_greatest_distance", "=", "np", ".", "argsort", "(", "np", ".", "min", "(", "dists", "[", "np", ".", "ix_", "(", "range", "(", "Y_farthest", ".", "shape", "[", "0", "]", ")", ",", "selected_indices", ")", "]", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "[", "-", "1", "]", "\n", "selected_indices", ".", "append", "(", "idx_greatest_distance", ")", "\n", "", "centers_at_edges", "=", "Y_farthest", "[", "np", ".", "ix_", "(", "selected_indices", ")", "]", "\n", "\n", "# remove selected centers from Y", "\n", "indices_to_remove", "=", "fathest_points_idx", "[", "np", ".", "ix_", "(", "selected_indices", ")", "]", "\n", "Y", "=", "np", ".", "delete", "(", "Y", ",", "indices_to_remove", ",", "axis", "=", "0", ")", "\n", "\n", "# adjust k such that the final output has size k", "\n", "k", "-=", "n_edge_points", "\n", "\n", "", "if", "method", "==", "'random'", ":", "\n", "        ", "cluster_centers", "=", "Y", "[", "random_state", ".", "choice", "(", "range", "(", "Y", ".", "shape", "[", "0", "]", ")", ",", "k", ",", "replace", "=", "False", ")", "]", "\n", "\n", "# iteratively remove part of pairs that are closest together until everything is at least 'd' apart", "\n", "", "elif", "method", "==", "'distance'", ":", "\n", "        ", "dists", "=", "euclidean_distances", "(", "Y", ")", "\n", "selected_indices", "=", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "1", ",", "k", ")", ":", "\n", "            ", "idx_greatest_distance", "=", "np", ".", "argsort", "(", "np", ".", "min", "(", "dists", "[", "np", ".", "ix_", "(", "range", "(", "Y", ".", "shape", "[", "0", "]", ")", ",", "selected_indices", ")", "]", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "[", "-", "1", "]", "\n", "selected_indices", ".", "append", "(", "idx_greatest_distance", ")", "\n", "", "cluster_centers", "=", "Y", "[", "np", ".", "ix_", "(", "selected_indices", ")", "]", "\n", "\n", "\n", "# use 1-D k-means clustering", "\n", "", "elif", "method", "==", "'k_means'", ":", "\n", "        ", "model", "=", "KMeans", "(", "n_clusters", "=", "k", ",", "n_jobs", "=", "n_jobs", ",", "random_state", "=", "random_state", ")", "\n", "model", ".", "fit", "(", "Y", ")", "\n", "cluster_centers", "=", "model", ".", "cluster_centers_", "\n", "\n", "# use agglomerative clustering", "\n", "", "elif", "method", "==", "'agglomerative'", ":", "\n", "        ", "model", "=", "AgglomerativeClustering", "(", "n_clusters", "=", "k", ",", "linkage", "=", "'complete'", ")", "\n", "model", ".", "fit", "(", "Y", ")", "\n", "labels", "=", "pd", ".", "Series", "(", "model", ".", "labels_", ",", "name", "=", "'label'", ")", "\n", "y_s", "=", "pd", ".", "DataFrame", "(", "Y", ")", "\n", "df", "=", "pd", ".", "concat", "(", "[", "y_s", ",", "labels", "]", ",", "axis", "=", "1", ")", "\n", "cluster_centers", "=", "df", ".", "groupby", "(", "'label'", ")", "[", "np", ".", "arange", "(", "Y", ".", "shape", "[", "1", "]", ")", "]", ".", "mean", "(", ")", ".", "values", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"unknown method '{}'\"", ".", "format", "(", "method", ")", ")", "\n", "\n", "", "if", "keep_edges", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "centers_at_edges", ",", "cluster_centers", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "cluster_centers", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.NoStdStreams.__init__": [[77, 81], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "stdout", "=", "None", ",", "stderr", "=", "None", ")", ":", "\n", "        ", "self", ".", "devnull", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "self", ".", "_stdout", "=", "stdout", "or", "self", ".", "devnull", "or", "sys", ".", "stdout", "\n", "self", ".", "_stderr", "=", "stderr", "or", "self", ".", "devnull", "or", "sys", ".", "stderr", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.NoStdStreams.__enter__": [[82, 86], ["integration.NoStdStreams.old_stdout.flush", "integration.NoStdStreams.old_stderr.flush"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "old_stdout", ",", "self", ".", "old_stderr", "=", "sys", ".", "stdout", ",", "sys", ".", "stderr", "\n", "self", ".", "old_stdout", ".", "flush", "(", ")", ";", "self", ".", "old_stderr", ".", "flush", "(", ")", "\n", "sys", ".", "stdout", ",", "sys", ".", "stderr", "=", "self", ".", "_stdout", ",", "self", ".", "_stderr", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.NoStdStreams.__exit__": [[87, 92], ["integration.NoStdStreams._stdout.flush", "integration.NoStdStreams._stderr.flush", "integration.NoStdStreams.devnull.close"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "self", ".", "_stdout", ".", "flush", "(", ")", ";", "self", ".", "_stderr", ".", "flush", "(", ")", "\n", "sys", ".", "stdout", "=", "self", ".", "old_stdout", "\n", "sys", ".", "stderr", "=", "self", ".", "old_stderr", "\n", "self", ".", "devnull", ".", "close", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.numeric_integation": [[14, 30], ["numpy.squeeze", "func", "scipy.trapz", "numpy.linspace"], "function", ["None"], ["def", "numeric_integation", "(", "func", ",", "n_samples", "=", "10", "**", "5", ",", "bound_lower", "=", "-", "10", "**", "3", ",", "bound_upper", "=", "10", "**", "3", ")", ":", "\n", "  ", "\"\"\" Numeric integration over one dimension using the trapezoidal rule\n\n     Args:\n       func: function to integrate over - must take numpy arrays of shape (n_samples,) as first argument\n             and return a numpy array of shape (n_samples,)\n       n_samples: (int) number of samples\n\n     Returns:\n       approximated integral - numpy array of shape (ndim_out,)\n    \"\"\"", "\n", "# proposal distribution", "\n", "y_samples", "=", "np", ".", "squeeze", "(", "np", ".", "linspace", "(", "bound_lower", ",", "bound_upper", ",", "num", "=", "n_samples", ")", ")", "\n", "values", "=", "func", "(", "y_samples", ")", "\n", "integral", "=", "integrate", ".", "trapz", "(", "values", ",", "y_samples", ")", "\n", "return", "integral", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.mc_integration_student_t": [[32, 72], ["isinstance", "isinstance", "range", "numpy.mean", "cde.utils.distribution.multidim_t_rvs", "numpy.expand_dims", "func", "numpy.tile", "batch_results.append", "numpy.stack", "int", "numpy.ones", "numpy.ones", "cde.utils.distribution.multidim_t_pdf", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.multidim_t_rvs", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.multidim_t_pdf"], ["", "def", "mc_integration_student_t", "(", "func", ",", "ndim", ",", "n_samples", "=", "10", "**", "6", ",", "batch_size", "=", "None", ",", "loc_proposal", "=", "0", ",", "\n", "scale_proposal", "=", "2", ",", "dof", "=", "6", ")", ":", "\n", "    ", "\"\"\" Monte carlo integration using importance sampling with a cauchy distribution\n\n    Args:\n      func: function to integrate over - must take numpy arrays of shape (n_samples, ndim) as first argument\n            and return a numpy array of shape (n_samples, ndim_out)\n      ndim: (int) number of dimensions to integrate over\n      n_samples: (int) number of samples\n      batch_size: (int) batch_size for junking the n_samples in batches (optional)\n\n    Returns:\n      approximated integral - numpy array of shape (ndim_out,)\n\n    \"\"\"", "\n", "if", "batch_size", "is", "None", ":", "\n", "        ", "n_batches", "=", "1", "\n", "batch_size", "=", "n_samples", "\n", "", "else", ":", "\n", "        ", "n_batches", "=", "n_samples", "//", "batch_size", "+", "int", "(", "n_samples", "%", "batch_size", ">", "0", ")", "\n", "\n", "", "batch_results", "=", "[", "]", "\n", "\n", "if", "isinstance", "(", "loc_proposal", ",", "numbers", ".", "Number", ")", ":", "\n", "        ", "loc_proposal", "=", "np", ".", "ones", "(", "ndim", ")", "*", "loc_proposal", "\n", "", "if", "isinstance", "(", "scale_proposal", ",", "numbers", ".", "Number", ")", ":", "\n", "        ", "scale_proposal", "=", "np", ".", "ones", "(", "ndim", ")", "*", "scale_proposal", "\n", "\n", "\n", "", "for", "j", "in", "range", "(", "n_batches", ")", ":", "\n", "        ", "samples", "=", "multidim_t_rvs", "(", "loc_proposal", ",", "scale_proposal", ",", "dof", "=", "dof", ",", "N", "=", "batch_size", ")", "\n", "f", "=", "np", ".", "expand_dims", "(", "multidim_t_pdf", "(", "samples", ",", "loc_proposal", ",", "scale_proposal", ",", "dof", ")", ",", "axis", "=", "1", ")", "\n", "r", "=", "func", "(", "samples", ")", "\n", "assert", "r", ".", "ndim", "==", "2", ",", "'func must return a 2-dimensional numpy array'", "\n", "f", "=", "np", ".", "tile", "(", "f", ",", "(", "1", ",", "r", ".", "shape", "[", "1", "]", ")", ")", "# bring f into same shape like r", "\n", "assert", "(", "f", ".", "shape", "==", "r", ".", "shape", ")", "\n", "batch_results", ".", "append", "(", "np", ".", "mean", "(", "r", "/", "f", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "result", "=", "np", ".", "mean", "(", "np", ".", "stack", "(", "batch_results", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.AsyncExecutor.__init__": [[9, 13], ["async_executor.AsyncExecutor._populate_pool", "multiprocessing.cpu_count"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.AsyncExecutor._populate_pool"], ["    ", "def", "__init__", "(", "self", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "self", ".", "num_workers", "=", "n_jobs", "if", "n_jobs", ">", "0", "else", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "self", ".", "_pool", "=", "[", "]", "\n", "self", ".", "_populate_pool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.AsyncExecutor.run": [[14, 36], ["list", "len", "zip", "progressbar.bar.ProgressBar", "all", "range", "progressbar.bar.ProgressBar.finish", "async_executor.AsyncExecutor._pool[].is_alive", "async_executor.AsyncExecutor._pool[].terminate", "len", "list.pop", "async_executor._start_process", "progressbar.bar.ProgressBar.update", "len"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor._start_process"], ["", "def", "run", "(", "self", ",", "target", ",", "*", "args_iter", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "workers_idle", "=", "[", "False", "]", "*", "self", ".", "num_workers", "\n", "tasks", "=", "list", "(", "zip", "(", "*", "args_iter", ")", ")", "\n", "n_tasks", "=", "len", "(", "tasks", ")", "\n", "\n", "if", "verbose", ":", "\n", "          ", "pbar", "=", "ProgressBar", "(", "max_value", "=", "n_tasks", ")", "\n", "\n", "", "while", "not", "all", "(", "workers_idle", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_workers", ")", ":", "\n", "                ", "if", "not", "self", ".", "_pool", "[", "i", "]", ".", "is_alive", "(", ")", ":", "\n", "                    ", "self", ".", "_pool", "[", "i", "]", ".", "terminate", "(", ")", "\n", "if", "len", "(", "tasks", ")", ">", "0", ":", "\n", "                        ", "if", "verbose", ":", "\n", "                          ", "pbar", ".", "update", "(", "n_tasks", "-", "len", "(", "tasks", ")", ")", "\n", "#print(n_tasks-len(tasks))", "\n", "", "next_task", "=", "tasks", ".", "pop", "(", "0", ")", "\n", "self", ".", "_pool", "[", "i", "]", "=", "_start_process", "(", "target", ",", "next_task", ")", "\n", "", "else", ":", "\n", "                        ", "workers_idle", "[", "i", "]", "=", "True", "\n", "", "", "", "", "if", "verbose", ":", "\n", "            ", "pbar", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.AsyncExecutor._populate_pool": [[37, 39], ["async_executor._start_process", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor._start_process"], ["", "", "def", "_populate_pool", "(", "self", ")", ":", "\n", "        ", "self", ".", "_pool", "=", "[", "_start_process", "(", "_dummy_fun", ")", "for", "_", "in", "range", "(", "self", ".", "num_workers", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run": [[42, 53], ["list", "len", "enumerate", "zip", "progressbar.bar.ProgressBar", "target", "progressbar.bar.ProgressBar.update"], "methods", ["None"], ["    ", "def", "run", "(", "self", ",", "target", ",", "*", "args_iter", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "tasks", "=", "list", "(", "zip", "(", "*", "args_iter", ")", ")", "\n", "n_tasks", "=", "len", "(", "tasks", ")", "\n", "\n", "if", "verbose", ":", "\n", "          ", "pbar", "=", "ProgressBar", "(", "max_value", "=", "n_tasks", ")", "\n", "\n", "", "for", "i", ",", "task", "in", "enumerate", "(", "tasks", ")", ":", "\n", "            ", "target", "(", "*", "task", ")", "\n", "if", "verbose", ":", "\n", "                ", "pbar", ".", "update", "(", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.execute_batch_async_pdf": [[55, 100], ["async_executor._split_into_batches", "multiprocessing.Manager", "multiprocessing.Manager.dict", "async_executor.AsyncExecutor", "async_executor.AsyncExecutor.run", "numpy.concatenate", "max", "pdf_fun", "multiprocessing.cpu_count", "int"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor._split_into_batches", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "", "", "", "def", "execute_batch_async_pdf", "(", "pdf_fun", ",", "X", ",", "Y", ",", "n_jobs", "=", "-", "1", ",", "batch_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Executes pdf_fun in batches in multiple processes and concatenates results along axis 0\n\n    Args:\n        pdf_fun: callable with signature pdf(X, Y) returning a numpy array\n        X: ndarray with shape (n_queries, ndim_x)\n        Y: ndarray with shape (n_queries, ndim_y)\n        n_jobs: integer denoting the number of jobs to launch in parallel. If -1\n                      it uses the CPU count\n        batch_size: (optional) integer denoting the batch size for the individual function calls\n\n    Returns:\n        ndarray of shape (n_queries,) which results from a concatenation of all pdf calls\n    \"\"\"", "\n", "# split query arrays into batches", "\n", "query_length", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "if", "n_jobs", "<", "1", ":", "\n", "        ", "n_jobs", "=", "max", "(", "multiprocessing", ".", "cpu_count", "(", ")", ",", "8", ")", "\n", "\n", "", "if", "batch_size", "is", "None", ":", "\n", "        ", "n_batches", "=", "n_jobs", "\n", "", "else", ":", "\n", "        ", "n_batches", "=", "query_length", "//", "batch_size", "+", "int", "(", "not", "(", "query_length", "%", "batch_size", "==", "0", ")", ")", "\n", "\n", "", "X_batches", ",", "Y_batches", ",", "indices", "=", "_split_into_batches", "(", "X", ",", "Y", ",", "n_batches", ")", "\n", "\n", "\n", "# prepare multiprocessing setup", "\n", "manager", "=", "Manager", "(", ")", "\n", "result_dict", "=", "manager", ".", "dict", "(", ")", "\n", "\n", "def", "run_pdf_async", "(", "X_batch", ",", "Y_batch", ",", "batch_idx", ")", ":", "\n", "        ", "p", "=", "pdf_fun", "(", "X_batch", ",", "Y_batch", ")", "\n", "result_dict", "[", "batch_idx", "]", "=", "p", "\n", "\n", "# compute pdf for batches asynchronously", "\n", "", "executer", "=", "AsyncExecutor", "(", "n_jobs", "=", "n_jobs", ")", "\n", "executer", ".", "run", "(", "run_pdf_async", ",", "X_batches", ",", "Y_batches", ",", "indices", ")", "\n", "\n", "# concatenate results", "\n", "p_final", "=", "np", ".", "concatenate", "(", "[", "result_dict", "[", "i", "]", "for", "i", "in", "indices", "]", ",", "axis", "=", "0", ")", "\n", "assert", "p_final", ".", "shape", "[", "0", "]", "==", "query_length", "\n", "return", "p_final", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor._split_into_batches": [[102, 108], ["range", "numpy.array_split", "numpy.array_split", "range"], "function", ["None"], ["", "def", "_split_into_batches", "(", "X", ",", "Y", ",", "n_batches", ")", ":", "\n", "    ", "assert", "X", ".", "shape", "[", "0", "]", "==", "X", ".", "shape", "[", "0", "]", "\n", "if", "n_batches", "<=", "1", ":", "\n", "        ", "return", "[", "X", "]", ",", "[", "Y", "]", ",", "range", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array_split", "(", "X", ",", "n_batches", ",", "axis", "=", "0", ")", ",", "np", ".", "array_split", "(", "Y", ",", "n_batches", ",", "axis", "=", "0", ")", ",", "range", "(", "n_batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor._start_process": [[114, 121], ["multiprocessing.Process.start", "multiprocessing.Process", "multiprocessing.Process", "async_executor._dummy_fun"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor._dummy_fun"], ["def", "_start_process", "(", "target", ",", "args", "=", "None", ")", ":", "\n", "    ", "if", "args", ":", "\n", "        ", "p", "=", "Process", "(", "target", "=", "target", ",", "args", "=", "args", ")", "\n", "", "else", ":", "\n", "        ", "p", "=", "Process", "(", "target", "=", "target", ")", "\n", "", "p", ".", "start", "(", ")", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor._dummy_fun": [[122, 124], ["None"], "function", ["None"], ["", "def", "_dummy_fun", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.serializable.Serializable.__init__": [[7, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__args", "=", "args", "\n", "self", ".", "__kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.serializable.Serializable.quick_init": [[11, 35], ["getattr", "setattr", "inspect.getfullargspec", "inspect.getargspec", "tuple", "tuple", "dict", "dict"], "methods", ["None"], ["", "def", "quick_init", "(", "self", ",", "locals_", ")", ":", "\n", "        ", "if", "getattr", "(", "self", ",", "\"_serializable_initialized\"", ",", "False", ")", ":", "\n", "            ", "return", "\n", "", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "            ", "spec", "=", "inspect", ".", "getfullargspec", "(", "self", ".", "__init__", ")", "\n", "# Exclude the first \"self\" parameter", "\n", "if", "spec", ".", "varkw", ":", "\n", "                ", "kwargs", "=", "locals_", "[", "spec", ".", "varkw", "]", "\n", "", "else", ":", "\n", "                ", "kwargs", "=", "dict", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "spec", "=", "inspect", ".", "getargspec", "(", "self", ".", "__init__", ")", "\n", "if", "spec", ".", "keywords", ":", "\n", "                ", "kwargs", "=", "locals_", "[", "spec", ".", "keywords", "]", "\n", "", "else", ":", "\n", "                ", "kwargs", "=", "dict", "(", ")", "\n", "", "", "if", "spec", ".", "varargs", ":", "\n", "            ", "varargs", "=", "locals_", "[", "spec", ".", "varargs", "]", "\n", "", "else", ":", "\n", "            ", "varargs", "=", "tuple", "(", ")", "\n", "", "in_order_args", "=", "[", "locals_", "[", "arg", "]", "for", "arg", "in", "spec", ".", "args", "]", "[", "1", ":", "]", "\n", "self", ".", "__args", "=", "tuple", "(", "in_order_args", ")", "+", "varargs", "\n", "self", ".", "__kwargs", "=", "kwargs", "\n", "setattr", "(", "self", ",", "\"_serializable_initialized\"", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.serializable.Serializable.__getstate__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"__args\"", ":", "self", ".", "__args", ",", "\"__kwargs\"", ":", "self", ".", "__kwargs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.serializable.Serializable.__setstate__": [[39, 42], ["serializable.Serializable.__dict__.update", "type"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "out", "=", "type", "(", "self", ")", "(", "*", "d", "[", "\"__args\"", "]", ",", "**", "d", "[", "\"__kwargs\"", "]", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "out", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.serializable.Serializable.clone": [[43, 66], ["isinstance", "obj.__getstate__", "list", "kwargs.items", "type().__new__", "type().__new__.__setstate__", "inspect.getfullargspec", "inspect.getargspec", "type", "type", "in_order_args.index"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.__getstate__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.__setstate__"], ["", "@", "classmethod", "\n", "def", "clone", "(", "cls", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "obj", ",", "Serializable", ")", "\n", "d", "=", "obj", ".", "__getstate__", "(", ")", "\n", "\n", "# Split the entries in kwargs between positional and keyword arguments", "\n", "# and update d['__args'] and d['__kwargs'], respectively.", "\n", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "            ", "spec", "=", "inspect", ".", "getfullargspec", "(", "obj", ".", "__init__", ")", "\n", "", "else", ":", "\n", "            ", "spec", "=", "inspect", ".", "getargspec", "(", "obj", ".", "__init__", ")", "\n", "", "in_order_args", "=", "spec", ".", "args", "[", "1", ":", "]", "\n", "\n", "d", "[", "\"__args\"", "]", "=", "list", "(", "d", "[", "\"__args\"", "]", ")", "\n", "for", "kw", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "kw", "in", "in_order_args", ":", "\n", "                ", "d", "[", "\"__args\"", "]", "[", "in_order_args", ".", "index", "(", "kw", ")", "]", "=", "val", "\n", "", "else", ":", "\n", "                ", "d", "[", "\"__kwargs\"", "]", "[", "kw", "]", "=", "val", "\n", "\n", "", "", "out", "=", "type", "(", "obj", ")", ".", "__new__", "(", "type", "(", "obj", ")", ")", "\n", "out", ".", "__setstate__", "(", "d", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.norm_along_axis_1": [[3, 29], ["numpy.zeros", "range", "range", "numpy.sum", "numpy.linalg.norm", "numpy.sqrt", "numpy.square"], "function", ["None"], ["def", "norm_along_axis_1", "(", "A", ",", "B", ",", "squared", "=", "False", ",", "norm_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\" calculates the (squared) euclidean distance along the axis 1 of both 2d arrays\n\n    Args:\n      A: numpy array of shape (n, k)\n      B: numpy array of shape (m, k)\n      squared: boolean that indicates whether the squared euclidean distance shall be returned, \\\n               otherwise the euclidean distance is returned\n      norm_dim: (boolean) normalized the distance by the dimensionality k -> divides result by sqrt(k)\n\n      Returns:\n         euclidean distance along the axis 1 of both 2d arrays - numpy array of shape (n, m)\n    \"\"\"", "\n", "assert", "A", ".", "shape", "[", "1", "]", "==", "B", ".", "shape", "[", "1", "]", "\n", "result", "=", "np", ".", "zeros", "(", "shape", "=", "(", "A", ".", "shape", "[", "0", "]", ",", "B", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "if", "squared", ":", "\n", "        ", "for", "i", "in", "range", "(", "B", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "result", "[", ":", ",", "i", "]", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "A", "-", "B", "[", "i", ",", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "B", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "result", "[", ":", ",", "i", "]", "=", "np", ".", "linalg", ".", "norm", "(", "A", "-", "B", "[", "i", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "if", "norm_dim", ":", "\n", "        ", "result", "=", "result", "/", "np", ".", "sqrt", "(", "A", ".", "shape", "[", "1", "]", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.is_pos_def": [[31, 37], ["numpy.all", "numpy.linalg.eigvals"], "function", ["None"], ["", "def", "is_pos_def", "(", "M", ")", ":", "\n", "    ", "\"\"\" checks whether x^T * M * x > 0, M being the matrix to be checked\n    :param M: the matrix to be checked\n    :return: True if positive definite, False otherwise\n    \"\"\"", "\n", "return", "np", ".", "all", "(", "np", ".", "linalg", ".", "eigvals", "(", "M", ")", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc._project_to_pos_semi_def": [[38, 40], ["M.T.dot"], "function", ["None"], ["", "def", "_project_to_pos_semi_def", "(", "M", ")", ":", "\n", "    ", "return", "M", ".", "T", ".", "dot", "(", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.project_to_pos_semi_def": [[42, 59], ["range", "misc._project_to_pos_semi_def", "misc._project_to_pos_semi_def"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc._project_to_pos_semi_def", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc._project_to_pos_semi_def"], ["", "def", "project_to_pos_semi_def", "(", "M", ")", ":", "\n", "    ", "\"\"\"\n    Projects a symmetric matrix M (norm) or a stack of symmetric matrices M onto the cone of pos. (semi) def. matrices\n    :param M: Either M is a symmetric matrix of the form (m,m) or stack of k such matrices -> shape (k,m,m)\n    :return: M, the projection of M or all projections of matrices in M on the cone pos. semi-def. matrices\n    \"\"\"", "\n", "assert", "M", ".", "ndim", "<=", "3", "\n", "\n", "if", "M", ".", "ndim", "==", "3", ":", "\n", "        ", "assert", "M", ".", "shape", "[", "1", "]", "==", "M", ".", "shape", "[", "2", "]", "\n", "for", "i", "in", "range", "(", "M", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "M", "[", "i", "]", "=", "_project_to_pos_semi_def", "(", "M", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "M", ".", "shape", "[", "0", "]", "==", "M", ".", "shape", "[", "1", "]", "\n", "M", "=", "_project_to_pos_semi_def", "(", "M", ")", "\n", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.take": [[61, 64], ["list"], "function", ["None"], ["", "def", "take", "(", "n", ",", "mydict", ")", ":", "\n", "    ", "\"Return first n items of the iterable as a list\"", "\n", "return", "{", "k", ":", "mydict", "[", "k", "]", "for", "k", "in", "list", "(", "mydict", ")", "[", ":", "n", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.take_of_type": [[66, 69], ["misc.take", "mydict.items", "v.task_name.split"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.take"], ["", "def", "take_of_type", "(", "n", ",", "type", ",", "mydict", ")", ":", "\n", "    ", "d", "=", "{", "k", ":", "mydict", "[", "k", "]", "for", "k", ",", "v", "in", "mydict", ".", "items", "(", ")", "if", "v", ".", "task_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "==", "type", "}", "\n", "return", "take", "(", "n", ",", "d", ")", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.batched_univ_t_pdf": [[6, 12], ["distribution._standard_student_t_pdf", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution._standard_student_t_pdf"], ["def", "batched_univ_t_pdf", "(", "x", ",", "loc", ",", "scale", ",", "dof", ")", ":", "\n", "  ", "x", ",", "loc", ",", "scale", ",", "dof", "=", "np", ".", "squeeze", "(", "x", ")", ",", "np", ".", "squeeze", "(", "loc", ")", ",", "np", ".", "squeeze", "(", "scale", ")", ",", "np", ".", "squeeze", "(", "dof", ")", "\n", "assert", "x", ".", "shape", "==", "loc", ".", "shape", "==", "scale", ".", "shape", "==", "dof", ".", "shape", "and", "x", ".", "ndim", "==", "1", "\n", "x_norm", "=", "(", "x", "-", "loc", ")", "/", "scale", "\n", "p", "=", "_standard_student_t_pdf", "(", "x_norm", ",", "dof", ")", "\n", "return", "p", "/", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.batched_univ_t_cdf": [[13, 19], ["scipy.special.stdtr", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze"], "function", ["None"], ["", "def", "batched_univ_t_cdf", "(", "x", ",", "loc", ",", "scale", ",", "dof", ")", ":", "\n", "  ", "x", ",", "loc", ",", "scale", ",", "dof", "=", "np", ".", "squeeze", "(", "x", ")", ",", "np", ".", "squeeze", "(", "loc", ")", ",", "np", ".", "squeeze", "(", "scale", ")", ",", "np", ".", "squeeze", "(", "dof", ")", "\n", "assert", "x", ".", "shape", "==", "loc", ".", "shape", "==", "scale", ".", "shape", "==", "dof", ".", "shape", "and", "x", ".", "ndim", "==", "1", "\n", "x_norm", "=", "(", "x", "-", "loc", ")", "/", "scale", "\n", "p", "=", "stdtr", "(", "dof", ",", "x_norm", ")", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.batched_univ_t_rvs": [[20, 27], ["np.random.RandomState.standard_t", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.random.RandomState"], "function", ["None"], ["", "def", "batched_univ_t_rvs", "(", "loc", ",", "scale", ",", "dof", ",", "random_state", "=", "None", ")", ":", "\n", "  ", "loc", ",", "scale", ",", "dof", "=", "np", ".", "squeeze", "(", "loc", ")", ",", "np", ".", "squeeze", "(", "scale", ")", ",", "np", ".", "squeeze", "(", "dof", ")", "\n", "assert", "loc", ".", "shape", "==", "scale", ".", "shape", "==", "dof", ".", "shape", "and", "loc", ".", "ndim", "==", "1", "\n", "if", "random_state", "is", "None", ":", "\n", "    ", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "None", ")", "\n", "", "rvs", "=", "random_state", ".", "standard_t", "(", "df", "=", "dof", ")", "\n", "return", "rvs", "*", "scale", "+", "loc", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.multidim_t_pdf": [[29, 50], ["scipy.special.gamma", "scipy.special.gamma", "numpy.prod", "numpy.sum"], "function", ["None"], ["", "def", "multidim_t_pdf", "(", "x", ",", "mu", ",", "sigma", ",", "dof", ")", ":", "\n", "    ", "'''\n    Multidimensional t-student density:\n\n    Args:\n        x: points where to calculate the pdf - array of shape (batch_size, ndim_x)\n        mu: mean - array of shape (ndim_x, )\n        sigma: scale -  array of shape (ndim_x, )\n        dof = degrees of freedom\n        d: dimension\n\n    Returns:\n        p: probability density p(x) - array of shape (batch_size)\n    '''", "\n", "d", "=", "mu", ".", "shape", "[", "0", "]", "\n", "num", "=", "gamma", "(", "(", "d", "+", "dof", ")", "/", "2.0", ")", "\n", "denom", "=", "gamma", "(", "dof", "/", "2.0", ")", "*", "(", "dof", "*", "np", ".", "pi", ")", "**", "(", "d", "/", "2.0", ")", "*", "np", ".", "prod", "(", "sigma", ")", "**", "0.5", "*", "(", "1", "+", "(", "1.", "/", "dof", ")", "*", "np", ".", "sum", "(", "(", "x", "-", "mu", ")", "**", "2", "/", "sigma", ",", "axis", "=", "-", "1", ")", ")", "**", "(", "(", "d", "+", "dof", ")", "/", "2.0", ")", "\n", "p", "=", "num", "/", "denom", "\n", "assert", "p", ".", "ndim", "==", "1", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.multidim_t_rvs": [[52, 70], ["distribution.multivariate_t_rvs", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.multivariate_t_rvs"], ["", "def", "multidim_t_rvs", "(", "mu", ",", "sigma", ",", "dof", ",", "N", "=", "1", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "''' generates random variables of multidmensional (diagonal covariance matrix)\n        t distribution\n\n    Args:\n        mu = mean - array of shape (ndim_x, )ble\n        sigma: scale -  array of shape (ndim_x, )\n        dof: (numeric) degrees of freedom\n        N: (int) number of observations, return random array will be (n, ndim_x))\n        random_state: (np.random.RandomState) random number generator object\n\n    Returns:\n        rvs: ndarray, (n, len(m))\n            each row is an independent draw of a multivariate t distributed\n            random variable\n    '''", "\n", "\n", "return", "multivariate_t_rvs", "(", "mu", ",", "np", ".", "diag", "(", "sigma", ")", ",", "dof", ",", "N", ",", "random_state", "=", "random_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.multivariate_t_rvs": [[71, 97], ["numpy.asarray", "len", "np.random.RandomState.multivariate_normal", "numpy.random.RandomState", "numpy.zeros", "np.random.RandomState.chisquare", "numpy.sqrt"], "function", ["None"], ["", "def", "multivariate_t_rvs", "(", "loc", ",", "cov", ",", "dof", "=", "np", ".", "inf", ",", "n", "=", "1", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "''' generates random variables of multivariate t distribution\n        Parameters\n\n    Args:\n        loc:  (array_like) mean of random variable, length determines dimension of random variable\n        cov: (array_like) square array of covariance  matrix\n        dof: (numeric) degrees of freedom\n        n: (int) number of observations, return random array will be (n, len(m))\n        random_state: (np.random.RandomState) random number generator object\n\n    Returns:\n        rvs: ndarray, (n, len(m))\n            each row is an independent draw of a multivariate t distributed\n            random variable\n    '''", "\n", "if", "random_state", "is", "None", ":", "\n", "        ", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "None", ")", "\n", "", "loc", "=", "np", ".", "asarray", "(", "loc", ")", "\n", "d", "=", "len", "(", "loc", ")", "\n", "if", "dof", "==", "np", ".", "inf", ":", "\n", "        ", "x", "=", "1.", "\n", "", "else", ":", "\n", "        ", "x", "=", "random_state", ".", "chisquare", "(", "dof", ",", "n", ")", "/", "dof", "\n", "", "z", "=", "random_state", ".", "multivariate_normal", "(", "np", ".", "zeros", "(", "d", ")", ",", "cov", ",", "(", "n", ",", ")", ")", "\n", "return", "loc", "+", "z", "/", "np", ".", "sqrt", "(", "x", ")", "[", ":", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution._standard_student_t_pdf": [[98, 102], ["numpy.exp", "numpy.sqrt", "scipy.special.gammaln", "scipy.special.gammaln"], "function", ["None"], ["", "def", "_standard_student_t_pdf", "(", "x", ",", "dof", ")", ":", "\n", "  ", "p", "=", "np", ".", "exp", "(", "gammaln", "(", "(", "dof", "+", "1", ")", "/", "2", ")", "-", "gammaln", "(", "dof", "/", "2", ")", ")", "\n", "p", "/=", "np", ".", "sqrt", "(", "dof", "*", "np", ".", "pi", ")", "*", "(", "1", "+", "(", "x", "**", "2", ")", "/", "dof", ")", "**", "(", "(", "dof", "+", "1", ")", "/", "2", ")", "\n", "return", "p", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.optimizers.AdamOptimizer.__init__": [[17, 33], ["optimizers.AdamOptimizer.__dict__.update", "TypeError", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lr", "=", "0.001", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "\n", "epsilon", "=", "1e-8", ",", "decay", "=", "0.", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "allowed_kwargs", "=", "{", "'clipnorm'", ",", "'clipvalue'", "}", "\n", "for", "k", "in", "kwargs", ":", "\n", "            ", "if", "k", "not", "in", "allowed_kwargs", ":", "\n", "                ", "raise", "TypeError", "(", "'Unexpected keyword argument '", "\n", "'passed to optimizer: '", "+", "str", "(", "k", ")", ")", "\n", "", "", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "self", ".", "iterations", "=", "0", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "beta_1", "=", "beta_1", "\n", "self", ".", "beta_2", "=", "beta_2", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "initial_decay", "=", "decay", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.optimizers.AdamOptimizer.get_update": [[34, 77], ["zip", "range", "x.flatten", "x.flatten", "hasattr", "len", "range", "len", "ret[].reshape", "numpy.sqrt", "numpy.zeros", "numpy.zeros", "len", "numpy.power", "numpy.square", "numpy.power", "numpy.sqrt"], "methods", ["None"], ["", "def", "get_update", "(", "self", ",", "params", ",", "grads", ")", ":", "\n", "        ", "\"\"\" params and grads are list of numpy arrays\n        \"\"\"", "\n", "original_shapes", "=", "[", "x", ".", "shape", "for", "x", "in", "params", "]", "\n", "params", "=", "[", "x", ".", "flatten", "(", ")", "for", "x", "in", "params", "]", "\n", "grads", "=", "[", "x", ".", "flatten", "(", ")", "for", "x", "in", "grads", "]", "\n", "\n", "\"\"\" #TODO: implement clipping\n        if hasattr(self, 'clipnorm') and self.clipnorm > 0:\n            norm = np.sqrt(sum([np.sum(np.square(g)) for g in grads]))\n            grads = [clip_norm(g, self.clipnorm, norm) for g in grads]\n        if hasattr(self, 'clipvalue') and self.clipvalue > 0:\n            grads = [K.clip(g, -self.clipvalue, self.clipvalue) for g in grads]\n        \"\"\"", "\n", "\n", "lr", "=", "self", ".", "lr", "\n", "if", "self", ".", "initial_decay", ">", "0", ":", "\n", "            ", "lr", "*=", "(", "1.", "/", "(", "1.", "+", "self", ".", "decay", "*", "self", ".", "iterations", ")", ")", "\n", "\n", "", "t", "=", "self", ".", "iterations", "+", "1", "\n", "lr_t", "=", "lr", "*", "(", "np", ".", "sqrt", "(", "1.", "-", "np", ".", "power", "(", "self", ".", "beta_2", ",", "t", ")", ")", "/", "\n", "(", "1.", "-", "np", ".", "power", "(", "self", ".", "beta_1", ",", "t", ")", ")", ")", "\n", "\n", "if", "not", "hasattr", "(", "self", ",", "'ms'", ")", ":", "\n", "            ", "self", ".", "ms", "=", "[", "np", ".", "zeros", "(", "p", ".", "shape", ")", "for", "p", "in", "params", "]", "\n", "self", ".", "vs", "=", "[", "np", ".", "zeros", "(", "p", ".", "shape", ")", "for", "p", "in", "params", "]", "\n", "\n", "", "ret", "=", "[", "None", "]", "*", "len", "(", "params", ")", "\n", "for", "i", ",", "p", ",", "g", ",", "m", ",", "v", "in", "zip", "(", "range", "(", "len", "(", "params", ")", ")", ",", "params", ",", "grads", ",", "self", ".", "ms", ",", "self", ".", "vs", ")", ":", "\n", "            ", "m_t", "=", "(", "self", ".", "beta_1", "*", "m", ")", "+", "(", "1.", "-", "self", ".", "beta_1", ")", "*", "g", "\n", "v_t", "=", "(", "self", ".", "beta_2", "*", "v", ")", "+", "(", "1.", "-", "self", ".", "beta_2", ")", "*", "np", ".", "square", "(", "g", ")", "\n", "p_t", "=", "p", "-", "lr_t", "*", "m_t", "/", "(", "np", ".", "sqrt", "(", "v_t", ")", "+", "self", ".", "epsilon", ")", "\n", "self", ".", "ms", "[", "i", "]", "=", "m_t", "\n", "self", ".", "vs", "[", "i", "]", "=", "v_t", "\n", "ret", "[", "i", "]", "=", "p_t", "\n", "\n", "", "self", ".", "iterations", "+=", "1", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "ret", ")", ")", ":", "\n", "            ", "ret", "[", "i", "]", "=", "ret", "[", "i", "]", ".", "reshape", "(", "original_shapes", "[", "i", "]", ")", "\n", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.optimizers.find_root_newton_method": [[78, 118], ["callable", "callable", "optimizers.AdamOptimizer", "fun", "grad", "numpy.clip", "numpy.abs", "numpy.mean", "optimizers.AdamOptimizer.get_update", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.optimizers.AdamOptimizer.get_update"], ["", "", "def", "find_root_newton_method", "(", "fun", ",", "grad", ",", "x0", ",", "eps", "=", "1e-6", ",", "learning_rate", "=", "2e-3", ",", "max_iter", "=", "1e5", ")", ":", "\n", "    ", "\"\"\"\n    Newton's root finding method in conjunction with the adam optimizer\n\n    Args:\n        fun (callable): function f for which f(x) = 0 shall be solved\n        grad (callable): gradient of f\n        x0 (np.ndarray): initial value\n        eps (float): tolerance\n        learning_rate (float): learning rate of the optimizer\n        max_iter (int): maximum iterations\n\n    Returns:\n        numpy array (result of the root finding) - if not successful, returns np.NaN\n    \"\"\"", "\n", "assert", "callable", "(", "fun", ")", "\n", "assert", "callable", "(", "grad", ")", "\n", "\n", "optimizer", "=", "AdamOptimizer", "(", "lr", "=", "learning_rate", ")", "\n", "\n", "x", "=", "x0", "\n", "n_iter", "=", "0", "\n", "percentage_roots_found", "=", "0.0", "\n", "\n", "while", "percentage_roots_found", "<", "0.999", ":", "\n", "        ", "f", "=", "fun", "(", "x", ")", "\n", "g", "=", "grad", "(", "x", ")", "\n", "newton_step", "=", "(", "f", "+", "1e-10", ")", "/", "(", "g", "+", "1e-10", ")", "#", "\n", "newton_step", "=", "np", ".", "clip", "(", "newton_step", ",", "-", "1000", ",", "1000", ")", "# gradient clipping", "\n", "x", "=", "optimizer", ".", "get_update", "(", "[", "x", "]", ",", "[", "newton_step", "]", ")", "[", "0", "]", "\n", "\n", "approx_error", "=", "np", ".", "abs", "(", "f", ")", "\n", "percentage_roots_found", "=", "np", ".", "mean", "(", "approx_error", "<", "eps", ")", "\n", "n_iter", "+=", "1", "\n", "\n", "if", "n_iter", ">", "max_iter", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Max_iter has been reached - stopping newton method for determining quantiles\"", ")", "\n", "return", "np", ".", "NaN", "\n", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.optimizers.find_root_by_bounding": [[120, 154], ["callable", "fun", "numpy.all", "numpy.mean", "warnings.warn", "numpy.logical_not", "numpy.logical_not", "numpy.abs"], "function", ["None"], ["", "def", "find_root_by_bounding", "(", "fun", ",", "left", ",", "right", ",", "eps", "=", "1e-8", ",", "max_iter", "=", "1e4", ")", ":", "\n", "    ", "\"\"\"\n    Root finding method that uses selective shrinking of a target interval bounded by left and right\n    --> other than the newton method, this method only works for for vectorized univariate functions\n    Args:\n        fun (callable): function f for which f(x) = 0 shall be solved\n        left: (np.ndarray): initial left bound\n        right (np.ndarray): initial right bound\n        eps (float): tolerance\n        max_iter (int): maximum iterations\n    \"\"\"", "\n", "\n", "assert", "callable", "(", "fun", ")", "\n", "\n", "n_iter", "=", "0", "\n", "approx_error", "=", "1e10", "\n", "while", "approx_error", ">", "eps", ":", "\n", "        ", "middle", "=", "(", "right", "+", "left", ")", "/", "2", "\n", "f", "=", "fun", "(", "middle", ")", "\n", "\n", "left_of_zero", "=", "(", "f", "<", "0", ")", ".", "flatten", "(", ")", "\n", "left", "[", "left_of_zero", "]", "=", "middle", "[", "left_of_zero", "]", "\n", "right", "[", "np", ".", "logical_not", "(", "left_of_zero", ")", "]", "=", "middle", "[", "np", ".", "logical_not", "(", "left_of_zero", ")", "]", "\n", "\n", "assert", "np", ".", "all", "(", "left", "<=", "right", ")", "\n", "\n", "approx_error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "right", "-", "left", ")", ")", "/", "2", "\n", "n_iter", "+=", "1", "\n", "\n", "if", "n_iter", ">", "max_iter", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Max_iter has been reached - stopping newton method for determining quantiles\"", ")", "\n", "return", "np", ".", "NaN", "\n", "\n", "", "", "return", "middle", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension.__init__": [[61, 74], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["def", "__init__", "(", "self", ",", "weight_decay", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Construct the extension class that adds weight decay to an optimizer.\n    Args:\n      weight_decay: A `Tensor` or a floating point value, the factor by which\n        a variable is decayed in the update step.\n      decay_var_list: Optional list or tuple or set of `Variable` objects to\n        decay.\n    \"\"\"", "\n", "self", ".", "_decay_var_list", "=", "None", "# is set in minimize or apply_gradients", "\n", "self", ".", "_weight_decay", "=", "weight_decay", "\n", "# The tensors are initialized in call to _prepare", "\n", "self", ".", "_weight_decay_tensor", "=", "None", "\n", "super", "(", "DecoupledWeightDecayExtension", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension.minimize": [[75, 91], ["super().minimize", "set"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension.minimize"], ["", "def", "minimize", "(", "self", ",", "loss", ",", "global_step", "=", "None", ",", "var_list", "=", "None", ",", "\n", "gate_gradients", "=", "optimizer", ".", "Optimizer", ".", "GATE_OP", ",", "\n", "aggregation_method", "=", "None", ",", "colocate_gradients_with_ops", "=", "False", ",", "\n", "name", "=", "None", ",", "grad_loss", "=", "None", ",", "decay_var_list", "=", "None", ")", ":", "\n", "    ", "\"\"\"Add operations to minimize `loss` by updating `var_list` with decay.\n    This function is the same as Optimizer.minimize except that it allows to\n    specify the variables that should be decayed using decay_var_list.\n    If decay_var_list is None, all variables in var_list are decayed.\n    For more information see the documentation of Optimizer.minimize.\n    \"\"\"", "\n", "self", ".", "_decay_var_list", "=", "set", "(", "decay_var_list", ")", "if", "decay_var_list", "else", "False", "\n", "return", "super", "(", "DecoupledWeightDecayExtension", ",", "self", ")", ".", "minimize", "(", "\n", "loss", ",", "global_step", "=", "global_step", ",", "var_list", "=", "var_list", ",", "\n", "gate_gradients", "=", "gate_gradients", ",", "aggregation_method", "=", "aggregation_method", ",", "\n", "colocate_gradients_with_ops", "=", "colocate_gradients_with_ops", ",", "name", "=", "name", ",", "\n", "grad_loss", "=", "grad_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension.apply_gradients": [[92, 104], ["super().apply_gradients", "set"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension.apply_gradients"], ["", "def", "apply_gradients", "(", "self", ",", "grads_and_vars", ",", "global_step", "=", "None", ",", "name", "=", "None", ",", "\n", "decay_var_list", "=", "None", ")", ":", "\n", "    ", "\"\"\"Apply gradients to variables and decay the variables.\n    This function is the same as Optimizer.apply_gradients except that it\n    allows to specify the variables that should be decayed using\n    decay_var_list. If decay_var_list is None, all variables in var_list\n    are decayed.\n    For more information see the documentation of Optimizer.apply_gradients.\n    \"\"\"", "\n", "self", ".", "_decay_var_list", "=", "set", "(", "decay_var_list", ")", "if", "decay_var_list", "else", "False", "\n", "return", "super", "(", "DecoupledWeightDecayExtension", ",", "self", ")", ".", "apply_gradients", "(", "\n", "grads_and_vars", ",", "global_step", "=", "global_step", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._prepare": [[105, 113], ["callable", "tensorflow.python.framework.ops.convert_to_tensor", "super()._prepare", "weight_decay."], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._prepare"], ["", "def", "_prepare", "(", "self", ")", ":", "\n", "    ", "weight_decay", "=", "self", ".", "_weight_decay", "\n", "if", "callable", "(", "weight_decay", ")", ":", "\n", "      ", "weight_decay", "=", "weight_decay", "(", ")", "\n", "", "self", ".", "_weight_decay_tensor", "=", "ops", ".", "convert_to_tensor", "(", "\n", "weight_decay", ",", "name", "=", "\"weight_decay\"", ")", "\n", "# Call the optimizers _prepare function.", "\n", "super", "(", "DecoupledWeightDecayExtension", ",", "self", ")", ".", "_prepare", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._decay_weights_op": [[114, 118], ["tensorflow.python.ops.control_flow_ops.no_op", "var.assign_sub"], "methods", ["None"], ["", "def", "_decay_weights_op", "(", "self", ",", "var", ")", ":", "\n", "    ", "if", "not", "self", ".", "_decay_var_list", "or", "var", "in", "self", ".", "_decay_var_list", ":", "\n", "      ", "return", "var", ".", "assign_sub", "(", "self", ".", "_weight_decay", "*", "var", ",", "self", ".", "_use_locking", ")", "\n", "", "return", "control_flow_ops", ".", "no_op", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._decay_weights_sparse_op": [[119, 124], ["tensorflow.python.ops.control_flow_ops.no_op", "scatter_add"], "methods", ["None"], ["", "def", "_decay_weights_sparse_op", "(", "self", ",", "var", ",", "indices", ",", "scatter_add", ")", ":", "\n", "    ", "if", "not", "self", ".", "_decay_var_list", "or", "var", "in", "self", ".", "_decay_var_list", ":", "\n", "      ", "return", "scatter_add", "(", "var", ",", "indices", ",", "-", "self", ".", "_weight_decay", "*", "var", ",", "\n", "self", ".", "_use_locking", ")", "\n", "", "return", "control_flow_ops", ".", "no_op", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._apply_dense": [[127, 130], ["tensorflow.python.framework.ops.control_dependencies", "super()._apply_dense", "adamW.DecoupledWeightDecayExtension._decay_weights_op"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._apply_dense", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._decay_weights_op"], ["", "def", "_apply_dense", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "    ", "with", "ops", ".", "control_dependencies", "(", "[", "self", ".", "_decay_weights_op", "(", "var", ")", "]", ")", ":", "\n", "      ", "return", "super", "(", "DecoupledWeightDecayExtension", ",", "self", ")", ".", "_apply_dense", "(", "grad", ",", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._resource_apply_dense": [[131, 135], ["tensorflow.python.framework.ops.control_dependencies", "super()._resource_apply_dense", "adamW.DecoupledWeightDecayExtension._decay_weights_op"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._resource_apply_dense", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._decay_weights_op"], ["", "", "def", "_resource_apply_dense", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "    ", "with", "ops", ".", "control_dependencies", "(", "[", "self", ".", "_decay_weights_op", "(", "var", ")", "]", ")", ":", "\n", "      ", "return", "super", "(", "DecoupledWeightDecayExtension", ",", "self", ")", ".", "_resource_apply_dense", "(", "\n", "grad", ",", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._apply_sparse": [[136, 142], ["adamW.DecoupledWeightDecayExtension._decay_weights_sparse_op", "tensorflow.python.framework.ops.control_dependencies", "super()._apply_sparse"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._decay_weights_sparse_op", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._apply_sparse"], ["", "", "def", "_apply_sparse", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "    ", "scatter_add", "=", "state_ops", ".", "scatter_add", "\n", "decay_op", "=", "self", ".", "_decay_weights_sparse_op", "(", "var", ",", "grad", ".", "indices", ",", "scatter_add", ")", "\n", "with", "ops", ".", "control_dependencies", "(", "[", "decay_op", "]", ")", ":", "\n", "      ", "return", "super", "(", "DecoupledWeightDecayExtension", ",", "self", ")", ".", "_apply_sparse", "(", "\n", "grad", ",", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._resource_scatter_add": [[143, 149], ["tensorflow.python.framework.ops.control_dependencies", "x.value", "tensorflow.python.ops.resource_variable_ops.resource_scatter_add"], "methods", ["None"], ["", "", "def", "_resource_scatter_add", "(", "self", ",", "x", ",", "i", ",", "v", ",", "_", "=", "None", ")", ":", "\n", "# last argument allows for one overflow argument, to have the same function", "\n", "# signature as state_ops.scatter_add", "\n", "    ", "with", "ops", ".", "control_dependencies", "(", "\n", "[", "resource_variable_ops", ".", "resource_scatter_add", "(", "x", ".", "handle", ",", "i", ",", "v", ")", "]", ")", ":", "\n", "      ", "return", "x", ".", "value", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._resource_apply_sparse": [[150, 156], ["adamW.DecoupledWeightDecayExtension._decay_weights_sparse_op", "tensorflow.python.framework.ops.control_dependencies", "super()._resource_apply_sparse"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._decay_weights_sparse_op", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension._resource_apply_sparse"], ["", "", "def", "_resource_apply_sparse", "(", "self", ",", "grad", ",", "var", ",", "indices", ")", ":", "\n", "    ", "scatter_add", "=", "self", ".", "_resource_scatter_add", "\n", "decay_op", "=", "self", ".", "_decay_weights_sparse_op", "(", "var", ",", "indices", ",", "scatter_add", ")", "\n", "with", "ops", ".", "control_dependencies", "(", "[", "decay_op", "]", ")", ":", "\n", "      ", "return", "super", "(", "DecoupledWeightDecayExtension", ",", "self", ")", ".", "_resource_apply_sparse", "(", "\n", "grad", ",", "var", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.MomentumWOptimizer.__init__": [[233, 260], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["def", "__init__", "(", "self", ",", "weight_decay", ",", "learning_rate", ",", "momentum", ",", "\n", "use_locking", "=", "False", ",", "name", "=", "\"MomentumW\"", ",", "use_nesterov", "=", "False", ")", ":", "\n", "    ", "\"\"\"Construct a new MomentumW optimizer.\n    For further information see the documentation of the Momentum Optimizer.\n    Args:\n      weight_decay:  A `Tensor` or a floating point value.  The weight decay.\n      learning_rate: A `Tensor` or a floating point value.  The learning rate.\n      momentum: A `Tensor` or a floating point value.  The momentum.\n      use_locking: If `True` use locks for update operations.\n      name: Optional name prefix for the operations created when applying\n        gradients.  Defaults to \"Momentum\".\n      use_nesterov: If `True` use Nesterov Momentum.\n        See [Sutskever et al., 2013](\n        http://jmlr.org/proceedings/papers/v28/sutskever13.pdf).\n        This implementation always computes gradients at the value of the\n        variable(s) passed to the optimizer. Using Nesterov Momentum makes the\n        variable(s) track the values called `theta_t + mu*v_t` in the paper.\n    @compatibility(eager)\n    When eager execution is enabled, learning_rate, weight_decay and momentum\n    can each be a callable that takes no arguments and returns the actual value\n    to use. This can be useful for changing these values across different\n    invocations of optimizer functions.\n    @end_compatibility\n    \"\"\"", "\n", "super", "(", "MomentumWOptimizer", ",", "self", ")", ".", "__init__", "(", "\n", "weight_decay", ",", "learning_rate", "=", "learning_rate", ",", "momentum", "=", "momentum", ",", "\n", "use_locking", "=", "use_locking", ",", "name", "=", "name", ",", "use_nesterov", "=", "use_nesterov", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.AdamWOptimizer.__init__": [[281, 302], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["def", "__init__", "(", "self", ",", "weight_decay", ",", "learning_rate", "=", "0.001", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "\n", "epsilon", "=", "1e-8", ",", "use_locking", "=", "False", ",", "name", "=", "\"AdamW\"", ")", ":", "\n", "    ", "\"\"\"Construct a new AdamW optimizer.\n    For further information see the documentation of the Adam Optimizer.\n    Args:\n      weight_decay:  A `Tensor` or a floating point value.  The weight decay.\n      learning_rate: A Tensor or a floating point value.  The learning rate.\n      beta1: A float value or a constant float tensor.\n        The exponential decay rate for the 1st moment estimates.\n      beta2: A float value or a constant float tensor.\n        The exponential decay rate for the 2nd moment estimates.\n      epsilon: A small constant for numerical stability. This epsilon is\n        \"epsilon hat\" in the Kingma and Ba paper (in the formula just before\n        Section 2.1), not the epsilon in Algorithm 1 of the paper.\n      use_locking: If True use locks for update operations.\n      name: Optional name for the operations created when applying gradients.\n        Defaults to \"Adam\".\n    \"\"\"", "\n", "super", "(", "AdamWOptimizer", ",", "self", ")", ".", "__init__", "(", "\n", "weight_decay", ",", "learning_rate", "=", "learning_rate", ",", "beta1", "=", "beta1", ",", "beta2", "=", "beta2", ",", "\n", "epsilon", "=", "epsilon", ",", "use_locking", "=", "use_locking", ",", "name", "=", "name", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.extend_with_decoupled_weight_decay": [[158, 210], ["super().__init__"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["", "", "", "def", "extend_with_decoupled_weight_decay", "(", "base_optimizer", ")", ":", "\n", "  ", "\"\"\"Factory function returning an optimizer class with decoupled weight decay.\n  Returns an optimizer class. An instance of the returned class computes the\n  update step of `base_optimizer` and additionally decays the weights.\n  E.g., the class returned by\n  `extend_with_decoupled_weight_decay(tf.train.AdamOptimizer)` is equivalent to\n  `tf.contrib.opt.AdamWOptimizer`.\n  The API of the new optimizer class slightly differs from the API of the\n  base optimizer:\n  - The first argument to the constructor is the weight decay rate.\n  - `minimize` and `apply_gradients` accept the optional keyword argument\n    `decay_var_list`, which specifies the variables that should be decayed.\n    If `None`, all variables that are optimized are decayed.\n  Usage example:\n  ```python\n  # MyAdamW is a new class\n  MyAdamW = extend_with_decoupled_weight_decay(tf.train.AdamOptimizer)\n  # Create a MyAdamW object\n  optimizer = MyAdamW(weight_decay=0.001, learning_rate=0.001)\n  sess.run(optimizer.minimize(loss, decay_variables=[var1, var2]))\n  Note that this extension decays weights BEFORE applying the update based\n  on the gradient, i.e. this extension only has the desired behaviour for\n  optimizers which do not depend on the value of'var' in the update step!\n  ```\n  Args:\n    base_optimizer: An optimizer class that inherits from tf.train.Optimizer.\n  Returns:\n    A new optimizer class that inherits from DecoupledWeightDecayExtension\n    and base_optimizer.\n  \"\"\"", "\n", "class", "OptimizerWithDecoupledWeightDecay", "(", "DecoupledWeightDecayExtension", ",", "\n", "base_optimizer", ")", ":", "\n", "    ", "\"\"\"Base_optimizer with decoupled weight decay.\n    This class computes the update step of `base_optimizer` and\n    additionally decays the variable with the weight decay being decoupled from\n    the optimization steps w.r.t. to the loss function, as described by\n    Loshchilov & Hutter (https://arxiv.org/pdf/1711.05101.pdf).\n    For SGD variants, this simplifies hyperparameter search since\n    it decouples the settings of weight decay and learning rate.\n    For adaptive gradient algorithms, it regularizes variables with large\n    gradients more than L2 regularization would, which was shown to yield\n    better training loss and generalization error in the paper above.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "weight_decay", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# super delegation is necessary here", "\n", "# pylint: disable=useless-super-delegation", "\n", "      ", "super", "(", "OptimizerWithDecoupledWeightDecay", ",", "self", ")", ".", "__init__", "(", "\n", "weight_decay", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "# pylint: enable=useless-super-delegation", "\n", "\n", "", "", "return", "OptimizerWithDecoupledWeightDecay", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.map_inference.MAP_inference.__init__": [[9, 12], ["edward.MAP.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["  ", "def", "__init__", "(", "self", ",", "scope", ",", "**", "kwargs", ")", ":", "\n", "    ", "self", ".", "scope", "=", "scope", "\n", "super", "(", "MAP_inference", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.map_inference.MAP_inference.build_loss_and_gradients": [[13, 52], ["tensorflow.get_default_graph().unique_name", "six.iteritems", "six.iterkeys", "six.iterkeys", "tensorflow.reduce_sum", "tensorflow.gradients", "list", "qz.value", "isinstance", "edward.util.copy", "tensorflow.reduce_sum", "isinstance", "tensorflow.losses.get_regularization_losses", "zip", "tensorflow.get_default_graph", "six.iteritems", "isinstance", "tensorflow.reduce_sum", "qx.value", "map_inference.MAP_inference.scale.get", "edward.util.copy.log_prob", "edward.util.copy", "map_inference.MAP_inference.scale.get", "edward.util.copy.log_prob"], "methods", ["None"], ["", "def", "build_loss_and_gradients", "(", "self", ",", "var_list", ")", ":", "\n", "    ", "\"\"\"Build loss function. Its automatic differentiation\n    is the gradient of\n\n    $- \\log p(x,z).$\n    \"\"\"", "\n", "# Form dictionary in order to replace conditioning on prior or", "\n", "# observed variable with conditioning on a specific value.", "\n", "scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"inference\"", ")", "\n", "dict_swap", "=", "{", "z", ":", "qz", ".", "value", "(", ")", "\n", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "self", ".", "latent_vars", ")", "}", "\n", "for", "x", ",", "qx", "in", "six", ".", "iteritems", "(", "self", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "ed", ".", "RandomVariable", ")", ":", "\n", "        ", "if", "isinstance", "(", "qx", ",", "ed", ".", "RandomVariable", ")", ":", "\n", "          ", "dict_swap", "[", "x", "]", "=", "qx", ".", "value", "(", ")", "\n", "", "else", ":", "\n", "          ", "dict_swap", "[", "x", "]", "=", "qx", "\n", "\n", "", "", "", "p_log_prob", "=", "0.0", "\n", "for", "z", "in", "six", ".", "iterkeys", "(", "self", ".", "latent_vars", ")", ":", "\n", "      ", "z_copy", "=", "copy", "(", "z", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_prob", "+=", "tf", ".", "reduce_sum", "(", "\n", "self", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "z_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "\n", "", "for", "x", "in", "six", ".", "iterkeys", "(", "self", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "ed", ".", "RandomVariable", ")", ":", "\n", "        ", "if", "dict_swap", ":", "\n", "          ", "x_copy", "=", "copy", "(", "x", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "", "else", ":", "\n", "          ", "x_copy", "=", "x", "\n", "", "p_log_prob", "+=", "tf", ".", "reduce_sum", "(", "\n", "self", ".", "scale", ".", "get", "(", "x", ",", "1.0", ")", "*", "x_copy", ".", "log_prob", "(", "dict_swap", "[", "x", "]", ")", ")", "\n", "\n", "", "", "reg_penalty", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "losses", ".", "get_regularization_losses", "(", "scope", "=", "self", ".", "scope", ")", ")", "\n", "loss", "=", "-", "p_log_prob", "+", "reg_penalty", "\n", "\n", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "var_list", ")", "\n", "grads_and_vars", "=", "list", "(", "zip", "(", "grads", ",", "var_list", ")", ")", "\n", "return", "loss", ",", "grads_and_vars", "\n", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.MLP.__init__": [[15, 70], ["cde.XavierUniformInitializer", "tensorflow.zeros_initializer", "cde.XavierUniformInitializer", "tensorflow.zeros_initializer", "cde.utils.serializable.Serializable.quick_init", "locals", "tensorflow.variable_scope", "enumerate", "cde.DenseLayer", "network.MLP._layers.append", "cde.get_output", "cde.utils.tf_utils.layers_powered.LayersPowered.__init__", "cde.InputLayer", "cde.batch_norm", "cde.DenseLayer", "network.MLP._layers.append", "cde.batch_norm", "cde.DropoutLayer", "cde.batch_norm"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.batch_norm", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.batch_norm", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.batch_norm"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "output_dim", ",", "hidden_sizes", ",", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", ",", "hidden_W_init", "=", "L", ".", "XavierUniformInitializer", "(", ")", ",", "hidden_b_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "output_W_init", "=", "L", ".", "XavierUniformInitializer", "(", ")", ",", "output_b_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "input_var", "=", "None", ",", "input_layer", "=", "None", ",", "input_shape", "=", "None", ",", "batch_normalization", "=", "False", ",", "weight_normalization", "=", "False", ",", "\n", "dropout_ph", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param dropout_ph: None if no dropout should be used. Else a scalar placeholder that determines the prob of dropping a node.\n        Remember to set placeholder to Zero during test / eval\n        \"\"\"", "\n", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "input_layer", "is", "None", ":", "\n", "                ", "l_in", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", ")", "+", "input_shape", ",", "input_var", "=", "input_var", ",", "name", "=", "\"input\"", ")", "\n", "", "else", ":", "\n", "                ", "l_in", "=", "input_layer", "\n", "", "self", ".", "_layers", "=", "[", "l_in", "]", "\n", "l_hid", "=", "l_in", "\n", "if", "batch_normalization", ":", "\n", "                ", "l_hid", "=", "L", ".", "batch_norm", "(", "l_hid", ")", "\n", "", "for", "idx", ",", "hidden_size", "in", "enumerate", "(", "hidden_sizes", ")", ":", "\n", "                ", "l_hid", "=", "L", ".", "DenseLayer", "(", "\n", "l_hid", ",", "\n", "num_units", "=", "hidden_size", ",", "\n", "nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "name", "=", "\"hidden_%d\"", "%", "idx", ",", "\n", "W", "=", "hidden_W_init", ",", "\n", "b", "=", "hidden_b_init", ",", "\n", "weight_normalization", "=", "weight_normalization", "\n", ")", "\n", "if", "dropout_ph", "is", "not", "None", ":", "\n", "                    ", "l_hid", "=", "L", ".", "DropoutLayer", "(", "l_hid", ",", "dropout_ph", ",", "rescale", "=", "False", ")", "\n", "", "if", "batch_normalization", ":", "\n", "                    ", "l_hid", "=", "L", ".", "batch_norm", "(", "l_hid", ")", "\n", "", "self", ".", "_layers", ".", "append", "(", "l_hid", ")", "\n", "", "l_out", "=", "L", ".", "DenseLayer", "(", "\n", "l_hid", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "nonlinearity", "=", "output_nonlinearity", ",", "\n", "name", "=", "\"output\"", ",", "\n", "W", "=", "output_W_init", ",", "\n", "b", "=", "output_b_init", ",", "\n", "weight_normalization", "=", "weight_normalization", "\n", ")", "\n", "if", "batch_normalization", ":", "\n", "                ", "l_out", "=", "L", ".", "batch_norm", "(", "l_out", ")", "\n", "", "self", ".", "_layers", ".", "append", "(", "l_out", ")", "\n", "self", ".", "_l_in", "=", "l_in", "\n", "self", ".", "_l_out", "=", "l_out", "\n", "# self._input_var = l_in.input_var", "\n", "self", ".", "_output", "=", "L", ".", "get_output", "(", "l_out", ")", "\n", "\n", "LayersPowered", ".", "__init__", "(", "self", ",", "l_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.MLP.input_layer": [[71, 74], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "input_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.MLP.output_layer": [[75, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_out", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.MLP.input_var": [[79, 82], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_var", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", ".", "input_var", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.MLP.layers": [[83, 86], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.MLP.output": [[87, 90], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.GRUNetwork.__init__": [[93, 147], ["tensorflow.variable_scope", "cde.InputLayer", "cde.InputLayer", "gru_layer_cls", "cde.ReshapeLayer", "cde.DenseLayer", "cde.OpLayer", "gru_layer_cls.get_step_layer", "cde.DenseLayer", "cde.InputLayer", "dict", "tensorflow.reshape", "tensorflow.stack", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfBasicLSTMLayer.get_step_layer"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "input_shape", ",", "output_dim", ",", "hidden_dim", ",", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "gru_layer_cls", "=", "L", ".", "GRULayer", ",", "\n", "output_nonlinearity", "=", "None", ",", "input_var", "=", "None", ",", "input_layer", "=", "None", ",", "layer_args", "=", "None", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "input_layer", "is", "None", ":", "\n", "                ", "l_in", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "None", ")", "+", "input_shape", ",", "input_var", "=", "input_var", ",", "name", "=", "\"input\"", ")", "\n", "", "else", ":", "\n", "                ", "l_in", "=", "input_layer", "\n", "", "l_step_input", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", ")", "+", "input_shape", ",", "name", "=", "\"step_input\"", ")", "\n", "l_step_prev_state", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "hidden_dim", ")", ",", "name", "=", "\"step_prev_state\"", ")", "\n", "if", "layer_args", "is", "None", ":", "\n", "                ", "layer_args", "=", "dict", "(", ")", "\n", "", "l_gru", "=", "gru_layer_cls", "(", "l_in", ",", "num_units", "=", "hidden_dim", ",", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "hidden_init_trainable", "=", "False", ",", "name", "=", "\"gru\"", ",", "**", "layer_args", ")", "\n", "l_gru_flat", "=", "L", ".", "ReshapeLayer", "(", "\n", "l_gru", ",", "shape", "=", "(", "-", "1", ",", "hidden_dim", ")", ",", "\n", "name", "=", "\"gru_flat\"", "\n", ")", "\n", "l_output_flat", "=", "L", ".", "DenseLayer", "(", "\n", "l_gru_flat", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "nonlinearity", "=", "output_nonlinearity", ",", "\n", "name", "=", "\"output_flat\"", "\n", ")", "\n", "l_output", "=", "L", ".", "OpLayer", "(", "\n", "l_output_flat", ",", "\n", "op", "=", "lambda", "flat_output", ",", "l_input", ":", "\n", "tf", ".", "reshape", "(", "flat_output", ",", "tf", ".", "stack", "(", "(", "tf", ".", "shape", "(", "l_input", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "l_input", ")", "[", "1", "]", ",", "-", "1", ")", ")", ")", ",", "\n", "shape_op", "=", "lambda", "flat_output_shape", ",", "l_input_shape", ":", "\n", "(", "l_input_shape", "[", "0", "]", ",", "l_input_shape", "[", "1", "]", ",", "flat_output_shape", "[", "-", "1", "]", ")", ",", "\n", "extras", "=", "[", "l_in", "]", ",", "\n", "name", "=", "\"output\"", "\n", ")", "\n", "l_step_state", "=", "l_gru", ".", "get_step_layer", "(", "l_step_input", ",", "l_step_prev_state", ",", "name", "=", "\"step_state\"", ")", "\n", "l_step_hidden", "=", "l_step_state", "\n", "l_step_output", "=", "L", ".", "DenseLayer", "(", "\n", "l_step_hidden", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "nonlinearity", "=", "output_nonlinearity", ",", "\n", "W", "=", "l_output_flat", ".", "W", ",", "\n", "b", "=", "l_output_flat", ".", "b", ",", "\n", "name", "=", "\"step_output\"", "\n", ")", "\n", "\n", "self", ".", "_l_in", "=", "l_in", "\n", "self", ".", "_hid_init_param", "=", "l_gru", ".", "h0", "\n", "self", ".", "_l_gru", "=", "l_gru", "\n", "self", ".", "_l_out", "=", "l_output", "\n", "self", ".", "_l_step_input", "=", "l_step_input", "\n", "self", ".", "_l_step_prev_state", "=", "l_step_prev_state", "\n", "self", ".", "_l_step_hidden", "=", "l_step_hidden", "\n", "self", ".", "_l_step_state", "=", "l_step_state", "\n", "self", ".", "_l_step_output", "=", "l_step_output", "\n", "self", ".", "_hidden_dim", "=", "hidden_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.GRUNetwork.state_dim": [[148, 151], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "state_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.GRUNetwork.hidden_dim": [[152, 155], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.GRUNetwork.input_layer": [[156, 159], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.GRUNetwork.input_var": [[160, 163], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_var", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", ".", "input_var", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.GRUNetwork.output_layer": [[164, 167], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_out", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.GRUNetwork.recurrent_layer": [[168, 171], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_gru", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.GRUNetwork.step_input_layer": [[172, 175], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_input_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_input", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.GRUNetwork.step_prev_state_layer": [[176, 179], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_prev_state_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_prev_state", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.GRUNetwork.step_hidden_layer": [[180, 183], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_hidden_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.GRUNetwork.step_state_layer": [[184, 187], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_state_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_state", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.GRUNetwork.step_output_layer": [[188, 191], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_output", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.GRUNetwork.hid_init_param": [[192, 195], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hid_init_param", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hid_init_param", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.GRUNetwork.state_init_param": [[196, 199], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_init_param", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hid_init_param", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.__init__": [[202, 262], ["tensorflow.variable_scope", "cde.InputLayer", "cde.InputLayer", "lstm_layer_cls", "cde.ReshapeLayer", "cde.DenseLayer", "cde.OpLayer", "lstm_layer_cls.get_step_layer", "cde.SliceLayer", "cde.SliceLayer", "cde.DenseLayer", "cde.InputLayer", "dict", "slice", "slice", "tensorflow.reshape", "tensorflow.stack", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfBasicLSTMLayer.get_step_layer"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "input_shape", ",", "output_dim", ",", "hidden_dim", ",", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "lstm_layer_cls", "=", "L", ".", "LSTMLayer", ",", "\n", "output_nonlinearity", "=", "None", ",", "input_var", "=", "None", ",", "input_layer", "=", "None", ",", "forget_bias", "=", "1.0", ",", "use_peepholes", "=", "False", ",", "\n", "layer_args", "=", "None", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "input_layer", "is", "None", ":", "\n", "                ", "l_in", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "None", ")", "+", "input_shape", ",", "input_var", "=", "input_var", ",", "name", "=", "\"input\"", ")", "\n", "", "else", ":", "\n", "                ", "l_in", "=", "input_layer", "\n", "", "l_step_input", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", ")", "+", "input_shape", ",", "name", "=", "\"step_input\"", ")", "\n", "# contains previous hidden and cell state", "\n", "l_step_prev_state", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "hidden_dim", "*", "2", ")", ",", "name", "=", "\"step_prev_state\"", ")", "\n", "if", "layer_args", "is", "None", ":", "\n", "                ", "layer_args", "=", "dict", "(", ")", "\n", "", "l_lstm", "=", "lstm_layer_cls", "(", "l_in", ",", "num_units", "=", "hidden_dim", ",", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "hidden_init_trainable", "=", "False", ",", "name", "=", "\"lstm\"", ",", "forget_bias", "=", "forget_bias", ",", "\n", "cell_init_trainable", "=", "False", ",", "use_peepholes", "=", "use_peepholes", ",", "**", "layer_args", ")", "\n", "l_lstm_flat", "=", "L", ".", "ReshapeLayer", "(", "\n", "l_lstm", ",", "shape", "=", "(", "-", "1", ",", "hidden_dim", ")", ",", "\n", "name", "=", "\"lstm_flat\"", "\n", ")", "\n", "l_output_flat", "=", "L", ".", "DenseLayer", "(", "\n", "l_lstm_flat", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "nonlinearity", "=", "output_nonlinearity", ",", "\n", "name", "=", "\"output_flat\"", "\n", ")", "\n", "l_output", "=", "L", ".", "OpLayer", "(", "\n", "l_output_flat", ",", "\n", "op", "=", "lambda", "flat_output", ",", "l_input", ":", "\n", "tf", ".", "reshape", "(", "flat_output", ",", "tf", ".", "stack", "(", "(", "tf", ".", "shape", "(", "l_input", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "l_input", ")", "[", "1", "]", ",", "-", "1", ")", ")", ")", ",", "\n", "shape_op", "=", "lambda", "flat_output_shape", ",", "l_input_shape", ":", "\n", "(", "l_input_shape", "[", "0", "]", ",", "l_input_shape", "[", "1", "]", ",", "flat_output_shape", "[", "-", "1", "]", ")", ",", "\n", "extras", "=", "[", "l_in", "]", ",", "\n", "name", "=", "\"output\"", "\n", ")", "\n", "l_step_state", "=", "l_lstm", ".", "get_step_layer", "(", "l_step_input", ",", "l_step_prev_state", ",", "name", "=", "\"step_state\"", ")", "\n", "l_step_hidden", "=", "L", ".", "SliceLayer", "(", "l_step_state", ",", "indices", "=", "slice", "(", "hidden_dim", ")", ",", "name", "=", "\"step_hidden\"", ")", "\n", "l_step_cell", "=", "L", ".", "SliceLayer", "(", "l_step_state", ",", "indices", "=", "slice", "(", "hidden_dim", ",", "None", ")", ",", "name", "=", "\"step_cell\"", ")", "\n", "l_step_output", "=", "L", ".", "DenseLayer", "(", "\n", "l_step_hidden", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "nonlinearity", "=", "output_nonlinearity", ",", "\n", "W", "=", "l_output_flat", ".", "W", ",", "\n", "b", "=", "l_output_flat", ".", "b", ",", "\n", "name", "=", "\"step_output\"", "\n", ")", "\n", "\n", "self", ".", "_l_in", "=", "l_in", "\n", "self", ".", "_hid_init_param", "=", "l_lstm", ".", "h0", "\n", "self", ".", "_cell_init_param", "=", "l_lstm", ".", "c0", "\n", "self", ".", "_l_lstm", "=", "l_lstm", "\n", "self", ".", "_l_out", "=", "l_output", "\n", "self", ".", "_l_step_input", "=", "l_step_input", "\n", "self", ".", "_l_step_prev_state", "=", "l_step_prev_state", "\n", "self", ".", "_l_step_hidden", "=", "l_step_hidden", "\n", "self", ".", "_l_step_cell", "=", "l_step_cell", "\n", "self", ".", "_l_step_state", "=", "l_step_state", "\n", "self", ".", "_l_step_output", "=", "l_step_output", "\n", "self", ".", "_hidden_dim", "=", "hidden_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.state_dim": [[263, 266], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "state_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_dim", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.input_layer": [[267, 270], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.input_var": [[271, 274], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_var", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", ".", "input_var", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.output_layer": [[275, 278], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_out", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.recurrent_layer": [[279, 282], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_lstm", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.step_input_layer": [[283, 286], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_input_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_input", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.step_prev_state_layer": [[287, 290], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_prev_state_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_prev_state", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.step_hidden_layer": [[291, 294], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_hidden_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.step_state_layer": [[295, 298], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_state_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_state", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.step_cell_layer": [[299, 302], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_cell_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_cell", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.step_output_layer": [[303, 306], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_output", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.hid_init_param": [[307, 310], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hid_init_param", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hid_init_param", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.cell_init_param": [[311, 314], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cell_init_param", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cell_init_param", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.network.LSTMNetwork.state_init_param": [[315, 318], ["tensorflow.concat"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_init_param", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "self", ".", "_hid_init_param", ",", "self", ".", "_cell_init_param", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.__init__": [[118, 141], ["isinstance", "collections.OrderedDict", "any", "ValueError", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "name", "=", "None", ",", "variable_reuse", "=", "None", ",", "weight_normalization", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "isinstance", "(", "incoming", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "input_shape", "=", "incoming", "\n", "self", ".", "input_layer", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_shape", "=", "incoming", ".", "output_shape", "\n", "self", ".", "input_layer", "=", "incoming", "\n", "", "self", ".", "params", "=", "OrderedDict", "(", ")", "\n", "self", ".", "weight_normalization", "=", "weight_normalization", "\n", "\n", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "\"%s_%d\"", "%", "(", "type", "(", "self", ")", ".", "__name__", ",", "G", ".", "_n_layers", ")", "\n", "G", ".", "_n_layers", "+=", "1", "\n", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "variable_reuse", "=", "variable_reuse", "\n", "self", ".", "get_output_kwargs", "=", "[", "]", "\n", "\n", "if", "any", "(", "d", "is", "not", "None", "and", "d", "<=", "0", "for", "d", "in", "self", ".", "input_shape", ")", ":", "\n", "            ", "raise", "ValueError", "(", "(", "\n", "\"Cannot create Layer with a non-positive input_shape \"", "\n", "\"dimension. input_shape=%r, self.name=%r\"", ")", "%", "(", "\n", "self", ".", "input_shape", ",", "self", ".", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.output_shape": [[142, 152], ["layers.Layer.get_output_shape_for", "any", "ValueError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ElemwiseSumLayer.get_output_shape_for"], ["", "", "@", "property", "\n", "def", "output_shape", "(", "self", ")", ":", "\n", "        ", "shape", "=", "self", ".", "get_output_shape_for", "(", "self", ".", "input_shape", ")", "\n", "if", "any", "(", "isinstance", "(", "s", ",", "(", "tf", ".", "Variable", ",", "tf", ".", "Tensor", ")", ")", "for", "s", "in", "shape", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"%s returned a symbolic output shape from its \"", "\n", "\"get_output_shape_for() method: %r. This is not \"", "\n", "\"allowed; shapes must be tuples of integers for \"", "\n", "\"fixed-size dimensions and Nones for variable \"", "\n", "\"dimensions.\"", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "shape", ")", ")", "\n", "", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.get_output_shape_for": [[153, 155], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.get_output_for": [[156, 158], ["None"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param_plain": [[159, 167], ["tensorflow.variable_scope", "tags.get", "layers.create_param", "set", "tags.get", "list", "tags.items"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.create_param"], ["", "def", "add_param_plain", "(", "self", ",", "spec", ",", "shape", ",", "name", ",", "**", "tags", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ",", "reuse", "=", "self", ".", "variable_reuse", ")", ":", "\n", "            ", "tags", "[", "'trainable'", "]", "=", "tags", ".", "get", "(", "'trainable'", ",", "True", ")", "\n", "if", "'regularizable'", "not", "in", "tags", ":", "\n", "                ", "tags", "[", "'regularizable'", "]", "=", "tags", ".", "get", "(", "'regularizable'", ",", "True", ")", "\n", "", "param", "=", "create_param", "(", "spec", ",", "shape", ",", "name", ",", "**", "tags", ")", "\n", "self", ".", "params", "[", "param", "]", "=", "set", "(", "tag", "for", "tag", ",", "value", "in", "list", "(", "tags", ".", "items", "(", ")", ")", "if", "value", ")", "\n", "return", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param": [[168, 184], ["layers.Layer.add_param_plain", "name.startswith", "len", "layers.Layer.add_param_plain", "layers.Layer.get_shape", "tensorflow.ones_initializer", "len", "layers.Layer.add_param_plain", "tensorflow.reshape", "tensorflow.sqrt", "layers.Layer.get_shape", "tensorflow.ones_initializer", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.sqrt", "tensorflow.square", "tensorflow.reduce_sum", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param_plain", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param_plain", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param_plain"], ["", "", "def", "add_param", "(", "self", ",", "spec", ",", "shape", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "        ", "param", "=", "self", ".", "add_param_plain", "(", "spec", ",", "shape", ",", "name", ",", "**", "kwargs", ")", "\n", "if", "name", "is", "not", "None", "and", "name", ".", "startswith", "(", "\"W\"", ")", "and", "self", ".", "weight_normalization", ":", "\n", "# Hacky: check if the parameter is a weight matrix. If so, apply weight normalization", "\n", "            ", "if", "len", "(", "param", ".", "get_shape", "(", ")", ")", "==", "2", ":", "\n", "                ", "v", "=", "param", "\n", "g", "=", "self", ".", "add_param_plain", "(", "tf", ".", "ones_initializer", "(", ")", ",", "(", "shape", "[", "1", "]", ",", ")", ",", "name", "=", "name", "+", "\"_wn/g\"", ")", "\n", "param", "=", "v", "*", "(", "tf", ".", "reshape", "(", "g", ",", "(", "1", ",", "-", "1", ")", ")", "/", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "v", ")", ",", "0", ",", "keep_dims", "=", "True", ")", ")", ")", "\n", "", "elif", "len", "(", "param", ".", "get_shape", "(", ")", ")", "==", "4", ":", "\n", "                ", "v", "=", "param", "\n", "g", "=", "self", ".", "add_param_plain", "(", "tf", ".", "ones_initializer", "(", ")", ",", "(", "shape", "[", "3", "]", ",", ")", ",", "name", "=", "name", "+", "\"_wn/g\"", ")", "\n", "param", "=", "v", "*", "(", "tf", ".", "reshape", "(", "g", ",", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "/", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "v", ")", ",", "[", "0", ",", "1", ",", "2", "]", ",", "\n", "keep_dims", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "return", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.get_params": [[185, 201], ["list", "set", "set", "layers.Layer.params.keys", "list", "list", "tags.items", "tags.items"], "methods", ["None"], ["", "def", "get_params", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "result", "=", "list", "(", "self", ".", "params", ".", "keys", "(", ")", ")", "\n", "\n", "only", "=", "set", "(", "tag", "for", "tag", ",", "value", "in", "list", "(", "tags", ".", "items", "(", ")", ")", "if", "value", ")", "\n", "if", "only", ":", "\n", "# retain all parameters that have all of the tags in `only`", "\n", "            ", "result", "=", "[", "param", "for", "param", "in", "result", "\n", "if", "not", "(", "only", "-", "self", ".", "params", "[", "param", "]", ")", "]", "\n", "\n", "", "exclude", "=", "set", "(", "tag", "for", "tag", ",", "value", "in", "list", "(", "tags", ".", "items", "(", ")", ")", "if", "not", "value", ")", "\n", "if", "exclude", ":", "\n", "# retain all parameters that have none of the tags in `exclude`", "\n", "            ", "result", "=", "[", "param", "for", "param", "in", "result", "\n", "if", "not", "(", "self", ".", "params", "[", "param", "]", "&", "exclude", ")", "]", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.InputLayer.__init__": [[204, 214], ["layers.Layer.__init__", "tensorflow.placeholder", "tensorflow.variable_scope", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "input_var", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "InputLayer", ",", "self", ")", ".", "__init__", "(", "shape", ",", "**", "kwargs", ")", "\n", "self", ".", "shape", "=", "shape", "\n", "if", "input_var", "is", "None", ":", "\n", "            ", "if", "self", ".", "name", "is", "not", "None", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "                    ", "input_var", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "shape", ",", "name", "=", "\"input\"", ")", "\n", "", "", "else", ":", "\n", "                ", "input_var", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "shape", ",", "name", "=", "\"input\"", ")", "\n", "", "", "self", ".", "input_var", "=", "input_var", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.InputLayer.output_shape": [[215, 218], ["None"], "methods", ["None"], ["", "@", "Layer", ".", "output_shape", ".", "getter", "\n", "def", "output_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.MergeLayer.__init__": [[221, 231], ["collections.OrderedDict", "isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "incomings", ",", "name", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "input_shapes", "=", "[", "incoming", "if", "isinstance", "(", "incoming", ",", "tuple", ")", "\n", "else", "incoming", ".", "output_shape", "\n", "for", "incoming", "in", "incomings", "]", "\n", "self", ".", "input_layers", "=", "[", "None", "if", "isinstance", "(", "incoming", ",", "tuple", ")", "\n", "else", "incoming", "\n", "for", "incoming", "in", "incomings", "]", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "params", "=", "OrderedDict", "(", ")", "\n", "self", ".", "get_output_kwargs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.MergeLayer.output_shape": [[232, 242], ["layers.MergeLayer.get_output_shape_for", "any", "ValueError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ElemwiseSumLayer.get_output_shape_for"], ["", "@", "Layer", ".", "output_shape", ".", "getter", "\n", "def", "output_shape", "(", "self", ")", ":", "\n", "        ", "shape", "=", "self", ".", "get_output_shape_for", "(", "self", ".", "input_shapes", ")", "\n", "if", "any", "(", "isinstance", "(", "s", ",", "(", "tf", ".", "Variable", ",", "tf", ".", "Tensor", ")", ")", "for", "s", "in", "shape", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"%s returned a symbolic output shape from its \"", "\n", "\"get_output_shape_for() method: %r. This is not \"", "\n", "\"allowed; shapes must be tuples of integers for \"", "\n", "\"fixed-size dimensions and Nones for variable \"", "\n", "\"dimensions.\"", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "shape", ")", ")", "\n", "", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.MergeLayer.get_output_shape_for": [[243, 245], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.MergeLayer.get_output_for": [[246, 248], ["None"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ConcatLayer.__init__": [[263, 266], ["layers.MergeLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["def", "__init__", "(", "self", ",", "incomings", ",", "axis", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConcatLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ConcatLayer.get_output_shape_for": [[267, 287], ["tuple", "next", "all", "ValueError", "any", "sum", "zip", "all", "len", "len", "layers.ConcatLayer.get_output_shape_for.match"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "# Infer the output shape by grabbing, for each axis, the first", "\n", "# input size that is not `None` (if there is any)", "\n", "        ", "output_shape", "=", "[", "next", "(", "(", "s", "for", "s", "in", "sizes", "if", "s", "is", "not", "None", ")", ",", "None", ")", "\n", "for", "sizes", "in", "zip", "(", "*", "input_shapes", ")", "]", "\n", "\n", "def", "match", "(", "shape1", ",", "shape2", ")", ":", "\n", "            ", "return", "(", "len", "(", "shape1", ")", "==", "len", "(", "shape2", ")", "and", "\n", "all", "(", "i", "==", "self", ".", "axis", "or", "s1", "is", "None", "or", "s2", "is", "None", "or", "s1", "==", "s2", "\n", "for", "i", ",", "(", "s1", ",", "s2", ")", "in", "enumerate", "(", "zip", "(", "shape1", ",", "shape2", ")", ")", ")", ")", "\n", "\n", "# Check for compatibility with inferred output shape", "\n", "", "if", "not", "all", "(", "match", "(", "shape", ",", "output_shape", ")", "for", "shape", "in", "input_shapes", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Mismatch: input shapes must be the same except \"", "\n", "\"in the concatenation axis\"", ")", "\n", "# Infer output shape on concatenation axis and return", "\n", "", "sizes", "=", "[", "input_shape", "[", "self", ".", "axis", "]", "for", "input_shape", "in", "input_shapes", "]", "\n", "concat_size", "=", "None", "if", "any", "(", "s", "is", "None", "for", "s", "in", "sizes", ")", "else", "sum", "(", "sizes", ")", "\n", "output_shape", "[", "self", ".", "axis", "]", "=", "concat_size", "\n", "return", "tuple", "(", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ConcatLayer.get_output_for": [[288, 295], ["tensorflow.concat", "len", "numpy.core.numerictypes.find_common_type", "set", "tensorflow.cast"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "dtypes", "=", "[", "x", ".", "dtype", ".", "as_numpy_dtype", "for", "x", "in", "inputs", "]", "\n", "if", "len", "(", "set", "(", "dtypes", ")", ")", ">", "1", ":", "\n", "# need to convert to common data type", "\n", "            ", "common_dtype", "=", "np", ".", "core", ".", "numerictypes", ".", "find_common_type", "(", "[", "]", ",", "dtypes", ")", "\n", "inputs", "=", "[", "tf", ".", "cast", "(", "x", ",", "common_dtype", ")", "for", "x", "in", "inputs", "]", "\n", "", "return", "tf", ".", "concat", "(", "axis", "=", "self", ".", "axis", ",", "values", "=", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.XavierUniformInitializer.__call__": [[301, 310], ["math.sqrt", "len", "numpy.prod", "tensorflow.random_uniform_initializer"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "shape", ")", "==", "2", ":", "\n", "            ", "n_inputs", ",", "n_outputs", "=", "shape", "\n", "", "else", ":", "\n", "            ", "receptive_field_size", "=", "np", ".", "prod", "(", "shape", "[", ":", "2", "]", ")", "\n", "n_inputs", "=", "shape", "[", "-", "2", "]", "*", "receptive_field_size", "\n", "n_outputs", "=", "shape", "[", "-", "1", "]", "*", "receptive_field_size", "\n", "", "init_range", "=", "math", ".", "sqrt", "(", "6.0", "/", "(", "n_inputs", "+", "n_outputs", ")", ")", "\n", "return", "tf", ".", "random_uniform_initializer", "(", "-", "init_range", ",", "init_range", ",", "dtype", "=", "dtype", ")", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.HeUniformInitializer.__call__": [[313, 321], ["math.sqrt", "len", "numpy.prod", "tensorflow.random_uniform_initializer"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "shape", ")", "==", "2", ":", "\n", "            ", "n_inputs", ",", "_", "=", "shape", "\n", "", "else", ":", "\n", "            ", "receptive_field_size", "=", "np", ".", "prod", "(", "shape", "[", ":", "2", "]", ")", "\n", "n_inputs", "=", "shape", "[", "-", "2", "]", "*", "receptive_field_size", "\n", "", "init_range", "=", "math", ".", "sqrt", "(", "1.0", "/", "n_inputs", ")", "\n", "return", "tf", ".", "random_uniform_initializer", "(", "-", "init_range", ",", "init_range", ",", "dtype", "=", "dtype", ")", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.OrthogonalInitializer.__init__": [[332, 334], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "1.1", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.OrthogonalInitializer.__call__": [[335, 339], ["tensorflow.py_func", "result.set_shape", "layers.py_ortho_init"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.py_ortho_init"], ["", "def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "result", ",", "=", "tf", ".", "py_func", "(", "py_ortho_init", "(", "self", ".", "scale", ")", ",", "[", "shape", "]", ",", "[", "tf", ".", "float32", "]", ")", "\n", "result", ".", "set_shape", "(", "shape", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.VariableLayer.__init__": [[343, 352], ["layers.Layer.__init__", "layers.VariableLayer.add_param"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param"], ["def", "__init__", "(", "self", ",", "incoming", ",", "shape", ",", "variable", ",", "\n", "trainable", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VariableLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "param", "=", "self", ".", "add_param", "(", "\n", "variable", ",", "\n", "shape", ",", "\n", "name", "=", "\"variable\"", ",", "\n", "trainable", "=", "trainable", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.VariableLayer.output_shape": [[354, 357], ["None"], "methods", ["None"], ["", "@", "Layer", ".", "output_shape", ".", "getter", "\n", "def", "output_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.VariableLayer.get_output_shape_for": [[358, 360], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "self", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.VariableLayer.get_output_for": [[361, 363], ["None"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.NormalizationLayer.__init__": [[366, 379], ["layers.Layer.__init__", "layers.NormalizationLayer.add_param", "layers.NormalizationLayer.add_param", "tensorflow.Variable", "tensorflow.Variable", "numpy.zeros", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "feature_dim", ",", "name", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "NormalizationLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "mean", "=", "self", ".", "add_param", "(", "\n", "tf", ".", "Variable", "(", "np", ".", "zeros", "(", "feature_dim", ",", "dtype", "=", "np", ".", "float32", ")", ",", "name", "=", "name", "+", "'_mean'", ",", "trainable", "=", "False", ")", ",", "\n", "(", "feature_dim", ",", ")", ",", "\n", "name", "=", "name", "+", "'mean'", ",", "\n", "trainable", "=", "False", "\n", ")", "\n", "self", ".", "std", "=", "self", ".", "add_param", "(", "\n", "tf", ".", "Variable", "(", "np", ".", "ones", "(", "feature_dim", ",", "dtype", "=", "np", ".", "float32", ")", ",", "name", "=", "name", "+", "'_std'", ",", "trainable", "=", "False", ")", ",", "\n", "(", "feature_dim", ",", ")", ",", "\n", "name", "=", "name", "+", "'std'", ",", "\n", "trainable", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.NormalizationLayer.get_output_shape_for": [[381, 383], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.NormalizationLayer.get_output_for": [[384, 386], ["None"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "(", "input", "-", "self", ".", "mean", ")", "/", "(", "self", ".", "std", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ParamLayer.__init__": [[389, 398], ["tensorflow.zeros_initializer", "layers.Layer.__init__", "layers.ParamLayer.add_param"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "param", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "trainable", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ParamLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "param", "=", "self", ".", "add_param", "(", "\n", "param", ",", "\n", "(", "num_units", ",", ")", ",", "\n", "name", "=", "\"param\"", ",", "\n", "trainable", "=", "trainable", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ParamLayer.get_output_shape_for": [[400, 402], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_units", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ParamLayer.get_output_for": [[403, 409], ["tensorflow.reshape", "tensorflow.concat", "tensorflow.tile", "input.get_shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "ndim", "=", "input", ".", "get_shape", "(", ")", ".", "ndims", "\n", "reshaped_param", "=", "tf", ".", "reshape", "(", "self", ".", "param", ",", "(", "1", ",", ")", "*", "(", "ndim", "-", "1", ")", "+", "(", "self", ".", "num_units", ",", ")", ")", "\n", "tile_arg", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "tf", ".", "shape", "(", "input", ")", "[", ":", "ndim", "-", "1", "]", ",", "[", "1", "]", "]", ")", "\n", "tiled", "=", "tf", ".", "tile", "(", "reshaped_param", ",", "tile_arg", ")", "\n", "return", "tiled", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.OpLayer.__init__": [[412, 421], ["layers.MergeLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "op", ",", "\n", "shape_op", "=", "lambda", "x", ":", "x", ",", "extras", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "extras", "is", "None", ":", "\n", "            ", "extras", "=", "[", "]", "\n", "", "incomings", "=", "[", "incoming", "]", "+", "extras", "\n", "super", "(", "OpLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "op", "=", "op", "\n", "self", ".", "shape_op", "=", "shape_op", "\n", "self", ".", "incomings", "=", "incomings", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.OpLayer.get_output_shape_for": [[422, 424], ["layers.OpLayer.shape_op"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "return", "self", ".", "shape_op", "(", "*", "input_shapes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.OpLayer.get_output_for": [[425, 427], ["layers.OpLayer.op"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.DenseLayer.__init__": [[430, 444], ["layers.XavierUniformInitializer", "tensorflow.zeros_initializer", "layers.Layer.__init__", "int", "layers.DenseLayer.add_param", "numpy.prod", "layers.DenseLayer.add_param"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "nonlinearity", "=", "None", ",", "W", "=", "XavierUniformInitializer", "(", ")", ",", "b", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DenseLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "nonlinearity", "=", "tf", ".", "identity", "if", "nonlinearity", "is", "None", "else", "nonlinearity", "\n", "\n", "self", ".", "num_units", "=", "num_units", "\n", "\n", "num_inputs", "=", "int", "(", "np", ".", "prod", "(", "self", ".", "input_shape", "[", "1", ":", "]", ")", ")", "\n", "\n", "self", ".", "W", "=", "self", ".", "add_param", "(", "W", ",", "(", "num_inputs", ",", "num_units", ")", ",", "name", "=", "\"W\"", ")", "\n", "if", "b", "is", "None", ":", "\n", "            ", "self", ".", "b", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "b", "=", "self", ".", "add_param", "(", "b", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.DenseLayer.get_output_shape_for": [[445, 447], ["None"], "methods", ["None"], ["", "", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "self", ".", "num_units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.DenseLayer.get_output_for": [[448, 457], ["tensorflow.matmul", "layers.DenseLayer.nonlinearity", "tensorflow.reshape", "tensorflow.reshape.get_shape", "tensorflow.stack", "tensorflow.expand_dims", "tensorflow.shape"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "input", ".", "get_shape", "(", ")", ".", "ndims", ">", "2", ":", "\n", "# if the input has more than two dimensions, flatten it into a", "\n", "# batch of feature vectors.", "\n", "            ", "input", "=", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "[", "tf", ".", "shape", "(", "input", ")", "[", "0", "]", ",", "-", "1", "]", ")", ")", "\n", "", "activation", "=", "tf", ".", "matmul", "(", "input", ",", "self", ".", "W", ")", "\n", "if", "self", ".", "b", "is", "not", "None", ":", "\n", "            ", "activation", "=", "activation", "+", "tf", ".", "expand_dims", "(", "self", ".", "b", ",", "0", ")", "\n", "", "return", "self", ".", "nonlinearity", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.BaseConvLayer.__init__": [[460, 503], ["layers.XavierUniformInitializer", "tensorflow.zeros_initializer", "layers.Layer.__init__", "layers.as_tuple", "layers.as_tuple", "layers.BaseConvLayer.add_param", "any", "layers.BaseConvLayer.get_W_shape", "layers.BaseConvLayer.add_param", "len", "ValueError", "NotImplementedError", "len"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.as_tuple", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.as_tuple", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.BaseConvLayer.get_W_shape", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "num_filters", ",", "filter_size", ",", "stride", "=", "1", ",", "pad", "=", "\"VALID\"", ",", "\n", "untie_biases", "=", "False", ",", "\n", "W", "=", "XavierUniformInitializer", "(", ")", ",", "b", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "n", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Input is assumed to be of shape batch*height*width*channels\n        \"\"\"", "\n", "super", "(", "BaseConvLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "if", "nonlinearity", "is", "None", ":", "\n", "            ", "self", ".", "nonlinearity", "=", "tf", ".", "identity", "\n", "", "else", ":", "\n", "            ", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "\n", "", "if", "n", "is", "None", ":", "\n", "            ", "n", "=", "len", "(", "self", ".", "input_shape", ")", "-", "2", "\n", "", "elif", "n", "!=", "len", "(", "self", ".", "input_shape", ")", "-", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"Tried to create a %dD convolution layer with \"", "\n", "\"input shape %r. Expected %d input dimensions \"", "\n", "\"(batchsize, channels, %d spatial dimensions).\"", "%", "\n", "(", "n", ",", "self", ".", "input_shape", ",", "n", "+", "2", ",", "n", ")", ")", "\n", "", "self", ".", "n", "=", "n", "\n", "self", ".", "num_filters", "=", "num_filters", "\n", "self", ".", "filter_size", "=", "as_tuple", "(", "filter_size", ",", "n", ",", "int", ")", "\n", "self", ".", "stride", "=", "as_tuple", "(", "stride", ",", "n", ",", "int", ")", "\n", "self", ".", "untie_biases", "=", "untie_biases", "\n", "\n", "self", ".", "pad", "=", "pad", "\n", "\n", "if", "pad", "==", "'SAME'", ":", "\n", "            ", "if", "any", "(", "s", "%", "2", "==", "0", "for", "s", "in", "self", ".", "filter_size", ")", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "'`same` padding requires odd filter size.'", ")", "\n", "\n", "", "", "self", ".", "W", "=", "self", ".", "add_param", "(", "W", ",", "self", ".", "get_W_shape", "(", ")", ",", "name", "=", "\"W\"", ")", "\n", "if", "b", "is", "None", ":", "\n", "            ", "self", ".", "b", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "untie_biases", ":", "\n", "                ", "biases_shape", "=", "self", ".", "output_shape", "[", "1", ":", "3", "]", "+", "(", "num_filters", ",", ")", "# + self.output_shape[2:]", "\n", "", "else", ":", "\n", "                ", "biases_shape", "=", "(", "num_filters", ",", ")", "\n", "", "self", ".", "b", "=", "self", ".", "add_param", "(", "b", ",", "biases_shape", ",", "name", "=", "\"b\"", ",", "\n", "regularizable", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.BaseConvLayer.get_W_shape": [[504, 513], ["None"], "methods", ["None"], ["", "", "def", "get_W_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the shape of the weight matrix `W`.\n        Returns\n        -------\n        tuple of int\n            The shape of the weight matrix.\n        \"\"\"", "\n", "num_input_channels", "=", "self", ".", "input_shape", "[", "-", "1", "]", "\n", "return", "self", ".", "filter_size", "+", "(", "num_input_channels", ",", "self", ".", "num_filters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.BaseConvLayer.get_output_shape_for": [[514, 531], ["ipdb.set_trace", "tuple", "layers.conv_output_length", "zip"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.conv_output_length"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "self", ".", "pad", "==", "'SAME'", ":", "\n", "            ", "pad", "=", "(", "'same'", ",", ")", "*", "self", ".", "n", "\n", "", "elif", "self", ".", "pad", "==", "'VALID'", ":", "\n", "            ", "pad", "=", "(", "0", ",", ")", "*", "self", ".", "n", "\n", "", "else", ":", "\n", "            ", "import", "ipdb", ";", "\n", "ipdb", ".", "set_trace", "(", ")", "\n", "raise", "NotImplementedError", "\n", "\n", "# pad = self.pad if isinstance(self.pad, tuple) else (self.pad,) * self.n", "\n", "", "batchsize", "=", "input_shape", "[", "0", "]", "\n", "return", "(", "(", "batchsize", ",", ")", "+", "\n", "tuple", "(", "conv_output_length", "(", "input", ",", "filter", ",", "stride", ",", "p", ")", "\n", "for", "input", ",", "filter", ",", "stride", ",", "p", "\n", "in", "zip", "(", "input_shape", "[", "1", ":", "3", "]", ",", "self", ".", "filter_size", ",", "\n", "self", ".", "stride", ",", "pad", ")", ")", ")", "+", "(", "self", ".", "num_filters", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.BaseConvLayer.get_output_for": [[532, 544], ["layers.BaseConvLayer.convolve", "layers.BaseConvLayer.nonlinearity", "tensorflow.expand_dims", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Conv2DLayer.convolve"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "conved", "=", "self", ".", "convolve", "(", "input", ",", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "b", "is", "None", ":", "\n", "            ", "activation", "=", "conved", "\n", "", "elif", "self", ".", "untie_biases", ":", "\n", "# raise NotImplementedError", "\n", "            ", "activation", "=", "conved", "+", "tf", ".", "expand_dims", "(", "self", ".", "b", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "activation", "=", "conved", "+", "tf", ".", "reshape", "(", "self", ".", "b", ",", "(", "1", ",", "1", ",", "1", ",", "self", ".", "num_filters", ")", ")", "\n", "\n", "", "return", "self", ".", "nonlinearity", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.BaseConvLayer.convolve": [[545, 562], ["NotImplementedError"], "methods", ["None"], ["", "def", "convolve", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Symbolically convolves `input` with ``self.W``, producing an output of\n        shape ``self.output_shape``. To be implemented by subclasses.\n        Parameters\n        ----------\n        input : Theano tensor\n            The input minibatch to convolve\n        **kwargs\n            Any additional keyword arguments from :meth:`get_output_for`\n        Returns\n        -------\n        Theano tensor\n            `input` convolved according to the configuration of this layer,\n            without any bias or nonlinearity applied.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"BaseConvLayer does not implement the \"", "\n", "\"convolve() method. You will want to \"", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Conv2DLayer.__init__": [[567, 576], ["layers.XavierUniformInitializer", "tensorflow.zeros_initializer", "layers.BaseConvLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "num_filters", ",", "filter_size", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "\"VALID\"", ",", "untie_biases", "=", "False", ",", "\n", "W", "=", "XavierUniformInitializer", "(", ")", ",", "b", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "convolution", "=", "tf", ".", "nn", ".", "conv2d", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Conv2DLayer", ",", "self", ")", ".", "__init__", "(", "incoming", "=", "incoming", ",", "num_filters", "=", "num_filters", ",", "filter_size", "=", "filter_size", ",", "\n", "stride", "=", "stride", ",", "pad", "=", "pad", ",", "untie_biases", "=", "untie_biases", ",", "W", "=", "W", ",", "b", "=", "b", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "n", "=", "2", ",", "**", "kwargs", ")", "\n", "self", ".", "convolution", "=", "convolution", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Conv2DLayer.convolve": [[577, 580], ["layers.Conv2DLayer.convolution"], "methods", ["None"], ["", "def", "convolve", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "conved", "=", "self", ".", "convolution", "(", "input", ",", "self", ".", "W", ",", "strides", "=", "(", "1", ",", ")", "+", "self", ".", "stride", "+", "(", "1", ",", ")", ",", "padding", "=", "self", ".", "pad", ")", "\n", "return", "conved", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Pool2DLayer.__init__": [[593, 612], ["layers.Layer.__init__", "layers.as_tuple", "len", "ValueError", "layers.as_tuple"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.as_tuple", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.as_tuple"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "pool_size", ",", "stride", "=", "None", ",", "pad", "=", "\"VALID\"", ",", "mode", "=", "'max'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Pool2DLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "pool_size", "=", "as_tuple", "(", "pool_size", ",", "2", ")", "\n", "\n", "if", "len", "(", "self", ".", "input_shape", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\"Tried to create a 2D pooling layer with \"", "\n", "\"input shape %r. Expected 4 input dimensions \"", "\n", "\"(batchsize, 2 spatial dimensions, channels).\"", "\n", "%", "(", "self", ".", "input_shape", ",", ")", ")", "\n", "\n", "", "if", "stride", "is", "None", ":", "\n", "            ", "self", ".", "stride", "=", "self", ".", "pool_size", "\n", "", "else", ":", "\n", "            ", "self", ".", "stride", "=", "as_tuple", "(", "stride", ",", "2", ")", "\n", "\n", "", "self", ".", "pad", "=", "pad", "\n", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Pool2DLayer.get_output_shape_for": [[613, 629], ["list", "layers.pool_output_length", "layers.pool_output_length", "tuple"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.pool_output_length", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.pool_output_length"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "output_shape", "=", "list", "(", "input_shape", ")", "# copy / convert to mutable list", "\n", "\n", "output_shape", "[", "1", "]", "=", "pool_output_length", "(", "input_shape", "[", "1", "]", ",", "\n", "pool_size", "=", "self", ".", "pool_size", "[", "0", "]", ",", "\n", "stride", "=", "self", ".", "stride", "[", "0", "]", ",", "\n", "pad", "=", "self", ".", "pad", ",", "\n", ")", "\n", "\n", "output_shape", "[", "2", "]", "=", "pool_output_length", "(", "input_shape", "[", "2", "]", ",", "\n", "pool_size", "=", "self", ".", "pool_size", "[", "1", "]", ",", "\n", "stride", "=", "self", ".", "stride", "[", "1", "]", ",", "\n", "pad", "=", "self", ".", "pad", ",", "\n", ")", "\n", "\n", "return", "tuple", "(", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Pool2DLayer.get_output_for": [[630, 639], ["tensorflow.nn.max_pool"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "self", ".", "mode", "==", "\"max\"", "\n", "pooled", "=", "tf", ".", "nn", ".", "max_pool", "(", "\n", "input", ",", "\n", "ksize", "=", "(", "1", ",", ")", "+", "self", ".", "pool_size", "+", "(", "1", ",", ")", ",", "\n", "strides", "=", "(", "1", ",", ")", "+", "self", ".", "stride", "+", "(", "1", ",", ")", ",", "\n", "padding", "=", "self", ".", "pad", ",", "\n", ")", "\n", "return", "pooled", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.SpatialExpectedSoftmaxLayer.__init__": [[663, 665], ["layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["def", "__init__", "(", "self", ",", "incoming", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "# self.temp = self.add_param(tf.ones_initializer, shape=(), name=\"temperature\")", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.SpatialExpectedSoftmaxLayer.get_output_shape_for": [[667, 669], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "-", "1", "]", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.SpatialExpectedSoftmaxLayer.get_output_for": [[670, 672], ["layers.spatial_expected_softmax"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.spatial_expected_softmax"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spatial_expected_softmax", "(", "input", ")", "#, self.temp)", "\n", "# max_ = tf.reduce_max(input, reduction_indices=[1, 2], keep_dims=True)", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.DropoutLayer.__init__": [[710, 717], ["layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "p", ",", "rescale", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param p: probability of setting the output of a node to 0. Should be a tf placeholder\n        \"\"\"", "\n", "super", "(", "DropoutLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "rescale", "=", "rescale", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.DropoutLayer.get_output_for": [[718, 737], ["tensorflow.nn.dropout"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "deterministic", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        input : tensor\n            output from the previous layer\n        deterministic : bool\n            If true dropout and scaling is disabled, see notes\n        \"\"\"", "\n", "if", "deterministic", "or", "self", ".", "p", "==", "0", ":", "\n", "            ", "return", "input", "\n", "", "else", ":", "\n", "# I don't know what this is for. TensorFlow rescales automatically when using tf.nn.dropout", "\n", "            ", "retain_prob", "=", "1.", "-", "self", ".", "p", "\n", "if", "self", ".", "rescale", ":", "\n", "                ", "input", "/=", "retain_prob", "\n", "\n", "# use nonsymbolic shape for dropout mask if possible", "\n", "", "return", "tf", ".", "nn", ".", "dropout", "(", "input", ",", "keep_prob", "=", "retain_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.DropoutLayer.get_output_shape_for": [[738, 740], ["None"], "methods", ["None"], ["", "", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.GaussianNoiseLayer.__init__": [[742, 753], ["layers.Layer.__init__", "layers.GaussianNoiseLayer.add_param", "tensorflow.Variable"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "noise_std", ",", "noise_on_ph", "=", "None", ",", "name", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GaussianNoiseLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "noise_std", "=", "self", ".", "add_param", "(", "\n", "tf", ".", "Variable", "(", "noise_std", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'noise_std_'", "+", "name", ",", "trainable", "=", "False", ")", ",", "\n", "(", "1", ",", ")", ",", "\n", "name", "=", "'noise_std_'", "+", "name", ",", "\n", "trainable", "=", "False", "\n", ")", "\n", "# boolean placeholder that controlls whether noise shall be added or not (i.e. train vs. test time)", "\n", "self", ".", "noise_on_ph", "=", "noise_on_ph", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.GaussianNoiseLayer.get_output_for": [[754, 760], ["tensorflow.cond", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "noise_on_ph", "is", "not", "None", ":", "\n", "            ", "noised_input", "=", "input", "+", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "input", ")", ",", "stddev", "=", "self", ".", "noise_std", ")", "\n", "return", "tf", ".", "cond", "(", "self", ".", "noise_on_ph", ",", "lambda", ":", "noised_input", ",", "lambda", ":", "input", ")", "\n", "", "else", ":", "\n", "            ", "return", "input", "+", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "input", ")", ",", "stddev", "=", "self", ".", "noise_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.GaussianNoiseLayer.get_output_shape_for": [[761, 763], ["None"], "methods", ["None"], ["", "", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.FlattenLayer.__init__": [[782, 788], ["layers.Layer.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["def", "__init__", "(", "self", ",", "incoming", ",", "outdim", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FlattenLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "outdim", "=", "outdim", "\n", "\n", "if", "outdim", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Dim must be >0, was %i'", ",", "outdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.FlattenLayer.get_output_shape_for": [[789, 798], ["any", "int", "numpy.prod"], "methods", ["None"], ["", "", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "to_flatten", "=", "input_shape", "[", "self", ".", "outdim", "-", "1", ":", "]", "\n", "\n", "if", "any", "(", "s", "is", "None", "for", "s", "in", "to_flatten", ")", ":", "\n", "            ", "flattened", "=", "None", "\n", "", "else", ":", "\n", "            ", "flattened", "=", "int", "(", "np", ".", "prod", "(", "to_flatten", ")", ")", "\n", "\n", "", "return", "input_shape", "[", ":", "self", ".", "outdim", "-", "1", "]", "+", "(", "flattened", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.FlattenLayer.get_output_for": [[799, 804], ["tensorflow.reduce_prod", "tensorflow.reshape", "tensorflow.shape", "tensorflow.concat", "tensorflow.shape", "tensorflow.stack"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "# total_entries = tf.reduce_prod(tf.shape(input))", "\n", "        ", "pre_shape", "=", "tf", ".", "shape", "(", "input", ")", "[", ":", "self", ".", "outdim", "-", "1", "]", "\n", "to_flatten", "=", "tf", ".", "reduce_prod", "(", "tf", ".", "shape", "(", "input", ")", "[", "self", ".", "outdim", "-", "1", ":", "]", ")", "\n", "return", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "pre_shape", ",", "tf", ".", "stack", "(", "[", "to_flatten", "]", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ReshapeLayer.__init__": [[810, 834], ["layers.Layer.__init__", "tuple", "layers.ReshapeLayer.get_output_shape_for", "isinstance", "sum", "ValueError", "isinstance", "ValueError", "isinstance", "ValueError", "ValueError", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ElemwiseSumLayer.get_output_shape_for"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "shape", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ReshapeLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "shape", "=", "tuple", "(", "shape", ")", "\n", "for", "s", "in", "shape", ":", "\n", "            ", "if", "isinstance", "(", "s", ",", "int", ")", ":", "\n", "                ", "if", "s", "==", "0", "or", "s", "<", "-", "1", ":", "\n", "                    ", "raise", "ValueError", "(", "\"`shape` integers must be positive or -1\"", ")", "\n", "", "", "elif", "isinstance", "(", "s", ",", "list", ")", ":", "\n", "                ", "if", "len", "(", "s", ")", "!=", "1", "or", "not", "isinstance", "(", "s", "[", "0", "]", ",", "int", ")", "or", "s", "[", "0", "]", "<", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"`shape` input references must be \"", "\n", "\"single-element lists of int >= 0\"", ")", "\n", "", "", "elif", "isinstance", "(", "s", ",", "(", "tf", ".", "Tensor", ",", "tf", ".", "Variable", ")", ")", ":", "# T.TensorVariable):", "\n", "                ", "raise", "NotImplementedError", "\n", "# if s.ndim != 0:", "\n", "#     raise ValueError(", "\n", "#         \"A symbolic variable in a shape specification must be \"", "\n", "#         \"a scalar, but had %i dimensions\" % s.ndim)", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"`shape` must be a tuple of int and/or [int]\"", ")", "\n", "", "", "if", "sum", "(", "s", "==", "-", "1", "for", "s", "in", "shape", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"`shape` cannot contain multiple -1\"", ")", "\n", "", "self", ".", "shape", "=", "shape", "\n", "# try computing the output shape once as a sanity check", "\n", "self", ".", "get_output_shape_for", "(", "self", ".", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ReshapeLayer.get_output_shape_for": [[835, 888], ["list", "list", "list", "enumerate", "enumerate", "tuple", "isinstance", "isinstance", "any", "numpy.prod", "any", "numpy.prod", "list.index", "ValueError", "len", "ValueError", "len"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ",", "**", "kwargs", ")", ":", "\n", "# Initialize output shape from shape specification", "\n", "        ", "output_shape", "=", "list", "(", "self", ".", "shape", ")", "\n", "# First, replace all `[i]` with the corresponding input dimension, and", "\n", "# mask parts of the shapes thus becoming irrelevant for -1 inference", "\n", "masked_input_shape", "=", "list", "(", "input_shape", ")", "\n", "masked_output_shape", "=", "list", "(", "output_shape", ")", "\n", "for", "dim", ",", "o", "in", "enumerate", "(", "output_shape", ")", ":", "\n", "            ", "if", "isinstance", "(", "o", ",", "list", ")", ":", "\n", "                ", "if", "o", "[", "0", "]", ">=", "len", "(", "input_shape", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"specification contains [%d], but input \"", "\n", "\"shape has %d dimensions only\"", "%", "\n", "(", "o", "[", "0", "]", ",", "len", "(", "input_shape", ")", ")", ")", "\n", "", "output_shape", "[", "dim", "]", "=", "input_shape", "[", "o", "[", "0", "]", "]", "\n", "masked_output_shape", "[", "dim", "]", "=", "input_shape", "[", "o", "[", "0", "]", "]", "\n", "if", "(", "input_shape", "[", "o", "[", "0", "]", "]", "is", "None", ")", "and", "(", "masked_input_shape", "[", "o", "[", "0", "]", "]", "is", "None", ")", ":", "\n", "# first time we copied this unknown input size: mask", "\n", "# it, we have a 1:1 correspondence between out[dim] and", "\n", "# in[o[0]] and can ignore it for -1 inference even if", "\n", "# it is unknown.", "\n", "                    ", "masked_input_shape", "[", "o", "[", "0", "]", "]", "=", "1", "\n", "masked_output_shape", "[", "dim", "]", "=", "1", "\n", "# Secondly, replace all symbolic shapes with `None`, as we cannot", "\n", "# infer their size here.", "\n", "", "", "", "for", "dim", ",", "o", "in", "enumerate", "(", "output_shape", ")", ":", "\n", "            ", "if", "isinstance", "(", "o", ",", "(", "tf", ".", "Tensor", ",", "tf", ".", "Variable", ")", ")", ":", "# T.TensorVariable):", "\n", "                ", "raise", "NotImplementedError", "\n", "# output_shape[dim] = None", "\n", "# masked_output_shape[dim] = None", "\n", "# From the shapes, compute the sizes of the input and output tensor", "\n", "", "", "input_size", "=", "(", "None", "if", "any", "(", "x", "is", "None", "for", "x", "in", "masked_input_shape", ")", "\n", "else", "np", ".", "prod", "(", "masked_input_shape", ")", ")", "\n", "output_size", "=", "(", "None", "if", "any", "(", "x", "is", "None", "for", "x", "in", "masked_output_shape", ")", "\n", "else", "np", ".", "prod", "(", "masked_output_shape", ")", ")", "\n", "del", "masked_input_shape", ",", "masked_output_shape", "\n", "# Finally, infer value for -1 if needed", "\n", "if", "-", "1", "in", "output_shape", ":", "\n", "            ", "dim", "=", "output_shape", ".", "index", "(", "-", "1", ")", "\n", "if", "(", "input_size", "is", "None", ")", "or", "(", "output_size", "is", "None", ")", ":", "\n", "                ", "output_shape", "[", "dim", "]", "=", "None", "\n", "output_size", "=", "None", "\n", "", "else", ":", "\n", "                ", "output_size", "*=", "-", "1", "\n", "output_shape", "[", "dim", "]", "=", "input_size", "//", "output_size", "\n", "output_size", "*=", "output_shape", "[", "dim", "]", "\n", "# Sanity check", "\n", "", "", "if", "(", "input_size", "is", "not", "None", ")", "and", "(", "output_size", "is", "not", "None", ")", "and", "(", "input_size", "!=", "output_size", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"%s cannot be reshaped to specification %s. \"", "\n", "\"The total size mismatches.\"", "%", "\n", "(", "input_shape", ",", "self", ".", "shape", ")", ")", "\n", "", "return", "tuple", "(", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ReshapeLayer.get_output_for": [[889, 897], ["list", "enumerate", "tensorflow.reshape", "isinstance", "tensorflow.stack", "tensorflow.shape"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "# Replace all `[i]` with the corresponding input dimension", "\n", "        ", "output_shape", "=", "list", "(", "self", ".", "shape", ")", "\n", "for", "dim", ",", "o", "in", "enumerate", "(", "output_shape", ")", ":", "\n", "            ", "if", "isinstance", "(", "o", ",", "list", ")", ":", "\n", "                ", "output_shape", "[", "dim", "]", "=", "tf", ".", "shape", "(", "input", ")", "[", "o", "[", "0", "]", "]", "\n", "# Everything else is handled by Theano", "\n", "", "", "return", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "output_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.SliceLayer.__init__": [[903, 907], ["layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "indices", ",", "axis", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SliceLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "slice", "=", "indices", "\n", "self", ".", "axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.SliceLayer.get_output_shape_for": [[908, 918], ["list", "isinstance", "tuple", "len", "list", "range", "layers.SliceLayer.slice.indices"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "output_shape", "=", "list", "(", "input_shape", ")", "\n", "if", "isinstance", "(", "self", ".", "slice", ",", "int", ")", ":", "\n", "            ", "del", "output_shape", "[", "self", ".", "axis", "]", "\n", "", "elif", "input_shape", "[", "self", ".", "axis", "]", "is", "not", "None", ":", "\n", "            ", "output_shape", "[", "self", ".", "axis", "]", "=", "len", "(", "\n", "list", "(", "range", "(", "*", "self", ".", "slice", ".", "indices", "(", "input_shape", "[", "self", ".", "axis", "]", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "output_shape", "[", "self", ".", "axis", "]", "=", "None", "\n", "", "return", "tuple", "(", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.SliceLayer.get_output_for": [[919, 930], ["input.get_shape", "isinstance", "tensorflow.reverse", "slice", "slice", "slice", "slice"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "axis", "=", "self", ".", "axis", "\n", "ndims", "=", "input", ".", "get_shape", "(", ")", ".", "ndims", "\n", "if", "axis", "<", "0", ":", "\n", "            ", "axis", "+=", "ndims", "\n", "", "if", "isinstance", "(", "self", ".", "slice", ",", "int", ")", "and", "self", ".", "slice", "<", "0", ":", "\n", "            ", "return", "tf", ".", "reverse", "(", "input", ",", "[", "self", ".", "axis", "+", "1", "]", ")", "[", "\n", "(", "slice", "(", "None", ")", ",", ")", "*", "axis", "+", "(", "-", "1", "-", "self", ".", "slice", ",", ")", "+", "(", "slice", "(", "None", ")", ",", ")", "*", "(", "ndims", "-", "axis", "-", "1", ")", "\n", "]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "return", "input", "[", "(", "slice", "(", "None", ")", ",", ")", "*", "axis", "+", "(", "self", ".", "slice", ",", ")", "+", "(", "slice", "(", "None", ")", ",", ")", "*", "(", "ndims", "-", "axis", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.DimshuffleLayer.__init__": [[933, 956], ["layers.Layer.__init__", "set", "layers.DimshuffleLayer.get_output_shape_for", "isinstance", "set.add", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ElemwiseSumLayer.get_output_shape_for"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "pattern", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DimshuffleLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n", "# Sanity check the pattern", "\n", "used_dims", "=", "set", "(", ")", "\n", "for", "p", "in", "pattern", ":", "\n", "            ", "if", "isinstance", "(", "p", ",", "int", ")", ":", "\n", "# Dimension p", "\n", "                ", "if", "p", "in", "used_dims", ":", "\n", "                    ", "raise", "ValueError", "(", "\"pattern contains dimension {0} more \"", "\n", "\"than once\"", ".", "format", "(", "p", ")", ")", "\n", "", "used_dims", ".", "add", "(", "p", ")", "\n", "", "elif", "p", "==", "'x'", ":", "\n", "# Broadcast", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"pattern should only contain dimension\"", "\n", "\"indices or 'x', not {0}\"", ".", "format", "(", "p", ")", ")", "\n", "\n", "", "", "self", ".", "pattern", "=", "pattern", "\n", "\n", "# try computing the output shape once as a sanity check", "\n", "self", ".", "get_output_shape_for", "(", "self", ".", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.DimshuffleLayer.get_output_shape_for": [[957, 985], ["enumerate", "tuple", "len", "isinstance", "output_shape.append", "zip", "ValueError", "ValueError", "len", "len"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "# Build output shape while keeping track of the dimensions that we are", "\n", "# attempting to collapse, so we can ensure that they are broadcastable", "\n", "        ", "output_shape", "=", "[", "]", "\n", "dims_used", "=", "[", "False", "]", "*", "len", "(", "input_shape", ")", "\n", "for", "p", "in", "self", ".", "pattern", ":", "\n", "            ", "if", "isinstance", "(", "p", ",", "int", ")", ":", "\n", "                ", "if", "p", "<", "0", "or", "p", ">=", "len", "(", "input_shape", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"pattern contains {0}, but input shape \"", "\n", "\"has {1} dimensions \"", "\n", "\"only\"", ".", "format", "(", "p", ",", "len", "(", "input_shape", ")", ")", ")", "\n", "# Dimension p", "\n", "", "o", "=", "input_shape", "[", "p", "]", "\n", "dims_used", "[", "p", "]", "=", "True", "\n", "", "elif", "p", "==", "'x'", ":", "\n", "# Broadcast; will be of size 1", "\n", "                ", "o", "=", "1", "\n", "", "output_shape", ".", "append", "(", "o", ")", "\n", "\n", "", "for", "i", ",", "(", "dim_size", ",", "used", ")", "in", "enumerate", "(", "zip", "(", "input_shape", ",", "dims_used", ")", ")", ":", "\n", "            ", "if", "not", "used", "and", "dim_size", "!=", "1", "and", "dim_size", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"pattern attempted to collapse dimension \"", "\n", "\"{0} of size {1}; dimensions with size != 1/None are not\"", "\n", "\"broadcastable and cannot be \"", "\n", "\"collapsed\"", ".", "format", "(", "i", ",", "dim_size", ")", ")", "\n", "\n", "", "", "return", "tuple", "(", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.DimshuffleLayer.get_output_for": [[986, 988], ["tensorflow.transpose"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "tf", ".", "transpose", "(", "input", ",", "self", ".", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.GRULayer.__init__": [[1027, 1077], ["layers.XavierUniformInitializer", "layers.OrthogonalInitializer", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "layers.Layer.__init__", "numpy.prod", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "dict", "tensorflow.placeholder", "tensorflow.placeholder", "layers.GRULayer.step"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfBasicLSTMLayer.step"], ["def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "hidden_nonlinearity", ",", "\n", "gate_nonlinearity", "=", "tf", ".", "nn", ".", "sigmoid", ",", "W_x_init", "=", "XavierUniformInitializer", "(", ")", ",", "W_h_init", "=", "OrthogonalInitializer", "(", ")", ",", "\n", "b_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "hidden_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "hidden_init_trainable", "=", "False", ",", "\n", "layer_normalization", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "hidden_nonlinearity", "is", "None", ":", "\n", "            ", "hidden_nonlinearity", "=", "tf", ".", "identity", "\n", "\n", "", "if", "gate_nonlinearity", "is", "None", ":", "\n", "            ", "gate_nonlinearity", "=", "tf", ".", "identity", "\n", "\n", "", "super", "(", "GRULayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n", "input_shape", "=", "self", ".", "input_shape", "[", "2", ":", "]", "\n", "\n", "input_dim", "=", "np", ".", "prod", "(", "input_shape", ")", "\n", "\n", "self", ".", "layer_normalization", "=", "layer_normalization", "\n", "\n", "# Weights for the initial hidden state", "\n", "self", ".", "h0", "=", "self", ".", "add_param", "(", "hidden_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"h0\"", ",", "trainable", "=", "hidden_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "# Weights for the reset gate", "\n", "self", ".", "W_xr", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xr\"", ")", "\n", "self", ".", "W_hr", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hr\"", ")", "\n", "self", ".", "b_r", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_r\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the update gate", "\n", "self", ".", "W_xu", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xu\"", ")", "\n", "self", ".", "W_hu", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hu\"", ")", "\n", "self", ".", "b_u", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_u\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the cell gate", "\n", "self", ".", "W_xc", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xc\"", ")", "\n", "self", ".", "W_hc", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hc\"", ")", "\n", "self", ".", "b_c", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_c\"", ",", "regularizable", "=", "False", ")", "\n", "\n", "self", ".", "W_x_ruc", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_xr", ",", "self", ".", "W_xu", ",", "self", ".", "W_xc", "]", ")", "\n", "self", ".", "W_h_ruc", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_hr", ",", "self", ".", "W_hu", ",", "self", ".", "W_hc", "]", ")", "\n", "self", ".", "W_x_ru", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_xr", ",", "self", ".", "W_xu", "]", ")", "\n", "self", ".", "W_h_ru", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_hr", ",", "self", ".", "W_hu", "]", ")", "\n", "self", ".", "b_ruc", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "self", ".", "b_r", ",", "self", ".", "b_u", ",", "self", ".", "b_c", "]", ")", "\n", "\n", "self", ".", "gate_nonlinearity", "=", "gate_nonlinearity", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "nonlinearity", "=", "hidden_nonlinearity", "\n", "self", ".", "norm_params", "=", "dict", "(", ")", "\n", "\n", "# pre-run the step method to initialize the normalization parameters", "\n", "h_dummy", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "num_units", ")", ",", "name", "=", "\"h_dummy\"", ")", "\n", "x_dummy", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "input_dim", ")", ",", "name", "=", "\"x_dummy\"", ")", "\n", "self", ".", "step", "(", "h_dummy", ",", "x_dummy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.GRULayer.step": [[1078, 1102], ["layers.apply_ln", "apply_ln.", "apply_ln.", "tensorflow.split", "tensorflow.split", "apply_ln.", "apply_ln.", "layers.GRULayer.gate_nonlinearity", "layers.GRULayer.gate_nonlinearity", "layers.GRULayer.nonlinearity", "tensorflow.matmul", "tensorflow.split", "tensorflow.split", "layers.GRULayer.gate_nonlinearity", "layers.GRULayer.gate_nonlinearity", "layers.GRULayer.nonlinearity", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.apply_ln"], ["", "def", "step", "(", "self", ",", "hprev", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "layer_normalization", ":", "\n", "            ", "ln", "=", "apply_ln", "(", "self", ")", "\n", "x_ru", "=", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_x_ru", ")", ",", "\"x_ru\"", ")", "\n", "h_ru", "=", "ln", "(", "tf", ".", "matmul", "(", "hprev", ",", "self", ".", "W_h_ru", ")", ",", "\"h_ru\"", ")", "\n", "x_r", ",", "x_u", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "x_ru", ")", "\n", "h_r", ",", "h_u", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "h_ru", ")", "\n", "x_c", "=", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_xc", ")", ",", "\"x_c\"", ")", "\n", "h_c", "=", "ln", "(", "tf", ".", "matmul", "(", "hprev", ",", "self", ".", "W_hc", ")", ",", "\"h_c\"", ")", "\n", "r", "=", "self", ".", "gate_nonlinearity", "(", "x_r", "+", "h_r", ")", "\n", "u", "=", "self", ".", "gate_nonlinearity", "(", "x_u", "+", "h_u", ")", "\n", "c", "=", "self", ".", "nonlinearity", "(", "x_c", "+", "r", "*", "h_c", ")", "\n", "h", "=", "(", "1", "-", "u", ")", "*", "hprev", "+", "u", "*", "c", "\n", "return", "h", "\n", "", "else", ":", "\n", "            ", "xb_ruc", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_x_ruc", ")", "+", "tf", ".", "reshape", "(", "self", ".", "b_ruc", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "h_ruc", "=", "tf", ".", "matmul", "(", "hprev", ",", "self", ".", "W_h_ruc", ")", "\n", "xb_r", ",", "xb_u", ",", "xb_c", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "3", ",", "value", "=", "xb_ruc", ")", "\n", "h_r", ",", "h_u", ",", "h_c", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "3", ",", "value", "=", "h_ruc", ")", "\n", "r", "=", "self", ".", "gate_nonlinearity", "(", "xb_r", "+", "h_r", ")", "\n", "u", "=", "self", ".", "gate_nonlinearity", "(", "xb_u", "+", "h_u", ")", "\n", "c", "=", "self", ".", "nonlinearity", "(", "xb_c", "+", "r", "*", "h_c", ")", "\n", "h", "=", "(", "1", "-", "u", ")", "*", "hprev", "+", "u", "*", "c", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.GRULayer.get_step_layer": [[1103, 1105], ["layers.GRUStepLayer"], "methods", ["None"], ["", "", "def", "get_step_layer", "(", "self", ",", "l_in", ",", "l_prev_hidden", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "GRUStepLayer", "(", "incomings", "=", "[", "l_in", ",", "l_prev_hidden", "]", ",", "recurrent_layer", "=", "self", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.GRULayer.get_output_shape_for": [[1106, 1109], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "n_batch", ",", "n_steps", "=", "input_shape", "[", ":", "2", "]", "\n", "return", "n_batch", ",", "n_steps", ",", "self", ".", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.GRULayer.get_output_for": [[1110, 1133], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.scan", "tensorflow.transpose", "tensorflow.stack", "tensorflow.tile", "tensorflow.reshape"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "input_shape", "=", "tf", ".", "shape", "(", "input", ")", "\n", "n_batches", "=", "input_shape", "[", "0", "]", "\n", "n_steps", "=", "input_shape", "[", "1", "]", "\n", "input", "=", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "[", "n_batches", ",", "n_steps", ",", "-", "1", "]", ")", ")", "\n", "if", "'recurrent_state'", "in", "kwargs", "and", "self", "in", "kwargs", "[", "'recurrent_state'", "]", ":", "\n", "            ", "h0s", "=", "kwargs", "[", "'recurrent_state'", "]", "[", "self", "]", "\n", "", "else", ":", "\n", "            ", "h0s", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "h0", ",", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "\n", "(", "n_batches", ",", "1", ")", "\n", ")", "\n", "# flatten extra dimensions", "\n", "", "shuffled_input", "=", "tf", ".", "transpose", "(", "input", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "hs", "=", "tf", ".", "scan", "(", "\n", "self", ".", "step", ",", "\n", "elems", "=", "shuffled_input", ",", "\n", "initializer", "=", "h0s", "\n", ")", "\n", "shuffled_hs", "=", "tf", ".", "transpose", "(", "hs", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "if", "'recurrent_state_output'", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "'recurrent_state_output'", "]", "[", "self", "]", "=", "shuffled_hs", "\n", "", "return", "shuffled_hs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.GRUStepLayer.__init__": [[1136, 1139], ["layers.MergeLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incomings", ",", "recurrent_layer", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GRUStepLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "_gru_layer", "=", "recurrent_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.GRUStepLayer.get_params": [[1140, 1142], ["layers.GRUStepLayer._gru_layer._get_params"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized._get_params"], ["", "def", "get_params", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "return", "self", ".", "_gru_layer", ".", "_get_params", "(", "**", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.GRUStepLayer.get_output_shape_for": [[1143, 1146], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "n_batch", "=", "input_shapes", "[", "0", "]", "[", "0", "]", "\n", "return", "n_batch", ",", "self", ".", "_gru_layer", ".", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.GRUStepLayer.get_output_for": [[1147, 1153], ["tensorflow.reshape", "tensorflow.reshape.set_shape", "layers.GRUStepLayer._gru_layer.step", "tensorflow.shape", "tensorflow.stack"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfBasicLSTMLayer.step"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", ",", "hprev", "=", "inputs", "\n", "n_batch", "=", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "tf", ".", "stack", "(", "[", "n_batch", ",", "-", "1", "]", ")", ")", "\n", "x", ".", "set_shape", "(", "(", "None", ",", "self", ".", "input_shapes", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "return", "self", ".", "_gru_layer", ".", "step", "(", "hprev", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfGRULayer.__init__": [[1160, 1187], ["tensorflow.nn.rnn_cell.GRUCell", "layers.Layer.__init__", "tensorflow.placeholder", "tensorflow.placeholder", "layers.TfGRULayer.add_param", "len", "tensorflow.variable_scope", "tensorflow.nn.rnn_cell.GRUCell.", "vs.reuse_variables", "layers.TfGRULayer.add_param", "set", "set", "layers.TfGRULayer.add_param", "tensorflow.zeros_initializer", "tensorflow.global_variables", "v.name.startswith", "tensorflow.trainable_variables", "v.name.startswith"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param"], ["def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "hidden_nonlinearity", ",", "horizon", "=", "None", ",", "hidden_init_trainable", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "len", "(", "incoming", ".", "output_shape", ")", "==", "3", "\n", "input_dim", "=", "incoming", ".", "shape", "[", "2", "]", "\n", "gru", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "GRUCell", "(", "num_units", "=", "num_units", ",", "activation", "=", "hidden_nonlinearity", ")", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "horizon", "=", "horizon", "\n", "self", ".", "gru", "=", "gru", "\n", "self", ".", "hidden_nonlinearity", "=", "hidden_nonlinearity", "\n", "Layer", ".", "__init__", "(", "self", ",", "incoming", "=", "incoming", ",", "**", "kwargs", ")", "\n", "# dummy input variable", "\n", "input_dummy", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "input_dim", ")", ",", "\"input_dummy\"", ")", "\n", "hidden_dummy", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "num_units", ")", ",", "\"hidden_dummy\"", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "vs", ":", "\n", "            ", "gru", "(", "input_dummy", ",", "hidden_dummy", ",", "scope", "=", "vs", ")", "\n", "vs", ".", "reuse_variables", "(", ")", "\n", "self", ".", "scope", "=", "vs", "\n", "all_vars", "=", "[", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "if", "v", ".", "name", ".", "startswith", "(", "vs", ".", "name", ")", "]", "\n", "trainable_vars", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "if", "v", ".", "name", ".", "startswith", "(", "vs", ".", "name", ")", "]", "\n", "\n", "", "for", "var", "in", "trainable_vars", ":", "\n", "            ", "self", ".", "add_param", "(", "spec", "=", "var", ",", "shape", "=", "None", ",", "name", "=", "None", ",", "trainable", "=", "True", ")", "\n", "", "for", "var", "in", "set", "(", "all_vars", ")", "-", "set", "(", "trainable_vars", ")", ":", "\n", "            ", "self", ".", "add_param", "(", "spec", "=", "var", ",", "shape", "=", "None", ",", "name", "=", "None", ",", "trainable", "=", "False", ")", "\n", "", "self", ".", "h0", "=", "self", ".", "add_param", "(", "tf", ".", "zeros_initializer", "(", ")", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"h0\"", ",", "trainable", "=", "hidden_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfGRULayer.step": [[1188, 1190], ["layers.TfGRULayer.gru"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "hprev", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "gru", "(", "x", ",", "hprev", ",", "scope", "=", "self", ".", "scope", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfGRULayer.get_output_for": [[1191, 1219], ["tensorflow.shape", "tensorflow.tile", "tensorflow.tile.set_shape", "tensorflow.reshape", "range", "tensorflow.concat", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose.set_shape", "tensorflow.scan", "tensorflow.transpose", "layers.TfGRULayer.gru", "tensorflow.concat.append", "tensorflow.stack", "tensorflow.expand_dims"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "input_shape", "=", "tf", ".", "shape", "(", "input", ")", "\n", "n_batches", "=", "input_shape", "[", "0", "]", "\n", "state", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "h0", ",", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "\n", "(", "n_batches", ",", "1", ")", "\n", ")", "\n", "state", ".", "set_shape", "(", "(", "None", ",", "self", ".", "num_units", ")", ")", "\n", "if", "self", ".", "horizon", "is", "not", "None", ":", "\n", "            ", "outputs", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "self", ".", "horizon", ")", ":", "\n", "                ", "output", ",", "state", "=", "self", ".", "gru", "(", "input", "[", ":", ",", "idx", ",", ":", "]", ",", "state", ",", "scope", "=", "self", ".", "scope", ")", "# self.name)", "\n", "outputs", ".", "append", "(", "tf", ".", "expand_dims", "(", "output", ",", "1", ")", ")", "\n", "", "outputs", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "outputs", ")", "\n", "return", "outputs", "\n", "", "else", ":", "\n", "            ", "n_steps", "=", "input_shape", "[", "1", "]", "\n", "input", "=", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "[", "n_batches", ",", "n_steps", ",", "-", "1", "]", ")", ")", "\n", "# flatten extra dimensions", "\n", "shuffled_input", "=", "tf", ".", "transpose", "(", "input", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "shuffled_input", ".", "set_shape", "(", "(", "None", ",", "None", ",", "self", ".", "input_shape", "[", "-", "1", "]", ")", ")", "\n", "hs", "=", "tf", ".", "scan", "(", "\n", "self", ".", "step", ",", "\n", "elems", "=", "shuffled_input", ",", "\n", "initializer", "=", "state", "\n", ")", "\n", "shuffled_hs", "=", "tf", ".", "transpose", "(", "hs", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "return", "shuffled_hs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfGRULayer.get_output_shape_for": [[1220, 1223], ["None"], "methods", ["None"], ["", "", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "n_batch", ",", "n_steps", "=", "input_shape", "[", ":", "2", "]", "\n", "return", "n_batch", ",", "n_steps", ",", "self", ".", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfGRULayer.get_step_layer": [[1224, 1226], ["layers.GRUStepLayer"], "methods", ["None"], ["", "def", "get_step_layer", "(", "self", ",", "l_in", ",", "l_prev_hidden", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "GRUStepLayer", "(", "incomings", "=", "[", "l_in", ",", "l_prev_hidden", "]", ",", "recurrent_layer", "=", "self", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.PseudoLSTMLayer.__init__": [[1258, 1315], ["layers.XavierUniformInitializer", "layers.OrthogonalInitializer", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "layers.Layer.__init__", "numpy.prod", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "dict"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param"], ["def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "hidden_nonlinearity", "=", "tf", ".", "tanh", ",", "\n", "gate_nonlinearity", "=", "tf", ".", "nn", ".", "sigmoid", ",", "W_x_init", "=", "XavierUniformInitializer", "(", ")", ",", "W_h_init", "=", "OrthogonalInitializer", "(", ")", ",", "\n", "forget_bias", "=", "1.0", ",", "b_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "hidden_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "hidden_init_trainable", "=", "False", ",", "cell_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "cell_init_trainable", "=", "False", ",", "\n", "gate_squash_inputs", "=", "False", ",", "layer_normalization", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "hidden_nonlinearity", "is", "None", ":", "\n", "            ", "hidden_nonlinearity", "=", "tf", ".", "identity", "\n", "\n", "", "if", "gate_nonlinearity", "is", "None", ":", "\n", "            ", "gate_nonlinearity", "=", "tf", ".", "identity", "\n", "\n", "", "super", "(", "PseudoLSTMLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "layer_normalization", "=", "layer_normalization", "\n", "\n", "input_shape", "=", "self", ".", "input_shape", "[", "2", ":", "]", "\n", "\n", "input_dim", "=", "np", ".", "prod", "(", "input_shape", ")", "\n", "# Weights for the initial hidden state (this is actually not used, since the initial hidden state is", "\n", "# determined by the initial cell state via h0 = self.nonlinearity(c0)). It is here merely for", "\n", "# interface convenience", "\n", "self", ".", "h0", "=", "self", ".", "add_param", "(", "hidden_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"h0\"", ",", "trainable", "=", "hidden_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "# Weights for the initial cell state", "\n", "self", ".", "c0", "=", "self", ".", "add_param", "(", "cell_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"c0\"", ",", "trainable", "=", "cell_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "# Weights for the incoming gate", "\n", "self", ".", "W_xi", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xi\"", ")", "\n", "self", ".", "W_hi", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hi\"", ")", "\n", "self", ".", "b_i", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_i\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the forget gate", "\n", "self", ".", "W_xf", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xf\"", ")", "\n", "self", ".", "W_hf", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hf\"", ")", "\n", "self", ".", "b_f", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_f\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the out gate", "\n", "self", ".", "W_xo", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xo\"", ")", "\n", "self", ".", "W_ho", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_ho\"", ")", "\n", "self", ".", "b_o", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_o\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the cell gate", "\n", "self", ".", "W_xc", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xc\"", ")", "\n", "self", ".", "W_hc", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hc\"", ")", "\n", "self", ".", "b_c", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_c\"", ",", "regularizable", "=", "False", ")", "\n", "\n", "self", ".", "gate_nonlinearity", "=", "gate_nonlinearity", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "nonlinearity", "=", "hidden_nonlinearity", "\n", "self", ".", "forget_bias", "=", "forget_bias", "\n", "self", ".", "gate_squash_inputs", "=", "gate_squash_inputs", "\n", "\n", "self", ".", "W_x_ifo", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_xi", ",", "self", ".", "W_xf", ",", "self", ".", "W_xo", "]", ")", "\n", "self", ".", "W_h_ifo", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_hi", ",", "self", ".", "W_hf", ",", "self", ".", "W_ho", "]", ")", "\n", "\n", "self", ".", "W_x_if", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_xi", ",", "self", ".", "W_xf", "]", ")", "\n", "self", ".", "W_h_if", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_hi", ",", "self", ".", "W_hf", "]", ")", "\n", "\n", "self", ".", "norm_params", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.PseudoLSTMLayer.step": [[1316, 1385], ["layers.apply_ln", "layers.PseudoLSTMLayer.nonlinearity", "apply_ln.", "apply_ln.", "tensorflow.split", "tensorflow.split", "layers.PseudoLSTMLayer.gate_nonlinearity", "layers.PseudoLSTMLayer.gate_nonlinearity", "layers.PseudoLSTMLayer.nonlinearity", "layers.PseudoLSTMLayer.nonlinearity", "tensorflow.concat", "apply_ln.", "apply_ln.", "tensorflow.split", "tensorflow.split", "layers.PseudoLSTMLayer.gate_nonlinearity", "layers.PseudoLSTMLayer.gate_nonlinearity", "layers.PseudoLSTMLayer.gate_nonlinearity", "layers.PseudoLSTMLayer.nonlinearity", "layers.PseudoLSTMLayer.nonlinearity", "tensorflow.concat", "tensorflow.matmul", "tensorflow.matmul", "apply_ln.", "tensorflow.matmul", "tensorflow.matmul", "apply_ln.", "apply_ln.", "apply_ln.", "apply_ln.", "apply_ln.", "apply_ln.", "apply_ln.", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.apply_ln"], ["", "def", "step", "(", "self", ",", "hcprev", ",", "x", ")", ":", "\n", "        ", "hprev", "=", "hcprev", "[", ":", ",", ":", "self", ".", "num_units", "]", "\n", "cprev", "=", "hcprev", "[", ":", ",", "self", ".", "num_units", ":", "]", "\n", "\n", "if", "self", ".", "layer_normalization", ":", "\n", "            ", "ln", "=", "apply_ln", "(", "self", ")", "\n", "", "else", ":", "\n", "            ", "ln", "=", "lambda", "x", ",", "*", "args", ":", "x", "\n", "\n", "", "if", "self", ".", "gate_squash_inputs", ":", "\n", "            ", "\"\"\"\n                Out gate:          o(t) = \u03c3(W_ho @ h(t-1)) + W_xo @ x(t) + b_o)\n                Incoming gate:     i(t) = \u03c3(W_hi @ (o(t) * h(t-1)) + W_xi @ x(t) + b_i)\n                Forget gate:       f(t) = \u03c3(W_hf @ (o(t) * h(t-1)) + W_xf @ x(t) + b_f)\n                New cell gate:     c_new(t) = \u03d5(W_hc @ (o(t) * h(t-1)) + W_xc @ x(t) + b_c)\n                Cell state:        c(t) = f(t) * c(t-1) + i(t) * c_new(t)\n                Hidden state:      h(t) = \u03d5(c(t))\n                Output:            out  = h(t)\n            \"\"\"", "\n", "\n", "o", "=", "self", ".", "nonlinearity", "(", "\n", "ln", "(", "tf", ".", "matmul", "(", "hprev", ",", "self", ".", "W_ho", ")", ",", "\"h_o\"", ")", "+", "\n", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_xo", ")", ",", "\"x_o\"", ")", "+", "self", ".", "b_o", "\n", ")", "\n", "\n", "x_if", "=", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_x_if", ")", ",", "\"x_if\"", ")", "\n", "h_if", "=", "ln", "(", "tf", ".", "matmul", "(", "o", "*", "hprev", ",", "self", ".", "W_h_if", ")", ",", "\"h_if\"", ")", "\n", "\n", "x_i", ",", "x_f", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "x_if", ")", "\n", "h_i", ",", "h_f", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "h_if", ")", "\n", "\n", "i", "=", "self", ".", "gate_nonlinearity", "(", "x_i", "+", "h_i", "+", "self", ".", "b_i", ")", "\n", "f", "=", "self", ".", "gate_nonlinearity", "(", "x_f", "+", "h_f", "+", "self", ".", "b_f", "+", "self", ".", "forget_bias", ")", "\n", "c_new", "=", "self", ".", "nonlinearity", "(", "\n", "ln", "(", "tf", ".", "matmul", "(", "o", "*", "hprev", ",", "self", ".", "W_hc", ")", ",", "\"h_c\"", ")", "+", "\n", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_xc", ")", ",", "\"x_c\"", ")", "+", "\n", "self", ".", "b_c", "\n", ")", "\n", "c", "=", "f", "*", "cprev", "+", "i", "*", "c_new", "\n", "h", "=", "self", ".", "nonlinearity", "(", "ln", "(", "c", ",", "\"c\"", ")", ")", "\n", "return", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "h", ",", "c", "]", ")", "\n", "", "else", ":", "\n", "            ", "\"\"\"\n                Incoming gate:     i(t) = \u03c3(W_hi @ h(t-1)) + W_xi @ x(t) + b_i)\n                Forget gate:       f(t) = \u03c3(W_hf @ h(t-1)) + W_xf @ x(t) + b_f)\n                Out gate:          o(t) = \u03c3(W_ho @ h(t-1)) + W_xo @ x(t) + b_o)\n                New cell gate:     c_new(t) = \u03d5(W_hc @ (o(t) * h(t-1)) + W_xc @ x(t) + b_c)\n                Cell gate:         c(t) = f(t) * c(t-1) + i(t) * c_new(t)\n                Hidden state:      h(t) = \u03d5(c(t))\n                Output:            out  = h(t)\n            \"\"\"", "\n", "\n", "x_ifo", "=", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_x_ifo", ")", ",", "\"x_ifo\"", ")", "\n", "h_ifo", "=", "ln", "(", "tf", ".", "matmul", "(", "hprev", ",", "self", ".", "W_h_ifo", ")", ",", "\"h_ifo\"", ")", "\n", "\n", "x_i", ",", "x_f", ",", "x_o", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "3", ",", "value", "=", "x_ifo", ")", "\n", "h_i", ",", "h_f", ",", "h_o", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "3", ",", "value", "=", "h_ifo", ")", "\n", "\n", "i", "=", "self", ".", "gate_nonlinearity", "(", "x_i", "+", "h_i", "+", "self", ".", "b_i", ")", "\n", "f", "=", "self", ".", "gate_nonlinearity", "(", "x_f", "+", "h_f", "+", "self", ".", "b_f", "+", "self", ".", "forget_bias", ")", "\n", "o", "=", "self", ".", "gate_nonlinearity", "(", "x_o", "+", "h_o", "+", "self", ".", "b_o", ")", "\n", "c_new", "=", "self", ".", "nonlinearity", "(", "\n", "ln", "(", "tf", ".", "matmul", "(", "o", "*", "hprev", ",", "self", ".", "W_hc", ")", ",", "\"h_c\"", ")", "+", "\n", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_xc", ")", ",", "\"x_c\"", ")", "+", "\n", "self", ".", "b_c", "\n", ")", "\n", "c", "=", "f", "*", "cprev", "+", "i", "*", "c_new", "\n", "h", "=", "self", ".", "nonlinearity", "(", "ln", "(", "c", ",", "\"c\"", ")", ")", "\n", "return", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "h", ",", "c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.PseudoLSTMLayer.get_step_layer": [[1386, 1388], ["layers.LSTMStepLayer"], "methods", ["None"], ["", "", "def", "get_step_layer", "(", "self", ",", "l_in", ",", "l_prev_state", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "LSTMStepLayer", "(", "incomings", "=", "[", "l_in", ",", "l_prev_state", "]", ",", "recurrent_layer", "=", "self", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.PseudoLSTMLayer.get_output_shape_for": [[1389, 1392], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "n_batch", ",", "n_steps", "=", "input_shape", "[", ":", "2", "]", "\n", "return", "n_batch", ",", "n_steps", ",", "self", ".", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.PseudoLSTMLayer.get_output_for": [[1393, 1414], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.tile", "layers.PseudoLSTMLayer.nonlinearity", "tensorflow.transpose", "tensorflow.scan", "tensorflow.transpose", "tensorflow.stack", "tensorflow.reshape", "tensorflow.concat"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "input_shape", "=", "tf", ".", "shape", "(", "input", ")", "\n", "n_batches", "=", "input_shape", "[", "0", "]", "\n", "n_steps", "=", "input_shape", "[", "1", "]", "\n", "input", "=", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "[", "n_batches", ",", "n_steps", ",", "-", "1", "]", ")", ")", "\n", "c0s", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "c0", ",", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "\n", "(", "n_batches", ",", "1", ")", "\n", ")", "\n", "h0s", "=", "self", ".", "nonlinearity", "(", "c0s", ")", "\n", "# flatten extra dimensions", "\n", "shuffled_input", "=", "tf", ".", "transpose", "(", "input", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "hcs", "=", "tf", ".", "scan", "(", "\n", "self", ".", "step", ",", "\n", "elems", "=", "shuffled_input", ",", "\n", "initializer", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "h0s", ",", "c0s", "]", ")", "\n", ")", "\n", "shuffled_hcs", "=", "tf", ".", "transpose", "(", "hcs", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "shuffled_hs", "=", "shuffled_hcs", "[", ":", ",", ":", ",", ":", "self", ".", "num_units", "]", "\n", "shuffled_cs", "=", "shuffled_hcs", "[", ":", ",", ":", ",", "self", ".", "num_units", ":", "]", "\n", "return", "shuffled_hs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMLayer.__init__": [[1429, 1494], ["layers.XavierUniformInitializer", "layers.OrthogonalInitializer", "tensorflow.random_normal_initializer", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "layers.Layer.__init__", "numpy.prod", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "tensorflow.concat", "tensorflow.concat", "dict", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param"], ["def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "hidden_nonlinearity", "=", "tf", ".", "tanh", ",", "\n", "gate_nonlinearity", "=", "tf", ".", "nn", ".", "sigmoid", ",", "W_x_init", "=", "XavierUniformInitializer", "(", ")", ",", "W_h_init", "=", "OrthogonalInitializer", "(", ")", ",", "\n", "forget_bias", "=", "1.0", ",", "use_peepholes", "=", "False", ",", "w_init", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.1", ")", ",", "\n", "b_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "hidden_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "hidden_init_trainable", "=", "False", ",", "\n", "cell_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "cell_init_trainable", "=", "False", ",", "layer_normalization", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "hidden_nonlinearity", "is", "None", ":", "\n", "            ", "hidden_nonlinearity", "=", "tf", ".", "identity", "\n", "\n", "", "if", "gate_nonlinearity", "is", "None", ":", "\n", "            ", "gate_nonlinearity", "=", "tf", ".", "identity", "\n", "\n", "", "super", "(", "LSTMLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "layer_normalization", "=", "layer_normalization", "\n", "\n", "input_shape", "=", "self", ".", "input_shape", "[", "2", ":", "]", "\n", "\n", "input_dim", "=", "np", ".", "prod", "(", "input_shape", ")", "\n", "# Weights for the initial hidden state", "\n", "self", ".", "h0", "=", "self", ".", "add_param", "(", "hidden_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"h0\"", ",", "trainable", "=", "hidden_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "# Weights for the initial cell state", "\n", "self", ".", "c0", "=", "self", ".", "add_param", "(", "cell_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"c0\"", ",", "trainable", "=", "cell_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "# Weights for the incoming gate", "\n", "self", ".", "W_xi", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xi\"", ")", "\n", "self", ".", "W_hi", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hi\"", ")", "\n", "if", "use_peepholes", ":", "\n", "            ", "self", ".", "w_ci", "=", "self", ".", "add_param", "(", "w_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"w_ci\"", ")", "\n", "", "self", ".", "b_i", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_i\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the forget gate", "\n", "self", ".", "W_xf", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xf\"", ")", "\n", "self", ".", "W_hf", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hf\"", ")", "\n", "if", "use_peepholes", ":", "\n", "            ", "self", ".", "w_cf", "=", "self", ".", "add_param", "(", "w_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"w_cf\"", ")", "\n", "", "self", ".", "b_f", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_f\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the cell gate", "\n", "self", ".", "W_xc", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xc\"", ")", "\n", "self", ".", "W_hc", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hc\"", ")", "\n", "self", ".", "b_c", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_c\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the reset gate", "\n", "self", ".", "W_xr", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xr\"", ")", "\n", "self", ".", "W_hr", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hr\"", ")", "\n", "self", ".", "b_r", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_r\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the out gate", "\n", "self", ".", "W_xo", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xo\"", ")", "\n", "self", ".", "W_ho", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_ho\"", ")", "\n", "if", "use_peepholes", ":", "\n", "            ", "self", ".", "w_co", "=", "self", ".", "add_param", "(", "w_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"w_co\"", ")", "\n", "", "self", ".", "b_o", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_o\"", ",", "regularizable", "=", "False", ")", "\n", "self", ".", "gate_nonlinearity", "=", "gate_nonlinearity", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "nonlinearity", "=", "hidden_nonlinearity", "\n", "self", ".", "forget_bias", "=", "forget_bias", "\n", "self", ".", "use_peepholes", "=", "use_peepholes", "\n", "\n", "self", ".", "W_x_ifco", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_xi", ",", "self", ".", "W_xf", ",", "self", ".", "W_xc", ",", "self", ".", "W_xo", "]", ")", "\n", "self", ".", "W_h_ifco", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_hi", ",", "self", ".", "W_hf", ",", "self", ".", "W_hc", ",", "self", ".", "W_ho", "]", ")", "\n", "\n", "if", "use_peepholes", ":", "\n", "            ", "self", ".", "w_c_ifo", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "self", ".", "w_ci", ",", "self", ".", "w_cf", ",", "self", ".", "w_co", "]", ")", "\n", "\n", "", "self", ".", "norm_params", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMLayer.step": [[1495, 1531], ["apply_ln.", "apply_ln.", "tensorflow.split", "tensorflow.split", "tensorflow.concat", "layers.apply_ln", "tensorflow.matmul", "tensorflow.matmul", "layers.LSTMLayer.gate_nonlinearity", "layers.LSTMLayer.gate_nonlinearity", "layers.LSTMLayer.gate_nonlinearity", "layers.LSTMLayer.gate_nonlinearity", "layers.LSTMLayer.gate_nonlinearity", "layers.LSTMLayer.gate_nonlinearity", "layers.LSTMLayer.nonlinearity", "layers.LSTMLayer.nonlinearity", "apply_ln."], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.apply_ln"], ["", "def", "step", "(", "self", ",", "hcprev", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            Incoming gate:     i(t) = f_i(x(t) @ W_xi + h(t-1) @ W_hi + w_ci * c(t-1) + b_i)\n            Forget gate:       f(t) = f_f(x(t) @ W_xf + h(t-1) @ W_hf + w_cf * c(t-1) + b_f)\n            Cell gate:         c(t) = f(t) * c(t - 1) + i(t) * f_c(x(t) @ W_xc + h(t-1) @ W_hc + b_c)\n            Out gate:          o(t) = f_o(x(t) @ W_xo + h(t-1) W_ho + w_co * c(t) + b_o)\n            New hidden state:  h(t) = o(t) * f_h(c(t))\n        \"\"\"", "\n", "\n", "hprev", "=", "hcprev", "[", ":", ",", ":", "self", ".", "num_units", "]", "\n", "cprev", "=", "hcprev", "[", ":", ",", "self", ".", "num_units", ":", "]", "\n", "\n", "if", "self", ".", "layer_normalization", ":", "\n", "            ", "ln", "=", "apply_ln", "(", "self", ")", "\n", "", "else", ":", "\n", "            ", "ln", "=", "lambda", "x", ",", "*", "args", ":", "x", "\n", "\n", "", "x_ifco", "=", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_x_ifco", ")", ",", "\"x_ifco\"", ")", "\n", "h_ifco", "=", "ln", "(", "tf", ".", "matmul", "(", "hprev", ",", "self", ".", "W_h_ifco", ")", ",", "\"h_ifco\"", ")", "\n", "x_i", ",", "x_f", ",", "x_c", ",", "x_o", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "4", ",", "value", "=", "x_ifco", ")", "\n", "h_i", ",", "h_f", ",", "h_c", ",", "h_o", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "4", ",", "value", "=", "h_ifco", ")", "\n", "\n", "if", "self", ".", "use_peepholes", ":", "\n", "            ", "i", "=", "self", ".", "gate_nonlinearity", "(", "x_i", "+", "h_i", "+", "self", ".", "w_ci", "*", "cprev", "+", "self", ".", "b_i", ")", "\n", "f", "=", "self", ".", "gate_nonlinearity", "(", "x_f", "+", "h_f", "+", "self", ".", "w_cf", "*", "cprev", "+", "self", ".", "b_f", "+", "self", ".", "forget_bias", ")", "\n", "\n", "o", "=", "self", ".", "gate_nonlinearity", "(", "x_o", "+", "h_o", "+", "self", ".", "w_co", "*", "cprev", "+", "self", ".", "b_o", ")", "\n", "", "else", ":", "\n", "            ", "i", "=", "self", ".", "gate_nonlinearity", "(", "x_i", "+", "h_i", "+", "self", ".", "b_i", ")", "\n", "f", "=", "self", ".", "gate_nonlinearity", "(", "x_f", "+", "h_f", "+", "self", ".", "b_f", "+", "self", ".", "forget_bias", ")", "\n", "o", "=", "self", ".", "gate_nonlinearity", "(", "x_o", "+", "h_o", "+", "self", ".", "b_o", ")", "\n", "\n", "", "c", "=", "f", "*", "cprev", "+", "i", "*", "self", ".", "nonlinearity", "(", "x_c", "+", "h_c", "+", "self", ".", "b_c", ")", "\n", "h", "=", "o", "*", "self", ".", "nonlinearity", "(", "ln", "(", "c", ",", "\"c\"", ")", ")", "\n", "\n", "return", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "h", ",", "c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMLayer.get_step_layer": [[1532, 1534], ["layers.LSTMStepLayer"], "methods", ["None"], ["", "def", "get_step_layer", "(", "self", ",", "l_in", ",", "l_prev_state", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "LSTMStepLayer", "(", "incomings", "=", "[", "l_in", ",", "l_prev_state", "]", ",", "recurrent_layer", "=", "self", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMLayer.get_output_shape_for": [[1535, 1538], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "n_batch", ",", "n_steps", "=", "input_shape", "[", ":", "2", "]", "\n", "return", "n_batch", ",", "n_steps", ",", "self", ".", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMLayer.get_output_for": [[1539, 1565], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.transpose", "tensorflow.scan", "tensorflow.transpose", "tensorflow.stack", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "input_shape", "=", "tf", ".", "shape", "(", "input", ")", "\n", "n_batches", "=", "input_shape", "[", "0", "]", "\n", "n_steps", "=", "input_shape", "[", "1", "]", "\n", "input", "=", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "[", "n_batches", ",", "n_steps", ",", "-", "1", "]", ")", ")", "\n", "h0s", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "h0", ",", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "\n", "(", "n_batches", ",", "1", ")", "\n", ")", "\n", "c0s", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "c0", ",", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "\n", "(", "n_batches", ",", "1", ")", "\n", ")", "\n", "# flatten extra dimensions", "\n", "shuffled_input", "=", "tf", ".", "transpose", "(", "input", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "hcs", "=", "tf", ".", "scan", "(", "\n", "self", ".", "step", ",", "\n", "elems", "=", "shuffled_input", ",", "\n", "initializer", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "h0s", ",", "c0s", "]", ")", "\n", ")", "\n", "shuffled_hcs", "=", "tf", ".", "transpose", "(", "hcs", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "shuffled_hs", "=", "shuffled_hcs", "[", ":", ",", ":", ",", ":", "self", ".", "num_units", "]", "\n", "shuffled_cs", "=", "shuffled_hcs", "[", ":", ",", ":", ",", "self", ".", "num_units", ":", "]", "\n", "if", "'recurrent_state_output'", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "'recurrent_state_output'", "]", "[", "self", "]", "=", "shuffled_hcs", "\n", "", "return", "shuffled_hs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.__init__": [[1568, 1571], ["layers.MergeLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incomings", ",", "recurrent_layer", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LSTMStepLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "_recurrent_layer", "=", "recurrent_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_params": [[1572, 1574], ["layers.LSTMStepLayer._recurrent_layer._get_params"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized._get_params"], ["", "def", "get_params", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "return", "self", ".", "_recurrent_layer", ".", "_get_params", "(", "**", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_output_shape_for": [[1575, 1578], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "n_batch", "=", "input_shapes", "[", "0", "]", "[", "0", "]", "\n", "return", "n_batch", ",", "2", "*", "self", ".", "_recurrent_layer", ".", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_output_for": [[1579, 1585], ["tensorflow.reshape", "layers.LSTMStepLayer._recurrent_layer.step", "tensorflow.shape", "tensorflow.stack"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfBasicLSTMLayer.step"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", ",", "hcprev", "=", "inputs", "\n", "n_batch", "=", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "tf", ".", "stack", "(", "[", "n_batch", ",", "-", "1", "]", ")", ")", "\n", "hc", "=", "self", ".", "_recurrent_layer", ".", "step", "(", "hcprev", ",", "x", ")", "\n", "return", "hc", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfBasicLSTMLayer.__init__": [[1592, 1629], ["tensorflow.contrib.rnn.BasicLSTMCell", "layers.Layer.__init__", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "layers.TfBasicLSTMLayer.add_param", "layers.TfBasicLSTMLayer.add_param", "len", "tensorflow.variable_scope", "tensorflow.contrib.rnn.BasicLSTMCell.", "vs.reuse_variables", "layers.TfBasicLSTMLayer.add_param", "set", "set", "layers.TfBasicLSTMLayer.add_param", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "tensorflow.global_variables", "v.name.startswith", "tensorflow.trainable_variables", "v.name.startswith"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param"], ["def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "hidden_nonlinearity", ",", "horizon", "=", "None", ",", "hidden_init_trainable", "=", "False", ",", "\n", "forget_bias", "=", "1.0", ",", "use_peepholes", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "not", "use_peepholes", ",", "\"Basic LSTM does not support peepholes!\"", "\n", "assert", "len", "(", "incoming", ".", "output_shape", ")", "==", "3", "\n", "input_dim", "=", "incoming", ".", "shape", "[", "2", "]", "\n", "lstm", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n", "num_units", "=", "num_units", ",", "\n", "activation", "=", "hidden_nonlinearity", ",", "\n", "state_is_tuple", "=", "True", ",", "\n", "forget_bias", "=", "forget_bias", "\n", ")", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "horizon", "=", "horizon", "\n", "self", ".", "lstm", "=", "lstm", "\n", "self", ".", "hidden_nonlinearity", "=", "hidden_nonlinearity", "\n", "Layer", ".", "__init__", "(", "self", ",", "incoming", "=", "incoming", ",", "**", "kwargs", ")", "\n", "# dummy input variable", "\n", "input_dummy", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "input_dim", ")", ",", "\"input_dummy\"", ")", "\n", "hidden_dummy", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "num_units", ")", ",", "\"hidden_dummy\"", ")", "\n", "cell_dummy", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "num_units", ")", ",", "\"cell_dummy\"", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "vs", ":", "\n", "            ", "lstm", "(", "input_dummy", ",", "(", "cell_dummy", ",", "hidden_dummy", ")", ",", "scope", "=", "vs", ")", "\n", "vs", ".", "reuse_variables", "(", ")", "\n", "self", ".", "scope", "=", "vs", "\n", "all_vars", "=", "[", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "if", "v", ".", "name", ".", "startswith", "(", "vs", ".", "name", ")", "]", "\n", "trainable_vars", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "if", "v", ".", "name", ".", "startswith", "(", "vs", ".", "name", ")", "]", "\n", "\n", "", "for", "var", "in", "trainable_vars", ":", "\n", "            ", "self", ".", "add_param", "(", "spec", "=", "var", ",", "shape", "=", "None", ",", "name", "=", "None", ",", "trainable", "=", "True", ")", "\n", "", "for", "var", "in", "set", "(", "all_vars", ")", "-", "set", "(", "trainable_vars", ")", ":", "\n", "            ", "self", ".", "add_param", "(", "spec", "=", "var", ",", "shape", "=", "None", ",", "name", "=", "None", ",", "trainable", "=", "False", ")", "\n", "\n", "", "self", ".", "h0", "=", "self", ".", "add_param", "(", "tf", ".", "zeros_initializer", "(", ")", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"h0\"", ",", "trainable", "=", "hidden_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "self", ".", "c0", "=", "self", ".", "add_param", "(", "tf", ".", "zeros_initializer", "(", ")", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"c0\"", ",", "trainable", "=", "hidden_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfBasicLSTMLayer.step": [[1630, 1636], ["x.set_shape", "tensorflow.concat", "layers.TfBasicLSTMLayer.lstm"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "hcprev", ",", "x", ")", ":", "\n", "        ", "hprev", "=", "hcprev", "[", ":", ",", ":", "self", ".", "num_units", "]", "\n", "cprev", "=", "hcprev", "[", ":", ",", "self", ".", "num_units", ":", "]", "\n", "x", ".", "set_shape", "(", "(", "None", ",", "self", ".", "input_shape", "[", "-", "1", "]", ")", ")", "\n", "c", ",", "h", "=", "self", ".", "lstm", "(", "x", ",", "(", "cprev", ",", "hprev", ")", ",", "scope", "=", "self", ".", "scope", ")", "[", "1", "]", "\n", "return", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "h", ",", "c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfBasicLSTMLayer.get_output_for": [[1637, 1673], ["tensorflow.shape", "tensorflow.tile", "tensorflow.tile.set_shape", "tensorflow.tile", "tensorflow.tile.set_shape", "tensorflow.reshape", "tensorflow.reshape", "range", "tensorflow.concat", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose.set_shape", "tensorflow.scan", "tensorflow.transpose", "layers.TfBasicLSTMLayer.lstm", "tensorflow.concat.append", "tensorflow.stack", "tensorflow.expand_dims", "tensorflow.concat"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "input_shape", "=", "tf", ".", "shape", "(", "input", ")", "\n", "n_batches", "=", "input_shape", "[", "0", "]", "\n", "h0s", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "h0", ",", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "\n", "(", "n_batches", ",", "1", ")", "\n", ")", "\n", "h0s", ".", "set_shape", "(", "(", "None", ",", "self", ".", "num_units", ")", ")", "\n", "c0s", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "c0", ",", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "\n", "(", "n_batches", ",", "1", ")", "\n", ")", "\n", "c0s", ".", "set_shape", "(", "(", "None", ",", "self", ".", "num_units", ")", ")", "\n", "state", "=", "(", "c0s", ",", "h0s", ")", "\n", "if", "self", ".", "horizon", "is", "not", "None", ":", "\n", "            ", "outputs", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "self", ".", "horizon", ")", ":", "\n", "                ", "output", ",", "state", "=", "self", ".", "lstm", "(", "input", "[", ":", ",", "idx", ",", ":", "]", ",", "state", ",", "scope", "=", "self", ".", "scope", ")", "# self.name)", "\n", "outputs", ".", "append", "(", "tf", ".", "expand_dims", "(", "output", ",", "1", ")", ")", "\n", "", "outputs", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "outputs", ")", "\n", "return", "outputs", "\n", "", "else", ":", "\n", "            ", "n_steps", "=", "input_shape", "[", "1", "]", "\n", "input", "=", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "[", "n_batches", ",", "n_steps", ",", "-", "1", "]", ")", ")", "\n", "# flatten extra dimensions", "\n", "shuffled_input", "=", "tf", ".", "transpose", "(", "input", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "shuffled_input", ".", "set_shape", "(", "(", "None", ",", "None", ",", "self", ".", "input_shape", "[", "-", "1", "]", ")", ")", "\n", "hcs", "=", "tf", ".", "scan", "(", "\n", "self", ".", "step", ",", "\n", "elems", "=", "shuffled_input", ",", "\n", "initializer", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "h0s", ",", "c0s", "]", ")", ",", "\n", ")", "\n", "shuffled_hcs", "=", "tf", ".", "transpose", "(", "hcs", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "shuffled_hs", "=", "shuffled_hcs", "[", ":", ",", ":", ",", ":", "self", ".", "num_units", "]", "\n", "shuffled_cs", "=", "shuffled_hcs", "[", ":", ",", ":", ",", "self", ".", "num_units", ":", "]", "\n", "return", "shuffled_hs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfBasicLSTMLayer.get_output_shape_for": [[1674, 1677], ["None"], "methods", ["None"], ["", "", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "n_batch", ",", "n_steps", "=", "input_shape", "[", ":", "2", "]", "\n", "return", "n_batch", ",", "n_steps", ",", "self", ".", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.TfBasicLSTMLayer.get_step_layer": [[1678, 1680], ["layers.LSTMStepLayer"], "methods", ["None"], ["", "def", "get_step_layer", "(", "self", ",", "l_in", ",", "l_prev_state", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "LSTMStepLayer", "(", "incomings", "=", "[", "l_in", ",", "l_prev_state", "]", ",", "recurrent_layer", "=", "self", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.NonlinearityLayer.__init__": [[1731, 1735], ["layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "NonlinearityLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "nonlinearity", "=", "(", "tf", ".", "identity", "if", "nonlinearity", "is", "None", "\n", "else", "nonlinearity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.NonlinearityLayer.get_output_for": [[1736, 1738], ["layers.NonlinearityLayer.nonlinearity"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "nonlinearity", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.NonlinearityLayer.get_output_shape_for": [[1739, 1741], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.BatchNormLayer.__init__": [[1744, 1772], ["tensorflow.zeros_initializer", "tensorflow.ones_initializer", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "layers.Layer.__init__", "list", "layers.BatchNormLayer.add_param", "layers.BatchNormLayer.add_param", "range", "layers.BatchNormLayer.add_param", "layers.BatchNormLayer.add_param", "len"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "center", "=", "True", ",", "scale", "=", "False", ",", "epsilon", "=", "0.001", ",", "decay", "=", "0.9", ",", "\n", "beta", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "gamma", "=", "tf", ".", "ones_initializer", "(", ")", ",", "moving_mean", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "moving_variance", "=", "tf", ".", "ones_initializer", "(", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BatchNormLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "center", "=", "center", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "decay", "=", "decay", "\n", "\n", "input_shape", "=", "incoming", ".", "output_shape", "\n", "axis", "=", "list", "(", "range", "(", "len", "(", "input_shape", ")", "-", "1", ")", ")", "\n", "params_shape", "=", "input_shape", "[", "-", "1", ":", "]", "\n", "\n", "if", "center", ":", "\n", "            ", "self", ".", "beta", "=", "self", ".", "add_param", "(", "beta", ",", "shape", "=", "params_shape", ",", "name", "=", "'beta'", ",", "trainable", "=", "True", ",", "regularizable", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "beta", "=", "None", "\n", "", "if", "scale", ":", "\n", "            ", "self", ".", "gamma", "=", "self", ".", "add_param", "(", "gamma", ",", "shape", "=", "params_shape", ",", "name", "=", "'gamma'", ",", "trainable", "=", "True", ",", "regularizable", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gamma", "=", "None", "\n", "\n", "", "self", ".", "moving_mean", "=", "self", ".", "add_param", "(", "moving_mean", ",", "shape", "=", "params_shape", ",", "name", "=", "'moving_mean'", ",", "trainable", "=", "False", ",", "\n", "regularizable", "=", "False", ")", "\n", "self", ".", "moving_variance", "=", "self", ".", "add_param", "(", "moving_variance", ",", "shape", "=", "params_shape", ",", "name", "=", "'moving_variance'", ",", "\n", "trainable", "=", "False", ",", "regularizable", "=", "False", ")", "\n", "self", ".", "axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.BatchNormLayer.get_output_for": [[1773, 1792], ["tensorflow.nn.batch_normalization.set_shape", "tensorflow.nn.moments", "tensorflow.python.training.moving_averages.assign_moving_average", "tensorflow.python.training.moving_averages.assign_moving_average", "tensorflow.nn.batch_normalization", "tensorflow.control_dependencies", "tensorflow.nn.batch_normalization"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "phase", "=", "'train'", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "phase", "==", "'train'", ":", "\n", "# Calculate the moments based on the individual batch.", "\n", "            ", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "input", ",", "self", ".", "axis", ",", "shift", "=", "self", ".", "moving_mean", ")", "\n", "# Update the moving_mean and moving_variance moments.", "\n", "update_moving_mean", "=", "moving_averages", ".", "assign_moving_average", "(", "\n", "self", ".", "moving_mean", ",", "mean", ",", "self", ".", "decay", ")", "\n", "update_moving_variance", "=", "moving_averages", ".", "assign_moving_average", "(", "\n", "self", ".", "moving_variance", ",", "variance", ",", "self", ".", "decay", ")", "\n", "# Make sure the updates are computed here.", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "update_moving_mean", ",", "\n", "update_moving_variance", "]", ")", ":", "\n", "                ", "output", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "\n", "input", ",", "mean", ",", "variance", ",", "self", ".", "beta", ",", "self", ".", "gamma", ",", "self", ".", "epsilon", ")", "\n", "", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "\n", "input", ",", "self", ".", "moving_mean", ",", "self", ".", "moving_variance", ",", "self", ".", "beta", ",", "self", ".", "gamma", ",", "self", ".", "epsilon", ")", "\n", "", "output", ".", "set_shape", "(", "self", ".", "input_shape", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.BatchNormLayer.get_output_shape_for": [[1793, 1795], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ElemwiseSumLayer.__init__": [[1817, 1819], ["layers.MergeLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incomings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ElemwiseSumLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ElemwiseSumLayer.get_output_for": [[1820, 1822], ["functools.reduce"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "functools", ".", "reduce", "(", "tf", ".", "add", ",", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ElemwiseSumLayer.get_output_shape_for": [[1823, 1826], ["len", "set"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "assert", "len", "(", "set", "(", "input_shapes", ")", ")", "==", "1", "\n", "return", "input_shapes", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.create_param": [[26, 40], ["hasattr", "tensorflow.get_variable", "hasattr", "isinstance", "tensorflow.constant"], "function", ["None"], ["def", "create_param", "(", "spec", ",", "shape", ",", "name", ",", "trainable", "=", "True", ",", "regularizable", "=", "True", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "spec", ",", "'__call__'", ")", ":", "\n", "        ", "assert", "isinstance", "(", "spec", ",", "(", "tf", ".", "Tensor", ",", "tf", ".", "Variable", ")", ")", "\n", "return", "spec", "\n", "", "assert", "hasattr", "(", "spec", ",", "'__call__'", ")", "\n", "if", "regularizable", ":", "\n", "# use the default regularizer", "\n", "        ", "regularizer", "=", "None", "\n", "", "else", ":", "\n", "# do not regularize this variable", "\n", "        ", "regularizer", "=", "lambda", "_", ":", "tf", ".", "constant", "(", "0.", ")", "\n", "", "return", "tf", ".", "get_variable", "(", "\n", "name", "=", "name", ",", "shape", "=", "shape", ",", "initializer", "=", "spec", ",", "trainable", "=", "trainable", ",", "\n", "regularizer", "=", "regularizer", ",", "dtype", "=", "tf", ".", "float32", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.as_tuple": [[43, 58], ["tuple", "TypeError", "len", "ValueError", "all", "isinstance"], "function", ["None"], ["", "def", "as_tuple", "(", "x", ",", "N", ",", "t", "=", "None", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "X", "=", "tuple", "(", "x", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "X", "=", "(", "x", ",", ")", "*", "N", "\n", "\n", "", "if", "(", "t", "is", "not", "None", ")", "and", "not", "all", "(", "isinstance", "(", "v", ",", "t", ")", "for", "v", "in", "X", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"expected a single value or an iterable \"", "\n", "\"of {0}, got {1} instead\"", ".", "format", "(", "t", ".", "__name__", ",", "x", ")", ")", "\n", "\n", "", "if", "len", "(", "X", ")", "!=", "N", ":", "\n", "        ", "raise", "ValueError", "(", "\"expected a single value or an iterable \"", "\n", "\"with length {0}, got {1} instead\"", ".", "format", "(", "N", ",", "x", ")", ")", "\n", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.conv_output_length": [[60, 115], ["isinstance", "ValueError"], "function", ["None"], ["", "def", "conv_output_length", "(", "input_length", ",", "filter_size", ",", "stride", ",", "pad", "=", "0", ")", ":", "\n", "    ", "\"\"\"Helper function to compute the output size of a convolution operation\n    This function computes the length along a single axis, which corresponds\n    to a 1D convolution. It can also be used for convolutions with higher\n    dimensionalities by using it individually for each axis.\n    Parameters\n    ----------\n    input_length : int or None\n        The size of the input.\n    filter_size : int\n        The size of the filter.\n    stride : int\n        The stride of the convolution operation.\n    pad : int, 'full' or 'same' (default: 0)\n        By default, the convolution is only computed where the input and the\n        filter fully overlap (a valid convolution). When ``stride=1``, this\n        yields an output that is smaller than the input by ``filter_size - 1``.\n        The `pad` argument allows you to implicitly pad the input with zeros,\n        extending the output size.\n        A single integer results in symmetric zero-padding of the given size on\n        both borders.\n        ``'full'`` pads with one less than the filter size on both sides. This\n        is equivalent to computing the convolution wherever the input and the\n        filter overlap by at least one position.\n        ``'same'`` pads with half the filter size on both sides (one less on\n        the second side for an even filter size). When ``stride=1``, this\n        results in an output size equal to the input size.\n    Returns\n    -------\n    int or None\n        The output size corresponding to the given convolution parameters, or\n        ``None`` if `input_size` is ``None``.\n    Raises\n    ------\n    ValueError\n        When an invalid padding is specified, a `ValueError` is raised.\n    \"\"\"", "\n", "if", "input_length", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "if", "pad", "==", "'valid'", ":", "\n", "        ", "output_length", "=", "input_length", "-", "filter_size", "+", "1", "\n", "", "elif", "pad", "==", "'full'", ":", "\n", "        ", "output_length", "=", "input_length", "+", "filter_size", "-", "1", "\n", "", "elif", "pad", "==", "'same'", ":", "\n", "        ", "output_length", "=", "input_length", "\n", "", "elif", "isinstance", "(", "pad", ",", "int", ")", ":", "\n", "        ", "output_length", "=", "input_length", "+", "2", "*", "pad", "-", "filter_size", "+", "1", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid pad: {0}'", ".", "format", "(", "pad", ")", ")", "\n", "\n", "# This is the integer arithmetic equivalent to", "\n", "# np.ceil(output_length / stride)", "\n", "", "output_length", "=", "(", "output_length", "+", "stride", "-", "1", ")", "//", "stride", "\n", "\n", "return", "output_length", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.py_ortho_init": [[323, 329], ["numpy.linalg.svd", "numpy.random.uniform"], "function", ["None"], ["", "", "def", "py_ortho_init", "(", "scale", ")", ":", "\n", "    ", "def", "_init", "(", "shape", ")", ":", "\n", "        ", "u", ",", "s", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "np", ".", "random", ".", "uniform", "(", "size", "=", "shape", ")", ")", "\n", "return", "np", ".", "cast", "[", "'float32'", "]", "(", "u", "*", "scale", ")", "\n", "\n", "", "return", "_init", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.pool_output_length": [[582, 590], ["int", "int", "numpy.ceil", "numpy.ceil", "float", "float", "float", "float"], "function", ["None"], ["", "", "def", "pool_output_length", "(", "input_length", ",", "pool_size", ",", "stride", ",", "pad", ")", ":", "\n", "    ", "if", "input_length", "is", "None", "or", "pool_size", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "if", "pad", "==", "\"SAME\"", ":", "\n", "        ", "return", "int", "(", "np", ".", "ceil", "(", "float", "(", "input_length", ")", "/", "float", "(", "stride", ")", ")", ")", "\n", "\n", "", "return", "int", "(", "np", ".", "ceil", "(", "float", "(", "input_length", "-", "pool_size", "+", "1", ")", "/", "float", "(", "stride", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.spatial_expected_softmax": [[641, 656], ["tensorflow.reshape", "len", "tensorflow.linspace", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_max", "vals.append", "tensorflow.concat", "x.get_shape", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.expand_dims", "x.get_shape", "x.get_shape"], "function", ["None"], ["", "", "def", "spatial_expected_softmax", "(", "x", ",", "temp", "=", "1", ")", ":", "\n", "    ", "assert", "len", "(", "x", ".", "get_shape", "(", ")", ")", "==", "4", "\n", "vals", "=", "[", "]", "\n", "for", "dim", "in", "[", "0", ",", "1", "]", ":", "\n", "        ", "dim_val", "=", "x", ".", "get_shape", "(", ")", "[", "dim", "+", "1", "]", ".", "value", "\n", "lin", "=", "tf", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "dim_val", ")", "\n", "lin", "=", "tf", ".", "expand_dims", "(", "lin", ",", "1", "-", "dim", ")", "\n", "lin", "=", "tf", ".", "expand_dims", "(", "lin", ",", "0", ")", "\n", "lin", "=", "tf", ".", "expand_dims", "(", "lin", ",", "3", ")", "\n", "m", "=", "tf", ".", "reduce_max", "(", "x", ",", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "e", "=", "tf", ".", "exp", "(", "(", "x", "-", "m", ")", "/", "temp", ")", "+", "1e-5", "\n", "val", "=", "tf", ".", "reduce_sum", "(", "e", "*", "lin", ",", "[", "1", ",", "2", "]", ")", "/", "(", "tf", ".", "reduce_sum", "(", "e", ",", "[", "1", ",", "2", "]", ")", ")", "\n", "vals", ".", "append", "(", "tf", ".", "expand_dims", "(", "val", ",", "2", ")", ")", "\n", "\n", "", "return", "tf", ".", "reshape", "(", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "vals", ")", ",", "[", "-", "1", ",", "x", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "*", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.apply_ln": [[993, 1015], ["tensorflow.nn.moments", "layer.add_param", "layer.add_param", "tensorflow.sqrt", "x.get_shape", "tensorflow.zeros_initializer", "tensorflow.ones_initializer"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.Layer.add_param"], ["def", "apply_ln", "(", "layer", ")", ":", "\n", "    ", "def", "_normalize", "(", "x", ",", "prefix", ")", ":", "\n", "        ", "EPS", "=", "1e-5", "\n", "dim", "=", "x", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "\n", "bias_name", "=", "prefix", "+", "\"_ln/bias\"", "\n", "scale_name", "=", "prefix", "+", "\"_ln/scale\"", "\n", "\n", "if", "bias_name", "not", "in", "layer", ".", "norm_params", ":", "\n", "            ", "layer", ".", "norm_params", "[", "bias_name", "]", "=", "layer", ".", "add_param", "(", "\n", "tf", ".", "zeros_initializer", "(", ")", ",", "(", "dim", ",", ")", ",", "name", "=", "bias_name", ",", "regularizable", "=", "False", ")", "\n", "", "if", "scale_name", "not", "in", "layer", ".", "norm_params", ":", "\n", "            ", "layer", ".", "norm_params", "[", "scale_name", "]", "=", "layer", ".", "add_param", "(", "\n", "tf", ".", "ones_initializer", "(", ")", ",", "(", "dim", ",", ")", ",", "name", "=", "scale_name", ")", "\n", "\n", "", "bias", "=", "layer", ".", "norm_params", "[", "bias_name", "]", "\n", "scale", "=", "layer", ".", "norm_params", "[", "scale_name", "]", "\n", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "x", ",", "axes", "=", "[", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "x_normed", "=", "(", "x", "-", "mean", ")", "/", "tf", ".", "sqrt", "(", "var", "+", "EPS", ")", "\n", "return", "x_normed", "*", "scale", "+", "bias", "\n", "\n", "", "return", "_normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_all_layers": [[1682, 1728], ["set", "set", "collections.deque", "set.update", "collections.deque", "collections.deque.popleft", "set.add", "hasattr", "collections.deque.popleft", "collections.deque.extendleft", "hasattr", "result.append", "set.add", "reversed", "collections.deque.appendleft"], "function", ["None"], ["", "", "def", "get_all_layers", "(", "layer", ",", "treat_as_input", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :type layer: Layer | list[Layer]\n    :rtype: list[Layer]\n    \"\"\"", "\n", "# We perform a depth-first search. We add a layer to the result list only", "\n", "# after adding all its incoming layers (if any) or when detecting a cycle.", "\n", "# We use a LIFO stack to avoid ever running into recursion depth limits.", "\n", "try", ":", "\n", "        ", "queue", "=", "deque", "(", "layer", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "queue", "=", "deque", "(", "[", "layer", "]", ")", "\n", "", "seen", "=", "set", "(", ")", "\n", "done", "=", "set", "(", ")", "\n", "result", "=", "[", "]", "\n", "\n", "# If treat_as_input is given, we pretend we've already collected all their", "\n", "# incoming layers.", "\n", "if", "treat_as_input", "is", "not", "None", ":", "\n", "        ", "seen", ".", "update", "(", "treat_as_input", ")", "\n", "\n", "", "while", "queue", ":", "\n", "# Peek at the leftmost node in the queue.", "\n", "        ", "layer", "=", "queue", "[", "0", "]", "\n", "if", "layer", "is", "None", ":", "\n", "# Some node had an input_layer set to `None`. Just ignore it.", "\n", "            ", "queue", ".", "popleft", "(", ")", "\n", "", "elif", "layer", "not", "in", "seen", ":", "\n", "# We haven't seen this node yet: Mark it and queue all incomings", "\n", "# to be processed first. If there are no incomings, the node will", "\n", "# be appended to the result list in the next iteration.", "\n", "            ", "seen", ".", "add", "(", "layer", ")", "\n", "if", "hasattr", "(", "layer", ",", "'input_layers'", ")", ":", "\n", "                ", "queue", ".", "extendleft", "(", "reversed", "(", "layer", ".", "input_layers", ")", ")", "\n", "", "elif", "hasattr", "(", "layer", ",", "'input_layer'", ")", ":", "\n", "                ", "queue", ".", "appendleft", "(", "layer", ".", "input_layer", ")", "\n", "", "", "else", ":", "\n", "# We've been here before: Either we've finished all its incomings,", "\n", "# or we've detected a cycle. In both cases, we remove the layer", "\n", "# from the queue and append it to the result list.", "\n", "            ", "queue", ".", "popleft", "(", ")", "\n", "if", "layer", "not", "in", "done", ":", "\n", "                ", "result", ".", "append", "(", "layer", ")", "\n", "done", ".", "add", "(", "layer", ")", "\n", "\n", "", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.batch_norm": [[1797, 1814], ["getattr", "layers.BatchNormLayer", "hasattr", "kwargs.pop", "layers.NonlinearityLayer", "getattr"], "function", ["None"], ["", "", "def", "batch_norm", "(", "layer", ",", "**", "kwargs", ")", ":", "\n", "    ", "nonlinearity", "=", "getattr", "(", "layer", ",", "'nonlinearity'", ",", "None", ")", "\n", "scale", "=", "True", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "        ", "layer", ".", "nonlinearity", "=", "tf", ".", "identity", "\n", "if", "nonlinearity", "is", "tf", ".", "nn", ".", "relu", ":", "\n", "            ", "scale", "=", "False", "\n", "", "", "if", "hasattr", "(", "layer", ",", "'b'", ")", "and", "layer", ".", "b", "is", "not", "None", ":", "\n", "        ", "del", "layer", ".", "params", "[", "layer", ".", "b", "]", "\n", "layer", ".", "b", "=", "None", "\n", "", "bn_name", "=", "(", "kwargs", ".", "pop", "(", "'name'", ",", "None", ")", "or", "\n", "(", "getattr", "(", "layer", ",", "'name'", ",", "None", ")", "and", "layer", ".", "name", "+", "'_bn'", ")", ")", "\n", "layer", "=", "BatchNormLayer", "(", "layer", ",", "name", "=", "bn_name", ",", "scale", "=", "scale", ",", "**", "kwargs", ")", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "        ", "nonlin_name", "=", "bn_name", "and", "bn_name", "+", "'_nonlin'", "\n", "layer", "=", "NonlinearityLayer", "(", "layer", ",", "nonlinearity", "=", "nonlinearity", ",", "name", "=", "nonlin_name", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output": [[1828, 1894], ["layers.get_all_layers", "dict", "isinstance", "isinstance", "list", "dict.update", "set", "warnings.warn", "inputs.keys", "layer.get_output_for", "set", "kwargs.keys", "difflib.get_close_matches", "len", "ValueError", "tensorflow.convert_to_tensor", "isinstance", "inspect.getfullargspec", "suggestions.append", "suggestions.append", "isinstance", "tensorflow.convert_to_tensor", "list", "ValueError", "set", "inputs.items", "len"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_all_layers", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.ElemwiseSumLayer.get_output_for"], ["", "", "def", "get_output", "(", "layer_or_layers", ",", "inputs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# track accepted kwargs used by get_output_for", "\n", "    ", "accepted_kwargs", "=", "{", "'deterministic'", "}", "\n", "# obtain topological ordering of all layers the output layer(s) depend on", "\n", "treat_as_input", "=", "list", "(", "inputs", ".", "keys", "(", ")", ")", "if", "isinstance", "(", "inputs", ",", "dict", ")", "else", "[", "]", "\n", "all_layers", "=", "get_all_layers", "(", "layer_or_layers", ",", "treat_as_input", ")", "\n", "# initialize layer-to-expression mapping from all input layers", "\n", "all_outputs", "=", "dict", "(", "(", "layer", ",", "layer", ".", "input_var", ")", "\n", "for", "layer", "in", "all_layers", "\n", "if", "isinstance", "(", "layer", ",", "InputLayer", ")", "and", "\n", "layer", "not", "in", "treat_as_input", ")", "\n", "# update layer-to-expression mapping from given input(s), if any", "\n", "if", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "        ", "all_outputs", ".", "update", "(", "(", "layer", ",", "tf", ".", "convert_to_tensor", "(", "expr", ")", ")", "\n", "for", "layer", ",", "expr", "in", "list", "(", "inputs", ".", "items", "(", ")", ")", ")", "\n", "", "elif", "inputs", "is", "not", "None", ":", "\n", "        ", "if", "len", "(", "all_outputs", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"get_output() was called with a single input \"", "\n", "\"expression on a network with multiple input \"", "\n", "\"layers. Please call it with a dictionary of \"", "\n", "\"input expressions instead.\"", ")", "\n", "", "for", "input_layer", "in", "all_outputs", ":", "\n", "            ", "all_outputs", "[", "input_layer", "]", "=", "tf", ".", "convert_to_tensor", "(", "inputs", ")", "\n", "# update layer-to-expression mapping by propagating the inputs", "\n", "", "", "for", "layer", "in", "all_layers", ":", "\n", "        ", "if", "layer", "not", "in", "all_outputs", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "isinstance", "(", "layer", ",", "MergeLayer", ")", ":", "\n", "                    ", "layer_inputs", "=", "[", "all_outputs", "[", "input_layer", "]", "\n", "for", "input_layer", "in", "layer", ".", "input_layers", "]", "\n", "", "else", ":", "\n", "                    ", "layer_inputs", "=", "all_outputs", "[", "layer", ".", "input_layer", "]", "\n", "", "", "except", "KeyError", ":", "\n", "# one of the input_layer attributes must have been `None`", "\n", "                ", "raise", "ValueError", "(", "\"get_output() was called without giving an \"", "\n", "\"input expression for the free-floating \"", "\n", "\"layer %r. Please call it with a dictionary \"", "\n", "\"mapping this layer to an input expression.\"", "\n", "%", "layer", ")", "\n", "", "all_outputs", "[", "layer", "]", "=", "layer", ".", "get_output_for", "(", "layer_inputs", ",", "**", "kwargs", ")", "\n", "try", ":", "\n", "                ", "names", ",", "_", ",", "_", ",", "defaults", ",", "_", ",", "_", ",", "_", "=", "getfullargspec", "(", "layer", ".", "get_output_for", ")", "\n", "", "except", "TypeError", ":", "\n", "# If introspection is not possible, skip it", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "if", "defaults", "is", "not", "None", ":", "\n", "                    ", "accepted_kwargs", "|=", "set", "(", "names", "[", "-", "len", "(", "defaults", ")", ":", "]", ")", "\n", "", "", "accepted_kwargs", "|=", "set", "(", "layer", ".", "get_output_kwargs", ")", "\n", "", "", "unused_kwargs", "=", "set", "(", "kwargs", ".", "keys", "(", ")", ")", "-", "accepted_kwargs", "\n", "if", "unused_kwargs", ":", "\n", "        ", "suggestions", "=", "[", "]", "\n", "for", "kwarg", "in", "unused_kwargs", ":", "\n", "            ", "suggestion", "=", "get_close_matches", "(", "kwarg", ",", "accepted_kwargs", ")", "\n", "if", "suggestion", ":", "\n", "                ", "suggestions", ".", "append", "(", "'%s (perhaps you meant %s)'", "\n", "%", "(", "kwarg", ",", "suggestion", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "suggestions", ".", "append", "(", "kwarg", ")", "\n", "", "", "warn", "(", "\"get_output() was called with unused kwargs:\\n\\t%s\"", "\n", "%", "\"\\n\\t\"", ".", "join", "(", "suggestions", ")", ")", "\n", "# return the output(s) of the requested layer(s) only", "\n", "", "try", ":", "\n", "        ", "return", "[", "all_outputs", "[", "layer", "]", "for", "layer", "in", "layer_or_layers", "]", "\n", "", "except", "TypeError", ":", "\n", "        ", "return", "all_outputs", "[", "layer_or_layers", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.unique": [[1896, 1917], ["set", "new_list.append", "set.add"], "function", ["None"], ["", "", "def", "unique", "(", "l", ")", ":", "\n", "    ", "\"\"\"Filters duplicates of iterable.\n    Create a new list from l with duplicate entries removed,\n    while preserving the original order.\n    Parameters\n    ----------\n    l : iterable\n        Input iterable to filter of duplicates.\n    Returns\n    -------\n    list\n        A list of elements of `l` without duplicates and in the same order.\n    \"\"\"", "\n", "new_list", "=", "[", "]", "\n", "seen", "=", "set", "(", ")", "\n", "for", "el", "in", "l", ":", "\n", "        ", "if", "el", "not", "in", "seen", ":", "\n", "            ", "new_list", ".", "append", "(", "el", ")", "\n", "seen", ".", "add", "(", "el", ")", "\n", "\n", "", "", "return", "new_list", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_all_params": [[1919, 1926], ["layers.get_all_layers", "itertools.chain.from_iterable", "layers.unique", "l.get_params"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_all_layers", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.unique", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_params"], ["", "def", "get_all_params", "(", "layer", ",", "**", "tags", ")", ":", "\n", "    ", "\"\"\"\n    :type layer: Layer|list[Layer]\n    \"\"\"", "\n", "layers", "=", "get_all_layers", "(", "layer", ")", "\n", "params", "=", "chain", ".", "from_iterable", "(", "l", ".", "get_params", "(", "**", "tags", ")", "for", "l", "in", "layers", ")", "\n", "return", "unique", "(", "params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized.__init__": [[19, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_cached_params", "=", "{", "}", "\n", "self", ".", "_cached_param_dtypes", "=", "{", "}", "\n", "self", ".", "_cached_param_shapes", "=", "{", "}", "\n", "self", ".", "_cached_assign_ops", "=", "{", "}", "\n", "self", ".", "_cached_assign_placeholders", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized.get_params_internal": [[26, 31], ["None"], "methods", ["None"], ["", "def", "get_params_internal", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "\"\"\"\n        Internal method to be implemented which does not perform caching\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized._get_params": [[32, 41], ["tuple", "sorted", "parameterized.Parameterized.get_params_internal", "list", "tags.items"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers_powered.LayersPowered.get_params_internal"], ["", "def", "_get_params", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "\"\"\"\n        Get the list of parameters, filtered by the provided tags.\n        Some common tags include 'regularizable' and 'trainable'\n        \"\"\"", "\n", "tag_tuple", "=", "tuple", "(", "sorted", "(", "list", "(", "tags", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ")", "\n", "if", "tag_tuple", "not", "in", "self", ".", "_cached_params", ":", "\n", "            ", "self", ".", "_cached_params", "[", "tag_tuple", "]", "=", "self", ".", "get_params_internal", "(", "**", "tags", ")", "\n", "", "return", "self", ".", "_cached_params", "[", "tag_tuple", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized.get_param_dtypes": [[42, 49], ["tuple", "sorted", "parameterized.Parameterized._get_params", "tensorflow.get_default_session().run", "list", "tags.items", "tensorflow.get_default_session"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized._get_params", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "get_param_dtypes", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "tag_tuple", "=", "tuple", "(", "sorted", "(", "list", "(", "tags", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ")", "\n", "if", "tag_tuple", "not", "in", "self", ".", "_cached_param_dtypes", ":", "\n", "            ", "params", "=", "self", ".", "_get_params", "(", "**", "tags", ")", "\n", "param_values", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "params", ")", "\n", "self", ".", "_cached_param_dtypes", "[", "tag_tuple", "]", "=", "[", "val", ".", "dtype", "for", "val", "in", "param_values", "]", "\n", "", "return", "self", ".", "_cached_param_dtypes", "[", "tag_tuple", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized.get_param_shapes": [[50, 57], ["tuple", "sorted", "parameterized.Parameterized._get_params", "tensorflow.get_default_session().run", "list", "tags.items", "tensorflow.get_default_session"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized._get_params", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "get_param_shapes", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "tag_tuple", "=", "tuple", "(", "sorted", "(", "list", "(", "tags", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ")", "\n", "if", "tag_tuple", "not", "in", "self", ".", "_cached_param_shapes", ":", "\n", "            ", "params", "=", "self", ".", "_get_params", "(", "**", "tags", ")", "\n", "param_values", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "params", ")", "\n", "self", ".", "_cached_param_shapes", "[", "tag_tuple", "]", "=", "[", "val", ".", "shape", "for", "val", "in", "param_values", "]", "\n", "", "return", "self", ".", "_cached_param_shapes", "[", "tag_tuple", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized.get_param_values": [[58, 62], ["parameterized.Parameterized._get_params", "tensorflow.get_default_session().run", "cde.utils.tf_utils.tensor_utils.flatten_tensors", "tensorflow.get_default_session"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized._get_params", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.tensor_utils.flatten_tensors"], ["", "def", "get_param_values", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "params", "=", "self", ".", "_get_params", "(", "**", "tags", ")", "\n", "param_values", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "params", ")", "\n", "return", "flatten_tensors", "(", "param_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized.set_param_values": [[63, 83], ["tags.pop", "cde.utils.tf_utils.tensor_utils.unflatten_tensors", "dict", "zip", "tensorflow.get_default_session().run", "parameterized.Parameterized.get_param_shapes", "parameterized.Parameterized._get_params", "parameterized.Parameterized.get_param_dtypes", "ops.append", "value.astype", "tensorflow.placeholder", "tensorflow.assign", "print", "tensorflow.get_default_session"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.tensor_utils.unflatten_tensors", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized.get_param_shapes", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized._get_params", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized.get_param_dtypes"], ["", "def", "set_param_values", "(", "self", ",", "flattened_params", ",", "**", "tags", ")", ":", "\n", "        ", "debug", "=", "tags", ".", "pop", "(", "\"debug\"", ",", "False", ")", "\n", "param_values", "=", "unflatten_tensors", "(", "\n", "flattened_params", ",", "self", ".", "get_param_shapes", "(", "**", "tags", ")", ")", "\n", "ops", "=", "[", "]", "\n", "feed_dict", "=", "dict", "(", ")", "\n", "for", "param", ",", "dtype", ",", "value", "in", "zip", "(", "\n", "self", ".", "_get_params", "(", "**", "tags", ")", ",", "\n", "self", ".", "get_param_dtypes", "(", "**", "tags", ")", ",", "\n", "param_values", ")", ":", "\n", "            ", "if", "param", "not", "in", "self", ".", "_cached_assign_ops", ":", "\n", "                ", "assign_placeholder", "=", "tf", ".", "placeholder", "(", "dtype", "=", "param", ".", "dtype", ".", "base_dtype", ")", "\n", "assign_op", "=", "tf", ".", "assign", "(", "param", ",", "assign_placeholder", ")", "\n", "self", ".", "_cached_assign_ops", "[", "param", "]", "=", "assign_op", "\n", "self", ".", "_cached_assign_placeholders", "[", "param", "]", "=", "assign_placeholder", "\n", "", "ops", ".", "append", "(", "self", ".", "_cached_assign_ops", "[", "param", "]", ")", "\n", "feed_dict", "[", "self", ".", "_cached_assign_placeholders", "[", "param", "]", "]", "=", "value", ".", "astype", "(", "dtype", ")", "\n", "if", "debug", ":", "\n", "                ", "print", "(", "\"setting value of %s\"", "%", "param", ".", "name", ")", "\n", "", "", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "ops", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized.flat_to_params": [[84, 86], ["cde.utils.tf_utils.tensor_utils.unflatten_tensors", "parameterized.Parameterized.get_param_shapes"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.tensor_utils.unflatten_tensors", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized.get_param_shapes"], ["", "def", "flat_to_params", "(", "self", ",", "flattened_params", ",", "**", "tags", ")", ":", "\n", "        ", "return", "unflatten_tensors", "(", "flattened_params", ",", "self", ".", "get_param_shapes", "(", "**", "tags", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized.__getstate__": [[87, 93], ["cde.utils.serializable.Serializable.__getstate__", "parameterized.Parameterized.get_param_values"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.__getstate__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized.get_param_values"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "Serializable", ".", "__getstate__", "(", "self", ")", "\n", "global", "load_params", "\n", "if", "load_params", ":", "\n", "            ", "d", "[", "\"params\"", "]", "=", "self", ".", "get_param_values", "(", ")", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized.__setstate__": [[94, 100], ["cde.utils.serializable.Serializable.__setstate__", "tensorflow.get_default_session().run", "parameterized.Parameterized.set_param_values", "tensorflow.variables_initializer", "tensorflow.get_default_session", "parameterized.Parameterized._get_params"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.__setstate__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.Parameterized._get_params"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "Serializable", ".", "__setstate__", "(", "self", ",", "d", ")", "\n", "global", "load_params", "\n", "if", "load_params", ":", "\n", "            ", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "variables_initializer", "(", "self", ".", "_get_params", "(", ")", ")", ")", "\n", "self", ".", "set_param_values", "(", "d", "[", "\"params\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.JointParameterized.__init__": [[103, 106], ["parameterized.Parameterized.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["    ", "def", "__init__", "(", "self", ",", "components", ")", ":", "\n", "        ", "super", "(", "JointParameterized", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "components", "=", "components", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.JointParameterized.get_params_internal": [[107, 111], ["sorted", "set", "comp.get_params_internal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers_powered.LayersPowered.get_params_internal"], ["", "def", "get_params_internal", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "params", "=", "[", "param", "for", "comp", "in", "self", ".", "components", "for", "param", "in", "comp", ".", "get_params_internal", "(", "**", "tags", ")", "]", "\n", "# only return unique parameters", "\n", "return", "sorted", "(", "set", "(", "params", ")", ",", "key", "=", "hash", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.parameterized.suppress_params_loading": [[10, 16], ["None"], "function", ["None"], ["@", "contextmanager", "\n", "def", "suppress_params_loading", "(", ")", ":", "\n", "    ", "global", "load_params", "\n", "load_params", "=", "False", "\n", "yield", "\n", "load_params", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers_powered.LayersPowered.__init__": [[13, 17], ["cde.utils.tf_utils.parameterized.Parameterized.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_layers", ",", "input_layers", "=", "None", ")", ":", "\n", "        ", "self", ".", "_output_layers", "=", "output_layers", "\n", "self", ".", "_input_layers", "=", "input_layers", "\n", "Parameterized", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers_powered.LayersPowered.get_params_internal": [[18, 22], ["cde.get_all_layers", "itertools.chain.from_iterable", "cde.unique", "l.get_params"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_all_layers", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.unique", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_params"], ["", "def", "get_params_internal", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "layers", "=", "L", ".", "get_all_layers", "(", "self", ".", "_output_layers", ",", "treat_as_input", "=", "self", ".", "_input_layers", ")", "\n", "params", "=", "itertools", ".", "chain", ".", "from_iterable", "(", "l", ".", "get_params", "(", "**", "tags", ")", "for", "l", "in", "layers", ")", "\n", "return", "L", ".", "unique", "(", "params", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.tensor_utils.flatten_tensors": [[4, 9], ["len", "numpy.concatenate", "numpy.asarray", "numpy.reshape"], "function", ["None"], ["def", "flatten_tensors", "(", "tensors", ")", ":", "\n", "    ", "if", "len", "(", "tensors", ")", ">", "0", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "np", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "for", "x", "in", "tensors", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.tensor_utils.unflatten_tensors": [[11, 15], ["list", "map", "numpy.cumsum", "numpy.reshape", "map", "zip", "numpy.split"], "function", ["None"], ["", "", "def", "unflatten_tensors", "(", "flattened", ",", "tensor_shapes", ")", ":", "\n", "    ", "tensor_sizes", "=", "list", "(", "map", "(", "int", ",", "map", "(", "np", ".", "prod", ",", "tensor_shapes", ")", ")", ")", "\n", "indices", "=", "np", ".", "cumsum", "(", "tensor_sizes", ")", "[", ":", "-", "1", "]", "\n", "return", "[", "np", ".", "reshape", "(", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", ")", "for", "pair", "in", "zip", "(", "np", ".", "split", "(", "flattened", ",", "indices", ")", ",", "tensor_shapes", ")", "]", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture.__init__": [[23, 68], ["numpy.random.RandomState", "numpy.random.RandomState", "sklearn.mixture.GaussianMixture.GaussianMixture._sample_weights", "sklearn.mixture.GaussianMixture.GaussianMixture.random_state_params.normal", "cde.utils.misc.project_to_pos_semi_def", "cde.utils.misc.project_to_pos_semi_def", "numpy.zeros", "range", "sklearn.mixture.GaussianMixture.GaussianMixture._compute_data_statistics", "numpy.abs", "numpy.abs", "sklearn.mixture.GaussianMixture.GaussianMixture.gaussians.append", "sklearn.mixture.GaussianMixture.GaussianMixture.gaussians_x.append", "sklearn.mixture.GaussianMixture.GaussianMixture.gaussians_y.append", "numpy.zeros", "sklearn.mixture.GaussianMixture.GaussianMixture.random_state_params.normal", "sklearn.mixture.GaussianMixture.GaussianMixture.random_state_params.normal", "scipy.multivariate_normal", "scipy.multivariate_normal", "scipy.multivariate_normal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture._sample_weights", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.project_to_pos_semi_def", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.project_to_pos_semi_def", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._compute_data_statistics"], ["def", "__init__", "(", "self", ",", "n_kernels", "=", "5", ",", "ndim_x", "=", "1", ",", "ndim_y", "=", "1", ",", "means_std", "=", "1.5", ",", "random_seed", "=", "None", ")", ":", "\n", "\n", "    ", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "random_seed", ")", "# random state for sampling data", "\n", "self", ".", "random_state_params", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "20", ")", "# fixed random state for sampling GMM params", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "\n", "self", ".", "has_pdf", "=", "True", "\n", "self", ".", "has_cdf", "=", "True", "\n", "self", ".", "can_sample", "=", "True", "\n", "\n", "\"\"\"  set parameters, calculate weights, means and covariances \"\"\"", "\n", "self", ".", "n_kernels", "=", "n_kernels", "\n", "self", ".", "ndim", "=", "ndim_x", "+", "ndim_y", "\n", "self", ".", "ndim_x", "=", "ndim_x", "\n", "self", ".", "ndim_y", "=", "ndim_y", "\n", "self", ".", "means_std", "=", "means_std", "\n", "self", ".", "weights", "=", "self", ".", "_sample_weights", "(", "n_kernels", ")", "#shape(n_kernels,), sums to one", "\n", "self", ".", "means", "=", "self", ".", "random_state_params", ".", "normal", "(", "loc", "=", "np", ".", "zeros", "(", "[", "self", ".", "ndim", "]", ")", ",", "scale", "=", "self", ".", "means_std", ",", "size", "=", "[", "n_kernels", ",", "self", ".", "ndim", "]", ")", "#shape(n_kernels, n_dims)", "\n", "\n", "\n", "\"\"\" Sample cov matrixes and assure that cov matrix is pos definite\"\"\"", "\n", "self", ".", "covariances_x", "=", "project_to_pos_semi_def", "(", "np", ".", "abs", "(", "self", ".", "random_state_params", ".", "normal", "(", "loc", "=", "1", ",", "scale", "=", "0.5", ",", "size", "=", "(", "n_kernels", ",", "self", ".", "ndim_x", ",", "self", ".", "ndim_x", ")", ")", ")", ")", "#shape(n_kernels, ndim_x, ndim_y)", "\n", "self", ".", "covariances_y", "=", "project_to_pos_semi_def", "(", "np", ".", "abs", "(", "self", ".", "random_state_params", ".", "normal", "(", "loc", "=", "1", ",", "scale", "=", "0.5", ",", "size", "=", "(", "n_kernels", ",", "self", ".", "ndim_y", ",", "self", ".", "ndim_y", ")", ")", ")", ")", "# shape(n_kernels, ndim_x, ndim_y)", "\n", "\n", "\"\"\" some eigenvalues of the sampled covariance matrices can be exactly zero -> map to positive\n    semi-definite subspace  \"\"\"", "\n", "self", ".", "covariances", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_kernels", ",", "self", ".", "ndim", ",", "self", ".", "ndim", ")", ")", "\n", "self", ".", "covariances", "[", ":", ",", ":", "ndim_x", ",", ":", "ndim_x", "]", "=", "self", ".", "covariances_x", "\n", "self", ".", "covariances", "[", ":", ",", "ndim_x", ":", ",", "ndim_x", ":", "]", "=", "self", ".", "covariances_y", "\n", "\n", "\n", "\"\"\" after mapping, define the remaining variables and collect frozen multivariate variables\n      (x,y), x and y for later conditional draws \"\"\"", "\n", "self", ".", "means_x", "=", "self", ".", "means", "[", ":", ",", ":", "ndim_x", "]", "\n", "self", ".", "means_y", "=", "self", ".", "means", "[", ":", ",", "ndim_x", ":", "]", "\n", "\n", "\n", "self", ".", "gaussians", ",", "self", ".", "gaussians_x", ",", "self", ".", "gaussians_y", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n_kernels", ")", ":", "\n", "      ", "self", ".", "gaussians", ".", "append", "(", "stats", ".", "multivariate_normal", "(", "mean", "=", "self", ".", "means", "[", "i", ",", "]", ",", "cov", "=", "self", ".", "covariances", "[", "i", "]", ")", ")", "\n", "self", ".", "gaussians_x", ".", "append", "(", "stats", ".", "multivariate_normal", "(", "mean", "=", "self", ".", "means_x", "[", "i", ",", "]", ",", "cov", "=", "self", ".", "covariances_x", "[", "i", "]", ")", ")", "\n", "self", ".", "gaussians_y", ".", "append", "(", "stats", ".", "multivariate_normal", "(", "mean", "=", "self", ".", "means_y", "[", "i", ",", "]", ",", "cov", "=", "self", ".", "covariances_y", "[", "i", "]", ")", ")", "\n", "\n", "# approximate data statistics", "\n", "", "self", ".", "y_mean", ",", "self", ".", "y_std", "=", "self", ".", "_compute_data_statistics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture.pdf": [[69, 89], ["sklearn.mixture.GaussianMixture.GaussianMixture._handle_input_dimensionality", "numpy.stack", "sklearn.mixture.GaussianMixture.GaussianMixture._W_x", "numpy.sum", "numpy.multiply", "sklearn.mixture.GaussianMixture.GaussianMixture.gaussians_y[].pdf", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture._W_x", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" conditional probability density function P(Y|X)\n        See \"Conditional Gaussian Mixture Models for Environmental Risk Mapping\" [Gilardi, Bengio] for the math.\n\n    Args:\n      X: the position/conditional variable for the distribution P(Y|X), array_like, shape:(n_samples, ndim_x)\n      Y: the on X conditioned variable Y, array_like, shape:(n_samples, ndim_y)\n\n    Returns:\n      the cond. distribution of Y given X, for the given realizations of X with shape:(n_samples,)\n    \"\"\"", "\n", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "\n", "P_y", "=", "np", ".", "stack", "(", "[", "self", ".", "gaussians_y", "[", "i", "]", ".", "pdf", "(", "Y", ")", "for", "i", "in", "range", "(", "self", ".", "n_kernels", ")", "]", ",", "axis", "=", "1", ")", "#shape(X.shape[0], n_kernels)", "\n", "W_x", "=", "self", ".", "_W_x", "(", "X", ")", "\n", "\n", "cond_prob", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "W_x", ",", "P_y", ")", ",", "axis", "=", "1", ")", "\n", "assert", "cond_prob", ".", "shape", "[", "0", "]", "==", "X", ".", "shape", "[", "0", "]", "\n", "return", "cond_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture.cdf": [[90, 111], ["sklearn.mixture.GaussianMixture.GaussianMixture._handle_input_dimensionality", "numpy.stack", "sklearn.mixture.GaussianMixture.GaussianMixture._W_x", "numpy.sum", "numpy.multiply", "sklearn.mixture.GaussianMixture.GaussianMixture.gaussians_y[].cdf", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture._W_x", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "cdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" conditional cumulative probability density function P(Y<y|X=x).\n       See \"Conditional Gaussian Mixture Models for Environmental Risk Mapping\" [Gilardi, Bengio] for the math.\n\n    Args:\n      X: the position/conditional variable for the distribution P(Y<y|X=x), array_like, shape:(n_samples, ndim_x)\n      Y: the on X conditioned variable Y, array_like, shape:(n_samples, ndim_y)\n\n    Returns:\n      the cond. cumulative distribution of Y given X, for the given realizations of X with shape:(n_samples,)\n    \"\"\"", "\n", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "\n", "P_y", "=", "np", ".", "stack", "(", "[", "self", ".", "gaussians_y", "[", "i", "]", ".", "cdf", "(", "Y", ")", "for", "i", "in", "range", "(", "self", ".", "n_kernels", ")", "]", ",", "\n", "axis", "=", "1", ")", "# shape(X.shape[0], n_kernels)", "\n", "W_x", "=", "self", ".", "_W_x", "(", "X", ")", "\n", "\n", "cond_prob", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "W_x", ",", "P_y", ")", ",", "axis", "=", "1", ")", "\n", "assert", "cond_prob", ".", "shape", "[", "0", "]", "==", "X", ".", "shape", "[", "0", "]", "\n", "return", "cond_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture.joint_pdf": [[112, 128], ["sklearn.mixture.GaussianMixture.GaussianMixture._handle_input_dimensionality", "numpy.concatenate", "numpy.stack", "numpy.sum", "sklearn.mixture.GaussianMixture.GaussianMixture.gaussians[].pdf", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "joint_pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" joint probability density function P(X, Y)\n\n    Args:\n      X: variable X for the distribution P(X, Y), array_like, shape:(n_samples, ndim_x)\n      Y: variable Y for the distribution P(X, Y) array_like, shape:(n_samples, ndim_y)\n\n    Returns:\n      the joint distribution of X and Y wih shape:(n_samples,)\n    \"\"\"", "\n", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "XY", "=", "np", ".", "concatenate", "(", "[", "X", ",", "Y", "]", ",", "axis", "=", "1", ")", "\n", "a", "=", "[", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "gaussians", "[", "i", "]", ".", "pdf", "(", "XY", ")", "for", "i", "in", "range", "(", "self", ".", "n_kernels", ")", "]", "\n", "p_i", "=", "np", ".", "stack", "(", "a", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "sum", "(", "p_i", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture.simulate_conditional": [[129, 145], ["sklearn.mixture.GaussianMixture.GaussianMixture._handle_input_dimensionality", "numpy.all", "numpy.all", "sklearn.mixture.GaussianMixture.GaussianMixture._simulate_cond_rows_same", "sklearn.mixture.GaussianMixture.GaussianMixture._simulate_cond_rows_individually"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture._simulate_cond_rows_same", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture._simulate_cond_rows_individually"], ["", "def", "simulate_conditional", "(", "self", ",", "X", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the conditional distribution\n\n    Args:\n      X: x to be conditioned on when drawing a sample from y ~ p(y|x) - numpy array of shape (n_samples, ndim_x)\n\n    Returns:\n      Conditional random samples y drawn from p(y|x) - numpy array of shape (n_samples, ndim_y)\n    \"\"\"", "\n", "\n", "X", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ")", "\n", "\n", "if", "np", ".", "all", "(", "np", ".", "all", "(", "X", "==", "X", "[", "0", ",", ":", "]", ",", "axis", "=", "1", ")", ")", ":", "\n", "      ", "return", "self", ".", "_simulate_cond_rows_same", "(", "X", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "_simulate_cond_rows_individually", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture.simulate": [[147, 173], ["sklearn.mixture.GaussianMixture.GaussianMixture.random_state.multinomial", "numpy.vstack", "sklearn.mixture.GaussianMixture.GaussianMixture.random_state.shuffle", "gaussian.rvs", "zip"], "methods", ["None"], ["", "", "def", "simulate", "(", "self", ",", "n_samples", "=", "1000", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the unconditional distribution p(x,y)\n\n    Args:\n      n_samples: (int) number of samples to be drawn from the conditional distribution\n\n    Returns:\n      (X,Y) - random samples drawn from p(x,y) - numpy arrays of shape (n_samples, ndim_x) and (n_samples, ndim_y)\n    \"\"\"", "\n", "\n", "assert", "n_samples", ">", "0", "\n", "\n", "n_samples_comp", "=", "self", ".", "random_state", ".", "multinomial", "(", "n_samples", ",", "self", ".", "weights", ")", "\n", "\n", "samples", "=", "np", ".", "vstack", "(", "[", "gaussian", ".", "rvs", "(", "size", "=", "n", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "for", "gaussian", ",", "n", "in", "zip", "(", "self", ".", "gaussians", ",", "n_samples_comp", ")", "]", ")", "\n", "\n", "# shuffle rows to make data i.i.d.", "\n", "self", ".", "random_state", ".", "shuffle", "(", "samples", ")", "\n", "\n", "x_samples", "=", "samples", "[", ":", ",", ":", "self", ".", "ndim_x", "]", "\n", "y_samples", "=", "samples", "[", ":", ",", "self", ".", "ndim_x", ":", "]", "\n", "\n", "assert", "x_samples", ".", "shape", "==", "(", "n_samples", ",", "self", ".", "ndim_x", ")", "\n", "assert", "y_samples", ".", "shape", "==", "(", "n_samples", ",", "self", ".", "ndim_y", ")", "\n", "return", "x_samples", ",", "y_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture.mean_": [[174, 187], ["sklearn.mixture.GaussianMixture.GaussianMixture._W_x", "sklearn.mixture.GaussianMixture.GaussianMixture.dot"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture._W_x"], ["", "def", "mean_", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Conditional mean of the distribution\n     Args:\n       x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n     Returns:\n       Means E[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y)\n     \"\"\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "and", "x_cond", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_x", "\n", "\n", "W_x", "=", "self", ".", "_W_x", "(", "x_cond", ")", "\n", "means", "=", "W_x", ".", "dot", "(", "self", ".", "means_y", ")", "\n", "return", "means", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture.covariance": [[188, 215], ["sklearn.mixture.GaussianMixture.GaussianMixture._W_x", "numpy.zeros", "sklearn.mixture.GaussianMixture.GaussianMixture.mean_", "range", "numpy.zeros", "numpy.zeros", "range", "numpy.outer"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture._W_x", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_"], ["", "def", "covariance", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Covariance of the distribution conditioned on x_cond\n\n      Args:\n        x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n      Returns:\n        Covariances Cov[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y, ndim_y)\n    \"\"\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "and", "x_cond", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_x", "\n", "W_x", "=", "self", ".", "_W_x", "(", "x_cond", ")", "\n", "\n", "covs", "=", "np", ".", "zeros", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ",", "self", ".", "ndim_y", ")", ")", "\n", "\n", "glob_mean", "=", "self", ".", "mean_", "(", "x_cond", ")", "\n", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "c1", "=", "np", ".", "zeros", "(", "(", "self", ".", "ndim_y", ",", "self", ".", "ndim_y", ")", ")", "\n", "c2", "=", "np", ".", "zeros", "(", "c1", ".", "shape", ")", "\n", "weights", "=", "W_x", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "weights", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "c1", "+=", "weights", "[", "j", "]", "*", "self", ".", "covariances_y", "[", "j", "]", "\n", "a", "=", "(", "self", ".", "means_y", "[", "j", "]", "-", "glob_mean", "[", "i", "]", ")", "\n", "d", "=", "weights", "[", "j", "]", "*", "np", ".", "outer", "(", "a", ",", "a", ")", "\n", "c2", "+=", "d", "\n", "", "covs", "[", "i", "]", "=", "c1", "+", "c2", "\n", "", "return", "covs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture._simulate_cond_rows_individually": [[216, 226], ["sklearn.mixture.GaussianMixture.GaussianMixture._W_x", "numpy.zeros", "range", "scipy.rv_discrete", "scipy.rv_discrete.rvs", "sklearn.mixture.GaussianMixture.GaussianMixture.gaussians_y[].rvs", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture._W_x"], ["", "def", "_simulate_cond_rows_individually", "(", "self", ",", "X", ")", ":", "\n", "    ", "W_x", "=", "self", ".", "_W_x", "(", "X", ")", "\n", "y_samples", "=", "np", ".", "zeros", "(", "shape", "=", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "discrete_dist", "=", "stats", ".", "rv_discrete", "(", "values", "=", "(", "range", "(", "self", ".", "n_kernels", ")", ",", "W_x", "[", "i", ",", ":", "]", ")", ")", "\n", "idx", "=", "discrete_dist", ".", "rvs", "(", "random_state", "=", "self", ".", "random_state", ")", "\n", "y_samples", "[", "i", ",", ":", "]", "=", "self", ".", "gaussians_y", "[", "idx", "]", ".", "rvs", "(", "random_state", "=", "self", ".", "random_state", ")", "\n", "\n", "", "return", "X", ",", "y_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture._simulate_cond_rows_same": [[227, 240], ["sklearn.mixture.GaussianMixture.GaussianMixture.random_state.multinomial", "numpy.vstack", "sklearn.mixture.GaussianMixture.GaussianMixture.random_state.shuffle", "sklearn.mixture.GaussianMixture.GaussianMixture._W_x", "gaussian.rvs", "zip"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture._W_x"], ["", "def", "_simulate_cond_rows_same", "(", "self", ",", "X", ")", ":", "\n", "    ", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "weights", "=", "self", ".", "_W_x", "(", "X", ")", "[", "0", "]", "\n", "\n", "n_samples_comp", "=", "self", ".", "random_state", ".", "multinomial", "(", "n_samples", ",", "weights", ")", "\n", "\n", "y_samples", "=", "np", ".", "vstack", "(", "[", "gaussian", ".", "rvs", "(", "size", "=", "n", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "for", "gaussian", ",", "n", "in", "zip", "(", "self", ".", "gaussians_y", ",", "n_samples_comp", ")", "]", ")", "\n", "\n", "# shuffle rows to make data i.i.d.", "\n", "self", ".", "random_state", ".", "shuffle", "(", "y_samples", ")", "\n", "\n", "return", "X", ",", "y_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture._sample_weights": [[242, 251], ["sklearn.mixture.GaussianMixture.GaussianMixture.random_state_params.uniform", "numpy.sum"], "methods", ["None"], ["", "def", "_sample_weights", "(", "self", ",", "n_weights", ")", ":", "\n", "    ", "\"\"\" samples density weights -> sum up to one\n    Args:\n      n_weights: number of weights\n    Returns:\n      ndarray of weights with shape (n_weights,)\n    \"\"\"", "\n", "weights", "=", "self", ".", "random_state_params", ".", "uniform", "(", "0", ",", "1", ",", "size", "=", "[", "n_weights", "]", ")", "\n", "return", "weights", "/", "np", ".", "sum", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture._W_x": [[252, 269], ["numpy.sum", "numpy.stack", "numpy.stack", "numpy.array", "range", "sklearn.mixture.GaussianMixture.GaussianMixture.gaussians_x[].pdf", "range", "sklearn.mixture.GaussianMixture.GaussianMixture.gaussians_x[].pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "_W_x", "(", "self", ",", "X", ")", ":", "\n", "    ", "\"\"\" Helper function to normalize the joint density P(Y,X) by the marginal density P(X)\n\n    Args:\n      X: conditional random variable, array_like, shape:(n_samples, ndim_x)\n\n    Return:\n      the normalized weighted marginal gaussian distributions P(X) for each n_kernel, shape:(n_samples,n_kernels)\n    \"\"\"", "\n", "assert", "X", ".", "ndim", "==", "2", "and", "X", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_x", "\n", "if", "X", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "      ", "w_p", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "[", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "gaussians_x", "[", "i", "]", ".", "pdf", "(", "X", ")", "]", ")", "for", "i", "in", "range", "(", "self", ".", "n_kernels", ")", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "w_p", "=", "np", ".", "stack", "(", "[", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "gaussians_x", "[", "i", "]", ".", "pdf", "(", "X", ")", "for", "i", "in", "range", "(", "self", ".", "n_kernels", ")", "]", ",", "axis", "=", "1", ")", "\n", "", "normalizing_term", "=", "np", ".", "sum", "(", "w_p", ",", "axis", "=", "1", ")", "\n", "result", "=", "w_p", "/", "normalizing_term", "[", ":", ",", "None", "]", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture.__str__": [[270, 273], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "\"\\nProbabilistic model type: {}\\nn_kernels: {}\\nn_dim_x: {}\\nn_dim_y: {}\\nmeans_std: {}\\n\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "n_kernels", ",", "self", ".", "ndim_x", ",", "self", ".", "ndim_y", ",", "self", ".", "means", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.GMM.GaussianMixture.__unicode__": [[274, 276], ["sklearn.mixture.GaussianMixture.GaussianMixture.__str__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__str__"], ["", "def", "__unicode__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.toy_densities.build_toy_dataset": [[9, 15], ["numpy.float32", "numpy.float32", "sklearn.model_selection.train_test_split", "numpy.float32", "numpy.random.normal", "y_train.ravel", "y_test.ravel", "numpy.random.uniform", "numpy.sin"], "function", ["None"], ["def", "build_toy_dataset", "(", "n_samples", "=", "40000", ")", ":", "\n", "  ", "y_data", "=", "np", ".", "float32", "(", "np", ".", "random", ".", "uniform", "(", "-", "10.5", ",", "10.5", ",", "(", "1", ",", "n_samples", ")", ")", ")", ".", "T", "\n", "r_data", "=", "np", ".", "float32", "(", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "n_samples", ",", "1", ")", ")", ")", "# random noise", "\n", "x_data", "=", "np", ".", "float32", "(", "np", ".", "sin", "(", "0.75", "*", "y_data", ")", "*", "7.0", "+", "y_data", "*", "0.5", "+", "r_data", "*", "1.0", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "x_data", ",", "y_data", ",", "random_state", "=", "42", ",", "train_size", "=", "0.5", ")", "\n", "return", "X_train", ",", "X_test", ",", "y_train", ".", "ravel", "(", ")", ",", "y_test", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.toy_densities.build_toy_dataset2": [[16, 26], ["sklearn.model_selection.train_test_split", "numpy.float32", "numpy.float32", "numpy.cos", "numpy.sin", "y_train.ravel", "y_test.ravel", "numpy.random.normal", "numpy.random.uniform"], "function", ["None"], ["", "def", "build_toy_dataset2", "(", "n_samples", "=", "40000", ")", ":", "\n", "# circle shaped density function", "\n", "  ", "radius", "=", "np", ".", "float32", "(", "np", ".", "random", ".", "normal", "(", "loc", "=", "4", ",", "scale", "=", "1", ",", "size", "=", "(", "1", ",", "n_samples", ")", ")", ")", ".", "T", "\n", "angle", "=", "np", ".", "float32", "(", "np", ".", "random", ".", "uniform", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ",", "size", "=", "(", "1", ",", "n_samples", ")", ")", ")", ".", "T", "\n", "x_data", "=", "radius", "*", "np", ".", "cos", "(", "angle", ")", "\n", "y_data", "=", "radius", "*", "np", ".", "sin", "(", "angle", ")", "\n", "\n", "train_size", "=", "0.5", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "x_data", ",", "y_data", ",", "random_state", "=", "42", ",", "train_size", "=", "train_size", ",", "test_size", "=", "1", "-", "train_size", ")", "\n", "return", "X_train", ",", "X_test", ",", "y_train", ".", "ravel", "(", ")", ",", "y_test", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.pdf": [[13, 25], ["None"], "methods", ["None"], ["  ", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Conditional probability density function p(y|x) of the underlying probability model\n\n    Args:\n      X: x to be conditioned on - numpy array of shape (n_points, ndim_x)\n      Y: y target values for witch the pdf shall be evaluated - numpy array of shape (n_points, ndim_y)\n\n    Returns:\n      p(X|Y) conditional density values for the provided X and Y - numpy array of shape (n_points, )\n    \"\"\"", "\n", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.log_pdf": [[26, 42], ["warnings.catch_warnings", "warnings.simplefilter", "numpy.log", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "log_pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Conditional log-probability log p(y|x). Requires the model to be fitted.\n\n       Args:\n         X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n         Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n       Returns:\n          conditional log-probability log p(y|x) - numpy array of shape (n_query_samples, )\n\n     \"\"\"", "\n", "# This method is numerically unfavorable and should be overwritten with a numerically stable method", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "      ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "log_prob", "=", "np", ".", "log", "(", "self", ".", "pdf", "(", "X", ",", "Y", ")", ")", "\n", "", "return", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.cdf": [[43, 55], ["None"], "methods", ["None"], ["", "def", "cdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Conditional cumulated probability density function P(Y < y | x) of the underlying probability model\n\n    Args:\n      X: x to be conditioned on - numpy array of shape (n_points, ndim_x)\n      Y: y target values for witch the cdf shall be evaluated - numpy array of shape (n_points, ndim_y)\n\n    Returns:\n     P(Y < y | x) cumulated density values for the provided X and Y - numpy array of shape (n_points, )\n    \"\"\"", "\n", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.simulate_conditional": [[56, 66], ["None"], "methods", ["None"], ["", "def", "simulate_conditional", "(", "self", ",", "X", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the conditional distribution\n\n    Args:\n      X: x to be conditioned on when drawing a sample from y ~ p(y|x) - numpy array of shape (n_samples, ndim_x)\n\n    Returns:\n      Conditional random samples y drawn from p(y|x) - numpy array of shape (n_samples, ndim_y)\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.simulate": [[67, 77], ["None"], "methods", ["None"], ["", "def", "simulate", "(", "self", ",", "n_samples", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the unconditional distribution p(x,y)\n\n    Args:\n      n_samples: (int) number of samples to be drawn from the conditional distribution\n\n    Returns:\n      (X,Y) - random samples drawn from p(x,y) - numpy arrays of shape (n_samples, ndim_x) and (n_samples, ndim_y)\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.plot": [[78, 129], ["numpy.linspace", "numpy.linspace", "numpy.meshgrid", "matplotlib.figure", "matplotlib.figure", "matplotlib.figure.gca", "plt.figure.gca.plot_surface", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.is_interactive", "matplotlib.is_interactive", "matplotlib.ioff", "matplotlib.ioff", "X.flatten", "Y.flatten", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.pdf", "X.reshape", "Y.reshape", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.reshape", "matplotlib.show", "matplotlib.show", "matplotlib.figure.tight_layout", "matplotlib.figure.canvas.draw", "numpy.fromstring", "numpy_img.reshape.reshape.reshape", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.cdf", "matplotlib.figure.canvas.tostring_rgb", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.joint_pdf", "matplotlib.figure.canvas.get_width_height"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.JumpDiffusionModel.JumpDiffusionModel.joint_pdf"], ["", "def", "plot", "(", "self", ",", "xlim", "=", "(", "-", "5", ",", "5", ")", ",", "ylim", "=", "(", "-", "5", ",", "5", ")", ",", "resolution", "=", "100", ",", "mode", "=", "\"pdf\"", ",", "show", "=", "False", ",", "numpyfig", "=", "False", ")", ":", "\n", "    ", "\"\"\" Plots the distribution specified in mode if x and y are 1-dimensional each\n\n    Args:\n      xlim: 2-tuple specifying the x axis limits\n      ylim: 2-tuple specifying the y axis limits\n      resolution: integer specifying the resolution of plot\n      mode: spefify which dist to plot [\"pdf\", \"cdf\", \"joint_pdf\"]\n\n    \"\"\"", "\n", "modes", "=", "[", "\"pdf\"", ",", "\"cdf\"", ",", "\"joint_pdf\"", "]", "\n", "assert", "mode", "in", "modes", ",", "\"mode must be on of the following: \"", "+", "modes", "\n", "assert", "self", ".", "ndim", "==", "2", ",", "\"Can only plot two dimensional distributions\"", "\n", "\n", "if", "show", "==", "False", "and", "mpl", ".", "is_interactive", "(", ")", ":", "\n", "      ", "plt", ".", "ioff", "(", ")", "\n", "\n", "\n", "# prepare mesh", "\n", "", "linspace_x", "=", "np", ".", "linspace", "(", "xlim", "[", "0", "]", ",", "xlim", "[", "1", "]", ",", "num", "=", "resolution", ")", "\n", "linspace_y", "=", "np", ".", "linspace", "(", "ylim", "[", "0", "]", ",", "ylim", "[", "1", "]", ",", "num", "=", "resolution", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "linspace_x", ",", "linspace_y", ")", "\n", "X", ",", "Y", "=", "X", ".", "flatten", "(", ")", ",", "Y", ".", "flatten", "(", ")", "\n", "\n", "# calculate values of distribution", "\n", "if", "mode", "==", "\"pdf\"", ":", "\n", "      ", "Z", "=", "self", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "", "elif", "mode", "==", "\"cdf\"", ":", "\n", "      ", "Z", "=", "self", ".", "cdf", "(", "X", ",", "Y", ")", "\n", "", "elif", "mode", "==", "\"joint_pdf\"", ":", "\n", "      ", "Z", "=", "self", ".", "joint_pdf", "(", "X", ",", "Y", ")", "\n", "\n", "", "X", ",", "Y", ",", "Z", "=", "X", ".", "reshape", "(", "[", "resolution", ",", "resolution", "]", ")", ",", "Y", ".", "reshape", "(", "[", "resolution", ",", "resolution", "]", ")", ",", "Z", ".", "reshape", "(", "\n", "[", "resolution", ",", "resolution", "]", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "300", ")", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "'3d'", ")", "\n", "surf", "=", "ax", ".", "plot_surface", "(", "X", ",", "Y", ",", "Z", ",", "cmap", "=", "cm", ".", "coolwarm", ",", "rcount", "=", "resolution", ",", "ccount", "=", "resolution", ",", "\n", "linewidth", "=", "100", ",", "antialiased", "=", "True", ")", "\n", "plt", ".", "xlabel", "(", "\"x\"", ")", "\n", "plt", ".", "ylabel", "(", "\"y\"", ")", "\n", "if", "show", ":", "\n", "      ", "plt", ".", "show", "(", ")", "\n", "\n", "", "if", "numpyfig", ":", "\n", "      ", "fig", ".", "tight_layout", "(", "pad", "=", "0", ")", "\n", "fig", ".", "canvas", ".", "draw", "(", ")", "\n", "numpy_img", "=", "np", ".", "fromstring", "(", "fig", ".", "canvas", ".", "tostring_rgb", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "numpy_img", "=", "numpy_img", ".", "reshape", "(", "fig", ".", "canvas", ".", "get_width_height", "(", ")", "[", ":", ":", "-", "1", "]", "+", "(", "3", ",", ")", ")", "\n", "return", "numpy_img", "\n", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.mean_": [[130, 144], ["BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._mean_mc", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._mean_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._mean_mc", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._mean_pdf"], ["", "def", "mean_", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Mean of the fitted distribution conditioned on x_cond\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Means E[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y)\n    \"\"\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "if", "self", ".", "can_sample", ":", "\n", "      ", "return", "self", ".", "_mean_mc", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "_mean_pdf", "(", "x_cond", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.std_": [[145, 157], ["BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._handle_input_dimensionality", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._std_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._std_pdf"], ["", "", "def", "std_", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Standard deviation of the fitted distribution conditioned on x_cond\n\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Standard deviations  sqrt(Var[y|x]) corresponding to x_cond - numpy array of shape (n_values, ndim_y)\n    \"\"\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "return", "self", ".", "_std_pdf", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.covariance": [[158, 174], ["BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._covariance_pdf", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._covariance_mc", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._covariance_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._covariance_mc"], ["", "def", "covariance", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Covariance of the fitted distribution conditioned on x_cond\n\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n      n_samples: number of samples for monte carlo model_fitting\n\n    Returns:\n      Covariances Cov[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y, ndim_y)\n    \"\"\"", "\n", "if", "self", ".", "has_pdf", ":", "\n", "      ", "return", "self", ".", "_covariance_pdf", "(", "x_cond", ")", "\n", "", "elif", "self", ".", "can_sample", ":", "\n", "      ", "return", "self", ".", "_covariance_mc", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.skewness": [[175, 192], ["BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._handle_input_dimensionality", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._skewness_pdf", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._skewness_pdf", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._skewness_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._skewness_pdf"], ["", "", "def", "skewness", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Skewness of the fitted distribution conditioned on x_cond\n\n       Args:\n         x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n       Returns:\n         Skewness Skew[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y, ndim_y)\n       \"\"\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "if", "self", ".", "has_pdf", ":", "\n", "      ", "return", "self", ".", "_skewness_pdf", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "", "elif", "self", ".", "can_sample", ":", "\n", "      ", "return", "self", ".", "_skewness_pdf", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.kurtosis": [[193, 210], ["BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._handle_input_dimensionality", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._kurtosis_pdf", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._kurtosis_mc", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._kurtosis_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._kurtosis_mc"], ["", "", "def", "kurtosis", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Kurtosis of the fitted distribution conditioned on x_cond\n\n       Args:\n         x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n       Returns:\n         Kurtosis Kurt[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y, ndim_y)\n       \"\"\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "if", "self", ".", "has_pdf", ":", "\n", "      ", "return", "self", ".", "_kurtosis_pdf", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "", "elif", "self", ".", "can_sample", ":", "\n", "      ", "return", "self", ".", "_kurtosis_mc", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.value_at_risk": [[211, 231], ["BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._quantile_cdf", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._quantile_mc", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._quantile_cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._quantile_mc"], ["", "", "def", "value_at_risk", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Computes the Value-at-Risk (VaR) of the fitted distribution. Only if ndim_y = 1\n\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n      alpha: quantile percentage of the distribution\n      n_samples: number of samples for monte carlo model_fitting\n\n    Returns:\n       VaR values for each x to condition on - numpy array of shape (n_values)\n    \"\"\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Value at Risk can only be computed when ndim_y = 1\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "if", "self", ".", "has_cdf", ":", "\n", "      ", "return", "self", ".", "_quantile_cdf", "(", "x_cond", ",", "alpha", "=", "alpha", ")", "\n", "", "elif", "self", ".", "can_sample", ":", "\n", "      ", "return", "self", ".", "_quantile_mc", "(", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.conditional_value_at_risk": [[232, 255], ["BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._handle_input_dimensionality", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.value_at_risk", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._conditional_value_at_risk_mc_pdf", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._conditional_value_at_risk_sampling", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._conditional_value_at_risk_mc_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._conditional_value_at_risk_sampling"], ["", "", "def", "conditional_value_at_risk", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Computes the Conditional Value-at-Risk (CVaR) / Expected Shortfall of the fitted distribution. Only if ndim_y = 1\n\n       Args:\n         x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n         alpha: quantile percentage of the distribution\n         n_samples: number of samples for monte carlo model_fitting\n\n       Returns:\n         CVaR values for each x to condition on - numpy array of shape (n_values)\n       \"\"\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Value at Risk can only be computed when ndim_y = 1\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "VaRs", "=", "self", ".", "value_at_risk", "(", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "\n", "if", "self", ".", "has_pdf", ":", "\n", "      ", "return", "self", ".", "_conditional_value_at_risk_mc_pdf", "(", "VaRs", ",", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "", "elif", "self", ".", "can_sample", ":", "\n", "      ", "return", "self", ".", "_conditional_value_at_risk_sampling", "(", "VaRs", ",", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\"Distribution object must either support pdf or sampling in order to compute CVaR\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.tail_risk_measures": [[256, 282], ["BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.value_at_risk", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._conditional_value_at_risk_mc_pdf", "BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._conditional_value_at_risk_sampling", "NotImplementedError", "len"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._conditional_value_at_risk_mc_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._conditional_value_at_risk_sampling"], ["", "", "def", "tail_risk_measures", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Computes the Value-at-Risk (VaR) and Conditional Value-at-Risk (CVaR)\n\n        Args:\n          x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n          alpha: quantile percentage of the distribution\n          n_samples: number of samples for monte carlo model_fitting\n\n        Returns:\n          - VaR values for each x to condition on - numpy array of shape (n_values)\n          - CVaR values for each x to condition on - numpy array of shape (n_values)\n        \"\"\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Value at Risk can only be computed when ndim_y = 1\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "VaRs", "=", "self", ".", "value_at_risk", "(", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "\n", "if", "self", ".", "has_pdf", ":", "\n", "      ", "CVaRs", "=", "self", ".", "_conditional_value_at_risk_mc_pdf", "(", "VaRs", ",", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "", "elif", "self", ".", "can_sample", ":", "\n", "      ", "CVaRs", "=", "self", ".", "_conditional_value_at_risk_sampling", "(", "VaRs", ",", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\"Distribution object must either support pdf or sampling in order to compute CVaR\"", ")", "\n", "\n", "", "assert", "VaRs", ".", "shape", "==", "CVaRs", ".", "shape", "==", "(", "len", "(", "x_cond", ")", ",", ")", "\n", "return", "VaRs", ",", "CVaRs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.get_configuration": [[283, 287], ["super().get_params"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_params"], ["", "def", "get_configuration", "(", "self", ",", "deep", "=", "True", ")", ":", "\n", "    ", "param_dict", "=", "super", "(", "BaseConditionalDensitySimulation", ",", "self", ")", ".", "get_params", "(", "deep", "=", "deep", ")", "\n", "param_dict", "[", "'simulator'", "]", "=", "self", ".", "__class__", ".", "__name__", "\n", "return", "param_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._handle_input_dimensionality": [[288, 305], ["numpy.expand_dims", "numpy.expand_dims"], "methods", ["None"], ["", "def", "_handle_input_dimensionality", "(", "self", ",", "X", ",", "Y", "=", "None", ")", ":", "\n", "# assert that both X an Y are 2D arrays with shape (n_samples, n_dim)", "\n", "\n", "    ", "if", "X", ".", "ndim", "==", "1", ":", "\n", "      ", "X", "=", "np", ".", "expand_dims", "(", "X", ",", "axis", "=", "1", ")", "\n", "\n", "", "if", "Y", "is", "not", "None", ":", "\n", "      ", "if", "Y", ".", "ndim", "==", "1", ":", "\n", "        ", "Y", "=", "np", ".", "expand_dims", "(", "Y", ",", "axis", "=", "1", ")", "\n", "\n", "", "assert", "X", ".", "shape", "[", "0", "]", "==", "Y", ".", "shape", "[", "0", "]", ",", "\"X and Y must have the same length along axis 0\"", "\n", "assert", "X", ".", "ndim", "==", "Y", ".", "ndim", "==", "2", ",", "\"X and Y must be matrices\"", "\n", "\n", "", "if", "Y", "is", "None", ":", "\n", "      ", "return", "X", "\n", "", "else", ":", "\n", "      ", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._compute_data_statistics": [[306, 309], ["BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.simulate", "numpy.mean", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate"], ["", "", "def", "_compute_data_statistics", "(", "self", ")", ":", "\n", "    ", "_", ",", "Y", "=", "self", ".", "simulate", "(", "n_samples", "=", "10", "**", "4", ")", "\n", "return", "np", ".", "mean", "(", "Y", ",", "axis", "=", "0", ")", ",", "np", ".", "std", "(", "Y", ",", "axis", "=", "0", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.JumpDiffusionModel.JumpDiffusionModel.__init__": [[14, 56], ["numpy.random.RandomState", "JumpDiffusionModel.JumpDiffusionModel._compute_data_statistics"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._compute_data_statistics"], ["def", "__init__", "(", "self", ",", "random_seed", "=", "None", ")", ":", "\n", "    ", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "random_seed", ")", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "\n", "# Parameters based on the paper with slight modifications", "\n", "self", ".", "r", "=", "0.0", "\n", "self", ".", "kappa_V", "=", "3.011", "\n", "self", ".", "theta_V", "=", "0.0365", "\n", "self", ".", "xi_V", "=", "0.346", "\n", "self", ".", "kappa_L", "=", "2.353", "\n", "self", ".", "theta_L", "=", "0.171", "\n", "self", ".", "xi_L", "=", "0.158", "\n", "self", ".", "kappa_psi", "=", "0.662", "\n", "self", ".", "theta_psi", "=", "0.101", "\n", "self", ".", "xi_psi", "=", "0.204", "\n", "self", ".", "rho", "=", "-", "0.353", "\n", "self", ".", "theta", "=", "-", "0.037", "\n", "self", ".", "delta", "=", "0.031", "\n", "# gamma = 0.118", "\n", "# gamma_V = 18.38", "\n", "# gamma_L = 9.259", "\n", "self", ".", "gamma", "=", "0.4", "\n", "self", ".", "gamma_V", "=", "90", "\n", "self", ".", "gamma_L", "=", "25", "\n", "\n", "\"\"\" Starting values for the model variables (unconditional expectation except for log-return) \"\"\"", "\n", "\n", "self", ".", "y_0", "=", "0", "\n", "self", ".", "V_0", "=", "0.0365", "\n", "self", ".", "L_0", "=", "0.171", "\n", "self", ".", "Psi_0", "=", "0.101", "\n", "\n", "self", ".", "ndim_x", "=", "3", "\n", "self", ".", "ndim_y", "=", "1", "\n", "self", ".", "ndim", "=", "self", ".", "ndim_x", "+", "self", ".", "ndim_y", "\n", "\n", "# approximate data statistics", "\n", "self", ".", "y_mean", ",", "self", ".", "y_std", "=", "self", ".", "_compute_data_statistics", "(", ")", "\n", "\n", "self", ".", "has_cdf", "=", "False", "\n", "self", ".", "has_pdf", "=", "False", "\n", "self", ".", "can_sample", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.JumpDiffusionModel.JumpDiffusionModel.pdf": [[57, 59], ["None"], "methods", ["None"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.JumpDiffusionModel.JumpDiffusionModel.cdf": [[60, 62], ["None"], "methods", ["None"], ["", "def", "cdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.JumpDiffusionModel.JumpDiffusionModel.joint_pdf": [[63, 65], ["None"], "methods", ["None"], ["", "def", "joint_pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.JumpDiffusionModel.JumpDiffusionModel.simulate_conditional": [[66, 86], ["JumpDiffusionModel.JumpDiffusionModel._handle_input_dimensionality", "JumpDiffusionModel.JumpDiffusionModel._simulate_one_step", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.JumpDiffusionModel.JumpDiffusionModel._simulate_one_step"], ["", "def", "simulate_conditional", "(", "self", ",", "X", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the conditional distribution\n\n     Args:\n       X: x to be conditioned on when drawing a sample from y ~ p(y|x) - numpy array of shape (n_samples, 3)\n          thereby x is a horizontal stack of V, L and Psi\n          -> x = (V, L, Psi)\n\n     Returns: (X,Y)\n       - X: the x to of the conditional samples (identical with argument X)\n       - Y: Conditional random samples y drawn from p(y|x) - numpy array of shape (n_samples, 1)\n\n    \"\"\"", "\n", "X", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ")", "\n", "V_sim", ",", "L_sim", ",", "Psi_sim", "=", "X", "[", ":", ",", "0", "]", ",", "X", "[", ":", ",", "1", "]", ",", "X", "[", ":", ",", "2", "]", "\n", "\n", "Y", ",", "_", ",", "_", ",", "_", "=", "self", ".", "_simulate_one_step", "(", "V_sim", ",", "L_sim", ",", "Psi_sim", ")", "\n", "Y", "=", "np", ".", "expand_dims", "(", "Y", ",", "axis", "=", "1", ")", "\n", "assert", "Y", ".", "shape", "==", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.JumpDiffusionModel.JumpDiffusionModel.simulate": [[87, 118], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "range", "numpy.hstack", "JumpDiffusionModel.JumpDiffusionModel._simulate_one_step"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.JumpDiffusionModel.JumpDiffusionModel._simulate_one_step"], ["", "def", "simulate", "(", "self", ",", "n_samples", "=", "10000", ")", ":", "\n", "    ", "\"\"\" Simulates a time-series of n_samples time steps\n\n     Args:\n       samples: (int) number of samples to be drawn from the joint distribution P(X,Y)\n\n     Returns: (X,Y)\n       - X: horizontal stack of simulated V (spot vol), L (illigudity) and Psi (latent state) - numpy array of shape (n_samples, 3)\n       - Y: log returns drawn from P(Y|X) - numpy array of shape (n_samples, 1)\n    \"\"\"", "\n", "\n", "assert", "n_samples", ">", "0", "\n", "N", "=", "1", "\n", "\n", "y_sim", "=", "np", ".", "zeros", "(", "(", "n_samples", "+", "1", ",", "N", ")", ")", "\n", "V_sim", "=", "np", ".", "zeros", "(", "(", "n_samples", "+", "1", ",", "N", ")", ")", "\n", "L_sim", "=", "np", ".", "zeros", "(", "(", "n_samples", "+", "1", ",", "N", ")", ")", "\n", "Psi_sim", "=", "np", ".", "zeros", "(", "(", "n_samples", "+", "1", ",", "N", ")", ")", "\n", "\n", "y_sim", "[", "0", ",", ":", "]", "=", "np", ".", "full", "(", "(", "N", ",", ")", ",", "self", ".", "y_0", ")", "\n", "V_sim", "[", "0", ",", ":", "]", "=", "np", ".", "full", "(", "(", "N", ",", ")", ",", "self", ".", "V_0", ")", "\n", "L_sim", "[", "0", ",", ":", "]", "=", "np", ".", "full", "(", "(", "N", ",", ")", ",", "self", ".", "L_0", ")", "\n", "Psi_sim", "[", "0", ",", ":", "]", "=", "np", ".", "full", "(", "(", "N", ",", ")", ",", "self", ".", "Psi_0", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "n_samples", ")", ":", "\n", "      ", "y_sim", "[", "i", "+", "1", "]", ",", "V_sim", "[", "i", "+", "1", "]", ",", "L_sim", "[", "i", "+", "1", "]", ",", "Psi_sim", "[", "i", "+", "1", "]", "=", "self", ".", "_simulate_one_step", "(", "V_sim", "[", "i", "]", ",", "L_sim", "[", "i", "]", ",", "Psi_sim", "[", "i", "]", ")", "\n", "\n", "", "X", "=", "np", ".", "hstack", "(", "[", "V_sim", "[", ":", "n_samples", "]", ",", "L_sim", "[", ":", "n_samples", "]", ",", "Psi_sim", "[", ":", "n_samples", "]", "]", ")", "\n", "Y", "=", "y_sim", "[", "1", ":", "]", "\n", "assert", "Y", ".", "shape", "==", "(", "n_samples", ",", "self", ".", "ndim_y", ")", "and", "X", ".", "shape", "==", "(", "n_samples", ",", "self", ".", "ndim_x", ")", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.JumpDiffusionModel.JumpDiffusionModel._simulate_one_step": [[119, 146], ["numpy.full", "numpy.maximum", "JumpDiffusionModel.JumpDiffusionModel.random_state.normal", "numpy.maximum", "JumpDiffusionModel.JumpDiffusionModel.random_state.normal", "numpy.maximum", "JumpDiffusionModel.JumpDiffusionModel.random_state.normal", "JumpDiffusionModel.JumpDiffusionModel.random_state.normal", "math.exp", "JumpDiffusionModel.JumpDiffusionModel.random_state.poisson", "JumpDiffusionModel.JumpDiffusionModel.random_state.normal"], "methods", ["None"], ["", "def", "_simulate_one_step", "(", "self", ",", "V_sim", ",", "L_sim", ",", "Psi_sim", ")", ":", "\n", "    ", "assert", "V_sim", ".", "ndim", "==", "L_sim", ".", "ndim", "==", "Psi_sim", ".", "ndim", "\n", "assert", "V_sim", ".", "shape", "[", "0", "]", "==", "L_sim", ".", "shape", "[", "0", "]", "==", "Psi_sim", ".", "shape", "[", "0", "]", "\n", "\n", "N", "=", "V_sim", ".", "shape", "[", "0", "]", "\n", "y_sim", "=", "np", ".", "full", "(", "(", "N", ",", ")", ",", "0", ")", "\n", "\n", "xi", "=", "math", ".", "exp", "(", "self", ".", "theta", "+", "(", "self", ".", "delta", "**", "2", ")", "/", "2", ")", "-", "1", "\n", "dt", "=", "1", "/", "252", "\n", "lambda_t", "=", "Psi_sim", "+", "self", ".", "gamma_V", "*", "V_sim", "+", "self", ".", "gamma_L", "*", "L_sim", "\n", "\n", "Psi_sim", "=", "np", ".", "maximum", "(", "0", ",", "Psi_sim", "+", "self", ".", "kappa_psi", "*", "(", "self", ".", "theta_psi", "-", "Psi_sim", ")", "*", "dt", "+", "self", ".", "xi_psi", "*", "(", "\n", "(", "Psi_sim", "*", "dt", ")", "**", "0.5", ")", "*", "self", ".", "random_state", ".", "normal", "(", "size", "=", "(", "N", ",", ")", ")", ")", "\n", "L_shocks", "=", "self", ".", "random_state", ".", "normal", "(", "size", "=", "(", "N", ",", ")", ")", "\n", "L_sim", "=", "np", ".", "maximum", "(", "0", ",", "L_sim", "+", "self", ".", "kappa_L", "*", "(", "self", ".", "theta_L", "-", "L_sim", ")", "*", "dt", "+", "self", ".", "xi_L", "*", "(", "(", "L_sim", "*", "dt", ")", "**", "0.5", ")", "*", "L_shocks", ")", "\n", "V_shocks", "=", "self", ".", "random_state", ".", "normal", "(", "size", "=", "(", "N", ",", ")", ")", "\n", "V_sim", "=", "np", ".", "maximum", "(", "0", ",", "\n", "V_sim", "+", "self", ".", "kappa_V", "*", "(", "self", ".", "theta_V", "-", "V_sim", ")", "*", "dt", "+", "self", ".", "gamma", "*", "self", ".", "kappa_L", "*", "(", "self", ".", "theta_L", "-", "L_sim", ")", "*", "dt", "+", "self", ".", "xi_V", "*", "(", "\n", "(", "V_sim", "*", "dt", ")", "**", "0.5", ")", "*", "V_shocks", "+", "self", ".", "gamma", "*", "self", ".", "xi_L", "*", "(", "(", "L_sim", "*", "dt", ")", "**", "0.5", ")", "*", "L_shocks", ")", "\n", "\n", "q", "=", "self", ".", "random_state", ".", "normal", "(", "loc", "=", "self", ".", "theta", ",", "scale", "=", "self", ".", "delta", ",", "size", "=", "(", "N", ",", ")", ")", "\n", "jumps", "=", "self", ".", "random_state", ".", "poisson", "(", "lam", "=", "lambda_t", "*", "dt", ",", "size", "=", "(", "1", ",", "N", ")", ")", ".", "T", "[", ":", ",", "0", "]", "\n", "y_shocks", "=", "self", ".", "random_state", ".", "normal", "(", "size", "=", "(", "N", ",", ")", ")", "\n", "y_sim", "=", "y_sim", "+", "(", "self", ".", "r", "-", "0.5", "*", "V_sim", "-", "xi", "*", "lambda_t", "+", "1.554", "*", "(", "V_sim", "**", "0.5", ")", ")", "*", "dt", "+", "(", "(", "V_sim", "*", "dt", ")", "**", "0.5", ")", "*", "(", "\n", "(", "(", "1", "-", "self", ".", "rho", "**", "2", ")", "**", "0.5", ")", "*", "y_shocks", "+", "self", ".", "rho", "*", "V_shocks", ")", "+", "q", "*", "jumps", "\n", "\n", "return", "y_sim", ",", "V_sim", ",", "L_sim", ",", "Psi_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.JumpDiffusionModel.JumpDiffusionModel.__str__": [[147, 149], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "\"\\nProbabilistic model type: {}\\n parameters: {{}}\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.JumpDiffusionModel.JumpDiffusionModel.__unicode__": [[150, 152], ["JumpDiffusionModel.JumpDiffusionModel.__str__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__str__"], ["", "def", "__unicode__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__str__", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.ArmaJump.ArmaJump.__init__": [[17, 42], ["numpy.random.RandomState", "ArmaJump.ArmaJump._compute_data_statistics"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._compute_data_statistics"], ["def", "__init__", "(", "self", ",", "c", "=", "0.1", ",", "arma_a1", "=", "0.9", ",", "std", "=", "0.05", ",", "jump_prob", "=", "0.05", ",", "random_seed", "=", "None", ")", ":", "\n", "    ", "self", ".", "std", "=", "std", "\n", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "random_seed", ")", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "\n", "# AR(1) params", "\n", "self", ".", "arma_c", "=", "c", "\n", "self", ".", "arma_a1", "=", "arma_a1", "\n", "\n", "# Jump component", "\n", "assert", "jump_prob", ">=", "0", "and", "jump_prob", "<=", "1", "\n", "self", ".", "jump_prob", "=", "jump_prob", "\n", "self", ".", "jump_mean", "=", "-", "3", "*", "c", "\n", "self", ".", "jump_std", "=", "2", "*", "std", "\n", "\n", "self", ".", "ndim_x", "=", "1", "\n", "self", ".", "ndim_y", "=", "1", "\n", "self", ".", "ndim", "=", "self", ".", "ndim_x", "+", "self", ".", "ndim_y", "\n", "\n", "# approximate data statistics", "\n", "self", ".", "y_mean", ",", "self", ".", "y_std", "=", "self", ".", "_compute_data_statistics", "(", ")", "\n", "\n", "self", ".", "has_cdf", "=", "True", "\n", "self", ".", "has_pdf", "=", "True", "\n", "self", ".", "can_sample", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.ArmaJump.ArmaJump.pdf": [[43, 57], ["ArmaJump.ArmaJump._handle_input_dimensionality", "scipy.norm.pdf().flatten", "scipy.norm.pdf().flatten", "scipy.norm.pdf", "scipy.norm.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Conditional probability density function p(y|x) of the underlying probability model\n\n    Args:\n      X: x to be conditioned on - numpy array of shape (n_points, ndim_x)\n      Y: y target values for witch the pdf shall be evaluated - numpy array of shape (n_points, ndim_y)\n\n    Returns:\n      p(X|Y) conditional density values for the provided X and Y - numpy array of shape (n_points, )\n    \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "mean", "=", "self", ".", "arma_c", "*", "(", "1", "-", "self", ".", "arma_a1", ")", "+", "self", ".", "arma_a1", "*", "X", "\n", "return", "(", "1", "-", "self", ".", "jump_prob", ")", "*", "stats", ".", "norm", ".", "pdf", "(", "Y", "-", "mean", ",", "scale", "=", "self", ".", "std", ")", ".", "flatten", "(", ")", "+", "self", ".", "jump_prob", "*", "stats", ".", "norm", ".", "pdf", "(", "Y", "-", "(", "mean", "+", "self", ".", "jump_mean", ")", ",", "scale", "=", "2", "*", "self", ".", "std", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.ArmaJump.ArmaJump.cdf": [[58, 72], ["ArmaJump.ArmaJump._handle_input_dimensionality", "scipy.norm.cdf().flatten", "scipy.norm.cdf().flatten", "scipy.norm.cdf", "scipy.norm.cdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "cdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Conditional cumulated probability density function P(Y < y | x) of the underlying probability model\n\n        Args:\n          X: x to be conditioned on - numpy array of shape (n_points, ndim_x)\n          Y: y target values for witch the cdf shall be evaluated - numpy array of shape (n_points, ndim_y)\n\n        Returns:\n         P(Y < y | x) cumulated density values for the provided X and Y - numpy array of shape (n_points, )\n        \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "mean", "=", "self", ".", "arma_c", "*", "(", "1", "-", "self", ".", "arma_a1", ")", "+", "self", ".", "arma_a1", "*", "X", "\n", "return", "(", "1", "-", "self", ".", "jump_prob", ")", "*", "stats", ".", "norm", ".", "cdf", "(", "Y", "-", "mean", ",", "scale", "=", "self", ".", "std", ")", ".", "flatten", "(", ")", "+", "self", ".", "jump_prob", "*", "stats", ".", "norm", ".", "cdf", "(", "Y", "-", "(", "mean", "+", "self", ".", "jump_mean", ")", ",", "scale", "=", "2", "*", "self", ".", "std", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.ArmaJump.ArmaJump.simulate_conditional": [[73, 91], ["ArmaJump.ArmaJump.random_state.normal", "ArmaJump.ArmaJump.random_state.normal", "ArmaJump.ArmaJump.random_state.uniform", "numpy.select", "numpy.bitwise_not"], "methods", ["None"], ["", "def", "simulate_conditional", "(", "self", ",", "X", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the conditional distribution\n\n    Args:\n      X: x to be conditioned on when drawing a sample from y ~ p(y|x) - numpy array of shape (n_samples, ndim_x)\n\n    Returns:\n      Conditional random samples y drawn from p(y|x) - numpy array of shape (n_samples, ndim_y)\n    \"\"\"", "\n", "mean", "=", "self", ".", "arma_c", "*", "(", "1", "-", "self", ".", "arma_a1", ")", "+", "self", ".", "arma_a1", "*", "X", "\n", "y_ar", "=", "self", ".", "random_state", ".", "normal", "(", "loc", "=", "mean", ",", "scale", "=", "self", ".", "std", ",", "size", "=", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "mean_jump", "=", "mean", "+", "self", ".", "jump_mean", "\n", "y_jump", "=", "self", ".", "random_state", ".", "normal", "(", "loc", "=", "mean_jump", ",", "scale", "=", "self", ".", "jump_std", ",", "size", "=", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "jump_bernoulli", "=", "self", ".", "random_state", ".", "uniform", "(", "size", "=", "X", ".", "shape", "[", "0", "]", ")", "<", "self", ".", "jump_prob", "\n", "\n", "return", "X", ",", "np", ".", "select", "(", "[", "jump_bernoulli", ",", "np", ".", "bitwise_not", "(", "jump_bernoulli", ")", "]", ",", "[", "y_jump", ",", "y_ar", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.ArmaJump.ArmaJump.simulate": [[92, 113], ["ArmaJump.ArmaJump.random_state.normal", "numpy.zeros", "range", "ArmaJump.ArmaJump.random_state.uniform", "ArmaJump.ArmaJump.random_state.normal"], "methods", ["None"], ["", "def", "simulate", "(", "self", ",", "x_0", "=", "0", ",", "n_samples", "=", "1000", ",", "burn_in", "=", "100", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the unconditional distribution p(x,y)\n\n       Args:\n         n_samples: (int) number of samples to be drawn from the conditional distribution\n\n       Returns:\n         (X,Y) - random samples drawn from p(x,y) - numpy arrays of shape (n_samples, ndim_x) and (n_samples, ndim_y)\n    \"\"\"", "\n", "self", ".", "eps", "=", "self", ".", "random_state", ".", "normal", "(", "scale", "=", "self", ".", "std", ",", "size", "=", "n_samples", "+", "burn_in", "+", "1", ")", "\n", "\n", "x", "=", "np", ".", "zeros", "(", "n_samples", "+", "burn_in", "+", "1", ")", "\n", "x", "[", "0", "]", "=", "x_0", "\n", "for", "i", "in", "range", "(", "1", ",", "n_samples", "+", "burn_in", "+", "1", ")", ":", "\n", "      ", "if", "self", ".", "random_state", ".", "uniform", "(", ")", ">", "self", ".", "jump_prob", ":", "# AR(1)", "\n", "        ", "x", "[", "i", "]", "=", "self", ".", "arma_c", "*", "(", "1", "-", "self", ".", "arma_a1", ")", "+", "self", ".", "arma_a1", "*", "x", "[", "i", "-", "1", "]", "+", "self", ".", "eps", "[", "i", "]", "\n", "", "else", ":", "# Jump", "\n", "        ", "jump", "=", "self", ".", "random_state", ".", "normal", "(", "loc", "=", "self", ".", "jump_mean", ",", "scale", "=", "self", ".", "jump_std", ")", "\n", "x", "[", "i", "]", "=", "self", ".", "arma_c", "*", "(", "1", "-", "self", ".", "arma_a1", ")", "+", "self", ".", "arma_a1", "*", "x", "[", "i", "-", "1", "]", "+", "jump", "\n", "\n", "", "", "return", "x", "[", "burn_in", ":", "n_samples", "+", "burn_in", "]", ",", "x", "[", "burn_in", "+", "1", ":", "n_samples", "+", "burn_in", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.ArmaJump.ArmaJump.mean_": [[114, 128], ["numpy.zeros", "range"], "methods", ["None"], ["", "def", "mean_", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Conditional mean of the distribution\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Means E[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y)\n    \"\"\"", "\n", "\n", "means", "=", "np", ".", "zeros", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "mean", "=", "self", ".", "arma_c", "*", "(", "1", "-", "self", ".", "arma_a1", ")", "+", "self", ".", "arma_a1", "*", "x_cond", "[", "i", "]", "\n", "means", "[", "i", ",", ":", "]", "=", "self", ".", "jump_prob", "*", "(", "mean", "+", "self", ".", "jump_mean", ")", "+", "(", "1", "-", "self", ".", "jump_prob", ")", "*", "mean", "\n", "", "return", "means", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.ArmaJump.ArmaJump.covariance": [[129, 149], ["numpy.zeros", "range"], "methods", ["None"], ["", "def", "covariance", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Covariance of the distribution conditioned on x_cond\n\n      Args:\n        x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n      Returns:\n        Covariances Cov[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y, ndim_y)\n    \"\"\"", "\n", "\n", "covs", "=", "np", ".", "zeros", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ",", "self", ".", "ndim_y", ")", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "c1", "=", "self", ".", "jump_prob", "*", "self", ".", "jump_std", "**", "2", "+", "(", "1", "-", "self", ".", "jump_prob", ")", "*", "self", ".", "std", "**", "2", "\n", "\n", "mean", "=", "self", ".", "arma_c", "*", "(", "1", "-", "self", ".", "arma_a1", ")", "+", "self", ".", "arma_a1", "*", "x_cond", "[", "i", "]", "\n", "c2", "=", "self", ".", "jump_prob", "*", "mean", "**", "2", "+", "(", "1", "-", "self", ".", "jump_prob", ")", "*", "(", "mean", "-", "self", ".", "jump_mean", ")", "**", "2", "-", "(", "self", ".", "jump_prob", "*", "mean", "+", "(", "1", "-", "self", ".", "jump_prob", ")", "*", "(", "mean", "-", "self", ".", "jump_mean", ")", ")", "**", "2", "\n", "covs", "[", "i", "]", "[", "0", "]", "[", "0", "]", "=", "c1", "+", "c2", "\n", "\n", "", "return", "covs", "", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.EconDensity.EconDensity.__init__": [[18, 35], ["numpy.random.RandomState", "EconDensity.EconDensity._compute_data_statistics"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._compute_data_statistics"], ["def", "__init__", "(", "self", ",", "std", "=", "1", ",", "heteroscedastic", "=", "True", ",", "random_seed", "=", "None", ")", ":", "\n", "    ", "assert", "std", ">", "0", "\n", "self", ".", "heteroscedastic", "=", "heteroscedastic", "\n", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "random_seed", ")", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "ndim_x", "=", "1", "\n", "self", ".", "ndim_y", "=", "1", "\n", "self", ".", "ndim", "=", "self", ".", "ndim_x", "+", "self", ".", "ndim_y", "\n", "\n", "# approximate data statistics", "\n", "self", ".", "y_mean", ",", "self", ".", "y_std", "=", "self", ".", "_compute_data_statistics", "(", ")", "\n", "\n", "self", ".", "has_cdf", "=", "True", "\n", "self", ".", "has_pdf", "=", "True", "\n", "self", ".", "can_sample", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.EconDensity.EconDensity.pdf": [[36, 49], ["EconDensity.EconDensity._handle_input_dimensionality", "numpy.where", "EconDensity.EconDensity._std", "scipy.norm.pdf", "EconDensity.EconDensity._std"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Conditional probability density function p(y|x) of the underlying probability model\n\n    Args:\n      X: x to be conditioned on - numpy array of shape (n_points, ndim_x)\n      Y: y target values for witch the pdf shall be evaluated - numpy array of shape (n_points, ndim_y)\n\n    Returns:\n      p(X|Y) conditional density values for the provided X and Y - numpy array of shape (n_points, )\n    \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "mean", "=", "X", "**", "2", "\n", "return", "np", ".", "where", "(", "X", "<", "0", ",", "0", ",", "stats", ".", "norm", ".", "pdf", "(", "(", "Y", "-", "mean", ")", "/", "self", ".", "_std", "(", "X", ")", ")", ")", "/", "self", ".", "_std", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.EconDensity.EconDensity.cdf": [[50, 63], ["EconDensity.EconDensity._handle_input_dimensionality", "numpy.where", "scipy.norm.cdf", "EconDensity.EconDensity._std"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std"], ["", "def", "cdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Conditional cumulated probability density function P(Y < y | x) of the underlying probability model\n\n       Args:\n         X: x to be conditioned on - numpy array of shape (n_points, ndim_x)\n         Y: y target values for witch the cdf shall be evaluated - numpy array of shape (n_points, ndim_y)\n\n       Returns:\n        P(Y < y | x) cumulated density values for the provided X and Y - numpy array of shape (n_points, )\n    \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "mean", "=", "X", "**", "2", "\n", "return", "np", ".", "where", "(", "X", "<", "0", ",", "0", ",", "stats", ".", "norm", ".", "cdf", "(", "(", "Y", "-", "mean", ")", "/", "self", ".", "_std", "(", "X", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.EconDensity.EconDensity.simulate_conditional": [[64, 82], ["numpy.expand_dims", "numpy.expand_dims", "X.flatten.flatten.flatten", "EconDensity.EconDensity._std", "EconDensity.EconDensity.random_state.normal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std"], ["", "def", "simulate_conditional", "(", "self", ",", "X", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the conditional distribution\n\n    Args:\n      X: x to be conditioned on when drawing a sample from y ~ p(y|x) - numpy array of shape (n_samples, ndim_x)\n\n    Returns:\n      Conditional random samples y drawn from p(y|x) - numpy array of shape (n_samples, ndim_y)\n    \"\"\"", "\n", "if", "X", ".", "ndim", "==", "2", "and", "X", ".", "shape", "[", "1", "]", ":", "\n", "      ", "X", "=", "X", ".", "flatten", "(", ")", "\n", "", "assert", "X", ".", "ndim", "==", "1", "\n", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "Y", "=", "X", "**", "2", "+", "self", ".", "_std", "(", "X", ")", "*", "self", ".", "random_state", ".", "normal", "(", "size", "=", "n_samples", ")", "\n", "X", "=", "np", ".", "expand_dims", "(", "X", ",", "axis", "=", "1", ")", "\n", "Y", "=", "np", ".", "expand_dims", "(", "Y", ",", "axis", "=", "1", ")", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.EconDensity.EconDensity.simulate": [[83, 96], ["numpy.abs", "EconDensity.EconDensity.random_state.standard_normal", "numpy.abs.reshape", "Y.reshape", "EconDensity.EconDensity._std", "EconDensity.EconDensity.random_state.normal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std"], ["", "def", "simulate", "(", "self", ",", "n_samples", "=", "1000", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the joint distribution p(x,y)\n    Args:\n      n_samples: (int) number of samples to be drawn from the joint distribution\n\n    Returns:\n      (X,Y) - random samples drawn from p(x,y) - numpy arrays of shape (n_samples, ndim_x) and (n_samples, ndim_y)\n    \"\"\"", "\n", "assert", "n_samples", ">", "0", "\n", "X", "=", "np", ".", "abs", "(", "self", ".", "random_state", ".", "standard_normal", "(", "size", "=", "[", "n_samples", "]", ")", ")", "\n", "Y", "=", "X", "**", "2", "+", "self", ".", "_std", "(", "X", ")", "*", "self", ".", "random_state", ".", "normal", "(", "size", "=", "n_samples", ")", "\n", "X", ",", "Y", "=", "X", ".", "reshape", "(", "(", "n_samples", ",", "self", ".", "ndim_x", ")", ")", ",", "Y", ".", "reshape", "(", "(", "n_samples", ",", "self", ".", "ndim_y", ")", ")", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.EconDensity.EconDensity.mean_": [[97, 108], ["None"], "methods", ["None"], ["", "def", "mean_", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Conditional mean of the distribution\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Means E[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y)\n    \"\"\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "and", "x_cond", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_x", "\n", "\n", "return", "x_cond", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.EconDensity.EconDensity.std_": [[109, 120], ["EconDensity.EconDensity._handle_input_dimensionality"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality"], ["", "def", "std_", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Conditional mean of the distribution\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Means E[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y)\n    \"\"\"", "\n", "X", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "\n", "return", "x_cond", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.EconDensity.EconDensity.covariance": [[121, 134], ["EconDensity.EconDensity._std", "EconDensity.EconDensity.reshape"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std"], ["", "def", "covariance", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Covariance of the distribution conditioned on x_cond\n\n      Args:\n        x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n      Returns:\n        Covariances Cov[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y, ndim_y)\n    \"\"\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "and", "x_cond", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_x", "\n", "\n", "covs", "=", "self", ".", "_std", "(", "x_cond", ")", "\n", "return", "covs", ".", "reshape", "(", "(", "covs", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ",", "self", ".", "ndim_y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.EconDensity.EconDensity.value_at_risk": [[135, 151], ["scipy.stats.norm.ppf", "EconDensity.EconDensity._std"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std"], ["", "def", "value_at_risk", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Computes the Value-at-Risk (VaR) of the fitted distribution. Only if ndim_y = 1\n\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n      alpha: quantile percentage of the distribution\n\n    Returns:\n       VaR values for each x to condition on - numpy array of shape (n_values)\n    \"\"\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Value at Risk can only be computed when ndim_y = 1\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "VaR", "=", "norm", ".", "ppf", "(", "alpha", ",", "loc", "=", "x_cond", ",", "scale", "=", "self", ".", "_std", "(", "x_cond", ")", ")", "[", ":", ",", "0", "]", "\n", "assert", "VaR", ".", "shape", "==", "(", "x_cond", ".", "shape", "[", "0", "]", ",", ")", "\n", "return", "VaR", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.EconDensity.EconDensity.conditional_value_at_risk": [[152, 172], ["EconDensity.EconDensity._handle_input_dimensionality", "EconDensity.EconDensity._std", "scipy.stats.norm.pdf", "scipy.stats.norm.ppf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "conditional_value_at_risk", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Computes the Conditional Value-at-Risk (CVaR) / Expected Shortfall of the fitted distribution. Only if ndim_y = 1\n\n       Args:\n         x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n         alpha: quantile percentage of the distribution\n         n_samples: number of samples for monte carlo model_fitting\n\n       Returns:\n         CVaR values for each x to condition on - numpy array of shape (n_values)\n       \"\"\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Value at Risk can only be computed when ndim_y = 1\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "mu", "=", "x_cond", "**", "2", "\n", "sigma", "=", "self", ".", "_std", "(", "x_cond", ")", "\n", "CVaR", "=", "(", "mu", "-", "sigma", "*", "(", "1", "/", "alpha", ")", "*", "norm", ".", "pdf", "(", "norm", ".", "ppf", "(", "alpha", ")", ")", ")", "[", ":", ",", "0", "]", "\n", "assert", "CVaR", ".", "shape", "==", "(", "x_cond", ".", "shape", "[", "0", "]", ",", ")", "\n", "return", "CVaR", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.EconDensity.EconDensity.tail_risk_measures": [[173, 191], ["EconDensity.EconDensity.value_at_risk", "EconDensity.EconDensity.conditional_value_at_risk"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.conditional_value_at_risk"], ["", "def", "tail_risk_measures", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "n_samples", "=", "10", "**", "7", ")", ":", "\n", "    ", "\"\"\" Computes the Value-at-Risk (VaR) and Conditional Value-at-Risk (CVaR)\n\n        Args:\n          x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n          alpha: quantile percentage of the distribution\n          n_samples: number of samples for monte carlo model_fitting\n\n        Returns:\n          - VaR values for each x to condition on - numpy array of shape (n_values)\n          - CVaR values for each x to condition on - numpy array of shape (n_values)\n        \"\"\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Value at Risk can only be computed when ndim_y = 1\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "VaRs", "=", "self", ".", "value_at_risk", "(", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "CVaRs", "=", "self", ".", "conditional_value_at_risk", "(", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "return", "VaRs", ",", "CVaRs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.EconDensity.EconDensity._std": [[192, 198], ["numpy.ones"], "methods", ["None"], ["", "def", "_std", "(", "self", ",", "X", ")", ":", "\n", "    ", "if", "self", ".", "heteroscedastic", ":", "\n", "      ", "std", "=", "self", ".", "std", "*", "(", "1", "+", "X", ")", "\n", "", "else", ":", "\n", "      ", "std", "=", "self", ".", "std", "*", "np", ".", "ones", "(", "X", ".", "shape", ")", "\n", "", "return", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.EconDensity.EconDensity.__str__": [[199, 202], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "\"\\nProbabilistic model type: {}\\n std: {}\\n n_dim_x: {}\\n n_dim_y: {}\\n\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "std", ",", "self", ".", "ndim_x", ",", "\n", "self", ".", "ndim_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.EconDensity.EconDensity.__unicode__": [[203, 205], ["EconDensity.EconDensity.__str__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__str__"], ["", "def", "__unicode__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__str__", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT.__init__": [[26, 47], ["numpy.random.RandomState", "LinearStudentT.LinearStudentT._compute_data_statistics"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._compute_data_statistics"], ["def", "__init__", "(", "self", ",", "ndim_x", "=", "10", ",", "mu", "=", "0.0", ",", "mu_slope", "=", "0.005", ",", "std", "=", "0.01", ",", "std_slope", "=", "0.002", ",", "dof_low", "=", "2", ",", "dof_high", "=", "10", ",", "random_seed", "=", "None", ")", ":", "\n", "    ", "assert", "std", ">", "0", "\n", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "random_seed", ")", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "mu_slope", "=", "mu_slope", "\n", "self", ".", "std_slope", "=", "std_slope", "\n", "self", ".", "dof_low", "=", "dof_low", "\n", "self", ".", "dof_high", "=", "dof_high", "\n", "self", ".", "ndim_x", "=", "ndim_x", "\n", "self", ".", "ndim_y", "=", "1", "\n", "self", ".", "ndim", "=", "self", ".", "ndim_x", "+", "self", ".", "ndim_y", "\n", "\n", "# approximate data statistics", "\n", "self", ".", "y_mean", ",", "self", ".", "y_std", "=", "self", ".", "_compute_data_statistics", "(", ")", "\n", "\n", "self", ".", "has_cdf", "=", "True", "\n", "self", ".", "has_pdf", "=", "True", "\n", "self", ".", "can_sample", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT.pdf": [[48, 63], ["LinearStudentT.LinearStudentT._handle_input_dimensionality", "LinearStudentT.LinearStudentT._loc_scale_dof_mapping", "cde.utils.distribution.batched_univ_t_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT._loc_scale_dof_mapping", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.batched_univ_t_pdf"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Conditional probability density function p(y|x) of the underlying probability model\n\n    Args:\n      X: x to be conditioned on - numpy array of shape (n_points, ndim_x)\n      Y: y target values for witch the pdf shall be evaluated - numpy array of shape (n_points, ndim_y)\n\n    Returns:\n      p(X|Y) conditional density values for the provided X and Y - numpy array of shape (n_points, )\n    \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "loc", ",", "scale", ",", "dof", "=", "self", ".", "_loc_scale_dof_mapping", "(", "X", ")", "\n", "p", "=", "batched_univ_t_pdf", "(", "Y", ",", "loc", ",", "scale", ",", "dof", ")", "\n", "assert", "p", ".", "shape", "==", "(", "X", ".", "shape", "[", "0", "]", ",", ")", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT.cdf": [[64, 79], ["LinearStudentT.LinearStudentT._handle_input_dimensionality", "LinearStudentT.LinearStudentT._loc_scale_dof_mapping", "cde.utils.distribution.batched_univ_t_cdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT._loc_scale_dof_mapping", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.batched_univ_t_cdf"], ["", "def", "cdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Conditional cumulated probability density function P(Y < y | x) of the underlying probability model\n\n       Args:\n         X: x to be conditioned on - numpy array of shape (n_points, ndim_x)\n         Y: y target values for witch the cdf shall be evaluated - numpy array of shape (n_points, ndim_y)\n\n       Returns:\n        P(Y < y | x) cumulated density values for the provided X and Y - numpy array of shape (n_points, )\n    \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "loc", ",", "scale", ",", "dof", "=", "self", ".", "_loc_scale_dof_mapping", "(", "X", ")", "\n", "p", "=", "batched_univ_t_cdf", "(", "Y", ",", "loc", ",", "scale", ",", "dof", ")", "\n", "assert", "p", ".", "shape", "==", "(", "X", ".", "shape", "[", "0", "]", ",", ")", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT.simulate_conditional": [[80, 94], ["LinearStudentT.LinearStudentT._handle_input_dimensionality", "LinearStudentT.LinearStudentT._loc_scale_dof_mapping", "cde.utils.distribution.batched_univ_t_rvs", "Y.reshape.reshape.reshape"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT._loc_scale_dof_mapping", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.distribution.batched_univ_t_rvs"], ["", "def", "simulate_conditional", "(", "self", ",", "X", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the conditional distribution\n\n    Args:\n      X: x to be conditioned on when drawing a sample from y ~ p(y|x) - numpy array of shape (n_samples, ndim_x)\n\n    Returns:\n      Conditional random samples y drawn from p(y|x) - numpy array of shape (n_samples, ndim_y)\n    \"\"\"", "\n", "X", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ")", "\n", "loc", ",", "scale", ",", "dof", "=", "self", ".", "_loc_scale_dof_mapping", "(", "X", ")", "\n", "Y", "=", "batched_univ_t_rvs", "(", "loc", ",", "scale", ",", "dof", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "Y", "=", "Y", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT.simulate": [[95, 106], ["LinearStudentT.LinearStudentT.random_state.normal", "LinearStudentT.LinearStudentT.simulate_conditional"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate_conditional"], ["", "def", "simulate", "(", "self", ",", "n_samples", "=", "1000", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the joint distribution p(x,y)\n    Args:\n      n_samples: (int) number of samples to be drawn from the joint distribution\n\n    Returns:\n      (X,Y) - random samples drawn from p(x,y) - numpy arrays of shape (n_samples, ndim_x) and (n_samples, ndim_y)\n    \"\"\"", "\n", "assert", "n_samples", ">", "0", "\n", "X", "=", "self", ".", "random_state", ".", "normal", "(", "loc", "=", "0", ",", "scale", "=", "1", ",", "size", "=", "(", "n_samples", ",", "self", ".", "ndim_x", ")", ")", "\n", "return", "self", ".", "simulate_conditional", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT.mean_": [[107, 118], ["LinearStudentT.LinearStudentT._handle_input_dimensionality", "LinearStudentT.LinearStudentT._loc"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT._loc"], ["", "def", "mean_", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Conditional mean of the distribution\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Means E[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y)\n    \"\"\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "and", "x_cond", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_x", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "return", "self", ".", "_loc", "(", "x_cond", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT.std_": [[119, 133], ["LinearStudentT.LinearStudentT._handle_input_dimensionality", "LinearStudentT.LinearStudentT._loc_scale_dof_mapping", "numpy.sqrt().reshape", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT._loc_scale_dof_mapping"], ["", "def", "std_", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Standard deviation of the distribution conditioned on x_cond\n\n      Args:\n        x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n      Returns:\n        Conditional standard deviations Std[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y)\n    \"\"\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "and", "x_cond", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_x", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "loc", ",", "scale", ",", "dof", "=", "self", ".", "_loc_scale_dof_mapping", "(", "x_cond", ")", "\n", "std", "=", "scale", "*", "np", ".", "sqrt", "(", "dof", "/", "(", "dof", "-", "2", ")", ")", ".", "reshape", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", ")", "\n", "return", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT._loc_scale_dof_mapping": [[134, 136], ["LinearStudentT.LinearStudentT._loc", "LinearStudentT.LinearStudentT._scale", "LinearStudentT.LinearStudentT._dof"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT._loc", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT._scale", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT._dof"], ["", "def", "_loc_scale_dof_mapping", "(", "self", ",", "X", ")", ":", "\n", "    ", "return", "self", ".", "_loc", "(", "X", ")", ",", "self", ".", "_scale", "(", "X", ")", ",", "self", ".", "_dof", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT._loc": [[137, 139], ["numpy.expand_dims", "numpy.mean"], "methods", ["None"], ["", "def", "_loc", "(", "self", ",", "X", ")", ":", "\n", "    ", "return", "np", ".", "expand_dims", "(", "self", ".", "mu", "+", "np", ".", "mean", "(", "self", ".", "mu_slope", "*", "X", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT._scale": [[140, 142], ["numpy.expand_dims", "numpy.mean", "numpy.abs"], "methods", ["None"], ["", "def", "_scale", "(", "self", ",", "X", ")", ":", "\n", "    ", "return", "np", ".", "expand_dims", "(", "self", ".", "std", "+", "np", ".", "mean", "(", "self", ".", "std_slope", "*", "np", ".", "abs", "(", "X", ")", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT._dof": [[143, 145], ["LinearStudentT._sigmoid", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT._sigmoid"], ["", "def", "_dof", "(", "self", ",", "X", ")", ":", "\n", "    ", "return", "self", ".", "dof_low", "+", "(", "self", ".", "dof_high", "-", "self", ".", "dof_low", ")", "*", "_sigmoid", "(", "-", "2", "*", "np", ".", "mean", "(", "X", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT.__str__": [[146, 149], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "\"\\nProbabilistic model type: {}\\n std: {}\\n n_dim_x: {}\\n n_dim_y: {}\\n\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "std", ",", "self", ".", "ndim_x", ",", "\n", "self", ".", "ndim_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT.LinearStudentT.__unicode__": [[150, 152], ["LinearStudentT.LinearStudentT.__str__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__str__"], ["", "def", "__unicode__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearStudentT._sigmoid": [[153, 155], ["numpy.exp"], "function", ["None"], ["", "", "def", "_sigmoid", "(", "x", ")", ":", "\n", "  ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian.__init__": [[22, 41], ["numpy.random.RandomState", "LinearGaussian.LinearGaussian._compute_data_statistics"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._compute_data_statistics"], ["def", "__init__", "(", "self", ",", "ndim_x", "=", "1", ",", "mu", "=", "0.0", ",", "mu_slope", "=", "0.005", ",", "std", "=", "0.01", ",", "std_slope", "=", "0.002", ",", "random_seed", "=", "None", ")", ":", "\n", "    ", "assert", "std", ">", "0", "\n", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "random_seed", ")", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "base_std", "=", "std", "\n", "self", ".", "mu_slope", "=", "mu_slope", "\n", "self", ".", "std_slope", "=", "std_slope", "\n", "self", ".", "ndim_x", "=", "ndim_x", "\n", "self", ".", "ndim_y", "=", "1", "\n", "self", ".", "ndim", "=", "self", ".", "ndim_x", "+", "self", ".", "ndim_y", "\n", "\n", "# approximate data statistics", "\n", "self", ".", "y_mean", ",", "self", ".", "y_std", "=", "self", ".", "_compute_data_statistics", "(", ")", "\n", "\n", "self", ".", "has_cdf", "=", "True", "\n", "self", ".", "has_pdf", "=", "True", "\n", "self", ".", "can_sample", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian.pdf": [[42, 57], ["LinearGaussian.LinearGaussian._handle_input_dimensionality", "LinearGaussian.LinearGaussian._mean", "numpy.squeeze", "scipy.norm.pdf", "LinearGaussian.LinearGaussian._std", "LinearGaussian.LinearGaussian._std"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._mean", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Conditional probability density function p(y|x) of the underlying probability model\n\n    Args:\n      X: x to be conditioned on - numpy array of shape (n_points, ndim_x)\n      Y: y target values for witch the pdf shall be evaluated - numpy array of shape (n_points, ndim_y)\n\n    Returns:\n      p(X|Y) conditional density values for the provided X and Y - numpy array of shape (n_points, )\n    \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "mean", "=", "self", ".", "_mean", "(", "X", ")", "\n", "p", "=", "np", ".", "squeeze", "(", "stats", ".", "norm", ".", "pdf", "(", "(", "Y", "-", "mean", ")", "/", "self", ".", "_std", "(", "X", ")", ")", "/", "self", ".", "_std", "(", "X", ")", ")", "\n", "assert", "p", ".", "shape", "==", "(", "X", ".", "shape", "[", "0", "]", ",", ")", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian.cdf": [[58, 71], ["LinearGaussian.LinearGaussian._handle_input_dimensionality", "LinearGaussian.LinearGaussian._mean", "numpy.squeeze", "scipy.norm.cdf", "LinearGaussian.LinearGaussian._std"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._mean", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std"], ["", "def", "cdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Conditional cumulated probability density function P(Y < y | x) of the underlying probability model\n\n       Args:\n         X: x to be conditioned on - numpy array of shape (n_points, ndim_x)\n         Y: y target values for witch the cdf shall be evaluated - numpy array of shape (n_points, ndim_y)\n\n       Returns:\n        P(Y < y | x) cumulated density values for the provided X and Y - numpy array of shape (n_points, )\n    \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "mean", "=", "self", ".", "_mean", "(", "X", ")", "\n", "return", "np", ".", "squeeze", "(", "stats", ".", "norm", ".", "cdf", "(", "(", "Y", "-", "mean", ")", "/", "self", ".", "_std", "(", "X", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian.simulate_conditional": [[72, 87], ["LinearGaussian.LinearGaussian._handle_input_dimensionality", "LinearGaussian.LinearGaussian._mean", "LinearGaussian.LinearGaussian.reshape", "Y.reshape", "LinearGaussian.LinearGaussian._std", "LinearGaussian.LinearGaussian.random_state.normal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._mean", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std"], ["", "def", "simulate_conditional", "(", "self", ",", "X", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the conditional distribution\n\n    Args:\n      X: x to be conditioned on when drawing a sample from y ~ p(y|x) - numpy array of shape (n_samples, ndim_x)\n\n    Returns:\n      Conditional random samples y drawn from p(y|x) - numpy array of shape (n_samples, ndim_y)\n    \"\"\"", "\n", "X", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ")", "\n", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "Y", "=", "self", ".", "_mean", "(", "X", ")", "+", "self", ".", "_std", "(", "X", ")", "*", "self", ".", "random_state", ".", "normal", "(", "size", "=", "n_samples", ")", "\n", "X", ",", "Y", "=", "X", ".", "reshape", "(", "(", "n_samples", ",", "self", ".", "ndim_x", ")", ")", ",", "Y", ".", "reshape", "(", "(", "n_samples", ",", "self", ".", "ndim_y", ")", ")", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian.simulate": [[88, 101], ["LinearGaussian.LinearGaussian.random_state.uniform", "LinearGaussian.LinearGaussian._mean", "LinearGaussian.LinearGaussian.reshape", "Y.reshape", "LinearGaussian.LinearGaussian._std", "LinearGaussian.LinearGaussian.random_state.normal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._mean", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std"], ["", "def", "simulate", "(", "self", ",", "n_samples", "=", "1000", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the joint distribution p(x,y)\n    Args:\n      n_samples: (int) number of samples to be drawn from the joint distribution\n\n    Returns:\n      (X,Y) - random samples drawn from p(x,y) - numpy arrays of shape (n_samples, ndim_x) and (n_samples, ndim_y)\n    \"\"\"", "\n", "assert", "n_samples", ">", "0", "\n", "X", "=", "self", ".", "random_state", ".", "uniform", "(", "-", "1", ",", "1", ",", "size", "=", "(", "n_samples", ",", "self", ".", "ndim_x", ")", ")", "\n", "Y", "=", "self", ".", "_mean", "(", "X", ")", "+", "self", ".", "_std", "(", "X", ")", "*", "self", ".", "random_state", ".", "normal", "(", "size", "=", "n_samples", ")", "\n", "X", ",", "Y", "=", "X", ".", "reshape", "(", "(", "n_samples", ",", "self", ".", "ndim_x", ")", ")", ",", "Y", ".", "reshape", "(", "(", "n_samples", ",", "self", ".", "ndim_y", ")", ")", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian.mean_": [[102, 113], ["LinearGaussian.LinearGaussian._handle_input_dimensionality", "LinearGaussian.LinearGaussian._mean"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._mean"], ["", "def", "mean_", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Conditional mean of the distribution\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Means E[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y)\n    \"\"\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "and", "x_cond", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_x", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "return", "self", ".", "_mean", "(", "x_cond", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian.covariance": [[114, 127], ["LinearGaussian.LinearGaussian._handle_input_dimensionality", "covs.reshape", "LinearGaussian.LinearGaussian._std"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std"], ["", "def", "covariance", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Covariance of the distribution conditioned on x_cond\n\n      Args:\n        x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n      Returns:\n        Covariances Cov[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y, ndim_y)\n    \"\"\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "and", "x_cond", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_x", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "covs", "=", "self", ".", "_std", "(", "x_cond", ")", "**", "2", "\n", "return", "covs", ".", "reshape", "(", "(", "covs", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ",", "self", ".", "ndim_y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian.value_at_risk": [[128, 144], ["scipy.stats.norm.ppf", "LinearGaussian.LinearGaussian._mean", "LinearGaussian.LinearGaussian._std"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._mean", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std"], ["", "def", "value_at_risk", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Computes the Value-at-Risk (VaR) of the fitted distribution. Only if ndim_y = 1\n\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n      alpha: quantile percentage of the distribution\n\n    Returns:\n       VaR values for each x to condition on - numpy array of shape (n_values)\n    \"\"\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Value at Risk can only be computed when ndim_y = 1\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "VaR", "=", "norm", ".", "ppf", "(", "alpha", ",", "loc", "=", "self", ".", "_mean", "(", "x_cond", ")", ",", "scale", "=", "self", ".", "_std", "(", "x_cond", ")", ")", "[", ":", ",", "0", "]", "\n", "assert", "VaR", ".", "shape", "==", "(", "x_cond", ".", "shape", "[", "0", "]", ",", ")", "\n", "return", "VaR", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian.conditional_value_at_risk": [[145, 165], ["LinearGaussian.LinearGaussian._handle_input_dimensionality", "LinearGaussian.LinearGaussian._mean", "LinearGaussian.LinearGaussian._std", "scipy.stats.norm.pdf", "scipy.stats.norm.ppf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._mean", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "conditional_value_at_risk", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Computes the Conditional Value-at-Risk (CVaR) / Expected Shortfall of the fitted distribution. Only if ndim_y = 1\n\n       Args:\n         x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n         alpha: quantile percentage of the distribution\n         n_samples: number of samples for monte carlo model_fitting\n\n       Returns:\n         CVaR values for each x to condition on - numpy array of shape (n_values)\n       \"\"\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Value at Risk can only be computed when ndim_y = 1\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "mean", "=", "self", ".", "_mean", "(", "x_cond", ")", "\n", "sigma", "=", "self", ".", "_std", "(", "x_cond", ")", "\n", "CVaR", "=", "(", "mean", "-", "sigma", "*", "(", "1", "/", "alpha", ")", "*", "norm", ".", "pdf", "(", "norm", ".", "ppf", "(", "alpha", ")", ")", ")", "[", ":", ",", "0", "]", "\n", "assert", "CVaR", ".", "shape", "==", "(", "x_cond", ".", "shape", "[", "0", "]", ",", ")", "\n", "return", "CVaR", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian.tail_risk_measures": [[166, 184], ["LinearGaussian.LinearGaussian.value_at_risk", "LinearGaussian.LinearGaussian.conditional_value_at_risk"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.conditional_value_at_risk"], ["", "def", "tail_risk_measures", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "n_samples", "=", "10", "**", "7", ")", ":", "\n", "    ", "\"\"\" Computes the Value-at-Risk (VaR) and Conditional Value-at-Risk (CVaR)\n\n        Args:\n          x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n          alpha: quantile percentage of the distribution\n          n_samples: number of samples for monte carlo model_fitting\n\n        Returns:\n          - VaR values for each x to condition on - numpy array of shape (n_values)\n          - CVaR values for each x to condition on - numpy array of shape (n_values)\n        \"\"\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Value at Risk can only be computed when ndim_y = 1\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "VaRs", "=", "self", ".", "value_at_risk", "(", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "CVaRs", "=", "self", ".", "conditional_value_at_risk", "(", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "return", "VaRs", ",", "CVaRs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._mean": [[185, 187], ["numpy.expand_dims", "numpy.mean"], "methods", ["None"], ["", "def", "_mean", "(", "self", ",", "X", ")", ":", "\n", "    ", "return", "np", ".", "expand_dims", "(", "self", ".", "mu", "+", "np", ".", "mean", "(", "self", ".", "mu_slope", "*", "X", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian._std": [[188, 190], ["numpy.expand_dims", "numpy.mean"], "methods", ["None"], ["", "def", "_std", "(", "self", ",", "X", ")", ":", "\n", "    ", "return", "np", ".", "expand_dims", "(", "self", ".", "base_std", "+", "np", ".", "mean", "(", "self", ".", "std_slope", "*", "X", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian.__str__": [[191, 194], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "\"\\nProbabilistic model type: {}\\n base_std: {}\\n n_dim_x: {}\\n n_dim_y: {}\\n\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "base_std", ",", "self", ".", "ndim_x", ",", "\n", "self", ".", "ndim_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.LinearGaussian.LinearGaussian.__unicode__": [[195, 197], ["LinearGaussian.LinearGaussian.__str__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__str__"], ["", "def", "__unicode__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__str__", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.__init__": [[11, 40], ["numpy.random.RandomState", "scipy.norm", "SkewNormal.SkewNormal._compute_data_statistics"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation._compute_data_statistics"], ["def", "__init__", "(", "self", ",", "random_seed", "=", "None", ")", ":", "\n", "    ", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "random_seed", ")", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "\n", "# parameters of the X to distribution parameters mapping", "\n", "self", ".", "loc_slope", "=", "0.1", "\n", "self", ".", "loc_intercept", "=", "0.0", "\n", "\n", "self", ".", "scale_square_param", "=", "0.1", "\n", "self", ".", "scale_intercept", "=", "0.05", "\n", "\n", "self", ".", "skew_low", "=", "-", "4", "\n", "self", ".", "skew_high", "=", "0.0", "\n", "\n", "# x folows gaussian", "\n", "self", ".", "x_loc", "=", "0", "\n", "self", ".", "x_scale", "=", "0.5", "\n", "self", ".", "x_dist", "=", "stats", ".", "norm", "(", "loc", "=", "self", ".", "x_loc", ",", "scale", "=", "self", ".", "x_scale", ")", "\n", "\n", "self", ".", "ndim_x", "=", "1", "\n", "self", ".", "ndim_y", "=", "1", "\n", "self", ".", "ndim", "=", "self", ".", "ndim_x", "+", "self", ".", "ndim_y", "\n", "\n", "# approximate data statistics", "\n", "self", ".", "y_mean", ",", "self", ".", "y_std", "=", "self", ".", "_compute_data_statistics", "(", ")", "\n", "\n", "self", ".", "has_cdf", "=", "True", "\n", "self", ".", "has_pdf", "=", "True", "\n", "self", ".", "can_sample", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal._loc_scale_skew_mapping": [[41, 46], ["SkewNormal.sigmoid"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.sigmoid"], ["", "def", "_loc_scale_skew_mapping", "(", "self", ",", "X", ")", ":", "\n", "    ", "loc", "=", "self", ".", "loc_intercept", "+", "self", ".", "loc_slope", "*", "X", "\n", "scale", "=", "self", ".", "scale_intercept", "+", "self", ".", "scale_square_param", "*", "X", "**", "2", "\n", "skew", "=", "self", ".", "skew_low", "+", "(", "self", ".", "skew_high", "-", "self", ".", "skew_low", ")", "*", "sigmoid", "(", "X", ")", "\n", "return", "loc", ",", "scale", ",", "skew", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal._sample_x": [[47, 49], ["SkewNormal.SkewNormal.x_dist.rvs"], "methods", ["None"], ["", "def", "_sample_x", "(", "self", ",", "n_samples", ")", ":", "\n", "    ", "return", "self", ".", "x_dist", ".", "rvs", "(", "(", "n_samples", ",", "self", ".", "ndim_x", ")", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.pdf": [[50, 68], ["SkewNormal.SkewNormal._handle_input_dimensionality", "SkewNormal.SkewNormal._loc_scale_skew_mapping", "numpy.zeros", "range", "scipy.skewnorm.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal._loc_scale_skew_mapping", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Conditional probability density function p(y|x) of the underlying probability model\n(\n    Args:\n      X: x to be conditioned on - numpy array of shape (n_points, ndim_x)\n      Y: y target values for witch the pdf shall be evaluated - numpy array of shape (n_points, ndim_y)\n\n    Returns:\n      p(X|Y) conditional density values for the provided X and Y - numpy array of shape (n_points, )\n    \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "\n", "locs", ",", "scales", ",", "skews", "=", "self", ".", "_loc_scale_skew_mapping", "(", "X", ")", "\n", "\n", "P", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "P", "[", "i", "]", "=", "stats", ".", "skewnorm", ".", "pdf", "(", "Y", "[", "i", "]", ",", "skews", "[", "i", "]", ",", "loc", "=", "locs", "[", "i", "]", ",", "scale", "=", "scales", "[", "i", "]", ")", "\n", "", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.cdf": [[69, 87], ["SkewNormal.SkewNormal._handle_input_dimensionality", "SkewNormal.SkewNormal._loc_scale_skew_mapping", "numpy.zeros", "range", "scipy.skewnorm.cdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal._loc_scale_skew_mapping", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "cdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Conditional cumulated probability density function P(Y < y | x) of the underlying probability model\n\n        Args:\n          X: x to be conditioned on - numpy array of shape (n_points, ndim_x)\n          Y: y target values for witch the cdf shall be evaluated - numpy array of shape (n_points, ndim_y)\n\n        Returns:\n         P(Y < y | x) cumulated density values for the provided X and Y - numpy array of shape (n_points, )\n        \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "\n", "locs", ",", "scales", ",", "skews", "=", "self", ".", "_loc_scale_skew_mapping", "(", "X", ")", "\n", "\n", "P", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "P", "[", "i", "]", "=", "stats", ".", "skewnorm", ".", "cdf", "(", "Y", "[", "i", "]", ",", "skews", "[", "i", "]", ",", "loc", "=", "locs", "[", "i", "]", ",", "scale", "=", "scales", "[", "i", "]", ")", "\n", "", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate_conditional": [[88, 107], ["SkewNormal.SkewNormal._handle_input_dimensionality", "SkewNormal.SkewNormal._loc_scale_skew_mapping", "numpy.zeros", "range", "numpy.expand_dims", "scipy.skewnorm.rvs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal._loc_scale_skew_mapping"], ["", "def", "simulate_conditional", "(", "self", ",", "X", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the conditional distribution\n\n    Args:\n      X: x to be conditioned on when drawing a sample from y ~ p(y|x) - numpy array of shape (n_samples, ndim_x)\n\n    Returns:\n      Conditional random samples y drawn from p(y|x) - numpy array of shape (n_samples, ndim_y)\n    \"\"\"", "\n", "X", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ")", "\n", "\n", "locs", ",", "scales", ",", "skews", "=", "self", ".", "_loc_scale_skew_mapping", "(", "X", ")", "\n", "\n", "rvs", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "rvs", "[", "i", "]", "=", "stats", ".", "skewnorm", ".", "rvs", "(", "skews", "[", "i", "]", ",", "loc", "=", "locs", "[", "i", "]", ",", "scale", "=", "scales", "[", "i", "]", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "", "rvs", "=", "np", ".", "expand_dims", "(", "rvs", ",", "1", ")", "\n", "assert", "rvs", ".", "shape", "==", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", "\n", "return", "rvs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate": [[108, 121], ["SkewNormal.SkewNormal._sample_x", "SkewNormal.SkewNormal.simulate_conditional"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal._sample_x", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate_conditional"], ["", "def", "simulate", "(", "self", ",", "n_samples", "=", "1000", ")", ":", "\n", "    ", "\"\"\" Draws random samples from the unconditional distribution p(x,y)\n\n       Args:\n         n_samples: (int) number of samples to be drawn from the conditional distribution\n\n       Returns:\n         (X,Y) - random samples drawn from p(x,y) - numpy arrays of shape (n_samples, ndim_x) and (n_samples, ndim_y)\n    \"\"\"", "\n", "X", "=", "self", ".", "_sample_x", "(", "n_samples", ")", "\n", "\n", "assert", "X", ".", "shape", "==", "(", "n_samples", ",", "self", ".", "ndim_x", ")", "\n", "return", "X", ",", "self", ".", "simulate_conditional", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.mean_": [[122, 134], ["SkewNormal.SkewNormal._handle_input_dimensionality", "SkewNormal.SkewNormal._loc_scale_skew_mapping"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal._loc_scale_skew_mapping"], ["", "def", "mean_", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Conditional mean of the distribution\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Means E[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y)\n    \"\"\"", "\n", "x", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "locs", ",", "_", ",", "_", "=", "self", ".", "_loc_scale_skew_mapping", "(", "x", ")", "\n", "assert", "locs", ".", "shape", "==", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", "\n", "return", "locs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.sigmoid": [[135, 137], ["numpy.exp"], "function", ["None"], ["", "", "def", "sigmoid", "(", "x", ")", ":", "\n", "  ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.plotting.fit_and_plot_estimated_vs_original_2D": [[16, 21], ["simulator.simulate", "tensorflow.Session", "estimator.fit", "estimator.plot"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.plot"], ["def", "fit_and_plot_estimated_vs_original_2D", "(", "estimator", ",", "simulator", ",", "n_samples", ")", ":", "\n", "  ", "X", ",", "Y", "=", "simulator", ".", "simulate", "(", "n_samples", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "estimator", ".", "fit", "(", "X", ",", "Y", ",", "verbose", "=", "True", ")", "\n", "estimator", ".", "plot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.plotting.plot_dumped_model": [[23, 30], ["os.path.isfile", "open", "tensorflow.Session", "pickle.load", "pickle.load.plot2d"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity.plot2d"], ["", "", "def", "plot_dumped_model", "(", "pickle_path", ")", ":", "\n", "  ", "assert", "os", ".", "path", ".", "isfile", "(", "pickle_path", ")", ",", "\"pickle path must be file\"", "\n", "\n", "with", "open", "(", "pickle_path", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "model", "=", "pickle", ".", "load", "(", "f", ")", "\n", "model", ".", "plot2d", "(", "x_cond", "=", "[", "0.5", ",", "2.0", "]", ",", "ylim", "=", "(", "-", "4", ",", "8", ")", ",", "resolution", "=", "200", ",", "show", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.plotting.comparison_plot2d_sim_est": [[32, 58], ["matplotlib.subplots", "range", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "len", "np.linspace", "np.array", "print", "ax.plot", "legend_entries.append", "ax.plot", "legend_entries.append", "est.pdf", "sim.pdf", "est.cdf", "sim.pdf", "range"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.plot", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.plot", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "", "", "def", "comparison_plot2d_sim_est", "(", "est", ",", "sim", ",", "x_cond", "=", "[", "1.0", ",", "2.0", "]", ",", "ylim", "=", "(", "-", "4", ",", "8", ")", ",", "resolution", "=", "200", ",", "mode", "=", "'pdf'", ")", ":", "\n", "  ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "legend_entries", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "x_cond", ")", ")", ":", "\n", "    ", "Y", "=", "np", ".", "linspace", "(", "ylim", "[", "0", "]", ",", "ylim", "[", "1", "]", ",", "num", "=", "resolution", ")", "\n", "X", "=", "np", ".", "array", "(", "[", "x_cond", "[", "i", "]", "for", "_", "in", "range", "(", "resolution", ")", "]", ")", "\n", "# calculate values of distribution", "\n", "\n", "print", "(", "X", ".", "shape", ",", "Y", ".", "shape", ")", "\n", "if", "mode", "==", "\"pdf\"", ":", "\n", "      ", "Z_est", "=", "est", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "Z_sim", "=", "sim", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "", "elif", "mode", "==", "\"cdf\"", ":", "\n", "      ", "Z_est", "=", "est", ".", "cdf", "(", "X", ",", "Y", ")", "\n", "Z_sim", "=", "sim", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "\n", "", "ax", ".", "plot", "(", "Y", ",", "Z_est", ",", "label", "=", "'est '", "+", "'x=%.2f'", "%", "x_cond", "[", "i", "]", ")", "\n", "legend_entries", ".", "append", "(", "'est '", "+", "\"x=%.2f\"", "%", "x_cond", "[", "i", "]", ")", "\n", "ax", ".", "plot", "(", "Y", ",", "Z_sim", ",", "label", "=", "'sim '", "+", "'x=%.2f'", "%", "x_cond", "[", "i", "]", ")", "\n", "legend_entries", ".", "append", "(", "'sim '", "+", "\"x=%.2f\"", "%", "x_cond", "[", "i", "]", ")", "\n", "\n", "", "plt", ".", "legend", "(", "legend_entries", ",", "loc", "=", "'upper right'", ")", "\n", "\n", "plt", ".", "xlabel", "(", "\"y\"", ")", "\n", "plt", ".", "ylabel", "(", "\"p(y|x)\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.plotting.get_density_plots": [[60, 123], ["ml_logger.logger.configure", "dict", "cde.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults", "cde.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults.generate_results_dataframe", "ml_logger.logger.load_pkl_log", "tensorflow.Session", "type", "len", "len", "cde.load_dumped_estimator", "cde.load_dumped_estimators", "tf.Session.run", "matplotlib.suptitle", "model.estimator.plot3d", "figs.append", "tf.Session.close", "cde.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults.single_results_dict.items", "cde.utils.misc.take_of_type", "tensorflow.global_variables_initializer"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults.generate_results_dataframe", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.load_dumped_estimator", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.load_dumped_estimators", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity.plot3d", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.take_of_type"], ["", "def", "get_density_plots", "(", "estimators_list", ",", "simulators_dict", ",", "path_to_results", ",", "exp_prefix", "=", "\"question1_noise_reg_x\"", ",", "task_ids", "=", "None", ")", ":", "\n", "  ", "\"\"\"\n  This function allows to compare plots from estimators and simulators (i.e. fitted and true densities). Two modes are currently available:\n  1) by specifying estimators and simulator, the function picks one result pair randomly that matches the given simulator/estimator\n  selection\n  2) by specifying the task_ids as list, it is possible to pick specific plots to compare\n\n  Args:\n    estimators: a list containing strings of estimators to be evaluated, e.g. ['KernelMixtureNetwork', 'MixtureDensityNetwork']\n    simulators: a dict containing specifications of a simulator under which the estimators shall be compared, e.g.\n      {'heteroscedastic': True, 'random_seed': 20, 'std': 1, 'simulator': 'EconDensity'}\n    path_to_results: absolute path to where the dumped model files are stored\n    exp_prefix: specifies the task question\n\n  Returns:\n    A list of figures for fitted and true densities.\n  \"\"\"", "\n", "\n", "if", "task_ids", "is", "not", "None", ":", "\n", "    ", "assert", "type", "(", "task_ids", ")", "==", "list", "\n", "assert", "len", "(", "task_ids", ")", "==", "len", "(", "estimators_list", ")", "\n", "\n", "\n", "", "RESULTS_FILE", "=", "'results.pkl'", "\n", "logger", ".", "configure", "(", "path_to_results", ",", "exp_prefix", ")", "\n", "\n", "results_from_pkl_file", "=", "dict", "(", "logger", ".", "load_pkl_log", "(", "RESULTS_FILE", ")", ")", "\n", "gof_result", "=", "GoodnessOfFitResults", "(", "single_results_dict", "=", "results_from_pkl_file", ")", "\n", "results_df", "=", "gof_result", ".", "generate_results_dataframe", "(", "base_experiment", ".", "KEYS_OF_INTEREST", ")", "\n", "\n", "\"\"\" load model's estimators \"\"\"", "\n", "if", "task_ids", "is", "None", ":", "\n", "\n", "    ", "models_of_interest", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "gof_result", ".", "single_results_dict", ".", "items", "(", ")", "if", "\n", "v", ".", "probabilistic_model_params", "==", "simulators_dict", "and", "v", ".", "ndim_x", "+", "v", ".", "ndim_y", "==", "2", "}", "\n", "\n", "models", "=", "[", "ConfigRunner", ".", "load_dumped_estimator", "(", "take_of_type", "(", "1", ",", "estimator_str", ",", "models_of_interest", ")", ")", "for", "estimator_str", "in", "estimators_list", "]", "\n", "", "else", ":", "\n", "    ", "models", "=", "[", "ConfigRunner", ".", "load_dumped_estimators", "(", "gof_result", ",", "task_id", "=", "task_ids", ")", "]", "\n", "\n", "", "\"\"\" load model's simulators \"\"\"", "\n", "# todo: implement when simulator dumps exist", "\n", "\n", "figs", "=", "[", "]", "\n", "\n", "for", "model", "in", "models", ":", "\n", "    ", "graph", "=", "model", ".", "estimator", ".", "sess", ".", "graph", "\n", "sess", "=", "tf", ".", "Session", "(", "graph", "=", "graph", ")", "\n", "\n", "with", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "model", ".", "estimator", ".", "sess", "=", "sess", "\n", "\"\"\" fitted density figures\"\"\"", "\n", "plt", ".", "suptitle", "(", "model", ".", "estimator", ".", "name", ")", "\n", "fig_fitted", "=", "model", ".", "estimator", ".", "plot3d", "(", ")", "\n", "figs", ".", "append", "(", "fig_fitted", ")", "\n", "\n", "\"\"\" true density figures \"\"\"", "\n", "# todo: use newly dumped simulators", "\n", "\n", "sess", ".", "close", "(", ")", "\n", "\n", "", "", "return", "figs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFit.GoodnessOfFit.__init__": [[29, 60], ["isinstance", "isinstance", "numpy.seterr", "numpy.random.seed", "hasattr", "str", "type", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "estimator", ",", "probabilistic_model", ",", "X", ",", "Y", ",", "n_observations", ",", "x_cond", ",", "n_mc_samples", ",", "seed", "=", "24", ",", "task_name", "=", "None", ",", "\n", "tail_measures", "=", "True", ")", ":", "\n", "\n", "    ", "assert", "isinstance", "(", "estimator", ",", "BaseDensityEstimator", ")", ",", "\"estimator must inherit BaseDensityEstimator class\"", "\n", "assert", "isinstance", "(", "probabilistic_model", ",", "BaseConditionalDensitySimulation", ")", ",", "\"probabilistic model must inherit from ConditionalDensity\"", "\n", "\n", "np", ".", "seterr", "(", "divide", "=", "'ignore'", ")", "\n", "\n", "self", ".", "probabilistic_model", "=", "probabilistic_model", "\n", "self", ".", "n_observations", "=", "n_observations", "\n", "self", ".", "x_cond", "=", "x_cond", "\n", "self", ".", "n_mc_samples", "=", "n_mc_samples", "\n", "\n", "self", ".", "proba_model_conditional_pdf", "=", "probabilistic_model", ".", "pdf", "\n", "self", ".", "proba_model_conditional_cdf", "=", "probabilistic_model", ".", "cdf", "\n", "\n", "self", ".", "seed", "=", "seed", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "self", ".", "X", "=", "X", "\n", "self", ".", "Y", "=", "Y", "\n", "self", ".", "n_observations", "=", "n_observations", "\n", "self", ".", "tail_measures", "=", "tail_measures", "\n", "\n", "self", ".", "estimator", "=", "estimator", "\n", "\n", "if", "task_name", "is", "not", "None", ":", "\n", "      ", "self", ".", "task_name", "=", "task_name", "\n", "", "elif", "hasattr", "(", "self", ".", "estimator", ",", "'name'", ")", ":", "\n", "      ", "self", ".", "task_name", "=", "str", "(", "self", ".", "estimator", ".", "name", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "task_name", "=", "type", "(", "self", ".", "estimator", ")", ".", "__name__", "+", "'_'", "+", "type", "(", "self", ".", "probabilistic_model", ")", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFit.GoodnessOfFit.fit_estimator": [[61, 88], ["time.time", "GoodnessOfFit.GoodnessOfFit.estimator.fit", "GoodnessOfFit.GoodnessOfFit.probabilistic_model.plot", "ml_logger.logger.log_pyplot", "matplotlib.close", "GoodnessOfFit.GoodnessOfFit.estimator.plot2d", "GoodnessOfFit.GoodnessOfFit.estimator.plot3d", "ml_logger.logger.log_pyplot", "ml_logger.logger.log_pyplot", "matplotlib.close", "matplotlib.close", "time.time"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.plot", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity.plot2d", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity.plot3d"], ["", "", "def", "fit_estimator", "(", "self", ",", "print_fit_result", "=", "True", ")", ":", "#todo set to False", "\n", "    ", "\"\"\"\n    Fits the estimator with the provided data\n\n    Args:\n      print_fit_result: boolean that specifies whether the fitted distribution shall be plotted (only works if ndim_x and ndim_y = 1)\n    \"\"\"", "\n", "\n", "self", ".", "time_to_fit", "=", "None", "\n", "if", "not", "self", ".", "estimator", ".", "fitted", ":", "# fit estimator if necessary", "\n", "      ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "self", ".", "X", ",", "self", ".", "Y", ",", "verbose", "=", "False", ")", "\n", "self", ".", "time_to_fit", "=", "(", "time", ".", "time", "(", ")", "-", "t_start", ")", "*", "self", ".", "n_observations", "/", "1000", "# time to fit per 1000 samples", "\n", "\n", "", "if", "print_fit_result", "and", "self", ".", "estimator", ".", "fitted", ":", "\n", "      ", "if", "self", ".", "probabilistic_model", ".", "ndim_x", "==", "1", "and", "self", ".", "probabilistic_model", ".", "ndim_y", "==", "1", ":", "\n", "        ", "plt3d_true", "=", "self", ".", "probabilistic_model", ".", "plot", "(", "mode", "=", "\"pdf\"", ",", "numpyfig", "=", "False", ")", "\n", "logger", ".", "log_pyplot", "(", "key", "=", "self", ".", "task_name", ",", "fig", "=", "plt3d_true", ")", "\n", "plt", ".", "close", "(", "plt3d_true", ")", "\n", "\n", "", "if", "self", ".", "estimator", ".", "ndim_x", "==", "1", "and", "self", ".", "estimator", ".", "ndim_y", "==", "1", ":", "\n", "        ", "plt2d", "=", "self", ".", "estimator", ".", "plot2d", "(", "show", "=", "False", ",", "numpyfig", "=", "False", ")", "\n", "plt3d", "=", "self", ".", "estimator", ".", "plot3d", "(", "show", "=", "False", ",", "numpyfig", "=", "False", ")", "\n", "logger", ".", "log_pyplot", "(", "key", "=", "self", ".", "task_name", "+", "\"_fitted_cond_distr_2d\"", ",", "fig", "=", "plt2d", ")", "\n", "logger", ".", "log_pyplot", "(", "key", "=", "self", ".", "task_name", "+", "\"_fitted_cond_distr_3d\"", ",", "fig", "=", "plt3d", ")", "\n", "plt", ".", "close", "(", "plt2d", ")", "\n", "plt", ".", "close", "(", "plt3d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFit.GoodnessOfFit.compute_results": [[89, 153], ["GoodnessOfFit.GoodnessOfFit.x_cond.all", "cde.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult", "cde.model_fitting.divergences.divergence_measures_pdf", "GoodnessOfFit.GoodnessOfFit.estimator.mean_", "GoodnessOfFit.GoodnessOfFit.estimator.std_", "GoodnessOfFit.GoodnessOfFit.probabilistic_model.mean_", "GoodnessOfFit.GoodnessOfFit.probabilistic_model.std_", "numpy.mean", "numpy.mean", "GoodnessOfFit.GoodnessOfFit.estimator.get_configuration", "GoodnessOfFit.GoodnessOfFit.probabilistic_model.get_configuration", "logging.warning", "str", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.abs", "numpy.abs", "GoodnessOfFit.GoodnessOfFit.estimator.tail_risk_measures", "GoodnessOfFit.GoodnessOfFit.probabilistic_model.tail_risk_measures", "numpy.mean", "numpy.mean", "GoodnessOfFit.GoodnessOfFit.x_cond.flatten", "str", "str", "str", "str", "numpy.abs", "numpy.abs", "cde.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.mean_est_.flatten", "cde.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.std_est_.flatten", "cde.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.mean_sim_.flatten", "cde.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.std_sim_.flatten", "str", "str", "str", "str", "cde.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.VaR_est_.flatten", "cde.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.CVaR_est_.flatten", "cde.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.VaR_sim_.flatten", "cde.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.CVaR_sim_.flatten"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences.divergence_measures_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.std_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.std_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.get_configuration", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.get_configuration", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.tail_risk_measures", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.tail_risk_measures"], ["", "", "", "def", "compute_results", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n      Computes statistics and stores the results in GoodnessOfFitResult object\n\n      Returns:\n        GoodnessOfFitResult object that holds the computed statistics\n    \"\"\"", "\n", "assert", "self", ".", "x_cond", ".", "all", "(", ")", "\n", "assert", "self", ".", "estimator", "is", "not", "None", "\n", "assert", "self", ".", "probabilistic_model", "is", "not", "None", "\n", "\n", "gof_result", "=", "GoodnessOfFitSingleResult", "(", "self", ".", "estimator", ".", "get_configuration", "(", ")", ",", "self", ".", "probabilistic_model", ".", "get_configuration", "(", ")", ",", "\n", "x_cond", "=", "self", ".", "x_cond", ")", "\n", "\n", "if", "self", ".", "n_mc_samples", "<", "10", "**", "5", ":", "\n", "      ", "logging", ".", "warning", "(", "\"using less than 10**5 samples for monte carlo not recommended\"", ")", "\n", "\n", "", "\"\"\" Evaluation stats \"\"\"", "\n", "gof_result", ".", "n_observations", "=", "[", "self", ".", "n_observations", "]", "\n", "gof_result", ".", "x_cond", "=", "[", "str", "(", "self", ".", "x_cond", ".", "flatten", "(", ")", ")", "]", "\n", "gof_result", ".", "x_cond_", "=", "self", ".", "x_cond", "# original data preserved", "\n", "gof_result", ".", "n_mc_samples", "=", "[", "self", ".", "n_mc_samples", "]", "\n", "\n", "\"\"\" Divergence measures \"\"\"", "\n", "gof_result", ".", "hellinger_distance_", ",", "gof_result", ".", "kl_divergence_", ",", "gof_result", ".", "js_divergence_", "=", "divergence_measures_pdf", "(", "self", ".", "probabilistic_model", ",", "self", ".", "estimator", ",", "x_cond", "=", "self", ".", "x_cond", ",", "n_samples", "=", "self", ".", "n_mc_samples", ")", "\n", "\n", "gof_result", ".", "hellinger_distance", "=", "[", "np", ".", "mean", "(", "gof_result", ".", "hellinger_distance_", ")", "]", "\n", "gof_result", ".", "kl_divergence", "=", "[", "np", ".", "mean", "(", "gof_result", ".", "kl_divergence_", ")", "]", "\n", "gof_result", ".", "js_divergence", "=", "[", "np", ".", "mean", "(", "gof_result", ".", "js_divergence_", ")", "]", "\n", "\n", "\"\"\" Mean and Std \"\"\"", "\n", "\"\"\" create strings since pandas requires lists to be all of the same length if numerical \"\"\"", "\n", "# estimator", "\n", "gof_result", ".", "mean_est_", "=", "self", ".", "estimator", ".", "mean_", "(", "self", ".", "x_cond", ",", "n_samples", "=", "self", ".", "n_mc_samples", ")", "# original data preserved", "\n", "gof_result", ".", "std_est_", "=", "self", ".", "estimator", ".", "std_", "(", "self", ".", "x_cond", ",", "n_samples", "=", "self", ".", "n_mc_samples", ")", "# original data preserved", "\n", "gof_result", ".", "mean_est", ",", "gof_result", ".", "std_est", "=", "[", "str", "(", "gof_result", ".", "mean_est_", ".", "flatten", "(", ")", ")", "]", ",", "[", "str", "(", "gof_result", ".", "std_est_", ".", "flatten", "(", ")", ")", "]", "\n", "\n", "# simulator", "\n", "gof_result", ".", "mean_sim_", "=", "self", ".", "probabilistic_model", ".", "mean_", "(", "self", ".", "x_cond", ",", "n_samples", "=", "self", ".", "n_mc_samples", ")", "# original data preserved", "\n", "gof_result", ".", "std_sim_", "=", "self", ".", "probabilistic_model", ".", "std_", "(", "self", ".", "x_cond", ",", "n_samples", "=", "self", ".", "n_mc_samples", ")", "# original data preserved", "\n", "gof_result", ".", "mean_sim", ",", "gof_result", ".", "std_sim", "=", "[", "str", "(", "gof_result", ".", "mean_sim_", ".", "flatten", "(", ")", ")", "]", ",", "[", "str", "(", "gof_result", ".", "std_sim_", ".", "flatten", "(", ")", ")", "]", "\n", "\n", "# absolute mean, std difference", "\n", "gof_result", ".", "mean_abs_diff", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "gof_result", ".", "mean_est_", "-", "gof_result", ".", "mean_sim_", ")", ")", "\n", "gof_result", ".", "std_abs_diff", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "gof_result", ".", "std_sim_", "-", "gof_result", ".", "std_sim_", ")", ")", "\n", "\n", "\"\"\" tail risk \"\"\"", "\n", "if", "self", ".", "estimator", ".", "ndim_y", "==", "1", "and", "self", ".", "tail_measures", ":", "\n", "# estimator", "\n", "      ", "gof_result", ".", "VaR_est_", ",", "gof_result", ".", "CVaR_est_", "=", "self", ".", "estimator", ".", "tail_risk_measures", "(", "self", ".", "x_cond", ",", "n_samples", "=", "self", ".", "n_mc_samples", ")", "\n", "gof_result", ".", "VaR_est", ",", "gof_result", ".", "CVaR_est", "=", "[", "str", "(", "gof_result", ".", "VaR_est_", ".", "flatten", "(", ")", ")", "]", ",", "[", "str", "(", "gof_result", ".", "CVaR_est_", ".", "flatten", "(", ")", ")", "]", "\n", "\n", "# simulator", "\n", "gof_result", ".", "VaR_sim_", ",", "gof_result", ".", "CVaR_sim_", "=", "self", ".", "probabilistic_model", ".", "tail_risk_measures", "(", "self", ".", "x_cond", ",", "n_samples", "=", "self", ".", "n_mc_samples", ")", "\n", "gof_result", ".", "VaR_sim", ",", "gof_result", ".", "CVaR_sim", "=", "[", "str", "(", "gof_result", ".", "VaR_sim_", ".", "flatten", "(", ")", ")", "]", ",", "[", "str", "(", "gof_result", ".", "CVaR_sim_", ".", "flatten", "(", ")", ")", "]", "\n", "\n", "gof_result", ".", "VaR_abs_diff", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "gof_result", ".", "VaR_sim_", "-", "gof_result", ".", "VaR_est_", ")", ")", "\n", "gof_result", ".", "CVaR_abs_diff", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "gof_result", ".", "CVaR_sim_", "-", "gof_result", ".", "CVaR_est_", ")", ")", "\n", "\n", "", "\"\"\" time to fit \"\"\"", "\n", "gof_result", ".", "time_to_fit", "=", "self", ".", "time_to_fit", "\n", "\n", "return", "gof_result", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFit.GoodnessOfFit.__str__": [[154, 157], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "str", "(", "\"{}\\n{}\\nGoodness of fit:\\n n_observations: {}\\n n_x_cond: {}\"", ".", "format", "(", "\n", "self", ".", "estimator", ",", "self", ".", "probabilistic_model", ",", "self", ".", "n_observations", ",", "self", ".", "x_cond", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFit.sample_x_cond": [[159, 188], ["numpy.random.RandomState", "range", "numpy.hstack", "numpy.expand_dims", "numpy.percentile", "numpy.percentile", "samples_per_dim.append", "np.random.RandomState.uniform"], "function", ["None"], ["", "", "def", "sample_x_cond", "(", "X", ",", "n_x_cond", "=", "20", ",", "low_percentile", "=", "10", ",", "high_percentile", "=", "90", ",", "random_seed", "=", "92", ")", ":", "\n", "  ", "\"\"\"\n  uniformly samples n_xcond points within the specified percentiles in X\n\n  Args:\n    X: data on which the percentiles shall be computed - ndarray with shape (n_samples, ndim_x)\n    n_x_cond: number of x_cond points to be sampled\n    low_percentile: lower percentile (int)\n    high_percentile: upper percentile (int)\n\n  Returns:\n    sampled x_cond points - ndarray of shape (n_xcond, ndim_x)\n  \"\"\"", "\n", "assert", "0", "<=", "low_percentile", "<", "high_percentile", "<=", "100", "\n", "rand", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "\n", "if", "X", ".", "ndim", "==", "1", ":", "\n", "    ", "X", "=", "np", ".", "expand_dims", "(", "X", ",", "axis", "=", "1", ")", "\n", "\n", "", "samples_per_dim", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "1", "]", ")", ":", "\n", "    ", "low", "=", "np", ".", "percentile", "(", "X", "[", ":", ",", "i", "]", ",", "low_percentile", ")", "\n", "high", "=", "np", ".", "percentile", "(", "X", "[", ":", ",", "i", "]", ",", "high_percentile", ")", "\n", "samples_per_dim", ".", "append", "(", "rand", ".", "uniform", "(", "low", ",", "high", ",", "size", "=", "(", "n_x_cond", ",", "1", ")", ")", ")", "\n", "\n", "", "x_cond", "=", "np", ".", "hstack", "(", "samples_per_dim", ")", "\n", "\n", "assert", "x_cond", ".", "shape", "[", "1", "]", "==", "X", ".", "shape", "[", "1", "]", "and", "x_cond", ".", "shape", "[", "0", "]", "==", "n_x_cond", "\n", "return", "x_cond", "\n", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.__init__": [[5, 32], ["len"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "estimator_params", ",", "probabilistic_model_params", ",", "x_cond", "=", "None", ")", ":", "\n", "    ", "self", ".", "cond_values", "=", "x_cond", "\n", "\n", "self", ".", "time_to_fit", "=", "None", "\n", "self", ".", "time_to_predict", "=", "None", "\n", "\n", "self", ".", "ndim_x", "=", "estimator_params", "[", "\"ndim_x\"", "]", "\n", "self", ".", "ndim_y", "=", "estimator_params", "[", "\"ndim_y\"", "]", "\n", "\n", "# remove built in functions so that GoodnessOfFitSingleResult remains pickable", "\n", "if", "'X_ph'", "in", "estimator_params", ":", "\n", "      ", "del", "estimator_params", "[", "'X_ph'", "]", "\n", "\n", "", "self", ".", "estimator_params", "=", "estimator_params", "\n", "self", ".", "probabilistic_model_params", "=", "probabilistic_model_params", "\n", "\n", "self", ".", "kl_divergence", "=", "None", "\n", "self", ".", "hellinger_distance", "=", "None", "\n", "self", ".", "wasserstein_distance", "=", "None", "\n", "self", ".", "js_divergence", "=", "None", "\n", "\n", "self", ".", "n_observations", "=", "None", "\n", "\n", "self", ".", "x_cond", "=", "x_cond", "\n", "self", ".", "n_x_cond", "=", "len", "(", "x_cond", ")", "if", "x_cond", "is", "not", "None", "else", "None", "\n", "self", ".", "result_df", "=", "None", "\n", "self", ".", "random_seed", "=", "probabilistic_model_params", "[", "'random_seed'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.report_dict": [[34, 56], ["collections.OrderedDict", "callable", "str", "str", "isinstance", "isinstance", "len"], "methods", ["None"], ["", "def", "report_dict", "(", "self", ",", "keys_of_interest", "=", "None", ")", ":", "\n", "    ", "full_dict", "=", "self", ".", "__dict__", "\n", "\n", "if", "keys_of_interest", "is", "not", "None", ":", "\n", "      ", "report_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "keys_of_interest", ":", "\n", "        ", "if", "key", "in", "full_dict", ":", "\n", "          ", "value", "=", "full_dict", "[", "key", "]", "\n", "", "elif", "key", "in", "self", ".", "estimator_params", ":", "\n", "          ", "value", "=", "self", ".", "estimator_params", "[", "key", "]", "\n", "", "elif", "key", "in", "self", ".", "probabilistic_model_params", ":", "\n", "          ", "value", "=", "self", ".", "probabilistic_model_params", "[", "key", "]", "\n", "", "else", ":", "\n", "           ", "value", "=", "None", "\n", "", "if", "(", "isinstance", "(", "value", ",", "list", ")", "or", "isinstance", "(", "value", ",", "tuple", ")", ")", "and", "len", "(", "value", ")", ">", "1", ":", "\n", "          ", "value", "=", "str", "(", "value", ")", "\n", "", "if", "callable", "(", "value", ")", ":", "\n", "          ", "value", "=", "str", "(", "value", ")", "\n", "", "report_dict", "[", "key", "]", "=", "value", "\n", "", "return", "report_dict", "\n", "", "else", ":", "\n", "      ", "return", "full_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.__len__": [[57, 59], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.__str__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "\"KL divergence: %.4f, Hellinger distance: %.4f, Jason-Shannon divergence: %.4f\"", "%", "(", "self", ".", "kl_divergence", ",", "self", ".", "hellinger_distance", ",", "self", ".", "js_divergence", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.ConfigRunner.__init__": [[66, 106], ["observations.all", "ConfigRunner._add_seeds_to_sim_params", "ml_logger.logger.configure", "os.path.join", "os.path.isfile", "os.path.join", "os.path.isfile", "cde.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults", "ml_logger.logger.log", "ml_logger.logger.load_pkl", "ml_logger.logger.log", "ConfigRunner.ConfigRunner._generate_configuration_variants", "ml_logger.logger.dump_pkl", "ml_logger.logger.log_line", "dict", "ml_logger.logger.load_pkl_log"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._add_seeds_to_sim_params", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb._generate_configuration_variants"], ["def", "__init__", "(", "self", ",", "exp_prefix", ",", "est_params", ",", "sim_params", ",", "observations", ",", "keys_of_interest", ",", "n_mc_samples", "=", "10", "**", "7", ",", "\n", "n_x_cond", "=", "5", ",", "n_seeds", "=", "5", ",", "use_gpu", "=", "True", ",", "tail_measures", "=", "True", ")", ":", "\n", "\n", "    ", "assert", "est_params", "and", "exp_prefix", "and", "sim_params", "and", "keys_of_interest", "\n", "assert", "observations", ".", "all", "(", ")", "\n", "\n", "# every simulator configuration will be run multiple times with different randomness seeds", "\n", "sim_params", "=", "_add_seeds_to_sim_params", "(", "n_seeds", ",", "sim_params", ")", "\n", "\n", "self", ".", "observations", "=", "observations", "\n", "self", ".", "n_mc_samples", "=", "n_mc_samples", "\n", "self", ".", "n_x_cond", "=", "n_x_cond", "\n", "self", ".", "keys_of_interest", "=", "keys_of_interest", "\n", "self", ".", "exp_prefix", "=", "exp_prefix", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "tail_measures", "=", "tail_measures", "\n", "\n", "logger", ".", "configure", "(", "log_directory", "=", "config", ".", "DATA_DIR", ",", "prefix", "=", "exp_prefix", ",", "color", "=", "'green'", ")", "\n", "\n", "''' ---------- Either load or generate the configs ----------'''", "\n", "config_pkl_path", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "log_directory", ",", "logger", ".", "prefix", ",", "EXP_CONFIG_FILE", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "config_pkl_path", ")", ":", "\n", "      ", "logger", ".", "log", "(", "\"{:<70s} {:<30s}\"", ".", "format", "(", "\"Loading experiment previous configs from file: \"", ",", "config_pkl_path", ")", ")", "\n", "self", ".", "configs", "=", "logger", ".", "load_pkl", "(", "EXP_CONFIG_FILE", ")", "\n", "", "else", ":", "\n", "      ", "logger", ".", "log", "(", "\"{:<70s} {:<30s}\"", ".", "format", "(", "\"Generating and storing experiment configs under: \"", ",", "config_pkl_path", ")", ")", "\n", "self", ".", "configs", "=", "self", ".", "_generate_configuration_variants", "(", "est_params", ",", "sim_params", ")", "\n", "logger", ".", "dump_pkl", "(", "data", "=", "self", ".", "configs", ",", "path", "=", "EXP_CONFIG_FILE", ")", "\n", "\n", "", "''' ---------- Either load already existing results or start a new result collection ---------- '''", "\n", "results_pkl_path", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "log_directory", ",", "logger", ".", "prefix", ",", "RESULTS_FILE", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "results_pkl_path", ")", ":", "\n", "      ", "logger", ".", "log_line", "(", "\"{:<70s} {:<30s}\"", ".", "format", "(", "\"Continue with: \"", ",", "results_pkl_path", ")", ")", "\n", "self", ".", "gof_single_res_collection", "=", "dict", "(", "logger", ".", "load_pkl_log", "(", "RESULTS_FILE", ")", ")", "\n", "\n", "", "else", ":", "# start from scratch", "\n", "      ", "self", ".", "gof_single_res_collection", "=", "{", "}", "\n", "\n", "", "self", ".", "gof_results", "=", "GoodnessOfFitResults", "(", "self", ".", "gof_single_res_collection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.ConfigRunner._generate_configuration_variants": [[108, 163], ["ConfigRunner._create_configurations", "ConfigRunner._create_configurations", "numpy.isscalar", "ConfigRunner.ConfigRunner.sim_configs.items", "ConfigRunner.ConfigRunner.est_configs.items", "max", "sim.simulate", "sim._handle_input_dimensionality", "cde.model_fitting.GoodnessOfFit.sample_x_cond", "configured_sims.append", "copy.deepcopy", "configs.append", "globals", "dict"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._create_configurations", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._create_configurations", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFit.sample_x_cond"], ["", "def", "_generate_configuration_variants", "(", "self", ",", "est_params", ",", "sim_params", ")", ":", "\n", "    ", "\"\"\"\n    Creates all possible combinations from the (configured) estimators and simulators.\n    Requires configured estimators and simulators in the constructor:\n\n    Args:\n        est_params: estimator parameters as dict with 2 levels\n        sim_params: density simulator parameters as dict with 2 levels\n\n    Returns:\n        if n_observations is not a list, a list containing n*m=k tuples while k being the number of the cartesian product of estimators and simulators is\n        returned --> shape of tuples: (estimator object, simulator object)\n        if n_observations is a list, n*m*o=k while o is the number of elements in n_observatons list\n    \"\"\"", "\n", "\n", "self", ".", "est_configs", "=", "_create_configurations", "(", "est_params", ")", "\n", "self", ".", "sim_configs", "=", "_create_configurations", "(", "sim_params", ")", "\n", "\n", "if", "np", ".", "isscalar", "(", "self", ".", "observations", ")", ":", "\n", "      ", "self", ".", "observations", "=", "[", "self", ".", "observations", "]", "\n", "\n", "", "configs", "=", "[", "]", "\n", "configured_sims", "=", "[", "]", "\n", "\n", "\"\"\" since simulator configurations of the same kind require the same X,Y and x_cond, \n    they have to be generated separately from the estimators\"\"\"", "\n", "for", "simulator_name", ",", "sim_params", "in", "self", ".", "sim_configs", ".", "items", "(", ")", ":", "\n", "      ", "for", "config", "in", "sim_params", ":", "\n", "        ", "sim", "=", "globals", "(", ")", "[", "simulator_name", "]", "(", "**", "config", ")", "\n", "\n", "n_obs_max", "=", "max", "(", "self", ".", "observations", ")", "\n", "X_max", ",", "Y_max", "=", "sim", ".", "simulate", "(", "n_obs_max", ")", "\n", "X_max", ",", "Y_max", "=", "sim", ".", "_handle_input_dimensionality", "(", "X_max", ",", "Y_max", ")", "\n", "\n", "for", "obs", "in", "self", ".", "observations", ":", "\n", "          ", "X", ",", "Y", "=", "X_max", "[", ":", "obs", "]", ",", "Y_max", "[", ":", "obs", "]", "\n", "x_cond", "=", "sample_x_cond", "(", "X", "=", "X_max", ",", "n_x_cond", "=", "self", ".", "n_x_cond", ")", "\n", "configured_sims", ".", "append", "(", "dict", "(", "{", "\"simulator_name\"", ":", "simulator_name", ",", "'simulator_config'", ":", "config", ",", "\"n_obs\"", ":", "obs", ",", "\"X\"", ":", "X", ",", "\"Y\"", ":", "Y", ",", "\"x_cond\"", ":", "x_cond", "}", ")", ")", "\n", "\n", "# merge simulator variants together with estimator variants", "\n", "", "", "", "task_number", "=", "0", "\n", "for", "sim_dict", "in", "configured_sims", ":", "\n", "      ", "for", "estimator_name", ",", "estimator_params", "in", "self", ".", "est_configs", ".", "items", "(", ")", ":", "\n", "        ", "for", "config", "in", "estimator_params", ":", "\n", "          ", "simulator_dict", "=", "copy", ".", "deepcopy", "(", "sim_dict", ")", "\n", "\n", "simulator_dict", "[", "'estimator_name'", "]", "=", "estimator_name", "\n", "simulator_dict", "[", "'estimator_config'", "]", "=", "config", "\n", "simulator_dict", "[", "'task_name'", "]", "=", "'%s_task_%i'", "%", "(", "estimator_name", ",", "task_number", ")", "\n", "\n", "simulator_dict", "[", "\"n_mc_samples\"", "]", "=", "self", ".", "n_mc_samples", "\n", "configs", ".", "append", "(", "simulator_dict", ")", "\n", "task_number", "+=", "1", "\n", "\n", "", "", "", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.ConfigRunner.run_configurations": [[164, 217], ["ConfigRunner.ConfigRunner._apply_filters", "ml_logger.logger.log", "ml_logger.logger.log", "range", "len", "ml_logger.logger.log", "len", "cde.utils.async_executor.AsyncExecutor", "cde.utils.async_executor.AsyncExecutor.run", "zip", "str", "str", "ConfigRunner.ConfigRunner._run_single_task", "len", "len"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.ConfigRunner._apply_filters", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb._run_single_task"], ["", "def", "run_configurations", "(", "self", ",", "estimator_filter", "=", "None", ",", "\n", "limit", "=", "None", ",", "dump_models", "=", "False", ",", "multiprocessing", "=", "True", ",", "n_workers", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Runs the given configurations, i.e.\n    1) fits the estimator to the simulation and\n    2) executes goodness-of-fit (currently: e.g. kl-divergence, wasserstein-distance etc.) tests\n    Every successful run yields a result object of type GoodnessOfFitResult which contains\n    information on both estimator, simulator and chosen hyperparameters\n\n    such as n_samples, see GoodnessOfFitResult documentation for more information.\n\n      Args:\n        estimator_filter: a parameter to decide whether to execute just a specific type of estimator, e.g. \"KernelMixtureNetwork\",\n                          must be one of the density estimator class types\n        limit: limit the number of (potentially filtered) tasks\n        dump_models: (boolean) whether to save/dump the fitted estimators\n\n      Returns:\n         returns two objects: (result_list, full_df)\n          1) a GoodnessOfFitResults object containing all configurations as GoodnessOfFitSingleResult objects, carrying information about the\n          estimator and simulator hyperparameters as well as n_obs, n_x_cond, n_mc_samples and the statistic results.\n          2) a full pandas dataframe of the csv\n          Additionally, if export_pickle is True, the path to the pickle file will be returned, i.e. return values are (results_list, full_df, path_to_pickle)\n\n    \"\"\"", "\n", "self", ".", "dump_models", "=", "dump_models", "\n", "''' Asserts, Setup and applying Filters/Limits  '''", "\n", "assert", "len", "(", "self", ".", "configs", ")", ">", "0", "\n", "self", ".", "_apply_filters", "(", "estimator_filter", ")", "\n", "\n", "if", "limit", "is", "not", "None", ":", "\n", "      ", "assert", "limit", ">", "0", ",", "\"limit must not be negative\"", "\n", "logger", ".", "log", "(", "\"Limit enabled. Running only the first {} configurations\"", ".", "format", "(", "limit", ")", ")", "\n", "tasks", "=", "self", ".", "configs", "[", ":", "limit", "]", "\n", "", "else", ":", "\n", "      ", "tasks", "=", "self", ".", "configs", "\n", "\n", "", "''' Run the configurations '''", "\n", "\n", "logger", ".", "log", "(", "\"{:<70s} {:<30s}\"", ".", "format", "(", "\"Number of total tasks in pipeline:\"", ",", "str", "(", "len", "(", "self", ".", "configs", ")", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"{:<70s} {:<30s}\"", ".", "format", "(", "\"Number of aleady finished tasks (found in results pickle): \"", ",", "\n", "str", "(", "len", "(", "self", ".", "gof_single_res_collection", ")", ")", ")", ")", "\n", "\n", "\n", "iters", "=", "range", "(", "len", "(", "tasks", ")", ")", "\n", "\n", "if", "multiprocessing", ":", "\n", "      ", "executor", "=", "AsyncExecutor", "(", "n_jobs", "=", "n_workers", ")", "\n", "executor", ".", "run", "(", "self", ".", "_run_single_task", ",", "iters", ",", "tasks", ")", "\n", "\n", "", "else", ":", "\n", "      ", "for", "i", ",", "task", "in", "zip", "(", "iters", ",", "tasks", ")", ":", "\n", "        ", "self", ".", "_run_single_task", "(", "i", ",", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.ConfigRunner._run_single_task": [[219, 290], ["time.time", "ConfigRunner._hash_task_dict", "ConfigRunner.ConfigRunner.gof_single_res_collection.keys", "ml_logger.logger.log", "ml_logger.logger.log", "tensorflow.reset_default_graph", "time.time", "ml_logger.logger.log_pkl", "ml_logger.logger.flush", "ml_logger.logger.log", "ml_logger.logger.log", "ml_logger.logger.log", "traceback.print_exc", "time.time", "tensorflow.Session", "sess.run", "cde.model_fitting.GoodnessOfFit.GoodnessOfFit", "time.time", "cde.model_fitting.GoodnessOfFit.GoodnessOfFit.fit_estimator", "time.time", "cde.model_fitting.GoodnessOfFit.GoodnessOfFit.compute_results", "time.time", "str", "str", "globals", "globals", "tensorflow.global_variables_initializer", "time.time", "ml_logger.logger.dump_pkl", "ml_logger.logger.dump_pkl", "time.time"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._hash_task_dict", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitLogProb.GoodnessOfFitLogProb.fit_estimator", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitLogProb.GoodnessOfFitLogProb.compute_results"], ["", "", "", "def", "_run_single_task", "(", "self", ",", "i", ",", "task", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "      ", "task_hash", "=", "_hash_task_dict", "(", "task", ")", "# generate SHA256 hash of task dict as identifier", "\n", "\n", "# skip task if it has already been completed", "\n", "if", "task_hash", "in", "self", ".", "gof_single_res_collection", ".", "keys", "(", ")", ":", "\n", "        ", "logger", ".", "log", "(", "\"Task {:<1} {:<63} {:<10} {:<1} {:<1} {:<1}\"", ".", "format", "(", "i", "+", "1", ",", "\"has already been completed:\"", ",", "\"Estimator:\"", ",", "\n", "task", "[", "'estimator_name'", "]", ",", "\n", "\" Simulator: \"", ",", "task", "[", "\"simulator_name\"", "]", ")", ")", "\n", "return", "None", "\n", "\n", "# run task when it has not been completed", "\n", "", "else", ":", "\n", "        ", "logger", ".", "log", "(", "\n", "\"Task {:<1} {:<63} {:<10} {:<1} {:<1} {:<1}\"", ".", "format", "(", "i", "+", "1", ",", "\"running:\"", ",", "\"Estimator:\"", ",", "task", "[", "'estimator_name'", "]", ",", "\n", "\" Simulator: \"", ",", "task", "[", "\"simulator_name\"", "]", ")", ")", "\n", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n", "''' build simulator and estimator model given the specified configurations '''", "\n", "\n", "simulator", "=", "globals", "(", ")", "[", "task", "[", "'simulator_name'", "]", "]", "(", "**", "task", "[", "'simulator_config'", "]", ")", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "estimator", "=", "globals", "(", ")", "[", "task", "[", "'estimator_name'", "]", "]", "(", "task", "[", "'task_name'", "]", ",", "simulator", ".", "ndim_x", ",", "\n", "simulator", ".", "ndim_y", ",", "**", "task", "[", "'estimator_config'", "]", ")", "\n", "time_to_initialize", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "\n", "# if desired hide gpu devices", "\n", "if", "not", "self", ".", "use_gpu", ":", "\n", "          ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "\"-1\"", "\n", "\n", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "          ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "''' train the model '''", "\n", "gof", "=", "GoodnessOfFit", "(", "estimator", "=", "estimator", ",", "probabilistic_model", "=", "simulator", ",", "X", "=", "task", "[", "'X'", "]", ",", "Y", "=", "task", "[", "'Y'", "]", ",", "\n", "n_observations", "=", "task", "[", "'n_obs'", "]", ",", "n_mc_samples", "=", "task", "[", "'n_mc_samples'", "]", ",", "x_cond", "=", "task", "[", "'x_cond'", "]", ",", "\n", "task_name", "=", "task", "[", "'task_name'", "]", ",", "tail_measures", "=", "self", ".", "tail_measures", ")", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "gof", ".", "fit_estimator", "(", "print_fit_result", "=", "True", ")", "\n", "time_to_fit", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "\n", "if", "self", ".", "dump_models", ":", "\n", "            ", "logger", ".", "dump_pkl", "(", "data", "=", "gof", ".", "estimator", ",", "path", "=", "\"model_dumps/{}.pkl\"", ".", "format", "(", "task", "[", "'task_name'", "]", ")", ")", "\n", "logger", ".", "dump_pkl", "(", "data", "=", "gof", ".", "probabilistic_model", ",", "path", "=", "\"model_dumps/{}.pkl\"", ".", "format", "(", "task", "[", "'task_name'", "]", "+", "\"_simulator\"", ")", ")", "\n", "\n", "", "''' perform tests with the fitted model '''", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "gof_results", "=", "gof", ".", "compute_results", "(", ")", "\n", "time_to_evaluate", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "\n", "gof_results", ".", "task_name", "=", "task", "[", "'task_name'", "]", "\n", "\n", "gof_results", ".", "hash", "=", "task_hash", "\n", "\n", "", "logger", ".", "log_pkl", "(", "data", "=", "(", "task_hash", ",", "gof_results", ")", ",", "path", "=", "RESULTS_FILE", ")", "\n", "logger", ".", "flush", "(", "file_name", "=", "RESULTS_FILE", ")", "\n", "del", "gof_results", "\n", "\n", "task_duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logger", ".", "log", "(", "\n", "\"Finished task {:<1} in {:<1.4f} {:<43} {:<10} {:<1} {:<1} {:<2} | {:<1} {:<1.2f} {:<1} {:<1.2f} {:<1} {:<1.2f}\"", ".", "format", "(", "i", "+", "1", ",", "task_duration", ",", "\"sec:\"", ",", "\n", "\"Estimator:\"", ",", "task", "[", "'estimator_name'", "]", ",", "\" Simulator: \"", ",", "task", "[", "\"simulator_name\"", "]", ",", "\"t_init:\"", ",", "time_to_initialize", ",", "\"t_fit:\"", ",", "time_to_fit", ",", "\"t_eval:\"", ",", "time_to_evaluate", ")", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "      ", "logger", ".", "log", "(", "\"error in task: \"", ",", "str", "(", "i", "+", "1", ")", ")", "\n", "logger", ".", "log", "(", "str", "(", "e", ")", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.ConfigRunner._dump_current_state": [[291, 298], ["open", "cde.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults", "cde.utils.io.dump_as_pickle"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.dump_as_pickle"], ["", "", "def", "_dump_current_state", "(", "self", ")", ":", "\n", "#if self.export_csv:", "\n", "#  self._export_results(task=task, gof_result=gof_single_result, file_handle_results=self.file_handle_results_csv)", "\n", "#if self.export_pickle:", "\n", "    ", "with", "open", "(", "self", ".", "results_pickle_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "      ", "intermediate_gof_results", "=", "GoodnessOfFitResults", "(", "single_results_dict", "=", "self", ".", "gof_single_res_collection", ")", "\n", "io", ".", "dump_as_pickle", "(", "f", ",", "intermediate_gof_results", ",", "verbose", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.ConfigRunner._get_results_dataframe": [[300, 314], ["len", "results.report_dict", "pandas.DataFrame.from_dict"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.report_dict"], ["", "", "def", "_get_results_dataframe", "(", "self", ",", "results", ")", ":", "\n", "    ", "\"\"\" retrieves the dataframe for one or more GoodnessOfFitResults result objects.\n\n      Args:\n          results: a list or single object of type GoodnessOfFitResults\n      Returns:\n         a pandas dataframe\n    \"\"\"", "\n", "n_results", "=", "len", "(", "results", ")", "\n", "assert", "n_results", ">", "0", ",", "\"no results given\"", "\n", "\n", "results_dict", "=", "results", ".", "report_dict", "(", "keys_of_interest", "=", "self", ".", "keys_of_interest", ")", "\n", "\n", "return", "pd", ".", "DataFrame", ".", "from_dict", "(", "data", "=", "results_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.ConfigRunner._export_results": [[315, 327], ["len", "ConfigRunner.ConfigRunner._get_results_dataframe", "cde.utils.io.append_result_to_csv", "print", "print", "traceback.print_exc", "str"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb._get_results_dataframe", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.append_result_to_csv"], ["", "def", "_export_results", "(", "self", ",", "task", ",", "gof_result", ",", "file_handle_results", ")", ":", "\n", "    ", "assert", "len", "(", "gof_result", ")", ">", "0", ",", "\"no results given\"", "\n", "\n", "\"\"\" write result to file\"\"\"", "\n", "try", ":", "\n", "      ", "gof_result_df", "=", "self", ".", "_get_results_dataframe", "(", "results", "=", "gof_result", ")", "\n", "gof_result", ".", "result_df", "=", "gof_result_df", "\n", "io", ".", "append_result_to_csv", "(", "file_handle_results", ",", "gof_result_df", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "      ", "print", "(", "\"appending to file was not successful for task: \"", ",", "task", ")", "\n", "print", "(", "str", "(", "e", ")", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.ConfigRunner._apply_filters": [[328, 336], ["len", "print"], "methods", ["None"], ["", "", "def", "_apply_filters", "(", "self", ",", "estimator_filter", ")", ":", "\n", "\n", "    ", "if", "estimator_filter", "is", "not", "None", ":", "\n", "      ", "self", ".", "configs", "=", "[", "tupl", "for", "tupl", "in", "self", ".", "configs", "if", "estimator_filter", "in", "tupl", "[", "\"estimator\"", "]", ".", "__class__", ".", "__name__", "]", "\n", "\n", "", "if", "len", "(", "self", ".", "configs", ")", "==", "0", ":", "\n", "      ", "print", "(", "\"no tasks to execute after filtering for the estimator\"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.ConfigRunner._setup_file_names": [[337, 358], ["open", "os.path.join", "cde.utils.io.get_full_path", "ConfigRunner.ConfigRunner.results_pickle_file.replace", "cde.utils.io.get_full_path", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.get_full_path", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.get_full_path"], ["", "", "def", "_setup_file_names", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "prefix_filename", "is", "not", "None", ":", "\n", "      ", "self", ".", "result_file_name", "=", "self", ".", "prefix_filename", "+", "\"_\"", "+", "self", ".", "result_file_name", "+", "\"_\"", "\n", "\n", "", "if", "self", ".", "export_pickle", ":", "\n", "      ", "if", "self", ".", "results_pickle_file", ":", "# continue with old file", "\n", "        ", "self", ".", "results_pickle_path", "=", "self", ".", "results_pickle_file", "\n", "", "else", ":", "# new file name", "\n", "        ", "self", ".", "results_pickle_path", "=", "io", ".", "get_full_path", "(", "output_dir", "=", "self", ".", "output_dir", ",", "suffix", "=", "\".pickle\"", ",", "file_name", "=", "self", ".", "result_file_name", ")", "\n", "\n", "", "", "if", "self", ".", "export_csv", ":", "\n", "      ", "if", "self", ".", "results_pickle_file", ":", "\n", "        ", "self", ".", "results_csv_path", "=", "self", ".", "results_pickle_file", ".", "replace", "(", "\"pickle\"", ",", "\"csv\"", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "results_csv_path", "=", "io", ".", "get_full_path", "(", "output_dir", "=", "self", ".", "output_dir", ",", "suffix", "=", "\".csv\"", ",", "file_name", "=", "self", ".", "result_file_name", ")", "\n", "", "self", ".", "file_handle_results_csv", "=", "open", "(", "self", ".", "results_csv_path", ",", "\"a+\"", ")", "\n", "\n", "", "if", "self", ".", "dump_models", ":", "\n", "      ", "self", ".", "model_dump_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'model_dumps'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "model_dump_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "self", ".", "model_dump_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._add_seeds_to_sim_params": [[361, 366], ["range"], "function", ["None"], ["", "", "", "", "def", "_add_seeds_to_sim_params", "(", "n_seeds", ",", "sim_params", ")", ":", "\n", "  ", "seeds", "=", "[", "20", "+", "i", "for", "i", "in", "range", "(", "n_seeds", ")", "]", "\n", "for", "sim_name", ",", "sim_param_dict", "in", "sim_params", ":", "\n", "    ", "sim_param_dict", "[", "'random_seed'", "]", "=", "seeds", "\n", "", "return", "sim_params", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._create_configurations": [[368, 379], ["list", "print", "itertools.product", "dict", "confs.keys", "confs[].extend", "zip", "list", "conf_dict.keys", "conf_dict.values"], "function", ["None"], ["", "def", "_create_configurations", "(", "params_tuples", ",", "verbose", "=", "False", ")", ":", "\n", "  ", "confs", "=", "{", "}", "\n", "for", "conf_instance", ",", "conf_dict", "in", "params_tuples", ":", "\n", "    ", "if", "verbose", ":", "print", "(", "conf_instance", ")", "\n", "conf_product", "=", "list", "(", "itertools", ".", "product", "(", "*", "list", "(", "conf_dict", ".", "values", "(", ")", ")", ")", ")", "\n", "conf_product_dicts", "=", "[", "(", "dict", "(", "zip", "(", "conf_dict", ".", "keys", "(", ")", ",", "conf", ")", ")", ")", "for", "conf", "in", "conf_product", "]", "\n", "if", "conf_instance", "in", "confs", ".", "keys", "(", ")", ":", "\n", "      ", "confs", "[", "conf_instance", "]", ".", "extend", "(", "conf_product_dicts", ")", "\n", "", "else", ":", "\n", "      ", "confs", "[", "conf_instance", "]", "=", "conf_product_dicts", "\n", "", "", "return", "confs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._hash_task_dict": [[381, 387], ["copy.deepcopy", "ConfigRunner._make_hashable", "ConfigRunner.make_hash_sha256", "set", "copy.deepcopy.keys"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._make_hashable", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.make_hash_sha256"], ["", "def", "_hash_task_dict", "(", "task_dict", ")", ":", "\n", "  ", "assert", "{", "'simulator_name'", ",", "'simulator_config'", ",", "'estimator_name'", ",", "'estimator_config'", "}", "<", "set", "(", "task_dict", ".", "keys", "(", ")", ")", "\n", "task_dict", "=", "copy", ".", "deepcopy", "(", "task_dict", ")", "\n", "\n", "tpls", "=", "_make_hashable", "(", "task_dict", ")", "\n", "return", "make_hash_sha256", "(", "tpls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._make_hashable": [[388, 397], ["isinstance", "isinstance", "isinstance", "tuple", "tuple", "tuple", "sorted", "sorted", "ConfigRunner._make_hashable", "ConfigRunner._make_hashable", "ConfigRunner._make_hashable", "o.items"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._make_hashable", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._make_hashable", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._make_hashable"], ["", "def", "_make_hashable", "(", "o", ")", ":", "\n", "    ", "if", "isinstance", "(", "o", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "return", "tuple", "(", "(", "_make_hashable", "(", "e", ")", "for", "e", "in", "o", ")", ")", "\n", "", "if", "isinstance", "(", "o", ",", "dict", ")", ":", "\n", "        ", "return", "tuple", "(", "sorted", "(", "(", "k", ",", "_make_hashable", "(", "v", ")", ")", "for", "k", ",", "v", "in", "o", ".", "items", "(", ")", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "o", ",", "(", "set", ",", "frozenset", ")", ")", ":", "\n", "        ", "return", "tuple", "(", "sorted", "(", "_make_hashable", "(", "e", ")", "for", "e", "in", "o", ")", ")", "\n", "", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.make_hash_sha256": [[398, 402], ["hashlib.sha256", "hashlib.sha256.update", "base64.b64encode().decode", "repr().encode", "base64.b64encode", "repr", "hashlib.sha256.digest", "ConfigRunner._make_hashable"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._make_hashable"], ["", "def", "make_hash_sha256", "(", "o", ")", ":", "\n", "    ", "hasher", "=", "hashlib", ".", "sha256", "(", ")", "\n", "hasher", ".", "update", "(", "repr", "(", "_make_hashable", "(", "o", ")", ")", ".", "encode", "(", ")", ")", "\n", "return", "base64", ".", "b64encode", "(", "hasher", ".", "digest", "(", ")", ")", ".", "decode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.load_dumped_estimators": [[405, 438], ["numpy.isscalar", "isinstance", "numpy.isscalar", "list", "gof_result.single_results_dict.items", "tensorflow.Session", "ConfigRunner.load_dumped_estimator", "gof_result.single_results_dict.items", "str", "tensorflow.Graph", "singl_res.task_name.rsplit"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.load_dumped_estimator"], ["", "def", "load_dumped_estimators", "(", "gof_result", ",", "task_id", "=", "None", ")", ":", "\n", "  ", "\"\"\"\n  Loads the estimators that have been dumped during the configuration runs into a GoodnessOfFitResults object at the corresponding single\n  result entry. Assumes an ml-logger instance has been set-up and configured correctly.\n    Args:\n        gof_result: a GoodnessOfFitResults object containing single result entries.\n        task_id: can either be None in which case all estimators are loaded, a list or a scalar value that indicates the task number for\n        which the estimator is/are loaded.\n\n      Returns:\n         returns the modified gof_result including the loaded estimators\n  \"\"\"", "\n", "assert", "logger", "\n", "assert", "task_id", "is", "None", "or", "isinstance", "(", "task_id", ",", "list", ")", "or", "np", ".", "isscalar", "(", "task_id", ")", "\n", "\n", "\n", "if", "np", ".", "isscalar", "(", "task_id", ")", ":", "\n", "    ", "task_id", "=", "[", "task_id", "]", "\n", "\n", "", "if", "task_id", "is", "not", "None", ":", "\n", "    ", "\"\"\" assumes that task_names end with a number separated by '_', e.g. MixtureDensityNetwork_task_128 \"\"\"", "\n", "results_to_use", "=", "[", "(", "key", ",", "singl_res", ")", "for", "task", "in", "task_id", "for", "key", ",", "singl_res", "in", "gof_result", ".", "single_results_dict", ".", "items", "(", ")", "\n", "if", "singl_res", ".", "task_name", ".", "rsplit", "(", "'_'", ",", "1", ")", "[", "1", "]", "==", "str", "(", "task", ")", "]", "\n", "", "else", ":", "\n", "    ", "results_to_use", "=", "list", "(", "gof_result", ".", "single_results_dict", ".", "items", "(", ")", ")", "\n", "\n", "\n", "", "for", "key", ",", "single_result", "in", "results_to_use", ":", "\n", "    ", "with", "tf", ".", "Session", "(", "graph", "=", "tf", ".", "Graph", "(", ")", ")", ":", "\n", "      ", "single_result", ".", "estimator", "=", "load_dumped_estimator", "(", "single_result", ")", "\n", "gof_result", ".", "single_results_dict", "[", "key", "]", "=", "single_result", "\n", "\n", "", "", "return", "gof_result", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner.load_dumped_estimator": [[440, 450], ["len", "tensorflow.Session", "ml_logger.logger.load_pkl", "print", "type", "len", "list", "dict_entry.values", "tensorflow.Graph"], "function", ["None"], ["", "def", "load_dumped_estimator", "(", "dict_entry", ")", ":", "\n", "  ", "assert", "len", "(", "dict_entry", ")", "==", "1", "\n", "if", "type", "(", "dict_entry", ")", "==", "dict", "and", "len", "(", "dict_entry", ")", "==", "1", ":", "\n", "    ", "dict_entry", "=", "list", "(", "dict_entry", ".", "values", "(", ")", ")", "[", "0", "]", "\n", "\n", "", "with", "tf", ".", "Session", "(", "graph", "=", "tf", ".", "Graph", "(", ")", ")", "as", "sess", ":", "\n", "    ", "dict_entry", ".", "estimator", "=", "logger", ".", "load_pkl", "(", "\"model_dumps/\"", "+", "dict_entry", ".", "task_name", "+", "\".pkl\"", ")", "\n", "print", "(", "\"loaded estimator for entry \"", "+", "dict_entry", ".", "task_name", ")", "\n", "\n", "", "return", "dict_entry", "\n", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.sim_eval.generate_report": [[14, 25], ["cde.density_simulation.EconDensity", "cde.density_simulation.EconDensity.simulate", "cde.density_estimator.NeighborKernelDensityEstimation", "cde.density_estimator.NeighborKernelDensityEstimation.fit_by_cv", "numpy.asarray", "numpy.linspace", "cde.density_estimator.NeighborKernelDensityEstimation.pdf", "range"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.fit_by_cv", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["def", "generate_report", "(", ")", ":", "\n", "  ", "econ_density", "=", "EconDensity", "(", ")", "\n", "\n", "X", ",", "Y", "=", "econ_density", ".", "simulate", "(", "n_samples", "=", "1000", ")", "\n", "nke", "=", "NeighborKernelDensityEstimation", "(", ")", "\n", "nke", ".", "fit_by_cv", "(", "X", ",", "Y", ")", "\n", "\n", "n_samples", "=", "500", "\n", "X_test", "=", "np", ".", "asarray", "(", "[", "1", "for", "_", "in", "range", "(", "n_samples", ")", "]", ")", "\n", "Y_test", "=", "np", ".", "linspace", "(", "0", ",", "8", ",", "num", "=", "n_samples", ")", "\n", "Z", "=", "nke", ".", "pdf", "(", "X_test", ",", "Y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.sim_eval.eval_econ_data": [[28, 47], ["cde.density_simulation.GaussianMixture", "cde.density_simulation.EconDensity", "print", "cde.density_estimator.KernelMixtureNetwork", "cde.model_fitting.GoodnessOfFit.GoodnessOfFit", "cde.model_fitting.GoodnessOfFit.GoodnessOfFit.compute_results", "print", "print", "gof.compute_results.report_dict"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitLogProb.GoodnessOfFitLogProb.compute_results", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.report_dict"], ["", "def", "eval_econ_data", "(", ")", ":", "\n", "  ", "gmm", "=", "GaussianMixture", "(", "ndim_x", "=", "1", ",", "ndim_y", "=", "1", ")", "\n", "econ_density", "=", "EconDensity", "(", ")", "\n", "\n", "# print(\"ECON DATA --------------\")", "\n", "# print(\"KMN\")", "\n", "# for n_centers in [50, 100, 200]:", "\n", "#   kmn = KernelMixtureNetwork(n_centers=n_centers)", "\n", "#   gof = GoodnessOfFit(kmn, econ_density, n_observations=2000, print_fit_result=False, repeat_kolmogorov=1)", "\n", "#   gof_results = gof.compute_results()", "\n", "#   print(\"N_Centers:\", n_centers)", "\n", "#   print(gof_results)", "\n", "\n", "print", "(", "\"LAZY-Learner:\"", ")", "\n", "nkde", "=", "KernelMixtureNetwork", "(", "n_training_epochs", "=", "10", ")", "\n", "gof", "=", "GoodnessOfFit", "(", "nkde", ",", "gmm", ",", "n_observations", "=", "100", ",", "print_fit_result", "=", "False", ")", "\n", "gof_results", "=", "gof", ".", "compute_results", "(", ")", "\n", "print", "(", "gof_results", ")", "\n", "print", "(", "gof_results", ".", "report_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.sim_eval.plot_fitted_distribution": [[60, 125], ["numpy.random.seed", "econ_density.simulate", "cde.density_estimator.KernelMixtureNetwork", "numpy.random.normal", "numpy.random.normal", "cde.density_estimator.KernelMixtureNetwork.fit", "print", "numpy.linspace", "numpy.expand_dims", "cde.density_estimator.KernelMixtureNetwork.pdf", "matplotlib.plot", "numpy.expand_dims", "cde.density_estimator.KernelMixtureNetwork.pdf", "matplotlib.plot", "matplotlib.show", "numpy.linspace", "numpy.linspace", "numpy.meshgrid", "cde.density_estimator.KernelMixtureNetwork.pdf", "matplotlib.figure", "plt.figure.gca", "fig.gca.plot_surface", "matplotlib.show", "numpy.random.normal", "numpy.random.normal", "cde.density_estimator.KernelMixtureNetwork.score", "numpy.asarray", "numpy.asarray", "X.flatten", "Y.flatten", "X.reshape", "Y.reshape", "model.pdf.reshape", "range", "range"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.plot", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.plot", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.score"], ["", "def", "plot_fitted_distribution", "(", ")", ":", "\n", "  ", "n_observations", "=", "1000", "# number of data points", "\n", "n_features", "=", "3", "# number of features", "\n", "\n", "np", ".", "random", ".", "seed", "(", "22", ")", "\n", "\n", "\n", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "=", "econ_density", ".", "simulate", "(", "n_observations", ")", "\n", "model", "=", "KernelMixtureNetwork", "(", ")", "\n", "\n", "X_train", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "size", "=", "[", "n_observations", ",", "1", "]", ")", "\n", "Y_train", "=", "3", "*", "X_train", "+", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "size", "=", "[", "n_observations", ",", "1", "]", ")", "\n", "X_test", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "size", "=", "[", "100", ",", "1", "]", ")", "\n", "Y_test", "=", "3", "*", "X_test", "+", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "size", "=", "[", "100", ",", "1", "]", ")", "\n", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ")", "\n", "print", "(", "model", ".", "score", "(", "X_test", ",", "Y_test", ")", ")", "\n", "#print(model.fit_by_cv(X_train, Y_train))", "\n", "\n", "\n", "\n", "# plt.scatter(model.X_train, model.Y_test)", "\n", "# plt.scatter(model.centr_x, model.centr_y, s=10*model.alpha)", "\n", "# plt.show()", "\n", "#", "\n", "# fig, ax = plt.subplots()", "\n", "# fig.set_size_inches(10, 8)", "\n", "# sns.regplot(X_train, Y_train, fit_reg=False)", "\n", "# plt.show()", "\n", "#", "\n", "#", "\n", "\n", "\n", "n_samples", "=", "1000", "\n", "\n", "Y_plot", "=", "np", ".", "linspace", "(", "-", "10", ",", "10", ",", "num", "=", "n_samples", ")", "\n", "\n", "X_plot", "=", "np", ".", "expand_dims", "(", "np", ".", "asarray", "(", "[", "-", "1", "for", "_", "in", "range", "(", "n_samples", ")", "]", ")", ",", "axis", "=", "1", ")", "\n", "result", "=", "model", ".", "pdf", "(", "X_plot", ",", "Y_plot", ")", "\n", "plt", ".", "plot", "(", "Y_plot", ",", "result", ")", "\n", "#plt.show()", "\n", "\n", "#2d plot", "\n", "X_plot", "=", "np", ".", "expand_dims", "(", "np", ".", "asarray", "(", "[", "2", "for", "_", "in", "range", "(", "n_samples", ")", "]", ")", ",", "axis", "=", "1", ")", "\n", "result", "=", "model", ".", "pdf", "(", "X_plot", ",", "Y_plot", ")", "\n", "plt", ".", "plot", "(", "Y_plot", ",", "result", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "#3d plot", "\n", "n_samples", "=", "100", "\n", "linspace_x", "=", "np", ".", "linspace", "(", "-", "15", ",", "15", ",", "num", "=", "n_samples", ")", "\n", "linspace_y", "=", "np", ".", "linspace", "(", "-", "15", ",", "15", ",", "num", "=", "n_samples", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "linspace_x", ",", "linspace_y", ")", "\n", "X", ",", "Y", "=", "X", ".", "flatten", "(", ")", ",", "Y", ".", "flatten", "(", ")", "\n", "\n", "Z", "=", "model", ".", "pdf", "(", "X", ",", "Y", ")", "\n", "\n", "X", ",", "Y", ",", "Z", "=", "X", ".", "reshape", "(", "[", "n_samples", ",", "n_samples", "]", ")", ",", "Y", ".", "reshape", "(", "[", "n_samples", ",", "n_samples", "]", ")", ",", "Z", ".", "reshape", "(", "[", "n_samples", ",", "n_samples", "]", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "'3d'", ")", "\n", "surf", "=", "ax", ".", "plot_surface", "(", "X", ",", "Y", ",", "Z", ",", "cmap", "=", "cm", ".", "coolwarm", ",", "\n", "linewidth", "=", "0", ",", "antialiased", "=", "True", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.sim_eval.eval1": [[128, 163], ["build_econ1_dataset", "print", "print", "print", "print", "matplotlib.subplots", "fig.set_size_inches", "seaborn.regplot", "cde.density_estimator.KernelMixtureNetwork", "cde.density_estimator.KernelMixtureNetwork.fit", "cde.density_estimator.KernelMixtureNetwork.plot_loss", "cde.density_estimator.KernelMixtureNetwork.sample", "print", "seaborn.jointplot", "sns.jointplot.ax_joint.add_line", "sns.jointplot.ax_joint.add_line", "sns.jointplot.ax_joint.add_line", "matplotlib.savefig", "matplotlib.show", "cde.density_estimator.KernelMixtureNetwork.predict_density", "pandas.DataFrame().transpose", "numpy.linspace", "pd.DataFrame().transpose.plot", "matplotlib.savefig", "X_test.ravel", "matplotlib.lines.Line2D", "matplotlib.lines.Line2D", "matplotlib.lines.Line2D", "X_test[].reshape", "pandas.DataFrame"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.plot"], ["", "def", "eval1", "(", ")", ":", "\n", "  ", "n_observations", "=", "2000", "# number of data points", "\n", "n_features", "=", "1", "# number of features", "\n", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "build_econ1_dataset", "(", "n_observations", ")", "\n", "print", "(", "\"Size of features in training data: {}\"", ".", "format", "(", "X_train", ".", "shape", ")", ")", "\n", "print", "(", "\"Size of output in training data: {}\"", ".", "format", "(", "y_train", ".", "shape", ")", ")", "\n", "print", "(", "\"Size of features in test data: {}\"", ".", "format", "(", "X_test", ".", "shape", ")", ")", "\n", "print", "(", "\"Size of output in test data: {}\"", ".", "format", "(", "y_test", ".", "shape", ")", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "fig", ".", "set_size_inches", "(", "10", ",", "8", ")", "\n", "sns", ".", "regplot", "(", "X_train", ",", "y_train", ",", "fit_reg", "=", "False", ")", "\n", "# plt.savefig('toydata.png')", "\n", "# plt.show()", "\n", "# plot.figure.size = 100", "\n", "# plt.show()", "\n", "\n", "kmn", "=", "KernelMixtureNetwork", "(", "train_scales", "=", "True", ",", "n_centers", "=", "20", ")", "\n", "kmn", ".", "fit", "(", "X_train", ",", "y_train", ",", "n_epoch", "=", "300", ",", "eval_set", "=", "(", "X_test", ",", "y_test", ")", ")", "\n", "kmn", ".", "plot_loss", "(", ")", "\n", "# plt.savefig('trainplot.png')", "\n", "samples", "=", "kmn", ".", "sample", "(", "X_test", ")", "\n", "print", "(", "X_test", ".", "shape", ",", "samples", ".", "shape", ")", "\n", "jp", "=", "sns", ".", "jointplot", "(", "X_test", ".", "ravel", "(", ")", ",", "samples", ",", "kind", "=", "\"hex\"", ",", "stat_func", "=", "None", ",", "size", "=", "10", ")", "\n", "jp", ".", "ax_joint", ".", "add_line", "(", "Line2D", "(", "[", "X_test", "[", "0", "]", "[", "0", "]", ",", "X_test", "[", "0", "]", "[", "0", "]", "]", ",", "[", "-", "40", ",", "40", "]", ",", "linewidth", "=", "3", ")", ")", "\n", "jp", ".", "ax_joint", ".", "add_line", "(", "Line2D", "(", "[", "X_test", "[", "1", "]", "[", "0", "]", ",", "X_test", "[", "1", "]", "[", "0", "]", "]", ",", "[", "-", "40", ",", "40", "]", ",", "color", "=", "'g'", ",", "linewidth", "=", "3", ")", ")", "\n", "jp", ".", "ax_joint", ".", "add_line", "(", "Line2D", "(", "[", "X_test", "[", "2", "]", "[", "0", "]", ",", "X_test", "[", "2", "]", "[", "0", "]", "]", ",", "[", "-", "40", ",", "40", "]", ",", "color", "=", "'r'", ",", "linewidth", "=", "3", ")", ")", "\n", "plt", ".", "savefig", "(", "'hexplot.png'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "d", "=", "kmn", ".", "predict_density", "(", "X_test", "[", "0", ":", "3", ",", ":", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "resolution", "=", "1000", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "d", ")", ".", "transpose", "(", ")", "\n", "df", ".", "index", "=", "np", ".", "linspace", "(", "kmn", ".", "y_min", ",", "kmn", ".", "y_max", ",", "num", "=", "1000", ")", "\n", "df", ".", "plot", "(", "legend", "=", "False", ",", "linewidth", "=", "3", ",", "figsize", "=", "(", "12.2", ",", "8", ")", ")", "\n", "plt", ".", "savefig", "(", "'conditional_density.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.sim_eval.main": [[167, 170], ["sim_eval.eval_econ_data"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.sim_eval.eval_econ_data"], ["", "def", "main", "(", ")", ":", "\n", "#test_nkde()", "\n", "  ", "eval_econ_data", "(", ")", "\n", "#plot_fitted_distribution()", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences.kl_divergence_pdf": [[9, 23], ["divergences._divergence_mc"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences._divergence_mc"], ["def", "kl_divergence_pdf", "(", "p", ",", "q", ",", "x_cond", ",", "n_samples", "=", "10", "**", "5", ")", ":", "\n", "  ", "\"\"\" Computes the Kullback\u2013Leibler divergence KL[p ; q] via monte carlo integration\n  using importance sampling with a student-t proposal distribution\n\n  Args:\n   p: conditional distribution object p(y|x)\n   q: conditional distribution object q(y|x)\n   x_cond: x values to condition on - numpy array of shape (n_values, ndim_x)\n   n_samples: number of samples for monte carlo integration over the y space\n\n  Returns:\n    KL divergence of each x value to condition on - numpy array of shape (n_values,)\n  \"\"\"", "\n", "return", "_divergence_mc", "(", "p", ",", "q", ",", "x_cond", ",", "_FUN_KL", ",", "n_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences.js_divergence_pdf": [[24, 39], ["divergences._divergence_mc", "numpy.log", "numpy.log"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences._divergence_mc"], ["", "def", "js_divergence_pdf", "(", "p", ",", "q", ",", "x_cond", ",", "n_samples", "=", "10", "**", "5", ")", ":", "\n", "  ", "\"\"\" Computes the Jensen-Shannon divergence JS[p ; q] via monte carlo integration\n  using importance sampling with a student-t proposal distribution\n\n  Args:\n   p: conditional distribution object p(y|x)\n   q: conditional distribution object q(y|x)\n   x_cond: x values to condition on - numpy array of shape (n_values, ndim_x)\n   n_samples: number of samples for monte carlo integration over the y space\n\n  Returns:\n    JS divergence of each x value to condition on - numpy array of shape (n_values,)\n  \"\"\"", "\n", "divergence_fun", "=", "lambda", "p", ",", "q", ":", "0.5", "*", "p", "*", "np", ".", "log", "(", "p", "/", "q", ")", "+", "0.5", "*", "q", "*", "np", ".", "log", "(", "q", "/", "p", ")", "\n", "return", "_divergence_mc", "(", "p", ",", "q", ",", "x_cond", ",", "divergence_fun", ",", "n_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences.hellinger_distance_pdf": [[40, 55], ["divergences._divergence_mc", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences._divergence_mc"], ["", "def", "hellinger_distance_pdf", "(", "p", ",", "q", ",", "x_cond", ",", "n_samples", "=", "10", "**", "5", ")", ":", "\n", "  ", "\"\"\" Computes the Hellinger Distance H[p ; q] via monte carlo integration\n  using importance sampling with a student-t proposal distribution\n\n  Args:\n   p: conditional distribution object p(y|x)\n   q: conditional distribution object q(y|x)\n   x_cond: x values to condition on - numpy array of shape (n_values, ndim_x)\n   n_samples: number of samples for monte carlo integration over the y space\n\n  Returns:\n    Hellinger distance for each x value to condition on - numpy array of shape (n_values,)\n  \"\"\"", "\n", "hellinger_squared", "=", "_divergence_mc", "(", "p", ",", "q", ",", "x_cond", ",", "_FUN_HELLINGER_2", ",", "n_samples", ")", "\n", "return", "np", ".", "sqrt", "(", "0.5", "*", "hellinger_squared", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences.divergence_measures_pdf": [[56, 77], ["divergences._divergence_mc", "numpy.stack", "numpy.sqrt", "_FUN_HELLINGER_2", "_FUN_KL", "_FUN_JS"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences._divergence_mc"], ["", "def", "divergence_measures_pdf", "(", "p", ",", "q", ",", "x_cond", ",", "n_samples", "=", "10", "**", "5", ")", ":", "\n", "  ", "\"\"\" Computes the\n      - Hellinger Distance H[p ; q]\n      - Kullback\u2013Leibler divergence KL[p ; q]\n      - Jennsen-Shannon divergence JS[p ; q]\n      via monte carlo integration using importance sampling with a student-t proposal distribution\n\n    Args:\n     p: conditional distribution object p(y|x)\n     q: conditional distribution object q(y|x)\n     x_cond: x values to condition on - numpy array of shape (n_values, ndim_x)\n     n_samples: number of samples for monte carlo integration over the y space\n\n    Returns:\n      (hellinger_dists, kl_divs, js_divs) - tuple of numpy arrays of shape (n_values,)\n    \"\"\"", "\n", "fun_div_measures_stack", "=", "lambda", "p", ",", "q", ":", "np", ".", "stack", "(", "[", "_FUN_HELLINGER_2", "(", "p", ",", "q", ")", ",", "_FUN_KL", "(", "p", ",", "q", ")", ",", "_FUN_JS", "(", "p", ",", "q", ")", "]", ",", "axis", "=", "1", ")", "# np.sqrt(_FUN_HELLINGER_2(p,q))", "\n", "div_measure_stack", "=", "_divergence_mc", "(", "p", ",", "q", ",", "x_cond", ",", "fun_div_measures_stack", ",", "n_samples", ",", "n_measures", "=", "3", ")", "\n", "assert", "div_measure_stack", ".", "shape", "==", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "3", ")", "\n", "h_divs", ",", "kl_divs", ",", "js_divs", "=", "div_measure_stack", "[", ":", ",", "0", "]", ",", "div_measure_stack", "[", ":", ",", "1", "]", ",", "div_measure_stack", "[", ":", ",", "2", "]", "\n", "return", "np", ".", "sqrt", "(", "0.5", "*", "h_divs", ")", ",", "kl_divs", ",", "js_divs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences._divergence_mc": [[78, 104], ["np.ma.masked_where().flatten._determine_mc_proposal_dist", "range", "P().flatten", "Q().flatten", "numpy.ma.masked_where().flatten", "numpy.ma.masked_where().flatten", "divergenc_fun", "divergenc_fun.filled", "numpy.zeros", "numpy.zeros", "numpy.tile", "cde.utils.integration.mc_integration_student_t", "x_cond[].reshape", "divergences._make_2d", "P", "Q", "numpy.ma.masked_where", "numpy.ma.masked_where", "divergences._divergence_mc._div"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._determine_mc_proposal_dist", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.integration.mc_integration_student_t", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences._make_2d"], ["", "def", "_divergence_mc", "(", "p", ",", "q", ",", "x_cond", ",", "divergenc_fun", ",", "n_samples", "=", "10", "**", "5", ",", "n_measures", "=", "1", ")", ":", "\n", "  ", "assert", "x_cond", ".", "ndim", "==", "2", "and", "x_cond", ".", "shape", "[", "1", "]", "==", "q", ".", "ndim_x", "\n", "\n", "P", "=", "p", ".", "pdf", "\n", "Q", "=", "q", ".", "pdf", "\n", "\n", "def", "_div", "(", "x_tiled", ",", "y_samples", ")", ":", "\n", "    ", "p", "=", "P", "(", "x_tiled", ",", "y_samples", ")", ".", "flatten", "(", ")", "\n", "q", "=", "Q", "(", "x_tiled", ",", "y_samples", ")", ".", "flatten", "(", ")", "\n", "q", "=", "np", ".", "ma", ".", "masked_where", "(", "q", "<", "10", "**", "-", "64", ",", "q", ")", ".", "flatten", "(", ")", "\n", "p", "=", "np", ".", "ma", ".", "masked_where", "(", "p", "<", "10", "**", "-", "64", ",", "p", ")", ".", "flatten", "(", ")", "\n", "\n", "r", "=", "divergenc_fun", "(", "p", ",", "q", ")", "\n", "return", "r", ".", "filled", "(", "0", ")", "\n", "\n", "", "if", "n_measures", "==", "1", ":", "\n", "    ", "distances", "=", "np", ".", "zeros", "(", "x_cond", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "    ", "distances", "=", "np", ".", "zeros", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "n_measures", ")", ")", "\n", "", "mu_proposal", ",", "std_proposal", "=", "p", ".", "_determine_mc_proposal_dist", "(", ")", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "x", "=", "np", ".", "tile", "(", "x_cond", "[", "i", "]", ".", "reshape", "(", "(", "1", ",", "x_cond", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", ",", "(", "n_samples", ",", "1", ")", ")", "\n", "func", "=", "lambda", "y", ":", "_make_2d", "(", "_div", "(", "x", ",", "y", ")", ")", "\n", "distances", "[", "i", "]", "=", "mc_integration_student_t", "(", "func", ",", "q", ".", "ndim_y", ",", "n_samples", "=", "n_samples", ",", "loc_proposal", "=", "mu_proposal", ",", "scale_proposal", "=", "std_proposal", ")", "\n", "", "assert", "distances", ".", "shape", "[", "0", "]", "==", "x_cond", ".", "shape", "[", "0", "]", "\n", "return", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.divergences._make_2d": [[108, 110], ["numpy.reshape"], "function", ["None"], ["def", "_make_2d", "(", "a", ")", ":", "\n", "  ", "return", "np", ".", "reshape", "(", "a", ",", "(", "a", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitLogProb.GoodnessOfFitLogProb.__init__": [[28, 55], ["isinstance", "isinstance", "numpy.seterr", "hasattr", "str", "type", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "estimator", ",", "probabilistic_model", ",", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", ",", "task_name", "=", "None", ")", ":", "\n", "\n", "    ", "assert", "isinstance", "(", "estimator", ",", "BaseDensityEstimator", ")", ",", "\"estimator must inherit BaseDensityEstimator class\"", "\n", "assert", "isinstance", "(", "probabilistic_model", ",", "BaseConditionalDensitySimulation", ")", ",", "\"probabilistic model must inherit from ConditionalDensity\"", "\n", "\n", "np", ".", "seterr", "(", "divide", "=", "'ignore'", ")", "\n", "\n", "self", ".", "probabilistic_model", "=", "probabilistic_model", "\n", "\n", "self", ".", "proba_model_conditional_pdf", "=", "probabilistic_model", ".", "pdf", "\n", "self", ".", "proba_model_conditional_cdf", "=", "probabilistic_model", ".", "cdf", "\n", "\n", "self", ".", "X_train", "=", "X_train", "\n", "self", ".", "Y_train", "=", "Y_train", "\n", "self", ".", "X_test", "=", "X_test", "\n", "self", ".", "Y_test", "=", "Y_test", "\n", "self", ".", "n_observations", "=", "X_train", ".", "shape", "[", "0", "]", "\n", "self", ".", "n_test_samples", "=", "Y_test", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "estimator", "=", "estimator", "\n", "\n", "if", "task_name", "is", "not", "None", ":", "\n", "      ", "self", ".", "task_name", "=", "task_name", "\n", "", "elif", "hasattr", "(", "self", ".", "estimator", ",", "'name'", ")", ":", "\n", "      ", "self", ".", "task_name", "=", "str", "(", "self", ".", "estimator", ".", "name", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "task_name", "=", "type", "(", "self", ".", "estimator", ")", ".", "__name__", "+", "'_'", "+", "type", "(", "self", ".", "probabilistic_model", ")", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitLogProb.GoodnessOfFitLogProb.fit_estimator": [[56, 83], ["time.time", "GoodnessOfFitLogProb.GoodnessOfFitLogProb.estimator.fit", "GoodnessOfFitLogProb.GoodnessOfFitLogProb.probabilistic_model.plot", "ml_logger.logger.log_pyplot", "matplotlib.close", "GoodnessOfFitLogProb.GoodnessOfFitLogProb.estimator.plot2d", "GoodnessOfFitLogProb.GoodnessOfFitLogProb.estimator.plot3d", "ml_logger.logger.log_pyplot", "ml_logger.logger.log_pyplot", "matplotlib.close", "matplotlib.close", "time.time"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.plot", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity.plot2d", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity.plot3d"], ["", "", "def", "fit_estimator", "(", "self", ",", "print_fit_result", "=", "True", ")", ":", "#todo set to False", "\n", "    ", "\"\"\"\n    Fits the estimator with the provided data\n\n    Args:\n      print_fit_result: boolean that specifies whether the fitted distribution shall be plotted (only works if ndim_x and ndim_y = 1)\n    \"\"\"", "\n", "\n", "self", ".", "time_to_fit", "=", "None", "\n", "if", "not", "self", ".", "estimator", ".", "fitted", ":", "# fit estimator if necessary", "\n", "      ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "self", ".", "X_train", ",", "self", ".", "Y_train", ",", "verbose", "=", "False", ")", "\n", "self", ".", "time_to_fit", "=", "(", "time", ".", "time", "(", ")", "-", "t_start", ")", "*", "self", ".", "n_observations", "/", "1000", "# time to fit per 1000 samples", "\n", "\n", "", "if", "print_fit_result", "and", "self", ".", "estimator", ".", "fitted", ":", "\n", "      ", "if", "self", ".", "probabilistic_model", ".", "ndim_x", "==", "1", "and", "self", ".", "probabilistic_model", ".", "ndim_y", "==", "1", ":", "\n", "        ", "plt3d_true", "=", "self", ".", "probabilistic_model", ".", "plot", "(", "mode", "=", "\"pdf\"", ",", "numpyfig", "=", "False", ")", "\n", "logger", ".", "log_pyplot", "(", "key", "=", "self", ".", "task_name", ",", "fig", "=", "plt3d_true", ")", "\n", "plt", ".", "close", "(", "plt3d_true", ")", "\n", "\n", "", "if", "self", ".", "estimator", ".", "ndim_x", "==", "1", "and", "self", ".", "estimator", ".", "ndim_y", "==", "1", ":", "\n", "        ", "plt2d", "=", "self", ".", "estimator", ".", "plot2d", "(", "show", "=", "False", ",", "numpyfig", "=", "False", ")", "\n", "plt3d", "=", "self", ".", "estimator", ".", "plot3d", "(", "show", "=", "False", ",", "numpyfig", "=", "False", ")", "\n", "logger", ".", "log_pyplot", "(", "key", "=", "self", ".", "task_name", "+", "\"_fitted_cond_distr_2d\"", ",", "fig", "=", "plt2d", ")", "\n", "logger", ".", "log_pyplot", "(", "key", "=", "self", ".", "task_name", "+", "\"_fitted_cond_distr_3d\"", ",", "fig", "=", "plt3d", ")", "\n", "plt", ".", "close", "(", "plt2d", ")", "\n", "plt", ".", "close", "(", "plt3d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitLogProb.GoodnessOfFitLogProb.compute_results": [[84, 102], ["cde.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult", "GoodnessOfFitLogProb.GoodnessOfFitLogProb.estimator.score", "GoodnessOfFitLogProb.GoodnessOfFitLogProb.estimator.get_configuration", "GoodnessOfFitLogProb.GoodnessOfFitLogProb.probabilistic_model.get_configuration"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.score", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.get_configuration", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.get_configuration"], ["", "", "", "def", "compute_results", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n      Computes statistics and stores the results in GoodnessOfFitResult object\n\n      Returns:\n        GoodnessOfFitResult object that holds the computed statistics\n    \"\"\"", "\n", "assert", "self", ".", "estimator", "is", "not", "None", "\n", "assert", "self", ".", "probabilistic_model", "is", "not", "None", "\n", "\n", "gof_result", "=", "GoodnessOfFitSingleResult", "(", "self", ".", "estimator", ".", "get_configuration", "(", ")", ",", "self", ".", "probabilistic_model", ".", "get_configuration", "(", ")", ")", "\n", "\n", "\"\"\" Evaluation stats \"\"\"", "\n", "gof_result", ".", "n_observations", "=", "[", "self", ".", "n_observations", "]", "\n", "gof_result", ".", "time_to_fit", "=", "self", ".", "time_to_fit", "\n", "gof_result", ".", "score", "=", "self", ".", "estimator", ".", "score", "(", "self", ".", "X_test", ",", "self", ".", "Y_test", ")", "\n", "\n", "return", "gof_result", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitLogProb.GoodnessOfFitLogProb.__str__": [[103, 106], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "str", "(", "\"{}\\n{}\\nGoodness of fit:\\n n_observations: {}\\n n_x_cond: {}\"", ".", "format", "(", "\n", "self", ".", "estimator", ",", "self", ".", "probabilistic_model", ",", "self", ".", "n_observations", ",", "self", ".", "x_cond", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb.__init__": [[63, 108], ["observations.all", "isinstance", "isinstance", "cde.model_fitting.ConfigRunner._add_seeds_to_sim_params", "ml_logger.logger.configure", "os.path.join", "os.path.isfile", "os.path.join", "os.path.isfile", "cde.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults", "list", "list", "ml_logger.logger.log", "ml_logger.logger.load_pkl", "ml_logger.logger.log", "ConfigRunnerLogProb.ConfigRunnerLogProb._generate_configuration_variants", "ml_logger.logger.dump_pkl", "ml_logger.logger.log_line", "dict", "list.items", "list.items", "ml_logger.logger.load_pkl_log"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._add_seeds_to_sim_params", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb._generate_configuration_variants"], ["def", "__init__", "(", "self", ",", "exp_prefix", ",", "est_params", ",", "sim_params", ",", "observations", ",", "keys_of_interest", ",", "n_test_samples", "=", "10", "**", "5", ",", "\n", "n_seeds", "=", "5", ",", "use_gpu", "=", "True", ")", ":", "\n", "\n", "    ", "assert", "est_params", "and", "exp_prefix", "and", "sim_params", "and", "keys_of_interest", "\n", "assert", "observations", ".", "all", "(", ")", "\n", "\n", "# convert to dicts to list of tuples", "\n", "if", "isinstance", "(", "est_params", ",", "dict", ")", ":", "\n", "      ", "est_params", "=", "list", "(", "est_params", ".", "items", "(", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "sim_params", ",", "dict", ")", ":", "\n", "      ", "sim_params", "=", "list", "(", "sim_params", ".", "items", "(", ")", ")", "\n", "\n", "# every simulator configuration will be run multiple times with different randomness seeds", "\n", "", "sim_params", "=", "_add_seeds_to_sim_params", "(", "n_seeds", ",", "sim_params", ")", "\n", "\n", "self", ".", "observations", "=", "observations", "\n", "self", ".", "n_test_samples", "=", "n_test_samples", "\n", "self", ".", "keys_of_interest", "=", "keys_of_interest", "\n", "self", ".", "exp_prefix", "=", "exp_prefix", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "\n", "logger", ".", "configure", "(", "log_directory", "=", "config", ".", "DATA_DIR", ",", "prefix", "=", "exp_prefix", ",", "color", "=", "'green'", ")", "\n", "\n", "''' ---------- Either load or generate the configs ----------'''", "\n", "config_pkl_path", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "log_directory", ",", "logger", ".", "prefix", ",", "EXP_CONFIG_FILE", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "config_pkl_path", ")", ":", "\n", "      ", "logger", ".", "log", "(", "\"{:<70s} {:<30s}\"", ".", "format", "(", "\"Loading experiment previous configs from file: \"", ",", "config_pkl_path", ")", ")", "\n", "self", ".", "configs", "=", "logger", ".", "load_pkl", "(", "EXP_CONFIG_FILE", ")", "\n", "", "else", ":", "\n", "      ", "logger", ".", "log", "(", "\"{:<70s} {:<30s}\"", ".", "format", "(", "\"Generating and storing experiment configs under: \"", ",", "config_pkl_path", ")", ")", "\n", "self", ".", "configs", "=", "self", ".", "_generate_configuration_variants", "(", "est_params", ",", "sim_params", ")", "\n", "logger", ".", "dump_pkl", "(", "data", "=", "self", ".", "configs", ",", "path", "=", "EXP_CONFIG_FILE", ")", "\n", "\n", "", "''' ---------- Either load already existing results or start a new result collection ---------- '''", "\n", "results_pkl_path", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "log_directory", ",", "logger", ".", "prefix", ",", "RESULTS_FILE", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "results_pkl_path", ")", ":", "\n", "      ", "logger", ".", "log_line", "(", "\"{:<70s} {:<30s}\"", ".", "format", "(", "\"Continue with: \"", ",", "results_pkl_path", ")", ")", "\n", "self", ".", "gof_single_res_collection", "=", "dict", "(", "logger", ".", "load_pkl_log", "(", "RESULTS_FILE", ")", ")", "\n", "\n", "", "else", ":", "# start from scratch", "\n", "      ", "self", ".", "gof_single_res_collection", "=", "{", "}", "\n", "\n", "", "self", ".", "gof_results", "=", "GoodnessOfFitResults", "(", "self", ".", "gof_single_res_collection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb._generate_configuration_variants": [[109, 163], ["cde.model_fitting.ConfigRunner._create_configurations", "cde.model_fitting.ConfigRunner._create_configurations", "numpy.isscalar", "ConfigRunnerLogProb.ConfigRunnerLogProb.sim_configs.items", "ConfigRunnerLogProb.ConfigRunnerLogProb.est_configs.items", "max", "sim.simulate", "sim._handle_input_dimensionality", "sim.simulate", "configured_sims.append", "copy.deepcopy", "configs.append", "globals", "dict"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._create_configurations", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._create_configurations", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate"], ["", "def", "_generate_configuration_variants", "(", "self", ",", "est_params", ",", "sim_params", ")", ":", "\n", "    ", "\"\"\"\n    Creates all possible combinations from the (configured) estimators and simulators.\n    Requires configured estimators and simulators in the constructor:\n\n    Args:\n        est_params: estimator parameters as dict with 2 levels\n        sim_params: density simulator parameters as dict with 2 levels\n\n    Returns:\n        if n_observations is not a list, a list containing n*m=k tuples while k being the number of the cartesian product of estimators and simulators is\n        returned --> shape of tuples: (estimator object, simulator object)\n        if n_observations is a list, n*m*o=k while o is the number of elements in n_observatons list\n    \"\"\"", "\n", "\n", "self", ".", "est_configs", "=", "_create_configurations", "(", "est_params", ")", "\n", "self", ".", "sim_configs", "=", "_create_configurations", "(", "sim_params", ")", "\n", "\n", "if", "np", ".", "isscalar", "(", "self", ".", "observations", ")", ":", "\n", "      ", "self", ".", "observations", "=", "[", "self", ".", "observations", "]", "\n", "\n", "", "configs", "=", "[", "]", "\n", "configured_sims", "=", "[", "]", "\n", "\n", "\"\"\" since simulator configurations of the same kind require the same X,Y and x_cond, \n    they have to be generated separately from the estimators\"\"\"", "\n", "for", "simulator_name", ",", "sim_params", "in", "self", ".", "sim_configs", ".", "items", "(", ")", ":", "\n", "      ", "for", "config", "in", "sim_params", ":", "\n", "        ", "sim", "=", "globals", "(", ")", "[", "simulator_name", "]", "(", "**", "config", ")", "\n", "\n", "n_obs_max", "=", "max", "(", "self", ".", "observations", ")", "\n", "X_max", ",", "Y_max", "=", "sim", ".", "simulate", "(", "n_obs_max", ")", "\n", "X_max", ",", "Y_max", "=", "sim", ".", "_handle_input_dimensionality", "(", "X_max", ",", "Y_max", ")", "\n", "X_test", ",", "Y_test", "=", "sim", ".", "simulate", "(", "self", ".", "n_test_samples", ")", "\n", "\n", "for", "obs", "in", "self", ".", "observations", ":", "\n", "          ", "X", ",", "Y", "=", "X_max", "[", ":", "obs", "]", ",", "Y_max", "[", ":", "obs", "]", "\n", "configured_sims", ".", "append", "(", "dict", "(", "{", "\"simulator_name\"", ":", "simulator_name", ",", "'simulator_config'", ":", "config", ",", "\"n_obs\"", ":", "obs", ",", "\n", "\"X\"", ":", "X", ",", "\"Y\"", ":", "Y", ",", "\"X_test\"", ":", "X_test", ",", "\"Y_test\"", ":", "Y_test", "}", ")", ")", "\n", "\n", "# merge simulator variants together with estimator variants", "\n", "", "", "", "task_number", "=", "0", "\n", "for", "sim_dict", "in", "configured_sims", ":", "\n", "      ", "for", "estimator_name", ",", "estimator_params", "in", "self", ".", "est_configs", ".", "items", "(", ")", ":", "\n", "        ", "for", "config", "in", "estimator_params", ":", "\n", "          ", "simulator_dict", "=", "copy", ".", "deepcopy", "(", "sim_dict", ")", "\n", "\n", "simulator_dict", "[", "'estimator_name'", "]", "=", "estimator_name", "\n", "simulator_dict", "[", "'estimator_config'", "]", "=", "config", "\n", "simulator_dict", "[", "'task_name'", "]", "=", "'%s_task_%i'", "%", "(", "estimator_name", ",", "task_number", ")", "\n", "configs", ".", "append", "(", "simulator_dict", ")", "\n", "task_number", "+=", "1", "\n", "\n", "", "", "", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb.run_configurations": [[164, 210], ["ml_logger.logger.log", "ml_logger.logger.log", "range", "len", "len", "cde.utils.async_executor.AsyncExecutor", "cde.utils.async_executor.AsyncExecutor.run", "zip", "str", "str", "ConfigRunnerLogProb.ConfigRunnerLogProb._run_single_task", "len", "len"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb._run_single_task"], ["", "def", "run_configurations", "(", "self", ",", "dump_models", "=", "False", ",", "multiprocessing", "=", "True", ",", "n_workers", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Runs the given configurations, i.e.\n    1) fits the estimator to the simulation and\n    2) executes goodness-of-fit (currently: e.g. kl-divergence, wasserstein-distance etc.) tests\n    Every successful run yields a result object of type GoodnessOfFitResult which contains\n    information on both estimator, simulator and chosen hyperparameters\n\n    such as n_samples, see GoodnessOfFitResult documentation for more information.\n\n      Args:\n        estimator_filter: a parameter to decide whether to execute just a specific type of estimator, e.g. \"KernelMixtureNetwork\",\n                          must be one of the density estimator class types\n        limit: limit the number of (potentially filtered) tasks\n        dump_models: (boolean) whether to save/dump the fitted estimators\n\n      Returns:\n         returns two objects: (result_list, full_df)\n          1) a GoodnessOfFitResults object containing all configurations as GoodnessOfFitSingleResult objects, carrying information about the\n          estimator and simulator hyperparameters as well as n_obs, n_x_cond, n_mc_samples and the statistic results.\n          2) a full pandas dataframe of the csv\n          Additionally, if export_pickle is True, the path to the pickle file will be returned, i.e. return values are (results_list, full_df, path_to_pickle)\n\n    \"\"\"", "\n", "self", ".", "dump_models", "=", "dump_models", "\n", "\n", "''' Asserts '''", "\n", "assert", "len", "(", "self", ".", "configs", ")", ">", "0", "\n", "tasks", "=", "self", ".", "configs", "\n", "\n", "''' Run the configurations '''", "\n", "\n", "logger", ".", "log", "(", "\"{:<70s} {:<30s}\"", ".", "format", "(", "\"Number of total tasks in pipeline:\"", ",", "str", "(", "len", "(", "self", ".", "configs", ")", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"{:<70s} {:<30s}\"", ".", "format", "(", "\"Number of aleady finished tasks (found in results pickle): \"", ",", "\n", "str", "(", "len", "(", "self", ".", "gof_single_res_collection", ")", ")", ")", ")", "\n", "\n", "\n", "iters", "=", "range", "(", "len", "(", "tasks", ")", ")", "\n", "\n", "if", "multiprocessing", ":", "\n", "      ", "executor", "=", "AsyncExecutor", "(", "n_jobs", "=", "n_workers", ")", "\n", "executor", ".", "run", "(", "self", ".", "_run_single_task", ",", "iters", ",", "tasks", ")", "\n", "\n", "", "else", ":", "\n", "      ", "for", "i", ",", "task", "in", "zip", "(", "iters", ",", "tasks", ")", ":", "\n", "        ", "self", ".", "_run_single_task", "(", "i", ",", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb._run_single_task": [[212, 282], ["time.time", "cde.model_fitting.ConfigRunner._hash_task_dict", "ConfigRunnerLogProb.ConfigRunnerLogProb.gof_single_res_collection.keys", "ml_logger.logger.log", "ml_logger.logger.log", "tensorflow.reset_default_graph", "time.time", "ml_logger.logger.log_pkl", "ml_logger.logger.flush", "ml_logger.logger.log", "ml_logger.logger.log", "ml_logger.logger.log", "traceback.print_exc", "time.time", "tensorflow.Session", "sess.run", "cde.model_fitting.GoodnessOfFitLogProb.GoodnessOfFitLogProb", "time.time", "cde.model_fitting.GoodnessOfFitLogProb.GoodnessOfFitLogProb.fit_estimator", "time.time", "cde.model_fitting.GoodnessOfFitLogProb.GoodnessOfFitLogProb.compute_results", "time.time", "str", "str", "globals", "globals", "tensorflow.global_variables_initializer", "time.time", "ml_logger.logger.dump_pkl", "ml_logger.logger.dump_pkl", "time.time"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunner._hash_task_dict", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitLogProb.GoodnessOfFitLogProb.fit_estimator", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitLogProb.GoodnessOfFitLogProb.compute_results"], ["", "", "", "def", "_run_single_task", "(", "self", ",", "i", ",", "task", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "      ", "task_hash", "=", "_hash_task_dict", "(", "task", ")", "# generate SHA256 hash of task dict as identifier", "\n", "\n", "# skip task if it has already been completed", "\n", "if", "task_hash", "in", "self", ".", "gof_single_res_collection", ".", "keys", "(", ")", ":", "\n", "        ", "logger", ".", "log", "(", "\"Task {:<1} {:<63} {:<10} {:<1} {:<1} {:<1}\"", ".", "format", "(", "i", "+", "1", ",", "\"has already been completed:\"", ",", "\"Estimator:\"", ",", "\n", "task", "[", "'estimator_name'", "]", ",", "\n", "\" Simulator: \"", ",", "task", "[", "\"simulator_name\"", "]", ")", ")", "\n", "return", "None", "\n", "\n", "# run task when it has not been completed", "\n", "", "else", ":", "\n", "        ", "logger", ".", "log", "(", "\n", "\"Task {:<1} {:<63} {:<10} {:<1} {:<1} {:<1}\"", ".", "format", "(", "i", "+", "1", ",", "\"running:\"", ",", "\"Estimator:\"", ",", "task", "[", "'estimator_name'", "]", ",", "\n", "\" Simulator: \"", ",", "task", "[", "\"simulator_name\"", "]", ")", ")", "\n", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n", "''' build simulator and estimator model given the specified configurations '''", "\n", "\n", "simulator", "=", "globals", "(", ")", "[", "task", "[", "'simulator_name'", "]", "]", "(", "**", "task", "[", "'simulator_config'", "]", ")", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "estimator", "=", "globals", "(", ")", "[", "task", "[", "'estimator_name'", "]", "]", "(", "task", "[", "'task_name'", "]", ",", "simulator", ".", "ndim_x", ",", "\n", "simulator", ".", "ndim_y", ",", "**", "task", "[", "'estimator_config'", "]", ")", "\n", "time_to_initialize", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "\n", "# if desired hide gpu devices", "\n", "if", "not", "self", ".", "use_gpu", ":", "\n", "          ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "\"-1\"", "\n", "\n", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "          ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "''' train the model '''", "\n", "gof", "=", "GoodnessOfFitLogProb", "(", "estimator", "=", "estimator", ",", "probabilistic_model", "=", "simulator", ",", "X_train", "=", "task", "[", "'X'", "]", ",", "Y_train", "=", "task", "[", "'Y'", "]", ",", "\n", "X_test", "=", "task", "[", "'X_test'", "]", ",", "Y_test", "=", "task", "[", "'Y_test'", "]", ",", "task_name", "=", "task", "[", "'task_name'", "]", ")", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "gof", ".", "fit_estimator", "(", "print_fit_result", "=", "True", ")", "\n", "time_to_fit", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "\n", "if", "self", ".", "dump_models", ":", "\n", "            ", "logger", ".", "dump_pkl", "(", "data", "=", "gof", ".", "estimator", ",", "path", "=", "\"model_dumps/{}.pkl\"", ".", "format", "(", "task", "[", "'task_name'", "]", ")", ")", "\n", "logger", ".", "dump_pkl", "(", "data", "=", "gof", ".", "probabilistic_model", ",", "path", "=", "\"model_dumps/{}.pkl\"", ".", "format", "(", "task", "[", "'task_name'", "]", "+", "\"_simulator\"", ")", ")", "\n", "\n", "", "''' perform tests with the fitted model '''", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "gof_results", "=", "gof", ".", "compute_results", "(", ")", "\n", "time_to_evaluate", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "\n", "gof_results", ".", "task_name", "=", "task", "[", "'task_name'", "]", "\n", "\n", "gof_results", ".", "hash", "=", "task_hash", "\n", "\n", "", "logger", ".", "log_pkl", "(", "data", "=", "(", "task_hash", ",", "gof_results", ")", ",", "path", "=", "RESULTS_FILE", ")", "\n", "logger", ".", "flush", "(", "file_name", "=", "RESULTS_FILE", ")", "\n", "del", "gof_results", "\n", "\n", "task_duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logger", ".", "log", "(", "\n", "\"Finished task {:<1} in {:<1.4f} {:<43} {:<10} {:<1} {:<1} {:<2} | {:<1} {:<1.2f} {:<1} {:<1.2f} {:<1} {:<1.2f}\"", ".", "format", "(", "i", "+", "1", ",", "task_duration", ",", "\"sec:\"", ",", "\n", "\"Estimator:\"", ",", "task", "[", "'estimator_name'", "]", ",", "\" Simulator: \"", ",", "task", "[", "\"simulator_name\"", "]", ",", "\"t_init:\"", ",", "time_to_initialize", ",", "\"t_fit:\"", ",", "time_to_fit", ",", "\"t_eval:\"", ",", "time_to_evaluate", ")", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "      ", "logger", ".", "log", "(", "\"error in task: \"", ",", "str", "(", "i", "+", "1", ")", ")", "\n", "logger", ".", "log", "(", "str", "(", "e", ")", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb._dump_current_state": [[283, 290], ["open", "cde.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults", "cde.utils.io.dump_as_pickle"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.dump_as_pickle"], ["", "", "def", "_dump_current_state", "(", "self", ")", ":", "\n", "#if self.export_csv:", "\n", "#  self._export_results(task=task, gof_result=gof_single_result, file_handle_results=self.file_handle_results_csv)", "\n", "#if self.export_pickle:", "\n", "    ", "with", "open", "(", "self", ".", "results_pickle_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "      ", "intermediate_gof_results", "=", "GoodnessOfFitResults", "(", "single_results_dict", "=", "self", ".", "gof_single_res_collection", ")", "\n", "io", ".", "dump_as_pickle", "(", "f", ",", "intermediate_gof_results", ",", "verbose", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb._get_results_dataframe": [[292, 306], ["len", "results.report_dict", "pandas.DataFrame.from_dict"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.report_dict"], ["", "", "def", "_get_results_dataframe", "(", "self", ",", "results", ")", ":", "\n", "    ", "\"\"\" retrieves the dataframe for one or more GoodnessOfFitResults result objects.\n\n      Args:\n          results: a list or single object of type GoodnessOfFitResults\n      Returns:\n         a pandas dataframe\n    \"\"\"", "\n", "n_results", "=", "len", "(", "results", ")", "\n", "assert", "n_results", ">", "0", ",", "\"no results given\"", "\n", "\n", "results_dict", "=", "results", ".", "report_dict", "(", "keys_of_interest", "=", "self", ".", "keys_of_interest", ")", "\n", "\n", "return", "pd", ".", "DataFrame", ".", "from_dict", "(", "data", "=", "results_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb._export_results": [[307, 319], ["len", "ConfigRunnerLogProb.ConfigRunnerLogProb._get_results_dataframe", "cde.utils.io.append_result_to_csv", "print", "print", "traceback.print_exc", "str"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb._get_results_dataframe", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.append_result_to_csv"], ["", "def", "_export_results", "(", "self", ",", "task", ",", "gof_result", ",", "file_handle_results", ")", ":", "\n", "    ", "assert", "len", "(", "gof_result", ")", ">", "0", ",", "\"no results given\"", "\n", "\n", "\"\"\" write result to file\"\"\"", "\n", "try", ":", "\n", "      ", "gof_result_df", "=", "self", ".", "_get_results_dataframe", "(", "results", "=", "gof_result", ")", "\n", "gof_result", ".", "result_df", "=", "gof_result_df", "\n", "io", ".", "append_result_to_csv", "(", "file_handle_results", ",", "gof_result_df", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "      ", "print", "(", "\"appending to file was not successful for task: \"", ",", "task", ")", "\n", "print", "(", "str", "(", "e", ")", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb._setup_file_names": [[321, 342], ["open", "os.path.join", "cde.utils.io.get_full_path", "ConfigRunnerLogProb.ConfigRunnerLogProb.results_pickle_file.replace", "cde.utils.io.get_full_path", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.get_full_path", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.get_full_path"], ["", "", "def", "_setup_file_names", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "prefix_filename", "is", "not", "None", ":", "\n", "      ", "self", ".", "result_file_name", "=", "self", ".", "prefix_filename", "+", "\"_\"", "+", "self", ".", "result_file_name", "+", "\"_\"", "\n", "\n", "", "if", "self", ".", "export_pickle", ":", "\n", "      ", "if", "self", ".", "results_pickle_file", ":", "# continue with old file", "\n", "        ", "self", ".", "results_pickle_path", "=", "self", ".", "results_pickle_file", "\n", "", "else", ":", "# new file name", "\n", "        ", "self", ".", "results_pickle_path", "=", "io", ".", "get_full_path", "(", "output_dir", "=", "self", ".", "output_dir", ",", "suffix", "=", "\".pickle\"", ",", "file_name", "=", "self", ".", "result_file_name", ")", "\n", "\n", "", "", "if", "self", ".", "export_csv", ":", "\n", "      ", "if", "self", ".", "results_pickle_file", ":", "\n", "        ", "self", ".", "results_csv_path", "=", "self", ".", "results_pickle_file", ".", "replace", "(", "\"pickle\"", ",", "\"csv\"", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "results_csv_path", "=", "io", ".", "get_full_path", "(", "output_dir", "=", "self", ".", "output_dir", ",", "suffix", "=", "\".csv\"", ",", "file_name", "=", "self", ".", "result_file_name", ")", "\n", "", "self", ".", "file_handle_results_csv", "=", "open", "(", "self", ".", "results_csv_path", ",", "\"a+\"", ")", "\n", "\n", "", "if", "self", ".", "dump_models", ":", "\n", "      ", "self", ".", "model_dump_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'model_dumps'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "model_dump_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "self", ".", "model_dump_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults.__init__": [[15, 20], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "single_results_dict", ")", ":", "\n", "#assert len(single_results_list) > 0, \"given single results list is empty\"", "\n", "\n", "    ", "self", ".", "single_results_dict", "=", "single_results_dict", "\n", "self", ".", "results_df", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults.__len__": [[21, 23], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults.generate_results_dataframe": [[24, 40], ["enumerate", "pandas.concat", "GoodnessOfFitResults.GoodnessOfFitResults.single_results_dict.values", "single_result.report_dict", "single_result.report_dict.items", "pandas.DataFrame", "dfs.append", "isinstance"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitSingleResult.GoodnessOfFitSingleResult.report_dict"], ["", "def", "generate_results_dataframe", "(", "self", ",", "keys_of_interest", ")", ":", "\n", "    ", "dfs", "=", "[", "]", "\n", "for", "i", ",", "single_result", "in", "enumerate", "(", "self", ".", "single_results_dict", ".", "values", "(", ")", ")", ":", "\n", "\n", "      ", "result_dict", "=", "single_result", ".", "report_dict", "(", "keys_of_interest", "=", "keys_of_interest", ")", "\n", "\n", "# ndarrays of size > 1 cannot be processed and are replaced by a None", "\n", "for", "key", ",", "value", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", "and", "value", ".", "size", ">", "1", ":", "\n", "          ", "result_dict", "[", "key", "]", "=", "None", "\n", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "result_dict", ")", "\n", "dfs", ".", "append", "(", "df", ")", "\n", "\n", "", "self", ".", "results_df", "=", "pd", ".", "concat", "(", "dfs", ",", "axis", "=", "0", ")", "\n", "return", "self", ".", "results_df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults.export_results_as_csv": [[41, 57], ["cde.utils.io.get_full_path", "open", "GoodnessOfFitResults.GoodnessOfFitResults.generate_results_dataframe", "cde.utils.io.append_result_to_csv", "open.close", "print", "print", "traceback.print_exc", "str"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.get_full_path", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults.generate_results_dataframe", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.append_result_to_csv"], ["", "def", "export_results_as_csv", "(", "self", ",", "keys_of_interest", ",", "output_dir", ",", "file_name", ")", ":", "\n", "    ", "if", "self", ".", "results_df", "is", "None", ":", "\n", "      ", "self", ".", "generate_results_dataframe", "(", "keys_of_interest", "=", "keys_of_interest", ")", "\n", "\n", "", "file_results", "=", "io", ".", "get_full_path", "(", "output_dir", "=", "output_dir", ",", "suffix", "=", "\".csv\"", ",", "file_name", "=", "file_name", ")", "\n", "file_handle_results_csv", "=", "open", "(", "file_results", ",", "\"w+\"", ")", "\n", "\n", "\"\"\" write result to file\"\"\"", "\n", "try", ":", "\n", "      ", "io", ".", "append_result_to_csv", "(", "file_handle_results_csv", ",", "self", ".", "results_df", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "      ", "print", "(", "\"exporting results as csv was not successful\"", ")", "\n", "print", "(", "str", "(", "e", ")", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "", "finally", ":", "\n", "      ", "file_handle_results_csv", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults.plot_metric": [[58, 136], ["enumerate", "all", "matplotlib.subplots", "isinstance", "plot_dicts.items", "graph_dicts.items", "axarr[].set_xlabel", "axarr[].set_ylabel", "axarr[].set_title", "axarr[].legend", "len", "numpy.array.flatten", "numpy.array", "iter", "copy.deepcopy", "[].mean", "[].std", "next", "axarr[].plot", "axarr[].fill_between", "axarr[].set_xscale", "axarr[].set_yscale", "plot_dicts.keys", "intersect.add", "intersect.add", "collections.OrderedDict", "collections.OrderedDict", "matplotlib.rcParams[].by_key", "graph_dict.keys", "sorted", "sub_df.groupby", "sub_df.groupby", "graph_dict.items", "collections.OrderedDict.items", "pandas.Series", "list"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.plot"], ["", "", "def", "plot_metric", "(", "self", ",", "plot_dicts", ",", "metric", "=", "'hellinger_distance'", ",", "keys_of_interest", "=", "None", ",", "\n", "figsize", "=", "(", "20", ",", "8", ")", ",", "layout", "=", "None", ",", "fig", "=", "None", ",", "color", "=", "None", ",", "log_scale_x", "=", "True", ",", "log_scale_y", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Generates a plot for a metric with axis x representing the n_observations and y representing the metric.\n    Args:\n\n      graph_dicts: a list of dicts, each element representing the data for one curve on the plot, example:\n                    graph_dicts = [\n                      { \"estimator\": \"KernelMixtureNetwork\", \"x_noise_std\": 0.01, \"y_noise_std\": 0.01},\n                      { ... },\n                      ...\n                      ]\n\n      metric: must be one of the available metrics (e.g. hellinger_distance, kl_divergence etc.)\n      simulator: specifies the simulator, e.g. EconDensity\n    \"\"\"", "\n", "\n", "assert", "self", ".", "results_df", "is", "not", "None", ",", "\"first generate results df\"", "\n", "assert", "metric", "in", "self", ".", "results_df", "\n", "assert", "plot_dicts", "is", "not", "None", "\n", "assert", "'estimator'", "in", "self", ".", "results_df", "\n", "if", "keys_of_interest", "is", "not", "None", ":", "\n", "      ", "assert", "all", "(", "key", "in", "self", ".", "results_df", "for", "key", "in", "keys_of_interest", ")", ",", "\"at least one key of interest not in the results data frame\"", "\n", "\n", "", "if", "layout", "is", "None", ":", "\n", "      ", "layout", "=", "(", "1", ",", "len", "(", "plot_dicts", ".", "keys", "(", ")", ")", ")", "\n", "", "if", "fig", "is", "not", "None", ":", "\n", "      ", "axarr", "=", "fig", ".", "axes", "\n", "", "else", ":", "\n", "      ", "fig", ",", "axarr", "=", "plt", ".", "subplots", "(", "*", "layout", ",", "figsize", "=", "figsize", ")", "\n", "if", "isinstance", "(", "axarr", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "axarr", "=", "axarr", ".", "flatten", "(", ")", "\n", "", "else", ":", "\n", "        ", "axarr", "=", "np", ".", "array", "(", "[", "axarr", "]", ")", "\n", "", "", "for", "i", ",", "(", "ax_title", ",", "graph_dicts", ")", "in", "enumerate", "(", "plot_dicts", ".", "items", "(", ")", ")", ":", "\n", "\n", "      ", "if", "color", "is", "None", ":", "\n", "        ", "color_iter", "=", "iter", "(", "plt", ".", "rcParams", "[", "'axes.prop_cycle'", "]", ".", "by_key", "(", ")", "[", "'color'", "]", ")", "\n", "", "else", ":", "\n", "        ", "color_iter", "=", "copy", ".", "deepcopy", "(", "color", ")", "\n", "\n", "\n", "# d_keys = list(graph_dicts.values()[0].keys())", "\n", "# d_keys = \" \".join(str(x) if x != 'estimator' and x != 'simulator' else \"\" for x in d_keys)", "\n", "\n", "", "for", "label", ",", "graph_dict", "in", "graph_dicts", ".", "items", "(", ")", ":", "\n", "        ", "\"\"\" data \"\"\"", "\n", "\n", "sub_df", "=", "self", ".", "results_df", ".", "loc", "[", "(", "self", ".", "results_df", "[", "list", "(", "graph_dict", ")", "]", "==", "pd", ".", "Series", "(", "graph_dict", ")", ")", ".", "all", "(", "axis", "=", "1", ")", "]", "\n", "\n", "metric_values_mean", "=", "sub_df", ".", "groupby", "(", "by", "=", "'n_observations'", ")", "[", "metric", "]", ".", "mean", "(", ")", "\n", "metric_values_std", "=", "sub_df", ".", "groupby", "(", "by", "=", "'n_observations'", ")", "[", "metric", "]", ".", "std", "(", ")", "\n", "n_obs", "=", "metric_values_mean", ".", "index", "\n", "\n", "\n", "if", "keys_of_interest", "is", "not", "None", ":", "\n", "          ", "intersect", "=", "graph_dict", ".", "keys", "(", ")", "&", "keys_of_interest", "\n", "intersect", ".", "add", "(", "\"estimator\"", ")", "\n", "intersect", ".", "add", "(", "\"simulator\"", ")", "\n", "sub_dict", "=", "OrderedDict", "(", "(", "k", ",", "graph_dict", "[", "k", "]", ")", "for", "k", "in", "intersect", ")", "\n", "", "else", ":", "\n", "          ", "sub_dict", "=", "OrderedDict", "(", "sorted", "(", "graph_dict", ".", "items", "(", ")", ")", ")", "\n", "\n", "", "label", "=", "label", "if", "label", "is", "not", "None", "else", "', '", ".", "join", "(", "\"{}={}\"", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "sub_dict", ".", "items", "(", ")", ")", "\n", "\n", "\" visual settings \"", "\n", "c", "=", "next", "(", "color_iter", ")", "\n", "\n", "axarr", "[", "i", "]", ".", "plot", "(", "n_obs", ",", "metric_values_mean", ",", "color", "=", "c", ",", "label", "=", "label", ")", "\n", "axarr", "[", "i", "]", ".", "fill_between", "(", "n_obs", ",", "metric_values_mean", "-", "metric_values_std", ",", "metric_values_mean", "+", "metric_values_std", ",", "alpha", "=", "0.1", ",", "color", "=", "c", ")", "\n", "\n", "", "if", "log_scale_x", ":", "axarr", "[", "i", "]", ".", "set_xscale", "(", "'log'", ")", "\n", "if", "log_scale_y", ":", "axarr", "[", "i", "]", ".", "set_yscale", "(", "'log'", ")", "\n", "axarr", "[", "i", "]", ".", "set_xlabel", "(", "'n_observations'", ")", "\n", "axarr", "[", "i", "]", ".", "set_ylabel", "(", "metric", ")", "\n", "axarr", "[", "i", "]", ".", "set_title", "(", "ax_title", ")", "\n", "axarr", "[", "i", "]", ".", "legend", "(", ")", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.GoodnessOfFitResults.GoodnessOfFitResults.plot_densities": [[138, 194], ["numpy.linspace", "numpy.linspace", "numpy.meshgrid", "matplotlib.figure", "matplotlib.figure.gca", "plt.figure.gca.plot_surface", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "list", "X.flatten", "Y.flatten", "pandas.DataFrame.from_dict", "X.reshape", "Y.reshape", "GoodnessOfFitResults.GoodnessOfFitResults.reshape", "GoodnessOfFitResults.GoodnessOfFitResults.cdf", "GoodnessOfFitResults.GoodnessOfFitResults.joint_pdf", "pandas.Series", "list"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.JumpDiffusionModel.JumpDiffusionModel.joint_pdf"], ["", "def", "plot_densities", "(", "self", ",", "selector", ",", "configs", ",", "metric", "=", "\"hellinger_distance\"", ",", "simulator", "=", "\"EconDensity\"", ",", "mode", "=", "\"pdf\"", ",", "xlim", "=", "(", "-", "5", ",", "5", ")", ",", "ylim", "=", "(", "-", "5", ",", "5", ")", ",", "\n", "resolution", "=", "100", ",", ")", ":", "\n", "    ", "assert", "self", ".", "results_df", "is", "not", "None", ",", "\"first generate results df\"", "\n", "assert", "simulator", "in", "list", "(", "self", ".", "results_df", "[", "\"simulator\"", "]", ")", ",", "simulator", "+", "\" not in the results dataframe\"", "\n", "assert", "metric", "in", "self", ".", "results_df", "\n", "assert", "selector", "\n", "\n", "\n", "\"\"\" Compares the fitted density (see modes) against the original density\n\n    Args:\n      xlim: 2-tuple specifying the x axis limits\n      ylim: 2-tuple specifying the y axis limits\n      resolution: integer specifying the resolution of plot\n      mode: spefify which dist to plot [\"pdf\", \"cdf\", \"joint_pdf\"]\n\n    \"\"\"", "\n", "modes", "=", "[", "\"pdf\"", ",", "\"cdf\"", ",", "\"joint_pdf\"", "]", "\n", "assert", "mode", "in", "modes", ",", "\"mode must be on of the following: \"", "+", "modes", "\n", "#assert self.ndim == 2, \"Can only plot two dimensional distributions\"", "\n", "\n", "# prepare mesh", "\n", "linspace_x", "=", "np", ".", "linspace", "(", "xlim", "[", "0", "]", ",", "xlim", "[", "1", "]", ",", "num", "=", "resolution", ")", "\n", "linspace_y", "=", "np", ".", "linspace", "(", "ylim", "[", "0", "]", ",", "ylim", "[", "1", "]", ",", "num", "=", "resolution", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "linspace_x", ",", "linspace_y", ")", "\n", "X", ",", "Y", "=", "X", ".", "flatten", "(", ")", ",", "Y", ".", "flatten", "(", ")", "\n", "\n", "\n", "selector", "[", "'simulator'", "]", "=", "'EconDensity'", "\n", "\n", "# calculate values of distribution", "\n", "if", "mode", "==", "\"pdf\"", ":", "\n", "#task_hash = self.results_df.loc[(self.results_df[list(selector)] == pd.Series(selector)).all(axis=1)].iloc[0]['hash']", "\n", "#task = configs[task_hash]", "\n", "\n", "      ", "selected_res", "=", "self", ".", "results_df", ".", "loc", "[", "(", "self", ".", "results_df", "[", "list", "(", "selector", ")", "]", "==", "pd", ".", "Series", "(", "selector", ")", ")", ".", "all", "(", "axis", "=", "1", ")", "]", ".", "iloc", "[", "0", "]", "\n", "cfgs_df", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "configs", ")", "\n", "\n", "#Z_actual = task['simulator'].pdf(task['X'], task['Y'])", "\n", "#Z_recovered = task['estimator'].pdf(task['X'], task['Y'])", "\n", "", "elif", "mode", "==", "\"cdf\"", ":", "\n", "#todo", "\n", "      ", "Z", "=", "self", ".", "cdf", "(", "X", ",", "Y", ")", "\n", "", "elif", "mode", "==", "\"joint_pdf\"", ":", "\n", "#todo", "\n", "      ", "Z", "=", "self", ".", "joint_pdf", "(", "X", ",", "Y", ")", "\n", "\n", "", "X", ",", "Y", ",", "Z", "=", "X", ".", "reshape", "(", "[", "resolution", ",", "resolution", "]", ")", ",", "Y", ".", "reshape", "(", "[", "resolution", ",", "resolution", "]", ")", ",", "Z", ".", "reshape", "(", "\n", "[", "resolution", ",", "resolution", "]", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "'3d'", ")", "\n", "surf", "=", "ax", ".", "plot_surface", "(", "X", ",", "Y", ",", "Z", ",", "cmap", "=", "cm", ".", "coolwarm", ",", "rcount", "=", "resolution", ",", "ccount", "=", "resolution", ",", "\n", "linewidth", "=", "100", ",", "antialiased", "=", "True", ")", "\n", "plt", ".", "xlabel", "(", "\"x\"", ")", "\n", "plt", ".", "ylabel", "(", "\"y\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator.mean_": [[14, 32], ["hasattr", "BaseNNMixtureEstimator.BaseNNMixtureEstimator._handle_input_dimensionality", "numpy.zeros", "BaseNNMixtureEstimator.BaseNNMixtureEstimator._get_mixture_components", "range", "weights[].dot"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.MDN.MixtureDensityNetwork._get_mixture_components"], ["def", "mean_", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Mean of the fitted distribution conditioned on x_cond\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Means E[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y)\n    \"\"\"", "\n", "assert", "hasattr", "(", "self", ",", "'_get_mixture_components'", ")", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "means", "=", "np", ".", "zeros", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", ")", "\n", "weights", ",", "locs", ",", "_", "=", "self", ".", "_get_mixture_components", "(", "x_cond", ")", "\n", "assert", "weights", ".", "ndim", "==", "2", "and", "locs", ".", "ndim", "==", "3", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "# mean of density mixture is weights * means of density components", "\n", "      ", "means", "[", "i", ",", ":", "]", "=", "weights", "[", "i", "]", ".", "dot", "(", "locs", "[", "i", "]", ")", "\n", "", "return", "means", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator.std_": [[33, 44], ["BaseNNMixtureEstimator.BaseNNMixtureEstimator.covariance", "numpy.sqrt", "numpy.diagonal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["", "def", "std_", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Standard deviation of the fitted distribution conditioned on x_cond\n\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Standard deviations  sqrt(Var[y|x]) corresponding to x_cond - numpy array of shape (n_values, ndim_y)\n    \"\"\"", "\n", "covs", "=", "self", ".", "covariance", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "return", "np", ".", "sqrt", "(", "np", ".", "diagonal", "(", "covs", ",", "axis1", "=", "1", ",", "axis2", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator.covariance": [[45, 74], ["BaseNNMixtureEstimator.BaseNNMixtureEstimator._handle_input_dimensionality", "numpy.zeros", "BaseNNMixtureEstimator.BaseNNMixtureEstimator.mean_", "BaseNNMixtureEstimator.BaseNNMixtureEstimator._get_mixture_components", "range", "numpy.diag", "numpy.zeros", "range", "weights[].dot", "numpy.outer"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.MDN.MixtureDensityNetwork._get_mixture_components"], ["", "def", "covariance", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Covariance of the fitted distribution conditioned on x_cond\n\n      Args:\n        x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n      Returns:\n        Covariances Cov[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y, ndim_y)\n    \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "covs", "=", "np", ".", "zeros", "(", "(", "x_cond", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ",", "self", ".", "ndim_y", ")", ")", "\n", "\n", "# compute global mean_of mixture model", "\n", "glob_mean", "=", "self", ".", "mean_", "(", "x_cond", ")", "\n", "\n", "weights", ",", "locs", ",", "scales", "=", "self", ".", "_get_mixture_components", "(", "x_cond", ")", "\n", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "c1", "=", "np", ".", "diag", "(", "weights", "[", "i", "]", ".", "dot", "(", "scales", "[", "i", "]", "**", "2", ")", ")", "\n", "\n", "c2", "=", "np", ".", "zeros", "(", "c1", ".", "shape", ")", "\n", "for", "j", "in", "range", "(", "weights", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "a", "=", "(", "locs", "[", "i", "]", "[", "j", "]", "-", "glob_mean", "[", "i", "]", ")", "\n", "d", "=", "weights", "[", "i", "]", "[", "j", "]", "*", "np", ".", "outer", "(", "a", ",", "a", ")", "\n", "c2", "+=", "d", "\n", "", "covs", "[", "i", "]", "=", "c1", "+", "c2", "\n", "\n", "", "return", "covs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator.mean_std": [[75, 88], ["BaseNNMixtureEstimator.BaseNNMixtureEstimator.mean_", "BaseNNMixtureEstimator.BaseNNMixtureEstimator.std_"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.std_"], ["", "def", "mean_std", "(", "self", ",", "x_cond", ",", "n_samples", "=", "None", ")", ":", "\n", "    ", "\"\"\" Computes Mean and Covariance of the fitted distribution conditioned on x_cond.\n        Computationally more efficient than calling mean and covariance computatio separately\n\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Means E[y|x] and Covariances Cov[y|x]\n    \"\"\"", "\n", "mean", "=", "self", ".", "mean_", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "std", "=", "self", ".", "std_", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator.sample": [[89, 108], ["BaseNNMixtureEstimator.BaseNNMixtureEstimator._handle_input_dimensionality", "numpy.all", "numpy.all", "BaseNNMixtureEstimator.BaseNNMixtureEstimator._sample_rows_same", "BaseNNMixtureEstimator.BaseNNMixtureEstimator._sample_rows_individually"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._sample_rows_same", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._sample_rows_individually"], ["", "def", "sample", "(", "self", ",", "X", ")", ":", "\n", "    ", "\"\"\" sample from the conditional mixture distributions - requires the model to be fitted\n\n      Args:\n        X: values to be conditioned on when sampling - numpy array of shape (n_instances, n_dim_x)\n\n      Returns: tuple (X, Y)\n        - X - the values to conditioned on that were provided as argument - numpy array of shape (n_samples, ndim_x)\n        - Y - conditional samples from the model p(y|x) - numpy array of shape (n_samples, ndim_y)\n    \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted to compute likelihood score\"", "\n", "assert", "self", ".", "can_sample", "\n", "\n", "X", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ")", "\n", "\n", "if", "np", ".", "all", "(", "np", ".", "all", "(", "X", "==", "X", "[", "0", ",", ":", "]", ",", "axis", "=", "1", ")", ")", ":", "\n", "      ", "return", "self", ".", "_sample_rows_same", "(", "X", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "_sample_rows_individually", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator.conditional_value_at_risk": [[109, 129], ["BaseNNMixtureEstimator.BaseNNMixtureEstimator._handle_input_dimensionality", "BaseNNMixtureEstimator.BaseNNMixtureEstimator.value_at_risk", "BaseNNMixtureEstimator.BaseNNMixtureEstimator._conditional_value_at_risk_mixture"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._conditional_value_at_risk_mixture"], ["", "", "def", "conditional_value_at_risk", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "n_samples", "=", "10", "**", "7", ")", ":", "\n", "    ", "\"\"\" Computes the Conditional Value-at-Risk (CVaR) / Expected Shortfall of a GMM. Only if ndim_y = 1\n\n        Based on formulas from section 2.3.2 in \"Expected shortfall for distributions in finance\",\n        Simon A. Broda, Marc S. Paolella, 2011\n\n       Args:\n         x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n         alpha: quantile percentage of the distribution\n\n       Returns:\n         CVaR values for each x to condition on - numpy array of shape (n_values)\n       \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Value at Risk can only be computed when ndim_y = 1\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "VaRs", "=", "self", ".", "value_at_risk", "(", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "return", "self", ".", "_conditional_value_at_risk_mixture", "(", "VaRs", ",", "x_cond", ",", "alpha", "=", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator.tail_risk_measures": [[130, 151], ["BaseNNMixtureEstimator.BaseNNMixtureEstimator.value_at_risk", "BaseNNMixtureEstimator.BaseNNMixtureEstimator._conditional_value_at_risk_mixture", "len"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._conditional_value_at_risk_mixture"], ["", "def", "tail_risk_measures", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "n_samples", "=", "10", "**", "7", ")", ":", "\n", "    ", "\"\"\" Computes the Value-at-Risk (VaR) and Conditional Value-at-Risk (CVaR)\n\n        Args:\n          x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n          alpha: quantile percentage of the distribution\n          n_samples: number of samples for monte carlo model_fitting\n\n        Returns:\n          - VaR values for each x to condition on - numpy array of shape (n_values)\n          - CVaR values for each x to condition on - numpy array of shape (n_values)\n        \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Value at Risk can only be computed when ndim_y = 1\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "VaRs", "=", "self", ".", "value_at_risk", "(", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "CVaRs", "=", "self", ".", "_conditional_value_at_risk_mixture", "(", "VaRs", ",", "x_cond", ",", "alpha", "=", "alpha", ")", "\n", "\n", "assert", "VaRs", ".", "shape", "==", "CVaRs", ".", "shape", "==", "(", "len", "(", "x_cond", ")", ",", ")", "\n", "return", "VaRs", ",", "CVaRs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._partial_fit": [[152, 178], ["range", "BaseNNMixtureEstimator.BaseNNMixtureEstimator.inference.update", "print", "BaseNNMixtureEstimator.BaseNNMixtureEstimator.sess.run", "BaseNNMixtureEstimator.BaseNNMixtureEstimator.inference.progbar.update", "len", "print", "BaseNNMixtureEstimator.BaseNNMixtureEstimator.pop", "len"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "_partial_fit", "(", "self", ",", "X", ",", "Y", ",", "n_epoch", "=", "1", ",", "eval_set", "=", "None", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    update model\n    \"\"\"", "\n", "# loop over epochs", "\n", "for", "i", "in", "range", "(", "n_epoch", ")", ":", "\n", "\n", "# run inference, update trainable variables of the model", "\n", "      ", "info_dict", "=", "self", ".", "inference", ".", "update", "(", "feed_dict", "=", "{", "self", ".", "X_ph", ":", "X", ",", "self", ".", "Y_ph", ":", "Y", ",", "self", ".", "train_phase", ":", "True", ",", "\n", "self", ".", "dropout_ph", ":", "self", ".", "dropout", "}", ")", "\n", "\n", "# compute evaluation loss", "\n", "if", "eval_set", "is", "not", "None", ":", "\n", "        ", "X_test", ",", "Y_test", "=", "eval_set", "\n", "info_dict", "[", "'eval_loss'", "]", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "inference", ".", "loss", ",", "feed_dict", "=", "{", "self", ".", "X_ph", ":", "X_test", ",", "self", ".", "Y_ph", ":", "Y_test", "}", ")", "\n", "\n", "# only print progress for the initial fit, not for additional updates", "\n", "", "if", "not", "self", ".", "fitted", "and", "verbose", ":", "\n", "        ", "self", ".", "inference", ".", "progbar", ".", "update", "(", "info_dict", ".", "pop", "(", "'t'", ")", ",", "info_dict", ")", "\n", "\n", "", "", "if", "verbose", ":", "\n", "      ", "train_loss", "=", "info_dict", "[", "'loss'", "]", "/", "len", "(", "Y", ")", "\n", "print", "(", "\"mean log-loss train: {:.4f}\"", ".", "format", "(", "train_loss", ")", ")", "\n", "if", "eval_set", "is", "not", "None", ":", "\n", "        ", "test_loss", "=", "info_dict", "[", "'eval_loss'", "]", "/", "len", "(", "Y_test", ")", "\n", "print", "(", "\"mean log-loss valid: {:.4f}\"", ".", "format", "(", "test_loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._conditional_value_at_risk_mixture": [[179, 203], ["BaseNNMixtureEstimator.BaseNNMixtureEstimator._get_mixture_components", "locs.reshape.reshape.reshape", "scales.reshape.reshape.reshape", "numpy.zeros", "range", "scipy.stats.norm.cdf", "scipy.stats.norm.pdf", "numpy.ma.masked_where", "numpy.ma.masked_where", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.MDN.MixtureDensityNetwork._get_mixture_components", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "", "", "def", "_conditional_value_at_risk_mixture", "(", "self", ",", "VaRs", ",", "x_cond", ",", "alpha", "=", "0.01", ",", ")", ":", "\n", "    ", "\"\"\"\n    Based on formulas from section 2.3.2 in \"Expected shortfall for distributions in finance\",\n    Simon A. Broda, Marc S. Paolella, 2011\n    \"\"\"", "\n", "\n", "weights", ",", "locs", ",", "scales", "=", "self", ".", "_get_mixture_components", "(", "x_cond", ")", "\n", "\n", "locs", "=", "locs", ".", "reshape", "(", "locs", ".", "shape", "[", ":", "2", "]", ")", "\n", "scales", "=", "scales", ".", "reshape", "(", "scales", ".", "shape", "[", ":", "2", "]", ")", "\n", "\n", "CVaRs", "=", "np", ".", "zeros", "(", "x_cond", ".", "shape", "[", "0", "]", ")", "\n", "\n", "c", "=", "(", "VaRs", "[", ":", ",", "None", "]", "-", "locs", ")", "/", "scales", "\n", "for", "i", "in", "range", "(", "x_cond", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "cdf", "=", "norm", ".", "cdf", "(", "c", "[", "i", "]", ")", "\n", "pdf", "=", "norm", ".", "pdf", "(", "c", "[", "i", "]", ")", "\n", "\n", "# mask very small values to avoid numerical instabilities", "\n", "cdf", "=", "np", ".", "ma", ".", "masked_where", "(", "cdf", "<", "10", "**", "-", "64", ",", "cdf", ")", "\n", "pdf", "=", "np", ".", "ma", ".", "masked_where", "(", "pdf", "<", "10", "**", "-", "64", ",", "pdf", ")", "\n", "\n", "CVaRs", "[", "i", "]", "=", "np", ".", "sum", "(", "(", "weights", "[", "i", "]", "*", "cdf", "/", "alpha", ")", "*", "(", "locs", "[", "i", "]", "-", "scales", "[", "i", "]", "*", "(", "pdf", "/", "cdf", ")", ")", ")", "\n", "", "return", "CVaRs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._sample_rows_same": [[204, 222], ["BaseNNMixtureEstimator.BaseNNMixtureEstimator._get_mixture_components", "weights.astype.astype.astype", "sklearn.mixture.GaussianMixture", "sklearn.mixture.GaussianMixture.fit", "sklearn.mixture.GaussianMixture.sample", "numpy.expand_dims", "numpy.sum", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.MDN.MixtureDensityNetwork._get_mixture_components", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample"], ["", "def", "_sample_rows_same", "(", "self", ",", "X", ")", ":", "\n", "    ", "\"\"\" uses efficient sklearn implementation to sample from gaussian mixture -> only works if all rows of X are the same\"\"\"", "\n", "weights", ",", "locs", ",", "scales", "=", "self", ".", "_get_mixture_components", "(", "np", ".", "expand_dims", "(", "X", "[", "0", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "# make sure that sum of weights < 1", "\n", "weights", "=", "weights", ".", "astype", "(", "np", ".", "float64", ")", "\n", "weights", "=", "weights", "/", "np", ".", "sum", "(", "weights", ")", "\n", "\n", "gmm", "=", "GaussianMixture", "(", "n_components", "=", "self", ".", "n_centers", ",", "covariance_type", "=", "'diag'", ",", "max_iter", "=", "5", ",", "tol", "=", "1e-1", ")", "\n", "gmm", ".", "fit", "(", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "100", ",", "self", ".", "ndim_y", ")", ")", ")", "# just pretending a fit", "\n", "# overriding the GMM parameters with own params", "\n", "gmm", ".", "converged_", "=", "True", "\n", "gmm", ".", "weights_", "=", "weights", "[", "0", "]", "\n", "gmm", ".", "means_", "=", "locs", "[", "0", "]", "\n", "gmm", ".", "covariances_", "=", "scales", "[", "0", "]", "\n", "y_sample", ",", "_", "=", "gmm", ".", "sample", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "assert", "y_sample", ".", "shape", "==", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", "\n", "return", "X", ",", "y_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._add_softmax_entropy_regularization": [[223, 230], ["tensorflow.reduce_mean", "tensorflow.placeholder_with_default", "tensorflow.losses.add_loss", "tensorflow.reduce_sum", "float", "tensorflow.multiply", "tensorflow.log"], "methods", ["None"], ["", "def", "_add_softmax_entropy_regularization", "(", "self", ")", ":", "\n", "# softmax entropy penalty -> regularization", "\n", "      ", "self", ".", "softmax_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "-", "tf", ".", "multiply", "(", "tf", ".", "log", "(", "self", ".", "weights", ")", ",", "self", ".", "weights", ")", ",", "axis", "=", "1", ")", ")", "\n", "self", ".", "entropy_reg_coef_ph", "=", "tf", ".", "placeholder_with_default", "(", "float", "(", "self", ".", "entropy_reg_coef", ")", ",", "name", "=", "'entropy_reg_coef'", ",", "\n", "shape", "=", "(", ")", ")", "\n", "self", ".", "softmax_entrop_loss", "=", "self", ".", "entropy_reg_coef_ph", "*", "self", ".", "softmax_entropy", "\n", "tf", ".", "losses", ".", "add_loss", "(", "self", ".", "softmax_entrop_loss", ",", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._sample_rows_individually": [[231, 242], ["BaseNNMixtureEstimator.BaseNNMixtureEstimator._get_mixture_components", "numpy.zeros", "range", "numpy.random.choice", "numpy.random.normal", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.MDN.MixtureDensityNetwork._get_mixture_components"], ["", "def", "_sample_rows_individually", "(", "self", ",", "X", ")", ":", "\n", "    ", "weights", ",", "locs", ",", "scales", "=", "self", ".", "_get_mixture_components", "(", "X", ")", "\n", "\n", "assert", "locs", ".", "shape", "[", "1", "]", "==", "scales", ".", "shape", "[", "1", "]", "==", "weights", ".", "shape", "[", "1", "]", "\n", "\n", "Y", "=", "np", ".", "zeros", "(", "shape", "=", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", ")", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "locs", ".", "shape", "[", "1", "]", ")", ",", "p", "=", "weights", "[", "i", ",", ":", "]", ")", "\n", "Y", "[", "i", ",", ":", "]", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "locs", "[", "i", ",", "idx", ",", ":", "]", ",", "scale", "=", "scales", "[", "i", ",", "idx", ",", ":", "]", ")", "\n", "", "assert", "X", ".", "shape", "[", "0", "]", "==", "Y", ".", "shape", "[", "0", "]", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator.cdf": [[243, 266], ["hasattr", "BaseNNMixtureEstimator.BaseNNMixtureEstimator._handle_input_dimensionality", "BaseNNMixtureEstimator.BaseNNMixtureEstimator._get_mixture_components", "numpy.zeros", "range", "range", "scipy.stats.multivariate_normal.cdf", "numpy.diag"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.MDN.MixtureDensityNetwork._get_mixture_components", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "cdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Predicts the conditional cumulative probability p(Y<=y|X=x). Requires the model to be fitted.\n\n       Args:\n         X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n         Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n       Returns:\n         conditional cumulative probability p(Y<=y|X=x) - numpy array of shape (n_query_samples, )\n\n    \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted to compute likelihood score\"", "\n", "assert", "hasattr", "(", "self", ",", "'_get_mixture_components'", ")", ",", "\"cdf computation requires _get_mixture_components method\"", "\n", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ",", "fitting", "=", "False", ")", "\n", "\n", "weights", ",", "locs", ",", "scales", "=", "self", ".", "_get_mixture_components", "(", "X", ")", "\n", "\n", "P", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "self", ".", "n_centers", ")", ":", "\n", "        ", "P", "[", "i", "]", "+=", "weights", "[", "i", ",", "j", "]", "*", "multivariate_normal", ".", "cdf", "(", "Y", "[", "i", "]", ",", "mean", "=", "locs", "[", "i", ",", "j", ",", ":", "]", ",", "cov", "=", "np", ".", "diag", "(", "scales", "[", "i", ",", "j", ",", ":", "]", ")", ")", "\n", "", "", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator.reset_fit": [[267, 275], ["tensorflow.reset_default_graph", "BaseNNMixtureEstimator.BaseNNMixtureEstimator._build_model"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator._build_model"], ["", "def", "reset_fit", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    resets all tensorflow objects and\n    :return:\n    \"\"\"", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "self", ".", "_build_model", "(", ")", "\n", "self", ".", "fitted", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._setup_inference_and_initialize": [[276, 290], ["tensorflow.get_default_session", "tensorflow.get_collection", "tensorflow.initializers.variables().run", "tensorflow.variable_scope", "cde.utils.tf_utils.map_inference.MAP_inference", "BaseNNMixtureEstimator.BaseNNMixtureEstimator.inference.initialize", "cde.utils.tf_utils.adamW.AdamWOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.initializers.variables", "tensorflow.trainable_variables"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "_setup_inference_and_initialize", "(", "self", ")", ":", "\n", "# setup inference procedure", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "# setup inference procedure", "\n", "      ", "self", ".", "inference", "=", "MAP_inference", "(", "scope", "=", "self", ".", "name", ",", "data", "=", "{", "self", ".", "mixture", ":", "self", ".", "y_input", "}", ")", "\n", "optimizer", "=", "AdamWOptimizer", "(", "weight_decay", "=", "self", ".", "weight_decay", ",", "learning_rate", "=", "5e-3", ")", "if", "self", ".", "weight_decay", "else", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "2e-3", ")", "\n", "self", ".", "inference", ".", "initialize", "(", "var_list", "=", "tf", ".", "trainable_variables", "(", "scope", "=", "self", ".", "name", ")", ",", "optimizer", "=", "optimizer", ",", "n_iter", "=", "self", ".", "n_training_epochs", ")", "\n", "\n", "", "self", ".", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "\n", "# initialize variables in scope", "\n", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "tf", ".", "initializers", ".", "variables", "(", "var_list", ",", "name", "=", "'init'", ")", ".", "run", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.CKDE.ConditionalKernelDensityEstimation.__init__": [[34, 49], ["numpy.random.RandomState"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "'CKDE'", ",", "ndim_x", "=", "None", ",", "ndim_y", "=", "None", ",", "bandwidth", "=", "'cv_ml'", ",", "n_jobs", "=", "-", "1", ",", "random_seed", "=", "None", ")", ":", "\n", "    ", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "random_seed", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "ndim_x", "=", "ndim_x", "\n", "self", ".", "ndim_y", "=", "ndim_y", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "\n", "assert", "bandwidth", "in", "[", "'normal_reference'", ",", "'cv_ml'", ",", "'cv_ls'", "]", "\n", "self", ".", "bandwidth", "=", "bandwidth", "\n", "\n", "self", ".", "fitted", "=", "False", "\n", "self", ".", "can_sample", "=", "False", "\n", "self", ".", "has_pdf", "=", "True", "\n", "self", ".", "has_cdf", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.CKDE.ConditionalKernelDensityEstimation.fit": [[51, 69], ["CKDE.ConditionalKernelDensityEstimation._handle_input_dimensionality", "statsmodels.nonparametric.KDEMultivariateConditional", "numpy.mean", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Since CKDE is a lazy learner, fit just stores the provided training data (X,Y)\n\n      Args:\n        X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n        Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n    \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ",", "fitting", "=", "True", ")", "\n", "self", ".", "y_mean", ",", "self", ".", "y_std", "=", "np", ".", "mean", "(", "Y", ",", "axis", "=", "0", ")", ",", "np", ".", "std", "(", "Y", ",", "axis", "=", "0", ")", "\n", "\n", "dep_type", "=", "'c'", "*", "self", ".", "ndim_y", "\n", "indep_type", "=", "'c'", "*", "self", ".", "ndim_x", "\n", "self", ".", "sm_kde", "=", "sm", ".", "nonparametric", ".", "KDEMultivariateConditional", "(", "endog", "=", "[", "Y", "]", ",", "exog", "=", "[", "X", "]", ",", "dep_type", "=", "dep_type", ",", "indep_type", "=", "indep_type", ",", "bw", "=", "self", ".", "bandwidth", ")", "\n", "\n", "self", ".", "fitted", "=", "True", "\n", "self", ".", "can_sample", "=", "False", "\n", "self", ".", "has_cdf", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.CKDE.ConditionalKernelDensityEstimation.pdf": [[70, 88], ["CKDE.ConditionalKernelDensityEstimation._handle_input_dimensionality", "cde.utils.async_executor.execute_batch_async_pdf", "CKDE.ConditionalKernelDensityEstimation.sm_kde.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.execute_batch_async_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Predicts the conditional likelihood p(y|x). Requires the model to be fitted.\n\n       Args:\n         X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n         Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n       Returns:\n          conditional likelihood p(y|x) - numpy array of shape (n_query_samples, )\n\n     \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "if", "n_samples", ">=", "MULTIPROC_THRESHOLD", ":", "\n", "      ", "return", "execute_batch_async_pdf", "(", "self", ".", "sm_kde", ".", "pdf", ",", "Y", ",", "X", ",", "n_jobs", "=", "self", ".", "n_jobs", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "sm_kde", ".", "pdf", "(", "endog_predict", "=", "Y", ",", "exog_predict", "=", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.CKDE.ConditionalKernelDensityEstimation.cdf": [[89, 107], ["CKDE.ConditionalKernelDensityEstimation._handle_input_dimensionality", "cde.utils.async_executor.execute_batch_async_pdf", "CKDE.ConditionalKernelDensityEstimation.sm_kde.cdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.execute_batch_async_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "", "def", "cdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Predicts the conditional cumulative probability p(Y<=y|X=x). Requires the model to be fitted.\n\n    Args:\n      X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n      Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n    Returns:\n      conditional cumulative probability p(Y<=y|X=x) - numpy array of shape (n_query_samples, )\n\n    \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted to compute likelihood score\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "if", "n_samples", ">", "MULTIPROC_THRESHOLD", ":", "\n", "      ", "execute_batch_async_pdf", "(", "self", ".", "sm_kde", ".", "cdf", ",", "Y", ",", "X", ",", "n_jobs", "=", "self", ".", "n_jobs", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "sm_kde", ".", "cdf", "(", "endog_predict", "=", "Y", ",", "exog_predict", "=", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.CKDE.ConditionalKernelDensityEstimation.sample": [[108, 110], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ",", "X", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\"Conditional Kernel Density Estimation is a lazy learner and does not support sampling\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.CKDE.ConditionalKernelDensityEstimation._param_grid": [[111, 119], ["numpy.mean", "numpy.asarray"], "methods", ["None"], ["", "def", "_param_grid", "(", "self", ")", ":", "\n", "    ", "mean_std_y", "=", "np", ".", "mean", "(", "self", ".", "y_std", ")", "\n", "bandwidths", "=", "np", ".", "asarray", "(", "[", "0.01", ",", "0.1", ",", "0.5", ",", "1", ",", "2", ",", "5", "]", ")", "*", "mean_std_y", "\n", "\n", "param_grid", "=", "{", "\n", "\"bandwidth\"", ":", "bandwidths", "\n", "}", "\n", "return", "param_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.CKDE.ConditionalKernelDensityEstimation.__str__": [[121, 124], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "\"\\n Estimator type: {}\\n ndim_x: {}\\n ndim_y: {}\\n bandwidth: {}\\n\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "ndim_x", ",", "self", ".", "ndim_y", ",", "\n", "self", ".", "bandwidth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.CKDE.ConditionalKernelDensityEstimation.__unicode__": [[125, 127], ["CKDE.ConditionalKernelDensityEstimation.__str__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__str__"], ["", "def", "__unicode__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.fit": [[12, 20], ["None"], "methods", ["None"], ["def", "fit", "(", "self", ",", "X", ",", "Y", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\" Fits the conditional density model with provided data\n\n      Args:\n        X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n        Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.eval_by_cv": [[21, 40], ["BaseDensityEstimator.BaseDensityEstimator._handle_input_dimensionality", "sklearn.model_selection.cross_validate", "np.nanargmax", "BaseDensityEstimator.BaseDensityEstimator.set_params", "BaseDensityEstimator.BaseDensityEstimator.fit", "estimator.get_params"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_params"], ["", "def", "eval_by_cv", "(", "self", ",", "X", ",", "Y", ",", "n_splits", "=", "5", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\" Fits the conditional density model with cross-validation by using the score function of the BaseDensityEstimator for\n    scoring the various splits.\n\n    Args:\n      X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n      Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n      n_splits: number of cross-validation folds (positive integer)\n      verbose: the verbosity level\n    \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ",", "fitting", "=", "True", ")", "\n", "cv_results", "=", "cross_validate", "(", "self", ",", "X", "=", "X", ",", "y", "=", "Y", ",", "cv", "=", "n_splits", ",", "return_estimator", "=", "True", ",", "verbose", "=", "verbose", ")", "\n", "\n", "test_scores", "=", "cv_results", "[", "'test_score'", "]", "\n", "test_scores_max_idx", "=", "np", ".", "nanargmax", "(", "test_scores", ")", "\n", "estimator", "=", "cv_results", "[", "'estimator'", "]", "[", "test_scores_max_idx", "]", "\n", "\n", "self", ".", "set_params", "(", "**", "estimator", ".", "get_params", "(", ")", ")", "\n", "self", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.fit_by_cv": [[41, 79], ["np.std", "np.std", "sklearn.model_selection.GridSearchCV", "BaseDensityEstimator.BaseDensityEstimator.set_params", "BaseDensityEstimator.BaseDensityEstimator.fit", "BaseDensityEstimator.BaseDensityEstimator._param_grid", "warnings.catch_warnings", "warnings.simplefilter", "sklearn.model_selection.GridSearchCV.fit", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator._param_grid", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit"], ["", "def", "fit_by_cv", "(", "self", ",", "X", ",", "Y", ",", "n_folds", "=", "3", ",", "param_grid", "=", "None", ",", "verbose", "=", "True", ",", "n_jobs", "=", "-", "1", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\" Fits the conditional density model with hyperparameter search and cross-validation.\n    - Determines the best hyperparameter configuration from a pre-defined set using cross-validation. Thereby,\n      the conditional log-likelihood is used for simulation_eval.\n    - Fits the model with the previously selected hyperparameter configuration\n    Args:\n      X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n      Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n      n_folds: number of cross-validation folds (positive integer)\n      param_grid: (optional) a dictionary with the hyperparameters of the model as key and and a list of respective \\\n                  parametrizations as value. The hyperparameter search is performed over the cartesian product of \\\n                  the provided lists.\n                  Example:\n                  {\"n_centers\": [20, 50, 100, 200],\n                   \"center_sampling_method\": [\"agglomerative\", \"k_means\", \"random\"],\n                   \"keep_edges\": [True, False]\n                  }\n    \"\"\"", "\n", "\n", "# save properties of data", "\n", "self", ".", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "x_std", "=", "np", ".", "std", "(", "X", ",", "axis", "=", "0", ")", "\n", "self", ".", "y_std", "=", "np", ".", "std", "(", "Y", ",", "axis", "=", "0", ")", "\n", "\n", "if", "param_grid", "is", "None", ":", "\n", "      ", "param_grid", "=", "self", ".", "_param_grid", "(", ")", "\n", "\n", "", "cv_model", "=", "GridSearchCV", "(", "self", ",", "param_grid", ",", "n_jobs", "=", "n_jobs", ",", "refit", "=", "True", ",", "cv", "=", "n_folds", ",", "verbose", "=", "verbose", ",", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "      ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "# don't print division by zero warning", "\n", "cv_model", ".", "fit", "(", "X", ",", "Y", ")", "\n", "", "best_params", "=", "cv_model", ".", "best_params_", "\n", "if", "verbose", ":", "print", "(", "\"Cross-Validation terminated\"", ")", "\n", "if", "verbose", ":", "print", "(", "\"Best likelihood score: %.4f\"", "%", "cv_model", ".", "best_score_", ")", "\n", "if", "verbose", ":", "print", "(", "\"Best params:\"", ",", "best_params", ")", "\n", "self", ".", "set_params", "(", "**", "best_params", ")", "\n", "self", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "best_params", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.pdf": [[80, 92], ["None"], "methods", ["None"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Predicts the conditional likelihood p(y|x). Requires the model to be fitted.\n\n       Args:\n         X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n         Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n       Returns:\n          conditional likelihood p(y|x) - numpy array of shape (n_query_samples, )\n\n     \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.log_pdf": [[93, 109], ["warnings.catch_warnings", "warnings.simplefilter", "np.log", "BaseDensityEstimator.BaseDensityEstimator.pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf"], ["", "def", "log_pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Predicts the conditional log-probability log p(y|x). Requires the model to be fitted.\n\n       Args:\n         X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n         Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n       Returns:\n          conditional log-probability log p(y|x) - numpy array of shape (n_query_samples, )\n\n     \"\"\"", "\n", "# This method is numerically unfavorable and should be overwritten with a numerically stable method", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "      ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "log_prob", "=", "np", ".", "log", "(", "self", ".", "pdf", "(", "X", ",", "Y", ")", ")", "\n", "", "return", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator._param_grid": [[110, 112], ["None"], "methods", ["None"], ["", "def", "_param_grid", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.score": [[113, 124], ["np.mean", "BaseDensityEstimator.BaseDensityEstimator.log_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.log_pdf"], ["", "def", "score", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\"Computes the mean conditional log-likelihood of the provided data (X, Y)\n\n    Args:\n      X: numpy array to be conditioned on - shape: (n_query_samples, n_dim_x)\n      Y: numpy array of y targets - shape: (n_query_samples, n_dim_y)\n\n    Returns:\n      average log likelihood of data\n    \"\"\"", "\n", "return", "np", ".", "mean", "(", "self", ".", "log_pdf", "(", "X", ",", "Y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_": [[125, 141], ["BaseDensityEstimator.BaseDensityEstimator._handle_input_dimensionality", "BaseDensityEstimator.BaseDensityEstimator._mean_pdf", "BaseDensityEstimator.BaseDensityEstimator._mean_mc"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._mean_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._mean_mc"], ["", "def", "mean_", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Mean of the fitted distribution conditioned on x_cond\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Means E[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y)\n    \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "if", "self", ".", "has_pdf", ":", "\n", "      ", "return", "self", ".", "_mean_pdf", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "_mean_mc", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.std_": [[142, 155], ["BaseDensityEstimator.BaseDensityEstimator._handle_input_dimensionality", "BaseDensityEstimator.BaseDensityEstimator._std_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._std_pdf"], ["", "", "def", "std_", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Standard deviation of the fitted distribution conditioned on x_cond\n\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Standard deviations  sqrt(Var[y|x]) corresponding to x_cond - numpy array of shape (n_values, ndim_y)\n    \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "return", "self", ".", "_std_pdf", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance": [[156, 169], ["BaseDensityEstimator.BaseDensityEstimator._handle_input_dimensionality", "BaseDensityEstimator.BaseDensityEstimator._covariance_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._covariance_pdf"], ["", "def", "covariance", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Covariance of the fitted distribution conditioned on x_cond\n\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Covariances Cov[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y, ndim_y)\n    \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "return", "self", ".", "_covariance_pdf", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.skewness": [[170, 183], ["BaseDensityEstimator.BaseDensityEstimator._handle_input_dimensionality", "BaseDensityEstimator.BaseDensityEstimator._skewness_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._skewness_pdf"], ["", "def", "skewness", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Skewness of the fitted distribution conditioned on x_cond\n\n       Args:\n         x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n       Returns:\n         Skewness Skew[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y, ndim_y)\n       \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "return", "self", ".", "_skewness_pdf", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.kurtosis": [[184, 197], ["BaseDensityEstimator.BaseDensityEstimator._handle_input_dimensionality", "BaseDensityEstimator.BaseDensityEstimator._kurtosis_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._kurtosis_pdf"], ["", "def", "kurtosis", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Kurtosis of the fitted distribution conditioned on x_cond\n\n       Args:\n         x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n       Returns:\n         Kurtosis Kurt[y|x] corresponding to x_cond - numpy array of shape (n_values, ndim_y, ndim_y)\n       \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "return", "self", ".", "_kurtosis_pdf", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_std": [[198, 211], ["BaseDensityEstimator.BaseDensityEstimator.mean_", "BaseDensityEstimator.BaseDensityEstimator._std_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._std_pdf"], ["", "def", "mean_std", "(", "self", ",", "x_cond", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Computes Mean and Covariance of the fitted distribution conditioned on x_cond.\n        Computationally more efficient than calling mean and covariance computatio separately\n\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n\n    Returns:\n      Means E[y|x] and Covariances Cov[y|x]\n    \"\"\"", "\n", "mean", "=", "self", ".", "mean_", "(", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "std", "=", "self", ".", "_std_pdf", "(", "x_cond", ",", "n_samples", "=", "n_samples", ",", "mean", "=", "mean", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk": [[212, 235], ["BaseDensityEstimator.BaseDensityEstimator._quantile_cdf", "np.isnan().any", "BaseDensityEstimator.BaseDensityEstimator._quantile_mc", "BaseDensityEstimator.BaseDensityEstimator._quantile_mc", "NotImplementedError", "np.isnan"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._quantile_cdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._quantile_mc", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._quantile_mc"], ["", "def", "value_at_risk", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Computes the Value-at-Risk (VaR) of the fitted distribution. Only if ndim_y = 1\n\n    Args:\n      x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n      alpha: quantile percentage of the distribution\n\n    Returns:\n       VaR values for each x to condition on - numpy array of shape (n_values)\n    \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Value at Risk can only be computed when ndim_y = 1\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "if", "self", ".", "has_cdf", ":", "\n", "      ", "VaR", "=", "self", ".", "_quantile_cdf", "(", "x_cond", ",", "alpha", "=", "alpha", ")", "\n", "if", "np", ".", "isnan", "(", "VaR", ")", ".", "any", "(", ")", "and", "self", ".", "can_sample", ":", "# try with sampling if failed", "\n", "        ", "VaR", "=", "self", ".", "_quantile_mc", "(", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "", "", "elif", "self", ".", "can_sample", ":", "\n", "      ", "VaR", "=", "self", ".", "_quantile_mc", "(", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "VaR", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.conditional_value_at_risk": [[236, 259], ["BaseDensityEstimator.BaseDensityEstimator._handle_input_dimensionality", "BaseDensityEstimator.BaseDensityEstimator.value_at_risk", "BaseDensityEstimator.BaseDensityEstimator._conditional_value_at_risk_mc_pdf", "BaseDensityEstimator.BaseDensityEstimator._conditional_value_at_risk_sampling", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._conditional_value_at_risk_mc_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._conditional_value_at_risk_sampling"], ["", "def", "conditional_value_at_risk", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Computes the Conditional Value-at-Risk (CVaR) / Expected Shortfall of the fitted distribution. Only if ndim_y = 1\n\n       Args:\n         x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n         alpha: quantile percentage of the distribution\n\n       Returns:\n         CVaR values for each x to condition on - numpy array of shape (n_values)\n       \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Value at Risk can only be computed when ndim_y = 1\"", "\n", "x_cond", "=", "self", ".", "_handle_input_dimensionality", "(", "x_cond", ")", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "VaRs", "=", "self", ".", "value_at_risk", "(", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "\n", "if", "self", ".", "has_pdf", ":", "\n", "      ", "return", "self", ".", "_conditional_value_at_risk_mc_pdf", "(", "VaRs", ",", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "", "elif", "self", ".", "can_sample", ":", "\n", "      ", "return", "self", ".", "_conditional_value_at_risk_sampling", "(", "VaRs", ",", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\"Distribution object must either support pdf or sampling in order to compute CVaR\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.get_configuration": [[260, 282], ["super().get_params", "hasattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_params"], ["", "", "def", "get_configuration", "(", "self", ",", "deep", "=", "True", ")", ":", "\n", "    ", "\"\"\" Get parameter configuration for this estimator.\n\n    Args:\n      deep: boolean, optional If True, will return the parameters for this estimator and \\\n             contained subobjects that are estimators.\n\n    Returns:\n      params - mapping of string to any Parameter names mapped to their values.\n\n    \"\"\"", "\n", "param_dict", "=", "super", "(", "BaseDensityEstimator", ",", "self", ")", ".", "get_params", "(", "deep", "=", "deep", ")", "\n", "param_dict", "[", "'estimator'", "]", "=", "self", ".", "__class__", ".", "__name__", "\n", "\n", "for", "x", "in", "[", "\"n_centers\"", ",", "\"center_sampling_method\"", ",", "\"x_noise_std\"", ",", "\"y_noise_std\"", ",", "\n", "\"random_seed\"", ",", "\"ndim_x\"", ",", "\"ndim_y\"", "]", ":", "\n", "      ", "if", "hasattr", "(", "self", ",", "x", ")", ":", "\n", "        ", "param_dict", "[", "x", "]", "=", "getattr", "(", "self", ",", "x", ")", "\n", "", "else", ":", "\n", "        ", "param_dict", "[", "x", "]", "=", "None", "\n", "\n", "", "", "return", "param_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.tail_risk_measures": [[283, 310], ["BaseDensityEstimator.BaseDensityEstimator.value_at_risk", "BaseDensityEstimator.BaseDensityEstimator._conditional_value_at_risk_mc_pdf", "BaseDensityEstimator.BaseDensityEstimator._conditional_value_at_risk_sampling", "NotImplementedError", "len"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.value_at_risk", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._conditional_value_at_risk_mc_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._conditional_value_at_risk_sampling"], ["", "def", "tail_risk_measures", "(", "self", ",", "x_cond", ",", "alpha", "=", "0.01", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" Computes the Value-at-Risk (VaR) and Conditional Value-at-Risk (CVaR)\n\n        Args:\n          x_cond: different x values to condition on - numpy array of shape (n_values, ndim_x)\n          alpha: quantile percentage of the distribution\n          n_samples: number of samples for monte carlo model_fitting\n\n        Returns:\n          - VaR values for each x to condition on - numpy array of shape (n_values)\n          - CVaR values for each x to condition on - numpy array of shape (n_values)\n        \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted\"", "\n", "assert", "self", ".", "ndim_y", "==", "1", ",", "\"Value at Risk can only be computed when ndim_y = 1\"", "\n", "assert", "x_cond", ".", "ndim", "==", "2", "\n", "\n", "VaRs", "=", "self", ".", "value_at_risk", "(", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "\n", "if", "self", ".", "has_pdf", ":", "\n", "      ", "CVaRs", "=", "self", ".", "_conditional_value_at_risk_mc_pdf", "(", "VaRs", ",", "x_cond", ",", "alpha", "=", "alpha", ",", "n_samples", "=", "n_samples", ")", "\n", "", "elif", "self", ".", "can_sample", ":", "\n", "      ", "CVaRs", "=", "self", ".", "_conditional_value_at_risk_sampling", "(", "VaRs", ",", "x_cond", ",", "n_samples", "=", "n_samples", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\"Distribution object must either support pdf or sampling in order to compute CVaR\"", ")", "\n", "\n", "", "assert", "VaRs", ".", "shape", "==", "CVaRs", ".", "shape", "==", "(", "len", "(", "x_cond", ")", ",", ")", "\n", "return", "VaRs", ",", "CVaRs", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation.__init__": [[32, 53], ["numpy.random.RandomState"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "'LSCDE'", ",", "ndim_x", "=", "None", ",", "ndim_y", "=", "None", ",", "center_sampling_method", "=", "'k_means'", ",", "\n", "bandwidth", "=", "0.5", ",", "n_centers", "=", "500", ",", "regularization", "=", "1.0", ",", "\n", "keep_edges", "=", "True", ",", "n_jobs", "=", "-", "1", ",", "random_seed", "=", "None", ")", ":", "\n", "\n", "    ", "self", ".", "name", "=", "name", "\n", "self", ".", "ndim_x", "=", "ndim_x", "\n", "self", ".", "ndim_y", "=", "ndim_y", "\n", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "random_seed", ")", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "\n", "self", ".", "center_sampling_method", "=", "center_sampling_method", "\n", "self", ".", "n_centers", "=", "n_centers", "\n", "self", ".", "keep_edges", "=", "keep_edges", "\n", "self", ".", "bandwidth", "=", "bandwidth", "\n", "self", ".", "regularization", "=", "regularization", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "\n", "self", ".", "fitted", "=", "False", "\n", "self", ".", "can_sample", "=", "True", "\n", "self", ".", "has_pdf", "=", "True", "\n", "self", ".", "has_cdf", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._build_model": [[54, 76], ["numpy.concatenate", "cde.utils.center_point_select.sample_center_points", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std", "min", "list", "scipy.multivariate_normal", "LSCDE.LSConditionalDensityEstimation._normalize"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.center_point_select.sample_center_points", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._normalize"], ["", "def", "_build_model", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "# save mean and variance of data for normalization", "\n", "    ", "self", ".", "x_mean", ",", "self", ".", "y_mean", "=", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", ",", "np", ".", "mean", "(", "Y", ",", "axis", "=", "0", ")", "\n", "self", ".", "x_std", ",", "self", ".", "y_std", "=", "np", ".", "std", "(", "X", ",", "axis", "=", "0", ")", ",", "np", ".", "std", "(", "Y", ",", "axis", "=", "0", ")", "\n", "\n", "# get locations of the gaussian kernel centers", "\n", "if", "self", ".", "center_sampling_method", "==", "'all'", ":", "\n", "      ", "self", ".", "n_centers", "=", "X", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "n_centers", "=", "min", "(", "self", ".", "n_centers", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "n_locs", "=", "self", ".", "n_centers", "\n", "X_Y_normalized", "=", "np", ".", "concatenate", "(", "list", "(", "self", ".", "_normalize", "(", "X", ",", "Y", ")", ")", ",", "axis", "=", "1", ")", "\n", "centroids", "=", "sample_center_points", "(", "X_Y_normalized", ",", "method", "=", "self", ".", "center_sampling_method", ",", "k", "=", "n_locs", ",", "\n", "keep_edges", "=", "self", ".", "keep_edges", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "self", ".", "centr_x", "=", "centroids", "[", ":", ",", "0", ":", "self", ".", "ndim_x", "]", "\n", "self", ".", "centr_y", "=", "centroids", "[", ":", ",", "self", ".", "ndim_x", ":", "]", "\n", "\n", "#prepare gaussians for sampling", "\n", "self", ".", "gaussians_y", "=", "[", "stats", ".", "multivariate_normal", "(", "mean", "=", "center", ",", "cov", "=", "self", ".", "bandwidth", ")", "for", "center", "in", "self", ".", "centr_y", "]", "\n", "\n", "assert", "self", ".", "centr_x", ".", "shape", "==", "(", "n_locs", ",", "self", ".", "ndim_x", ")", "and", "self", ".", "centr_y", ".", "shape", "==", "(", "n_locs", ",", "self", ".", "ndim_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation.fit": [[77, 106], ["LSCDE.LSConditionalDensityEstimation._handle_input_dimensionality", "LSCDE.LSConditionalDensityEstimation._build_model", "LSCDE.LSConditionalDensityEstimation._normalize", "numpy.mean", "numpy.mean", "cde.utils.misc.norm_along_axis_1", "numpy.linalg.solve", "LSCDE.LSConditionalDensityEstimation._gaussian_kernel", "cde.utils.misc.norm_along_axis_1", "numpy.exp", "numpy.add.outer", "numpy.sqrt", "numpy.identity"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator._build_model", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._normalize", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.norm_along_axis_1", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._gaussian_kernel", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.norm_along_axis_1"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Fits the conditional density model with provided data\n\n      Args:\n        X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n        Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n    \"\"\"", "\n", "# assert that both X an Y are 2D arrays with shape (n_samples, n_dim)", "\n", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ",", "fitting", "=", "True", ")", "\n", "self", ".", "ndim_y", ",", "self", ".", "ndim_x", "=", "Y", ".", "shape", "[", "1", "]", ",", "X", ".", "shape", "[", "1", "]", "\n", "\n", "self", ".", "_build_model", "(", "X", ",", "Y", ")", "\n", "\n", "X_normalized", ",", "Y_normalized", "=", "self", ".", "_normalize", "(", "X", ",", "Y", ")", "\n", "\n", "# determine the kernel weights alpha", "\n", "self", ".", "h", "=", "np", ".", "mean", "(", "self", ".", "_gaussian_kernel", "(", "X_normalized", ",", "Y_normalized", ")", ",", "axis", "=", "0", ")", "\n", "\n", "a", "=", "np", ".", "mean", "(", "norm_along_axis_1", "(", "X_normalized", ",", "self", ".", "centr_x", ")", ",", "axis", "=", "0", ")", "\n", "b", "=", "norm_along_axis_1", "(", "self", ".", "centr_y", ",", "self", ".", "centr_y", ")", "\n", "eta", "=", "2", "*", "np", ".", "add", ".", "outer", "(", "a", ",", "a", ")", "+", "b", "\n", "\n", "self", ".", "H", "=", "(", "np", ".", "sqrt", "(", "np", ".", "pi", ")", "*", "self", ".", "bandwidth", ")", "**", "self", ".", "ndim_y", "*", "np", ".", "exp", "(", "-", "eta", "/", "(", "5", "*", "self", ".", "bandwidth", "**", "2", ")", ")", "\n", "\n", "self", ".", "alpha", "=", "np", ".", "linalg", ".", "solve", "(", "self", ".", "H", "+", "self", ".", "regularization", "*", "np", ".", "identity", "(", "self", ".", "n_centers", ")", ",", "self", ".", "h", ")", "\n", "self", ".", "alpha", "[", "self", ".", "alpha", "<=", "0", "]", "=", "1e-10", "# set to small value instead of 0 for numerical stability", "\n", "\n", "self", ".", "fitted", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation.pdf": [[107, 127], ["LSCDE.LSConditionalDensityEstimation._handle_input_dimensionality", "cde.utils.async_executor.execute_batch_async_pdf", "LSCDE.LSConditionalDensityEstimation._pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.execute_batch_async_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._pdf"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Predicts the conditional density p(y|x). Requires the model to be fitted.\n\n       Args:\n         X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n         Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n       Returns:\n          conditional probability density p(y|x) - numpy array of shape (n_query_samples, )\n\n     \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted for predictions\"", "\n", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "if", "n_samples", ">=", "MULTIPROC_THRESHOLD", ":", "\n", "      ", "return", "execute_batch_async_pdf", "(", "self", ".", "_pdf", ",", "X", ",", "Y", ",", "n_jobs", "=", "self", ".", "n_jobs", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "_pdf", "(", "X", ",", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation.log_pdf": [[128, 148], ["LSCDE.LSConditionalDensityEstimation._handle_input_dimensionality", "cde.utils.async_executor.execute_batch_async_pdf", "LSCDE.LSConditionalDensityEstimation._log_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.execute_batch_async_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._log_pdf"], ["", "", "def", "log_pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Predicts the conditional log-probability log p(y|x). Requires the model to be fitted.\n\n          Args:\n            X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n            Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n          Returns:\n             conditional log-probability density log p(y|x) - numpy array of shape (n_query_samples, )\n\n        \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted for predictions\"", "\n", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ")", "\n", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "if", "n_samples", ">=", "MULTIPROC_THRESHOLD", ":", "\n", "      ", "return", "execute_batch_async_pdf", "(", "self", ".", "_log_pdf", ",", "X", ",", "Y", ",", "n_jobs", "=", "self", ".", "n_jobs", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "_log_pdf", "(", "X", ",", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation.mean_std": [[149, 171], ["LSCDE.LSConditionalDensityEstimation._handle_input_dimensionality", "numpy.multiply", "print", "LSCDE.LSConditionalDensityEstimation._gaussian_kernel", "numpy.sqrt", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._gaussian_kernel"], ["", "", "def", "mean_std", "(", "self", ",", "X", ",", "n_samples", "=", "10", "**", "6", ")", ":", "\n", "    ", "\"\"\" sample from the conditional mixture distributions - requires the model to be fitted\n\n    Args:\n      X: values to be conditioned on  - numpy array of shape (n_instances, n_dim_x)\n\n    Returns: tuple (mean, stddev)\n      - mean -  numpy array of shape (n_samples, ndim_y)\n      - stddev - - numpy array of shape (n_samples, ndim_y)\n    \"\"\"", "\n", "assert", "self", ".", "fitted", "\n", "X", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ")", "\n", "\n", "fact", "=", "np", ".", "multiply", "(", "self", ".", "alpha", ",", "self", ".", "_gaussian_kernel", "(", "X", ")", ")", "\n", "fact", "=", "fact", "/", "np", ".", "sum", "(", "fact", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "\n", "mean", "=", "fact", "@", "self", ".", "centr_y", "\n", "print", "(", "fact", ".", "shape", ",", "self", ".", "centr_y", ".", "shape", ",", "mean", ".", "shape", ")", "\n", "#return", "\n", "expected_variance", "=", "self", ".", "bandwidth", "**", "2", "\n", "variance_expectations", "=", "(", "fact", "@", "(", "self", ".", "centr_y", "**", "2", ")", ")", "-", "mean", "**", "2", "\n", "return", "(", "mean", ",", "np", ".", "sqrt", "(", "expected_variance", "+", "variance_expectations", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation.sample": [[172, 195], ["LSCDE.LSConditionalDensityEstimation._handle_input_dimensionality", "numpy.multiply", "numpy.zeros", "range", "LSCDE.LSConditionalDensityEstimation._gaussian_kernel", "scipy.rv_discrete", "scipy.rv_discrete.rvs", "LSCDE.LSConditionalDensityEstimation.gaussians_y[].rvs", "numpy.sum", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._gaussian_kernel"], ["", "def", "sample", "(", "self", ",", "X", ")", ":", "\n", "    ", "\"\"\" sample from the conditional mixture distributions - requires the model to be fitted\n\n    Args:\n      X: values to be conditioned on when sampling - numpy array of shape (n_instances, n_dim_x)\n\n    Returns: tuple (X, Y)\n      - X - the values to conditioned on that were provided as argument - numpy array of shape (n_samples, ndim_x)\n      - Y - conditional samples from the model p(y|x) - numpy array of shape (n_samples, ndim_y)\n    \"\"\"", "\n", "assert", "self", ".", "fitted", "\n", "X", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ")", "\n", "\n", "weights", "=", "np", ".", "multiply", "(", "self", ".", "alpha", ",", "self", ".", "_gaussian_kernel", "(", "X", ")", ")", "\n", "weights", "=", "weights", "/", "np", ".", "sum", "(", "weights", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "\n", "Y", "=", "np", ".", "zeros", "(", "shape", "=", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "ndim_y", ")", ")", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "discrete_dist", "=", "stats", ".", "rv_discrete", "(", "values", "=", "(", "range", "(", "weights", ".", "shape", "[", "1", "]", ")", ",", "weights", "[", "i", ",", ":", "]", ")", ")", "\n", "idx", "=", "discrete_dist", ".", "rvs", "(", ")", "\n", "Y", "[", "i", ",", ":", "]", "=", "self", ".", "gaussians_y", "[", "idx", "]", ".", "rvs", "(", ")", "\n", "\n", "", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._pdf": [[196, 198], ["numpy.exp", "LSCDE.LSConditionalDensityEstimation._log_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._log_pdf"], ["", "def", "_pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "   ", "return", "np", ".", "exp", "(", "self", ".", "_log_pdf", "(", "X", ",", "Y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._log_pdf": [[199, 206], ["LSCDE.LSConditionalDensityEstimation._normalize", "scipy.special.logsumexp", "numpy.squeeze", "scipy.special.logsumexp", "numpy.log", "LSCDE.LSConditionalDensityEstimation._log_gaussian_kernel", "numpy.sum", "numpy.log", "numpy.log", "LSCDE.LSConditionalDensityEstimation._log_gaussian_kernel", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._normalize", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._log_gaussian_kernel", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._log_gaussian_kernel"], ["", "def", "_log_pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "X_normalized", ",", "Y_normalized", "=", "self", ".", "_normalize", "(", "X", ",", "Y", ")", "\n", "log_p", "=", "logsumexp", "(", "np", ".", "log", "(", "self", ".", "alpha", ".", "T", ")", "+", "self", ".", "_log_gaussian_kernel", "(", "X_normalized", ",", "Y_normalized", ")", ",", "axis", "=", "1", ")", "\n", "log_normalization", "=", "(", "0.5", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "+", "np", ".", "log", "(", "self", ".", "bandwidth", ")", ")", "*", "self", ".", "ndim_y", "+", "logsumexp", "(", "np", ".", "log", "(", "self", ".", "alpha", ".", "T", ")", "+", "self", ".", "_log_gaussian_kernel", "(", "X_normalized", ")", ",", "axis", "=", "1", ")", "\n", "\n", "return", "np", ".", "squeeze", "(", "log_p", "-", "log_normalization", "-", "np", ".", "sum", "(", "np", ".", "log", "(", "self", ".", "y_std", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._normalize": [[207, 211], ["None"], "methods", ["None"], ["", "def", "_normalize", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "X_normalized", "=", "(", "X", "-", "self", ".", "x_mean", ")", "/", "self", ".", "x_std", "\n", "Y_normalized", "=", "(", "Y", "-", "self", ".", "y_mean", ")", "/", "self", ".", "y_std", "\n", "return", "X_normalized", ",", "Y_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._gaussian_kernel": [[212, 220], ["numpy.exp", "LSCDE.LSConditionalDensityEstimation._log_gaussian_kernel"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._log_gaussian_kernel"], ["", "def", "_gaussian_kernel", "(", "self", ",", "X", ",", "Y", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    if Y is set returns the product of the gaussian kernels for X and Y, else only the gaussian kernel for X\n    :param X: numpy array of size (n_samples, ndim_x)\n    :param Y: numpy array of size (n_samples, ndim_y)\n    :return: phi -  numpy array of size (n_samples, n_centers)\n    \"\"\"", "\n", "return", "np", ".", "exp", "(", "self", ".", "_log_gaussian_kernel", "(", "X", ",", "Y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._log_gaussian_kernel": [[221, 246], ["numpy.zeros", "range", "range", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.square", "numpy.square", "numpy.square"], "methods", ["None"], ["", "def", "_log_gaussian_kernel", "(", "self", ",", "X", ",", "Y", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    if Y is set returns the sum of the gaussian log-kernels for X and Y, else only the gaussian log-kernel for X\n    :param X: numpy array of size (n_samples, ndim_x)\n    :param Y: numpy array of size (n_samples, ndim_y)\n    :return: phi -  numpy array of size (n_samples, n_centers)\n    \"\"\"", "\n", "phi", "=", "np", ".", "zeros", "(", "shape", "=", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "n_centers", ")", ")", "\n", "\n", "if", "Y", "is", "not", "None", ":", "\n", "      ", "for", "i", "in", "range", "(", "phi", ".", "shape", "[", "1", "]", ")", ":", "\n", "\n", "#suqared distances from center point i", "\n", "        ", "sq_d_x", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "X", "-", "self", ".", "centr_x", "[", "i", ",", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "sq_d_y", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "Y", "-", "self", ".", "centr_y", "[", "i", ",", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "phi", "[", ":", ",", "i", "]", "=", "-", "sq_d_x", "/", "(", "2", "*", "self", ".", "bandwidth", "**", "2", ")", "-", "sq_d_y", "/", "(", "2", "*", "self", ".", "bandwidth", "**", "2", ")", "\n", "", "", "else", ":", "\n", "      ", "for", "i", "in", "range", "(", "phi", ".", "shape", "[", "1", "]", ")", ":", "\n", "# suqared distances from center point i", "\n", "        ", "sq_d_x", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "X", "-", "self", ".", "centr_x", "[", "i", ",", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "phi", "[", ":", ",", "i", "]", "=", "-", "sq_d_x", "/", "(", "2", "*", "self", ".", "bandwidth", "**", "2", ")", "\n", "\n", "", "", "assert", "phi", ".", "shape", "==", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "n_centers", ")", "\n", "return", "phi", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation._param_grid": [[247, 254], ["numpy.asarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "_param_grid", "(", "self", ")", ":", "\n", "    ", "param_grid", "=", "{", "\n", "\"n_centers\"", ":", "np", ".", "asarray", "(", "[", "100", ",", "500", ",", "1000", "]", ")", ",", "\n", "\"bandwidth\"", ":", "np", ".", "asarray", "(", "[", "0.1", ",", "0.2", ",", "0.5", ",", "0.7", ",", "1.0", "]", ")", ",", "\n", "\"regularization\"", ":", "np", ".", "asarray", "(", "[", "0.1", ",", "0.5", ",", "1.0", ",", "4.0", ",", "8.0", "]", ")", "\n", "}", "\n", "return", "param_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation.__str__": [[255, 258], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "\"\\nEstimator type: {}\\n center sampling method: {}\\n n_centers: {}\\n keep_edges: {}\\n bandwidth: {}\\n regularization: {}\\n \"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "center_sampling_method", ",", "self", ".", "n_centers", ",", "self", ".", "keep_edges", ",", "self", ".", "bandwidth", ",", "self", ".", "regularization", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation.__unicode__": [[259, 261], ["LSCDE.LSConditionalDensityEstimation.__str__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__str__"], ["", "def", "__unicode__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__str__", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.KMN.KernelMixtureNetwork.__init__": [[56, 113], ["cde.utils.serializable.Serializable.quick_init", "KMN.KernelMixtureNetwork._check_uniqueness_of_scope", "numpy.random.RandomState", "tensorflow.set_random_seed", "len", "KMN.KernelMixtureNetwork._build_model", "locals", "numpy.array", "numpy.log", "type", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._check_uniqueness_of_scope", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator._build_model"], ["def", "__init__", "(", "self", ",", "name", ",", "ndim_x", ",", "ndim_y", ",", "center_sampling_method", "=", "'k_means'", ",", "n_centers", "=", "50", ",", "keep_edges", "=", "True", ",", "\n", "init_scales", "=", "'default'", ",", "hidden_sizes", "=", "(", "16", ",", "16", ")", ",", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "tanh", ",", "train_scales", "=", "True", ",", "\n", "n_training_epochs", "=", "1000", ",", "x_noise_std", "=", "None", ",", "y_noise_std", "=", "None", ",", "adaptive_noise_fn", "=", "None", ",", "entropy_reg_coef", "=", "0.0", ",", "\n", "weight_decay", "=", "0.0", ",", "weight_normalization", "=", "True", ",", "data_normalization", "=", "True", ",", "dropout", "=", "0.0", ",", "l2_reg", "=", "0.0", ",", "l1_reg", "=", "0.0", ",", "\n", "random_seed", "=", "None", ")", ":", "\n", "\n", "    ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "_check_uniqueness_of_scope", "(", "name", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "ndim_x", "=", "ndim_x", "\n", "self", ".", "ndim_y", "=", "ndim_y", "\n", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "random_seed", ")", "\n", "tf", ".", "set_random_seed", "(", "random_seed", ")", "\n", "\n", "self", ".", "n_centers", "=", "n_centers", "\n", "\n", "self", ".", "hidden_sizes", "=", "hidden_sizes", "\n", "self", ".", "hidden_nonlinearity", "=", "hidden_nonlinearity", "\n", "\n", "self", ".", "n_training_epochs", "=", "n_training_epochs", "\n", "\n", "# center sampling parameters", "\n", "self", ".", "center_sampling_method", "=", "center_sampling_method", "\n", "self", ".", "keep_edges", "=", "keep_edges", "\n", "\n", "# regularization parameters", "\n", "self", ".", "x_noise_std", "=", "x_noise_std", "\n", "self", ".", "y_noise_std", "=", "y_noise_std", "\n", "self", ".", "adaptive_noise_fn", "=", "adaptive_noise_fn", "\n", "self", ".", "entropy_reg_coef", "=", "entropy_reg_coef", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "l2_reg", "=", "l2_reg", "\n", "self", ".", "l1_reg", "=", "l1_reg", "\n", "self", ".", "weight_normalization", "=", "weight_normalization", "\n", "self", ".", "data_normalization", "=", "data_normalization", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "if", "type", "(", "init_scales", ")", "is", "str", "and", "init_scales", "==", "'default'", ":", "\n", "        ", "init_scales", "=", "np", ".", "array", "(", "[", "0.7", ",", "0.3", "]", ")", "\n", "\n", "", "self", ".", "n_scales", "=", "len", "(", "init_scales", ")", "\n", "self", ".", "train_scales", "=", "train_scales", "\n", "self", ".", "init_scales", "=", "init_scales", "\n", "# Transform scales so that the softplus will result in passed init_scales", "\n", "self", ".", "init_scales_softplus", "=", "[", "np", ".", "log", "(", "np", ".", "exp", "(", "s", ")", "-", "1", ")", "for", "s", "in", "init_scales", "]", "\n", "\n", "self", ".", "can_sample", "=", "True", "\n", "self", ".", "has_pdf", "=", "True", "\n", "self", ".", "has_cdf", "=", "True", "\n", "\n", "self", ".", "fitted", "=", "False", "\n", "\n", "# build tensorflow model", "\n", "self", ".", "_build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.KMN.KernelMixtureNetwork.fit": [[114, 150], ["KMN.KernelMixtureNetwork._handle_input_dimensionality", "KMN.KernelMixtureNetwork._setup_inference_and_initialize", "KMN.KernelMixtureNetwork._compute_noise_intensity", "cde.utils.center_point_select.sample_center_points", "KMN.KernelMixtureNetwork.sess.run", "KMN.KernelMixtureNetwork._partial_fit", "KMN.KernelMixtureNetwork._handle_input_dimensionality", "KMN.KernelMixtureNetwork._compute_data_normalization", "tensorflow.assign", "print", "KMN.KernelMixtureNetwork.sess.run"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._setup_inference_and_initialize", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._compute_noise_intensity", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.center_point_select.sample_center_points", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._partial_fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._compute_data_normalization", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ",", "eval_set", "=", "None", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\" Fits the conditional density model with provided data\n\n      Args:\n        X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n        Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n        eval_set: (tuple) eval/test set - tuple (X_test, Y_test)\n        verbose: (boolean) controls the verbosity (console output)\n    \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ",", "fitting", "=", "True", ")", "\n", "\n", "if", "eval_set", "is", "not", "None", ":", "\n", "      ", "eval_set", "=", "self", ".", "_handle_input_dimensionality", "(", "*", "eval_set", ")", "\n", "\n", "", "self", ".", "_setup_inference_and_initialize", "(", ")", "\n", "\n", "# data normalization if desired", "\n", "if", "self", ".", "data_normalization", ":", "# this must happen after the initialization", "\n", "      ", "self", ".", "_compute_data_normalization", "(", "X", ",", "Y", ")", "# computes mean & std of data and assigns it to tf graph for normalization", "\n", "Y_normalized", "=", "(", "Y", "-", "self", ".", "data_statistics", "[", "'Y_mean'", "]", ")", "/", "(", "self", ".", "data_statistics", "[", "'Y_std'", "]", "+", "1e-8", ")", "\n", "", "else", ":", "\n", "      ", "Y_normalized", "=", "Y", "\n", "\n", "", "self", ".", "_compute_noise_intensity", "(", "X", ",", "Y", ")", "\n", "\n", "# sample locations and assign them to tf locs variable", "\n", "sampled_locs", "=", "sample_center_points", "(", "Y_normalized", ",", "method", "=", "self", ".", "center_sampling_method", ",", "k", "=", "self", ".", "n_centers", ",", "\n", "keep_edges", "=", "self", ".", "keep_edges", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "locs", ",", "sampled_locs", ")", ")", "\n", "\n", "# train the model", "\n", "self", ".", "_partial_fit", "(", "X", ",", "Y", ",", "n_epoch", "=", "self", ".", "n_training_epochs", ",", "eval_set", "=", "eval_set", ",", "verbose", "=", "verbose", ")", "\n", "self", ".", "fitted", "=", "True", "\n", "\n", "if", "verbose", ":", "\n", "      ", "print", "(", "\"optimal scales: {}\"", ".", "format", "(", "self", ".", "sess", ".", "run", "(", "self", ".", "scales", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.KMN.KernelMixtureNetwork._build_model": [[151, 228], ["cde.utils.tf_utils.layers_powered.LayersPowered.__init__", "tensorflow.variable_scope", "KMN.KernelMixtureNetwork._build_input_layers", "cde.get_output", "cde.get_output", "cde.utils.tf_utils.network.MLP", "cde.get_output", "cde.NonlinearityLayer", "cde.get_output", "tensorflow.Variable", "cde.VariableLayer", "tensorflow.unstack", "cde.VariableLayer", "cde.NonlinearityLayer", "cde.get_output", "tensorflow.unstack", "cde.get_output", "edward.models.Categorical", "edward.models.Mixture", "KMN.KernelMixtureNetwork._add_softmax_entropy_regularization", "KMN.KernelMixtureNetwork._add_l1_l2_regularization", "tensorflow.shape", "numpy.zeros", "tensorflow.transpose", "len", "tensorflow.transpose", "len", "edward.models.MultivariateNormalDiag", "edward.models.Mixture.prob", "edward.models.Mixture.log_prob", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.Variable", "tensorflow.multiply", "edward.models.Mixture.prob", "tensorflow.reduce_prod", "edward.models.Mixture.log_prob", "tensorflow.reduce_sum", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.ones", "tensorflow.ones", "tensorflow.log", "tensorflow.multiply", "tensorflow.ones", "tensorflow.ones"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._build_input_layers", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._add_softmax_entropy_regularization", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._add_l1_l2_regularization"], ["", "", "def", "_build_model", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    implementation of the KMN\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "# add placeholders, data_normalization and data_noise if desired. Also sets up the placeholder for dropout prob", "\n", "      ", "self", ".", "layer_in_x", ",", "self", ".", "layer_in_y", "=", "self", ".", "_build_input_layers", "(", ")", "\n", "\n", "self", ".", "X_in", "=", "L", ".", "get_output", "(", "self", ".", "layer_in_x", ")", "\n", "self", ".", "Y_in", "=", "L", ".", "get_output", "(", "self", ".", "layer_in_y", ")", "\n", "\n", "# get batch size", "\n", "self", ".", "batch_size", "=", "tf", ".", "shape", "(", "self", ".", "X_ph", ")", "[", "0", "]", "\n", "\n", "# create core multi-layer perceptron", "\n", "core_network", "=", "MLP", "(", "\n", "name", "=", "\"core_network\"", ",", "\n", "input_layer", "=", "self", ".", "layer_in_x", ",", "\n", "output_dim", "=", "self", ".", "n_centers", "*", "self", ".", "n_scales", ",", "\n", "hidden_sizes", "=", "self", ".", "hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "self", ".", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "dropout_ph", "=", "self", ".", "dropout_ph", "if", "self", ".", "dropout", "else", "None", "\n", ")", "\n", "\n", "self", ".", "core_output_layer", "=", "core_network", ".", "output_layer", "\n", "\n", "# weights of the mixture components", "\n", "self", ".", "logits", "=", "L", ".", "get_output", "(", "self", ".", "core_output_layer", ")", "\n", "self", ".", "softmax_layer_weights", "=", "L", ".", "NonlinearityLayer", "(", "self", ".", "core_output_layer", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "softmax", ")", "\n", "self", ".", "weights", "=", "L", ".", "get_output", "(", "self", ".", "softmax_layer_weights", ")", "\n", "\n", "# locations of the kernelfunctions", "\n", "self", ".", "locs", "=", "tf", ".", "Variable", "(", "np", ".", "zeros", "(", "(", "self", ".", "n_centers", ",", "self", ".", "ndim_y", ")", ")", ",", "name", "=", "\"locs\"", ",", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "# assign sampled locs when fitting", "\n", "self", ".", "locs_layer", "=", "L", ".", "VariableLayer", "(", "core_network", ".", "input_layer", ",", "(", "self", ".", "n_centers", ",", "self", ".", "ndim_y", ")", ",", "variable", "=", "self", ".", "locs", ",", "name", "=", "\"locs\"", ",", "trainable", "=", "False", ")", "\n", "\n", "self", ".", "locs_array", "=", "tf", ".", "unstack", "(", "tf", ".", "transpose", "(", "tf", ".", "multiply", "(", "tf", ".", "ones", "(", "(", "self", ".", "batch_size", ",", "self", ".", "n_centers", ",", "self", ".", "ndim_y", ")", ")", ",", "self", ".", "locs", ")", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", ")", "\n", "assert", "len", "(", "self", ".", "locs_array", ")", "==", "self", ".", "n_centers", "\n", "\n", "# scales of the gaussian kernels", "\n", "log_scales_layer", "=", "L", ".", "VariableLayer", "(", "core_network", ".", "input_layer", ",", "(", "self", ".", "n_scales", ",", ")", ",", "\n", "variable", "=", "tf", ".", "Variable", "(", "self", ".", "init_scales_softplus", ",", "dtype", "=", "tf", ".", "float32", ",", "trainable", "=", "self", ".", "train_scales", ")", ",", "\n", "name", "=", "\"log_scales\"", ",", "trainable", "=", "self", ".", "train_scales", ")", "\n", "\n", "self", ".", "scales_layer", "=", "L", ".", "NonlinearityLayer", "(", "log_scales_layer", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "softplus", ")", "\n", "self", ".", "scales", "=", "L", ".", "get_output", "(", "self", ".", "scales_layer", ")", "\n", "self", ".", "scales_array", "=", "scales_array", "=", "tf", ".", "unstack", "(", "tf", ".", "transpose", "(", "tf", ".", "multiply", "(", "tf", ".", "ones", "(", "(", "self", ".", "batch_size", ",", "self", ".", "ndim_y", ",", "self", ".", "n_scales", ")", ")", ",", "self", ".", "scales", ")", ",", "perm", "=", "[", "2", ",", "0", ",", "1", "]", ")", ")", "\n", "assert", "len", "(", "self", ".", "scales_array", ")", "==", "self", ".", "n_scales", "\n", "\n", "# put mixture components together", "\n", "self", ".", "y_input", "=", "L", ".", "get_output", "(", "self", ".", "layer_in_y", ")", "\n", "self", ".", "cat", "=", "cat", "=", "Categorical", "(", "logits", "=", "self", ".", "logits", ")", "\n", "self", ".", "components", "=", "components", "=", "[", "MultivariateNormalDiag", "(", "loc", "=", "loc", ",", "scale_diag", "=", "scale", ")", "for", "loc", "in", "self", ".", "locs_array", "for", "scale", "in", "scales_array", "]", "\n", "self", ".", "mixture", "=", "mixture", "=", "Mixture", "(", "cat", "=", "cat", ",", "components", "=", "components", ")", "\n", "\n", "# regularization", "\n", "self", ".", "_add_softmax_entropy_regularization", "(", ")", "\n", "self", ".", "_add_l1_l2_regularization", "(", "core_network", ")", "\n", "\n", "# tensor to compute probabilities", "\n", "if", "self", ".", "data_normalization", ":", "\n", "        ", "self", ".", "pdf_", "=", "mixture", ".", "prob", "(", "self", ".", "y_input", ")", "/", "tf", ".", "reduce_prod", "(", "self", ".", "std_y_sym", ")", "\n", "self", ".", "log_pdf_", "=", "mixture", ".", "log_prob", "(", "self", ".", "y_input", ")", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "self", ".", "std_y_sym", ")", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "pdf_", "=", "mixture", ".", "prob", "(", "self", ".", "y_input", ")", "\n", "self", ".", "log_pdf_", "=", "mixture", ".", "log_prob", "(", "self", ".", "y_input", ")", "\n", "\n", "# symbolic tensors for getting the unnormalized mixture components", "\n", "", "if", "self", ".", "data_normalization", ":", "\n", "        ", "self", ".", "scales_unnormalized", "=", "tf", ".", "transpose", "(", "tf", ".", "multiply", "(", "tf", ".", "ones", "(", "(", "self", ".", "ndim_y", ",", "self", ".", "n_scales", ")", ")", ",", "self", ".", "scales", ")", ")", "*", "self", ".", "std_y_sym", "# shape = (n_scales, ndim_y)", "\n", "self", ".", "locs_unnormalized", "=", "self", ".", "locs", "*", "self", ".", "std_y_sym", "+", "self", ".", "mean_y_sym", "\n", "", "else", ":", "\n", "        ", "self", ".", "scales_unnormalized", "=", "tf", ".", "transpose", "(", "tf", ".", "multiply", "(", "tf", ".", "ones", "(", "(", "self", ".", "ndim_y", ",", "self", ".", "n_scales", ")", ")", ",", "self", ".", "scales", ")", ")", "# shape = (n_scales, ndim_y)", "\n", "self", ".", "locs_unnormalized", "=", "self", ".", "locs", "\n", "\n", "# initialize LayersPowered --> provides functions for serializing tf models", "\n", "", "", "LayersPowered", ".", "__init__", "(", "self", ",", "[", "self", ".", "core_output_layer", ",", "self", ".", "locs_layer", ",", "self", ".", "scales_layer", ",", "self", ".", "layer_in_y", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.KMN.KernelMixtureNetwork._param_grid": [[229, 237], ["None"], "methods", ["None"], ["", "def", "_param_grid", "(", "self", ")", ":", "\n", "    ", "param_grid", "=", "{", "\n", "\"n_training_epochs\"", ":", "[", "500", ",", "1000", "]", ",", "\n", "\"n_centers\"", ":", "[", "50", ",", "200", "]", ",", "\n", "\"x_noise_std\"", ":", "[", "0.15", ",", "0.2", ",", "0.3", "]", ",", "\n", "\"y_noise_std\"", ":", "[", "0.1", ",", "0.15", ",", "0.2", "]", "\n", "}", "\n", "return", "param_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.KMN.KernelMixtureNetwork._get_mixture_components": [[238, 251], ["KMN.KernelMixtureNetwork.sess.run", "numpy.concatenate", "numpy.tile", "numpy.expand_dims", "numpy.tile", "numpy.expand_dims", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "_get_mixture_components", "(", "self", ",", "X", ")", ":", "\n", "    ", "assert", "self", ".", "fitted", "\n", "\n", "locs", ",", "weights", ",", "scales", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "locs_unnormalized", ",", "self", ".", "weights", ",", "self", ".", "scales_unnormalized", "]", ",", "feed_dict", "=", "{", "self", ".", "X_ph", ":", "X", "}", ")", "\n", "\n", "locs", "=", "np", ".", "concatenate", "(", "[", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "locs", "[", "i", ":", "i", "+", "1", "]", ",", "axis", "=", "1", ")", ",", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "n_scales", ",", "1", ")", ")", "for", "i", "in", "range", "(", "self", ".", "n_centers", ")", "]", ",", "axis", "=", "1", ")", "\n", "cov", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "scales", ",", "axis", "=", "0", ")", ",", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "n_centers", ",", "1", ")", ")", "\n", "\n", "assert", "weights", ".", "shape", "[", "0", "]", "==", "locs", ".", "shape", "[", "0", "]", "==", "cov", ".", "shape", "[", "0", "]", "==", "X", ".", "shape", "[", "0", "]", "\n", "assert", "weights", ".", "shape", "[", "1", "]", "==", "locs", ".", "shape", "[", "1", "]", "==", "cov", ".", "shape", "[", "1", "]", "==", "self", ".", "n_centers", "*", "self", ".", "n_scales", "\n", "assert", "locs", ".", "shape", "[", "2", "]", "==", "cov", ".", "shape", "[", "2", "]", "==", "self", ".", "ndim_y", "\n", "assert", "locs", ".", "ndim", "==", "3", "and", "cov", ".", "ndim", "==", "3", "and", "weights", ".", "ndim", "==", "2", "\n", "return", "weights", ",", "locs", ",", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.KMN.KernelMixtureNetwork.__str__": [[252, 257], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "\"\\nEstimator type: {}\\n center sampling method: {}\\n n_centers: {}\\n keep_edges: {}\\n init_scales: {}\\n train_scales: {}\\n \"", "\"n_training_epochs: {}\\n x_noise_std: {}\\n y_noise_std: {}\\n\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "center_sampling_method", ",", "self", ".", "n_centers", ",", "\n", "self", ".", "keep_edges", ",", "self", ".", "init_scales_softplus", ",", "self", ".", "train_scales", ",", "self", ".", "n_training_epochs", ",", "self", ".", "x_noise_std", ",", "\n", "self", ".", "y_noise_std", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.reset_fit": [[36, 42], ["NotImplementedError"], "methods", ["None"], ["def", "reset_fit", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset all tensorflow objects to enable the model to be trained again\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.fit_by_cv": [[43, 139], ["BaseNNEstimator.BaseNNEstimator.get_params", "list", "list", "list", "multiprocessing.Manager", "multiprocessing.Manager.dict", "cde.utils.async_executor.AsyncExecutor", "cde.utils.async_executor.AsyncExecutor.run", "range", "numpy.zeros", "multiprocessing.Manager.dict.items", "numpy.mean", "numpy.argmax", "BaseNNEstimator.BaseNNEstimator.set_params", "BaseNNEstimator.BaseNNEstimator.reset_fit", "BaseNNEstimator.BaseNNEstimator.fit", "BaseNNEstimator.BaseNNEstimator._param_grid", "sklearn.model_selection.ParameterGrid", "zip", "zip", "tensorflow.ConfigProto", "len", "len", "len", "print", "print", "tensorflow.Session", "BaseNNEstimator.BaseNNEstimator.__class__", "BaseNNEstimator.BaseNNEstimator.fit", "BaseNNEstimator.BaseNNEstimator.score", "print", "multiprocessing.Manager.dict.keys", "len", "len", "len", "len", "list", "itertools.product", "numpy.isnan", "zip", "BaseNNEstimator.BaseNNEstimator.fit_by_cv._fit_eval"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_params", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.reset_fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator._param_grid", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.score"], ["", "def", "fit_by_cv", "(", "self", ",", "X", ",", "Y", ",", "n_folds", "=", "3", ",", "param_grid", "=", "None", ",", "random_state", "=", "None", ",", "verbose", "=", "True", ",", "n_jobs", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\" Fits the conditional density model with hyperparameter search and cross-validation.\n\n        - Determines the best hyperparameter configuration from a pre-defined set using cross-validation. Thereby,\n          the conditional log-likelihood is used for simulation_eval.\n        - Fits the model with the previously selected hyperparameter configuration\n\n        Args:\n          X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n          Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n          n_folds: number of cross-validation folds (positive integer)\n          param_grid: (optional) a dictionary with the hyperparameters of the model as key and and a list of respective\n                      parametrizations as value. The hyperparameter search is performed over the cartesian product of\n                      the provided lists.\n                      Example::\n                              {\"n_centers\": [20, 50, 100, 200],\n                               \"center_sampling_method\": [\"agglomerative\", \"k_means\", \"random\"],\n                               \"keep_edges\": [True, False]\n                              }\n          random_state: (int) seed used by the random number generator for shuffeling the data\n        \"\"\"", "\n", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'2'", "\n", "original_params", "=", "self", ".", "get_params", "(", ")", "\n", "\n", "if", "param_grid", "is", "None", ":", "\n", "            ", "param_grid", "=", "self", ".", "_param_grid", "(", ")", "\n", "\n", "", "param_list", "=", "list", "(", "sklearn", ".", "model_selection", ".", "ParameterGrid", "(", "param_grid", ")", ")", "\n", "train_splits", ",", "test_splits", "=", "list", "(", "zip", "(", "*", "list", "(", "sklearn", ".", "model_selection", ".", "KFold", "(", "n_splits", "=", "n_folds", ",", "shuffle", "=", "False", ",", "\n", "random_state", "=", "random_state", ")", ".", "split", "(", "X", ")", ")", ")", ")", "\n", "\n", "param_ids", ",", "fold_ids", "=", "list", "(", "zip", "(", "*", "itertools", ".", "product", "(", "range", "(", "len", "(", "param_list", ")", ")", ",", "range", "(", "n_folds", ")", ")", ")", ")", "\n", "\n", "# multiprocessing setup", "\n", "manager", "=", "Manager", "(", ")", "\n", "score_dict", "=", "manager", ".", "dict", "(", ")", "\n", "\n", "def", "_fit_eval", "(", "param_idx", ",", "fold_idx", ",", "verbose", "=", "False", ",", "i_rand", "=", "-", "1", ")", ":", "\n", "            ", "train_indices", ",", "test_indices", "=", "train_splits", "[", "fold_idx", "]", ",", "test_splits", "[", "fold_idx", "]", "\n", "X_train", ",", "Y_train", "=", "X", "[", "train_indices", "]", ",", "Y", "[", "train_indices", "]", "\n", "X_test", ",", "Y_test", "=", "X", "[", "test_indices", "]", ",", "Y", "[", "test_indices", "]", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "\"CPU\"", ":", "1", "}", ",", "\n", "inter_op_parallelism_threads", "=", "1", ",", "\n", "intra_op_parallelism_threads", "=", "1", ")", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", ":", "\n", "                ", "kwargs_dict", "=", "{", "**", "original_params", ",", "**", "param_list", "[", "param_idx", "]", "}", "\n", "kwargs_dict", "[", "'name'", "]", "=", "'cv_%i_%i_%i_'", "%", "(", "param_idx", ",", "fold_idx", ",", "i_rand", ")", "+", "self", ".", "name", "\n", "model", "=", "self", ".", "__class__", "(", "**", "kwargs_dict", ")", "\n", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "verbose", "=", "verbose", ")", "\n", "test_score", "=", "model", ".", "score", "(", "X_test", ",", "Y_test", ")", "\n", "assert", "not", "np", ".", "isnan", "(", "test_score", ")", "\n", "score_dict", "[", "(", "param_idx", ",", "fold_idx", ")", "]", "=", "test_score", "\n", "\n", "# run the prepared tasks in multiple processes", "\n", "", "", "executor", "=", "AsyncExecutor", "(", "n_jobs", "=", "n_jobs", ")", "\n", "executor", ".", "run", "(", "_fit_eval", ",", "param_ids", ",", "fold_ids", ",", "verbose", "=", "verbose", ")", "\n", "\n", "\n", "# check if all results are available and rerun failed fit_evals. Try three times", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "failed_runs", "=", "[", "x", "for", "x", "in", "zip", "(", "param_ids", ",", "fold_ids", ")", "if", "x", "not", "in", "score_dict", "]", "\n", "if", "not", "failed_runs", ":", "\n", "                ", "break", "\n", "", "if", "verbose", ":", "\n", "                ", "print", "(", "\"{} runs succeeded, {} runs failed. Rerunning failed runs\"", ".", "format", "(", "len", "(", "score_dict", ".", "keys", "(", ")", ")", ",", "\n", "len", "(", "failed_runs", ")", ")", ")", "\n", "", "for", "(", "p", ",", "f", ")", "in", "failed_runs", ":", "\n", "                ", "try", ":", "\n", "                    ", "_fit_eval", "(", "p", ",", "f", ",", "verbose", "=", "verbose", ",", "i_rand", "=", "i", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "e", ")", "\n", "\n", "# make sure we ultimately have an output for every parameter - fold - combination", "\n", "", "", "", "assert", "len", "(", "score_dict", ".", "keys", "(", ")", ")", "==", "len", "(", "param_list", ")", "*", "len", "(", "train_splits", ")", "\n", "\n", "# Select the best parameter setting", "\n", "scores_array", "=", "np", ".", "zeros", "(", "(", "len", "(", "param_list", ")", ",", "len", "(", "train_splits", ")", ")", ")", "\n", "for", "(", "i", ",", "j", ")", ",", "score", "in", "score_dict", ".", "items", "(", ")", ":", "\n", "            ", "scores_array", "[", "i", ",", "j", "]", "=", "score", "\n", "", "avg_scores", "=", "np", ".", "mean", "(", "scores_array", ",", "axis", "=", "-", "1", ")", "\n", "best_idx", "=", "np", ".", "argmax", "(", "avg_scores", ")", "\n", "selected_params", "=", "param_list", "[", "best_idx", "]", "\n", "assert", "len", "(", "avg_scores", ")", "==", "len", "(", "param_list", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Completed grid search - Selected params: {}\"", ".", "format", "(", "selected_params", ")", ")", "\n", "print", "(", "\"Refitting model with selected params\"", ")", "\n", "\n", "# Refit with best parameter set", "\n", "", "self", ".", "set_params", "(", "**", "selected_params", ")", "\n", "self", ".", "reset_fit", "(", ")", "\n", "self", ".", "fit", "(", "X", ",", "Y", ",", "verbose", "=", "False", ")", "\n", "return", "selected_params", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.pdf": [[140, 156], ["BaseNNEstimator.BaseNNEstimator._handle_input_dimensionality", "BaseNNEstimator.BaseNNEstimator.sess.run"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\" Predicts the conditional probability p(y|x). Requires the model to be fitted.\n\n           Args:\n             X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n             Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n           Returns:\n              conditional probability p(y|x) - numpy array of shape (n_query_samples, )\n\n         \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted to compute likelihood score\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ",", "fitting", "=", "False", ")", "\n", "p", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "pdf_", ",", "feed_dict", "=", "{", "self", ".", "X_ph", ":", "X", ",", "self", ".", "Y_ph", ":", "Y", "}", ")", "\n", "assert", "p", ".", "ndim", "==", "1", "and", "p", ".", "shape", "[", "0", "]", "==", "X", ".", "shape", "[", "0", "]", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf": [[157, 173], ["BaseNNEstimator.BaseNNEstimator._handle_input_dimensionality", "BaseNNEstimator.BaseNNEstimator.sess.run"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "cdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\" Predicts the conditional cumulative probability p(Y<=y|X=x). Requires the model to be fitted.\n\n           Args:\n             X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n             Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n           Returns:\n             conditional cumulative probability p(Y<=y|X=x) - numpy array of shape (n_query_samples, )\n\n        \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted to compute likelihood score\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ",", "fitting", "=", "False", ")", "\n", "p", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "cdf_", ",", "feed_dict", "=", "{", "self", ".", "X_ph", ":", "X", ",", "self", ".", "Y_ph", ":", "Y", "}", ")", "\n", "assert", "p", ".", "ndim", "==", "1", "and", "p", ".", "shape", "[", "0", "]", "==", "X", ".", "shape", "[", "0", "]", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.log_pdf": [[174, 190], ["BaseNNEstimator.BaseNNEstimator._handle_input_dimensionality", "BaseNNEstimator.BaseNNEstimator.sess.run"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "log_pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\" Predicts the conditional log-probability log p(y|x). Requires the model to be fitted.\n\n           Args:\n             X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n             Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n           Returns:\n              onditional log-probability log p(y|x) - numpy array of shape (n_query_samples, )\n\n         \"\"\"", "\n", "assert", "self", ".", "fitted", ",", "\"model must be fitted to compute likelihood score\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ",", "fitting", "=", "False", ")", "\n", "p", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "log_pdf_", ",", "feed_dict", "=", "{", "self", ".", "X_ph", ":", "X", ",", "self", ".", "Y_ph", ":", "Y", "}", ")", "\n", "assert", "p", ".", "ndim", "==", "1", "and", "p", ".", "shape", "[", "0", "]", "==", "X", ".", "shape", "[", "0", "]", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._compute_data_normalization": [[191, 212], ["numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "tensorflow.get_default_session", "tensorflow.get_default_session.run", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "_compute_data_normalization", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "# compute data statistics (mean & std)", "\n", "        ", "self", ".", "x_mean", "=", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", "\n", "self", ".", "x_std", "=", "np", ".", "std", "(", "X", ",", "axis", "=", "0", ")", "\n", "self", ".", "y_mean", "=", "np", ".", "mean", "(", "Y", ",", "axis", "=", "0", ")", "\n", "self", ".", "y_std", "=", "np", ".", "std", "(", "Y", ",", "axis", "=", "0", ")", "\n", "\n", "self", ".", "data_statistics", "=", "{", "\n", "'X_mean'", ":", "self", ".", "x_mean", ",", "\n", "'X_std'", ":", "self", ".", "x_std", ",", "\n", "'Y_mean'", ":", "self", ".", "y_mean", ",", "\n", "'Y_std'", ":", "self", ".", "y_std", ",", "\n", "}", "\n", "\n", "# assign them to tf variables", "\n", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "sess", ".", "run", "(", "[", "\n", "tf", ".", "assign", "(", "self", ".", "mean_x_sym", ",", "self", ".", "x_mean", ")", ",", "\n", "tf", ".", "assign", "(", "self", ".", "std_x_sym", ",", "self", ".", "x_std", ")", ",", "\n", "tf", ".", "assign", "(", "self", ".", "mean_y_sym", ",", "self", ".", "y_mean", ")", ",", "\n", "tf", ".", "assign", "(", "self", ".", "std_y_sym", ",", "self", ".", "y_std", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._compute_noise_intensity": [[214, 230], ["BaseNNEstimator.BaseNNEstimator.adaptive_noise_fn", "BaseNNEstimator.BaseNNEstimator.adaptive_noise_fn", "tensorflow.get_default_session", "tensorflow.get_default_session.run", "tensorflow.assign", "tensorflow.assign"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "_compute_noise_intensity", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "# computes the noise intensity based on the number of samples and dimensionality of the data", "\n", "\n", "        ", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "if", "self", ".", "adaptive_noise_fn", "is", "not", "None", ":", "\n", "            ", "self", ".", "x_noise_std", "=", "self", ".", "adaptive_noise_fn", "(", "n_samples", ",", "self", ".", "ndim_x", "+", "self", ".", "ndim_y", ")", "\n", "self", ".", "y_noise_std", "=", "self", ".", "adaptive_noise_fn", "(", "n_samples", ",", "self", ".", "ndim_x", "+", "self", ".", "ndim_y", ")", "\n", "\n", "assert", "self", ".", "x_noise_std", ">=", "0.0", "and", "self", ".", "y_noise_std", ">=", "0.0", "\n", "\n", "# assign them to tf variables", "\n", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "sess", ".", "run", "(", "[", "\n", "tf", ".", "assign", "(", "self", ".", "x_noise_std_sym", ",", "self", ".", "x_noise_std", ")", ",", "\n", "tf", ".", "assign", "(", "self", ".", "y_noise_std_sym", ",", "self", ".", "y_noise_std", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._build_input_layers": [[233, 264], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder_with_default", "cde.InputLayer", "cde.InputLayer", "cde.GaussianNoiseLayer", "cde.GaussianNoiseLayer", "tensorflow.placeholder_with_default", "cde.NormalizationLayer", "cde.NormalizationLayer.get_params", "cde.NormalizationLayer", "cde.NormalizationLayer.get_params", "cde.NormalizationLayer.get_params", "cde.NormalizationLayer.get_params"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_params", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_params", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_params", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.LSTMStepLayer.get_params"], ["", "", "def", "_build_input_layers", "(", "self", ")", ":", "\n", "# Input_Layers & placeholders", "\n", "        ", "self", ".", "X_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "self", ".", "ndim_x", ")", ")", "\n", "self", ".", "Y_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "self", ".", "ndim_y", ")", ")", "\n", "self", ".", "train_phase", "=", "tf", ".", "placeholder_with_default", "(", "False", ",", "None", ")", "\n", "\n", "layer_in_x", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "self", ".", "ndim_x", ")", ",", "input_var", "=", "self", ".", "X_ph", ",", "name", "=", "\"input_x\"", ")", "\n", "layer_in_y", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "self", ".", "ndim_y", ")", ",", "input_var", "=", "self", ".", "Y_ph", ",", "name", "=", "\"input_y\"", ")", "\n", "\n", "# add data normalization layer if desired", "\n", "if", "self", ".", "data_normalization", ":", "\n", "            ", "layer_in_x", "=", "L", ".", "NormalizationLayer", "(", "layer_in_x", ",", "self", ".", "ndim_x", ",", "name", "=", "\"data_norm_x\"", ")", "\n", "self", ".", "mean_x_sym", ",", "self", ".", "std_x_sym", "=", "layer_in_x", ".", "get_params", "(", ")", "\n", "layer_in_y", "=", "L", ".", "NormalizationLayer", "(", "layer_in_y", ",", "self", ".", "ndim_y", ",", "name", "=", "\"data_norm_y\"", ")", "\n", "self", ".", "mean_y_sym", ",", "self", ".", "std_y_sym", "=", "layer_in_y", ".", "get_params", "(", ")", "\n", "\n", "", "if", "self", ".", "x_noise_std", "is", "None", ":", "\n", "            ", "self", ".", "x_noise_std", "=", "0.0", "\n", "", "if", "self", ".", "y_noise_std", "is", "None", ":", "\n", "            ", "self", ".", "y_noise_std", "=", "0.0", "\n", "\n", "# add noise layer if desired", "\n", "", "layer_in_x", "=", "L", ".", "GaussianNoiseLayer", "(", "layer_in_x", ",", "self", ".", "x_noise_std", ",", "noise_on_ph", "=", "self", ".", "train_phase", ",", "name", "=", "'x'", ")", "\n", "self", ".", "x_noise_std_sym", "=", "layer_in_x", ".", "get_params", "(", ")", "[", "0", "]", "\n", "layer_in_y", "=", "L", ".", "GaussianNoiseLayer", "(", "layer_in_y", ",", "self", ".", "y_noise_std", ",", "noise_on_ph", "=", "self", ".", "train_phase", ",", "name", "=", "'y'", ")", "\n", "self", ".", "y_noise_std_sym", "=", "layer_in_y", ".", "get_params", "(", ")", "[", "0", "]", "\n", "\n", "# setup dropout. This placeholder will remain unused if dropout is not implemented by the MLP", "\n", "self", ".", "dropout_ph", "=", "tf", ".", "placeholder_with_default", "(", "0.", ",", "shape", "=", "(", ")", ")", "\n", "\n", "return", "layer_in_x", ",", "layer_in_y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._add_l1_l2_regularization": [[265, 281], ["tensorflow.concat", "warnings.WarningMessage", "tensorflow.losses.add_loss", "tensorflow.losses.add_loss", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "core_network.get_params_internal", "tensorflow.abs"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers_powered.LayersPowered.get_params_internal"], ["", "def", "_add_l1_l2_regularization", "(", "self", ",", "core_network", ")", ":", "\n", "        ", "if", "self", ".", "l1_reg", ">", "0", "or", "self", ".", "l2_reg", ">", "0", ":", "\n", "\n", "# weight norm should not be combined with l1 / l2 regularization", "\n", "            ", "if", "self", ".", "weight_normalization", "is", "True", ":", "\n", "                ", "warnings", ".", "WarningMessage", "(", "\"l1 / l2 regularization has no effect when weigh normalization is used\"", ")", "\n", "\n", "", "weight_vector", "=", "tf", ".", "concat", "(", "\n", "[", "tf", ".", "reshape", "(", "param", ",", "(", "-", "1", ",", ")", ")", "for", "param", "in", "core_network", ".", "get_params_internal", "(", ")", "if", "'/W'", "in", "param", ".", "name", "]", ",", "\n", "axis", "=", "0", ")", "\n", "if", "self", ".", "l2_reg", ">", "0", ":", "\n", "                ", "self", ".", "l2_reg_loss", "=", "self", ".", "l2_reg", "*", "tf", ".", "reduce_sum", "(", "weight_vector", "**", "2", ")", "\n", "tf", ".", "losses", ".", "add_loss", "(", "self", ".", "l2_reg_loss", ",", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", "\n", "", "if", "self", ".", "l1_reg", ">", "0", ":", "\n", "                ", "self", ".", "l1_reg_loss", "=", "self", ".", "l1_reg", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "weight_vector", ")", ")", "\n", "tf", ".", "losses", ".", "add_loss", "(", "self", ".", "l1_reg_loss", ",", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.__getstate__": [[282, 286], ["cde.utils.tf_utils.layers_powered.LayersPowered.__getstate__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.__getstate__"], ["", "", "", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "LayersPowered", ".", "__getstate__", "(", "self", ")", "\n", "state", "[", "'fitted'", "]", "=", "self", ".", "fitted", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.__setstate__": [[287, 291], ["cde.utils.tf_utils.layers_powered.LayersPowered.__setstate__", "tensorflow.get_default_session"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "LayersPowered", ".", "__setstate__", "(", "self", ",", "state", ")", "\n", "self", ".", "fitted", "=", "state", "[", "'fitted'", "]", "\n", "self", ".", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._handle_input_dimensionality": [[292, 296], ["cde.density_estimator.BaseDensityEstimator.BaseDensityEstimator._handle_input_dimensionality", "str", "str"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality"], ["", "def", "_handle_input_dimensionality", "(", "self", ",", "X", ",", "Y", "=", "None", ",", "fitting", "=", "False", ")", ":", "\n", "        ", "assert", "(", "self", ".", "ndim_x", "==", "1", "and", "X", ".", "ndim", "==", "1", ")", "or", "(", "X", ".", "ndim", "==", "2", "and", "X", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_x", ")", ",", "\"expected X to have shape (?, %i) but received %s\"", "%", "(", "self", ".", "ndim_x", ",", "str", "(", "X", ".", "shape", ")", ")", "\n", "assert", "(", "Y", "is", "None", ")", "or", "(", "self", ".", "ndim_y", "==", "1", "and", "Y", ".", "ndim", "==", "1", ")", "or", "(", "Y", ".", "ndim", "==", "2", "and", "Y", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_y", ")", ",", "\"expected Y to have shape (?, %i) but received %s\"", "%", "(", "self", ".", "ndim_y", ",", "str", "(", "Y", ".", "shape", ")", ")", "\n", "return", "BaseDensityEstimator", ".", "_handle_input_dimensionality", "(", "self", ",", "X", ",", "Y", ",", "fitting", "=", "fitting", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._check_uniqueness_of_scope": [[297, 302], ["set", "tensorflow.get_variable_scope", "variable.name.split", "tensorflow.global_variables"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_check_uniqueness_of_scope", "(", "name", ")", ":", "\n", "        ", "current_scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "scopes", "=", "set", "(", "[", "variable", ".", "name", ".", "split", "(", "'/'", ")", "[", "0", "]", "for", "variable", "in", "tf", ".", "global_variables", "(", "scope", "=", "current_scope", ")", "]", ")", "\n", "assert", "name", "not", "in", "scopes", ",", "\"%s is already in use for a tensorflow scope - please choose another estimator name\"", "%", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.__init__": [[37, 62], ["numpy.random.RandomState", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "'NKDE'", ",", "ndim_x", "=", "None", ",", "ndim_y", "=", "None", ",", "epsilon", "=", "0.4", ",", "bandwidth", "=", "0.6", ",", "param_selection", "=", "'normal_reference'", ",", "\n", "weighted", "=", "True", ",", "n_jobs", "=", "-", "1", ",", "random_seed", "=", "None", ")", ":", "\n", "    ", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "random_seed", ")", "\n", "\n", "assert", "isinstance", "(", "bandwidth", ",", "(", "int", ",", "float", ")", ")", "or", "isinstance", "(", "bandwidth", ",", "np", ".", "ndarray", ")", "\n", "assert", "isinstance", "(", "epsilon", ",", "(", "int", ",", "float", ")", ")", "\n", "assert", "param_selection", "in", "[", "'cv_ml'", ",", "'normal_reference'", ",", "None", ",", "False", "]", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "ndim_x", "=", "ndim_x", "\n", "self", ".", "ndim_y", "=", "ndim_y", "\n", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "bandwidth", "=", "bandwidth", "\n", "self", ".", "param_selection", "=", "param_selection", "\n", "self", ".", "weighted", "=", "weighted", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "\n", "self", ".", "fitted", "=", "False", "\n", "\n", "self", ".", "can_sample", "=", "False", "\n", "self", ".", "has_pdf", "=", "True", "\n", "self", ".", "has_cdf", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.fit": [[63, 79], ["NKDE.NeighborKernelDensityEstimation._handle_input_dimensionality", "NKDE.NeighborKernelDensityEstimation._build_model"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator._build_model"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Since NKDE is a lazy learner, fit just stores the provided training data (X,Y)\n\n      Args:\n        X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n        Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n    \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ",", "fitting", "=", "True", ")", "\n", "\n", "self", ".", "_build_model", "(", "X", ",", "Y", ")", "\n", "\n", "self", ".", "can_sample", "=", "False", "\n", "self", ".", "has_cdf", "=", "False", "\n", "\n", "self", ".", "fitted", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf": [[80, 92], ["numpy.exp", "NKDE.NeighborKernelDensityEstimation.log_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.log_pdf"], ["", "def", "pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Predicts the conditional probability density p(y|x). Requires the model to be fitted.\n\n       Args:\n         X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n         Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n       Returns:\n          conditional probability p(y|x) - numpy array of shape (n_query_samples, )\n\n    \"\"\"", "\n", "return", "np", ".", "exp", "(", "self", ".", "log_pdf", "(", "X", ",", "Y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.log_pdf": [[93, 111], ["NKDE.NeighborKernelDensityEstimation._handle_input_dimensionality", "cde.utils.async_executor.execute_batch_async_pdf", "NKDE.NeighborKernelDensityEstimation._log_pdf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.execute_batch_async_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._log_pdf"], ["", "def", "log_pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" Predicts the conditional log-probability log p(y|x). Requires the model to be fitted.\n\n       Args:\n         X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n         Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n\n       Returns:\n          conditional log-probability log p(y|x) - numpy array of shape (n_query_samples, )\n\n    \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ",", "fitting", "=", "True", ")", "\n", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "if", "n_samples", ">=", "_MULTIPROC_THRESHOLD", ":", "\n", "      ", "return", "execute_batch_async_pdf", "(", "self", ".", "_log_pdf", ",", "X", ",", "Y", ",", "n_jobs", "=", "self", ".", "n_jobs", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "_log_pdf", "(", "X", ",", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample": [[112, 114], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ",", "X", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\"Neighbor Kernel Density Estimation is a lazy learner and does not support sampling\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.loo_likelihood": [[115, 134], ["NKDE.NeighborKernelDensityEstimation._kernel_weights", "numpy.fill_diagonal", "numpy.zeros", "range", "numpy.mean", "numpy.sum", "NKDE.NeighborKernelDensityEstimation._log_density"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._kernel_weights", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._log_density"], ["", "def", "loo_likelihood", "(", "self", ",", "bandwidth", ",", "epsilon", ")", ":", "\n", "    ", "\"\"\"\n    calculates the negative leave-one-out log-likelihood of the training data\n\n    Args:\n      bw: bandwidth parameter\n      epsilon: size of the (normalized) neighborhood region\n    \"\"\"", "\n", "kernel_weights", "=", "self", ".", "_kernel_weights", "(", "self", ".", "X_train", ",", "epsilon", ")", "\n", "\n", "# remove kernel of query x and re-normalize weights", "\n", "np", ".", "fill_diagonal", "(", "kernel_weights", ",", "0.0", ")", "\n", "kernel_weights_loo", "=", "kernel_weights", "/", "np", ".", "sum", "(", "kernel_weights", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "conditional_log_densities", "=", "np", ".", "zeros", "(", "self", ".", "n_train_points", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_train_points", ")", ":", "\n", "      ", "conditional_log_densities", "[", "i", "]", "=", "self", ".", "_log_density", "(", "bandwidth", ",", "kernel_weights_loo", "[", "i", ",", ":", "]", ",", "self", ".", "Y_train", "[", "i", ",", ":", "]", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "conditional_log_densities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._build_model": [[135, 160], ["numpy.std", "numpy.mean", "numpy.std", "numpy.std", "NKDE.NeighborKernelDensityEstimation._normalize_x", "numpy.vsplit", "isinstance", "scipy.stats.multivariate_normal", "NKDE.NeighborKernelDensityEstimation._normal_reference", "NKDE.NeighborKernelDensityEstimation._cv_ml", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._normalize_x", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._normal_reference", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._cv_ml"], ["", "def", "_build_model", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "# save mean and std of data for normalization", "\n", "    ", "self", ".", "x_std", "=", "np", ".", "std", "(", "X", ",", "axis", "=", "0", ")", "\n", "self", ".", "x_mean", "=", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", "\n", "self", ".", "y_mean", "=", "np", ".", "std", "(", "Y", ",", "axis", "=", "0", ")", "\n", "self", ".", "y_std", "=", "np", ".", "std", "(", "Y", ",", "axis", "=", "0", ")", "\n", "\n", "self", ".", "n_train_points", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "# lazy learner - just store training data", "\n", "self", ".", "X_train", "=", "self", ".", "_normalize_x", "(", "X", ")", "\n", "self", ".", "Y_train", "=", "Y", "\n", "\n", "# prepare Gaussians centered in the Y points", "\n", "self", ".", "locs_array", "=", "np", ".", "vsplit", "(", "Y", ",", "self", ".", "n_train_points", ")", "\n", "self", ".", "log_kernel", "=", "multivariate_normal", "(", "mean", "=", "np", ".", "ones", "(", "self", ".", "ndim_y", ")", ")", ".", "logpdf", "\n", "\n", "# select / properly initialize bandwidth and epsilon", "\n", "if", "isinstance", "(", "self", ".", "bandwidth", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "      ", "self", ".", "bandwidth", "=", "self", ".", "y_std", "*", "self", ".", "bandwidth", "\n", "\n", "", "if", "self", ".", "param_selection", "==", "'normal_reference'", ":", "\n", "      ", "self", ".", "bandwidth", "=", "self", ".", "_normal_reference", "(", ")", "\n", "", "elif", "self", ".", "param_selection", "==", "'cv_ml'", ":", "\n", "      ", "self", ".", "bandwidth", ",", "self", ".", "epsilon", "=", "self", ".", "_cv_ml", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._log_pdf": [[161, 174], ["NKDE.NeighborKernelDensityEstimation._normalize_x", "NKDE.NeighborKernelDensityEstimation._kernel_weights", "numpy.zeros", "range", "NKDE.NeighborKernelDensityEstimation._log_density"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._normalize_x", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._kernel_weights", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._log_density"], ["", "", "def", "_log_pdf", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" 1. Determine weights of the Gaussians \"\"\"", "\n", "X_normalized", "=", "self", ".", "_normalize_x", "(", "X", ")", "\n", "kernel_weights", "=", "self", ".", "_kernel_weights", "(", "X_normalized", ",", "self", ".", "epsilon", ")", "\n", "\n", "\"\"\" 2. Calculate the conditional log densities \"\"\"", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "conditional_densities", "=", "np", ".", "zeros", "(", "n_samples", ")", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "      ", "conditional_densities", "[", "i", "]", "=", "self", ".", "_log_density", "(", "self", ".", "bandwidth", ",", "kernel_weights", "[", "i", ",", ":", "]", ",", "Y", "[", "i", ",", ":", "]", ")", "\n", "\n", "", "return", "conditional_densities", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._kernel_weights": [[175, 203], ["cde.utils.misc.norm_along_axis_1", "numpy.sum", "numpy.any", "numpy.sum", "numpy.ma.masked_where", "numpy.logical_not", "numpy.nditer", "numpy.logical_not", "sklearn.preprocessing.normalize", "numpy.ma.masked_where.copy", "numpy.ma.masked_where().filled", "numpy.where", "numpy.nditer", "numpy.ma.masked_where.filled", "warnings.catch_warnings", "warnings.simplefilter", "numpy.argsort", "numpy.ma.masked_where"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.norm_along_axis_1"], ["", "def", "_kernel_weights", "(", "self", ",", "X_normalized", ",", "epsilon", ")", ":", "\n", "    ", "X_dist", "=", "norm_along_axis_1", "(", "X_normalized", ",", "self", ".", "X_train", ",", "norm_dim", "=", "True", ")", "\n", "mask", "=", "X_dist", ">", "epsilon", "\n", "num_neighbors", "=", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "mask", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# Extra treatment for X that are outside of the epsilon range", "\n", "if", "np", ".", "any", "(", "num_neighbors", "<=", "_N_POINT_OUT_OF_RANGE", ")", ":", "\n", "      ", "for", "i", "in", "np", ".", "nditer", "(", "np", ".", "where", "(", "num_neighbors", "<=", "_N_POINT_OUT_OF_RANGE", ")", ")", ":", "# if all points outside of epsilon region - take closest points", "\n", "        ", "closest_indices", "=", "np", ".", "argsort", "(", "X_dist", "[", "i", ",", ":", "]", ")", "[", ":", "_N_POINT_OUT_OF_RANGE", "]", "\n", "for", "j", "in", "np", ".", "nditer", "(", "closest_indices", ")", ":", "\n", "          ", "mask", "[", "i", ",", "j", "]", "=", "False", "\n", "\n", "", "", "", "num_neighbors", "=", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "mask", ")", ",", "axis", "=", "1", ")", "\n", "neighbor_distances", "=", "np", ".", "ma", ".", "masked_where", "(", "mask", ",", "X_dist", ")", "\n", "\n", "if", "self", ".", "weighted", ":", "\n", "# neighbors are weighted in proportion to their distance to the query point", "\n", "      ", "neighbor_weights", "=", "normalize", "(", "neighbor_distances", ".", "filled", "(", "fill_value", "=", "0", ")", ",", "norm", "=", "'l1'", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "# all neighbors are weighted equally", "\n", "      ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "# don't print division by zero warning", "\n", "weights", "=", "1", "/", "num_neighbors", "\n", "", "neighbor_weights", "=", "neighbor_distances", ".", "copy", "(", ")", "\n", "neighbor_weights", "[", ":", "]", "=", "weights", "[", ":", ",", "None", "]", "\n", "neighbor_weights", "=", "np", ".", "ma", ".", "masked_where", "(", "mask", ",", "neighbor_weights", ")", ".", "filled", "(", "fill_value", "=", "0", ")", "\n", "\n", "", "return", "neighbor_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._log_density": [[204, 212], ["numpy.array", "scipy.special.logsumexp", "NKDE.NeighborKernelDensityEstimation._single_log_density", "numpy.nditer", "numpy.nonzero"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._single_log_density"], ["", "def", "_log_density", "(", "self", ",", "bw", ",", "neighbor_weights", ",", "y", ")", ":", "\n", "    ", "assert", "neighbor_weights", ".", "shape", "[", "0", "]", "==", "self", ".", "n_train_points", "\n", "assert", "y", ".", "shape", "[", "0", "]", "==", "self", ".", "ndim_y", "\n", "\n", "log_single_densities", "=", "np", ".", "array", "(", "[", "self", ".", "_single_log_density", "(", "bw", ",", "neighbor_weights", "[", "i", "]", ",", "i", ",", "y", ")", "\n", "for", "i", "in", "np", ".", "nditer", "(", "np", ".", "nonzero", "(", "neighbor_weights", ")", ")", "]", ")", "\n", "\n", "return", "logsumexp", "(", "log_single_densities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._single_log_density": [[213, 215], ["numpy.sum", "numpy.log", "NKDE.NeighborKernelDensityEstimation.log_kernel", "numpy.log"], "methods", ["None"], ["", "def", "_single_log_density", "(", "self", ",", "bw", ",", "neighbor_weight", ",", "kernel_id", ",", "y", ")", ":", "\n", "      ", "return", "np", ".", "log", "(", "neighbor_weight", ")", "+", "self", ".", "log_kernel", "(", "(", "y", "-", "self", ".", "Y_train", "[", "kernel_id", ",", ":", "]", ")", "/", "bw", ")", "-", "np", ".", "sum", "(", "np", ".", "log", "(", "bw", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._param_grid": [[216, 228], ["numpy.mean", "numpy.mean", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "_param_grid", "(", "self", ")", ":", "\n", "    ", "mean_std_y", "=", "np", ".", "mean", "(", "self", ".", "y_std", ")", "\n", "mean_std_x", "=", "np", ".", "mean", "(", "self", ".", "x_std", ")", "\n", "bandwidths", "=", "np", ".", "asarray", "(", "[", "0.2", ",", "0.5", ",", "0.7", "]", ")", "*", "mean_std_y", "\n", "epsilons", "=", "np", ".", "asarray", "(", "[", "0.05", ",", "0.2", ",", "0.4", "]", ")", "*", "mean_std_x", "\n", "\n", "param_grid", "=", "{", "\n", "\"bandwidth\"", ":", "bandwidths", ",", "\n", "\"epsilon\"", ":", "epsilons", ",", "\n", "\"weighted\"", ":", "[", "True", ",", "False", "]", "\n", "}", "\n", "return", "param_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._normalize_x": [[229, 233], ["None"], "methods", ["None"], ["", "def", "_normalize_x", "(", "self", ",", "X", ")", ":", "\n", "    ", "X_normalized", "=", "(", "X", "-", "self", ".", "x_mean", ")", "/", "self", ".", "x_std", "\n", "assert", "X_normalized", ".", "shape", "==", "X", ".", "shape", "\n", "return", "X_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._normal_reference": [[234, 241], ["cde.utils.misc.norm_along_axis_1", "numpy.mean", "numpy.ma.masked_where().count", "numpy.ma.masked_where"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.misc.norm_along_axis_1"], ["", "def", "_normal_reference", "(", "self", ")", ":", "\n", "    ", "X_dist", "=", "norm_along_axis_1", "(", "self", ".", "X_train", ",", "self", ".", "X_train", ",", "norm_dim", "=", "True", ")", "\n", "\n", "# filter out all points that are not in a epsilon region of x", "\n", "avg_num_neighbors", "=", "np", ".", "mean", "(", "np", ".", "ma", ".", "masked_where", "(", "X_dist", ">", "self", ".", "epsilon", ",", "X_dist", ")", ".", "count", "(", "axis", "=", "1", ")", ")", "-", "1", "\n", "\n", "return", "1.06", "*", "self", ".", "y_std", "*", "avg_num_neighbors", "**", "(", "-", "1.", "/", "(", "4", "+", "self", ".", "ndim_y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._cv_ml": [[242, 255], ["NKDE.NeighborKernelDensityEstimation._normal_reference", "numpy.concatenate", "scipy.fmin", "float", "numpy.array", "NKDE.NeighborKernelDensityEstimation.loo_likelihood"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation._normal_reference", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.loo_likelihood"], ["", "def", "_cv_ml", "(", "self", ")", ":", "\n", "    ", "bw", "=", "self", ".", "_normal_reference", "(", ")", "# use normal_reference as initialization for bandwidth", "\n", "x0", "=", "np", ".", "concatenate", "(", "[", "bw", ",", "np", ".", "array", "(", "[", "self", ".", "epsilon", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "def", "loologli", "(", "x", ")", ":", "\n", "      ", "assert", "x", ".", "shape", "[", "0", "]", "==", "self", ".", "ndim_y", "+", "1", "\n", "bw", "=", "x", "[", ":", "self", ".", "ndim_y", "]", "\n", "eps", "=", "float", "(", "x", "[", "self", ".", "ndim_y", "]", ")", "\n", "return", "-", "self", ".", "loo_likelihood", "(", "bw", ",", "epsilon", "=", "eps", ")", "\n", "\n", "", "x_opt", "=", "optimize", ".", "fmin", "(", "loologli", ",", "x0", "=", "x0", ",", "maxiter", "=", "_MAX_ITER_CV_ML_OPTIMIZER", ",", "disp", "=", "0", ")", "\n", "bw_opt", ",", "eps_opt", "=", "x_opt", "[", ":", "self", ".", "ndim_y", "]", ",", "x_opt", "[", "self", ".", "ndim_y", "]", "\n", "return", "bw_opt", ",", "eps_opt", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.__str__": [[256, 259], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "\"\\nEstimator type: {}\\n  epsilon: {}\\n weighted: {}\\n bandwidth: {}\\n \"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "epsilon", ",", "self", ".", "weighted", ",", "\n", "self", ".", "bandwidth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.__unicode__": [[260, 262], ["NKDE.NeighborKernelDensityEstimation.__str__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__str__"], ["", "def", "__unicode__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__str__", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.MDN.MixtureDensityNetwork.__init__": [[40, 83], ["cde.utils.serializable.Serializable.quick_init", "MDN.MixtureDensityNetwork._check_uniqueness_of_scope", "numpy.random.RandomState", "tensorflow.set_random_seed", "MDN.MixtureDensityNetwork._build_model", "locals"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._check_uniqueness_of_scope", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator._build_model"], ["def", "__init__", "(", "self", ",", "name", ",", "ndim_x", ",", "ndim_y", ",", "n_centers", "=", "10", ",", "hidden_sizes", "=", "(", "16", ",", "16", ")", ",", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "tanh", ",", "\n", "n_training_epochs", "=", "1000", ",", "x_noise_std", "=", "None", ",", "y_noise_std", "=", "None", ",", "adaptive_noise_fn", "=", "None", ",", "entropy_reg_coef", "=", "0.0", ",", "\n", "weight_decay", "=", "0.0", ",", "weight_normalization", "=", "True", ",", "data_normalization", "=", "True", ",", "dropout", "=", "0.0", ",", "l2_reg", "=", "0.0", ",", "l1_reg", "=", "0.0", ",", "\n", "random_seed", "=", "None", ")", ":", "\n", "\n", "    ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "_check_uniqueness_of_scope", "(", "name", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "ndim_x", "=", "ndim_x", "\n", "self", ".", "ndim_y", "=", "ndim_y", "\n", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "random_seed", ")", "\n", "tf", ".", "set_random_seed", "(", "random_seed", ")", "\n", "\n", "self", ".", "n_centers", "=", "n_centers", "\n", "\n", "self", ".", "hidden_sizes", "=", "hidden_sizes", "\n", "self", ".", "hidden_nonlinearity", "=", "hidden_nonlinearity", "\n", "\n", "self", ".", "n_training_epochs", "=", "n_training_epochs", "\n", "\n", "# regularization parameters", "\n", "self", ".", "x_noise_std", "=", "x_noise_std", "\n", "self", ".", "y_noise_std", "=", "y_noise_std", "\n", "self", ".", "entropy_reg_coef", "=", "entropy_reg_coef", "\n", "self", ".", "adaptive_noise_fn", "=", "adaptive_noise_fn", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "l2_reg", "=", "l2_reg", "\n", "self", ".", "l1_reg", "=", "l1_reg", "\n", "self", ".", "weight_normalization", "=", "weight_normalization", "\n", "self", ".", "data_normalization", "=", "data_normalization", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "can_sample", "=", "True", "\n", "self", ".", "has_pdf", "=", "True", "\n", "self", ".", "has_cdf", "=", "True", "\n", "\n", "self", ".", "fitted", "=", "False", "\n", "\n", "# build tensorflow model", "\n", "self", ".", "_build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.MDN.MixtureDensityNetwork.fit": [[84, 110], ["MDN.MixtureDensityNetwork._handle_input_dimensionality", "MDN.MixtureDensityNetwork._setup_inference_and_initialize", "MDN.MixtureDensityNetwork._compute_noise_intensity", "MDN.MixtureDensityNetwork._partial_fit", "MDN.MixtureDensityNetwork._handle_input_dimensionality", "MDN.MixtureDensityNetwork._compute_data_normalization"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._setup_inference_and_initialize", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._compute_noise_intensity", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._partial_fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._compute_data_normalization"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ",", "random_seed", "=", "None", ",", "verbose", "=", "True", ",", "eval_set", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Fits the conditional density model with provided data\n\n      Args:\n        X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n        Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n        eval_set: (tuple) eval/test set - tuple (X_test, Y_test)\n        verbose: (boolean) controls the verbosity (console output)\n\n    \"\"\"", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ",", "fitting", "=", "True", ")", "\n", "\n", "if", "eval_set", "is", "not", "None", ":", "\n", "      ", "eval_set", "=", "self", ".", "_handle_input_dimensionality", "(", "*", "eval_set", ")", "\n", "\n", "", "self", ".", "_setup_inference_and_initialize", "(", ")", "\n", "\n", "# data normalization if desired", "\n", "if", "self", ".", "data_normalization", ":", "# this must happen after the initialization", "\n", "      ", "self", ".", "_compute_data_normalization", "(", "X", ",", "Y", ")", "# computes mean & std of data and assigns it to tf graph for normalization", "\n", "\n", "", "self", ".", "_compute_noise_intensity", "(", "X", ",", "Y", ")", "\n", "\n", "# train the model", "\n", "self", ".", "_partial_fit", "(", "X", ",", "Y", ",", "n_epoch", "=", "self", ".", "n_training_epochs", ",", "verbose", "=", "verbose", ",", "eval_set", "=", "eval_set", ")", "\n", "self", ".", "fitted", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.MDN.MixtureDensityNetwork._build_model": [[111, 187], ["cde.utils.tf_utils.layers_powered.LayersPowered.__init__", "tensorflow.variable_scope", "MDN.MixtureDensityNetwork._build_input_layers", "cde.utils.tf_utils.network.MLP", "cde.SliceLayer", "cde.SliceLayer", "cde.SliceLayer", "cde.ReshapeLayer", "cde.get_output", "cde.ReshapeLayer", "cde.NonlinearityLayer", "cde.get_output", "cde.get_output", "cde.NonlinearityLayer", "cde.get_output", "cde.get_output", "edward.models.Categorical", "edward.models.Mixture", "MDN.MixtureDensityNetwork._add_softmax_entropy_regularization", "MDN.MixtureDensityNetwork._add_l1_l2_regularization", "edward.models.Mixture.sample", "edward.models.MultivariateNormalDiag", "edward.models.Mixture.prob", "edward.models.Mixture.log_prob", "slice", "slice", "slice", "zip", "tensorflow.zeros_like", "edward.models.Mixture.prob", "tensorflow.reduce_prod", "edward.models.Mixture.log_prob", "tensorflow.reduce_sum", "tensorflow.unstack", "tensorflow.unstack", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._build_input_layers", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNMixtureEstimator.BaseNNMixtureEstimator._add_softmax_entropy_regularization", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._add_l1_l2_regularization", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    implementation of the MDN\n    \"\"\"", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "# adds placeholders, data_normalization and data_noise if desired. Also adds a placeholder for dropout probability", "\n", "      ", "self", ".", "layer_in_x", ",", "self", ".", "layer_in_y", "=", "self", ".", "_build_input_layers", "(", ")", "\n", "\n", "# create core multi-layer perceptron", "\n", "mlp_output_dim", "=", "2", "*", "self", ".", "ndim_y", "*", "self", ".", "n_centers", "+", "self", ".", "n_centers", "\n", "core_network", "=", "MLP", "(", "\n", "name", "=", "\"core_network\"", ",", "\n", "input_layer", "=", "self", ".", "layer_in_x", ",", "\n", "output_dim", "=", "mlp_output_dim", ",", "\n", "hidden_sizes", "=", "self", ".", "hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "self", ".", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "weight_normalization", "=", "self", ".", "weight_normalization", ",", "\n", "dropout_ph", "=", "self", ".", "dropout_ph", "if", "self", ".", "dropout", "else", "None", "\n", ")", "\n", "\n", "core_output_layer", "=", "core_network", ".", "output_layer", "\n", "\n", "# slice output of MLP into three equally sized parts for loc, scale and mixture weights", "\n", "slice_layer_locs", "=", "L", ".", "SliceLayer", "(", "core_output_layer", ",", "indices", "=", "slice", "(", "0", ",", "self", ".", "ndim_y", "*", "self", ".", "n_centers", ")", ",", "axis", "=", "-", "1", ")", "\n", "slice_layer_scales", "=", "L", ".", "SliceLayer", "(", "core_output_layer", ",", "indices", "=", "slice", "(", "self", ".", "ndim_y", "*", "self", ".", "n_centers", ",", "2", "*", "self", ".", "ndim_y", "*", "self", ".", "n_centers", ")", ",", "axis", "=", "-", "1", ")", "\n", "slice_layer_weights", "=", "L", ".", "SliceLayer", "(", "core_output_layer", ",", "indices", "=", "slice", "(", "2", "*", "self", ".", "ndim_y", "*", "self", ".", "n_centers", ",", "mlp_output_dim", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# locations mixture components", "\n", "self", ".", "reshape_layer_locs", "=", "L", ".", "ReshapeLayer", "(", "slice_layer_locs", ",", "(", "-", "1", ",", "self", ".", "n_centers", ",", "self", ".", "ndim_y", ")", ")", "\n", "self", ".", "locs", "=", "L", ".", "get_output", "(", "self", ".", "reshape_layer_locs", ")", "\n", "\n", "# scales of the mixture components", "\n", "reshape_layer_scales", "=", "L", ".", "ReshapeLayer", "(", "slice_layer_scales", ",", "(", "-", "1", ",", "self", ".", "n_centers", ",", "self", ".", "ndim_y", ")", ")", "\n", "self", ".", "softplus_layer_scales", "=", "L", ".", "NonlinearityLayer", "(", "reshape_layer_scales", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "softplus", ")", "\n", "self", ".", "scales", "=", "L", ".", "get_output", "(", "self", ".", "softplus_layer_scales", ")", "\n", "\n", "# weights of the mixture components", "\n", "self", ".", "logits", "=", "L", ".", "get_output", "(", "slice_layer_weights", ")", "\n", "self", ".", "softmax_layer_weights", "=", "L", ".", "NonlinearityLayer", "(", "slice_layer_weights", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "softmax", ")", "\n", "self", ".", "weights", "=", "L", ".", "get_output", "(", "self", ".", "softmax_layer_weights", ")", "\n", "\n", "# # put mixture components together", "\n", "self", ".", "y_input", "=", "L", ".", "get_output", "(", "self", ".", "layer_in_y", ")", "\n", "self", ".", "cat", "=", "cat", "=", "Categorical", "(", "logits", "=", "self", ".", "logits", ")", "\n", "self", ".", "components", "=", "components", "=", "[", "MultivariateNormalDiag", "(", "loc", "=", "loc", ",", "scale_diag", "=", "scale", ")", "for", "loc", ",", "scale", "\n", "in", "zip", "(", "tf", ".", "unstack", "(", "self", ".", "locs", ",", "axis", "=", "1", ")", ",", "tf", ".", "unstack", "(", "self", ".", "scales", ",", "axis", "=", "1", ")", ")", "]", "\n", "self", ".", "mixture", "=", "mixture", "=", "Mixture", "(", "cat", "=", "cat", ",", "components", "=", "components", ",", "value", "=", "tf", ".", "zeros_like", "(", "self", ".", "y_input", ")", ")", "\n", "\n", "# regularization", "\n", "self", ".", "_add_softmax_entropy_regularization", "(", ")", "\n", "self", ".", "_add_l1_l2_regularization", "(", "core_network", ")", "\n", "\n", "# tensor to store samples", "\n", "self", ".", "samples", "=", "mixture", ".", "sample", "(", ")", "#TODO either use it or remove it", "\n", "\n", "# tensor to compute probabilities", "\n", "if", "self", ".", "data_normalization", ":", "\n", "        ", "self", ".", "pdf_", "=", "mixture", ".", "prob", "(", "self", ".", "y_input", ")", "/", "tf", ".", "reduce_prod", "(", "self", ".", "std_y_sym", ")", "\n", "self", ".", "log_pdf_", "=", "mixture", ".", "log_prob", "(", "self", ".", "y_input", ")", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "self", ".", "std_y_sym", ")", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "pdf_", "=", "mixture", ".", "prob", "(", "self", ".", "y_input", ")", "\n", "self", ".", "log_pdf_", "=", "mixture", ".", "log_prob", "(", "self", ".", "y_input", ")", "\n", "\n", "# symbolic tensors for getting the unnormalized mixture components", "\n", "", "if", "self", ".", "data_normalization", ":", "\n", "        ", "self", ".", "scales_unnormalized", "=", "self", ".", "scales", "*", "self", ".", "std_y_sym", "\n", "self", ".", "locs_unnormalized", "=", "self", ".", "locs", "*", "self", ".", "std_y_sym", "+", "self", ".", "mean_y_sym", "\n", "", "else", ":", "\n", "        ", "self", ".", "scales_unnormalized", "=", "self", ".", "scales", "\n", "self", ".", "locs_unnormalized", "=", "self", ".", "locs", "\n", "\n", "# initialize LayersPowered --> provides functions for serializing tf models", "\n", "", "", "LayersPowered", ".", "__init__", "(", "self", ",", "[", "self", ".", "softmax_layer_weights", ",", "self", ".", "softplus_layer_scales", ",", "self", ".", "reshape_layer_locs", ",", "\n", "self", ".", "layer_in_y", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.MDN.MixtureDensityNetwork._param_grid": [[188, 196], ["None"], "methods", ["None"], ["", "def", "_param_grid", "(", "self", ")", ":", "\n", "    ", "param_grid", "=", "{", "\n", "\"n_training_epochs\"", ":", "[", "500", ",", "1000", "]", ",", "\n", "\"n_centers\"", ":", "[", "5", ",", "10", ",", "20", "]", ",", "\n", "\"x_noise_std\"", ":", "[", "0.1", ",", "0.15", ",", "0.2", ",", "0.3", "]", ",", "\n", "\"y_noise_std\"", ":", "[", "0.1", ",", "0.15", ",", "0.2", "]", "\n", "}", "\n", "return", "param_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.MDN.MixtureDensityNetwork._get_mixture_components": [[197, 205], ["MDN.MixtureDensityNetwork.sess.run"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "_get_mixture_components", "(", "self", ",", "X", ")", ":", "\n", "    ", "assert", "self", ".", "fitted", "\n", "weights", ",", "locs", ",", "scales", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "weights", ",", "self", ".", "locs_unnormalized", ",", "self", ".", "scales_unnormalized", "]", ",", "feed_dict", "=", "{", "self", ".", "X_ph", ":", "X", "}", ")", "\n", "assert", "weights", ".", "shape", "[", "0", "]", "==", "locs", ".", "shape", "[", "0", "]", "==", "scales", ".", "shape", "[", "0", "]", "==", "X", ".", "shape", "[", "0", "]", "\n", "assert", "weights", ".", "shape", "[", "1", "]", "==", "locs", ".", "shape", "[", "1", "]", "==", "scales", ".", "shape", "[", "1", "]", "==", "self", ".", "n_centers", "\n", "assert", "locs", ".", "shape", "[", "2", "]", "==", "scales", ".", "shape", "[", "2", "]", "==", "self", ".", "ndim_y", "\n", "assert", "locs", ".", "ndim", "==", "3", "and", "scales", ".", "ndim", "==", "3", "and", "weights", ".", "ndim", "==", "2", "\n", "return", "weights", ",", "locs", ",", "scales", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.MDN.MixtureDensityNetwork.__str__": [[206, 210], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "\"\\nEstimator type: {}\\n n_centers: {}\\n entropy_reg_coef: {}\\n data_normalization: {} \\n weight_normalization: {}\\n\"", "\"n_training_epochs: {}\\n x_noise_std: {}\\n y_noise_std: {}\\n \"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "n_centers", ",", "self", ".", "entropy_reg_coef", ",", "\n", "self", ".", "data_normalization", ",", "self", ".", "weight_normalization", ",", "self", ".", "n_training_epochs", ",", "self", ".", "x_noise_std", ",", "self", ".", "y_noise_std", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.__init__": [[38, 101], ["cde.utils.serializable.Serializable.quick_init", "NF.NormalizingFlowEstimator._check_uniqueness_of_scope", "numpy.random.RandomState", "tensorflow.set_random_seed", "all", "NF.NormalizingFlowEstimator._build_model", "locals", "normalizing_flows.FLOWS.keys", "range"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._check_uniqueness_of_scope", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator._build_model"], ["def", "__init__", "(", "self", ",", "name", ",", "ndim_x", ",", "ndim_y", ",", "flows_type", "=", "None", ",", "n_flows", "=", "10", ",", "hidden_sizes", "=", "(", "16", ",", "16", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "tanh", ",", "n_training_epochs", "=", "1000", ",", "x_noise_std", "=", "None", ",", "y_noise_std", "=", "None", ",", "adaptive_noise_fn", "=", "None", ",", "\n", "weight_decay", "=", "0.0", ",", "weight_normalization", "=", "True", ",", "data_normalization", "=", "True", ",", "dropout", "=", "0.0", ",", "l2_reg", "=", "0.0", ",", "l1_reg", "=", "0.0", ",", "\n", "random_seed", "=", "None", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "_check_uniqueness_of_scope", "(", "name", ")", "\n", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "ndim_x", "=", "ndim_x", "\n", "self", ".", "ndim_y", "=", "ndim_y", "\n", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "random_seed", ")", "\n", "tf", ".", "set_random_seed", "(", "random_seed", ")", "\n", "\n", "# charateristics of the flows to be used", "\n", "if", "flows_type", "is", "None", ":", "\n", "            ", "flows_type", "=", "[", "'affine'", "]", "+", "[", "'radial'", "for", "_", "in", "range", "(", "n_flows", ")", "]", "\n", "", "assert", "all", "(", "[", "f", "in", "FLOWS", ".", "keys", "(", ")", "for", "f", "in", "flows_type", "]", ")", "\n", "self", ".", "flows_type", "=", "flows_type", "\n", "\n", "# specification of the network", "\n", "self", ".", "hidden_sizes", "=", "hidden_sizes", "\n", "self", ".", "hidden_nonlinearity", "=", "hidden_nonlinearity", "\n", "\n", "self", ".", "n_training_epochs", "=", "n_training_epochs", "\n", "\n", "# regularization parameters", "\n", "self", ".", "x_noise_std", "=", "x_noise_std", "\n", "self", ".", "y_noise_std", "=", "y_noise_std", "\n", "self", ".", "adaptive_noise_fn", "=", "adaptive_noise_fn", "\n", "\n", "# decoupled weight decay", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "\n", "# l1 / l2 regularization", "\n", "self", ".", "l2_reg", "=", "l2_reg", "\n", "self", ".", "l1_reg", "=", "l1_reg", "\n", "\n", "\n", "# normalizing the network weights", "\n", "self", ".", "weight_normalization", "=", "weight_normalization", "\n", "\n", "# whether to normalize the data to zero mean, and uniform variance", "\n", "self", ".", "data_normalization", "=", "data_normalization", "\n", "\n", "# the prob of dropping a node", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "# gradients for planar flows tend to explode -> clip them by global norm", "\n", "self", ".", "gradient_clipping", "=", "True", "if", "'planar'", "in", "flows_type", "else", "False", "\n", "\n", "# as we'll be using reversed flows, sampling is too slow to be useful", "\n", "self", ".", "can_sample", "=", "False", "\n", "self", ".", "has_pdf", "=", "True", "\n", "# tf has a cdf implementation only for 1-D Normal Distribution", "\n", "self", ".", "has_cdf", "=", "True", "if", "self", ".", "ndim_y", "==", "1", "else", "False", "\n", "\n", "self", ".", "fitted", "=", "False", "\n", "\n", "# build tensorflow model", "\n", "self", ".", "_build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit": [[102, 140], ["NF.NormalizingFlowEstimator._handle_input_dimensionality", "tensorflow.get_collection", "tensorflow.initializers.variables().run", "NF.NormalizingFlowEstimator._compute_noise_intensity", "range", "tuple", "tensorflow.get_default_session", "tensorflow.get_default_session", "tensorflow.InteractiveSession", "NF.NormalizingFlowEstimator._compute_data_normalization", "NF.NormalizingFlowEstimator.sess.run", "tensorflow.initializers.variables", "NF.NormalizingFlowEstimator.sess.run", "NF.NormalizingFlowEstimator._handle_input_dimensionality", "print", "NF.NormalizingFlowEstimator.sess.run", "print"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._compute_noise_intensity", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._compute_data_normalization", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ",", "random_seed", "=", "None", ",", "verbose", "=", "True", ",", "eval_set", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Fit the model with to the provided data\n\n        :param X: numpy array to be conditioned on - shape: (n_samples, n_dim_x)\n        :param Y: numpy array of y targets - shape: (n_samples, n_dim_y)\n        :param eval_set: (tuple) eval/test dataset - tuple (X_test, Y_test)\n        :param verbose: (boolean) controls the verbosity of console output\n        \"\"\"", "\n", "\n", "X", ",", "Y", "=", "self", ".", "_handle_input_dimensionality", "(", "X", ",", "Y", ",", "fitting", "=", "True", ")", "\n", "\n", "if", "eval_set", ":", "\n", "            ", "eval_set", "=", "tuple", "(", "self", ".", "_handle_input_dimensionality", "(", "x", ")", "for", "x", "in", "eval_set", ")", "\n", "\n", "# If no session has yet been created, create one and make it the default", "\n", "", "self", ".", "sess", "=", "tf", ".", "get_default_session", "(", ")", "if", "tf", ".", "get_default_session", "(", ")", "else", "tf", ".", "InteractiveSession", "(", ")", "\n", "\n", "var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "tf", ".", "initializers", ".", "variables", "(", "var_list", ",", "name", "=", "'init'", ")", ".", "run", "(", ")", "\n", "\n", "if", "self", ".", "data_normalization", ":", "\n", "            ", "self", ".", "_compute_data_normalization", "(", "X", ",", "Y", ")", "\n", "\n", "", "self", ".", "_compute_noise_intensity", "(", "X", ",", "Y", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_training_epochs", "+", "1", ")", ":", "\n", "            ", "self", ".", "sess", ".", "run", "(", "self", ".", "train_step", ",", "\n", "feed_dict", "=", "{", "self", ".", "X_ph", ":", "X", ",", "self", ".", "Y_ph", ":", "Y", ",", "self", ".", "train_phase", ":", "True", ",", "self", ".", "dropout_ph", ":", "self", ".", "dropout", "}", ")", "\n", "if", "verbose", "and", "not", "i", "%", "100", ":", "\n", "                ", "log_loss", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "log_loss", ",", "feed_dict", "=", "{", "self", ".", "X_ph", ":", "X", ",", "self", ".", "Y_ph", ":", "Y", "}", ")", "\n", "if", "not", "eval_set", ":", "\n", "                    ", "print", "(", "'Step {:4}: train log-loss {: .4f}'", ".", "format", "(", "i", ",", "log_loss", ")", ")", "\n", "", "else", ":", "\n", "                    ", "eval_ll", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "log_loss", ",", "feed_dict", "=", "{", "self", ".", "X_ph", ":", "eval_set", "[", "0", "]", ",", "self", ".", "Y_ph", ":", "eval_set", "[", "1", "]", "}", ")", "\n", "print", "(", "'Step {:4}: train log-loss {: .4f} eval log-loss {: .4f}'", ".", "format", "(", "i", ",", "log_loss", ",", "eval_ll", ")", ")", "\n", "\n", "", "", "", "self", ".", "fitted", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.reset_fit": [[141, 148], ["tensorflow.reset_default_graph", "NF.NormalizingFlowEstimator._build_model"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator._build_model"], ["", "def", "reset_fit", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Resets all tensorflow objects and enables this model to be fitted anew\n        \"\"\"", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "self", ".", "_build_model", "(", ")", "\n", "self", ".", "fitted", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator._param_grid": [[149, 169], ["None"], "methods", ["None"], ["", "def", "_param_grid", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'n_training_epochs'", ":", "[", "500", ",", "1000", ",", "1500", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", ",", "(", "32", ",", "32", ")", "]", ",", "\n", "'flows_type'", ":", "[", "\n", "# radial", "\n", "(", "'affine'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ")", ",", "\n", "(", "'affine'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ")", ",", "\n", "(", "'affine'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ")", ",", "\n", "# planar", "\n", "(", "'planar'", ",", "'planar'", ",", "'planar'", ")", ",", "\n", "(", "'affine'", ",", "'planar'", ",", "'planar'", ",", "'planar'", ")", ",", "\n", "(", "'affine'", ",", "'planar'", ",", "'planar'", ",", "'planar'", ",", "'planar'", ")", ",", "\n", "# mix", "\n", "(", "'affine'", ",", "'radial'", ",", "'planar'", ",", "'radial'", ",", "'planar'", ",", ")", ",", "\n", "(", "'affine'", ",", "'radial'", ",", "'planar'", ",", "'radial'", ",", "'planar'", ",", "'radial'", ")", ",", "\n", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", ",", "0.4", ",", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.01", ",", "0.02", ",", "0.05", ",", "0.1", ",", "0.2", ",", "None", "]", ",", "\n", "'weight_decay'", ":", "[", "1e-5", ",", "0.0", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator._build_model": [[171, 255], ["cde.utils.tf_utils.layers_powered.LayersPowered.__init__", "tensorflow.variable_scope", "NF.NormalizingFlowEstimator._build_input_layers", "cde.get_output", "sum", "cde.utils.tf_utils.network.MLP", "cde.get_output", "tensorflow.split", "flows.reverse", "tensorflow.contrib.distributions.bijectors.Chain", "tensorflow.contrib.distributions.TransformedDistribution", "NF.NormalizingFlowEstimator._add_l1_l2_regularization", "tensorflow.reduce_sum", "flow.get_param_size", "flow", "tensorflow.distributions.Normal", "tensorflow.contrib.distributions.MultivariateNormalDiag", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.contrib.distributions.TransformedDistribution.prob", "tensorflow.contrib.distributions.TransformedDistribution.log_prob", "tensorflow.reduce_prod", "tensorflow.losses.get_regularization_losses", "cde.utils.tf_utils.adamW.AdamWOptimizer", "tensorflow.train.AdamOptimizer", "zip", "tensorflow.clip_by_global_norm", "optimizer.apply_gradients", "optimizer.minimize", "zip", "tensorflow.contrib.distributions.TransformedDistribution.prob", "tensorflow.contrib.distributions.TransformedDistribution.log_prob", "tensorflow.contrib.distributions.TransformedDistribution.cdf", "tensorflow.reduce_prod", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "zip", "tensorflow.log", "tensorflow.reduce_prod", "optimizer.compute_gradients"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._build_input_layers", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.layers.get_output", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator._add_l1_l2_regularization", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow.get_param_size", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension.apply_gradients", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.tf_utils.adamW.DecoupledWeightDecayExtension.minimize", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.cdf"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        implementation of the flow model\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "# adds placeholders, data normalization and data noise to graph as desired. Also sets up a placeholder", "\n", "# for dropout", "\n", "            ", "self", ".", "layer_in_x", ",", "self", ".", "layer_in_y", "=", "self", ".", "_build_input_layers", "(", ")", "\n", "self", ".", "y_input", "=", "L", ".", "get_output", "(", "self", ".", "layer_in_y", ")", "\n", "\n", "flow_classes", "=", "[", "FLOWS", "[", "flow_name", "]", "for", "flow_name", "in", "self", ".", "flows_type", "]", "\n", "# get the individual parameter sizes for each flow", "\n", "param_split_sizes", "=", "[", "flow", ".", "get_param_size", "(", "self", ".", "ndim_y", ")", "for", "flow", "in", "flow_classes", "]", "\n", "mlp_output_dim", "=", "sum", "(", "param_split_sizes", ")", "\n", "core_network", "=", "MLP", "(", "\n", "name", "=", "\"core_network\"", ",", "\n", "input_layer", "=", "self", ".", "layer_in_x", ",", "\n", "output_dim", "=", "mlp_output_dim", ",", "\n", "hidden_sizes", "=", "self", ".", "hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "self", ".", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "weight_normalization", "=", "self", ".", "weight_normalization", ",", "\n", "dropout_ph", "=", "self", ".", "dropout_ph", "if", "self", ".", "dropout", "else", "None", "\n", ")", "\n", "outputs", "=", "L", ".", "get_output", "(", "core_network", ".", "output_layer", ")", "\n", "flow_params", "=", "tf", ".", "split", "(", "value", "=", "outputs", ",", "num_or_size_splits", "=", "param_split_sizes", ",", "axis", "=", "1", ")", "\n", "\n", "# instanciate the flows with their parameters", "\n", "flows", "=", "[", "flow", "(", "params", ",", "self", ".", "ndim_y", ")", "for", "flow", ",", "params", "in", "zip", "(", "flow_classes", ",", "flow_params", ")", "]", "\n", "\n", "# build up the base distribution that will be transformed by the flows", "\n", "if", "self", ".", "ndim_y", "==", "1", ":", "\n", "# this is faster for 1-D than the multivariate version", "\n", "# it also supports a cdf, which isn't implemented for Multivariate", "\n", "                ", "base_dist", "=", "tf", ".", "distributions", ".", "Normal", "(", "loc", "=", "0.", ",", "scale", "=", "1.", ")", "\n", "", "else", ":", "\n", "                ", "base_dist", "=", "tf", ".", "contrib", ".", "distributions", ".", "MultivariateNormalDiag", "(", "loc", "=", "[", "0.", "]", "*", "self", ".", "ndim_y", ",", "\n", "scale_diag", "=", "[", "1.", "]", "*", "self", ".", "ndim_y", ")", "\n", "\n", "# chain the flows together and build the transformed distribution using the base_dist + flows", "\n", "# Chaining applies the flows in reverse, Chain([a,b]).forward(x) being a.forward(b.forward(x))", "\n", "# We reverse them so the flows are stacked ontop of the base distribution in the original order", "\n", "", "flows", ".", "reverse", "(", ")", "\n", "chain", "=", "tf", ".", "contrib", ".", "distributions", ".", "bijectors", ".", "Chain", "(", "flows", ")", "\n", "target_dist", "=", "tf", ".", "contrib", ".", "distributions", ".", "TransformedDistribution", "(", "distribution", "=", "base_dist", ",", "bijector", "=", "chain", ")", "\n", "\n", "# since we operate with matrices not vectors, the output would have dimension (?,1)", "\n", "# and therefor has to be reduce first to have shape (?,)", "\n", "if", "self", ".", "ndim_y", "==", "1", ":", "\n", "# for x shape (batch_size, 1) normal_distribution.pdf(x) outputs shape (batch_size, 1) -> squeeze", "\n", "                ", "self", ".", "pdf_", "=", "tf", ".", "squeeze", "(", "target_dist", ".", "prob", "(", "self", ".", "y_input", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "log_pdf_", "=", "tf", ".", "squeeze", "(", "target_dist", ".", "log_prob", "(", "self", ".", "y_input", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "cdf_", "=", "tf", ".", "squeeze", "(", "target_dist", ".", "cdf", "(", "self", ".", "y_input", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "# no squeezing necessary for multivariate_normal, but we don't have a cdf", "\n", "                ", "self", ".", "pdf_", "=", "target_dist", ".", "prob", "(", "self", ".", "y_input", ")", "\n", "self", ".", "log_pdf_", "=", "target_dist", ".", "log_prob", "(", "self", ".", "y_input", ")", "\n", "\n", "\n", "", "if", "self", ".", "data_normalization", ":", "\n", "                ", "self", ".", "pdf_", "=", "self", ".", "pdf_", "/", "tf", ".", "reduce_prod", "(", "self", ".", "std_y_sym", ")", "\n", "self", ".", "log_pdf_", "=", "self", ".", "log_pdf_", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "self", ".", "std_y_sym", ")", ")", "\n", "# cdf is only implemented for 1-D", "\n", "if", "self", ".", "ndim_y", "==", "1", ":", "\n", "                    ", "self", ".", "cdf_", "=", "self", ".", "cdf_", "/", "tf", ".", "reduce_prod", "(", "self", ".", "std_y_sym", ")", "\n", "\n", "# regularization", "\n", "", "", "self", ".", "_add_l1_l2_regularization", "(", "core_network", ")", "\n", "\n", "self", ".", "loss", "=", "-", "tf", ".", "reduce_prod", "(", "self", ".", "pdf_", ")", "\n", "self", ".", "reg_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "losses", ".", "get_regularization_losses", "(", "scope", "=", "self", ".", "name", ")", ")", "#r egularization losses", "\n", "self", ".", "log_loss", "=", "-", "tf", ".", "reduce_sum", "(", "self", ".", "log_pdf_", ")", "+", "self", ".", "reg_loss", "\n", "\n", "optimizer", "=", "AdamWOptimizer", "(", "self", ".", "weight_decay", ",", "learning_rate", "=", "5e-3", ")", "if", "self", ".", "weight_decay", "else", "tf", ".", "train", ".", "AdamOptimizer", "(", ")", "\n", "\n", "if", "self", ".", "gradient_clipping", ":", "\n", "                ", "gradients", ",", "variables", "=", "zip", "(", "*", "optimizer", ".", "compute_gradients", "(", "self", ".", "log_loss", ")", ")", "\n", "gradients", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "gradients", ",", "3e5", ")", "\n", "self", ".", "train_step", "=", "optimizer", ".", "apply_gradients", "(", "zip", "(", "gradients", ",", "variables", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_step", "=", "optimizer", ".", "minimize", "(", "self", ".", "log_loss", ")", "\n", "\n", "# initialize LayersPowered -> provides functions for serializing tf models", "\n", "", "", "LayersPowered", ".", "__init__", "(", "self", ",", "[", "self", ".", "layer_in_y", ",", "core_network", ".", "output_layer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.__str__": [[256, 266], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"\\nEstimator type: {}\"", "\"\\n flows_type: {}\"", "\"\\n data_normalization: {}\"", "\"\\n weight_normalization: {}\"", "\"\\n n_training_epochs: {}\"", "\"\\n x_noise_std: {}\"", "\"\\n y_noise_std: {}\"", "\"\\n \"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "flows_type", ",", "self", ".", "data_normalization", ",", "\n", "self", ".", "weight_normalization", ",", "self", ".", "n_training_epochs", ",", "self", ".", "x_noise_std", ",", "self", ".", "y_noise_std", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.AffineFlow.AffineFlow.__init__": [[17, 26], ["BaseNormalizingFlow.BaseNormalizingFlow.__init__", "AffineFlow._handle_input_dimensionality", "tensorflow.split"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality"], ["def", "__init__", "(", "self", ",", "params", ",", "n_dims", ",", "name", "=", "'AffineFlow'", ")", ":", "\n", "        ", "super", "(", "AffineFlow", ",", "self", ")", ".", "__init__", "(", "params", ",", "\n", "n_dims", ",", "\n", "name", "=", "name", ")", "\n", "\n", "flow_params", "=", "[", "AffineFlow", ".", "_handle_input_dimensionality", "(", "x", ")", "\n", "for", "x", "in", "tf", ".", "split", "(", "value", "=", "params", ",", "num_or_size_splits", "=", "[", "n_dims", ",", "n_dims", "]", ",", "axis", "=", "1", ")", "]", "\n", "self", ".", "_a", "=", "flow_params", "[", "0", "]", "\n", "self", ".", "_b", "=", "flow_params", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.AffineFlow.AffineFlow.get_param_size": [[27, 34], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_param_size", "(", "n_dims", ")", ":", "\n", "        ", "\"\"\"\n        :param n_dims: The dimension of the distribution to be transformed by the flow.\n        :return: (int) The dimension of the parameter space for the flow. Here it's n_dims + n_dims\n        \"\"\"", "\n", "return", "2", "*", "n_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.AffineFlow.AffineFlow._forward": [[35, 40], ["tensorflow.exp"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass through the bijector. a*x + b\n        \"\"\"", "\n", "return", "tf", ".", "exp", "(", "self", ".", "_a", ")", "*", "x", "+", "self", ".", "_b", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.AffineFlow.AffineFlow._inverse": [[41, 46], ["tensorflow.exp"], "methods", ["None"], ["", "def", "_inverse", "(", "self", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Backward pass through the bijector. (y-b) / a\n        \"\"\"", "\n", "return", "(", "y", "-", "self", ".", "_b", ")", "*", "tf", ".", "exp", "(", "-", "self", ".", "_a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.AffineFlow.AffineFlow._ildj": [[47, 49], ["tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "_ildj", "(", "self", ",", "y", ")", ":", "\n", "        ", "return", "-", "tf", ".", "reduce_sum", "(", "self", ".", "_a", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.IdentityFlow.IdentityFlow.__init__": [[10, 18], ["BaseNormalizingFlow.BaseNormalizingFlow.__init__"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "n_dims", ",", "name", "=", "'IdentityFlow'", ")", ":", "\n", "        ", "\"\"\"\n        :param params: shape (?, 1), this will become alpha and define the slow of ReLU for x < 0\n        :param n_dims: Dimension of the distribution that's being transformed\n        \"\"\"", "\n", "super", "(", "IdentityFlow", ",", "self", ")", ".", "__init__", "(", "params", ",", "\n", "n_dims", ",", "\n", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.IdentityFlow.IdentityFlow.get_param_size": [[19, 26], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_param_size", "(", "n_dims", ")", ":", "\n", "        ", "\"\"\"\n        :param n_dims: The dimension of the distribution to be transformed by the flow. For this flow it's irrelevant\n        :return: (int) The dimension of the parameter space for the flow. This flow doesn't have parameters, hence it's always 0\n        \"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.IdentityFlow.IdentityFlow._forward": [[27, 29], ["None"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.IdentityFlow.IdentityFlow._inverse": [[30, 32], ["None"], "methods", ["None"], ["", "def", "_inverse", "(", "self", ",", "y", ")", ":", "\n", "        ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.IdentityFlow.IdentityFlow._forward_log_det_jacobian": [[33, 35], ["tensorflow.zeros", "tensorflow.shape"], "methods", ["None"], ["", "def", "_forward_log_det_jacobian", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "tf", ".", "zeros", "(", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.IdentityFlow.IdentityFlow._ildj": [[36, 38], ["tensorflow.zeros", "tensorflow.shape"], "methods", ["None"], ["", "def", "_ildj", "(", "self", ",", "y", ")", ":", "\n", "        ", "return", "tf", ".", "zeros", "(", "(", "tf", ".", "shape", "(", "y", ")", "[", "0", "]", ",", "1", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.PlanarFlow.InvertedPlanarFlow.__init__": [[19, 31], ["BaseNormalizingFlow.BaseNormalizingFlow.__init__", "InvertedPlanarFlow._u_circ", "InvertedPlanarFlow._handle_input_dimensionality", "tensorflow.split"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.PlanarFlow.InvertedPlanarFlow._u_circ", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality"], ["def", "__init__", "(", "self", ",", "params", ",", "n_dims", ",", "name", "=", "'Inverted_Planar_Flow'", ")", ":", "\n", "        ", "super", "(", "InvertedPlanarFlow", ",", "self", ")", ".", "__init__", "(", "params", ",", "n_dims", ",", "validate_args", "=", "False", ",", "name", "=", "name", ")", "\n", "\n", "# split the input parameter in to the individual parameters u, w, b", "\n", "u_index", ",", "w_index", ",", "b_index", "=", "0", ",", "1", ",", "2", "\n", "flow_params", "=", "[", "InvertedPlanarFlow", ".", "_handle_input_dimensionality", "(", "x", ")", "\n", "for", "x", "in", "tf", ".", "split", "(", "value", "=", "params", ",", "num_or_size_splits", "=", "[", "n_dims", ",", "n_dims", ",", "1", "]", ",", "axis", "=", "1", ")", "]", "\n", "\n", "# constrain u before assigning it", "\n", "self", ".", "_u", "=", "InvertedPlanarFlow", ".", "_u_circ", "(", "flow_params", "[", "u_index", "]", ",", "flow_params", "[", "w_index", "]", ")", "\n", "self", ".", "_w", "=", "flow_params", "[", "w_index", "]", "\n", "self", ".", "_b", "=", "flow_params", "[", "b_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.PlanarFlow.InvertedPlanarFlow.get_param_size": [[32, 39], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_param_size", "(", "n_dims", ")", ":", "\n", "        ", "\"\"\"\n        :param n_dims: The dimension of the distribution to be transformed by the flow\n        :return: (int) The dimension of the parameter space for this flow, n_dims + n_dims + 1\n        \"\"\"", "\n", "return", "n_dims", "+", "n_dims", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.PlanarFlow.InvertedPlanarFlow._u_circ": [[40, 50], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.softplus"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_u_circ", "(", "u", ",", "w", ")", ":", "\n", "        ", "\"\"\"\n        To ensure invertibility of the flow, the following condition needs to hold: w_t * u >= -1\n        :return: The transformed u\n        \"\"\"", "\n", "wtu", "=", "tf", ".", "reduce_sum", "(", "w", "*", "u", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "m_wtu", "=", "-", "1.", "+", "tf", ".", "nn", ".", "softplus", "(", "wtu", ")", "+", "1e-3", "\n", "norm_w_squared", "=", "tf", ".", "reduce_sum", "(", "w", "**", "2", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "u", "+", "(", "m_wtu", "-", "wtu", ")", "*", "(", "w", "/", "norm_w_squared", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.PlanarFlow.InvertedPlanarFlow._wzb": [[51, 56], ["tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "_wzb", "(", "self", ",", "z", ")", ":", "\n", "        ", "\"\"\"\n        Computes w_t * z + b\n        \"\"\"", "\n", "return", "tf", ".", "reduce_sum", "(", "self", ".", "_w", "*", "z", ",", "1", ",", "keepdims", "=", "True", ")", "+", "self", ".", "_b", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.PlanarFlow.InvertedPlanarFlow._der_tanh": [[57, 63], ["tensorflow.tanh"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_der_tanh", "(", "z", ")", ":", "\n", "        ", "\"\"\"\n        Computes the derivative of hyperbolic tangent\n        \"\"\"", "\n", "return", "1.", "-", "tf", ".", "tanh", "(", "z", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.PlanarFlow.InvertedPlanarFlow._inverse": [[64, 74], ["InvertedPlanarFlow._handle_input_dimensionality", "tensorflow.reduce_sum", "tensorflow.assert_greater_equal", "tensorflow.control_dependencies", "tensorflow.tanh", "PlanarFlow.InvertedPlanarFlow._wzb"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.PlanarFlow.InvertedPlanarFlow._wzb"], ["", "def", "_inverse", "(", "self", ",", "z", ")", ":", "\n", "        ", "\"\"\"\n        Runs a backward pass through the bijector\n        Also checks for whether the flow is actually invertible\n        \"\"\"", "\n", "z", "=", "InvertedPlanarFlow", ".", "_handle_input_dimensionality", "(", "z", ")", "\n", "uw", "=", "tf", ".", "reduce_sum", "(", "self", ".", "_w", "*", "self", ".", "_u", ",", "1", ")", "\n", "invertible", "=", "tf", ".", "assert_greater_equal", "(", "uw", ",", "-", "1.", ",", "name", "=", "'Invertibility_Constraint'", ",", "data", "=", "[", "self", ".", "_u", ",", "self", ".", "_w", ",", "uw", "]", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "invertible", "]", ")", ":", "\n", "            ", "return", "z", "+", "self", ".", "_u", "*", "tf", ".", "tanh", "(", "self", ".", "_wzb", "(", "z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.PlanarFlow.InvertedPlanarFlow.forward": [[75, 82], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        We don't require sampling and it would be slow, therefore it is not implemented\n\n        :raise NotImplementedError:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.PlanarFlow.InvertedPlanarFlow._ildj": [[83, 91], ["InvertedPlanarFlow._handle_input_dimensionality", "tensorflow.log", "PlanarFlow.InvertedPlanarFlow._der_tanh", "tensorflow.reduce_sum", "tensorflow.abs", "PlanarFlow.InvertedPlanarFlow._wzb"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.PlanarFlow.InvertedPlanarFlow._der_tanh", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.PlanarFlow.InvertedPlanarFlow._wzb"], ["", "def", "_ildj", "(", "self", ",", "z", ")", ":", "\n", "        ", "\"\"\"\n        Computes the ln of the absolute determinant of the jacobian\n        \"\"\"", "\n", "z", "=", "InvertedPlanarFlow", ".", "_handle_input_dimensionality", "(", "z", ")", "\n", "psi", "=", "self", ".", "_der_tanh", "(", "self", ".", "_wzb", "(", "z", ")", ")", "*", "self", ".", "_w", "\n", "det_grad", "=", "1.", "+", "tf", ".", "reduce_sum", "(", "self", ".", "_u", "*", "psi", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "tf", ".", "log", "(", "tf", ".", "abs", "(", "det_grad", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow.__init__": [[5, 15], ["super().__init__", "BaseNormalizingFlow.BaseNormalizingFlow.get_param_size", "BaseNormalizingFlow.BaseNormalizingFlow.get_param_size", "len"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow.get_param_size", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow.get_param_size"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "n_dims", ",", "validate_args", "=", "False", ",", "name", "=", "'BaseNormalizingFlow'", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the normalizing flows, checking for a valid parameter size\n        :param params: The batched parameters, shape (?, get_param_size(n_dims))\n        :param n_dims: The dimension of the distribution that is being transformed\n        \"\"\"", "\n", "super", "(", "BaseNormalizingFlow", ",", "self", ")", ".", "__init__", "(", "validate_args", "=", "validate_args", ",", "name", "=", "name", ")", "\n", "self", ".", "n_dims", "=", "n_dims", "\n", "assert", "params", ".", "shape", "[", "1", "]", "==", "self", ".", "get_param_size", "(", "n_dims", ")", ",", "'Shape is {}, should be {}'", ".", "format", "(", "params", ".", "shape", "[", "1", "]", ",", "self", ".", "get_param_size", "(", "n_dims", ")", ")", "\n", "assert", "len", "(", "params", ".", "shape", ")", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow.get_param_size": [[16, 22], ["NotImplementedError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_param_size", "(", "n_dims", ")", ":", "\n", "        ", "\"\"\"\n        Returns the size of the parameter space for this normalizing flow as an int\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._ildj": [[23, 29], ["NotImplementedError"], "methods", ["None"], ["", "def", "_ildj", "(", "self", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        :param y: shape (batch_size, n_dims)\n        :return: the inverse log det jacobian, shape (batch_size, 1)\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._inverse_log_det_jacobian": [[30, 41], ["BaseNormalizingFlow.BaseNormalizingFlow._ildj", "tensorflow.squeeze", "BaseNormalizingFlow.BaseNormalizingFlow._ildj"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow._ildj", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow._ildj"], ["", "def", "_inverse_log_det_jacobian", "(", "self", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Adapts the shape of the ildj to the dimension\n        For n_dims > 1 we use MultivariateNormalDistribution, which has the output shape (batch_size, ) for it's pdf\n        instead of (batch_size, 1) for the UnivariateNormalDistribution\n        -> Remove one dimension from the ildj\n        \"\"\"", "\n", "if", "self", ".", "n_dims", "==", "1", ":", "\n", "            ", "return", "self", ".", "_ildj", "(", "y", ")", "\n", "", "else", ":", "\n", "            ", "return", "tf", ".", "squeeze", "(", "self", ".", "_ildj", "(", "y", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality": [[42, 49], ["tensorflow.cond", "tensorflow.equal", "tensorflow.rank", "tensorflow.rank", "tensorflow.expand_dims"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_handle_input_dimensionality", "(", "z", ")", ":", "\n", "        ", "\"\"\"\n        If rank(z) is 1, increase rank to 2\n        We want tensors of shape (?, N_DIMS)\n        \"\"\"", "\n", "return", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "tf", ".", "rank", "(", "z", ")", ",", "tf", ".", "rank", "(", "[", "0.", "]", ")", ")", ",", "lambda", ":", "tf", ".", "expand_dims", "(", "z", ",", "1", ")", ",", "lambda", ":", "z", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow.__init__": [[21, 40], ["BaseNormalizingFlow.BaseNormalizingFlow.__init__", "InvertedRadialFlow._alpha_circ", "InvertedRadialFlow._beta_circ", "InvertedRadialFlow._handle_input_dimensionality", "tensorflow.split"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow._alpha_circ", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow._beta_circ", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality"], ["def", "__init__", "(", "self", ",", "params", ",", "n_dims", ",", "validate_args", "=", "False", ",", "name", "=", "'InvertedRadialFlow'", ")", ":", "\n", "        ", "\"\"\"\n        Parameter shapes (assuming you're transforming a distribution over d-space):\n\n        shape alpha = (?, 1)\n        shape beta = (?, 1)\n        shape gamma = (?, ndims)\n        \"\"\"", "\n", "super", "(", "InvertedRadialFlow", ",", "self", ")", ".", "__init__", "(", "params", ",", "n_dims", ",", "validate_args", "=", "validate_args", ",", "name", "=", "name", ")", "\n", "\n", "# split the input parameter into the individual parameters alpha, beta, gamma", "\n", "a_index", ",", "b_index", ",", "g_index", "=", "0", ",", "1", ",", "2", "\n", "flow_params", "=", "[", "InvertedRadialFlow", ".", "_handle_input_dimensionality", "(", "x", ")", "\n", "for", "x", "in", "tf", ".", "split", "(", "value", "=", "params", ",", "num_or_size_splits", "=", "[", "1", ",", "1", ",", "n_dims", "]", ",", "axis", "=", "1", ")", "]", "\n", "\n", "# constraining the parameters before they are assigned to ensure invertibility", "\n", "self", ".", "_alpha", "=", "InvertedRadialFlow", ".", "_alpha_circ", "(", "flow_params", "[", "a_index", "]", ")", "\n", "self", ".", "_beta", "=", "InvertedRadialFlow", ".", "_beta_circ", "(", "flow_params", "[", "b_index", "]", ")", "\n", "self", ".", "_gamma", "=", "flow_params", "[", "g_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow.get_param_size": [[41, 48], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_param_size", "(", "n_dims", ")", ":", "\n", "        ", "\"\"\"\n        :param n_dims:  The dimension of the distribution to be transformed by the flow\n        :return: (int) The dimension of the parameter space for the flow\n        \"\"\"", "\n", "return", "1", "+", "1", "+", "n_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow._r": [[49, 51], ["tensorflow.reduce_sum", "tensorflow.abs"], "methods", ["None"], ["", "def", "_r", "(", "self", ",", "z", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "z", "-", "self", ".", "_gamma", ")", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow._h": [[52, 54], ["None"], "methods", ["None"], ["", "def", "_h", "(", "self", ",", "r", ")", ":", "\n", "        ", "return", "1.", "/", "(", "self", ".", "_alpha", "+", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow._inverse": [[55, 63], ["InvertedRadialFlow._handle_input_dimensionality", "RadialFlow.InvertedRadialFlow._r", "RadialFlow.InvertedRadialFlow._h"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow._r", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow._h"], ["", "def", "_inverse", "(", "self", ",", "z", ")", ":", "\n", "        ", "\"\"\"\n        Runs a forward pass through the bijector\n        \"\"\"", "\n", "z", "=", "InvertedRadialFlow", ".", "_handle_input_dimensionality", "(", "z", ")", "\n", "r", "=", "self", ".", "_r", "(", "z", ")", "\n", "h", "=", "self", ".", "_h", "(", "r", ")", "\n", "return", "z", "+", "(", "self", ".", "_alpha", "*", "self", ".", "_beta", "*", "h", ")", "*", "(", "z", "-", "self", ".", "_gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow._ildj": [[64, 75], ["InvertedRadialFlow._handle_input_dimensionality", "RadialFlow.InvertedRadialFlow._r", "RadialFlow.InvertedRadialFlow._h", "tensorflow.log", "tensorflow.gradients"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.BaseNormalizingFlow.BaseNormalizingFlow._handle_input_dimensionality", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow._r", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow._h"], ["", "def", "_ildj", "(", "self", ",", "z", ")", ":", "\n", "        ", "\"\"\"\n        Computes the ln of the absolute determinant of the jacobian\n        \"\"\"", "\n", "z", "=", "InvertedRadialFlow", ".", "_handle_input_dimensionality", "(", "z", ")", "\n", "r", "=", "self", ".", "_r", "(", "z", ")", "\n", "h", "=", "self", ".", "_h", "(", "r", ")", "\n", "der_h", "=", "tf", ".", "gradients", "(", "h", ",", "[", "r", "]", ")", "[", "0", "]", "\n", "ab", "=", "self", ".", "_alpha", "*", "self", ".", "_beta", "\n", "det", "=", "(", "1.", "+", "ab", "*", "h", ")", "**", "(", "self", ".", "n_dims", "-", "1", ")", "*", "(", "1.", "+", "ab", "*", "h", "+", "ab", "*", "der_h", "*", "r", ")", "\n", "return", "tf", ".", "log", "(", "det", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow._alpha_circ": [[76, 82], ["tensorflow.nn.softplus"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_alpha_circ", "(", "alpha", ")", ":", "\n", "        ", "\"\"\"\n        Method for constraining the alpha parameter to meet the invertibility requirements\n        \"\"\"", "\n", "return", "tf", ".", "nn", ".", "softplus", "(", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow._beta_circ": [[83, 89], ["tensorflow.exp"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_beta_circ", "(", "beta", ")", ":", "\n", "        ", "\"\"\"\n        Method for constraining the beta parameter to meet the invertibility requirements\n        \"\"\"", "\n", "return", "tf", ".", "exp", "(", "beta", ")", "-", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.normalizing_flows.RadialFlow.InvertedRadialFlow.forward": [[90, 97], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        We don't require sampling and it would be slow, therefore it is not implemented\n\n        :raise NotImplementedError:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question5_regularisation_NF.question5": [[13, 52], ["numpy.logspace"], "function", ["None"], ["def", "question5", "(", ")", ":", "\n", "    ", "estimator_params", "=", "{", "\n", "'NormalizingFlowEstimator'", ":", "\n", "{", "\n", "'flows_type'", ":", "[", "(", "'affine'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", ",", "0.4", ",", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.01", ",", "0.1", ",", "0.2", ",", "None", "]", ",", "\n", "'dropout'", ":", "[", "0.", ",", "0.2", "]", ",", "\n", "'weight_decay'", ":", "[", "0.", ",", "5e-5", "]", ",", "\n", "'weight_normalization'", ":", "[", "False", ",", "True", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'EconDensity'", ":", "{", "\n", "'std'", ":", "[", "1", "]", ",", "\n", "'heteroscedastic'", ":", "[", "True", "]", ",", "\n", "}", ",", "\n", "'GaussianMixture'", ":", "{", "\n", "'n_kernels'", ":", "[", "10", "]", ",", "\n", "'ndim_x'", ":", "[", "1", "]", ",", "\n", "'ndim_y'", ":", "[", "1", "]", ",", "\n", "'means_std'", ":", "[", "1.5", "]", "\n", "}", ",", "\n", "'ArmaJump'", ":", "{", "\n", "'c'", ":", "[", "0.1", "]", ",", "\n", "'arma_a1'", ":", "[", "0.9", "]", ",", "\n", "'std'", ":", "[", "0.05", "]", ",", "\n", "'jump_prob'", ":", "[", "0.05", "]", ",", "\n", "}", ",", "\n", "'SkewNormal'", ":", "{", "}", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "0", ",", "6", ",", "num", "=", "7", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.hyperparam_sweep.question1": [[12, 62], ["numpy.logspace"], "function", ["None"], ["def", "question1", "(", ")", ":", "\n", "    ", "estimator_params", "=", "{", "\n", "'KernelMixtureNetwork'", ":", "\n", "\n", "{", "'center_sampling_method'", ":", "[", "\"k_means\"", "]", ",", "\n", "'n_centers'", ":", "[", "50", ",", "200", "]", ",", "\n", "'keep_edges'", ":", "[", "True", "]", ",", "\n", "'init_scales'", ":", "[", "[", "0.2", ",", "0.5", ",", "0.8", "]", ",", "[", "0.3", ",", "0.7", "]", "]", ",", "\n", "'train_scales'", ":", "[", "True", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "2000", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'weight_normalization'", ":", "[", "True", "]", ",", "\n", "'data_normalization'", ":", "[", "True", ",", "False", "]", "\n", "}", ",", "\n", "'NormalizingFlowEstimator'", ":", "\n", "{", "\n", "'flows_type'", ":", "[", "(", "'affine'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", ",", "2000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'weight_normalization'", ":", "[", "True", "]", ",", "\n", "'data_normalization'", ":", "[", "True", ",", "False", "]", ",", "\n", "}", ",", "\n", "'MixtureDensityNetwork'", ":", "\n", "{", "\n", "'n_centers'", ":", "[", "10", ",", "20", "]", ",", "\n", "'n_training_epochs'", ":", "[", "2000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", ",", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'weight_normalization'", ":", "[", "True", "]", ",", "\n", "'data_normalization'", ":", "[", "True", ",", "False", "]", "\n", "\n", "}", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'EconDensity'", ":", "{", "'std'", ":", "[", "1", "]", ",", "\n", "'heteroscedastic'", ":", "[", "True", "]", ",", "\n", "}", ",", "\n", "'ArmaJump'", ":", "{", "}", ",", "\n", "'SkewNormal'", ":", "{", "}", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "2", ",", "6", ",", "num", "=", "7", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question5_regularisation_KMN.question5": [[13, 56], ["numpy.logspace"], "function", ["None"], ["def", "question5", "(", ")", ":", "\n", "    ", "estimator_params", "=", "{", "\n", "'KernelMixtureNetwork'", ":", "\n", "{", "\n", "'center_sampling_method'", ":", "[", "\"k_means\"", "]", ",", "\n", "'n_centers'", ":", "[", "20", "]", ",", "\n", "'keep_edges'", ":", "[", "True", "]", ",", "\n", "'init_scales'", ":", "[", "'default'", "]", ",", "\n", "'train_scales'", ":", "[", "True", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", ",", "0.4", ",", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.01", ",", "0.1", ",", "0.2", ",", "None", "]", ",", "\n", "'dropout'", ":", "[", "0.", ",", "0.2", "]", ",", "\n", "'weight_decay'", ":", "[", "0.", ",", "5e-5", "]", ",", "\n", "'weight_normalization'", ":", "[", "False", ",", "True", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'EconDensity'", ":", "{", "\n", "'std'", ":", "[", "1", "]", ",", "\n", "'heteroscedastic'", ":", "[", "True", "]", ",", "\n", "}", ",", "\n", "'GaussianMixture'", ":", "{", "\n", "'n_kernels'", ":", "[", "10", "]", ",", "\n", "'ndim_x'", ":", "[", "1", "]", ",", "\n", "'ndim_y'", ":", "[", "1", "]", ",", "\n", "'means_std'", ":", "[", "1.5", "]", "\n", "}", ",", "\n", "'ArmaJump'", ":", "{", "\n", "'c'", ":", "[", "0.1", "]", ",", "\n", "'arma_a1'", ":", "[", "0.9", "]", ",", "\n", "'std'", ":", "[", "0.05", "]", ",", "\n", "'jump_prob'", ":", "[", "0.05", "]", ",", "\n", "}", ",", "\n", "'SkewNormal'", ":", "{", "}", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "0", ",", "6", ",", "num", "=", "7", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.base_experiment.launch_experiment": [[27, 57], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "cde.model_fitting.ConfigRunner.ConfigRunner", "cde.model_fitting.ConfigRunner.ConfigRunner.run_configurations", "KEYS_OF_INTEREST.append"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb.run_configurations"], ["def", "launch_experiment", "(", "conf_est", ",", "conf_sim", ",", "observations", ",", "exp_prefix", ",", "n_mc_samples", "=", "10", "**", "6", ",", "n_x_cond", "=", "10", ",", "n_seeds", "=", "5", ",", "tail_measures", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param conf_est: Dict with keys: Name of estimator, value: params for the estimator\n    :param conf_sim: Dict with keys: Name of the density simulator, value: params for the simulator\n    :param observations: List or scalar that defines how many samples to use from the distribution\n    :param exp_prefix: directory to save everything\n    :param n_mc_samples: number of samples to use for Monte Carlo sampling\n    :param n_x_cond: number of x conditionals to be sampled\n    :param n_seeds: number of seeds to use for the simulator\n    :param tail_measures:\n    :return:\n    \"\"\"", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Run configuration script'", ")", "\n", "parser", ".", "add_argument", "(", "'--parallel'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--n_workers'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--use_gpu'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--load'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "tail_measures", ":", "\n", "        ", "KEYS_OF_INTEREST", ".", "append", "(", "KEYS_OF_INTEREST_TAILS", ")", "\n", "\n", "", "conf_runner", "=", "ConfigRunner", "(", "exp_prefix", ",", "conf_est", ",", "conf_sim", ",", "observations", "=", "observations", ",", "keys_of_interest", "=", "KEYS_OF_INTEREST", ",", "\n", "n_mc_samples", "=", "n_mc_samples", ",", "n_x_cond", "=", "n_x_cond", ",", "n_seeds", "=", "n_seeds", ",", "use_gpu", "=", "args", ".", "use_gpu", ",", "\n", "tail_measures", "=", "tail_measures", ")", "\n", "\n", "conf_runner", ".", "run_configurations", "(", "dump_models", "=", "True", ",", "multiprocessing", "=", "args", ".", "parallel", ",", "n_workers", "=", "args", ".", "n_workers", ")", "\n", "\n", "return", "args", ".", "load", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.base_experiment.launch_logprob_experiment": [[59, 84], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "cde.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb", "cde.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb.run_configurations"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.model_fitting.ConfigRunnerLogProb.ConfigRunnerLogProb.run_configurations"], ["", "def", "launch_logprob_experiment", "(", "conf_est", ",", "conf_sim", ",", "observations", ",", "exp_prefix", ",", "n_test_samples", "=", "10", "**", "5", ",", "n_seeds", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    :param conf_est: Dict with keys: Name of estimator, value: params for the estimator\n    :param conf_sim: Dict with keys: Name of the density simulator, value: params for the simulator\n    :param observations: List or scalar that defines how many samples to use from the distribution\n    :param exp_prefix: directory to save everything\n    :param n_test_samples: number of samples samples to compute the test scroe (lop-probability)\n    :param n_seeds: number of seeds to use for the simulator\n    :return:\n    \"\"\"", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Run configuration script'", ")", "\n", "parser", ".", "add_argument", "(", "'--parallel'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--n_workers'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--use_gpu'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--load'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "conf_runner", "=", "ConfigRunnerLogProb", "(", "exp_prefix", ",", "conf_est", ",", "conf_sim", ",", "observations", "=", "observations", ",", "keys_of_interest", "=", "KEYS_OF_INTEREST_LOGPROB", ",", "\n", "n_test_samples", "=", "n_test_samples", ",", "n_seeds", "=", "n_seeds", ",", "use_gpu", "=", "args", ".", "use_gpu", ")", "\n", "\n", "conf_runner", ".", "run_configurations", "(", "dump_models", "=", "False", ",", "multiprocessing", "=", "args", ".", "parallel", ",", "n_workers", "=", "args", ".", "n_workers", ")", "\n", "\n", "return", "args", ".", "load", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.hyperparam_sweep_nonparametrics.question1": [[10, 36], ["numpy.logspace"], "function", ["None"], ["def", "question1", "(", ")", ":", "\n", "  ", "estimator_params", "=", "{", "\n", "'NeighborKernelDensityEstimation'", ":", "\n", "{", "'bandwidth'", ":", "[", "0.1", ",", "0.4", ",", "0.7", ",", "1.0", "]", ",", "\n", "'param_selection'", ":", "[", "None", ",", "'normal_reference'", ",", "'cv_ml'", "]", ",", "\n", "'epsilon'", ":", "[", "0.05", ",", "0.2", ",", "0.4", ",", "0.6", "]", "}", ",", "\n", "'LSConditionalDensityEstimation'", ":", "\n", "{", "'bandwidth'", ":", "[", "0.2", ",", "0.5", ",", "0.7", ",", "1.0", "]", ",", "\n", "'regularization'", ":", "[", "0.1", ",", "0.5", ",", "1.0", ",", "4.0", ",", "8.0", "]", "}", ",", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'EconDensity'", ":", "{", "'std'", ":", "[", "1", "]", ",", "\n", "'heteroscedastic'", ":", "[", "True", "]", ",", "\n", "}", ",", "\n", "'ArmaJump'", ":", "{", "'c'", ":", "[", "0.1", "]", ",", "\n", "'arma_a1'", ":", "[", "0.9", "]", ",", "\n", "'std'", ":", "[", "0.05", "]", ",", "\n", "'jump_prob'", ":", "[", "0.05", "]", ",", "\n", "}", ",", "\n", "'SkewNormal'", ":", "{", "}", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "3", ",", "6", ",", "num", "=", "4", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question6_noise_schedules.question6": [[14, 121], ["Rule_of_thumb", "Rule_of_thumb", "Rule_of_thumb", "Rule_of_thumb", "Fixed_Rate", "Fixed_Rate", "Fixed_Rate", "Fixed_Rate", "Quadratic_Rate", "Quadratic_Rate", "Quadratic_Rate", "Quadratic_Rate", "Polynomial_Rate", "Polynomial_Rate", "Polynomial_Rate", "Polynomial_Rate", "numpy.logspace"], "function", ["None"], ["def", "question6", "(", ")", ":", "\n", "\n", "    ", "class", "Rule_of_thumb", ":", "\n", "\n", "        ", "def", "__init__", "(", "self", ",", "scale_factor", ")", ":", "\n", "            ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n", "", "def", "__call__", "(", "self", ",", "n", ",", "d", ")", ":", "\n", "            ", "return", "self", ".", "scale_factor", "*", "n", "**", "(", "-", "1", "/", "(", "4", "+", "d", ")", ")", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "            ", "return", "\"rule_of_thumb_%.2f\"", "%", "self", ".", "scale_factor", "\n", "\n", "\n", "", "", "class", "Fixed_Rate", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "scale_factor", ")", ":", "\n", "            ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n", "", "def", "__call__", "(", "self", ",", "n", ",", "d", ")", ":", "\n", "            ", "return", "self", ".", "scale_factor", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "            ", "return", "\"fixed_rate_%.2f\"", "%", "self", ".", "scale_factor", "\n", "\n", "", "", "class", "Quadratic_Rate", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "scale_factor", ")", ":", "\n", "            ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n", "", "def", "__call__", "(", "self", ",", "n", ",", "d", ")", ":", "\n", "            ", "return", "self", ".", "scale_factor", "*", "n", "**", "(", "-", "1", "/", "(", "1", "+", "d", ")", ")", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "            ", "return", "\"quadratic_rate_%.2f\"", "%", "self", ".", "scale_factor", "\n", "\n", "", "", "class", "Polynomial_Rate", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "scale_factor", ",", "order", ")", ":", "\n", "            ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "order", "=", "order", "\n", "\n", "", "def", "__call__", "(", "self", ",", "n", ",", "d", ")", ":", "\n", "            ", "return", "self", ".", "scale_factor", "*", "n", "**", "(", "-", "1", "/", "(", "self", ".", "order", "+", "d", ")", ")", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "            ", "return", "\"polynomial_rate_%i_%.2f\"", "%", "(", "self", ".", "order", ",", "self", ".", "scale_factor", ")", "\n", "\n", "", "", "adaptive_noise_functions", "=", "[", "Rule_of_thumb", "(", "1.0", ")", ",", "Rule_of_thumb", "(", "0.7", ")", ",", "Rule_of_thumb", "(", "0.5", ")", ",", "Rule_of_thumb", "(", "0.3", ")", ",", "\n", "Fixed_Rate", "(", "0.4", ")", ",", "Fixed_Rate", "(", "0.2", ")", ",", "Fixed_Rate", "(", "0.1", ")", ",", "Fixed_Rate", "(", "0.0", ")", ",", "\n", "Quadratic_Rate", "(", "2.0", ")", ",", "Quadratic_Rate", "(", "1.0", ")", ",", "Quadratic_Rate", "(", "0.4", ")", ",", "Quadratic_Rate", "(", "0.2", ")", ",", "\n", "Polynomial_Rate", "(", "1.0", ",", "2", ")", ",", "Polynomial_Rate", "(", "2.0", ",", "2", ")", ",", "\n", "Polynomial_Rate", "(", "1.0", ",", "3", ")", ",", "Polynomial_Rate", "(", "2.0", ",", "3", ")", "]", "\n", "\n", "\n", "estimator_params", "=", "{", "\n", "'MixtureDensityNetwork'", ":", "\n", "{", "\n", "'n_centers'", ":", "[", "10", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "adaptive_noise_functions", ",", "\n", "'dropout'", ":", "[", "0.", "]", ",", "\n", "'weight_decay'", ":", "[", "0.", "]", ",", "\n", "'weight_normalization'", ":", "[", "True", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "'KernelMixtureNetwork'", ":", "\n", "{", "\n", "'n_centers'", ":", "[", "50", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "adaptive_noise_functions", ",", "\n", "'dropout'", ":", "[", "0.", "]", ",", "\n", "'weight_decay'", ":", "[", "0.", "]", ",", "\n", "'weight_normalization'", ":", "[", "True", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "'NormalizingFlowEstimator'", ":", "\n", "{", "\n", "'n_flows'", ":", "[", "10", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "adaptive_noise_functions", ",", "\n", "'dropout'", ":", "[", "0.", "]", ",", "\n", "'weight_decay'", ":", "[", "0.", "]", ",", "\n", "'weight_normalization'", ":", "[", "True", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'GaussianMixture'", ":", "{", "\n", "'n_kernels'", ":", "[", "5", "]", ",", "\n", "'ndim_x'", ":", "[", "2", "]", ",", "\n", "'ndim_y'", ":", "[", "2", "]", ",", "\n", "'means_std'", ":", "[", "1.5", "]", "\n", "}", ",", "\n", "'SkewNormal'", ":", "{", "}", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "0", ",", "10", ",", "num", "=", "11", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question5_regularisation_MDN.question5": [[13, 52], ["numpy.logspace"], "function", ["None"], ["def", "question5", "(", ")", ":", "\n", "    ", "estimator_params", "=", "{", "\n", "'MixtureDensityNetwork'", ":", "\n", "{", "\n", "'n_centers'", ":", "[", "10", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", ",", "0.4", ",", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.01", ",", "0.1", ",", "0.2", ",", "None", "]", ",", "\n", "'dropout'", ":", "[", "0.", ",", "0.2", "]", ",", "\n", "'weight_decay'", ":", "[", "0.", ",", "5e-5", "]", ",", "\n", "'weight_normalization'", ":", "[", "False", ",", "True", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'EconDensity'", ":", "{", "\n", "'std'", ":", "[", "1", "]", ",", "\n", "'heteroscedastic'", ":", "[", "True", "]", ",", "\n", "}", ",", "\n", "'GaussianMixture'", ":", "{", "\n", "'n_kernels'", ":", "[", "10", "]", ",", "\n", "'ndim_x'", ":", "[", "1", "]", ",", "\n", "'ndim_y'", ":", "[", "1", "]", ",", "\n", "'means_std'", ":", "[", "1.5", "]", "\n", "}", ",", "\n", "'ArmaJump'", ":", "{", "\n", "'c'", ":", "[", "0.1", "]", ",", "\n", "'arma_a1'", ":", "[", "0.9", "]", ",", "\n", "'std'", ":", "[", "0.05", "]", ",", "\n", "'jump_prob'", ":", "[", "0.05", "]", ",", "\n", "}", ",", "\n", "'SkewNormal'", ":", "{", "}", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "0", ",", "6", ",", "num", "=", "7", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question4_benchmark_student5dim.question4": [[19, 69], ["numpy.logspace"], "function", ["None"], ["def", "question4", "(", ")", ":", "\n", "    ", "estimator_params", "=", "{", "\n", "'ConditionalKernelDensityEstimation'", ":", "\n", "{", "\n", "'bandwidth'", ":", "[", "'normal_reference'", ",", "'cv_ml'", "]", ",", "\n", "}", ",", "\n", "'NeighborKernelDensityEstimation'", ":", "\n", "{", "\n", "'param_selection'", ":", "[", "'normal_reference'", ",", "'cv_ml'", "]", "\n", "}", ",", "\n", "'LSConditionalDensityEstimation'", ":", "\n", "{", "'random_seed'", ":", "[", "22", "]", "}", ",", "\n", "'MixtureDensityNetwork'", ":", "\n", "{", "\n", "'n_centers'", ":", "[", "20", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "'NormalizingFlowEstimator'", ":", "\n", "{", "\n", "'flows_type'", ":", "[", "(", "'affine'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.15", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "'KernelMixtureNetwork'", ":", "\n", "{", "'center_sampling_method'", ":", "[", "\"k_means\"", "]", ",", "\n", "'n_centers'", ":", "[", "50", "]", ",", "\n", "'keep_edges'", ":", "[", "True", "]", ",", "\n", "'init_scales'", ":", "[", "[", "0.3", ",", "0.7", "]", "]", ",", "\n", "'train_scales'", ":", "[", "True", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'LinearStudentT'", ":", "{", "'ndim_x'", ":", "[", "5", "]", "}", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "2", ",", "6", ",", "num", "=", "8", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question7_regularization_logprobs.question7": [[14, 247], ["Rule_of_thumb", "Rule_of_thumb", "Rule_of_thumb", "Rule_of_thumb", "Quadratic_Rate", "Quadratic_Rate", "Polynomial_Rate", "Polynomial_Rate", "Polynomial_Rate", "Polynomial_Rate", "numpy.logspace"], "function", ["None"], ["def", "question7", "(", ")", ":", "\n", "\n", "    ", "class", "Rule_of_thumb", ":", "\n", "\n", "        ", "def", "__init__", "(", "self", ",", "scale_factor", ")", ":", "\n", "            ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n", "", "def", "__call__", "(", "self", ",", "n", ",", "d", ")", ":", "\n", "            ", "return", "self", ".", "scale_factor", "*", "n", "**", "(", "-", "1", "/", "(", "4", "+", "d", ")", ")", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "            ", "return", "\"rule_of_thumb_%.2f\"", "%", "self", ".", "scale_factor", "\n", "\n", "", "", "class", "Quadratic_Rate", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "scale_factor", ")", ":", "\n", "            ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n", "", "def", "__call__", "(", "self", ",", "n", ",", "d", ")", ":", "\n", "            ", "return", "self", ".", "scale_factor", "*", "n", "**", "(", "-", "1", "/", "(", "1", "+", "d", ")", ")", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "            ", "return", "\"quadratic_rate_%.2f\"", "%", "self", ".", "scale_factor", "\n", "\n", "", "", "class", "Polynomial_Rate", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "scale_factor", ",", "order", ")", ":", "\n", "            ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "order", "=", "order", "\n", "\n", "", "def", "__call__", "(", "self", ",", "n", ",", "d", ")", ":", "\n", "            ", "return", "self", ".", "scale_factor", "*", "n", "**", "(", "-", "1", "/", "(", "self", ".", "order", "+", "d", ")", ")", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "            ", "return", "\"polynomial_rate_%i_%.2f\"", "%", "(", "self", ".", "order", ",", "self", ".", "scale_factor", ")", "\n", "\n", "", "", "adaptive_noise_functions", "=", "[", "Rule_of_thumb", "(", "0.0", ")", ",", "Rule_of_thumb", "(", "1.0", ")", ",", "Rule_of_thumb", "(", "0.7", ")", ",", "Rule_of_thumb", "(", "0.5", ")", ",", "\n", "Quadratic_Rate", "(", "2.0", ")", ",", "Quadratic_Rate", "(", "1.0", ")", ",", "Polynomial_Rate", "(", "1.0", ",", "2", ")", ",", "Polynomial_Rate", "(", "2.0", ",", "2", ")", ",", "\n", "Polynomial_Rate", "(", "1.0", ",", "3", ")", ",", "Polynomial_Rate", "(", "2.0", ",", "3", ")", "]", "\n", "l1_reg_params", "=", "[", "0.0", ",", "0.001", ",", "0.01", ",", "0.1", ",", "1.0", "]", "\n", "l2_reg_params", "=", "[", "0.0", ",", "0.001", ",", "0.01", ",", "0.1", ",", "1.0", "]", "\n", "weight_decay_params", "=", "[", "0.0", ",", "0.001", ",", "0.01", ",", "0.1", "]", "\n", "\n", "\n", "estimator_params", "=", "[", "\n", "\n", "# MDNs  ##############", "\n", "\n", "(", "'MixtureDensityNetwork'", ",", "# noise regularization", "\n", "{", "\n", "'n_centers'", ":", "[", "10", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "adaptive_noise_functions", ",", "\n", "'weight_decay'", ":", "[", "0.", "]", ",", "\n", "'weight_normalization'", ":", "[", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", "\n", ")", ",", "\n", "\n", "(", "'MixtureDensityNetwork'", ",", "\n", "{", "\n", "'n_centers'", ":", "[", "10", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "[", "None", "]", ",", "\n", "'weight_decay'", ":", "weight_decay_params", ",", "\n", "'weight_normalization'", ":", "[", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", "\n", ")", ",", "\n", "\n", "(", "'MixtureDensityNetwork'", ",", "\n", "{", "\n", "'n_centers'", ":", "[", "10", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "[", "None", "]", ",", "\n", "'weight_decay'", ":", "[", "0.0", "]", ",", "\n", "'l2_reg'", ":", "l2_reg_params", ",", "\n", "'weight_normalization'", ":", "[", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", "\n", ")", ",", "\n", "\n", "(", "'MixtureDensityNetwork'", ",", "\n", "{", "\n", "'n_centers'", ":", "[", "10", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "[", "None", "]", ",", "\n", "'l1_reg'", ":", "l1_reg_params", ",", "\n", "'weight_normalization'", ":", "[", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", "\n", ")", ",", "\n", "\n", "# KMNs  ##############", "\n", "\n", "(", "'KernelMixtureNetwork'", ",", "\n", "{", "\n", "'n_centers'", ":", "[", "50", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "adaptive_noise_functions", ",", "\n", "'weight_decay'", ":", "[", "0.0", "]", ",", "\n", "'weight_normalization'", ":", "[", "True", ",", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ")", ",", "\n", "\n", "(", "'KernelMixtureNetwork'", ",", "\n", "{", "\n", "'n_centers'", ":", "[", "50", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "[", "None", "]", ",", "\n", "'weight_decay'", ":", "weight_decay_params", ",", "\n", "'weight_normalization'", ":", "[", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ")", ",", "\n", "(", "'KernelMixtureNetwork'", ",", "\n", "{", "\n", "'n_centers'", ":", "[", "50", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "[", "None", "]", ",", "\n", "'l2_reg'", ":", "l2_reg_params", ",", "\n", "'weight_normalization'", ":", "[", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ")", ",", "\n", "(", "'KernelMixtureNetwork'", ",", "\n", "{", "\n", "'n_centers'", ":", "[", "50", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "[", "None", "]", ",", "\n", "'l1_reg'", ":", "l1_reg_params", ",", "\n", "'weight_normalization'", ":", "[", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ")", ",", "\n", "\n", "# NFs ##################################", "\n", "\n", "(", "'NormalizingFlowEstimator'", ",", "\n", "{", "\n", "'n_flows'", ":", "[", "10", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "adaptive_noise_functions", ",", "\n", "'weight_decay'", ":", "[", "0.", "]", ",", "\n", "'weight_normalization'", ":", "[", "True", ",", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ")", ",", "\n", "\n", "(", "'NormalizingFlowEstimator'", ",", "\n", "{", "\n", "'n_flows'", ":", "[", "10", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "[", "None", "]", ",", "\n", "'weight_decay'", ":", "weight_decay_params", ",", "\n", "'weight_normalization'", ":", "[", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ")", ",", "\n", "\n", "(", "'NormalizingFlowEstimator'", ",", "\n", "{", "\n", "'n_flows'", ":", "[", "10", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "[", "None", "]", ",", "\n", "'l2_reg'", ":", "l2_reg_params", ",", "\n", "'weight_normalization'", ":", "[", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ")", ",", "\n", "\n", "(", "'NormalizingFlowEstimator'", ",", "\n", "{", "\n", "'n_flows'", ":", "[", "10", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "[", "None", "]", ",", "\n", "'l1_reg'", ":", "l1_reg_params", ",", "\n", "'weight_normalization'", ":", "[", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ")", ",", "\n", "]", "\n", "\n", "simulators_params", "=", "[", "\n", "(", "'EconDensity'", ",", "{", "\n", "'std'", ":", "[", "1", "]", ",", "\n", "'heteroscedastic'", ":", "[", "True", "]", ",", "\n", "}", ")", ",", "\n", "(", "'GaussianMixture'", ",", "{", "\n", "'n_kernels'", ":", "[", "5", "]", ",", "\n", "'ndim_x'", ":", "[", "2", "]", ",", "\n", "'ndim_y'", ":", "[", "2", "]", ",", "\n", "'means_std'", ":", "[", "1.5", "]", "\n", "}", ")", ",", "\n", "(", "'GaussianMixture'", ",", "{", "\n", "'n_kernels'", ":", "[", "5", "]", ",", "\n", "'ndim_x'", ":", "[", "4", "]", ",", "\n", "'ndim_y'", ":", "[", "4", "]", ",", "\n", "'means_std'", ":", "[", "1.5", "]", "\n", "}", ")", ",", "\n", "(", "'SkewNormal'", ",", "{", "}", ")", "\n", "]", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "0", ",", "7", ",", "num", "=", "8", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question4_benchmark_econ_density.question4": [[19, 71], ["numpy.logspace"], "function", ["None"], ["def", "question4", "(", ")", ":", "\n", "    ", "estimator_params", "=", "{", "\n", "'ConditionalKernelDensityEstimation'", ":", "\n", "{", "\n", "'bandwidth'", ":", "[", "'normal_reference'", ",", "'cv_ml'", "]", ",", "\n", "}", ",", "\n", "'NeighborKernelDensityEstimation'", ":", "\n", "{", "\n", "'param_selection'", ":", "[", "'normal_reference'", ",", "'cv_ml'", "]", "\n", "}", ",", "\n", "'LSConditionalDensityEstimation'", ":", "\n", "{", "'random_seed'", ":", "[", "22", "]", "}", ",", "\n", "'MixtureDensityNetwork'", ":", "\n", "{", "\n", "'n_centers'", ":", "[", "20", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "'NormalizingFlowEstimator'", ":", "\n", "{", "\n", "'flows_type'", ":", "[", "(", "'affine'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ")", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "'KernelMixtureNetwork'", ":", "\n", "{", "'center_sampling_method'", ":", "[", "\"k_means\"", "]", ",", "\n", "'n_centers'", ":", "[", "50", "]", ",", "\n", "'keep_edges'", ":", "[", "True", "]", ",", "\n", "'init_scales'", ":", "[", "[", "0.3", ",", "0.7", "]", "]", ",", "\n", "'train_scales'", ":", "[", "True", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'EconDensity'", ":", "{", "'std'", ":", "[", "1", "]", ",", "\n", "'heteroscedastic'", ":", "[", "True", "]", "\n", "}", ",", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "2", ",", "6", ",", "num", "=", "8", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question4_benchmark_arma_jump.question4": [[19, 69], ["numpy.logspace"], "function", ["None"], ["def", "question4", "(", ")", ":", "\n", "    ", "estimator_params", "=", "{", "\n", "'ConditionalKernelDensityEstimation'", ":", "\n", "{", "\n", "'bandwidth'", ":", "[", "'normal_reference'", ",", "'cv_ml'", "]", ",", "\n", "}", ",", "\n", "'NeighborKernelDensityEstimation'", ":", "\n", "{", "\n", "'param_selection'", ":", "[", "'normal_reference'", ",", "'cv_ml'", "]", "\n", "}", ",", "\n", "'LSConditionalDensityEstimation'", ":", "\n", "{", "'random_seed'", ":", "[", "22", "]", "}", ",", "\n", "'MixtureDensityNetwork'", ":", "\n", "{", "\n", "'n_centers'", ":", "[", "20", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "'NormalizingFlowEstimator'", ":", "\n", "{", "\n", "'flows_type'", ":", "[", "(", "'affine'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ")", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "'KernelMixtureNetwork'", ":", "\n", "{", "'center_sampling_method'", ":", "[", "\"k_means\"", "]", ",", "\n", "'n_centers'", ":", "[", "50", "]", ",", "\n", "'keep_edges'", ":", "[", "True", "]", ",", "\n", "'init_scales'", ":", "[", "[", "0.3", ",", "0.7", "]", "]", ",", "\n", "'train_scales'", ":", "[", "True", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'ArmaJump'", ":", "{", "}", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "2", ",", "6", ",", "num", "=", "8", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question4_benchmark_skew.question4": [[19, 69], ["numpy.logspace"], "function", ["None"], ["def", "question4", "(", ")", ":", "\n", "    ", "estimator_params", "=", "{", "\n", "'ConditionalKernelDensityEstimation'", ":", "\n", "{", "\n", "'bandwidth'", ":", "[", "'normal_reference'", ",", "'cv_ml'", "]", ",", "\n", "}", ",", "\n", "'NeighborKernelDensityEstimation'", ":", "\n", "{", "\n", "'param_selection'", ":", "[", "'normal_reference'", ",", "'cv_ml'", "]", "\n", "}", ",", "\n", "'LSConditionalDensityEstimation'", ":", "\n", "{", "'random_seed'", ":", "[", "22", "]", "}", ",", "\n", "'MixtureDensityNetwork'", ":", "\n", "{", "\n", "'n_centers'", ":", "[", "20", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "'NormalizingFlowEstimator'", ":", "\n", "{", "\n", "'flows_type'", ":", "[", "(", "'affine'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ")", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "'KernelMixtureNetwork'", ":", "\n", "{", "'center_sampling_method'", ":", "[", "\"k_means\"", "]", ",", "\n", "'n_centers'", ":", "[", "50", "]", ",", "\n", "'keep_edges'", ":", "[", "True", "]", ",", "\n", "'init_scales'", ":", "[", "[", "0.3", ",", "0.7", "]", "]", ",", "\n", "'train_scales'", ":", "[", "True", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'SkewNormal'", ":", "{", "}", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "2", ",", "6", ",", "num", "=", "8", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question8_benchmark.question8": [[14, 124], ["Rule_of_thumb", "Rule_of_thumb", "Rule_of_thumb", "Polynomial_Rate", "Polynomial_Rate", "Polynomial_Rate", "Polynomial_Rate", "Polynomial_Rate", "Polynomial_Rate", "numpy.logspace"], "function", ["None"], ["def", "question8", "(", ")", ":", "\n", "\n", "    ", "class", "Rule_of_thumb", ":", "\n", "\n", "        ", "def", "__init__", "(", "self", ",", "scale_factor", ")", ":", "\n", "            ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n", "", "def", "__call__", "(", "self", ",", "n", ",", "d", ")", ":", "\n", "            ", "return", "self", ".", "scale_factor", "*", "n", "**", "(", "-", "1", "/", "(", "4", "+", "d", ")", ")", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "            ", "return", "\"rule_of_thumb_%.2f\"", "%", "self", ".", "scale_factor", "\n", "\n", "", "", "class", "Polynomial_Rate", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "scale_factor", ",", "order", ")", ":", "\n", "            ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "order", "=", "order", "\n", "\n", "", "def", "__call__", "(", "self", ",", "n", ",", "d", ")", ":", "\n", "            ", "return", "self", ".", "scale_factor", "*", "n", "**", "(", "-", "1", "/", "(", "self", ".", "order", "+", "d", ")", ")", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "            ", "return", "\"polynomial_rate_%i_%.2f\"", "%", "(", "self", ".", "order", ",", "self", ".", "scale_factor", ")", "\n", "\n", "", "", "adaptive_noise_functions", "=", "[", "Rule_of_thumb", "(", "1.0", ")", ",", "Rule_of_thumb", "(", "0.7", ")", ",", "Rule_of_thumb", "(", "0.5", ")", ",", "\n", "Polynomial_Rate", "(", "2.0", ",", "1", ")", ",", "Polynomial_Rate", "(", "1.0", ",", "1", ")", ",", "Polynomial_Rate", "(", "1.0", ",", "2", ")", ",", "Polynomial_Rate", "(", "2.0", ",", "2", ")", ",", "\n", "Polynomial_Rate", "(", "1.0", ",", "3", ")", ",", "Polynomial_Rate", "(", "2.0", ",", "3", ")", "]", "\n", "\n", "\n", "estimator_params", "=", "[", "\n", "\n", "# MDNs  ##############", "\n", "(", "'ConditionalKernelDensityEstimation'", ",", "\n", "{", "\n", "'bandwidth'", ":", "[", "'normal_reference'", ",", "'cv_ml'", "]", ",", "\n", "}", ",", "\n", ")", ",", "\n", "(", "'NeighborKernelDensityEstimation'", ",", "\n", "{", "\n", "'param_selection'", ":", "[", "'normal_reference'", ",", "'cv_ml'", "]", ",", "\n", "}", ",", "\n", ")", ",", "\n", "(", "'LSConditionalDensityEstimation'", ",", "{", "'random_seed'", ":", "[", "22", "]", "}", ")", ",", "\n", "\n", "(", "'MixtureDensityNetwork'", ",", "# noise regularization", "\n", "{", "\n", "'n_centers'", ":", "[", "10", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "adaptive_noise_functions", ",", "\n", "'dropout'", ":", "[", "0.0", ",", "0.2", "]", ",", "\n", "'weight_normalization'", ":", "[", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", "\n", ")", ",", "\n", "\n", "(", "'KernelMixtureNetwork'", ",", "\n", "{", "\n", "'n_centers'", ":", "[", "50", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "adaptive_noise_functions", ",", "\n", "'dropout'", ":", "[", "0.0", ",", "0.2", "]", ",", "\n", "'weight_normalization'", ":", "[", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ")", ",", "\n", "\n", "(", "'NormalizingFlowEstimator'", ",", "\n", "{", "\n", "'n_flows'", ":", "[", "10", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "32", ",", "32", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'adaptive_noise_fn'", ":", "adaptive_noise_functions", ",", "\n", "'dropout'", ":", "[", "0.0", ",", "0.2", "]", ",", "\n", "'weight_normalization'", ":", "[", "False", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ")", ",", "\n", "\n", "\n", "]", "\n", "\n", "simulators_params", "=", "[", "\n", "(", "'EconDensity'", ",", "{", "\n", "'std'", ":", "[", "1", "]", ",", "\n", "'heteroscedastic'", ":", "[", "True", "]", ",", "\n", "}", ")", ",", "\n", "(", "'GaussianMixture'", ",", "{", "\n", "'n_kernels'", ":", "[", "5", "]", ",", "\n", "'ndim_x'", ":", "[", "2", "]", ",", "\n", "'ndim_y'", ":", "[", "2", "]", ",", "\n", "'means_std'", ":", "[", "1.5", "]", "\n", "}", ")", ",", "\n", "(", "'GaussianMixture'", ",", "{", "\n", "'n_kernels'", ":", "[", "5", "]", ",", "\n", "'ndim_x'", ":", "[", "4", "]", ",", "\n", "'ndim_y'", ":", "[", "4", "]", ",", "\n", "'means_std'", ":", "[", "1.5", "]", "\n", "}", ")", ",", "\n", "(", "'SkewNormal'", ",", "{", "}", ")", "\n", "]", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "0", ",", "6", ",", "num", "=", "7", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question1_noise_reg_xy.question1": [[13, 71], ["numpy.logspace"], "function", ["None"], ["def", "question1", "(", ")", ":", "\n", "    ", "estimator_params", "=", "{", "\n", "'KernelMixtureNetwork'", ":", "\n", "{", "\n", "'center_sampling_method'", ":", "[", "\"k_means\"", "]", ",", "\n", "'n_centers'", ":", "[", "20", "]", ",", "\n", "'keep_edges'", ":", "[", "True", "]", ",", "\n", "'init_scales'", ":", "[", "[", "0.1", ",", "0.5", ",", "1.", "]", ",", "[", "0.3", ",", "0.7", "]", "]", ",", "\n", "'train_scales'", ":", "[", "True", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", ",", "0.4", ",", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.01", ",", "0.02", ",", "0.05", ",", "0.1", ",", "0.2", ",", "None", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", ",", "\n", "}", ",", "\n", "'NormalizingFlowEstimator'", ":", "\n", "{", "\n", "'flows_type'", ":", "[", "(", "'affine'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", ",", "0.4", ",", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.01", ",", "0.02", ",", "0.05", ",", "0.1", ",", "0.2", ",", "None", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "'MixtureDensityNetwork'", ":", "\n", "{", "\n", "'n_centers'", ":", "[", "10", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", ",", "0.4", ",", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.01", ",", "0.02", ",", "0.05", ",", "0.1", ",", "0.2", ",", "None", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'EconDensity'", ":", "{", "\n", "'std'", ":", "[", "1", "]", ",", "\n", "'heteroscedastic'", ":", "[", "True", "]", ",", "\n", "}", ",", "\n", "'GaussianMixture'", ":", "{", "\n", "'n_kernels'", ":", "[", "10", "]", ",", "\n", "'ndim_x'", ":", "[", "1", "]", ",", "\n", "'ndim_y'", ":", "[", "1", "]", ",", "\n", "'means_std'", ":", "[", "1.5", "]", "\n", "}", ",", "\n", "'ArmaJump'", ":", "{", "\n", "'c'", ":", "[", "0.1", "]", ",", "\n", "'arma_a1'", ":", "[", "0.9", "]", ",", "\n", "'std'", ":", "[", "0.05", "]", ",", "\n", "'jump_prob'", ":", "[", "0.05", "]", ",", "\n", "}", ",", "\n", "'SkewNormal'", ":", "{", "}", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "0", ",", "6", ",", "num", "=", "7", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question4_benchmark_student10dim.question4": [[19, 69], ["numpy.logspace"], "function", ["None"], ["def", "question4", "(", ")", ":", "\n", "    ", "estimator_params", "=", "{", "\n", "'ConditionalKernelDensityEstimation'", ":", "\n", "{", "\n", "'bandwidth'", ":", "[", "'normal_reference'", ",", "'cv_ml'", "]", ",", "\n", "}", ",", "\n", "'NeighborKernelDensityEstimation'", ":", "\n", "{", "\n", "'param_selection'", ":", "[", "'normal_reference'", ",", "'cv_ml'", "]", "\n", "}", ",", "\n", "'LSConditionalDensityEstimation'", ":", "\n", "{", "'random_seed'", ":", "[", "22", "]", "}", ",", "\n", "'MixtureDensityNetwork'", ":", "\n", "{", "\n", "'n_centers'", ":", "[", "20", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "'NormalizingFlowEstimator'", ":", "\n", "{", "\n", "'flows_type'", ":", "[", "(", "'affine'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.15", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "'KernelMixtureNetwork'", ":", "\n", "{", "'center_sampling_method'", ":", "[", "\"k_means\"", "]", ",", "\n", "'n_centers'", ":", "[", "50", "]", ",", "\n", "'keep_edges'", ":", "[", "True", "]", ",", "\n", "'init_scales'", ":", "[", "[", "0.3", ",", "0.7", "]", "]", ",", "\n", "'train_scales'", ":", "[", "True", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", ",", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'LinearStudentT'", ":", "{", "'ndim_x'", ":", "[", "10", "]", "}", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "2", ",", "6", ",", "num", "=", "8", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question3_NNvsCKDE_Econ_GMM.question3": [[16, 44], ["numpy.logspace"], "function", ["None"], ["def", "question3", "(", ")", ":", "\n", "# todo: add KMN & MDN", "\n", "\n", "    ", "estimator_params", "=", "{", "\n", "'ConditionalKernelDensityEstimation'", ":", "\n", "{", "\n", "'bandwidth_selection'", ":", "[", "'normal_reference'", ",", "'cv_ml'", ",", "'cv_ls'", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'EconDensity'", ":", "{", "\n", "'std'", ":", "[", "1", "]", ",", "\n", "'heteroscedastic'", ":", "[", "True", "]", "\n", "}", ",", "\n", "\n", "'GaussianMixture'", ":", "{", "\n", "'n_kernels'", ":", "[", "10", "]", ",", "\n", "'ndim_x'", ":", "[", "2", "]", ",", "\n", "'ndim_y'", ":", "[", "2", "]", ",", "\n", "'means_std'", ":", "[", "1.5", "]", "\n", "}", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "0", ",", "6", ",", "num", "=", "7", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question2_entropy_reg.question2": [[11, 61], ["numpy.logspace"], "function", ["None"], ["def", "question2", "(", ")", ":", "\n", "  ", "estimator_params", "=", "{", "\n", "'KernelMixtureNetwork'", ":", "\n", "\n", "{", "'center_sampling_method'", ":", "[", "\"k_means\"", "]", ",", "\n", "'n_centers'", ":", "[", "20", ",", "50", "]", ",", "\n", "'keep_edges'", ":", "[", "True", "]", ",", "\n", "'init_scales'", ":", "[", "[", "0.1", ",", "0.5", ",", "1.", "]", "]", ",", "\n", "'train_scales'", ":", "[", "True", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.2", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", ",", "\n", "'entropy_reg_coef'", ":", "[", "0.001", ",", "0.01", ",", "0.1", ",", "1.0", ",", "10.0", ",", "100.0", "]", "\n", "}", ",", "\n", "\n", "'MixtureDensityNetwork'", ":", "\n", "{", "\n", "'n_centers'", ":", "[", "10", ",", "20", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.2", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", ",", "\n", "'entropy_reg_coef'", ":", "[", "0.001", ",", "0.01", ",", "0.1", ",", "1.0", ",", "10.0", ",", "100.0", "]", "\n", "}", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'EconDensity'", ":", "{", "'std'", ":", "[", "1", "]", ",", "\n", "'heteroscedastic'", ":", "[", "True", "]", ",", "\n", "}", ",", "\n", "\n", "'GaussianMixture'", ":", "{", "'n_kernels'", ":", "[", "10", "]", ",", "\n", "'ndim_x'", ":", "[", "2", "]", ",", "\n", "'ndim_y'", ":", "[", "2", "]", ",", "\n", "'means_std'", ":", "[", "1.5", "]", "\n", "}", ",", "\n", "'ArmaJump'", ":", "{", "'c'", ":", "[", "0.1", "]", ",", "\n", "'arma_a1'", ":", "[", "0.9", "]", ",", "\n", "'std'", ":", "[", "0.05", "]", ",", "\n", "'jump_prob'", ":", "[", "0.05", "]", ",", "\n", "}", ",", "\n", "'SkewNormal'", ":", "{", "}", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "0", ",", "6", ",", "num", "=", "7", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.simulation_eval.question3_NNvsCKDE_Arma_Skew.question3": [[16, 43], ["numpy.logspace"], "function", ["None"], ["def", "question3", "(", ")", ":", "\n", "#todo: add KMN & MDN", "\n", "\n", "    ", "estimator_params", "=", "{", "\n", "'ConditionalKernelDensityEstimation'", ":", "\n", "{", "\n", "'bandwidth_selection'", ":", "[", "'normal_reference'", ",", "'cv_ml'", ",", "'cv_ls'", "]", ",", "\n", "'random_seed'", ":", "[", "22", "]", "\n", "}", ",", "\n", "}", "\n", "\n", "simulators_params", "=", "{", "\n", "'ArmaJump'", ":", "{", "\n", "'c'", ":", "[", "0.1", "]", ",", "\n", "'arma_a1'", ":", "[", "0.9", "]", ",", "\n", "'std'", ":", "[", "0.05", "]", ",", "\n", "'jump_prob'", ":", "[", "0.05", "]", ",", "\n", "}", ",", "\n", "\n", "'SkewNormal'", ":", "{", "\n", "\n", "}", "\n", "}", "\n", "\n", "observations", "=", "100", "*", "np", ".", "logspace", "(", "0", ",", "6", ",", "num", "=", "7", ",", "base", "=", "2.0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "estimator_params", ",", "simulators_params", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.plotting.question7_plots._resize_plots": [[45, 49], ["fig.axes[].set_ylim", "fig.axes[].set_ylim"], "function", ["None"], ["def", "_resize_plots", "(", "fig", ")", ":", "\n", "    ", "fig", ".", "axes", "[", "0", "]", ".", "set_ylim", "(", "(", "-", "3", ",", "-", "1.9", ")", ")", "\n", "#fig.axes[1].set_ylim((-7, -4.5))", "\n", "fig", ".", "axes", "[", "3", "]", ".", "set_ylim", "(", "(", "1.0", ",", "1.63", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.regularization_empirical.Rule_of_thumb.__init__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", ")", ":", "\n", "        ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.regularization_empirical.Rule_of_thumb.__call__": [[15, 17], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "n", ",", "d", ")", ":", "\n", "        ", "return", "self", ".", "scale_factor", "*", "n", "**", "(", "-", "1", "/", "(", "4", "+", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.regularization_empirical.Rule_of_thumb.__str__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"rule_of_thumb_%.2f\"", "%", "self", ".", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.regularization_empirical.Polynomial_Rate.__init__": [[23, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", ",", "order", ")", ":", "\n", "        ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "order", "=", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.regularization_empirical.Polynomial_Rate.__call__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "n", ",", "d", ")", ":", "\n", "        ", "return", "self", ".", "scale_factor", "*", "n", "**", "(", "-", "1", "/", "(", "self", ".", "order", "+", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.regularization_empirical.Polynomial_Rate.__str__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"polynomial_rate_%i_%.2f\"", "%", "(", "self", ".", "order", ",", "self", ".", "scale_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.regularization_empirical.experiment": [[81, 107], ["ml_logger.logger.configure", "cde.EuroStoxx50", "cde.evaluation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv", "cde.evaluation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv", "pandas.concat", "ml_logger.logger.log", "ml_logger.logger.log", "cde.NCYTaxiDropoffPredict", "dataset_class", "cde.evaluation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv", "pandas.concat", "str", "pd.concat.tolatex"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv"], ["def", "experiment", "(", ")", ":", "\n", "    ", "logger", ".", "configure", "(", "log_directory", "=", "config", ".", "DATA_DIR", ",", "prefix", "=", "EXP_PREFIX", ",", "color", "=", "'green'", ")", "\n", "\n", "# 1) EUROSTOXX", "\n", "dataset", "=", "datasets", ".", "EuroStoxx50", "(", ")", "\n", "\n", "result_df", "=", "run_benchmark_train_test_fit_cv", "(", "dataset", ",", "model_dict", ",", "n_train_valid_splits", "=", "3", ",", "n_eval_seeds", "=", "5", ",", "shuffle_splits", "=", "False", ",", "\n", "n_folds", "=", "5", ",", "seed", "=", "22", ",", "n_jobs_inner", "=", "-", "1", ",", "n_jobc_outer", "=", "3", ")", "\n", "\n", "# 2) NYC Taxi", "\n", "for", "n_samples", "in", "[", "10000", "]", ":", "\n", "        ", "dataset", "=", "datasets", ".", "NCYTaxiDropoffPredict", "(", "n_samples", "=", "n_samples", ")", "\n", "\n", "", "df", "=", "run_benchmark_train_test_fit_cv", "(", "dataset", ",", "model_dict", ",", "n_train_valid_splits", "=", "3", ",", "n_eval_seeds", "=", "5", ",", "shuffle_splits", "=", "True", ",", "\n", "n_folds", "=", "5", ",", "seed", "=", "22", ",", "n_jobs_inner", "=", "-", "1", ",", "n_jobc_outer", "=", "3", ")", "\n", "result_df", "=", "pd", ".", "concat", "(", "[", "result_df", ",", "df", "]", ",", "ignore_index", "=", "True", ")", "\n", "\n", "# 3) UCI", "\n", "for", "dataset_class", "in", "[", "datasets", ".", "BostonHousing", ",", "datasets", ".", "Conrete", ",", "datasets", ".", "Energy", "]", ":", "\n", "        ", "dataset", "=", "dataset_class", "(", ")", "\n", "df", "=", "run_benchmark_train_test_fit_cv", "(", "dataset", ",", "model_dict", ",", "n_train_valid_splits", "=", "3", ",", "n_eval_seeds", "=", "5", ",", "\n", "shuffle_splits", "=", "True", ",", "n_folds", "=", "5", ",", "seed", "=", "22", ",", "n_jobs_inner", "=", "-", "1", ",", "n_jobc_outer", "=", "3", ")", "\n", "result_df", "=", "pd", ".", "concat", "(", "[", "result_df", ",", "df", "]", ",", "ignore_index", "=", "True", ")", "\n", "\n", "", "logger", ".", "log", "(", "'\\n'", ",", "str", "(", "result_df", ")", ")", "\n", "logger", ".", "log", "(", "'\\n'", ",", "result_df", ".", "tolatex", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.benchmark_empirical.Rule_of_thumb.__init__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", ")", ":", "\n", "        ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.benchmark_empirical.Rule_of_thumb.__call__": [[15, 17], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "n", ",", "d", ")", ":", "\n", "        ", "return", "self", ".", "scale_factor", "*", "n", "**", "(", "-", "1", "/", "(", "4", "+", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.benchmark_empirical.Rule_of_thumb.__str__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"rule_of_thumb_%.2f\"", "%", "self", ".", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.benchmark_empirical.Polynomial_Rate.__init__": [[23, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", ",", "order", ")", ":", "\n", "        ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "order", "=", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.benchmark_empirical.Polynomial_Rate.__call__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "n", ",", "d", ")", ":", "\n", "        ", "return", "self", ".", "scale_factor", "*", "n", "**", "(", "-", "1", "/", "(", "self", ".", "order", "+", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.benchmark_empirical.Polynomial_Rate.__str__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"polynomial_rate_%i_%.2f\"", "%", "(", "self", ".", "order", ",", "self", ".", "scale_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.benchmark_empirical.experiment": [[72, 100], ["ml_logger.logger.configure", "cde.EuroStoxx50", "cde.evaluation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv", "cde.evaluation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv", "pandas.concat", "ml_logger.logger.log", "cde.NCYTaxiDropoffPredict", "dataset_class", "cde.evaluation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv", "pandas.concat", "str"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv"], ["def", "experiment", "(", ")", ":", "\n", "    ", "logger", ".", "configure", "(", "log_directory", "=", "config", ".", "DATA_DIR", ",", "prefix", "=", "EXP_PREFIX", ",", "color", "=", "'green'", ")", "\n", "\n", "# 1) EUROSTOXX", "\n", "dataset", "=", "datasets", ".", "EuroStoxx50", "(", ")", "\n", "\n", "result_df", "=", "run_benchmark_train_test_fit_cv", "(", "dataset", ",", "model_dict", ",", "n_train_valid_splits", "=", "3", ",", "n_eval_seeds", "=", "5", ",", "shuffle_splits", "=", "False", ",", "\n", "n_folds", "=", "5", ",", "seed", "=", "22", ")", "\n", "\n", "# 2) NYC Taxi", "\n", "for", "n_samples", "in", "[", "10000", "]", ":", "\n", "        ", "dataset", "=", "datasets", ".", "NCYTaxiDropoffPredict", "(", "n_samples", "=", "n_samples", ")", "\n", "\n", "", "df", "=", "run_benchmark_train_test_fit_cv", "(", "dataset", ",", "model_dict", ",", "n_train_valid_splits", "=", "3", ",", "n_eval_seeds", "=", "5", ",", "shuffle_splits", "=", "True", ",", "\n", "n_folds", "=", "5", ",", "seed", "=", "22", ",", "n_jobs_inner", "=", "-", "1", ",", "n_jobc_outer", "=", "2", ")", "\n", "result_df", "=", "pd", ".", "concat", "(", "[", "result_df", ",", "df", "]", ",", "ignore_index", "=", "True", ")", "\n", "\n", "\n", "# 3) UCI", "\n", "result_df", "=", "None", "\n", "for", "dataset_class", "in", "[", "datasets", ".", "BostonHousing", ",", "datasets", ".", "Conrete", ",", "datasets", ".", "Energy", "]", ":", "\n", "        ", "dataset", "=", "dataset_class", "(", ")", "\n", "df", "=", "run_benchmark_train_test_fit_cv", "(", "dataset", ",", "model_dict", ",", "n_train_valid_splits", "=", "1", ",", "n_eval_seeds", "=", "5", ",", "\n", "shuffle_splits", "=", "True", ",", "n_folds", "=", "5", ",", "seed", "=", "22", ",", "n_jobs_inner", "=", "-", "1", ",", "\n", "n_jobc_outer", "=", "2", ")", "\n", "result_df", "=", "pd", ".", "concat", "(", "[", "result_df", ",", "df", "]", ",", "ignore_index", "=", "True", ")", "\n", "\n", "", "logger", ".", "log", "(", "'\\n'", ",", "str", "(", "result_df", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.benchmark_empirical_kde.experiment": [[17, 40], ["ml_logger.logger.configure", "cde.EuroStoxx50", "cde.evaluation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv_ml", "cde.evaluation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv_ml", "pandas.concat", "ml_logger.logger.log", "cde.NCYTaxiDropoffPredict", "dataset_class", "cde.evaluation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv_ml", "pandas.concat", "str"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv_ml", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv_ml", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv_ml"], ["def", "experiment", "(", ")", ":", "\n", "    ", "logger", ".", "configure", "(", "log_directory", "=", "config", ".", "DATA_DIR", ",", "prefix", "=", "EXP_PREFIX", ",", "color", "=", "'green'", ")", "\n", "\n", "# 1) EUROSTOXX", "\n", "dataset", "=", "datasets", ".", "EuroStoxx50", "(", ")", "\n", "\n", "result_df", "=", "run_benchmark_train_test_fit_cv_ml", "(", "dataset", ",", "model_dict", ",", "n_train_valid_splits", "=", "3", ",", "shuffle_splits", "=", "False", ",", "seed", "=", "22", ")", "\n", "\n", "# 2)", "\n", "for", "n_samples", "in", "[", "10000", "]", ":", "\n", "        ", "dataset", "=", "datasets", ".", "NCYTaxiDropoffPredict", "(", "n_samples", "=", "n_samples", ")", "\n", "\n", "", "df", "=", "run_benchmark_train_test_fit_cv_ml", "(", "dataset", ",", "model_dict", ",", "n_train_valid_splits", "=", "3", ",", "shuffle_splits", "=", "True", ",", "seed", "=", "22", ")", "\n", "\n", "result_df", "=", "pd", ".", "concat", "(", "[", "result_df", ",", "df", "]", ",", "ignore_index", "=", "True", ")", "\n", "\n", "# 3) UCI & NYC Taxi", "\n", "for", "dataset_class", "in", "[", "datasets", ".", "BostonHousing", ",", "datasets", ".", "Conrete", ",", "datasets", ".", "Energy", "]", ":", "\n", "        ", "dataset", "=", "dataset_class", "(", ")", "\n", "df", "=", "run_benchmark_train_test_fit_cv_ml", "(", "dataset", ",", "model_dict", ",", "n_train_valid_splits", "=", "3", ",", "shuffle_splits", "=", "True", ",", "seed", "=", "22", ")", "\n", "result_df", "=", "pd", ".", "concat", "(", "[", "result_df", ",", "df", "]", ",", "ignore_index", "=", "True", ")", "\n", "\n", "", "logger", ".", "log", "(", "'\\n'", ",", "str", "(", "result_df", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv": [[17, 87], ["numpy.random.RandomState", "list", "ml_logger.logger.log", "zip", "enumerate", "pprint.pprint", "model_dict.keys", "pandas.DataFrame.from_dict", "list", "ml_logger.logger.log", "ml_logger.logger.configure", "np.random.RandomState.randint", "model_dict[].update", "ml_logger.logger.log", "multiprocessing.Manager", "multiprocessing.Manager.dict", "cde.utils.async_executor.AsyncExecutor", "cde.utils.async_executor.AsyncExecutor.run", "cv_result_dicts.append", "final_results_dict[].append", "final_results_dict[].append", "final_results_dict[].append", "model_dict.keys", "str", "dataset.get_train_valid_splits", "experiment_util._initialize_model_cv", "estimator.fit_by_cv", "ml_logger.logger.log", "ml_logger.logger.log_params", "param_dict_init.update", "ml_logger.logger.log", "experiment_util._evaluate_params", "ml_logger.logger.log", "model_dict.keys", "model_dict.values", "dict", "_evaluate_params.extend", "numpy.mean", "numpy.std", "str", "str", "len", "str"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.EuroStoxx50.get_train_valid_splits", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util._initialize_model_cv", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.fit_by_cv", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util._evaluate_params"], ["def", "run_benchmark_train_test_fit_cv", "(", "dataset", ",", "model_dict", ",", "seed", "=", "27", ",", "n_jobs_inner", "=", "-", "1", ",", "n_jobc_outer", "=", "1", ",", "n_train_valid_splits", "=", "1", ",", "\n", "shuffle_splits", "=", "True", ",", "n_eval_seeds", "=", "1", ",", "n_folds", "=", "5", ")", ":", "\n", "\n", "    ", "if", "logger", ".", "log_directory", "is", "None", ":", "\n", "        ", "logger", ".", "configure", "(", "log_directory", "=", "'/tmp/ml-logger'", ")", "\n", "\n", "", "rds", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "eval_seeds", "=", "list", "(", "rds", ".", "randint", "(", "0", ",", "10", "**", "7", ",", "size", "=", "n_eval_seeds", ")", ")", "\n", "\n", "logger", ".", "log", "(", "\"\\n------------------  empirical benchmark with %s ----------------------\"", "%", "str", "(", "dataset", ")", ")", "\n", "\n", "for", "model_key", "in", "model_dict", ":", "\n", "        ", "model_dict", "[", "model_key", "]", ".", "update", "(", "{", "'ndim_x'", ":", "dataset", ".", "ndim_x", ",", "'ndim_y'", ":", "dataset", ".", "ndim_y", "}", ")", "\n", "\n", "# run experiments", "\n", "", "cv_result_dicts", "=", "[", "]", "\n", "\n", "datasets", "=", "zip", "(", "*", "dataset", ".", "get_train_valid_splits", "(", "valid_portion", "=", "0.2", ",", "n_splits", "=", "n_train_valid_splits", ",", "\n", "shuffle", "=", "shuffle_splits", ",", "random_state", "=", "rds", ")", ")", "\n", "\n", "for", "i", ",", "(", "X_train", ",", "Y_train", ",", "X_valid", ",", "Y_valid", ")", "in", "enumerate", "(", "datasets", ")", ":", "\n", "        ", "logger", ".", "log", "(", "\"--------  train-valid split %i --------\"", "%", "i", ")", "\n", "\n", "\n", "manager", "=", "Manager", "(", ")", "\n", "cv_result_dict", "=", "manager", ".", "dict", "(", ")", "\n", "\n", "def", "_fit_by_cv_and_eval", "(", "estimator_key", ",", "conf_dict", ")", ":", "\n", "            ", "estimator", ",", "param_grid", ",", "param_dict_init", "=", "_initialize_model_cv", "(", "estimator_key", ",", "conf_dict", ",", "verbose", "=", "True", ")", "\n", "\n", "# 1) perform cross-validation hyperparam search to select params", "\n", "selected_params", "=", "estimator", ".", "fit_by_cv", "(", "X_train", ",", "Y_train", ",", "param_grid", "=", "param_grid", ",", "n_folds", "=", "n_folds", ",", "\n", "n_jobs", "=", "n_jobs_inner", ",", "random_state", "=", "rds", ")", "\n", "\n", "logger", ".", "log", "(", "\"%s selected params:\"", "%", "estimator_key", ")", "\n", "logger", ".", "log_params", "(", "**", "selected_params", ")", "\n", "# 2) evaluate selected params with different initializations", "\n", "param_dict_init", ".", "update", "(", "selected_params", ")", "\n", "\n", "logger", ".", "log", "(", "\"evaluating %s parameters with %i seeds\"", "%", "(", "estimator_key", ",", "len", "(", "eval_seeds", ")", ")", ")", "\n", "scores", "=", "_evaluate_params", "(", "estimator", ".", "__class__", ",", "param_dict_init", ",", "X_train", ",", "Y_train", ",", "X_valid", ",", "Y_valid", ",", "\n", "seeds", "=", "eval_seeds", ")", "\n", "\n", "cv_result_dict", "[", "estimator_key", "]", "=", "{", "'selected_params'", ":", "selected_params", ",", "'scores'", ":", "scores", ",", "'eval_seeds'", ":", "eval_seeds", "}", "\n", "logger", ".", "log", "(", "\"evaluation scores for %s: %s\"", "%", "(", "estimator_key", ",", "str", "(", "scores", ")", ")", ")", "\n", "\n", "\n", "", "executor", "=", "AsyncExecutor", "(", "n_jobs", "=", "n_jobc_outer", ")", "\n", "executor", ".", "run", "(", "_fit_by_cv_and_eval", ",", "model_dict", ".", "keys", "(", ")", ",", "model_dict", ".", "values", "(", ")", ")", "\n", "\n", "cv_result_dicts", ".", "append", "(", "dict", "(", "cv_result_dict", ")", ")", "\n", "\n", "", "pprint", "(", "cv_result_dicts", ")", "\n", "\n", "# rearrange results as pandas df", "\n", "final_results_dict", "=", "{", "'scores_mean'", ":", "[", "]", ",", "'scores_std'", ":", "[", "]", ",", "'dataset'", ":", "[", "]", "}", "\n", "for", "estimator_key", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "        ", "scores", "=", "[", "]", "\n", "for", "result_dict", "in", "cv_result_dicts", ":", "\n", "            ", "scores", ".", "extend", "(", "result_dict", "[", "estimator_key", "]", "[", "'scores'", "]", ")", "\n", "\n", "", "final_results_dict", "[", "'scores_mean'", "]", ".", "append", "(", "np", ".", "mean", "(", "scores", ")", ")", "\n", "final_results_dict", "[", "'scores_std'", "]", ".", "append", "(", "np", ".", "std", "(", "scores", ")", ")", "\n", "final_results_dict", "[", "'dataset'", "]", ".", "append", "(", "str", "(", "dataset", ")", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "data", "=", "final_results_dict", ",", "orient", "=", "'columns'", ")", "\n", "df", ".", "index", "=", "list", "(", "model_dict", ".", "keys", "(", ")", ")", "\n", "\n", "logger", ".", "log", "(", "'\\n'", "+", "str", "(", "df", ")", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util.run_benchmark_train_test_fit_cv_ml": [[88, 140], ["numpy.random.RandomState", "ml_logger.logger.log", "zip", "list", "multiprocessing.Manager", "multiprocessing.Manager.dict", "model_dict.keys", "cde.utils.async_executor.AsyncExecutor", "cde.utils.async_executor.AsyncExecutor.run", "dict", "pprint.pprint", "dict.items", "pandas.DataFrame.from_dict", "list", "ml_logger.logger.log", "ml_logger.logger.configure", "zip", "multiprocessing.Manager.list", "experiment_util._initialize_model_cv_ml", "_initialize_model_cv_ml.fit", "_initialize_model_cv_ml.score", "result_dict[].append", "ml_logger.logger.log", "final_results_dict[].append", "final_results_dict[].append", "final_results_dict[].append", "model_dict.keys", "str", "dataset.get_train_valid_splits", "numpy.nanmean", "numpy.nanstd", "str", "str", "itertools.product", "list", "dict.items", "model_dict.items"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util._initialize_model_cv_ml", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.score", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.EuroStoxx50.get_train_valid_splits"], ["", "def", "run_benchmark_train_test_fit_cv_ml", "(", "dataset", ",", "model_dict", ",", "seed", "=", "27", ",", "n_train_valid_splits", "=", "1", ",", "shuffle_splits", "=", "True", ",", "\n", "n_jobs_outer", "=", "-", "1", ")", ":", "\n", "\n", "    ", "if", "logger", ".", "log_directory", "is", "None", ":", "\n", "        ", "logger", ".", "configure", "(", "log_directory", "=", "'/tmp/ml-logger'", ")", "\n", "\n", "", "rds", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n", "logger", ".", "log", "(", "\"\\n------------------  empirical cv_ml benchmark with %s ----------------------\"", "%", "str", "(", "dataset", ")", ")", "\n", "\n", "datasets", "=", "zip", "(", "*", "dataset", ".", "get_train_valid_splits", "(", "valid_portion", "=", "0.2", ",", "n_splits", "=", "n_train_valid_splits", ",", "\n", "shuffle", "=", "shuffle_splits", ",", "random_state", "=", "rds", ")", ")", "\n", "\n", "exps", "=", "list", "(", "zip", "(", "*", "itertools", ".", "product", "(", "model_dict", ".", "items", "(", ")", ",", "datasets", ")", ")", ")", "\n", "\n", "manager", "=", "Manager", "(", ")", "\n", "result_dict", "=", "manager", ".", "dict", "(", ")", "\n", "\n", "for", "estimator_key", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "        ", "result_dict", "[", "estimator_key", "]", "=", "manager", ".", "list", "(", ")", "\n", "\n", "", "def", "_fit_by_cv_ml_eval", "(", "model_dict_tuple", ",", "train_valid_set_tuple", ")", ":", "\n", "        ", "estimator_key", ",", "conf_dict", "=", "model_dict_tuple", "\n", "X_train", ",", "Y_train", ",", "X_valid", ",", "Y_valid", "=", "train_valid_set_tuple", "\n", "\n", "estimator", "=", "_initialize_model_cv_ml", "(", "conf_dict", ")", "\n", "estimator", ".", "fit", "(", "X_train", ",", "Y_train", ")", "\n", "score", "=", "estimator", ".", "score", "(", "X_valid", ",", "Y_valid", ")", "\n", "\n", "result_dict", "[", "estimator_key", "]", ".", "append", "(", "score", ")", "\n", "logger", ".", "log", "(", "'%s: score: %.4f'", "%", "(", "estimator_key", ",", "score", ")", ")", "\n", "\n", "", "executor", "=", "AsyncExecutor", "(", "n_jobs", "=", "n_jobs_outer", ")", "\n", "executor", ".", "run", "(", "_fit_by_cv_ml_eval", ",", "*", "exps", ")", "\n", "\n", "# convert result_dict into normal python dict containing lists", "\n", "result_dict", "=", "dict", "(", "[", "(", "key", ",", "list", "(", "value", ")", ")", "for", "key", ",", "value", "in", "result_dict", ".", "items", "(", ")", "]", ")", "\n", "\n", "pprint", "(", "result_dict", ")", "\n", "\n", "# rearrange results as pandas df", "\n", "final_results_dict", "=", "{", "'scores_mean'", ":", "[", "]", ",", "'scores_std'", ":", "[", "]", ",", "'dataset'", ":", "[", "]", "}", "\n", "for", "estimator_key", ",", "scores", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "        ", "final_results_dict", "[", "'scores_mean'", "]", ".", "append", "(", "np", ".", "nanmean", "(", "scores", ")", ")", "\n", "final_results_dict", "[", "'scores_std'", "]", ".", "append", "(", "np", ".", "nanstd", "(", "scores", ")", ")", "\n", "final_results_dict", "[", "'dataset'", "]", ".", "append", "(", "str", "(", "dataset", ")", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "data", "=", "final_results_dict", ",", "orient", "=", "'columns'", ")", "\n", "df", ".", "index", "=", "list", "(", "model_dict", ".", "keys", "(", ")", ")", "\n", "\n", "logger", ".", "log", "(", "'\\n'", "+", "str", "(", "df", ")", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util._initialize_model_cv": [[143, 163], ["conf_dict.pop", "conf_dict.items", "conf_dict.keys", "ml_logger.logger.log", "type", "globals"], "function", ["None"], ["def", "_initialize_model_cv", "(", "model_key", ",", "conf_dict", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "''' make kartesian product of listed parameters per model '''", "\n", "assert", "'estimator'", "in", "conf_dict", ".", "keys", "(", ")", "\n", "estimator", "=", "conf_dict", ".", "pop", "(", "'estimator'", ")", "\n", "param_dict_cv", "=", "{", "}", "\n", "param_dict_init", "=", "{", "}", "\n", "for", "param_key", ",", "param_value", "in", "conf_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "param_value", ")", "in", "(", "list", ",", "tuple", ")", ":", "\n", "            ", "param_dict_cv", "[", "param_key", "]", "=", "param_value", "\n", "param_dict_init", "[", "param_key", "]", "=", "param_value", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "param_dict_init", "[", "param_key", "]", "=", "param_value", "\n", "\n", "", "", "param_dict_init", "[", "'name'", "]", "=", "model_key", "\n", "\n", "if", "verbose", ":", "logger", ".", "log", "(", "'initialize %s'", "%", "model_key", ")", "\n", "\n", "estimator_instance", "=", "globals", "(", ")", "[", "estimator", "]", "(", "**", "param_dict_init", ")", "\n", "\n", "return", "estimator_instance", ",", "param_dict_cv", ",", "param_dict_init", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util._initialize_model_cv_ml": [[164, 168], ["copy.deepcopy", "copy.deepcopy.pop", "globals"], "function", ["None"], ["", "def", "_initialize_model_cv_ml", "(", "conf_dict", ")", ":", "\n", "    ", "conf_dict_local", "=", "copy", ".", "deepcopy", "(", "conf_dict", ")", "\n", "estimator_class", "=", "conf_dict_local", ".", "pop", "(", "'estimator'", ")", "\n", "return", "globals", "(", ")", "[", "estimator_class", "]", "(", "**", "conf_dict_local", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.experiment_util._evaluate_params": [[170, 192], ["cde.utils.async_executor.LoopExecutor", "cde.utils.async_executor.LoopExecutor.run", "tensorflow.ConfigProto", "tensorflow.reset_default_graph", "tensorflow.Session", "copy.copy", "str", "estimator_class", "estimator_class.fit", "estimator_class.score", "eval_scores.append"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.score"], ["", "def", "_evaluate_params", "(", "estimator_class", ",", "param_dict", ",", "X_train", ",", "Y_train", ",", "X_valid", ",", "Y_valid", ",", "seeds", ")", ":", "\n", "        ", "eval_scores", "=", "[", "]", "\n", "\n", "def", "_eval_with_seed", "(", "seed", ")", ":", "\n", "            ", "config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "\"CPU\"", ":", "1", "}", ",", "\n", "inter_op_parallelism_threads", "=", "1", ",", "\n", "intra_op_parallelism_threads", "=", "1", ")", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", ":", "\n", "                ", "param_dict_local", "=", "copy", ".", "copy", "(", "param_dict", ")", "\n", "param_dict_local", "[", "'random_seed'", "]", "=", "seed", "\n", "param_dict_local", "[", "'name'", "]", "+=", "str", "(", "seed", ")", "\n", "est", "=", "estimator_class", "(", "**", "param_dict_local", ")", "\n", "est", ".", "fit", "(", "X_train", ",", "Y_train", ",", "verbose", "=", "False", ")", "\n", "score", "=", "est", ".", "score", "(", "X_valid", ",", "Y_valid", ")", "\n", "eval_scores", ".", "append", "(", "score", ")", "\n", "\n", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n", "", "executor", "=", "LoopExecutor", "(", ")", "\n", "executor", ".", "run", "(", "_eval_with_seed", ",", "seeds", ")", "\n", "\n", "return", "eval_scores", "", "", ""]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Dataset.data_file_path": [[26, 29], ["os.path.join"], "methods", ["None"], ["@", "property", "\n", "def", "data_file_path", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "self", ".", "data_file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Dataset.needs_download": [[30, 33], ["os.path.isfile"], "methods", ["None"], ["", "@", "property", "\n", "def", "needs_download", "(", "self", ")", ":", "\n", "        ", "return", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "data_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Dataset.download_dataset": [[34, 37], ["print", "urllib.request.urlretrieve"], "methods", ["None"], ["", "def", "download_dataset", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Downloading data file from %s\"", "%", "self", ".", "download_url", ")", "\n", "urlretrieve", "(", "self", ".", "download_url", ",", "self", ".", "data_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Dataset.get_df": [[38, 43], ["pandas.read_csv", "datasets.Dataset._process_df", "datasets.Dataset.download_dataset"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict._process_df", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.EuroStoxx50.download_dataset"], ["", "def", "get_df", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "needs_download", ":", "\n", "            ", "self", ".", "download_dataset", "(", ")", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "data_file_path", ")", "\n", "return", "self", ".", "_process_df", "(", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Dataset.get_target_feature_split": [[44, 52], ["datasets.Dataset.get_df", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Yacht.get_df"], ["", "def", "get_target_feature_split", "(", "self", ")", ":", "\n", "        ", "df", "=", "self", ".", "get_df", "(", ")", "\n", "X", "=", "np", ".", "array", "(", "df", "[", "self", ".", "feature_columns", "]", ")", "\n", "Y", "=", "np", ".", "array", "(", "df", "[", "self", ".", "target_columns", "]", ")", "\n", "assert", "X", ".", "ndim", "==", "Y", ".", "ndim", "==", "2", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "Y", ".", "shape", "[", "0", "]", "\n", "assert", "X", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_x", "and", "Y", ".", "shape", "[", "1", "]", "==", "self", ".", "ndim_y", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Dataset.get_train_valid_splits": [[53, 84], ["datasets.Dataset.get_target_feature_split", "int", "numpy.arange", "reversed", "range", "X_trains.append", "Y_trains.append", "X_valids.append", "Y_valids.append", "random_state.shuffle", "numpy.random.shuffle", "numpy.concatenate", "len", "set", "set"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Dataset.get_target_feature_split"], ["", "def", "get_train_valid_splits", "(", "self", ",", "valid_portion", ",", "n_splits", ",", "shuffle", "=", "False", ",", "random_state", "=", "None", ")", ":", "\n", "\n", "        ", "X", ",", "Y", "=", "self", ".", "get_target_feature_split", "(", ")", "\n", "\n", "n_instances", "=", "X", ".", "shape", "[", "0", "]", "\n", "valid_size", "=", "int", "(", "valid_portion", "*", "n_instances", ")", "\n", "assert", "valid_size", "*", "n_splits", "<=", "n_instances", "\n", "\n", "idx", "=", "np", ".", "arange", "(", "n_instances", ")", "\n", "if", "shuffle", ":", "\n", "            ", "if", "random_state", "is", "not", "None", ":", "\n", "                ", "random_state", ".", "shuffle", "(", "idx", ")", "\n", "", "else", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "\n", "", "", "X_trains", ",", "Y_trains", ",", "X_valids", ",", "Y_valids", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "reversed", "(", "range", "(", "n_splits", ")", ")", ":", "\n", "            ", "idx_start", "=", "(", "n_instances", "//", "n_splits", ")", "*", "i", "\n", "idx_end", "=", "idx_start", "+", "valid_size", "\n", "\n", "idx_train", ",", "idx_valid", "=", "np", ".", "concatenate", "(", "[", "idx", "[", ":", "idx_start", "]", ",", "idx", "[", "idx_end", ":", "]", "]", ")", ",", "idx", "[", "idx_start", ":", "idx_end", "]", "\n", "\n", "assert", "len", "(", "set", "(", "idx_train", ")", "|", "set", "(", "idx_valid", ")", ")", "==", "n_instances", "\n", "\n", "X_trains", ".", "append", "(", "X", "[", "idx_train", ",", ":", "]", ")", "\n", "Y_trains", ".", "append", "(", "Y", "[", "idx_train", ",", ":", "]", ")", "\n", "X_valids", ".", "append", "(", "X", "[", "idx_valid", ",", ":", "]", ")", "\n", "Y_valids", ".", "append", "(", "Y", "[", "idx_valid", ",", ":", "]", ")", "\n", "\n", "", "return", "X_trains", ",", "Y_trains", ",", "X_valids", ",", "Y_valids", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Dataset._process_df": [[85, 87], ["None"], "methods", ["None"], ["", "def", "_process_df", "(", "self", ",", "df", ")", ":", "\n", "        ", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Dataset.__str__": [[88, 90], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"%s (ndim_x = %i, ndim_y = %i)\"", "%", "(", "str", "(", "self", ".", "__class__", ".", "__name__", ")", ",", "self", ".", "ndim_x", ",", "self", ".", "ndim_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.EuroStoxx50.get_train_valid_splits": [[105, 136], ["datasets.EuroStoxx50.get_target_feature_split", "int", "numpy.arange", "reversed", "range", "int", "X_trains.append", "Y_trains.append", "X_valids.append", "Y_valids.append"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Dataset.get_target_feature_split"], ["def", "get_train_valid_splits", "(", "self", ",", "valid_portion", ",", "n_splits", ",", "shift_size", "=", "100", ",", "shuffle", "=", "False", ",", "random_state", "=", "None", ")", ":", "\n", "# needs extra treatment since it's time-series data --> shifts train and valid set by shift_size each split", "\n", "# --> ensures that the valid data is always in the future of the train data", "\n", "\n", "        ", "assert", "shuffle", "is", "False", "\n", "\n", "X", ",", "Y", "=", "self", ".", "get_target_feature_split", "(", ")", "\n", "\n", "n_instances", "=", "X", ".", "shape", "[", "0", "]", "\n", "valid_size", "=", "int", "(", "valid_portion", "*", "n_instances", ")", "\n", "training_size", "=", "n_instances", "-", "valid_size", "-", "n_splits", "*", "shift_size", "\n", "assert", "valid_size", "*", "n_splits", "<=", "n_instances", "\n", "\n", "idx", "=", "np", ".", "arange", "(", "n_instances", ")", "\n", "\n", "X_trains", ",", "Y_trains", ",", "X_valids", ",", "Y_valids", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "reversed", "(", "range", "(", "n_splits", ")", ")", ":", "\n", "            ", "idx_train_start", "=", "int", "(", "i", "*", "shift_size", ")", "\n", "idx_valid_start", "=", "idx_train_start", "+", "training_size", "\n", "idx_valid_end", "=", "idx_valid_start", "+", "valid_size", "\n", "\n", "idx_train", ",", "idx_valid", "=", "idx", "[", "idx_train_start", ":", "idx_valid_start", "]", ",", "idx", "[", "idx_valid_start", ":", "idx_valid_end", "]", "\n", "\n", "\n", "X_trains", ".", "append", "(", "X", "[", "idx_train", ",", ":", "]", ")", "\n", "Y_trains", ".", "append", "(", "Y", "[", "idx_train", ",", ":", "]", ")", "\n", "X_valids", ".", "append", "(", "X", "[", "idx_valid", ",", ":", "]", ")", "\n", "Y_valids", ".", "append", "(", "Y", "[", "idx_valid", ",", ":", "]", ")", "\n", "\n", "", "return", "X_trains", ",", "Y_trains", ",", "X_valids", ",", "Y_valids", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.EuroStoxx50.download_dataset": [[137, 139], ["AssertionError"], "methods", ["None"], ["", "def", "download_dataset", "(", "self", ")", ":", "\n", "        ", "raise", "AssertionError", "(", "\"Sry, the EuroStoxx 50 data is proprietary and won't be open-sourced\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__init__": [[159, 162], ["numpy.random.RandomState"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_samples", "=", "10", "**", "4", ",", "seed", "=", "22", ")", ":", "\n", "        ", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.get_df": [[163, 174], ["os.path.join", "print", "pandas.read_csv", "super().get_df().dropna.sample", "os.path.isfile", "super().get_df().dropna", "print", "super().get_df().dropna.to_csv", "datasets.Dataset.get_df"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.sample", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Yacht.get_df"], ["", "def", "get_df", "(", "self", ")", ":", "\n", "        ", "data_file_path_processed", "=", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "self", ".", "data_file_name_processed", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "data_file_path_processed", ")", ":", "\n", "            ", "df", "=", "super", "(", "NCYTaxiDropoffPredict", ",", "self", ")", ".", "get_df", "(", ")", ".", "dropna", "(", ")", "\n", "print", "(", "\"save processed NYC data as csv to %s\"", "%", "data_file_path_processed", ")", "\n", "df", ".", "to_csv", "(", "data_file_path_processed", ")", "\n", "\n", "", "print", "(", "\"loading %s\"", "%", "data_file_path_processed", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "data_file_path_processed", ")", "\n", "\n", "return", "df", ".", "sample", "(", "n", "=", "self", ".", "n_samples", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict._process_df": [[175, 242], ["numpy.ones().astype", "print", "print", "numpy.array", "print", "print", "print", "pandas.DataFrame", "numpy.array", "numpy.array", "numpy.ones", "numpy.sum", "numpy.sum", "datasets._process_time", "numpy.sum", "numpy.sum", "numpy.sum", "pickup_time_day_of_week.astype", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "dropoff_time_day_of_week.astype", "len", "numpy.invert().astype", "early_stop.astype", "short_journeys.astype", "long_journeys.astype", "numpy.invert().astype", "pickup_time_day_of_week.astype", "numpy.invert", "numpy.invert"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets._process_time"], ["", "def", "_process_df", "(", "self", ",", "df", ")", ":", "# does some data cleaning", "\n", "        ", "data", "=", "df", ".", "values", "\n", "\n", "pickup_loc", "=", "np", ".", "array", "(", "(", "data", "[", ":", ",", "5", "]", ",", "data", "[", ":", ",", "6", "]", ")", ")", ".", "T", "\n", "dropoff_loc", "=", "np", ".", "array", "(", "(", "data", "[", ":", ",", "9", "]", ",", "data", "[", ":", ",", "10", "]", ")", ")", ".", "T", "\n", "\n", "ind", "=", "np", ".", "ones", "(", "len", "(", "data", ")", ")", ".", "astype", "(", "bool", ")", "\n", "ind", "[", "data", "[", ":", ",", "5", "]", "<", "self", ".", "x_bounds", "[", "0", "]", "]", "=", "False", "\n", "ind", "[", "data", "[", ":", ",", "5", "]", ">", "self", ".", "x_bounds", "[", "1", "]", "]", "=", "False", "\n", "ind", "[", "data", "[", ":", ",", "6", "]", "<", "self", ".", "y_bounds", "[", "0", "]", "]", "=", "False", "\n", "ind", "[", "data", "[", ":", ",", "6", "]", ">", "self", ".", "y_bounds", "[", "1", "]", "]", "=", "False", "\n", "\n", "ind", "[", "data", "[", ":", ",", "9", "]", "<", "self", ".", "x_bounds", "[", "0", "]", "]", "=", "False", "\n", "ind", "[", "data", "[", ":", ",", "9", "]", ">", "self", ".", "x_bounds", "[", "1", "]", "]", "=", "False", "\n", "ind", "[", "data", "[", ":", ",", "10", "]", "<", "self", ".", "y_bounds", "[", "0", "]", "]", "=", "False", "\n", "ind", "[", "data", "[", ":", ",", "10", "]", ">", "self", ".", "y_bounds", "[", "1", "]", "]", "=", "False", "\n", "\n", "print", "(", "'discarding {} out of bounds {} {}'", ".", "format", "(", "np", ".", "sum", "(", "np", ".", "invert", "(", "ind", ")", ".", "astype", "(", "int", ")", ")", ",", "self", ".", "x_bounds", ",", "self", ".", "y_bounds", ")", ")", "\n", "\n", "early_stop", "=", "(", "(", "data", "[", ":", ",", "5", "]", "-", "data", "[", ":", ",", "9", "]", ")", "**", "2", "+", "(", "data", "[", ":", ",", "6", "]", "-", "data", "[", ":", ",", "10", "]", ")", "**", "2", "<", "self", ".", "too_close_radius", ")", "\n", "ind", "[", "early_stop", "]", "=", "False", "\n", "print", "(", "'discarding {} trip less than {} gp dist'", ".", "format", "(", "np", ".", "sum", "(", "early_stop", ".", "astype", "(", "int", ")", ")", ",", "self", ".", "too_close_radius", "**", "0.5", ")", ")", "\n", "\n", "times", "=", "np", ".", "array", "(", "[", "_process_time", "(", "d_pickup", ",", "d_dropoff", ")", "for", "(", "d_pickup", ",", "d_dropoff", ")", "in", "data", "[", ":", ",", "1", ":", "3", "]", "]", ")", "\n", "pickup_time", "=", "times", "[", ":", ",", ":", "2", "]", "\n", "dropoff_time", "=", "times", "[", ":", ",", "2", ":", "4", "]", "\n", "duration", "=", "times", "[", ":", ",", "4", "]", "\n", "\n", "short_journeys", "=", "(", "duration", "<", "self", ".", "min_duration", ")", "\n", "ind", "[", "short_journeys", "]", "=", "False", "\n", "print", "(", "'discarding {} less than {}s journeys'", ".", "format", "(", "np", ".", "sum", "(", "short_journeys", ".", "astype", "(", "int", ")", ")", ",", "self", ".", "min_duration", ")", ")", "\n", "\n", "long_journeys", "=", "(", "duration", ">", "self", ".", "max_duration", ")", "\n", "ind", "[", "long_journeys", "]", "=", "False", "\n", "print", "(", "'discarding {} more than {}h journeys'", ".", "format", "(", "np", ".", "sum", "(", "long_journeys", ".", "astype", "(", "int", ")", ")", ",", "self", ".", "max_duration", "/", "3600.", ")", ")", "\n", "\n", "pickup_loc_lat", "=", "pickup_loc", "[", "ind", ",", "0", "]", "\n", "pickup_loc_lon", "=", "pickup_loc", "[", "ind", ",", "1", "]", "\n", "\n", "dropoff_loc_lat", "=", "dropoff_loc", "[", "ind", ",", "0", "]", "\n", "dropoff_loc_lon", "=", "dropoff_loc", "[", "ind", ",", "1", "]", "\n", "\n", "pickup_time_day_of_week", "=", "pickup_time", "[", "ind", ",", "0", "]", "\n", "pickup_time_of_day", "=", "pickup_time", "[", "ind", ",", "1", "]", "\n", "\n", "dropoff_time_day_of_week", "=", "dropoff_time", "[", "ind", ",", "0", "]", "\n", "dropoff_time_of_day", "=", "dropoff_time", "[", "ind", ",", "1", "]", "\n", "\n", "duration", "=", "duration", "[", "ind", "]", "\n", "\n", "print", "(", "'{} total rejected journeys'", ".", "format", "(", "np", ".", "sum", "(", "np", ".", "invert", "(", "ind", ")", ".", "astype", "(", "int", ")", ")", ")", ")", "\n", "\n", "df_processed", "=", "pd", ".", "DataFrame", "(", "\n", "{", "\"pickup_loc_lat\"", ":", "pickup_loc_lat", ",", "\n", "\"pickup_loc_lon\"", ":", "pickup_loc_lon", ",", "\n", "\"dropoff_loc_lat\"", ":", "dropoff_loc_lat", ",", "\n", "\"dropoff_loc_lon\"", ":", "dropoff_loc_lon", ",", "\n", "\"pickup_time_day_of_week\"", ":", "pickup_time_day_of_week", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "\"pickup_time_day_of_week_sin\"", ":", "np", ".", "sin", "(", "pickup_time_day_of_week", ")", ",", "\n", "\"pickup_time_day_of_week_cos\"", ":", "np", ".", "cos", "(", "pickup_time_day_of_week", ".", "astype", "(", "np", ".", "int", ")", ")", ",", "\n", "\"pickup_time_of_day\"", ":", "pickup_time_of_day", ",", "\n", "\"pickup_time_of_day_sin\"", ":", "np", ".", "sin", "(", "pickup_time_of_day", ")", ",", "\n", "\"pickup_time_of_day_cos\"", ":", "np", ".", "cos", "(", "pickup_time_of_day", ")", ",", "\n", "\"dropoff_time_day_of_week\"", ":", "dropoff_time_day_of_week", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "\"dropoff_time_of_day\"", ":", "dropoff_time_of_day", ",", "\"duration\"", ":", "duration", "}", ")", "\n", "\n", "return", "df_processed", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.NCYTaxiDropoffPredict.__str__": [[243, 245], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"%s (n_samples = %i, ndim_x = %i, ndim_y = %i)\"", "%", "(", "str", "(", "self", ".", "__class__", ".", "__name__", ")", ",", "self", ".", "n_samples", ",", "self", ".", "ndim_x", ",", "self", ".", "ndim_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.UCI_Dataset.download_url": [[250, 253], ["os.path.join"], "methods", ["None"], ["@", "property", "\n", "def", "download_url", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "uci_base_url", ",", "self", ".", "uci_data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.UCI_Dataset.target_columns": [[254, 257], ["datasets.UCI_Dataset.get_df"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Yacht.get_df"], ["", "@", "property", "\n", "def", "target_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "get_df", "(", ")", ".", "columns", "[", "-", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.UCI_Dataset.feature_columns": [[258, 261], ["list", "datasets.UCI_Dataset.get_df"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Yacht.get_df"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "get_df", "(", ")", ".", "columns", "[", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.BostonHousing.get_df": [[270, 275], ["pandas.read_fwf", "datasets.BostonHousing.download_dataset"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.EuroStoxx50.download_dataset"], ["def", "get_df", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "needs_download", ":", "\n", "            ", "self", ".", "download_dataset", "(", ")", "\n", "", "df", "=", "pd", ".", "read_fwf", "(", "self", ".", "data_file_path", ",", "header", "=", "None", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Conrete.get_df": [[284, 289], ["pandas.read_excel().dropna", "datasets.Conrete.download_dataset", "pandas.read_excel"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.EuroStoxx50.download_dataset"], ["def", "get_df", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "needs_download", ":", "\n", "            ", "self", ".", "download_dataset", "(", ")", "\n", "", "df", "=", "pd", ".", "read_excel", "(", "self", ".", "data_file_path", ")", ".", "dropna", "(", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Energy.get_df": [[298, 303], ["pandas.read_excel().dropna", "datasets.Energy.download_dataset", "pandas.read_excel"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.EuroStoxx50.download_dataset"], ["def", "get_df", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "needs_download", ":", "\n", "            ", "self", ".", "download_dataset", "(", ")", "\n", "", "df", "=", "pd", ".", "read_excel", "(", "self", ".", "data_file_path", ")", ".", "dropna", "(", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Power.get_df": [[312, 317], ["pandas.read_csv().dropna", "datasets.Power.download_dataset", "pandas.read_csv"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.EuroStoxx50.download_dataset"], ["def", "get_df", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "needs_download", ":", "\n", "            ", "self", ".", "download_dataset", "(", ")", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "data_file_path", ")", ".", "dropna", "(", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Protein.get_df": [[326, 331], ["pandas.read_csv().dropna", "datasets.Protein.download_dataset", "pandas.read_csv"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.EuroStoxx50.download_dataset"], ["def", "get_df", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "needs_download", ":", "\n", "            ", "self", ".", "download_dataset", "(", ")", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "data_file_path", ")", ".", "dropna", "(", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.WineRed.get_df": [[340, 345], ["pandas.read_csv().dropna", "datasets.WineRed.download_dataset", "pandas.read_csv"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.EuroStoxx50.download_dataset"], ["def", "get_df", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "needs_download", ":", "\n", "            ", "self", ".", "download_dataset", "(", ")", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "data_file_path", ",", "delimiter", "=", "';'", ")", ".", "dropna", "(", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.WineWhite.get_df": [[354, 359], ["pandas.read_csv().dropna", "datasets.WineWhite.download_dataset", "pandas.read_csv"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.EuroStoxx50.download_dataset"], ["def", "get_df", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "needs_download", ":", "\n", "            ", "self", ".", "download_dataset", "(", ")", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "data_file_path", ",", "delimiter", "=", "';'", ")", ".", "dropna", "(", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.Yacht.get_df": [[368, 373], ["pandas.read_fwf().dropna", "datasets.Yacht.download_dataset", "pandas.read_fwf"], "methods", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets.EuroStoxx50.download_dataset"], ["def", "get_df", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "needs_download", ":", "\n", "            ", "self", ".", "download_dataset", "(", ")", "\n", "", "df", "=", "pd", ".", "read_fwf", "(", "self", ".", "data_file_path", ",", "header", "=", "None", ")", ".", "dropna", "(", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets._UCI": [[11, 14], ["UCI_DATASETS.append"], "function", ["None"], ["def", "_UCI", "(", "C", ")", ":", "\n", "    ", "UCI_DATASETS", ".", "append", "(", "C", ")", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets._convert_to_day_minute": [[377, 383], ["rescale", "rescale", "float", "d.weekday", "d.time", "d.time"], "function", ["None"], ["def", "_convert_to_day_minute", "(", "d", ")", ":", "\n", "  ", "rescale", "=", "lambda", "x", ",", "a", ",", "b", ":", "b", "[", "0", "]", "+", "(", "b", "[", "1", "]", "-", "b", "[", "0", "]", ")", "*", "x", "/", "(", "a", "[", "1", "]", "-", "a", "[", "0", "]", ")", "\n", "\n", "day_of_week", "=", "rescale", "(", "float", "(", "d", ".", "weekday", "(", ")", ")", ",", "[", "0", ",", "6", "]", ",", "[", "0", ",", "2", "*", "np", ".", "pi", "]", ")", "\n", "time_of_day", "=", "rescale", "(", "d", ".", "time", "(", ")", ".", "hour", "*", "60", "+", "d", ".", "time", "(", ")", ".", "minute", ",", "[", "0", ",", "24", "*", "60", "]", ",", "[", "0", ",", "2", "*", "np", ".", "pi", "]", ")", "\n", "return", "day_of_week", ",", "time_of_day", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets._process_time": [[385, 394], ["datetime.datetime.strptime", "datetime.datetime.strptime", "datasets._convert_to_day_minute", "datasets._convert_to_day_minute"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets._convert_to_day_minute", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.empirical_eval.datasets._convert_to_day_minute"], ["", "def", "_process_time", "(", "pickup_datetime", ",", "dropoff_datetime", ")", ":", "\n", "  ", "d_pickup", "=", "datetime", ".", "strptime", "(", "pickup_datetime", ",", "\"%Y-%m-%d %H:%M:%S\"", ")", "\n", "d_dropoff", "=", "datetime", ".", "strptime", "(", "dropoff_datetime", ",", "\"%Y-%m-%d %H:%M:%S\"", ")", "\n", "duration", "=", "(", "d_dropoff", "-", "d_pickup", ")", ".", "total_seconds", "(", ")", "\n", "\n", "pickup_day_of_week", ",", "pickup_time_of_day", "=", "_convert_to_day_minute", "(", "d_pickup", ")", "\n", "dropoff_day_of_week", ",", "dropoff_time_of_day", "=", "_convert_to_day_minute", "(", "d_dropoff", ")", "\n", "\n", "return", "[", "pickup_day_of_week", ",", "pickup_time_of_day", ",", "dropoff_day_of_week", ",", "dropoff_time_of_day", ",", "duration", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.train_valid_split": [[31, 43], ["cde.evaluation.eurostoxx_eval.load_dataset.make_overall_eurostoxx_df", "df.dropna.dropna", "int"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset.make_overall_eurostoxx_df"], ["def", "train_valid_split", "(", "valid_portion", ")", ":", "\n", "    ", "assert", "0", "<", "valid_portion", "<", "1", "\n", "df", "=", "make_overall_eurostoxx_df", "(", ")", "\n", "df", "=", "df", ".", "dropna", "(", ")", "\n", "\n", "# split data into train and validation set", "\n", "split_index", "=", "int", "(", "df", ".", "shape", "[", "0", "]", "*", "(", "1.0", "-", "valid_portion", ")", ")", "\n", "\n", "df_train", "=", "df", "[", ":", "split_index", "]", "\n", "df_valid", "=", "df", "[", "split_index", ":", "]", "\n", "\n", "return", "df_train", ",", "df_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.cv_param_search": [[45, 50], ["empirical_benchmark.train_valid_split", "cde.evaluation.eurostoxx_eval.load_dataset.target_feature_split", "estimator.fit_by_cv"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.train_valid_split", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset.target_feature_split", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.fit_by_cv"], ["", "def", "cv_param_search", "(", "estimator", ",", "valid_portion", "=", "0.2", ",", "n_cv_folds", "=", "10", ",", "n_jobs", "=", "1", ")", ":", "\n", "    ", "df_train", ",", "df_valid", "=", "train_valid_split", "(", "valid_portion", ")", "\n", "X_train", ",", "Y_train", "=", "target_feature_split", "(", "df_train", ",", "'log_ret_1'", ",", "filter_nan", "=", "True", ")", "\n", "selected_params", "=", "estimator", ".", "fit_by_cv", "(", "X_train", ",", "Y_train", ",", "n_folds", "=", "n_cv_folds", ",", "n_jobs", "=", "n_jobs", ")", "\n", "return", "selected_params", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.empirical_evaluation": [[52, 107], ["empirical_benchmark.train_valid_split", "cde.evaluation.eurostoxx_eval.load_dataset.target_feature_split", "cde.evaluation.eurostoxx_eval.load_dataset.target_feature_split", "numpy.sqrt", "numpy.mean", "estimator.log_pdf", "estimator.mean_std", "numpy.abs", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "estimator.fit_by_cv", "estimator.fit", "mu_predicted.flatten", "std_predicted.flatten", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.train_valid_split", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset.target_feature_split", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset.target_feature_split", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.log_pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.LSCDE.LSConditionalDensityEstimation.mean_std", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseNNEstimator.BaseNNEstimator.fit_by_cv", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit"], ["", "def", "empirical_evaluation", "(", "estimator", ",", "valid_portion", "=", "0.2", ",", "moment_r2", "=", "True", ",", "eval_by_fc", "=", "False", ",", "fit_by_cv", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Fits the estimator and, based on a left out validation splot, computes the\n    Root Mean Squared Error (RMSE) between realized and estimated mean and std\n\n    Args:\n      estimator: estimator object\n      valid_portion: portion of dataset to be separated as validation set\n      moment_r2: (bool) whether to compute the rmse of mean and variance\n\n    Returns:\n      (likelihood, mu_rmse, std_rmse)\n    \"\"\"", "\n", "\n", "# get data and split into train and valid set", "\n", "df_train", ",", "df_valid", "=", "train_valid_split", "(", "valid_portion", ")", "\n", "\n", "X_train", ",", "Y_train", "=", "target_feature_split", "(", "df_train", ",", "'log_ret_1'", ",", "filter_nan", "=", "True", ")", "\n", "X_valid", ",", "Y_valid", "=", "target_feature_split", "(", "df_valid", ",", "'log_ret_1'", ",", "filter_nan", "=", "True", ")", "\n", "\n", "# realized moments", "\n", "mu_realized", "=", "df_valid", "[", "'log_ret_last_period'", "]", "[", "1", ":", "]", "\n", "std_realized_intraday", "=", "np", ".", "sqrt", "(", "df_valid", "[", "'RealizedVariation'", "]", "[", "1", ":", "]", ")", "\n", "\n", "# fit density model", "\n", "if", "eval_by_fc", "and", "not", "fit_by_cv", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "elif", "not", "eval_by_fc", "and", "fit_by_cv", ":", "\n", "        ", "estimator", ".", "fit_by_cv", "(", "X_train", ",", "Y_train", ",", "n_folds", "=", "5", ")", "\n", "", "else", ":", "\n", "        ", "estimator", ".", "fit", "(", "X_train", ",", "Y_train", ")", "\n", "\n", "# compute avg. log likelihood", "\n", "", "mean_logli", "=", "np", ".", "mean", "(", "estimator", ".", "log_pdf", "(", "X_valid", ",", "Y_valid", ")", ")", "\n", "\n", "if", "moment_r2", ":", "\n", "# predict mean and std", "\n", "        ", "mu_predicted", ",", "std_predicted", "=", "estimator", ".", "mean_std", "(", "X_valid", ",", "n_samples", "=", "N_SAMPLES", ")", "\n", "mu_predicted", "=", "mu_predicted", ".", "flatten", "(", ")", "[", ":", "-", "1", "]", "\n", "std_predicted", "=", "std_predicted", ".", "flatten", "(", ")", "[", ":", "-", "1", "]", "\n", "\n", "assert", "mu_realized", ".", "shape", "==", "mu_predicted", ".", "shape", "\n", "assert", "std_realized_intraday", ".", "shape", "==", "std_realized_intraday", ".", "shape", "\n", "\n", "# compute realized std", "\n", "std_realized", "=", "np", ".", "abs", "(", "mu_predicted", "-", "mu_realized", ")", "\n", "\n", "# compute RMSE", "\n", "mu_rmse", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "(", "mu_realized", "-", "mu_predicted", ")", "**", "2", ")", ")", "\n", "std_rmse", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "(", "std_realized", "-", "std_predicted", ")", "**", "2", ")", ")", "\n", "std_intraday_rmse", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "(", "std_realized_intraday", "-", "std_predicted", ")", "**", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "mu_rmse", ",", "std_rmse", ",", "std_intraday_rmse", "=", "None", ",", "None", ",", "None", "\n", "\n", "", "return", "mean_logli", ",", "mu_rmse", ",", "std_rmse", ",", "std_intraday_rmse", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.empirical_benchmark": [[109, 154], ["multiprocessing.Manager", "multiprocessing.Manager.list", "model_dict.items", "pandas.DataFrame.from_dict", "len", "cde.utils.async_executor.AsyncExecutor", "manager.list.append", "print", "time.time", "list", "range", "print", "print", "empirical_benchmark.empirical_evaluation", "cde.utils.async_executor.AsyncExecutor.run", "len", "len", "zip", "len", "len", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "eval", "time.time", "list"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.empirical_evaluation", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.async_executor.LoopExecutor.run"], ["", "def", "empirical_benchmark", "(", "model_dict", ",", "moment_r2", "=", "True", ",", "eval_by_fc", "=", "False", ",", "fit_by_cv", "=", "False", ",", "n_jobs", "=", "-", "1", ",", "multiprocessing", "=", "True", ")", ":", "\n", "    ", "result_dict", "=", "{", "}", "\n", "\n", "# multiprocessing setup", "\n", "manager", "=", "Manager", "(", ")", "\n", "result_list_model", "=", "manager", ".", "list", "(", ")", "\n", "if", "n_jobs", "==", "-", "1", ":", "\n", "        ", "n_jobs", "=", "len", "(", "SEEDS", ")", "\n", "", "if", "multiprocessing", ":", "executor", "=", "AsyncExecutor", "(", "n_jobs", "=", "n_jobs", ")", "\n", "eval", "=", "lambda", "est", ":", "result_list_model", ".", "append", "(", "empirical_evaluation", "(", "est", ",", "VALIDATION_PORTION", ",", "moment_r2", "=", "moment_r2", ",", "\n", "eval_by_fc", "=", "eval_by_fc", ",", "fit_by_cv", "=", "fit_by_cv", ")", ")", "\n", "\n", "for", "model_name", ",", "models", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "\"Running likelihood fit and validation for %s\"", "%", "model_name", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Multiprocessing calls or loop", "\n", "if", "multiprocessing", ":", "\n", "            ", "executor", ".", "run", "(", "eval", ",", "models", ")", "\n", "", "else", ":", "\n", "            ", "for", "est", "in", "models", ":", "\n", "                ", "eval", "(", "est", ")", "\n", "\n", "", "", "assert", "len", "(", "result_list_model", ")", "==", "len", "(", "models", ")", "\n", "mean_logli_list", ",", "mu_rmse_list", ",", "std_rmse_list", ",", "std_intraday_rmse_list", "=", "list", "(", "zip", "(", "*", "list", "(", "result_list_model", ")", ")", ")", "\n", "\n", "# clear result list", "\n", "for", "_", "in", "range", "(", "len", "(", "result_list_model", ")", ")", ":", "\n", "            ", "del", "result_list_model", "[", "0", "]", "\n", "", "assert", "len", "(", "result_list_model", ")", "==", "0", "\n", "\n", "mean_logli", ",", "mean_logli_dev", "=", "np", ".", "mean", "(", "mean_logli_list", ")", ",", "np", ".", "std", "(", "mean_logli_list", ")", "\n", "mu_rmse", ",", "mu_rmse_dev", "=", "np", ".", "mean", "(", "mu_rmse_list", ")", ",", "np", ".", "std", "(", "mu_rmse_list", ")", "\n", "std_rmse", ",", "std_rmse_dev", "=", "np", ".", "mean", "(", "std_rmse_list", ")", ",", "np", ".", "std", "(", "std_rmse_list", ")", "\n", "std_intraday_rmse", ",", "std_intraday_rmse_dev", "=", "np", ".", "mean", "(", "std_intraday_rmse_list", ")", ",", "np", ".", "std", "(", "std_intraday_rmse_list", ")", "\n", "\n", "result_dict", "[", "\n", "model_name", "]", "=", "mean_logli", ",", "mean_logli_dev", ",", "mu_rmse", ",", "mu_rmse_dev", ",", "std_rmse", ",", "std_rmse_dev", ",", "std_intraday_rmse", ",", "std_intraday_rmse_dev", "\n", "print", "(", "'%s results:'", "%", "model_name", ",", "result_dict", "[", "model_name", "]", ")", "\n", "print", "(", "'Duration of %s:'", "%", "model_name", ",", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "result_dict", ",", "'index'", ")", "\n", "df", ".", "columns", "=", "[", "'log_likelihood'", ",", "'log_likelihood_dev'", ",", "'rmse_mean'", ",", "'rmse_mean_dev'", ",", "'rmse_std'", ",", "'rmse_std_dev'", ",", "\n", "'rmse_std_intraday'", ",", "'rmse_std_intraday_dev'", "]", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.initialize_models": [[156, 174], ["model_dict.items", "model_configs.items", "enumerate", "dict", "conf.pop", "configs_initialized[].append", "zip", "list", "print", "conf_dict.keys", "itertools.product", "model_key.replace", "globals", "list", "conf_dict.values"], "function", ["None"], ["", "def", "initialize_models", "(", "model_dict", ",", "verbose", "=", "False", ",", "model_name_prefix", "=", "''", ")", ":", "\n", "    ", "''' make kartesian product of listed parameters per model '''", "\n", "model_configs", "=", "{", "}", "\n", "for", "model_key", ",", "conf_dict", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "        ", "model_configs", "[", "model_key", "]", "=", "[", "dict", "(", "zip", "(", "conf_dict", ".", "keys", "(", ")", ",", "value_tuple", ")", ")", "for", "value_tuple", "in", "\n", "list", "(", "itertools", ".", "product", "(", "*", "list", "(", "conf_dict", ".", "values", "(", ")", ")", ")", ")", "]", "\n", "\n", "", "\"\"\" initialize models \"\"\"", "\n", "configs_initialized", "=", "{", "}", "\n", "for", "model_key", ",", "model_conf_list", "in", "model_configs", ".", "items", "(", ")", ":", "\n", "        ", "configs_initialized", "[", "model_key", "]", "=", "[", "]", "\n", "for", "i", ",", "conf", "in", "enumerate", "(", "model_conf_list", ")", ":", "\n", "            ", "conf", "[", "'name'", "]", "=", "model_name_prefix", "+", "model_key", ".", "replace", "(", "' '", ",", "'_'", ")", "+", "'_%i'", "%", "i", "\n", "if", "verbose", ":", "print", "(", "\"instantiating \"", ",", "conf", "[", "'name'", "]", ")", "\n", "\"\"\" remove estimator entry from dict to instantiate it\"\"\"", "\n", "estimator", "=", "conf", ".", "pop", "(", "'estimator'", ")", "\n", "configs_initialized", "[", "model_key", "]", ".", "append", "(", "globals", "(", ")", "[", "estimator", "]", "(", "**", "conf", ")", ")", "\n", "", "", "return", "configs_initialized", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.run_benchmark_train_test": [[177, 238], ["print", "empirical_benchmark.initialize_models", "collections.OrderedDict", "empirical_benchmark.empirical_benchmark", "print", "print", "list", "empirical_benchmark.to_latex", "collections.OrderedDict.items"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.initialize_models", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.empirical_benchmark"], ["", "def", "run_benchmark_train_test", "(", "n_jobs", "=", "-", "1", ")", ":", "\n", "    ", "print", "(", "\"Normal fit & Evaluation\"", ")", "\n", "\n", "model_dict", "=", "{", "\n", "'LSCDE'", ":", "{", "'estimator'", ":", "[", "'LSConditionalDensityEstimation'", "]", ",", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "\n", "'random_seed'", ":", "SEEDS", "}", ",", "\n", "\n", "'MDN w/0 noise'", ":", "{", "'estimator'", ":", "[", "'MixtureDensityNetwork'", "]", ",", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "\n", "'n_centers'", ":", "[", "20", "]", ",", "'n_training_epochs'", ":", "[", "1000", "]", ",", "'x_noise_std'", ":", "[", "None", "]", ",", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'random_seed'", ":", "SEEDS", "}", ",", "\n", "\n", "'KMN w/0 noise'", ":", "{", "'estimator'", ":", "[", "'KernelMixtureNetwork'", "]", ",", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "\n", "'n_centers'", ":", "[", "50", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "'init_scales'", ":", "[", "[", "0.7", ",", "0.3", "]", "]", ",", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'random_seed'", ":", "SEEDS", "}", ",", "\n", "\n", "'NF w/0 noise'", ":", "{", "'flows_type'", ":", "[", "(", "'affine'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ")", "]", ",", "\n", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "\n", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "None", "]", ",", "\n", "'y_noise_std'", ":", "[", "None", "]", ",", "\n", "'random_seed'", ":", "SEEDS", "\n", "}", ",", "\n", "\n", "'MDN w/ noise'", ":", "{", "'estimator'", ":", "[", "'MixtureDensityNetwork'", "]", ",", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "\n", "'n_centers'", ":", "[", "20", "]", ",", "'n_training_epochs'", ":", "[", "1000", "]", ",", "'x_noise_std'", ":", "[", "0.2", "]", ",", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'random_seed'", ":", "SEEDS", "}", ",", "\n", "\n", "'KMN w/ noise'", ":", "{", "'estimator'", ":", "[", "'KernelMixtureNetwork'", "]", ",", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "\n", "'n_centers'", ":", "[", "50", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "'init_scales'", ":", "[", "[", "0.7", ",", "0.3", "]", "]", ",", "'x_noise_std'", ":", "[", "0.2", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'random_seed'", ":", "SEEDS", "}", ",", "\n", "\n", "'NF w/ noise'", ":", "{", "'flows_type'", ":", "[", "(", "'affine'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ",", "'radial'", ")", "]", ",", "\n", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "\n", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "\n", "'n_training_epochs'", ":", "[", "1000", "]", ",", "\n", "'hidden_sizes'", ":", "[", "(", "16", ",", "16", ")", "]", ",", "\n", "'x_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'y_noise_std'", ":", "[", "0.1", "]", ",", "\n", "'random_seed'", ":", "SEEDS", "\n", "}", ",", "\n", "\n", "'NKDE'", ":", "{", "'estimator'", ":", "[", "'NeighborKernelDensityEstimation'", "]", ",", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "\n", "'param_selection'", ":", "[", "'normal_reference'", "]", ",", "'random_seed'", ":", "[", "None", "]", "}", ",", "\n", "\n", "'CKDE'", ":", "{", "'estimator'", ":", "[", "'ConditionalKernelDensityEstimation'", "]", ",", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "\n", "'bandwidth'", ":", "[", "'normal_reference'", "]", ",", "'random_seed'", ":", "[", "None", "]", "}", ",", "\n", "\n", "}", "\n", "\n", "model_dict", "=", "initialize_models", "(", "model_dict", ",", "verbose", "=", "VERBOSE", ")", "\n", "model_dict", "=", "OrderedDict", "(", "list", "(", "model_dict", ".", "items", "(", ")", ")", ")", "\n", "\n", "result_df", "=", "empirical_benchmark", "(", "model_dict", ",", "moment_r2", "=", "True", ",", "eval_by_fc", "=", "False", ",", "fit_by_cv", "=", "False", ",", "n_jobs", "=", "n_jobs", ")", "\n", "print", "(", "result_df", ".", "to_latex", "(", ")", ")", "\n", "print", "(", "result_df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.run_benchmark_train_test_fit_by_cv": [[240, 280], ["print", "empirical_benchmark.initialize_models", "initialize_models.items", "empirical_benchmark.initialize_models", "collections.OrderedDict", "empirical_benchmark.empirical_benchmark", "print", "print", "list", "empirical_benchmark.cv_param_search", "cv_param_search.items", "list", "empirical_benchmark.to_latex", "model_dict_fit_by_cv.keys", "collections.OrderedDict.items"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.initialize_models", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.initialize_models", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.empirical_benchmark", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.cv_param_search"], ["", "def", "run_benchmark_train_test_fit_by_cv", "(", "model_key", "=", "None", ",", "n_jobs", "=", "1", ")", ":", "\n", "    ", "print", "(", "\"Fit by cv & Evaluation\"", ")", "\n", "\n", "model_dict_fit_by_cv", "=", "{", "\n", "'MDN_cv'", ":", "{", "'estimator'", ":", "[", "'MixtureDensityNetwork'", "]", ",", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "'random_seed'", ":", "[", "40", "]", "}", ",", "\n", "\n", "'KMN_cv'", ":", "{", "'estimator'", ":", "[", "'KernelMixtureNetwork'", "]", ",", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "\n", "'init_scales'", ":", "[", "[", "0.7", ",", "0.3", "]", "]", ",", "'random_seed'", ":", "[", "40", "]", "}", ",", "\n", "\n", "'LSCDE_cv'", ":", "{", "'estimator'", ":", "[", "'LSConditionalDensityEstimation'", "]", ",", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "\n", "'random_seed'", ":", "[", "40", "]", "}", ",", "\n", "\n", "'NF_cv'", ":", "{", "'estimator'", ":", "[", "'NormalizingFlowEstimator'", "]", ",", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "\n", "'random_seed'", ":", "[", "40", "]", "}", ",", "\n", "}", "\n", "\n", "# exclude all other models except model_key", "\n", "if", "model_key", "in", "list", "(", "model_dict_fit_by_cv", ".", "keys", "(", ")", ")", ":", "\n", "        ", "model_dict_fit_by_cv", "=", "{", "model_key", ":", "model_dict_fit_by_cv", "[", "model_key", "]", "}", "\n", "\n", "# determine optimal params by CV", "\n", "", "model_dict_cv", "=", "initialize_models", "(", "model_dict_fit_by_cv", ",", "verbose", "=", "VERBOSE", ",", "model_name_prefix", "=", "'param_search_'", ")", "\n", "for", "model_key", ",", "models", "in", "model_dict_cv", ".", "items", "(", ")", ":", "\n", "# perform cv param search", "\n", "        ", "selected_params", "=", "cv_param_search", "(", "models", "[", "0", "]", ",", "n_cv_folds", "=", "N_CV_FOLDS", ",", "n_jobs", "=", "n_jobs", ")", "\n", "\n", "# add selected params to model-params dict", "\n", "for", "param_key", ",", "param", "in", "selected_params", ".", "items", "(", ")", ":", "\n", "            ", "model_dict_fit_by_cv", "[", "model_key", "]", "[", "param_key", "]", "=", "[", "param", "]", "\n", "\n", "# add seeds to dict", "\n", "", "model_dict_fit_by_cv", "[", "model_key", "]", "[", "'random_seed'", "]", "=", "SEEDS", "\n", "\n", "# refit model with selected params with multiple seeds and average", "\n", "", "model_dict", "=", "initialize_models", "(", "model_dict_fit_by_cv", ",", "verbose", "=", "VERBOSE", ")", "\n", "model_dict", "=", "OrderedDict", "(", "list", "(", "model_dict", ".", "items", "(", ")", ")", ")", "\n", "result_df", "=", "empirical_benchmark", "(", "model_dict", ",", "moment_r2", "=", "True", ",", "eval_by_fc", "=", "False", ",", "multiprocessing", "=", "False", ")", "\n", "\n", "print", "(", "result_df", ".", "to_latex", "(", ")", ")", "\n", "print", "(", "result_df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.run_benchmark_train_test_cv_ml": [[282, 297], ["print", "empirical_benchmark.initialize_models", "collections.OrderedDict", "empirical_benchmark.empirical_benchmark", "print", "print", "list", "empirical_benchmark.to_latex", "collections.OrderedDict.items"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.initialize_models", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.empirical_benchmark.empirical_benchmark"], ["", "def", "run_benchmark_train_test_cv_ml", "(", "n_jobs", "=", "1", ")", ":", "\n", "    ", "print", "(", "\"Fit by cv_ml & Evaluation\"", ")", "\n", "model_dict_cv_ml", "=", "{", "\n", "'CKDE_cv_ml'", ":", "{", "'estimator'", ":", "[", "'ConditionalKernelDensityEstimation'", "]", ",", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "\n", "'bandwidth'", ":", "[", "'cv_ml'", "]", ",", "'random_seed'", ":", "[", "22", "]", "}", ",", "\n", "\n", "'NKDE_cv_ml'", ":", "{", "'estimator'", ":", "[", "'NeighborKernelDensityEstimation'", "]", ",", "'ndim_x'", ":", "[", "ndim_x", "]", ",", "'ndim_y'", ":", "[", "ndim_y", "]", ",", "\n", "'param_selection'", ":", "[", "'cv_ml'", "]", ",", "'random_seed'", ":", "[", "22", "]", "}", ",", "\n", "}", "\n", "\n", "model_dict", "=", "initialize_models", "(", "model_dict_cv_ml", ",", "verbose", "=", "VERBOSE", ")", "\n", "model_dict", "=", "OrderedDict", "(", "list", "(", "model_dict", ".", "items", "(", ")", ")", ")", "\n", "result_df_cv_ml", "=", "empirical_benchmark", "(", "model_dict", ",", "moment_r2", "=", "True", ",", "eval_by_fc", "=", "False", ",", "fit_by_cv", "=", "False", ",", "n_jobs", "=", "n_jobs", ")", "\n", "print", "(", "result_df_cv_ml", ")", "\n", "print", "(", "result_df_cv_ml", ".", "to_latex", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.feature_selection.main": [[10, 74], ["cde.evaluation.eurostoxx_eval.load_dataset.make_overall_eurostoxx_df", "cde.evaluation.eurostoxx_eval.load_dataset.target_feature_split", "cde.density_estimator.MDN.MixtureDensityNetwork", "cde.density_estimator.MDN.MixtureDensityNetwork.fit", "numpy.mean", "numpy.mean", "enumerate", "matplotlib.pyplot.subplots", "numpy.linspace", "enumerate", "[].set_xlabel", "[].set_ylabel", "axes[].tick_params", "axes[].spines.values", "fig.legend", "fig.tight_layout", "os.path.join", "fig.savefig", "os.path.join", "fig.savefig", "numpy.array", "numpy.array", "numpy.zeros", "cde.density_estimator.MDN.MixtureDensityNetwork.plot2d", "matplotlib.pyplot.legend", "matplotlib.pyplot.title", "os.path.join", "matplotlib.pyplot.savefig", "numpy.zeros", "range", "[].set_title", "spine.set_color", "len", "numpy.array", "cde.density_estimator.MDN.MixtureDensityNetwork.pdf", "[].plot", "range"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset.make_overall_eurostoxx_df", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset.target_feature_split", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity.plot2d", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NKDE.NeighborKernelDensityEstimation.pdf", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.plot"], ["def", "main", "(", ")", ":", "\n", "# load data", "\n", "  ", "df", "=", "make_overall_eurostoxx_df", "(", ")", "\n", "X", ",", "Y", ",", "features", "=", "target_feature_split", "(", "df", ",", "'log_ret_1'", ",", "filter_nan", "=", "True", ",", "return_features", "=", "True", ")", "\n", "X", ",", "Y", "=", "np", ".", "array", "(", "X", ")", ",", "np", ".", "array", "(", "Y", ")", "\n", "\n", "ndim_x", ",", "ndim_y", "=", "X", ".", "shape", "[", "1", "]", ",", "1", "\n", "\n", "mdn", "=", "MixtureDensityNetwork", "(", "'mdn_empirical_no_pca'", ",", "ndim_x", ",", "ndim_y", ",", "n_centers", "=", "20", ",", "n_training_epochs", "=", "10", ",", "\n", "random_seed", "=", "28", ",", "x_noise_std", "=", "0.2", ",", "y_noise_std", "=", "0.1", ")", "\n", "mdn", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "X_mean", "=", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", "\n", "X_std", "=", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", "\n", "\n", "# individual plots", "\n", "for", "i", ",", "feature", "in", "enumerate", "(", "features", ")", ":", "\n", "    ", "factor", "=", "np", ".", "zeros", "(", "X_std", ".", "shape", ")", "\n", "factor", "[", "i", "]", "=", "X_std", "[", "i", "]", "\n", "x_cond", "=", "[", "X_mean", "-", "2", "*", "factor", ",", "X_mean", "-", "1", "*", "factor", ",", "X_mean", ",", "X_mean", "+", "1", "*", "factor", ",", "X_mean", "+", "2", "*", "factor", "]", "\n", "mdn", ".", "plot2d", "(", "x_cond", "=", "x_cond", ",", "ylim", "=", "(", "-", "0.04", ",", "0.04", ")", ",", "show", "=", "False", ")", "\n", "plt", ".", "legend", "(", "[", "'mean-2*std'", ",", "'mean-1*std'", ",", "'mean'", ",", "'mean+1*std'", ",", "'mean+2*std'", "]", ")", "\n", "plt", ".", "title", "(", "feature", ")", "\n", "fig_path", "=", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'plots/feature_selection/'", "+", "feature", "+", "'.png'", ")", "\n", "plt", ".", "savefig", "(", "fig_path", ")", "\n", "\n", "\n", "# one large plot", "\n", "", "resolution", "=", "100", "\n", "ncols", "=", "3", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "nrows", "=", "5", ",", "ncols", "=", "ncols", ",", "figsize", "=", "(", "12", ",", "16", ")", ")", "\n", "y", "=", "np", ".", "linspace", "(", "-", "0.04", ",", "0.04", ",", "resolution", ")", "\n", "\n", "n", "=", "0", "\n", "for", "i", ",", "feature", "in", "enumerate", "(", "features", ")", ":", "\n", "    ", "if", "n", "==", "2", ":", "\n", "      ", "n", "+=", "1", "\n", "", "factor", "=", "np", ".", "zeros", "(", "X_std", ".", "shape", ")", "\n", "factor", "[", "i", "]", "=", "X_std", "[", "i", "]", "\n", "x_cond", "=", "[", "X_mean", "+", "2", "*", "factor", ",", "X_mean", "+", "1", "*", "factor", ",", "X_mean", ",", "X_mean", "-", "1", "*", "factor", ",", "X_mean", "-", "2", "*", "factor", "]", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "x_cond", ")", ")", ":", "\n", "      ", "x", "=", "np", ".", "array", "(", "[", "x_cond", "[", "j", "]", "for", "_", "in", "range", "(", "resolution", ")", "]", ")", "\n", "z", "=", "mdn", ".", "pdf", "(", "x", ",", "y", ")", "\n", "axes", "[", "n", "//", "ncols", "]", "[", "n", "%", "ncols", "]", ".", "plot", "(", "y", ",", "z", ")", "\n", "\n", "", "axes", "[", "n", "//", "ncols", "]", "[", "n", "%", "ncols", "]", ".", "set_title", "(", "feature", ")", "\n", "n", "+=", "1", "\n", "\n", "", "axes", "[", "0", "]", "[", "0", "]", ".", "set_xlabel", "(", "'log return'", ")", "\n", "axes", "[", "0", "]", "[", "0", "]", ".", "set_ylabel", "(", "'probability density log-returns'", ")", "\n", "\n", "# make top right plot disappear", "\n", "axes", "[", "0", ",", "2", "]", ".", "tick_params", "(", "colors", "=", "'white'", ")", "\n", "for", "spine", "in", "axes", "[", "0", ",", "2", "]", ".", "spines", ".", "values", "(", ")", ":", "spine", ".", "set_color", "(", "'white'", ")", "\n", "\n", "fig", ".", "legend", "(", "[", "'mean+2*std'", ",", "'mean+1*std'", ",", "'mean'", ",", "'mean-1*std'", ",", "'mean-2*std'", "]", ",", "loc", "=", "(", ".77", ",", "0.88", ")", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "fig_path", "=", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'plots/feature_selection/feature_selection_all_variables.png'", ")", "\n", "fig", ".", "savefig", "(", "fig_path", ")", "\n", "\n", "fig_path", "=", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'plots/feature_selection/feature_selection_all_variables.pdf'", ")", "\n", "fig", ".", "savefig", "(", "fig_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.moments_time_series.main": [[16, 67], ["matplotlib.pyplot.subplots", "range", "matplotlib.pyplot.savefig", "print", "cde.evaluation.eurostoxx_eval.load_dataset.make_overall_eurostoxx_df", "cde.evaluation.eurostoxx_eval.load_dataset.target_feature_split", "cde.density_estimator.MDN.MixtureDensityNetwork", "cde.density_estimator.MDN.MixtureDensityNetwork.fit", "print", "numpy.squeeze", "print", "numpy.squeeze", "print", "cde.density_estimator.MDN.MixtureDensityNetwork._skewness_mc", "print", "cde.density_estimator.MDN.MixtureDensityNetwork._kurtosis_mc", "numpy.stack", "pandas.DataFrame", "print", "pd.read_csv.to_csv", "pandas.read_csv", "axes[].plot", "axes[].set_title", "os.path.join", "numpy.array", "numpy.array", "cde.density_estimator.MDN.MixtureDensityNetwork.mean_", "cde.density_estimator.MDN.MixtureDensityNetwork.covariance", "os.path.exists", "os.makedirs", "cde.evaluation.eurostoxx_eval.load_dataset.make_overall_eurostoxx_df.dropna"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset.make_overall_eurostoxx_df", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset.target_feature_split", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._skewness_mc", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity._kurtosis_mc", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.BaseConditionalDensitySimulation.BaseConditionalDensitySimulation.plot", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.mean_", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["def", "main", "(", ")", ":", "\n", "\n", "  ", "if", "COMPUTE_MOMENTS", ":", "\n", "# 1) load data", "\n", "    ", "df", "=", "make_overall_eurostoxx_df", "(", ")", "\n", "\n", "\n", "X", ",", "Y", ",", "features", "=", "target_feature_split", "(", "df", ",", "'log_ret_1'", ",", "filter_nan", "=", "True", ",", "return_features", "=", "True", ")", "\n", "X", ",", "Y", "=", "np", ".", "array", "(", "X", ")", ",", "np", ".", "array", "(", "Y", ")", "\n", "ndim_x", ",", "ndim_y", "=", "X", ".", "shape", "[", "1", "]", ",", "1", "\n", "\n", "# 2) Fite density model", "\n", "mdn", "=", "MixtureDensityNetwork", "(", "'mdn_empirical_no_pca'", ",", "ndim_x", ",", "ndim_y", ",", "n_centers", "=", "20", ",", "n_training_epochs", "=", "10", ",", "\n", "random_seed", "=", "22", ",", "x_noise_std", "=", "0.2", ",", "y_noise_std", "=", "0.1", ")", "\n", "mdn", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "# 3) estimate moments", "\n", "n_samples", "=", "10", "**", "7", "\n", "print", "(", "'compute mean'", ")", "\n", "mean", "=", "np", ".", "squeeze", "(", "mdn", ".", "mean_", "(", "x_cond", "=", "X", ",", "n_samples", "=", "n_samples", ")", ")", "\n", "print", "(", "'compute cov'", ")", "\n", "cov", "=", "np", ".", "squeeze", "(", "mdn", ".", "covariance", "(", "x_cond", "=", "X", ",", "n_samples", "=", "n_samples", ")", ")", "\n", "print", "(", "'compute skewness'", ")", "\n", "skew", "=", "mdn", ".", "_skewness_mc", "(", "x_cond", "=", "X", ",", "n_samples", "=", "n_samples", ")", "\n", "print", "(", "'compute kurtosis'", ")", "\n", "kurt", "=", "mdn", ".", "_kurtosis_mc", "(", "x_cond", "=", "X", ",", "n_samples", "=", "n_samples", ")", "\n", "\n", "# 4) save data", "\n", "data", "=", "np", ".", "stack", "(", "[", "mean", ",", "cov", ",", "skew", ",", "kurt", "]", ",", "axis", "=", "-", "1", ")", "\n", "moments_df", "=", "pd", ".", "DataFrame", "(", "data", "=", "data", ",", "index", "=", "df", ".", "dropna", "(", ")", ".", "index", ",", "columns", "=", "[", "'mean'", ",", "'variance'", ",", "'skewness'", ",", "'kurtosis'", "]", ")", "\n", "print", "(", "moments_df", ")", "\n", "\n", "# dump csv", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dump_dir", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "dump_dir", ")", "\n", "", "moments_df", ".", "to_csv", "(", "dump_file_path", ")", "\n", "\n", "", "else", ":", "\n", "    ", "moments_df", "=", "pd", ".", "read_csv", "(", "dump_file_path", ",", "index_col", "=", "0", ")", "\n", "\n", "#5) plot moment timeseries", "\n", "", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "nrows", "=", "4", ",", "ncols", "=", "1", ",", "figsize", "=", "(", "15", ",", "20", ")", ")", "\n", "\n", "x", "=", "moments_df", ".", "index", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "    ", "label", "=", "moments_df", ".", "columns", "[", "i", "]", "\n", "y", "=", "moments_df", ".", "ix", "[", ":", ",", "i", "]", "\n", "axes", "[", "i", "]", ".", "plot", "(", "x", ",", "y", ")", "\n", "axes", "[", "i", "]", ".", "set_title", "(", "label", ")", "\n", "", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'moments_time_series.png'", ")", ")", "\n", "print", "(", "\"Saved figure\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.underest_of_variance.estimate_cov": [[31, 62], ["print", "tensorflow.Session", "cde.density_simulation.LinearGaussian.LinearGaussian", "cde.density_simulation.LinearGaussian.LinearGaussian.simulate", "cde.density_estimator.MDN.MixtureDensityNetwork", "cde.density_estimator.MDN.MixtureDensityNetwork.fit", "cde.density_estimator.KMN.KernelMixtureNetwork", "cde.density_estimator.KMN.KernelMixtureNetwork.fit", "numpy.array", "numpy.sqrt().flatten", "numpy.sqrt().flatten", "result_list.append", "result_list.append", "str", "str", "numpy.zeros", "numpy.sqrt", "numpy.sqrt", "str", "str", "cde.density_estimator.MDN.MixtureDensityNetwork.covariance", "cde.density_estimator.KMN.KernelMixtureNetwork.covariance"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_simulation.SkewNormal.SkewNormal.simulate", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.BaseDensityEstimator.BaseDensityEstimator.covariance"], ["def", "estimate_cov", "(", "i", ",", "j", ")", ":", "\n", "  ", "print", "(", "'STARTING JOB (%i,%i)'", "%", "(", "i", ",", "j", ")", ")", "\n", "ndim_x", "=", "ndims", "[", "i", "]", "\n", "round_seed", "=", "seeds", "[", "j", "]", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "model", "=", "LinearGaussian", "(", "mu", "=", "0", ",", "ndim_x", "=", "ndim_x", ",", "mu_slope", "=", "0.0", ",", "std", "=", "std", ",", "std_slope", "=", "0.005", ",", "random_seed", "=", "round_seed", ")", "\n", "X", ",", "Y", "=", "model", ".", "simulate", "(", "n_samples", "=", "5000", ")", "\n", "ndim_x", ",", "ndim_y", "=", "X", ".", "shape", "[", "1", "]", ",", "1", "\n", "\n", "# fit the estimators", "\n", "mdn", "=", "MixtureDensityNetwork", "(", "'mdn_empirical'", "+", "str", "(", "ndim_x", ")", "+", "str", "(", "round_seed", ")", ",", "ndim_x", ",", "ndim_y", ",", "n_centers", "=", "20", ",", "\n", "n_training_epochs", "=", "epochs", ",", "\n", "random_seed", "=", "round_seed", ",", "x_noise_std", "=", "x_noise", ",", "y_noise_std", "=", "y_noise", ",", "\n", "data_normalization", "=", "True", ",", "hidden_sizes", "=", "(", "16", ",", "16", ")", ")", "\n", "mdn", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "kmn", "=", "KernelMixtureNetwork", "(", "'kmn_empirical'", "+", "str", "(", "ndim_x", ")", "+", "str", "(", "round_seed", ")", ",", "ndim_x", ",", "ndim_y", ",", "n_centers", "=", "50", ",", "\n", "init_scales", "=", "[", "1.0", ",", "0.5", "]", ",", "\n", "n_training_epochs", "=", "epochs", ",", "random_seed", "=", "round_seed", ",", "x_noise_std", "=", "x_noise", ",", "\n", "y_noise_std", "=", "y_noise", ",", "\n", "data_normalization", "=", "True", ",", "keep_edges", "=", "True", ",", "hidden_sizes", "=", "(", "16", ",", "16", ")", ")", "\n", "kmn", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "x_cond", "=", "np", ".", "array", "(", "[", "np", ".", "zeros", "(", "ndim_x", ")", "]", ")", "\n", "\n", "# estimate standard deviation", "\n", "std_est_mdn", "=", "np", ".", "sqrt", "(", "mdn", ".", "covariance", "(", "x_cond", ")", ")", ".", "flatten", "(", ")", "\n", "std_est_kmn", "=", "np", ".", "sqrt", "(", "kmn", ".", "covariance", "(", "x_cond", ")", ")", ".", "flatten", "(", ")", "\n", "\n", "result_list", ".", "append", "(", "(", "'MDN'", ",", "i", ",", "j", ",", "std_est_mdn", ")", ")", "\n", "result_list", ".", "append", "(", "(", "'KMN'", ",", "i", ",", "j", ",", "std_est_kmn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._make_return_df": [[24, 32], ["cde.utils.io.load_time_series_csv", "cde.utils.io.load_time_series_csv.drop", "numpy.log", "numpy.log", "cde.utils.io.load_time_series_csv.lastprice.shift", "numpy.log", "numpy.log", "cde.utils.io.load_time_series_csv.lastprice.shift"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.load_time_series_csv"], ["def", "_make_return_df", "(", "return_periods", ")", ":", "\n", "  ", "eurostoxx", "=", "load_time_series_csv", "(", "EUROSTOXX_CSV", ")", "\n", "for", "h", "in", "return_periods", ":", "\n", "    ", "eurostoxx", "[", "'log_ret_%i'", "%", "h", "]", "=", "np", ".", "log", "(", "eurostoxx", ".", "lastprice", ")", "-", "np", ".", "log", "(", "eurostoxx", ".", "lastprice", ".", "shift", "(", "h", ")", ")", "\n", "\n", "# compute last period return", "\n", "", "eurostoxx", "[", "'log_ret_last_period'", "]", "=", "(", "np", ".", "log", "(", "eurostoxx", ".", "lastprice", ")", "-", "np", ".", "log", "(", "eurostoxx", ".", "lastprice", ".", "shift", "(", "1", ")", ")", ")", ".", "shift", "(", "1", ")", "\n", "return", "eurostoxx", ".", "drop", "(", "labels", "=", "[", "'lastprice'", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._make_risk_free_df": [[33, 38], ["cde.utils.io.load_time_series_csv", "numpy.log", "cde.utils.io.load_time_series_csv.drop"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.load_time_series_csv"], ["", "def", "_make_risk_free_df", "(", ")", ":", "\n", "  ", "euro_oid", "=", "load_time_series_csv", "(", "EURO_OIS_CSV", ")", "\n", "euro_oid", "=", "euro_oid", "[", "euro_oid", ".", "maturity", "==", "1", "]", "\n", "euro_oid", "[", "'log_risk_free_1d'", "]", "=", "np", ".", "log", "(", "(", "euro_oid", "[", "'yield'", "]", "/", "365", ")", "+", "1", ")", "\n", "return", "euro_oid", ".", "drop", "(", "labels", "=", "[", "'maturity'", ",", "'yield'", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._make_exp_tail_variation_df": [[39, 41], ["cde.utils.io.load_time_series_csv"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.load_time_series_csv"], ["", "def", "_make_exp_tail_variation_df", "(", ")", ":", "\n", "  ", "return", "load_time_series_csv", "(", "EURO_TAIL_VARIATION_CSV", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._make_realized_vol_df": [[42, 45], ["cde.utils.io.load_time_series_csv"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.load_time_series_csv"], ["", "def", "_make_realized_vol_df", "(", ")", ":", "\n", "  ", "realized_vol", "=", "load_time_series_csv", "(", "REALIZED_VOL_CSV", ")", "\n", "return", "realized_vol", ".", "loc", "[", ":", ",", "[", "'RealizedVariation'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._make_riskneutral_df": [[46, 70], ["cde.utils.io.load_time_series_csv", "riskteural_measures.dropna.dropna", "pandas.DataFrame", "list", "set", "dict", "dict.update", "interpolated_df.append.append", "zip", "pandas.DataFrame", "scipy.interpolate.InterpolatedUnivariateSpline", "numpy.array", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.load_time_series_csv"], ["", "def", "_make_riskneutral_df", "(", "time_horizon", ")", ":", "\n", "  ", "cols_of_interest", "=", "[", "'bakshiSkew'", ",", "'bakshiKurt'", ",", "'SVIX'", ",", "]", "\n", "riskteural_measures", "=", "load_time_series_csv", "(", "RISKNEUTRAL_CSV", ",", "delimiter", "=", "';'", ")", "\n", "riskteural_measures", "=", "riskteural_measures", "[", "[", "'daystomaturity'", "]", "+", "cols_of_interest", "]", "\n", "riskteural_measures", "=", "riskteural_measures", ".", "dropna", "(", ")", "\n", "interpolated_df", "=", "pd", ".", "DataFrame", "(", ")", "\n", "for", "date", "in", "list", "(", "set", "(", "riskteural_measures", ".", "index", ")", ")", ":", "\n", "# filter all row for respective date", "\n", "    ", "riskneutral_measures_per_day", "=", "riskteural_measures", ".", "ix", "[", "date", "]", "\n", "\n", "# filer out all option-implied measures with computed based on a maturity of less than 7 days", "\n", "riskneutral_measures_per_day", "=", "riskneutral_measures_per_day", "[", "riskneutral_measures_per_day", "[", "'daystomaturity'", "]", ">", "7", "]", "\n", "\n", "# interpolate / extrapolate to get estimate for desired time_horizon", "\n", "interpolated_values", "=", "[", "InterpolatedUnivariateSpline", "(", "np", ".", "array", "(", "riskneutral_measures_per_day", "[", "'daystomaturity'", "]", ")", ",", "\n", "np", ".", "asarray", "(", "riskneutral_measures_per_day", "[", "col_of_interest", "]", ")", ",", "\n", "k", "=", "1", ")", "(", "time_horizon", ")", "for", "col_of_interest", "in", "cols_of_interest", "]", "\n", "\n", "# create df with estimated option-implied risk measures", "\n", "update_dict", "=", "dict", "(", "zip", "(", "cols_of_interest", ",", "interpolated_values", ")", ")", "\n", "update_dict", ".", "update", "(", "{", "'daystomaturity'", ":", "time_horizon", "}", ")", "\n", "interpolated_df", "=", "interpolated_df", ".", "append", "(", "pd", ".", "DataFrame", "(", "update_dict", ",", "index", "=", "[", "date", "]", ")", ")", "\n", "", "del", "interpolated_df", "[", "'daystomaturity'", "]", "\n", "return", "interpolated_df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._make_variance_risk_premium_df": [[71, 73], ["cde.utils.io.load_time_series_csv"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.load_time_series_csv"], ["", "def", "_make_variance_risk_premium_df", "(", ")", ":", "\n", "  ", "return", "load_time_series_csv", "(", "VRP_CSV", ",", "delimiter", "=", "';'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._make_fama_french_df": [[74, 77], ["cde.utils.io.load_time_series_csv"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.load_time_series_csv"], ["", "def", "_make_fama_french_df", "(", ")", ":", "\n", "  ", "fama_french_factors", "=", "load_time_series_csv", "(", "FAMA_FRENCH_CSV", ",", "time_format", "=", "\"%Y%m%d\"", ")", "\n", "return", "fama_french_factors", ".", "loc", "[", ":", ",", "[", "'Mkt-RF'", ",", "'SMB'", ",", "'HML'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._make_fama_french_mom_df": [[78, 80], ["cde.utils.io.load_time_series_csv"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.utils.io.load_time_series_csv"], ["", "def", "_make_fama_french_mom_df", "(", ")", ":", "\n", "  ", "return", "load_time_series_csv", "(", "FAMA_FRENCH_MOMENTUM_CSV", ",", "time_format", "=", "\"%Y%m%d\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._compute_frama_french_factor_risk": [[81, 87], ["set", "set", "df[].rolling().sum", "df[].rolling"], "function", ["None"], ["", "def", "_compute_frama_french_factor_risk", "(", "df", ",", "time_steps", ")", ":", "\n", "  ", "assert", "set", "(", "[", "'WML'", ",", "\"Mkt-RF\"", ",", "'SMB'", ",", "'HML'", "]", ")", "<=", "set", "(", "df", ".", "columns", ")", "\n", "for", "ts", "in", "time_steps", ":", "\n", "    ", "for", "factor", "in", "[", "'WML'", ",", "\"Mkt-RF\"", ",", "'SMB'", ",", "'HML'", "]", ":", "\n", "      ", "df", "[", "factor", "+", "'_risk_%id'", "%", "ts", "]", "=", "df", "[", "factor", "]", ".", "rolling", "(", "ts", ")", ".", "sum", "(", ")", "\n", "", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset.make_overall_eurostoxx_df": [[90, 105], ["load_dataset._make_return_df", "load_dataset._make_risk_free_df", "load_dataset._make_realized_vol_df", "load_dataset._make_riskneutral_df", "load_dataset._make_fama_french_df", "load_dataset._make_fama_french_mom_df", "_make_return_df.join", "_compute_frama_french_factor_risk.join", "_compute_frama_french_factor_risk.join", "_compute_frama_french_factor_risk.join", "_compute_frama_french_factor_risk.join", "load_dataset._compute_frama_french_factor_risk"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._make_return_df", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._make_risk_free_df", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._make_realized_vol_df", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._make_riskneutral_df", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._make_fama_french_df", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._make_fama_french_mom_df", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset._compute_frama_french_factor_risk"], ["def", "make_overall_eurostoxx_df", "(", "return_period", "=", "1", ")", ":", "\n", "  ", "eurostoxx_returns", "=", "_make_return_df", "(", "return_periods", "=", "[", "return_period", "]", ")", "\n", "riskfree", "=", "_make_risk_free_df", "(", ")", "\n", "realized_vol", "=", "_make_realized_vol_df", "(", ")", "\n", "riskneutral_measures", "=", "_make_riskneutral_df", "(", "time_horizon", "=", "30", ")", "\n", "fama_french", "=", "_make_fama_french_df", "(", ")", "\n", "fama_french_mom", "=", "_make_fama_french_mom_df", "(", ")", "\n", "\n", "df", "=", "eurostoxx_returns", ".", "join", "(", "riskfree", ",", "how", "=", "'inner'", ")", "\n", "df", "=", "df", ".", "join", "(", "realized_vol", ",", "how", "=", "'inner'", ")", "\n", "df", "=", "df", ".", "join", "(", "riskneutral_measures", ",", "how", "=", "'inner'", ")", "\n", "df", "=", "df", ".", "join", "(", "fama_french", ",", "how", "=", "'inner'", ")", "\n", "df", "=", "df", ".", "join", "(", "fama_french_mom", ",", "how", "=", "'inner'", ")", "# add WML (winner-minus-looser) factor", "\n", "df", "=", "_compute_frama_french_factor_risk", "(", "df", ",", "[", "10", "]", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset.target_feature_split": [[106, 123], ["numpy.array", "numpy.array", "df.dropna.dropna", "print"], "function", ["None"], ["", "def", "target_feature_split", "(", "df", ",", "target_col", ",", "filter_nan", "=", "True", ",", "return_features", "=", "False", ")", ":", "\n", "  ", "assert", "target_col", "in", "df", ".", "columns", "\n", "\n", "if", "filter_nan", ":", "\n", "    ", "nrows", "=", "df", ".", "shape", "[", "0", "]", "\n", "df", "=", "df", ".", "dropna", "(", ")", "\n", "print", "(", "\"Dropping %i rows from frame\"", "%", "(", "nrows", "-", "df", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "Y", "=", "np", ".", "array", "(", "df", "[", "target_col", "]", ")", "\n", "X", "=", "np", ".", "array", "(", "df", ".", "loc", "[", ":", ",", "df", ".", "columns", "!=", "target_col", "]", ")", "\n", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "Y", ".", "shape", "[", "0", "]", "\n", "if", "return_features", ":", "\n", "    ", "features", "=", "df", ".", "columns", "[", "df", ".", "columns", "!=", "target_col", "]", "\n", "return", "X", ",", "Y", ",", "features", "\n", "", "else", ":", "\n", "     ", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.fit_density.pca_comp": [[9, 12], ["sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform"], "function", ["None"], ["def", "pca_comp", "(", "X", ",", "n_components", "=", "4", ")", ":", "\n", "  ", "pca", "=", "PCA", "(", "n_components", "=", "n_components", ")", "\n", "return", "pca", ".", "fit_transform", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.fit_density.pca_var_explained": [[13, 17], ["sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit", "numpy.cumsum"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit"], ["", "def", "pca_var_explained", "(", "X", ")", ":", "\n", "  ", "pca", "=", "PCA", "(", ")", "\n", "pca", ".", "fit", "(", "X", ")", "\n", "return", "np", ".", "cumsum", "(", "pca", ".", "explained_variance_ratio_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.fit_density.main": [[19, 36], ["cde.evaluation.eurostoxx_eval.load_dataset.make_overall_eurostoxx_df", "cde.evaluation.eurostoxx_eval.load_dataset.target_feature_split", "cde.density_estimator.MDN.MixtureDensityNetwork", "cde.density_estimator.MDN.MixtureDensityNetwork.fit", "cde.density_estimator.MDN.MixtureDensityNetwork.plot2d", "numpy.array", "numpy.array", "fit_density.pca_comp", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset.make_overall_eurostoxx_df", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.load_dataset.target_feature_split", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.density_estimator.NF.NormalizingFlowEstimator.fit", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.cde.BaseConditionalDensity.ConditionalDensity.plot2d", "home.repos.pwc.inspect_result.freelunchtheorem_Conditional_Density_Estimation.eurostoxx_eval.fit_density.pca_comp"], ["", "def", "main", "(", ")", ":", "\n", "# load data", "\n", "  ", "df", "=", "make_overall_eurostoxx_df", "(", ")", "\n", "X", ",", "Y", "=", "target_feature_split", "(", "df", ",", "'log_ret_1'", ",", "filter_nan", "=", "True", ")", "\n", "X", ",", "Y", "=", "np", ".", "array", "(", "X", ")", ",", "np", ".", "array", "(", "Y", ")", "\n", "\n", "if", "PCA_FEATURES", ":", "\n", "    ", "X", "=", "pca_comp", "(", "X", ",", "n_components", "=", "4", ")", "\n", "\n", "\n", "", "ndim_x", ",", "ndim_y", "=", "X", ".", "shape", "[", "1", "]", ",", "1", "\n", "\n", "mdn", "=", "MixtureDensityNetwork", "(", "'mdn_empirical_no_pca'", ",", "ndim_x", ",", "ndim_y", ",", "n_centers", "=", "20", ",", "n_training_epochs", "=", "500", ",", "\n", "random_seed", "=", "22", ",", "x_noise_std", "=", "0.2", ",", "y_noise_std", "=", "0.1", ")", "\n", "mdn", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "mdn", ".", "plot2d", "(", "x_cond", "=", "[", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", "]", ",", "ylim", "=", "(", "-", "0.02", ",", "0.02", ")", ")", "\n", "\n"]]}