{"home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC SDE UCF101.singular_value_clip": [[23, 31], ["torch.no_grad", "torch.no_grad", "torch.linalg.svd", "torch.linalg.svd", "len", "w.reshape.reshape", "torch.diag", "torch.diag"], "function", ["None"], ["def", "singular_value_clip", "(", "w", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dim", "=", "w", ".", "shape", "\n", "if", "len", "(", "dim", ")", ">", "2", ":", "\n", "            ", "w", "=", "w", ".", "reshape", "(", "dim", "[", "0", "]", ",", "-", "1", ")", "\n", "", "u", ",", "s", ",", "v", "=", "torch", ".", "linalg", ".", "svd", "(", "w", ",", "full_matrices", "=", "False", ")", "\n", "s", "[", "s", ">", "1", "]", "=", "1", "\n", "return", "(", "u", "@", "torch", ".", "diag", "(", "s", ")", "@", "v", ")", ".", "view", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC SDE UCF101.genSamples": [[33, 50], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "g().cpu().detach().numpy", "range", "g().cpu().detach", "g().cpu", "g", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.g"], ["", "", "def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", "(", "torch", ".", "rand", "(", "(", "n", "**", "2", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC SDE UCF101.train": [[53, 145], ["ucf101.UCF101DatasetTGAN.UCF101", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "tgan SVC SDE UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "test", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "def", "dataGen", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "dg", "=", "dataGen", "(", ")", "\n", "# gen model", "\n", "dis", "=", "VideoDiscriminator", "(", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGeneratorSDE", "(", "linear", "=", "True", ")", ".", "cuda", "(", ")", "\n", "disOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "dis", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "\n", "# resume training", "\n", "state_dicts", "=", "torch", ".", "load", "(", "f'checkpoints/{path}/state_normal16000.ckpt'", ")", "\n", "start_epoch", "=", "state_dicts", "[", "'epoch'", "]", "+", "1", "\n", "\n", "gen", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "0", "]", ")", "\n", "dis", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "1", "]", ")", "\n", "genOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "0", "]", ")", "\n", "disOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "1", "]", ")", "\n", "# train", "\n", "# isScores = []", "\n", "isScores", "=", "list", "(", "np", ".", "load", "(", "'epoch_is/tgan_svc_sde_inception.npy'", ")", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "        ", "assert", "gen", ".", "training", "\n", "# discriminator", "\n", "disOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "dg", ")", ".", "cuda", "(", ")", "\n", "real", "=", "real", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", "=", "dis", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "", "pf", "=", "dis", "(", "fake", ")", "\n", "# dis_loss = -torch.mean(torch.log(pr) + torch.log(1-pf))", "\n", "dis_loss", "=", "torch", ".", "mean", "(", "-", "pr", ")", "+", "torch", ".", "mean", "(", "pf", ")", "\n", "dis_loss", ".", "backward", "(", ")", "\n", "disOpt", ".", "step", "(", ")", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "pf", "=", "dis", "(", "fake", ")", "\n", "# gen_loss = -torch.mean(torch.log(pf))", "\n", "gen_loss", "=", "torch", ".", "mean", "(", "-", "pf", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "# log results and clip svds", "\n", "if", "epoch", "%", "5", "==", "0", ":", "\n", "            ", "for", "module", "in", "list", "(", "dis", ".", "model3d", ".", "children", "(", ")", ")", "+", "[", "dis", ".", "conv2d", "]", ":", "\n", "# discriminator only contains Conv3d, BatchNorm3d, and ReLU", "\n", "                ", "if", "type", "(", "module", ")", "==", "nn", ".", "Conv3d", "or", "type", "(", "module", ")", "==", "nn", ".", "Conv2d", ":", "\n", "                    ", "module", ".", "weight", ".", "data", "=", "singular_value_clip", "(", "module", ".", "weight", ")", "\n", "", "elif", "type", "(", "module", ")", "==", "nn", ".", "BatchNorm3d", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "gamma", "=", "module", ".", "weight", ".", "data", "\n", "std", "=", "torch", ".", "sqrt", "(", "module", ".", "running_var", ")", "\n", "gamma", "[", "gamma", ">", "std", "]", "=", "std", "[", "gamma", ">", "std", "]", "\n", "gamma", "[", "gamma", "<", "0.01", "*", "std", "]", "=", "0.01", "*", "std", "[", "gamma", "<", "0.01", "*", "std", "]", "\n", "module", ".", "weight", ".", "data", "=", "gamma", "\n", "\n", "", "", "", "if", "epoch", "%", "100", "==", "0", ":", "\n", "                ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                    ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tgan_svc_sde_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tgan_svc_sde_inception.npy'", ",", "isScores", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE deep UCF101.genSamples": [[19, 36], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "[].cpu().detach().numpy", "range", "[].cpu().detach", "[].cpu", "g.sample_videos"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_videos"], ["def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", ".", "sample_videos", "(", "n", "**", "2", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE deep UCF101.train": [[39, 153], ["ucf101.UCF101DatasetTGAN.UCF101", "ucf101.UCF101DatasetTGAN.UCF101Images", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "MoCoGAN ODE deep UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "videoDataset", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "imgDataset", "=", "UCF101Images", "(", "dset", ",", "conf", ")", "\n", "videoLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "videoDataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "imgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "imgDataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "\n", "def", "dataGen", "(", "loader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "vidGen", "=", "dataGen", "(", "videoLoader", ")", "\n", "imgGen", "=", "dataGen", "(", "imgLoader", ")", "\n", "# gen model", "\n", "disVid", "=", "VideoDiscriminator", "(", "3", ")", ".", "cuda", "(", ")", "\n", "disImg", "=", "PatchImageDiscriminator", "(", "3", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGenerator", "(", "3", ",", "50", ",", "0", ",", "16", ",", "16", ",", "ode_fn", "=", "ODEFuncDeep", ",", "dim_hidden", "=", "16", ")", ".", "cuda", "(", ")", "\n", "\n", "# init optimizers and loss", "\n", "disVidOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "disVid", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "disImgOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "disImg", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "# resume training", "\n", "state_dicts", "=", "torch", ".", "load", "(", "f'checkpoints/{path}/state_normal94000.ckpt'", ")", "\n", "start_epoch", "=", "state_dicts", "[", "'epoch'", "]", "+", "1", "\n", "\n", "gen", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "0", "]", ")", "\n", "disVid", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "1", "]", ")", "\n", "disImg", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "2", "]", ")", "\n", "genOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "0", "]", ")", "\n", "disVidOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "1", "]", ")", "\n", "disImgOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "2", "]", ")", "\n", "\n", "# train", "\n", "# isScores = []", "\n", "isScores", "=", "list", "(", "np", ".", "load", "(", "'epoch_is/mocogan_ode_deep_inception.npy'", ")", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "# image discriminator", "\n", "        ", "disImgOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "imgGen", ")", ".", "cuda", "(", ")", "\n", "\n", "pr", ",", "_", "=", "disImg", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", ",", "_", "=", "gen", ".", "sample_images", "(", "batch_size", ")", "\n", "", "pf", ",", "_", "=", "disImg", "(", "fake", ")", "\n", "pr_labels", "=", "torch", ".", "ones_like", "(", "pr", ")", "\n", "pf_labels", "=", "torch", ".", "zeros_like", "(", "pf", ")", "\n", "dis_img_loss", "=", "loss", "(", "pr", ",", "pr_labels", ")", "+", "loss", "(", "pf", ",", "pf_labels", ")", "\n", "dis_img_loss", ".", "backward", "(", ")", "\n", "disImgOpt", ".", "step", "(", ")", "\n", "\n", "# video discriminator", "\n", "disVidOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "vidGen", ")", ".", "cuda", "(", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", ",", "_", "=", "disVid", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", ",", "_", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "\n", "", "pf", ",", "_", "=", "disVid", "(", "fake", ")", "\n", "pr_labels", "=", "torch", ".", "ones_like", "(", "pr", ")", "\n", "pf_labels", "=", "torch", ".", "zeros_like", "(", "pf", ")", "\n", "dis_vid_loss", "=", "loss", "(", "pr", ",", "pr_labels", ")", "+", "loss", "(", "pf", ",", "pf_labels", ")", "\n", "dis_vid_loss", ".", "backward", "(", ")", "\n", "disVidOpt", ".", "step", "(", ")", "\n", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fakeVid", ",", "_", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "\n", "fakeImg", ",", "_", "=", "gen", ".", "sample_images", "(", "batch_size", ")", "\n", "pf_vid", ",", "_", "=", "disVid", "(", "fakeVid", ")", "\n", "pf_img", ",", "_", "=", "disImg", "(", "fakeImg", ")", "\n", "pf_vid_labels", "=", "torch", ".", "ones_like", "(", "pf_vid", ")", "\n", "pf_img_labels", "=", "torch", ".", "ones_like", "(", "pf_img", ")", "\n", "gen_loss", "=", "loss", "(", "pf_vid", ",", "pf_vid_labels", ")", "+", "loss", "(", "pf_img", ",", "pf_img_labels", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "# print('Epoch', epoch, 'DisImg', dis_img_loss.item(), 'DisVid', dis_vid_loss.item(), 'Gen', gen_loss.item())", "\n", "if", "epoch", "%", "100", "==", "0", ":", "\n", "            ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "test", "=", "False", ",", "\n", "moco", "=", "True", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/mocogan_ode_deep_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "disVid", ".", "state_dict", "(", ")", ",", "\n", "disImg", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disVidOpt", ".", "state_dict", "(", ")", ",", "\n", "disImgOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "disVid", ".", "state_dict", "(", ")", ",", "\n", "disImg", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disVidOpt", ".", "state_dict", "(", ")", ",", "\n", "disImgOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "test", "=", "False", ",", "\n", "moco", "=", "True", ")", ")", "\n", "np", ".", "save", "(", "'epoch_is/mocogan_ode_deep_inception.npy'", ",", "isScores", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE 3 UCF101.singular_value_clip": [[23, 31], ["torch.no_grad", "torch.no_grad", "torch.linalg.svd", "torch.linalg.svd", "len", "w.reshape.reshape", "torch.diag", "torch.diag"], "function", ["None"], ["def", "singular_value_clip", "(", "w", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dim", "=", "w", ".", "shape", "\n", "if", "len", "(", "dim", ")", ">", "2", ":", "\n", "            ", "w", "=", "w", ".", "reshape", "(", "dim", "[", "0", "]", ",", "-", "1", ")", "\n", "", "u", ",", "s", ",", "v", "=", "torch", ".", "linalg", ".", "svd", "(", "w", ",", "full_matrices", "=", "False", ")", "\n", "s", "[", "s", ">", "1", "]", "=", "1", "\n", "return", "(", "u", "@", "torch", ".", "diag", "(", "s", ")", "@", "v", ")", ".", "view", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE 3 UCF101.genSamples": [[33, 50], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "g().cpu().detach().numpy", "range", "g().cpu().detach", "g().cpu", "g", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.g"], ["", "", "def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", "(", "torch", ".", "rand", "(", "(", "n", "**", "2", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE 3 UCF101.train": [[53, 145], ["ucf101.UCF101DatasetTGAN.UCF101", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "tgan SVC ODE 3 UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "test", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "def", "dataGen", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "dg", "=", "dataGen", "(", ")", "\n", "# gen model", "\n", "dis", "=", "VideoDiscriminator", "(", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGeneratorNOODE", "(", "linear", "=", "True", ",", "order", "=", "3", ")", ".", "cuda", "(", ")", "\n", "disOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "dis", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "\n", "# resume training", "\n", "state_dicts", "=", "torch", ".", "load", "(", "f'checkpoints/{path}/state_normal56000.ckpt'", ")", "\n", "start_epoch", "=", "state_dicts", "[", "'epoch'", "]", "+", "1", "\n", "\n", "gen", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "0", "]", ")", "\n", "dis", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "1", "]", ")", "\n", "genOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "0", "]", ")", "\n", "disOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "1", "]", ")", "\n", "train", "\n", "isScores", "=", "[", "]", "\n", "# isScores = list(np.load('epoch_is/tgan_svc_ode_deep_inception.npy'))", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "# discriminator", "\n", "        ", "disOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "dg", ")", ".", "cuda", "(", ")", "\n", "real", "=", "real", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", "=", "dis", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "", "pf", "=", "dis", "(", "fake", ")", "\n", "# dis_loss = -torch.mean(torch.log(pr) + torch.log(1-pf))", "\n", "dis_loss", "=", "torch", ".", "mean", "(", "-", "pr", ")", "+", "torch", ".", "mean", "(", "pf", ")", "\n", "dis_loss", ".", "backward", "(", ")", "\n", "disOpt", ".", "step", "(", ")", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "pf", "=", "dis", "(", "fake", ")", "\n", "# gen_loss = -torch.mean(torch.log(pf))", "\n", "gen_loss", "=", "torch", ".", "mean", "(", "-", "pf", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "# log results and clip svds", "\n", "# print('Epoch', epoch, 'Dis', dis_loss.item(), 'Gen', gen_loss.item())", "\n", "if", "epoch", "%", "5", "==", "0", ":", "\n", "            ", "for", "module", "in", "list", "(", "dis", ".", "model3d", ".", "children", "(", ")", ")", "+", "[", "dis", ".", "conv2d", "]", ":", "\n", "# discriminator only contains Conv3d, BatchNorm3d, and ReLU", "\n", "                ", "if", "type", "(", "module", ")", "==", "nn", ".", "Conv3d", "or", "type", "(", "module", ")", "==", "nn", ".", "Conv2d", ":", "\n", "                    ", "module", ".", "weight", ".", "data", "=", "singular_value_clip", "(", "module", ".", "weight", ")", "\n", "", "elif", "type", "(", "module", ")", "==", "nn", ".", "BatchNorm3d", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "gamma", "=", "module", ".", "weight", ".", "data", "\n", "std", "=", "torch", ".", "sqrt", "(", "module", ".", "running_var", ")", "\n", "gamma", "[", "gamma", ">", "std", "]", "=", "std", "[", "gamma", ">", "std", "]", "\n", "gamma", "[", "gamma", "<", "0.01", "*", "std", "]", "=", "0.01", "*", "std", "[", "gamma", "<", "0.01", "*", "std", "]", "\n", "module", ".", "weight", ".", "data", "=", "gamma", "\n", "\n", "", "", "", "if", "epoch", "%", "100", "==", "0", ":", "\n", "                ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                    ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tgan_svc_ode_3_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tgan_svc_ode_3_inception.npy'", ",", "isScores", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tganv2_ode.genSamples": [[25, 38], ["numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "g().cpu().detach().numpy", "range", "g().cpu().detach", "g().cpu", "g", "torch.rand().cuda", "torch.rand().cuda", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.g"], ["def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", "(", "torch", ".", "rand", "(", "(", "n", "**", "2", ",", "256", ")", ")", ".", "cuda", "(", ")", "*", "2", "-", "1", ",", "\n", "test", "=", "True", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "192", "*", "n", ",", "192", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "192", "*", "j", ":", "192", "*", "(", "j", "+", "1", ")", ",", "192", "*", "k", ":", "192", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "'video_samples/'", "+", "path", "+", "f'/gensamples_id{e}.gif'", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tganv2_ode.subsample_real": [[40, 43], ["numpy.random.randint", "min"], "function", ["None"], ["", "def", "subsample_real", "(", "h", ",", "frames", "=", "4", ")", ":", "\n", "    ", "h", "=", "h", "[", ":", ",", "np", ".", "random", ".", "randint", "(", "min", "(", "frames", ",", "h", ".", "shape", "[", "1", "]", ")", ")", ":", ":", "frames", "]", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tganv2_ode.full_subsample_real": [[45, 57], ["range", "range", "range", "out.append", "out.append", "torch.avg_pool3d", "tganv2_ode.subsample_real"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tganv2 UCF101.subsample_real"], ["", "def", "full_subsample_real", "(", "h", ",", "frames", "=", "4", ")", ":", "\n", "    ", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "if", "i", ":", "\n", "            ", "out", ".", "append", "(", "subsample_real", "(", "out", "[", "i", "-", "1", "]", ",", "frames", "=", "frames", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", ".", "append", "(", "h", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "3", "-", "i", ")", ":", "\n", "            ", "out", "[", "i", "]", "=", "F", ".", "avg_pool3d", "(", "out", "[", "i", "]", ",", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tganv2_ode.zero_centered_gp": [[59, 65], ["torch.autograd.grad", "torch.autograd.grad", "sum", "torch.ones_like", "torch.ones_like", "torch.sum", "torch.sum", "torch.square", "torch.square"], "function", ["None"], ["", "def", "zero_centered_gp", "(", "real_data", ",", "pr", ")", ":", "\n", "    ", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "pr", ",", "inputs", "=", "real_data", ",", "\n", "grad_outputs", "=", "torch", ".", "ones_like", "(", "pr", ")", ",", "\n", "retain_graph", "=", "True", ",", "create_graph", "=", "True", ")", "\n", "\n", "return", "sum", "(", "[", "torch", ".", "sum", "(", "torch", ".", "square", "(", "g", ")", ")", "for", "g", "in", "gradients", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tganv2_ode.train": [[67, 163], ["ucf101.UCF101DatasetTGAN.UCF101", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "tganv2_ode.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "test", "=", "UCF101", "(", "dset", ",", "conf", ",", "img_size", "=", "192", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test", ",", "batch_size", "=", "32", ",", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "def", "dataGen", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "dg", "=", "dataGen", "(", ")", "\n", "# gen model", "\n", "dis", "=", "DisMultiResNet", "(", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "GeneratorODE", "(", ")", ".", "cuda", "(", ")", "\n", "disOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "dis", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ",", "betas", "=", "(", "0", ",", "0.9", ")", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ",", "betas", "=", "(", "0", ",", "0.9", ")", ")", "\n", "disSched", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "disOpt", ",", "lambda", "epoch", ":", "1", "-", "epoch", "/", "epochs", ")", "\n", "genSched", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "genOpt", ",", "lambda", "epoch", ":", "1", "-", "epoch", "/", "epochs", ")", "\n", "\n", "# resume training", "\n", "# state_dicts = torch.load(f'checkpoints/{path}/state_normal62000.ckpt')", "\n", "# start_epoch = 62001", "\n", "\n", "# gen.load_state_dict(state_dicts['model_state_dict'][0])", "\n", "# dis.load_state_dict(state_dicts['model_state_dict'][1])", "\n", "# genOpt.load_state_dict(state_dicts['optimizer_state_dict'][0])", "\n", "# disOpt.load_state_dict(state_dicts['optimizer_state_dict'][1])", "\n", "# genSched.load_state_dict(state_dicts['optimizer_schedule_dict'][0])", "\n", "# disSched.load_state_dict(state_dicts['optimizer_schedule_dict'][1])", "\n", "\n", "# train", "\n", "# note on loss function: within the current github repo they", "\n", "# employ softplus linear loss, if the normal cross entropy", "\n", "# is desired one may simply change the comments", "\n", "# isScores = []", "\n", "isScores", "=", "list", "(", "np", ".", "load", "(", "'epoch_is/tganv2_ode_lin.npy'", ")", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "# discriminator", "\n", "        ", "disOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "dg", ")", "\n", "real", "=", "real", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "real", "=", "full_subsample_real", "(", "real", ")", "\n", "for", "i", "in", "real", ":", "\n", "            ", "i", ".", "requires_grad", "=", "True", "\n", "\n", "", "pr", "=", "dis", "(", "real", ")", "\n", "# dis_loss = zero_centered_gp(real, pr) * lambda_val", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "z", "=", "torch", ".", "rand", "(", "(", "batch_size", ",", "256", ")", ")", ".", "cuda", "(", ")", "\n", "fake", "=", "gen", "(", "z", "*", "2", "-", "1", ")", "\n", "", "pf", "=", "dis", "(", "fake", ")", "\n", "assert", "pr", ".", "device", "==", "real", "[", "0", "]", ".", "device", "\n", "# dis_loss = -torch.mean(torch.log(pr) + torch.log(1-pf))", "\n", "dis_loss", "=", "zero_centered_gp", "(", "real", ",", "pr", ")", "*", "lambda_val", "+", "torch", ".", "mean", "(", "F", ".", "softplus", "(", "-", "pr", ")", ")", "+", "torch", ".", "mean", "(", "F", ".", "softplus", "(", "pf", ")", ")", "\n", "dis_loss", ".", "backward", "(", ")", "\n", "disOpt", ".", "step", "(", ")", "\n", "disSched", ".", "step", "(", ")", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "256", ")", ")", ".", "cuda", "(", ")", "*", "2", "-", "1", ")", "\n", "pf", "=", "dis", "(", "fake", ")", "\n", "# gen_loss = -torch.mean(torch.log(pf))", "\n", "gen_loss", "=", "torch", ".", "mean", "(", "F", ".", "softplus", "(", "-", "pf", ")", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "genSched", ".", "step", "(", ")", "\n", "# log results", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "            ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tganv2_ode_lin.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_schedule_dict'", ":", "[", "genSched", ".", "state_dict", "(", ")", ",", "\n", "disSched", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tganv2_ode_lin.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_schedule_dict'", ":", "[", "genSched", ".", "state_dict", "(", ")", ",", "\n", "disSched", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE 2 UCF101.singular_value_clip": [[23, 31], ["torch.no_grad", "torch.no_grad", "torch.linalg.svd", "torch.linalg.svd", "len", "w.reshape.reshape", "torch.diag", "torch.diag"], "function", ["None"], ["def", "singular_value_clip", "(", "w", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dim", "=", "w", ".", "shape", "\n", "if", "len", "(", "dim", ")", ">", "2", ":", "\n", "            ", "w", "=", "w", ".", "reshape", "(", "dim", "[", "0", "]", ",", "-", "1", ")", "\n", "", "u", ",", "s", ",", "v", "=", "torch", ".", "linalg", ".", "svd", "(", "w", ",", "full_matrices", "=", "False", ")", "\n", "s", "[", "s", ">", "1", "]", "=", "1", "\n", "return", "(", "u", "@", "torch", ".", "diag", "(", "s", ")", "@", "v", ")", ".", "view", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE 2 UCF101.genSamples": [[33, 50], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "g().cpu().detach().numpy", "range", "g().cpu().detach", "g().cpu", "g", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.g"], ["", "", "def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", "(", "torch", ".", "rand", "(", "(", "n", "**", "2", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE 2 UCF101.train": [[53, 145], ["ucf101.UCF101DatasetTGAN.UCF101", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "tgan SVC ODE 2 UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "test", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "def", "dataGen", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "dg", "=", "dataGen", "(", ")", "\n", "# gen model", "\n", "dis", "=", "VideoDiscriminator", "(", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGeneratorNOODE", "(", "linear", "=", "True", ",", "order", "=", "2", ")", ".", "cuda", "(", ")", "\n", "disOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "dis", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "\n", "# resume training", "\n", "# state_dicts = torch.load(f'checkpoints/{path}/state_normal93000.ckpt')", "\n", "# start_epoch = state_dicts['epoch'] + 1", "\n", "\n", "# gen.load_state_dict(state_dicts['model_state_dict'][0])", "\n", "# dis.load_state_dict(state_dicts['model_state_dict'][1])", "\n", "# genOpt.load_state_dict(state_dicts['optimizer_state_dict'][0])", "\n", "# disOpt.load_state_dict(state_dicts['optimizer_state_dict'][1])", "\n", "# train", "\n", "isScores", "=", "[", "]", "\n", "# isScores = list(np.load('epoch_is/tgan_svc_ode_deep_inception.npy'))", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "# discriminator", "\n", "        ", "disOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "dg", ")", ".", "cuda", "(", ")", "\n", "real", "=", "real", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", "=", "dis", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "", "pf", "=", "dis", "(", "fake", ")", "\n", "# dis_loss = -torch.mean(torch.log(pr) + torch.log(1-pf))", "\n", "dis_loss", "=", "torch", ".", "mean", "(", "-", "pr", ")", "+", "torch", ".", "mean", "(", "pf", ")", "\n", "dis_loss", ".", "backward", "(", ")", "\n", "disOpt", ".", "step", "(", ")", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "pf", "=", "dis", "(", "fake", ")", "\n", "# gen_loss = -torch.mean(torch.log(pf))", "\n", "gen_loss", "=", "torch", ".", "mean", "(", "-", "pf", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "# log results and clip svds", "\n", "# print('Epoch', epoch, 'Dis', dis_loss.item(), 'Gen', gen_loss.item())", "\n", "if", "epoch", "%", "5", "==", "0", ":", "\n", "            ", "for", "module", "in", "list", "(", "dis", ".", "model3d", ".", "children", "(", ")", ")", "+", "[", "dis", ".", "conv2d", "]", ":", "\n", "# discriminator only contains Conv3d, BatchNorm3d, and ReLU", "\n", "                ", "if", "type", "(", "module", ")", "==", "nn", ".", "Conv3d", "or", "type", "(", "module", ")", "==", "nn", ".", "Conv2d", ":", "\n", "                    ", "module", ".", "weight", ".", "data", "=", "singular_value_clip", "(", "module", ".", "weight", ")", "\n", "", "elif", "type", "(", "module", ")", "==", "nn", ".", "BatchNorm3d", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "gamma", "=", "module", ".", "weight", ".", "data", "\n", "std", "=", "torch", ".", "sqrt", "(", "module", ".", "running_var", ")", "\n", "gamma", "[", "gamma", ">", "std", "]", "=", "std", "[", "gamma", ">", "std", "]", "\n", "gamma", "[", "gamma", "<", "0.01", "*", "std", "]", "=", "0.01", "*", "std", "[", "gamma", "<", "0.01", "*", "std", "]", "\n", "module", ".", "weight", ".", "data", "=", "gamma", "\n", "\n", "", "", "", "if", "epoch", "%", "100", "==", "0", ":", "\n", "                ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                    ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tgan_svc_ode_2_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tgan_svc_ode_2_inception.npy'", ",", "isScores", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tganv2 UCF101.genSamples": [[25, 38], ["numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "g().cpu().detach().numpy", "range", "g().cpu().detach", "numpy.concatenate", "g().cpu", "g", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.g"], ["def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", "(", "torch", ".", "rand", "(", "(", "n", "**", "2", ",", "256", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ",", "\n", "test", "=", "True", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "out", "=", "np", ".", "zeros", "(", "(", "1", ",", "20", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "192", "*", "j", ":", "192", "*", "(", "j", "+", "1", ")", ",", "192", "*", "k", ":", "192", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "np", ".", "concatenate", "(", "[", "out", ",", "out", ",", "out", "]", ",", "axis", "=", "3", ")", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "f'tganv2moving/gensamples_id{e}.gif'", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tganv2 UCF101.subsample_real": [[40, 43], ["numpy.random.randint", "min"], "function", ["None"], ["", "def", "subsample_real", "(", "h", ",", "frames", "=", "4", ")", ":", "\n", "    ", "h", "=", "h", "[", ":", ",", "np", ".", "random", ".", "randint", "(", "min", "(", "frames", ",", "h", ".", "shape", "[", "1", "]", ")", ")", ":", ":", "frames", "]", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tganv2 UCF101.full_subsample_real": [[45, 57], ["range", "range", "range", "out.append", "out.append", "torch.avg_pool3d", "tganv2 UCF101.subsample_real"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tganv2 UCF101.subsample_real"], ["", "def", "full_subsample_real", "(", "h", ",", "frames", "=", "4", ")", ":", "\n", "    ", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "if", "i", ":", "\n", "            ", "out", ".", "append", "(", "subsample_real", "(", "out", "[", "i", "-", "1", "]", ",", "frames", "=", "frames", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", ".", "append", "(", "h", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "3", "-", "i", ")", ":", "\n", "            ", "out", "[", "i", "]", "=", "F", ".", "avg_pool3d", "(", "out", "[", "i", "]", ",", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tganv2 UCF101.zero_centered_gp": [[59, 65], ["torch.autograd.grad", "torch.autograd.grad", "sum", "torch.ones_like", "torch.ones_like", "torch.sum", "torch.sum", "torch.square", "torch.square"], "function", ["None"], ["", "def", "zero_centered_gp", "(", "real_data", ",", "pr", ")", ":", "\n", "    ", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "pr", ",", "inputs", "=", "real_data", ",", "\n", "grad_outputs", "=", "torch", ".", "ones_like", "(", "pr", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ")", "\n", "\n", "return", "sum", "(", "[", "torch", ".", "sum", "(", "torch", ".", "square", "(", "g", ")", ")", "for", "g", "in", "gradients", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tganv2 UCF101.train": [[67, 149], ["ucf101.UCF101DatasetTGAN.UCF101", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "tganv2 UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "test", "=", "UCF101", "(", "dset", ",", "conf", ",", "img_size", "=", "192", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test", ",", "batch_size", "=", "32", ",", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "def", "dataGen", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "dg", "=", "dataGen", "(", ")", "\n", "# gen model", "\n", "dis", "=", "DisMultiResNet", "(", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "Generator_CLSTM", "(", ")", ".", "cuda", "(", ")", "\n", "disOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "dis", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ",", "betas", "=", "(", "0", ",", "0.9", ")", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ",", "betas", "=", "(", "0", ",", "0.9", ")", ")", "\n", "disSched", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "disOpt", ",", "lambda", "epoch", ":", "1", "-", "epoch", "/", "epochs", ")", "\n", "genSched", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "genOpt", ",", "lambda", "epoch", ":", "1", "-", "epoch", "/", "epochs", ")", "\n", "\n", "# train", "\n", "# note on loss function: within the current github repo they", "\n", "# employ softplus linear loss, if the normal cross entropy", "\n", "# is desired one may simply change the comments", "\n", "isScores", "=", "[", "]", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "epochs", ")", ")", ":", "\n", "# discriminator", "\n", "        ", "disOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "dg", ")", ".", "cuda", "(", ")", "\n", "real", "=", "real", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "real", "=", "full_subsample_real", "(", "real", ")", "\n", "for", "i", "in", "real", ":", "\n", "            ", "i", ".", "requires_grad", "=", "True", "\n", "\n", "", "pr", "=", "dis", "(", "real", ")", "\n", "dis_loss", "=", "zero_centered_gp", "(", "real", ",", "pr", ")", "*", "lambda_val", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "256", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "", "pf", "=", "dis", "(", "fake", ")", "\n", "# dis_loss = -torch.mean(torch.log(pr) + torch.log(1-pf))", "\n", "dis_loss", "+=", "torch", ".", "mean", "(", "F", ".", "softplus", "(", "-", "pr", ")", ")", "+", "torch", ".", "mean", "(", "F", ".", "softplus", "(", "pf", ")", ")", "\n", "dis_loss", ".", "backward", "(", ")", "\n", "disOpt", ".", "step", "(", ")", "\n", "disSched", ".", "step", "(", ")", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "256", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "pf", "=", "dis", "(", "fake", ")", "\n", "# gen_loss = -torch.mean(torch.log(pf))", "\n", "gen_loss", "=", "torch", ".", "mean", "(", "F", ".", "softplus", "(", "-", "pf", ")", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "genSched", ".", "step", "(", ")", "\n", "# log results", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "            ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tganv2.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_schedule_dict'", ":", "[", "genSched", ".", "state_dict", "(", ")", ",", "\n", "disSched", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tganv2.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_schedule_dict'", ":", "[", "genSched", ".", "state_dict", "(", ")", ",", "\n", "disSched", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN UCF101.genSamples": [[18, 35], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "[].cpu().detach().numpy", "range", "[].cpu().detach", "[].cpu", "g.sample_videos"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_videos"], ["def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", ".", "sample_videos", "(", "n", "**", "2", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN UCF101.train": [[38, 152], ["ucf101.UCF101DatasetTGAN.UCF101", "ucf101.UCF101DatasetTGAN.UCF101Images", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "MoCoGAN UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "videoDataset", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "imgDataset", "=", "UCF101Images", "(", "dset", ",", "conf", ")", "\n", "videoLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "videoDataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "imgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "imgDataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "\n", "def", "dataGen", "(", "loader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "vidGen", "=", "dataGen", "(", "videoLoader", ")", "\n", "imgGen", "=", "dataGen", "(", "imgLoader", ")", "\n", "# gen model", "\n", "disVid", "=", "VideoDiscriminator", "(", "3", ")", ".", "cuda", "(", ")", "\n", "disImg", "=", "PatchImageDiscriminator", "(", "3", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGenerator", "(", "3", ",", "50", ",", "0", ",", "16", ",", "16", ")", ".", "cuda", "(", ")", "\n", "\n", "# init optimizers and loss", "\n", "disVidOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "disVid", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "disImgOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "disImg", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "# resume training", "\n", "state_dicts", "=", "torch", ".", "load", "(", "f'checkpoints/{path}/state_normal88000.ckpt'", ")", "\n", "start_epoch", "=", "state_dicts", "[", "'epoch'", "]", "+", "1", "\n", "\n", "gen", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "0", "]", ")", "\n", "disVid", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "1", "]", ")", "\n", "disImg", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "2", "]", ")", "\n", "genOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "0", "]", ")", "\n", "disVidOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "1", "]", ")", "\n", "disImgOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "2", "]", ")", "\n", "\n", "# train", "\n", "# isScores = []", "\n", "isScores", "=", "list", "(", "np", ".", "load", "(", "'epoch_is/mocogan_inception.npy'", ")", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "# image discriminator", "\n", "        ", "disImgOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "imgGen", ")", ".", "cuda", "(", ")", "\n", "\n", "pr", ",", "_", "=", "disImg", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", ",", "_", "=", "gen", ".", "sample_images", "(", "batch_size", ")", "\n", "", "pf", ",", "_", "=", "disImg", "(", "fake", ")", "\n", "pr_labels", "=", "torch", ".", "ones_like", "(", "pr", ")", "\n", "pf_labels", "=", "torch", ".", "zeros_like", "(", "pf", ")", "\n", "dis_img_loss", "=", "loss", "(", "pr", ",", "pr_labels", ")", "+", "loss", "(", "pf", ",", "pf_labels", ")", "\n", "dis_img_loss", ".", "backward", "(", ")", "\n", "disImgOpt", ".", "step", "(", ")", "\n", "\n", "# video discriminator", "\n", "disVidOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "vidGen", ")", ".", "cuda", "(", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", ",", "_", "=", "disVid", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", ",", "_", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "\n", "", "pf", ",", "_", "=", "disVid", "(", "fake", ")", "\n", "pr_labels", "=", "torch", ".", "ones_like", "(", "pr", ")", "\n", "pf_labels", "=", "torch", ".", "zeros_like", "(", "pf", ")", "\n", "dis_vid_loss", "=", "loss", "(", "pr", ",", "pr_labels", ")", "+", "loss", "(", "pf", ",", "pf_labels", ")", "\n", "dis_vid_loss", ".", "backward", "(", ")", "\n", "disVidOpt", ".", "step", "(", ")", "\n", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fakeVid", ",", "_", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "\n", "fakeImg", ",", "_", "=", "gen", ".", "sample_images", "(", "batch_size", ")", "\n", "pf_vid", ",", "_", "=", "disVid", "(", "fakeVid", ")", "\n", "pf_img", ",", "_", "=", "disImg", "(", "fakeImg", ")", "\n", "pf_vid_labels", "=", "torch", ".", "ones_like", "(", "pf_vid", ")", "\n", "pf_img_labels", "=", "torch", ".", "ones_like", "(", "pf_img", ")", "\n", "gen_loss", "=", "loss", "(", "pf_vid", ",", "pf_vid_labels", ")", "+", "loss", "(", "pf_img", ",", "pf_img_labels", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "# print('Epoch', epoch, 'DisImg', dis_img_loss.item(), 'DisVid', dis_vid_loss.item(), 'Gen', gen_loss.item())", "\n", "if", "epoch", "%", "100", "==", "0", ":", "\n", "            ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "test", "=", "False", ",", "\n", "moco", "=", "True", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/mocogan_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "disVid", ".", "state_dict", "(", ")", ",", "\n", "disImg", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disVidOpt", ".", "state_dict", "(", ")", ",", "\n", "disImgOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "disVid", ".", "state_dict", "(", ")", ",", "\n", "disImg", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disVidOpt", ".", "state_dict", "(", ")", ",", "\n", "disImgOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "test", "=", "False", ",", "\n", "moco", "=", "True", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/mocogan_inception.npy'", ",", "isScores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE Deep UCF101.singular_value_clip": [[19, 27], ["torch.no_grad", "torch.no_grad", "torch.linalg.svd", "torch.linalg.svd", "len", "w.reshape.reshape", "torch.diag", "torch.diag"], "function", ["None"], ["def", "singular_value_clip", "(", "w", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dim", "=", "w", ".", "shape", "\n", "if", "len", "(", "dim", ")", ">", "2", ":", "\n", "            ", "w", "=", "w", ".", "reshape", "(", "dim", "[", "0", "]", ",", "-", "1", ")", "\n", "", "u", ",", "s", ",", "v", "=", "torch", ".", "linalg", ".", "svd", "(", "w", ",", "full_matrices", "=", "False", ")", "\n", "s", "[", "s", ">", "1", "]", "=", "1", "\n", "return", "(", "u", "@", "torch", ".", "diag", "(", "s", ")", "@", "v", ")", ".", "view", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE Deep UCF101.genSamples": [[29, 46], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "g().cpu().detach().numpy", "range", "g().cpu().detach", "g().cpu", "g", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.g"], ["", "", "def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", "(", "torch", ".", "rand", "(", "(", "n", "**", "2", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE Deep UCF101.train": [[49, 141], ["ucf101.UCF101DatasetTGAN.UCF101", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "tgan SVC ODE Deep UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "test", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "def", "dataGen", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "dg", "=", "dataGen", "(", ")", "\n", "# gen model", "\n", "dis", "=", "VideoDiscriminator", "(", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGenerator", "(", "linear", "=", "True", ",", "ode_fn", "=", "ODEFuncDeep", ")", ".", "cuda", "(", ")", "\n", "disOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "dis", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "\n", "# resume training", "\n", "# state_dicts = torch.load(f'checkpoints/{path}/state_normal93000.ckpt')", "\n", "# start_epoch = state_dicts['epoch'] + 1", "\n", "\n", "# gen.load_state_dict(state_dicts['model_state_dict'][0])", "\n", "# dis.load_state_dict(state_dicts['model_state_dict'][1])", "\n", "# genOpt.load_state_dict(state_dicts['optimizer_state_dict'][0])", "\n", "# disOpt.load_state_dict(state_dicts['optimizer_state_dict'][1])", "\n", "# train", "\n", "isScores", "=", "[", "]", "\n", "# isScores = list(np.load('epoch_is/tgan_svc_ode_deep_inception.npy'))", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "# discriminator", "\n", "        ", "disOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "dg", ")", ".", "cuda", "(", ")", "\n", "real", "=", "real", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", "=", "dis", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "", "pf", "=", "dis", "(", "fake", ")", "\n", "# dis_loss = -torch.mean(torch.log(pr) + torch.log(1-pf))", "\n", "dis_loss", "=", "torch", ".", "mean", "(", "-", "pr", ")", "+", "torch", ".", "mean", "(", "pf", ")", "\n", "dis_loss", ".", "backward", "(", ")", "\n", "disOpt", ".", "step", "(", ")", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "pf", "=", "dis", "(", "fake", ")", "\n", "# gen_loss = -torch.mean(torch.log(pf))", "\n", "gen_loss", "=", "torch", ".", "mean", "(", "-", "pf", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "# log results and clip svds", "\n", "# print('Epoch', epoch, 'Dis', dis_loss.item(), 'Gen', gen_loss.item())", "\n", "if", "epoch", "%", "5", "==", "0", ":", "\n", "            ", "for", "module", "in", "list", "(", "dis", ".", "model3d", ".", "children", "(", ")", ")", "+", "[", "dis", ".", "conv2d", "]", ":", "\n", "# discriminator only contains Conv3d, BatchNorm3d, and ReLU", "\n", "                ", "if", "type", "(", "module", ")", "==", "nn", ".", "Conv3d", "or", "type", "(", "module", ")", "==", "nn", ".", "Conv2d", ":", "\n", "                    ", "module", ".", "weight", ".", "data", "=", "singular_value_clip", "(", "module", ".", "weight", ")", "\n", "", "elif", "type", "(", "module", ")", "==", "nn", ".", "BatchNorm3d", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "gamma", "=", "module", ".", "weight", ".", "data", "\n", "std", "=", "torch", ".", "sqrt", "(", "module", ".", "running_var", ")", "\n", "gamma", "[", "gamma", ">", "std", "]", "=", "std", "[", "gamma", ">", "std", "]", "\n", "gamma", "[", "gamma", "<", "0.01", "*", "std", "]", "=", "0.01", "*", "std", "[", "gamma", "<", "0.01", "*", "std", "]", "\n", "module", ".", "weight", ".", "data", "=", "gamma", "\n", "\n", "", "", "", "if", "epoch", "%", "100", "==", "0", ":", "\n", "                ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                    ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tgan_svc_ode_deep_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tgan_svc_ode_deep_inception.npy'", ",", "isScores", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE 2 UCF101.genSamples": [[23, 40], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "[].cpu().detach().numpy", "range", "[].cpu().detach", "[].cpu", "g.sample_videos"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_videos"], ["def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", ".", "sample_videos", "(", "n", "**", "2", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE 2 UCF101.train": [[43, 157], ["ucf101.UCF101DatasetTGAN.UCF101", "ucf101.UCF101DatasetTGAN.UCF101Images", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "MoCoGAN ODE 2 UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "videoDataset", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "imgDataset", "=", "UCF101Images", "(", "dset", ",", "conf", ")", "\n", "videoLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "videoDataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "imgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "imgDataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "\n", "def", "dataGen", "(", "loader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "vidGen", "=", "dataGen", "(", "videoLoader", ")", "\n", "imgGen", "=", "dataGen", "(", "imgLoader", ")", "\n", "# gen model", "\n", "disVid", "=", "VideoDiscriminator", "(", "3", ")", ".", "cuda", "(", ")", "\n", "disImg", "=", "PatchImageDiscriminator", "(", "3", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGeneratorNOODE", "(", "3", ",", "50", ",", "0", ",", "16", ",", "16", ",", "dim_hidden", "=", "49", ",", "order", "=", "2", ")", ".", "cuda", "(", ")", "\n", "\n", "# init optimizers and loss", "\n", "disVidOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "disVid", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "disImgOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "disImg", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "# resume training", "\n", "state_dicts", "=", "torch", ".", "load", "(", "f'checkpoints/{path}/state_normal80000.ckpt'", ")", "\n", "start_epoch", "=", "state_dicts", "[", "'epoch'", "]", "+", "1", "\n", "\n", "gen", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "0", "]", ")", "\n", "disVid", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "1", "]", ")", "\n", "disImg", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "2", "]", ")", "\n", "genOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "0", "]", ")", "\n", "disVidOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "1", "]", ")", "\n", "disImgOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "2", "]", ")", "\n", "\n", "# train", "\n", "# isScores = []", "\n", "isScores", "=", "list", "(", "np", ".", "load", "(", "'epoch_is/mocogan_ode_2_inception.npy'", ")", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "# image discriminator", "\n", "        ", "disImgOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "imgGen", ")", ".", "cuda", "(", ")", "\n", "\n", "pr", ",", "_", "=", "disImg", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", ",", "_", "=", "gen", ".", "sample_images", "(", "batch_size", ")", "\n", "", "pf", ",", "_", "=", "disImg", "(", "fake", ")", "\n", "pr_labels", "=", "torch", ".", "ones_like", "(", "pr", ")", "\n", "pf_labels", "=", "torch", ".", "zeros_like", "(", "pf", ")", "\n", "dis_img_loss", "=", "loss", "(", "pr", ",", "pr_labels", ")", "+", "loss", "(", "pf", ",", "pf_labels", ")", "\n", "dis_img_loss", ".", "backward", "(", ")", "\n", "disImgOpt", ".", "step", "(", ")", "\n", "\n", "# video discriminator", "\n", "disVidOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "vidGen", ")", ".", "cuda", "(", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", ",", "_", "=", "disVid", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", ",", "_", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "\n", "", "pf", ",", "_", "=", "disVid", "(", "fake", ")", "\n", "pr_labels", "=", "torch", ".", "ones_like", "(", "pr", ")", "\n", "pf_labels", "=", "torch", ".", "zeros_like", "(", "pf", ")", "\n", "dis_vid_loss", "=", "loss", "(", "pr", ",", "pr_labels", ")", "+", "loss", "(", "pf", ",", "pf_labels", ")", "\n", "dis_vid_loss", ".", "backward", "(", ")", "\n", "disVidOpt", ".", "step", "(", ")", "\n", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fakeVid", ",", "_", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "\n", "fakeImg", ",", "_", "=", "gen", ".", "sample_images", "(", "batch_size", ")", "\n", "pf_vid", ",", "_", "=", "disVid", "(", "fakeVid", ")", "\n", "pf_img", ",", "_", "=", "disImg", "(", "fakeImg", ")", "\n", "pf_vid_labels", "=", "torch", ".", "ones_like", "(", "pf_vid", ")", "\n", "pf_img_labels", "=", "torch", ".", "ones_like", "(", "pf_img", ")", "\n", "gen_loss", "=", "loss", "(", "pf_vid", ",", "pf_vid_labels", ")", "+", "loss", "(", "pf_img", ",", "pf_img_labels", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "# print('Epoch', epoch, 'DisImg', dis_img_loss.item(), 'DisVid', dis_vid_loss.item(), 'Gen', gen_loss.item())", "\n", "if", "epoch", "%", "100", "==", "0", ":", "\n", "            ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "test", "=", "False", ",", "\n", "moco", "=", "True", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/mocogan_ode_2_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "disVid", ".", "state_dict", "(", ")", ",", "\n", "disImg", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disVidOpt", ".", "state_dict", "(", ")", ",", "\n", "disImgOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "disVid", ".", "state_dict", "(", ")", ",", "\n", "disImg", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disVidOpt", ".", "state_dict", "(", ")", ",", "\n", "disImgOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "test", "=", "False", ",", "\n", "moco", "=", "True", ")", ")", "\n", "np", ".", "save", "(", "'epoch_is/mocogan_ode_2_inception.npy'", ",", "isScores", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE UCF101.singular_value_clip": [[19, 27], ["torch.no_grad", "torch.no_grad", "torch.svd", "torch.svd", "len", "w.reshape.reshape", "v.t", "torch.diag", "torch.diag"], "function", ["None"], ["def", "singular_value_clip", "(", "w", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dim", "=", "w", ".", "shape", "\n", "if", "len", "(", "dim", ")", ">", "2", ":", "\n", "            ", "w", "=", "w", ".", "reshape", "(", "dim", "[", "0", "]", ",", "-", "1", ")", "\n", "", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "w", ",", "some", "=", "True", ")", "\n", "s", "[", "s", ">", "1", "]", "=", "1", "\n", "return", "(", "u", "@", "torch", ".", "diag", "(", "s", ")", "@", "v", ".", "t", "(", ")", ")", ".", "view", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE UCF101.genSamples": [[29, 46], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "g().cpu().detach().numpy", "range", "g().cpu().detach", "g().cpu", "g", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.g"], ["", "", "def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", "(", "torch", ".", "rand", "(", "(", "n", "**", "2", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE UCF101.train": [[49, 141], ["ucf101.UCF101DatasetTGAN.UCF101", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "tgan SVC ODE UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "test", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "def", "dataGen", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "dg", "=", "dataGen", "(", ")", "\n", "# gen model", "\n", "dis", "=", "VideoDiscriminator", "(", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGenerator", "(", ")", ".", "cuda", "(", ")", "\n", "disOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "dis", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "\n", "# resume training", "\n", "state_dicts", "=", "torch", ".", "load", "(", "f'checkpoints/{path}/state_normal27000.ckpt'", ")", "\n", "start_epoch", "=", "state_dicts", "[", "'epoch'", "]", "+", "1", "\n", "\n", "gen", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "0", "]", ")", "\n", "dis", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "1", "]", ")", "\n", "genOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "0", "]", ")", "\n", "disOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "1", "]", ")", "\n", "# train", "\n", "#   isScores = []", "\n", "isScores", "=", "list", "(", "np", ".", "load", "(", "'tgan_svc_inception.npy'", ")", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "# discriminator", "\n", "        ", "disOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "dg", ")", ".", "cuda", "(", ")", "\n", "real", "=", "real", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", "=", "dis", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "", "pf", "=", "dis", "(", "fake", ")", "\n", "# dis_loss = -torch.mean(torch.log(pr) + torch.log(1-pf))", "\n", "dis_loss", "=", "torch", ".", "mean", "(", "-", "pr", ")", "+", "torch", ".", "mean", "(", "pf", ")", "\n", "dis_loss", ".", "backward", "(", ")", "\n", "disOpt", ".", "step", "(", ")", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "pf", "=", "dis", "(", "fake", ")", "\n", "# gen_loss = -torch.mean(torch.log(pf))", "\n", "gen_loss", "=", "torch", ".", "mean", "(", "-", "pf", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "# log results and clip svds", "\n", "print", "(", "'Epoch'", ",", "epoch", ",", "'Dis'", ",", "dis_loss", ".", "item", "(", ")", ",", "'Gen'", ",", "gen_loss", ".", "item", "(", ")", ")", "\n", "if", "epoch", "%", "5", "==", "0", ":", "\n", "            ", "for", "module", "in", "list", "(", "dis", ".", "model3d", ".", "children", "(", ")", ")", "+", "[", "dis", ".", "conv2d", "]", ":", "\n", "# discriminator only contains Conv3d, BatchNorm3d, and ReLU", "\n", "                ", "if", "type", "(", "module", ")", "==", "nn", ".", "Conv3d", "or", "type", "(", "module", ")", "==", "nn", ".", "Conv2d", ":", "\n", "                    ", "module", ".", "weight", ".", "data", "=", "singular_value_clip", "(", "module", ".", "weight", ")", "\n", "", "elif", "type", "(", "module", ")", "==", "nn", ".", "BatchNorm3d", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "gamma", "=", "module", ".", "weight", ".", "data", "\n", "std", "=", "torch", ".", "sqrt", "(", "module", ".", "running_var", ")", "\n", "gamma", "[", "gamma", ">", "std", "]", "=", "std", "[", "gamma", ">", "std", "]", "\n", "gamma", "[", "gamma", "<", "0.01", "*", "std", "]", "=", "0.01", "*", "std", "[", "gamma", "<", "0.01", "*", "std", "]", "\n", "module", ".", "weight", ".", "data", "=", "gamma", "\n", "\n", "", "", "", "if", "epoch", "%", "100", "==", "0", ":", "\n", "                ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                    ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'tgan_svc_ode_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'tgan_svc_ode_inception.npy'", ",", "isScores", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN SDE UCF101.genSamples": [[23, 40], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "[].cpu().detach().numpy", "range", "[].cpu().detach", "[].cpu", "g.sample_videos"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_videos"], ["def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", ".", "sample_videos", "(", "n", "**", "2", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN SDE UCF101.train": [[43, 157], ["ucf101.UCF101DatasetTGAN.UCF101", "ucf101.UCF101DatasetTGAN.UCF101Images", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "MoCoGAN SDE UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "videoDataset", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "imgDataset", "=", "UCF101Images", "(", "dset", ",", "conf", ")", "\n", "videoLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "videoDataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "imgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "imgDataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "\n", "def", "dataGen", "(", "loader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "vidGen", "=", "dataGen", "(", "videoLoader", ")", "\n", "imgGen", "=", "dataGen", "(", "imgLoader", ")", "\n", "# gen model", "\n", "disVid", "=", "VideoDiscriminator", "(", "3", ")", ".", "cuda", "(", ")", "\n", "disImg", "=", "PatchImageDiscriminator", "(", "3", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGeneratorNOODE", "(", "3", ",", "50", ",", "0", ",", "16", ",", "16", ",", "dim_hidden", "=", "49", ",", "order", "=", "3", ")", ".", "cuda", "(", ")", "\n", "\n", "# init optimizers and loss", "\n", "disVidOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "disVid", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "disImgOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "disImg", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "# resume training", "\n", "state_dicts", "=", "torch", ".", "load", "(", "f'checkpoints/{path}/state_normal90000.ckpt'", ")", "\n", "start_epoch", "=", "state_dicts", "[", "'epoch'", "]", "+", "1", "\n", "\n", "gen", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "0", "]", ")", "\n", "disVid", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "1", "]", ")", "\n", "disImg", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "2", "]", ")", "\n", "genOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "0", "]", ")", "\n", "disVidOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "1", "]", ")", "\n", "disImgOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "2", "]", ")", "\n", "\n", "# train", "\n", "# isScores = []", "\n", "isScores", "=", "list", "(", "np", ".", "load", "(", "'epoch_is/mocogan_sde_inception.npy'", ")", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "# image discriminator", "\n", "        ", "disImgOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "imgGen", ")", ".", "cuda", "(", ")", "\n", "\n", "pr", ",", "_", "=", "disImg", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", ",", "_", "=", "gen", ".", "sample_images", "(", "batch_size", ")", "\n", "", "pf", ",", "_", "=", "disImg", "(", "fake", ")", "\n", "pr_labels", "=", "torch", ".", "ones_like", "(", "pr", ")", "\n", "pf_labels", "=", "torch", ".", "zeros_like", "(", "pf", ")", "\n", "dis_img_loss", "=", "loss", "(", "pr", ",", "pr_labels", ")", "+", "loss", "(", "pf", ",", "pf_labels", ")", "\n", "dis_img_loss", ".", "backward", "(", ")", "\n", "disImgOpt", ".", "step", "(", ")", "\n", "\n", "# video discriminator", "\n", "disVidOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "vidGen", ")", ".", "cuda", "(", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", ",", "_", "=", "disVid", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", ",", "_", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "\n", "", "pf", ",", "_", "=", "disVid", "(", "fake", ")", "\n", "pr_labels", "=", "torch", ".", "ones_like", "(", "pr", ")", "\n", "pf_labels", "=", "torch", ".", "zeros_like", "(", "pf", ")", "\n", "dis_vid_loss", "=", "loss", "(", "pr", ",", "pr_labels", ")", "+", "loss", "(", "pf", ",", "pf_labels", ")", "\n", "dis_vid_loss", ".", "backward", "(", ")", "\n", "disVidOpt", ".", "step", "(", ")", "\n", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fakeVid", ",", "_", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "\n", "fakeImg", ",", "_", "=", "gen", ".", "sample_images", "(", "batch_size", ")", "\n", "pf_vid", ",", "_", "=", "disVid", "(", "fakeVid", ")", "\n", "pf_img", ",", "_", "=", "disImg", "(", "fakeImg", ")", "\n", "pf_vid_labels", "=", "torch", ".", "ones_like", "(", "pf_vid", ")", "\n", "pf_img_labels", "=", "torch", ".", "ones_like", "(", "pf_img", ")", "\n", "gen_loss", "=", "loss", "(", "pf_vid", ",", "pf_vid_labels", ")", "+", "loss", "(", "pf_img", ",", "pf_img_labels", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "# print('Epoch', epoch, 'DisImg', dis_img_loss.item(), 'DisVid', dis_vid_loss.item(), 'Gen', gen_loss.item())", "\n", "if", "epoch", "%", "100", "==", "0", ":", "\n", "            ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "test", "=", "False", ",", "\n", "moco", "=", "True", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/mocogan_sde_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "disVid", ".", "state_dict", "(", ")", ",", "\n", "disImg", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disVidOpt", ".", "state_dict", "(", ")", ",", "\n", "disImgOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "disVid", ".", "state_dict", "(", ")", ",", "\n", "disImg", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disVidOpt", ".", "state_dict", "(", ")", ",", "\n", "disImgOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "test", "=", "False", ",", "\n", "moco", "=", "True", ")", ")", "\n", "np", ".", "save", "(", "'epoch_is/mocogan_sde_inception.npy'", ",", "isScores", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC UCF101.singular_value_clip": [[18, 26], ["torch.no_grad", "torch.no_grad", "torch.linalg.svd", "torch.linalg.svd", "len", "w.reshape.reshape", "torch.diag", "torch.diag"], "function", ["None"], ["def", "singular_value_clip", "(", "w", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dim", "=", "w", ".", "shape", "\n", "if", "len", "(", "dim", ")", ">", "2", ":", "\n", "            ", "w", "=", "w", ".", "reshape", "(", "dim", "[", "0", "]", ",", "-", "1", ")", "\n", "", "u", ",", "s", ",", "v", "=", "torch", ".", "linalg", ".", "svd", "(", "w", ",", "full_matrices", "=", "False", ")", "\n", "s", "[", "s", ">", "1", "]", "=", "1", "\n", "return", "(", "u", "@", "torch", ".", "diag", "(", "s", ")", "@", "v", ")", ".", "view", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC UCF101.genSamples": [[28, 45], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "g().cpu().detach().numpy", "range", "g().cpu().detach", "g().cpu", "g", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.g"], ["", "", "def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", "(", "torch", ".", "rand", "(", "(", "n", "**", "2", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC UCF101.train": [[48, 141], ["ucf101.UCF101DatasetTGAN.UCF101", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "tgan SVC UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "test", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "def", "dataGen", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "dg", "=", "dataGen", "(", ")", "\n", "# gen model", "\n", "dis", "=", "VideoDiscriminator", "(", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGenerator", "(", ")", ".", "cuda", "(", ")", "\n", "disOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "dis", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "\n", "# resume training", "\n", "# state_dicts = torch.load(f'checkpoints/{path}/state_normal99999.ckpt')", "\n", "# start_epoch = state_dicts['epoch'] + 1", "\n", "\n", "# gen.load_state_dict(state_dicts['model_state_dict'][0])", "\n", "# dis.load_state_dict(state_dicts['model_state_dict'][1])", "\n", "# genOpt.load_state_dict(state_dicts['optimizer_state_dict'][0])", "\n", "# disOpt.load_state_dict(state_dicts['optimizer_state_dict'][1])", "\n", "# train", "\n", "isScores", "=", "[", "]", "\n", "# isScores = list(np.load('epoch_is/tgan_svc_inception.npy'))", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "        ", "assert", "gen", ".", "training", "\n", "# discriminator", "\n", "disOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "dg", ")", ".", "cuda", "(", ")", "\n", "real", "=", "real", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", "=", "dis", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "", "pf", "=", "dis", "(", "fake", ")", "\n", "# dis_loss = -torch.mean(torch.log(pr) + torch.log(1-pf))", "\n", "dis_loss", "=", "torch", ".", "mean", "(", "-", "pr", ")", "+", "torch", ".", "mean", "(", "pf", ")", "\n", "dis_loss", ".", "backward", "(", ")", "\n", "disOpt", ".", "step", "(", ")", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "pf", "=", "dis", "(", "fake", ")", "\n", "# gen_loss = -torch.mean(torch.log(pf))", "\n", "gen_loss", "=", "torch", ".", "mean", "(", "-", "pf", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "# log results and clip svds", "\n", "if", "epoch", "%", "5", "==", "0", ":", "\n", "            ", "for", "module", "in", "list", "(", "dis", ".", "model3d", ".", "children", "(", ")", ")", "+", "[", "dis", ".", "conv2d", "]", ":", "\n", "# discriminator only contains Conv3d, BatchNorm3d, and ReLU", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "if", "type", "(", "module", ")", "==", "nn", ".", "Conv3d", "or", "type", "(", "module", ")", "==", "nn", ".", "Conv2d", ":", "\n", "                        ", "module", ".", "weight", ".", "copy_", "(", "singular_value_clip", "(", "module", ".", "weight", ")", ")", "\n", "", "elif", "type", "(", "module", ")", "==", "nn", ".", "BatchNorm3d", ":", "\n", "                        ", "gamma", "=", "module", ".", "weight", ".", "data", "\n", "std", "=", "torch", ".", "sqrt", "(", "module", ".", "running_var", ")", "\n", "gamma", "[", "gamma", ">", "std", "]", "=", "std", "[", "gamma", ">", "std", "]", "\n", "gamma", "[", "gamma", "<", "0.01", "*", "std", "]", "=", "0.01", "*", "std", "[", "gamma", "<", "0.01", "*", "std", "]", "\n", "module", ".", "weight", ".", "copy_", "(", "gamma", ")", "\n", "\n", "", "", "", "if", "epoch", "%", "100", "==", "0", ":", "\n", "                ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                    ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tgan_svc_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'tgan_svc_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE lin UCF101.genSamples": [[19, 36], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "[].cpu().detach().numpy", "range", "[].cpu().detach", "[].cpu", "g.sample_videos"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_videos"], ["def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", ".", "sample_videos", "(", "n", "**", "2", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE lin UCF101.train": [[39, 153], ["ucf101.UCF101DatasetTGAN.UCF101", "ucf101.UCF101DatasetTGAN.UCF101Images", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "MoCoGAN ODE lin UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "videoDataset", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "imgDataset", "=", "UCF101Images", "(", "dset", ",", "conf", ")", "\n", "videoLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "videoDataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "imgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "imgDataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "\n", "def", "dataGen", "(", "loader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "vidGen", "=", "dataGen", "(", "videoLoader", ")", "\n", "imgGen", "=", "dataGen", "(", "imgLoader", ")", "\n", "# gen model", "\n", "disVid", "=", "VideoDiscriminator", "(", "3", ")", ".", "cuda", "(", ")", "\n", "disImg", "=", "PatchImageDiscriminator", "(", "3", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGenerator", "(", "3", ",", "50", ",", "0", ",", "16", ",", "16", ")", ".", "cuda", "(", ")", "\n", "\n", "# init optimizers and loss", "\n", "disVidOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "disVid", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "disImgOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "disImg", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "# resume training", "\n", "state_dicts", "=", "torch", ".", "load", "(", "f'checkpoints/{path}/state_normal67000.ckpt'", ")", "\n", "start_epoch", "=", "state_dicts", "[", "'epoch'", "]", "+", "1", "\n", "\n", "gen", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "0", "]", ")", "\n", "disVid", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "1", "]", ")", "\n", "disImg", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "2", "]", ")", "\n", "genOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "0", "]", ")", "\n", "disVidOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "1", "]", ")", "\n", "disImgOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "2", "]", ")", "\n", "\n", "# train", "\n", "# isScores = []", "\n", "isScores", "=", "list", "(", "np", ".", "load", "(", "'epoch_is/mocogan_ode_inception.npy'", ")", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "# image discriminator", "\n", "        ", "disImgOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "imgGen", ")", ".", "cuda", "(", ")", "\n", "\n", "pr", ",", "_", "=", "disImg", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", ",", "_", "=", "gen", ".", "sample_images", "(", "batch_size", ")", "\n", "", "pf", ",", "_", "=", "disImg", "(", "fake", ")", "\n", "pr_labels", "=", "torch", ".", "ones_like", "(", "pr", ")", "\n", "pf_labels", "=", "torch", ".", "zeros_like", "(", "pf", ")", "\n", "dis_img_loss", "=", "loss", "(", "pr", ",", "pr_labels", ")", "+", "loss", "(", "pf", ",", "pf_labels", ")", "\n", "dis_img_loss", ".", "backward", "(", ")", "\n", "disImgOpt", ".", "step", "(", ")", "\n", "\n", "# video discriminator", "\n", "disVidOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "vidGen", ")", ".", "cuda", "(", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", ",", "_", "=", "disVid", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", ",", "_", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "\n", "", "pf", ",", "_", "=", "disVid", "(", "fake", ")", "\n", "pr_labels", "=", "torch", ".", "ones_like", "(", "pr", ")", "\n", "pf_labels", "=", "torch", ".", "zeros_like", "(", "pf", ")", "\n", "dis_vid_loss", "=", "loss", "(", "pr", ",", "pr_labels", ")", "+", "loss", "(", "pf", ",", "pf_labels", ")", "\n", "dis_vid_loss", ".", "backward", "(", ")", "\n", "disVidOpt", ".", "step", "(", ")", "\n", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fakeVid", ",", "_", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "\n", "fakeImg", ",", "_", "=", "gen", ".", "sample_images", "(", "batch_size", ")", "\n", "pf_vid", ",", "_", "=", "disVid", "(", "fakeVid", ")", "\n", "pf_img", ",", "_", "=", "disImg", "(", "fakeImg", ")", "\n", "pf_vid_labels", "=", "torch", ".", "ones_like", "(", "pf_vid", ")", "\n", "pf_img_labels", "=", "torch", ".", "ones_like", "(", "pf_img", ")", "\n", "gen_loss", "=", "loss", "(", "pf_vid", ",", "pf_vid_labels", ")", "+", "loss", "(", "pf_img", ",", "pf_img_labels", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "# print('Epoch', epoch, 'DisImg', dis_img_loss.item(), 'DisVid', dis_vid_loss.item(), 'Gen', gen_loss.item())", "\n", "if", "epoch", "%", "100", "==", "0", ":", "\n", "            ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "test", "=", "False", ",", "\n", "moco", "=", "True", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/mocogan_ode_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "disVid", ".", "state_dict", "(", ")", ",", "\n", "disImg", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disVidOpt", ".", "state_dict", "(", ")", ",", "\n", "disImgOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "disVid", ".", "state_dict", "(", ")", ",", "\n", "disImg", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disVidOpt", ".", "state_dict", "(", ")", ",", "\n", "disImgOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "test", "=", "False", ",", "\n", "moco", "=", "True", ")", ")", "\n", "np", ".", "save", "(", "'epcoh_is/mocogan_ode_inception.npy'", ",", "isScores", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE EQ UCF101.singular_value_clip": [[19, 27], ["torch.no_grad", "torch.no_grad", "torch.linalg.svd", "torch.linalg.svd", "len", "w.reshape.reshape", "torch.diag", "torch.diag"], "function", ["None"], ["def", "singular_value_clip", "(", "w", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dim", "=", "w", ".", "shape", "\n", "if", "len", "(", "dim", ")", ">", "2", ":", "\n", "            ", "w", "=", "w", ".", "reshape", "(", "dim", "[", "0", "]", ",", "-", "1", ")", "\n", "", "u", ",", "s", ",", "v", "=", "torch", ".", "linalg", ".", "svd", "(", "w", ",", "full_matrices", "=", "False", ")", "\n", "s", "[", "s", ">", "1", "]", "=", "1", "\n", "return", "(", "u", "@", "torch", ".", "diag", "(", "s", ")", "@", "v", ")", ".", "view", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE EQ UCF101.genSamples": [[29, 46], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "g().cpu().detach().numpy", "range", "g().cpu().detach", "g().cpu", "g", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.g"], ["", "", "def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", "(", "torch", ".", "rand", "(", "(", "n", "**", "2", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE EQ UCF101.train": [[49, 143], ["ucf101.UCF101DatasetTGAN.UCF101", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "tgan SVC ODE EQ UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "test", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "def", "dataGen", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "dg", "=", "dataGen", "(", ")", "\n", "# gen model", "\n", "dis", "=", "VideoDiscriminator", "(", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGenerator", "(", "dim", "=", "978", ",", "linear", "=", "True", ",", "ode_fn", "=", "ODEFuncDeep", ")", ".", "cuda", "(", ")", "\n", "disOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "dis", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "\n", "# resume training", "\n", "# state_dicts = torch.load(f'checkpoints/{path}/state_normal61000.ckpt')", "\n", "# start_epoch = state_dicts['epoch'] + 1", "\n", "\n", "# gen.load_state_dict(state_dicts['model_state_dict'][0])", "\n", "# dis.load_state_dict(state_dicts['model_state_dict'][1])", "\n", "# genOpt.load_state_dict(state_dicts['optimizer_state_dict'][0])", "\n", "# disOpt.load_state_dict(state_dicts['optimizer_state_dict'][1])", "\n", "# train", "\n", "isScores", "=", "[", "]", "\n", "# isScores = list(np.load('epoch_is/tgan_svc_ode_eq_inception.npy'))", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "# discriminator", "\n", "        ", "disOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "dg", ")", ".", "cuda", "(", ")", "\n", "real", "=", "real", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", "=", "dis", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "", "pf", "=", "dis", "(", "fake", ")", "\n", "# dis_loss = -torch.mean(torch.log(pr) + torch.log(1-pf))", "\n", "dis_loss", "=", "torch", ".", "mean", "(", "-", "pr", ")", "+", "torch", ".", "mean", "(", "pf", ")", "\n", "dis_loss", ".", "backward", "(", ")", "\n", "disOpt", ".", "step", "(", ")", "\n", "del", "dis_loss", ",", "pr", ",", "pf", ",", "real", ",", "fake", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "pf", "=", "dis", "(", "fake", ")", "\n", "# gen_loss = -torch.mean(torch.log(pf))", "\n", "gen_loss", "=", "torch", ".", "mean", "(", "-", "pf", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "del", "gen_loss", ",", "pf", ",", "fake", "\n", "# log results and clip svds", "\n", "# print('Epoch', epoch, 'Dis', dis_loss.item(), 'Gen', gen_loss.item())", "\n", "if", "epoch", "%", "5", "==", "0", ":", "\n", "            ", "for", "module", "in", "list", "(", "dis", ".", "model3d", ".", "children", "(", ")", ")", "+", "[", "dis", ".", "conv2d", "]", ":", "\n", "# discriminator only contains Conv3d, BatchNorm3d, and ReLU", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "if", "type", "(", "module", ")", "==", "nn", ".", "Conv3d", "or", "type", "(", "module", ")", "==", "nn", ".", "Conv2d", ":", "\n", "                        ", "module", ".", "weight", ".", "copy_", "(", "singular_value_clip", "(", "module", ".", "weight", ")", ")", "\n", "", "elif", "type", "(", "module", ")", "==", "nn", ".", "BatchNorm3d", ":", "\n", "                        ", "gamma", "=", "module", ".", "weight", ".", "data", "\n", "std", "=", "torch", ".", "sqrt", "(", "module", ".", "running_var", ")", "\n", "gamma", "[", "gamma", ">", "std", "]", "=", "std", "[", "gamma", ">", "std", "]", "\n", "gamma", "[", "gamma", "<", "0.01", "*", "std", "]", "=", "0.01", "*", "std", "[", "gamma", "<", "0.01", "*", "std", "]", "\n", "module", ".", "weight", ".", "copy_", "(", "gamma", ")", "\n", "\n", "", "", "", "if", "epoch", "%", "100", "==", "0", ":", "\n", "                ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                    ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tgan_svc_ode_eq_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tgan_svc_ode_eq_inception.npy'", ",", "isScores", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE lin UCF101.singular_value_clip": [[19, 27], ["torch.no_grad", "torch.no_grad", "torch.linalg.svd", "torch.linalg.svd", "len", "w.reshape.reshape", "torch.diag", "torch.diag"], "function", ["None"], ["def", "singular_value_clip", "(", "w", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dim", "=", "w", ".", "shape", "\n", "if", "len", "(", "dim", ")", ">", "2", ":", "\n", "            ", "w", "=", "w", ".", "reshape", "(", "dim", "[", "0", "]", ",", "-", "1", ")", "\n", "", "u", ",", "s", ",", "v", "=", "torch", ".", "linalg", ".", "svd", "(", "w", ",", "full_matrices", "=", "False", ")", "\n", "s", "[", "s", ">", "1", "]", "=", "1", "\n", "return", "(", "u", "@", "torch", ".", "diag", "(", "s", ")", "@", "v", ")", ".", "view", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE lin UCF101.genSamples": [[29, 46], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "g().cpu().detach().numpy", "range", "g().cpu().detach", "g().cpu", "g", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.g"], ["", "", "def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", "(", "torch", ".", "rand", "(", "(", "n", "**", "2", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.tgan SVC ODE lin UCF101.train": [[49, 141], ["ucf101.UCF101DatasetTGAN.UCF101", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "tgan SVC ODE lin UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "test", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "def", "dataGen", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "dg", "=", "dataGen", "(", ")", "\n", "# gen model", "\n", "dis", "=", "VideoDiscriminator", "(", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGenerator", "(", "linear", "=", "True", ")", ".", "cuda", "(", ")", "\n", "disOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "dis", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "RMSprop", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "5e-5", ")", "\n", "\n", "# resume training", "\n", "# state_dicts = torch.load(f'checkpoints/{path}/state_normal91000.ckpt')", "\n", "# start_epoch = state_dicts['epoch'] + 1", "\n", "\n", "# gen.load_state_dict(state_dicts['model_state_dict'][0])", "\n", "# dis.load_state_dict(state_dicts['model_state_dict'][1])", "\n", "# genOpt.load_state_dict(state_dicts['optimizer_state_dict'][0])", "\n", "# disOpt.load_state_dict(state_dicts['optimizer_state_dict'][1])", "\n", "# train", "\n", "isScores", "=", "[", "]", "\n", "# isScores = list(np.load('epoch_is/tgan_svc_ode_inception.npy'))", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "        ", "assert", "gen", ".", "training", "\n", "# discriminator", "\n", "disOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "dg", ")", ".", "cuda", "(", ")", "\n", "real", "=", "real", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", "=", "dis", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "", "pf", "=", "dis", "(", "fake", ")", "\n", "# dis_loss = -torch.mean(torch.log(pr) + torch.log(1-pf))", "\n", "dis_loss", "=", "torch", ".", "mean", "(", "-", "pr", ")", "+", "torch", ".", "mean", "(", "pf", ")", "\n", "dis_loss", ".", "backward", "(", ")", "\n", "disOpt", ".", "step", "(", ")", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fake", "=", "gen", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "100", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", ")", "\n", "pf", "=", "dis", "(", "fake", ")", "\n", "# gen_loss = -torch.mean(torch.log(pf))", "\n", "gen_loss", "=", "torch", ".", "mean", "(", "-", "pf", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "# log results and clip svds", "\n", "if", "epoch", "%", "5", "==", "0", ":", "\n", "            ", "for", "module", "in", "list", "(", "dis", ".", "model3d", ".", "children", "(", ")", ")", "+", "[", "dis", ".", "conv2d", "]", ":", "\n", "# discriminator only contains Conv3d, BatchNorm3d, and ReLU", "\n", "                ", "if", "type", "(", "module", ")", "==", "nn", ".", "Conv3d", "or", "type", "(", "module", ")", "==", "nn", ".", "Conv2d", ":", "\n", "                    ", "module", ".", "weight", ".", "data", "=", "singular_value_clip", "(", "module", ".", "weight", ")", "\n", "", "elif", "type", "(", "module", ")", "==", "nn", ".", "BatchNorm3d", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "gamma", "=", "module", ".", "weight", ".", "data", "\n", "std", "=", "torch", ".", "sqrt", "(", "module", ".", "running_var", ")", "\n", "gamma", "[", "gamma", ">", "std", "]", "=", "std", "[", "gamma", ">", "std", "]", "\n", "gamma", "[", "gamma", "<", "0.01", "*", "std", "]", "=", "0.01", "*", "std", "[", "gamma", "<", "0.01", "*", "std", "]", "\n", "module", ".", "weight", ".", "data", "=", "gamma", "\n", "\n", "", "", "", "if", "epoch", "%", "100", "==", "0", ":", "\n", "                ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                    ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tgan_svc_ode_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "zdim", "=", "100", ",", "\n", "test", "=", "False", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/tgan_svc_ode_inception.npy'", ",", "isScores", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "dis", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.evaluation_metrics.calculate_inception_score": [[11, 75], ["torch.cuda.empty_cache", "evaluation.c3d_ft.C3DVersion1().to_gpu", "[].astype", "range", "numpy.concatenate", "numpy.mean", "numpy.mean", "numpy.exp", "gen.cuda.cuda", "gen.cuda.eval", "range", "gen.cuda.train", "[].astype.reshape", "numpy.load", "cp.asarray.transpose().reshape", "numpy.zeros", "range", "np.zeros.transpose().reshape", "x[].astype", "cp.asarray.transpose", "cupy.asarray", "numpy.sum", "numpy.save", "evaluation.c3d_ft.C3DVersion1", "numpy.asarray", "np.concatenate.append", "numpy.log", "numpy.log", "torch.no_grad", "numpy.load", "cp.asarray.transpose", "cv2.resize", "np.zeros.transpose", "chainer.using_config", "chainer.no_backprop_mode", "[].data.get", "gen.cuda.cpu().detach().numpy", "torch.rand", "[].cpu().detach().numpy", "gen.cuda.cpu().detach().numpy", "gen.cuda.cpu().detach", "[].cpu().detach", "gen.cuda.cpu().detach", "C3DVersion1().to_gpu.", "gen.cuda.cpu", "[].cpu", "gen.cuda.cpu", "gen.cuda.", "gen.cuda.", "gen.cuda.sample_videos"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_videos"], ["def", "calculate_inception_score", "(", "gen", ",", "n_samples", "=", "2048", ",", "batch_size", "=", "32", ",", "test", "=", "True", ",", "zdim", "=", "256", ",", "moco", "=", "False", ",", "reuse", "=", "False", ")", ":", "\n", "# generate samples", "\n", "    ", "batches", "=", "n_samples", "//", "batch_size", "\n", "if", "not", "reuse", ":", "\n", "        ", "gen", "=", "gen", ".", "cuda", "(", ")", "\n", "gen", ".", "eval", "(", ")", "\n", "for", "i", "in", "range", "(", "batches", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "z", "=", "torch", ".", "rand", "(", "(", "batch_size", ",", "zdim", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", "\n", "if", "test", ":", "\n", "                    ", "s", "=", "gen", "(", "z", ",", "test", "=", "True", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "moco", ":", "\n", "                    ", "s", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "s", "=", "gen", "(", "z", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "np", ".", "save", "(", "f'temp/vid{i}.npy'", ",", "s", ")", "\n", "", "gen", ".", "train", "(", ")", "\n", "", "del", "gen", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# load calc model", "\n", "dir", "=", "'evaluation/pfnet/chainer/models/conv3d_deepnetA_ucf.npz'", "\n", "model", "=", "C3DVersion1", "(", "pretrained_model", "=", "dir", ")", ".", "to_gpu", "(", ")", "\n", "mean", "=", "np", ".", "load", "(", "'evaluation/mean2.npz'", ")", "[", "'mean'", "]", ".", "astype", "(", "'f'", ")", "\n", "mean", "=", "mean", ".", "reshape", "(", "(", "3", ",", "1", ",", "16", ",", "128", ",", "171", ")", ")", "[", ":", ",", ":", ",", ":", ",", ":", ",", "21", ":", "21", "+", "128", "]", "\n", "\n", "# calc probabilities", "\n", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batches", ")", ":", "\n", "        ", "x", "=", "np", ".", "load", "(", "f'temp/vid{i}.npy'", ")", "\n", "n", ",", "c", ",", "f", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "reshape", "(", "n", "*", "f", ",", "h", ",", "w", ",", "c", ")", "\n", "x", "=", "x", "*", "128", "+", "128", "\n", "x_", "=", "np", ".", "zeros", "(", "(", "n", "*", "f", ",", "128", ",", "128", ",", "3", ")", ")", "\n", "for", "t", "in", "range", "(", "n", "*", "f", ")", ":", "\n", "            ", "x_", "[", "t", "]", "=", "np", ".", "asarray", "(", "\n", "cv2", ".", "resize", "(", "x", "[", "t", "]", ",", "(", "128", ",", "128", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", ")", "\n", "", "x", "=", "x_", ".", "transpose", "(", "3", ",", "0", ",", "1", ",", "2", ")", ".", "reshape", "(", "3", ",", "n", ",", "f", ",", "128", ",", "128", ")", "\n", "s", "=", "x", ".", "shape", "\n", "assert", "x", ".", "shape", "==", "s", "\n", "x", "=", "x", "[", ":", ":", "-", "1", "]", "-", "mean", "# mean file is BGR while model outputs RGB", "\n", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "8", ":", "8", "+", "112", ",", "8", ":", "8", "+", "112", "]", ".", "astype", "(", "'f'", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "x", "=", "cp", ".", "asarray", "(", "x", ")", "\n", "with", "chainer", ".", "using_config", "(", "'train'", ",", "False", ")", "and", "chainer", ".", "no_backprop_mode", "(", ")", ":", "\n", "            ", "out", ".", "append", "(", "model", "(", "x", ")", "[", "'prob'", "]", ".", "data", ".", "get", "(", ")", ")", "\n", "\n", "", "", "del", "model", "\n", "del", "x", "\n", "\n", "out", "=", "np", ".", "concatenate", "(", "out", ",", "axis", "=", "0", ")", "\n", "assert", "out", ".", "shape", "[", "0", "]", "==", "n_samples", "\n", "\n", "# find score", "\n", "eps", "=", "1e-7", "\n", "p_marginal", "=", "np", ".", "mean", "(", "out", ",", "axis", "=", "0", ")", "\n", "\n", "kl", "=", "out", "*", "(", "np", ".", "log", "(", "out", "+", "eps", ")", "-", "np", ".", "log", "(", "p_marginal", "+", "eps", ")", ")", "\n", "kl", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl", ",", "axis", "=", "1", ")", ")", "\n", "\n", "kl", "=", "np", ".", "exp", "(", "kl", ")", "\n", "\n", "return", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.evaluation_metrics.calculate_fid_score": [[77, 142], ["torch.cuda.empty_cache", "evaluation.c3d_ft.C3DVersion1().to_gpu", "[].astype", "range", "numpy.concatenate", "numpy.load", "numpy.load", "numpy.mean", "numpy.cov", "numpy.sum", "numpy.trace", "numpy.real", "gen.cuda.cuda", "gen.cuda.eval", "range", "gen.cuda.train", "[].astype.reshape", "numpy.load", "cp.asarray.transpose().reshape", "numpy.zeros", "range", "np.zeros.transpose().reshape", "x[].astype", "cp.asarray.transpose", "cupy.asarray", "numpy.save", "evaluation.c3d_ft.C3DVersion1", "numpy.asarray", "np.concatenate.append", "torch.no_grad", "numpy.load", "cp.asarray.transpose", "cv2.resize", "np.zeros.transpose", "chainer.using_config", "chainer.no_backprop_mode", "[].data.get", "scipy.linalg.sqrtm", "gen.cuda.cpu().detach().numpy", "numpy.dot", "torch.rand", "[].cpu().detach().numpy", "gen.cuda.cpu().detach().numpy", "gen.cuda.cpu().detach", "[].cpu().detach", "gen.cuda.cpu().detach", "C3DVersion1().to_gpu.", "gen.cuda.cpu", "[].cpu", "gen.cuda.cpu", "gen.cuda.", "gen.cuda.", "gen.cuda.sample_videos"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_videos"], ["", "def", "calculate_fid_score", "(", "gen", ",", "n_samples", "=", "2048", ",", "batch_size", "=", "32", ",", "test", "=", "True", ",", "zdim", "=", "256", ",", "moco", "=", "False", ",", "reuse", "=", "False", ")", ":", "\n", "# generate samples", "\n", "    ", "batches", "=", "n_samples", "//", "batch_size", "\n", "if", "not", "reuse", ":", "\n", "        ", "gen", "=", "gen", ".", "cuda", "(", ")", "\n", "gen", ".", "eval", "(", ")", "\n", "for", "i", "in", "range", "(", "batches", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "z", "=", "torch", ".", "rand", "(", "(", "batch_size", ",", "zdim", ")", ",", "device", "=", "'cuda'", ")", "*", "2", "-", "1", "\n", "if", "test", ":", "\n", "                    ", "s", "=", "gen", "(", "z", ",", "test", "=", "True", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "moco", ":", "\n", "                    ", "s", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "s", "=", "gen", "(", "z", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "np", ".", "save", "(", "f'temp/vid{i}.npy'", ",", "s", ")", "\n", "", "gen", ".", "train", "(", ")", "\n", "", "del", "gen", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# load calc model", "\n", "dir", "=", "'evaluation/pfnet/chainer/models/conv3d_deepnetA_ucf.npz'", "\n", "model", "=", "C3DVersion1", "(", "pretrained_model", "=", "dir", ")", ".", "to_gpu", "(", ")", "\n", "mean", "=", "np", ".", "load", "(", "'evaluation/mean2.npz'", ")", "[", "'mean'", "]", ".", "astype", "(", "'f'", ")", "\n", "mean", "=", "mean", ".", "reshape", "(", "(", "3", ",", "1", ",", "16", ",", "128", ",", "171", ")", ")", "[", ":", ",", ":", ",", ":", ",", ":", ",", "21", ":", "21", "+", "128", "]", "\n", "\n", "# calc probabilities", "\n", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batches", ")", ":", "\n", "        ", "x", "=", "np", ".", "load", "(", "f'temp/vid{i}.npy'", ")", "\n", "n", ",", "c", ",", "f", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "reshape", "(", "n", "*", "f", ",", "h", ",", "w", ",", "c", ")", "\n", "x", "=", "x", "*", "128", "+", "128", "\n", "x_", "=", "np", ".", "zeros", "(", "(", "n", "*", "f", ",", "128", ",", "128", ",", "3", ")", ")", "\n", "for", "t", "in", "range", "(", "n", "*", "f", ")", ":", "\n", "            ", "x_", "[", "t", "]", "=", "np", ".", "asarray", "(", "\n", "cv2", ".", "resize", "(", "x", "[", "t", "]", ",", "(", "128", ",", "128", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", ")", "\n", "", "x", "=", "x_", ".", "transpose", "(", "3", ",", "0", ",", "1", ",", "2", ")", ".", "reshape", "(", "3", ",", "n", ",", "f", ",", "128", ",", "128", ")", "\n", "s", "=", "x", ".", "shape", "\n", "assert", "x", ".", "shape", "==", "s", "\n", "x", "=", "x", "[", ":", ":", "-", "1", "]", "-", "mean", "# mean file is BGR while model outputs RGB", "\n", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "8", ":", "8", "+", "112", ",", "8", ":", "8", "+", "112", "]", ".", "astype", "(", "'f'", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "x", "=", "cp", ".", "asarray", "(", "x", ")", "\n", "with", "chainer", ".", "using_config", "(", "'train'", ",", "False", ")", "and", "chainer", ".", "no_backprop_mode", "(", ")", ":", "\n", "            ", "out", ".", "append", "(", "model", "(", "x", ",", "layers", "=", "[", "'fc7'", "]", ")", "[", "'fc7'", "]", ".", "data", ".", "get", "(", ")", ")", "\n", "\n", "", "", "del", "model", "\n", "del", "x", "\n", "\n", "out", "=", "np", ".", "concatenate", "(", "out", ",", "axis", "=", "0", ")", "\n", "assert", "out", ".", "shape", "[", "0", "]", "==", "n_samples", "\n", "\n", "# find score", "\n", "ds_mean", "=", "np", ".", "load", "(", "'evaluation/fid_mean.npy'", ")", "\n", "ds_cov", "=", "np", ".", "load", "(", "'evaluation/fid_cov.npy'", ")", "\n", "sample_mean", "=", "np", ".", "mean", "(", "out", ",", "axis", "=", "0", ")", "\n", "sample_cov", "=", "np", ".", "cov", "(", "out", ".", "T", ")", "\n", "\n", "fid", "=", "0", "\n", "fid", "+=", "np", ".", "sum", "(", "(", "ds_mean", "-", "sample_mean", ")", "**", "2", ")", "\n", "fid", "+=", "np", ".", "trace", "(", "ds_cov", "+", "sample_cov", "-", "2.0", "*", "scipy", ".", "linalg", ".", "sqrtm", "(", "np", ".", "dot", "(", "ds_cov", ",", "sample_cov", ")", ")", ")", "\n", "\n", "return", "np", ".", "real", "(", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.evaluation_metrics.calculate_inception_score_confidence": [[144, 153], ["numpy.empty", "tqdm.tqdm", "range", "evaluation_metrics.calculate_inception_score", "print", "np.empty.mean", "np.empty.std"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.evaluation_metrics.calculate_inception_score"], ["", "def", "calculate_inception_score_confidence", "(", "gen", ",", "n_samples", "=", "2048", ",", "batch_size", "=", "32", ",", "\n", "iterations", "=", "10", ",", "test", "=", "True", ",", "zdim", "=", "256", ",", "\n", "moco", "=", "False", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "scores", "=", "np", ".", "empty", "(", "[", "iterations", "]", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "iterations", ")", ")", ":", "\n", "        ", "scores", "[", "i", "]", "=", "calculate_inception_score", "(", "gen", ",", "n_samples", ",", "batch_size", ",", "test", ",", "zdim", ",", "moco", ",", "reuse", ")", "\n", "print", "(", "scores", "[", "i", "]", ")", "\n", "\n", "", "return", "scores", ".", "mean", "(", ")", ",", "scores", ".", "std", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.evaluation_metrics.calculate_fid_score_confidence": [[155, 164], ["numpy.empty", "tqdm.tqdm", "range", "evaluation_metrics.calculate_fid_score", "print", "np.empty.mean", "np.empty.std"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.evaluation_metrics.calculate_fid_score"], ["", "def", "calculate_fid_score_confidence", "(", "gen", ",", "n_samples", "=", "2048", ",", "batch_size", "=", "32", ",", "\n", "iterations", "=", "10", ",", "test", "=", "True", ",", "zdim", "=", "256", ",", "\n", "moco", "=", "False", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "scores", "=", "np", ".", "empty", "(", "[", "iterations", "]", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "iterations", ")", ")", ":", "\n", "        ", "scores", "[", "i", "]", "=", "calculate_fid_score", "(", "gen", ",", "n_samples", ",", "batch_size", ",", "test", ",", "zdim", ",", "moco", ",", "reuse", ")", "\n", "print", "(", "scores", "[", "i", "]", ")", "\n", "\n", "", "return", "scores", ".", "mean", "(", ")", ",", "scores", ".", "std", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE 3 UCF101.genSamples": [[23, 40], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "[].cpu().detach().numpy", "range", "[].cpu().detach", "[].cpu", "g.sample_videos"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_videos"], ["def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", ".", "sample_videos", "(", "n", "**", "2", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE 3 UCF101.train": [[43, 157], ["ucf101.UCF101DatasetTGAN.UCF101", "ucf101.UCF101DatasetTGAN.UCF101Images", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "MoCoGAN ODE 3 UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "videoDataset", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "imgDataset", "=", "UCF101Images", "(", "dset", ",", "conf", ")", "\n", "videoLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "videoDataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "imgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "imgDataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "\n", "def", "dataGen", "(", "loader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "vidGen", "=", "dataGen", "(", "videoLoader", ")", "\n", "imgGen", "=", "dataGen", "(", "imgLoader", ")", "\n", "# gen model", "\n", "disVid", "=", "VideoDiscriminator", "(", "3", ")", ".", "cuda", "(", ")", "\n", "disImg", "=", "PatchImageDiscriminator", "(", "3", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGeneratorSDE", "(", "3", ",", "50", ",", "0", ",", "16", ",", "16", ",", "dim_hidden", "=", "49", ")", ".", "cuda", "(", ")", "\n", "\n", "# init optimizers and loss", "\n", "disVidOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "disVid", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "disImgOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "disImg", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "# resume training", "\n", "state_dicts", "=", "torch", ".", "load", "(", "f'checkpoints/{path}/state_normal86000.ckpt'", ")", "\n", "start_epoch", "=", "state_dicts", "[", "'epoch'", "]", "+", "1", "\n", "\n", "gen", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "0", "]", ")", "\n", "disVid", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "1", "]", ")", "\n", "disImg", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "2", "]", ")", "\n", "genOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "0", "]", ")", "\n", "disVidOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "1", "]", ")", "\n", "disImgOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "2", "]", ")", "\n", "\n", "# train", "\n", "# isScores = []", "\n", "isScores", "=", "list", "(", "np", ".", "load", "(", "'epoch_is/mocogan_ode_3_inception.npy'", ")", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "# image discriminator", "\n", "        ", "disImgOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "imgGen", ")", ".", "cuda", "(", ")", "\n", "\n", "pr", ",", "_", "=", "disImg", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", ",", "_", "=", "gen", ".", "sample_images", "(", "batch_size", ")", "\n", "", "pf", ",", "_", "=", "disImg", "(", "fake", ")", "\n", "pr_labels", "=", "torch", ".", "ones_like", "(", "pr", ")", "\n", "pf_labels", "=", "torch", ".", "zeros_like", "(", "pf", ")", "\n", "dis_img_loss", "=", "loss", "(", "pr", ",", "pr_labels", ")", "+", "loss", "(", "pf", ",", "pf_labels", ")", "\n", "dis_img_loss", ".", "backward", "(", ")", "\n", "disImgOpt", ".", "step", "(", ")", "\n", "\n", "# video discriminator", "\n", "disVidOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "vidGen", ")", ".", "cuda", "(", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", ",", "_", "=", "disVid", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", ",", "_", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "\n", "", "pf", ",", "_", "=", "disVid", "(", "fake", ")", "\n", "pr_labels", "=", "torch", ".", "ones_like", "(", "pr", ")", "\n", "pf_labels", "=", "torch", ".", "zeros_like", "(", "pf", ")", "\n", "dis_vid_loss", "=", "loss", "(", "pr", ",", "pr_labels", ")", "+", "loss", "(", "pf", ",", "pf_labels", ")", "\n", "dis_vid_loss", ".", "backward", "(", ")", "\n", "disVidOpt", ".", "step", "(", ")", "\n", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fakeVid", ",", "_", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "\n", "fakeImg", ",", "_", "=", "gen", ".", "sample_images", "(", "batch_size", ")", "\n", "pf_vid", ",", "_", "=", "disVid", "(", "fakeVid", ")", "\n", "pf_img", ",", "_", "=", "disImg", "(", "fakeImg", ")", "\n", "pf_vid_labels", "=", "torch", ".", "ones_like", "(", "pf_vid", ")", "\n", "pf_img_labels", "=", "torch", ".", "ones_like", "(", "pf_img", ")", "\n", "gen_loss", "=", "loss", "(", "pf_vid", ",", "pf_vid_labels", ")", "+", "loss", "(", "pf_img", ",", "pf_img_labels", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "# print('Epoch', epoch, 'DisImg', dis_img_loss.item(), 'DisVid', dis_vid_loss.item(), 'Gen', gen_loss.item())", "\n", "if", "epoch", "%", "100", "==", "0", ":", "\n", "            ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "test", "=", "False", ",", "\n", "moco", "=", "True", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/mocogan_ode_3_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "disVid", ".", "state_dict", "(", ")", ",", "\n", "disImg", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disVidOpt", ".", "state_dict", "(", ")", ",", "\n", "disImgOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "disVid", ".", "state_dict", "(", ")", ",", "\n", "disImg", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disVidOpt", ".", "state_dict", "(", ")", ",", "\n", "disImgOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "test", "=", "False", ",", "\n", "moco", "=", "True", ")", ")", "\n", "np", ".", "save", "(", "'epoch_is/mocogan_ode_3_inception.npy'", ",", "isScores", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.genSamples": [[19, 36], ["g.eval", "g.train", "numpy.zeros", "range", "out.transpose.transpose", "skvideo.io.vwrite", "torch.no_grad", "torch.no_grad", "[].cpu().detach().numpy", "range", "[].cpu().detach", "[].cpu", "g.sample_videos"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_videos"], ["def", "genSamples", "(", "g", ",", "n", "=", "8", ",", "e", "=", "1", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "s", "=", "g", ".", "sample_videos", "(", "n", "**", "2", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "g", ".", "train", "(", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "3", ",", "16", ",", "64", "*", "n", ",", "64", "*", "n", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "out", "[", ":", ",", ":", ",", "64", "*", "j", ":", "64", "*", "(", "j", "+", "1", ")", ",", "64", "*", "k", ":", "64", "*", "(", "k", "+", "1", ")", "]", "=", "s", "[", "j", "*", "n", "+", "k", ",", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "out", "=", "out", ".", "transpose", "(", "(", "1", ",", "2", ",", "3", ",", "0", ")", ")", "\n", "out", "=", "(", "out", "+", "1", ")", "/", "2", "*", "255", "\n", "io", ".", "vwrite", "(", "\n", "f'video_samples/{path}/gensamples_id{e}.gif'", ",", "\n", "out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.None.MoCoGAN ODE eq UCF101.train": [[39, 153], ["ucf101.UCF101DatasetTGAN.UCF101", "ucf101.UCF101DatasetTGAN.UCF101Images", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "MoCoGAN ODE eq UCF101.train.dataGen"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "# data", "\n", "    ", "videoDataset", "=", "UCF101", "(", "dset", ",", "conf", ")", "\n", "imgDataset", "=", "UCF101Images", "(", "dset", ",", "conf", ")", "\n", "videoLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "videoDataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "imgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "imgDataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "\n", "def", "dataGen", "(", "loader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "d", "in", "loader", ":", "\n", "                ", "yield", "d", "\n", "\n", "", "", "", "vidGen", "=", "dataGen", "(", "videoLoader", ")", "\n", "imgGen", "=", "dataGen", "(", "imgLoader", ")", "\n", "# gen model", "\n", "disVid", "=", "VideoDiscriminator", "(", "3", ")", ".", "cuda", "(", ")", "\n", "disImg", "=", "PatchImageDiscriminator", "(", "3", ")", ".", "cuda", "(", ")", "\n", "gen", "=", "VideoGenerator", "(", "3", ",", "50", ",", "0", ",", "16", ",", "16", ",", "ode_fn", "=", "ODEFuncDeep", ",", "dim_hidden", "=", "49", ",", "linear", "=", "False", ")", ".", "cuda", "(", ")", "\n", "\n", "# init optimizers and loss", "\n", "disVidOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "disVid", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "disImgOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "disImg", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "genOpt", "=", "torch", ".", "optim", ".", "Adam", "(", "gen", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "1e-5", ")", "\n", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "# resume training", "\n", "state_dicts", "=", "torch", ".", "load", "(", "f'checkpoints/{path}/state_normal83000.ckpt'", ")", "\n", "start_epoch", "=", "state_dicts", "[", "'epoch'", "]", "+", "1", "\n", "\n", "gen", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "0", "]", ")", "\n", "disVid", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "1", "]", ")", "\n", "disImg", ".", "load_state_dict", "(", "state_dicts", "[", "'model_state_dict'", "]", "[", "2", "]", ")", "\n", "genOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "0", "]", ")", "\n", "disVidOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "1", "]", ")", "\n", "disImgOpt", ".", "load_state_dict", "(", "state_dicts", "[", "'optimizer_state_dict'", "]", "[", "2", "]", ")", "\n", "\n", "# train", "\n", "# isScores = []", "\n", "isScores", "=", "list", "(", "np", ".", "load", "(", "'epoch_is/mocogan_ode_eq_inception.npy'", ")", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ")", ":", "\n", "# image discriminator", "\n", "        ", "disImgOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "imgGen", ")", ".", "cuda", "(", ")", "\n", "\n", "pr", ",", "_", "=", "disImg", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", ",", "_", "=", "gen", ".", "sample_images", "(", "batch_size", ")", "\n", "", "pf", ",", "_", "=", "disImg", "(", "fake", ")", "\n", "pr_labels", "=", "torch", ".", "ones_like", "(", "pr", ")", "\n", "pf_labels", "=", "torch", ".", "zeros_like", "(", "pf", ")", "\n", "dis_img_loss", "=", "loss", "(", "pr", ",", "pr_labels", ")", "+", "loss", "(", "pf", ",", "pf_labels", ")", "\n", "dis_img_loss", ".", "backward", "(", ")", "\n", "disImgOpt", ".", "step", "(", ")", "\n", "\n", "# video discriminator", "\n", "disVidOpt", ".", "zero_grad", "(", ")", "\n", "real", "=", "next", "(", "vidGen", ")", ".", "cuda", "(", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pr", ",", "_", "=", "disVid", "(", "real", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake", ",", "_", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "\n", "", "pf", ",", "_", "=", "disVid", "(", "fake", ")", "\n", "pr_labels", "=", "torch", ".", "ones_like", "(", "pr", ")", "\n", "pf_labels", "=", "torch", ".", "zeros_like", "(", "pf", ")", "\n", "dis_vid_loss", "=", "loss", "(", "pr", ",", "pr_labels", ")", "+", "loss", "(", "pf", ",", "pf_labels", ")", "\n", "dis_vid_loss", ".", "backward", "(", ")", "\n", "disVidOpt", ".", "step", "(", ")", "\n", "\n", "# generator", "\n", "genOpt", ".", "zero_grad", "(", ")", "\n", "fakeVid", ",", "_", "=", "gen", ".", "sample_videos", "(", "batch_size", ")", "\n", "fakeImg", ",", "_", "=", "gen", ".", "sample_images", "(", "batch_size", ")", "\n", "pf_vid", ",", "_", "=", "disVid", "(", "fakeVid", ")", "\n", "pf_img", ",", "_", "=", "disImg", "(", "fakeImg", ")", "\n", "pf_vid_labels", "=", "torch", ".", "ones_like", "(", "pf_vid", ")", "\n", "pf_img_labels", "=", "torch", ".", "ones_like", "(", "pf_img", ")", "\n", "gen_loss", "=", "loss", "(", "pf_vid", ",", "pf_vid_labels", ")", "+", "loss", "(", "pf_img", ",", "pf_img_labels", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "genOpt", ".", "step", "(", ")", "\n", "# print('Epoch', epoch, 'DisImg', dis_img_loss.item(), 'DisVid', dis_vid_loss.item(), 'Gen', gen_loss.item())", "\n", "if", "epoch", "%", "100", "==", "0", ":", "\n", "            ", "genSamples", "(", "gen", ",", "e", "=", "epoch", ")", "\n", "if", "epoch", "%", "1000", "==", "0", ":", "\n", "                ", "gen", ".", "cpu", "(", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "test", "=", "False", ",", "\n", "moco", "=", "True", ")", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "np", ".", "save", "(", "'epoch_is/mocogan_ode_eq_inception.npy'", ",", "isScores", ")", "\n", "gen", ".", "cuda", "(", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "disVid", ".", "state_dict", "(", ")", ",", "\n", "disImg", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disVidOpt", ".", "state_dict", "(", ")", ",", "\n", "disImgOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "", "", "", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "[", "gen", ".", "state_dict", "(", ")", ",", "\n", "disVid", ".", "state_dict", "(", ")", ",", "\n", "disImg", ".", "state_dict", "(", ")", "]", ",", "\n", "'optimizer_state_dict'", ":", "[", "genOpt", ".", "state_dict", "(", ")", ",", "\n", "disVidOpt", ".", "state_dict", "(", ")", ",", "\n", "disImgOpt", ".", "state_dict", "(", ")", "]", "}", ",", "\n", "f'checkpoints/{path}/state_normal{epoch}.ckpt'", ")", "\n", "isScores", ".", "append", "(", "calculate_inception_score", "(", "gen", ",", "test", "=", "False", ",", "\n", "moco", "=", "True", ")", ")", "\n", "np", ".", "save", "(", "'epoch_is/mocogan_ode_eq_inception.npy'", ",", "isScores", ")", "\n", "print", "(", "isScores", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.make_ucf101_tgan.process_video": [[19, 37], ["imageio.get_reader", "len", "numpy.concatenate().reshape", "imageio.get_reader.get_next_data", "cv2.resize().transpose", "numpy.concatenate().reshape.append", "numpy.concatenate", "cv2.resize"], "function", ["None"], ["def", "process_video", "(", "video_path", ")", ":", "\n", "    ", "video_reader", "=", "imageio", ".", "get_reader", "(", "video_path", ")", "\n", "\n", "video", "=", "[", "]", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "img", "=", "video_reader", ".", "get_next_data", "(", ")", "\n", "", "except", "IndexError", ":", "\n", "# except (imageio.core.CannotReadFrameError, IndexError):", "\n", "            ", "break", "\n", "", "else", ":", "\n", "            ", "dst_img", "=", "cv2", ".", "resize", "(", "\n", "img", ",", "(", "img_cols", ",", "img_rows", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "video", ".", "append", "(", "dst_img", ")", "\n", "", "", "T", "=", "len", "(", "video", ")", "\n", "video", "=", "numpy", ".", "concatenate", "(", "video", ")", ".", "reshape", "(", "T", ",", "3", ",", "img_rows", ",", "img_cols", ")", "\n", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.make_ucf101_tgan.make_frame": [[39, 46], ["pandas.read_csv", "frame[].apply", "frame[].apply", "os.path.basename", "x.split"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.CategoricalVideoDiscriminator.split"], ["", "def", "make_frame", "(", "filepath", ")", ":", "\n", "    ", "frame", "=", "pandas", ".", "read_csv", "(", "\n", "filepath", ",", "sep", "=", "' '", ",", "header", "=", "None", ",", "names", "=", "[", "'filename'", ",", "'label'", "]", ")", "\n", "del", "frame", "[", "'label'", "]", "\n", "frame", "[", "'filename'", "]", "=", "frame", "[", "'filename'", "]", ".", "apply", "(", "lambda", "x", ":", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "\n", "frame", "[", "'category'", "]", "=", "frame", "[", "'filename'", "]", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.make_ucf101_tgan.main": [[48, 82], ["print", "os.path.join", "make_ucf101_tgan.make_frame", "make_frame.iterrows", "print", "h5py.File", "h5py.File.create_dataset", "make_frame.iterrows", "pandas.DataFrame", "pandas.DataFrame.to_json", "os.path.join", "imageio.get_reader", "os.path.join", "print", "os.path.join", "make_ucf101_tgan.process_video", "len", "pandas.DataFrame.append", "os.path.join", "print", "imageio.get_reader.count_frames", "len", "len"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.make_ucf101_tgan.make_frame", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.make_ucf101_tgan.process_video"], ["", "def", "main", "(", ")", ":", "\n", "    ", "for", "name", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "        ", "print", "(", "'Processing {} dataset'", ".", "format", "(", "name", ")", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "src_split_dir", ",", "'{}list01.txt'", ".", "format", "(", "name", ")", ")", "\n", "frame", "=", "make_frame", "(", "path", ")", "\n", "\n", "n_frames", "=", "0", "\n", "# n_frames = 1786820", "\n", "for", "ind", ",", "row", "in", "frame", ".", "iterrows", "(", ")", ":", "\n", "            ", "if", "ind", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "'Processing {} / {}'", ".", "format", "(", "ind", ",", "len", "(", "frame", ")", ")", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "src_dir", ",", "row", "[", "'filename'", "]", ")", "\n", "reader", "=", "imageio", ".", "get_reader", "(", "path", ")", "\n", "T", "=", "reader", ".", "count_frames", "(", ")", "+", "1", "\n", "n_frames", "+=", "T", "\n", "\n", "", "print", "(", "'# of frames: {}'", ".", "format", "(", "n_frames", ")", ")", "\n", "h5file", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "dst_dir", ",", "'{}.h5'", ".", "format", "(", "name", ")", ")", ",", "'w'", ")", "\n", "dset", "=", "h5file", ".", "create_dataset", "(", "\n", "'image'", ",", "(", "n_frames", ",", "3", ",", "img_rows", ",", "img_cols", ")", ",", "dtype", "=", "numpy", ".", "uint8", ")", "\n", "conf", "=", "[", "]", "\n", "start", "=", "0", "\n", "for", "ind", ",", "row", "in", "frame", ".", "iterrows", "(", ")", ":", "\n", "            ", "print", "(", "'Processing {} / {}'", ".", "format", "(", "ind", ",", "len", "(", "frame", ")", ")", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "src_dir", ",", "row", "[", "'filename'", "]", ")", "\n", "video", "=", "process_video", "(", "path", ")", "\n", "T", "=", "len", "(", "video", ")", "\n", "dset", "[", "start", ":", "(", "start", "+", "T", ")", "]", "=", "video", "\n", "conf", ".", "append", "(", "{", "\n", "'start'", ":", "start", ",", "'end'", ":", "(", "start", "+", "T", ")", ",", "\n", "'category'", ":", "row", "[", "'category'", "]", "}", ")", "\n", "start", "+=", "T", "\n", "", "conf", "=", "pandas", ".", "DataFrame", "(", "conf", ")", "\n", "conf", ".", "to_json", "(", "os", ".", "path", ".", "join", "(", "dst_dir", ",", "'{}.json'", ".", "format", "(", "name", ")", ")", ",", "orient", "=", "'records'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.UCF101DatasetTGAN.UCF101.__init__": [[9, 16], ["h5py.File", "pandas.read_json", "UCF101DatasetTGAN.UCF101.conf.index.tolist"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "h5path", ",", "config_path", ",", "img_size", "=", "64", ")", ":", "\n", "        ", "self", ".", "h5file", "=", "h5py", ".", "File", "(", "h5path", ",", "'r'", ")", "\n", "self", ".", "dset", "=", "self", ".", "h5file", "[", "'image'", "]", "\n", "self", ".", "conf", "=", "pd", ".", "read_json", "(", "config_path", ")", "\n", "self", ".", "ind", "=", "self", ".", "conf", ".", "index", ".", "tolist", "(", ")", "\n", "self", ".", "n_frames", "=", "16", "\n", "self", ".", "img_size", "=", "img_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.UCF101DatasetTGAN.UCF101.__len__": [[17, 19], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "conf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.UCF101DatasetTGAN.UCF101._crop_center": [[20, 28], ["None"], "methods", ["None"], ["", "def", "_crop_center", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "img_size", "==", "64", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "10", ":", "10", "+", "self", ".", "img_size", "]", "\n", "", "elif", "self", ".", "img_size", "==", "192", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "32", ":", "32", "+", "self", ".", "img_size", "]", "\n", "", "assert", "x", ".", "shape", "[", "2", "]", "==", "self", ".", "img_size", "\n", "assert", "x", ".", "shape", "[", "3", "]", "==", "self", ".", "img_size", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.UCF101DatasetTGAN.UCF101.__getitem__": [[29, 38], ["UCF101DatasetTGAN.UCF101._crop_center", "torch.tensor", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.UCF101DatasetTGAN.UCF101Images._crop_center"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "mov_info", "=", "self", ".", "conf", ".", "loc", "[", "self", ".", "ind", "[", "i", "]", "]", "\n", "length", "=", "mov_info", ".", "end", "-", "mov_info", ".", "start", "\n", "offset", "=", "np", ".", "random", ".", "randint", "(", "length", "-", "self", ".", "n_frames", ")", "if", "length", ">", "self", ".", "n_frames", "else", "0", "\n", "x", "=", "self", ".", "dset", "[", "mov_info", ".", "start", "+", "offset", ":", "\n", "mov_info", ".", "start", "+", "offset", "+", "self", ".", "n_frames", "]", "\n", "x", "=", "self", ".", "_crop_center", "(", "x", ")", "\n", "return", "torch", ".", "tensor", "(", "(", "x", "-", "128.0", ")", "/", "128.0", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.UCF101DatasetTGAN.UCF101Images.__init__": [[41, 43], ["UCF101DatasetTGAN.UCF101.__init__"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "h5path", ",", "config_path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "h5path", ",", "config_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.UCF101DatasetTGAN.UCF101Images._crop_center": [[44, 49], ["None"], "methods", ["None"], ["", "def", "_crop_center", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "[", ":", ",", ":", ",", "10", ":", "10", "+", "self", ".", "img_size", "]", "\n", "assert", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "img_size", "\n", "assert", "x", ".", "shape", "[", "2", "]", "==", "self", ".", "img_size", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.UCF101DatasetTGAN.UCF101Images.__getitem__": [[50, 57], ["numpy.random.randint", "UCF101DatasetTGAN.UCF101Images._crop_center", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.UCF101DatasetTGAN.UCF101Images._crop_center"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "mov_info", "=", "self", ".", "conf", ".", "loc", "[", "self", ".", "ind", "[", "i", "]", "]", "\n", "length", "=", "mov_info", ".", "end", "-", "mov_info", ".", "start", "\n", "offset", "=", "np", ".", "random", ".", "randint", "(", "length", ")", "\n", "x", "=", "self", ".", "dset", "[", "mov_info", ".", "start", "+", "offset", "]", "\n", "x", "=", "self", ".", "_crop_center", "(", "x", ")", "\n", "return", "torch", ".", "tensor", "(", "(", "x", "-", "128.0", ")", "/", "128.0", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.Noise.__init__": [[21, 25], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_noise", ",", "sigma", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "Noise", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_noise", "=", "use_noise", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.Noise.forward": [[26, 30], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "T.FloatTensor().normal_", "T.FloatTensor", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_noise", ":", "\n", "            ", "return", "x", "+", "self", ".", "sigma", "*", "Variable", "(", "T", ".", "FloatTensor", "(", "x", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.ImageDiscriminator.__init__": [[33, 59], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mocogan.Noise", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "mocogan.Noise", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "mocogan.Noise", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "mocogan.Noise", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "ndf", "=", "64", ",", "use_noise", "=", "False", ",", "noise_sigma", "=", "None", ")", ":", "\n", "        ", "super", "(", "ImageDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "use_noise", "=", "use_noise", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n_channels", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.ImageDiscriminator.forward": [[61, 64], ["mocogan.ImageDiscriminator.main().squeeze", "mocogan.ImageDiscriminator.main"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.make_ucf101_tgan.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h", "=", "self", ".", "main", "(", "input", ")", ".", "squeeze", "(", ")", "\n", "return", "h", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.PatchImageDiscriminator.__init__": [[67, 89], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mocogan.Noise", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "mocogan.Noise", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "mocogan.Noise", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "mocogan.Noise", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "ndf", "=", "64", ",", "use_noise", "=", "False", ",", "noise_sigma", "=", "None", ")", ":", "\n", "        ", "super", "(", "PatchImageDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "use_noise", "=", "use_noise", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n_channels", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "1", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.PatchImageDiscriminator.forward": [[91, 94], ["mocogan.PatchImageDiscriminator.main().squeeze", "mocogan.PatchImageDiscriminator.main"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.make_ucf101_tgan.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h", "=", "self", ".", "main", "(", "input", ")", ".", "squeeze", "(", ")", "\n", "return", "h", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.PatchVideoDiscriminator.__init__": [[97, 121], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mocogan.Noise", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "mocogan.Noise", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "mocogan.Noise", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "n_output_neurons", "=", "1", ",", "bn_use_gamma", "=", "True", ",", "use_noise", "=", "False", ",", "noise_sigma", "=", "None", ",", "ndf", "=", "64", ")", ":", "\n", "        ", "super", "(", "PatchVideoDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "n_output_neurons", "=", "n_output_neurons", "\n", "self", ".", "use_noise", "=", "use_noise", "\n", "self", ".", "bn_use_gamma", "=", "bn_use_gamma", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n_channels", ",", "ndf", ",", "4", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv3d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv3d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv3d", "(", "ndf", "*", "4", ",", "1", ",", "4", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.PatchVideoDiscriminator.forward": [[123, 127], ["mocogan.PatchVideoDiscriminator.main().squeeze", "mocogan.PatchVideoDiscriminator.main"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.make_ucf101_tgan.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h", "=", "self", ".", "main", "(", "input", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "h", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoDiscriminator.__init__": [[130, 159], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mocogan.Noise", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "mocogan.Noise", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "mocogan.Noise", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "mocogan.Noise", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "n_output_neurons", "=", "1", ",", "bn_use_gamma", "=", "True", ",", "use_noise", "=", "False", ",", "noise_sigma", "=", "None", ",", "ndf", "=", "64", ")", ":", "\n", "        ", "super", "(", "VideoDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "n_output_neurons", "=", "n_output_neurons", "\n", "self", ".", "use_noise", "=", "use_noise", "\n", "self", ".", "bn_use_gamma", "=", "bn_use_gamma", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv3d", "(", "n_channels", ",", "ndf", ",", "4", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv3d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv3d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ",", "\n", "nn", ".", "Conv3d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv3d", "(", "ndf", "*", "8", ",", "n_output_neurons", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoDiscriminator.forward": [[161, 165], ["mocogan.VideoDiscriminator.main().squeeze", "mocogan.VideoDiscriminator.main"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.make_ucf101_tgan.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h", "=", "self", ".", "main", "(", "input", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "h", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.CategoricalVideoDiscriminator.__init__": [[168, 175], ["mocogan.VideoDiscriminator.__init__"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "dim_categorical", ",", "n_output_neurons", "=", "1", ",", "use_noise", "=", "False", ",", "noise_sigma", "=", "None", ")", ":", "\n", "        ", "super", "(", "CategoricalVideoDiscriminator", ",", "self", ")", ".", "__init__", "(", "n_channels", "=", "n_channels", ",", "\n", "n_output_neurons", "=", "n_output_neurons", "+", "dim_categorical", ",", "\n", "use_noise", "=", "use_noise", ",", "\n", "noise_sigma", "=", "noise_sigma", ")", "\n", "\n", "self", ".", "dim_categorical", "=", "dim_categorical", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.CategoricalVideoDiscriminator.split": [[176, 178], ["input.size", "input.size"], "methods", ["None"], ["", "def", "split", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "[", ":", ",", ":", "input", ".", "size", "(", "1", ")", "-", "self", ".", "dim_categorical", "]", ",", "input", "[", ":", ",", "input", ".", "size", "(", "1", ")", "-", "self", ".", "dim_categorical", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.CategoricalVideoDiscriminator.forward": [[179, 183], ["mocogan.VideoDiscriminator.forward", "mocogan.CategoricalVideoDiscriminator.split"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.Generator_CLSTM.forward", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.CategoricalVideoDiscriminator.split"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h", ",", "_", "=", "super", "(", "CategoricalVideoDiscriminator", ",", "self", ")", ".", "forward", "(", "input", ")", "\n", "labels", ",", "categ", "=", "self", ".", "split", "(", "h", ")", "\n", "return", "labels", ",", "categ", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.__init__": [[186, 215], ["torch.Module.__init__", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "dim_z_content", ",", "dim_z_category", ",", "dim_z_motion", ",", "\n", "video_length", ",", "ngf", "=", "64", ")", ":", "\n", "        ", "super", "(", "VideoGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "dim_z_content", "=", "dim_z_content", "\n", "self", ".", "dim_z_category", "=", "dim_z_category", "\n", "self", ".", "dim_z_motion", "=", "dim_z_motion", "\n", "self", ".", "video_length", "=", "video_length", "\n", "\n", "dim_z", "=", "dim_z_motion", "+", "dim_z_category", "+", "dim_z_content", "\n", "\n", "self", ".", "recurrent", "=", "nn", ".", "GRUCell", "(", "dim_z_motion", ",", "dim_z_motion", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "dim_z", ",", "ngf", "*", "8", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "4", ",", "ngf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "2", ",", "ngf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", ",", "self", ".", "n_channels", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_z_m": [[217, 230], ["range", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "mocogan.VideoGenerator.get_gru_initial_state", "mocogan.VideoGenerator.get_iteration_noise", "h_t.append", "h_k.view", "mocogan.VideoGenerator.recurrent", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.get_gru_initial_state", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.get_iteration_noise"], ["", "def", "sample_z_m", "(", "self", ",", "num_samples", ",", "video_len", "=", "None", ")", ":", "\n", "        ", "video_len", "=", "video_len", "if", "video_len", "is", "not", "None", "else", "self", ".", "video_length", "\n", "\n", "h_t", "=", "[", "self", ".", "get_gru_initial_state", "(", "num_samples", ")", "]", "\n", "\n", "for", "frame_num", "in", "range", "(", "video_len", ")", ":", "\n", "            ", "e_t", "=", "self", ".", "get_iteration_noise", "(", "num_samples", ")", "\n", "h_t", ".", "append", "(", "self", ".", "recurrent", "(", "e_t", ",", "h_t", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "z_m_t", "=", "[", "h_k", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "dim_z_motion", ")", "for", "h_k", "in", "h_t", "]", "\n", "z_m", "=", "torch", ".", "cat", "(", "z_m_t", "[", "1", ":", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "dim_z_motion", ")", "\n", "\n", "return", "z_m", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_z_categ": [[231, 248], ["numpy.random.randint", "numpy.zeros", "numpy.repeat", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "one_hot_video.cuda.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.zeros", "numpy.arange"], "methods", ["None"], ["", "def", "sample_z_categ", "(", "self", ",", "num_samples", ",", "video_len", ")", ":", "\n", "        ", "video_len", "=", "video_len", "if", "video_len", "is", "not", "None", "else", "self", ".", "video_length", "\n", "\n", "if", "self", ".", "dim_z_category", "<=", "0", ":", "\n", "            ", "return", "None", ",", "np", ".", "zeros", "(", "num_samples", ")", "\n", "\n", "", "classes_to_generate", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "dim_z_category", ",", "size", "=", "num_samples", ")", "\n", "one_hot", "=", "np", ".", "zeros", "(", "(", "num_samples", ",", "self", ".", "dim_z_category", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "one_hot", "[", "np", ".", "arange", "(", "num_samples", ")", ",", "classes_to_generate", "]", "=", "1", "\n", "one_hot_video", "=", "np", ".", "repeat", "(", "one_hot", ",", "video_len", ",", "axis", "=", "0", ")", "\n", "\n", "one_hot_video", "=", "torch", ".", "from_numpy", "(", "one_hot_video", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "one_hot_video", "=", "one_hot_video", ".", "cuda", "(", ")", "\n", "\n", "", "return", "Variable", "(", "one_hot_video", ")", ",", "classes_to_generate", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_z_content": [[249, 258], ["numpy.random.normal().astype", "numpy.repeat", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "content.cuda.cuda.cuda", "numpy.random.normal"], "methods", ["None"], ["", "def", "sample_z_content", "(", "self", ",", "num_samples", ",", "video_len", "=", "None", ")", ":", "\n", "        ", "video_len", "=", "video_len", "if", "video_len", "is", "not", "None", "else", "self", ".", "video_length", "\n", "\n", "content", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "num_samples", ",", "self", ".", "dim_z_content", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "content", "=", "np", ".", "repeat", "(", "content", ",", "video_len", ",", "axis", "=", "0", ")", "\n", "content", "=", "torch", ".", "from_numpy", "(", "content", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "content", "=", "content", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_z_video": [[259, 270], ["mocogan.VideoGenerator.sample_z_content", "mocogan.VideoGenerator.sample_z_categ", "mocogan.VideoGenerator.sample_z_m", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_z_content", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_z_categ", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.VideoGeneratorSDE.sample_z_m"], ["", "def", "sample_z_video", "(", "self", ",", "num_samples", ",", "video_len", "=", "None", ")", ":", "\n", "        ", "z_content", "=", "self", ".", "sample_z_content", "(", "num_samples", ",", "video_len", ")", "\n", "z_category", ",", "z_category_labels", "=", "self", ".", "sample_z_categ", "(", "num_samples", ",", "video_len", ")", "\n", "z_motion", "=", "self", ".", "sample_z_m", "(", "num_samples", ",", "video_len", ")", "\n", "\n", "if", "z_category", "is", "not", "None", ":", "\n", "            ", "z", "=", "torch", ".", "cat", "(", "[", "z_content", ",", "z_category", ",", "z_motion", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "z", "=", "torch", ".", "cat", "(", "[", "z_content", ",", "z_motion", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "z", ",", "z_category_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_videos": [[271, 286], ["mocogan.VideoGenerator.sample_z_video", "mocogan.VideoGenerator.main", "h.permute.permute.view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "h.permute.permute.permute", "z.view", "h.permute.permute.size", "h.permute.permute.size", "z_category_labels.cuda.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "z.size", "z.size", "h.permute.permute.size"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_z_video", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.make_ucf101_tgan.main"], ["", "def", "sample_videos", "(", "self", ",", "num_samples", ",", "video_len", "=", "None", ")", ":", "\n", "        ", "video_len", "=", "video_len", "if", "video_len", "is", "not", "None", "else", "self", ".", "video_length", "\n", "\n", "z", ",", "z_category_labels", "=", "self", ".", "sample_z_video", "(", "num_samples", ",", "video_len", ")", "\n", "\n", "h", "=", "self", ".", "main", "(", "z", ".", "view", "(", "z", ".", "size", "(", "0", ")", ",", "z", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", ")", "\n", "h", "=", "h", ".", "view", "(", "h", ".", "size", "(", "0", ")", "//", "video_len", ",", "video_len", ",", "self", ".", "n_channels", ",", "h", ".", "size", "(", "3", ")", ",", "h", ".", "size", "(", "3", ")", ")", "\n", "\n", "z_category_labels", "=", "torch", ".", "from_numpy", "(", "z_category_labels", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "z_category_labels", "=", "z_category_labels", ".", "cuda", "(", ")", "\n", "\n", "", "h", "=", "h", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "\n", "return", "h", ",", "Variable", "(", "z_category_labels", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_images": [[287, 296], ["mocogan.VideoGenerator.sample_z_video", "numpy.sort().astype", "z.view.view.view", "mocogan.VideoGenerator.main", "z.view.view.size", "z.view.view.size", "numpy.sort", "numpy.random.choice", "z.view.view.size"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.sample_z_video", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.ucf101.make_ucf101_tgan.main"], ["", "def", "sample_images", "(", "self", ",", "num_samples", ")", ":", "\n", "        ", "z", ",", "z_category_labels", "=", "self", ".", "sample_z_video", "(", "num_samples", "*", "self", ".", "video_length", "*", "2", ")", "\n", "\n", "j", "=", "np", ".", "sort", "(", "np", ".", "random", ".", "choice", "(", "z", ".", "size", "(", "0", ")", ",", "num_samples", ",", "replace", "=", "False", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "z", "=", "z", "[", "j", ",", ":", ":", "]", "\n", "z", "=", "z", ".", "view", "(", "z", ".", "size", "(", "0", ")", ",", "z", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "h", "=", "self", ".", "main", "(", "z", ")", "\n", "\n", "return", "h", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.get_gru_initial_state": [[297, 299], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "T.FloatTensor().normal_", "T.FloatTensor"], "methods", ["None"], ["", "def", "get_gru_initial_state", "(", "self", ",", "num_samples", ")", ":", "\n", "        ", "return", "Variable", "(", "T", ".", "FloatTensor", "(", "num_samples", ",", "self", ".", "dim_z_motion", ")", ".", "normal_", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan.VideoGenerator.get_iteration_noise": [[300, 302], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "T.FloatTensor().normal_", "T.FloatTensor"], "methods", ["None"], ["", "def", "get_iteration_noise", "(", "self", ",", "num_samples", ")", ":", "\n", "        ", "return", "Variable", "(", "T", ".", "FloatTensor", "(", "num_samples", ",", "self", ".", "dim_z_motion", ")", ".", "normal_", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.ode_gen.ODEFunc.__init__": [[9, 28], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "math.sqrt", "ode_gen.ODEFunc.fn.add_module", "ode_gen.ODEFunc.fn.add_module", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "dim_hidden", "=", "None", ")", ":", "\n", "        ", "\"\"\"Acts as the equivalent to an RNN cell but for an ODE\n\n        Args:\n            dim (int): Latent Channels for ODE\n            conv_cat (bool, optional): Concatenate time. Defaults to True.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "dim_hidden", "=", "dim_hidden", "if", "dim_hidden", "else", "dim", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "# We need a continuously diff func", "\n", "self", ".", "fn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim", ",", "dim_hidden", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fn", "[", "0", "]", ".", "weight", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "if", "dim_hidden", "!=", "dim", ":", "\n", "            ", "self", ".", "fn", ".", "add_module", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "dim_hidden", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "fn", ".", "add_module", "(", "'leakyRelu2'", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fn", "[", "2", "]", ".", "weight", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.ode_gen.ODEFunc.forward": [[29, 34], ["ode_gen.ODEFunc.requires_grad_", "ode_gen.ODEFunc.fn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "x", ".", "requires_grad_", "(", ")", "\n", "x", "=", "self", ".", "fn", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.ode_gen.NOODEFunc.__init__": [[37, 51], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "conv_cat", "=", "True", ")", ":", "\n", "        ", "\"\"\"Acts as the equivalent to an RNN cell but for an\n        Nth order ODE\n\n        Args:\n            dim (int): Latent Channels for ODE\n            conv_cat (bool, optional): Concatenate time. Defaults to True.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv_cat", "=", "conv_cat", "\n", "add", "=", "1", "if", "conv_cat", "else", "0", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "dim", "+", "add", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "conv", ".", "weight", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.ode_gen.NOODEFunc.forward": [[52, 65], ["isinstance", "torch.cat.requires_grad_", "torch.cat.requires_grad_", "ode_gen.NOODEFunc.conv", "ode_gen.NOODEFunc.relu", "tuple", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "tuple", ")", "\n", "# highest order derivative", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", "[", "0", "]", ".", "shape", "\n", "if", "self", ".", "conv_cat", ":", "\n", "            ", "conc", "=", "torch", ".", "ones", "(", "(", "N", ",", "1", ",", "H", ",", "W", ")", ",", "device", "=", "x", "[", "0", "]", ".", "device", ",", "\n", "requires_grad", "=", "True", ")", "\n", "z", "=", "torch", ".", "cat", "(", "[", "conc", ",", "x", "[", "0", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "z", ".", "requires_grad_", "(", ")", "\n", "z", "=", "self", ".", "conv", "(", "z", ")", "\n", "z", "=", "self", ".", "relu", "(", "z", ")", "\n", "\n", "return", "tuple", "(", "[", "x", "[", "i", "-", "1", "]", "if", "i", "else", "z", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.ode_gen.ODEGen.__init__": [[68, 81], ["torch.Module.__init__", "ode_gen.ODEFunc"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_frames", ",", "dim", ",", "dim_hidden", "=", "None", ",", "int_t", "=", "1", ")", ":", "\n", "        ", "\"\"\"Acts as the full ODE solver for the temporal latent space\n\n        Args:\n            num_frames (int): Number of frames\n            dim (int): Latent channels\n            conv_cat (bool, optional): Concatenate time. Defaults to True.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "ode_fn", "=", "ODEFunc", "(", "dim", ",", "dim_hidden", ")", "\n", "self", ".", "int_t", "=", "int_t", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.ode_gen.ODEGen.forward": [[82, 89], ["torchdiffeq.odeint_adjoint", "torchdiffeq.odeint_adjoint.transpose().contiguous", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "isinstance", "torchdiffeq.odeint_adjoint.transpose", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "odeint", "(", "self", ".", "ode_fn", ",", "x", ",", "\n", "torch", ".", "linspace", "(", "0", ",", "self", ".", "int_t", ",", "self", ".", "num_frames", ")", ".", "float", "(", ")", ",", "\n", "method", "=", "'rk4'", ")", "\n", "\n", "x", "=", "x", "[", "-", "1", "]", "if", "isinstance", "(", "x", ",", "tuple", ")", "else", "x", "\n", "return", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.ode_gen.NOODEGen.__init__": [[92, 103], ["ode_gen.ODEGen.__init__", "ode_gen.NOODEFunc"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_frames", ",", "dim", ",", "conv_cat", "=", "True", ",", "int_t", "=", "1", ")", ":", "\n", "        ", "\"\"\"Acts as the full ODE solver for the Nth order temporal\n        latent space\n\n        Args:\n            num_frames (int): Number of frames\n            dim (int): Latent channels\n            conv_cat (bool, optional): Concatenate time. Defaults to True.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "num_frames", ",", "dim", ",", "conv_cat", ",", "int_t", ")", "\n", "self", ".", "ode_fn", "=", "NOODEFunc", "(", "dim", ",", "conv_cat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.ode_gen.GeneratorODE.__init__": [[106, 125], ["models.tganv2_gen.Generator_CLSTM.__init__", "ode_gen.ODEGen"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", "=", "256", ",", "\n", "tempc", "=", "1024", ",", "\n", "zt_dim", "=", "3", ",", "\n", "upchannels", "=", "[", "512", ",", "256", ",", "128", "]", ",", "\n", "subchannels", "=", "[", "64", ",", "32", ",", "32", "]", ",", "\n", "n_frames", "=", "16", ",", "\n", "colors", "=", "3", ",", "\n", "subsample", "=", "4", ",", "\n", "dim_hidden", "=", "None", ",", "\n", "int_t", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "z_dim", ",", "\n", "tempc", ",", "\n", "zt_dim", ",", "\n", "upchannels", ",", "\n", "subchannels", ",", "\n", "n_frames", ",", "\n", "colors", ",", "\n", "subsample", ")", "\n", "self", ".", "temp", "=", "ODEGen", "(", "n_frames", ",", "tempc", ",", "dim_hidden", ",", "int_t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.ode_gen.GeneratorNOODE.__init__": [[128, 151], ["models.tganv2_gen.Generator_CLSTM.__init__", "ode_gen.NOODEGen", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", "=", "256", ",", "\n", "tempc", "=", "1024", ",", "\n", "zt_dim", "=", "3", ",", "\n", "upchannels", "=", "[", "512", ",", "256", ",", "128", "]", ",", "\n", "subchannels", "=", "[", "64", ",", "32", ",", "32", "]", ",", "\n", "n_frames", "=", "16", ",", "\n", "colors", "=", "3", ",", "\n", "subsample", "=", "4", ",", "\n", "dim_hidden", "=", "None", ",", "\n", "int_t", "=", "1", ",", "\n", "order", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "z_dim", ",", "\n", "tempc", ",", "\n", "zt_dim", ",", "\n", "upchannels", ",", "\n", "subchannels", ",", "\n", "n_frames", ",", "\n", "colors", ",", "\n", "subsample", "=", "4", ")", "\n", "self", ".", "temp", "=", "NOODEGen", "(", "n_frames", ",", "tempc", ",", "dim_hidden", ",", "int_t", ")", "\n", "del", "self", ".", "fc", "\n", "self", ".", "dsdt_encoders", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Linear", "(", "z_dim", ",", "zt_dim", "**", "2", "*", "tempc", ")", "for", "i", "in", "range", "(", "order", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.ode_gen.GeneratorNOODE.forward": [[153, 191], ["ode_gen.GeneratorNOODE.temp", "ode_gen.GeneratorNOODE.view", "ode_gen.GeneratorNOODE.build", "f", "i.view", "tuple", "ode_gen.GeneratorNOODE.sup1", "ode_gen.GeneratorNOODE.sup2", "ode_gen.GeneratorNOODE.sup3", "ode_gen.GeneratorNOODE.sup3r().view().transpose", "ode_gen.GeneratorNOODE.buildr().view", "ode_gen.GeneratorNOODE.subsample", "ode_gen.GeneratorNOODE.sup1", "ode_gen.GeneratorNOODE.sup1r().view", "ode_gen.GeneratorNOODE.subsample", "ode_gen.GeneratorNOODE.sup2", "ode_gen.GeneratorNOODE.sup2r().view", "ode_gen.GeneratorNOODE.subsample", "ode_gen.GeneratorNOODE.sup3", "ode_gen.GeneratorNOODE.sup3r().view", "len", "ode_gen.GeneratorNOODE.sup3r().view", "ode_gen.GeneratorNOODE.buildr", "ode_gen.GeneratorNOODE.sup1r", "ode_gen.GeneratorNOODE.sup2r", "ode_gen.GeneratorNOODE.sup3r", "ode_gen.GeneratorNOODE.sup3r"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.f", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.Generator_CLSTM.subsample", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.Generator_CLSTM.subsample", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.Generator_CLSTM.subsample"], ["", "def", "forward", "(", "self", ",", "z", ",", "test", "=", "False", ")", ":", "\n", "        ", "h", "=", "[", "f", "(", "z", ")", "for", "f", "in", "self", ".", "dsdt_encoders", "]", "\n", "h", "=", "[", "i", ".", "view", "(", "-", "1", ",", "self", ".", "tempc", ",", "self", ".", "zt_dim", ",", "self", ".", "zt_dim", ")", "for", "i", "in", "h", "]", "\n", "h", "=", "self", ".", "temp", "(", "tuple", "(", "h", ")", ")", "\n", "N", ",", "T", ",", "C", ",", "H", ",", "W", "=", "h", ".", "shape", "\n", "h", "=", "h", ".", "view", "(", "N", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "h", "=", "self", ".", "build", "(", "h", ")", "\n", "\n", "outsize", "=", "self", ".", "zt_dim", "*", "2", "**", "(", "len", "(", "self", ".", "build", ")", "+", "3", ")", "\n", "\n", "if", "test", ":", "\n", "            ", "h", "=", "self", ".", "sup1", "(", "h", ")", "\n", "h", "=", "self", ".", "sup2", "(", "h", ")", "\n", "h", "=", "self", ".", "sup3", "(", "h", ")", "\n", "h", "=", "self", ".", "sup3r", "(", "h", ")", ".", "view", "(", "N", ",", "T", ",", "self", ".", "colors", ",", "outsize", ",", "\n", "outsize", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "return", "h", "\n", "", "else", ":", "\n", "# render 1st", "\n", "            ", "x1", "=", "self", ".", "buildr", "(", "h", ")", ".", "view", "(", "N", ",", "T", ",", "self", ".", "colors", ",", "outsize", "//", "8", ",", "\n", "outsize", "//", "8", ")", "\n", "h", ",", "T", "=", "self", ".", "subsample", "(", "h", ",", "N", ",", "T", ")", "\n", "h", "=", "self", ".", "sup1", "(", "h", ")", "\n", "# render 2nd", "\n", "x2", "=", "self", ".", "sup1r", "(", "h", ")", ".", "view", "(", "N", ",", "T", ",", "self", ".", "colors", ",", "outsize", "//", "4", ",", "\n", "outsize", "//", "4", ")", "\n", "h", ",", "T", "=", "self", ".", "subsample", "(", "h", ",", "N", ",", "T", ")", "\n", "h", "=", "self", ".", "sup2", "(", "h", ")", "\n", "# render 3rd", "\n", "x3", "=", "self", ".", "sup2r", "(", "h", ")", ".", "view", "(", "N", ",", "T", ",", "self", ".", "colors", ",", "outsize", "//", "2", ",", "\n", "outsize", "//", "2", ")", "\n", "h", ",", "T", "=", "self", ".", "subsample", "(", "h", ",", "N", ",", "T", ")", "\n", "h", "=", "self", ".", "sup3", "(", "h", ")", "\n", "# render 4th", "\n", "x4", "=", "self", ".", "sup3r", "(", "h", ")", ".", "view", "(", "N", ",", "T", ",", "self", ".", "colors", ",", "outsize", ",", "outsize", ")", "\n", "\n", "", "return", "x1", ",", "x2", ",", "x3", ",", "x4", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.ODEFunc.__init__": [[8, 14], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.ODEFunc.forward": [[16, 18], ["mocogan_ode.ODEFunc.fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.ODEFuncDeep.__init__": [[21, 28], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "dim_hidden", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim", ",", "dim_hidden", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_hidden", ",", "dim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.ODEFuncDeep.forward": [[30, 32], ["mocogan_ode.ODEFuncDeep.fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.SDEFunc.__init__": [[35, 50], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "dim_hidden", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "drift_fn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim", ",", "dim_hidden", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_hidden", ",", "dim", ")", "\n", ")", "\n", "self", ".", "diffusion_fn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim", ",", "dim_hidden", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_hidden", ",", "dim", ")", "\n", ")", "\n", "self", ".", "noise_type", "=", "\"diagonal\"", "\n", "self", ".", "sde_type", "=", "\"ito\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.SDEFunc.f": [[51, 53], ["mocogan_ode.SDEFunc.drift_fn"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "drift_fn", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.SDEFunc.g": [[54, 56], ["mocogan_ode.SDEFunc.diffusion_fn"], "methods", ["None"], ["", "def", "g", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "diffusion_fn", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.NOODEFunc.__init__": [[59, 65], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "dim_hidden", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim", ",", "dim_hidden", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_hidden", ",", "dim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.NOODEFunc.forward": [[67, 74], ["isinstance", "mocogan_ode.NOODEFunc.fn", "tuple", "range", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "tuple", ")", "\n", "# highest order derivative", "\n", "# z.requires_grad_()", "\n", "z", "=", "self", ".", "fn", "(", "x", "[", "0", "]", ")", "\n", "\n", "return", "tuple", "(", "[", "x", "[", "i", "-", "1", "]", "if", "i", "else", "z", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.VideoGenerator.__init__": [[77, 94], ["models.VideoGenerator.__init__", "ode_fn", "ode_fn", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "dim_z_content", ",", "dim_z_category", ",", "dim_z_motion", ",", "\n", "video_length", ",", "ode_fn", "=", "ODEFunc", ",", "dim_hidden", "=", "None", ",", "linear", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_channels", ",", "dim_z_content", ",", "dim_z_category", ",", "dim_z_motion", ",", "video_length", ")", "\n", "if", "dim_hidden", ":", "\n", "            ", "self", ".", "ode_fn", "=", "ode_fn", "(", "dim", "=", "dim_z_motion", ",", "dim_hidden", "=", "dim_hidden", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ode_fn", "=", "ode_fn", "(", "dim", "=", "dim_z_motion", ")", "\n", "\n", "", "if", "linear", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_z_motion", ",", "64", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "dim_z_motion", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.VideoGenerator.sample_z_m": [[95, 109], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "mocogan_ode.VideoGenerator.linear", "torchdiffeq.odeint_adjoint", "z_m_t.transpose().reshape.transpose().reshape.transpose().reshape", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "z_m_t.transpose().reshape.transpose().reshape.transpose", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["None"], ["", "", "def", "sample_z_m", "(", "self", ",", "num_samples", ",", "video_len", "=", "None", ")", ":", "\n", "        ", "video_len", "=", "video_len", "if", "video_len", "is", "not", "None", "else", "self", ".", "video_length", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "num_samples", ",", "self", ".", "dim_z_motion", ",", "device", "=", "'cuda'", ")", "\n", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "z_m_t", "=", "odeint", "(", "self", ".", "ode_fn", ",", "x", ",", "\n", "torch", ".", "linspace", "(", "0", ",", "1", ",", "video_len", ")", ".", "float", "(", ")", ",", "\n", "method", "=", "'rk4'", ")", "\n", "\n", "z_m_t", "=", "z_m_t", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "dim_z_motion", ")", "\n", "\n", "return", "z_m_t", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.VideoGeneratorNOODE.__init__": [[112, 116], ["mocogan_ode.VideoGenerator.__init__", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "dim_z_content", ",", "dim_z_category", ",", "dim_z_motion", ",", "video_length", ",", "dim_hidden", "=", "None", ",", "order", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_channels", ",", "dim_z_content", ",", "dim_z_category", ",", "dim_z_motion", ",", "video_length", ",", "ode_fn", "=", "NOODEFunc", ",", "dim_hidden", "=", "dim_hidden", ",", "linear", "=", "False", ")", "\n", "self", ".", "dsdt_encoders", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Linear", "(", "dim_z_motion", ",", "dim_z_motion", ")", "for", "i", "in", "range", "(", "order", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.VideoGeneratorNOODE.sample_z_m": [[118, 132], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "tuple", "z_m_t.transpose().reshape.transpose().reshape.transpose().reshape", "torchdiffeq.odeint_adjoint", "f", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "z_m_t.transpose().reshape.transpose().reshape.transpose", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.f"], ["", "def", "sample_z_m", "(", "self", ",", "num_samples", ",", "video_len", "=", "None", ")", ":", "\n", "        ", "video_len", "=", "video_len", "if", "video_len", "is", "not", "None", "else", "self", ".", "video_length", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "num_samples", ",", "self", ".", "dim_z_motion", ",", "device", "=", "'cuda'", ")", "\n", "\n", "x", "=", "tuple", "(", "[", "f", "(", "x", ")", "for", "f", "in", "self", ".", "dsdt_encoders", "]", ")", "\n", "\n", "z_m_t", "=", "odeint", "(", "self", ".", "ode_fn", ",", "x", ",", "\n", "torch", ".", "linspace", "(", "0", ",", "1", ",", "video_len", ")", ".", "float", "(", ")", ",", "\n", "method", "=", "'rk4'", ")", "[", "-", "1", "]", "\n", "\n", "z_m_t", "=", "z_m_t", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "dim_z_motion", ")", "\n", "\n", "return", "z_m_t", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.VideoGeneratorSDE.__init__": [[135, 137], ["mocogan_ode.VideoGenerator.__init__"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "dim_z_content", ",", "dim_z_category", ",", "dim_z_motion", ",", "video_length", ",", "dim_hidden", "=", "None", ",", "linear", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_channels", ",", "dim_z_content", ",", "dim_z_category", ",", "dim_z_motion", ",", "video_length", ",", "ode_fn", "=", "SDEFunc", ",", "dim_hidden", "=", "dim_hidden", ",", "linear", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.mocogan_ode.VideoGeneratorSDE.sample_z_m": [[138, 152], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "mocogan_ode.VideoGeneratorSDE.linear", "torchsde.sdeint_adjoint", "z_m_t.transpose().reshape.transpose().reshape.transpose().reshape", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "z_m_t.transpose().reshape.transpose().reshape.transpose", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["None"], ["", "def", "sample_z_m", "(", "self", ",", "num_samples", ",", "video_len", "=", "None", ")", ":", "\n", "        ", "video_len", "=", "video_len", "if", "video_len", "is", "not", "None", "else", "self", ".", "video_length", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "num_samples", ",", "self", ".", "dim_z_motion", ",", "device", "=", "'cuda'", ")", "\n", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "z_m_t", "=", "sdeint", "(", "self", ".", "ode_fn", ",", "x", ",", "\n", "torch", ".", "linspace", "(", "0", ",", "1", ",", "video_len", ")", ".", "float", "(", ")", ",", "\n", "method", "=", "'euler'", ",", "adjoint_method", "=", "'euler'", ",", "dt", "=", "2.5e-2", ")", "\n", "\n", "z_m_t", "=", "z_m_t", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "dim_z_motion", ")", "\n", "\n", "return", "z_m_t", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.ODEFunc.__init__": [[9, 17], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "100", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "100", ",", "100", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fn", "[", "0", "]", ".", "weight", ",", "gain", "=", "2", "**", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.ODEFunc.forward": [[18, 20], ["tgan_ode.ODEFunc.fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.ODEFuncDeep.__init__": [[23, 33], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "100", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "100", ",", "dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "dim", ",", "100", ")", "\n", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fn", "[", "0", "]", ".", "weight", ",", "gain", "=", "2", "**", "0.5", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fn", "[", "2", "]", ".", "weight", ",", "gain", "=", "2", "**", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.ODEFuncDeep.forward": [[34, 36], ["tgan_ode.ODEFuncDeep.fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.SDEFunc.__init__": [[39, 55], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "drift_fn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "100", ",", "dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "diffusion_fn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "100", ",", "dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "noise_type", "=", "\"diagonal\"", "\n", "self", ".", "sde_type", "=", "\"ito\"", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "drift_fn", "[", "0", "]", ".", "weight", ",", "gain", "=", "2", "**", "0.5", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "diffusion_fn", "[", "0", "]", ".", "weight", ",", "gain", "=", "2", "**", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.SDEFunc.f": [[56, 58], ["tgan_ode.SDEFunc.drift_fn"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "drift_fn", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.SDEFunc.g": [[59, 61], ["tgan_ode.SDEFunc.diffusion_fn"], "methods", ["None"], ["", "def", "g", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "diffusion_fn", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.NOODEFunc.__init__": [[64, 72], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "100", ",", "dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fn", "[", "0", "]", ".", "weight", ",", "gain", "=", "2", "**", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.NOODEFunc.forward": [[73, 80], ["isinstance", "tgan_ode.NOODEFunc.fn", "tuple", "range", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "tuple", ")", "\n", "# highest order derivative", "\n", "# z.requires_grad_()", "\n", "z", "=", "self", ".", "fn", "(", "x", "[", "0", "]", ")", "\n", "\n", "return", "tuple", "(", "[", "x", "[", "i", "-", "1", "]", "if", "i", "else", "z", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.TemporalGeneratorODE.__init__": [[83, 101], ["torch.Module.__init__", "ode_fn", "torch.Sequential", "torch.Sequential", "tgan_ode.TemporalGeneratorODE.linear.apply", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_frames", "=", "16", ",", "dim", "=", "100", ",", "linear", "=", "False", ",", "ode_fn", "=", "ODEFunc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ode_fn", "=", "ode_fn", "(", "dim", "=", "dim", ")", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "do_linear", "=", "linear", "\n", "if", "linear", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "100", ",", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "100", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", ")", "\n", "\n", "self", ".", "linear", ".", "apply", "(", "self", ".", "init_linear_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.TemporalGeneratorODE.init_linear_weights": [[102, 105], ["type", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "", "def", "init_linear_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "2", "**", "0.5", ")", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.TemporalGeneratorODE.forward": [[105, 113], ["torchdiffeq.odeint_adjoint", "tgan_ode.TemporalGeneratorODE.transpose", "tgan_ode.TemporalGeneratorODE.linear", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "do_linear", ":", "\n", "            ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "", "x", "=", "odeint", "(", "self", ".", "ode_fn", ",", "x", ",", "\n", "torch", ".", "linspace", "(", "0", ",", "1", ",", "self", ".", "num_frames", ")", ".", "float", "(", ")", ",", "\n", "method", "=", "'rk4'", ")", "\n", "\n", "return", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.TemporalGeneratorSDE.__init__": [[116, 119], ["tgan_ode.TemporalGeneratorODE.__init__", "torch.linspace().float().cuda", "torch.linspace().float().cuda", "torch.linspace().float().cuda", "torch.linspace().float().cuda", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_frames", "=", "16", ",", "dim", "=", "100", ",", "linear", "=", "False", ",", "ode_fn", "=", "SDEFunc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_frames", "=", "num_frames", ",", "dim", "=", "dim", ",", "linear", "=", "linear", ",", "ode_fn", "=", "SDEFunc", ")", "\n", "self", ".", "ts", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "self", ".", "num_frames", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.TemporalGeneratorSDE.forward": [[120, 127], ["torchsde.sdeint_adjoint", "tgan_ode.TemporalGeneratorSDE.transpose", "tgan_ode.TemporalGeneratorSDE.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "do_linear", ":", "\n", "            ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "", "x", "=", "sdeint", "(", "self", ".", "ode_fn", ",", "x", ",", "self", ".", "ts", ",", "\n", "method", "=", "'euler'", ",", "adjoint_method", "=", "'euler'", ",", "dt", "=", "2.5e-2", ")", "\n", "\n", "return", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.TemporalGeneratorNOODE.__init__": [[130, 136], ["tgan_ode.TemporalGeneratorODE.__init__", "torch.ModuleList", "torch.ModuleList", "tgan_ode.TemporalGeneratorNOODE.dsdt_encoders.apply", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_frames", "=", "16", ",", "dim", "=", "100", ",", "linear", "=", "False", ",", "ode_fn", "=", "NOODEFunc", ",", "order", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_frames", "=", "num_frames", ",", "dim", "=", "dim", ",", "linear", "=", "linear", ",", "ode_fn", "=", "ode_fn", ")", "\n", "self", ".", "dsdt_encoders", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "for", "i", "in", "range", "(", "order", ")", "]", "\n", ")", "\n", "self", ".", "dsdt_encoders", ".", "apply", "(", "self", ".", "init_linear_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.TemporalGeneratorNOODE.forward": [[137, 146], ["tuple", "torchdiffeq.odeint_adjoint", "x[].transpose", "tgan_ode.TemporalGeneratorNOODE.linear", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "f", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.f"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "do_linear", ":", "\n", "            ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "", "x", "=", "tuple", "(", "[", "f", "(", "x", ")", "for", "f", "in", "self", ".", "dsdt_encoders", "]", ")", "\n", "x", "=", "odeint", "(", "self", ".", "ode_fn", ",", "x", ",", "\n", "torch", ".", "linspace", "(", "0", ",", "1", ",", "self", ".", "num_frames", ")", ".", "float", "(", ")", ",", "\n", "method", "=", "'rk4'", ")", "\n", "\n", "return", "x", "[", "-", "1", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.VideoGenerator.__init__": [[149, 152], ["models.VideoGenerator.__init__", "tgan_ode.TemporalGeneratorODE"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "100", ",", "linear", "=", "False", ",", "ode_fn", "=", "ODEFunc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temp", "=", "TemporalGeneratorODE", "(", "dim", "=", "dim", ",", "linear", "=", "linear", ",", "ode_fn", "=", "ode_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.VideoGeneratorSDE.__init__": [[155, 158], ["models.VideoGenerator.__init__", "tgan_ode.TemporalGeneratorSDE"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "100", ",", "linear", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temp", "=", "TemporalGeneratorSDE", "(", "dim", "=", "dim", ",", "linear", "=", "linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan_ode.VideoGeneratorNOODE.__init__": [[161, 164], ["models.VideoGenerator.__init__", "tgan_ode.TemporalGeneratorNOODE"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "100", ",", "linear", "=", "False", ",", "order", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temp", "=", "TemporalGeneratorNOODE", "(", "dim", "=", "dim", ",", "linear", "=", "linear", ",", "order", "=", "order", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.__init__": [[9, 24], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "\"\"\"A stochastic differential equation\n\n        Args:\n            dim (int): latent dimension\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv_drift", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_diffusion", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "noise_type", "=", "\"diagonal\"", "\n", "self", ".", "sde_type", "=", "\"ito\"", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "conv_drift", ".", "weight", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "conv_diffusion", ".", "weight", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.f": [[25, 30], ["sde_gen.SDE.conv_drift", "sde_gen.SDE.relu"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_drift", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDE.g": [[31, 36], ["sde_gen.SDE.conv_diffusion", "sde_gen.SDE.relu"], "methods", ["None"], ["", "def", "g", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_diffusion", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDEGen.__init__": [[39, 45], ["torch.Module.__init__", "sde_gen.SDE"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_frames", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "func", "=", "SDE", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.SDEGen.forward": [[46, 55], ["torchsde.sdeint_adjoint", "torchsde.sdeint_adjoint.transpose().contiguous", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "torch.linspace().float", "torchsde.sdeint_adjoint.transpose", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "sdeint", "(", "\n", "self", ".", "func", ",", "\n", "x", ",", "\n", "torch", ".", "linspace", "(", "0", ",", "1", ",", "self", ".", "num_frames", ")", ".", "float", "(", ")", ",", "\n", "method", "=", "'euler'", ",", "adjoint_method", "=", "'euler'", ",", "dt", "=", "5e-2", "\n", ")", "\n", "\n", "return", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.sde_gen.GeneratorSDE.__init__": [[58, 74], ["models.tganv2_gen.Generator_CLSTM.__init__", "sde_gen.SDEGen"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", "=", "256", ",", "\n", "tempc", "=", "1024", ",", "\n", "zt_dim", "=", "3", ",", "\n", "upchannels", "=", "[", "512", ",", "256", ",", "128", "]", ",", "\n", "subchannels", "=", "[", "64", ",", "32", ",", "32", "]", ",", "\n", "n_frames", "=", "16", ",", "\n", "colors", "=", "3", ",", "\n", "conv_cat", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "z_dim", ",", "\n", "tempc", ",", "\n", "zt_dim", ",", "\n", "upchannels", ",", "\n", "subchannels", ",", "\n", "n_frames", ",", "\n", "colors", ")", "\n", "self", ".", "temp", "=", "SDEGen", "(", "n_frames", ",", "tempc", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan.TemporalGenerator.__init__": [[6, 26], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "tgan.TemporalGenerator.model.apply", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_slow", "=", "100", ",", "z_fast", "=", "100", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose1d", "(", "z_slow", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose1d", "(", "512", ",", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose1d", "(", "256", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose1d", "(", "128", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose1d", "(", "128", ",", "100", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "self", ".", "model", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan.TemporalGenerator.init_weights": [[27, 30], ["type", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "type", "(", "m", ")", "==", "nn", ".", "ConvTranspose1d", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "2", "**", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan.TemporalGenerator.forward": [[31, 35], ["tgan.TemporalGenerator.view", "tgan.TemporalGenerator.model().transpose", "tgan.TemporalGenerator.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "100", ",", "1", ")", "\n", "x", "=", "self", ".", "model", "(", "x", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan.VideoGenerator.__init__": [[38, 73], ["torch.Module.__init__", "tgan.TemporalGenerator", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "tgan.VideoGenerator.fast.apply", "tgan.VideoGenerator.slow.apply", "tgan.VideoGenerator.model.apply", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_slow", "=", "100", ",", "z_fast", "=", "100", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temp", "=", "TemporalGenerator", "(", "z_slow", ",", "z_fast", ")", "\n", "\n", "self", ".", "fast", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "z_fast", ",", "256", "*", "4", "**", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", "*", "4", "**", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "slow", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "z_slow", ",", "256", "*", "4", "**", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", "*", "4", "**", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "512", ",", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "256", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "self", ".", "fast", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "self", ".", "slow", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "self", ".", "model", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan.VideoGenerator.init_weights": [[74, 77], ["torch.init.uniform_", "torch.init.uniform_", "type", "type"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "type", "(", "m", ")", "==", "nn", ".", "ConvTranspose2d", "or", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "            ", "nn", ".", "init", ".", "uniform_", "(", "m", ".", "weight", ",", "a", "=", "-", "0.01", ",", "b", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan.VideoGenerator.forward": [[78, 92], ["tgan.VideoGenerator.temp().contiguous", "tgan.VideoGenerator.view", "tgan.VideoGenerator.fast().view", "tgan.VideoGenerator.slow().view().unsqueeze", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tgan.VideoGenerator.model", "tgan.VideoGenerator.view().transpose", "tgan.VideoGenerator.temp", "tgan.VideoGenerator.fast", "tgan.VideoGenerator.slow().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tgan.VideoGenerator.view", "tgan.VideoGenerator.slow"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# to double check", "\n", "        ", "z_fast", "=", "self", ".", "temp", "(", "x", ")", ".", "contiguous", "(", ")", "\n", "z_fast", "=", "z_fast", ".", "view", "(", "-", "1", ",", "100", ")", "\n", "\n", "z_fast", "=", "self", ".", "fast", "(", "z_fast", ")", ".", "view", "(", "-", "1", ",", "256", ",", "4", ",", "4", ")", "\n", "z_slow", "=", "self", ".", "slow", "(", "x", ")", ".", "view", "(", "-", "1", ",", "256", ",", "4", ",", "4", ")", ".", "unsqueeze", "(", "1", ")", "\n", "z_slow", "=", "torch", ".", "cat", "(", "[", "z_slow", "]", "*", "16", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "256", ",", "4", ",", "4", ")", "\n", "\n", "z", "=", "torch", ".", "cat", "(", "[", "z_slow", ",", "z_fast", "]", ",", "dim", "=", "1", ")", "\n", "\n", "out", "=", "self", ".", "model", "(", "z", ")", "\n", "\n", "return", "out", ".", "view", "(", "-", "1", ",", "16", ",", "3", ",", "64", ",", "64", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan.VideoDiscriminator.__init__": [[95, 115], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "tgan.VideoDiscriminator.model3d.apply", "tgan.VideoDiscriminator.init_weights", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan.VideoDiscriminator.init_weights"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model3d", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "64", ",", "128", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "128", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "128", ",", "256", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "256", ",", "512", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", ")", "\n", "\n", "self", ".", "conv2d", "=", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "model3d", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "self", ".", "init_weights", "(", "self", ".", "conv2d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan.VideoDiscriminator.init_weights": [[116, 119], ["torch.init.xavier_normal_", "torch.init.xavier_normal_", "type", "type"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "type", "(", "m", ")", "==", "nn", ".", "Conv3d", "or", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ",", "gain", "=", "2", "**", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tgan.VideoDiscriminator.forward": [[120, 125], ["tgan.VideoDiscriminator.model3d", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "tgan.VideoDiscriminator.conv2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "model3d", "(", "x", ")", "\n", "h", "=", "torch", ".", "reshape", "(", "h", ",", "(", "32", ",", "512", ",", "4", ",", "4", ")", ")", "\n", "h", "=", "self", ".", "conv2d", "(", "h", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_dis.OptimizedDiscBlock.__init__": [[8, 20], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ")", ":", "\n", "        ", "super", "(", "OptimizedDiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c1", "=", "nn", ".", "Conv3d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "c2", "=", "nn", ".", "Conv3d", "(", "cout", ",", "cout", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "c_sc", "=", "nn", ".", "Conv3d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "avgp2d", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "\n", "# init", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "c1", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "c2", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "c_sc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_dis.OptimizedDiscBlock.forward": [[21, 31], ["tganv2_dis.OptimizedDiscBlock.c1", "tganv2_dis.OptimizedDiscBlock.relu", "tganv2_dis.OptimizedDiscBlock.c2", "tganv2_dis.OptimizedDiscBlock.avgp2d", "tganv2_dis.OptimizedDiscBlock.avgp2d", "tganv2_dis.OptimizedDiscBlock.c_sc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "c1", "(", "x", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "c2", "(", "h", ")", "\n", "h", "=", "self", ".", "avgp2d", "(", "h", ")", "\n", "\n", "s", "=", "self", ".", "avgp2d", "(", "x", ")", "\n", "s", "=", "self", ".", "c_sc", "(", "s", ")", "\n", "\n", "return", "h", "+", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_dis.DisBlock.__init__": [[34, 45], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ")", ":", "\n", "        ", "super", "(", "DisBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c1", "=", "nn", ".", "Conv3d", "(", "cin", ",", "cin", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "c2", "=", "nn", ".", "Conv3d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "s_sc", "=", "nn", ".", "Conv3d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# init", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "c1", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "c2", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "s_sc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_dis.DisBlock.downsample": [[46, 55], ["torch.pad", "torch.pad", "torch.pad", "torch.avg_pool3d", "torch.avg_pool3d", "torch.avg_pool3d", "padf.append", "padf.append"], "methods", ["None"], ["", "def", "downsample", "(", "self", ",", "x", ")", ":", "\n", "        ", "ksize", "=", "[", "(", "2", "if", "1", "<", "k", "else", "1", ")", "for", "k", "in", "x", ".", "shape", "[", "2", ":", "]", "]", "\n", "pad", "=", "[", "(", "0", "if", "k", "%", "2", "==", "0", "else", "1", ")", "for", "k", "in", "x", ".", "shape", "[", "2", ":", "]", "]", "[", ":", ":", "-", "1", "]", "\n", "padf", "=", "[", "]", "\n", "for", "p", "in", "pad", ":", "\n", "            ", "padf", ".", "append", "(", "p", ")", "\n", "padf", ".", "append", "(", "p", ")", "\n", "", "x", "=", "F", ".", "pad", "(", "x", ",", "padf", ")", "\n", "return", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "ksize", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_dis.DisBlock.forward": [[56, 66], ["tganv2_dis.DisBlock.relu", "tganv2_dis.DisBlock.c1", "tganv2_dis.DisBlock.relu", "tganv2_dis.DisBlock.c2", "tganv2_dis.DisBlock.downsample", "tganv2_dis.DisBlock.s_sc", "tganv2_dis.DisBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_dis.DisBlock.downsample", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_dis.DisBlock.downsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "relu", "(", "x", ")", "\n", "h", "=", "self", ".", "c1", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "c2", "(", "h", ")", "\n", "h", "=", "self", ".", "downsample", "(", "h", ")", "\n", "\n", "s", "=", "self", ".", "s_sc", "(", "x", ")", "\n", "s", "=", "self", ".", "downsample", "(", "s", ")", "\n", "return", "h", "+", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_dis.DisResNet.__init__": [[69, 88], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "len", "tganv2_dis.DisResNet.convs.add_module", "tganv2_dis.DisResNet.convs.add_module", "tganv2_dis.OptimizedDiscBlock", "tganv2_dis.DisBlock"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "colors", "=", "3", ")", ":", "\n", "        ", "super", "(", "DisResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "colors", "=", "colors", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "channels", ")", ")", ":", "\n", "            ", "if", "not", "i", ":", "\n", "                ", "self", ".", "convs", ".", "add_module", "(", "\n", "'OptDisc'", ",", "\n", "OptimizedDiscBlock", "(", "colors", ",", "channels", "[", "0", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "convs", ".", "add_module", "(", "\n", "f'Down{i}'", ",", "\n", "DisBlock", "(", "channels", "[", "i", "-", "1", "]", ",", "channels", "[", "i", "]", ")", "\n", ")", "\n", "\n", "", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "channels", "[", "-", "1", "]", ",", "1", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_dis.DisResNet.forward": [[89, 97], ["tganv2_dis.DisResNet.convs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "tganv2_dis.DisResNet.fc", "x.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "shape", "[", "2", "]", "==", "self", ".", "colors", ":", "\n", "            ", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "h", "=", "self", ".", "convs", "(", "x", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "(", "2", ",", "3", ",", "4", ")", ")", "\n", "h", "=", "self", ".", "fc", "(", "h", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_dis.DisMultiResNet.__init__": [[100, 105], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "tganv2_dis.DisResNet", "range"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layers", "=", "4", ",", "channels", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "colors", "=", "3", ")", ":", "\n", "        ", "super", "(", "DisMultiResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "res", "=", "nn", ".", "ModuleList", "(", "\n", "[", "DisResNet", "(", "channels", ",", "colors", ")", "for", "_", "in", "range", "(", "layers", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_dis.DisMultiResNet.forward": [[107, 115], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "self", ".", "layers", "==", "len", "(", "x", ")", "\n", "out", "=", "[", "self", ".", "res", "[", "i", "]", "(", "x", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "layers", ")", "]", "\n", "out", "=", "torch", ".", "cat", "(", "out", ",", "dim", "=", "0", ")", "\n", "# out = sum(out)", "\n", "# out = torch.sigmoid(out)", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.CLSTM_cell.__init__": [[8, 14], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_filters", ")", ":", "\n", "        ", "super", "(", "CLSTM_cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_x", "=", "nn", ".", "Conv2d", "(", "n_filters", ",", "n_filters", "*", "4", ",", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "w_h", "=", "nn", ".", "Conv2d", "(", "n_filters", ",", "n_filters", "*", "4", ",", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.CLSTM_cell.forward": [[15, 33], ["tganv2_gen.CLSTM_cell.w_x", "tganv2_gen.CLSTM_cell.chunk", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "tganv2_gen.CLSTM_cell.w_h().chunk", "torch.zeros_like().chunk", "torch.zeros_like().chunk", "torch.zeros_like().chunk", "torch.zeros_like().chunk", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "tganv2_gen.CLSTM_cell.w_h", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "h", "=", "None", ",", "c", "=", "None", ")", ":", "\n", "        ", "xifoc", "=", "self", ".", "w_x", "(", "x", ")", "\n", "xi", ",", "xf", ",", "xo", ",", "xc", "=", "xifoc", ".", "chunk", "(", "4", ",", "dim", "=", "1", ")", "\n", "if", "h", "is", "not", "None", ":", "\n", "            ", "hi", ",", "hf", ",", "ho", ",", "hc", "=", "self", ".", "w_h", "(", "h", ")", ".", "chunk", "(", "4", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "hi", ",", "hf", ",", "ho", ",", "hc", "=", "torch", ".", "zeros_like", "(", "xifoc", ")", ".", "chunk", "(", "4", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "c", "is", "None", ":", "\n", "            ", "c", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "\n", "", "ci", "=", "torch", ".", "sigmoid", "(", "xi", "+", "hi", ")", "\n", "cf", "=", "torch", ".", "sigmoid", "(", "xf", "+", "hf", ")", "\n", "co", "=", "torch", ".", "sigmoid", "(", "xo", "+", "ho", ")", "\n", "cc", "=", "cf", "*", "c", "+", "ci", "*", "torch", ".", "tanh", "(", "xc", "+", "hc", ")", "\n", "ch", "=", "torch", ".", "tanh", "(", "cc", ")", "*", "co", "\n", "\n", "return", "ch", ",", "cc", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.CLSTM.__init__": [[36, 40], ["torch.Module.__init__", "tganv2_gen.CLSTM_cell"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_filters", ",", "n_frames", ")", ":", "\n", "        ", "super", "(", "CLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cell", "=", "CLSTM_cell", "(", "n_filters", ")", "\n", "self", ".", "n_frames", "=", "n_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.CLSTM.forward": [[41, 52], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "tganv2_gen.CLSTM.cell", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "# Assume z is in proper convolutional shape", "\n", "        ", "out", "=", "torch", ".", "stack", "(", "[", "torch", ".", "zeros_like", "(", "z", ")", "]", "*", "self", ".", "n_frames", ",", "dim", "=", "1", ")", "\n", "\n", "h", ",", "c", "=", "None", ",", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "n_frames", ")", ":", "\n", "            ", "h", ",", "c", "=", "self", ".", "cell", "(", "z", ",", "h", ",", "c", ")", "\n", "out", "[", ":", ",", "i", "]", "=", "h", "\n", "z", "=", "torch", ".", "zeros_like", "(", "z", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.Up.__init__": [[55, 73], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ")", ":", "\n", "        ", "super", "(", "Up", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# define main branch", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "cin", ")", "\n", "self", ".", "convm1", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "cout", ")", "\n", "self", ".", "convm2", "=", "nn", ".", "Conv2d", "(", "cout", ",", "cout", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "# define skip branch", "\n", "self", ".", "sconv", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "1", ")", "\n", "\n", "# initialize", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "convm1", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "convm2", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "sconv", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.Up.forward": [[74, 89], ["tganv2_gen.Up.bn1", "tganv2_gen.Up.relu", "tganv2_gen.Up.upsample", "tganv2_gen.Up.convm1", "tganv2_gen.Up.bn2", "tganv2_gen.Up.relu", "tganv2_gen.Up.convm2", "tganv2_gen.Up.upsample", "tganv2_gen.Up.sconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# compute main", "\n", "        ", "h", "=", "self", ".", "bn1", "(", "x", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "upsample", "(", "h", ")", "\n", "h", "=", "self", ".", "convm1", "(", "h", ")", "\n", "h", "=", "self", ".", "bn2", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "convm2", "(", "h", ")", "\n", "\n", "# compute skip", "\n", "s", "=", "self", ".", "upsample", "(", "x", ")", "\n", "s", "=", "self", ".", "sconv", "(", "s", ")", "\n", "\n", "return", "h", "+", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.Render.__init__": [[92, 97], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "colors", "=", "1", ")", ":", "\n", "        ", "super", "(", "Render", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "cin", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "cin", ",", "colors", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.Render.forward": [[98, 105], ["tganv2_gen.Render.bn", "tganv2_gen.Render.relu", "tganv2_gen.Render.conv", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.Generator_CLSTM.__init__": [[108, 145], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "tganv2_gen.CLSTM", "torch.Sequential", "torch.Sequential", "range", "tganv2_gen.Render", "tganv2_gen.Up", "tganv2_gen.Render", "tganv2_gen.Up", "tganv2_gen.Render", "tganv2_gen.Up", "tganv2_gen.Render", "len", "len", "tganv2_gen.Generator_CLSTM.build.add_module", "tganv2_gen.Generator_CLSTM.build.add_module", "tganv2_gen.Up", "tganv2_gen.Up"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", "=", "256", ",", "\n", "tempc", "=", "1024", ",", "\n", "zt_dim", "=", "3", ",", "\n", "upchannels", "=", "[", "512", ",", "256", ",", "128", "]", ",", "\n", "subchannels", "=", "[", "64", ",", "32", ",", "32", "]", ",", "\n", "n_frames", "=", "16", ",", "\n", "colors", "=", "3", ",", "\n", "subsample", "=", "4", ")", ":", "\n", "        ", "super", "(", "Generator_CLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "subchannels", ")", "==", "3", "\n", "self", ".", "tempc", "=", "tempc", "\n", "self", ".", "zt_dim", "=", "zt_dim", "\n", "self", ".", "colors", "=", "colors", "\n", "self", ".", "frames", "=", "subsample", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "z_dim", ",", "zt_dim", "**", "2", "*", "tempc", ")", "\n", "self", ".", "temp", "=", "CLSTM", "(", "tempc", ",", "n_frames", ")", "\n", "\n", "self", ".", "build", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "upchannels", ")", ")", ":", "\n", "            ", "if", "not", "i", ":", "\n", "                ", "self", ".", "build", ".", "add_module", "(", "'Up1'", ",", "Up", "(", "tempc", ",", "upchannels", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "build", ".", "add_module", "(", "f'Up{i+1}'", ",", "Up", "(", "upchannels", "[", "i", "-", "1", "]", ",", "\n", "upchannels", "[", "i", "]", ")", ")", "\n", "\n", "", "", "self", ".", "buildr", "=", "Render", "(", "upchannels", "[", "-", "1", "]", ",", "colors", "=", "colors", ")", "\n", "\n", "self", ".", "sup1", "=", "Up", "(", "upchannels", "[", "-", "1", "]", ",", "subchannels", "[", "0", "]", ")", "\n", "self", ".", "sup1r", "=", "Render", "(", "subchannels", "[", "0", "]", ",", "colors", "=", "colors", ")", "\n", "self", ".", "sup2", "=", "Up", "(", "subchannels", "[", "0", "]", ",", "subchannels", "[", "1", "]", ")", "\n", "self", ".", "sup2r", "=", "Render", "(", "subchannels", "[", "1", "]", ",", "colors", "=", "colors", ")", "\n", "self", ".", "sup3", "=", "Up", "(", "subchannels", "[", "1", "]", ",", "subchannels", "[", "2", "]", ")", "\n", "self", ".", "sup3r", "=", "Render", "(", "subchannels", "[", "2", "]", ",", "colors", "=", "colors", ")", "\n", "\n", "# for models that extend", "\n", "self", ".", "penalties", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.Generator_CLSTM.subsample": [[146, 155], ["h.contiguous().view.contiguous().view.view", "h.contiguous().view.contiguous().view.contiguous().view", "h.contiguous().view.contiguous().view.contiguous", "numpy.random.randint", "min"], "methods", ["None"], ["", "def", "subsample", "(", "self", ",", "h", ",", "N", ",", "T", ")", ":", "\n", "# to vid", "\n", "        ", "_", ",", "C", ",", "H", ",", "W", "=", "h", ".", "shape", "\n", "h", "=", "h", ".", "view", "(", "N", ",", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "h", "=", "h", "[", ":", ",", "np", ".", "random", ".", "randint", "(", "min", "(", "self", ".", "frames", ",", "T", ")", ")", ":", ":", "self", ".", "frames", "]", "\n", "N", ",", "T", ",", "C", ",", "H", ",", "W", "=", "h", ".", "shape", "\n", "# to train", "\n", "h", "=", "h", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "return", "h", ",", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.Generator_CLSTM.forward": [[156, 194], ["tganv2_gen.Generator_CLSTM.fc", "tganv2_gen.Generator_CLSTM.view", "tganv2_gen.Generator_CLSTM.temp", "tganv2_gen.Generator_CLSTM.view", "tganv2_gen.Generator_CLSTM.build", "tganv2_gen.Generator_CLSTM.sup1", "tganv2_gen.Generator_CLSTM.sup2", "tganv2_gen.Generator_CLSTM.sup3", "tganv2_gen.Generator_CLSTM.sup3r().view().transpose", "tganv2_gen.Generator_CLSTM.buildr().view", "tganv2_gen.Generator_CLSTM.subsample", "tganv2_gen.Generator_CLSTM.sup1", "tganv2_gen.Generator_CLSTM.sup1r().view", "tganv2_gen.Generator_CLSTM.subsample", "tganv2_gen.Generator_CLSTM.sup2", "tganv2_gen.Generator_CLSTM.sup2r().view", "tganv2_gen.Generator_CLSTM.subsample", "tganv2_gen.Generator_CLSTM.sup3", "tganv2_gen.Generator_CLSTM.sup3r().view", "len", "tganv2_gen.Generator_CLSTM.sup3r().view", "tganv2_gen.Generator_CLSTM.buildr", "tganv2_gen.Generator_CLSTM.sup1r", "tganv2_gen.Generator_CLSTM.sup2r", "tganv2_gen.Generator_CLSTM.sup3r", "tganv2_gen.Generator_CLSTM.sup3r"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.Generator_CLSTM.subsample", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.Generator_CLSTM.subsample", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.models.tganv2_gen.Generator_CLSTM.subsample"], ["", "def", "forward", "(", "self", ",", "z", ",", "test", "=", "False", ")", ":", "\n", "        ", "h", "=", "self", ".", "fc", "(", "z", ")", "\n", "h", "=", "h", ".", "view", "(", "-", "1", ",", "self", ".", "tempc", ",", "self", ".", "zt_dim", ",", "self", ".", "zt_dim", ")", "\n", "h", "=", "self", ".", "temp", "(", "h", ")", "\n", "N", ",", "T", ",", "C", ",", "H", ",", "W", "=", "h", ".", "shape", "\n", "h", "=", "h", ".", "view", "(", "N", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "h", "=", "self", ".", "build", "(", "h", ")", "\n", "\n", "outsize", "=", "self", ".", "zt_dim", "*", "2", "**", "(", "len", "(", "self", ".", "build", ")", "+", "3", ")", "\n", "\n", "if", "test", ":", "\n", "            ", "h", "=", "self", ".", "sup1", "(", "h", ")", "\n", "h", "=", "self", ".", "sup2", "(", "h", ")", "\n", "h", "=", "self", ".", "sup3", "(", "h", ")", "\n", "h", "=", "self", ".", "sup3r", "(", "h", ")", ".", "view", "(", "N", ",", "T", ",", "self", ".", "colors", ",", "outsize", ",", "\n", "outsize", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "return", "h", "\n", "", "else", ":", "\n", "# render 1st", "\n", "            ", "x1", "=", "self", ".", "buildr", "(", "h", ")", ".", "view", "(", "N", ",", "T", ",", "self", ".", "colors", ",", "outsize", "//", "8", ",", "\n", "outsize", "//", "8", ")", "\n", "h", ",", "T", "=", "self", ".", "subsample", "(", "h", ",", "N", ",", "T", ")", "\n", "h", "=", "self", ".", "sup1", "(", "h", ")", "\n", "# render 2nd", "\n", "x2", "=", "self", ".", "sup1r", "(", "h", ")", ".", "view", "(", "N", ",", "T", ",", "self", ".", "colors", ",", "outsize", "//", "4", ",", "\n", "outsize", "//", "4", ")", "\n", "h", ",", "T", "=", "self", ".", "subsample", "(", "h", ",", "N", ",", "T", ")", "\n", "h", "=", "self", ".", "sup2", "(", "h", ")", "\n", "# render 3rd", "\n", "x3", "=", "self", ".", "sup2r", "(", "h", ")", ".", "view", "(", "N", ",", "T", ",", "self", ".", "colors", ",", "outsize", "//", "2", ",", "\n", "outsize", "//", "2", ")", "\n", "h", ",", "T", "=", "self", ".", "subsample", "(", "h", ",", "N", ",", "T", ")", "\n", "h", "=", "self", ".", "sup3", "(", "h", ")", "\n", "# render 4th", "\n", "x4", "=", "self", ".", "sup3r", "(", "h", ")", ".", "view", "(", "N", ",", "T", ",", "self", ".", "colors", ",", "outsize", ",", "outsize", ")", "\n", "\n", "", "return", "x1", ",", "x2", ",", "x3", ",", "x4", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__": [[21, 78], ["chainer.link.Chain.__init__", "collections.OrderedDict", "chainer.initializers.constant.Zero", "c3d_ft._retrieve", "chainer.initializers.normal.Normal", "chainer.initializers.constant.Zero", "chainer.initializers.normal.Normal", "chainer.initializers.constant.One", "chainer.links.connection.convolution_nd.ConvolutionND", "chainer.links.connection.convolution_nd.ConvolutionND", "chainer.links.connection.convolution_nd.ConvolutionND", "chainer.links.connection.convolution_nd.ConvolutionND", "chainer.links.connection.convolution_nd.ConvolutionND", "chainer.links.connection.convolution_nd.ConvolutionND", "chainer.links.connection.convolution_nd.ConvolutionND", "chainer.links.connection.convolution_nd.ConvolutionND", "chainer.links.connection.linear.Linear", "chainer.links.connection.linear.Linear", "chainer.links.connection.linear.Linear", "chainer.serializers.npz.load_npz"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__init__", "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft._retrieve"], ["    ", "def", "__init__", "(", "self", ",", "pretrained_model", "=", "'auto'", ")", ":", "\n", "        ", "if", "pretrained_model", ":", "\n", "# As a sampling process is time-consuming,", "\n", "# we employ a zero initializer for faster computation.", "\n", "            ", "init", "=", "constant", ".", "Zero", "(", ")", "\n", "conv_kwargs", "=", "{", "'initialW'", ":", "init", ",", "'initial_bias'", ":", "init", "}", "\n", "fc_kwargs", "=", "conv_kwargs", "\n", "", "else", ":", "\n", "# employ default initializers used in the original paper", "\n", "            ", "conv_kwargs", "=", "{", "\n", "'initialW'", ":", "normal", ".", "Normal", "(", "0.01", ")", ",", "\n", "'initial_bias'", ":", "constant", ".", "Zero", "(", ")", ",", "\n", "}", "\n", "fc_kwargs", "=", "{", "\n", "'initialW'", ":", "normal", ".", "Normal", "(", "0.005", ")", ",", "\n", "'initial_bias'", ":", "constant", ".", "One", "(", ")", ",", "\n", "}", "\n", "", "super", "(", "C3DVersion1", ",", "self", ")", ".", "__init__", "(", "\n", "conv1a", "=", "ConvolutionND", "(", "3", ",", "3", ",", "64", ",", "3", ",", "1", ",", "1", ",", "**", "conv_kwargs", ")", ",", "\n", "conv2a", "=", "ConvolutionND", "(", "3", ",", "64", ",", "128", ",", "3", ",", "1", ",", "1", ",", "**", "conv_kwargs", ")", ",", "\n", "conv3a", "=", "ConvolutionND", "(", "3", ",", "128", ",", "256", ",", "3", ",", "1", ",", "1", ",", "**", "conv_kwargs", ")", ",", "\n", "conv3b", "=", "ConvolutionND", "(", "3", ",", "256", ",", "256", ",", "3", ",", "1", ",", "1", ",", "**", "conv_kwargs", ")", ",", "\n", "conv4a", "=", "ConvolutionND", "(", "3", ",", "256", ",", "512", ",", "3", ",", "1", ",", "1", ",", "**", "conv_kwargs", ")", ",", "\n", "conv4b", "=", "ConvolutionND", "(", "3", ",", "512", ",", "512", ",", "3", ",", "1", ",", "1", ",", "**", "conv_kwargs", ")", ",", "\n", "conv5a", "=", "ConvolutionND", "(", "3", ",", "512", ",", "512", ",", "3", ",", "1", ",", "1", ",", "**", "conv_kwargs", ")", ",", "\n", "conv5b", "=", "ConvolutionND", "(", "3", ",", "512", ",", "512", ",", "3", ",", "1", ",", "1", ",", "**", "conv_kwargs", ")", ",", "\n", "fc6", "=", "Linear", "(", "512", "*", "4", "*", "4", ",", "4096", ",", "**", "fc_kwargs", ")", ",", "\n", "fc7", "=", "Linear", "(", "4096", ",", "4096", ",", "**", "fc_kwargs", ")", ",", "\n", "fc8", "=", "Linear", "(", "4096", ",", "101", ",", "**", "fc_kwargs", ")", ",", "\n", ")", "\n", "if", "pretrained_model", "==", "'auto'", ":", "\n", "            ", "_retrieve", "(", "\n", "'conv3d_deepnetA_ucf.npz'", ",", "\n", "'http://vlg.cs.dartmouth.edu/c3d/'", "\n", "'c3d_ucf101_finetune_whole_iter_20000'", ",", "\n", "self", ")", "\n", "", "elif", "pretrained_model", ":", "\n", "            ", "npz", ".", "load_npz", "(", "pretrained_model", ",", "self", ")", "\n", "\n", "", "self", ".", "functions", "=", "collections", ".", "OrderedDict", "(", "[", "\n", "(", "'conv1a'", ",", "[", "self", ".", "conv1a", ",", "relu", "]", ")", ",", "\n", "(", "'pool1'", ",", "[", "_max_pooling_2d", "]", ")", ",", "\n", "(", "'conv2a'", ",", "[", "self", ".", "conv2a", ",", "relu", "]", ")", ",", "\n", "(", "'pool2'", ",", "[", "_max_pooling_3d", "]", ")", ",", "\n", "(", "'conv3a'", ",", "[", "self", ".", "conv3a", ",", "relu", "]", ")", ",", "\n", "(", "'conv3b'", ",", "[", "self", ".", "conv3b", ",", "relu", "]", ")", ",", "\n", "(", "'pool3'", ",", "[", "_max_pooling_3d", "]", ")", ",", "\n", "(", "'conv4a'", ",", "[", "self", ".", "conv4a", ",", "relu", "]", ")", ",", "\n", "(", "'conv4b'", ",", "[", "self", ".", "conv4b", ",", "relu", "]", ")", ",", "\n", "(", "'pool4'", ",", "[", "_max_pooling_3d", "]", ")", ",", "\n", "(", "'conv5a'", ",", "[", "self", ".", "conv5a", ",", "relu", "]", ")", ",", "\n", "(", "'conv5b'", ",", "[", "self", ".", "conv5b", ",", "relu", "]", ")", ",", "\n", "(", "'pool5'", ",", "[", "_max_pooling_3d", "]", ")", ",", "\n", "(", "'fc6'", ",", "[", "self", ".", "fc6", ",", "relu", ",", "dropout", "]", ")", ",", "\n", "(", "'fc7'", ",", "[", "self", ".", "fc7", ",", "relu", ",", "dropout", "]", ")", ",", "\n", "(", "'fc8'", ",", "[", "self", ".", "fc8", "]", ")", ",", "\n", "(", "'prob'", ",", "[", "softmax", "]", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.available_layers": [[80, 83], ["list", "c3d_ft.C3DVersion1.functions.keys"], "methods", ["None"], ["", "@", "property", "\n", "def", "available_layers", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "functions", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.convert_caffemodel_to_npz": [[84, 103], ["caffe_pb.NetParameter", "cls", "c3d_ft._transfer", "chainer.serializers.npz.save_npz", "open", "caffe_pb.NetParameter.MergeFromString", "model_file.read"], "methods", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft._transfer"], ["", "@", "classmethod", "\n", "def", "convert_caffemodel_to_npz", "(", "cls", ",", "path_caffemodel", ",", "path_npz", ")", ":", "\n", "        ", "\"\"\"Converts a pre-trained caffemodel to a chainer model.\n        Args:\n            path_caffemodel (str): Path of the pre-trained caffemodel.\n            path_npz (str): Path of the converted chainer model.\n        \"\"\"", "\n", "\n", "# As caffe_function uses shortcut symbols,", "\n", "# we import it here.", "\n", "from", "chainer", ".", "links", ".", "caffe", "import", "caffe_function", "\n", "caffe_pb", "=", "caffe_function", ".", "caffe_pb", "\n", "\n", "caffemodel", "=", "caffe_pb", ".", "NetParameter", "(", ")", "\n", "with", "open", "(", "path_caffemodel", ",", "'rb'", ")", "as", "model_file", ":", "\n", "            ", "caffemodel", ".", "MergeFromString", "(", "model_file", ".", "read", "(", ")", ")", "\n", "", "chainermodel", "=", "cls", "(", "pretrained_model", "=", "None", ")", "\n", "_transfer", "(", "caffemodel", ",", "chainermodel", ")", "\n", "npz", ".", "save_npz", "(", "path_npz", ",", "chainermodel", ",", "compression", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.__call__": [[104, 117], ["set", "c3d_ft.C3DVersion1.functions.items", "len", "func", "set.remove"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "layers", "=", "[", "'prob'", "]", ")", ":", "\n", "        ", "h", "=", "x", "\n", "activations", "=", "{", "}", "\n", "target_layers", "=", "set", "(", "layers", ")", "\n", "for", "key", ",", "funcs", "in", "self", ".", "functions", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "target_layers", ")", "==", "0", ":", "\n", "                ", "break", "\n", "", "for", "func", "in", "funcs", ":", "\n", "                ", "h", "=", "func", "(", "h", ")", "\n", "", "if", "key", "in", "target_layers", ":", "\n", "                ", "activations", "[", "key", "]", "=", "h", "\n", "target_layers", ".", "remove", "(", "key", ")", "\n", "", "", "return", "activations", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft._max_pooling_3d": [[119, 122], ["chainer.functions.pooling.max_pooling_nd.max_pooling_nd"], "function", ["None"], ["", "", "def", "_max_pooling_3d", "(", "x", ")", ":", "\n", "# print(x.data.shape)", "\n", "    ", "return", "max_pooling_nd", "(", "x", ",", "ksize", "=", "2", ")", "\n", "# return max_pooling_nd(x, ksize=2, stride=2)", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft._max_pooling_2d": [[125, 127], ["chainer.functions.pooling.max_pooling_nd.max_pooling_nd"], "function", ["None"], ["", "def", "_max_pooling_2d", "(", "x", ")", ":", "\n", "    ", "return", "max_pooling_nd", "(", "x", ",", "ksize", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "# return max_pooling_nd(x, ksize=(1, 2, 2), stride=(1, 2, 2))", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft._transfer": [[130, 149], ["print", "c3d_ft._transfer.transfer_layer"], "function", ["None"], ["", "def", "_transfer", "(", "caffemodel", ",", "chainermodel", ")", ":", "\n", "\n", "    ", "def", "transfer_layer", "(", "src", ",", "dst", ")", ":", "\n", "        ", "dst", ".", "W", ".", "data", ".", "ravel", "(", ")", "[", ":", "]", "=", "src", ".", "blobs", "[", "0", "]", ".", "diff", "\n", "dst", ".", "b", ".", "data", ".", "ravel", "(", ")", "[", ":", "]", "=", "src", ".", "blobs", "[", "1", "]", ".", "diff", "\n", "\n", "", "layers", "=", "{", "i", ".", "name", ":", "i", "for", "i", "in", "caffemodel", ".", "layers", "}", "\n", "print", "(", "[", "i", ".", "name", "for", "i", "in", "caffemodel", ".", "layers", "]", ")", "\n", "transfer_layer", "(", "layers", "[", "'conv1a'", "]", ",", "chainermodel", ".", "conv1a", ")", "\n", "transfer_layer", "(", "layers", "[", "'conv2a'", "]", ",", "chainermodel", ".", "conv2a", ")", "\n", "transfer_layer", "(", "layers", "[", "'conv3a'", "]", ",", "chainermodel", ".", "conv3a", ")", "\n", "transfer_layer", "(", "layers", "[", "'conv3b'", "]", ",", "chainermodel", ".", "conv3b", ")", "\n", "transfer_layer", "(", "layers", "[", "'conv4a'", "]", ",", "chainermodel", ".", "conv4a", ")", "\n", "transfer_layer", "(", "layers", "[", "'conv4b'", "]", ",", "chainermodel", ".", "conv4b", ")", "\n", "transfer_layer", "(", "layers", "[", "'conv5a'", "]", ",", "chainermodel", ".", "conv5a", ")", "\n", "transfer_layer", "(", "layers", "[", "'conv5b'", "]", ",", "chainermodel", ".", "conv5b", ")", "\n", "transfer_layer", "(", "layers", "[", "'fc6'", "]", ",", "chainermodel", ".", "fc6", ")", "\n", "transfer_layer", "(", "layers", "[", "'fc7'", "]", ",", "chainermodel", ".", "fc7", ")", "\n", "transfer_layer", "(", "layers", "[", "'fc8'", "]", ",", "chainermodel", ".", "fc8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft._make_npz": [[151, 157], ["print", "c3d_ft.C3DVersion1.convert_caffemodel_to_npz", "chainer.serializers.npz.load_npz"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft.C3DVersion1.convert_caffemodel_to_npz"], ["", "def", "_make_npz", "(", "path_npz", ",", "url", ",", "model", ")", ":", "\n", "    ", "path_caffemodel", "=", "\"c3d_ucf101_finetune_whole_iter_20000\"", "\n", "print", "(", "'Now loading caffemodel (usually it may take few minutes)'", ")", "\n", "C3DVersion1", ".", "convert_caffemodel_to_npz", "(", "path_caffemodel", ",", "path_npz", ")", "\n", "npz", ".", "load_npz", "(", "path_npz", ",", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft._retrieve": [[159, 165], ["chainer.dataset.download.get_dataset_directory", "os.path.join", "chainer.dataset.download.cache_or_load_file", "c3d_ft._make_npz", "chainer.serializers.npz.load_npz"], "function", ["home.repos.pwc.inspect_result.Zasder3_Latent-Neural-Differential-Equations-for-Video-Generation.evaluation.c3d_ft._make_npz"], ["", "def", "_retrieve", "(", "name", ",", "url", ",", "model", ")", ":", "\n", "    ", "root", "=", "download", ".", "get_dataset_directory", "(", "'pfnet/chainer/models/'", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "name", ")", "\n", "return", "download", ".", "cache_or_load_file", "(", "\n", "path", ",", "lambda", "path", ":", "_make_npz", "(", "path", ",", "url", ",", "model", ")", ",", "\n", "lambda", "path", ":", "npz", ".", "load_npz", "(", "path", ",", "model", ")", ")", "\n", "", ""]]}