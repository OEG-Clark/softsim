{"home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.train.train": [[42, 462], ["logger.info", "wdir.mkdir", "utils.general.init_seeds", "opt.data.endswith", "weights.endswith", "torch.nn.parallel.DistributedDataParallel.named_parameters", "max", "logger.info", "torch.nn.parallel.DistributedDataParallel.named_modules", "optim.SGD.add_param_group", "optim.SGD.add_param_group", "logger.info", "torch.LambdaLR", "max", "utils.datasets.create_dataloader", "[].max", "len", "time.time", "max", "numpy.zeros", "torch.cuda.amp.GradScaler", "utils.loss.ComputeLoss", "logger.info", "range", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "pathlib.Path", "open", "yaml.dump", "open", "yaml.dump", "open", "yaml.load", "utils.wandb_logging.wandb_utils.WandbLogger", "int", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "models.yolo.Model().to", "ckpt[].float().state_dict", "utils.torch_utils.intersect_dicts", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "logger.info", "models.yolo.Model().to", "utils.torch_utils.torch_distributed_zero_first", "utils.general.check_dataset", "any", "round", "isinstance", "torch.Adam", "torch.SGD", "utils.general.one_cycle", "utils.torch_utils.ModelEMA", "int", "utils.general.check_img_size", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.SyncBatchNorm.convert_sync_batchnorm().to", "torch.nn.SyncBatchNorm.convert_sync_batchnorm().to", "torch.nn.SyncBatchNorm.convert_sync_batchnorm().to", "torch.nn.SyncBatchNorm.convert_sync_batchnorm().to", "torch.nn.SyncBatchNorm.convert_sync_batchnorm().to", "torch.nn.SyncBatchNorm.convert_sync_batchnorm().to", "logger.info", "torch.nn.parallel.DistributedDataParallel", "utils.general.labels_to_class_weights().to", "round", "torch.nn.parallel.DistributedDataParallel.train", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "logger.info", "optim.SGD.zero_grad", "lr_scheduler.LambdaLR.step", "logger.info", "utils.wandb_logging.wandb_utils.WandbLogger.finish_run", "torch.destroy_process_group", "utils.general.colorstr", "vars", "torch.load().get", "torch.load().get", "torch.load().get", "torch.load().get", "torch.load().get", "torch.load().get", "len", "utils.torch_utils.torch_distributed_zero_first", "utils.google_utils.attempt_download", "torch.nn.parallel.DistributedDataParallel.state_dict", "print", "hasattr", "isinstance", "pg2.append", "pg0.append", "optim.SGD.load_state_dict", "torch.load.get", "ema.ema.load_state_dict", "torch.load.get", "results_file.write_text", "logger.info", "torch.nn.parallel.DistributedDataParallel.stride.max", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "utils.general.colorstr", "utils.datasets.create_dataloader", "numpy.concatenate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.parallel.DistributedDataParallel.half().float", "dataloader.sampler.set_epoch", "tqdm.tqdm", "amp.GradScaler.scale().backward", "ema.update_attr", "zip", "utils.general.fitness", "utils.wandb_logging.wandb_utils.WandbLogger.end_epoch", "utils.plots.plot_results", "opt.data.endswith", "best.exists", "f.exists", "os.system", "utils.wandb_logging.wandb_utils.WandbLogger.wandb.log_artifact", "weights.endswith", "os.path.isfile", "pathlib.Path", "len", "models.yolo.Model", "ckpt[].float", "models.yolo.Model", "hasattr", "isinstance", "pg1.append", "len", "len", "len", "ckpt[].float().state_dict", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "numpy.concatenate", "utils.plots.plot_labels", "utils.autoanchor.check_anchors", "any", "utils.general.labels_to_class_weights", "utils.general.labels_to_image_weights", "random.choices", "torch.broadcast", "F.interpolate.to().float", "max", "enumerate", "torch.cuda.amp.autocast", "torch.nn.parallel.DistributedDataParallel", "utils.loss.ComputeLoss.", "amp.GradScaler.step", "amp.GradScaler.update", "optim.SGD.zero_grad", "tqdm.tqdm.set_description", "test.test", "open", "f.write", "len", "os.system", "numpy.array().reshape", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "utils.wandb_logging.wandb_utils.WandbLogger.log", "best.exists", "test.test", "utils.general.strip_optimizer", "str", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "hyp.get", "len", "len", "utils.general.colorstr", "tb_writer.add_histogram", "torch.nn.parallel.DistributedDataParallel.half", "range", "indices.cpu().numpy", "numpy.interp().round", "numpy.interp", "max", "torch.interpolate", "targets.to", "amp.GradScaler.scale", "ema.update", "threading.Thread().start", "tb_writer.add_scalar", "utils.wandb_logging.wandb_utils.WandbLogger.log", "results_file.read_text", "copy.deepcopy().half", "copy.deepcopy().half", "optim.SGD.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "hyp.items", "hyp.get", "torch.nn.parallel.DistributedDataParallel.state_dict", "hyp.get", "ckpt[].float", "isinstance", "torch.nn.parallel.DistributedDataParallel.class_weights.cpu().numpy", "F.interpolate.to", "numpy.interp", "random.randrange", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "utils.wandb_logging.wandb_utils.WandbLogger.log", "list", "list", "numpy.array", "pathlib.Path", "utils.wandb_logging.wandb_utils.WandbLogger.log_model", "models.experimental.attempt_load().half", "torch.nn.parallel.DistributedDataParallel.modules", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "indices.cpu", "numpy.interp", "math.ceil", "torch.cuda.memory_reserved", "torch.cuda.memory_reserved", "torch.cuda.memory_reserved", "torch.cuda.memory_reserved", "torch.cuda.memory_reserved", "torch.cuda.memory_reserved", "threading.Thread", "copy.deepcopy", "copy.deepcopy", "utils.wandb_logging.wandb_utils.WandbLogger.wandb.Image", "time.time", "torch.nn.parallel.DistributedDataParallel.class_weights.cpu", "utils.general.one_cycle.", "str", "str", "models.experimental.attempt_load", "utils.wandb_logging.wandb_utils.WandbLogger.wandb.Image", "utils.torch_utils.is_parallel", "str", "save_dir.glob", "x.exists"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.init_seeds", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.create_dataloader", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.intersect_dicts", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.torch_distributed_zero_first", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_dataset", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.one_cycle", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_img_size", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.train.train", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.finish_run", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.colorstr", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.torch_distributed_zero_first", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.google_utils.attempt_download", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.colorstr", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.create_dataloader", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.ModelEMA.update_attr", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.fitness", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.end_epoch", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_results", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_labels", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.autoanchor.check_anchors", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.labels_to_class_weights", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.labels_to_image_weights", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadStreams.update", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.test.test", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.test.test", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.strip_optimizer", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.colorstr", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadStreams.update", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log_model", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.attempt_load", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.is_parallel"], ["def", "train", "(", "hyp", ",", "opt", ",", "device", ",", "tb_writer", "=", "None", ")", ":", "\n", "    ", "logger", ".", "info", "(", "colorstr", "(", "'hyperparameters: '", ")", "+", "', '", ".", "join", "(", "f'{k}={v}'", "for", "k", ",", "v", "in", "hyp", ".", "items", "(", ")", ")", ")", "\n", "save_dir", ",", "epochs", ",", "batch_size", ",", "total_batch_size", ",", "weights", ",", "rank", "=", "Path", "(", "opt", ".", "save_dir", ")", ",", "opt", ".", "epochs", ",", "opt", ".", "batch_size", ",", "opt", ".", "total_batch_size", ",", "opt", ".", "weights", ",", "opt", ".", "global_rank", "\n", "\n", "# Directories", "\n", "wdir", "=", "save_dir", "/", "'weights'", "\n", "wdir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "# make dir", "\n", "last", "=", "wdir", "/", "'last.pt'", "\n", "best", "=", "wdir", "/", "'best.pt'", "\n", "results_file", "=", "save_dir", "/", "'results.txt'", "\n", "epoch_num", "=", "0", "\n", "\n", "# Save run settings", "\n", "with", "open", "(", "save_dir", "/", "'hyp.yaml'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "dump", "(", "hyp", ",", "f", ",", "sort_keys", "=", "False", ")", "\n", "", "with", "open", "(", "save_dir", "/", "'opt.yaml'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "dump", "(", "vars", "(", "opt", ")", ",", "f", ",", "sort_keys", "=", "False", ")", "\n", "\n", "# Configure", "\n", "", "plots", "=", "not", "opt", ".", "evolve", "# create plots", "\n", "cuda", "=", "device", ".", "type", "!=", "'cpu'", "\n", "init_seeds", "(", "2", "+", "rank", ")", "\n", "with", "open", "(", "opt", ".", "data", ")", "as", "f", ":", "\n", "        ", "data_dict", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", "# data dict", "\n", "", "is_coco", "=", "opt", ".", "data", ".", "endswith", "(", "'coco.yaml'", ")", "\n", "\n", "# Logging- Doing this before checking the dataset. Might update data_dict", "\n", "loggers", "=", "{", "'wandb'", ":", "None", "}", "# loggers dict", "\n", "if", "rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "opt", ".", "hyp", "=", "hyp", "# add hyperparameters", "\n", "run_id", "=", "torch", ".", "load", "(", "weights", ")", ".", "get", "(", "'wandb_id'", ")", "if", "weights", ".", "endswith", "(", "'.pt'", ")", "and", "os", ".", "path", ".", "isfile", "(", "weights", ")", "else", "None", "\n", "wandb_logger", "=", "WandbLogger", "(", "opt", ",", "Path", "(", "opt", ".", "save_dir", ")", ".", "stem", ",", "run_id", ",", "data_dict", ")", "\n", "loggers", "[", "'wandb'", "]", "=", "wandb_logger", ".", "wandb", "\n", "data_dict", "=", "wandb_logger", ".", "data_dict", "\n", "if", "wandb_logger", ".", "wandb", ":", "\n", "            ", "weights", ",", "epochs", ",", "hyp", "=", "opt", ".", "weights", ",", "opt", ".", "epochs", ",", "opt", ".", "hyp", "# WandbLogger might update weights, epochs if resuming", "\n", "\n", "", "", "nc", "=", "1", "if", "opt", ".", "single_cls", "else", "int", "(", "data_dict", "[", "'nc'", "]", ")", "# number of classes", "\n", "names", "=", "[", "'item'", "]", "if", "opt", ".", "single_cls", "and", "len", "(", "data_dict", "[", "'names'", "]", ")", "!=", "1", "else", "data_dict", "[", "'names'", "]", "# class names", "\n", "assert", "len", "(", "names", ")", "==", "nc", ",", "'%g names found for nc=%g dataset in %s'", "%", "(", "len", "(", "names", ")", ",", "nc", ",", "opt", ".", "data", ")", "# check", "\n", "\n", "# Model", "\n", "pretrained", "=", "weights", ".", "endswith", "(", "'.pt'", ")", "\n", "if", "pretrained", ":", "\n", "        ", "with", "torch_distributed_zero_first", "(", "rank", ")", ":", "\n", "            ", "attempt_download", "(", "weights", ")", "# download if not found locally", "\n", "", "ckpt", "=", "torch", ".", "load", "(", "weights", ",", "map_location", "=", "device", ")", "# load checkpoint", "\n", "model", "=", "Model", "(", "opt", ".", "cfg", "or", "ckpt", "[", "'model'", "]", ".", "yaml", ",", "ch", "=", "3", ",", "nc", "=", "nc", ",", "anchors", "=", "hyp", ".", "get", "(", "'anchors'", ")", ")", ".", "to", "(", "device", ")", "# create", "\n", "exclude", "=", "[", "'anchor'", "]", "if", "(", "opt", ".", "cfg", "or", "hyp", ".", "get", "(", "'anchors'", ")", ")", "and", "not", "opt", ".", "resume", "else", "[", "]", "# exclude keys", "\n", "state_dict", "=", "ckpt", "[", "'model'", "]", ".", "float", "(", ")", ".", "state_dict", "(", ")", "# to FP32", "\n", "state_dict", "=", "intersect_dicts", "(", "state_dict", ",", "model", ".", "state_dict", "(", ")", ",", "exclude", "=", "exclude", ")", "# intersect", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "# load", "\n", "logger", ".", "info", "(", "'Transferred %g/%g items from %s'", "%", "(", "len", "(", "state_dict", ")", ",", "len", "(", "model", ".", "state_dict", "(", ")", ")", ",", "weights", ")", ")", "# report", "\n", "", "else", ":", "\n", "        ", "model", "=", "Model", "(", "opt", ".", "cfg", ",", "ch", "=", "3", ",", "nc", "=", "nc", ",", "anchors", "=", "hyp", ".", "get", "(", "'anchors'", ")", ")", ".", "to", "(", "device", ")", "# create", "\n", "# gs = max(int(model.stride.max()), 32)", "\n", "# imgsz, imgsz_test = [check_img_size(x, gs) for x in opt.img_size]", "\n", "\n", "", "with", "torch_distributed_zero_first", "(", "rank", ")", ":", "\n", "        ", "check_dataset", "(", "data_dict", ")", "# check", "\n", "", "train_path", "=", "data_dict", "[", "'train'", "]", "\n", "test_path", "=", "data_dict", "[", "'val'", "]", "\n", "\n", "# Freeze", "\n", "freeze", "=", "[", "]", "# parameter names to freeze (full or partial)", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "v", ".", "requires_grad", "=", "True", "# train all layers", "\n", "if", "any", "(", "x", "in", "k", "for", "x", "in", "freeze", ")", ":", "\n", "            ", "print", "(", "'freezing %s'", "%", "k", ")", "\n", "v", ".", "requires_grad", "=", "False", "\n", "\n", "# Optimizer", "\n", "", "", "nbs", "=", "64", "# nominal batch size", "\n", "accumulate", "=", "max", "(", "round", "(", "nbs", "/", "total_batch_size", ")", ",", "1", ")", "# accumulate loss before optimizing", "\n", "hyp", "[", "'weight_decay'", "]", "*=", "total_batch_size", "*", "accumulate", "/", "nbs", "# scale weight_decay", "\n", "logger", ".", "info", "(", "f\"Scaled weight_decay = {hyp['weight_decay']}\"", ")", "\n", "\n", "pg0", ",", "pg1", ",", "pg2", "=", "[", "]", ",", "[", "]", ",", "[", "]", "# optimizer parameter groups", "\n", "for", "k", ",", "v", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "v", ",", "'bias'", ")", "and", "isinstance", "(", "v", ".", "bias", ",", "nn", ".", "Parameter", ")", ":", "\n", "            ", "pg2", ".", "append", "(", "v", ".", "bias", ")", "# biases", "\n", "", "if", "isinstance", "(", "v", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "pg0", ".", "append", "(", "v", ".", "weight", ")", "# no decay", "\n", "", "elif", "hasattr", "(", "v", ",", "'weight'", ")", "and", "isinstance", "(", "v", ".", "weight", ",", "nn", ".", "Parameter", ")", ":", "\n", "            ", "pg1", ".", "append", "(", "v", ".", "weight", ")", "# apply decay", "\n", "\n", "", "", "if", "opt", ".", "adam", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "pg0", ",", "lr", "=", "hyp", "[", "'lr0'", "]", ",", "betas", "=", "(", "hyp", "[", "'momentum'", "]", ",", "0.999", ")", ")", "# adjust beta1 to momentum", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "pg0", ",", "lr", "=", "hyp", "[", "'lr0'", "]", ",", "momentum", "=", "hyp", "[", "'momentum'", "]", ",", "nesterov", "=", "True", ")", "\n", "\n", "", "optimizer", ".", "add_param_group", "(", "{", "'params'", ":", "pg1", ",", "'weight_decay'", ":", "hyp", "[", "'weight_decay'", "]", "}", ")", "# add pg1 with weight_decay", "\n", "optimizer", ".", "add_param_group", "(", "{", "'params'", ":", "pg2", "}", ")", "# add pg2 (biases)", "\n", "logger", ".", "info", "(", "'Optimizer groups: %g .bias, %g conv.weight, %g other'", "%", "(", "len", "(", "pg2", ")", ",", "len", "(", "pg1", ")", ",", "len", "(", "pg0", ")", ")", ")", "\n", "del", "pg0", ",", "pg1", ",", "pg2", "\n", "\n", "# Scheduler https://arxiv.org/pdf/1812.01187.pdf", "\n", "# https://pytorch.org/docs/stable/_modules/torch/optim/lr_scheduler.html#OneCycleLR", "\n", "if", "opt", ".", "linear_lr", ":", "\n", "        ", "lf", "=", "lambda", "x", ":", "(", "1", "-", "x", "/", "(", "epochs", "-", "1", ")", ")", "*", "(", "1.0", "-", "hyp", "[", "'lrf'", "]", ")", "+", "hyp", "[", "'lrf'", "]", "# linear", "\n", "", "else", ":", "\n", "        ", "lf", "=", "one_cycle", "(", "1", ",", "hyp", "[", "'lrf'", "]", ",", "epochs", ")", "# cosine 1->hyp['lrf']", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lf", ")", "\n", "# plot_lr_scheduler(optimizer, scheduler, epochs)", "\n", "\n", "# EMA", "\n", "ema", "=", "ModelEMA", "(", "model", ")", "if", "rank", "in", "[", "-", "1", ",", "0", "]", "else", "None", "\n", "\n", "# Resume", "\n", "start_epoch", ",", "best_fitness", "=", "0", ",", "0.0", "\n", "if", "pretrained", ":", "\n", "# Optimizer", "\n", "        ", "if", "ckpt", "[", "'optimizer'", "]", "is", "not", "None", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "'optimizer'", "]", ")", "\n", "best_fitness", "=", "ckpt", "[", "'best_fitness'", "]", "\n", "\n", "# EMA", "\n", "", "if", "ema", "and", "ckpt", ".", "get", "(", "'ema'", ")", ":", "\n", "            ", "ema", ".", "ema", ".", "load_state_dict", "(", "ckpt", "[", "'ema'", "]", ".", "float", "(", ")", ".", "state_dict", "(", ")", ")", "\n", "ema", ".", "updates", "=", "ckpt", "[", "'updates'", "]", "\n", "\n", "# Results", "\n", "", "if", "ckpt", ".", "get", "(", "'training_results'", ")", "is", "not", "None", ":", "\n", "            ", "results_file", ".", "write_text", "(", "ckpt", "[", "'training_results'", "]", ")", "# write results.txt", "\n", "\n", "# Epochs", "\n", "", "start_epoch", "=", "ckpt", "[", "'epoch'", "]", "+", "1", "\n", "if", "opt", ".", "resume", ":", "\n", "            ", "assert", "start_epoch", ">", "0", ",", "'%s training to %g epochs is finished, nothing to resume.'", "%", "(", "weights", ",", "epochs", ")", "\n", "", "if", "epochs", "<", "start_epoch", ":", "\n", "            ", "logger", ".", "info", "(", "'%s has been trained for %g epochs. Fine-tuning for %g additional epochs.'", "%", "\n", "(", "weights", ",", "ckpt", "[", "'epoch'", "]", ",", "epochs", ")", ")", "\n", "epochs", "+=", "ckpt", "[", "'epoch'", "]", "# finetune additional epochs", "\n", "\n", "", "del", "ckpt", ",", "state_dict", "\n", "\n", "# Image sizes", "\n", "", "gs", "=", "max", "(", "int", "(", "model", ".", "stride", ".", "max", "(", ")", ")", ",", "32", ")", "# grid size (max stride)", "\n", "nl", "=", "model", ".", "model", "[", "-", "1", "]", ".", "nl", "# number of detection layers (used for scaling hyp['obj'])", "\n", "imgsz", ",", "imgsz_test", "=", "[", "check_img_size", "(", "x", ",", "gs", ")", "for", "x", "in", "opt", ".", "img_size", "]", "# verify imgsz are gs-multiples", "\n", "\n", "# DP mode", "\n", "if", "cuda", "and", "rank", "==", "-", "1", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "# SyncBatchNorm", "\n", "", "if", "opt", ".", "sync_bn", "and", "cuda", "and", "rank", "!=", "-", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", ".", "to", "(", "device", ")", "\n", "logger", ".", "info", "(", "'Using SyncBatchNorm()'", ")", "\n", "\n", "# Trainloader", "\n", "", "dataloader", ",", "dataset", "=", "create_dataloader", "(", "train_path", ",", "imgsz", ",", "batch_size", ",", "gs", ",", "opt", ",", "\n", "hyp", "=", "hyp", ",", "augment", "=", "True", ",", "cache", "=", "opt", ".", "cache_images", ",", "rect", "=", "opt", ".", "rect", ",", "rank", "=", "rank", ",", "\n", "world_size", "=", "opt", ".", "world_size", ",", "workers", "=", "opt", ".", "workers", ",", "\n", "image_weights", "=", "opt", ".", "image_weights", ",", "quad", "=", "opt", ".", "quad", ",", "prefix", "=", "colorstr", "(", "'train: '", ")", ")", "\n", "mlc", "=", "np", ".", "concatenate", "(", "dataset", ".", "labels", ",", "0", ")", "[", ":", ",", "0", "]", ".", "max", "(", ")", "# max label class", "\n", "nb", "=", "len", "(", "dataloader", ")", "# number of batches", "\n", "assert", "mlc", "<", "nc", ",", "'Label class %g exceeds nc=%g in %s. Possible class labels are 0-%g'", "%", "(", "mlc", ",", "nc", ",", "opt", ".", "data", ",", "nc", "-", "1", ")", "\n", "\n", "# Process 0", "\n", "if", "rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "testloader", "=", "create_dataloader", "(", "test_path", ",", "imgsz_test", ",", "batch_size", "*", "2", ",", "gs", ",", "opt", ",", "# testloader", "\n", "hyp", "=", "hyp", ",", "cache", "=", "opt", ".", "cache_images", "and", "not", "opt", ".", "notest", ",", "rect", "=", "True", ",", "rank", "=", "-", "1", ",", "\n", "world_size", "=", "opt", ".", "world_size", ",", "workers", "=", "opt", ".", "workers", ",", "\n", "pad", "=", "0.5", ",", "prefix", "=", "colorstr", "(", "'val: '", ")", ")", "[", "0", "]", "\n", "\n", "if", "not", "opt", ".", "resume", ":", "\n", "            ", "labels", "=", "np", ".", "concatenate", "(", "dataset", ".", "labels", ",", "0", ")", "\n", "c", "=", "torch", ".", "tensor", "(", "labels", "[", ":", ",", "0", "]", ")", "# classes", "\n", "# cf = torch.bincount(c.long(), minlength=nc) + 1.  # frequency", "\n", "# model._initialize_biases(cf.to(device))", "\n", "if", "plots", ":", "\n", "                ", "plot_labels", "(", "labels", ",", "names", ",", "save_dir", ",", "loggers", ")", "\n", "if", "tb_writer", ":", "\n", "                    ", "tb_writer", ".", "add_histogram", "(", "'classes'", ",", "c", ",", "0", ")", "\n", "\n", "# Anchors", "\n", "", "", "if", "not", "opt", ".", "noautoanchor", ":", "\n", "                ", "check_anchors", "(", "dataset", ",", "model", "=", "model", ",", "thr", "=", "hyp", "[", "'anchor_t'", "]", ",", "imgsz", "=", "imgsz", ")", "\n", "", "model", ".", "half", "(", ")", ".", "float", "(", ")", "# pre-reduce anchor precision", "\n", "\n", "# DDP mode", "\n", "", "", "if", "cuda", "and", "rank", "!=", "-", "1", ":", "\n", "        ", "model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ",", "output_device", "=", "opt", ".", "local_rank", ",", "\n", "# nn.MultiheadAttention incompatibility with DDP https://github.com/pytorch/pytorch/issues/26698", "\n", "find_unused_parameters", "=", "any", "(", "isinstance", "(", "layer", ",", "nn", ".", "MultiheadAttention", ")", "for", "layer", "in", "model", ".", "modules", "(", ")", ")", ")", "\n", "\n", "# Model parameters", "\n", "", "hyp", "[", "'box'", "]", "*=", "3.", "/", "nl", "# scale to layers", "\n", "hyp", "[", "'cls'", "]", "*=", "nc", "/", "80.", "*", "3.", "/", "nl", "# scale to classes and layers", "\n", "hyp", "[", "'obj'", "]", "*=", "(", "imgsz", "/", "640", ")", "**", "2", "*", "3.", "/", "nl", "# scale to image size and layers", "\n", "hyp", "[", "'label_smoothing'", "]", "=", "opt", ".", "label_smoothing", "\n", "model", ".", "nc", "=", "nc", "# attach number of classes to model", "\n", "model", ".", "hyp", "=", "hyp", "# attach hyperparameters to model", "\n", "model", ".", "gr", "=", "1.0", "# iou loss ratio (obj_loss = 1.0 or iou)", "\n", "model", ".", "class_weights", "=", "labels_to_class_weights", "(", "dataset", ".", "labels", ",", "nc", ")", ".", "to", "(", "device", ")", "*", "nc", "# attach class weights", "\n", "model", ".", "names", "=", "names", "\n", "\n", "# Start training", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "nw", "=", "max", "(", "round", "(", "hyp", "[", "'warmup_epochs'", "]", "*", "nb", ")", ",", "1000", ")", "# number of warmup iterations, max(3 epochs, 1k iterations)", "\n", "# nw = min(nw, (epochs - start_epoch) / 2 * nb)  # limit warmup to < 1/2 of training", "\n", "maps", "=", "np", ".", "zeros", "(", "nc", ")", "# mAP per class", "\n", "results", "=", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ")", "# P, R, mAP@.5, mAP@.5-.95, val_loss(box, obj, cls)", "\n", "scheduler", ".", "last_epoch", "=", "start_epoch", "-", "1", "# do not move", "\n", "scaler", "=", "amp", ".", "GradScaler", "(", "enabled", "=", "cuda", ")", "\n", "compute_loss", "=", "ComputeLoss", "(", "model", ")", "# init loss class", "\n", "logger", ".", "info", "(", "f'Image sizes {imgsz} train, {imgsz_test} test\\n'", "\n", "f'Using {dataloader.num_workers} dataloader workers\\n'", "\n", "f'Logging results to {save_dir}\\n'", "\n", "f'Starting training for {epochs} epochs...'", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "epochs", ")", ":", "# epoch ------------------------------------------------------------------", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n", "# Update image weights (optional)", "\n", "if", "opt", ".", "image_weights", ":", "\n", "# Generate indices", "\n", "            ", "if", "rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "                ", "cw", "=", "model", ".", "class_weights", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "(", "1", "-", "maps", ")", "**", "2", "/", "nc", "# class weights", "\n", "iw", "=", "labels_to_image_weights", "(", "dataset", ".", "labels", ",", "nc", "=", "nc", ",", "class_weights", "=", "cw", ")", "# image weights", "\n", "dataset", ".", "indices", "=", "random", ".", "choices", "(", "range", "(", "dataset", ".", "n", ")", ",", "weights", "=", "iw", ",", "k", "=", "dataset", ".", "n", ")", "# rand weighted idx", "\n", "# Broadcast if DDP", "\n", "", "if", "rank", "!=", "-", "1", ":", "\n", "                ", "indices", "=", "(", "torch", ".", "tensor", "(", "dataset", ".", "indices", ")", "if", "rank", "==", "0", "else", "torch", ".", "zeros", "(", "dataset", ".", "n", ")", ")", ".", "int", "(", ")", "\n", "dist", ".", "broadcast", "(", "indices", ",", "0", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "                    ", "dataset", ".", "indices", "=", "indices", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# Update mosaic border", "\n", "# b = int(random.uniform(0.25 * imgsz, 0.75 * imgsz + gs) // gs * gs)", "\n", "# dataset.mosaic_border = [b - imgsz, -b]  # height, width borders", "\n", "\n", "", "", "", "mloss", "=", "torch", ".", "zeros", "(", "4", ",", "device", "=", "device", ")", "# mean losses", "\n", "if", "rank", "!=", "-", "1", ":", "\n", "            ", "dataloader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "pbar", "=", "enumerate", "(", "dataloader", ")", "\n", "logger", ".", "info", "(", "(", "'\\n'", "+", "'%10s'", "*", "8", ")", "%", "(", "'Epoch'", ",", "'gpu_mem'", ",", "'box'", ",", "'obj'", ",", "'cls'", ",", "'total'", ",", "'labels'", ",", "'img_size'", ")", ")", "\n", "if", "rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "            ", "pbar", "=", "tqdm", "(", "pbar", ",", "total", "=", "nb", ")", "# progress bar", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "i", ",", "(", "imgs", ",", "targets", ",", "paths", ",", "_", ")", "in", "pbar", ":", "# batch -------------------------------------------------------------", "\n", "            ", "ni", "=", "i", "+", "nb", "*", "epoch", "# number integrated batches (since train start)", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "/", "255.0", "# uint8 to float32, 0-255 to 0.0-1.0", "\n", "\n", "# Warmup", "\n", "if", "ni", "<=", "nw", ":", "\n", "                ", "xi", "=", "[", "0", ",", "nw", "]", "# x interp", "\n", "# model.gr = np.interp(ni, xi, [0.0, 1.0])  # iou loss ratio (obj_loss = 1.0 or iou)", "\n", "accumulate", "=", "max", "(", "1", ",", "np", ".", "interp", "(", "ni", ",", "xi", ",", "[", "1", ",", "nbs", "/", "total_batch_size", "]", ")", ".", "round", "(", ")", ")", "\n", "for", "j", ",", "x", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "# bias lr falls from 0.1 to lr0, all other lrs rise from 0.0 to lr0", "\n", "                    ", "x", "[", "'lr'", "]", "=", "np", ".", "interp", "(", "ni", ",", "xi", ",", "[", "hyp", "[", "'warmup_bias_lr'", "]", "if", "j", "==", "2", "else", "0.0", ",", "x", "[", "'initial_lr'", "]", "*", "lf", "(", "epoch", ")", "]", ")", "\n", "if", "'momentum'", "in", "x", ":", "\n", "                        ", "x", "[", "'momentum'", "]", "=", "np", ".", "interp", "(", "ni", ",", "xi", ",", "[", "hyp", "[", "'warmup_momentum'", "]", ",", "hyp", "[", "'momentum'", "]", "]", ")", "\n", "\n", "# Multi-scale", "\n", "", "", "", "if", "opt", ".", "multi_scale", ":", "\n", "                ", "sz", "=", "random", ".", "randrange", "(", "320", ",", "512", "+", "gs", ")", "//", "gs", "*", "gs", "# size", "\n", "sf", "=", "sz", "/", "max", "(", "imgs", ".", "shape", "[", "2", ":", "]", ")", "# scale factor", "\n", "if", "sf", "!=", "1", ":", "\n", "                    ", "ns", "=", "[", "math", ".", "ceil", "(", "x", "*", "sf", "/", "gs", ")", "*", "gs", "for", "x", "in", "imgs", ".", "shape", "[", "2", ":", "]", "]", "# new shape (stretched to gs-multiple)", "\n", "imgs", "=", "F", ".", "interpolate", "(", "imgs", ",", "size", "=", "ns", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# Forward", "\n", "", "", "with", "amp", ".", "autocast", "(", "enabled", "=", "cuda", ")", ":", "\n", "                ", "pred", "=", "model", "(", "imgs", ")", "# forward", "\n", "loss", ",", "loss_items", "=", "compute_loss", "(", "pred", ",", "targets", ".", "to", "(", "device", ")", ")", "# loss scaled by batch_size", "\n", "if", "rank", "!=", "-", "1", ":", "\n", "                    ", "loss", "*=", "opt", ".", "world_size", "# gradient averaged between devices in DDP mode", "\n", "", "if", "opt", ".", "quad", ":", "\n", "                    ", "loss", "*=", "4.", "\n", "\n", "# Backward", "\n", "", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "\n", "# Optimize", "\n", "if", "ni", "%", "accumulate", "==", "0", ":", "\n", "                ", "scaler", ".", "step", "(", "optimizer", ")", "# optimizer.step", "\n", "scaler", ".", "update", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "ema", ":", "\n", "                    ", "ema", ".", "update", "(", "model", ")", "\n", "\n", "# Print", "\n", "", "", "if", "rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "                ", "mloss", "=", "(", "mloss", "*", "i", "+", "loss_items", ")", "/", "(", "i", "+", "1", ")", "# update mean losses", "\n", "mem", "=", "'%.3gG'", "%", "(", "torch", ".", "cuda", ".", "memory_reserved", "(", ")", "/", "1E9", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "0", ")", "# (GB)", "\n", "s", "=", "(", "'%10s'", "*", "2", "+", "'%10.4g'", "*", "6", ")", "%", "(", "\n", "'%g/%g'", "%", "(", "epoch", ",", "epochs", "-", "1", ")", ",", "mem", ",", "*", "mloss", ",", "targets", ".", "shape", "[", "0", "]", ",", "imgs", ".", "shape", "[", "-", "1", "]", ")", "\n", "pbar", ".", "set_description", "(", "s", ")", "\n", "\n", "# Plot", "\n", "if", "plots", "and", "ni", "<", "3", ":", "\n", "                    ", "f", "=", "save_dir", "/", "f'train_batch{ni}.jpg'", "# filename", "\n", "Thread", "(", "target", "=", "plot_images", ",", "args", "=", "(", "imgs", ",", "targets", ",", "paths", ",", "f", ")", ",", "daemon", "=", "True", ")", ".", "start", "(", ")", "\n", "# if tb_writer:", "\n", "#     tb_writer.add_image(f, result, dataformats='HWC', global_step=epoch)", "\n", "#     tb_writer.add_graph(torch.jit.trace(model, imgs, strict=False), [])  # add model graph", "\n", "", "elif", "plots", "and", "ni", "==", "10", "and", "wandb_logger", ".", "wandb", ":", "\n", "                    ", "wandb_logger", ".", "log", "(", "{", "\"Mosaics\"", ":", "[", "wandb_logger", ".", "wandb", ".", "Image", "(", "str", "(", "x", ")", ",", "caption", "=", "x", ".", "name", ")", "for", "x", "in", "\n", "save_dir", ".", "glob", "(", "'train*.jpg'", ")", "if", "x", ".", "exists", "(", ")", "]", "}", ")", "\n", "\n", "# end batch ------------------------------------------------------------------------------------------------", "\n", "# end epoch ----------------------------------------------------------------------------------------------------", "\n", "\n", "# Scheduler", "\n", "", "", "", "lr", "=", "[", "x", "[", "'lr'", "]", "for", "x", "in", "optimizer", ".", "param_groups", "]", "# for tensorboard", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "# DDP process 0 or single-GPU", "\n", "if", "rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "# mAP", "\n", "            ", "ema", ".", "update_attr", "(", "model", ",", "include", "=", "[", "'yaml'", ",", "'nc'", ",", "'hyp'", ",", "'gr'", ",", "'names'", ",", "'stride'", ",", "'class_weights'", "]", ")", "\n", "final_epoch", "=", "epoch", "+", "1", "==", "epochs", "\n", "if", "not", "opt", ".", "notest", "or", "final_epoch", ":", "# Calculate mAP", "\n", "                ", "wandb_logger", ".", "current_epoch", "=", "epoch", "+", "1", "\n", "results", ",", "maps", ",", "times", "=", "test", ".", "test", "(", "data_dict", ",", "\n", "batch_size", "=", "batch_size", "*", "2", ",", "\n", "imgsz", "=", "imgsz_test", ",", "\n", "model", "=", "ema", ".", "ema", ",", "\n", "single_cls", "=", "opt", ".", "single_cls", ",", "\n", "dataloader", "=", "testloader", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "verbose", "=", "nc", "<", "50", "and", "final_epoch", ",", "\n", "plots", "=", "plots", "and", "final_epoch", ",", "\n", "wandb_logger", "=", "wandb_logger", ",", "\n", "compute_loss", "=", "compute_loss", ",", "\n", "is_coco", "=", "is_coco", ")", "\n", "\n", "# Write", "\n", "", "with", "open", "(", "results_file", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "s", "+", "'%10.4g'", "*", "7", "%", "results", "+", "'\\n'", ")", "# append metrics, val_loss", "\n", "", "if", "len", "(", "opt", ".", "name", ")", "and", "opt", ".", "bucket", ":", "\n", "                ", "os", ".", "system", "(", "'gsutil cp %s gs://%s/results/results%s.txt'", "%", "(", "results_file", ",", "opt", ".", "bucket", ",", "opt", ".", "name", ")", ")", "\n", "\n", "# Log", "\n", "", "tags", "=", "[", "'train/box_loss'", ",", "'train/obj_loss'", ",", "'train/cls_loss'", ",", "# train loss", "\n", "'metrics/precision'", ",", "'metrics/recall'", ",", "'metrics/mAP_0.5'", ",", "'metrics/mAP_0.5:0.95'", ",", "\n", "'val/box_loss'", ",", "'val/obj_loss'", ",", "'val/cls_loss'", ",", "# val loss", "\n", "'x/lr0'", ",", "'x/lr1'", ",", "'x/lr2'", "]", "# params", "\n", "for", "x", ",", "tag", "in", "zip", "(", "list", "(", "mloss", "[", ":", "-", "1", "]", ")", "+", "list", "(", "results", ")", "+", "lr", ",", "tags", ")", ":", "\n", "                ", "if", "tb_writer", ":", "\n", "                    ", "tb_writer", ".", "add_scalar", "(", "tag", ",", "x", ",", "epoch", ")", "# tensorboard", "\n", "", "if", "wandb_logger", ".", "wandb", ":", "\n", "                    ", "wandb_logger", ".", "log", "(", "{", "tag", ":", "x", "}", ")", "# W&B", "\n", "\n", "# Update best mAP", "\n", "", "", "fi", "=", "fitness", "(", "np", ".", "array", "(", "results", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "# weighted combination of [P, R, mAP@.5, mAP@.5-.95]", "\n", "if", "fi", ">", "best_fitness", ":", "\n", "                ", "best_fitness", "=", "fi", "\n", "", "wandb_logger", ".", "end_epoch", "(", "best_result", "=", "best_fitness", "==", "fi", ")", "\n", "\n", "# Save model", "\n", "if", "(", "not", "opt", ".", "nosave", ")", "or", "(", "final_epoch", "and", "not", "opt", ".", "evolve", ")", ":", "# if save", "\n", "                ", "ckpt", "=", "{", "'epoch'", ":", "epoch", ",", "\n", "'best_fitness'", ":", "best_fitness", ",", "\n", "'training_results'", ":", "results_file", ".", "read_text", "(", ")", ",", "\n", "'model'", ":", "deepcopy", "(", "model", ".", "module", "if", "is_parallel", "(", "model", ")", "else", "model", ")", ".", "half", "(", ")", ",", "\n", "'ema'", ":", "deepcopy", "(", "ema", ".", "ema", ")", ".", "half", "(", ")", ",", "\n", "'updates'", ":", "ema", ".", "updates", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'wandb_id'", ":", "wandb_logger", ".", "wandb_run", ".", "id", "if", "wandb_logger", ".", "wandb", "else", "None", "}", "\n", "\n", "# Save last, best and delete", "\n", "\n", "torch", ".", "save", "(", "ckpt", ",", "last", ")", "\n", "torch", ".", "save", "(", "ckpt", ",", "wdir", "/", "Path", "(", "str", "(", "epoch_num", ")", "+", "'.pt'", ")", ")", "\n", "epoch_num", "+=", "1", "\n", "if", "best_fitness", "==", "fi", ":", "\n", "                    ", "torch", ".", "save", "(", "ckpt", ",", "best", ")", "\n", "", "if", "wandb_logger", ".", "wandb", ":", "\n", "                    ", "if", "(", "(", "epoch", "+", "1", ")", "%", "opt", ".", "save_period", "==", "0", "and", "not", "final_epoch", ")", "and", "opt", ".", "save_period", "!=", "-", "1", ":", "\n", "                        ", "wandb_logger", ".", "log_model", "(", "\n", "last", ".", "parent", ",", "opt", ",", "epoch", ",", "fi", ",", "best_model", "=", "best_fitness", "==", "fi", ")", "\n", "", "", "del", "ckpt", "\n", "\n", "# end epoch ----------------------------------------------------------------------------------------------------", "\n", "# end training", "\n", "", "", "", "if", "rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "# Plots", "\n", "        ", "if", "plots", ":", "\n", "            ", "plot_results", "(", "save_dir", "=", "save_dir", ")", "# save as results.png", "\n", "if", "wandb_logger", ".", "wandb", ":", "\n", "                ", "files", "=", "[", "'results.png'", ",", "'confusion_matrix.png'", ",", "*", "[", "f'{x}_curve.png'", "for", "x", "in", "(", "'F1'", ",", "'PR'", ",", "'P'", ",", "'R'", ")", "]", "]", "\n", "wandb_logger", ".", "log", "(", "{", "\"Results\"", ":", "[", "wandb_logger", ".", "wandb", ".", "Image", "(", "str", "(", "save_dir", "/", "f", ")", ",", "caption", "=", "f", ")", "for", "f", "in", "files", "\n", "if", "(", "save_dir", "/", "f", ")", ".", "exists", "(", ")", "]", "}", ")", "\n", "# Test best.pt", "\n", "", "", "logger", ".", "info", "(", "'%g epochs completed in %.3f hours.\\n'", "%", "(", "epoch", "-", "start_epoch", "+", "1", ",", "(", "time", ".", "time", "(", ")", "-", "t0", ")", "/", "3600", ")", ")", "\n", "if", "opt", ".", "data", ".", "endswith", "(", "'coco.yaml'", ")", "and", "nc", "==", "80", ":", "# if COCO", "\n", "            ", "for", "m", "in", "(", "last", ",", "best", ")", "if", "best", ".", "exists", "(", ")", "else", "(", "last", ")", ":", "# speed, mAP tests", "\n", "                ", "results", ",", "_", ",", "_", "=", "test", ".", "test", "(", "opt", ".", "data", ",", "\n", "batch_size", "=", "batch_size", "*", "2", ",", "\n", "imgsz", "=", "imgsz_test", ",", "\n", "conf_thres", "=", "0.001", ",", "\n", "iou_thres", "=", "0.7", ",", "\n", "model", "=", "attempt_load", "(", "m", ",", "device", ")", ".", "half", "(", ")", ",", "\n", "single_cls", "=", "opt", ".", "single_cls", ",", "\n", "dataloader", "=", "testloader", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "save_json", "=", "True", ",", "\n", "plots", "=", "False", ",", "\n", "is_coco", "=", "is_coco", ")", "\n", "\n", "# Strip optimizers", "\n", "", "", "final", "=", "best", "if", "best", ".", "exists", "(", ")", "else", "last", "# final model", "\n", "for", "f", "in", "last", ",", "best", ":", "\n", "            ", "if", "f", ".", "exists", "(", ")", ":", "\n", "                ", "strip_optimizer", "(", "f", ")", "# strip optimizers", "\n", "", "", "if", "opt", ".", "bucket", ":", "\n", "            ", "os", ".", "system", "(", "f'gsutil cp {final} gs://{opt.bucket}/weights'", ")", "# upload", "\n", "", "if", "wandb_logger", ".", "wandb", "and", "not", "opt", ".", "evolve", ":", "# Log the stripped model", "\n", "            ", "wandb_logger", ".", "wandb", ".", "log_artifact", "(", "str", "(", "final", ")", ",", "type", "=", "'model'", ",", "\n", "name", "=", "'run_'", "+", "wandb_logger", ".", "wandb_run", ".", "id", "+", "'_model'", ",", "\n", "aliases", "=", "[", "'last'", ",", "'best'", ",", "'stripped'", "]", ")", "\n", "", "wandb_logger", ".", "finish_run", "(", ")", "\n", "", "else", ":", "\n", "        ", "dist", ".", "destroy_process_group", "(", ")", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.test.test": [[21, 285], ["pathlib.Path", "models.experimental.attempt_load.eval", "isinstance", "utils.general.check_dataset", "torch.linspace().to", "torch.linspace().to.numel", "utils.metrics.ConfusionMatrix", "utils.general.coco80_to_coco91_class", "torch.zeros", "enumerate", "print", "models.experimental.attempt_load.float", "enumerate", "utils.general.set_logging", "utils.torch_utils.select_device", "pathlib.Path", "models.experimental.attempt_load", "max", "utils.general.check_img_size", "models.experimental.attempt_load.half", "yaml.load.endswith", "int", "min", "tqdm.tqdm", "img.to.to", "targets.to.to", "enumerate", "numpy.concatenate", "len", "stats[].any", "utils.metrics.ap_per_class", "numpy.bincount", "torch.zeros", "len", "enumerate", "tuple", "print", "utils.metrics.ConfusionMatrix.plot", "wandb_logger.log", "len", "str", "print", "print", "numpy.zeros", "next", "utils.general.increment_path", "int", "open", "yaml.load", "torch.linspace", "models.experimental.attempt_load.", "utils.datasets.create_dataloader", "enumerate", "img.to.half", "img.to.float", "torch.no_grad", "utils.torch_utils.time_synchronized", "models.experimental.attempt_load.", "torch.Tensor().to", "utils.torch_utils.time_synchronized", "utils.general.non_max_suppression", "len", "pathlib.Path", "anno.loadRes.clone", "utils.general.scale_coords", "torch.zeros", "stats.append", "threading.Thread().start", "threading.Thread().start", "zip", "ap.mean", "p.mean", "r.mean", "ap50.mean", "ap.mean", "stats[].astype", "print", "wandb_logger.log", "open", "json.dump", "COCO", "COCO.loadRes", "COCOeval", "COCOeval.evaluate", "COCOeval.accumulate", "COCOeval.summarize", "models.experimental.attempt_load.parameters", "models.experimental.attempt_load.stride.max", "torch.zeros().to().type_as", "utils.torch_utils.time_synchronized", "utils.torch_utils.time_synchronized", "labels[].tolist", "len", "pred.clone.tolist", "wandb_logger.log_training_progress", "utils.general.xyxy2xywh", "zip", "utils.general.xywh2xyxy", "utils.general.scale_coords", "torch.unique", "torch.zeros.sum", "list", "wandb_logger.wandb.Image", "pathlib.Path", "print", "pathlib.Path", "next", "utils.general.colorstr", "hasattr", "torch.Tensor", "stats.append", "torch.tensor", "len", "wandb_images.append", "pathlib.Path.stem.isnumeric", "int", "anno.loadRes.tolist", "utils.general.xyxy2xywh.tolist", "jdict.append", "utils.metrics.ConfusionMatrix.process_batch", "torch.zeros.cpu", "pred[].cpu", "pred[].cpu", "threading.Thread", "threading.Thread", "names.values", "str", "sorted", "int", "len", "torch.zeros().to", "models.experimental.attempt_load.parameters", "compute_loss", "range", "open", "f.write", "wandb_logger.wandb.Image", "torch.cat", "utils.general.box_iou().max", "set", "pathlib.Path.glob", "isinstance", "list", "torch.zeros", "torch.Tensor", "torch.Tensor", "int", "anno.loadRes.tolist", "round", "pathlib.Path", "pathlib.Path.glob", "torch.zeros.cpu", "len", "torch.zeros", "x.float", "int", "round", "utils.general.box_iou", "d.item", "set.add", "detected.append", "utils.plots.output_to_target", "d.item", "len", "utils.general.xyxy2xywh", "int", "torch.tensor().view", "len", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_dataset", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.coco80_to_coco91_class", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.set_logging", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.select_device", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.attempt_load", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_img_size", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ap_per_class", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.increment_path", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.create_dataloader", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.non_max_suppression", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.scale_coords", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.tolist", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.tolist", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log_training_progress", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xyxy2xywh", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xywh2xyxy", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.scale_coords", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.colorstr", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.tolist", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.tolist", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.process_batch", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.tolist", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.box_iou", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.output_to_target", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xyxy2xywh"], ["def", "test", "(", "data", ",", "\n", "weights", "=", "None", ",", "\n", "batch_size", "=", "32", ",", "\n", "imgsz", "=", "640", ",", "\n", "conf_thres", "=", "0.001", ",", "\n", "iou_thres", "=", "0.6", ",", "# for NMS", "\n", "save_json", "=", "False", ",", "\n", "single_cls", "=", "False", ",", "\n", "augment", "=", "False", ",", "\n", "verbose", "=", "False", ",", "\n", "model", "=", "None", ",", "\n", "dataloader", "=", "None", ",", "\n", "save_dir", "=", "Path", "(", "''", ")", ",", "# for saving images", "\n", "save_txt", "=", "False", ",", "# for auto-labelling", "\n", "save_hybrid", "=", "False", ",", "# for hybrid auto-labelling", "\n", "save_conf", "=", "False", ",", "# save auto-label confidences", "\n", "plots", "=", "True", ",", "\n", "wandb_logger", "=", "None", ",", "\n", "compute_loss", "=", "None", ",", "\n", "half_precision", "=", "True", ",", "\n", "is_coco", "=", "False", ")", ":", "\n", "# Initialize/load model and set device", "\n", "    ", "training", "=", "model", "is", "not", "None", "\n", "if", "training", ":", "# called by train.py", "\n", "        ", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "# get model device", "\n", "\n", "", "else", ":", "# called directly", "\n", "        ", "set_logging", "(", ")", "\n", "device", "=", "select_device", "(", "opt", ".", "device", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "# Directories", "\n", "save_dir", "=", "Path", "(", "increment_path", "(", "Path", "(", "opt", ".", "project", ")", "/", "opt", ".", "name", ",", "exist_ok", "=", "opt", ".", "exist_ok", ")", ")", "# increment run", "\n", "(", "save_dir", "/", "'labels'", "if", "save_txt", "else", "save_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "# make dir", "\n", "\n", "# Load model", "\n", "model", "=", "attempt_load", "(", "weights", ",", "map_location", "=", "device", ")", "# load FP32 model", "\n", "gs", "=", "max", "(", "int", "(", "model", ".", "stride", ".", "max", "(", ")", ")", ",", "32", ")", "# grid size (max stride)", "\n", "imgsz", "=", "check_img_size", "(", "imgsz", ",", "s", "=", "gs", ")", "# check img_size", "\n", "\n", "# Multi-GPU disabled, incompatible with .half() https://github.com/ultralytics/yolov5/issues/99", "\n", "# if device.type != 'cpu' and torch.cuda.device_count() > 1:", "\n", "#     model = nn.DataParallel(model)", "\n", "\n", "# Half", "\n", "", "half", "=", "device", ".", "type", "!=", "'cpu'", "and", "half_precision", "# half precision only supported on CUDA", "\n", "if", "half", ":", "\n", "        ", "model", ".", "half", "(", ")", "\n", "\n", "# Configure", "\n", "", "model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "data", ",", "str", ")", ":", "\n", "        ", "is_coco", "=", "data", ".", "endswith", "(", "'coco.yaml'", ")", "\n", "with", "open", "(", "data", ")", "as", "f", ":", "\n", "            ", "data", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", "\n", "", "", "check_dataset", "(", "data", ")", "# check", "\n", "nc", "=", "1", "if", "single_cls", "else", "int", "(", "data", "[", "'nc'", "]", ")", "# number of classes", "\n", "iouv", "=", "torch", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ".", "to", "(", "device", ")", "# iou vector for mAP@0.5:0.95", "\n", "niou", "=", "iouv", ".", "numel", "(", ")", "\n", "\n", "# Logging", "\n", "log_imgs", "=", "0", "\n", "if", "wandb_logger", "and", "wandb_logger", ".", "wandb", ":", "\n", "        ", "log_imgs", "=", "min", "(", "wandb_logger", ".", "log_imgs", ",", "100", ")", "\n", "# Dataloader", "\n", "", "if", "not", "training", ":", "\n", "        ", "if", "device", ".", "type", "!=", "'cpu'", ":", "\n", "            ", "model", "(", "torch", ".", "zeros", "(", "1", ",", "3", ",", "imgsz", ",", "imgsz", ")", ".", "to", "(", "device", ")", ".", "type_as", "(", "next", "(", "model", ".", "parameters", "(", ")", ")", ")", ")", "# run once", "\n", "", "task", "=", "opt", ".", "task", "if", "opt", ".", "task", "in", "(", "'train'", ",", "'val'", ",", "'test'", ")", "else", "'val'", "# path to train/val/test images", "\n", "dataloader", "=", "create_dataloader", "(", "data", "[", "task", "]", ",", "imgsz", ",", "batch_size", ",", "gs", ",", "opt", ",", "pad", "=", "0.5", ",", "rect", "=", "True", ",", "\n", "prefix", "=", "colorstr", "(", "f'{task}: '", ")", ")", "[", "0", "]", "\n", "\n", "", "seen", "=", "0", "\n", "confusion_matrix", "=", "ConfusionMatrix", "(", "nc", "=", "nc", ")", "\n", "names", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "model", ".", "names", "if", "hasattr", "(", "model", ",", "'names'", ")", "else", "model", ".", "module", ".", "names", ")", "}", "\n", "coco91class", "=", "coco80_to_coco91_class", "(", ")", "\n", "s", "=", "(", "'%20s'", "+", "'%12s'", "*", "6", ")", "%", "(", "'Class'", ",", "'Images'", ",", "'Labels'", ",", "'P'", ",", "'R'", ",", "'mAP@.5'", ",", "'mAP@.5:.95'", ")", "\n", "p", ",", "r", ",", "f1", ",", "mp", ",", "mr", ",", "map50", ",", "map", ",", "t0", ",", "t1", "=", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "\n", "loss", "=", "torch", ".", "zeros", "(", "3", ",", "device", "=", "device", ")", "\n", "jdict", ",", "stats", ",", "ap", ",", "ap_class", ",", "wandb_images", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch_i", ",", "(", "img", ",", "targets", ",", "paths", ",", "shapes", ")", "in", "enumerate", "(", "tqdm", "(", "dataloader", ",", "desc", "=", "s", ")", ")", ":", "\n", "        ", "img", "=", "img", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "img", "=", "img", ".", "half", "(", ")", "if", "half", "else", "img", ".", "float", "(", ")", "# uint8 to fp16/32", "\n", "img", "/=", "255.0", "# 0 - 255 to 0.0 - 1.0", "\n", "targets", "=", "targets", ".", "to", "(", "device", ")", "\n", "nb", ",", "_", ",", "height", ",", "width", "=", "img", ".", "shape", "# batch size, channels, height, width", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Run model", "\n", "            ", "t", "=", "time_synchronized", "(", ")", "\n", "out", ",", "train_out", "=", "model", "(", "img", ",", "augment", "=", "augment", ")", "# inference and training outputs", "\n", "t0", "+=", "time_synchronized", "(", ")", "-", "t", "\n", "\n", "# Compute loss", "\n", "if", "compute_loss", ":", "\n", "                ", "loss", "+=", "compute_loss", "(", "[", "x", ".", "float", "(", ")", "for", "x", "in", "train_out", "]", ",", "targets", ")", "[", "1", "]", "[", ":", "3", "]", "# box, obj, cls", "\n", "\n", "# Run NMS", "\n", "", "targets", "[", ":", ",", "2", ":", "]", "*=", "torch", ".", "Tensor", "(", "[", "width", ",", "height", ",", "width", ",", "height", "]", ")", ".", "to", "(", "device", ")", "# to pixels", "\n", "lb", "=", "[", "targets", "[", "targets", "[", ":", ",", "0", "]", "==", "i", ",", "1", ":", "]", "for", "i", "in", "range", "(", "nb", ")", "]", "if", "save_hybrid", "else", "[", "]", "# for autolabelling", "\n", "t", "=", "time_synchronized", "(", ")", "\n", "out", "=", "non_max_suppression", "(", "out", ",", "conf_thres", "=", "conf_thres", ",", "iou_thres", "=", "iou_thres", ",", "labels", "=", "lb", ",", "multi_label", "=", "True", ")", "\n", "t1", "+=", "time_synchronized", "(", ")", "-", "t", "\n", "\n", "# Statistics per image", "\n", "", "for", "si", ",", "pred", "in", "enumerate", "(", "out", ")", ":", "\n", "            ", "labels", "=", "targets", "[", "targets", "[", ":", ",", "0", "]", "==", "si", ",", "1", ":", "]", "\n", "nl", "=", "len", "(", "labels", ")", "\n", "tcls", "=", "labels", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", "if", "nl", "else", "[", "]", "# target class", "\n", "path", "=", "Path", "(", "paths", "[", "si", "]", ")", "\n", "seen", "+=", "1", "\n", "\n", "if", "len", "(", "pred", ")", "==", "0", ":", "\n", "                ", "if", "nl", ":", "\n", "                    ", "stats", ".", "append", "(", "(", "torch", ".", "zeros", "(", "0", ",", "niou", ",", "dtype", "=", "torch", ".", "bool", ")", ",", "torch", ".", "Tensor", "(", ")", ",", "torch", ".", "Tensor", "(", ")", ",", "tcls", ")", ")", "\n", "", "continue", "\n", "\n", "# Predictions", "\n", "", "predn", "=", "pred", ".", "clone", "(", ")", "\n", "scale_coords", "(", "img", "[", "si", "]", ".", "shape", "[", "1", ":", "]", ",", "predn", "[", ":", ",", ":", "4", "]", ",", "shapes", "[", "si", "]", "[", "0", "]", ",", "shapes", "[", "si", "]", "[", "1", "]", ")", "# native-space pred", "\n", "\n", "# Append to text file", "\n", "if", "save_txt", ":", "\n", "                ", "gn", "=", "torch", ".", "tensor", "(", "shapes", "[", "si", "]", "[", "0", "]", ")", "[", "[", "1", ",", "0", ",", "1", ",", "0", "]", "]", "# normalization gain whwh", "\n", "for", "*", "xyxy", ",", "conf", ",", "cls", "in", "predn", ".", "tolist", "(", ")", ":", "\n", "                    ", "xywh", "=", "(", "xyxy2xywh", "(", "torch", ".", "tensor", "(", "xyxy", ")", ".", "view", "(", "1", ",", "4", ")", ")", "/", "gn", ")", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", "# normalized xywh", "\n", "line", "=", "(", "cls", ",", "*", "xywh", ",", "conf", ")", "if", "save_conf", "else", "(", "cls", ",", "*", "xywh", ")", "# label format", "\n", "with", "open", "(", "save_dir", "/", "'labels'", "/", "(", "path", ".", "stem", "+", "'.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "(", "'%g '", "*", "len", "(", "line", ")", ")", ".", "rstrip", "(", ")", "%", "line", "+", "'\\n'", ")", "\n", "\n", "# W&B logging - Media Panel Plots", "\n", "", "", "", "if", "len", "(", "wandb_images", ")", "<", "log_imgs", "and", "wandb_logger", ".", "current_epoch", ">", "0", ":", "# Check for test operation", "\n", "                ", "if", "wandb_logger", ".", "current_epoch", "%", "wandb_logger", ".", "bbox_interval", "==", "0", ":", "\n", "                    ", "box_data", "=", "[", "{", "\"position\"", ":", "{", "\"minX\"", ":", "xyxy", "[", "0", "]", ",", "\"minY\"", ":", "xyxy", "[", "1", "]", ",", "\"maxX\"", ":", "xyxy", "[", "2", "]", ",", "\"maxY\"", ":", "xyxy", "[", "3", "]", "}", ",", "\n", "\"class_id\"", ":", "int", "(", "cls", ")", ",", "\n", "\"box_caption\"", ":", "\"%s %.3f\"", "%", "(", "names", "[", "cls", "]", ",", "conf", ")", ",", "\n", "\"scores\"", ":", "{", "\"class_score\"", ":", "conf", "}", ",", "\n", "\"domain\"", ":", "\"pixel\"", "}", "for", "*", "xyxy", ",", "conf", ",", "cls", "in", "pred", ".", "tolist", "(", ")", "]", "\n", "boxes", "=", "{", "\"predictions\"", ":", "{", "\"box_data\"", ":", "box_data", ",", "\"class_labels\"", ":", "names", "}", "}", "# inference-space", "\n", "wandb_images", ".", "append", "(", "wandb_logger", ".", "wandb", ".", "Image", "(", "img", "[", "si", "]", ",", "boxes", "=", "boxes", ",", "caption", "=", "path", ".", "name", ")", ")", "\n", "", "", "wandb_logger", ".", "log_training_progress", "(", "predn", ",", "path", ",", "names", ")", "if", "wandb_logger", "and", "wandb_logger", ".", "wandb_run", "else", "None", "\n", "\n", "# Append to pycocotools JSON dictionary", "\n", "if", "save_json", ":", "\n", "# [{\"image_id\": 42, \"category_id\": 18, \"bbox\": [258.15, 41.29, 348.26, 243.78], \"score\": 0.236}, ...", "\n", "                ", "image_id", "=", "int", "(", "path", ".", "stem", ")", "if", "path", ".", "stem", ".", "isnumeric", "(", ")", "else", "path", ".", "stem", "\n", "\n", "box", "=", "xyxy2xywh", "(", "predn", "[", ":", ",", ":", "4", "]", ")", "# xywh", "\n", "box", "[", ":", ",", ":", "2", "]", "-=", "box", "[", ":", ",", "2", ":", "]", "/", "2", "# xy center to top-left corner", "\n", "for", "p", ",", "b", "in", "zip", "(", "pred", ".", "tolist", "(", ")", ",", "box", ".", "tolist", "(", ")", ")", ":", "\n", "                    ", "jdict", ".", "append", "(", "{", "'image_id'", ":", "image_id", ",", "\n", "'category_id'", ":", "coco91class", "[", "int", "(", "p", "[", "5", "]", ")", "]", "if", "is_coco", "else", "int", "(", "p", "[", "5", "]", ")", ",", "\n", "'bbox'", ":", "[", "round", "(", "x", ",", "3", ")", "for", "x", "in", "b", "]", ",", "\n", "'score'", ":", "round", "(", "p", "[", "4", "]", ",", "5", ")", "}", ")", "\n", "\n", "# Assign all predictions as incorrect", "\n", "", "", "correct", "=", "torch", ".", "zeros", "(", "pred", ".", "shape", "[", "0", "]", ",", "niou", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", ")", "\n", "if", "nl", ":", "\n", "                ", "detected", "=", "[", "]", "# target indices", "\n", "tcls_tensor", "=", "labels", "[", ":", ",", "0", "]", "\n", "\n", "# target boxes", "\n", "tbox", "=", "xywh2xyxy", "(", "labels", "[", ":", ",", "1", ":", "5", "]", ")", "\n", "scale_coords", "(", "img", "[", "si", "]", ".", "shape", "[", "1", ":", "]", ",", "tbox", ",", "shapes", "[", "si", "]", "[", "0", "]", ",", "shapes", "[", "si", "]", "[", "1", "]", ")", "# native-space labels", "\n", "if", "plots", ":", "\n", "                    ", "confusion_matrix", ".", "process_batch", "(", "predn", ",", "torch", ".", "cat", "(", "(", "labels", "[", ":", ",", "0", ":", "1", "]", ",", "tbox", ")", ",", "1", ")", ")", "\n", "\n", "# Per target class", "\n", "", "for", "cls", "in", "torch", ".", "unique", "(", "tcls_tensor", ")", ":", "\n", "                    ", "ti", "=", "(", "cls", "==", "tcls_tensor", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", ".", "view", "(", "-", "1", ")", "# prediction indices", "\n", "pi", "=", "(", "cls", "==", "pred", "[", ":", ",", "5", "]", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", ".", "view", "(", "-", "1", ")", "# target indices", "\n", "\n", "# Search for detections", "\n", "if", "pi", ".", "shape", "[", "0", "]", ":", "\n", "# Prediction to target ious", "\n", "                        ", "ious", ",", "i", "=", "box_iou", "(", "predn", "[", "pi", ",", ":", "4", "]", ",", "tbox", "[", "ti", "]", ")", ".", "max", "(", "1", ")", "# best ious, indices", "\n", "\n", "# Append detections", "\n", "detected_set", "=", "set", "(", ")", "\n", "for", "j", "in", "(", "ious", ">", "iouv", "[", "0", "]", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", ":", "\n", "                            ", "d", "=", "ti", "[", "i", "[", "j", "]", "]", "# detected target", "\n", "if", "d", ".", "item", "(", ")", "not", "in", "detected_set", ":", "\n", "                                ", "detected_set", ".", "add", "(", "d", ".", "item", "(", ")", ")", "\n", "detected", ".", "append", "(", "d", ")", "\n", "correct", "[", "pi", "[", "j", "]", "]", "=", "ious", "[", "j", "]", ">", "iouv", "# iou_thres is 1xn", "\n", "if", "len", "(", "detected", ")", "==", "nl", ":", "# all targets already located in image", "\n", "                                    ", "break", "\n", "\n", "# Append statistics (correct, conf, pcls, tcls)", "\n", "", "", "", "", "", "", "stats", ".", "append", "(", "(", "correct", ".", "cpu", "(", ")", ",", "pred", "[", ":", ",", "4", "]", ".", "cpu", "(", ")", ",", "pred", "[", ":", ",", "5", "]", ".", "cpu", "(", ")", ",", "tcls", ")", ")", "\n", "\n", "# Plot images", "\n", "", "if", "plots", "and", "batch_i", "<", "3", ":", "\n", "            ", "f", "=", "save_dir", "/", "f'test_batch{batch_i}_labels.jpg'", "# labels", "\n", "Thread", "(", "target", "=", "plot_images", ",", "args", "=", "(", "img", ",", "targets", ",", "paths", ",", "f", ",", "names", ")", ",", "daemon", "=", "True", ")", ".", "start", "(", ")", "\n", "f", "=", "save_dir", "/", "f'test_batch{batch_i}_pred.jpg'", "# predictions", "\n", "Thread", "(", "target", "=", "plot_images", ",", "args", "=", "(", "img", ",", "output_to_target", "(", "out", ")", ",", "paths", ",", "f", ",", "names", ")", ",", "daemon", "=", "True", ")", ".", "start", "(", ")", "\n", "\n", "# Compute statistics", "\n", "", "", "stats", "=", "[", "np", ".", "concatenate", "(", "x", ",", "0", ")", "for", "x", "in", "zip", "(", "*", "stats", ")", "]", "# to numpy", "\n", "if", "len", "(", "stats", ")", "and", "stats", "[", "0", "]", ".", "any", "(", ")", ":", "\n", "        ", "p", ",", "r", ",", "ap", ",", "f1", ",", "ap_class", "=", "ap_per_class", "(", "*", "stats", ",", "plot", "=", "plots", ",", "save_dir", "=", "save_dir", ",", "names", "=", "names", ")", "\n", "ap50", ",", "ap", "=", "ap", "[", ":", ",", "0", "]", ",", "ap", ".", "mean", "(", "1", ")", "# AP@0.5, AP@0.5:0.95", "\n", "mp", ",", "mr", ",", "map50", ",", "map", "=", "p", ".", "mean", "(", ")", ",", "r", ".", "mean", "(", ")", ",", "ap50", ".", "mean", "(", ")", ",", "ap", ".", "mean", "(", ")", "\n", "nt", "=", "np", ".", "bincount", "(", "stats", "[", "3", "]", ".", "astype", "(", "np", ".", "int64", ")", ",", "minlength", "=", "nc", ")", "# number of targets per class", "\n", "", "else", ":", "\n", "        ", "nt", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "\n", "# Print results", "\n", "", "pf", "=", "'%20s'", "+", "'%12i'", "*", "2", "+", "'%12.3g'", "*", "4", "# print format", "\n", "print", "(", "pf", "%", "(", "'all'", ",", "seen", ",", "nt", ".", "sum", "(", ")", ",", "mp", ",", "mr", ",", "map50", ",", "map", ")", ")", "\n", "\n", "# Print results per class", "\n", "if", "(", "verbose", "or", "(", "nc", "<", "50", "and", "not", "training", ")", ")", "and", "nc", ">", "1", "and", "len", "(", "stats", ")", ":", "\n", "        ", "for", "i", ",", "c", "in", "enumerate", "(", "ap_class", ")", ":", "\n", "            ", "print", "(", "pf", "%", "(", "names", "[", "c", "]", ",", "seen", ",", "nt", "[", "c", "]", ",", "p", "[", "i", "]", ",", "r", "[", "i", "]", ",", "ap50", "[", "i", "]", ",", "ap", "[", "i", "]", ")", ")", "\n", "\n", "# Print speeds", "\n", "", "", "t", "=", "tuple", "(", "x", "/", "seen", "*", "1E3", "for", "x", "in", "(", "t0", ",", "t1", ",", "t0", "+", "t1", ")", ")", "+", "(", "imgsz", ",", "imgsz", ",", "batch_size", ")", "# tuple", "\n", "if", "not", "training", ":", "\n", "        ", "print", "(", "'Speed: %.1f/%.1f/%.1f ms inference/NMS/total per %gx%g image at batch-size %g'", "%", "t", ")", "\n", "\n", "# Plots", "\n", "", "if", "plots", ":", "\n", "        ", "confusion_matrix", ".", "plot", "(", "save_dir", "=", "save_dir", ",", "names", "=", "list", "(", "names", ".", "values", "(", ")", ")", ")", "\n", "if", "wandb_logger", "and", "wandb_logger", ".", "wandb", ":", "\n", "            ", "val_batches", "=", "[", "wandb_logger", ".", "wandb", ".", "Image", "(", "str", "(", "f", ")", ",", "caption", "=", "f", ".", "name", ")", "for", "f", "in", "sorted", "(", "save_dir", ".", "glob", "(", "'test*.jpg'", ")", ")", "]", "\n", "wandb_logger", ".", "log", "(", "{", "\"Validation\"", ":", "val_batches", "}", ")", "\n", "", "", "if", "wandb_images", ":", "\n", "        ", "wandb_logger", ".", "log", "(", "{", "\"Bounding Box Debugger/Images\"", ":", "wandb_images", "}", ")", "\n", "\n", "# Save JSON", "\n", "", "if", "save_json", "and", "len", "(", "jdict", ")", ":", "\n", "        ", "w", "=", "Path", "(", "weights", "[", "0", "]", "if", "isinstance", "(", "weights", ",", "list", ")", "else", "weights", ")", ".", "stem", "if", "weights", "is", "not", "None", "else", "''", "# weights", "\n", "anno_json", "=", "'../coco/annotations/instances_val2017.json'", "# annotations json", "\n", "pred_json", "=", "str", "(", "save_dir", "/", "f\"{w}_predictions.json\"", ")", "# predictions json", "\n", "print", "(", "'\\nEvaluating pycocotools mAP... saving %s...'", "%", "pred_json", ")", "\n", "with", "open", "(", "pred_json", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "jdict", ",", "f", ")", "\n", "\n", "", "try", ":", "# https://github.com/cocodataset/cocoapi/blob/master/PythonAPI/pycocoEvalDemo.ipynb", "\n", "            ", "from", "pycocotools", ".", "coco", "import", "COCO", "\n", "from", "pycocotools", ".", "cocoeval", "import", "COCOeval", "\n", "\n", "anno", "=", "COCO", "(", "anno_json", ")", "# init annotations api", "\n", "pred", "=", "anno", ".", "loadRes", "(", "pred_json", ")", "# init predictions api", "\n", "eval", "=", "COCOeval", "(", "anno", ",", "pred", ",", "'bbox'", ")", "\n", "if", "is_coco", ":", "\n", "                ", "eval", ".", "params", ".", "imgIds", "=", "[", "int", "(", "Path", "(", "x", ")", ".", "stem", ")", "for", "x", "in", "dataloader", ".", "dataset", ".", "img_files", "]", "# image IDs to evaluate", "\n", "", "eval", ".", "evaluate", "(", ")", "\n", "eval", ".", "accumulate", "(", ")", "\n", "eval", ".", "summarize", "(", ")", "\n", "map", ",", "map50", "=", "eval", ".", "stats", "[", ":", "2", "]", "# update results (mAP@0.5:0.95, mAP@0.5)", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "f'pycocotools unable to run: {e}'", ")", "\n", "\n", "# Return results", "\n", "", "", "model", ".", "float", "(", ")", "# for training", "\n", "if", "not", "training", ":", "\n", "        ", "s", "=", "f\"\\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}\"", "if", "save_txt", "else", "''", "\n", "print", "(", "f\"Results saved to {save_dir}{s}\"", ")", "\n", "", "maps", "=", "np", ".", "zeros", "(", "nc", ")", "+", "map", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "ap_class", ")", ":", "\n", "        ", "maps", "[", "c", "]", "=", "ap", "[", "i", "]", "\n", "", "return", "(", "mp", ",", "mr", ",", "map50", ",", "map", ",", "*", "(", "loss", ".", "cpu", "(", ")", "/", "len", "(", "dataloader", ")", ")", ".", "tolist", "(", ")", ")", ",", "maps", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.detect.make_dirs": [[21, 24], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "make_dirs", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.detect.feature_map": [[26, 70], ["intermediate_features.items", "str", "numpy.zeros", "range", "np.zeros.astype", "os.path.join", "detect.make_dirs", "os.path.join", "cv2.imwrite", "features.data.cpu().numpy", "numpy.asarray", "os.path.join", "detect.make_dirs", "cv2.applyColorMap", "os.path.join", "detect.make_dirs", "os.path.join", "cv2.imwrite", "os.path.join", "detect.make_dirs", "os.path.join", "cv2.applyColorMap.copy", "cv2.imwrite", "str", "features.data.cpu", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.detect.make_dirs", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.detect.make_dirs", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.detect.make_dirs", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.detect.make_dirs"], ["", "", "def", "feature_map", "(", "intermediate_features", ",", "imgname", ")", ":", "\n", "    ", "dst", "=", "'features+/'", "\n", "therd_size", "=", "320", "\n", "index", "=", "0", "\n", "for", "layer", ",", "j", "in", "intermediate_features", ".", "items", "(", ")", ":", "\n", "        ", "index", "+=", "1", "\n", "layer", "=", "str", "(", "index", ")", "\n", "features", "=", "j", "[", "0", "]", "\n", "iter_range", "=", "features", ".", "shape", "[", "0", "]", "\n", "\n", "resolution", "=", "j", ".", "shape", "[", "2", "]", "\n", "\n", "add_img", "=", "np", ".", "zeros", "(", "(", "(", "resolution", ",", "resolution", ",", "3", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "iter_range", ")", ":", "\n", "\n", "            ", "channel", "=", "iter_range", "\n", "# plt.imshow(x[0].data.numpy()[0,i,:,:],cmap='jet')", "\n", "\n", "feature", "=", "features", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "feature_img", "=", "feature", "[", "i", ",", ":", ",", ":", "]", "\n", "feature_img", "=", "np", ".", "asarray", "(", "feature_img", "*", "255", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "dst_path", "=", "os", ".", "path", ".", "join", "(", "dst", ",", "imgname", ")", "\n", "\n", "make_dirs", "(", "dst_path", ")", "\n", "feature_img", "=", "cv2", ".", "applyColorMap", "(", "feature_img", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "if", "feature_img", ".", "shape", "[", "0", "]", "<", "therd_size", ":", "\n", "                ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "dst_path", ",", "str", "(", "layer", ")", "+", "'/'", ")", "\n", "make_dirs", "(", "dst_file", ")", "\n", "dst_file", "=", "os", ".", "path", ".", "join", "(", "dst_file", ",", "str", "(", "i", ")", "+", "'.png'", ")", "\n", "cv2", ".", "imwrite", "(", "dst_file", ",", "feature_img", ")", "\n", "\n", "tmp_file", "=", "os", ".", "path", ".", "join", "(", "dst_path", ",", "str", "(", "layer", ")", "+", "'/'", ")", "\n", "make_dirs", "(", "tmp_file", ")", "\n", "tmp_file", "=", "os", ".", "path", ".", "join", "(", "tmp_file", ",", "str", "(", "i", ")", "+", "'_'", "+", "str", "(", "therd_size", ")", "+", "'.png'", ")", "\n", "tmp_img", "=", "feature_img", ".", "copy", "(", ")", "\n", "# tmp_img = cv2.resize(tmp_img, (therd_size, therd_size), interpolation=cv2.INTER_NEAREST)", "\n", "add_img", "=", "tmp_img", "/", "channel", "+", "add_img", "\n", "cv2", ".", "imwrite", "(", "tmp_file", ",", "tmp_img", ")", "\n", "", "", "add_img", ".", "astype", "(", "int", ")", "\n", "add_file", "=", "os", ".", "path", ".", "join", "(", "dst", ",", "imgname", ",", "str", "(", "layer", ")", "+", "'/'", ")", "\n", "make_dirs", "(", "add_file", ")", "\n", "add_file", "=", "os", ".", "path", ".", "join", "(", "add_file", ",", "'add'", "+", "'.png'", ")", "\n", "cv2", ".", "imwrite", "(", "add_file", ",", "add_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.detect.detect": [[72, 203], ["pathlib.Path", "utils.general.set_logging", "utils.torch_utils.select_device", "models.experimental.attempt_load", "int", "utils.general.check_img_size", "time.time", "print", "source.isnumeric", "source.endswith", "source.lower().startswith", "utils.general.increment_path", "models.experimental.attempt_load.stride.max", "models.experimental.attempt_load.half", "utils.torch_utils.load_classifier", "utils.torch_utils.load_classifier.load_state_dict().to().eval", "utils.general.check_imshow", "utils.datasets.LoadStreams", "utils.datasets.LoadImages", "hasattr", "models.experimental.attempt_load.", "torch.from_numpy().to", "torch.from_numpy().to", "utils.torch_utils.time_synchronized", "utils.general.non_max_suppression", "utils.torch_utils.time_synchronized", "enumerate", "print", "source.endswith", "numpy.random.randint", "torch.zeros().to().type_as", "torch.zeros().to().type_as", "img.unsqueeze.half", "img.unsqueeze.float", "img.unsqueeze.ndimension", "img.unsqueeze.unsqueeze", "path.split", "models.experimental.attempt_load.", "utils.general.apply_classifier", "pathlib.Path", "str", "len", "print", "source.lower", "pathlib.Path", "utils.torch_utils.load_classifier.load_state_dict().to", "range", "next", "torch.from_numpy", "torch.from_numpy", "str", "torch.tensor", "torch.tensor", "utils.general.scale_coords().round", "det[].unique", "reversed", "cv2.imshow", "cv2.waitKey", "torch.zeros().to", "torch.zeros().to", "models.experimental.attempt_load.parameters", "im0s[].copy", "getattr", "str", "cv2.imwrite", "cv2.VideoWriter.write", "len", "time.time", "utils.torch_utils.load_classifier.load_state_dict", "utils.general.scale_coords", "utils.plots.plot_one_box", "isinstance", "cv2.VideoWriter", "list", "torch.zeros", "torch.zeros", "open", "f.write", "cv2.VideoWriter.release", "vid_cap.get", "int", "int", "cv2.VideoWriter_fourcc", "pathlib.Path.glob", "torch.load", "torch.load", "vid_cap.get", "vid_cap.get", "int", "int", "int", "utils.general.xyxy2xywh", "torch.tensor().view", "torch.tensor().view", "len", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.set_logging", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.select_device", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.attempt_load", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_img_size", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.increment_path", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.load_classifier", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_imshow", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.non_max_suppression", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.apply_classifier", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.scale_coords", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_one_box", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xyxy2xywh"], ["", "", "def", "detect", "(", "save_img", "=", "False", ")", ":", "\n", "    ", "source", ",", "weights", ",", "view_img", ",", "save_txt", ",", "imgsz", "=", "opt", ".", "source", ",", "opt", ".", "weights", ",", "opt", ".", "view_img", ",", "opt", ".", "save_txt", ",", "opt", ".", "img_size", "\n", "save_img", "=", "not", "opt", ".", "nosave", "and", "not", "source", ".", "endswith", "(", "'.txt'", ")", "# save inference images", "\n", "webcam", "=", "source", ".", "isnumeric", "(", ")", "or", "source", ".", "endswith", "(", "'.txt'", ")", "or", "source", ".", "lower", "(", ")", ".", "startswith", "(", "\n", "(", "'rtsp://'", ",", "'rtmp://'", ",", "'http://'", ",", "'https://'", ")", ")", "\n", "\n", "# Directories", "\n", "save_dir", "=", "Path", "(", "increment_path", "(", "Path", "(", "opt", ".", "project", ")", "/", "opt", ".", "name", ",", "exist_ok", "=", "opt", ".", "exist_ok", ")", ")", "# increment run", "\n", "(", "save_dir", "/", "'labels'", "if", "save_txt", "else", "save_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "# make dir", "\n", "\n", "# Initialize", "\n", "set_logging", "(", ")", "\n", "device", "=", "select_device", "(", "opt", ".", "device", ")", "\n", "half", "=", "device", ".", "type", "!=", "'cpu'", "# half precision only supported on CUDA", "\n", "\n", "# Load model", "\n", "model", "=", "attempt_load", "(", "weights", ",", "map_location", "=", "device", ")", "# load FP32 model", "\n", "stride", "=", "int", "(", "model", ".", "stride", ".", "max", "(", ")", ")", "# model stride", "\n", "imgsz", "=", "check_img_size", "(", "imgsz", ",", "s", "=", "stride", ")", "# check img_size", "\n", "if", "half", ":", "\n", "        ", "model", ".", "half", "(", ")", "# to FP16", "\n", "\n", "# Second-stage classifier", "\n", "", "classify", "=", "False", "\n", "if", "classify", ":", "\n", "        ", "modelc", "=", "load_classifier", "(", "name", "=", "'resnet101'", ",", "n", "=", "2", ")", "# initialize", "\n", "modelc", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'weights/resnet101.pt'", ",", "map_location", "=", "device", ")", "[", "'model'", "]", ")", ".", "to", "(", "device", ")", ".", "eval", "(", ")", "\n", "\n", "# Set Dataloader", "\n", "", "vid_path", ",", "vid_writer", "=", "None", ",", "None", "\n", "if", "webcam", ":", "\n", "        ", "view_img", "=", "check_imshow", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "# set True to speed up constant image size inference", "\n", "dataset", "=", "LoadStreams", "(", "source", ",", "img_size", "=", "imgsz", ",", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "LoadImages", "(", "source", ",", "img_size", "=", "imgsz", ",", "stride", "=", "stride", ")", "\n", "\n", "# Get names and colors", "\n", "", "names", "=", "model", ".", "module", ".", "names", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", ".", "names", "\n", "colors", "=", "[", "[", "random", ".", "randint", "(", "0", ",", "255", ")", "for", "_", "in", "range", "(", "3", ")", "]", "for", "_", "in", "names", "]", "\n", "\n", "# Run inference", "\n", "if", "device", ".", "type", "!=", "'cpu'", ":", "\n", "        ", "model", "(", "torch", ".", "zeros", "(", "1", ",", "3", ",", "imgsz", ",", "imgsz", ")", ".", "to", "(", "device", ")", ".", "type_as", "(", "next", "(", "model", ".", "parameters", "(", ")", ")", ")", ")", "# run once", "\n", "", "t0", "=", "time", ".", "time", "(", ")", "\n", "for", "path", ",", "img", ",", "im0s", ",", "vid_cap", "in", "dataset", ":", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "to", "(", "device", ")", "\n", "img", "=", "img", ".", "half", "(", ")", "if", "half", "else", "img", ".", "float", "(", ")", "# uint8 to fp16/32", "\n", "img", "/=", "255.0", "# 0 - 255 to 0.0 - 1.0", "\n", "if", "img", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "            ", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "imgname", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "# Inference", "\n", "t1", "=", "time_synchronized", "(", ")", "\n", "pred", "=", "model", "(", "img", ",", "augment", "=", "opt", ".", "augment", ",", "imgname", "=", "imgname", ")", "[", "0", "]", "\n", "\n", "# Apply NMS", "\n", "pred", "=", "non_max_suppression", "(", "pred", ",", "opt", ".", "conf_thres", ",", "opt", ".", "iou_thres", ",", "classes", "=", "opt", ".", "classes", ",", "agnostic", "=", "opt", ".", "agnostic_nms", ")", "\n", "t2", "=", "time_synchronized", "(", ")", "\n", "\n", "# Apply Classifier", "\n", "if", "classify", ":", "\n", "            ", "pred", "=", "apply_classifier", "(", "pred", ",", "modelc", ",", "img", ",", "im0s", ")", "\n", "\n", "# Process detections", "\n", "", "for", "i", ",", "det", "in", "enumerate", "(", "pred", ")", ":", "# detections per image", "\n", "            ", "if", "webcam", ":", "# batch_size >= 1", "\n", "                ", "p", ",", "s", ",", "im0", ",", "frame", "=", "path", "[", "i", "]", ",", "'%g: '", "%", "i", ",", "im0s", "[", "i", "]", ".", "copy", "(", ")", ",", "dataset", ".", "count", "\n", "", "else", ":", "\n", "                ", "p", ",", "s", ",", "im0", ",", "frame", "=", "path", ",", "''", ",", "im0s", ",", "getattr", "(", "dataset", ",", "'frame'", ",", "0", ")", "\n", "\n", "", "p", "=", "Path", "(", "p", ")", "# to Path", "\n", "save_path", "=", "str", "(", "save_dir", "/", "p", ".", "name", ")", "# img.jpg", "\n", "txt_path", "=", "str", "(", "save_dir", "/", "'labels'", "/", "p", ".", "stem", ")", "+", "(", "''", "if", "dataset", ".", "mode", "==", "'image'", "else", "f'_{frame}'", ")", "# img.txt", "\n", "s", "+=", "'%gx%g '", "%", "img", ".", "shape", "[", "2", ":", "]", "# print string", "\n", "gn", "=", "torch", ".", "tensor", "(", "im0", ".", "shape", ")", "[", "[", "1", ",", "0", ",", "1", ",", "0", "]", "]", "# normalization gain whwh", "\n", "if", "len", "(", "det", ")", ":", "\n", "# Rescale boxes from img_size to im0 size", "\n", "                ", "det", "[", ":", ",", ":", "4", "]", "=", "scale_coords", "(", "img", ".", "shape", "[", "2", ":", "]", ",", "det", "[", ":", ",", ":", "4", "]", ",", "im0", ".", "shape", ")", ".", "round", "(", ")", "\n", "\n", "# Print results", "\n", "for", "c", "in", "det", "[", ":", ",", "-", "1", "]", ".", "unique", "(", ")", ":", "\n", "                    ", "n", "=", "(", "det", "[", ":", ",", "-", "1", "]", "==", "c", ")", ".", "sum", "(", ")", "# detections per class", "\n", "s", "+=", "f\"{n} {names[int(c)]}{'s' * (n > 1)}, \"", "# add to string", "\n", "\n", "# Write results", "\n", "", "for", "*", "xyxy", ",", "conf", ",", "cls", "in", "reversed", "(", "det", ")", ":", "\n", "                    ", "if", "save_txt", ":", "# Write to file", "\n", "                        ", "xywh", "=", "(", "xyxy2xywh", "(", "torch", ".", "tensor", "(", "xyxy", ")", ".", "view", "(", "1", ",", "4", ")", ")", "/", "gn", ")", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", "# normalized xywh", "\n", "line", "=", "(", "cls", ",", "*", "xywh", ",", "conf", ")", "if", "opt", ".", "save_conf", "else", "(", "cls", ",", "*", "xywh", ")", "# label format", "\n", "with", "open", "(", "txt_path", "+", "'.txt'", ",", "'a'", ")", "as", "f", ":", "\n", "                            ", "f", ".", "write", "(", "(", "'%g '", "*", "len", "(", "line", ")", ")", ".", "rstrip", "(", ")", "%", "line", "+", "'\\n'", ")", "\n", "\n", "", "", "if", "save_img", "or", "view_img", ":", "# Add bbox to image", "\n", "# label = f'{names[int(cls)]} {conf:.2f}'", "\n", "                        ", "label", "=", "f'{names[int(cls)]}'", "\n", "plot_one_box", "(", "xyxy", ",", "im0", ",", "label", "=", "label", ",", "color", "=", "colors", "[", "int", "(", "cls", ")", "]", ",", "line_thickness", "=", "3", ")", "\n", "\n", "# Print time (inference + NMS)", "\n", "", "", "", "print", "(", "f'{s}Done. ({t2 - t1:.3f}s)'", ")", "\n", "\n", "# Stream results", "\n", "if", "view_img", ":", "\n", "                ", "cv2", ".", "imshow", "(", "str", "(", "p", ")", ",", "im0", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "# 1 millisecond", "\n", "\n", "# Save results (image with detections)", "\n", "", "if", "save_img", ":", "\n", "                ", "if", "dataset", ".", "mode", "==", "'image'", ":", "\n", "                    ", "cv2", ".", "imwrite", "(", "save_path", ",", "im0", ")", "\n", "", "else", ":", "# 'video' or 'stream'", "\n", "                    ", "if", "vid_path", "!=", "save_path", ":", "# new video", "\n", "                        ", "vid_path", "=", "save_path", "\n", "if", "isinstance", "(", "vid_writer", ",", "cv2", ".", "VideoWriter", ")", ":", "\n", "                            ", "vid_writer", ".", "release", "(", ")", "# release previous video writer", "\n", "", "if", "vid_cap", ":", "# video", "\n", "                            ", "fps", "=", "vid_cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "w", "=", "int", "(", "vid_cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", "\n", "h", "=", "int", "(", "vid_cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", "\n", "", "else", ":", "# stream", "\n", "                            ", "fps", ",", "w", ",", "h", "=", "30", ",", "im0", ".", "shape", "[", "1", "]", ",", "im0", ".", "shape", "[", "0", "]", "\n", "save_path", "+=", "'.mp4'", "\n", "", "vid_writer", "=", "cv2", ".", "VideoWriter", "(", "save_path", ",", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'mp4v'", ")", ",", "fps", ",", "(", "w", ",", "h", ")", ")", "\n", "", "vid_writer", ".", "write", "(", "im0", ")", "\n", "\n", "", "", "", "", "if", "save_txt", "or", "save_img", ":", "\n", "        ", "s", "=", "f\"\\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}\"", "if", "save_txt", "else", "''", "\n", "print", "(", "f\"Results saved to {save_dir}{s}\"", ")", "\n", "\n", "", "print", "(", "f'Done. ({time.time() - t0:.3f}s)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.hubconf.create": [[22, 56], ["models.yolo.Model", "utils.torch_utils.select_device", "model.autoshape.to", "list", "utils.google_utils.attempt_download", "torch.load", "model.autoshape.state_dict", "ckpt[].float().state_dict", "model.autoshape.load_state_dict", "Exception", "len", "model.autoshape.autoshape", "torch.cuda.is_available", "torch.device", "ckpt[].float", "ckpt[].float().state_dict.items", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.select_device", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.google_utils.attempt_download", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.autoshape"], ["def", "create", "(", "name", ",", "pretrained", ",", "channels", ",", "classes", ",", "autoshape", ")", ":", "\n", "    ", "\"\"\"Creates a specified YOLOv3 model\n\n    Arguments:\n        name (str): name of model, i.e. 'yolov3'\n        pretrained (bool): load pretrained weights into the model\n        channels (int): number of input channels\n        classes (int): number of model classes\n\n    Returns:\n        pytorch model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "cfg", "=", "list", "(", "(", "Path", "(", "__file__", ")", ".", "parent", "/", "'models'", ")", ".", "rglob", "(", "f'{name}.yaml'", ")", ")", "[", "0", "]", "# model.yaml path", "\n", "model", "=", "Model", "(", "cfg", ",", "channels", ",", "classes", ")", "\n", "if", "pretrained", ":", "\n", "            ", "fname", "=", "f'{name}.pt'", "# checkpoint filename", "\n", "attempt_download", "(", "fname", ")", "# download if not found locally", "\n", "ckpt", "=", "torch", ".", "load", "(", "fname", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "# load", "\n", "msd", "=", "model", ".", "state_dict", "(", ")", "# model state_dict", "\n", "csd", "=", "ckpt", "[", "'model'", "]", ".", "float", "(", ")", ".", "state_dict", "(", ")", "# checkpoint state_dict as FP32", "\n", "csd", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "csd", ".", "items", "(", ")", "if", "msd", "[", "k", "]", ".", "shape", "==", "v", ".", "shape", "}", "# filter", "\n", "model", ".", "load_state_dict", "(", "csd", ",", "strict", "=", "False", ")", "# load", "\n", "if", "len", "(", "ckpt", "[", "'model'", "]", ".", "names", ")", "==", "classes", ":", "\n", "                ", "model", ".", "names", "=", "ckpt", "[", "'model'", "]", ".", "names", "# set class names attribute", "\n", "", "if", "autoshape", ":", "\n", "                ", "model", "=", "model", ".", "autoshape", "(", ")", "# for file/URI/PIL/cv2/np inputs and NMS", "\n", "", "", "device", "=", "select_device", "(", "'0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "# default to GPU if available", "\n", "return", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "help_url", "=", "'https://github.com/ultralytics/yolov5/issues/36'", "\n", "s", "=", "'Cache maybe be out of date, try force_reload=True. See %s for help.'", "%", "help_url", "\n", "raise", "Exception", "(", "s", ")", "from", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.hubconf.custom": [[58, 80], ["isinstance", "models.yolo.Model().to", "hub_model.autoshape.load_state_dict", "utils.torch_utils.select_device", "hub_model.autoshape.to", "isinstance", "torch.load", "model.float().state_dict", "hub_model.autoshape.autoshape", "models.yolo.Model", "next", "torch.cuda.is_available", "model.parameters", "model.float", "model.get"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.select_device", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.autoshape"], ["", "", "def", "custom", "(", "path_or_model", "=", "'path/to/model.pt'", ",", "autoshape", "=", "True", ")", ":", "\n", "    ", "\"\"\"YOLOv3-custom model https://github.com/ultralytics/yolov3\n\n    Arguments (3 options):\n        path_or_model (str): 'path/to/model.pt'\n        path_or_model (dict): torch.load('path/to/model.pt')\n        path_or_model (nn.Module): torch.load('path/to/model.pt')['model']\n\n    Returns:\n        pytorch model\n    \"\"\"", "\n", "model", "=", "torch", ".", "load", "(", "path_or_model", ")", "if", "isinstance", "(", "path_or_model", ",", "str", ")", "else", "path_or_model", "# load checkpoint", "\n", "if", "isinstance", "(", "model", ",", "dict", ")", ":", "\n", "        ", "model", "=", "model", "[", "'ema'", "if", "model", ".", "get", "(", "'ema'", ")", "else", "'model'", "]", "# load model", "\n", "\n", "", "hub_model", "=", "Model", "(", "model", ".", "yaml", ")", ".", "to", "(", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", ")", "# create", "\n", "hub_model", ".", "load_state_dict", "(", "model", ".", "float", "(", ")", ".", "state_dict", "(", ")", ")", "# load state_dict", "\n", "hub_model", ".", "names", "=", "model", ".", "names", "# class names", "\n", "if", "autoshape", ":", "\n", "        ", "hub_model", "=", "hub_model", ".", "autoshape", "(", ")", "# for file/URI/PIL/cv2/np inputs and NMS", "\n", "", "device", "=", "select_device", "(", "'0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "# default to GPU if available", "\n", "return", "hub_model", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.hubconf.yolov3": [[82, 85], ["hubconf.create"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.hubconf.create"], ["", "def", "yolov3", "(", "pretrained", "=", "True", ",", "channels", "=", "3", ",", "classes", "=", "80", ",", "autoshape", "=", "True", ")", ":", "\n", "# YOLOv3 model https://github.com/ultralytics/yolov3", "\n", "    ", "return", "create", "(", "'yolov3'", ",", "pretrained", ",", "channels", ",", "classes", ",", "autoshape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.hubconf.yolov3_spp": [[87, 90], ["hubconf.create"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.hubconf.create"], ["", "def", "yolov3_spp", "(", "pretrained", "=", "True", ",", "channels", "=", "3", ",", "classes", "=", "80", ",", "autoshape", "=", "True", ")", ":", "\n", "# YOLOv3-SPP model https://github.com/ultralytics/yolov3", "\n", "    ", "return", "create", "(", "'yolov3-spp'", ",", "pretrained", ",", "channels", ",", "classes", ",", "autoshape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.hubconf.yolov3_tiny": [[92, 95], ["hubconf.create"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.hubconf.create"], ["", "def", "yolov3_tiny", "(", "pretrained", "=", "True", ",", "channels", "=", "3", ",", "classes", "=", "80", ",", "autoshape", "=", "True", ")", ":", "\n", "# YOLOv3-tiny model https://github.com/ultralytics/yolov3", "\n", "    ", "return", "create", "(", "'yolov3-tiny'", ",", "pretrained", ",", "channels", ",", "classes", ",", "autoshape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.color_list": [[29, 35], ["tuple", "plots.color_list.hex2rgb"], "function", ["None"], ["def", "color_list", "(", ")", ":", "\n", "# Return first 10 plt colors as (r,g,b) https://stackoverflow.com/questions/51350872/python-from-color-name-to-rgb", "\n", "    ", "def", "hex2rgb", "(", "h", ")", ":", "\n", "        ", "return", "tuple", "(", "int", "(", "h", "[", "1", "+", "i", ":", "1", "+", "i", "+", "2", "]", ",", "16", ")", "for", "i", "in", "(", "0", ",", "2", ",", "4", ")", ")", "\n", "\n", "", "return", "[", "hex2rgb", "(", "h", ")", "for", "h", "in", "matplotlib", ".", "colors", ".", "TABLEAU_COLORS", ".", "values", "(", ")", "]", "# or BASE_ (8), CSS4_ (148), XKCD_ (949)", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.hist2d": [[37, 44], ["numpy.histogram2d", "numpy.clip", "numpy.clip", "numpy.log", "numpy.linspace", "numpy.linspace", "x.min", "x.max", "y.min", "y.max", "numpy.digitize", "numpy.digitize"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log"], ["", "def", "hist2d", "(", "x", ",", "y", ",", "n", "=", "100", ")", ":", "\n", "# 2d histogram used in labels.png and evolve.png", "\n", "    ", "xedges", ",", "yedges", "=", "np", ".", "linspace", "(", "x", ".", "min", "(", ")", ",", "x", ".", "max", "(", ")", ",", "n", ")", ",", "np", ".", "linspace", "(", "y", ".", "min", "(", ")", ",", "y", ".", "max", "(", ")", ",", "n", ")", "\n", "hist", ",", "xedges", ",", "yedges", "=", "np", ".", "histogram2d", "(", "x", ",", "y", ",", "(", "xedges", ",", "yedges", ")", ")", "\n", "xidx", "=", "np", ".", "clip", "(", "np", ".", "digitize", "(", "x", ",", "xedges", ")", "-", "1", ",", "0", ",", "hist", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "yidx", "=", "np", ".", "clip", "(", "np", ".", "digitize", "(", "y", ",", "yedges", ")", "-", "1", ",", "0", ",", "hist", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "return", "np", ".", "log", "(", "hist", "[", "xidx", ",", "yidx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.butter_lowpass_filtfilt": [[46, 55], ["plots.butter_lowpass_filtfilt.butter_lowpass"], "function", ["None"], ["", "def", "butter_lowpass_filtfilt", "(", "data", ",", "cutoff", "=", "1500", ",", "fs", "=", "50000", ",", "order", "=", "5", ")", ":", "\n", "# https://stackoverflow.com/questions/28536191/how-to-filter-smooth-with-scipy-numpy", "\n", "    ", "def", "butter_lowpass", "(", "cutoff", ",", "fs", ",", "order", ")", ":", "\n", "        ", "nyq", "=", "0.5", "*", "fs", "\n", "normal_cutoff", "=", "cutoff", "/", "nyq", "\n", "return", "butter", "(", "order", ",", "normal_cutoff", ",", "btype", "=", "'low'", ",", "analog", "=", "False", ")", "\n", "\n", "", "b", ",", "a", "=", "butter_lowpass", "(", "cutoff", ",", "fs", ",", "order", "=", "order", ")", "\n", "return", "filtfilt", "(", "b", ",", "a", ",", "data", ")", "# forward-backward filter", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_one_box": [[57, 69], ["cv2.rectangle", "max", "cv2.rectangle", "cv2.putText", "round", "random.randint", "int", "int", "int", "int", "cv2.getTextSize", "range"], "function", ["None"], ["", "def", "plot_one_box", "(", "x", ",", "img", ",", "color", "=", "None", ",", "label", "=", "None", ",", "line_thickness", "=", "3", ")", ":", "\n", "# Plots one bounding box on image img", "\n", "    ", "tl", "=", "line_thickness", "or", "round", "(", "0.002", "*", "(", "img", ".", "shape", "[", "0", "]", "+", "img", ".", "shape", "[", "1", "]", ")", "/", "2", ")", "+", "1", "# line/font thickness", "\n", "color", "=", "color", "or", "[", "random", ".", "randint", "(", "0", ",", "255", ")", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "c1", ",", "c2", "=", "(", "int", "(", "x", "[", "0", "]", ")", ",", "int", "(", "x", "[", "1", "]", ")", ")", ",", "(", "int", "(", "x", "[", "2", "]", ")", ",", "int", "(", "x", "[", "3", "]", ")", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "thickness", "=", "tl", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "if", "label", ":", "\n", "        ", "tf", "=", "max", "(", "tl", "-", "1", ",", "1", ")", "# font thickness", "\n", "t_size", "=", "cv2", ".", "getTextSize", "(", "label", ",", "0", ",", "fontScale", "=", "tl", "/", "3", ",", "thickness", "=", "tf", ")", "[", "0", "]", "\n", "c2", "=", "c1", "[", "0", "]", "+", "t_size", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "t_size", "[", "1", "]", "-", "3", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "-", "1", ",", "cv2", ".", "LINE_AA", ")", "# filled", "\n", "cv2", ".", "putText", "(", "img", ",", "label", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "2", ")", ",", "0", ",", "tl", "/", "3", ",", "[", "225", ",", "255", ",", "255", "]", ",", "thickness", "=", "tf", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_one_box_PIL": [[71, 83], ["PIL.Image.fromarray", "PIL.ImageDraw.Draw", "ImageDraw.Draw.rectangle", "numpy.asarray", "max", "max", "PIL.ImageFont.truetype", "ImageFont.truetype.getsize", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.text", "int", "tuple", "round", "tuple", "min", "max"], "function", ["None"], ["", "", "def", "plot_one_box_PIL", "(", "box", ",", "img", ",", "color", "=", "None", ",", "label", "=", "None", ",", "line_thickness", "=", "None", ")", ":", "\n", "    ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "line_thickness", "=", "line_thickness", "or", "max", "(", "int", "(", "min", "(", "img", ".", "size", ")", "/", "200", ")", ",", "2", ")", "\n", "draw", ".", "rectangle", "(", "box", ",", "width", "=", "line_thickness", ",", "outline", "=", "tuple", "(", "color", ")", ")", "# plot", "\n", "if", "label", ":", "\n", "        ", "fontsize", "=", "max", "(", "round", "(", "max", "(", "img", ".", "size", ")", "/", "40", ")", ",", "12", ")", "\n", "font", "=", "ImageFont", ".", "truetype", "(", "\"Arial.ttf\"", ",", "fontsize", ")", "\n", "txt_width", ",", "txt_height", "=", "font", ".", "getsize", "(", "label", ")", "\n", "draw", ".", "rectangle", "(", "[", "box", "[", "0", "]", ",", "box", "[", "1", "]", "-", "txt_height", "+", "4", ",", "box", "[", "0", "]", "+", "txt_width", ",", "box", "[", "1", "]", "]", ",", "fill", "=", "tuple", "(", "color", ")", ")", "\n", "draw", ".", "text", "(", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", "-", "txt_height", "+", "1", ")", ",", "label", ",", "fill", "=", "(", "255", ",", "255", ",", "255", ")", ",", "font", "=", "font", ")", "\n", "", "return", "np", ".", "asarray", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_wh_methods": [[85, 103], ["numpy.arange", "numpy.exp", "matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.grid", "matplotlib.legend", "plt.figure.savefig", "torch.sigmoid().numpy", "torch.sigmoid", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot"], ["", "def", "plot_wh_methods", "(", ")", ":", "# from utils.plots import *; plot_wh_methods()", "\n", "# Compares the two methods for width-height anchor multiplication", "\n", "# https://github.com/ultralytics/yolov3/issues/168", "\n", "    ", "x", "=", "np", ".", "arange", "(", "-", "4.0", ",", "4.0", ",", ".1", ")", "\n", "ya", "=", "np", ".", "exp", "(", "x", ")", "\n", "yb", "=", "torch", ".", "sigmoid", "(", "torch", ".", "from_numpy", "(", "x", ")", ")", ".", "numpy", "(", ")", "*", "2", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "3", ")", ",", "tight_layout", "=", "True", ")", "\n", "plt", ".", "plot", "(", "x", ",", "ya", ",", "'.-'", ",", "label", "=", "'YOLOv3'", ")", "\n", "plt", ".", "plot", "(", "x", ",", "yb", "**", "2", ",", "'.-'", ",", "label", "=", "'YOLOv5 ^2'", ")", "\n", "plt", ".", "plot", "(", "x", ",", "yb", "**", "1.6", ",", "'.-'", ",", "label", "=", "'YOLOv5 ^1.6'", ")", "\n", "plt", ".", "xlim", "(", "left", "=", "-", "4", ",", "right", "=", "4", ")", "\n", "plt", ".", "ylim", "(", "bottom", "=", "0", ",", "top", "=", "6", ")", "\n", "plt", ".", "xlabel", "(", "'input'", ")", "\n", "plt", ".", "ylabel", "(", "'output'", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "fig", ".", "savefig", "(", "'comparison.png'", ",", "dpi", "=", "200", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.output_to_target": [[105, 112], ["enumerate", "numpy.array", "o.cpu().numpy", "targets.append", "o.cpu", "list", "utils.general.xyxy2xywh", "numpy.array"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xyxy2xywh"], ["", "def", "output_to_target", "(", "output", ")", ":", "\n", "# Convert model output to target format [batch_id, class_id, x, y, w, h, conf]", "\n", "    ", "targets", "=", "[", "]", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "output", ")", ":", "\n", "        ", "for", "*", "box", ",", "conf", ",", "cls", "in", "o", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ":", "\n", "            ", "targets", ".", "append", "(", "[", "i", ",", "cls", ",", "*", "list", "(", "*", "xyxy2xywh", "(", "np", ".", "array", "(", "box", ")", "[", "None", "]", ")", ")", ",", "conf", "]", ")", "\n", "", "", "return", "np", ".", "array", "(", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_images": [[114, 191], ["isinstance", "isinstance", "max", "min", "numpy.ceil", "plots.color_list", "numpy.full", "enumerate", "images.cpu().float().numpy.cpu().float().numpy", "targets.cpu().numpy.cpu().numpy", "numpy.max", "max", "math.ceil", "math.ceil", "int", "int", "cv2.resize.transpose", "cv2.rectangle", "min", "cv2.resize", "PIL.Image.fromarray().save", "int", "int", "cv2.resize", "len", "image_targets[].astype", "enumerate", "cv2.putText", "images.cpu().float().numpy.cpu().float", "targets.cpu().numpy.cpu", "utils.general.xywh2xyxy", "int", "cv2.getTextSize", "int", "int", "PIL.Image.fromarray", "boxes.max", "plots.plot_one_box", "pathlib.Path", "max", "images.cpu().float().numpy.cpu", "len"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.color_list", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xywh2xyxy", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_one_box"], ["", "def", "plot_images", "(", "images", ",", "targets", ",", "paths", "=", "None", ",", "fname", "=", "'images.jpg'", ",", "names", "=", "None", ",", "max_size", "=", "640", ",", "max_subplots", "=", "16", ")", ":", "\n", "# Plot image grid with labels", "\n", "\n", "    ", "if", "isinstance", "(", "images", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "images", "=", "images", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "isinstance", "(", "targets", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "targets", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# un-normalise", "\n", "", "if", "np", ".", "max", "(", "images", "[", "0", "]", ")", "<=", "1", ":", "\n", "        ", "images", "*=", "255", "\n", "\n", "", "tl", "=", "3", "# line thickness", "\n", "tf", "=", "max", "(", "tl", "-", "1", ",", "1", ")", "# font thickness", "\n", "bs", ",", "_", ",", "h", ",", "w", "=", "images", ".", "shape", "# batch size, _, height, width", "\n", "bs", "=", "min", "(", "bs", ",", "max_subplots", ")", "# limit plot images", "\n", "ns", "=", "np", ".", "ceil", "(", "bs", "**", "0.5", ")", "# number of subplots (square)", "\n", "\n", "# Check if we should resize", "\n", "scale_factor", "=", "max_size", "/", "max", "(", "h", ",", "w", ")", "\n", "if", "scale_factor", "<", "1", ":", "\n", "        ", "h", "=", "math", ".", "ceil", "(", "scale_factor", "*", "h", ")", "\n", "w", "=", "math", ".", "ceil", "(", "scale_factor", "*", "w", ")", "\n", "\n", "", "colors", "=", "color_list", "(", ")", "# list of colors", "\n", "mosaic", "=", "np", ".", "full", "(", "(", "int", "(", "ns", "*", "h", ")", ",", "int", "(", "ns", "*", "w", ")", ",", "3", ")", ",", "255", ",", "dtype", "=", "np", ".", "uint8", ")", "# init", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "if", "i", "==", "max_subplots", ":", "# if last batch has fewer images than we expect", "\n", "            ", "break", "\n", "\n", "", "block_x", "=", "int", "(", "w", "*", "(", "i", "//", "ns", ")", ")", "\n", "block_y", "=", "int", "(", "h", "*", "(", "i", "%", "ns", ")", ")", "\n", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "if", "scale_factor", "<", "1", ":", "\n", "            ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "", "mosaic", "[", "block_y", ":", "block_y", "+", "h", ",", "block_x", ":", "block_x", "+", "w", ",", ":", "]", "=", "img", "\n", "if", "len", "(", "targets", ")", ">", "0", ":", "\n", "            ", "image_targets", "=", "targets", "[", "targets", "[", ":", ",", "0", "]", "==", "i", "]", "\n", "boxes", "=", "xywh2xyxy", "(", "image_targets", "[", ":", ",", "2", ":", "6", "]", ")", ".", "T", "\n", "classes", "=", "image_targets", "[", ":", ",", "1", "]", ".", "astype", "(", "'int'", ")", "\n", "labels", "=", "image_targets", ".", "shape", "[", "1", "]", "==", "6", "# labels if no conf column", "\n", "conf", "=", "None", "if", "labels", "else", "image_targets", "[", ":", ",", "6", "]", "# check for confidence presence (label vs pred)", "\n", "\n", "if", "boxes", ".", "shape", "[", "1", "]", ":", "\n", "                ", "if", "boxes", ".", "max", "(", ")", "<=", "1.01", ":", "# if normalized with tolerance 0.01", "\n", "                    ", "boxes", "[", "[", "0", ",", "2", "]", "]", "*=", "w", "# scale to pixels", "\n", "boxes", "[", "[", "1", ",", "3", "]", "]", "*=", "h", "\n", "", "elif", "scale_factor", "<", "1", ":", "# absolute coords need scale if image scales", "\n", "                    ", "boxes", "*=", "scale_factor", "\n", "", "", "boxes", "[", "[", "0", ",", "2", "]", "]", "+=", "block_x", "\n", "boxes", "[", "[", "1", ",", "3", "]", "]", "+=", "block_y", "\n", "for", "j", ",", "box", "in", "enumerate", "(", "boxes", ".", "T", ")", ":", "\n", "                ", "cls", "=", "int", "(", "classes", "[", "j", "]", ")", "\n", "color", "=", "colors", "[", "cls", "%", "len", "(", "colors", ")", "]", "\n", "cls", "=", "names", "[", "cls", "]", "if", "names", "else", "cls", "\n", "if", "labels", "or", "conf", "[", "j", "]", ">", "0.25", ":", "# 0.25 conf thresh", "\n", "                    ", "label", "=", "'%s'", "%", "cls", "if", "labels", "else", "'%s %.1f'", "%", "(", "cls", ",", "conf", "[", "j", "]", ")", "\n", "plot_one_box", "(", "box", ",", "mosaic", ",", "label", "=", "label", ",", "color", "=", "color", ",", "line_thickness", "=", "tl", ")", "\n", "\n", "# Draw image filename labels", "\n", "", "", "", "if", "paths", ":", "\n", "            ", "label", "=", "Path", "(", "paths", "[", "i", "]", ")", ".", "name", "[", ":", "40", "]", "# trim to 40 char", "\n", "t_size", "=", "cv2", ".", "getTextSize", "(", "label", ",", "0", ",", "fontScale", "=", "tl", "/", "3", ",", "thickness", "=", "tf", ")", "[", "0", "]", "\n", "cv2", ".", "putText", "(", "mosaic", ",", "label", ",", "(", "block_x", "+", "5", ",", "block_y", "+", "t_size", "[", "1", "]", "+", "5", ")", ",", "0", ",", "tl", "/", "3", ",", "[", "220", ",", "220", ",", "220", "]", ",", "thickness", "=", "tf", ",", "\n", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n", "# Image border", "\n", "", "cv2", ".", "rectangle", "(", "mosaic", ",", "(", "block_x", ",", "block_y", ")", ",", "(", "block_x", "+", "w", ",", "block_y", "+", "h", ")", ",", "(", "255", ",", "255", ",", "255", ")", ",", "thickness", "=", "3", ")", "\n", "\n", "", "if", "fname", ":", "\n", "        ", "r", "=", "min", "(", "1280.", "/", "max", "(", "h", ",", "w", ")", "/", "ns", ",", "1.0", ")", "# ratio to limit image size", "\n", "mosaic", "=", "cv2", ".", "resize", "(", "mosaic", ",", "(", "int", "(", "ns", "*", "w", "*", "r", ")", ",", "int", "(", "ns", "*", "h", "*", "r", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "# cv2.imwrite(fname, cv2.cvtColor(mosaic, cv2.COLOR_BGR2RGB))  # cv2 save", "\n", "Image", ".", "fromarray", "(", "mosaic", ")", ".", "save", "(", "fname", ")", "# PIL save", "\n", "", "return", "mosaic", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_lr_scheduler": [[193, 208], ["range", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.grid", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.savefig", "matplotlib.close", "copy.copy", "copy.copy", "scheduler.step", "y.append", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot"], ["", "def", "plot_lr_scheduler", "(", "optimizer", ",", "scheduler", ",", "epochs", "=", "300", ",", "save_dir", "=", "''", ")", ":", "\n", "# Plot LR simulating training for full epochs", "\n", "    ", "optimizer", ",", "scheduler", "=", "copy", "(", "optimizer", ")", ",", "copy", "(", "scheduler", ")", "# do not modify originals", "\n", "y", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "y", ".", "append", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "", "plt", ".", "plot", "(", "y", ",", "'.-'", ",", "label", "=", "'LR'", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'LR'", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "epochs", ")", "\n", "plt", ".", "ylim", "(", "0", ")", "\n", "plt", ".", "savefig", "(", "Path", "(", "save_dir", ")", "/", "'LR.png'", ",", "dpi", "=", "200", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_test_txt": [[210, 225], ["numpy.loadtxt", "utils.general.xyxy2xywh", "matplotlib.subplots", "ax.hist2d", "ax.set_aspect", "matplotlib.savefig", "matplotlib.subplots", "ax[].hist", "ax[].hist", "matplotlib.savefig"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xyxy2xywh", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.hist2d"], ["", "def", "plot_test_txt", "(", ")", ":", "# from utils.plots import *; plot_test()", "\n", "# Plot test.txt histograms", "\n", "    ", "x", "=", "np", ".", "loadtxt", "(", "'test.txt'", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "box", "=", "xyxy2xywh", "(", "x", "[", ":", ",", ":", "4", "]", ")", "\n", "cx", ",", "cy", "=", "box", "[", ":", ",", "0", "]", ",", "box", "[", ":", ",", "1", "]", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "6", ",", "6", ")", ",", "tight_layout", "=", "True", ")", "\n", "ax", ".", "hist2d", "(", "cx", ",", "cy", ",", "bins", "=", "600", ",", "cmax", "=", "10", ",", "cmin", "=", "0", ")", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "plt", ".", "savefig", "(", "'hist2d.png'", ",", "dpi", "=", "300", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "2", ",", "figsize", "=", "(", "12", ",", "6", ")", ",", "tight_layout", "=", "True", ")", "\n", "ax", "[", "0", "]", ".", "hist", "(", "cx", ",", "bins", "=", "600", ")", "\n", "ax", "[", "1", "]", ".", "hist", "(", "cy", ",", "bins", "=", "600", ")", "\n", "plt", ".", "savefig", "(", "'hist1d.png'", ",", "dpi", "=", "200", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_targets_txt": [[227, 238], ["matplotlib.subplots", "ax.ravel.ravel", "range", "matplotlib.savefig", "numpy.loadtxt", "ax[].hist", "ax[].legend", "ax[].set_title", "x[].mean", "x[].std"], "function", ["None"], ["", "def", "plot_targets_txt", "(", ")", ":", "# from utils.plots import *; plot_targets_txt()", "\n", "# Plot targets.txt histograms", "\n", "    ", "x", "=", "np", ".", "loadtxt", "(", "'targets.txt'", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "s", "=", "[", "'x targets'", ",", "'y targets'", ",", "'width targets'", ",", "'height targets'", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "2", ",", "figsize", "=", "(", "8", ",", "8", ")", ",", "tight_layout", "=", "True", ")", "\n", "ax", "=", "ax", ".", "ravel", "(", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "ax", "[", "i", "]", ".", "hist", "(", "x", "[", "i", "]", ",", "bins", "=", "100", ",", "label", "=", "'%.3g +/- %.3g'", "%", "(", "x", "[", "i", "]", ".", "mean", "(", ")", ",", "x", "[", "i", "]", ".", "std", "(", ")", ")", ")", "\n", "ax", "[", "i", "]", ".", "legend", "(", ")", "\n", "ax", "[", "i", "]", ".", "set_title", "(", "s", "[", "i", "]", ")", "\n", "", "plt", ".", "savefig", "(", "'targets.jpg'", ",", "dpi", "=", "200", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_study_txt": [[240, 270], ["matplotlib.subplots", "matplotlib.subplots", "sorted", "ax2.plot", "ax2.grid", "ax2.set_yticks", "ax2.set_xlim", "ax2.set_ylim", "ax2.set_xlabel", "ax2.set_ylabel", "ax2.legend", "matplotlib.savefig", "pathlib.Path().glob", "ax2.plot", "numpy.arange", "numpy.loadtxt", "numpy.arange", "numpy.array", "y[].argmax", "numpy.array", "str", "pathlib.Path", "f.stem.replace().replace", "pathlib.Path", "f.stem.replace"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot"], ["", "def", "plot_study_txt", "(", "path", "=", "''", ",", "x", "=", "None", ")", ":", "# from utils.plots import *; plot_study_txt()", "\n", "# Plot study.txt generated by test.py", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "4", ",", "figsize", "=", "(", "10", ",", "6", ")", ",", "tight_layout", "=", "True", ")", "\n", "# ax = ax.ravel()", "\n", "\n", "fig2", ",", "ax2", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "8", ",", "4", ")", ",", "tight_layout", "=", "True", ")", "\n", "# for f in [Path(path) / f'study_coco_{x}.txt' for x in ['yolov3-tiny', 'yolov3', 'yolov3-spp', 'yolov5l']]:", "\n", "for", "f", "in", "sorted", "(", "Path", "(", "path", ")", ".", "glob", "(", "'study*.txt'", ")", ")", ":", "\n", "        ", "y", "=", "np", ".", "loadtxt", "(", "f", ",", "dtype", "=", "np", ".", "float32", ",", "usecols", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "7", ",", "8", ",", "9", "]", ",", "ndmin", "=", "2", ")", ".", "T", "\n", "x", "=", "np", ".", "arange", "(", "y", ".", "shape", "[", "1", "]", ")", "if", "x", "is", "None", "else", "np", ".", "array", "(", "x", ")", "\n", "s", "=", "[", "'P'", ",", "'R'", ",", "'mAP@.5'", ",", "'mAP@.5:.95'", ",", "'t_inference (ms/img)'", ",", "'t_NMS (ms/img)'", ",", "'t_total (ms/img)'", "]", "\n", "# for i in range(7):", "\n", "#     ax[i].plot(x, y[i], '.-', linewidth=2, markersize=8)", "\n", "#     ax[i].set_title(s[i])", "\n", "\n", "j", "=", "y", "[", "3", "]", ".", "argmax", "(", ")", "+", "1", "\n", "ax2", ".", "plot", "(", "y", "[", "6", ",", "1", ":", "j", "]", ",", "y", "[", "3", ",", "1", ":", "j", "]", "*", "1E2", ",", "'.-'", ",", "linewidth", "=", "2", ",", "markersize", "=", "8", ",", "\n", "label", "=", "f", ".", "stem", ".", "replace", "(", "'study_coco_'", ",", "''", ")", ".", "replace", "(", "'yolo'", ",", "'YOLO'", ")", ")", "\n", "\n", "", "ax2", ".", "plot", "(", "1E3", "/", "np", ".", "array", "(", "[", "209", ",", "140", ",", "97", ",", "58", ",", "35", ",", "18", "]", ")", ",", "[", "34.6", ",", "40.5", ",", "43.0", ",", "47.5", ",", "49.7", ",", "51.5", "]", ",", "\n", "'k.-'", ",", "linewidth", "=", "2", ",", "markersize", "=", "8", ",", "alpha", "=", ".25", ",", "label", "=", "'EfficientDet'", ")", "\n", "\n", "ax2", ".", "grid", "(", "alpha", "=", "0.2", ")", "\n", "ax2", ".", "set_yticks", "(", "np", ".", "arange", "(", "20", ",", "60", ",", "5", ")", ")", "\n", "ax2", ".", "set_xlim", "(", "0", ",", "57", ")", "\n", "ax2", ".", "set_ylim", "(", "15", ",", "55", ")", "\n", "ax2", ".", "set_xlabel", "(", "'GPU Speed (ms/img)'", ")", "\n", "ax2", ".", "set_ylabel", "(", "'COCO AP val'", ")", "\n", "ax2", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "savefig", "(", "str", "(", "Path", "(", "path", ")", ".", "name", ")", "+", "'.png'", ",", "dpi", "=", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_labels": [[272, 318], ["pathlib.Path", "print", "int", "plots.color_list", "pandas.DataFrame", "seaborn.pairplot", "matplotlib.savefig", "matplotlib.close", "matplotlib.use", "matplotlib.use", "[].ravel", "ax[].hist", "ax[].set_ylabel", "seaborn.histplot", "seaborn.histplot", "PIL.Image.fromarray", "ax[].imshow", "ax[].axis", "matplotlib.savefig", "matplotlib.use", "matplotlib.use", "matplotlib.close", "labels[].transpose", "b.transpose", "len", "ax[].set_xticks", "ax[].set_xticklabels", "ax[].set_xlabel", "utils.general.xywh2xyxy", "PIL.ImageDraw.Draw().rectangle", "loggers.items", "c.max", "dict", "dict", "range", "numpy.ones", "ax[].spines[].set_visible", "v.log", "matplotlib.subplots", "numpy.linspace", "len", "PIL.ImageDraw.Draw", "v.Image", "int", "str", "save_dir.glob"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.color_list", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xywh2xyxy", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log"], ["", "def", "plot_labels", "(", "labels", ",", "names", "=", "(", ")", ",", "save_dir", "=", "Path", "(", "''", ")", ",", "loggers", "=", "None", ")", ":", "\n", "# plot dataset labels", "\n", "    ", "print", "(", "'Plotting labels... '", ")", "\n", "c", ",", "b", "=", "labels", "[", ":", ",", "0", "]", ",", "labels", "[", ":", ",", "1", ":", "]", ".", "transpose", "(", ")", "# classes, boxes", "\n", "nc", "=", "int", "(", "c", ".", "max", "(", ")", "+", "1", ")", "# number of classes", "\n", "colors", "=", "color_list", "(", ")", "\n", "x", "=", "pd", ".", "DataFrame", "(", "b", ".", "transpose", "(", ")", ",", "columns", "=", "[", "'x'", ",", "'y'", ",", "'width'", ",", "'height'", "]", ")", "\n", "\n", "# seaborn correlogram", "\n", "sns", ".", "pairplot", "(", "x", ",", "corner", "=", "True", ",", "diag_kind", "=", "'auto'", ",", "kind", "=", "'hist'", ",", "diag_kws", "=", "dict", "(", "bins", "=", "50", ")", ",", "plot_kws", "=", "dict", "(", "pmax", "=", "0.9", ")", ")", "\n", "plt", ".", "savefig", "(", "save_dir", "/", "'labels_correlogram.jpg'", ",", "dpi", "=", "200", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "# matplotlib labels", "\n", "matplotlib", ".", "use", "(", "'svg'", ")", "# faster", "\n", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "2", ",", "figsize", "=", "(", "8", ",", "8", ")", ",", "tight_layout", "=", "True", ")", "[", "1", "]", ".", "ravel", "(", ")", "\n", "ax", "[", "0", "]", ".", "hist", "(", "c", ",", "bins", "=", "np", ".", "linspace", "(", "0", ",", "nc", ",", "nc", "+", "1", ")", "-", "0.5", ",", "rwidth", "=", "0.8", ")", "\n", "ax", "[", "0", "]", ".", "set_ylabel", "(", "'instances'", ")", "\n", "if", "0", "<", "len", "(", "names", ")", "<", "30", ":", "\n", "        ", "ax", "[", "0", "]", ".", "set_xticks", "(", "range", "(", "len", "(", "names", ")", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_xticklabels", "(", "names", ",", "rotation", "=", "90", ",", "fontsize", "=", "10", ")", "\n", "", "else", ":", "\n", "        ", "ax", "[", "0", "]", ".", "set_xlabel", "(", "'classes'", ")", "\n", "", "sns", ".", "histplot", "(", "x", ",", "x", "=", "'x'", ",", "y", "=", "'y'", ",", "ax", "=", "ax", "[", "2", "]", ",", "bins", "=", "50", ",", "pmax", "=", "0.9", ")", "\n", "sns", ".", "histplot", "(", "x", ",", "x", "=", "'width'", ",", "y", "=", "'height'", ",", "ax", "=", "ax", "[", "3", "]", ",", "bins", "=", "50", ",", "pmax", "=", "0.9", ")", "\n", "\n", "# rectangles", "\n", "labels", "[", ":", ",", "1", ":", "3", "]", "=", "0.5", "# center", "\n", "labels", "[", ":", ",", "1", ":", "]", "=", "xywh2xyxy", "(", "labels", "[", ":", ",", "1", ":", "]", ")", "*", "2000", "\n", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "ones", "(", "(", "2000", ",", "2000", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", ")", "\n", "for", "cls", ",", "*", "box", "in", "labels", "[", ":", "1000", "]", ":", "\n", "        ", "ImageDraw", ".", "Draw", "(", "img", ")", ".", "rectangle", "(", "box", ",", "width", "=", "1", ",", "outline", "=", "colors", "[", "int", "(", "cls", ")", "%", "10", "]", ")", "# plot", "\n", "", "ax", "[", "1", "]", ".", "imshow", "(", "img", ")", "\n", "ax", "[", "1", "]", ".", "axis", "(", "'off'", ")", "\n", "\n", "for", "a", "in", "[", "0", ",", "1", ",", "2", ",", "3", "]", ":", "\n", "        ", "for", "s", "in", "[", "'top'", ",", "'right'", ",", "'left'", ",", "'bottom'", "]", ":", "\n", "            ", "ax", "[", "a", "]", ".", "spines", "[", "s", "]", ".", "set_visible", "(", "False", ")", "\n", "", "", "plt", ".", "savefig", "(", "save_dir", "/", "'labels.jpg'", ",", "dpi", "=", "200", ")", "\n", "matplotlib", ".", "use", "(", "'Agg'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "# loggers", "\n", "for", "k", ",", "v", "in", "loggers", ".", "items", "(", ")", "or", "{", "}", ":", "\n", "        ", "if", "k", "==", "'wandb'", "and", "v", ":", "\n", "            ", "v", ".", "log", "(", "{", "\"Labels\"", ":", "[", "v", ".", "Image", "(", "str", "(", "x", ")", ",", "caption", "=", "x", ".", "name", ")", "for", "x", "in", "save_dir", ".", "glob", "(", "'*labels*.jpg'", ")", "]", "}", ",", "commit", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_evolution": [[320, 342], ["numpy.loadtxt", "utils.metrics.fitness", "matplotlib.figure", "matplotlib.rc", "matplotlib.rc", "enumerate", "matplotlib.savefig", "print", "open", "yaml.load", "yaml.load.items", "matplotlib.subplot", "matplotlib.scatter", "matplotlib.plot", "matplotlib.title", "print", "utils.metrics.fitness.max", "matplotlib.yticks", "utils.metrics.fitness.argmax", "plots.hist2d"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.fitness", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.hist2d"], ["", "", "", "def", "plot_evolution", "(", "yaml_file", "=", "'data/hyp.finetune.yaml'", ")", ":", "# from utils.plots import *; plot_evolution()", "\n", "# Plot hyperparameter evolution results in evolve.txt", "\n", "    ", "with", "open", "(", "yaml_file", ")", "as", "f", ":", "\n", "        ", "hyp", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", "\n", "", "x", "=", "np", ".", "loadtxt", "(", "'evolve.txt'", ",", "ndmin", "=", "2", ")", "\n", "f", "=", "fitness", "(", "x", ")", "\n", "# weights = (f - f.min()) ** 2  # for weighted results", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "12", ")", ",", "tight_layout", "=", "True", ")", "\n", "matplotlib", ".", "rc", "(", "'font'", ",", "**", "{", "'size'", ":", "8", "}", ")", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "hyp", ".", "items", "(", ")", ")", ":", "\n", "        ", "y", "=", "x", "[", ":", ",", "i", "+", "7", "]", "\n", "# mu = (y * weights).sum() / weights.sum()  # best weighted result", "\n", "mu", "=", "y", "[", "f", ".", "argmax", "(", ")", "]", "# best single result", "\n", "plt", ".", "subplot", "(", "6", ",", "5", ",", "i", "+", "1", ")", "\n", "plt", ".", "scatter", "(", "y", ",", "f", ",", "c", "=", "hist2d", "(", "y", ",", "f", ",", "20", ")", ",", "cmap", "=", "'viridis'", ",", "alpha", "=", ".8", ",", "edgecolors", "=", "'none'", ")", "\n", "plt", ".", "plot", "(", "mu", ",", "f", ".", "max", "(", ")", ",", "'k+'", ",", "markersize", "=", "15", ")", "\n", "plt", ".", "title", "(", "'%s = %.3g'", "%", "(", "k", ",", "mu", ")", ",", "fontdict", "=", "{", "'size'", ":", "9", "}", ")", "# limit to 40 characters", "\n", "if", "i", "%", "5", "!=", "0", ":", "\n", "            ", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "", "print", "(", "'%15s: %.3g'", "%", "(", "k", ",", "mu", ")", ")", "\n", "", "plt", ".", "savefig", "(", "'evolve.png'", ",", "dpi", "=", "200", ")", "\n", "print", "(", "'\\nPlot saved as evolve.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.profile_idetection": [[344, 374], ["[].ravel", "list", "enumerate", "ax[].legend", "matplotlib.savefig", "pathlib.Path().glob", "numpy.arange", "enumerate", "pathlib.Path", "matplotlib.subplots", "pathlib.Path", "results[].min", "print", "numpy.loadtxt", "min", "len", "a.plot", "a.set_title", "a.set_xlabel", "a.remove", "len", "f.stem.replace", "a.spines[].set_visible"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot"], ["", "def", "profile_idetection", "(", "start", "=", "0", ",", "stop", "=", "0", ",", "labels", "=", "(", ")", ",", "save_dir", "=", "''", ")", ":", "\n", "# Plot iDetection '*.txt' per-image logs. from utils.plots import *; profile_idetection()", "\n", "    ", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "4", ",", "figsize", "=", "(", "12", ",", "6", ")", ",", "tight_layout", "=", "True", ")", "[", "1", "]", ".", "ravel", "(", ")", "\n", "s", "=", "[", "'Images'", ",", "'Free Storage (GB)'", ",", "'RAM Usage (GB)'", ",", "'Battery'", ",", "'dt_raw (ms)'", ",", "'dt_smooth (ms)'", ",", "'real-world FPS'", "]", "\n", "files", "=", "list", "(", "Path", "(", "save_dir", ")", ".", "glob", "(", "'frames*.txt'", ")", ")", "\n", "for", "fi", ",", "f", "in", "enumerate", "(", "files", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "results", "=", "np", ".", "loadtxt", "(", "f", ",", "ndmin", "=", "2", ")", ".", "T", "[", ":", ",", "90", ":", "-", "30", "]", "# clip first and last rows", "\n", "n", "=", "results", ".", "shape", "[", "1", "]", "# number of rows", "\n", "x", "=", "np", ".", "arange", "(", "start", ",", "min", "(", "stop", ",", "n", ")", "if", "stop", "else", "n", ")", "\n", "results", "=", "results", "[", ":", ",", "x", "]", "\n", "t", "=", "(", "results", "[", "0", "]", "-", "results", "[", "0", "]", ".", "min", "(", ")", ")", "# set t0=0s", "\n", "results", "[", "0", "]", "=", "x", "\n", "for", "i", ",", "a", "in", "enumerate", "(", "ax", ")", ":", "\n", "                ", "if", "i", "<", "len", "(", "results", ")", ":", "\n", "                    ", "label", "=", "labels", "[", "fi", "]", "if", "len", "(", "labels", ")", "else", "f", ".", "stem", ".", "replace", "(", "'frames_'", ",", "''", ")", "\n", "a", ".", "plot", "(", "t", ",", "results", "[", "i", "]", ",", "marker", "=", "'.'", ",", "label", "=", "label", ",", "linewidth", "=", "1", ",", "markersize", "=", "5", ")", "\n", "a", ".", "set_title", "(", "s", "[", "i", "]", ")", "\n", "a", ".", "set_xlabel", "(", "'time (s)'", ")", "\n", "# if fi == len(files) - 1:", "\n", "#     a.set_ylim(bottom=0)", "\n", "for", "side", "in", "[", "'top'", ",", "'right'", "]", ":", "\n", "                        ", "a", ".", "spines", "[", "side", "]", ".", "set_visible", "(", "False", ")", "\n", "", "", "else", ":", "\n", "                    ", "a", ".", "remove", "(", ")", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "'Warning: Plotting error for %s; %s'", "%", "(", "f", ",", "e", ")", ")", "\n", "\n", "", "", "ax", "[", "1", "]", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "Path", "(", "save_dir", ")", "/", "'idetection_profile.png'", ",", "dpi", "=", "200", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_results_overlay": [[376, 397], ["sorted", "range", "matplotlib.subplots", "ax.ravel.ravel", "range", "fig.savefig", "glob.glob", "glob.glob", "numpy.loadtxt", "ax[].set_title", "ax[].legend", "f.replace", "min", "ax[].plot", "ax[].set_ylabel"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot"], ["", "def", "plot_results_overlay", "(", "start", "=", "0", ",", "stop", "=", "0", ")", ":", "# from utils.plots import *; plot_results_overlay()", "\n", "# Plot training 'results*.txt', overlaying train and val losses", "\n", "    ", "s", "=", "[", "'train'", ",", "'train'", ",", "'train'", ",", "'Precision'", ",", "'mAP@0.5'", ",", "'val'", ",", "'val'", ",", "'val'", ",", "'Recall'", ",", "'mAP@0.5:0.95'", "]", "# legends", "\n", "t", "=", "[", "'Box'", ",", "'Objectness'", ",", "'Classification'", ",", "'P-R'", ",", "'mAP-F1'", "]", "# titles", "\n", "for", "f", "in", "sorted", "(", "glob", ".", "glob", "(", "'results*.txt'", ")", "+", "glob", ".", "glob", "(", "'../../Downloads/results*.txt'", ")", ")", ":", "\n", "        ", "results", "=", "np", ".", "loadtxt", "(", "f", ",", "usecols", "=", "[", "2", ",", "3", ",", "4", ",", "8", ",", "9", ",", "12", ",", "13", ",", "14", ",", "10", ",", "11", "]", ",", "ndmin", "=", "2", ")", ".", "T", "\n", "n", "=", "results", ".", "shape", "[", "1", "]", "# number of rows", "\n", "x", "=", "range", "(", "start", ",", "min", "(", "stop", ",", "n", ")", "if", "stop", "else", "n", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "5", ",", "figsize", "=", "(", "14", ",", "3.5", ")", ",", "tight_layout", "=", "True", ")", "\n", "ax", "=", "ax", ".", "ravel", "(", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "j", "in", "[", "i", ",", "i", "+", "5", "]", ":", "\n", "                ", "y", "=", "results", "[", "j", ",", "x", "]", "\n", "ax", "[", "i", "]", ".", "plot", "(", "x", ",", "y", ",", "marker", "=", "'.'", ",", "label", "=", "s", "[", "j", "]", ")", "\n", "# y_smooth = butter_lowpass_filtfilt(y)", "\n", "# ax[i].plot(x, np.gradient(y_smooth), marker='.', label=s[j])", "\n", "\n", "", "ax", "[", "i", "]", ".", "set_title", "(", "t", "[", "i", "]", ")", "\n", "ax", "[", "i", "]", ".", "legend", "(", ")", "\n", "ax", "[", "i", "]", ".", "set_ylabel", "(", "f", ")", "if", "i", "==", "0", "else", "None", "# add filename", "\n", "", "fig", ".", "savefig", "(", "f", ".", "replace", "(", "'.txt'", ",", "'.png'", ")", ",", "dpi", "=", "200", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.plot_results": [[399, 433], ["matplotlib.subplots", "ax.ravel.ravel", "len", "enumerate", "ax[].legend", "fig.savefig", "os.system", "list", "os.path.abspath", "tuple", "pathlib.Path().glob", "range", "range", "pathlib.Path", "numpy.loadtxt", "ax[].plot", "ax[].set_title", "print", "pathlib.Path", "min", "len", "len"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "", "def", "plot_results", "(", "start", "=", "0", ",", "stop", "=", "0", ",", "bucket", "=", "''", ",", "id", "=", "(", ")", ",", "labels", "=", "(", ")", ",", "save_dir", "=", "''", ")", ":", "\n", "# Plot training 'results*.txt'. from utils.plots import *; plot_results(save_dir='runs/train/exp')", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "5", ",", "figsize", "=", "(", "12", ",", "6", ")", ",", "tight_layout", "=", "True", ")", "\n", "ax", "=", "ax", ".", "ravel", "(", ")", "\n", "s", "=", "[", "'Box'", ",", "'Objectness'", ",", "'Classification'", ",", "'Precision'", ",", "'Recall'", ",", "\n", "'val Box'", ",", "'val Objectness'", ",", "'val Classification'", ",", "'mAP@0.5'", ",", "'mAP@0.5:0.95'", "]", "\n", "if", "bucket", ":", "\n", "# files = ['https://storage.googleapis.com/%s/results%g.txt' % (bucket, x) for x in id]", "\n", "        ", "files", "=", "[", "'results%g.txt'", "%", "x", "for", "x", "in", "id", "]", "\n", "c", "=", "(", "'gsutil cp '", "+", "'%s '", "*", "len", "(", "files", ")", "+", "'.'", ")", "%", "tuple", "(", "'gs://%s/results%g.txt'", "%", "(", "bucket", ",", "x", ")", "for", "x", "in", "id", ")", "\n", "os", ".", "system", "(", "c", ")", "\n", "", "else", ":", "\n", "        ", "files", "=", "list", "(", "Path", "(", "save_dir", ")", ".", "glob", "(", "'results*.txt'", ")", ")", "\n", "", "assert", "len", "(", "files", ")", ",", "'No results.txt files found in %s, nothing to plot.'", "%", "os", ".", "path", ".", "abspath", "(", "save_dir", ")", "\n", "for", "fi", ",", "f", "in", "enumerate", "(", "files", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "results", "=", "np", ".", "loadtxt", "(", "f", ",", "usecols", "=", "[", "2", ",", "3", ",", "4", ",", "8", ",", "9", ",", "12", ",", "13", ",", "14", ",", "10", ",", "11", "]", ",", "ndmin", "=", "2", ")", ".", "T", "\n", "n", "=", "results", ".", "shape", "[", "1", "]", "# number of rows", "\n", "x", "=", "range", "(", "start", ",", "min", "(", "stop", ",", "n", ")", "if", "stop", "else", "n", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "y", "=", "results", "[", "i", ",", "x", "]", "\n", "if", "i", "in", "[", "0", ",", "1", ",", "2", ",", "5", ",", "6", ",", "7", "]", ":", "\n", "                    ", "y", "[", "y", "==", "0", "]", "=", "np", ".", "nan", "# don't show zero loss values", "\n", "# y /= y[0]  # normalize", "\n", "", "label", "=", "labels", "[", "fi", "]", "if", "len", "(", "labels", ")", "else", "f", ".", "stem", "\n", "ax", "[", "i", "]", ".", "plot", "(", "x", ",", "y", ",", "marker", "=", "'.'", ",", "label", "=", "label", ",", "linewidth", "=", "2", ",", "markersize", "=", "8", ")", "\n", "ax", "[", "i", "]", ".", "set_title", "(", "s", "[", "i", "]", ")", "\n", "# if i in [5, 6, 7]:  # share train and val loss y axes", "\n", "#     ax[i].get_shared_y_axes().join(ax[i], ax[i - 5])", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "'Warning: Plotting error for %s; %s'", "%", "(", "f", ",", "e", ")", ")", "\n", "\n", "", "", "ax", "[", "1", "]", ".", "legend", "(", ")", "\n", "fig", ".", "savefig", "(", "Path", "(", "save_dir", ")", "/", "'results.png'", ",", "dpi", "=", "200", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.__init__": [[111, 116], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nc", ",", "conf", "=", "0.25", ",", "iou_thres", "=", "0.45", ")", ":", "\n", "        ", "self", ".", "matrix", "=", "np", ".", "zeros", "(", "(", "nc", "+", "1", ",", "nc", "+", "1", ")", ")", "\n", "self", ".", "nc", "=", "nc", "# number of classes", "\n", "self", ".", "conf", "=", "conf", "\n", "self", ".", "iou_thres", "=", "iou_thres", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.process_batch": [[117, 156], ["labels[].int", "detections[].int", "general.box_iou", "torch.where", "numpy.zeros.transpose().astype", "enumerate", "torch.cat().cpu().numpy", "numpy.zeros", "enumerate", "numpy.zeros.transpose", "torch.cat().cpu", "sum", "any", "torch.cat", "matches[].argsort", "numpy.unique", "matches[].argsort", "numpy.unique", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.box_iou"], ["", "def", "process_batch", "(", "self", ",", "detections", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Return intersection-over-union (Jaccard index) of boxes.\n        Both sets of boxes are expected to be in (x1, y1, x2, y2) format.\n        Arguments:\n            detections (Array[N, 6]), x1, y1, x2, y2, conf, class\n            labels (Array[M, 5]), class, x1, y1, x2, y2\n        Returns:\n            None, updates confusion matrix accordingly\n        \"\"\"", "\n", "detections", "=", "detections", "[", "detections", "[", ":", ",", "4", "]", ">", "self", ".", "conf", "]", "\n", "gt_classes", "=", "labels", "[", ":", ",", "0", "]", ".", "int", "(", ")", "\n", "detection_classes", "=", "detections", "[", ":", ",", "5", "]", ".", "int", "(", ")", "\n", "iou", "=", "general", ".", "box_iou", "(", "labels", "[", ":", ",", "1", ":", "]", ",", "detections", "[", ":", ",", ":", "4", "]", ")", "\n", "\n", "x", "=", "torch", ".", "where", "(", "iou", ">", "self", ".", "iou_thres", ")", "\n", "if", "x", "[", "0", "]", ".", "shape", "[", "0", "]", ":", "\n", "            ", "matches", "=", "torch", ".", "cat", "(", "(", "torch", ".", "stack", "(", "x", ",", "1", ")", ",", "iou", "[", "x", "[", "0", "]", ",", "x", "[", "1", "]", "]", "[", ":", ",", "None", "]", ")", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "x", "[", "0", "]", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "                ", "matches", "=", "matches", "[", "matches", "[", ":", ",", "2", "]", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "]", "\n", "matches", "=", "matches", "[", "np", ".", "unique", "(", "matches", "[", ":", ",", "1", "]", ",", "return_index", "=", "True", ")", "[", "1", "]", "]", "\n", "matches", "=", "matches", "[", "matches", "[", ":", ",", "2", "]", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "]", "\n", "matches", "=", "matches", "[", "np", ".", "unique", "(", "matches", "[", ":", ",", "0", "]", ",", "return_index", "=", "True", ")", "[", "1", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "matches", "=", "np", ".", "zeros", "(", "(", "0", ",", "3", ")", ")", "\n", "\n", "", "n", "=", "matches", ".", "shape", "[", "0", "]", ">", "0", "\n", "m0", ",", "m1", ",", "_", "=", "matches", ".", "transpose", "(", ")", ".", "astype", "(", "np", ".", "int16", ")", "\n", "for", "i", ",", "gc", "in", "enumerate", "(", "gt_classes", ")", ":", "\n", "            ", "j", "=", "m0", "==", "i", "\n", "if", "n", "and", "sum", "(", "j", ")", "==", "1", ":", "\n", "                ", "self", ".", "matrix", "[", "gc", ",", "detection_classes", "[", "m1", "[", "j", "]", "]", "]", "+=", "1", "# correct", "\n", "", "else", ":", "\n", "                ", "self", ".", "matrix", "[", "self", ".", "nc", ",", "gc", "]", "+=", "1", "# background FP", "\n", "\n", "", "", "if", "n", ":", "\n", "            ", "for", "i", ",", "dc", "in", "enumerate", "(", "detection_classes", ")", ":", "\n", "                ", "if", "not", "any", "(", "m1", "==", "i", ")", ":", "\n", "                    ", "self", ".", "matrix", "[", "dc", ",", "self", ".", "nc", "]", "+=", "1", "# background FN", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.matrix": [[157, 159], ["None"], "methods", ["None"], ["", "", "", "", "def", "matrix", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot": [[160, 178], ["matplotlib.figure", "sn.set", "sn.heatmap().set_facecolor", "matplotlib.figure.axes[].set_xlabel", "matplotlib.figure.axes[].set_ylabel", "matplotlib.figure.savefig", "metrics.ConfusionMatrix.matrix.sum().reshape", "len", "len", "sn.heatmap", "pathlib.Path", "metrics.ConfusionMatrix.matrix.sum"], "methods", ["None"], ["", "def", "plot", "(", "self", ",", "save_dir", "=", "''", ",", "names", "=", "(", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "seaborn", "as", "sn", "\n", "\n", "array", "=", "self", ".", "matrix", "/", "(", "self", ".", "matrix", ".", "sum", "(", "0", ")", ".", "reshape", "(", "1", ",", "self", ".", "nc", "+", "1", ")", "+", "1E-6", ")", "# normalize", "\n", "array", "[", "array", "<", "0.005", "]", "=", "np", ".", "nan", "# don't annotate (would appear as 0.00)", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "9", ")", ",", "tight_layout", "=", "True", ")", "\n", "sn", ".", "set", "(", "font_scale", "=", "1.0", "if", "self", ".", "nc", "<", "50", "else", "0.8", ")", "# for label size", "\n", "labels", "=", "(", "0", "<", "len", "(", "names", ")", "<", "99", ")", "and", "len", "(", "names", ")", "==", "self", ".", "nc", "# apply names to ticklabels", "\n", "sn", ".", "heatmap", "(", "array", ",", "annot", "=", "self", ".", "nc", "<", "30", ",", "annot_kws", "=", "{", "\"size\"", ":", "8", "}", ",", "cmap", "=", "'Blues'", ",", "fmt", "=", "'.2f'", ",", "square", "=", "True", ",", "\n", "xticklabels", "=", "names", "+", "[", "'background FP'", "]", "if", "labels", "else", "\"auto\"", ",", "\n", "yticklabels", "=", "names", "+", "[", "'background FN'", "]", "if", "labels", "else", "\"auto\"", ")", ".", "set_facecolor", "(", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "fig", ".", "axes", "[", "0", "]", ".", "set_xlabel", "(", "'True'", ")", "\n", "fig", ".", "axes", "[", "0", "]", ".", "set_ylabel", "(", "'Predicted'", ")", "\n", "fig", ".", "savefig", "(", "Path", "(", "save_dir", ")", "/", "'confusion_matrix.png'", ",", "dpi", "=", "250", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.print": [[179, 182], ["range", "metrics.ConfusionMatrix.print"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "", "def", "print", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "nc", "+", "1", ")", ":", "\n", "            ", "print", "(", "' '", ".", "join", "(", "map", "(", "str", ",", "self", ".", "matrix", "[", "i", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.fitness": [[12, 16], ["None"], "function", ["None"], ["def", "fitness", "(", "x", ")", ":", "\n", "# Model fitness as a weighted combination of metrics", "\n", "    ", "w", "=", "[", "0.0", ",", "0.0", ",", "1.0", ",", "0.0", "]", "# weights for [P, R, mAP@0.5, mAP@0.5:0.95]", "\n", "return", "(", "x", "[", ":", ",", ":", "4", "]", "*", "w", ")", ".", "sum", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ap_per_class": [[18, 79], ["numpy.argsort", "numpy.unique", "enumerate", "f1.mean().argmax", "numpy.linspace", "numpy.zeros", "numpy.zeros", "numpy.zeros", "f1.mean().argmax.sum", "metrics.plot_pr_curve", "metrics.plot_mc_curve", "metrics.plot_mc_curve", "metrics.plot_mc_curve", "np.unique.astype", "tp[].cumsum", "numpy.interp", "numpy.interp", "range", "f1.mean", "metrics.compute_ap", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "py.append", "numpy.interp"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.plot_pr_curve", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.plot_mc_curve", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.plot_mc_curve", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.plot_mc_curve", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.compute_ap"], ["", "def", "ap_per_class", "(", "tp", ",", "conf", ",", "pred_cls", ",", "target_cls", ",", "plot", "=", "False", ",", "save_dir", "=", "'.'", ",", "names", "=", "(", ")", ")", ":", "\n", "    ", "\"\"\" Compute the average precision, given the recall and precision curves.\n    Source: https://github.com/rafaelpadilla/Object-Detection-Metrics.\n    # Arguments\n        tp:  True positives (nparray, nx1 or nx10).\n        conf:  Objectness value from 0-1 (nparray).\n        pred_cls:  Predicted object classes (nparray).\n        target_cls:  True object classes (nparray).\n        plot:  Plot precision-recall curve at mAP@0.5\n        save_dir:  Plot save directory\n    # Returns\n        The average precision as computed in py-faster-rcnn.\n    \"\"\"", "\n", "\n", "# Sort by objectness", "\n", "i", "=", "np", ".", "argsort", "(", "-", "conf", ")", "\n", "tp", ",", "conf", ",", "pred_cls", "=", "tp", "[", "i", "]", ",", "conf", "[", "i", "]", ",", "pred_cls", "[", "i", "]", "\n", "\n", "# Find unique classes", "\n", "unique_classes", "=", "np", ".", "unique", "(", "target_cls", ")", "\n", "nc", "=", "unique_classes", ".", "shape", "[", "0", "]", "# number of classes, number of detections", "\n", "\n", "# Create Precision-Recall curve and compute AP for each class", "\n", "px", ",", "py", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "1000", ")", ",", "[", "]", "# for plotting", "\n", "ap", ",", "p", ",", "r", "=", "np", ".", "zeros", "(", "(", "nc", ",", "tp", ".", "shape", "[", "1", "]", ")", ")", ",", "np", ".", "zeros", "(", "(", "nc", ",", "1000", ")", ")", ",", "np", ".", "zeros", "(", "(", "nc", ",", "1000", ")", ")", "\n", "for", "ci", ",", "c", "in", "enumerate", "(", "unique_classes", ")", ":", "\n", "        ", "i", "=", "pred_cls", "==", "c", "\n", "n_l", "=", "(", "target_cls", "==", "c", ")", ".", "sum", "(", ")", "# number of labels", "\n", "n_p", "=", "i", ".", "sum", "(", ")", "# number of predictions", "\n", "\n", "if", "n_p", "==", "0", "or", "n_l", "==", "0", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "# Accumulate FPs and TPs", "\n", "            ", "fpc", "=", "(", "1", "-", "tp", "[", "i", "]", ")", ".", "cumsum", "(", "0", ")", "\n", "tpc", "=", "tp", "[", "i", "]", ".", "cumsum", "(", "0", ")", "\n", "\n", "# Recall", "\n", "recall", "=", "tpc", "/", "(", "n_l", "+", "1e-16", ")", "# recall curve", "\n", "r", "[", "ci", "]", "=", "np", ".", "interp", "(", "-", "px", ",", "-", "conf", "[", "i", "]", ",", "recall", "[", ":", ",", "0", "]", ",", "left", "=", "0", ")", "# negative x, xp because xp decreases", "\n", "\n", "# Precision", "\n", "precision", "=", "tpc", "/", "(", "tpc", "+", "fpc", ")", "# precision curve", "\n", "p", "[", "ci", "]", "=", "np", ".", "interp", "(", "-", "px", ",", "-", "conf", "[", "i", "]", ",", "precision", "[", ":", ",", "0", "]", ",", "left", "=", "1", ")", "# p at pr_score", "\n", "\n", "# AP from recall-precision curve", "\n", "for", "j", "in", "range", "(", "tp", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "ap", "[", "ci", ",", "j", "]", ",", "mpre", ",", "mrec", "=", "compute_ap", "(", "recall", "[", ":", ",", "j", "]", ",", "precision", "[", ":", ",", "j", "]", ")", "\n", "if", "plot", "and", "j", "==", "0", ":", "\n", "                    ", "py", ".", "append", "(", "np", ".", "interp", "(", "px", ",", "mrec", ",", "mpre", ")", ")", "# precision at mAP@0.5", "\n", "\n", "# Compute F1 (harmonic mean of precision and recall)", "\n", "", "", "", "", "f1", "=", "2", "*", "p", "*", "r", "/", "(", "p", "+", "r", "+", "1e-16", ")", "\n", "if", "plot", ":", "\n", "        ", "plot_pr_curve", "(", "px", ",", "py", ",", "ap", ",", "Path", "(", "save_dir", ")", "/", "'PR_curve.png'", ",", "names", ")", "\n", "plot_mc_curve", "(", "px", ",", "f1", ",", "Path", "(", "save_dir", ")", "/", "'F1_curve.png'", ",", "names", ",", "ylabel", "=", "'F1'", ")", "\n", "plot_mc_curve", "(", "px", ",", "p", ",", "Path", "(", "save_dir", ")", "/", "'P_curve.png'", ",", "names", ",", "ylabel", "=", "'Precision'", ")", "\n", "plot_mc_curve", "(", "px", ",", "r", ",", "Path", "(", "save_dir", ")", "/", "'R_curve.png'", ",", "names", ",", "ylabel", "=", "'Recall'", ")", "\n", "\n", "", "i", "=", "f1", ".", "mean", "(", "0", ")", ".", "argmax", "(", ")", "# max F1 index", "\n", "return", "p", "[", ":", ",", "i", "]", ",", "r", "[", ":", ",", "i", "]", ",", "ap", ",", "f1", "[", ":", ",", "i", "]", ",", "unique_classes", ".", "astype", "(", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.compute_ap": [[81, 107], ["numpy.concatenate", "numpy.concatenate", "numpy.flip", "numpy.maximum.accumulate", "numpy.linspace", "numpy.trapz", "numpy.sum", "numpy.flip", "numpy.interp", "numpy.where"], "function", ["None"], ["", "def", "compute_ap", "(", "recall", ",", "precision", ")", ":", "\n", "    ", "\"\"\" Compute the average precision, given the recall and precision curves\n    # Arguments\n        recall:    The recall curve (list)\n        precision: The precision curve (list)\n    # Returns\n        Average precision, precision curve, recall curve\n    \"\"\"", "\n", "\n", "# Append sentinel values to beginning and end", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "recall", ",", "[", "recall", "[", "-", "1", "]", "+", "0.01", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "1.", "]", ",", "precision", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# Compute the precision envelope", "\n", "mpre", "=", "np", ".", "flip", "(", "np", ".", "maximum", ".", "accumulate", "(", "np", ".", "flip", "(", "mpre", ")", ")", ")", "\n", "\n", "# Integrate area under curve", "\n", "method", "=", "'interp'", "# methods: 'continuous', 'interp'", "\n", "if", "method", "==", "'interp'", ":", "\n", "        ", "x", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "101", ")", "# 101-point interp (COCO)", "\n", "ap", "=", "np", ".", "trapz", "(", "np", ".", "interp", "(", "x", ",", "mrec", ",", "mpre", ")", ",", "x", ")", "# integrate", "\n", "", "else", ":", "# 'continuous'", "\n", "        ", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "# points where x axis (recall) changes", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "# area under curve", "\n", "\n", "", "return", "ap", ",", "mpre", ",", "mrec", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.plot_pr_curve": [[186, 204], ["matplotlib.subplots", "numpy.stack", "ax.plot", "ax.set_xlabel", "ax.set_ylabel", "ax.set_xlim", "ax.set_ylim", "matplotlib.legend", "fig.savefig", "len", "enumerate", "ax.plot", "np.stack.mean", "pathlib.Path", "ax.plot", "ap[].mean"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot"], ["", "", "", "def", "plot_pr_curve", "(", "px", ",", "py", ",", "ap", ",", "save_dir", "=", "'pr_curve.png'", ",", "names", "=", "(", ")", ")", ":", "\n", "# Precision-recall curve", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "9", ",", "6", ")", ",", "tight_layout", "=", "True", ")", "\n", "py", "=", "np", ".", "stack", "(", "py", ",", "axis", "=", "1", ")", "\n", "\n", "if", "0", "<", "len", "(", "names", ")", "<", "21", ":", "# display per-class legend if < 21 classes", "\n", "        ", "for", "i", ",", "y", "in", "enumerate", "(", "py", ".", "T", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "px", ",", "y", ",", "linewidth", "=", "1", ",", "label", "=", "f'{names[i]} {ap[i, 0]:.3f}'", ")", "# plot(recall, precision)", "\n", "", "", "else", ":", "\n", "        ", "ax", ".", "plot", "(", "px", ",", "py", ",", "linewidth", "=", "1", ",", "color", "=", "'grey'", ")", "# plot(recall, precision)", "\n", "\n", "", "ax", ".", "plot", "(", "px", ",", "py", ".", "mean", "(", "1", ")", ",", "linewidth", "=", "3", ",", "color", "=", "'blue'", ",", "label", "=", "'all classes %.3f mAP@0.5'", "%", "ap", "[", ":", ",", "0", "]", ".", "mean", "(", ")", ")", "\n", "ax", ".", "set_xlabel", "(", "'Recall'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Precision'", ")", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "plt", ".", "legend", "(", "bbox_to_anchor", "=", "(", "1.04", ",", "1", ")", ",", "loc", "=", "\"upper left\"", ")", "\n", "fig", ".", "savefig", "(", "Path", "(", "save_dir", ")", ",", "dpi", "=", "250", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.plot_mc_curve": [[206, 224], ["matplotlib.subplots", "py.mean", "ax.plot", "ax.set_xlabel", "ax.set_ylabel", "ax.set_xlim", "ax.set_ylim", "matplotlib.legend", "fig.savefig", "len", "enumerate", "ax.plot", "pathlib.Path", "ax.plot", "py.mean.max", "py.mean.argmax"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.ConfusionMatrix.plot"], ["", "def", "plot_mc_curve", "(", "px", ",", "py", ",", "save_dir", "=", "'mc_curve.png'", ",", "names", "=", "(", ")", ",", "xlabel", "=", "'Confidence'", ",", "ylabel", "=", "'Metric'", ")", ":", "\n", "# Metric-confidence curve", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "9", ",", "6", ")", ",", "tight_layout", "=", "True", ")", "\n", "\n", "if", "0", "<", "len", "(", "names", ")", "<", "21", ":", "# display per-class legend if < 21 classes", "\n", "        ", "for", "i", ",", "y", "in", "enumerate", "(", "py", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "px", ",", "y", ",", "linewidth", "=", "1", ",", "label", "=", "f'{names[i]}'", ")", "# plot(confidence, metric)", "\n", "", "", "else", ":", "\n", "        ", "ax", ".", "plot", "(", "px", ",", "py", ".", "T", ",", "linewidth", "=", "1", ",", "color", "=", "'grey'", ")", "# plot(confidence, metric)", "\n", "\n", "", "y", "=", "py", ".", "mean", "(", "0", ")", "\n", "ax", ".", "plot", "(", "px", ",", "y", ",", "linewidth", "=", "3", ",", "color", "=", "'blue'", ",", "label", "=", "f'all classes {y.max():.2f} at {px[y.argmax()]:.3f}'", ")", "\n", "ax", ".", "set_xlabel", "(", "xlabel", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ")", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "plt", ".", "legend", "(", "bbox_to_anchor", "=", "(", "1.04", ",", "1", ")", ",", "loc", "=", "\"upper left\"", ")", "\n", "fig", ".", "savefig", "(", "Path", "(", "save_dir", ")", ",", "dpi", "=", "250", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.google_utils.gsutil_getsize": [[13, 17], ["subprocess.check_output().decode", "len", "eval", "subprocess.check_output", "subprocess.check_output().decode.split"], "function", ["None"], ["def", "gsutil_getsize", "(", "url", "=", "''", ")", ":", "\n", "# gs://bucket/file size https://cloud.google.com/storage/docs/gsutil/commands/du", "\n", "    ", "s", "=", "subprocess", ".", "check_output", "(", "f'gsutil du {url}'", ",", "shell", "=", "True", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "return", "eval", "(", "s", ".", "split", "(", "' '", ")", "[", "0", "]", ")", "if", "len", "(", "s", ")", "else", "0", "# bytes", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.google_utils.attempt_download": [[19, 53], ["pathlib.Path", "str().strip().replace().lower", "pathlib.Path.exists", "requests.get().json", "str().strip().replace", "print", "torch.hub.download_url_to_file", "print", "requests.get", "subprocess.check_output().decode().split", "pathlib.Path.exists", "print", "print", "os.system", "pathlib.Path.unlink", "print", "str().strip", "pathlib.Path.exists", "subprocess.check_output().decode", "pathlib.Path.stat", "pathlib.Path.stat", "str", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "def", "attempt_download", "(", "file", ",", "repo", "=", "'ultralytics/yolov3'", ")", ":", "\n", "# Attempt file download if does not exist", "\n", "    ", "file", "=", "Path", "(", "str", "(", "file", ")", ".", "strip", "(", ")", ".", "replace", "(", "\"'\"", ",", "''", ")", ".", "lower", "(", ")", ")", "\n", "\n", "if", "not", "file", ".", "exists", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "response", "=", "requests", ".", "get", "(", "f'https://api.github.com/repos/{repo}/releases/latest'", ")", ".", "json", "(", ")", "# github api", "\n", "assets", "=", "[", "x", "[", "'name'", "]", "for", "x", "in", "response", "[", "'assets'", "]", "]", "# release assets, i.e. ['yolov5s.pt', 'yolov5m.pt', ...]", "\n", "tag", "=", "response", "[", "'tag_name'", "]", "# i.e. 'v1.0'", "\n", "", "except", ":", "# fallback plan", "\n", "            ", "assets", "=", "[", "'yolov3.pt'", ",", "'yolov3-spp.pt'", ",", "'yolov3-tiny.pt'", "]", "\n", "tag", "=", "subprocess", ".", "check_output", "(", "'git tag'", ",", "shell", "=", "True", ")", ".", "decode", "(", ")", ".", "split", "(", ")", "[", "-", "1", "]", "\n", "\n", "", "name", "=", "file", ".", "name", "\n", "if", "name", "in", "assets", ":", "\n", "            ", "msg", "=", "f'{file} missing, try downloading from https://github.com/{repo}/releases/'", "\n", "redundant", "=", "False", "# second download option", "\n", "try", ":", "# GitHub", "\n", "                ", "url", "=", "f'https://github.com/{repo}/releases/download/{tag}/{name}'", "\n", "print", "(", "f'Downloading {url} to {file}...'", ")", "\n", "torch", ".", "hub", ".", "download_url_to_file", "(", "url", ",", "file", ")", "\n", "assert", "file", ".", "exists", "(", ")", "and", "file", ".", "stat", "(", ")", ".", "st_size", ">", "1E6", "# check", "\n", "", "except", "Exception", "as", "e", ":", "# GCP", "\n", "                ", "print", "(", "f'Download error: {e}'", ")", "\n", "assert", "redundant", ",", "'No secondary mirror'", "\n", "url", "=", "f'https://storage.googleapis.com/{repo}/ckpt/{name}'", "\n", "print", "(", "f'Downloading {url} to {file}...'", ")", "\n", "os", ".", "system", "(", "f'curl -L {url} -o {file}'", ")", "# torch.hub.download_url_to_file(url, weights)", "\n", "", "finally", ":", "\n", "                ", "if", "not", "file", ".", "exists", "(", ")", "or", "file", ".", "stat", "(", ")", ".", "st_size", "<", "1E6", ":", "# check", "\n", "                    ", "file", ".", "unlink", "(", "missing_ok", "=", "True", ")", "# remove partial downloads", "\n", "print", "(", "f'ERROR: Download failure: {msg}'", ")", "\n", "", "print", "(", "''", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.google_utils.gdrive_download": [[55, 88], ["time.time", "pathlib.Path", "pathlib.Path", "print", "pathlib.Path.unlink", "pathlib.Path.unlink", "os.system", "os.path.exists", "os.system", "pathlib.Path.unlink", "print", "pathlib.Path.unlink", "print", "print", "os.system", "pathlib.Path.unlink", "platform.system", "google_utils.get_token", "time.time"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.google_utils.get_token"], ["", "", "", "", "def", "gdrive_download", "(", "id", "=", "'16TiPfZj7htmTyhntwcZyEEAejOUxuT6m'", ",", "file", "=", "'tmp.zip'", ")", ":", "\n", "# Downloads a file from Google Drive. from yolov3.utils.google_utils import *; gdrive_download()", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "file", "=", "Path", "(", "file", ")", "\n", "cookie", "=", "Path", "(", "'cookie'", ")", "# gdrive cookie", "\n", "print", "(", "f'Downloading https://drive.google.com/uc?export=download&id={id} as {file}... '", ",", "end", "=", "''", ")", "\n", "file", ".", "unlink", "(", "missing_ok", "=", "True", ")", "# remove existing file", "\n", "cookie", ".", "unlink", "(", "missing_ok", "=", "True", ")", "# remove existing cookie", "\n", "\n", "# Attempt file download", "\n", "out", "=", "\"NUL\"", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", "else", "\"/dev/null\"", "\n", "os", ".", "system", "(", "f'curl -c ./cookie -s -L \"drive.google.com/uc?export=download&id={id}\" > {out}'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "'cookie'", ")", ":", "# large file", "\n", "        ", "s", "=", "f'curl -Lb ./cookie \"drive.google.com/uc?export=download&confirm={get_token()}&id={id}\" -o {file}'", "\n", "", "else", ":", "# small file", "\n", "        ", "s", "=", "f'curl -s -L -o {file} \"drive.google.com/uc?export=download&id={id}\"'", "\n", "", "r", "=", "os", ".", "system", "(", "s", ")", "# execute, capture return", "\n", "cookie", ".", "unlink", "(", "missing_ok", "=", "True", ")", "# remove existing cookie", "\n", "\n", "# Error check", "\n", "if", "r", "!=", "0", ":", "\n", "        ", "file", ".", "unlink", "(", "missing_ok", "=", "True", ")", "# remove partial", "\n", "print", "(", "'Download error '", ")", "# raise Exception('Download error')", "\n", "return", "r", "\n", "\n", "# Unzip if archive", "\n", "", "if", "file", ".", "suffix", "==", "'.zip'", ":", "\n", "        ", "print", "(", "'unzipping... '", ",", "end", "=", "''", ")", "\n", "os", ".", "system", "(", "f'unzip -q {file}'", ")", "# unzip", "\n", "file", ".", "unlink", "(", ")", "# remove zip to free space", "\n", "\n", "", "print", "(", "f'Done ({time.time() - t:.1f}s)'", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.google_utils.get_token": [[90, 96], ["open", "line.split"], "function", ["None"], ["", "def", "get_token", "(", "cookie", "=", "\"./cookie\"", ")", ":", "\n", "    ", "with", "open", "(", "cookie", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "\"download\"", "in", "line", ":", "\n", "                ", "return", "line", ".", "split", "(", ")", "[", "-", "1", "]", "\n", "", "", "", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.autoanchor.check_anchor_order": [[12, 21], ["m.anchor_grid.prod().view", "da.sign", "ds.sign", "print", "m.anchors.flip", "m.anchor_grid.flip", "m.anchor_grid.prod"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["def", "check_anchor_order", "(", "m", ")", ":", "\n", "# Check anchor order against stride order for YOLOv3 Detect() module m, and correct if necessary", "\n", "    ", "a", "=", "m", ".", "anchor_grid", ".", "prod", "(", "-", "1", ")", ".", "view", "(", "-", "1", ")", "# anchor area", "\n", "da", "=", "a", "[", "-", "1", "]", "-", "a", "[", "0", "]", "# delta a", "\n", "ds", "=", "m", ".", "stride", "[", "-", "1", "]", "-", "m", ".", "stride", "[", "0", "]", "# delta s", "\n", "if", "da", ".", "sign", "(", ")", "!=", "ds", ".", "sign", "(", ")", ":", "# same order", "\n", "        ", "print", "(", "'Reversing anchor order'", ")", "\n", "m", ".", "anchors", "[", ":", "]", "=", "m", ".", "anchors", ".", "flip", "(", "0", ")", "\n", "m", ".", "anchor_grid", "[", ":", "]", "=", "m", ".", "anchor_grid", ".", "flip", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.autoanchor.check_anchors": [[23, 60], ["utils.general.colorstr", "print", "numpy.random.uniform", "torch.tensor().float", "m.anchor_grid.clone().cpu().view", "autoanchor.check_anchors.metric"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.colorstr", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "", "def", "check_anchors", "(", "dataset", ",", "model", ",", "thr", "=", "4.0", ",", "imgsz", "=", "640", ")", ":", "\n", "# Check anchor fit to data, recompute if necessary", "\n", "    ", "prefix", "=", "colorstr", "(", "'autoanchor: '", ")", "\n", "print", "(", "f'\\n{prefix}Analyzing anchors... '", ",", "end", "=", "''", ")", "\n", "m", "=", "model", ".", "module", ".", "model", "[", "-", "1", "]", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", ".", "model", "[", "-", "1", "]", "# Detect()", "\n", "shapes", "=", "imgsz", "*", "dataset", ".", "shapes", "/", "dataset", ".", "shapes", ".", "max", "(", "1", ",", "keepdims", "=", "True", ")", "\n", "scale", "=", "np", ".", "random", ".", "uniform", "(", "0.9", ",", "1.1", ",", "size", "=", "(", "shapes", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "# augment scale", "\n", "wh", "=", "torch", ".", "tensor", "(", "np", ".", "concatenate", "(", "[", "l", "[", ":", ",", "3", ":", "5", "]", "*", "s", "for", "s", ",", "l", "in", "zip", "(", "shapes", "*", "scale", ",", "dataset", ".", "labels", ")", "]", ")", ")", ".", "float", "(", ")", "# wh", "\n", "\n", "def", "metric", "(", "k", ")", ":", "# compute metric", "\n", "        ", "r", "=", "wh", "[", ":", ",", "None", "]", "/", "k", "[", "None", "]", "\n", "x", "=", "torch", ".", "min", "(", "r", ",", "1.", "/", "r", ")", ".", "min", "(", "2", ")", "[", "0", "]", "# ratio metric", "\n", "best", "=", "x", ".", "max", "(", "1", ")", "[", "0", "]", "# best_x", "\n", "aat", "=", "(", "x", ">", "1.", "/", "thr", ")", ".", "float", "(", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "# anchors above threshold", "\n", "bpr", "=", "(", "best", ">", "1.", "/", "thr", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "# best possible recall", "\n", "return", "bpr", ",", "aat", "\n", "\n", "", "anchors", "=", "m", ".", "anchor_grid", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ",", "2", ")", "# current anchors", "\n", "bpr", ",", "aat", "=", "metric", "(", "anchors", ")", "\n", "print", "(", "f'anchors/target = {aat:.2f}, Best Possible Recall (BPR) = {bpr:.4f}'", ",", "end", "=", "''", ")", "\n", "if", "bpr", "<", "0.98", ":", "# threshold to recompute", "\n", "        ", "print", "(", "'. Attempting to improve anchors, please wait...'", ")", "\n", "na", "=", "m", ".", "anchor_grid", ".", "numel", "(", ")", "//", "2", "# number of anchors", "\n", "try", ":", "\n", "            ", "anchors", "=", "kmean_anchors", "(", "dataset", ",", "n", "=", "na", ",", "img_size", "=", "imgsz", ",", "thr", "=", "thr", ",", "gen", "=", "1000", ",", "verbose", "=", "False", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "f'{prefix}ERROR: {e}'", ")", "\n", "", "new_bpr", "=", "metric", "(", "anchors", ")", "[", "0", "]", "\n", "if", "new_bpr", ">", "bpr", ":", "# replace anchors", "\n", "            ", "anchors", "=", "torch", ".", "tensor", "(", "anchors", ",", "device", "=", "m", ".", "anchors", ".", "device", ")", ".", "type_as", "(", "m", ".", "anchors", ")", "\n", "m", ".", "anchor_grid", "[", ":", "]", "=", "anchors", ".", "clone", "(", ")", ".", "view_as", "(", "m", ".", "anchor_grid", ")", "# for inference", "\n", "m", ".", "anchors", "[", ":", "]", "=", "anchors", ".", "clone", "(", ")", ".", "view_as", "(", "m", ".", "anchors", ")", "/", "m", ".", "stride", ".", "to", "(", "m", ".", "anchors", ".", "device", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "# loss", "\n", "check_anchor_order", "(", "m", ")", "\n", "print", "(", "f'{prefix}New anchors saved to model. Update model *.yaml to use these anchors in the future.'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'{prefix}Original anchors better than new anchors. Proceeding with original anchors.'", ")", "\n", "", "", "print", "(", "''", ")", "# newline", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.autoanchor.kmean_anchors": [[62, 161], ["utils.general.colorstr", "isinstance", "numpy.concatenate", "print", "torch.tensor.std", "scipy.cluster.vq.kmeans", "print", "torch.tensor", "torch.tensor", "autoanchor.kmean_anchors.print_results"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.colorstr", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "def", "kmean_anchors", "(", "path", "=", "'./data/coco128.yaml'", ",", "n", "=", "9", ",", "img_size", "=", "640", ",", "thr", "=", "4.0", ",", "gen", "=", "1000", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\" Creates kmeans-evolved anchors from training dataset\n\n        Arguments:\n            path: path to dataset *.yaml, or a loaded dataset\n            n: number of anchors\n            img_size: image size used for training\n            thr: anchor-label wh ratio threshold hyperparameter hyp['anchor_t'] used for training, default=4.0\n            gen: generations to evolve anchors using genetic algorithm\n            verbose: print all results\n\n        Return:\n            k: kmeans evolved anchors\n\n        Usage:\n            from utils.autoanchor import *; _ = kmean_anchors()\n    \"\"\"", "\n", "thr", "=", "1.", "/", "thr", "\n", "prefix", "=", "colorstr", "(", "'autoanchor: '", ")", "\n", "\n", "def", "metric", "(", "k", ",", "wh", ")", ":", "# compute metrics", "\n", "        ", "r", "=", "wh", "[", ":", ",", "None", "]", "/", "k", "[", "None", "]", "\n", "x", "=", "torch", ".", "min", "(", "r", ",", "1.", "/", "r", ")", ".", "min", "(", "2", ")", "[", "0", "]", "# ratio metric", "\n", "# x = wh_iou(wh, torch.tensor(k))  # iou metric", "\n", "return", "x", ",", "x", ".", "max", "(", "1", ")", "[", "0", "]", "# x, best_x", "\n", "\n", "", "def", "anchor_fitness", "(", "k", ")", ":", "# mutation fitness", "\n", "        ", "_", ",", "best", "=", "metric", "(", "torch", ".", "tensor", "(", "k", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "wh", ")", "\n", "return", "(", "best", "*", "(", "best", ">", "thr", ")", ".", "float", "(", ")", ")", ".", "mean", "(", ")", "# fitness", "\n", "\n", "", "def", "print_results", "(", "k", ")", ":", "\n", "        ", "k", "=", "k", "[", "np", ".", "argsort", "(", "k", ".", "prod", "(", "1", ")", ")", "]", "# sort small to large", "\n", "x", ",", "best", "=", "metric", "(", "k", ",", "wh0", ")", "\n", "bpr", ",", "aat", "=", "(", "best", ">", "thr", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "(", "x", ">", "thr", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "*", "n", "# best possible recall, anch > thr", "\n", "print", "(", "f'{prefix}thr={thr:.2f}: {bpr:.4f} best possible recall, {aat:.2f} anchors past thr'", ")", "\n", "print", "(", "f'{prefix}n={n}, img_size={img_size}, metric_all={x.mean():.3f}/{best.mean():.3f}-mean/best, '", "\n", "f'past_thr={x[x > thr].mean():.3f}-mean: '", ",", "end", "=", "''", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "k", ")", ":", "\n", "            ", "print", "(", "'%i,%i'", "%", "(", "round", "(", "x", "[", "0", "]", ")", ",", "round", "(", "x", "[", "1", "]", ")", ")", ",", "end", "=", "',  '", "if", "i", "<", "len", "(", "k", ")", "-", "1", "else", "'\\n'", ")", "# use in *.cfg", "\n", "", "return", "k", "\n", "\n", "", "if", "isinstance", "(", "path", ",", "str", ")", ":", "# *.yaml file", "\n", "        ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "data_dict", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", "# model dict", "\n", "", "from", "utils", ".", "datasets", "import", "LoadImagesAndLabels", "\n", "dataset", "=", "LoadImagesAndLabels", "(", "data_dict", "[", "'train'", "]", ",", "augment", "=", "True", ",", "rect", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "path", "# dataset", "\n", "\n", "# Get label wh", "\n", "", "shapes", "=", "img_size", "*", "dataset", ".", "shapes", "/", "dataset", ".", "shapes", ".", "max", "(", "1", ",", "keepdims", "=", "True", ")", "\n", "wh0", "=", "np", ".", "concatenate", "(", "[", "l", "[", ":", ",", "3", ":", "5", "]", "*", "s", "for", "s", ",", "l", "in", "zip", "(", "shapes", ",", "dataset", ".", "labels", ")", "]", ")", "# wh", "\n", "\n", "# Filter", "\n", "i", "=", "(", "wh0", "<", "3.0", ")", ".", "any", "(", "1", ")", ".", "sum", "(", ")", "\n", "if", "i", ":", "\n", "        ", "print", "(", "f'{prefix}WARNING: Extremely small objects found. {i} of {len(wh0)} labels are < 3 pixels in size.'", ")", "\n", "", "wh", "=", "wh0", "[", "(", "wh0", ">=", "2.0", ")", ".", "any", "(", "1", ")", "]", "# filter > 2 pixels", "\n", "# wh = wh * (np.random.rand(wh.shape[0], 1) * 0.9 + 0.1)  # multiply by random scale 0-1", "\n", "\n", "# Kmeans calculation", "\n", "print", "(", "f'{prefix}Running kmeans for {n} anchors on {len(wh)} points...'", ")", "\n", "s", "=", "wh", ".", "std", "(", "0", ")", "# sigmas for whitening", "\n", "k", ",", "dist", "=", "kmeans", "(", "wh", "/", "s", ",", "n", ",", "iter", "=", "30", ")", "# points, mean distance", "\n", "assert", "len", "(", "k", ")", "==", "n", ",", "print", "(", "f'{prefix}ERROR: scipy.cluster.vq.kmeans requested {n} points but returned only {len(k)}'", ")", "\n", "k", "*=", "s", "\n", "wh", "=", "torch", ".", "tensor", "(", "wh", ",", "dtype", "=", "torch", ".", "float32", ")", "# filtered", "\n", "wh0", "=", "torch", ".", "tensor", "(", "wh0", ",", "dtype", "=", "torch", ".", "float32", ")", "# unfiltered", "\n", "k", "=", "print_results", "(", "k", ")", "\n", "\n", "# Plot", "\n", "# k, d = [None] * 20, [None] * 20", "\n", "# for i in tqdm(range(1, 21)):", "\n", "#     k[i-1], d[i-1] = kmeans(wh / s, i)  # points, mean distance", "\n", "# fig, ax = plt.subplots(1, 2, figsize=(14, 7), tight_layout=True)", "\n", "# ax = ax.ravel()", "\n", "# ax[0].plot(np.arange(1, 21), np.array(d) ** 2, marker='.')", "\n", "# fig, ax = plt.subplots(1, 2, figsize=(14, 7))  # plot wh", "\n", "# ax[0].hist(wh[wh[:, 0]<100, 0],400)", "\n", "# ax[1].hist(wh[wh[:, 1]<100, 1],400)", "\n", "# fig.savefig('wh.png', dpi=200)", "\n", "\n", "# Evolve", "\n", "npr", "=", "np", ".", "random", "\n", "f", ",", "sh", ",", "mp", ",", "s", "=", "anchor_fitness", "(", "k", ")", ",", "k", ".", "shape", ",", "0.9", ",", "0.1", "# fitness, generations, mutation prob, sigma", "\n", "pbar", "=", "tqdm", "(", "range", "(", "gen", ")", ",", "desc", "=", "f'{prefix}Evolving anchors with Genetic Algorithm:'", ")", "# progress bar", "\n", "for", "_", "in", "pbar", ":", "\n", "        ", "v", "=", "np", ".", "ones", "(", "sh", ")", "\n", "while", "(", "v", "==", "1", ")", ".", "all", "(", ")", ":", "# mutate until a change occurs (prevent duplicates)", "\n", "            ", "v", "=", "(", "(", "npr", ".", "random", "(", "sh", ")", "<", "mp", ")", "*", "npr", ".", "random", "(", ")", "*", "npr", ".", "randn", "(", "*", "sh", ")", "*", "s", "+", "1", ")", ".", "clip", "(", "0.3", ",", "3.0", ")", "\n", "", "kg", "=", "(", "k", ".", "copy", "(", ")", "*", "v", ")", ".", "clip", "(", "min", "=", "2.0", ")", "\n", "fg", "=", "anchor_fitness", "(", "kg", ")", "\n", "if", "fg", ">", "f", ":", "\n", "            ", "f", ",", "k", "=", "fg", ",", "kg", ".", "copy", "(", ")", "\n", "pbar", ".", "desc", "=", "f'{prefix}Evolving anchors with Genetic Algorithm: fitness = {f:.4f}'", "\n", "if", "verbose", ":", "\n", "                ", "print_results", "(", "k", ")", "\n", "\n", "", "", "", "return", "print_results", "(", "k", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.loss.BCEBlurWithLogitsLoss.__init__": [[17, 21], ["torch.Module.__init__", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.05", ")", ":", "\n", "        ", "super", "(", "BCEBlurWithLogitsLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_fcn", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "# must be nn.BCEWithLogitsLoss()", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.loss.BCEBlurWithLogitsLoss.forward": [[22, 30], ["loss.BCEBlurWithLogitsLoss.BCEBlurWithLogitsLoss.loss_fcn", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "loss.BCEBlurWithLogitsLoss.BCEBlurWithLogitsLoss.mean", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "true", ")", ":", "\n", "        ", "loss", "=", "self", ".", "loss_fcn", "(", "pred", ",", "true", ")", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "pred", ")", "# prob from logits", "\n", "dx", "=", "pred", "-", "true", "# reduce only missing label effects", "\n", "# dx = (pred - true).abs()  # reduce missing label and false label effects", "\n", "alpha_factor", "=", "1", "-", "torch", ".", "exp", "(", "(", "dx", "-", "1", ")", "/", "(", "self", ".", "alpha", "+", "1e-4", ")", ")", "\n", "loss", "*=", "alpha_factor", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.loss.FocalLoss.__init__": [[34, 41], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_fcn", ",", "gamma", "=", "1.5", ",", "alpha", "=", "0.25", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_fcn", "=", "loss_fcn", "# must be nn.BCEWithLogitsLoss()", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "reduction", "=", "loss_fcn", ".", "reduction", "\n", "self", ".", "loss_fcn", ".", "reduction", "=", "'none'", "# required to apply FL to each element", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.loss.FocalLoss.forward": [[42, 60], ["loss.FocalLoss.FocalLoss.loss_fcn", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "loss.FocalLoss.FocalLoss.mean", "loss.FocalLoss.FocalLoss.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "true", ")", ":", "\n", "        ", "loss", "=", "self", ".", "loss_fcn", "(", "pred", ",", "true", ")", "\n", "# p_t = torch.exp(-loss)", "\n", "# loss *= self.alpha * (1.000001 - p_t) ** self.gamma  # non-zero power for gradient stability", "\n", "\n", "# TF implementation https://github.com/tensorflow/addons/blob/v0.7.1/tensorflow_addons/losses/focal_loss.py", "\n", "pred_prob", "=", "torch", ".", "sigmoid", "(", "pred", ")", "# prob from logits", "\n", "p_t", "=", "true", "*", "pred_prob", "+", "(", "1", "-", "true", ")", "*", "(", "1", "-", "pred_prob", ")", "\n", "alpha_factor", "=", "true", "*", "self", ".", "alpha", "+", "(", "1", "-", "true", ")", "*", "(", "1", "-", "self", ".", "alpha", ")", "\n", "modulating_factor", "=", "(", "1.0", "-", "p_t", ")", "**", "self", ".", "gamma", "\n", "loss", "*=", "alpha_factor", "*", "modulating_factor", "\n", "\n", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "", "else", ":", "# 'none'", "\n", "            ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.loss.QFocalLoss.__init__": [[64, 71], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_fcn", ",", "gamma", "=", "1.5", ",", "alpha", "=", "0.25", ")", ":", "\n", "        ", "super", "(", "QFocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_fcn", "=", "loss_fcn", "# must be nn.BCEWithLogitsLoss()", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "reduction", "=", "loss_fcn", ".", "reduction", "\n", "self", ".", "loss_fcn", ".", "reduction", "=", "'none'", "# required to apply FL to each element", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.loss.QFocalLoss.forward": [[72, 86], ["loss.QFocalLoss.QFocalLoss.loss_fcn", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "loss.QFocalLoss.QFocalLoss.mean", "loss.QFocalLoss.QFocalLoss.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "true", ")", ":", "\n", "        ", "loss", "=", "self", ".", "loss_fcn", "(", "pred", ",", "true", ")", "\n", "\n", "pred_prob", "=", "torch", ".", "sigmoid", "(", "pred", ")", "# prob from logits", "\n", "alpha_factor", "=", "true", "*", "self", ".", "alpha", "+", "(", "1", "-", "true", ")", "*", "(", "1", "-", "self", ".", "alpha", ")", "\n", "modulating_factor", "=", "torch", ".", "abs", "(", "true", "-", "pred_prob", ")", "**", "self", ".", "gamma", "\n", "loss", "*=", "alpha_factor", "*", "modulating_factor", "\n", "\n", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "", "else", ":", "# 'none'", "\n", "            ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.loss.ComputeLoss.__init__": [[90, 113], ["super().__init__", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "loss.smooth_BCE", "next", "utils.torch_utils.is_parallel", "list().index", "setattr", "model.parameters", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "h.get", "loss.FocalLoss", "loss.FocalLoss", "getattr", "list"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.loss.smooth_BCE", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.is_parallel"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "autobalance", "=", "False", ")", ":", "\n", "        ", "super", "(", "ComputeLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "# get model device", "\n", "h", "=", "model", ".", "hyp", "# hyperparameters", "\n", "\n", "# Define criteria", "\n", "BCEcls", "=", "nn", ".", "BCEWithLogitsLoss", "(", "pos_weight", "=", "torch", ".", "tensor", "(", "[", "h", "[", "'cls_pw'", "]", "]", ",", "device", "=", "device", ")", ")", "\n", "BCEobj", "=", "nn", ".", "BCEWithLogitsLoss", "(", "pos_weight", "=", "torch", ".", "tensor", "(", "[", "h", "[", "'obj_pw'", "]", "]", ",", "device", "=", "device", ")", ")", "\n", "\n", "# Class label smoothing https://arxiv.org/pdf/1902.04103.pdf eqn 3", "\n", "self", ".", "cp", ",", "self", ".", "cn", "=", "smooth_BCE", "(", "eps", "=", "h", ".", "get", "(", "'label_smoothing'", ",", "0.0", ")", ")", "# positive, negative BCE targets", "\n", "\n", "# Focal loss", "\n", "g", "=", "h", "[", "'fl_gamma'", "]", "# focal loss gamma", "\n", "if", "g", ">", "0", ":", "\n", "            ", "BCEcls", ",", "BCEobj", "=", "FocalLoss", "(", "BCEcls", ",", "g", ")", ",", "FocalLoss", "(", "BCEobj", ",", "g", ")", "\n", "\n", "", "det", "=", "model", ".", "module", ".", "model", "[", "-", "1", "]", "if", "is_parallel", "(", "model", ")", "else", "model", ".", "model", "[", "-", "1", "]", "# Detect() module", "\n", "self", ".", "balance", "=", "{", "3", ":", "[", "4.0", ",", "1.0", ",", "0.4", "]", "}", ".", "get", "(", "det", ".", "nl", ",", "[", "4.0", ",", "1.0", ",", "0.25", ",", "0.06", ",", ".02", "]", ")", "# P3-P7", "\n", "self", ".", "ssi", "=", "list", "(", "det", ".", "stride", ")", ".", "index", "(", "16", ")", "if", "autobalance", "else", "0", "# stride 16 index", "\n", "self", ".", "BCEcls", ",", "self", ".", "BCEobj", ",", "self", ".", "gr", ",", "self", ".", "hyp", ",", "self", ".", "autobalance", "=", "BCEcls", ",", "BCEobj", ",", "model", ".", "gr", ",", "h", ",", "autobalance", "\n", "for", "k", "in", "'na'", ",", "'nc'", ",", "'nl'", ",", "'anchors'", ":", "\n", "            ", "setattr", "(", "self", ",", "k", ",", "getattr", "(", "det", ",", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.loss.ComputeLoss.__call__": [[114, 162], ["loss.ComputeLoss.build_targets", "enumerate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "loss.ComputeLoss.BCEobj", "torch.cat().detach", "torch.cat().detach", "torch.cat().detach", "torch.cat().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.general.bbox_iou", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "loss.ComputeLoss.BCEcls", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ps[].sigmoid", "utils.general.bbox_iou.detach().clamp().type", "loss.ComputeLoss.detach().item", "ps[].sigmoid", "utils.general.bbox_iou.detach().clamp", "range", "loss.ComputeLoss.detach", "utils.general.bbox_iou.detach"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.loss.ComputeLoss.build_targets", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.bbox_iou"], ["", "", "def", "__call__", "(", "self", ",", "p", ",", "targets", ")", ":", "# predictions, targets, model", "\n", "        ", "device", "=", "targets", ".", "device", "\n", "lcls", ",", "lbox", ",", "lobj", "=", "torch", ".", "zeros", "(", "1", ",", "device", "=", "device", ")", ",", "torch", ".", "zeros", "(", "1", ",", "device", "=", "device", ")", ",", "torch", ".", "zeros", "(", "1", ",", "device", "=", "device", ")", "\n", "tcls", ",", "tbox", ",", "indices", ",", "anchors", "=", "self", ".", "build_targets", "(", "p", ",", "targets", ")", "# targets", "\n", "\n", "# Losses", "\n", "for", "i", ",", "pi", "in", "enumerate", "(", "p", ")", ":", "# layer index, layer predictions", "\n", "            ", "b", ",", "a", ",", "gj", ",", "gi", "=", "indices", "[", "i", "]", "# image, anchor, gridy, gridx", "\n", "tobj", "=", "torch", ".", "zeros_like", "(", "pi", "[", "...", ",", "0", "]", ",", "device", "=", "device", ")", "# target obj", "\n", "\n", "n", "=", "b", ".", "shape", "[", "0", "]", "# number of targets", "\n", "if", "n", ":", "\n", "                ", "ps", "=", "pi", "[", "b", ",", "a", ",", "gj", ",", "gi", "]", "# prediction subset corresponding to targets", "\n", "\n", "# Regression", "\n", "pxy", "=", "ps", "[", ":", ",", ":", "2", "]", ".", "sigmoid", "(", ")", "*", "2.", "-", "0.5", "\n", "pwh", "=", "(", "ps", "[", ":", ",", "2", ":", "4", "]", ".", "sigmoid", "(", ")", "*", "2", ")", "**", "2", "*", "anchors", "[", "i", "]", "\n", "pbox", "=", "torch", ".", "cat", "(", "(", "pxy", ",", "pwh", ")", ",", "1", ")", "# predicted box", "\n", "iou", "=", "bbox_iou", "(", "pbox", ".", "T", ",", "tbox", "[", "i", "]", ",", "x1y1x2y2", "=", "False", ",", "CIoU", "=", "True", ")", "# iou(prediction, target)", "\n", "lbox", "+=", "(", "1.0", "-", "iou", ")", ".", "mean", "(", ")", "# iou loss", "\n", "\n", "# Objectness", "\n", "tobj", "[", "b", ",", "a", ",", "gj", ",", "gi", "]", "=", "(", "1.0", "-", "self", ".", "gr", ")", "+", "self", ".", "gr", "*", "iou", ".", "detach", "(", ")", ".", "clamp", "(", "0", ")", ".", "type", "(", "tobj", ".", "dtype", ")", "# iou ratio", "\n", "\n", "# Classification", "\n", "if", "self", ".", "nc", ">", "1", ":", "# cls loss (only if multiple classes)", "\n", "                    ", "t", "=", "torch", ".", "full_like", "(", "ps", "[", ":", ",", "5", ":", "]", ",", "self", ".", "cn", ",", "device", "=", "device", ")", "# targets", "\n", "t", "[", "range", "(", "n", ")", ",", "tcls", "[", "i", "]", "]", "=", "self", ".", "cp", "\n", "lcls", "+=", "self", ".", "BCEcls", "(", "ps", "[", ":", ",", "5", ":", "]", ",", "t", ")", "# BCE", "\n", "\n", "# Append targets to text file", "\n", "# with open('targets.txt', 'a') as file:", "\n", "#     [file.write('%11.5g ' * 4 % tuple(x) + '\\n') for x in torch.cat((txy[i], twh[i]), 1)]", "\n", "\n", "", "", "obji", "=", "self", ".", "BCEobj", "(", "pi", "[", "...", ",", "4", "]", ",", "tobj", ")", "\n", "lobj", "+=", "obji", "*", "self", ".", "balance", "[", "i", "]", "# obj loss", "\n", "if", "self", ".", "autobalance", ":", "\n", "                ", "self", ".", "balance", "[", "i", "]", "=", "self", ".", "balance", "[", "i", "]", "*", "0.9999", "+", "0.0001", "/", "obji", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "if", "self", ".", "autobalance", ":", "\n", "            ", "self", ".", "balance", "=", "[", "x", "/", "self", ".", "balance", "[", "self", ".", "ssi", "]", "for", "x", "in", "self", ".", "balance", "]", "\n", "", "lbox", "*=", "self", ".", "hyp", "[", "'box'", "]", "\n", "lobj", "*=", "self", ".", "hyp", "[", "'obj'", "]", "\n", "lcls", "*=", "self", ".", "hyp", "[", "'cls'", "]", "\n", "bs", "=", "tobj", ".", "shape", "[", "0", "]", "# batch size", "\n", "\n", "loss", "=", "lbox", "+", "lobj", "+", "lcls", "\n", "return", "loss", "*", "bs", ",", "torch", ".", "cat", "(", "(", "lbox", ",", "lobj", ",", "lcls", ",", "loss", ")", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.loss.ComputeLoss.build_targets": [[163, 217], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.arange().float().view().repeat", "torch.arange().float().view().repeat", "torch.arange().float().view().repeat", "torch.arange().float().view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "t[].long", "indices.append", "tbox.append", "anch.append", "tcls.append", "torch.arange().float().view", "torch.arange().float().view", "torch.arange().float().view", "torch.arange().float().view", "torch.cat.repeat", "torch.cat.repeat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "t[].long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "t.repeat", "gj.clamp_", "gi.clamp_", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.max().max", "torch.max().max", "torch.max().max", "torch.max().max", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "build_targets", "(", "self", ",", "p", ",", "targets", ")", ":", "\n", "# Build targets for compute_loss(), input targets(image,class,x,y,w,h)", "\n", "        ", "na", ",", "nt", "=", "self", ".", "na", ",", "targets", ".", "shape", "[", "0", "]", "# number of anchors, targets", "\n", "tcls", ",", "tbox", ",", "indices", ",", "anch", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "gain", "=", "torch", ".", "ones", "(", "7", ",", "device", "=", "targets", ".", "device", ")", "# normalized to gridspace gain", "\n", "ai", "=", "torch", ".", "arange", "(", "na", ",", "device", "=", "targets", ".", "device", ")", ".", "float", "(", ")", ".", "view", "(", "na", ",", "1", ")", ".", "repeat", "(", "1", ",", "nt", ")", "# same as .repeat_interleave(nt)", "\n", "targets", "=", "torch", ".", "cat", "(", "(", "targets", ".", "repeat", "(", "na", ",", "1", ",", "1", ")", ",", "ai", "[", ":", ",", ":", ",", "None", "]", ")", ",", "2", ")", "# append anchor indices", "\n", "\n", "g", "=", "0.5", "# bias", "\n", "off", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "0", "]", ",", "\n", "# [1, 0], [0, 1], [-1, 0], [0, -1],  # j,k,l,m", "\n", "# [1, 1], [1, -1], [-1, 1], [-1, -1],  # jk,jm,lk,lm", "\n", "]", ",", "device", "=", "targets", ".", "device", ")", ".", "float", "(", ")", "*", "g", "# offsets", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "nl", ")", ":", "\n", "            ", "anchors", "=", "self", ".", "anchors", "[", "i", "]", "\n", "gain", "[", "2", ":", "6", "]", "=", "torch", ".", "tensor", "(", "p", "[", "i", "]", ".", "shape", ")", "[", "[", "3", ",", "2", ",", "3", ",", "2", "]", "]", "# xyxy gain", "\n", "\n", "# Match targets to anchors", "\n", "t", "=", "targets", "*", "gain", "\n", "if", "nt", ":", "\n", "# Matches", "\n", "                ", "r", "=", "t", "[", ":", ",", ":", ",", "4", ":", "6", "]", "/", "anchors", "[", ":", ",", "None", "]", "# wh ratio", "\n", "j", "=", "torch", ".", "max", "(", "r", ",", "1.", "/", "r", ")", ".", "max", "(", "2", ")", "[", "0", "]", "<", "self", ".", "hyp", "[", "'anchor_t'", "]", "# compare", "\n", "# j = wh_iou(anchors, t[:, 4:6]) > model.hyp['iou_t']  # iou(3,n)=wh_iou(anchors(3,2), gwh(n,2))", "\n", "t", "=", "t", "[", "j", "]", "# filter", "\n", "\n", "# Offsets", "\n", "gxy", "=", "t", "[", ":", ",", "2", ":", "4", "]", "# grid xy", "\n", "gxi", "=", "gain", "[", "[", "2", ",", "3", "]", "]", "-", "gxy", "# inverse", "\n", "j", ",", "k", "=", "(", "(", "gxy", "%", "1.", "<", "g", ")", "&", "(", "gxy", ">", "1.", ")", ")", ".", "T", "\n", "l", ",", "m", "=", "(", "(", "gxi", "%", "1.", "<", "g", ")", "&", "(", "gxi", ">", "1.", ")", ")", ".", "T", "\n", "j", "=", "torch", ".", "stack", "(", "(", "torch", ".", "ones_like", "(", "j", ")", ",", ")", ")", "\n", "t", "=", "t", ".", "repeat", "(", "(", "off", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ")", "[", "j", "]", "\n", "offsets", "=", "(", "torch", ".", "zeros_like", "(", "gxy", ")", "[", "None", "]", "+", "off", "[", ":", ",", "None", "]", ")", "[", "j", "]", "\n", "", "else", ":", "\n", "                ", "t", "=", "targets", "[", "0", "]", "\n", "offsets", "=", "0", "\n", "\n", "# Define", "\n", "", "b", ",", "c", "=", "t", "[", ":", ",", ":", "2", "]", ".", "long", "(", ")", ".", "T", "# image, class", "\n", "gxy", "=", "t", "[", ":", ",", "2", ":", "4", "]", "# grid xy", "\n", "gwh", "=", "t", "[", ":", ",", "4", ":", "6", "]", "# grid wh", "\n", "gij", "=", "(", "gxy", "-", "offsets", ")", ".", "long", "(", ")", "\n", "gi", ",", "gj", "=", "gij", ".", "T", "# grid xy indices", "\n", "\n", "# Append", "\n", "a", "=", "t", "[", ":", ",", "6", "]", ".", "long", "(", ")", "# anchor indices", "\n", "indices", ".", "append", "(", "(", "b", ",", "a", ",", "gj", ".", "clamp_", "(", "0", ",", "gain", "[", "3", "]", "-", "1", ")", ",", "gi", ".", "clamp_", "(", "0", ",", "gain", "[", "2", "]", "-", "1", ")", ")", ")", "# image, anchor, grid indices", "\n", "tbox", ".", "append", "(", "torch", ".", "cat", "(", "(", "gxy", "-", "gij", ",", "gwh", ")", ",", "1", ")", ")", "# box", "\n", "anch", ".", "append", "(", "anchors", "[", "a", "]", ")", "# anchors", "\n", "tcls", ".", "append", "(", "c", ")", "# class", "\n", "\n", "", "return", "tcls", ",", "tbox", ",", "indices", ",", "anch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.loss.smooth_BCE": [[10, 13], ["None"], "function", ["None"], ["def", "smooth_BCE", "(", "eps", "=", "0.1", ")", ":", "# https://github.com/ultralytics/yolov3/issues/238#issuecomment-598028441", "\n", "# return positive, negative label smoothing BCE targets", "\n", "    ", "return", "1.0", "-", "0.5", "*", "eps", ",", "0.5", "*", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.activations.SiLU.forward": [[10, 13], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "x", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.activations.Hardswish.forward": [[16, 20], ["torch.hardtanh", "torch.hardtanh", "torch.hardtanh"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "x", ")", ":", "\n", "# return x * F.hardsigmoid(x)  # for torchscript and CoreML", "\n", "        ", "return", "x", "*", "F", ".", "hardtanh", "(", "x", "+", "3", ",", "0.", ",", "6.", ")", "/", "6.", "# for torchscript, CoreML and ONNX", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.activations.MemoryEfficientSwish.forward": [[35, 37], ["activations.MemoryEfficientSwish.F.apply"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "F", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.activations.Mish.forward": [[41, 44], ["torch.softplus().tanh", "torch.softplus().tanh", "torch.softplus().tanh", "torch.softplus", "torch.softplus", "torch.softplus"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "x", ")", ":", "\n", "        ", "return", "x", "*", "F", ".", "softplus", "(", "x", ")", ".", "tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.activations.MemoryEfficientMish.forward": [[60, 62], ["activations.MemoryEfficientMish.F.apply"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "F", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.activations.FReLU.__init__": [[66, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "k", "=", "3", ")", ":", "# ch_in, kernel", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "c1", ",", "c1", ",", "k", ",", "1", ",", "1", ",", "groups", "=", "c1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "c1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.activations.FReLU.forward": [[71, 73], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "activations.FReLU.bn", "activations.FReLU.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "max", "(", "x", ",", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.ModelEMA.__init__": [[281, 290], ["copy.deepcopy().eval", "torch_utils.ModelEMA.ema.parameters", "p.requires_grad_", "copy.deepcopy", "math.exp", "torch_utils.is_parallel"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.is_parallel"], ["def", "__init__", "(", "self", ",", "model", ",", "decay", "=", "0.9999", ",", "updates", "=", "0", ")", ":", "\n", "# Create EMA", "\n", "        ", "self", ".", "ema", "=", "deepcopy", "(", "model", ".", "module", "if", "is_parallel", "(", "model", ")", "else", "model", ")", ".", "eval", "(", ")", "# FP32 EMA", "\n", "# if next(model.parameters()).device.type != 'cpu':", "\n", "#     self.ema.half()  # FP16 EMA", "\n", "self", ".", "updates", "=", "updates", "# number of EMA updates", "\n", "self", ".", "decay", "=", "lambda", "x", ":", "decay", "*", "(", "1", "-", "math", ".", "exp", "(", "-", "x", "/", "2000", ")", ")", "# decay exponential ramp (to help early epochs)", "\n", "for", "p", "in", "self", ".", "ema", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad_", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.ModelEMA.update": [[291, 302], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch_utils.ModelEMA.decay", "torch_utils.ModelEMA.ema.state_dict().items", "torch_utils.is_parallel", "model.module.state_dict", "model.state_dict", "torch_utils.ModelEMA.ema.state_dict", "msd[].detach"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.is_parallel"], ["", "", "def", "update", "(", "self", ",", "model", ")", ":", "\n", "# Update EMA parameters", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "updates", "+=", "1", "\n", "d", "=", "self", ".", "decay", "(", "self", ".", "updates", ")", "\n", "\n", "msd", "=", "model", ".", "module", ".", "state_dict", "(", ")", "if", "is_parallel", "(", "model", ")", "else", "model", ".", "state_dict", "(", ")", "# model state_dict", "\n", "for", "k", ",", "v", "in", "self", ".", "ema", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "                ", "if", "v", ".", "dtype", ".", "is_floating_point", ":", "\n", "                    ", "v", "*=", "d", "\n", "v", "+=", "(", "1.", "-", "d", ")", "*", "msd", "[", "k", "]", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.ModelEMA.update_attr": [[303, 306], ["torch_utils.copy_attr"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.copy_attr"], ["", "", "", "", "def", "update_attr", "(", "self", ",", "model", ",", "include", "=", "(", ")", ",", "exclude", "=", "(", "'process_group'", ",", "'reducer'", ")", ")", ":", "\n", "# Update EMA attributes", "\n", "        ", "copy_attr", "(", "self", ".", "ema", ",", "model", ",", "include", ",", "exclude", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.torch_distributed_zero_first": [[29, 39], ["torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier"], "function", ["None"], ["@", "contextmanager", "\n", "def", "torch_distributed_zero_first", "(", "local_rank", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Decorator to make all processes in distributed training wait for each local_master to do something.\n    \"\"\"", "\n", "if", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "", "yield", "\n", "if", "local_rank", "==", "0", ":", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.init_torch_seeds": [[41, 48], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed"], "function", ["None"], ["", "", "def", "init_torch_seeds", "(", "seed", "=", "0", ")", ":", "\n", "# Speed-reproducibility tradeoff https://pytorch.org/docs/stable/notes/randomness.html", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "seed", "==", "0", ":", "# slower, more reproducible", "\n", "        ", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "", "else", ":", "# faster, less reproducible", "\n", "        ", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "True", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.date_modified": [[50, 54], ["datetime.datetime.fromtimestamp", "pathlib.Path().stat", "pathlib.Path"], "function", ["None"], ["", "", "def", "date_modified", "(", "path", "=", "__file__", ")", ":", "\n", "# return human-readable file modification date, i.e. '2021-3-26'", "\n", "    ", "t", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "Path", "(", "path", ")", ".", "stat", "(", ")", ".", "st_mtime", ")", "\n", "return", "f'{t.year}-{t.month}-{t.day}'", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.git_describe": [[56, 63], ["pathlib.Path", "subprocess.check_output().decode", "subprocess.check_output"], "function", ["None"], ["", "def", "git_describe", "(", "path", "=", "Path", "(", "__file__", ")", ".", "parent", ")", ":", "# path must be a directory", "\n", "# return human-readable git description, i.e. v5.0-5-g3e25f1e https://git-scm.com/docs/git-describe", "\n", "    ", "s", "=", "f'git -C {path} describe --tags --long --always'", "\n", "try", ":", "\n", "        ", "return", "subprocess", ".", "check_output", "(", "s", ",", "shell", "=", "True", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", ".", "decode", "(", ")", "[", ":", "-", "1", "]", "\n", "", "except", "subprocess", ".", "CalledProcessError", "as", "e", ":", "\n", "        ", "return", "''", "# not a git repository", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.select_device": [[65, 89], ["logger.info", "torch.device", "torch.device", "torch.device", "torch.device", "device.lower", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "enumerate", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "s.encode().decode", "torch_utils.git_describe", "torch_utils.date_modified", "device.split", "range", "platform.system", "s.encode"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.git_describe", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.date_modified"], ["", "", "def", "select_device", "(", "device", "=", "''", ",", "batch_size", "=", "None", ")", ":", "\n", "# device = 'cpu' or '0' or '0,1,2,3'", "\n", "    ", "s", "=", "f'YOLOv3 \ud83d\ude80 {git_describe() or date_modified()} torch {torch.__version__} '", "# string", "\n", "cpu", "=", "device", ".", "lower", "(", ")", "==", "'cpu'", "\n", "if", "cpu", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "'-1'", "# force torch.cuda.is_available() = False", "\n", "", "elif", "device", ":", "# non-cpu device requested", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "device", "# set environment variable", "\n", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "f'CUDA unavailable, invalid device {device} requested'", "# check availability", "\n", "\n", "", "cuda", "=", "not", "cpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "cuda", ":", "\n", "        ", "n", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "n", ">", "1", "and", "batch_size", ":", "# check that batch_size is compatible with device_count", "\n", "            ", "assert", "batch_size", "%", "n", "==", "0", ",", "f'batch-size {batch_size} not multiple of GPU count {n}'", "\n", "", "space", "=", "' '", "*", "len", "(", "s", ")", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "device", ".", "split", "(", "','", ")", "if", "device", "else", "range", "(", "n", ")", ")", ":", "\n", "            ", "p", "=", "torch", ".", "cuda", ".", "get_device_properties", "(", "i", ")", "\n", "s", "+=", "f\"{'' if i == 0 else space}CUDA:{d} ({p.name}, {p.total_memory / 1024 ** 2}MB)\\n\"", "# bytes to MB", "\n", "", "", "else", ":", "\n", "        ", "s", "+=", "'CPU\\n'", "\n", "\n", "", "logger", ".", "info", "(", "s", ".", "encode", "(", ")", ".", "decode", "(", "'ascii'", ",", "'ignore'", ")", "if", "platform", ".", "system", "(", ")", "==", "'Windows'", "else", "s", ")", "# emoji-safe", "\n", "return", "torch", ".", "device", "(", "'cuda:0'", "if", "cuda", "else", "'cpu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized": [[91, 96], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "time.time", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize"], "function", ["None"], ["", "def", "time_synchronized", "(", ")", ":", "\n", "# pytorch-accurate time", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "", "return", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.profile": [[98, 135], ["x.to.to", "print", "print", "torch.device", "torch.device", "torch.device", "torch.device", "isinstance", "range", "print", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "hasattr", "m.to", "m.half", "torch_utils.time_synchronized", "m", "torch_utils.time_synchronized", "isinstance", "tuple", "isinstance", "tuple", "isinstance", "sum", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "hasattr", "isinstance", "m.sum().backward", "torch_utils.time_synchronized", "list", "float", "str", "str", "thop.profile", "m.sum", "x.to.numel", "m.parameters"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.profile"], ["", "def", "profile", "(", "x", ",", "ops", ",", "n", "=", "100", ",", "device", "=", "None", ")", ":", "\n", "# profile a pytorch module or list of modules. Example usage:", "\n", "#     x = torch.randn(16, 3, 640, 640)  # input", "\n", "#     m1 = lambda x: x * torch.sigmoid(x)", "\n", "#     m2 = nn.SiLU()", "\n", "#     profile(x, [m1, m2], n=100)  # profile speed over 100 iterations", "\n", "\n", "    ", "device", "=", "device", "or", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "x", ".", "requires_grad", "=", "True", "\n", "print", "(", "torch", ".", "__version__", ",", "device", ".", "type", ",", "torch", ".", "cuda", ".", "get_device_properties", "(", "0", ")", "if", "device", ".", "type", "==", "'cuda'", "else", "''", ")", "\n", "print", "(", "f\"\\n{'Params':>12s}{'GFLOPS':>12s}{'forward (ms)':>16s}{'backward (ms)':>16s}{'input':>24s}{'output':>24s}\"", ")", "\n", "for", "m", "in", "ops", "if", "isinstance", "(", "ops", ",", "list", ")", "else", "[", "ops", "]", ":", "\n", "        ", "m", "=", "m", ".", "to", "(", "device", ")", "if", "hasattr", "(", "m", ",", "'to'", ")", "else", "m", "# device", "\n", "m", "=", "m", ".", "half", "(", ")", "if", "hasattr", "(", "m", ",", "'half'", ")", "and", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "x", ".", "dtype", "is", "torch", ".", "float16", "else", "m", "# type", "\n", "dtf", ",", "dtb", ",", "t", "=", "0.", ",", "0.", ",", "[", "0.", ",", "0.", ",", "0.", "]", "# dt forward, backward", "\n", "try", ":", "\n", "            ", "flops", "=", "thop", ".", "profile", "(", "m", ",", "inputs", "=", "(", "x", ",", ")", ",", "verbose", "=", "False", ")", "[", "0", "]", "/", "1E9", "*", "2", "# GFLOPS", "\n", "", "except", ":", "\n", "            ", "flops", "=", "0", "\n", "\n", "", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "            ", "t", "[", "0", "]", "=", "time_synchronized", "(", ")", "\n", "y", "=", "m", "(", "x", ")", "\n", "t", "[", "1", "]", "=", "time_synchronized", "(", ")", "\n", "try", ":", "\n", "                ", "_", "=", "y", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "t", "[", "2", "]", "=", "time_synchronized", "(", ")", "\n", "", "except", ":", "# no backward method", "\n", "                ", "t", "[", "2", "]", "=", "float", "(", "'nan'", ")", "\n", "", "dtf", "+=", "(", "t", "[", "1", "]", "-", "t", "[", "0", "]", ")", "*", "1000", "/", "n", "# ms per op forward", "\n", "dtb", "+=", "(", "t", "[", "2", "]", "-", "t", "[", "1", "]", ")", "*", "1000", "/", "n", "# ms per op backward", "\n", "\n", "", "s_in", "=", "tuple", "(", "x", ".", "shape", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "'list'", "\n", "s_out", "=", "tuple", "(", "y", ".", "shape", ")", "if", "isinstance", "(", "y", ",", "torch", ".", "Tensor", ")", "else", "'list'", "\n", "p", "=", "sum", "(", "list", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "m", ".", "parameters", "(", ")", ")", ")", "if", "isinstance", "(", "m", ",", "nn", ".", "Module", ")", "else", "0", "# parameters", "\n", "print", "(", "f'{p:12}{flops:12.4g}{dtf:16.4g}{dtb:16.4g}{str(s_in):>24s}{str(s_out):>24s}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.is_parallel": [[137, 139], ["type"], "function", ["None"], ["", "", "def", "is_parallel", "(", "model", ")", ":", "\n", "    ", "return", "type", "(", "model", ")", "in", "(", "nn", ".", "parallel", ".", "DataParallel", ",", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.intersect_dicts": [[141, 144], ["da.items", "any"], "function", ["None"], ["", "def", "intersect_dicts", "(", "da", ",", "db", ",", "exclude", "=", "(", ")", ")", ":", "\n", "# Dictionary intersection of matching keys and shapes, omitting 'exclude' keys, using da values", "\n", "    ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "da", ".", "items", "(", ")", "if", "k", "in", "db", "and", "not", "any", "(", "x", "in", "k", "for", "x", "in", "exclude", ")", "and", "v", ".", "shape", "==", "db", "[", "k", "]", ".", "shape", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.initialize_weights": [[146, 156], ["model.modules", "type"], "function", ["None"], ["", "def", "initialize_weights", "(", "model", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "t", "=", "type", "(", "m", ")", "\n", "if", "t", "is", "nn", ".", "Conv2d", ":", "\n", "            ", "pass", "# nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "", "elif", "t", "is", "nn", ".", "BatchNorm2d", ":", "\n", "            ", "m", ".", "eps", "=", "1e-3", "\n", "m", ".", "momentum", "=", "0.03", "\n", "", "elif", "t", "in", "[", "nn", ".", "Hardswish", ",", "nn", ".", "LeakyReLU", ",", "nn", ".", "ReLU", ",", "nn", ".", "ReLU6", "]", ":", "\n", "            ", "m", ".", "inplace", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.find_modules": [[158, 161], ["enumerate", "isinstance"], "function", ["None"], ["", "", "", "def", "find_modules", "(", "model", ",", "mclass", "=", "nn", ".", "Conv2d", ")", ":", "\n", "# Finds layer indices matching module class 'mclass'", "\n", "    ", "return", "[", "i", "for", "i", ",", "m", "in", "enumerate", "(", "model", ".", "module_list", ")", "if", "isinstance", "(", "m", ",", "mclass", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.sparsity": [[163, 170], ["model.parameters", "p.numel"], "function", ["None"], ["", "def", "sparsity", "(", "model", ")", ":", "\n", "# Return global model sparsity", "\n", "    ", "a", ",", "b", "=", "0.", ",", "0.", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "a", "+=", "p", ".", "numel", "(", ")", "\n", "b", "+=", "(", "p", "==", "0", ")", ".", "sum", "(", ")", "\n", "", "return", "b", "/", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.prune": [[172, 181], ["print", "model.named_modules", "print", "isinstance", "prune.l1_unstructured", "prune.remove", "torch_utils.sparsity"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.sparsity"], ["", "def", "prune", "(", "model", ",", "amount", "=", "0.3", ")", ":", "\n", "# Prune model to requested global sparsity", "\n", "    ", "import", "torch", ".", "nn", ".", "utils", ".", "prune", "as", "prune", "\n", "print", "(", "'Pruning model... '", ",", "end", "=", "''", ")", "\n", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "prune", ".", "l1_unstructured", "(", "m", ",", "name", "=", "'weight'", ",", "amount", "=", "amount", ")", "# prune", "\n", "prune", ".", "remove", "(", "m", ",", "'weight'", ")", "# make permanent", "\n", "", "", "print", "(", "' %.3g global sparsity'", "%", "sparsity", "(", "model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.fuse_conv_and_bn": [[183, 204], ["torch.Conv2d().requires_grad_().to", "conv.weight.clone().view", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "nn.Conv2d().requires_grad_().to.weight.copy_", "nn.Conv2d().requires_grad_().to.bias.copy_", "bn.weight.div", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "bn.weight.mul().div", "torch.Conv2d().requires_grad_", "conv.weight.clone", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "conv.weight.size", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mm().reshape", "torch.mm().reshape", "torch.mm().reshape", "torch.mm().reshape", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "bn.weight.mul", "torch.Conv2d", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "b_conv.reshape"], "function", ["None"], ["", "def", "fuse_conv_and_bn", "(", "conv", ",", "bn", ")", ":", "\n", "# Fuse convolution and batchnorm layers https://tehnokv.com/posts/fusing-batchnorm-and-conv/", "\n", "    ", "fusedconv", "=", "nn", ".", "Conv2d", "(", "conv", ".", "in_channels", ",", "\n", "conv", ".", "out_channels", ",", "\n", "kernel_size", "=", "conv", ".", "kernel_size", ",", "\n", "stride", "=", "conv", ".", "stride", ",", "\n", "padding", "=", "conv", ".", "padding", ",", "\n", "groups", "=", "conv", ".", "groups", ",", "\n", "bias", "=", "True", ")", ".", "requires_grad_", "(", "False", ")", ".", "to", "(", "conv", ".", "weight", ".", "device", ")", "\n", "\n", "# prepare filters", "\n", "w_conv", "=", "conv", ".", "weight", ".", "clone", "(", ")", ".", "view", "(", "conv", ".", "out_channels", ",", "-", "1", ")", "\n", "w_bn", "=", "torch", ".", "diag", "(", "bn", ".", "weight", ".", "div", "(", "torch", ".", "sqrt", "(", "bn", ".", "eps", "+", "bn", ".", "running_var", ")", ")", ")", "\n", "fusedconv", ".", "weight", ".", "copy_", "(", "torch", ".", "mm", "(", "w_bn", ",", "w_conv", ")", ".", "view", "(", "fusedconv", ".", "weight", ".", "shape", ")", ")", "\n", "\n", "# prepare spatial bias", "\n", "b_conv", "=", "torch", ".", "zeros", "(", "conv", ".", "weight", ".", "size", "(", "0", ")", ",", "device", "=", "conv", ".", "weight", ".", "device", ")", "if", "conv", ".", "bias", "is", "None", "else", "conv", ".", "bias", "\n", "b_bn", "=", "bn", ".", "bias", "-", "bn", ".", "weight", ".", "mul", "(", "bn", ".", "running_mean", ")", ".", "div", "(", "torch", ".", "sqrt", "(", "bn", ".", "running_var", "+", "bn", ".", "eps", ")", ")", "\n", "fusedconv", ".", "bias", ".", "copy_", "(", "torch", ".", "mm", "(", "w_bn", ",", "b_conv", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ".", "reshape", "(", "-", "1", ")", "+", "b_bn", ")", "\n", "\n", "return", "fusedconv", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.model_info": [[206, 228], ["sum", "sum", "logger.info", "print", "enumerate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.numel", "x.numel", "model.named_parameters", "name.replace.replace", "print", "hasattr", "max", "isinstance", "model.parameters", "model.parameters", "int", "model.yaml.get", "len", "model.stride.max", "next", "torch_utils.profile", "list", "p.numel", "list", "p.mean", "p.std", "model.parameters", "copy.deepcopy", "model.modules"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.profile"], ["", "def", "model_info", "(", "model", ",", "verbose", "=", "False", ",", "img_size", "=", "640", ")", ":", "\n", "# Model information. img_size may be int or list, i.e. img_size=640 or img_size=[640, 320]", "\n", "    ", "n_p", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", ")", "# number parameters", "\n", "n_g", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", "if", "x", ".", "requires_grad", ")", "# number gradients", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'%5s %40s %9s %12s %20s %10s %10s'", "%", "(", "'layer'", ",", "'name'", ",", "'gradient'", ",", "'parameters'", ",", "'shape'", ",", "'mu'", ",", "'sigma'", ")", ")", "\n", "for", "i", ",", "(", "name", ",", "p", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "name", "=", "name", ".", "replace", "(", "'module_list.'", ",", "''", ")", "\n", "print", "(", "'%5g %40s %9s %12g %20s %10.3g %10.3g'", "%", "\n", "(", "i", ",", "name", ",", "p", ".", "requires_grad", ",", "p", ".", "numel", "(", ")", ",", "list", "(", "p", ".", "shape", ")", ",", "p", ".", "mean", "(", ")", ",", "p", ".", "std", "(", ")", ")", ")", "\n", "\n", "", "", "try", ":", "# FLOPS", "\n", "        ", "from", "thop", "import", "profile", "\n", "stride", "=", "max", "(", "int", "(", "model", ".", "stride", ".", "max", "(", ")", ")", ",", "32", ")", "if", "hasattr", "(", "model", ",", "'stride'", ")", "else", "32", "\n", "img", "=", "torch", ".", "zeros", "(", "(", "1", ",", "model", ".", "yaml", ".", "get", "(", "'ch'", ",", "3", ")", ",", "stride", ",", "stride", ")", ",", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", ")", "# input", "\n", "flops", "=", "profile", "(", "deepcopy", "(", "model", ")", ",", "inputs", "=", "(", "img", ",", ")", ",", "verbose", "=", "False", ")", "[", "0", "]", "/", "1E9", "*", "2", "# stride GFLOPS", "\n", "img_size", "=", "img_size", "if", "isinstance", "(", "img_size", ",", "list", ")", "else", "[", "img_size", ",", "img_size", "]", "# expand if int/float", "\n", "fs", "=", "', %.1f GFLOPS'", "%", "(", "flops", "*", "img_size", "[", "0", "]", "/", "stride", "*", "img_size", "[", "1", "]", "/", "stride", ")", "# 640x640 GFLOPS", "\n", "", "except", "(", "ImportError", ",", "Exception", ")", ":", "\n", "        ", "fs", "=", "''", "\n", "\n", "", "logger", ".", "info", "(", "f\"Model Summary: {len(list(model.modules()))} layers, {n_p} parameters, {n_g} gradients{fs}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.load_classifier": [[230, 247], ["torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "load_classifier", "(", "name", "=", "'resnet101'", ",", "n", "=", "2", ")", ":", "\n", "# Loads a pretrained model reshaped to n-class output", "\n", "    ", "model", "=", "torchvision", ".", "models", ".", "__dict__", "[", "name", "]", "(", "pretrained", "=", "True", ")", "\n", "\n", "# ResNet model properties", "\n", "# input_size = [3, 224, 224]", "\n", "# input_space = 'RGB'", "\n", "# input_range = [0, 1]", "\n", "# mean = [0.485, 0.456, 0.406]", "\n", "# std = [0.229, 0.224, 0.225]", "\n", "\n", "# Reshape output to n classes", "\n", "filters", "=", "model", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "model", ".", "fc", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "n", ")", ",", "requires_grad", "=", "True", ")", "\n", "model", ".", "fc", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "n", ",", "filters", ")", ",", "requires_grad", "=", "True", ")", "\n", "model", ".", "fc", ".", "out_features", "=", "n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.scale_img": [[249, 260], ["torch.interpolate", "torch.pad", "int", "int", "math.ceil"], "function", ["None"], ["", "def", "scale_img", "(", "img", ",", "ratio", "=", "1.0", ",", "same_shape", "=", "False", ",", "gs", "=", "32", ")", ":", "# img(16,3,256,416)", "\n", "# scales img(bs,3,y,x) by ratio constrained to gs-multiple", "\n", "    ", "if", "ratio", "==", "1.0", ":", "\n", "        ", "return", "img", "\n", "", "else", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "[", "2", ":", "]", "\n", "s", "=", "(", "int", "(", "h", "*", "ratio", ")", ",", "int", "(", "w", "*", "ratio", ")", ")", "# new size", "\n", "img", "=", "F", ".", "interpolate", "(", "img", ",", "size", "=", "s", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "# resize", "\n", "if", "not", "same_shape", ":", "# pad/crop img", "\n", "            ", "h", ",", "w", "=", "[", "math", ".", "ceil", "(", "x", "*", "ratio", "/", "gs", ")", "*", "gs", "for", "x", "in", "(", "h", ",", "w", ")", "]", "\n", "", "return", "F", ".", "pad", "(", "img", ",", "[", "0", ",", "w", "-", "s", "[", "1", "]", ",", "0", ",", "h", "-", "s", "[", "0", "]", "]", ",", "value", "=", "0.447", ")", "# value = imagenet mean", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.copy_attr": [[262, 269], ["b.__dict__.items", "k.startswith", "setattr", "len"], "function", ["None"], ["", "", "def", "copy_attr", "(", "a", ",", "b", ",", "include", "=", "(", ")", ",", "exclude", "=", "(", ")", ")", ":", "\n", "# Copy attributes from b to a, options to only include [...] and to exclude [...]", "\n", "    ", "for", "k", ",", "v", "in", "b", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "(", "len", "(", "include", ")", "and", "k", "not", "in", "include", ")", "or", "k", ".", "startswith", "(", "'_'", ")", "or", "k", "in", "exclude", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "setattr", "(", "a", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.set_logging": [[33, 37], ["logging.basicConfig"], "function", ["None"], ["def", "set_logging", "(", "rank", "=", "-", "1", ")", ":", "\n", "    ", "logging", ".", "basicConfig", "(", "\n", "format", "=", "\"%(message)s\"", ",", "\n", "level", "=", "logging", ".", "INFO", "if", "rank", "in", "[", "-", "1", ",", "0", "]", "else", "logging", ".", "WARN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.init_seeds": [[39, 44], ["random.seed", "numpy.random.seed", "utils.torch_utils.init_torch_seeds"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.init_torch_seeds"], ["", "def", "init_seeds", "(", "seed", "=", "0", ")", ":", "\n", "# Initialize random number generator (RNG) seeds", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "init_torch_seeds", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.get_latest_run": [[46, 50], ["glob.glob", "max"], "function", ["None"], ["", "def", "get_latest_run", "(", "search_dir", "=", "'.'", ")", ":", "\n", "# Return path to most recent 'last.pt' in /runs (i.e. to --resume from)", "\n", "    ", "last_list", "=", "glob", ".", "glob", "(", "f'{search_dir}/**/last*.pt'", ",", "recursive", "=", "True", ")", "\n", "return", "max", "(", "last_list", ",", "key", "=", "os", ".", "path", ".", "getctime", ")", "if", "last_list", "else", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.isdocker": [[52, 55], ["pathlib.Path().exists", "pathlib.Path"], "function", ["None"], ["", "def", "isdocker", "(", ")", ":", "\n", "# Is environment a Docker container", "\n", "    ", "return", "Path", "(", "'/workspace'", ")", ".", "exists", "(", ")", "# or Path('/.dockerenv').exists()", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.emojis": [[57, 60], ["str.encode().decode", "platform.system", "str.encode"], "function", ["None"], ["", "def", "emojis", "(", "str", "=", "''", ")", ":", "\n", "# Return platform-dependent emoji-safe version of string", "\n", "    ", "return", "str", ".", "encode", "(", ")", ".", "decode", "(", "'ascii'", ",", "'ignore'", ")", "if", "platform", ".", "system", "(", ")", "==", "'Windows'", "else", "str", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_online": [[62, 70], ["socket.create_connection"], "function", ["None"], ["", "def", "check_online", "(", ")", ":", "\n", "# Check internet connectivity", "\n", "    ", "import", "socket", "\n", "try", ":", "\n", "        ", "socket", ".", "create_connection", "(", "(", "\"1.1.1.1\"", ",", "443", ")", ",", "5", ")", "# check host accesability", "\n", "return", "True", "\n", "", "except", "OSError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_git_status": [[72, 92], ["print", "general.colorstr", "pathlib.Path().exists", "general.check_online", "subprocess.check_output().decode().strip().rstrip", "subprocess.check_output().decode().strip", "int", "print", "general.isdocker", "subprocess.check_output", "general.emojis", "print", "pathlib.Path", "subprocess.check_output().decode().strip", "subprocess.check_output().decode", "subprocess.check_output().decode", "subprocess.check_output", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.colorstr", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_online", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.isdocker", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.emojis", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "", "def", "check_git_status", "(", ")", ":", "\n", "# Recommend 'git pull' if code is out of date", "\n", "    ", "print", "(", "colorstr", "(", "'github: '", ")", ",", "end", "=", "''", ")", "\n", "try", ":", "\n", "        ", "assert", "Path", "(", "'.git'", ")", ".", "exists", "(", ")", ",", "'skipping check (not a git repository)'", "\n", "assert", "not", "isdocker", "(", ")", ",", "'skipping check (Docker image)'", "\n", "assert", "check_online", "(", ")", ",", "'skipping check (offline)'", "\n", "\n", "cmd", "=", "'git fetch && git config --get remote.origin.url'", "\n", "url", "=", "subprocess", ".", "check_output", "(", "cmd", ",", "shell", "=", "True", ")", ".", "decode", "(", ")", ".", "strip", "(", ")", ".", "rstrip", "(", "'.git'", ")", "# github repo url", "\n", "branch", "=", "subprocess", ".", "check_output", "(", "'git rev-parse --abbrev-ref HEAD'", ",", "shell", "=", "True", ")", ".", "decode", "(", ")", ".", "strip", "(", ")", "# checked out", "\n", "n", "=", "int", "(", "subprocess", ".", "check_output", "(", "f'git rev-list {branch}..origin/master --count'", ",", "shell", "=", "True", ")", ")", "# commits behind", "\n", "if", "n", ">", "0", ":", "\n", "            ", "s", "=", "f\"\u26a0\ufe0f WARNING: code is out of date by {n} commit{'s' * (n > 1)}. \"", "f\"Use 'git pull' to update or 'git clone {url}' to download latest.\"", "\n", "", "else", ":", "\n", "            ", "s", "=", "f'up to date with {url} \u2705'", "\n", "", "print", "(", "emojis", "(", "s", ")", ")", "# emoji-safe", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_requirements": [[94, 121], ["general.colorstr", "isinstance", "pathlib.Path", "print", "pathlib.Path.exists", "print", "pkg.require", "pathlib.Path.resolve", "general.emojis", "pkg.parse_requirements", "print", "print", "locals", "general.colorstr", "pathlib.Path.open", "subprocess.check_output().decode", "pathlib.Path.resolve", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.colorstr", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.emojis", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.colorstr"], ["", "", "def", "check_requirements", "(", "requirements", "=", "'requirements.txt'", ",", "exclude", "=", "(", ")", ")", ":", "\n", "# Check installed dependencies meet requirements (pass *.txt file or list of packages)", "\n", "    ", "import", "pkg_resources", "as", "pkg", "\n", "prefix", "=", "colorstr", "(", "'red'", ",", "'bold'", ",", "'requirements:'", ")", "\n", "if", "isinstance", "(", "requirements", ",", "(", "str", ",", "Path", ")", ")", ":", "# requirements.txt file", "\n", "        ", "file", "=", "Path", "(", "requirements", ")", "\n", "if", "not", "file", ".", "exists", "(", ")", ":", "\n", "            ", "print", "(", "f\"{prefix} {file.resolve()} not found, check failed.\"", ")", "\n", "return", "\n", "", "requirements", "=", "[", "f'{x.name}{x.specifier}'", "for", "x", "in", "pkg", ".", "parse_requirements", "(", "file", ".", "open", "(", ")", ")", "if", "x", ".", "name", "not", "in", "exclude", "]", "\n", "", "else", ":", "# list or tuple of packages", "\n", "        ", "requirements", "=", "[", "x", "for", "x", "in", "requirements", "if", "x", "not", "in", "exclude", "]", "\n", "\n", "", "n", "=", "0", "# number of packages updates", "\n", "for", "r", "in", "requirements", ":", "\n", "        ", "try", ":", "\n", "            ", "pkg", ".", "require", "(", "r", ")", "\n", "", "except", "Exception", "as", "e", ":", "# DistributionNotFound or VersionConflict if requirements not met", "\n", "            ", "n", "+=", "1", "\n", "print", "(", "f\"{prefix} {e.req} not found and is required by YOLOv3, attempting auto-update...\"", ")", "\n", "print", "(", "subprocess", ".", "check_output", "(", "f\"pip install '{e.req}'\"", ",", "shell", "=", "True", ")", ".", "decode", "(", ")", ")", "\n", "\n", "", "", "if", "n", ":", "# if packages updated", "\n", "        ", "source", "=", "file", ".", "resolve", "(", ")", "if", "'file'", "in", "locals", "(", ")", "else", "requirements", "\n", "s", "=", "f\"{prefix} {n} package{'s' * (n > 1)} updated per {source}\\n\"", "f\"{prefix} \u26a0\ufe0f {colorstr('bold', 'Restart runtime or rerun command for updates to take effect')}\\n\"", "\n", "print", "(", "emojis", "(", "s", ")", ")", "# emoji-safe", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_img_size": [[123, 129], ["general.make_divisible", "int", "print"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.make_divisible", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "", "def", "check_img_size", "(", "img_size", ",", "s", "=", "32", ")", ":", "\n", "# Verify img_size is a multiple of stride s", "\n", "    ", "new_size", "=", "make_divisible", "(", "img_size", ",", "int", "(", "s", ")", ")", "# ceil gs-multiple", "\n", "if", "new_size", "!=", "img_size", ":", "\n", "        ", "print", "(", "'WARNING: --img-size %g must be multiple of max stride %g, updating to %g'", "%", "(", "img_size", ",", "s", ",", "new_size", ")", ")", "\n", "", "return", "new_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_imshow": [[131, 143], ["cv2.imshow", "cv2.waitKey", "cv2.destroyAllWindows", "cv2.waitKey", "general.isdocker", "numpy.zeros", "print"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.isdocker", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "def", "check_imshow", "(", ")", ":", "\n", "# Check if environment supports image displays", "\n", "    ", "try", ":", "\n", "        ", "assert", "not", "isdocker", "(", ")", ",", "'cv2.imshow() is disabled in Docker environments'", "\n", "cv2", ".", "imshow", "(", "'test'", ",", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "3", ")", ")", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "return", "True", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "f'WARNING: Environment does not support cv2.imshow() or PIL Image.show() image displays\\n{e}'", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_file": [[145, 154], ["pathlib.Path().is_file", "glob.glob", "len", "len", "pathlib.Path"], "function", ["None"], ["", "", "def", "check_file", "(", "file", ")", ":", "\n", "# Search for file if not found", "\n", "    ", "if", "Path", "(", "file", ")", ".", "is_file", "(", ")", "or", "file", "==", "''", ":", "\n", "        ", "return", "file", "\n", "", "else", ":", "\n", "        ", "files", "=", "glob", ".", "glob", "(", "'./**/'", "+", "file", ",", "recursive", "=", "True", ")", "# find file", "\n", "assert", "len", "(", "files", ")", ",", "f'File Not Found: {file}'", "# assert file was found", "\n", "assert", "len", "(", "files", ")", "==", "1", ",", "f\"Multiple files match '{file}', specify exact path: {files}\"", "# assert unique", "\n", "return", "files", "[", "0", "]", "# return file", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_dataset": [[156, 174], ["dict.get", "dict.get", "len", "pathlib.Path().resolve", "all", "print", "len", "print", "print", "Exception", "pathlib.Path", "isinstance", "x.exists", "s.startswith", "s.endswith", "torch.hub.download_url_to_file", "os.system", "os.system", "str", "pathlib.Path", "x.exists"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "", "def", "check_dataset", "(", "dict", ")", ":", "\n", "# Download dataset if not found locally", "\n", "    ", "val", ",", "s", "=", "dict", ".", "get", "(", "'val'", ")", ",", "dict", ".", "get", "(", "'download'", ")", "\n", "if", "val", "and", "len", "(", "val", ")", ":", "\n", "        ", "val", "=", "[", "Path", "(", "x", ")", ".", "resolve", "(", ")", "for", "x", "in", "(", "val", "if", "isinstance", "(", "val", ",", "list", ")", "else", "[", "val", "]", ")", "]", "# val path", "\n", "if", "not", "all", "(", "x", ".", "exists", "(", ")", "for", "x", "in", "val", ")", ":", "\n", "            ", "print", "(", "'\\nWARNING: Dataset not found, nonexistent paths: %s'", "%", "[", "str", "(", "x", ")", "for", "x", "in", "val", "if", "not", "x", ".", "exists", "(", ")", "]", ")", "\n", "if", "s", "and", "len", "(", "s", ")", ":", "# download script", "\n", "                ", "print", "(", "'Downloading %s ...'", "%", "s", ")", "\n", "if", "s", ".", "startswith", "(", "'http'", ")", "and", "s", ".", "endswith", "(", "'.zip'", ")", ":", "# URL", "\n", "                    ", "f", "=", "Path", "(", "s", ")", ".", "name", "# filename", "\n", "torch", ".", "hub", ".", "download_url_to_file", "(", "s", ",", "f", ")", "\n", "r", "=", "os", ".", "system", "(", "'unzip -q %s -d ../ && rm %s'", "%", "(", "f", ",", "f", ")", ")", "# unzip", "\n", "", "else", ":", "# bash script", "\n", "                    ", "r", "=", "os", ".", "system", "(", "s", ")", "\n", "", "print", "(", "'Dataset autodownload %s\\n'", "%", "(", "'success'", "if", "r", "==", "0", "else", "'failure'", ")", ")", "# analyze return value", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Dataset not found.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.make_divisible": [[176, 179], ["math.ceil"], "function", ["None"], ["", "", "", "", "def", "make_divisible", "(", "x", ",", "divisor", ")", ":", "\n", "# Returns x evenly divisible by divisor", "\n", "    ", "return", "math", ".", "ceil", "(", "x", "/", "divisor", ")", "*", "divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.clean_str": [[181, 184], ["re.sub"], "function", ["None"], ["", "def", "clean_str", "(", "s", ")", ":", "\n", "# Cleans a string by replacing special characters with underscore _", "\n", "    ", "return", "re", ".", "sub", "(", "pattern", "=", "\"[|@#!\u00a1\u00b7$\u20ac%&()=?\u00bf^*;:,\u00a8\u00b4><+]\"", ",", "repl", "=", "\"_\"", ",", "string", "=", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.one_cycle": [[186, 189], ["math.cos"], "function", ["None"], ["", "def", "one_cycle", "(", "y1", "=", "0.0", ",", "y2", "=", "1.0", ",", "steps", "=", "100", ")", ":", "\n", "# lambda function for sinusoidal ramp from y1 to y2", "\n", "    ", "return", "lambda", "x", ":", "(", "(", "1", "-", "math", ".", "cos", "(", "x", "*", "math", ".", "pi", "/", "steps", ")", ")", "/", "2", ")", "*", "(", "y2", "-", "y1", ")", "+", "y1", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.colorstr": [[191, 214], ["len"], "function", ["None"], ["", "def", "colorstr", "(", "*", "input", ")", ":", "\n", "# Colors a string https://en.wikipedia.org/wiki/ANSI_escape_code, i.e.  colorstr('blue', 'hello world')", "\n", "    ", "*", "args", ",", "string", "=", "input", "if", "len", "(", "input", ")", ">", "1", "else", "(", "'blue'", ",", "'bold'", ",", "input", "[", "0", "]", ")", "# color arguments, string", "\n", "colors", "=", "{", "'black'", ":", "'\\033[30m'", ",", "# basic colors", "\n", "'red'", ":", "'\\033[31m'", ",", "\n", "'green'", ":", "'\\033[32m'", ",", "\n", "'yellow'", ":", "'\\033[33m'", ",", "\n", "'blue'", ":", "'\\033[34m'", ",", "\n", "'magenta'", ":", "'\\033[35m'", ",", "\n", "'cyan'", ":", "'\\033[36m'", ",", "\n", "'white'", ":", "'\\033[37m'", ",", "\n", "'bright_black'", ":", "'\\033[90m'", ",", "# bright colors", "\n", "'bright_red'", ":", "'\\033[91m'", ",", "\n", "'bright_green'", ":", "'\\033[92m'", ",", "\n", "'bright_yellow'", ":", "'\\033[93m'", ",", "\n", "'bright_blue'", ":", "'\\033[94m'", ",", "\n", "'bright_magenta'", ":", "'\\033[95m'", ",", "\n", "'bright_cyan'", ":", "'\\033[96m'", ",", "\n", "'bright_white'", ":", "'\\033[97m'", ",", "\n", "'end'", ":", "'\\033[0m'", ",", "# misc", "\n", "'bold'", ":", "'\\033[1m'", ",", "\n", "'underline'", ":", "'\\033[4m'", "}", "\n", "return", "''", ".", "join", "(", "colors", "[", "x", "]", "for", "x", "in", "args", ")", "+", "f'{string}'", "+", "colors", "[", "'end'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.labels_to_class_weights": [[216, 233], ["numpy.concatenate", "labels[].astype", "numpy.bincount", "np.bincount.sum", "torch.from_numpy", "torch.Tensor"], "function", ["None"], ["", "def", "labels_to_class_weights", "(", "labels", ",", "nc", "=", "80", ")", ":", "\n", "# Get class weights (inverse frequency) from training labels", "\n", "    ", "if", "labels", "[", "0", "]", "is", "None", ":", "# no labels loaded", "\n", "        ", "return", "torch", ".", "Tensor", "(", ")", "\n", "\n", "", "labels", "=", "np", ".", "concatenate", "(", "labels", ",", "0", ")", "# labels.shape = (866643, 5) for COCO", "\n", "classes", "=", "labels", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "# labels = [class xywh]", "\n", "weights", "=", "np", ".", "bincount", "(", "classes", ",", "minlength", "=", "nc", ")", "# occurrences per class", "\n", "\n", "# Prepend gridpoint count (for uCE training)", "\n", "# gpi = ((320 / 32 * np.array([1, 2, 4])) ** 2 * 3).sum()  # gridpoints per image", "\n", "# weights = np.hstack([gpi * len(labels)  - weights.sum() * 9, weights * 9]) ** 0.5  # prepend gridpoints to start", "\n", "\n", "weights", "[", "weights", "==", "0", "]", "=", "1", "# replace empty bins with 1", "\n", "weights", "=", "1", "/", "weights", "# number of targets per class", "\n", "weights", "/=", "weights", ".", "sum", "(", ")", "# normalize", "\n", "return", "torch", ".", "from_numpy", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.labels_to_image_weights": [[235, 241], ["numpy.ones", "numpy.array", "numpy.bincount", "x[].astype", "class_weights.reshape"], "function", ["None"], ["", "def", "labels_to_image_weights", "(", "labels", ",", "nc", "=", "80", ",", "class_weights", "=", "np", ".", "ones", "(", "80", ")", ")", ":", "\n", "# Produces image weights based on class_weights and image contents", "\n", "    ", "class_counts", "=", "np", ".", "array", "(", "[", "np", ".", "bincount", "(", "x", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", ",", "minlength", "=", "nc", ")", "for", "x", "in", "labels", "]", ")", "\n", "image_weights", "=", "(", "class_weights", ".", "reshape", "(", "1", ",", "nc", ")", "*", "class_counts", ")", ".", "sum", "(", "1", ")", "\n", "# index = random.choices(range(n), weights=image_weights, k=1)  # weight image sample", "\n", "return", "image_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.coco80_to_coco91_class": [[243, 253], ["None"], "function", ["None"], ["", "def", "coco80_to_coco91_class", "(", ")", ":", "# converts 80-index (val2014) to 91-index (paper)", "\n", "# https://tech.amikelive.com/node-718/what-object-categories-labels-are-in-coco-dataset/", "\n", "# a = np.loadtxt('data/coco.names', dtype='str', delimiter='\\n')", "\n", "# b = np.loadtxt('data/coco_paper.names', dtype='str', delimiter='\\n')", "\n", "# x1 = [list(a[i] == b).index(True) + 1 for i in range(80)]  # darknet to coco", "\n", "# x2 = [list(b[i] == a).index(True) if any(b[i] == a) else None for i in range(91)]  # coco to darknet", "\n", "    ", "x", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", ",", "34", ",", "\n", "35", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", ",", "43", ",", "44", ",", "46", ",", "47", ",", "48", ",", "49", ",", "50", ",", "51", ",", "52", ",", "53", ",", "54", ",", "55", ",", "56", ",", "57", ",", "58", ",", "59", ",", "60", ",", "61", ",", "62", ",", "63", ",", "\n", "64", ",", "65", ",", "67", ",", "70", ",", "72", ",", "73", ",", "74", ",", "75", ",", "76", ",", "77", ",", "78", ",", "79", ",", "80", ",", "81", ",", "82", ",", "84", ",", "85", ",", "86", ",", "87", ",", "88", ",", "89", ",", "90", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xyxy2xywh": [[255, 263], ["isinstance", "x.clone", "numpy.copy"], "function", ["None"], ["", "def", "xyxy2xywh", "(", "x", ")", ":", "\n", "# Convert nx4 boxes from [x1, y1, x2, y2] to [x, y, w, h] where xy1=top-left, xy2=bottom-right", "\n", "    ", "y", "=", "x", ".", "clone", "(", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "np", ".", "copy", "(", "x", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", ")", "/", "2", "# x center", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", ")", "/", "2", "# y center", "\n", "y", "[", ":", ",", "2", "]", "=", "x", "[", ":", ",", "2", "]", "-", "x", "[", ":", ",", "0", "]", "# width", "\n", "y", "[", ":", ",", "3", "]", "=", "x", "[", ":", ",", "3", "]", "-", "x", "[", ":", ",", "1", "]", "# height", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xywh2xyxy": [[265, 273], ["isinstance", "x.clone", "numpy.copy"], "function", ["None"], ["", "def", "xywh2xyxy", "(", "x", ")", ":", "\n", "# Convert nx4 boxes from [x, y, w, h] to [x1, y1, x2, y2] where xy1=top-left, xy2=bottom-right", "\n", "    ", "y", "=", "x", ".", "clone", "(", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "np", ".", "copy", "(", "x", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "x", "[", ":", ",", "0", "]", "-", "x", "[", ":", ",", "2", "]", "/", "2", "# top left x", "\n", "y", "[", ":", ",", "1", "]", "=", "x", "[", ":", ",", "1", "]", "-", "x", "[", ":", ",", "3", "]", "/", "2", "# top left y", "\n", "y", "[", ":", ",", "2", "]", "=", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", "/", "2", "# bottom right x", "\n", "y", "[", ":", ",", "3", "]", "=", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", "/", "2", "# bottom right y", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xywhn2xyxy": [[275, 283], ["isinstance", "x.clone", "numpy.copy"], "function", ["None"], ["", "def", "xywhn2xyxy", "(", "x", ",", "w", "=", "640", ",", "h", "=", "640", ",", "padw", "=", "0", ",", "padh", "=", "0", ")", ":", "\n", "# Convert nx4 boxes from [x, y, w, h] normalized to [x1, y1, x2, y2] where xy1=top-left, xy2=bottom-right", "\n", "    ", "y", "=", "x", ".", "clone", "(", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "np", ".", "copy", "(", "x", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "w", "*", "(", "x", "[", ":", ",", "0", "]", "-", "x", "[", ":", ",", "2", "]", "/", "2", ")", "+", "padw", "# top left x", "\n", "y", "[", ":", ",", "1", "]", "=", "h", "*", "(", "x", "[", ":", ",", "1", "]", "-", "x", "[", ":", ",", "3", "]", "/", "2", ")", "+", "padh", "# top left y", "\n", "y", "[", ":", ",", "2", "]", "=", "w", "*", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", "/", "2", ")", "+", "padw", "# bottom right x", "\n", "y", "[", ":", ",", "3", "]", "=", "h", "*", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", "/", "2", ")", "+", "padh", "# bottom right y", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xyn2xy": [[285, 291], ["isinstance", "x.clone", "numpy.copy"], "function", ["None"], ["", "def", "xyn2xy", "(", "x", ",", "w", "=", "640", ",", "h", "=", "640", ",", "padw", "=", "0", ",", "padh", "=", "0", ")", ":", "\n", "# Convert normalized segments into pixel segments, shape (n,2)", "\n", "    ", "y", "=", "x", ".", "clone", "(", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "np", ".", "copy", "(", "x", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "w", "*", "x", "[", ":", ",", "0", "]", "+", "padw", "# top left x", "\n", "y", "[", ":", ",", "1", "]", "=", "h", "*", "x", "[", ":", ",", "1", "]", "+", "padh", "# top left y", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.segment2box": [[293, 299], ["any", "numpy.array", "numpy.zeros", "x.min", "y.min", "x.max", "y.max"], "function", ["None"], ["", "def", "segment2box", "(", "segment", ",", "width", "=", "640", ",", "height", "=", "640", ")", ":", "\n", "# Convert 1 segment label to 1 box label, applying inside-image constraint, i.e. (xy1, xy2, ...) to (xyxy)", "\n", "    ", "x", ",", "y", "=", "segment", ".", "T", "# segment xy", "\n", "inside", "=", "(", "x", ">=", "0", ")", "&", "(", "y", ">=", "0", ")", "&", "(", "x", "<=", "width", ")", "&", "(", "y", "<=", "height", ")", "\n", "x", ",", "y", ",", "=", "x", "[", "inside", "]", ",", "y", "[", "inside", "]", "\n", "return", "np", ".", "array", "(", "[", "x", ".", "min", "(", ")", ",", "y", ".", "min", "(", ")", ",", "x", ".", "max", "(", ")", ",", "y", ".", "max", "(", ")", "]", ")", "if", "any", "(", "x", ")", "else", "np", ".", "zeros", "(", "(", "1", ",", "4", ")", ")", "# xyxy", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.segments2boxes": [[301, 308], ["general.xyxy2xywh", "boxes.append", "numpy.array", "x.min", "y.min", "x.max", "y.max"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xyxy2xywh"], ["", "def", "segments2boxes", "(", "segments", ")", ":", "\n", "# Convert segment labels to box labels, i.e. (cls, xy1, xy2, ...) to (cls, xywh)", "\n", "    ", "boxes", "=", "[", "]", "\n", "for", "s", "in", "segments", ":", "\n", "        ", "x", ",", "y", "=", "s", ".", "T", "# segment xy", "\n", "boxes", ".", "append", "(", "[", "x", ".", "min", "(", ")", ",", "y", ".", "min", "(", ")", ",", "x", ".", "max", "(", ")", ",", "y", ".", "max", "(", ")", "]", ")", "# cls, xyxy", "\n", "", "return", "xyxy2xywh", "(", "np", ".", "array", "(", "boxes", ")", ")", "# cls, xywh", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.resample_segments": [[310, 317], ["enumerate", "numpy.linspace", "numpy.arange", "len", "numpy.concatenate().reshape", "len", "numpy.concatenate", "numpy.interp", "range"], "function", ["None"], ["", "def", "resample_segments", "(", "segments", ",", "n", "=", "1000", ")", ":", "\n", "# Up-sample an (n,2) segment", "\n", "    ", "for", "i", ",", "s", "in", "enumerate", "(", "segments", ")", ":", "\n", "        ", "x", "=", "np", ".", "linspace", "(", "0", ",", "len", "(", "s", ")", "-", "1", ",", "n", ")", "\n", "xp", "=", "np", ".", "arange", "(", "len", "(", "s", ")", ")", "\n", "segments", "[", "i", "]", "=", "np", ".", "concatenate", "(", "[", "np", ".", "interp", "(", "x", ",", "xp", ",", "s", "[", ":", ",", "i", "]", ")", "for", "i", "in", "range", "(", "2", ")", "]", ")", ".", "reshape", "(", "2", ",", "-", "1", ")", ".", "T", "# segment xy", "\n", "", "return", "segments", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.scale_coords": [[319, 333], ["general.clip_coords", "min"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.clip_coords"], ["", "def", "scale_coords", "(", "img1_shape", ",", "coords", ",", "img0_shape", ",", "ratio_pad", "=", "None", ")", ":", "\n", "# Rescale coords (xyxy) from img1_shape to img0_shape", "\n", "    ", "if", "ratio_pad", "is", "None", ":", "# calculate from img0_shape", "\n", "        ", "gain", "=", "min", "(", "img1_shape", "[", "0", "]", "/", "img0_shape", "[", "0", "]", ",", "img1_shape", "[", "1", "]", "/", "img0_shape", "[", "1", "]", ")", "# gain  = old / new", "\n", "pad", "=", "(", "img1_shape", "[", "1", "]", "-", "img0_shape", "[", "1", "]", "*", "gain", ")", "/", "2", ",", "(", "img1_shape", "[", "0", "]", "-", "img0_shape", "[", "0", "]", "*", "gain", ")", "/", "2", "# wh padding", "\n", "", "else", ":", "\n", "        ", "gain", "=", "ratio_pad", "[", "0", "]", "[", "0", "]", "\n", "pad", "=", "ratio_pad", "[", "1", "]", "\n", "\n", "", "coords", "[", ":", ",", "[", "0", ",", "2", "]", "]", "-=", "pad", "[", "0", "]", "# x padding", "\n", "coords", "[", ":", ",", "[", "1", ",", "3", "]", "]", "-=", "pad", "[", "1", "]", "# y padding", "\n", "coords", "[", ":", ",", ":", "4", "]", "/=", "gain", "\n", "clip_coords", "(", "coords", ",", "img0_shape", ")", "\n", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.clip_coords": [[335, 341], ["boxes[].clamp_", "boxes[].clamp_", "boxes[].clamp_", "boxes[].clamp_"], "function", ["None"], ["", "def", "clip_coords", "(", "boxes", ",", "img_shape", ")", ":", "\n", "# Clip bounding xyxy bounding boxes to image shape (height, width)", "\n", "    ", "boxes", "[", ":", ",", "0", "]", ".", "clamp_", "(", "0", ",", "img_shape", "[", "1", "]", ")", "# x1", "\n", "boxes", "[", ":", ",", "1", "]", ".", "clamp_", "(", "0", ",", "img_shape", "[", "0", "]", ")", "# y1", "\n", "boxes", "[", ":", ",", "2", "]", ".", "clamp_", "(", "0", ",", "img_shape", "[", "1", "]", ")", "# x2", "\n", "boxes", "[", ":", ",", "3", "]", ".", "clamp_", "(", "0", ",", "img_shape", "[", "0", "]", ")", "# y2", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.bbox_iou": [[343, 386], ["torch.max", "torch.min", "torch.max", "torch.min", "torch.min", "torch.max", "torch.min", "torch.max", "torch.pow", "torch.no_grad", "torch.atan", "torch.atan"], "function", ["None"], ["", "def", "bbox_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "True", ",", "GIoU", "=", "False", ",", "DIoU", "=", "False", ",", "CIoU", "=", "False", ",", "eps", "=", "1e-7", ")", ":", "\n", "# Returns the IoU of box1 to box2. box1 is 4, box2 is nx4", "\n", "    ", "box2", "=", "box2", ".", "T", "\n", "\n", "# Get the coordinates of bounding boxes", "\n", "if", "x1y1x2y2", ":", "# x1, y1, x2, y2 = box1", "\n", "        ", "b1_x1", ",", "b1_y1", ",", "b1_x2", ",", "b1_y2", "=", "box1", "[", "0", "]", ",", "box1", "[", "1", "]", ",", "box1", "[", "2", "]", ",", "box1", "[", "3", "]", "\n", "b2_x1", ",", "b2_y1", ",", "b2_x2", ",", "b2_y2", "=", "box2", "[", "0", "]", ",", "box2", "[", "1", "]", ",", "box2", "[", "2", "]", ",", "box2", "[", "3", "]", "\n", "", "else", ":", "# transform from xywh to xyxy", "\n", "        ", "b1_x1", ",", "b1_x2", "=", "box1", "[", "0", "]", "-", "box1", "[", "2", "]", "/", "2", ",", "box1", "[", "0", "]", "+", "box1", "[", "2", "]", "/", "2", "\n", "b1_y1", ",", "b1_y2", "=", "box1", "[", "1", "]", "-", "box1", "[", "3", "]", "/", "2", ",", "box1", "[", "1", "]", "+", "box1", "[", "3", "]", "/", "2", "\n", "b2_x1", ",", "b2_x2", "=", "box2", "[", "0", "]", "-", "box2", "[", "2", "]", "/", "2", ",", "box2", "[", "0", "]", "+", "box2", "[", "2", "]", "/", "2", "\n", "b2_y1", ",", "b2_y2", "=", "box2", "[", "1", "]", "-", "box2", "[", "3", "]", "/", "2", ",", "box2", "[", "1", "]", "+", "box2", "[", "3", "]", "/", "2", "\n", "\n", "# Intersection area", "\n", "", "inter", "=", "(", "torch", ".", "min", "(", "b1_x2", ",", "b2_x2", ")", "-", "torch", ".", "max", "(", "b1_x1", ",", "b2_x1", ")", ")", ".", "clamp", "(", "0", ")", "*", "(", "torch", ".", "min", "(", "b1_y2", ",", "b2_y2", ")", "-", "torch", ".", "max", "(", "b1_y1", ",", "b2_y1", ")", ")", ".", "clamp", "(", "0", ")", "\n", "\n", "# Union Area", "\n", "w1", ",", "h1", "=", "b1_x2", "-", "b1_x1", ",", "b1_y2", "-", "b1_y1", "+", "eps", "\n", "w2", ",", "h2", "=", "b2_x2", "-", "b2_x1", ",", "b2_y2", "-", "b2_y1", "+", "eps", "\n", "union", "=", "w1", "*", "h1", "+", "w2", "*", "h2", "-", "inter", "+", "eps", "\n", "\n", "iou", "=", "inter", "/", "union", "\n", "if", "GIoU", "or", "DIoU", "or", "CIoU", ":", "\n", "        ", "cw", "=", "torch", ".", "max", "(", "b1_x2", ",", "b2_x2", ")", "-", "torch", ".", "min", "(", "b1_x1", ",", "b2_x1", ")", "# convex (smallest enclosing box) width", "\n", "ch", "=", "torch", ".", "max", "(", "b1_y2", ",", "b2_y2", ")", "-", "torch", ".", "min", "(", "b1_y1", ",", "b2_y1", ")", "# convex height", "\n", "if", "CIoU", "or", "DIoU", ":", "# Distance or Complete IoU https://arxiv.org/abs/1911.08287v1", "\n", "            ", "c2", "=", "cw", "**", "2", "+", "ch", "**", "2", "+", "eps", "# convex diagonal squared", "\n", "rho2", "=", "(", "(", "b2_x1", "+", "b2_x2", "-", "b1_x1", "-", "b1_x2", ")", "**", "2", "+", "\n", "(", "b2_y1", "+", "b2_y2", "-", "b1_y1", "-", "b1_y2", ")", "**", "2", ")", "/", "4", "# center distance squared", "\n", "if", "DIoU", ":", "\n", "                ", "return", "iou", "-", "rho2", "/", "c2", "# DIoU", "\n", "", "elif", "CIoU", ":", "# https://github.com/Zzh-tju/DIoU-SSD-pytorch/blob/master/utils/box/box_utils.py#L47", "\n", "                ", "v", "=", "(", "4", "/", "math", ".", "pi", "**", "2", ")", "*", "torch", ".", "pow", "(", "torch", ".", "atan", "(", "w2", "/", "h2", ")", "-", "torch", ".", "atan", "(", "w1", "/", "h1", ")", ",", "2", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "alpha", "=", "v", "/", "(", "v", "-", "iou", "+", "(", "1", "+", "eps", ")", ")", "\n", "", "return", "iou", "-", "(", "rho2", "/", "c2", "+", "v", "*", "alpha", ")", "# CIoU", "\n", "", "", "else", ":", "# GIoU https://arxiv.org/pdf/1902.09630.pdf", "\n", "            ", "c_area", "=", "cw", "*", "ch", "+", "eps", "# convex area", "\n", "return", "iou", "-", "(", "c_area", "-", "union", ")", "/", "c_area", "# GIoU", "\n", "", "", "else", ":", "\n", "        ", "return", "iou", "# IoU", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.box_iou": [[388, 411], ["general.box_iou.box_area"], "function", ["None"], ["", "", "def", "box_iou", "(", "box1", ",", "box2", ")", ":", "\n", "# https://github.com/pytorch/vision/blob/master/torchvision/ops/boxes.py", "\n", "    ", "\"\"\"\n    Return intersection-over-union (Jaccard index) of boxes.\n    Both sets of boxes are expected to be in (x1, y1, x2, y2) format.\n    Arguments:\n        box1 (Tensor[N, 4])\n        box2 (Tensor[M, 4])\n    Returns:\n        iou (Tensor[N, M]): the NxM matrix containing the pairwise\n            IoU values for every element in boxes1 and boxes2\n    \"\"\"", "\n", "\n", "def", "box_area", "(", "box", ")", ":", "\n", "# box = 4xn", "\n", "        ", "return", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", ")", "*", "(", "box", "[", "3", "]", "-", "box", "[", "1", "]", ")", "\n", "\n", "", "area1", "=", "box_area", "(", "box1", ".", "T", ")", "\n", "area2", "=", "box_area", "(", "box2", ".", "T", ")", "\n", "\n", "# inter(N,M) = (rb(N,M,2) - lt(N,M,2)).clamp(0).prod(2)", "\n", "inter", "=", "(", "torch", ".", "min", "(", "box1", "[", ":", ",", "None", ",", "2", ":", "]", ",", "box2", "[", ":", ",", "2", ":", "]", ")", "-", "torch", ".", "max", "(", "box1", "[", ":", ",", "None", ",", ":", "2", "]", ",", "box2", "[", ":", ",", ":", "2", "]", ")", ")", ".", "clamp", "(", "0", ")", ".", "prod", "(", "2", ")", "\n", "return", "inter", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", ")", "# iou = inter / (area1 + area2 - inter)", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.wh_iou": [[413, 419], ["torch.min().prod", "torch.min", "wh1.prod", "wh2.prod"], "function", ["None"], ["", "def", "wh_iou", "(", "wh1", ",", "wh2", ")", ":", "\n", "# Returns the nxm IoU matrix. wh1 is nx2, wh2 is mx2", "\n", "    ", "wh1", "=", "wh1", "[", ":", ",", "None", "]", "# [N,1,2]", "\n", "wh2", "=", "wh2", "[", "None", "]", "# [1,M,2]", "\n", "inter", "=", "torch", ".", "min", "(", "wh1", ",", "wh2", ")", ".", "prod", "(", "2", ")", "# [N,M]", "\n", "return", "inter", "/", "(", "wh1", ".", "prod", "(", "2", ")", "+", "wh2", ".", "prod", "(", "2", ")", "-", "inter", ")", "# iou = inter / (area1 + area2 - inter)", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.non_max_suppression": [[421, 510], ["time.time", "enumerate", "general.xywh2xyxy", "torchvision.ops.nms", "torch.zeros", "len", "torch.zeros", "torch.cat", "torch.cat", "x[].max", "print", "torch.cat", "general.box_iou", "torch.mm().float", "weights.sum", "time.time", "len", "j[].float", "range", "j.float", "conf.view", "torch.mm", "len", "l[].long", "x[].argsort", "iou.sum", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xywh2xyxy", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.nms", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.box_iou"], ["", "def", "non_max_suppression", "(", "prediction", ",", "conf_thres", "=", "0.25", ",", "iou_thres", "=", "0.45", ",", "classes", "=", "None", ",", "agnostic", "=", "False", ",", "multi_label", "=", "False", ",", "\n", "labels", "=", "(", ")", ")", ":", "\n", "    ", "\"\"\"Runs Non-Maximum Suppression (NMS) on inference results\n\n    Returns:\n         list of detections, on (n,6) tensor per image [xyxy, conf, cls]\n    \"\"\"", "\n", "\n", "nc", "=", "prediction", ".", "shape", "[", "2", "]", "-", "5", "# number of classes", "\n", "xc", "=", "prediction", "[", "...", ",", "4", "]", ">", "conf_thres", "# candidates", "\n", "\n", "# Settings", "\n", "min_wh", ",", "max_wh", "=", "2", ",", "4096", "# (pixels) minimum and maximum box width and height", "\n", "max_det", "=", "300", "# maximum number of detections per image", "\n", "max_nms", "=", "30000", "# maximum number of boxes into torchvision.ops.nms()", "\n", "time_limit", "=", "10.0", "# seconds to quit after", "\n", "redundant", "=", "True", "# require redundant detections", "\n", "multi_label", "&=", "nc", ">", "1", "# multiple labels per box (adds 0.5ms/img)", "\n", "merge", "=", "False", "# use merge-NMS", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "output", "=", "[", "torch", ".", "zeros", "(", "(", "0", ",", "6", ")", ",", "device", "=", "prediction", ".", "device", ")", "]", "*", "prediction", ".", "shape", "[", "0", "]", "\n", "for", "xi", ",", "x", "in", "enumerate", "(", "prediction", ")", ":", "# image index, image inference", "\n", "# Apply constraints", "\n", "# x[((x[..., 2:4] < min_wh) | (x[..., 2:4] > max_wh)).any(1), 4] = 0  # width-height", "\n", "        ", "x", "=", "x", "[", "xc", "[", "xi", "]", "]", "# confidence", "\n", "\n", "# Cat apriori labels if autolabelling", "\n", "if", "labels", "and", "len", "(", "labels", "[", "xi", "]", ")", ":", "\n", "            ", "l", "=", "labels", "[", "xi", "]", "\n", "v", "=", "torch", ".", "zeros", "(", "(", "len", "(", "l", ")", ",", "nc", "+", "5", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "v", "[", ":", ",", ":", "4", "]", "=", "l", "[", ":", ",", "1", ":", "5", "]", "# box", "\n", "v", "[", ":", ",", "4", "]", "=", "1.0", "# conf", "\n", "v", "[", "range", "(", "len", "(", "l", ")", ")", ",", "l", "[", ":", ",", "0", "]", ".", "long", "(", ")", "+", "5", "]", "=", "1.0", "# cls", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "v", ")", ",", "0", ")", "\n", "\n", "# If none remain process next image", "\n", "", "if", "not", "x", ".", "shape", "[", "0", "]", ":", "\n", "            ", "continue", "\n", "\n", "# Compute conf", "\n", "", "x", "[", ":", ",", "5", ":", "]", "*=", "x", "[", ":", ",", "4", ":", "5", "]", "# conf = obj_conf * cls_conf", "\n", "\n", "# Box (center x, center y, width, height) to (x1, y1, x2, y2)", "\n", "box", "=", "xywh2xyxy", "(", "x", "[", ":", ",", ":", "4", "]", ")", "\n", "\n", "# Detections matrix nx6 (xyxy, conf, cls)", "\n", "if", "multi_label", ":", "\n", "            ", "i", ",", "j", "=", "(", "x", "[", ":", ",", "5", ":", "]", ">", "conf_thres", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", ".", "T", "\n", "x", "=", "torch", ".", "cat", "(", "(", "box", "[", "i", "]", ",", "x", "[", "i", ",", "j", "+", "5", ",", "None", "]", ",", "j", "[", ":", ",", "None", "]", ".", "float", "(", ")", ")", ",", "1", ")", "\n", "", "else", ":", "# best class only", "\n", "            ", "conf", ",", "j", "=", "x", "[", ":", ",", "5", ":", "]", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "box", ",", "conf", ",", "j", ".", "float", "(", ")", ")", ",", "1", ")", "[", "conf", ".", "view", "(", "-", "1", ")", ">", "conf_thres", "]", "\n", "\n", "# Filter by class", "\n", "", "if", "classes", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "[", "(", "x", "[", ":", ",", "5", ":", "6", "]", "==", "torch", ".", "tensor", "(", "classes", ",", "device", "=", "x", ".", "device", ")", ")", ".", "any", "(", "1", ")", "]", "\n", "\n", "# Apply finite constraint", "\n", "# if not torch.isfinite(x).all():", "\n", "#     x = x[torch.isfinite(x).all(1)]", "\n", "\n", "# Check shape", "\n", "", "n", "=", "x", ".", "shape", "[", "0", "]", "# number of boxes", "\n", "if", "not", "n", ":", "# no boxes", "\n", "            ", "continue", "\n", "", "elif", "n", ">", "max_nms", ":", "# excess boxes", "\n", "            ", "x", "=", "x", "[", "x", "[", ":", ",", "4", "]", ".", "argsort", "(", "descending", "=", "True", ")", "[", ":", "max_nms", "]", "]", "# sort by confidence", "\n", "\n", "# Batched NMS", "\n", "", "c", "=", "x", "[", ":", ",", "5", ":", "6", "]", "*", "(", "0", "if", "agnostic", "else", "max_wh", ")", "# classes", "\n", "boxes", ",", "scores", "=", "x", "[", ":", ",", ":", "4", "]", "+", "c", ",", "x", "[", ":", ",", "4", "]", "# boxes (offset by class), scores", "\n", "i", "=", "torchvision", ".", "ops", ".", "nms", "(", "boxes", ",", "scores", ",", "iou_thres", ")", "# NMS", "\n", "if", "i", ".", "shape", "[", "0", "]", ">", "max_det", ":", "# limit detections", "\n", "            ", "i", "=", "i", "[", ":", "max_det", "]", "\n", "", "if", "merge", "and", "(", "1", "<", "n", "<", "3E3", ")", ":", "# Merge NMS (boxes merged using weighted mean)", "\n", "# update boxes as boxes(i,4) = weights(i,n) * boxes(n,4)", "\n", "            ", "iou", "=", "box_iou", "(", "boxes", "[", "i", "]", ",", "boxes", ")", ">", "iou_thres", "# iou matrix", "\n", "weights", "=", "iou", "*", "scores", "[", "None", "]", "# box weights", "\n", "x", "[", "i", ",", ":", "4", "]", "=", "torch", ".", "mm", "(", "weights", ",", "x", "[", ":", ",", ":", "4", "]", ")", ".", "float", "(", ")", "/", "weights", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "# merged boxes", "\n", "if", "redundant", ":", "\n", "                ", "i", "=", "i", "[", "iou", ".", "sum", "(", "1", ")", ">", "1", "]", "# require redundancy", "\n", "\n", "", "", "output", "[", "xi", "]", "=", "x", "[", "i", "]", "\n", "if", "(", "time", ".", "time", "(", ")", "-", "t", ")", ">", "time_limit", ":", "\n", "            ", "print", "(", "f'WARNING: NMS time limit {time_limit}s exceeded'", ")", "\n", "break", "# time limit exceeded", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.strip_optimizer": [[512, 526], ["torch.load", "torch.load.get", "x[].half", "x[].parameters", "torch.save", "print", "os.path.getsize", "torch.device"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "def", "strip_optimizer", "(", "f", "=", "'best.pt'", ",", "s", "=", "''", ")", ":", "# from utils.general import *; strip_optimizer()", "\n", "# Strip optimizer from 'f' to finalize training, optionally save as 's'", "\n", "    ", "x", "=", "torch", ".", "load", "(", "f", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "if", "x", ".", "get", "(", "'ema'", ")", ":", "\n", "        ", "x", "[", "'model'", "]", "=", "x", "[", "'ema'", "]", "# replace model with ema", "\n", "", "for", "k", "in", "'optimizer'", ",", "'training_results'", ",", "'wandb_id'", ",", "'ema'", ",", "'updates'", ":", "# keys", "\n", "        ", "x", "[", "k", "]", "=", "None", "\n", "", "x", "[", "'epoch'", "]", "=", "-", "1", "\n", "x", "[", "'model'", "]", ".", "half", "(", ")", "# to FP16", "\n", "for", "p", "in", "x", "[", "'model'", "]", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "torch", ".", "save", "(", "x", ",", "s", "or", "f", ")", "\n", "mb", "=", "os", ".", "path", ".", "getsize", "(", "s", "or", "f", ")", "/", "1E6", "# filesize", "\n", "print", "(", "f\"Optimizer stripped from {f},{(' saved as %s,' % s) if s else ''} {mb:.1f}MB\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.print_mutation": [[528, 557], ["print", "numpy.unique", "numpy.savetxt", "enumerate", "tuple", "tuple", "open", "f.write", "numpy.loadtxt", "hyp.keys", "float", "open", "tuple", "f.write", "yaml.dump", "os.system", "len", "hyp.keys", "len", "hyp.values", "len", "utils.google_utils.gsutil_getsize", "os.system", "numpy.argsort", "os.path.exists", "os.path.getsize", "len", "utils.metrics.fitness", "len"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.google_utils.gsutil_getsize", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.metrics.fitness"], ["", "def", "print_mutation", "(", "hyp", ",", "results", ",", "yaml_file", "=", "'hyp_evolved.yaml'", ",", "bucket", "=", "''", ")", ":", "\n", "# Print mutation results to evolve.txt (for use with train.py --evolve)", "\n", "    ", "a", "=", "'%10s'", "*", "len", "(", "hyp", ")", "%", "tuple", "(", "hyp", ".", "keys", "(", ")", ")", "# hyperparam keys", "\n", "b", "=", "'%10.3g'", "*", "len", "(", "hyp", ")", "%", "tuple", "(", "hyp", ".", "values", "(", ")", ")", "# hyperparam values", "\n", "c", "=", "'%10.4g'", "*", "len", "(", "results", ")", "%", "results", "# results (P, R, mAP@0.5, mAP@0.5:0.95, val_losses x 3)", "\n", "print", "(", "'\\n%s\\n%s\\nEvolved fitness: %s\\n'", "%", "(", "a", ",", "b", ",", "c", ")", ")", "\n", "\n", "if", "bucket", ":", "\n", "        ", "url", "=", "'gs://%s/evolve.txt'", "%", "bucket", "\n", "if", "gsutil_getsize", "(", "url", ")", ">", "(", "os", ".", "path", ".", "getsize", "(", "'evolve.txt'", ")", "if", "os", ".", "path", ".", "exists", "(", "'evolve.txt'", ")", "else", "0", ")", ":", "\n", "            ", "os", ".", "system", "(", "'gsutil cp %s .'", "%", "url", ")", "# download evolve.txt if larger than local", "\n", "\n", "", "", "with", "open", "(", "'evolve.txt'", ",", "'a'", ")", "as", "f", ":", "# append result", "\n", "        ", "f", ".", "write", "(", "c", "+", "b", "+", "'\\n'", ")", "\n", "", "x", "=", "np", ".", "unique", "(", "np", ".", "loadtxt", "(", "'evolve.txt'", ",", "ndmin", "=", "2", ")", ",", "axis", "=", "0", ")", "# load unique rows", "\n", "x", "=", "x", "[", "np", ".", "argsort", "(", "-", "fitness", "(", "x", ")", ")", "]", "# sort", "\n", "np", ".", "savetxt", "(", "'evolve.txt'", ",", "x", ",", "'%10.3g'", ")", "# save sort by fitness", "\n", "\n", "# Save yaml", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "hyp", ".", "keys", "(", ")", ")", ":", "\n", "        ", "hyp", "[", "k", "]", "=", "float", "(", "x", "[", "0", ",", "i", "+", "7", "]", ")", "\n", "", "with", "open", "(", "yaml_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "results", "=", "tuple", "(", "x", "[", "0", ",", ":", "7", "]", ")", "\n", "c", "=", "'%10.4g'", "*", "len", "(", "results", ")", "%", "results", "# results (P, R, mAP@0.5, mAP@0.5:0.95, val_losses x 3)", "\n", "f", ".", "write", "(", "'# Hyperparameter Evolution Results\\n# Generations: %g\\n# Metrics: '", "%", "len", "(", "x", ")", "+", "c", "+", "'\\n\\n'", ")", "\n", "yaml", ".", "dump", "(", "hyp", ",", "f", ",", "sort_keys", "=", "False", ")", "\n", "\n", "", "if", "bucket", ":", "\n", "        ", "os", ".", "system", "(", "'gsutil cp evolve.txt %s gs://%s'", "%", "(", "yaml_file", ",", "bucket", ")", ")", "# upload", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.apply_classifier": [[559, 592], ["enumerate", "isinstance", "len", "d.clone.clone", "general.xyxy2xywh", "[].unsqueeze", "xywh2xyxy().long", "general.scale_coords", "d[].long", "enumerate", "model().argmax", "cv2.resize", "im[].transpose", "numpy.ascontiguousarray", "ims.append", "general.xywh2xyxy", "model", "b[].max", "torch.Tensor().to", "int", "int", "int", "int", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xyxy2xywh", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.scale_coords", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xywh2xyxy"], ["", "", "def", "apply_classifier", "(", "x", ",", "model", ",", "img", ",", "im0", ")", ":", "\n", "# applies a second stage classifier to yolo outputs", "\n", "    ", "im0", "=", "[", "im0", "]", "if", "isinstance", "(", "im0", ",", "np", ".", "ndarray", ")", "else", "im0", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "x", ")", ":", "# per image", "\n", "        ", "if", "d", "is", "not", "None", "and", "len", "(", "d", ")", ":", "\n", "            ", "d", "=", "d", ".", "clone", "(", ")", "\n", "\n", "# Reshape and pad cutouts", "\n", "b", "=", "xyxy2xywh", "(", "d", "[", ":", ",", ":", "4", "]", ")", "# boxes", "\n", "b", "[", ":", ",", "2", ":", "]", "=", "b", "[", ":", ",", "2", ":", "]", ".", "max", "(", "1", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", "# rectangle to square", "\n", "b", "[", ":", ",", "2", ":", "]", "=", "b", "[", ":", ",", "2", ":", "]", "*", "1.3", "+", "30", "# pad", "\n", "d", "[", ":", ",", ":", "4", "]", "=", "xywh2xyxy", "(", "b", ")", ".", "long", "(", ")", "\n", "\n", "# Rescale boxes from img_size to im0 size", "\n", "scale_coords", "(", "img", ".", "shape", "[", "2", ":", "]", ",", "d", "[", ":", ",", ":", "4", "]", ",", "im0", "[", "i", "]", ".", "shape", ")", "\n", "\n", "# Classes", "\n", "pred_cls1", "=", "d", "[", ":", ",", "5", "]", ".", "long", "(", ")", "\n", "ims", "=", "[", "]", "\n", "for", "j", ",", "a", "in", "enumerate", "(", "d", ")", ":", "# per item", "\n", "                ", "cutout", "=", "im0", "[", "i", "]", "[", "int", "(", "a", "[", "1", "]", ")", ":", "int", "(", "a", "[", "3", "]", ")", ",", "int", "(", "a", "[", "0", "]", ")", ":", "int", "(", "a", "[", "2", "]", ")", "]", "\n", "im", "=", "cv2", ".", "resize", "(", "cutout", ",", "(", "224", ",", "224", ")", ")", "# BGR", "\n", "# cv2.imwrite('test%i.jpg' % j, cutout)", "\n", "\n", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# BGR to RGB, to 3x416x416", "\n", "im", "=", "np", ".", "ascontiguousarray", "(", "im", ",", "dtype", "=", "np", ".", "float32", ")", "# uint8 to float32", "\n", "im", "/=", "255.0", "# 0 - 255 to 0.0 - 1.0", "\n", "ims", ".", "append", "(", "im", ")", "\n", "\n", "", "pred_cls2", "=", "model", "(", "torch", ".", "Tensor", "(", "ims", ")", ".", "to", "(", "d", ".", "device", ")", ")", ".", "argmax", "(", "1", ")", "# classifier prediction", "\n", "x", "[", "i", "]", "=", "x", "[", "i", "]", "[", "pred_cls1", "==", "pred_cls2", "]", "# retain matching class detections", "\n", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.increment_path": [[594, 605], ["pathlib.Path", "str", "glob.glob", "pathlib.Path.exists", "pathlib.Path.exists", "re.search", "int", "max", "m.groups"], "function", ["None"], ["", "def", "increment_path", "(", "path", ",", "exist_ok", "=", "True", ",", "sep", "=", "''", ")", ":", "\n", "# Increment path, i.e. runs/exp --> runs/exp{sep}0, runs/exp{sep}1 etc.", "\n", "    ", "path", "=", "Path", "(", "path", ")", "# os-agnostic", "\n", "if", "(", "path", ".", "exists", "(", ")", "and", "exist_ok", ")", "or", "(", "not", "path", ".", "exists", "(", ")", ")", ":", "\n", "        ", "return", "str", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "dirs", "=", "glob", ".", "glob", "(", "f\"{path}{sep}*\"", ")", "# similar paths", "\n", "matches", "=", "[", "re", ".", "search", "(", "rf\"%s{sep}(\\d+)\"", "%", "path", ".", "stem", ",", "d", ")", "for", "d", "in", "dirs", "]", "\n", "i", "=", "[", "int", "(", "m", ".", "groups", "(", ")", "[", "0", "]", ")", "for", "m", "in", "matches", "if", "m", "]", "# indices", "\n", "n", "=", "max", "(", "i", ")", "+", "1", "if", "i", "else", "2", "# increment number", "\n", "return", "f\"{path}{sep}{n}\"", "# update path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.InfiniteDataLoader.__init__": [[94, 98], ["super().__init__", "object.__setattr__", "super().__iter__", "datasets._RepeatSampler"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadStreams.__iter__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "object", ".", "__setattr__", "(", "self", ",", "'batch_sampler'", ",", "_RepeatSampler", "(", "self", ".", "batch_sampler", ")", ")", "\n", "self", ".", "iterator", "=", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.InfiniteDataLoader.__len__": [[99, 101], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "batch_sampler", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.InfiniteDataLoader.__iter__": [[102, 105], ["range", "len", "next"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "next", "(", "self", ".", "iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets._RepeatSampler.__init__": [[114, 116], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ")", ":", "\n", "        ", "self", ".", "sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets._RepeatSampler.__iter__": [[117, 120], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "yield", "from", "iter", "(", "self", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImages.__init__": [[123, 149], ["str", "any", "pathlib.Path().absolute", "sorted", "os.path.isdir", "len", "len", "datasets.LoadImages.new_video", "glob.glob", "sorted", "os.path.isfile", "pathlib.Path", "glob.glob", "Exception", "[].lower", "[].lower", "os.path.join", "x.split", "x.split"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImages.new_video"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "img_size", "=", "640", ",", "stride", "=", "32", ")", ":", "\n", "        ", "p", "=", "str", "(", "Path", "(", "path", ")", ".", "absolute", "(", ")", ")", "# os-agnostic absolute path", "\n", "if", "'*'", "in", "p", ":", "\n", "            ", "files", "=", "sorted", "(", "glob", ".", "glob", "(", "p", ",", "recursive", "=", "True", ")", ")", "# glob", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "p", ")", ":", "\n", "            ", "files", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "p", ",", "'*.*'", ")", ")", ")", "# dir", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "p", ")", ":", "\n", "            ", "files", "=", "[", "p", "]", "# files", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'ERROR: {p} does not exist'", ")", "\n", "\n", "", "images", "=", "[", "x", "for", "x", "in", "files", "if", "x", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ".", "lower", "(", ")", "in", "img_formats", "]", "\n", "videos", "=", "[", "x", "for", "x", "in", "files", "if", "x", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ".", "lower", "(", ")", "in", "vid_formats", "]", "\n", "ni", ",", "nv", "=", "len", "(", "images", ")", ",", "len", "(", "videos", ")", "\n", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "files", "=", "images", "+", "videos", "\n", "self", ".", "nf", "=", "ni", "+", "nv", "# number of files", "\n", "self", ".", "video_flag", "=", "[", "False", "]", "*", "ni", "+", "[", "True", "]", "*", "nv", "\n", "self", ".", "mode", "=", "'image'", "\n", "if", "any", "(", "videos", ")", ":", "\n", "            ", "self", ".", "new_video", "(", "videos", "[", "0", "]", ")", "# new video", "\n", "", "else", ":", "\n", "            ", "self", ".", "cap", "=", "None", "\n", "", "assert", "self", ".", "nf", ">", "0", ",", "f'No images or videos found in {p}. '", "f'Supported formats are:\\nimages: {img_formats}\\nvideos: {vid_formats}'", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImages.__iter__": [[151, 154], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImages.__next__": [[155, 192], ["img[].transpose", "numpy.ascontiguousarray", "datasets.LoadImages.cap.read", "print", "cv2.imread", "print", "datasets.letterbox", "datasets.LoadImages.cap.release", "datasets.LoadImages.new_video", "datasets.LoadImages.cap.read"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.letterbox", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImages.new_video"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "count", "==", "self", ".", "nf", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "path", "=", "self", ".", "files", "[", "self", ".", "count", "]", "\n", "\n", "if", "self", ".", "video_flag", "[", "self", ".", "count", "]", ":", "\n", "# Read video", "\n", "            ", "self", ".", "mode", "=", "'video'", "\n", "ret_val", ",", "img0", "=", "self", ".", "cap", ".", "read", "(", ")", "\n", "if", "not", "ret_val", ":", "\n", "                ", "self", ".", "count", "+=", "1", "\n", "self", ".", "cap", ".", "release", "(", ")", "\n", "if", "self", ".", "count", "==", "self", ".", "nf", ":", "# last video", "\n", "                    ", "raise", "StopIteration", "\n", "", "else", ":", "\n", "                    ", "path", "=", "self", ".", "files", "[", "self", ".", "count", "]", "\n", "self", ".", "new_video", "(", "path", ")", "\n", "ret_val", ",", "img0", "=", "self", ".", "cap", ".", "read", "(", ")", "\n", "\n", "", "", "self", ".", "frame", "+=", "1", "\n", "print", "(", "f'video {self.count + 1}/{self.nf} ({self.frame}/{self.nframes}) {path}: '", ",", "end", "=", "''", ")", "\n", "\n", "", "else", ":", "\n", "# Read image", "\n", "            ", "self", ".", "count", "+=", "1", "\n", "img0", "=", "cv2", ".", "imread", "(", "path", ")", "# BGR", "\n", "assert", "img0", "is", "not", "None", ",", "'Image Not Found '", "+", "path", "\n", "print", "(", "f'image {self.count}/{self.nf} {path}: '", ",", "end", "=", "''", ")", "\n", "\n", "# Padded resize", "\n", "", "img", "=", "letterbox", "(", "img0", ",", "self", ".", "img_size", ",", "stride", "=", "self", ".", "stride", ")", "[", "0", "]", "\n", "\n", "# Convert", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# BGR to RGB, to 3x416x416", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ")", "\n", "\n", "return", "path", ",", "img", ",", "img0", ",", "self", ".", "cap", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImages.new_video": [[193, 197], ["cv2.VideoCapture", "int", "datasets.LoadImages.cap.get"], "methods", ["None"], ["", "def", "new_video", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "frame", "=", "0", "\n", "self", ".", "cap", "=", "cv2", ".", "VideoCapture", "(", "path", ")", "\n", "self", ".", "nframes", "=", "int", "(", "self", ".", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImages.__len__": [[198, 200], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nf", "# number of files", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadWebcam.__init__": [[203, 216], ["eval.isnumeric", "cv2.VideoCapture", "datasets.LoadWebcam.cap.set", "eval"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pipe", "=", "'0'", ",", "img_size", "=", "640", ",", "stride", "=", "32", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "if", "pipe", ".", "isnumeric", "(", ")", ":", "\n", "            ", "pipe", "=", "eval", "(", "pipe", ")", "# local camera", "\n", "# pipe = 'rtsp://192.168.1.64/1'  # IP camera", "\n", "# pipe = 'rtsp://username:password@192.168.1.64/1'  # IP camera with login", "\n", "# pipe = 'http://wmccpinetop.axiscam.net/mjpg/video.mjpg'  # IP golf camera", "\n", "\n", "", "self", ".", "pipe", "=", "pipe", "\n", "self", ".", "cap", "=", "cv2", ".", "VideoCapture", "(", "pipe", ")", "# video capture object", "\n", "self", ".", "cap", ".", "set", "(", "cv2", ".", "CAP_PROP_BUFFERSIZE", ",", "3", ")", "# set buffer size", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadWebcam.__iter__": [[217, 220], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "-", "1", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadWebcam.__next__": [[221, 255], ["print", "img[].transpose", "numpy.ascontiguousarray", "cv2.waitKey", "ord", "datasets.LoadWebcam.cap.release", "cv2.destroyAllWindows", "datasets.LoadWebcam.cap.read", "cv2.flip", "datasets.letterbox", "datasets.LoadWebcam.cap.grab", "datasets.LoadWebcam.cap.retrieve"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.letterbox"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "+=", "1", "\n", "if", "cv2", ".", "waitKey", "(", "1", ")", "==", "ord", "(", "'q'", ")", ":", "# q to quit", "\n", "            ", "self", ".", "cap", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "raise", "StopIteration", "\n", "\n", "# Read frame", "\n", "", "if", "self", ".", "pipe", "==", "0", ":", "# local camera", "\n", "            ", "ret_val", ",", "img0", "=", "self", ".", "cap", ".", "read", "(", ")", "\n", "img0", "=", "cv2", ".", "flip", "(", "img0", ",", "1", ")", "# flip left-right", "\n", "", "else", ":", "# IP camera", "\n", "            ", "n", "=", "0", "\n", "while", "True", ":", "\n", "                ", "n", "+=", "1", "\n", "self", ".", "cap", ".", "grab", "(", ")", "\n", "if", "n", "%", "30", "==", "0", ":", "# skip frames", "\n", "                    ", "ret_val", ",", "img0", "=", "self", ".", "cap", ".", "retrieve", "(", ")", "\n", "if", "ret_val", ":", "\n", "                        ", "break", "\n", "\n", "# Print", "\n", "", "", "", "", "assert", "ret_val", ",", "f'Camera Error {self.pipe}'", "\n", "img_path", "=", "'webcam.jpg'", "\n", "print", "(", "f'webcam {self.count}: '", ",", "end", "=", "''", ")", "\n", "\n", "# Padded resize", "\n", "img", "=", "letterbox", "(", "img0", ",", "self", ".", "img_size", ",", "stride", "=", "self", ".", "stride", ")", "[", "0", "]", "\n", "\n", "# Convert", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# BGR to RGB, to 3x416x416", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ")", "\n", "\n", "return", "img_path", ",", "img", ",", "img0", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadWebcam.__len__": [[256, 258], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadStreams.__init__": [[261, 300], ["os.path.isfile", "len", "enumerate", "print", "numpy.stack", "utils.general.clean_str", "print", "cv2.VideoCapture", "cv2.VideoCapture.isOpened", "int", "int", "cv2.VideoCapture.read", "threading.Thread", "print", "threading.Thread.start", "print", "open", "numpy.stack.isnumeric", "eval", "utils.general.check_requirements", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "x.strip", "pafy.new().getbest", "numpy.unique", "f.read().strip().splitlines", "len", "datasets.letterbox", "x.strip", "pafy.new", "f.read().strip", "f.read"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.clean_str", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_requirements", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.letterbox"], ["    ", "def", "__init__", "(", "self", ",", "sources", "=", "'streams.txt'", ",", "img_size", "=", "640", ",", "stride", "=", "32", ")", ":", "\n", "        ", "self", ".", "mode", "=", "'stream'", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "sources", ")", ":", "\n", "            ", "with", "open", "(", "sources", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "sources", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "splitlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "sources", "=", "[", "sources", "]", "\n", "\n", "", "n", "=", "len", "(", "sources", ")", "\n", "self", ".", "imgs", "=", "[", "None", "]", "*", "n", "\n", "self", ".", "sources", "=", "[", "clean_str", "(", "x", ")", "for", "x", "in", "sources", "]", "# clean source names for later", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "sources", ")", ":", "\n", "# Start the thread to read frames from the video stream", "\n", "            ", "print", "(", "f'{i + 1}/{n}: {s}... '", ",", "end", "=", "''", ")", "\n", "url", "=", "eval", "(", "s", ")", "if", "s", ".", "isnumeric", "(", ")", "else", "s", "\n", "if", "'youtube.com/'", "in", "url", "or", "'youtu.be/'", "in", "url", ":", "# if source is YouTube video", "\n", "                ", "check_requirements", "(", "(", "'pafy'", ",", "'youtube_dl'", ")", ")", "\n", "import", "pafy", "\n", "url", "=", "pafy", ".", "new", "(", "url", ")", ".", "getbest", "(", "preftype", "=", "\"mp4\"", ")", ".", "url", "\n", "", "cap", "=", "cv2", ".", "VideoCapture", "(", "url", ")", "\n", "assert", "cap", ".", "isOpened", "(", ")", ",", "f'Failed to open {s}'", "\n", "w", "=", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", "\n", "h", "=", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", "\n", "self", ".", "fps", "=", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "%", "100", "\n", "\n", "_", ",", "self", ".", "imgs", "[", "i", "]", "=", "cap", ".", "read", "(", ")", "# guarantee first frame", "\n", "thread", "=", "Thread", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", "[", "i", ",", "cap", "]", ")", ",", "daemon", "=", "True", ")", "\n", "print", "(", "f' success ({w}x{h} at {self.fps:.2f} FPS).'", ")", "\n", "thread", ".", "start", "(", ")", "\n", "", "print", "(", "''", ")", "# newline", "\n", "\n", "# check for common shapes", "\n", "s", "=", "np", ".", "stack", "(", "[", "letterbox", "(", "x", ",", "self", ".", "img_size", ",", "stride", "=", "self", ".", "stride", ")", "[", "0", "]", ".", "shape", "for", "x", "in", "self", ".", "imgs", "]", ",", "0", ")", "# shapes", "\n", "self", ".", "rect", "=", "np", ".", "unique", "(", "s", ",", "axis", "=", "0", ")", ".", "shape", "[", "0", "]", "==", "1", "# rect inference if all shapes equal", "\n", "if", "not", "self", ".", "rect", ":", "\n", "            ", "print", "(", "'WARNING: Different stream shapes detected. For optimal performance supply similarly-shaped streams.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadStreams.update": [[301, 313], ["cap.isOpened", "cap.grab", "time.sleep", "cap.retrieve"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "index", ",", "cap", ")", ":", "\n", "# Read next stream frame in a daemon thread", "\n", "        ", "n", "=", "0", "\n", "while", "cap", ".", "isOpened", "(", ")", ":", "\n", "            ", "n", "+=", "1", "\n", "# _, self.imgs[index] = cap.read()", "\n", "cap", ".", "grab", "(", ")", "\n", "if", "n", "==", "4", ":", "# read every 4th frame", "\n", "                ", "success", ",", "im", "=", "cap", ".", "retrieve", "(", ")", "\n", "self", ".", "imgs", "[", "index", "]", "=", "im", "if", "success", "else", "self", ".", "imgs", "[", "index", "]", "*", "0", "\n", "n", "=", "0", "\n", "", "time", ".", "sleep", "(", "1", "/", "self", ".", "fps", ")", "# wait time", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadStreams.__iter__": [[314, 317], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "-", "1", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadStreams.__next__": [[318, 336], ["datasets.LoadStreams.imgs.copy", "numpy.stack", "img[].transpose", "numpy.ascontiguousarray", "cv2.waitKey", "ord", "cv2.destroyAllWindows", "datasets.letterbox"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.letterbox"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "+=", "1", "\n", "img0", "=", "self", ".", "imgs", ".", "copy", "(", ")", "\n", "if", "cv2", ".", "waitKey", "(", "1", ")", "==", "ord", "(", "'q'", ")", ":", "# q to quit", "\n", "            ", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "raise", "StopIteration", "\n", "\n", "# Letterbox", "\n", "", "img", "=", "[", "letterbox", "(", "x", ",", "self", ".", "img_size", ",", "auto", "=", "self", ".", "rect", ",", "stride", "=", "self", ".", "stride", ")", "[", "0", "]", "for", "x", "in", "img0", "]", "\n", "\n", "# Stack", "\n", "img", "=", "np", ".", "stack", "(", "img", ",", "0", ")", "\n", "\n", "# Convert", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# BGR to RGB, to bsx3x416x416", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ")", "\n", "\n", "return", "self", ".", "sources", ",", "img", ",", "img0", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadStreams.__len__": [[337, 339], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "0", "# 1E12 frames = 32 streams at 30 FPS for 30 years", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImagesAndLabels.__init__": [[348, 453], ["datasets.img2label_paths", "cache_path.is_file", "cache.pop", "cache.pop", "cache.pop", "zip", "list", "numpy.array", "list", "datasets.img2label_paths", "len", "numpy.floor().astype", "range", "sorted", "tqdm.tqdm.tqdm", "cache.keys", "cache.keys", "ar.argsort", "range", "multiprocessing.pool.ThreadPool().imap", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.close", "isinstance", "pathlib.Path", "pathlib.Path.is_dir", "Exception", "torch.load", "torch.load", "torch.load", "torch.load", "datasets.LoadImagesAndLabels.cache_labels", "cache.values", "numpy.floor", "numpy.ceil().astype", "zip", "enumerate", "glob.glob", "pathlib.Path.is_file", "x.replace", "pathlib.Path.is_file", "datasets.get_hash", "datasets.LoadImagesAndLabels.cache_labels", "ari.min", "ari.max", "multiprocessing.pool.ThreadPool", "datasets.load_image", "itertools.repeat", "range", "str", "Exception", "pathlib.Path", "numpy.arange", "numpy.ceil", "open", "t.read().strip().splitlines.read().strip().splitlines.read().strip().splitlines", "[].lower", "str", "t.read().strip().splitlines.read().strip().splitlines.read().strip", "x.startswith", "x.replace", "x.split", "numpy.array", "t.read().strip().splitlines.read().strip().splitlines.read"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.img2label_paths", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.img2label_paths", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImagesAndLabels.cache_labels", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.get_hash", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImagesAndLabels.cache_labels", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.load_image"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "img_size", "=", "640", ",", "batch_size", "=", "16", ",", "augment", "=", "False", ",", "hyp", "=", "None", ",", "rect", "=", "False", ",", "image_weights", "=", "False", ",", "\n", "cache_images", "=", "False", ",", "single_cls", "=", "False", ",", "stride", "=", "32", ",", "pad", "=", "0.0", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "hyp", "=", "hyp", "\n", "self", ".", "image_weights", "=", "image_weights", "\n", "self", ".", "rect", "=", "False", "if", "image_weights", "else", "rect", "\n", "self", ".", "mosaic", "=", "self", ".", "augment", "and", "not", "self", ".", "rect", "# load 4 images at a time into a mosaic (only during training)", "\n", "self", ".", "mosaic_border", "=", "[", "-", "img_size", "//", "2", ",", "-", "img_size", "//", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "path", "=", "path", "\n", "\n", "try", ":", "\n", "            ", "f", "=", "[", "]", "# image files", "\n", "for", "p", "in", "path", "if", "isinstance", "(", "path", ",", "list", ")", "else", "[", "path", "]", ":", "\n", "                ", "p", "=", "Path", "(", "p", ")", "# os-agnostic", "\n", "if", "p", ".", "is_dir", "(", ")", ":", "# dir", "\n", "                    ", "f", "+=", "glob", ".", "glob", "(", "str", "(", "p", "/", "'**'", "/", "'*.*'", ")", ",", "recursive", "=", "True", ")", "\n", "# f = list(p.rglob('**/*.*'))  # pathlib", "\n", "", "elif", "p", ".", "is_file", "(", ")", ":", "# file", "\n", "                    ", "with", "open", "(", "p", ",", "'r'", ")", "as", "t", ":", "\n", "                        ", "t", "=", "t", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "splitlines", "(", ")", "\n", "parent", "=", "str", "(", "p", ".", "parent", ")", "+", "os", ".", "sep", "\n", "f", "+=", "[", "x", ".", "replace", "(", "'./'", ",", "parent", ")", "if", "x", ".", "startswith", "(", "'./'", ")", "else", "x", "for", "x", "in", "t", "]", "# local to global path", "\n", "# f += [p.parent / x.lstrip(os.sep) for x in t]  # local to global path (pathlib)", "\n", "", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "f'{prefix}{p} does not exist'", ")", "\n", "", "", "self", ".", "img_files", "=", "sorted", "(", "[", "x", ".", "replace", "(", "'/'", ",", "os", ".", "sep", ")", "for", "x", "in", "f", "if", "x", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ".", "lower", "(", ")", "in", "img_formats", "]", ")", "\n", "# self.img_files = sorted([x for x in f if x.suffix[1:].lower() in img_formats])  # pathlib", "\n", "assert", "self", ".", "img_files", ",", "f'{prefix}No images found'", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "Exception", "(", "f'{prefix}Error loading data from {path}: {e}\\nSee {help_url}'", ")", "\n", "\n", "# Check cache", "\n", "", "self", ".", "label_files", "=", "img2label_paths", "(", "self", ".", "img_files", ")", "# labels", "\n", "cache_path", "=", "(", "p", "if", "p", ".", "is_file", "(", ")", "else", "Path", "(", "self", ".", "label_files", "[", "0", "]", ")", ".", "parent", ")", ".", "with_suffix", "(", "'.cache'", ")", "# cached labels", "\n", "if", "cache_path", ".", "is_file", "(", ")", ":", "\n", "            ", "cache", ",", "exists", "=", "torch", ".", "load", "(", "cache_path", ")", ",", "True", "# load", "\n", "if", "cache", "[", "'hash'", "]", "!=", "get_hash", "(", "self", ".", "label_files", "+", "self", ".", "img_files", ")", "or", "'version'", "not", "in", "cache", ":", "# changed", "\n", "                ", "cache", ",", "exists", "=", "self", ".", "cache_labels", "(", "cache_path", ",", "prefix", ")", ",", "False", "# re-cache", "\n", "", "", "else", ":", "\n", "            ", "cache", ",", "exists", "=", "self", ".", "cache_labels", "(", "cache_path", ",", "prefix", ")", ",", "False", "# cache", "\n", "\n", "# Display cache", "\n", "", "nf", ",", "nm", ",", "ne", ",", "nc", ",", "n", "=", "cache", ".", "pop", "(", "'results'", ")", "# found, missing, empty, corrupted, total", "\n", "if", "exists", ":", "\n", "            ", "d", "=", "f\"Scanning '{cache_path}' images and labels... {nf} found, {nm} missing, {ne} empty, {nc} corrupted\"", "\n", "tqdm", "(", "None", ",", "desc", "=", "prefix", "+", "d", ",", "total", "=", "n", ",", "initial", "=", "n", ")", "# display cache results", "\n", "", "assert", "nf", ">", "0", "or", "not", "augment", ",", "f'{prefix}No labels in {cache_path}. Can not train without labels. See {help_url}'", "\n", "\n", "# Read cache", "\n", "cache", ".", "pop", "(", "'hash'", ")", "# remove hash", "\n", "cache", ".", "pop", "(", "'version'", ")", "# remove version", "\n", "labels", ",", "shapes", ",", "self", ".", "segments", "=", "zip", "(", "*", "cache", ".", "values", "(", ")", ")", "\n", "self", ".", "labels", "=", "list", "(", "labels", ")", "\n", "self", ".", "shapes", "=", "np", ".", "array", "(", "shapes", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "img_files", "=", "list", "(", "cache", ".", "keys", "(", ")", ")", "# update", "\n", "self", ".", "label_files", "=", "img2label_paths", "(", "cache", ".", "keys", "(", ")", ")", "# update", "\n", "if", "single_cls", ":", "\n", "            ", "for", "x", "in", "self", ".", "labels", ":", "\n", "                ", "x", "[", ":", ",", "0", "]", "=", "0", "\n", "\n", "", "", "n", "=", "len", "(", "shapes", ")", "# number of images", "\n", "bi", "=", "np", ".", "floor", "(", "np", ".", "arange", "(", "n", ")", "/", "batch_size", ")", ".", "astype", "(", "np", ".", "int", ")", "# batch index", "\n", "nb", "=", "bi", "[", "-", "1", "]", "+", "1", "# number of batches", "\n", "self", ".", "batch", "=", "bi", "# batch index of image", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "indices", "=", "range", "(", "n", ")", "\n", "\n", "# Rectangular Training", "\n", "if", "self", ".", "rect", ":", "\n", "# Sort by aspect ratio", "\n", "            ", "s", "=", "self", ".", "shapes", "# wh", "\n", "ar", "=", "s", "[", ":", ",", "1", "]", "/", "s", "[", ":", ",", "0", "]", "# aspect ratio", "\n", "irect", "=", "ar", ".", "argsort", "(", ")", "\n", "self", ".", "img_files", "=", "[", "self", ".", "img_files", "[", "i", "]", "for", "i", "in", "irect", "]", "\n", "self", ".", "label_files", "=", "[", "self", ".", "label_files", "[", "i", "]", "for", "i", "in", "irect", "]", "\n", "self", ".", "labels", "=", "[", "self", ".", "labels", "[", "i", "]", "for", "i", "in", "irect", "]", "\n", "self", ".", "shapes", "=", "s", "[", "irect", "]", "# wh", "\n", "ar", "=", "ar", "[", "irect", "]", "\n", "\n", "# Set training image shapes", "\n", "shapes", "=", "[", "[", "1", ",", "1", "]", "]", "*", "nb", "\n", "for", "i", "in", "range", "(", "nb", ")", ":", "\n", "                ", "ari", "=", "ar", "[", "bi", "==", "i", "]", "\n", "mini", ",", "maxi", "=", "ari", ".", "min", "(", ")", ",", "ari", ".", "max", "(", ")", "\n", "if", "maxi", "<", "1", ":", "\n", "                    ", "shapes", "[", "i", "]", "=", "[", "maxi", ",", "1", "]", "\n", "", "elif", "mini", ">", "1", ":", "\n", "                    ", "shapes", "[", "i", "]", "=", "[", "1", ",", "1", "/", "mini", "]", "\n", "\n", "", "", "self", ".", "batch_shapes", "=", "np", ".", "ceil", "(", "np", ".", "array", "(", "shapes", ")", "*", "img_size", "/", "stride", "+", "pad", ")", ".", "astype", "(", "np", ".", "int", ")", "*", "stride", "\n", "\n", "# Cache images into memory for faster training (WARNING: large datasets may exceed system RAM)", "\n", "", "self", ".", "imgs", "=", "[", "None", "]", "*", "n", "\n", "if", "cache_images", ":", "\n", "            ", "gb", "=", "0", "# Gigabytes of cached images", "\n", "self", ".", "img_hw0", ",", "self", ".", "img_hw", "=", "[", "None", "]", "*", "n", ",", "[", "None", "]", "*", "n", "\n", "results", "=", "ThreadPool", "(", "8", ")", ".", "imap", "(", "lambda", "x", ":", "load_image", "(", "*", "x", ")", ",", "zip", "(", "repeat", "(", "self", ")", ",", "range", "(", "n", ")", ")", ")", "# 8 threads", "\n", "pbar", "=", "tqdm", "(", "enumerate", "(", "results", ")", ",", "total", "=", "n", ")", "\n", "for", "i", ",", "x", "in", "pbar", ":", "\n", "                ", "self", ".", "imgs", "[", "i", "]", ",", "self", ".", "img_hw0", "[", "i", "]", ",", "self", ".", "img_hw", "[", "i", "]", "=", "x", "# img, hw_original, hw_resized = load_image(self, i)", "\n", "gb", "+=", "self", ".", "imgs", "[", "i", "]", ".", "nbytes", "\n", "pbar", ".", "desc", "=", "f'{prefix}Caching images ({gb / 1E9:.1f}GB)'", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImagesAndLabels.cache_labels": [[454, 508], ["pathlib.Path", "tqdm.tqdm.tqdm", "enumerate", "tqdm.tqdm.tqdm.close", "datasets.get_hash", "torch.save", "torch.save", "torch.save", "torch.save", "logging.info", "zip", "print", "len", "PIL.Image.open", "PIL.Image.open.verify", "datasets.exif_size", "os.path.isfile", "PIL.Image.open.format.lower", "len", "numpy.zeros", "print", "open", "any", "numpy.array", "numpy.zeros", "x.split", "numpy.array", "numpy.concatenate", "f.read().strip().splitlines", "numpy.array().reshape", "len", "numpy.array.reshape", "utils.general.segments2boxes", "numpy.unique", "f.read().strip", "numpy.array", "f.read"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.get_hash", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.exif_size", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.segments2boxes"], ["", "", "def", "cache_labels", "(", "self", ",", "path", "=", "Path", "(", "'./labels.cache'", ")", ",", "prefix", "=", "''", ")", ":", "\n", "# Cache dataset labels, check images and read shapes", "\n", "        ", "x", "=", "{", "}", "# dict", "\n", "nm", ",", "nf", ",", "ne", ",", "nc", "=", "0", ",", "0", ",", "0", ",", "0", "# number missing, found, empty, duplicate", "\n", "pbar", "=", "tqdm", "(", "zip", "(", "self", ".", "img_files", ",", "self", ".", "label_files", ")", ",", "desc", "=", "'Scanning images'", ",", "total", "=", "len", "(", "self", ".", "img_files", ")", ")", "\n", "for", "i", ",", "(", "im_file", ",", "lb_file", ")", "in", "enumerate", "(", "pbar", ")", ":", "\n", "            ", "try", ":", "\n", "# verify images", "\n", "                ", "im", "=", "Image", ".", "open", "(", "im_file", ")", "\n", "im", ".", "verify", "(", ")", "# PIL verify", "\n", "shape", "=", "exif_size", "(", "im", ")", "# image size", "\n", "segments", "=", "[", "]", "# instance segments", "\n", "assert", "(", "shape", "[", "0", "]", ">", "9", ")", "&", "(", "shape", "[", "1", "]", ">", "9", ")", ",", "f'image size {shape} <10 pixels'", "\n", "assert", "im", ".", "format", ".", "lower", "(", ")", "in", "img_formats", ",", "f'invalid image format {im.format}'", "\n", "\n", "# verify labels", "\n", "if", "os", ".", "path", ".", "isfile", "(", "lb_file", ")", ":", "\n", "                    ", "nf", "+=", "1", "# label found", "\n", "with", "open", "(", "lb_file", ",", "'r'", ")", "as", "f", ":", "\n", "                        ", "l", "=", "[", "x", ".", "split", "(", ")", "for", "x", "in", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "splitlines", "(", ")", "]", "\n", "if", "any", "(", "[", "len", "(", "x", ")", ">", "8", "for", "x", "in", "l", "]", ")", ":", "# is segment", "\n", "                            ", "classes", "=", "np", ".", "array", "(", "[", "x", "[", "0", "]", "for", "x", "in", "l", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "segments", "=", "[", "np", ".", "array", "(", "x", "[", "1", ":", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "for", "x", "in", "l", "]", "# (cls, xy1...)", "\n", "l", "=", "np", ".", "concatenate", "(", "(", "classes", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "segments2boxes", "(", "segments", ")", ")", ",", "1", ")", "# (cls, xywh)", "\n", "", "l", "=", "np", ".", "array", "(", "l", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "if", "len", "(", "l", ")", ":", "\n", "                        ", "assert", "l", ".", "shape", "[", "1", "]", "==", "5", ",", "'labels require 5 columns each'", "\n", "assert", "(", "l", ">=", "0", ")", ".", "all", "(", ")", ",", "'negative labels'", "\n", "assert", "(", "l", "[", ":", ",", "1", ":", "]", "<=", "1", ")", ".", "all", "(", ")", ",", "'non-normalized or out of bounds coordinate labels'", "\n", "assert", "np", ".", "unique", "(", "l", ",", "axis", "=", "0", ")", ".", "shape", "[", "0", "]", "==", "l", ".", "shape", "[", "0", "]", ",", "'duplicate labels'", "\n", "", "else", ":", "\n", "                        ", "ne", "+=", "1", "# label empty", "\n", "l", "=", "np", ".", "zeros", "(", "(", "0", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "", "else", ":", "\n", "                    ", "nm", "+=", "1", "# label missing", "\n", "l", "=", "np", ".", "zeros", "(", "(", "0", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "x", "[", "im_file", "]", "=", "[", "l", ",", "shape", ",", "segments", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "nc", "+=", "1", "\n", "print", "(", "f'{prefix}WARNING: Ignoring corrupted image and/or label {im_file}: {e}'", ")", "\n", "\n", "", "pbar", ".", "desc", "=", "f\"{prefix}Scanning '{path.parent / path.stem}' images and labels... \"", "f\"{nf} found, {nm} missing, {ne} empty, {nc} corrupted\"", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n", "if", "nf", "==", "0", ":", "\n", "            ", "print", "(", "f'{prefix}WARNING: No labels found in {path}. See {help_url}'", ")", "\n", "\n", "", "x", "[", "'hash'", "]", "=", "get_hash", "(", "self", ".", "label_files", "+", "self", ".", "img_files", ")", "\n", "x", "[", "'results'", "]", "=", "nf", ",", "nm", ",", "ne", ",", "nc", ",", "i", "+", "1", "\n", "x", "[", "'version'", "]", "=", "0.1", "# cache version", "\n", "torch", ".", "save", "(", "x", ",", "path", ")", "# save for next time", "\n", "logging", ".", "info", "(", "f'{prefix}New cache created: {path}'", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImagesAndLabels.__len__": [[509, 511], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImagesAndLabels.__getitem__": [[518, 593], ["len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "img[].transpose", "numpy.ascontiguousarray", "datasets.load_mosaic", "datasets.load_image", "datasets.letterbox", "datasets.LoadImagesAndLabels.labels[].copy", "datasets.augment_hsv", "utils.general.xyxy2xywh", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "random.random", "random.random", "datasets.load_mosaic", "numpy.random.beta", "numpy.concatenate", "utils.general.xywhn2xyxy", "datasets.random_perspective", "random.random", "numpy.flipud", "random.random", "numpy.fliplr", "random.randint"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.load_mosaic", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.load_image", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.letterbox", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.augment_hsv", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xyxy2xywh", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.load_mosaic", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xywhn2xyxy", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.random_perspective"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "index", "=", "self", ".", "indices", "[", "index", "]", "# linear, shuffled, or image_weights", "\n", "\n", "hyp", "=", "self", ".", "hyp", "\n", "mosaic", "=", "self", ".", "mosaic", "and", "random", ".", "random", "(", ")", "<", "hyp", "[", "'mosaic'", "]", "\n", "if", "mosaic", ":", "\n", "# Load mosaic", "\n", "            ", "img", ",", "labels", "=", "load_mosaic", "(", "self", ",", "index", ")", "\n", "shapes", "=", "None", "\n", "\n", "# MixUp https://arxiv.org/pdf/1710.09412.pdf", "\n", "if", "random", ".", "random", "(", ")", "<", "hyp", "[", "'mixup'", "]", ":", "\n", "                ", "img2", ",", "labels2", "=", "load_mosaic", "(", "self", ",", "random", ".", "randint", "(", "0", ",", "self", ".", "n", "-", "1", ")", ")", "\n", "r", "=", "np", ".", "random", ".", "beta", "(", "8.0", ",", "8.0", ")", "# mixup ratio, alpha=beta=8.0", "\n", "img", "=", "(", "img", "*", "r", "+", "img2", "*", "(", "1", "-", "r", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "(", "labels", ",", "labels2", ")", ",", "0", ")", "\n", "\n", "", "", "else", ":", "\n", "# Load image", "\n", "            ", "img", ",", "(", "h0", ",", "w0", ")", ",", "(", "h", ",", "w", ")", "=", "load_image", "(", "self", ",", "index", ")", "\n", "\n", "# Letterbox", "\n", "shape", "=", "self", ".", "batch_shapes", "[", "self", ".", "batch", "[", "index", "]", "]", "if", "self", ".", "rect", "else", "self", ".", "img_size", "# final letterboxed shape", "\n", "img", ",", "ratio", ",", "pad", "=", "letterbox", "(", "img", ",", "shape", ",", "auto", "=", "False", ",", "scaleup", "=", "self", ".", "augment", ")", "\n", "shapes", "=", "(", "h0", ",", "w0", ")", ",", "(", "(", "h", "/", "h0", ",", "w", "/", "w0", ")", ",", "pad", ")", "# for COCO mAP rescaling", "\n", "\n", "labels", "=", "self", ".", "labels", "[", "index", "]", ".", "copy", "(", ")", "\n", "if", "labels", ".", "size", ":", "# normalized xywh to pixel xyxy format", "\n", "                ", "labels", "[", ":", ",", "1", ":", "]", "=", "xywhn2xyxy", "(", "labels", "[", ":", ",", "1", ":", "]", ",", "ratio", "[", "0", "]", "*", "w", ",", "ratio", "[", "1", "]", "*", "h", ",", "padw", "=", "pad", "[", "0", "]", ",", "padh", "=", "pad", "[", "1", "]", ")", "\n", "\n", "", "", "if", "self", ".", "augment", ":", "\n", "# Augment imagespace", "\n", "            ", "if", "not", "mosaic", ":", "\n", "                ", "img", ",", "labels", "=", "random_perspective", "(", "img", ",", "labels", ",", "\n", "degrees", "=", "hyp", "[", "'degrees'", "]", ",", "\n", "translate", "=", "hyp", "[", "'translate'", "]", ",", "\n", "scale", "=", "hyp", "[", "'scale'", "]", ",", "\n", "shear", "=", "hyp", "[", "'shear'", "]", ",", "\n", "perspective", "=", "hyp", "[", "'perspective'", "]", ")", "\n", "\n", "# Augment colorspace", "\n", "", "augment_hsv", "(", "img", ",", "hgain", "=", "hyp", "[", "'hsv_h'", "]", ",", "sgain", "=", "hyp", "[", "'hsv_s'", "]", ",", "vgain", "=", "hyp", "[", "'hsv_v'", "]", ")", "\n", "\n", "# Apply cutouts", "\n", "# if random.random() < 0.9:", "\n", "#     labels = cutout(img, labels)", "\n", "\n", "", "nL", "=", "len", "(", "labels", ")", "# number of labels", "\n", "if", "nL", ":", "\n", "            ", "labels", "[", ":", ",", "1", ":", "5", "]", "=", "xyxy2xywh", "(", "labels", "[", ":", ",", "1", ":", "5", "]", ")", "# convert xyxy to xywh", "\n", "labels", "[", ":", ",", "[", "2", ",", "4", "]", "]", "/=", "img", ".", "shape", "[", "0", "]", "# normalized height 0-1", "\n", "labels", "[", ":", ",", "[", "1", ",", "3", "]", "]", "/=", "img", ".", "shape", "[", "1", "]", "# normalized width 0-1", "\n", "\n", "", "if", "self", ".", "augment", ":", "\n", "# flip up-down", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "hyp", "[", "'flipud'", "]", ":", "\n", "                ", "img", "=", "np", ".", "flipud", "(", "img", ")", "\n", "if", "nL", ":", "\n", "                    ", "labels", "[", ":", ",", "2", "]", "=", "1", "-", "labels", "[", ":", ",", "2", "]", "\n", "\n", "# flip left-right", "\n", "", "", "if", "random", ".", "random", "(", ")", "<", "hyp", "[", "'fliplr'", "]", ":", "\n", "                ", "img", "=", "np", ".", "fliplr", "(", "img", ")", "\n", "if", "nL", ":", "\n", "                    ", "labels", "[", ":", ",", "1", "]", "=", "1", "-", "labels", "[", ":", ",", "1", "]", "\n", "\n", "", "", "", "labels_out", "=", "torch", ".", "zeros", "(", "(", "nL", ",", "6", ")", ")", "\n", "if", "nL", ":", "\n", "            ", "labels_out", "[", ":", ",", "1", ":", "]", "=", "torch", ".", "from_numpy", "(", "labels", ")", "\n", "\n", "# Convert", "\n", "", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# BGR to RGB, to 3x416x416", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "img", ")", ",", "labels_out", ",", "self", ".", "img_files", "[", "index", "]", ",", "shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImagesAndLabels.collate_fn": [[594, 600], ["zip", "enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_fn", "(", "batch", ")", ":", "\n", "        ", "img", ",", "label", ",", "path", ",", "shapes", "=", "zip", "(", "*", "batch", ")", "# transposed", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "label", ")", ":", "\n", "            ", "l", "[", ":", ",", "0", "]", "=", "i", "# add target image index for build_targets()", "\n", "", "return", "torch", ".", "stack", "(", "img", ",", "0", ")", ",", "torch", ".", "cat", "(", "label", ",", "0", ")", ",", "path", ",", "shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.LoadImagesAndLabels.collate_fn4": [[601, 626], ["zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "enumerate", "len", "img4.append", "label4.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "random.random", "[].type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "img[].type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate", "torch.interpolate", "img[].unsqueeze().float", "img[].unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_fn4", "(", "batch", ")", ":", "\n", "        ", "img", ",", "label", ",", "path", ",", "shapes", "=", "zip", "(", "*", "batch", ")", "# transposed", "\n", "n", "=", "len", "(", "shapes", ")", "//", "4", "\n", "img4", ",", "label4", ",", "path4", ",", "shapes4", "=", "[", "]", ",", "[", "]", ",", "path", "[", ":", "n", "]", ",", "shapes", "[", ":", "n", "]", "\n", "\n", "ho", "=", "torch", ".", "tensor", "(", "[", "[", "0.", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", "]", ")", "\n", "wo", "=", "torch", ".", "tensor", "(", "[", "[", "0.", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "s", "=", "torch", ".", "tensor", "(", "[", "[", "1", ",", "1", ",", ".5", ",", ".5", ",", ".5", ",", ".5", "]", "]", ")", "# scale", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "# zidane torch.zeros(16,3,720,1280)  # BCHW", "\n", "            ", "i", "*=", "4", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "im", "=", "F", ".", "interpolate", "(", "img", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "scale_factor", "=", "2.", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "\n", "0", "]", ".", "type", "(", "img", "[", "i", "]", ".", "type", "(", ")", ")", "\n", "l", "=", "label", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "im", "=", "torch", ".", "cat", "(", "(", "torch", ".", "cat", "(", "(", "img", "[", "i", "]", ",", "img", "[", "i", "+", "1", "]", ")", ",", "1", ")", ",", "torch", ".", "cat", "(", "(", "img", "[", "i", "+", "2", "]", ",", "img", "[", "i", "+", "3", "]", ")", ",", "1", ")", ")", ",", "2", ")", "\n", "l", "=", "torch", ".", "cat", "(", "(", "label", "[", "i", "]", ",", "label", "[", "i", "+", "1", "]", "+", "ho", ",", "label", "[", "i", "+", "2", "]", "+", "wo", ",", "label", "[", "i", "+", "3", "]", "+", "ho", "+", "wo", ")", ",", "0", ")", "*", "s", "\n", "", "img4", ".", "append", "(", "im", ")", "\n", "label4", ".", "append", "(", "l", ")", "\n", "\n", "", "for", "i", ",", "l", "in", "enumerate", "(", "label4", ")", ":", "\n", "            ", "l", "[", ":", ",", "0", "]", "=", "i", "# add target image index for build_targets()", "\n", "\n", "", "return", "torch", ".", "stack", "(", "img4", ",", "0", ")", ",", "torch", ".", "cat", "(", "label4", ",", "0", ")", ",", "path4", ",", "shapes4", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.get_hash": [[39, 42], ["sum", "os.path.getsize", "os.path.isfile"], "function", ["None"], ["", "", "def", "get_hash", "(", "files", ")", ":", "\n", "# Returns a single hash value of a list of files", "\n", "    ", "return", "sum", "(", "os", ".", "path", ".", "getsize", "(", "f", ")", "for", "f", "in", "files", "if", "os", ".", "path", ".", "isfile", "(", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.exif_size": [[44, 57], ["dict", "img._getexif().items", "img._getexif"], "function", ["None"], ["", "def", "exif_size", "(", "img", ")", ":", "\n", "# Returns exif-corrected PIL size", "\n", "    ", "s", "=", "img", ".", "size", "# (width, height)", "\n", "try", ":", "\n", "        ", "rotation", "=", "dict", "(", "img", ".", "_getexif", "(", ")", ".", "items", "(", ")", ")", "[", "orientation", "]", "\n", "if", "rotation", "==", "6", ":", "# rotation 270", "\n", "            ", "s", "=", "(", "s", "[", "1", "]", ",", "s", "[", "0", "]", ")", "\n", "", "elif", "rotation", "==", "8", ":", "# rotation 90", "\n", "            ", "s", "=", "(", "s", "[", "1", "]", ",", "s", "[", "0", "]", ")", "\n", "", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.create_dataloader": [[59, 86], ["min", "min", "loader", "utils.torch_utils.torch_distributed_zero_first", "datasets.LoadImagesAndLabels", "len", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "int", "os.cpu_count"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.torch_distributed_zero_first"], ["", "def", "create_dataloader", "(", "path", ",", "imgsz", ",", "batch_size", ",", "stride", ",", "opt", ",", "hyp", "=", "None", ",", "augment", "=", "False", ",", "cache", "=", "False", ",", "pad", "=", "0.0", ",", "rect", "=", "False", ",", "\n", "rank", "=", "-", "1", ",", "world_size", "=", "1", ",", "workers", "=", "8", ",", "image_weights", "=", "False", ",", "quad", "=", "False", ",", "prefix", "=", "''", ")", ":", "\n", "# Make sure only the first process in DDP process the dataset first, and the following others can use the cache", "\n", "    ", "with", "torch_distributed_zero_first", "(", "rank", ")", ":", "\n", "        ", "dataset", "=", "LoadImagesAndLabels", "(", "path", ",", "imgsz", ",", "batch_size", ",", "\n", "augment", "=", "augment", ",", "# augment images", "\n", "hyp", "=", "hyp", ",", "# augmentation hyperparameters", "\n", "rect", "=", "rect", ",", "# rectangular training", "\n", "cache_images", "=", "cache", ",", "\n", "single_cls", "=", "opt", ".", "single_cls", ",", "\n", "stride", "=", "int", "(", "stride", ")", ",", "\n", "pad", "=", "pad", ",", "\n", "image_weights", "=", "image_weights", ",", "\n", "prefix", "=", "prefix", ")", "\n", "\n", "", "batch_size", "=", "min", "(", "batch_size", ",", "len", "(", "dataset", ")", ")", "\n", "nw", "=", "min", "(", "[", "os", ".", "cpu_count", "(", ")", "//", "world_size", ",", "batch_size", "if", "batch_size", ">", "1", "else", "0", ",", "workers", "]", ")", "# number of workers", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "dataset", ")", "if", "rank", "!=", "-", "1", "else", "None", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "if", "image_weights", "else", "InfiniteDataLoader", "\n", "# Use torch.utils.data.DataLoader() if dataset.properties will update during training else InfiniteDataLoader()", "\n", "dataloader", "=", "loader", "(", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "nw", ",", "\n", "sampler", "=", "sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "LoadImagesAndLabels", ".", "collate_fn4", "if", "quad", "else", "LoadImagesAndLabels", ".", "collate_fn", ")", "\n", "return", "dataloader", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.img2label_paths": [[341, 345], ["x.replace().rsplit", "x.replace", "x.split"], "function", ["None"], ["", "", "def", "img2label_paths", "(", "img_paths", ")", ":", "\n", "# Define label paths as a function of image paths", "\n", "    ", "sa", ",", "sb", "=", "os", ".", "sep", "+", "'images'", "+", "os", ".", "sep", ",", "os", ".", "sep", "+", "'labels'", "+", "os", ".", "sep", "# /images/, /labels/ substrings", "\n", "return", "[", "'txt'", ".", "join", "(", "x", ".", "replace", "(", "sa", ",", "sb", ",", "1", ")", ".", "rsplit", "(", "x", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ",", "1", ")", ")", "for", "x", "in", "img_paths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.load_image": [[629, 644], ["cv2.imread", "max", "cv2.resize", "int", "int"], "function", ["None"], ["", "", "def", "load_image", "(", "self", ",", "index", ")", ":", "\n", "# loads 1 image from dataset, returns img, original hw, resized hw", "\n", "    ", "img", "=", "self", ".", "imgs", "[", "index", "]", "\n", "if", "img", "is", "None", ":", "# not cached", "\n", "        ", "path", "=", "self", ".", "img_files", "[", "index", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "path", ")", "# BGR", "\n", "assert", "img", "is", "not", "None", ",", "'Image Not Found '", "+", "path", "\n", "h0", ",", "w0", "=", "img", ".", "shape", "[", ":", "2", "]", "# orig hw", "\n", "r", "=", "self", ".", "img_size", "/", "max", "(", "h0", ",", "w0", ")", "# resize image to img_size", "\n", "if", "r", "!=", "1", ":", "# always resize down, only resize up if training with augmentation", "\n", "            ", "interp", "=", "cv2", ".", "INTER_AREA", "if", "r", "<", "1", "and", "not", "self", ".", "augment", "else", "cv2", ".", "INTER_LINEAR", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "int", "(", "w0", "*", "r", ")", ",", "int", "(", "h0", "*", "r", ")", ")", ",", "interpolation", "=", "interp", ")", "\n", "", "return", "img", ",", "(", "h0", ",", "w0", ")", ",", "img", ".", "shape", "[", ":", "2", "]", "# img, hw_original, hw_resized", "\n", "", "else", ":", "\n", "        ", "return", "self", ".", "imgs", "[", "index", "]", ",", "self", ".", "img_hw0", "[", "index", "]", ",", "self", ".", "img_hw", "[", "index", "]", "# img, hw_original, hw_resized", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.augment_hsv": [[646, 658], ["cv2.split", "numpy.arange", "numpy.clip().astype", "numpy.clip().astype", "cv2.merge().astype", "cv2.cvtColor", "cv2.cvtColor", "numpy.random.uniform", "numpy.clip", "numpy.clip", "cv2.merge", "cv2.LUT", "cv2.LUT", "cv2.LUT"], "function", ["None"], ["", "", "def", "augment_hsv", "(", "img", ",", "hgain", "=", "0.5", ",", "sgain", "=", "0.5", ",", "vgain", "=", "0.5", ")", ":", "\n", "    ", "r", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "3", ")", "*", "[", "hgain", ",", "sgain", ",", "vgain", "]", "+", "1", "# random gains", "\n", "hue", ",", "sat", ",", "val", "=", "cv2", ".", "split", "(", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2HSV", ")", ")", "\n", "dtype", "=", "img", ".", "dtype", "# uint8", "\n", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "256", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "lut_hue", "=", "(", "(", "x", "*", "r", "[", "0", "]", ")", "%", "180", ")", ".", "astype", "(", "dtype", ")", "\n", "lut_sat", "=", "np", ".", "clip", "(", "x", "*", "r", "[", "1", "]", ",", "0", ",", "255", ")", ".", "astype", "(", "dtype", ")", "\n", "lut_val", "=", "np", ".", "clip", "(", "x", "*", "r", "[", "2", "]", ",", "0", ",", "255", ")", ".", "astype", "(", "dtype", ")", "\n", "\n", "img_hsv", "=", "cv2", ".", "merge", "(", "(", "cv2", ".", "LUT", "(", "hue", ",", "lut_hue", ")", ",", "cv2", ".", "LUT", "(", "sat", ",", "lut_sat", ")", ",", "cv2", ".", "LUT", "(", "val", ",", "lut_val", ")", ")", ")", ".", "astype", "(", "dtype", ")", "\n", "cv2", ".", "cvtColor", "(", "img_hsv", ",", "cv2", ".", "COLOR_HSV2BGR", ",", "dst", "=", "img", ")", "# no return needed", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.hist_equalize": [[660, 669], ["cv2.cvtColor", "cv2.cvtColor", "cv2.createCLAHE", "cv2.createCLAHE.apply", "cv2.equalizeHist"], "function", ["None"], ["", "def", "hist_equalize", "(", "img", ",", "clahe", "=", "True", ",", "bgr", "=", "False", ")", ":", "\n", "# Equalize histogram on BGR image 'img' with img.shape(n,m,3) and range 0-255", "\n", "    ", "yuv", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2YUV", "if", "bgr", "else", "cv2", ".", "COLOR_RGB2YUV", ")", "\n", "if", "clahe", ":", "\n", "        ", "c", "=", "cv2", ".", "createCLAHE", "(", "clipLimit", "=", "2.0", ",", "tileGridSize", "=", "(", "8", ",", "8", ")", ")", "\n", "yuv", "[", ":", ",", ":", ",", "0", "]", "=", "c", ".", "apply", "(", "yuv", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "yuv", "[", ":", ",", ":", ",", "0", "]", "=", "cv2", ".", "equalizeHist", "(", "yuv", "[", ":", ",", ":", ",", "0", "]", ")", "# equalize Y channel histogram", "\n", "", "return", "cv2", ".", "cvtColor", "(", "yuv", ",", "cv2", ".", "COLOR_YUV2BGR", "if", "bgr", "else", "cv2", ".", "COLOR_YUV2RGB", ")", "# convert YUV image to RGB", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.load_mosaic": [[671, 725], ["enumerate", "numpy.concatenate", "datasets.random_perspective", "int", "random.choices", "datasets.load_image", "np.concatenate.append", "segments4.extend", "numpy.clip", "random.uniform", "numpy.full", "datasets..labels[].copy", "datasets..segments[].copy", "utils.general.xywhn2xyxy", "max", "max", "utils.general.xyn2xy", "max", "min", "min", "max", "min", "min", "min", "min", "min", "min"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.random_perspective", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.load_image", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xywhn2xyxy", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xyn2xy"], ["", "def", "load_mosaic", "(", "self", ",", "index", ")", ":", "\n", "# loads images in a 4-mosaic", "\n", "\n", "    ", "labels4", ",", "segments4", "=", "[", "]", ",", "[", "]", "\n", "s", "=", "self", ".", "img_size", "\n", "yc", ",", "xc", "=", "[", "int", "(", "random", ".", "uniform", "(", "-", "x", ",", "2", "*", "s", "+", "x", ")", ")", "for", "x", "in", "self", ".", "mosaic_border", "]", "# mosaic center x, y", "\n", "indices", "=", "[", "index", "]", "+", "random", ".", "choices", "(", "self", ".", "indices", ",", "k", "=", "3", ")", "# 3 additional image indices", "\n", "for", "i", ",", "index", "in", "enumerate", "(", "indices", ")", ":", "\n", "# Load image", "\n", "        ", "img", ",", "_", ",", "(", "h", ",", "w", ")", "=", "load_image", "(", "self", ",", "index", ")", "\n", "\n", "# place img in img4", "\n", "if", "i", "==", "0", ":", "# top left", "\n", "            ", "img4", "=", "np", ".", "full", "(", "(", "s", "*", "2", ",", "s", "*", "2", ",", "img", ".", "shape", "[", "2", "]", ")", ",", "114", ",", "dtype", "=", "np", ".", "uint8", ")", "# base image with 4 tiles", "\n", "x1a", ",", "y1a", ",", "x2a", ",", "y2a", "=", "max", "(", "xc", "-", "w", ",", "0", ")", ",", "max", "(", "yc", "-", "h", ",", "0", ")", ",", "xc", ",", "yc", "# xmin, ymin, xmax, ymax (large image)", "\n", "x1b", ",", "y1b", ",", "x2b", ",", "y2b", "=", "w", "-", "(", "x2a", "-", "x1a", ")", ",", "h", "-", "(", "y2a", "-", "y1a", ")", ",", "w", ",", "h", "# xmin, ymin, xmax, ymax (small image)", "\n", "", "elif", "i", "==", "1", ":", "# top right", "\n", "            ", "x1a", ",", "y1a", ",", "x2a", ",", "y2a", "=", "xc", ",", "max", "(", "yc", "-", "h", ",", "0", ")", ",", "min", "(", "xc", "+", "w", ",", "s", "*", "2", ")", ",", "yc", "\n", "x1b", ",", "y1b", ",", "x2b", ",", "y2b", "=", "0", ",", "h", "-", "(", "y2a", "-", "y1a", ")", ",", "min", "(", "w", ",", "x2a", "-", "x1a", ")", ",", "h", "\n", "", "elif", "i", "==", "2", ":", "# bottom left", "\n", "            ", "x1a", ",", "y1a", ",", "x2a", ",", "y2a", "=", "max", "(", "xc", "-", "w", ",", "0", ")", ",", "yc", ",", "xc", ",", "min", "(", "s", "*", "2", ",", "yc", "+", "h", ")", "\n", "x1b", ",", "y1b", ",", "x2b", ",", "y2b", "=", "w", "-", "(", "x2a", "-", "x1a", ")", ",", "0", ",", "w", ",", "min", "(", "y2a", "-", "y1a", ",", "h", ")", "\n", "", "elif", "i", "==", "3", ":", "# bottom right", "\n", "            ", "x1a", ",", "y1a", ",", "x2a", ",", "y2a", "=", "xc", ",", "yc", ",", "min", "(", "xc", "+", "w", ",", "s", "*", "2", ")", ",", "min", "(", "s", "*", "2", ",", "yc", "+", "h", ")", "\n", "x1b", ",", "y1b", ",", "x2b", ",", "y2b", "=", "0", ",", "0", ",", "min", "(", "w", ",", "x2a", "-", "x1a", ")", ",", "min", "(", "y2a", "-", "y1a", ",", "h", ")", "\n", "\n", "", "img4", "[", "y1a", ":", "y2a", ",", "x1a", ":", "x2a", "]", "=", "img", "[", "y1b", ":", "y2b", ",", "x1b", ":", "x2b", "]", "# img4[ymin:ymax, xmin:xmax]", "\n", "padw", "=", "x1a", "-", "x1b", "\n", "padh", "=", "y1a", "-", "y1b", "\n", "\n", "# Labels", "\n", "labels", ",", "segments", "=", "self", ".", "labels", "[", "index", "]", ".", "copy", "(", ")", ",", "self", ".", "segments", "[", "index", "]", ".", "copy", "(", ")", "\n", "if", "labels", ".", "size", ":", "\n", "            ", "labels", "[", ":", ",", "1", ":", "]", "=", "xywhn2xyxy", "(", "labels", "[", ":", ",", "1", ":", "]", ",", "w", ",", "h", ",", "padw", ",", "padh", ")", "# normalized xywh to pixel xyxy format", "\n", "segments", "=", "[", "xyn2xy", "(", "x", ",", "w", ",", "h", ",", "padw", ",", "padh", ")", "for", "x", "in", "segments", "]", "\n", "", "labels4", ".", "append", "(", "labels", ")", "\n", "segments4", ".", "extend", "(", "segments", ")", "\n", "\n", "# Concat/clip labels", "\n", "", "labels4", "=", "np", ".", "concatenate", "(", "labels4", ",", "0", ")", "\n", "for", "x", "in", "(", "labels4", "[", ":", ",", "1", ":", "]", ",", "*", "segments4", ")", ":", "\n", "        ", "np", ".", "clip", "(", "x", ",", "0", ",", "2", "*", "s", ",", "out", "=", "x", ")", "# clip when using random_perspective()", "\n", "# img4, labels4 = replicate(img4, labels4)  # replicate", "\n", "\n", "# Augment", "\n", "", "img4", ",", "labels4", "=", "random_perspective", "(", "img4", ",", "labels4", ",", "segments4", ",", "\n", "degrees", "=", "self", ".", "hyp", "[", "'degrees'", "]", ",", "\n", "translate", "=", "self", ".", "hyp", "[", "'translate'", "]", ",", "\n", "scale", "=", "self", ".", "hyp", "[", "'scale'", "]", ",", "\n", "shear", "=", "self", ".", "hyp", "[", "'shear'", "]", ",", "\n", "perspective", "=", "self", ".", "hyp", "[", "'perspective'", "]", ",", "\n", "border", "=", "self", ".", "mosaic_border", ")", "# border to remove", "\n", "\n", "return", "img4", ",", "labels4", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.load_mosaic9": [[727, 799], ["enumerate", "numpy.concatenate", "numpy.array", "datasets.random_perspective", "random.choices", "datasets.load_image", "np.concatenate.append", "segments9.extend", "int", "numpy.clip", "numpy.full", "max", "datasets..labels[].copy", "datasets..segments[].copy", "utils.general.xywhn2xyxy", "random.uniform", "utils.general.xyn2xy"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.random_perspective", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.load_image", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xywhn2xyxy", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xyn2xy"], ["", "def", "load_mosaic9", "(", "self", ",", "index", ")", ":", "\n", "# loads images in a 9-mosaic", "\n", "\n", "    ", "labels9", ",", "segments9", "=", "[", "]", ",", "[", "]", "\n", "s", "=", "self", ".", "img_size", "\n", "indices", "=", "[", "index", "]", "+", "random", ".", "choices", "(", "self", ".", "indices", ",", "k", "=", "8", ")", "# 8 additional image indices", "\n", "for", "i", ",", "index", "in", "enumerate", "(", "indices", ")", ":", "\n", "# Load image", "\n", "        ", "img", ",", "_", ",", "(", "h", ",", "w", ")", "=", "load_image", "(", "self", ",", "index", ")", "\n", "\n", "# place img in img9", "\n", "if", "i", "==", "0", ":", "# center", "\n", "            ", "img9", "=", "np", ".", "full", "(", "(", "s", "*", "3", ",", "s", "*", "3", ",", "img", ".", "shape", "[", "2", "]", ")", ",", "114", ",", "dtype", "=", "np", ".", "uint8", ")", "# base image with 4 tiles", "\n", "h0", ",", "w0", "=", "h", ",", "w", "\n", "c", "=", "s", ",", "s", ",", "s", "+", "w", ",", "s", "+", "h", "# xmin, ymin, xmax, ymax (base) coordinates", "\n", "", "elif", "i", "==", "1", ":", "# top", "\n", "            ", "c", "=", "s", ",", "s", "-", "h", ",", "s", "+", "w", ",", "s", "\n", "", "elif", "i", "==", "2", ":", "# top right", "\n", "            ", "c", "=", "s", "+", "wp", ",", "s", "-", "h", ",", "s", "+", "wp", "+", "w", ",", "s", "\n", "", "elif", "i", "==", "3", ":", "# right", "\n", "            ", "c", "=", "s", "+", "w0", ",", "s", ",", "s", "+", "w0", "+", "w", ",", "s", "+", "h", "\n", "", "elif", "i", "==", "4", ":", "# bottom right", "\n", "            ", "c", "=", "s", "+", "w0", ",", "s", "+", "hp", ",", "s", "+", "w0", "+", "w", ",", "s", "+", "hp", "+", "h", "\n", "", "elif", "i", "==", "5", ":", "# bottom", "\n", "            ", "c", "=", "s", "+", "w0", "-", "w", ",", "s", "+", "h0", ",", "s", "+", "w0", ",", "s", "+", "h0", "+", "h", "\n", "", "elif", "i", "==", "6", ":", "# bottom left", "\n", "            ", "c", "=", "s", "+", "w0", "-", "wp", "-", "w", ",", "s", "+", "h0", ",", "s", "+", "w0", "-", "wp", ",", "s", "+", "h0", "+", "h", "\n", "", "elif", "i", "==", "7", ":", "# left", "\n", "            ", "c", "=", "s", "-", "w", ",", "s", "+", "h0", "-", "h", ",", "s", ",", "s", "+", "h0", "\n", "", "elif", "i", "==", "8", ":", "# top left", "\n", "            ", "c", "=", "s", "-", "w", ",", "s", "+", "h0", "-", "hp", "-", "h", ",", "s", ",", "s", "+", "h0", "-", "hp", "\n", "\n", "", "padx", ",", "pady", "=", "c", "[", ":", "2", "]", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "[", "max", "(", "x", ",", "0", ")", "for", "x", "in", "c", "]", "# allocate coords", "\n", "\n", "# Labels", "\n", "labels", ",", "segments", "=", "self", ".", "labels", "[", "index", "]", ".", "copy", "(", ")", ",", "self", ".", "segments", "[", "index", "]", ".", "copy", "(", ")", "\n", "if", "labels", ".", "size", ":", "\n", "            ", "labels", "[", ":", ",", "1", ":", "]", "=", "xywhn2xyxy", "(", "labels", "[", ":", ",", "1", ":", "]", ",", "w", ",", "h", ",", "padx", ",", "pady", ")", "# normalized xywh to pixel xyxy format", "\n", "segments", "=", "[", "xyn2xy", "(", "x", ",", "w", ",", "h", ",", "padx", ",", "pady", ")", "for", "x", "in", "segments", "]", "\n", "", "labels9", ".", "append", "(", "labels", ")", "\n", "segments9", ".", "extend", "(", "segments", ")", "\n", "\n", "# Image", "\n", "img9", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "img", "[", "y1", "-", "pady", ":", ",", "x1", "-", "padx", ":", "]", "# img9[ymin:ymax, xmin:xmax]", "\n", "hp", ",", "wp", "=", "h", ",", "w", "# height, width previous", "\n", "\n", "# Offset", "\n", "", "yc", ",", "xc", "=", "[", "int", "(", "random", ".", "uniform", "(", "0", ",", "s", ")", ")", "for", "_", "in", "self", ".", "mosaic_border", "]", "# mosaic center x, y", "\n", "img9", "=", "img9", "[", "yc", ":", "yc", "+", "2", "*", "s", ",", "xc", ":", "xc", "+", "2", "*", "s", "]", "\n", "\n", "# Concat/clip labels", "\n", "labels9", "=", "np", ".", "concatenate", "(", "labels9", ",", "0", ")", "\n", "labels9", "[", ":", ",", "[", "1", ",", "3", "]", "]", "-=", "xc", "\n", "labels9", "[", ":", ",", "[", "2", ",", "4", "]", "]", "-=", "yc", "\n", "c", "=", "np", ".", "array", "(", "[", "xc", ",", "yc", "]", ")", "# centers", "\n", "segments9", "=", "[", "x", "-", "c", "for", "x", "in", "segments9", "]", "\n", "\n", "for", "x", "in", "(", "labels9", "[", ":", ",", "1", ":", "]", ",", "*", "segments9", ")", ":", "\n", "        ", "np", ".", "clip", "(", "x", ",", "0", ",", "2", "*", "s", ",", "out", "=", "x", ")", "# clip when using random_perspective()", "\n", "# img9, labels9 = replicate(img9, labels9)  # replicate", "\n", "\n", "# Augment", "\n", "", "img9", ",", "labels9", "=", "random_perspective", "(", "img9", ",", "labels9", ",", "segments9", ",", "\n", "degrees", "=", "self", ".", "hyp", "[", "'degrees'", "]", ",", "\n", "translate", "=", "self", ".", "hyp", "[", "'translate'", "]", ",", "\n", "scale", "=", "self", ".", "hyp", "[", "'scale'", "]", ",", "\n", "shear", "=", "self", ".", "hyp", "[", "'shear'", "]", ",", "\n", "perspective", "=", "self", ".", "hyp", "[", "'perspective'", "]", ",", "\n", "border", "=", "self", ".", "mosaic_border", ")", "# border to remove", "\n", "\n", "return", "img9", ",", "labels9", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.replicate": [[801, 816], ["labels[].astype", "s.argsort", "numpy.append", "round", "int", "int", "random.uniform", "random.uniform"], "function", ["None"], ["", "def", "replicate", "(", "img", ",", "labels", ")", ":", "\n", "# Replicate labels", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "boxes", "=", "labels", "[", ":", ",", "1", ":", "]", ".", "astype", "(", "int", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "boxes", ".", "T", "\n", "s", "=", "(", "(", "x2", "-", "x1", ")", "+", "(", "y2", "-", "y1", ")", ")", "/", "2", "# side length (pixels)", "\n", "for", "i", "in", "s", ".", "argsort", "(", ")", "[", ":", "round", "(", "s", ".", "size", "*", "0.5", ")", "]", ":", "# smallest indices", "\n", "        ", "x1b", ",", "y1b", ",", "x2b", ",", "y2b", "=", "boxes", "[", "i", "]", "\n", "bh", ",", "bw", "=", "y2b", "-", "y1b", ",", "x2b", "-", "x1b", "\n", "yc", ",", "xc", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "h", "-", "bh", ")", ")", ",", "int", "(", "random", ".", "uniform", "(", "0", ",", "w", "-", "bw", ")", ")", "# offset x, y", "\n", "x1a", ",", "y1a", ",", "x2a", ",", "y2a", "=", "[", "xc", ",", "yc", ",", "xc", "+", "bw", ",", "yc", "+", "bh", "]", "\n", "img", "[", "y1a", ":", "y2a", ",", "x1a", ":", "x2a", "]", "=", "img", "[", "y1b", ":", "y2b", ",", "x1b", ":", "x2b", "]", "# img4[ymin:ymax, xmin:xmax]", "\n", "labels", "=", "np", ".", "append", "(", "labels", ",", "[", "[", "labels", "[", "i", ",", "0", "]", ",", "x1a", ",", "y1a", ",", "x2a", ",", "y2a", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "img", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.letterbox": [[818, 849], ["isinstance", "min", "cv2.copyMakeBorder", "min", "int", "int", "cv2.resize", "int", "int", "int", "int", "round", "round", "numpy.mod", "numpy.mod", "round", "round", "round", "round"], "function", ["None"], ["", "def", "letterbox", "(", "img", ",", "new_shape", "=", "(", "640", ",", "640", ")", ",", "color", "=", "(", "114", ",", "114", ",", "114", ")", ",", "auto", "=", "True", ",", "scaleFill", "=", "False", ",", "scaleup", "=", "True", ",", "stride", "=", "32", ")", ":", "\n", "# Resize and pad image while meeting stride-multiple constraints", "\n", "    ", "shape", "=", "img", ".", "shape", "[", ":", "2", "]", "# current shape [height, width]", "\n", "if", "isinstance", "(", "new_shape", ",", "int", ")", ":", "\n", "        ", "new_shape", "=", "(", "new_shape", ",", "new_shape", ")", "\n", "\n", "# Scale ratio (new / old)", "\n", "", "r", "=", "min", "(", "new_shape", "[", "0", "]", "/", "shape", "[", "0", "]", ",", "new_shape", "[", "1", "]", "/", "shape", "[", "1", "]", ")", "\n", "if", "not", "scaleup", ":", "# only scale down, do not scale up (for better test mAP)", "\n", "        ", "r", "=", "min", "(", "r", ",", "1.0", ")", "\n", "\n", "# Compute padding", "\n", "", "ratio", "=", "r", ",", "r", "# width, height ratios", "\n", "new_unpad", "=", "int", "(", "round", "(", "shape", "[", "1", "]", "*", "r", ")", ")", ",", "int", "(", "round", "(", "shape", "[", "0", "]", "*", "r", ")", ")", "\n", "dw", ",", "dh", "=", "new_shape", "[", "1", "]", "-", "new_unpad", "[", "0", "]", ",", "new_shape", "[", "0", "]", "-", "new_unpad", "[", "1", "]", "# wh padding", "\n", "if", "auto", ":", "# minimum rectangle", "\n", "        ", "dw", ",", "dh", "=", "np", ".", "mod", "(", "dw", ",", "stride", ")", ",", "np", ".", "mod", "(", "dh", ",", "stride", ")", "# wh padding", "\n", "", "elif", "scaleFill", ":", "# stretch", "\n", "        ", "dw", ",", "dh", "=", "0.0", ",", "0.0", "\n", "new_unpad", "=", "(", "new_shape", "[", "1", "]", ",", "new_shape", "[", "0", "]", ")", "\n", "ratio", "=", "new_shape", "[", "1", "]", "/", "shape", "[", "1", "]", ",", "new_shape", "[", "0", "]", "/", "shape", "[", "0", "]", "# width, height ratios", "\n", "\n", "", "dw", "/=", "2", "# divide padding into 2 sides", "\n", "dh", "/=", "2", "\n", "\n", "if", "shape", "[", ":", ":", "-", "1", "]", "!=", "new_unpad", ":", "# resize", "\n", "        ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "new_unpad", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "top", ",", "bottom", "=", "int", "(", "round", "(", "dh", "-", "0.1", ")", ")", ",", "int", "(", "round", "(", "dh", "+", "0.1", ")", ")", "\n", "left", ",", "right", "=", "int", "(", "round", "(", "dw", "-", "0.1", ")", ")", ",", "int", "(", "round", "(", "dw", "+", "0.1", ")", ")", "\n", "img", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "top", ",", "bottom", ",", "left", ",", "right", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "color", ")", "# add border", "\n", "return", "img", ",", "ratio", ",", "(", "dw", ",", "dh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.random_perspective": [[851, 938], ["numpy.eye", "numpy.eye", "random.uniform", "random.uniform", "numpy.eye", "random.uniform", "random.uniform", "cv2.getRotationMatrix2D", "numpy.eye", "math.tan", "math.tan", "numpy.eye", "len", "random.uniform", "random.uniform", "any", "numpy.zeros", "datasets.box_candidates", "cv2.warpPerspective", "cv2.warpAffine", "utils.general.resample_segments", "enumerate", "numpy.ones", "targets[].reshape", "new[].clip", "new[].clip", "random.uniform", "random.uniform", "x.any", "numpy.ones", "utils.general.segment2box", "numpy.concatenate().reshape", "numpy.eye", "len", "numpy.concatenate", "x.min", "y.min", "x.max", "y.max"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.box_candidates", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.resample_segments", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.segment2box"], ["", "def", "random_perspective", "(", "img", ",", "targets", "=", "(", ")", ",", "segments", "=", "(", ")", ",", "degrees", "=", "10", ",", "translate", "=", ".1", ",", "scale", "=", ".1", ",", "shear", "=", "10", ",", "perspective", "=", "0.0", ",", "\n", "border", "=", "(", "0", ",", "0", ")", ")", ":", "\n", "# torchvision.transforms.RandomAffine(degrees=(-10, 10), translate=(.1, .1), scale=(.9, 1.1), shear=(-10, 10))", "\n", "# targets = [cls, xyxy]", "\n", "\n", "    ", "height", "=", "img", ".", "shape", "[", "0", "]", "+", "border", "[", "0", "]", "*", "2", "# shape(h,w,c)", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", "+", "border", "[", "1", "]", "*", "2", "\n", "\n", "# Center", "\n", "C", "=", "np", ".", "eye", "(", "3", ")", "\n", "C", "[", "0", ",", "2", "]", "=", "-", "img", ".", "shape", "[", "1", "]", "/", "2", "# x translation (pixels)", "\n", "C", "[", "1", ",", "2", "]", "=", "-", "img", ".", "shape", "[", "0", "]", "/", "2", "# y translation (pixels)", "\n", "\n", "# Perspective", "\n", "P", "=", "np", ".", "eye", "(", "3", ")", "\n", "P", "[", "2", ",", "0", "]", "=", "random", ".", "uniform", "(", "-", "perspective", ",", "perspective", ")", "# x perspective (about y)", "\n", "P", "[", "2", ",", "1", "]", "=", "random", ".", "uniform", "(", "-", "perspective", ",", "perspective", ")", "# y perspective (about x)", "\n", "\n", "# Rotation and Scale", "\n", "R", "=", "np", ".", "eye", "(", "3", ")", "\n", "a", "=", "random", ".", "uniform", "(", "-", "degrees", ",", "degrees", ")", "\n", "# a += random.choice([-180, -90, 0, 90])  # add 90deg rotations to small rotations", "\n", "s", "=", "random", ".", "uniform", "(", "1", "-", "scale", ",", "1", "+", "scale", ")", "\n", "# s = 2 ** random.uniform(-scale, scale)", "\n", "R", "[", ":", "2", "]", "=", "cv2", ".", "getRotationMatrix2D", "(", "angle", "=", "a", ",", "center", "=", "(", "0", ",", "0", ")", ",", "scale", "=", "s", ")", "\n", "\n", "# Shear", "\n", "S", "=", "np", ".", "eye", "(", "3", ")", "\n", "S", "[", "0", ",", "1", "]", "=", "math", ".", "tan", "(", "random", ".", "uniform", "(", "-", "shear", ",", "shear", ")", "*", "math", ".", "pi", "/", "180", ")", "# x shear (deg)", "\n", "S", "[", "1", ",", "0", "]", "=", "math", ".", "tan", "(", "random", ".", "uniform", "(", "-", "shear", ",", "shear", ")", "*", "math", ".", "pi", "/", "180", ")", "# y shear (deg)", "\n", "\n", "# Translation", "\n", "T", "=", "np", ".", "eye", "(", "3", ")", "\n", "T", "[", "0", ",", "2", "]", "=", "random", ".", "uniform", "(", "0.5", "-", "translate", ",", "0.5", "+", "translate", ")", "*", "width", "# x translation (pixels)", "\n", "T", "[", "1", ",", "2", "]", "=", "random", ".", "uniform", "(", "0.5", "-", "translate", ",", "0.5", "+", "translate", ")", "*", "height", "# y translation (pixels)", "\n", "\n", "# Combined rotation matrix", "\n", "M", "=", "T", "@", "S", "@", "R", "@", "P", "@", "C", "# order of operations (right to left) is IMPORTANT", "\n", "if", "(", "border", "[", "0", "]", "!=", "0", ")", "or", "(", "border", "[", "1", "]", "!=", "0", ")", "or", "(", "M", "!=", "np", ".", "eye", "(", "3", ")", ")", ".", "any", "(", ")", ":", "# image changed", "\n", "        ", "if", "perspective", ":", "\n", "            ", "img", "=", "cv2", ".", "warpPerspective", "(", "img", ",", "M", ",", "dsize", "=", "(", "width", ",", "height", ")", ",", "borderValue", "=", "(", "114", ",", "114", ",", "114", ")", ")", "\n", "", "else", ":", "# affine", "\n", "            ", "img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "M", "[", ":", "2", "]", ",", "dsize", "=", "(", "width", ",", "height", ")", ",", "borderValue", "=", "(", "114", ",", "114", ",", "114", ")", ")", "\n", "\n", "# Visualize", "\n", "# import matplotlib.pyplot as plt", "\n", "# ax = plt.subplots(1, 2, figsize=(12, 6))[1].ravel()", "\n", "# ax[0].imshow(img[:, :, ::-1])  # base", "\n", "# ax[1].imshow(img2[:, :, ::-1])  # warped", "\n", "\n", "# Transform label coordinates", "\n", "", "", "n", "=", "len", "(", "targets", ")", "\n", "if", "n", ":", "\n", "        ", "use_segments", "=", "any", "(", "x", ".", "any", "(", ")", "for", "x", "in", "segments", ")", "\n", "new", "=", "np", ".", "zeros", "(", "(", "n", ",", "4", ")", ")", "\n", "if", "use_segments", ":", "# warp segments", "\n", "            ", "segments", "=", "resample_segments", "(", "segments", ")", "# upsample", "\n", "for", "i", ",", "segment", "in", "enumerate", "(", "segments", ")", ":", "\n", "                ", "xy", "=", "np", ".", "ones", "(", "(", "len", "(", "segment", ")", ",", "3", ")", ")", "\n", "xy", "[", ":", ",", ":", "2", "]", "=", "segment", "\n", "xy", "=", "xy", "@", "M", ".", "T", "# transform", "\n", "xy", "=", "xy", "[", ":", ",", ":", "2", "]", "/", "xy", "[", ":", ",", "2", ":", "3", "]", "if", "perspective", "else", "xy", "[", ":", ",", ":", "2", "]", "# perspective rescale or affine", "\n", "\n", "# clip", "\n", "new", "[", "i", "]", "=", "segment2box", "(", "xy", ",", "width", ",", "height", ")", "\n", "\n", "", "", "else", ":", "# warp boxes", "\n", "            ", "xy", "=", "np", ".", "ones", "(", "(", "n", "*", "4", ",", "3", ")", ")", "\n", "xy", "[", ":", ",", ":", "2", "]", "=", "targets", "[", ":", ",", "[", "1", ",", "2", ",", "3", ",", "4", ",", "1", ",", "4", ",", "3", ",", "2", "]", "]", ".", "reshape", "(", "n", "*", "4", ",", "2", ")", "# x1y1, x2y2, x1y2, x2y1", "\n", "xy", "=", "xy", "@", "M", ".", "T", "# transform", "\n", "xy", "=", "(", "xy", "[", ":", ",", ":", "2", "]", "/", "xy", "[", ":", ",", "2", ":", "3", "]", "if", "perspective", "else", "xy", "[", ":", ",", ":", "2", "]", ")", ".", "reshape", "(", "n", ",", "8", ")", "# perspective rescale or affine", "\n", "\n", "# create new boxes", "\n", "x", "=", "xy", "[", ":", ",", "[", "0", ",", "2", ",", "4", ",", "6", "]", "]", "\n", "y", "=", "xy", "[", ":", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", "\n", "new", "=", "np", ".", "concatenate", "(", "(", "x", ".", "min", "(", "1", ")", ",", "y", ".", "min", "(", "1", ")", ",", "x", ".", "max", "(", "1", ")", ",", "y", ".", "max", "(", "1", ")", ")", ")", ".", "reshape", "(", "4", ",", "n", ")", ".", "T", "\n", "\n", "# clip", "\n", "new", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "new", "[", ":", ",", "[", "0", ",", "2", "]", "]", ".", "clip", "(", "0", ",", "width", ")", "\n", "new", "[", ":", ",", "[", "1", ",", "3", "]", "]", "=", "new", "[", ":", ",", "[", "1", ",", "3", "]", "]", ".", "clip", "(", "0", ",", "height", ")", "\n", "\n", "# filter candidates", "\n", "", "i", "=", "box_candidates", "(", "box1", "=", "targets", "[", ":", ",", "1", ":", "5", "]", ".", "T", "*", "s", ",", "box2", "=", "new", ".", "T", ",", "area_thr", "=", "0.01", "if", "use_segments", "else", "0.10", ")", "\n", "targets", "=", "targets", "[", "i", "]", "\n", "targets", "[", ":", ",", "1", ":", "5", "]", "=", "new", "[", "i", "]", "\n", "\n", "", "return", "img", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.box_candidates": [[940, 946], ["numpy.maximum"], "function", ["None"], ["", "def", "box_candidates", "(", "box1", ",", "box2", ",", "wh_thr", "=", "2", ",", "ar_thr", "=", "20", ",", "area_thr", "=", "0.1", ",", "eps", "=", "1e-16", ")", ":", "# box1(4,n), box2(4,n)", "\n", "# Compute candidate boxes: box1 before augment, box2 after augment, wh_thr (pixels), aspect_ratio_thr, area_ratio", "\n", "    ", "w1", ",", "h1", "=", "box1", "[", "2", "]", "-", "box1", "[", "0", "]", ",", "box1", "[", "3", "]", "-", "box1", "[", "1", "]", "\n", "w2", ",", "h2", "=", "box2", "[", "2", "]", "-", "box2", "[", "0", "]", ",", "box2", "[", "3", "]", "-", "box2", "[", "1", "]", "\n", "ar", "=", "np", ".", "maximum", "(", "w2", "/", "(", "h2", "+", "eps", ")", ",", "h2", "/", "(", "w2", "+", "eps", ")", ")", "# aspect ratio", "\n", "return", "(", "w2", ">", "wh_thr", ")", "&", "(", "h2", ">", "wh_thr", ")", "&", "(", "w2", "*", "h2", "/", "(", "w1", "*", "h1", "+", "eps", ")", ">", "area_thr", ")", "&", "(", "ar", "<", "ar_thr", ")", "# candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.cutout": [[948, 992], ["box2.transpose.transpose", "random.randint", "random.randint", "max", "max", "min", "min", "int", "int", "random.randint", "len", "numpy.array", "datasets.cutout.bbox_ioa"], "function", ["None"], ["", "def", "cutout", "(", "image", ",", "labels", ")", ":", "\n", "# Applies image cutout augmentation https://arxiv.org/abs/1708.04552", "\n", "    ", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "\n", "def", "bbox_ioa", "(", "box1", ",", "box2", ")", ":", "\n", "# Returns the intersection over box2 area given box1, box2. box1 is 4, box2 is nx4. boxes are x1y1x2y2", "\n", "        ", "box2", "=", "box2", ".", "transpose", "(", ")", "\n", "\n", "# Get the coordinates of bounding boxes", "\n", "b1_x1", ",", "b1_y1", ",", "b1_x2", ",", "b1_y2", "=", "box1", "[", "0", "]", ",", "box1", "[", "1", "]", ",", "box1", "[", "2", "]", ",", "box1", "[", "3", "]", "\n", "b2_x1", ",", "b2_y1", ",", "b2_x2", ",", "b2_y2", "=", "box2", "[", "0", "]", ",", "box2", "[", "1", "]", ",", "box2", "[", "2", "]", ",", "box2", "[", "3", "]", "\n", "\n", "# Intersection area", "\n", "inter_area", "=", "(", "np", ".", "minimum", "(", "b1_x2", ",", "b2_x2", ")", "-", "np", ".", "maximum", "(", "b1_x1", ",", "b2_x1", ")", ")", ".", "clip", "(", "0", ")", "*", "(", "np", ".", "minimum", "(", "b1_y2", ",", "b2_y2", ")", "-", "np", ".", "maximum", "(", "b1_y1", ",", "b2_y1", ")", ")", ".", "clip", "(", "0", ")", "\n", "\n", "# box2 area", "\n", "box2_area", "=", "(", "b2_x2", "-", "b2_x1", ")", "*", "(", "b2_y2", "-", "b2_y1", ")", "+", "1e-16", "\n", "\n", "# Intersection over box2 area", "\n", "return", "inter_area", "/", "box2_area", "\n", "\n", "# create random masks", "\n", "", "scales", "=", "[", "0.5", "]", "*", "1", "+", "[", "0.25", "]", "*", "2", "+", "[", "0.125", "]", "*", "4", "+", "[", "0.0625", "]", "*", "8", "+", "[", "0.03125", "]", "*", "16", "# image size fraction", "\n", "for", "s", "in", "scales", ":", "\n", "        ", "mask_h", "=", "random", ".", "randint", "(", "1", ",", "int", "(", "h", "*", "s", ")", ")", "\n", "mask_w", "=", "random", ".", "randint", "(", "1", ",", "int", "(", "w", "*", "s", ")", ")", "\n", "\n", "# box", "\n", "xmin", "=", "max", "(", "0", ",", "random", ".", "randint", "(", "0", ",", "w", ")", "-", "mask_w", "//", "2", ")", "\n", "ymin", "=", "max", "(", "0", ",", "random", ".", "randint", "(", "0", ",", "h", ")", "-", "mask_h", "//", "2", ")", "\n", "xmax", "=", "min", "(", "w", ",", "xmin", "+", "mask_w", ")", "\n", "ymax", "=", "min", "(", "h", ",", "ymin", "+", "mask_h", ")", "\n", "\n", "# apply random color mask", "\n", "image", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "=", "[", "random", ".", "randint", "(", "64", ",", "191", ")", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "\n", "# return unobscured labels", "\n", "if", "len", "(", "labels", ")", "and", "s", ">", "0.03", ":", "\n", "            ", "box", "=", "np", ".", "array", "(", "[", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ioa", "=", "bbox_ioa", "(", "box", ",", "labels", "[", ":", ",", "1", ":", "5", "]", ")", "# intersection over area", "\n", "labels", "=", "labels", "[", "ioa", "<", "0.60", "]", "# remove >60% obscured labels", "\n", "\n", "", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.create_folder": [[994, 999], ["os.path.exists", "os.makedirs", "shutil.rmtree"], "function", ["None"], ["", "def", "create_folder", "(", "path", "=", "'./new'", ")", ":", "\n", "# Create folder", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "path", ")", "# delete output folder", "\n", "", "os", ".", "makedirs", "(", "path", ")", "# make new output folder", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.flatten_recursive": [[1001, 1007], ["pathlib.Path", "datasets.create_folder", "tqdm.tqdm", "glob.glob", "shutil.copyfile", "str", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.create_folder"], ["", "def", "flatten_recursive", "(", "path", "=", "'../coco128'", ")", ":", "\n", "# Flatten a recursive directory by bringing all files to top level", "\n", "    ", "new_path", "=", "Path", "(", "path", "+", "'_flat'", ")", "\n", "create_folder", "(", "new_path", ")", "\n", "for", "file", "in", "tqdm", "(", "glob", ".", "glob", "(", "str", "(", "Path", "(", "path", ")", ")", "+", "'/**/*.*'", ",", "recursive", "=", "True", ")", ")", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "file", ",", "new_path", "/", "Path", "(", "file", ")", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.extract_boxes": [[1009, 1042], ["pathlib.Path", "list", "len", "tqdm.tqdm", "shutil.rmtree", "pathlib.Path.rglob", "pathlib.Path", "pathlib.Path().exists", "cv2.imread", "enumerate", "str", "datasets.img2label_paths", "pathlib.Path", "open", "numpy.array", "int", "utils.general.xywh2xyxy().ravel().astype", "numpy.clip", "numpy.clip", "cv2.imwrite", "f.parent.is_dir", "f.parent.mkdir", "str", "str", "x.split", "utils.general.xywh2xyxy().ravel", "f.read().strip().splitlines", "utils.general.xywh2xyxy", "f.read().strip", "xywh2xyxy().ravel().astype.reshape", "f.read"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.img2label_paths", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xywh2xyxy"], ["", "", "def", "extract_boxes", "(", "path", "=", "'../coco128/'", ")", ":", "# from utils.datasets import *; extract_boxes('../coco128')", "\n", "# Convert detection dataset into classification dataset, with one directory per class", "\n", "\n", "    ", "path", "=", "Path", "(", "path", ")", "# images dir", "\n", "shutil", ".", "rmtree", "(", "path", "/", "'classifier'", ")", "if", "(", "path", "/", "'classifier'", ")", ".", "is_dir", "(", ")", "else", "None", "# remove existing", "\n", "files", "=", "list", "(", "path", ".", "rglob", "(", "'*.*'", ")", ")", "\n", "n", "=", "len", "(", "files", ")", "# number of files", "\n", "for", "im_file", "in", "tqdm", "(", "files", ",", "total", "=", "n", ")", ":", "\n", "        ", "if", "im_file", ".", "suffix", "[", "1", ":", "]", "in", "img_formats", ":", "\n", "# image", "\n", "            ", "im", "=", "cv2", ".", "imread", "(", "str", "(", "im_file", ")", ")", "[", "...", ",", ":", ":", "-", "1", "]", "# BGR to RGB", "\n", "h", ",", "w", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# labels", "\n", "lb_file", "=", "Path", "(", "img2label_paths", "(", "[", "str", "(", "im_file", ")", "]", ")", "[", "0", "]", ")", "\n", "if", "Path", "(", "lb_file", ")", ".", "exists", "(", ")", ":", "\n", "                ", "with", "open", "(", "lb_file", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "lb", "=", "np", ".", "array", "(", "[", "x", ".", "split", "(", ")", "for", "x", "in", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "splitlines", "(", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "# labels", "\n", "\n", "", "for", "j", ",", "x", "in", "enumerate", "(", "lb", ")", ":", "\n", "                    ", "c", "=", "int", "(", "x", "[", "0", "]", ")", "# class", "\n", "f", "=", "(", "path", "/", "'classifier'", ")", "/", "f'{c}'", "/", "f'{path.stem}_{im_file.stem}_{j}.jpg'", "# new filename", "\n", "if", "not", "f", ".", "parent", ".", "is_dir", "(", ")", ":", "\n", "                        ", "f", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "", "b", "=", "x", "[", "1", ":", "]", "*", "[", "w", ",", "h", ",", "w", ",", "h", "]", "# box", "\n", "# b[2:] = b[2:].max()  # rectangle to square", "\n", "b", "[", "2", ":", "]", "=", "b", "[", "2", ":", "]", "*", "1.2", "+", "3", "# pad", "\n", "b", "=", "xywh2xyxy", "(", "b", ".", "reshape", "(", "-", "1", ",", "4", ")", ")", ".", "ravel", "(", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "b", "[", "[", "0", ",", "2", "]", "]", "=", "np", ".", "clip", "(", "b", "[", "[", "0", ",", "2", "]", "]", ",", "0", ",", "w", ")", "# clip boxes outside of image", "\n", "b", "[", "[", "1", ",", "3", "]", "]", "=", "np", ".", "clip", "(", "b", "[", "[", "1", ",", "3", "]", "]", ",", "0", ",", "h", ")", "\n", "assert", "cv2", ".", "imwrite", "(", "str", "(", "f", ")", ",", "im", "[", "b", "[", "1", "]", ":", "b", "[", "3", "]", ",", "b", "[", "0", "]", ":", "b", "[", "2", "]", "]", ")", ",", "f'box failure in {f}'", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.autosplit": [[1044, 1065], ["pathlib.Path", "sum", "len", "random.choices", "print", "tqdm.tqdm", "zip", "list", "pathlib.Path().exists", "pathlib.Path.rglob", "open", "f.write", "pathlib.Path", "str", "datasets.img2label_paths", "str"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.img2label_paths"], ["", "", "", "", "", "def", "autosplit", "(", "path", "=", "'../coco128'", ",", "weights", "=", "(", "0.9", ",", "0.1", ",", "0.0", ")", ",", "annotated_only", "=", "False", ")", ":", "\n", "    ", "\"\"\" Autosplit a dataset into train/val/test splits and save path/autosplit_*.txt files\n    Usage: from utils.datasets import *; autosplit('../coco128')\n    Arguments\n        path:           Path to images directory\n        weights:        Train, val, test weights (list)\n        annotated_only: Only use images with an annotated txt file\n    \"\"\"", "\n", "path", "=", "Path", "(", "path", ")", "# images dir", "\n", "files", "=", "sum", "(", "[", "list", "(", "path", ".", "rglob", "(", "f\"*.{img_ext}\"", ")", ")", "for", "img_ext", "in", "img_formats", "]", ",", "[", "]", ")", "# image files only", "\n", "n", "=", "len", "(", "files", ")", "# number of files", "\n", "indices", "=", "random", ".", "choices", "(", "[", "0", ",", "1", ",", "2", "]", ",", "weights", "=", "weights", ",", "k", "=", "n", ")", "# assign each image to a split", "\n", "\n", "txt", "=", "[", "'autosplit_train.txt'", ",", "'autosplit_val.txt'", ",", "'autosplit_test.txt'", "]", "# 3 txt files", "\n", "[", "(", "path", "/", "x", ")", ".", "unlink", "(", ")", "for", "x", "in", "txt", "if", "(", "path", "/", "x", ")", ".", "exists", "(", ")", "]", "# remove existing", "\n", "\n", "print", "(", "f'Autosplitting images from {path}'", "+", "', using *.txt labeled images only'", "*", "annotated_only", ")", "\n", "for", "i", ",", "img", "in", "tqdm", "(", "zip", "(", "indices", ",", "files", ")", ",", "total", "=", "n", ")", ":", "\n", "        ", "if", "not", "annotated_only", "or", "Path", "(", "img2label_paths", "(", "[", "str", "(", "img", ")", "]", ")", "[", "0", "]", ")", ".", "exists", "(", ")", ":", "# check label", "\n", "            ", "with", "open", "(", "path", "/", "txt", "[", "i", "]", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "str", "(", "img", ")", "+", "'\\n'", ")", "# add image to txt file", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.__init__": [[81, 114], ["isinstance", "opt.resume.startswith", "utils.general.colorstr", "print", "wandb_utils.get_run_info", "wandb.init", "wandb_utils.WandbLogger.setup_training", "wandb_utils.WandbLogger.check_and_upload_dataset", "wandb.init", "vars", "wandb_utils.WandbLogger.check_and_upload_dataset", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.colorstr", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.get_run_info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.setup_training", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.check_and_upload_dataset", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.check_and_upload_dataset"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "name", ",", "run_id", ",", "data_dict", ",", "job_type", "=", "'Training'", ")", ":", "\n", "# Pre-training routine --", "\n", "        ", "self", ".", "job_type", "=", "job_type", "\n", "self", ".", "wandb", ",", "self", ".", "wandb_run", ",", "self", ".", "data_dict", "=", "wandb", ",", "None", "if", "not", "wandb", "else", "wandb", ".", "run", ",", "data_dict", "\n", "# It's more elegant to stick to 1 wandb.init call, but useful config data is overwritten in the WandbLogger's wandb.init call", "\n", "if", "isinstance", "(", "opt", ".", "resume", ",", "str", ")", ":", "# checks resume from artifact", "\n", "            ", "if", "opt", ".", "resume", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "                ", "run_id", ",", "project", ",", "model_artifact_name", "=", "get_run_info", "(", "opt", ".", "resume", ")", "\n", "model_artifact_name", "=", "WANDB_ARTIFACT_PREFIX", "+", "model_artifact_name", "\n", "assert", "wandb", ",", "'install wandb to resume wandb runs'", "\n", "# Resume wandb-artifact:// runs here| workaround for not overwriting wandb.config", "\n", "self", ".", "wandb_run", "=", "wandb", ".", "init", "(", "id", "=", "run_id", ",", "project", "=", "project", ",", "resume", "=", "'allow'", ")", "\n", "opt", ".", "resume", "=", "model_artifact_name", "\n", "", "", "elif", "self", ".", "wandb", ":", "\n", "            ", "self", ".", "wandb_run", "=", "wandb", ".", "init", "(", "config", "=", "opt", ",", "\n", "resume", "=", "\"allow\"", ",", "\n", "project", "=", "'YOLOv5'", "if", "opt", ".", "project", "==", "'runs/train'", "else", "Path", "(", "opt", ".", "project", ")", ".", "stem", ",", "\n", "name", "=", "name", ",", "\n", "job_type", "=", "job_type", ",", "\n", "id", "=", "run_id", ")", "if", "not", "wandb", ".", "run", "else", "wandb", ".", "run", "\n", "", "if", "self", ".", "wandb_run", ":", "\n", "            ", "if", "self", ".", "job_type", "==", "'Training'", ":", "\n", "                ", "if", "not", "opt", ".", "resume", ":", "\n", "                    ", "wandb_data_dict", "=", "self", ".", "check_and_upload_dataset", "(", "opt", ")", "if", "opt", ".", "upload_dataset", "else", "data_dict", "\n", "# Info useful for resuming from artifacts", "\n", "self", ".", "wandb_run", ".", "config", ".", "opt", "=", "vars", "(", "opt", ")", "\n", "self", ".", "wandb_run", ".", "config", ".", "data_dict", "=", "wandb_data_dict", "\n", "", "self", ".", "data_dict", "=", "self", ".", "setup_training", "(", "opt", ",", "data_dict", ")", "\n", "", "if", "self", ".", "job_type", "==", "'Dataset Creation'", ":", "\n", "                ", "self", ".", "data_dict", "=", "self", ".", "check_and_upload_dataset", "(", "opt", ")", "\n", "", "", "else", ":", "\n", "            ", "prefix", "=", "colorstr", "(", "'wandb: '", ")", "\n", "print", "(", "f\"{prefix}Install Weights & Biases for YOLOv5 logging with 'pip install wandb' (recommended)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.check_and_upload_dataset": [[115, 125], ["utils.general.check_dataset", "wandb_utils.WandbLogger.log_dataset_artifact", "print", "open", "yaml.load", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.check_dataset", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log_dataset_artifact", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "", "def", "check_and_upload_dataset", "(", "self", ",", "opt", ")", ":", "\n", "        ", "assert", "wandb", ",", "'Install wandb to upload dataset'", "\n", "check_dataset", "(", "self", ".", "data_dict", ")", "\n", "config_path", "=", "self", ".", "log_dataset_artifact", "(", "opt", ".", "data", ",", "\n", "opt", ".", "single_cls", ",", "\n", "'YOLOv5'", "if", "opt", ".", "project", "==", "'runs/train'", "else", "Path", "(", "opt", ".", "project", ")", ".", "stem", ")", "\n", "print", "(", "\"Created dataset config file \"", ",", "config_path", ")", "\n", "with", "open", "(", "config_path", ")", "as", "f", ":", "\n", "            ", "wandb_data_dict", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", "\n", "", "return", "wandb_data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.setup_training": [[126, 158], ["isinstance", "wandb_utils.WandbLogger.download_model_artifact", "dict", "wandb_utils.WandbLogger.download_dataset_artifact", "wandb_utils.WandbLogger.download_dataset_artifact", "wandb.Artifact", "wandb.Table", "dict.get", "dict.get", "str", "str", "wandb_utils.WandbLogger.val_artifact.get", "wandb_utils.WandbLogger.map_val_table_path", "pathlib.Path", "str", "pathlib.Path", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.download_model_artifact", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.download_dataset_artifact", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.download_dataset_artifact", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.map_val_table_path"], ["", "def", "setup_training", "(", "self", ",", "opt", ",", "data_dict", ")", ":", "\n", "        ", "self", ".", "log_dict", ",", "self", ".", "current_epoch", ",", "self", ".", "log_imgs", "=", "{", "}", ",", "0", ",", "16", "# Logging Constants", "\n", "self", ".", "bbox_interval", "=", "opt", ".", "bbox_interval", "\n", "if", "isinstance", "(", "opt", ".", "resume", ",", "str", ")", ":", "\n", "            ", "modeldir", ",", "_", "=", "self", ".", "download_model_artifact", "(", "opt", ")", "\n", "if", "modeldir", ":", "\n", "                ", "self", ".", "weights", "=", "Path", "(", "modeldir", ")", "/", "\"last.pt\"", "\n", "config", "=", "self", ".", "wandb_run", ".", "config", "\n", "opt", ".", "weights", ",", "opt", ".", "save_period", ",", "opt", ".", "batch_size", ",", "opt", ".", "bbox_interval", ",", "opt", ".", "epochs", ",", "opt", ".", "hyp", "=", "str", "(", "\n", "self", ".", "weights", ")", ",", "config", ".", "save_period", ",", "config", ".", "total_batch_size", ",", "config", ".", "bbox_interval", ",", "config", ".", "epochs", ",", "config", ".", "opt", "[", "'hyp'", "]", "\n", "", "data_dict", "=", "dict", "(", "self", ".", "wandb_run", ".", "config", ".", "data_dict", ")", "# eliminates the need for config file to resume", "\n", "", "if", "'val_artifact'", "not", "in", "self", ".", "__dict__", ":", "# If --upload_dataset is set, use the existing artifact, don't download", "\n", "            ", "self", ".", "train_artifact_path", ",", "self", ".", "train_artifact", "=", "self", ".", "download_dataset_artifact", "(", "data_dict", ".", "get", "(", "'train'", ")", ",", "\n", "opt", ".", "artifact_alias", ")", "\n", "self", ".", "val_artifact_path", ",", "self", ".", "val_artifact", "=", "self", ".", "download_dataset_artifact", "(", "data_dict", ".", "get", "(", "'val'", ")", ",", "\n", "opt", ".", "artifact_alias", ")", "\n", "self", ".", "result_artifact", ",", "self", ".", "result_table", ",", "self", ".", "val_table", ",", "self", ".", "weights", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "if", "self", ".", "train_artifact_path", "is", "not", "None", ":", "\n", "                ", "train_path", "=", "Path", "(", "self", ".", "train_artifact_path", ")", "/", "'data/images/'", "\n", "data_dict", "[", "'train'", "]", "=", "str", "(", "train_path", ")", "\n", "", "if", "self", ".", "val_artifact_path", "is", "not", "None", ":", "\n", "                ", "val_path", "=", "Path", "(", "self", ".", "val_artifact_path", ")", "/", "'data/images/'", "\n", "data_dict", "[", "'val'", "]", "=", "str", "(", "val_path", ")", "\n", "self", ".", "val_table", "=", "self", ".", "val_artifact", ".", "get", "(", "\"val\"", ")", "\n", "self", ".", "map_val_table_path", "(", ")", "\n", "", "", "if", "self", ".", "val_artifact", "is", "not", "None", ":", "\n", "            ", "self", ".", "result_artifact", "=", "wandb", ".", "Artifact", "(", "\"run_\"", "+", "wandb", ".", "run", ".", "id", "+", "\"_progress\"", ",", "\"evaluation\"", ")", "\n", "self", ".", "result_table", "=", "wandb", ".", "Table", "(", "[", "\"epoch\"", ",", "\"id\"", ",", "\"prediction\"", ",", "\"avg_confidence\"", "]", ")", "\n", "", "if", "opt", ".", "bbox_interval", "==", "-", "1", ":", "\n", "            ", "self", ".", "bbox_interval", "=", "opt", ".", "bbox_interval", "=", "(", "opt", ".", "epochs", "//", "10", ")", "if", "opt", ".", "epochs", ">", "10", "else", "1", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.download_dataset_artifact": [[159, 166], ["isinstance", "path.startswith", "wandb.use_artifact", "wandb.use_artifact.download", "wandb_utils.remove_prefix"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.remove_prefix"], ["", "def", "download_dataset_artifact", "(", "self", ",", "path", ",", "alias", ")", ":", "\n", "        ", "if", "isinstance", "(", "path", ",", "str", ")", "and", "path", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "            ", "dataset_artifact", "=", "wandb", ".", "use_artifact", "(", "remove_prefix", "(", "path", ",", "WANDB_ARTIFACT_PREFIX", ")", "+", "\":\"", "+", "alias", ")", "\n", "assert", "dataset_artifact", "is", "not", "None", ",", "\"'Error: W&B dataset artifact doesn\\'t exist'\"", "\n", "datadir", "=", "dataset_artifact", ".", "download", "(", ")", "\n", "return", "datadir", ",", "dataset_artifact", "\n", "", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.download_model_artifact": [[167, 178], ["opt.resume.startswith", "wandb.use_artifact", "wandb.use_artifact.download", "wandb.use_artifact.metadata.get", "wandb.use_artifact.metadata.get", "wandb_utils.remove_prefix"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.remove_prefix"], ["", "def", "download_model_artifact", "(", "self", ",", "opt", ")", ":", "\n", "        ", "if", "opt", ".", "resume", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "            ", "model_artifact", "=", "wandb", ".", "use_artifact", "(", "remove_prefix", "(", "opt", ".", "resume", ",", "WANDB_ARTIFACT_PREFIX", ")", "+", "\":latest\"", ")", "\n", "assert", "model_artifact", "is", "not", "None", ",", "'Error: W&B model artifact doesn\\'t exist'", "\n", "modeldir", "=", "model_artifact", ".", "download", "(", ")", "\n", "epochs_trained", "=", "model_artifact", ".", "metadata", ".", "get", "(", "'epochs_trained'", ")", "\n", "total_epochs", "=", "model_artifact", ".", "metadata", ".", "get", "(", "'total_epochs'", ")", "\n", "assert", "epochs_trained", "<", "total_epochs", ",", "'training to %g epochs is finished, nothing to resume.'", "%", "(", "\n", "total_epochs", ")", "\n", "return", "modeldir", ",", "model_artifact", "\n", "", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log_model": [[179, 192], ["wandb.Artifact", "wandb.Artifact.add_file", "wandb.log_artifact", "print", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "def", "log_model", "(", "self", ",", "path", ",", "opt", ",", "epoch", ",", "fitness_score", ",", "best_model", "=", "False", ")", ":", "\n", "        ", "model_artifact", "=", "wandb", ".", "Artifact", "(", "'run_'", "+", "wandb", ".", "run", ".", "id", "+", "'_model'", ",", "type", "=", "'model'", ",", "metadata", "=", "{", "\n", "'original_url'", ":", "str", "(", "path", ")", ",", "\n", "'epochs_trained'", ":", "epoch", "+", "1", ",", "\n", "'save period'", ":", "opt", ".", "save_period", ",", "\n", "'project'", ":", "opt", ".", "project", ",", "\n", "'total_epochs'", ":", "opt", ".", "epochs", ",", "\n", "'fitness_score'", ":", "fitness_score", "\n", "}", ")", "\n", "model_artifact", ".", "add_file", "(", "str", "(", "path", "/", "'last.pt'", ")", ",", "name", "=", "'last.pt'", ")", "\n", "wandb", ".", "log_artifact", "(", "model_artifact", ",", "\n", "aliases", "=", "[", "'latest'", ",", "'epoch '", "+", "str", "(", "self", ".", "current_epoch", ")", ",", "'best'", "if", "best_model", "else", "''", "]", ")", "\n", "print", "(", "\"Saving model artifact on epoch \"", ",", "epoch", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log_dataset_artifact": [[193, 221], ["yaml.load.get", "yaml.load.get", "yaml.load.pop", "open", "yaml.load", "yaml.load.get", "wandb_utils.WandbLogger.create_dataset_table", "yaml.load.get", "wandb_utils.WandbLogger.create_dataset_table", "open", "yaml.dump", "wandb_utils.WandbLogger.wandb_run.use_artifact", "wandb_utils.WandbLogger.wandb_run.use_artifact", "wandb_utils.WandbLogger.val_artifact.wait", "wandb_utils.WandbLogger.val_artifact.get", "wandb_utils.WandbLogger.map_val_table_path", "wandb_utils.WandbLogger.wandb_run.log_artifact", "wandb_utils.WandbLogger.wandb_run.log_artifact", "int", "enumerate", "utils.datasets.LoadImagesAndLabels", "utils.datasets.LoadImagesAndLabels", "str", "str", "data_file.rsplit", "pathlib.Path", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.create_dataset_table", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.create_dataset_table", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.map_val_table_path"], ["", "def", "log_dataset_artifact", "(", "self", ",", "data_file", ",", "single_cls", ",", "project", ",", "overwrite_config", "=", "False", ")", ":", "\n", "        ", "with", "open", "(", "data_file", ")", "as", "f", ":", "\n", "            ", "data", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", "# data dict", "\n", "", "nc", ",", "names", "=", "(", "1", ",", "[", "'item'", "]", ")", "if", "single_cls", "else", "(", "int", "(", "data", "[", "'nc'", "]", ")", ",", "data", "[", "'names'", "]", ")", "\n", "names", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "names", ")", "}", "# to index dictionary", "\n", "self", ".", "train_artifact", "=", "self", ".", "create_dataset_table", "(", "LoadImagesAndLabels", "(", "\n", "data", "[", "'train'", "]", ")", ",", "names", ",", "name", "=", "'train'", ")", "if", "data", ".", "get", "(", "'train'", ")", "else", "None", "\n", "self", ".", "val_artifact", "=", "self", ".", "create_dataset_table", "(", "LoadImagesAndLabels", "(", "\n", "data", "[", "'val'", "]", ")", ",", "names", ",", "name", "=", "'val'", ")", "if", "data", ".", "get", "(", "'val'", ")", "else", "None", "\n", "if", "data", ".", "get", "(", "'train'", ")", ":", "\n", "            ", "data", "[", "'train'", "]", "=", "WANDB_ARTIFACT_PREFIX", "+", "str", "(", "Path", "(", "project", ")", "/", "'train'", ")", "\n", "", "if", "data", ".", "get", "(", "'val'", ")", ":", "\n", "            ", "data", "[", "'val'", "]", "=", "WANDB_ARTIFACT_PREFIX", "+", "str", "(", "Path", "(", "project", ")", "/", "'val'", ")", "\n", "", "path", "=", "data_file", "if", "overwrite_config", "else", "'_wandb.'", ".", "join", "(", "data_file", ".", "rsplit", "(", "'.'", ",", "1", ")", ")", "# updated data.yaml path", "\n", "data", ".", "pop", "(", "'download'", ",", "None", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n", "", "if", "self", ".", "job_type", "==", "'Training'", ":", "# builds correct artifact pipeline graph", "\n", "            ", "self", ".", "wandb_run", ".", "use_artifact", "(", "self", ".", "val_artifact", ")", "\n", "self", ".", "wandb_run", ".", "use_artifact", "(", "self", ".", "train_artifact", ")", "\n", "self", ".", "val_artifact", ".", "wait", "(", ")", "\n", "self", ".", "val_table", "=", "self", ".", "val_artifact", ".", "get", "(", "'val'", ")", "\n", "self", ".", "map_val_table_path", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "wandb_run", ".", "log_artifact", "(", "self", ".", "train_artifact", ")", "\n", "self", ".", "wandb_run", ".", "log_artifact", "(", "self", ".", "val_artifact", ")", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.map_val_table_path": [[222, 227], ["print", "enumerate", "tqdm.tqdm.tqdm"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "def", "map_val_table_path", "(", "self", ")", ":", "\n", "        ", "self", ".", "val_table_map", "=", "{", "}", "\n", "print", "(", "\"Mapping dataset\"", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "self", ".", "val_table", ".", "data", ")", ")", ":", "\n", "            ", "self", ".", "val_table_map", "[", "data", "[", "3", "]", "]", "=", "data", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.create_dataset_table": [[228, 262], ["wandb.Artifact", "wandb.Table", "wandb.Classes", "enumerate", "wandb.Artifact.add", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "pathlib.Path().is_dir", "tqdm.tqdm.tqdm", "labels[].tolist", "wandb.Table.add_data", "isinstance", "pathlib.Path().is_dir", "wandb.Artifact.add_dir", "wandb.Artifact.add_dir", "wandb.Artifact.add_file", "pathlib.Path", "utils.general.xywh2xyxy", "torch.Tensor", "int", "box_data.append", "wandb.Image", "json.dumps", "pathlib.Path", "dataset.path.rsplit", "pathlib.Path.exists", "wandb.Artifact.add_file", "class_to_id.items", "labels[].view", "pathlib.Path", "pathlib.Path", "utils.datasets.img2label_paths", "str", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.tolist", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xywh2xyxy", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.img2label_paths"], ["", "", "def", "create_dataset_table", "(", "self", ",", "dataset", ",", "class_to_id", ",", "name", "=", "'dataset'", ")", ":", "\n", "# TODO: Explore multiprocessing to slpit this loop parallely| This is essential for speeding up the the logging", "\n", "        ", "artifact", "=", "wandb", ".", "Artifact", "(", "name", "=", "name", ",", "type", "=", "\"dataset\"", ")", "\n", "img_files", "=", "tqdm", "(", "[", "dataset", ".", "path", "]", ")", "if", "isinstance", "(", "dataset", ".", "path", ",", "str", ")", "and", "Path", "(", "dataset", ".", "path", ")", ".", "is_dir", "(", ")", "else", "None", "\n", "img_files", "=", "tqdm", "(", "dataset", ".", "img_files", ")", "if", "not", "img_files", "else", "img_files", "\n", "for", "img_file", "in", "img_files", ":", "\n", "            ", "if", "Path", "(", "img_file", ")", ".", "is_dir", "(", ")", ":", "\n", "                ", "artifact", ".", "add_dir", "(", "img_file", ",", "name", "=", "'data/images'", ")", "\n", "labels_path", "=", "'labels'", ".", "join", "(", "dataset", ".", "path", ".", "rsplit", "(", "'images'", ",", "1", ")", ")", "\n", "artifact", ".", "add_dir", "(", "labels_path", ",", "name", "=", "'data/labels'", ")", "\n", "", "else", ":", "\n", "                ", "artifact", ".", "add_file", "(", "img_file", ",", "name", "=", "'data/images/'", "+", "Path", "(", "img_file", ")", ".", "name", ")", "\n", "label_file", "=", "Path", "(", "img2label_paths", "(", "[", "img_file", "]", ")", "[", "0", "]", ")", "\n", "artifact", ".", "add_file", "(", "str", "(", "label_file", ")", ",", "\n", "name", "=", "'data/labels/'", "+", "label_file", ".", "name", ")", "if", "label_file", ".", "exists", "(", ")", "else", "None", "\n", "", "", "table", "=", "wandb", ".", "Table", "(", "columns", "=", "[", "\"id\"", ",", "\"train_image\"", ",", "\"Classes\"", ",", "\"name\"", "]", ")", "\n", "class_set", "=", "wandb", ".", "Classes", "(", "[", "{", "'id'", ":", "id", ",", "'name'", ":", "name", "}", "for", "id", ",", "name", "in", "class_to_id", ".", "items", "(", ")", "]", ")", "\n", "for", "si", ",", "(", "img", ",", "labels", ",", "paths", ",", "shapes", ")", "in", "enumerate", "(", "tqdm", "(", "dataset", ")", ")", ":", "\n", "            ", "height", ",", "width", "=", "shapes", "[", "0", "]", "\n", "labels", "[", ":", ",", "2", ":", "]", "=", "(", "xywh2xyxy", "(", "labels", "[", ":", ",", "2", ":", "]", ".", "view", "(", "-", "1", ",", "4", ")", ")", ")", "*", "torch", ".", "Tensor", "(", "[", "width", ",", "height", ",", "width", ",", "height", "]", ")", "\n", "box_data", ",", "img_classes", "=", "[", "]", ",", "{", "}", "\n", "for", "cls", ",", "*", "xyxy", "in", "labels", "[", ":", ",", "1", ":", "]", ".", "tolist", "(", ")", ":", "\n", "                ", "cls", "=", "int", "(", "cls", ")", "\n", "box_data", ".", "append", "(", "{", "\"position\"", ":", "{", "\"minX\"", ":", "xyxy", "[", "0", "]", ",", "\"minY\"", ":", "xyxy", "[", "1", "]", ",", "\"maxX\"", ":", "xyxy", "[", "2", "]", ",", "\"maxY\"", ":", "xyxy", "[", "3", "]", "}", ",", "\n", "\"class_id\"", ":", "cls", ",", "\n", "\"box_caption\"", ":", "\"%s\"", "%", "(", "class_to_id", "[", "cls", "]", ")", ",", "\n", "\"scores\"", ":", "{", "\"acc\"", ":", "1", "}", ",", "\n", "\"domain\"", ":", "\"pixel\"", "}", ")", "\n", "img_classes", "[", "cls", "]", "=", "class_to_id", "[", "cls", "]", "\n", "", "boxes", "=", "{", "\"ground_truth\"", ":", "{", "\"box_data\"", ":", "box_data", ",", "\"class_labels\"", ":", "class_to_id", "}", "}", "# inference-space", "\n", "table", ".", "add_data", "(", "si", ",", "wandb", ".", "Image", "(", "paths", ",", "classes", "=", "class_set", ",", "boxes", "=", "boxes", ")", ",", "json", ".", "dumps", "(", "img_classes", ")", ",", "\n", "Path", "(", "paths", ")", ".", "name", ")", "\n", "", "artifact", ".", "add", "(", "table", ",", "name", ")", "\n", "return", "artifact", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log_training_progress": [[263, 283], ["wandb.Classes", "predn.tolist", "wandb_utils.WandbLogger.result_table.add_data", "wandb.Image", "box_data.append", "max", "names.items", "pathlib.Path", "len", "int"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.tolist"], ["", "def", "log_training_progress", "(", "self", ",", "predn", ",", "path", ",", "names", ")", ":", "\n", "        ", "if", "self", ".", "val_table", "and", "self", ".", "result_table", ":", "\n", "            ", "class_set", "=", "wandb", ".", "Classes", "(", "[", "{", "'id'", ":", "id", ",", "'name'", ":", "name", "}", "for", "id", ",", "name", "in", "names", ".", "items", "(", ")", "]", ")", "\n", "box_data", "=", "[", "]", "\n", "total_conf", "=", "0", "\n", "for", "*", "xyxy", ",", "conf", ",", "cls", "in", "predn", ".", "tolist", "(", ")", ":", "\n", "                ", "if", "conf", ">=", "0.25", ":", "\n", "                    ", "box_data", ".", "append", "(", "\n", "{", "\"position\"", ":", "{", "\"minX\"", ":", "xyxy", "[", "0", "]", ",", "\"minY\"", ":", "xyxy", "[", "1", "]", ",", "\"maxX\"", ":", "xyxy", "[", "2", "]", ",", "\"maxY\"", ":", "xyxy", "[", "3", "]", "}", ",", "\n", "\"class_id\"", ":", "int", "(", "cls", ")", ",", "\n", "\"box_caption\"", ":", "\"%s %.3f\"", "%", "(", "names", "[", "cls", "]", ",", "conf", ")", ",", "\n", "\"scores\"", ":", "{", "\"class_score\"", ":", "conf", "}", ",", "\n", "\"domain\"", ":", "\"pixel\"", "}", ")", "\n", "total_conf", "=", "total_conf", "+", "conf", "\n", "", "", "boxes", "=", "{", "\"predictions\"", ":", "{", "\"box_data\"", ":", "box_data", ",", "\"class_labels\"", ":", "names", "}", "}", "# inference-space", "\n", "id", "=", "self", ".", "val_table_map", "[", "Path", "(", "path", ")", ".", "name", "]", "\n", "self", ".", "result_table", ".", "add_data", "(", "self", ".", "current_epoch", ",", "\n", "id", ",", "\n", "wandb", ".", "Image", "(", "self", ".", "val_table", ".", "data", "[", "id", "]", "[", "1", "]", ",", "boxes", "=", "boxes", ",", "classes", "=", "class_set", ")", ",", "\n", "total_conf", "/", "max", "(", "1", ",", "len", "(", "box_data", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log": [[285, 289], ["log_dict.items"], "methods", ["None"], ["", "", "def", "log", "(", "self", ",", "log_dict", ")", ":", "\n", "        ", "if", "self", ".", "wandb_run", ":", "\n", "            ", "for", "key", ",", "value", "in", "log_dict", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "log_dict", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.end_epoch": [[290, 301], ["wandb.log", "wandb.JoinedTable", "wandb_utils.WandbLogger.result_artifact.add", "wandb.log_artifact", "wandb.Table", "wandb.Artifact", "str"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log"], ["", "", "", "def", "end_epoch", "(", "self", ",", "best_result", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "wandb_run", ":", "\n", "            ", "wandb", ".", "log", "(", "self", ".", "log_dict", ")", "\n", "self", ".", "log_dict", "=", "{", "}", "\n", "if", "self", ".", "result_artifact", ":", "\n", "                ", "train_results", "=", "wandb", ".", "JoinedTable", "(", "self", ".", "val_table", ",", "self", ".", "result_table", ",", "\"id\"", ")", "\n", "self", ".", "result_artifact", ".", "add", "(", "train_results", ",", "'result'", ")", "\n", "wandb", ".", "log_artifact", "(", "self", ".", "result_artifact", ",", "aliases", "=", "[", "'latest'", ",", "'epoch '", "+", "str", "(", "self", ".", "current_epoch", ")", ",", "\n", "(", "'best'", "if", "best_result", "else", "''", ")", "]", ")", "\n", "self", ".", "result_table", "=", "wandb", ".", "Table", "(", "[", "\"epoch\"", ",", "\"id\"", ",", "\"prediction\"", ",", "\"avg_confidence\"", "]", ")", "\n", "self", ".", "result_artifact", "=", "wandb", ".", "Artifact", "(", "\"run_\"", "+", "wandb", ".", "run", ".", "id", "+", "\"_progress\"", ",", "\"evaluation\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.finish_run": [[302, 307], ["wandb.run.finish", "wandb.log"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log"], ["", "", "", "def", "finish_run", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "wandb_run", ":", "\n", "            ", "if", "self", ".", "log_dict", ":", "\n", "                ", "wandb", ".", "log", "(", "self", ".", "log_dict", ")", "\n", "", "wandb", ".", "run", ".", "finish", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.remove_prefix": [[23, 25], ["len"], "function", ["None"], ["def", "remove_prefix", "(", "from_string", ",", "prefix", "=", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "    ", "return", "from_string", "[", "len", "(", "prefix", ")", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.check_wandb_config_file": [[27, 32], ["pathlib.Path().is_file", "data_config_file.rsplit", "pathlib.Path"], "function", ["None"], ["", "def", "check_wandb_config_file", "(", "data_config_file", ")", ":", "\n", "    ", "wandb_config", "=", "'_wandb.'", ".", "join", "(", "data_config_file", ".", "rsplit", "(", "'.'", ",", "1", ")", ")", "# updated data.yaml path", "\n", "if", "Path", "(", "wandb_config", ")", ".", "is_file", "(", ")", ":", "\n", "        ", "return", "wandb_config", "\n", "", "return", "data_config_file", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.get_run_info": [[34, 40], ["pathlib.Path", "wandb_utils.remove_prefix"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.remove_prefix"], ["", "def", "get_run_info", "(", "run_path", ")", ":", "\n", "    ", "run_path", "=", "Path", "(", "remove_prefix", "(", "run_path", ",", "WANDB_ARTIFACT_PREFIX", ")", ")", "\n", "run_id", "=", "run_path", ".", "stem", "\n", "project", "=", "run_path", ".", "parent", ".", "stem", "\n", "model_artifact_name", "=", "'run_'", "+", "run_id", "+", "'_model'", "\n", "return", "run_id", ",", "project", ",", "model_artifact_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.check_wandb_resume": [[42, 54], ["isinstance", "wandb_utils.process_wandb_config_ddp_mode", "opt.resume.startswith", "wandb_utils.get_run_info", "wandb.Api", "wandb.Api.artifact", "api.artifact.download", "str", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.process_wandb_config_ddp_mode", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.get_run_info"], ["", "def", "check_wandb_resume", "(", "opt", ")", ":", "\n", "    ", "process_wandb_config_ddp_mode", "(", "opt", ")", "if", "opt", ".", "global_rank", "not", "in", "[", "-", "1", ",", "0", "]", "else", "None", "\n", "if", "isinstance", "(", "opt", ".", "resume", ",", "str", ")", ":", "\n", "        ", "if", "opt", ".", "resume", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "            ", "if", "opt", ".", "global_rank", "not", "in", "[", "-", "1", ",", "0", "]", ":", "# For resuming DDP runs", "\n", "                ", "run_id", ",", "project", ",", "model_artifact_name", "=", "get_run_info", "(", "opt", ".", "resume", ")", "\n", "api", "=", "wandb", ".", "Api", "(", ")", "\n", "artifact", "=", "api", ".", "artifact", "(", "project", "+", "'/'", "+", "model_artifact_name", "+", "':latest'", ")", "\n", "modeldir", "=", "artifact", ".", "download", "(", ")", "\n", "opt", ".", "weights", "=", "str", "(", "Path", "(", "modeldir", ")", "/", "\"last.pt\"", ")", "\n", "", "return", "True", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.process_wandb_config_ddp_mode": [[56, 78], ["open", "yaml.load", "isinstance", "data_dict[].startswith", "wandb.Api", "wandb.Api.artifact", "api.artifact.download", "str", "isinstance", "data_dict[].startswith", "wandb.Api", "wandb.Api.artifact", "api.artifact.download", "str", "str", "pathlib.Path", "pathlib.Path", "open", "yaml.dump", "pathlib.Path", "wandb_utils.remove_prefix", "wandb_utils.remove_prefix"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.remove_prefix", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.remove_prefix"], ["", "def", "process_wandb_config_ddp_mode", "(", "opt", ")", ":", "\n", "    ", "with", "open", "(", "opt", ".", "data", ")", "as", "f", ":", "\n", "        ", "data_dict", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", "# data dict", "\n", "", "train_dir", ",", "val_dir", "=", "None", ",", "None", "\n", "if", "isinstance", "(", "data_dict", "[", "'train'", "]", ",", "str", ")", "and", "data_dict", "[", "'train'", "]", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "        ", "api", "=", "wandb", ".", "Api", "(", ")", "\n", "train_artifact", "=", "api", ".", "artifact", "(", "remove_prefix", "(", "data_dict", "[", "'train'", "]", ")", "+", "':'", "+", "opt", ".", "artifact_alias", ")", "\n", "train_dir", "=", "train_artifact", ".", "download", "(", ")", "\n", "train_path", "=", "Path", "(", "train_dir", ")", "/", "'data/images/'", "\n", "data_dict", "[", "'train'", "]", "=", "str", "(", "train_path", ")", "\n", "\n", "", "if", "isinstance", "(", "data_dict", "[", "'val'", "]", ",", "str", ")", "and", "data_dict", "[", "'val'", "]", ".", "startswith", "(", "WANDB_ARTIFACT_PREFIX", ")", ":", "\n", "        ", "api", "=", "wandb", ".", "Api", "(", ")", "\n", "val_artifact", "=", "api", ".", "artifact", "(", "remove_prefix", "(", "data_dict", "[", "'val'", "]", ")", "+", "':'", "+", "opt", ".", "artifact_alias", ")", "\n", "val_dir", "=", "val_artifact", ".", "download", "(", ")", "\n", "val_path", "=", "Path", "(", "val_dir", ")", "/", "'data/images/'", "\n", "data_dict", "[", "'val'", "]", "=", "str", "(", "val_path", ")", "\n", "", "if", "train_dir", "or", "val_dir", ":", "\n", "        ", "ddp_data_path", "=", "str", "(", "Path", "(", "val_dir", ")", "/", "'wandb_local_data.yaml'", ")", "\n", "with", "open", "(", "ddp_data_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "data_dict", ",", "f", ")", "\n", "", "opt", ".", "data", "=", "ddp_data_path", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.log_dataset.create_dataset_artifact": [[10, 14], ["wandb_utils.WandbLogger", "open", "yaml.load"], "function", ["None"], ["def", "create_dataset_artifact", "(", "opt", ")", ":", "\n", "    ", "with", "open", "(", "opt", ".", "data", ")", "as", "f", ":", "\n", "        ", "data", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", "# data dict", "\n", "", "logger", "=", "WandbLogger", "(", "opt", ",", "''", ",", "None", ",", "data", ",", "job_type", "=", "'Dataset Creation'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Conv.__init__": [[35, 40], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "common.autopad", "torch.LeakyReLU", "torch.LeakyReLU", "isinstance", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.autopad"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "1", ",", "s", "=", "1", ",", "p", "=", "None", ",", "g", "=", "1", ",", "act", "=", "True", ")", ":", "# ch_in, ch_out, kernel, stride, padding, groups", "\n", "        ", "super", "(", "Conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "c1", ",", "c2", ",", "k", ",", "s", ",", "autopad", "(", "k", ",", "p", ")", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "c2", ")", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "if", "act", "is", "True", "else", "(", "act", "if", "isinstance", "(", "act", ",", "nn", ".", "Module", ")", "else", "nn", ".", "Identity", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Conv.forward": [[41, 43], ["common.Conv.act", "common.Conv.bn", "common.Conv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Conv.fuseforward": [[44, 46], ["common.Conv.act", "common.Conv.conv"], "methods", ["None"], ["", "def", "fuseforward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act", "(", "self", ".", "conv", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.TransformerLayer.__init__": [[50, 58], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c", ",", "num_heads", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "c", ",", "c", ",", "bias", "=", "False", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "c", ",", "c", ",", "bias", "=", "False", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "c", ",", "c", ",", "bias", "=", "False", ")", "\n", "self", ".", "ma", "=", "nn", ".", "MultiheadAttention", "(", "embed_dim", "=", "c", ",", "num_heads", "=", "num_heads", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "c", ",", "c", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "c", ",", "c", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.TransformerLayer.forward": [[59, 63], ["common.TransformerLayer.fc2", "common.TransformerLayer.ma", "common.TransformerLayer.fc1", "common.TransformerLayer.q", "common.TransformerLayer.k", "common.TransformerLayer.v"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "ma", "(", "self", ".", "q", "(", "x", ")", ",", "self", ".", "k", "(", "x", ")", ",", "self", ".", "v", "(", "x", ")", ")", "[", "0", "]", "+", "x", "\n", "x", "=", "self", ".", "fc2", "(", "self", ".", "fc1", "(", "x", ")", ")", "+", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.TransformerBlock.__init__": [[67, 75], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "common.Conv", "common.TransformerLayer", "range"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "num_heads", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "None", "\n", "if", "c1", "!=", "c2", ":", "\n", "            ", "self", ".", "conv", "=", "Conv", "(", "c1", ",", "c2", ")", "\n", "", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "c2", ",", "c2", ")", "# learnable position embedding", "\n", "self", ".", "tr", "=", "nn", ".", "Sequential", "(", "*", "[", "TransformerLayer", "(", "c2", ",", "num_heads", ")", "for", "_", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "self", ".", "c2", "=", "c2", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.TransformerBlock.forward": [[76, 92], ["common.TransformerBlock.flatten", "p.squeeze.squeeze.unsqueeze", "p.squeeze.squeeze.transpose", "p.squeeze.squeeze.squeeze", "common.TransformerBlock.linear", "common.TransformerBlock.tr", "common.TransformerBlock.unsqueeze", "common.TransformerBlock.transpose", "common.TransformerBlock.reshape", "common.TransformerBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "conv", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "b", ",", "_", ",", "w", ",", "h", "=", "x", ".", "shape", "\n", "p", "=", "x", ".", "flatten", "(", "2", ")", "\n", "p", "=", "p", ".", "unsqueeze", "(", "0", ")", "\n", "p", "=", "p", ".", "transpose", "(", "0", ",", "3", ")", "\n", "p", "=", "p", ".", "squeeze", "(", "3", ")", "\n", "e", "=", "self", ".", "linear", "(", "p", ")", "\n", "x", "=", "p", "+", "e", "\n", "\n", "x", "=", "self", ".", "tr", "(", "x", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "3", ")", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "3", ")", "\n", "x", "=", "x", ".", "reshape", "(", "b", ",", "self", ".", "c2", ",", "w", ",", "h", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Bottleneck.__init__": [[96, 102], ["torch.Module.__init__", "int", "common.Conv", "common.Conv"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "shortcut", "=", "True", ",", "g", "=", "1", ",", "e", "=", "0.5", ")", ":", "# ch_in, ch_out, shortcut, groups, expansion", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "int", "(", "c2", "*", "e", ")", "# hidden channels", "\n", "self", ".", "cv1", "=", "Conv", "(", "c1", ",", "c_", ",", "1", ",", "1", ")", "\n", "self", ".", "cv2", "=", "Conv", "(", "c_", ",", "c2", ",", "3", ",", "1", ",", "g", "=", "g", ")", "\n", "self", ".", "add", "=", "shortcut", "and", "c1", "==", "c2", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Bottleneck.forward": [[103, 105], ["common.Bottleneck.cv2", "common.Bottleneck.cv2", "common.Bottleneck.cv1", "common.Bottleneck.cv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "cv2", "(", "self", ".", "cv1", "(", "x", ")", ")", "if", "self", ".", "add", "else", "self", ".", "cv2", "(", "self", ".", "cv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.BottleneckCSP.__init__": [[109, 119], ["torch.Module.__init__", "int", "common.Conv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "common.Conv", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "common.Bottleneck", "range"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "n", "=", "1", ",", "shortcut", "=", "True", ",", "g", "=", "1", ",", "e", "=", "0.5", ")", ":", "# ch_in, ch_out, number, shortcut, groups, expansion", "\n", "        ", "super", "(", "BottleneckCSP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "int", "(", "c2", "*", "e", ")", "# hidden channels", "\n", "self", ".", "cv1", "=", "Conv", "(", "c1", ",", "c_", ",", "1", ",", "1", ")", "\n", "self", ".", "cv2", "=", "nn", ".", "Conv2d", "(", "c1", ",", "c_", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "cv3", "=", "nn", ".", "Conv2d", "(", "c_", ",", "c_", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "cv4", "=", "Conv", "(", "2", "*", "c_", ",", "c2", ",", "1", ",", "1", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "2", "*", "c_", ")", "# applied to cat(cv2, cv3)", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", "self", ".", "m", "=", "nn", ".", "Sequential", "(", "*", "[", "Bottleneck", "(", "c_", ",", "c_", ",", "shortcut", ",", "g", ",", "e", "=", "1.0", ")", "for", "_", "in", "range", "(", "n", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.BottleneckCSP.forward": [[120, 124], ["common.BottleneckCSP.cv3", "common.BottleneckCSP.cv2", "common.BottleneckCSP.cv4", "common.BottleneckCSP.m", "common.BottleneckCSP.act", "common.BottleneckCSP.cv1", "common.BottleneckCSP.bn", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "cv3", "(", "self", ".", "m", "(", "self", ".", "cv1", "(", "x", ")", ")", ")", "\n", "y2", "=", "self", ".", "cv2", "(", "x", ")", "\n", "return", "self", ".", "cv4", "(", "self", ".", "act", "(", "self", ".", "bn", "(", "torch", ".", "cat", "(", "(", "y1", ",", "y2", ")", ",", "dim", "=", "1", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.C3.__init__": [[128, 135], ["torch.Module.__init__", "int", "common.Conv", "common.Conv", "common.Conv", "torch.Sequential", "torch.Sequential", "common.Bottleneck", "range"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "n", "=", "1", ",", "shortcut", "=", "True", ",", "g", "=", "1", ",", "e", "=", "0.5", ")", ":", "# ch_in, ch_out, number, shortcut, groups, expansion", "\n", "        ", "super", "(", "C3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "int", "(", "c2", "*", "e", ")", "# hidden channels", "\n", "self", ".", "cv1", "=", "Conv", "(", "c1", ",", "c_", ",", "1", ",", "1", ")", "\n", "self", ".", "cv2", "=", "Conv", "(", "c1", ",", "c_", ",", "1", ",", "1", ")", "\n", "self", ".", "cv3", "=", "Conv", "(", "2", "*", "c_", ",", "c2", ",", "1", ")", "# act=FReLU(c2)", "\n", "self", ".", "m", "=", "nn", ".", "Sequential", "(", "*", "[", "Bottleneck", "(", "c_", ",", "c_", ",", "shortcut", ",", "g", ",", "e", "=", "1.0", ")", "for", "_", "in", "range", "(", "n", ")", "]", ")", "\n", "# self.m = nn.Sequential(*[CrossConv(c_, c_, 3, 1, g, 1.0, shortcut) for _ in range(n)])", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.C3.forward": [[137, 139], ["common.C3.cv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "common.C3.m", "common.C3.cv2", "common.C3.cv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "cv3", "(", "torch", ".", "cat", "(", "(", "self", ".", "m", "(", "self", ".", "cv1", "(", "x", ")", ")", ",", "self", ".", "cv2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.C3TR.__init__": [[143, 147], ["common.C3.__init__", "int", "common.TransformerBlock"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "n", "=", "1", ",", "shortcut", "=", "True", ",", "g", "=", "1", ",", "e", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "c1", ",", "c2", ",", "n", ",", "shortcut", ",", "g", ",", "e", ")", "\n", "c_", "=", "int", "(", "c2", "*", "e", ")", "\n", "self", ".", "m", "=", "TransformerBlock", "(", "c_", ",", "c_", ",", "4", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.SPP.__init__": [[151, 157], ["torch.Module.__init__", "common.Conv", "common.Conv", "torch.ModuleList", "torch.ModuleList", "torch.MaxPool2d", "torch.MaxPool2d", "len"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "(", "5", ",", "9", ",", "13", ")", ")", ":", "\n", "        ", "super", "(", "SPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "c1", "//", "2", "# hidden channels", "\n", "self", ".", "cv1", "=", "Conv", "(", "c1", ",", "c_", ",", "1", ",", "1", ")", "\n", "self", ".", "cv2", "=", "Conv", "(", "c_", "*", "(", "len", "(", "k", ")", "+", "1", ")", ",", "c2", ",", "1", ",", "1", ")", "\n", "self", ".", "m", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "x", ",", "stride", "=", "1", ",", "padding", "=", "x", "//", "2", ")", "for", "x", "in", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.SPP.forward": [[158, 162], ["common.SPP.cv1", "common.SPP.cv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "m"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cv1", "(", "x", ")", "\n", "x", "=", "self", ".", "cv2", "(", "torch", ".", "cat", "(", "[", "x", "]", "+", "[", "m", "(", "x", ")", "for", "m", "in", "self", ".", "m", "]", ",", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.GDConv.__init__": [[165, 184], ["torch.Module.__init__", "math.ceil", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "kernel_size", "=", "1", ",", "ratio", "=", "2", ",", "dw_size", "=", "3", ",", "stride", "=", "1", ",", "relu", "=", "True", ",", "dialte", "=", "1", ")", ":", "\n", "        ", "super", "(", "GDConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "oup", "=", "oup", "\n", "# ratio = oup", "\n", "init_channels", "=", "math", ".", "ceil", "(", "oup", "/", "ratio", ")", "\n", "# init_channels = 8", "\n", "new_channels", "=", "init_channels", "*", "(", "ratio", "-", "1", ")", "\n", "# new_channels = oup - init_channels", "\n", "\n", "self", ".", "primary_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "init_channels", ",", "kernel_size", ",", "stride", ",", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "init_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "relu", "else", "nn", ".", "Sequential", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "cheap_operation", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "init_channels", ",", "new_channels", ",", "dw_size", ",", "1", ",", "dialte", ",", "groups", "=", "init_channels", ",", "dilation", "=", "dialte", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "new_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "relu", "else", "nn", ".", "Sequential", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.GDConv.forward": [[186, 191], ["common.GDConv.primary_conv", "common.GDConv.cheap_operation", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "primary_conv", "(", "x", ")", "\n", "x2", "=", "self", ".", "cheap_operation", "(", "x1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "return", "out", "[", ":", ",", ":", "self", ".", "oup", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.RMF.__init__": [[194, 216], ["torch.Module.__init__", "common.GDConv", "common.GDConv", "common.GDConv", "torch.MaxPool2d", "torch.MaxPool2d", "common.GDConv", "common.GDConv", "common.GDConv", "torch.MaxPool2d", "torch.MaxPool2d", "common.GDConv", "common.GDConv", "common.GDConv", "torch.MaxPool2d", "torch.MaxPool2d", "common.GDConv", "common.GDConv", "common.GDConv"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ")", ":", "\n", "        ", "super", "(", "RMF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "ratio", "=", "12", "\n", "oup", "=", "oup", "//", "ratio", "\n", "self", ".", "Dilation0_1", "=", "GDConv", "(", "inp", ",", "oup", ",", "dialte", "=", "1", ")", "\n", "self", ".", "Dilation0_3", "=", "GDConv", "(", "inp", ",", "oup", ",", "dialte", "=", "3", ")", "\n", "self", ".", "Dilation0_5", "=", "GDConv", "(", "inp", ",", "oup", ",", "dialte", "=", "5", ")", "\n", "\n", "self", ".", "SPPmax5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "Dilation1_1", "=", "GDConv", "(", "inp", ",", "oup", ",", "dialte", "=", "1", ")", "\n", "self", ".", "Dilation1_3", "=", "GDConv", "(", "inp", ",", "oup", ",", "dialte", "=", "3", ")", "\n", "self", ".", "Dilation1_5", "=", "GDConv", "(", "inp", ",", "oup", ",", "dialte", "=", "5", ")", "\n", "\n", "self", ".", "SPPmax9", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "9", ",", "stride", "=", "1", ",", "padding", "=", "4", ")", "\n", "self", ".", "Dilation2_1", "=", "GDConv", "(", "inp", ",", "oup", ",", "dialte", "=", "1", ")", "\n", "self", ".", "Dilation2_3", "=", "GDConv", "(", "inp", ",", "oup", ",", "dialte", "=", "3", ")", "\n", "self", ".", "Dilation2_5", "=", "GDConv", "(", "inp", ",", "oup", ",", "dialte", "=", "5", ")", "\n", "\n", "self", ".", "SPPmax13", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "13", ",", "stride", "=", "1", ",", "padding", "=", "6", ")", "\n", "self", ".", "Dilation3_1", "=", "GDConv", "(", "inp", ",", "oup", ",", "dialte", "=", "1", ")", "\n", "self", ".", "Dilation3_3", "=", "GDConv", "(", "inp", ",", "oup", ",", "dialte", "=", "3", ")", "\n", "self", ".", "Dilation3_5", "=", "GDConv", "(", "inp", ",", "oup", ",", "dialte", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.RMF.forward": [[217, 243], ["common.RMF.Dilation0_1", "common.RMF.Dilation0_3", "common.RMF.Dilation0_5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "common.RMF.SPPmax5", "common.RMF.Dilation1_1", "common.RMF.Dilation1_3", "common.RMF.Dilation1_5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "common.RMF.SPPmax9", "common.RMF.Dilation2_1", "common.RMF.Dilation2_3", "common.RMF.Dilation2_5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "common.RMF.SPPmax13", "common.RMF.Dilation3_1", "common.RMF.Dilation3_3", "common.RMF.Dilation3_5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_d0_1", "=", "self", ".", "Dilation0_1", "(", "x", ")", "\n", "x_d0_3", "=", "self", ".", "Dilation0_3", "(", "x", ")", "\n", "x_d0_5", "=", "self", ".", "Dilation0_5", "(", "x", ")", "\n", "x_d0", "=", "torch", ".", "cat", "(", "(", "x_d0_1", ",", "x_d0_3", ",", "x_d0_5", ")", ",", "1", ")", "\n", "\n", "x_spp5", "=", "self", ".", "SPPmax5", "(", "x", ")", "\n", "x_d1_1", "=", "self", ".", "Dilation1_1", "(", "x_spp5", ")", "\n", "x_d1_3", "=", "self", ".", "Dilation1_3", "(", "x_spp5", ")", "\n", "x_d1_5", "=", "self", ".", "Dilation1_5", "(", "x_spp5", ")", "\n", "x_d1", "=", "torch", ".", "cat", "(", "(", "x_d1_1", ",", "x_d1_3", ",", "x_d1_5", ")", ",", "1", ")", "\n", "\n", "x_spp9", "=", "self", ".", "SPPmax9", "(", "x", ")", "\n", "x_d2_1", "=", "self", ".", "Dilation2_1", "(", "x_spp9", ")", "\n", "x_d2_3", "=", "self", ".", "Dilation2_3", "(", "x_spp9", ")", "\n", "x_d2_5", "=", "self", ".", "Dilation2_5", "(", "x_spp9", ")", "\n", "x_d2", "=", "torch", ".", "cat", "(", "(", "x_d2_1", ",", "x_d2_3", ",", "x_d2_5", ")", ",", "1", ")", "\n", "\n", "x_spp13", "=", "self", ".", "SPPmax13", "(", "x", ")", "\n", "x_d3_1", "=", "self", ".", "Dilation3_1", "(", "x_spp13", ")", "\n", "x_d3_3", "=", "self", ".", "Dilation3_3", "(", "x_spp13", ")", "\n", "x_d3_5", "=", "self", ".", "Dilation3_5", "(", "x_spp13", ")", "\n", "x_d3", "=", "torch", ".", "cat", "(", "(", "x_d3_1", ",", "x_d3_3", ",", "x_d3_5", ")", ",", "1", ")", "\n", "\n", "xend", "=", "torch", ".", "cat", "(", "(", "x_d0", ",", "x_d1", ",", "x_d2", ",", "x_d3", ")", ",", "1", ")", "\n", "return", "xend", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.MySpp.__init__": [[246, 252], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ")", ":", "\n", "        ", "super", "(", "MySpp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input", "=", "inp", "\n", "self", ".", "SPP1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "SPP2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "9", ",", "stride", "=", "1", ",", "padding", "=", "4", ")", "\n", "self", ".", "SPP3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "13", ",", "stride", "=", "1", ",", "padding", "=", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.MySpp.forward": [[253, 260], ["common.MySpp.SPP1", "common.MySpp.SPP2", "common.MySpp.SPP3", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "SPP1", "(", "x", ")", "\n", "x2", "=", "self", ".", "SPP2", "(", "x", ")", "\n", "x3", "=", "self", ".", "SPP3", "(", "x", ")", "\n", "xend", "=", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", "\n", "\n", "return", "xend", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.GhostModule.__init__": [[263, 282], ["torch.Module.__init__", "math.ceil", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "kernel_size", "=", "1", ",", "ratio", "=", "2", ",", "dw_size", "=", "3", ",", "stride", "=", "1", ",", "relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "GhostModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "oup", "=", "oup", "\n", "# ratio = oup", "\n", "init_channels", "=", "math", ".", "ceil", "(", "oup", "/", "ratio", ")", "\n", "# init_channels = 8", "\n", "new_channels", "=", "init_channels", "*", "(", "ratio", "-", "1", ")", "\n", "# new_channels = oup - init_channels", "\n", "\n", "self", ".", "primary_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "init_channels", ",", "kernel_size", ",", "stride", ",", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "init_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "relu", "else", "nn", ".", "Sequential", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "cheap_operation", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "init_channels", ",", "new_channels", ",", "dw_size", ",", "1", ",", "dw_size", "//", "2", ",", "groups", "=", "init_channels", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "new_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "relu", "else", "nn", ".", "Sequential", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.GhostModule.forward": [[284, 289], ["common.GhostModule.primary_conv", "common.GhostModule.cheap_operation", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "primary_conv", "(", "x", ")", "\n", "x2", "=", "self", ".", "cheap_operation", "(", "x1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "return", "out", "[", ":", ",", ":", "self", ".", "oup", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.CspGhost.__init__": [[293, 300], ["torch.Module.__init__", "int", "common.GhostModule"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "op_channels", ")", ":", "\n", "        ", "super", "(", "CspGhost", ",", "self", ")", ".", "__init__", "(", ")", "\n", "part_ratio", "=", "0.25", "\n", "self", ".", "part1_chnls", "=", "int", "(", "in_channels", "*", "part_ratio", ")", "\n", "self", ".", "part2_chnls", "=", "in_channels", "-", "self", ".", "part1_chnls", "\n", "self", ".", "num_layers", "=", "op_channels", "-", "self", ".", "part1_chnls", "\n", "self", ".", "dense", "=", "GhostModule", "(", "self", ".", "part2_chnls", ",", "self", ".", "num_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.CspGhost.forward": [[301, 308], ["common.CspGhost.dense", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "part1", "=", "x", "[", ":", ",", ":", "self", ".", "part1_chnls", ",", ":", ",", ":", "]", "\n", "part2", "=", "x", "[", ":", ",", "self", ".", "part1_chnls", ":", ",", ":", ",", ":", "]", "\n", "part2", "=", "self", ".", "dense", "(", "part2", ")", "\n", "# part2 = self.transtion(part2)", "\n", "out", "=", "torch", ".", "cat", "(", "(", "part1", ",", "part2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.EFE.__init__": [[311, 318], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "common.CspGhost", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "k", "=", "1", ",", "s", "=", "1", ",", "channel_change", "=", "True", ")", ":", "\n", "        ", "super", "(", "EFE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1x1_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "kernel_size", "=", "k", ",", "stride", "=", "s", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ",", "momentum", "=", "0.03", ",", "eps", "=", "1E-4", ")", ")", "\n", "self", ".", "Ghost", "=", "CspGhost", "(", "oup", ",", "oup", "*", "2", ")", "\n", "self", ".", "conv1x1_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "oup", "*", "2", ",", "oup", ",", "kernel_size", "=", "k", ",", "stride", "=", "s", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ",", "momentum", "=", "0.03", ",", "eps", "=", "1E-4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.EFE.forward": [[319, 327], ["common.EFE.conv1x1_1", "common.EFE.Ghost", "common.EFE.conv1x1_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1x1_1", "(", "x", ")", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "Ghost", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1x1_2", "(", "x", ")", "\n", "x", "=", "residual", "+", "x", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Focus.__init__": [[331, 334], ["torch.Module.__init__", "common.Conv"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "1", ",", "s", "=", "1", ",", "p", "=", "None", ",", "g", "=", "1", ",", "act", "=", "True", ")", ":", "# ch_in, ch_out, kernel, stride, padding, groups", "\n", "        ", "super", "(", "Focus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Conv", "(", "c1", "*", "4", ",", "c2", ",", "k", ",", "s", ",", "p", ",", "g", ",", "act", ")", "\n", "# self.contract = Contract(gain=2)", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Focus.forward": [[336, 338], ["common.Focus.conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "# x(b,c,w,h) -> y(b,4c,w/2,h/2)", "\n", "        ", "return", "self", ".", "conv", "(", "torch", ".", "cat", "(", "[", "x", "[", "...", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "x", "[", "...", ",", "1", ":", ":", "2", ",", ":", ":", "2", "]", ",", "x", "[", "...", ",", ":", ":", "2", ",", "1", ":", ":", "2", "]", ",", "x", "[", "...", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", "]", ",", "1", ")", ")", "\n", "# return self.conv(self.contract(x))", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Contract.__init__": [[343, 346], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gain", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gain", "=", "gain", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Contract.forward": [[347, 353], ["x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "# assert (H / s == 0) and (W / s == 0), 'Indivisible gain'", "\n", "s", "=", "self", ".", "gain", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ",", "H", "//", "s", ",", "s", ",", "W", "//", "s", ",", "s", ")", "# x(1,64,40,2,40,2)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "# x(1,2,2,64,40,40)", "\n", "return", "x", ".", "view", "(", "N", ",", "C", "*", "s", "*", "s", ",", "H", "//", "s", ",", "W", "//", "s", ")", "# x(1,256,40,40)", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Expand.__init__": [[357, 360], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gain", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gain", "=", "gain", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Expand.forward": [[361, 367], ["x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "# assert C / s ** 2 == 0, 'Indivisible gain'", "\n", "s", "=", "self", ".", "gain", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "s", ",", "s", ",", "C", "//", "s", "**", "2", ",", "H", ",", "W", ")", "# x(1,2,2,16,80,80)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "5", ",", "2", ")", ".", "contiguous", "(", ")", "# x(1,16,80,2,80,2)", "\n", "return", "x", ".", "view", "(", "N", ",", "C", "//", "s", "**", "2", ",", "H", "*", "s", ",", "W", "*", "s", ")", "# x(1,16,160,160)", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Concat.__init__": [[371, 374], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dimension", "=", "1", ")", ":", "\n", "        ", "super", "(", "Concat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d", "=", "dimension", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Concat.forward": [[375, 377], ["torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "x", ",", "self", ".", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.NMS.__init__": [[385, 387], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NMS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.NMS.forward": [[388, 390], ["utils.general.non_max_suppression"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.non_max_suppression"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "non_max_suppression", "(", "x", "[", "0", "]", ",", "conf_thres", "=", "self", ".", "conf", ",", "iou_thres", "=", "self", ".", "iou", ",", "classes", "=", "self", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.autoShape.__init__": [[398, 401], ["torch.Module.__init__", "model.eval"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "autoShape", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.autoShape.autoshape": [[402, 405], ["print"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "def", "autoshape", "(", "self", ")", ":", "\n", "        ", "print", "(", "'autoShape already enabled, skipping... '", ")", "# model already converted to model.autoshape()", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.autoShape.forward": [[406, 460], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "next", "isinstance", "enumerate", "numpy.ascontiguousarray", "t.append", "utils.torch_utils.time_synchronized", "common.autoShape.model.parameters", "isinstance", "isinstance", "files.append", "shape0.append", "shape1.append", "utils.general.make_divisible", "numpy.stack", "numpy.ascontiguousarray.transpose", "torch.from_numpy().to().type_as", "torch.from_numpy().to().type_as", "torch.from_numpy().to().type_as", "torch.from_numpy().to().type_as", "utils.torch_utils.time_synchronized", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "t.append", "utils.general.non_max_suppression", "range", "t.append", "common.Detections", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "common.autoShape.model", "len", "isinstance", "im.transpose.transpose.transpose", "numpy.tile", "max", "int", "numpy.stack().max", "utils.datasets.letterbox", "common.autoShape.model", "utils.torch_utils.time_synchronized", "utils.general.scale_coords", "utils.torch_utils.time_synchronized", "imgs.to().type_as", "numpy.asarray", "pathlib.Path().with_suffix", "common.autoShape.stride.max", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "PIL.Image.open", "numpy.asarray", "numpy.stack", "imgs.to", "getattr", "pathlib.Path", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "im.transpose.transpose.startswith", "requests.get"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.make_divisible", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.non_max_suppression", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.datasets.letterbox", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.scale_coords", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "imgs", ",", "size", "=", "640", ",", "augment", "=", "False", ",", "profile", "=", "False", ")", ":", "\n", "# Inference from various sources. For height=640, width=1280, RGB images example inputs are:", "\n", "#   filename:   imgs = 'data/samples/zidane.jpg'", "\n", "#   URI:             = 'https://github.com/ultralytics/yolov5/releases/download/v1.0/zidane.jpg'", "\n", "#   OpenCV:          = cv2.imread('image.jpg')[:,:,::-1]  # HWC BGR to RGB x(640,1280,3)", "\n", "#   PIL:             = Image.open('image.jpg')  # HWC x(640,1280,3)", "\n", "#   numpy:           = np.zeros((640,1280,3))  # HWC", "\n", "#   torch:           = torch.zeros(16,3,320,640)  # BCHW (scaled to size=640, 0-1 values)", "\n", "#   multiple:        = [Image.open('image1.jpg'), Image.open('image2.jpg'), ...]  # list of images", "\n", "\n", "        ", "t", "=", "[", "time_synchronized", "(", ")", "]", "\n", "p", "=", "next", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "# for device and type", "\n", "if", "isinstance", "(", "imgs", ",", "torch", ".", "Tensor", ")", ":", "# torch", "\n", "            ", "with", "amp", ".", "autocast", "(", "enabled", "=", "p", ".", "device", ".", "type", "!=", "'cpu'", ")", ":", "\n", "                ", "return", "self", ".", "model", "(", "imgs", ".", "to", "(", "p", ".", "device", ")", ".", "type_as", "(", "p", ")", ",", "augment", ",", "profile", ")", "# inference", "\n", "\n", "# Pre-process", "\n", "", "", "n", ",", "imgs", "=", "(", "len", "(", "imgs", ")", ",", "imgs", ")", "if", "isinstance", "(", "imgs", ",", "list", ")", "else", "(", "1", ",", "[", "imgs", "]", ")", "# number of images, list of images", "\n", "shape0", ",", "shape1", ",", "files", "=", "[", "]", ",", "[", "]", ",", "[", "]", "# image and inference shapes, filenames", "\n", "for", "i", ",", "im", "in", "enumerate", "(", "imgs", ")", ":", "\n", "            ", "f", "=", "f'image{i}'", "# filename", "\n", "if", "isinstance", "(", "im", ",", "str", ")", ":", "# filename or uri", "\n", "                ", "im", ",", "f", "=", "np", ".", "asarray", "(", "Image", ".", "open", "(", "requests", ".", "get", "(", "im", ",", "stream", "=", "True", ")", ".", "raw", "if", "im", ".", "startswith", "(", "'http'", ")", "else", "im", ")", ")", ",", "im", "\n", "", "elif", "isinstance", "(", "im", ",", "Image", ".", "Image", ")", ":", "# PIL Image", "\n", "                ", "im", ",", "f", "=", "np", ".", "asarray", "(", "im", ")", ",", "getattr", "(", "im", ",", "'filename'", ",", "f", ")", "or", "f", "\n", "", "files", ".", "append", "(", "Path", "(", "f", ")", ".", "with_suffix", "(", "'.jpg'", ")", ".", "name", ")", "\n", "if", "im", ".", "shape", "[", "0", "]", "<", "5", ":", "# image in CHW", "\n", "                ", "im", "=", "im", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "# reverse dataloader .transpose(2, 0, 1)", "\n", "", "im", "=", "im", "[", ":", ",", ":", ",", ":", "3", "]", "if", "im", ".", "ndim", "==", "3", "else", "np", ".", "tile", "(", "im", "[", ":", ",", ":", ",", "None", "]", ",", "3", ")", "# enforce 3ch input", "\n", "s", "=", "im", ".", "shape", "[", ":", "2", "]", "# HWC", "\n", "shape0", ".", "append", "(", "s", ")", "# image shape", "\n", "g", "=", "(", "size", "/", "max", "(", "s", ")", ")", "# gain", "\n", "shape1", ".", "append", "(", "[", "y", "*", "g", "for", "y", "in", "s", "]", ")", "\n", "imgs", "[", "i", "]", "=", "im", "# update", "\n", "", "shape1", "=", "[", "make_divisible", "(", "x", ",", "int", "(", "self", ".", "stride", ".", "max", "(", ")", ")", ")", "for", "x", "in", "np", ".", "stack", "(", "shape1", ",", "0", ")", ".", "max", "(", "0", ")", "]", "# inference shape", "\n", "x", "=", "[", "letterbox", "(", "im", ",", "new_shape", "=", "shape1", ",", "auto", "=", "False", ")", "[", "0", "]", "for", "im", "in", "imgs", "]", "# pad", "\n", "x", "=", "np", ".", "stack", "(", "x", ",", "0", ")", "if", "n", ">", "1", "else", "x", "[", "0", "]", "[", "None", "]", "# stack", "\n", "x", "=", "np", ".", "ascontiguousarray", "(", "x", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", "# BHWC to BCHW", "\n", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "to", "(", "p", ".", "device", ")", ".", "type_as", "(", "p", ")", "/", "255.", "# uint8 to fp16/32", "\n", "t", ".", "append", "(", "time_synchronized", "(", ")", ")", "\n", "\n", "with", "amp", ".", "autocast", "(", "enabled", "=", "p", ".", "device", ".", "type", "!=", "'cpu'", ")", ":", "\n", "# Inference", "\n", "            ", "y", "=", "self", ".", "model", "(", "x", ",", "augment", ",", "profile", ")", "[", "0", "]", "# forward", "\n", "t", ".", "append", "(", "time_synchronized", "(", ")", ")", "\n", "\n", "# Post-process", "\n", "y", "=", "non_max_suppression", "(", "y", ",", "conf_thres", "=", "self", ".", "conf", ",", "iou_thres", "=", "self", ".", "iou", ",", "classes", "=", "self", ".", "classes", ")", "# NMS", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "scale_coords", "(", "shape1", ",", "y", "[", "i", "]", "[", ":", ",", ":", "4", "]", ",", "shape0", "[", "i", "]", ")", "\n", "\n", "", "t", ".", "append", "(", "time_synchronized", "(", ")", ")", "\n", "return", "Detections", "(", "imgs", ",", "y", ",", "files", ",", "t", ",", "self", ".", "names", ",", "x", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.__init__": [[464, 479], ["super().__init__", "len", "tuple", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "utils.general.xyxy2xywh", "zip", "zip", "range"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.xyxy2xywh"], ["    ", "def", "__init__", "(", "self", ",", "imgs", ",", "pred", ",", "files", ",", "times", "=", "None", ",", "names", "=", "None", ",", "shape", "=", "None", ")", ":", "\n", "        ", "super", "(", "Detections", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d", "=", "pred", "[", "0", "]", ".", "device", "# device", "\n", "gn", "=", "[", "torch", ".", "tensor", "(", "[", "*", "[", "im", ".", "shape", "[", "i", "]", "for", "i", "in", "[", "1", ",", "0", ",", "1", ",", "0", "]", "]", ",", "1.", ",", "1.", "]", ",", "device", "=", "d", ")", "for", "im", "in", "imgs", "]", "# normalizations", "\n", "self", ".", "imgs", "=", "imgs", "# list of images as numpy arrays", "\n", "self", ".", "pred", "=", "pred", "# list of tensors pred[0] = (xyxy, conf, cls)", "\n", "self", ".", "names", "=", "names", "# class names", "\n", "self", ".", "files", "=", "files", "# image filenames", "\n", "self", ".", "xyxy", "=", "pred", "# xyxy pixels", "\n", "self", ".", "xywh", "=", "[", "xyxy2xywh", "(", "x", ")", "for", "x", "in", "pred", "]", "# xywh pixels", "\n", "self", ".", "xyxyn", "=", "[", "x", "/", "g", "for", "x", ",", "g", "in", "zip", "(", "self", ".", "xyxy", ",", "gn", ")", "]", "# xyxy normalized", "\n", "self", ".", "xywhn", "=", "[", "x", "/", "g", "for", "x", ",", "g", "in", "zip", "(", "self", ".", "xywh", ",", "gn", ")", "]", "# xywh normalized", "\n", "self", ".", "n", "=", "len", "(", "self", ".", "pred", ")", "# number of images (batch size)", "\n", "self", ".", "t", "=", "tuple", "(", "(", "times", "[", "i", "+", "1", "]", "-", "times", "[", "i", "]", ")", "*", "1000", "/", "self", ".", "n", "for", "i", "in", "range", "(", "3", ")", ")", "# timestamps (ms)", "\n", "self", ".", "s", "=", "shape", "# inference BCHW shape", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.display": [[480, 503], ["utils.plots.color_list", "enumerate", "zip", "pred[].unique", "isinstance", "PIL.Image.fromarray", "common.Detections.print"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.plots.color_list", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "def", "display", "(", "self", ",", "pprint", "=", "False", ",", "show", "=", "False", ",", "save", "=", "False", ",", "render", "=", "False", ",", "save_dir", "=", "''", ")", ":", "\n", "        ", "colors", "=", "color_list", "(", ")", "\n", "for", "i", ",", "(", "img", ",", "pred", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "imgs", ",", "self", ".", "pred", ")", ")", ":", "\n", "            ", "str", "=", "f'image {i + 1}/{len(self.pred)}: {img.shape[0]}x{img.shape[1]} '", "\n", "if", "pred", "is", "not", "None", ":", "\n", "                ", "for", "c", "in", "pred", "[", ":", ",", "-", "1", "]", ".", "unique", "(", ")", ":", "\n", "                    ", "n", "=", "(", "pred", "[", ":", ",", "-", "1", "]", "==", "c", ")", ".", "sum", "(", ")", "# detections per class", "\n", "str", "+=", "f\"{n} {self.names[int(c)]}{'s' * (n > 1)}, \"", "# add to string", "\n", "", "if", "show", "or", "save", "or", "render", ":", "\n", "                    ", "for", "*", "box", ",", "conf", ",", "cls", "in", "pred", ":", "# xyxy, confidence, class", "\n", "                        ", "label", "=", "f'{self.names[int(cls)]} {conf:.2f}'", "\n", "plot_one_box", "(", "box", ",", "img", ",", "label", "=", "label", ",", "color", "=", "colors", "[", "int", "(", "cls", ")", "%", "10", "]", ")", "\n", "", "", "", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", "else", "img", "# from np", "\n", "if", "pprint", ":", "\n", "                ", "print", "(", "str", ".", "rstrip", "(", "', '", ")", ")", "\n", "", "if", "show", ":", "\n", "                ", "img", ".", "show", "(", "self", ".", "files", "[", "i", "]", ")", "# show", "\n", "", "if", "save", ":", "\n", "                ", "f", "=", "self", ".", "files", "[", "i", "]", "\n", "img", ".", "save", "(", "Path", "(", "save_dir", ")", "/", "f", ")", "# save", "\n", "print", "(", "f\"{'Saved' * (i == 0)} {f}\"", ",", "end", "=", "','", "if", "i", "<", "self", ".", "n", "-", "1", "else", "f' to {save_dir}\\n'", ")", "\n", "", "if", "render", ":", "\n", "                ", "self", ".", "imgs", "[", "i", "]", "=", "np", ".", "asarray", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print": [[504, 507], ["common.Detections.display", "common.Detections.print"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.display", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "", "", "def", "print", "(", "self", ")", ":", "\n", "        ", "self", ".", "display", "(", "pprint", "=", "True", ")", "# print results", "\n", "print", "(", "f'Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape {tuple(self.s)}'", "%", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.show": [[508, 510], ["common.Detections.display"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.display"], ["", "def", "show", "(", "self", ")", ":", "\n", "        ", "self", ".", "display", "(", "show", "=", "True", ")", "# show results", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.save": [[511, 515], ["utils.general.increment_path", "pathlib.Path().mkdir", "common.Detections.display", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.increment_path", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.display"], ["", "def", "save", "(", "self", ",", "save_dir", "=", "'runs/hub/exp'", ")", ":", "\n", "        ", "save_dir", "=", "increment_path", "(", "save_dir", ",", "exist_ok", "=", "save_dir", "!=", "'runs/hub/exp'", ")", "# increment save_dir", "\n", "Path", "(", "save_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "display", "(", "save", "=", "True", ",", "save_dir", "=", "save_dir", ")", "# save results", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.render": [[516, 519], ["common.Detections.display"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.display"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "self", ".", "display", "(", "render", "=", "True", ")", "# render results", "\n", "return", "self", ".", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.pandas": [[520, 529], ["copy.copy.copy", "zip", "setattr", "getattr", "pandas.DataFrame", "x.tolist", "int", "int"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.tolist"], ["", "def", "pandas", "(", "self", ")", ":", "\n", "# return detections as pandas DataFrames, i.e. print(results.pandas().xyxy[0])", "\n", "        ", "new", "=", "copy", "(", "self", ")", "# return copy", "\n", "ca", "=", "'xmin'", ",", "'ymin'", ",", "'xmax'", ",", "'ymax'", ",", "'confidence'", ",", "'class'", ",", "'name'", "# xyxy columns", "\n", "cb", "=", "'xcenter'", ",", "'ycenter'", ",", "'width'", ",", "'height'", ",", "'confidence'", ",", "'class'", ",", "'name'", "# xywh columns", "\n", "for", "k", ",", "c", "in", "zip", "(", "[", "'xyxy'", ",", "'xyxyn'", ",", "'xywh'", ",", "'xywhn'", "]", ",", "[", "ca", ",", "ca", ",", "cb", ",", "cb", "]", ")", ":", "\n", "            ", "a", "=", "[", "[", "x", "[", ":", "5", "]", "+", "[", "int", "(", "x", "[", "5", "]", ")", ",", "self", ".", "names", "[", "int", "(", "x", "[", "5", "]", ")", "]", "]", "for", "x", "in", "x", ".", "tolist", "(", ")", "]", "for", "x", "in", "getattr", "(", "self", ",", "k", ")", "]", "# update", "\n", "setattr", "(", "new", ",", "k", ",", "[", "pd", ".", "DataFrame", "(", "x", ",", "columns", "=", "c", ")", "for", "x", "in", "a", "]", ")", "\n", "", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.tolist": [[530, 537], ["common.Detections", "range", "setattr", "getattr"], "methods", ["None"], ["", "def", "tolist", "(", "self", ")", ":", "\n", "# return a list of Detections objects, i.e. 'for result in results.tolist():'", "\n", "        ", "x", "=", "[", "Detections", "(", "[", "self", ".", "imgs", "[", "i", "]", "]", ",", "[", "self", ".", "pred", "[", "i", "]", "]", ",", "self", ".", "names", ",", "self", ".", "s", ")", "for", "i", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "for", "d", "in", "x", ":", "\n", "            ", "for", "k", "in", "[", "'imgs'", ",", "'pred'", ",", "'xyxy'", ",", "'xyxyn'", ",", "'xywh'", ",", "'xywhn'", "]", ":", "\n", "                ", "setattr", "(", "d", ",", "k", ",", "getattr", "(", "d", ",", "k", ")", "[", "0", "]", ")", "# pop out of list", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.__len__": [[538, 540], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Classify.__init__": [[544, 549], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Flatten", "torch.Flatten", "common.autopad"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.autopad"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "1", ",", "s", "=", "1", ",", "p", "=", "None", ",", "g", "=", "1", ")", ":", "# ch_in, ch_out, kernel, stride, padding, groups", "\n", "        ", "super", "(", "Classify", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "aap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "# to x(b,c1,1,1)", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "c1", ",", "c2", ",", "k", ",", "s", ",", "autopad", "(", "k", ",", "p", ")", ",", "groups", "=", "g", ")", "# to x(b,c2,1,1)", "\n", "self", ".", "flat", "=", "nn", ".", "Flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Classify.forward": [[550, 553], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "common.Classify.flat", "common.Classify.conv", "common.Classify.aap", "isinstance"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "torch", ".", "cat", "(", "[", "self", ".", "aap", "(", "y", ")", "for", "y", "in", "(", "x", "if", "isinstance", "(", "x", ",", "list", ")", "else", "[", "x", "]", ")", "]", ",", "1", ")", "# cat if list", "\n", "return", "self", ".", "flat", "(", "self", ".", "conv", "(", "z", ")", ")", "# flatten to x(b,c2)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.autopad": [[21, 26], ["isinstance"], "function", ["None"], ["def", "autopad", "(", "k", ",", "p", "=", "None", ")", ":", "# kernel, padding", "\n", "# Pad to 'same'", "\n", "    ", "if", "p", "is", "None", ":", "\n", "        ", "p", "=", "k", "//", "2", "if", "isinstance", "(", "k", ",", "int", ")", "else", "[", "x", "//", "2", "for", "x", "in", "k", "]", "# auto-pad", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.DWConv": [[28, 31], ["common.Conv", "math.gcd"], "function", ["None"], ["", "def", "DWConv", "(", "c1", ",", "c2", ",", "k", "=", "1", ",", "s", "=", "1", ",", "act", "=", "True", ")", ":", "\n", "# Depthwise convolution", "\n", "    ", "return", "Conv", "(", "c1", ",", "c2", ",", "k", ",", "s", ",", "g", "=", "math", ".", "gcd", "(", "c1", ",", "c2", ")", ",", "act", "=", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.CrossConv.__init__": [[13, 20], ["torch.Module.__init__", "int", "models.common.Conv", "models.common.Conv"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "3", ",", "s", "=", "1", ",", "g", "=", "1", ",", "e", "=", "1.0", ",", "shortcut", "=", "False", ")", ":", "\n", "# ch_in, ch_out, kernel, stride, groups, expansion, shortcut", "\n", "        ", "super", "(", "CrossConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "int", "(", "c2", "*", "e", ")", "# hidden channels", "\n", "self", ".", "cv1", "=", "Conv", "(", "c1", ",", "c_", ",", "(", "1", ",", "k", ")", ",", "(", "1", ",", "s", ")", ")", "\n", "self", ".", "cv2", "=", "Conv", "(", "c_", ",", "c2", ",", "(", "k", ",", "1", ")", ",", "(", "s", ",", "1", ")", ",", "g", "=", "g", ")", "\n", "self", ".", "add", "=", "shortcut", "and", "c1", "==", "c2", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.CrossConv.forward": [[21, 23], ["experimental.CrossConv.cv2", "experimental.CrossConv.cv2", "experimental.CrossConv.cv1", "experimental.CrossConv.cv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "cv2", "(", "self", ".", "cv1", "(", "x", ")", ")", "if", "self", ".", "add", "else", "self", ".", "cv2", "(", "self", ".", "cv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.Sum.__init__": [[27, 33], ["torch.Module.__init__", "range", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "weight", "=", "False", ")", ":", "# n: number of inputs", "\n", "        ", "super", "(", "Sum", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "# apply weights boolean", "\n", "self", ".", "iter", "=", "range", "(", "n", "-", "1", ")", "# iter object", "\n", "if", "weight", ":", "\n", "            ", "self", ".", "w", "=", "nn", ".", "Parameter", "(", "-", "torch", ".", "arange", "(", "1.", ",", "n", ")", "/", "2", ",", "requires_grad", "=", "True", ")", "# layer weights", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.Sum.forward": [[34, 44], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", "[", "0", "]", "# no weight", "\n", "if", "self", ".", "weight", ":", "\n", "            ", "w", "=", "torch", ".", "sigmoid", "(", "self", ".", "w", ")", "*", "2", "\n", "for", "i", "in", "self", ".", "iter", ":", "\n", "                ", "y", "=", "y", "+", "x", "[", "i", "+", "1", "]", "*", "w", "[", "i", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "self", ".", "iter", ":", "\n", "                ", "y", "=", "y", "+", "x", "[", "i", "+", "1", "]", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.GhostConv.__init__": [[48, 53], ["torch.Module.__init__", "models.common.Conv", "models.common.Conv"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "1", ",", "s", "=", "1", ",", "g", "=", "1", ",", "act", "=", "True", ")", ":", "# ch_in, ch_out, kernel, stride, groups", "\n", "        ", "super", "(", "GhostConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "c2", "//", "2", "# hidden channels", "\n", "self", ".", "cv1", "=", "Conv", "(", "c1", ",", "c_", ",", "k", ",", "s", ",", "None", ",", "g", ",", "act", ")", "\n", "self", ".", "cv2", "=", "Conv", "(", "c_", ",", "c_", ",", "5", ",", "1", ",", "None", ",", "c_", ",", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.GhostConv.forward": [[54, 57], ["experimental.GhostConv.cv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "experimental.GhostConv.cv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "cv1", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y", ",", "self", ".", "cv2", "(", "y", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.GhostBottleneck.__init__": [[61, 69], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "experimental.GhostConv", "experimental.GhostConv", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "models.common.DWConv", "torch.Identity", "torch.Identity", "models.common.DWConv", "models.common.Conv"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.DWConv", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.DWConv"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "3", ",", "s", "=", "1", ")", ":", "# ch_in, ch_out, kernel, stride", "\n", "        ", "super", "(", "GhostBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "c_", "=", "c2", "//", "2", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "GhostConv", "(", "c1", ",", "c_", ",", "1", ",", "1", ")", ",", "# pw", "\n", "DWConv", "(", "c_", ",", "c_", ",", "k", ",", "s", ",", "act", "=", "False", ")", "if", "s", "==", "2", "else", "nn", ".", "Identity", "(", ")", ",", "# dw", "\n", "GhostConv", "(", "c_", ",", "c2", ",", "1", ",", "1", ",", "act", "=", "False", ")", ")", "# pw-linear", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "DWConv", "(", "c1", ",", "c1", ",", "k", ",", "s", ",", "act", "=", "False", ")", ",", "\n", "Conv", "(", "c1", ",", "c2", ",", "1", ",", "1", ",", "act", "=", "False", ")", ")", "if", "s", "==", "2", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.GhostBottleneck.forward": [[70, 72], ["experimental.GhostBottleneck.conv", "experimental.GhostBottleneck.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.MixConv2d.__init__": [[76, 93], ["torch.Module.__init__", "len", "torch.ModuleList", "torch.ModuleList", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.linspace().floor", "torch.linspace().floor", "torch.linspace().floor", "torch.linspace().floor", "numpy.eye", "numpy.roll", "[].round", "numpy.array", "torch.Conv2d", "torch.Conv2d", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "range", "int", "range", "numpy.linalg.lstsq"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1", ",", "c2", ",", "k", "=", "(", "1", ",", "3", ")", ",", "s", "=", "1", ",", "equal_ch", "=", "True", ")", ":", "\n", "        ", "super", "(", "MixConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "groups", "=", "len", "(", "k", ")", "\n", "if", "equal_ch", ":", "# equal c_ per group", "\n", "            ", "i", "=", "torch", ".", "linspace", "(", "0", ",", "groups", "-", "1E-6", ",", "c2", ")", ".", "floor", "(", ")", "# c2 indices", "\n", "c_", "=", "[", "(", "i", "==", "g", ")", ".", "sum", "(", ")", "for", "g", "in", "range", "(", "groups", ")", "]", "# intermediate channels", "\n", "", "else", ":", "# equal weight.numel() per group", "\n", "            ", "b", "=", "[", "c2", "]", "+", "[", "0", "]", "*", "groups", "\n", "a", "=", "np", ".", "eye", "(", "groups", "+", "1", ",", "groups", ",", "k", "=", "-", "1", ")", "\n", "a", "-=", "np", ".", "roll", "(", "a", ",", "1", ",", "axis", "=", "1", ")", "\n", "a", "*=", "np", ".", "array", "(", "k", ")", "**", "2", "\n", "a", "[", "0", "]", "=", "1", "\n", "c_", "=", "np", ".", "linalg", ".", "lstsq", "(", "a", ",", "b", ",", "rcond", "=", "None", ")", "[", "0", "]", ".", "round", "(", ")", "# solve for equal weight indices, ax = b", "\n", "\n", "", "self", ".", "m", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv2d", "(", "c1", ",", "int", "(", "c_", "[", "g", "]", ")", ",", "k", "[", "g", "]", ",", "s", ",", "k", "[", "g", "]", "//", "2", ",", "bias", "=", "False", ")", "for", "g", "in", "range", "(", "groups", ")", "]", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "c2", ")", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.MixConv2d.forward": [[94, 96], ["experimental.MixConv2d.act", "experimental.MixConv2d.bn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "m"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "act", "(", "self", ".", "bn", "(", "torch", ".", "cat", "(", "[", "m", "(", "x", ")", "for", "m", "in", "self", ".", "m", "]", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.Ensemble.__init__": [[100, 102], ["torch.ModuleList.__init__"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Ensemble", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.Ensemble.forward": [[103, 111], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "augment", "=", "False", ")", ":", "\n", "        ", "y", "=", "[", "]", "\n", "for", "module", "in", "self", ":", "\n", "            ", "y", ".", "append", "(", "module", "(", "x", ",", "augment", ")", "[", "0", "]", ")", "\n", "# y = torch.stack(y).max(0)[0]  # max ensemble", "\n", "# y = torch.stack(y).mean(0)  # mean ensemble", "\n", "", "y", "=", "torch", ".", "cat", "(", "y", ",", "1", ")", "# nms ensemble", "\n", "return", "y", ",", "None", "# inference, train output", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.experimental.attempt_load": [[113, 135], ["experimental.Ensemble", "Ensemble.modules", "isinstance", "utils.google_utils.attempt_download", "torch.load", "torch.load", "Ensemble.append", "len", "print", "ckpt[].float().fuse().eval", "type", "setattr", "type", "set", "getattr", "ckpt[].float().fuse", "ckpt[].float", "torch.load.get"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.google_utils.attempt_download", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.fuse"], ["", "", "def", "attempt_load", "(", "weights", ",", "map_location", "=", "None", ")", ":", "\n", "# Loads an ensemble of models weights=[a,b,c] or a single model weights=[a] or weights=a", "\n", "    ", "model", "=", "Ensemble", "(", ")", "\n", "for", "w", "in", "weights", "if", "isinstance", "(", "weights", ",", "list", ")", "else", "[", "weights", "]", ":", "\n", "        ", "attempt_download", "(", "w", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "w", ",", "map_location", "=", "map_location", ")", "# load", "\n", "model", ".", "append", "(", "ckpt", "[", "'ema'", "if", "ckpt", ".", "get", "(", "'ema'", ")", "else", "'model'", "]", ".", "float", "(", ")", ".", "fuse", "(", ")", ".", "eval", "(", ")", ")", "# FP32 model", "\n", "\n", "# Compatibility updates", "\n", "", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "type", "(", "m", ")", "in", "[", "nn", ".", "Hardswish", ",", "nn", ".", "LeakyReLU", ",", "nn", ".", "ReLU", ",", "nn", ".", "ReLU6", ",", "nn", ".", "SiLU", "]", ":", "\n", "            ", "m", ".", "inplace", "=", "True", "# pytorch 1.7.0 compatibility", "\n", "", "elif", "type", "(", "m", ")", "is", "Conv", ":", "\n", "            ", "m", ".", "_non_persistent_buffers_set", "=", "set", "(", ")", "# pytorch 1.6.0 compatibility", "\n", "\n", "", "", "if", "len", "(", "model", ")", "==", "1", ":", "\n", "        ", "return", "model", "[", "-", "1", "]", "# return model", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Ensemble created with %s\\n'", "%", "weights", ")", "\n", "for", "k", "in", "[", "'names'", ",", "'stride'", "]", ":", "\n", "            ", "setattr", "(", "model", ",", "k", ",", "getattr", "(", "model", "[", "-", "1", "]", ",", "k", ")", ")", "\n", "", "return", "model", "# return ensemble", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Detect.__init__": [[30, 41], ["nn.Module.__init__", "len", "torch.tensor().float().view", "yolo.Detect.register_buffer", "yolo.Detect.register_buffer", "nn.ModuleList", "len", "torch.tensor().float().view.clone().view", "torch.zeros", "torch.tensor().float", "nn.Conv2d", "torch.tensor().float().view.clone", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__"], ["def", "__init__", "(", "self", ",", "nc", "=", "80", ",", "anchors", "=", "(", ")", ",", "ch", "=", "(", ")", ")", ":", "# detection layer", "\n", "        ", "super", "(", "Detect", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nc", "=", "nc", "# number of classes", "\n", "self", ".", "no", "=", "nc", "+", "5", "# number of outputs per anchor", "\n", "self", ".", "nl", "=", "len", "(", "anchors", ")", "# number of detection layers", "\n", "self", ".", "na", "=", "len", "(", "anchors", "[", "0", "]", ")", "//", "2", "# number of anchors", "\n", "self", ".", "grid", "=", "[", "torch", ".", "zeros", "(", "1", ")", "]", "*", "self", ".", "nl", "# init grid", "\n", "a", "=", "torch", ".", "tensor", "(", "anchors", ")", ".", "float", "(", ")", ".", "view", "(", "self", ".", "nl", ",", "-", "1", ",", "2", ")", "\n", "self", ".", "register_buffer", "(", "'anchors'", ",", "a", ")", "# shape(nl,na,2)", "\n", "self", ".", "register_buffer", "(", "'anchor_grid'", ",", "a", ".", "clone", "(", ")", ".", "view", "(", "self", ".", "nl", ",", "1", ",", "-", "1", ",", "1", ",", "1", ",", "2", ")", ")", "# shape(nl,1,na,1,1,2)", "\n", "self", ".", "m", "=", "nn", ".", "ModuleList", "(", "nn", ".", "Conv2d", "(", "x", ",", "self", ".", "no", "*", "self", ".", "na", ",", "1", ")", "for", "x", "in", "ch", ")", "# output conv", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Detect.forward": [[42, 61], ["range", "x[].view().permute().contiguous", "x[].sigmoid", "z.append", "torch.cat", "x[].view().permute", "yolo.Detect._make_grid().to", "x[].sigmoid.view", "x[].view", "yolo.Detect._make_grid"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Detect._make_grid"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x = x.copy()  # for profiling", "\n", "        ", "z", "=", "[", "]", "# inference output", "\n", "self", ".", "training", "|=", "self", ".", "export", "\n", "for", "i", "in", "range", "(", "self", ".", "nl", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "m", "[", "i", "]", "(", "x", "[", "i", "]", ")", "# conv", "\n", "bs", ",", "_", ",", "ny", ",", "nx", "=", "x", "[", "i", "]", ".", "shape", "# x(bs,255,20,20) to x(bs,3,20,20,85)", "\n", "x", "[", "i", "]", "=", "x", "[", "i", "]", ".", "view", "(", "bs", ",", "self", ".", "na", ",", "self", ".", "no", ",", "ny", ",", "nx", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "# inference", "\n", "                ", "if", "self", ".", "grid", "[", "i", "]", ".", "shape", "[", "2", ":", "4", "]", "!=", "x", "[", "i", "]", ".", "shape", "[", "2", ":", "4", "]", ":", "\n", "                    ", "self", ".", "grid", "[", "i", "]", "=", "self", ".", "_make_grid", "(", "nx", ",", "ny", ")", ".", "to", "(", "x", "[", "i", "]", ".", "device", ")", "\n", "\n", "", "y", "=", "x", "[", "i", "]", ".", "sigmoid", "(", ")", "\n", "y", "[", "...", ",", "0", ":", "2", "]", "=", "(", "y", "[", "...", ",", "0", ":", "2", "]", "*", "2.", "-", "0.5", "+", "self", ".", "grid", "[", "i", "]", ")", "*", "self", ".", "stride", "[", "i", "]", "# xy", "\n", "y", "[", "...", ",", "2", ":", "4", "]", "=", "(", "y", "[", "...", ",", "2", ":", "4", "]", "*", "2", ")", "**", "2", "*", "self", ".", "anchor_grid", "[", "i", "]", "# wh", "\n", "z", ".", "append", "(", "y", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "no", ")", ")", "\n", "\n", "", "", "return", "x", "if", "self", ".", "training", "else", "(", "torch", ".", "cat", "(", "z", ",", "1", ")", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Detect._make_grid": [[62, 66], ["torch.meshgrid", "torch.stack().view().float", "torch.arange", "torch.arange", "torch.stack().view", "torch.stack"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_make_grid", "(", "nx", "=", "20", ",", "ny", "=", "20", ")", ":", "\n", "        ", "yv", ",", "xv", "=", "torch", ".", "meshgrid", "(", "[", "torch", ".", "arange", "(", "ny", ")", ",", "torch", ".", "arange", "(", "nx", ")", "]", ")", "\n", "return", "torch", ".", "stack", "(", "(", "xv", ",", "yv", ")", ",", "2", ")", ".", "view", "(", "(", "1", ",", "1", ",", "ny", ",", "nx", ",", "2", ")", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__": [[69, 106], ["nn.Module.__init__", "isinstance", "yolo.Model.yaml.get", "yolo.parse_model", "isinstance", "utils.torch_utils.initialize_weights", "yolo.Model.info", "logger.info", "logger.info", "logger.info", "round", "copy.deepcopy", "str", "torch.tensor", "m.stride.view", "utils.autoanchor.check_anchor_order", "yolo.Model._initialize_biases", "Path", "open", "yaml.load", "range", "yolo.Model.forward", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.__init__", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.parse_model", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.initialize_weights", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.autoanchor.check_anchor_order", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model._initialize_biases", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.forward"], ["    ", "def", "__init__", "(", "self", ",", "cfg", "=", "'yolov3.yaml'", ",", "ch", "=", "3", ",", "nc", "=", "None", ",", "anchors", "=", "None", ")", ":", "# model, input channels, number of classes", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "cfg", ",", "dict", ")", ":", "\n", "            ", "self", ".", "yaml", "=", "cfg", "# model dict", "\n", "", "else", ":", "# is *.yaml", "\n", "            ", "import", "yaml", "# for torch hub", "\n", "self", ".", "yaml_file", "=", "Path", "(", "cfg", ")", ".", "name", "\n", "with", "open", "(", "cfg", ")", "as", "f", ":", "\n", "                ", "self", ".", "yaml", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", "# model dict", "\n", "\n", "# Define model", "\n", "", "", "ch", "=", "self", ".", "yaml", "[", "'ch'", "]", "=", "self", ".", "yaml", ".", "get", "(", "'ch'", ",", "ch", ")", "# input channels", "\n", "if", "nc", "and", "nc", "!=", "self", ".", "yaml", "[", "'nc'", "]", ":", "\n", "            ", "logger", ".", "info", "(", "f\"Overriding model.yaml nc={self.yaml['nc']} with nc={nc}\"", ")", "\n", "self", ".", "yaml", "[", "'nc'", "]", "=", "nc", "# override yaml value", "\n", "", "if", "anchors", ":", "\n", "            ", "logger", ".", "info", "(", "f'Overriding model.yaml anchors with anchors={anchors}'", ")", "\n", "self", ".", "yaml", "[", "'anchors'", "]", "=", "round", "(", "anchors", ")", "# override yaml value", "\n", "", "self", ".", "model", ",", "self", ".", "save", "=", "parse_model", "(", "deepcopy", "(", "self", ".", "yaml", ")", ",", "ch", "=", "[", "ch", "]", ")", "# model, savelist", "\n", "self", ".", "names", "=", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "yaml", "[", "'nc'", "]", ")", "]", "# default names", "\n", "# print([x.shape for x in self.forward(torch.zeros(1, ch, 64, 64))])", "\n", "\n", "# Build strides, anchors", "\n", "m", "=", "self", ".", "model", "[", "-", "1", "]", "# Detect()", "\n", "if", "isinstance", "(", "m", ",", "Detect", ")", ":", "\n", "            ", "s", "=", "256", "# 2x min stride", "\n", "m", ".", "stride", "=", "torch", ".", "tensor", "(", "[", "s", "/", "x", ".", "shape", "[", "-", "2", "]", "for", "x", "in", "self", ".", "forward", "(", "torch", ".", "zeros", "(", "1", ",", "ch", ",", "s", ",", "s", ")", ")", "]", ")", "# forward", "\n", "m", ".", "anchors", "/=", "m", ".", "stride", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "check_anchor_order", "(", "m", ")", "\n", "self", ".", "stride", "=", "m", ".", "stride", "\n", "self", ".", "_initialize_biases", "(", ")", "# only run once", "\n", "# print('Strides: %s' % m.stride.tolist())", "\n", "\n", "# Init weights, biases", "\n", "", "initialize_weights", "(", "self", ")", "\n", "self", ".", "info", "(", ")", "\n", "logger", ".", "info", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.forward": [[107, 126], ["zip", "yolo.Model.forward_once", "utils.torch_utils.scale_img", "y.append", "torch.cat", "yolo.Model.forward_once", "x.flip", "int", "yolo.Model.stride.max"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.forward_once", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.scale_img", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.forward_once"], ["", "def", "forward", "(", "self", ",", "x", ",", "augment", "=", "False", ",", "profile", "=", "False", ",", "imgname", "=", "''", ")", ":", "\n", "        ", "if", "augment", ":", "\n", "            ", "img_size", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "# height, width", "\n", "s", "=", "[", "1", ",", "0.83", ",", "0.67", "]", "# scales", "\n", "f", "=", "[", "None", ",", "3", ",", "None", "]", "# flips (2-ud, 3-lr)", "\n", "y", "=", "[", "]", "# outputs", "\n", "for", "si", ",", "fi", "in", "zip", "(", "s", ",", "f", ")", ":", "\n", "                ", "xi", "=", "scale_img", "(", "x", ".", "flip", "(", "fi", ")", "if", "fi", "else", "x", ",", "si", ",", "gs", "=", "int", "(", "self", ".", "stride", ".", "max", "(", ")", ")", ")", "\n", "yi", "=", "self", ".", "forward_once", "(", "xi", ")", "[", "0", "]", "# forward", "\n", "# cv2.imwrite(f'img_{si}.jpg', 255 * xi[0].cpu().numpy().transpose((1, 2, 0))[:, :, ::-1])  # save", "\n", "yi", "[", "...", ",", ":", "4", "]", "/=", "si", "# de-scale", "\n", "if", "fi", "==", "2", ":", "\n", "                    ", "yi", "[", "...", ",", "1", "]", "=", "img_size", "[", "0", "]", "-", "yi", "[", "...", ",", "1", "]", "# de-flip ud", "\n", "", "elif", "fi", "==", "3", ":", "\n", "                    ", "yi", "[", "...", ",", "0", "]", "=", "img_size", "[", "1", "]", "-", "yi", "[", "...", ",", "0", "]", "# de-flip lr", "\n", "", "y", ".", "append", "(", "yi", ")", "\n", "", "return", "torch", ".", "cat", "(", "y", ",", "1", ")", ",", "None", "# augmented inference, train", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward_once", "(", "x", ",", "profile", ",", "imgname", ")", "# single-scale inference, train", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.forward_once": [[127, 153], ["detect.feature_map", "m", "y.append", "print", "utils.torch_utils.time_synchronized", "range", "dt.append", "print", "isinstance", "m", "sum", "utils.torch_utils.time_synchronized", "thop.profile"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.None.detect.feature_map", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.time_synchronized", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.profile"], ["", "", "def", "forward_once", "(", "self", ",", "x", ",", "profile", "=", "False", ",", "imgname", "=", "''", ")", ":", "\n", "        ", "y", ",", "dt", "=", "[", "]", ",", "[", "]", "# outputs", "\n", "intermediate_features", "=", "{", "}", "\n", "i", "=", "0", "\n", "for", "m", "in", "self", ".", "model", ":", "\n", "            ", "i", "+=", "1", "\n", "if", "m", ".", "f", "!=", "-", "1", ":", "# if not from previous layer", "\n", "                ", "x", "=", "y", "[", "m", ".", "f", "]", "if", "isinstance", "(", "m", ".", "f", ",", "int", ")", "else", "[", "x", "if", "j", "==", "-", "1", "else", "y", "[", "j", "]", "for", "j", "in", "m", ".", "f", "]", "# from earlier layers", "\n", "\n", "", "if", "profile", ":", "\n", "                ", "o", "=", "thop", ".", "profile", "(", "m", ",", "inputs", "=", "(", "x", ",", ")", ",", "verbose", "=", "False", ")", "[", "0", "]", "/", "1E9", "*", "2", "if", "thop", "else", "0", "# FLOPS", "\n", "t", "=", "time_synchronized", "(", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "                    ", "_", "=", "m", "(", "x", ")", "\n", "", "dt", ".", "append", "(", "(", "time_synchronized", "(", ")", "-", "t", ")", "*", "100", ")", "\n", "print", "(", "'%10.1f%10.0f%10.1fms %-40s'", "%", "(", "o", ",", "m", ".", "np", ",", "dt", "[", "-", "1", "]", ",", "m", ".", "type", ")", ")", "\n", "\n", "", "x", "=", "m", "(", "x", ")", "# run", "\n", "# if i in range(0, 8):", "\n", "#     intermediate_features[m] = x", "\n", "y", ".", "append", "(", "x", "if", "m", ".", "i", "in", "self", ".", "save", "else", "None", ")", "# save output", "\n", "\n", "", "if", "profile", ":", "\n", "            ", "print", "(", "'%.1fms total'", "%", "sum", "(", "dt", ")", ")", "\n", "", "feature_map", "(", "intermediate_features", ",", "imgname", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model._initialize_biases": [[155, 164], ["zip", "mi.bias.view", "math.log", "torch.nn.Parameter", "math.log", "torch.log", "mi.bias.view.view", "cf.sum"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.wandb_logging.wandb_utils.WandbLogger.log"], ["", "def", "_initialize_biases", "(", "self", ",", "cf", "=", "None", ")", ":", "# initialize biases into Detect(), cf is class frequency", "\n", "# https://arxiv.org/abs/1708.02002 section 3.3", "\n", "# cf = torch.bincount(torch.tensor(np.concatenate(dataset.labels, 0)[:, 0]).long(), minlength=nc) + 1.", "\n", "        ", "m", "=", "self", ".", "model", "[", "-", "1", "]", "# Detect() module", "\n", "for", "mi", ",", "s", "in", "zip", "(", "m", ".", "m", ",", "m", ".", "stride", ")", ":", "# from", "\n", "            ", "b", "=", "mi", ".", "bias", ".", "view", "(", "m", ".", "na", ",", "-", "1", ")", "# conv.bias(255) to (3,85)", "\n", "b", ".", "data", "[", ":", ",", "4", "]", "+=", "math", ".", "log", "(", "8", "/", "(", "640", "/", "s", ")", "**", "2", ")", "# obj (8 objects per 640 image)", "\n", "b", ".", "data", "[", ":", ",", "5", ":", "]", "+=", "math", ".", "log", "(", "0.6", "/", "(", "m", ".", "nc", "-", "0.99", ")", ")", "if", "cf", "is", "None", "else", "torch", ".", "log", "(", "cf", "/", "cf", ".", "sum", "(", ")", ")", "# cls", "\n", "mi", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "b", ".", "view", "(", "-", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model._print_biases": [[165, 170], ["print", "mi.bias.detach().view", "mi.bias.detach", "b[].mean", "b[].mean().tolist", "b[].mean"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.tolist"], ["", "", "def", "_print_biases", "(", "self", ")", ":", "\n", "        ", "m", "=", "self", ".", "model", "[", "-", "1", "]", "# Detect() module", "\n", "for", "mi", "in", "m", ".", "m", ":", "# from", "\n", "            ", "b", "=", "mi", ".", "bias", ".", "detach", "(", ")", ".", "view", "(", "m", ".", "na", ",", "-", "1", ")", ".", "T", "# conv.bias(255) to (3,85)", "\n", "print", "(", "(", "'%6g Conv2d.bias:'", "+", "'%10.3g'", "*", "6", ")", "%", "(", "mi", ".", "weight", ".", "shape", "[", "1", "]", ",", "*", "b", "[", ":", "5", "]", ".", "mean", "(", "1", ")", ".", "tolist", "(", ")", ",", "b", "[", "5", ":", "]", ".", "mean", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.fuse": [[176, 185], ["print", "yolo.Model.model.modules", "yolo.Model.info", "hasattr", "utils.torch_utils.fuse_conv_and_bn", "delattr", "type"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.fuse_conv_and_bn"], ["", "", "def", "fuse", "(", "self", ")", ":", "# fuse model Conv2d() + BatchNorm2d() layers", "\n", "        ", "print", "(", "'Fusing layers... '", ")", "\n", "for", "m", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "type", "(", "m", ")", "is", "Conv", "and", "hasattr", "(", "m", ",", "'bn'", ")", ":", "\n", "                ", "m", ".", "conv", "=", "fuse_conv_and_bn", "(", "m", ".", "conv", ",", "m", ".", "bn", ")", "# update conv", "\n", "delattr", "(", "m", ",", "'bn'", ")", "# remove batchnorm", "\n", "m", ".", "forward", "=", "m", ".", "fuseforward", "# update forward", "\n", "", "", "self", ".", "info", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.nms": [[186, 199], ["type", "print", "NMS", "yolo.Model.model.add_module", "yolo.Model.eval", "print"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print"], ["", "def", "nms", "(", "self", ",", "mode", "=", "True", ")", ":", "# add or remove NMS module", "\n", "        ", "present", "=", "type", "(", "self", ".", "model", "[", "-", "1", "]", ")", "is", "NMS", "# last layer is NMS", "\n", "if", "mode", "and", "not", "present", ":", "\n", "            ", "print", "(", "'Adding NMS... '", ")", "\n", "m", "=", "NMS", "(", ")", "# module", "\n", "m", ".", "f", "=", "-", "1", "# from", "\n", "m", ".", "i", "=", "self", ".", "model", "[", "-", "1", "]", ".", "i", "+", "1", "# index", "\n", "self", ".", "model", ".", "add_module", "(", "name", "=", "'%s'", "%", "m", ".", "i", ",", "module", "=", "m", ")", "# add", "\n", "self", ".", "eval", "(", ")", "\n", "", "elif", "not", "mode", "and", "present", ":", "\n", "            ", "print", "(", "'Removing NMS... '", ")", "\n", "self", ".", "model", "=", "self", ".", "model", "[", ":", "-", "1", "]", "# remove", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.autoshape": [[200, 205], ["print", "autoShape", "utils.torch_utils.copy_attr"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.common.Detections.print", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.copy_attr"], ["", "def", "autoshape", "(", "self", ")", ":", "# add autoShape module", "\n", "        ", "print", "(", "'Adding autoShape... '", ")", "\n", "m", "=", "autoShape", "(", "self", ")", "# wrap model", "\n", "copy_attr", "(", "m", ",", "self", ",", "include", "=", "(", "'yaml'", ",", "'nc'", ",", "'hyp'", ",", "'names'", ",", "'stride'", ")", ",", "exclude", "=", "(", ")", ")", "# copy attributes", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info": [[206, 208], ["utils.torch_utils.model_info"], "methods", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.torch_utils.model_info"], ["", "def", "info", "(", "self", ",", "verbose", "=", "False", ",", "img_size", "=", "640", ")", ":", "# print model information", "\n", "        ", "model_info", "(", "self", ",", "verbose", ",", "img_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.parse_model": [[210, 262], ["logger.info", "enumerate", "isinstance", "enumerate", "[].replace", "sum", "logger.info", "save.extend", "layers.append", "ch.append", "nn.Sequential", "sorted", "len", "isinstance", "eval", "max", "nn.Sequential", "m", "round", "utils.general.make_divisible", "args.insert", "x.numel", "isinstance", "eval", "sum", "str", "m_.parameters", "args.append", "isinstance", "m", "isinstance", "range", "len", "list", "range"], "function", ["home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.models.yolo.Model.info", "home.repos.pwc.inspect_result.lmomoy_lf-yolo.utils.general.make_divisible"], ["", "", "def", "parse_model", "(", "d", ",", "ch", ")", ":", "# model_dict, input_channels(3)", "\n", "    ", "logger", ".", "info", "(", "'\\n%3s%18s%3s%10s  %-40s%-30s'", "%", "(", "''", ",", "'from'", ",", "'n'", ",", "'params'", ",", "'module'", ",", "'arguments'", ")", ")", "\n", "anchors", ",", "nc", ",", "gd", ",", "gw", "=", "d", "[", "'anchors'", "]", ",", "d", "[", "'nc'", "]", ",", "d", "[", "'depth_multiple'", "]", ",", "d", "[", "'width_multiple'", "]", "\n", "na", "=", "(", "len", "(", "anchors", "[", "0", "]", ")", "//", "2", ")", "if", "isinstance", "(", "anchors", ",", "list", ")", "else", "anchors", "# number of anchors", "\n", "no", "=", "na", "*", "(", "nc", "+", "5", ")", "# number of outputs = anchors * (classes + 5)", "\n", "\n", "layers", ",", "save", ",", "c2", "=", "[", "]", ",", "[", "]", ",", "ch", "[", "-", "1", "]", "# layers, savelist, ch out", "\n", "for", "i", ",", "(", "f", ",", "n", ",", "m", ",", "args", ")", "in", "enumerate", "(", "d", "[", "'backbone'", "]", "+", "d", "[", "'head'", "]", ")", ":", "# from, number, module, args", "\n", "        ", "m", "=", "eval", "(", "m", ")", "if", "isinstance", "(", "m", ",", "str", ")", "else", "m", "# eval strings", "\n", "for", "j", ",", "a", "in", "enumerate", "(", "args", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "args", "[", "j", "]", "=", "eval", "(", "a", ")", "if", "isinstance", "(", "a", ",", "str", ")", "else", "a", "# eval strings", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "", "n", "=", "max", "(", "round", "(", "n", "*", "gd", ")", ",", "1", ")", "if", "n", ">", "1", "else", "n", "# depth gain", "\n", "if", "m", "in", "[", "Conv", ",", "GhostConv", ",", "Bottleneck", ",", "GhostBottleneck", ",", "SPP", ",", "DWConv", ",", "MixConv2d", ",", "Focus", ",", "CrossConv", ",", "BottleneckCSP", ",", "\n", "C3", ",", "C3TR", ",", "RMF", ",", "EFE", ",", "MySpp", ",", "GhostModule", "]", ":", "\n", "            ", "c1", ",", "c2", "=", "ch", "[", "f", "]", ",", "args", "[", "0", "]", "\n", "if", "c2", "!=", "no", ":", "# if not output", "\n", "                ", "c2", "=", "make_divisible", "(", "c2", "*", "gw", ",", "8", ")", "\n", "\n", "", "args", "=", "[", "c1", ",", "c2", ",", "*", "args", "[", "1", ":", "]", "]", "\n", "if", "m", "in", "[", "BottleneckCSP", ",", "C3", ",", "C3TR", "]", ":", "\n", "                ", "args", ".", "insert", "(", "2", ",", "n", ")", "# number of repeats", "\n", "n", "=", "1", "\n", "", "", "elif", "m", "is", "nn", ".", "BatchNorm2d", ":", "\n", "            ", "args", "=", "[", "ch", "[", "f", "]", "]", "\n", "", "elif", "m", "is", "Concat", ":", "\n", "            ", "c2", "=", "sum", "(", "[", "ch", "[", "x", "]", "for", "x", "in", "f", "]", ")", "\n", "", "elif", "m", "is", "Detect", ":", "\n", "            ", "args", ".", "append", "(", "[", "ch", "[", "x", "]", "for", "x", "in", "f", "]", ")", "\n", "if", "isinstance", "(", "args", "[", "1", "]", ",", "int", ")", ":", "# number of anchors", "\n", "                ", "args", "[", "1", "]", "=", "[", "list", "(", "range", "(", "args", "[", "1", "]", "*", "2", ")", ")", "]", "*", "len", "(", "f", ")", "\n", "", "", "elif", "m", "is", "Contract", ":", "\n", "            ", "c2", "=", "ch", "[", "f", "]", "*", "args", "[", "0", "]", "**", "2", "\n", "", "elif", "m", "is", "Expand", ":", "\n", "            ", "c2", "=", "ch", "[", "f", "]", "//", "args", "[", "0", "]", "**", "2", "\n", "", "else", ":", "\n", "            ", "c2", "=", "ch", "[", "f", "]", "\n", "\n", "", "m_", "=", "nn", ".", "Sequential", "(", "*", "[", "m", "(", "*", "args", ")", "for", "_", "in", "range", "(", "n", ")", "]", ")", "if", "n", ">", "1", "else", "m", "(", "*", "args", ")", "# module", "\n", "t", "=", "str", "(", "m", ")", "[", "8", ":", "-", "2", "]", ".", "replace", "(", "'__main__.'", ",", "''", ")", "# module type", "\n", "np", "=", "sum", "(", "[", "x", ".", "numel", "(", ")", "for", "x", "in", "m_", ".", "parameters", "(", ")", "]", ")", "# number params", "\n", "m_", ".", "i", ",", "m_", ".", "f", ",", "m_", ".", "type", ",", "m_", ".", "np", "=", "i", ",", "f", ",", "t", ",", "np", "# attach index, 'from' index, type, number params", "\n", "logger", ".", "info", "(", "'%3s%18s%3s%10.0f  %-40s%-30s'", "%", "(", "i", ",", "f", ",", "n", ",", "np", ",", "t", ",", "args", ")", ")", "# print", "\n", "save", ".", "extend", "(", "x", "%", "i", "for", "x", "in", "(", "[", "f", "]", "if", "isinstance", "(", "f", ",", "int", ")", "else", "f", ")", "if", "x", "!=", "-", "1", ")", "# append to savelist", "\n", "layers", ".", "append", "(", "m_", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "ch", "=", "[", "]", "\n", "", "ch", ".", "append", "(", "c2", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", ",", "sorted", "(", "save", ")", "\n", "\n"]]}