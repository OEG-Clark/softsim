{"home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_disp.interpolate_value_disp": [[102, 126], ["x.permute.permute", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.max.float", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "interpolate_value_disp", "(", "x", ",", "indices", ",", "maxdisp", "=", "args", ".", "maxdisp", ")", ":", "\n", "    ", "\"\"\"\n    bilinear interpolate tensor x at sampled indices\n    x: [B, D, H, W] (features)\n    indices: [B, H, W] sampled indices (0-indexed)\n    \"\"\"", "\n", "\n", "# B,D,H,W to B,H,W,D", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "indices", "=", "torch", ".", "unsqueeze", "(", "indices", ",", "-", "1", ")", "\n", "\n", "indices", "=", "torch", ".", "clamp", "(", "indices", ",", "0", ",", "maxdisp", "-", "1", ")", "\n", "idx0", "=", "torch", ".", "floor", "(", "indices", ")", ".", "long", "(", ")", "\n", "idx1", "=", "torch", ".", "min", "(", "idx0", "+", "1", ",", "(", "maxdisp", "-", "1", ")", "*", "torch", ".", "ones_like", "(", "idx0", ")", ")", "\n", "idx0", "=", "torch", ".", "max", "(", "idx1", "-", "1", ",", "torch", ".", "zeros_like", "(", "idx0", ")", ")", "\n", "\n", "y0", "=", "torch", ".", "gather", "(", "x", ",", "-", "1", ",", "idx0", ")", "\n", "y1", "=", "torch", ".", "gather", "(", "x", ",", "-", "1", ",", "idx1", ")", "\n", "\n", "lmbda", "=", "indices", "-", "idx0", ".", "float", "(", ")", "\n", "output", "=", "(", "1", "-", "lmbda", ")", "*", "y0", "+", "(", "lmbda", ")", "*", "y1", "\n", "\n", "output", "=", "torch", ".", "squeeze", "(", "output", ",", "-", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_disp.W1_loss": [[128, 145], ["off.permute.permute", "prob.permute.permute", "target.unsqueeze.unsqueeze", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.sum.mean", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "W1_loss", "(", "prob", ",", "target", ",", "off", ",", "mask", ",", "epoch", ",", "reduction", "=", "\"mean\"", ")", ":", "\n", "# B,D,H,W to B,H,W,D", "\n", "    ", "off", "=", "off", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "prob", "=", "prob", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "grid", "=", "torch", ".", "arange", "(", "0", ",", "args", ".", "maxdisp", "//", "args", ".", "down", ",", "device", "=", "\"cuda\"", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "[", "\n", "None", ",", "None", ",", "None", ",", ":", "\n", "]", "\n", "depth", "=", "(", "grid", "+", "off", ")", "*", "args", ".", "down", "\n", "target", "=", "target", ".", "unsqueeze", "(", "3", ")", "\n", "out", "=", "torch", ".", "abs", "(", "depth", "[", "mask", "]", "-", "target", "[", "mask", "]", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "prob", "[", "mask", "]", "*", "out", ",", "1", ")", "\n", "\n", "if", "reduction", "==", "\"none\"", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "reduction", "==", "\"mean\"", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_disp.main": [[147, 322], ["logger.setup_logger", "sorted", "tensorboardX.SummaryWriter", "logger.setup_logger.info", "torch.DataParallel().cuda", "torch.Adam", "torch.optim.lr_scheduler.MultiStepLR", "range", "disp_utils_func.LossWise", "os.path.join", "vars().items", "logger.setup_logger.info", "disp_dataloader.KITTILoader3D.dataloader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "disp_dataloader.listflowfile.dataloader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logger.setup_logger.info", "nn.DataParallel().cuda.parameters", "os.path.isfile", "os.path.isfile", "os.makedirs", "tqdm.tqdm", "enumerate", "sys.exit", "disp_utils_func.Metric", "enumerate", "sys.exit", "torch.optim.lr_scheduler.MultiStepLR.step", "disp_utils_func.Metric", "tqdm.tqdm", "enumerate", "logger.setup_logger.info", "utils_func.Metric.tensorboard", "main_disp.save_checkpoint", "utils_func.LossWise.done", "disp_dataloader.KITTILoader_dataset3d.myImageFloder", "disp_dataloader.KITTILoader_dataset3d.myImageFloder", "disp_dataloader.SceneFlowLoader.myImageFloder", "disp_dataloader.SceneFlowLoader.myImageFloder", "sum", "torch.DataParallel", "logger.setup_logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.load_state_dict", "logger.setup_logger.info", "logger.setup_logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.load_state_dict", "optim.Adam.load_state_dict", "torch.optim.lr_scheduler.MultiStepLR.load_state_dict", "logger.setup_logger.info", "logger.setup_logger.info", "main_disp.inference", "enumerate", "time.time", "main_disp.test", "logger.setup_logger.info", "main_disp.train", "utils_func.Metric.print", "utils_func.LossWise.update", "disp_utils_func.Metric", "tqdm.tqdm", "enumerate", "logger.setup_logger.info", "utils_func.Metric.tensorboard", "min", "vars", "str", "len", "numpy.save", "len", "utils_func.Metric.get_info", "main_disp.test", "utils_func.Metric.print", "utils_func.LossWise.update", "nn.DataParallel().cuda.state_dict", "torch.optim.lr_scheduler.MultiStepLR.state_dict", "optim.Adam.state_dict", "str", "p.data.nelement", "utils_func.Metric.print", "str", "len", "utils_func.Metric.get_info", "nn.DataParallel().cuda.parameters", "str", "time.time"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.logger.setup_logger", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.listflowfile.dataloader", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.listflowfile.dataloader", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.tensorboard", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.save_checkpoint", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.LossWise1.done", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.inference", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.test", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.train", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.tensorboard", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.get_info", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.test", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.get_info"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "global", "best_EPE", "\n", "if", "use_losswise", ":", "\n", "        ", "lw", "=", "utils_func", ".", "LossWise", "(", "args", ".", "api_key", ",", "args", ".", "losswise_tag", ",", "args", ".", "epochs", "-", "1", ")", "\n", "# set logger", "\n", "", "log", "=", "logger", ".", "setup_logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "\"training.log\"", ")", ")", "\n", "for", "key", ",", "value", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "log", ".", "info", "(", "str", "(", "key", ")", "+", "\": \"", "+", "str", "(", "value", ")", ")", "\n", "\n", "# set tensorboard", "\n", "", "writer", "=", "SummaryWriter", "(", "args", ".", "save_path", "+", "\"/tensorboardx\"", ")", "\n", "\n", "# Data Loader", "\n", "if", "args", ".", "dataset", "==", "\"kitti\"", ":", "\n", "        ", "train_data", ",", "val_data", "=", "KITTILoader3D", ".", "dataloader", "(", "\n", "args", ".", "datapath", ",", "args", ".", "split_train", ",", "args", ".", "split_val", ",", "kitti2015", "=", "args", ".", "kitti2015", "\n", ")", "\n", "TrainImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "KITTILoader_dataset3d", ".", "myImageFloder", "(", "\n", "train_data", ",", "True", ",", "kitti2015", "=", "args", ".", "kitti2015", ",", "dynamic_bs", "=", "args", ".", "dynamic_bs", "\n", ")", ",", "\n", "batch_size", "=", "args", ".", "btrain", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "16", ",", "\n", "drop_last", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "TestImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "KITTILoader_dataset3d", ".", "myImageFloder", "(", "\n", "val_data", ",", "False", ",", "kitti2015", "=", "args", ".", "kitti2015", ",", "dynamic_bs", "=", "args", ".", "dynamic_bs", "\n", ")", ",", "\n", "batch_size", "=", "args", ".", "bval", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "16", ",", "\n", "drop_last", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "train_data", ",", "val_data", "=", "listflowfile", ".", "dataloader", "(", "args", ".", "datapath", ")", "\n", "TrainImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "SceneFlowLoader", ".", "myImageFloder", "(", "train_data", ",", "True", ",", "calib", "=", "args", ".", "calib_value", ")", ",", "\n", "batch_size", "=", "args", ".", "btrain", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "8", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "TestImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "SceneFlowLoader", ".", "myImageFloder", "(", "val_data", ",", "False", ",", "calib", "=", "args", ".", "calib_value", ")", ",", "\n", "batch_size", "=", "args", ".", "bval", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "8", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "# Load Model", "\n", "", "if", "args", ".", "data_type", "==", "\"disparity\"", ":", "\n", "        ", "model", "=", "disp_models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "maxdisp", "=", "args", ".", "maxdisp", ",", "down", "=", "args", ".", "down", ")", "\n", "", "else", ":", "\n", "        ", "log", ".", "info", "(", "\"Model is not implemented\"", ")", "\n", "assert", "False", "\n", "\n", "# Number of parameters", "\n", "", "log", ".", "info", "(", "\n", "\"Number of model parameters: {}\"", ".", "format", "(", "\n", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", ")", "\n", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Optimizer", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "args", ".", "lr_stepsize", ",", "gamma", "=", "args", ".", "lr_gamma", ")", "\n", "\n", "if", "args", ".", "pretrain", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrain", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"=> loading pretrain '{}'\"", ".", "format", "(", "args", ".", "pretrain", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrain", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "\"[Attention]: Do not find checkpoint {}\"", ".", "format", "(", "args", ".", "pretrain", ")", ")", "\n", "\n", "", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "best_RMSE", "=", "checkpoint", "[", "\"best_EPE\"", "]", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "\"scheduler\"", "]", ")", "\n", "log", ".", "info", "(", "\n", "\"=> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "\"epoch\"", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "\"[Attention]: Do not find checkpoint {}\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "if", "args", ".", "generate_depth_map", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_path", "+", "'/depth_maps/'", "+", "args", ".", "data_tag", ",", "exist_ok", "=", "True", ")", "\n", "\n", "tqdm_eval_loader", "=", "tqdm", "(", "TestImgLoader", ",", "total", "=", "len", "(", "TestImgLoader", ")", ")", "\n", "for", "batch_idx", ",", "(", "imgL_crop", ",", "imgR_crop", ",", "calib", ",", "H", ",", "W", ",", "filename", ")", "in", "enumerate", "(", "tqdm_eval_loader", ")", ":", "\n", "            ", "pred_disp", "=", "inference", "(", "imgL_crop", ",", "imgR_crop", ",", "calib", ",", "model", ")", "\n", "for", "idx", ",", "name", "in", "enumerate", "(", "filename", ")", ":", "\n", "                ", "np", ".", "save", "(", "args", ".", "save_path", "+", "'/depth_maps/'", "+", "args", ".", "data_tag", "+", "\n", "'/'", "+", "name", ",", "pred_disp", "[", "idx", "]", "[", "-", "H", "[", "idx", "]", ":", ",", ":", "W", "[", "idx", "]", "]", ")", "\n", "", "", "import", "sys", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "# evaluation", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "evaluate_metric", "=", "utils_func", ".", "Metric", "(", ")", "\n", "## training ##", "\n", "for", "batch_idx", ",", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ")", "in", "enumerate", "(", "TestImgLoader", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "test", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ",", "evaluate_metric", ",", "optimizer", ",", "model", ")", "\n", "\n", "log", ".", "info", "(", "\n", "evaluate_metric", ".", "print", "(", "batch_idx", ",", "\"EVALUATE\"", ")", "\n", "+", "\" Time:{:.3f}\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", ")", "\n", "", "import", "sys", "\n", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "\n", "## training ##", "\n", "train_metric", "=", "utils_func", ".", "Metric", "(", ")", "\n", "tqdm_train_loader", "=", "tqdm", "(", "TrainImgLoader", ",", "total", "=", "len", "(", "TrainImgLoader", ")", ")", "\n", "for", "batch_idx", ",", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ")", "in", "enumerate", "(", "tqdm_train_loader", ")", ":", "\n", "# start_time = time.time()", "\n", "            ", "train", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ",", "train_metric", ",", "optimizer", ",", "model", ",", "epoch", ")", "\n", "# log.info(train_metric.print(batch_idx, 'TRAIN') + ' Time:{:.3f}'.format(time.time() - start_time))", "\n", "", "log", ".", "info", "(", "train_metric", ".", "print", "(", "0", ",", "\"TRAIN Epoch\"", "+", "str", "(", "epoch", ")", ")", ")", "\n", "train_metric", ".", "tensorboard", "(", "writer", ",", "epoch", ",", "token", "=", "\"TRAIN\"", ")", "\n", "if", "use_losswise", ":", "\n", "            ", "lw", ".", "update", "(", "train_metric", ".", "get_info", "(", ")", ",", "epoch", ",", "\"Train\"", ")", "\n", "\n", "## testing ##", "\n", "", "is_best", "=", "False", "\n", "if", "epoch", "==", "0", "or", "(", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_interval", ")", "==", "0", ":", "\n", "            ", "test_metric", "=", "utils_func", ".", "Metric", "(", ")", "\n", "tqdm_test_loader", "=", "tqdm", "(", "TestImgLoader", ",", "total", "=", "len", "(", "TestImgLoader", ")", ")", "\n", "for", "batch_idx", ",", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ")", "in", "enumerate", "(", "\n", "tqdm_test_loader", "\n", ")", ":", "\n", "# start_time = time.time()", "\n", "                ", "test", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ",", "test_metric", ",", "optimizer", ",", "model", ")", "\n", "# log.info(test_metric.print(batch_idx, 'TEST') + ' Time:{:.3f}'.format(time.time() - start_time))", "\n", "", "log", ".", "info", "(", "test_metric", ".", "print", "(", "0", ",", "\"TEST Epoch\"", "+", "str", "(", "epoch", ")", ")", ")", "\n", "test_metric", ".", "tensorboard", "(", "writer", ",", "epoch", ",", "token", "=", "\"TEST\"", ")", "\n", "if", "use_losswise", ":", "\n", "                ", "lw", ".", "update", "(", "test_metric", ".", "get_info", "(", ")", ",", "epoch", ",", "\"Test\"", ")", "\n", "\n", "# SAVE", "\n", "", "is_best", "=", "test_metric", ".", "EPE", ".", "avg", "<", "best_EPE", "\n", "best_EPE", "=", "min", "(", "test_metric", ".", "EPE", ".", "avg", ",", "best_EPE", ")", "\n", "", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"arch\"", ":", "args", ".", "arch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_EPE\"", ":", "best_EPE", ",", "\n", "\"scheduler\"", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "is_best", ",", "\n", "epoch", ",", "\n", "folder", "=", "args", ".", "save_path", ",", "\n", ")", "\n", "\n", "", "if", "use_losswise", ":", "\n", "        ", "lw", ".", "done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_disp.save_checkpoint": [[324, 331], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "shutil.copyfile"], "function", ["None"], ["", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filename", "=", "\"checkpoint.pth.tar\"", ",", "folder", "=", "\"result/default\"", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "folder", "+", "\"/\"", "+", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "folder", "+", "\"/\"", "+", "filename", ",", "folder", "+", "\"/model_best.pth.tar\"", ")", "\n", "", "if", "args", ".", "checkpoint_interval", ">", "0", "and", "(", "epoch", "+", "1", ")", "%", "args", ".", "checkpoint_interval", "==", "0", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "\n", "folder", "+", "\"/\"", "+", "filename", ",", "folder", "+", "\"/checkpoint_{}.pth.tar\"", ".", "format", "(", "epoch", "+", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_disp.train": [[334, 386], ["model.train", "calib.float.float", "mask.detach_", "optimizer.zero_grad", "metric_log.calculate", "F.smooth_l1_loss.backward", "optimizer.step", "imgL.cuda", "imgR.cuda", "disp.cuda", "calib.float.cuda", "model", "disp_utils_func.CriterionParallel", "utils_func.CriterionParallel.", "model", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pred3_out.float.float", "main_disp.interpolate_value_disp", "F.smooth_l1_loss.item", "torch.smooth_l1_loss", "model", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.smooth_l1_loss", "utils_func.CriterionParallel.", "utils_func.CriterionParallel.", "torch.smooth_l1_loss", "torch.smooth_l1_loss"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.train", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.calculate", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass_volume.PSMNet.interpolate_value_disp"], ["", "", "def", "train", "(", "imgL", ",", "imgR", ",", "disp", ",", "calib", ",", "metric_log", ",", "optimizer", ",", "model", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "calib", "=", "calib", ".", "float", "(", ")", "\n", "\n", "imgL", ",", "imgR", ",", "disp", ",", "calib", "=", "imgL", ".", "cuda", "(", ")", ",", "imgR", ".", "cuda", "(", ")", ",", "disp", ".", "cuda", "(", ")", ",", "calib", ".", "cuda", "(", ")", "\n", "\n", "# ---------", "\n", "mask", "=", "(", "disp", ">", "0", ")", "*", "(", "disp", "<", "args", ".", "maxdisp", ")", "\n", "mask", ".", "detach_", "(", ")", "\n", "# ----", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "\"stackhourglass_volume\"", "in", "args", ".", "arch", ":", "\n", "        ", "output1", ",", "output2", ",", "output3", ",", "off1", ",", "off2", ",", "off3", "=", "model", "(", "imgL", ",", "imgR", ",", "calib", ")", "\n", "CustomLoss", "=", "utils_func", ".", "CriterionParallel", "(", "W1_loss", ")", "\n", "\n", "loss", "=", "(", "\n", "0.5", "*", "CustomLoss", "(", "output1", ",", "disp", ",", "off1", ",", "mask", ",", "epoch", ",", "reduction", "=", "\"mean\"", ")", "\n", "+", "0.7", "*", "CustomLoss", "(", "output2", ",", "disp", ",", "off2", ",", "mask", ",", "epoch", ",", "reduction", "=", "\"mean\"", ")", "\n", "+", "CustomLoss", "(", "output3", ",", "disp", ",", "off3", ",", "mask", ",", "epoch", ",", "reduction", "=", "\"mean\"", ")", "\n", ")", "\n", "", "elif", "\"stackhourglass\"", "in", "args", ".", "arch", ":", "\n", "        ", "output1", ",", "output2", ",", "output3", "=", "model", "(", "imgL", ",", "imgR", ",", "calib", ")", "\n", "output1", "=", "torch", ".", "squeeze", "(", "output1", ",", "1", ")", "\n", "output2", "=", "torch", ".", "squeeze", "(", "output2", ",", "1", ")", "\n", "output3", "=", "torch", ".", "squeeze", "(", "output3", ",", "1", ")", "\n", "\n", "loss", "=", "(", "\n", "0.5", "*", "F", ".", "smooth_l1_loss", "(", "output1", "[", "mask", "]", ",", "disp", "[", "mask", "]", ",", "size_average", "=", "True", ")", "\n", "+", "0.7", "*", "F", ".", "smooth_l1_loss", "(", "output2", "[", "mask", "]", ",", "disp", "[", "mask", "]", ",", "size_average", "=", "True", ")", "\n", "+", "F", ".", "smooth_l1_loss", "(", "output3", "[", "mask", "]", ",", "disp", "[", "mask", "]", ",", "size_average", "=", "True", ")", "\n", ")", "\n", "", "elif", "args", ".", "arch", "==", "\"basic\"", ":", "\n", "        ", "output3", "=", "model", "(", "imgL", ",", "imgR", ",", "calib", ")", "\n", "output3", "=", "torch", ".", "squeeze", "(", "output3", ",", "1", ")", "\n", "loss", "=", "F", ".", "smooth_l1_loss", "(", "output3", "[", "mask", "]", ",", "disp", "[", "mask", "]", ",", "size_average", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "if", "\"stackhourglass_volume\"", "in", "args", ".", "arch", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "pred3_out", "=", "torch", ".", "max", "(", "output3", ",", "1", ")", "\n", "pred3_out", "=", "pred3_out", ".", "float", "(", ")", "\n", "off3_out", "=", "interpolate_value_disp", "(", "off3", ",", "pred3_out", ",", "maxdisp", "=", "args", ".", "maxdisp", "//", "args", ".", "down", ")", "\n", "pred", "=", "(", "pred3_out", "+", "off3_out", ")", "*", "args", ".", "down", "\n", "\n", "", "", "metric_log", ".", "calculate", "(", "disp", ",", "pred", ",", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# a = time.time()", "\n", "# with torch.autograd.profiler.profile(use_cuda=True) as prof:", "\n", "optimizer", ".", "step", "(", ")", "\n", "# print(prof)", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_disp.inference": [[392, 403], ["model.eval", "disp2depth.data.cpu().numpy", "imgL.cuda", "imgR.cuda", "calib.float().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "main_disp.disp2depth", "disp2depth.data.cpu", "calib.float"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth"], ["", "def", "inference", "(", "imgL", ",", "imgR", ",", "calib", ",", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "imgL", ",", "imgR", ",", "calib", "=", "imgL", ".", "cuda", "(", ")", ",", "imgR", ".", "cuda", "(", ")", ",", "calib", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", "=", "model", "(", "imgL", ",", "imgR", ",", "calib", ")", "\n", "", "if", "args", ".", "data_type", "==", "'disparity'", ":", "\n", "        ", "output", "=", "disp2depth", "(", "output", ",", "calib", ")", "\n", "", "pred_disp", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "return", "pred_disp", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_disp.test": [[405, 427], ["model.eval", "calib.float.float", "mask.detach_", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "imgL.cuda", "imgR.cuda", "calib.float.cuda", "disp.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.smooth_l1_loss", "metric_log.calculate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "F.smooth_l1_loss.item"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.calculate"], ["", "def", "test", "(", "imgL", ",", "imgR", ",", "disp", ",", "calib", ",", "metric_log", ",", "optimizer", ",", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "calib", "=", "calib", ".", "float", "(", ")", "\n", "imgL", ",", "imgR", ",", "calib", ",", "disp", "=", "imgL", ".", "cuda", "(", ")", ",", "imgR", ".", "cuda", "(", ")", ",", "calib", ".", "cuda", "(", ")", ",", "disp", ".", "cuda", "(", ")", "\n", "\n", "mask", "=", "(", "disp", ">", "0", ")", "*", "(", "disp", "<", "args", ".", "maxdisp", ")", "\n", "mask", ".", "detach_", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output3", "=", "model", "(", "imgL", ",", "imgR", ",", "calib", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"sceneflow\"", ":", "\n", "            ", "output3", "=", "torch", ".", "squeeze", "(", "output3", ",", "1", ")", "[", ":", ",", "4", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "output3", "=", "torch", ".", "squeeze", "(", "output3", ",", "1", ")", "\n", "\n", "", "loss", "=", "F", ".", "smooth_l1_loss", "(", "output3", "[", "mask", "]", ",", "disp", "[", "mask", "]", ",", "size_average", "=", "True", ")", "\n", "\n", "# computing 3-px error#", "\n", "metric_log", ".", "calculate", "(", "disp", ",", "output3", ",", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_disp.disp2depth": [[429, 432], ["disp.clamp"], "function", ["None"], ["", "def", "disp2depth", "(", "disp", ",", "calib", ")", ":", "\n", "    ", "depth", "=", "calib", "[", ":", ",", "None", ",", "None", "]", "/", "disp", ".", "clamp", "(", "min", "=", "1e-8", ")", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main.main": [[95, 229], ["utils_func.LossWise", "logger.setup_logger", "sorted", "tensorboardX.SummaryWriter", "logger.setup_logger.info", "torch.DataParallel().cuda", "torch.Adam", "torch.optim.lr_scheduler.MultiStepLR", "range", "utils_func.LossWise.done", "os.path.join", "vars().items", "logger.setup_logger.info", "dataloader.KITTILoader3D.dataloader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataloader.listflowfile.dataloader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "nn.DataParallel().cuda.parameters", "os.path.isfile", "os.path.isfile", "utils_func.Metric", "enumerate", "sys.exit", "torch.optim.lr_scheduler.MultiStepLR.step", "utils_func.Metric", "tqdm.tqdm", "enumerate", "logger.setup_logger.info", "utils_func.Metric.tensorboard", "utils_func.LossWise.update", "main.save_checkpoint", "dataloader.KITTILoader_dataset3d.myImageFloder", "dataloader.KITTILoader_dataset3d.myImageFloder", "dataloader.SceneFlowLoader.myImageFloder", "dataloader.SceneFlowLoader.myImageFloder", "logger.setup_logger.info", "sum", "torch.DataParallel", "logger.setup_logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.load_state_dict", "logger.setup_logger.info", "logger.setup_logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.load_state_dict", "optim.Adam.load_state_dict", "torch.optim.lr_scheduler.MultiStepLR.load_state_dict", "logger.setup_logger.info", "logger.setup_logger.info", "time.time", "main.test", "logger.setup_logger.info", "main.train", "utils_func.Metric.print", "utils_func.Metric.get_info", "utils_func.Metric", "tqdm.tqdm", "enumerate", "logger.setup_logger.info", "utils_func.Metric.tensorboard", "utils_func.LossWise.update", "min", "vars", "str", "len", "main.test", "utils_func.Metric.print", "utils_func.Metric.get_info", "nn.DataParallel().cuda.state_dict", "torch.optim.lr_scheduler.MultiStepLR.state_dict", "optim.Adam.state_dict", "str", "p.data.nelement", "utils_func.Metric.print", "str", "len", "nn.DataParallel().cuda.parameters", "str", "time.time"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.logger.setup_logger", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.LossWise1.done", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.listflowfile.dataloader", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.listflowfile.dataloader", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.tensorboard", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.save_checkpoint", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.test", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.train", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.get_info", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.tensorboard", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.test", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.get_info", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "best_RMSE", "\n", "\n", "lw", "=", "utils_func", ".", "LossWise", "(", "args", ".", "api_key", ",", "args", ".", "losswise_tag", ",", "args", ".", "epochs", "-", "1", ")", "\n", "# set logger", "\n", "log", "=", "logger", ".", "setup_logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'training.log'", ")", ")", "\n", "for", "key", ",", "value", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "log", ".", "info", "(", "str", "(", "key", ")", "+", "': '", "+", "str", "(", "value", ")", ")", "\n", "\n", "# set tensorboard", "\n", "", "writer", "=", "SummaryWriter", "(", "args", ".", "save_path", "+", "'/tensorboardx'", ")", "\n", "\n", "# Data Loader", "\n", "if", "args", ".", "dataset", "==", "'kitti'", ":", "\n", "        ", "train_data", ",", "val_data", "=", "KITTILoader3D", ".", "dataloader", "(", "\n", "args", ".", "datapath", ",", "args", ".", "split_train", ",", "args", ".", "split_val", ",", "kitti2015", "=", "args", ".", "kitti2015", ")", "\n", "TrainImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "KITTILoader_dataset3d", ".", "myImageFloder", "(", "\n", "train_data", ",", "True", ",", "kitti2015", "=", "args", ".", "kitti2015", ",", "dynamic_bs", "=", "args", ".", "dynamic_bs", ")", ",", "\n", "batch_size", "=", "args", ".", "btrain", ",", "shuffle", "=", "True", ",", "num_workers", "=", "16", ",", "drop_last", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "TestImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "KITTILoader_dataset3d", ".", "myImageFloder", "(", "\n", "val_data", ",", "False", ",", "kitti2015", "=", "args", ".", "kitti2015", ",", "dynamic_bs", "=", "args", ".", "dynamic_bs", ")", ",", "\n", "batch_size", "=", "args", ".", "bval", ",", "shuffle", "=", "False", ",", "num_workers", "=", "16", ",", "drop_last", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "train_data", ",", "val_data", "=", "listflowfile", ".", "dataloader", "(", "args", ".", "datapath", ")", "\n", "TrainImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "SceneFlowLoader", ".", "myImageFloder", "(", "\n", "train_data", ",", "True", ",", "calib", "=", "args", ".", "calib_value", ")", ",", "\n", "batch_size", "=", "args", ".", "btrain", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "drop_last", "=", "False", ")", "\n", "TestImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "SceneFlowLoader", ".", "myImageFloder", "(", "\n", "val_data", ",", "False", ",", "calib", "=", "args", ".", "calib_value", ")", ",", "\n", "batch_size", "=", "args", ".", "bval", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ",", "drop_last", "=", "False", ")", "\n", "\n", "# Load Model", "\n", "", "if", "args", ".", "data_type", "==", "'disparity'", ":", "\n", "        ", "model", "=", "disp_models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "maxdisp", "=", "args", ".", "maxdisp", ")", "\n", "", "elif", "args", ".", "data_type", "==", "'depth'", ":", "\n", "        ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "maxdepth", "=", "args", ".", "maxdepth", ",", "maxdisp", "=", "args", ".", "maxdisp", ",", "down", "=", "args", ".", "down", ")", "\n", "", "else", ":", "\n", "        ", "log", ".", "info", "(", "'Model is not implemented'", ")", "\n", "assert", "False", "\n", "\n", "# Number of parameters", "\n", "", "log", ".", "info", "(", "'Number of model parameters: {}'", ".", "format", "(", "\n", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Optimizer", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "scheduler", "=", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "args", ".", "lr_stepsize", ",", "gamma", "=", "args", ".", "lr_gamma", ")", "\n", "\n", "if", "args", ".", "pretrain", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrain", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"=> loading pretrain '{}'\"", ".", "format", "(", "args", ".", "pretrain", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrain", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "\n", "'[Attention]: Do not find checkpoint {}'", ".", "format", "(", "args", ".", "pretrain", ")", ")", "\n", "\n", "", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "best_RMSE", "=", "checkpoint", "[", "'best_RMSE'", "]", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "log", ".", "info", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "'[Attention]: Do not find checkpoint {}'", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "# evaluation", "\n", "", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "evaluate_metric", "=", "utils_func", ".", "Metric", "(", ")", "\n", "## training ##", "\n", "for", "batch_idx", ",", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ")", "in", "enumerate", "(", "TestImgLoader", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "test", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "\n", "calib", ",", "evaluate_metric", ",", "optimizer", ",", "model", ")", "\n", "\n", "log", ".", "info", "(", "evaluate_metric", ".", "print", "(", "batch_idx", ",", "'EVALUATE'", ")", "+", "\n", "' Time:{:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "", "import", "sys", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "\n", "## training ##", "\n", "train_metric", "=", "utils_func", ".", "Metric", "(", ")", "\n", "tqdm_train_loader", "=", "tqdm", "(", "TrainImgLoader", ",", "total", "=", "len", "(", "TrainImgLoader", ")", ")", "\n", "for", "batch_idx", ",", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ")", "in", "enumerate", "(", "tqdm_train_loader", ")", ":", "\n", "# start_time = time.time()", "\n", "            ", "train", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "\n", "calib", ",", "train_metric", ",", "optimizer", ",", "model", ")", "\n", "# log.info(train_metric.print(batch_idx, 'TRAIN') + ' Time:{:.3f}'.format(time.time() - start_time))", "\n", "", "log", ".", "info", "(", "train_metric", ".", "print", "(", "0", ",", "'TRAIN Epoch'", "+", "str", "(", "epoch", ")", ")", ")", "\n", "train_metric", ".", "tensorboard", "(", "writer", ",", "epoch", ",", "token", "=", "'TRAIN'", ")", "\n", "lw", ".", "update", "(", "train_metric", ".", "get_info", "(", ")", ",", "epoch", ",", "'Train'", ")", "\n", "\n", "## testing ##", "\n", "is_best", "=", "False", "\n", "if", "epoch", "==", "0", "or", "(", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_interval", ")", "==", "0", ":", "\n", "            ", "test_metric", "=", "utils_func", ".", "Metric", "(", ")", "\n", "tqdm_test_loader", "=", "tqdm", "(", "TestImgLoader", ",", "total", "=", "len", "(", "TestImgLoader", ")", ")", "\n", "for", "batch_idx", ",", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ")", "in", "enumerate", "(", "tqdm_test_loader", ")", ":", "\n", "# start_time = time.time()", "\n", "                ", "test", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "\n", "calib", ",", "test_metric", ",", "optimizer", ",", "model", ")", "\n", "# log.info(test_metric.print(batch_idx, 'TEST') + ' Time:{:.3f}'.format(time.time() - start_time))", "\n", "", "log", ".", "info", "(", "test_metric", ".", "print", "(", "0", ",", "'TEST Epoch'", "+", "str", "(", "epoch", ")", ")", ")", "\n", "test_metric", ".", "tensorboard", "(", "writer", ",", "epoch", ",", "token", "=", "'TEST'", ")", "\n", "lw", ".", "update", "(", "test_metric", ".", "get_info", "(", ")", ",", "epoch", ",", "'Test'", ")", "\n", "\n", "# SAVE", "\n", "is_best", "=", "test_metric", ".", "RMSELIs", ".", "avg", "<", "best_RMSE", "\n", "best_RMSE", "=", "min", "(", "test_metric", ".", "RMSELIs", ".", "avg", ",", "best_RMSE", ")", "\n", "", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_RMSE'", ":", "best_RMSE", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "epoch", ",", "folder", "=", "args", ".", "save_path", ")", "\n", "", "lw", ".", "done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main.save_checkpoint": [[231, 239], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filename", "=", "'checkpoint.pth.tar'", ",", "folder", "=", "'result/default'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "folder", "+", "'/'", "+", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "folder", "+", "'/'", "+", "filename", ",", "\n", "folder", "+", "'/model_best.pth.tar'", ")", "\n", "", "if", "args", ".", "checkpoint_interval", ">", "0", "and", "(", "epoch", "+", "1", ")", "%", "args", ".", "checkpoint_interval", "==", "0", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "folder", "+", "'/'", "+", "filename", ",", "folder", "+", "\n", "'/checkpoint_{}.pth.tar'", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main.train": [[241, 293], ["model.train", "calib.float.float", "mask.detach_", "optimizer.zero_grad", "metric_log.calculate", "F.smooth_l1_loss.backward", "optimizer.step", "imgL.cuda", "imgR.cuda", "depth.cuda", "calib.float.cuda", "model", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "main.disp2depth", "main.disp2depth", "main.disp2depth", "main.disp2depth", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.take", "torch.take", "torch.take", "torch.take", "torch.take", "torch.take", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "model", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.smooth_l1_loss", "F.smooth_l1_loss.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.smooth_l1_loss", "main.disp2depth", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.train", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.calculate", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth"], ["", "", "def", "train", "(", "imgL", ",", "imgR", ",", "depth", ",", "calib", ",", "metric_log", ",", "optimizer", ",", "model", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "calib", "=", "calib", ".", "float", "(", ")", "\n", "\n", "imgL", ",", "imgR", ",", "depth", ",", "calib", "=", "imgL", ".", "cuda", "(", ")", ",", "imgR", ".", "cuda", "(", ")", ",", "depth", ".", "cuda", "(", ")", ",", "calib", ".", "cuda", "(", ")", "\n", "\n", "# ---------", "\n", "# mask = (depth >= 1) * (depth <= 100)", "\n", "mask", "=", "(", "depth", ">=", "1", ")", "*", "(", "depth", "<=", "80", ")", "\n", "mask", ".", "detach_", "(", ")", "\n", "# ----", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "'stackhourglass'", "in", "args", ".", "arch", ":", "\n", "        ", "output1", ",", "output2", ",", "output3", "=", "model", "(", "imgL", ",", "imgR", ",", "calib", ")", "\n", "output1", "=", "torch", ".", "squeeze", "(", "output1", ",", "1", ")", "\n", "output2", "=", "torch", ".", "squeeze", "(", "output2", ",", "1", ")", "\n", "output3", "=", "torch", ".", "squeeze", "(", "output3", ",", "1", ")", "\n", "if", "args", ".", "data_type", "==", "'disparity'", ":", "\n", "            ", "output1", "=", "disp2depth", "(", "output1", ",", "calib", ")", "\n", "output1", "=", "disp2depth", "(", "output1", ",", "calib", ")", "\n", "output2", "=", "disp2depth", "(", "output2", ",", "calib", ")", "\n", "output3", "=", "disp2depth", "(", "output3", ",", "calib", ")", "\n", "", "if", "args", ".", "depth_wise_loss", ":", "\n", "            ", "weight_pool", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "[", "1326554", ",", "24481291", ",", "17890323", ",", "9299506", ",", "\n", "5162193", ",", "3167110", ",", "2099322", ",", "1496355", ",", "1010074", ",", "713677", ",", "468273", ",", "322724", ",", "237623", ",", "168201", ",", "119637", ",", "54592", ",", "]", ")", "\n", "weight_pool", "=", "24481291.", "/", "weight_pool", "\n", "weight", "=", "torch", ".", "take", "(", "weight_pool", ",", "(", "(", "depth", "[", "mask", "]", ")", "/", "5", ")", ".", "long", "(", ")", ")", "\n", "weight", "=", "torch", ".", "log", "(", "weight", "+", "2.", ")", "\n", "# print(weight)", "\n", "loss", "=", "0.5", "*", "torch", ".", "mean", "(", "weight", "*", "F", ".", "smooth_l1_loss", "(", "output1", "[", "mask", "]", ",", "depth", "[", "mask", "]", ",", "reduction", "=", "'none'", ")", ")", "+", "0.7", "*", "torch", ".", "mean", "(", "weight", "*", "F", ".", "smooth_l1_loss", "(", "\n", "output2", "[", "mask", "]", ",", "depth", "[", "mask", "]", ",", "reduction", "=", "'none'", ")", ")", "+", "torch", ".", "mean", "(", "weight", "*", "F", ".", "smooth_l1_loss", "(", "output3", "[", "mask", "]", ",", "depth", "[", "mask", "]", ",", "\n", "reduction", "=", "'none'", ")", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "0.5", "*", "F", ".", "smooth_l1_loss", "(", "output1", "[", "mask", "]", ",", "depth", "[", "mask", "]", ",", "size_average", "=", "True", ")", "+", "0.7", "*", "F", ".", "smooth_l1_loss", "(", "\n", "output2", "[", "mask", "]", ",", "depth", "[", "mask", "]", ",", "size_average", "=", "True", ")", "+", "F", ".", "smooth_l1_loss", "(", "output3", "[", "mask", "]", ",", "depth", "[", "mask", "]", ",", "\n", "size_average", "=", "True", ")", "\n", "", "", "elif", "args", ".", "arch", "==", "'basic'", ":", "\n", "        ", "output3", "=", "model", "(", "imgL", ",", "imgR", ",", "calib", ")", "\n", "output3", "=", "torch", ".", "squeeze", "(", "output3", ",", "1", ")", "\n", "if", "args", ".", "data_type", "==", "'disparity'", ":", "\n", "            ", "output3", "=", "disp2depth", "(", "output3", ",", "calib", ")", "\n", "", "loss", "=", "F", ".", "smooth_l1_loss", "(", "output3", "[", "mask", "]", ",", "depth", "[", "mask", "]", ",", "size_average", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "metric_log", ".", "calculate", "(", "depth", ",", "output3", ",", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# a = time.time()", "\n", "# with torch.autograd.profiler.profile(use_cuda=True) as prof:", "\n", "optimizer", ".", "step", "(", ")", "\n", "# print(prof)", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main.test": [[299, 319], ["model.eval", "calib.float.float", "mask.detach_", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "imgL.cuda", "imgR.cuda", "calib.float.cuda", "depth.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.smooth_l1_loss", "metric_log.calculate", "main.disp2depth", "F.smooth_l1_loss.item"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.calculate", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth"], ["", "def", "test", "(", "imgL", ",", "imgR", ",", "depth", ",", "calib", ",", "metric_log", ",", "optimizer", ",", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "calib", "=", "calib", ".", "float", "(", ")", "\n", "imgL", ",", "imgR", ",", "calib", ",", "depth", "=", "imgL", ".", "cuda", "(", ")", ",", "imgR", ".", "cuda", "(", ")", ",", "calib", ".", "cuda", "(", ")", ",", "depth", ".", "cuda", "(", ")", "\n", "\n", "mask", "=", "(", "depth", ">=", "1", ")", "*", "(", "depth", "<=", "80", ")", "\n", "mask", ".", "detach_", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output3", "=", "model", "(", "imgL", ",", "imgR", ",", "calib", ")", "\n", "output3", "=", "torch", ".", "squeeze", "(", "output3", ",", "1", ")", "\n", "\n", "if", "args", ".", "data_type", "==", "'disparity'", ":", "\n", "            ", "output3", "=", "disp2depth", "(", "output3", ",", "calib", ")", "\n", "", "loss", "=", "F", ".", "smooth_l1_loss", "(", "output3", "[", "mask", "]", ",", "depth", "[", "mask", "]", ",", "size_average", "=", "True", ")", "\n", "\n", "# computing 3-px error#", "\n", "metric_log", ".", "calculate", "(", "depth", ",", "output3", ",", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main.disp2depth": [[321, 324], ["disp.clamp"], "function", ["None"], ["", "def", "disp2depth", "(", "disp", ",", "calib", ")", ":", "\n", "    ", "depth", "=", "calib", "[", ":", ",", "None", ",", "None", "]", "/", "disp", ".", "clamp", "(", "min", "=", "1e-8", ")", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.sceneflow.main": [[12, 35], ["os.path.isdir", "os.path.isdir", "os.makedirs", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "os.path.isdir", "shutil.rmtree", "print"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["def", "main", "(", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isdir", "(", "args", ".", "path", ")", ",", "\"Path is not correct\"", "\n", "path", "=", "args", ".", "path", "\n", "monkaa", "=", "path", "+", "\"/monkaa/frames_cleanpass\"", "\n", "monkaa_disparity", "=", "path", "+", "\"/monkaa/disparity\"", "\n", "driving", "=", "path", "+", "\"/driving/frames_cleanpass\"", "\n", "driving_disparity", "=", "path", "+", "\"/driving/disparity\"", "\n", "flyingthings3d", "=", "path", "+", "\"/flyingthings3d/frames_cleanpass\"", "\n", "flyingthings3d_disparity", "=", "path", "+", "\"/flyingthings3d/disparity\"", "\n", "\n", "if", "args", ".", "force", "and", "os", ".", "path", ".", "isdir", "(", "'sceneflow'", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "'sceneflow'", ")", "\n", "", "if", "os", ".", "path", ".", "isdir", "(", "'sceneflow'", ")", ":", "\n", "        ", "print", "(", "'Soft links are existing. Stop running'", ")", "\n", "return", "\n", "", "os", ".", "makedirs", "(", "'sceneflow'", ")", "\n", "os", ".", "system", "(", "'ln -s {} sceneflow/monkaa_cleanpass'", ".", "format", "(", "monkaa", ")", ")", "\n", "os", ".", "system", "(", "'ln -s {} sceneflow/monkaa_disparity'", ".", "format", "(", "monkaa_disparity", ")", ")", "\n", "os", ".", "system", "(", "'ln -s {} sceneflow/flyingthings3d_cleanpass'", ".", "format", "(", "flyingthings3d", ")", ")", "\n", "os", ".", "system", "(", "\n", "'ln -s {} sceneflow/flyingthings3d_disparity'", ".", "format", "(", "flyingthings3d_disparity", ")", ")", "\n", "os", ".", "system", "(", "'ln -s {} sceneflow/driving_cleanpass'", ".", "format", "(", "driving", ")", ")", "\n", "os", ".", "system", "(", "'ln -s {} sceneflow/driving_disparity'", ".", "format", "(", "driving_disparity", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.logger.setup_logger": [[5, 27], ["logging.Formatter", "logging.getLogger", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.set_name", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "os.path.dirname", "os.path.isdir", "os.makedirs", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["def", "setup_logger", "(", "filepath", ")", ":", "\n", "    ", "file_formatter", "=", "logging", ".", "Formatter", "(", "\n", "\"[%(asctime)s %(filename)s:%(lineno)s] %(levelname)-8s %(message)s\"", ",", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ",", "\n", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'example'", ")", "\n", "handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "handler", ".", "setFormatter", "(", "file_formatter", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "\n", "file_handle_name", "=", "\"file\"", "\n", "if", "file_handle_name", "in", "[", "h", ".", "name", "for", "h", "in", "logger", ".", "handlers", "]", ":", "\n", "        ", "return", "\n", "", "if", "os", ".", "path", ".", "dirname", "(", "filepath", ")", "is", "not", "''", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "dirname", "(", "filepath", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filepath", ")", ")", "\n", "", "", "file_handle", "=", "logging", ".", "FileHandler", "(", "filename", "=", "filepath", ",", "mode", "=", "\"a\"", ")", "\n", "file_handle", ".", "set_name", "(", "file_handle_name", ")", "\n", "file_handle", ".", "setFormatter", "(", "file_formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handle", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.interpolate_value": [[109, 133], ["x.permute.permute", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.max.float", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "interpolate_value", "(", "x", ",", "indices", ",", "maxdepth", "=", "args", ".", "maxdepth", ")", ":", "\n", "    ", "\"\"\"\n    bilinear interpolate tensor x at sampled indices\n    x: [B, D, H, W] (features)\n    val: [B, H, W] sampled indices (1-indexed)\n    \"\"\"", "\n", "\n", "# B,D,H,W to B,H,W,D", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "indices", "=", "torch", ".", "unsqueeze", "(", "indices", "-", "1", ",", "-", "1", ")", "\n", "\n", "indices", "=", "torch", ".", "clamp", "(", "indices", ",", "0", ",", "maxdepth", "-", "1", ")", "\n", "idx0", "=", "torch", ".", "floor", "(", "indices", ")", ".", "long", "(", ")", "\n", "idx1", "=", "torch", ".", "min", "(", "idx0", "+", "1", ",", "(", "maxdepth", "-", "1", ")", "*", "torch", ".", "ones_like", "(", "idx0", ")", ")", "\n", "idx0", "=", "torch", ".", "max", "(", "idx1", "-", "1", ",", "torch", ".", "zeros_like", "(", "idx0", ")", ")", "\n", "\n", "y0", "=", "torch", ".", "gather", "(", "x", ",", "-", "1", ",", "idx0", ")", "\n", "y1", "=", "torch", ".", "gather", "(", "x", ",", "-", "1", ",", "idx1", ")", "\n", "\n", "lmbda", "=", "indices", "-", "idx0", ".", "float", "(", ")", "\n", "output", "=", "(", "1", "-", "lmbda", ")", "*", "y0", "+", "(", "lmbda", ")", "*", "y1", "\n", "\n", "output", "=", "torch", ".", "squeeze", "(", "output", ",", "-", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.W_loss": [[135, 155], ["off.permute.permute", "input.permute.permute", "target.unsqueeze.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum.mean", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "W_loss", "(", "input", ",", "target", ",", "off", ",", "mask", ",", "epoch", ",", "reduction", "=", "'mean'", ",", "p", "=", "1", ",", "scale", "=", "1", ")", ":", "\n", "# B,D,H,W to B,H,W,D", "\n", "    ", "off", "=", "off", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "input", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "grid", "=", "torch", ".", "arange", "(", "\n", "1", ",", "1", "+", "args", ".", "maxdepth", "//", "scale", ",", "device", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "[", "None", ",", "None", ",", "None", ",", ":", "]", "\n", "depth", "=", "(", "grid", "+", "off", ")", "*", "scale", "\n", "target", "=", "target", ".", "unsqueeze", "(", "3", ")", "\n", "if", "p", "==", "1", ":", "\n", "        ", "out", "=", "torch", ".", "abs", "(", "depth", "[", "mask", "]", "-", "target", "[", "mask", "]", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "(", "depth", "[", "mask", "]", "-", "target", "[", "mask", "]", ")", "**", "p", "\n", "\n", "", "loss", "=", "torch", ".", "sum", "(", "input", "[", "mask", "]", "*", "out", ",", "1", ")", "\n", "\n", "if", "reduction", "==", "'none'", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "reduction", "==", "'mean'", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.main": [[157, 307], ["logger.setup_logger", "sorted", "tensorboardX.SummaryWriter", "logger.setup_logger.info", "torch.DataParallel().cuda", "torch.Adam", "torch.optim.lr_scheduler.MultiStepLR", "range", "utils_func.LossWise", "os.path.join", "vars().items", "logger.setup_logger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "nn.DataParallel().cuda.parameters", "os.path.isfile", "os.path.isfile", "os.makedirs", "tqdm.tqdm", "enumerate", "sys.exit", "utils_func.Metric", "enumerate", "sys.exit", "torch.optim.lr_scheduler.MultiStepLR.step", "utils_func.Metric", "tqdm.tqdm", "enumerate", "logger.setup_logger.info", "utils_func.Metric.tensorboard", "main_depth.save_checkpoint", "utils_func.LossWise.done", "KITTI_submission_loader.SubmiteDataset", "dataloader.KITTILoader3D.dataloader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataloader.listflowfile.dataloader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logger.setup_logger.info", "sum", "torch.DataParallel", "logger.setup_logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.load_state_dict", "logger.setup_logger.info", "logger.setup_logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.load_state_dict", "optim.Adam.load_state_dict", "torch.optim.lr_scheduler.MultiStepLR.load_state_dict", "logger.setup_logger.info", "logger.setup_logger.info", "main_depth.inference", "enumerate", "time.time", "main_depth.test", "logger.setup_logger.info", "main_depth.train", "utils_func.Metric.print", "utils_func.LossWise.update", "utils_func.Metric", "tqdm.tqdm", "enumerate", "logger.setup_logger.info", "utils_func.Metric.tensorboard", "min", "vars", "str", "dataloader.KITTILoader_dataset3d.myImageFloder", "dataloader.KITTILoader_dataset3d.myImageFloder", "dataloader.SceneFlowLoader.myImageFloder", "dataloader.SceneFlowLoader.myImageFloder", "len", "numpy.save", "len", "utils_func.Metric.get_info", "main_depth.test", "utils_func.Metric.print", "utils_func.LossWise.update", "nn.DataParallel().cuda.state_dict", "torch.optim.lr_scheduler.MultiStepLR.state_dict", "optim.Adam.state_dict", "str", "p.data.nelement", "utils_func.Metric.print", "str", "len", "utils_func.Metric.get_info", "nn.DataParallel().cuda.parameters", "str", "time.time"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.logger.setup_logger", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.tensorboard", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.save_checkpoint", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.LossWise1.done", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.listflowfile.dataloader", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.listflowfile.dataloader", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.inference", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.test", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.train", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.tensorboard", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.get_info", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.test", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.get_info"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "global", "best_RMSE", "\n", "\n", "if", "use_losswise", ":", "\n", "        ", "lw", "=", "utils_func", ".", "LossWise", "(", "args", ".", "api_key", ",", "args", ".", "losswise_tag", ",", "args", ".", "epochs", "-", "1", ")", "\n", "# set logger", "\n", "", "log", "=", "logger", ".", "setup_logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'training.log'", ")", ")", "\n", "for", "key", ",", "value", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "log", ".", "info", "(", "str", "(", "key", ")", "+", "': '", "+", "str", "(", "value", ")", ")", "\n", "\n", "# set tensorboard", "\n", "", "writer", "=", "SummaryWriter", "(", "args", ".", "save_path", "+", "'/tensorboardx'", ")", "\n", "\n", "# Data Loader", "\n", "if", "args", ".", "generate_depth_map", ":", "\n", "        ", "TrainImgLoader", "=", "None", "\n", "import", "dataloader", ".", "KITTI_submission_loader", "as", "KITTI_submission_loader", "\n", "TestImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "KITTI_submission_loader", ".", "SubmiteDataset", "(", "args", ".", "datapath", ",", "args", ".", "data_list", ",", "args", ".", "dynamic_bs", ")", ",", "\n", "batch_size", "=", "args", ".", "bval", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "False", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'kitti'", ":", "\n", "        ", "train_data", ",", "val_data", "=", "KITTILoader3D", ".", "dataloader", "(", "\n", "args", ".", "datapath", ",", "args", ".", "split_train", ",", "args", ".", "split_val", ",", "kitti2015", "=", "args", ".", "kitti2015", ")", "\n", "TrainImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "KITTILoader_dataset3d", ".", "myImageFloder", "(", "\n", "train_data", ",", "True", ",", "kitti2015", "=", "args", ".", "kitti2015", ",", "dynamic_bs", "=", "args", ".", "dynamic_bs", ")", ",", "\n", "batch_size", "=", "args", ".", "btrain", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "drop_last", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "TestImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "KITTILoader_dataset3d", ".", "myImageFloder", "(", "\n", "val_data", ",", "False", ",", "kitti2015", "=", "args", ".", "kitti2015", ",", "dynamic_bs", "=", "args", ".", "dynamic_bs", ")", ",", "\n", "batch_size", "=", "args", ".", "bval", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ",", "drop_last", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "train_data", ",", "val_data", "=", "listflowfile", ".", "dataloader", "(", "args", ".", "datapath", ")", "\n", "TrainImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "SceneFlowLoader", ".", "myImageFloder", "(", "train_data", ",", "True", ",", "calib", "=", "args", ".", "calib_value", ")", ",", "\n", "batch_size", "=", "args", ".", "btrain", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "drop_last", "=", "False", ")", "\n", "TestImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "SceneFlowLoader", ".", "myImageFloder", "(", "val_data", ",", "False", ",", "calib", "=", "args", ".", "calib_value", ")", ",", "\n", "batch_size", "=", "args", ".", "bval", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ",", "drop_last", "=", "False", ")", "\n", "\n", "# Load Model", "\n", "", "if", "args", ".", "data_type", "==", "'disparity'", ":", "\n", "        ", "model", "=", "disp_models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "maxdisp", "=", "args", ".", "maxdisp", ")", "\n", "", "elif", "args", ".", "data_type", "==", "'depth'", ":", "\n", "        ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "maxdepth", "=", "args", ".", "maxdepth", ",", "maxdisp", "=", "args", ".", "maxdisp", ",", "down", "=", "args", ".", "down", ",", "scale", "=", "args", ".", "scale", ")", "\n", "", "else", ":", "\n", "        ", "log", ".", "info", "(", "'Model is not implemented'", ")", "\n", "assert", "False", "\n", "\n", "# Number of parameters", "\n", "", "log", ".", "info", "(", "'Number of model parameters: {}'", ".", "format", "(", "\n", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Optimizer", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "args", ".", "lr_stepsize", ",", "gamma", "=", "args", ".", "lr_gamma", ")", "\n", "\n", "if", "args", ".", "pretrain", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrain", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"=> loading pretrain '{}'\"", ".", "format", "(", "args", ".", "pretrain", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrain", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "'[Attention]: Do not find checkpoint {}'", ".", "format", "(", "args", ".", "pretrain", ")", ")", "\n", "\n", "", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "best_RMSE", "=", "checkpoint", "[", "'best_RMSE'", "]", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "log", ".", "info", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "'[Attention]: Do not find checkpoint {}'", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "if", "args", ".", "generate_depth_map", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_path", "+", "'/depth_maps/'", "+", "args", ".", "data_tag", ",", "exist_ok", "=", "True", ")", "\n", "\n", "tqdm_eval_loader", "=", "tqdm", "(", "TestImgLoader", ",", "total", "=", "len", "(", "TestImgLoader", ")", ")", "\n", "for", "batch_idx", ",", "(", "imgL_crop", ",", "imgR_crop", ",", "calib", ",", "H", ",", "W", ",", "filename", ")", "in", "enumerate", "(", "tqdm_eval_loader", ")", ":", "\n", "            ", "pred_disp", "=", "inference", "(", "imgL_crop", ",", "imgR_crop", ",", "calib", ",", "model", ")", "\n", "for", "idx", ",", "name", "in", "enumerate", "(", "filename", ")", ":", "\n", "                ", "np", ".", "save", "(", "args", ".", "save_path", "+", "'/depth_maps/'", "+", "args", ".", "data_tag", "+", "\n", "'/'", "+", "name", ",", "pred_disp", "[", "idx", "]", "[", "-", "H", "[", "idx", "]", ":", ",", ":", "W", "[", "idx", "]", "]", ")", "\n", "", "", "import", "sys", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "# evaluation", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "evaluate_metric", "=", "utils_func", ".", "Metric", "(", ")", "\n", "## training ##", "\n", "for", "batch_idx", ",", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ")", "in", "enumerate", "(", "TestImgLoader", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "test", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ",", "evaluate_metric", ",", "optimizer", ",", "model", ")", "\n", "\n", "log", ".", "info", "(", "evaluate_metric", ".", "print", "(", "batch_idx", ",", "'EVALUATE'", ")", "+", "\n", "' Time:{:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "", "import", "sys", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "\n", "## training ##", "\n", "train_metric", "=", "utils_func", ".", "Metric", "(", ")", "\n", "tqdm_train_loader", "=", "tqdm", "(", "TrainImgLoader", ",", "total", "=", "len", "(", "TrainImgLoader", ")", ")", "\n", "for", "batch_idx", ",", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ")", "in", "enumerate", "(", "tqdm_train_loader", ")", ":", "\n", "# start_time = time.time()", "\n", "            ", "train", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ",", "train_metric", ",", "optimizer", ",", "model", ",", "epoch", ")", "\n", "# log.info(train_metric.print(batch_idx, 'TRAIN') + ' Time:{:.3f}'.format(time.time() - start_time))", "\n", "", "log", ".", "info", "(", "train_metric", ".", "print", "(", "0", ",", "'TRAIN Epoch'", "+", "str", "(", "epoch", ")", ")", ")", "\n", "train_metric", ".", "tensorboard", "(", "writer", ",", "epoch", ",", "token", "=", "'TRAIN'", ")", "\n", "if", "use_losswise", ":", "\n", "            ", "lw", ".", "update", "(", "train_metric", ".", "get_info", "(", ")", ",", "epoch", ",", "'Train'", ")", "\n", "\n", "## testing ##", "\n", "", "is_best", "=", "False", "\n", "if", "epoch", "==", "0", "or", "(", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_interval", ")", "==", "0", ":", "\n", "            ", "test_metric", "=", "utils_func", ".", "Metric", "(", ")", "\n", "tqdm_test_loader", "=", "tqdm", "(", "TestImgLoader", ",", "total", "=", "len", "(", "TestImgLoader", ")", ")", "\n", "for", "batch_idx", ",", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ")", "in", "enumerate", "(", "tqdm_test_loader", ")", ":", "\n", "# start_time = time.time()", "\n", "                ", "test", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "calib", ",", "test_metric", ",", "optimizer", ",", "model", ")", "\n", "# log.info(test_metric.print(batch_idx, 'TEST') + ' Time:{:.3f}'.format(time.time() - start_time))", "\n", "", "log", ".", "info", "(", "test_metric", ".", "print", "(", "0", ",", "'TEST Epoch'", "+", "str", "(", "epoch", ")", ")", ")", "\n", "test_metric", ".", "tensorboard", "(", "writer", ",", "epoch", ",", "token", "=", "'TEST'", ")", "\n", "if", "use_losswise", ":", "\n", "                ", "lw", ".", "update", "(", "test_metric", ".", "get_info", "(", ")", ",", "epoch", ",", "'Test'", ")", "\n", "\n", "# SAVE", "\n", "", "is_best", "=", "test_metric", ".", "RMSELIs", ".", "avg", "<", "best_RMSE", "\n", "best_RMSE", "=", "min", "(", "test_metric", ".", "RMSELIs", ".", "avg", ",", "best_RMSE", ")", "\n", "", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_RMSE'", ":", "best_RMSE", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "epoch", ",", "folder", "=", "args", ".", "save_path", ")", "\n", "\n", "", "if", "use_losswise", ":", "\n", "        ", "lw", ".", "done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.save_checkpoint": [[309, 315], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "shutil.copyfile"], "function", ["None"], ["", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filename", "=", "'checkpoint.pth.tar'", ",", "folder", "=", "'result/default'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "folder", "+", "'/'", "+", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "folder", "+", "'/'", "+", "filename", ",", "folder", "+", "'/model_best.pth.tar'", ")", "\n", "", "if", "args", ".", "checkpoint_interval", ">", "0", "and", "(", "epoch", "+", "1", ")", "%", "args", ".", "checkpoint_interval", "==", "0", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "folder", "+", "'/'", "+", "filename", ",", "folder", "+", "'/checkpoint_{}.pth.tar'", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.train": [[317, 363], ["model.train", "calib.float.float", "mask.detach_", "optimizer.zero_grad", "metric_log.calculate", "CustomLoss.backward", "optimizer.step", "imgL.cuda", "imgR.cuda", "depth.cuda", "calib.float.cuda", "model", "utils_func.CriterionParallel", "main_depth.disp2depth", "main_depth.disp2depth", "main_depth.disp2depth", "main_depth.disp2depth", "utils_func.CriterionParallel.", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "main_depth.interpolate_value", "model", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "utils_func.CriterionParallel.", "CustomLoss.item", "pred3_out.float", "main_depth.disp2depth", "utils_func.CriterionParallel.", "utils_func.CriterionParallel."], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.train", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.calculate", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass_volume.PSMNet.interpolate_value", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth"], ["", "", "def", "train", "(", "imgL", ",", "imgR", ",", "depth", ",", "calib", ",", "metric_log", ",", "optimizer", ",", "model", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "calib", "=", "calib", ".", "float", "(", ")", "\n", "\n", "imgL", ",", "imgR", ",", "depth", ",", "calib", "=", "imgL", ".", "cuda", "(", ")", ",", "imgR", ".", "cuda", "(", ")", ",", "depth", ".", "cuda", "(", ")", ",", "calib", ".", "cuda", "(", ")", "\n", "\n", "# ---------", "\n", "mask", "=", "(", "depth", ">=", "1", ")", "*", "(", "depth", "<=", "80", ")", "\n", "mask", ".", "detach_", "(", ")", "\n", "# ----", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "'stackhourglass'", "in", "args", ".", "arch", ":", "\n", "        ", "output1", ",", "output2", ",", "output3", ",", "off1", ",", "off2", ",", "off3", "=", "model", "(", "imgL", ",", "imgR", ",", "calib", ")", "\n", "\n", "if", "args", ".", "data_type", "==", "'disparity'", ":", "\n", "            ", "output1", "=", "disp2depth", "(", "output1", ",", "calib", ")", "\n", "output1", "=", "disp2depth", "(", "output1", ",", "calib", ")", "\n", "output2", "=", "disp2depth", "(", "output2", ",", "calib", ")", "\n", "output3", "=", "disp2depth", "(", "output3", ",", "calib", ")", "\n", "\n", "", "CustomLoss", "=", "utils_func", ".", "CriterionParallel", "(", "W_loss", ")", "\n", "\n", "loss", "=", "0.5", "*", "CustomLoss", "(", "output1", ",", "depth", ",", "off1", ",", "mask", ",", "epoch", ",", "reduction", "=", "'mean'", ",", "p", "=", "args", ".", "w_p", ",", "scale", "=", "args", ".", "scale", ")", "+", "0.7", "*", "CustomLoss", "(", "\n", "output2", ",", "depth", ",", "off2", ",", "mask", ",", "epoch", ",", "reduction", "=", "'mean'", ",", "p", "=", "args", ".", "w_p", ",", "scale", "=", "args", ".", "scale", ")", "+", "CustomLoss", "(", "output3", ",", "depth", ",", "off3", ",", "mask", ",", "epoch", ",", "\n", "reduction", "=", "'mean'", ",", "p", "=", "args", ".", "w_p", ",", "scale", "=", "args", ".", "scale", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "pred3_out", "=", "torch", ".", "max", "(", "output3", ",", "1", ")", "\n", "pred3_out", "=", "pred3_out", ".", "float", "(", ")", "+", "1", "# Make 1-indexed", "\n", "off3_out", "=", "interpolate_value", "(", "off3", ",", "pred3_out", ",", "maxdepth", "=", "args", ".", "maxdepth", "//", "args", ".", "scale", ")", "\n", "pred", "=", "(", "pred3_out", "+", "off3_out", ")", "*", "args", ".", "scale", "\n", "\n", "", "", "elif", "args", ".", "arch", "==", "'basic'", ":", "\n", "        ", "output3", "=", "model", "(", "imgL", ",", "imgR", ",", "calib", ")", "\n", "output3", "=", "torch", ".", "squeeze", "(", "output3", ",", "1", ")", "\n", "if", "args", ".", "data_type", "==", "'disparity'", ":", "\n", "            ", "output3", "=", "disp2depth", "(", "output3", ",", "calib", ")", "\n", "", "loss", "=", "CustomLoss", "(", "output3", ",", "depth", ",", "off3", ",", "mask", ",", "reduction", "=", "'mean'", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "metric_log", ".", "calculate", "(", "depth", ",", "pred", ",", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.inference": [[365, 376], ["model.eval", "disp2depth.data.cpu().numpy", "imgL.cuda", "imgR.cuda", "calib.float().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "main_depth.disp2depth", "disp2depth.data.cpu", "calib.float"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth"], ["", "def", "inference", "(", "imgL", ",", "imgR", ",", "calib", ",", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "imgL", ",", "imgR", ",", "calib", "=", "imgL", ".", "cuda", "(", ")", ",", "imgR", ".", "cuda", "(", ")", ",", "calib", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", "=", "model", "(", "imgL", ",", "imgR", ",", "calib", ")", "\n", "", "if", "args", ".", "data_type", "==", "'disparity'", ":", "\n", "        ", "output", "=", "disp2depth", "(", "output", ",", "calib", ")", "\n", "", "pred_depth", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "return", "pred_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.test": [[378, 398], ["model.eval", "calib.float.float", "mask.detach_", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "imgL.cuda", "imgR.cuda", "calib.float.cuda", "depth.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.smooth_l1_loss", "metric_log.calculate", "main_depth.disp2depth", "F.smooth_l1_loss.item"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.calculate", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth"], ["", "def", "test", "(", "imgL", ",", "imgR", ",", "depth", ",", "calib", ",", "metric_log", ",", "optimizer", ",", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "calib", "=", "calib", ".", "float", "(", ")", "\n", "imgL", ",", "imgR", ",", "calib", ",", "depth", "=", "imgL", ".", "cuda", "(", ")", ",", "imgR", ".", "cuda", "(", ")", ",", "calib", ".", "cuda", "(", ")", ",", "depth", ".", "cuda", "(", ")", "\n", "\n", "mask", "=", "(", "depth", ">=", "1", ")", "*", "(", "depth", "<=", "80", ")", "\n", "mask", ".", "detach_", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output3", "=", "model", "(", "imgL", ",", "imgR", ",", "calib", ")", "\n", "output3", "=", "torch", ".", "squeeze", "(", "output3", ",", "1", ")", "\n", "\n", "if", "args", ".", "data_type", "==", "'disparity'", ":", "\n", "            ", "output3", "=", "disp2depth", "(", "output3", ",", "calib", ")", "\n", "", "loss", "=", "F", ".", "smooth_l1_loss", "(", "output3", "[", "mask", "]", ",", "depth", "[", "mask", "]", ",", "size_average", "=", "True", ")", "\n", "\n", "# computing 3-px error#", "\n", "metric_log", ".", "calculate", "(", "depth", ",", "output3", ",", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.main_depth.disp2depth": [[400, 403], ["disp.clamp"], "function", ["None"], ["", "def", "disp2depth", "(", "disp", ",", "calib", ")", ":", "\n", "    ", "depth", "=", "calib", "[", ":", ",", "None", ",", "None", "]", "/", "disp", ".", "clamp", "(", "min", "=", "1e-8", ")", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.ModularizedFunction.__init__": [[10, 13], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__"], ["def", "__init__", "(", "self", ",", "forward_op", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "forward_op", "=", "forward_op", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.ModularizedFunction.forward": [[14, 16], ["disp_utils_func.ModularizedFunction.forward_op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "forward_op", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.CriterionParallel.__init__": [[19, 24], ["super().__init__", "torch.nn.DataParallel", "isinstance", "disp_utils_func.ModularizedFunction"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "criterion", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "criterion", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "            ", "criterion", "=", "ModularizedFunction", "(", "criterion", ")", "\n", "", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "DataParallel", "(", "criterion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.CriterionParallel.forward": [[25, 32], ["disp_utils_func.CriterionParallel.criterion().mean", "disp_utils_func.CriterionParallel.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Note the .mean() here, which is required since DataParallel \n        gathers any scalar outputs of forward() into a vector with \n        one item per GPU (See DataParallel docs).\n        \"\"\"", "\n", "return", "self", ".", "criterion", "(", "*", "args", ",", "**", "kwargs", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.AverageMeter.__init__": [[36, 38], ["disp_utils_func.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.AverageMeter.reset": [[39, 44], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.AverageMeter.update": [[45, 50], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.Metric.__init__": [[53, 63], ["disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "EPE", "=", "AverageMeter", "(", ")", "\n", "self", ".", "px1", "=", "AverageMeter", "(", ")", "\n", "self", ".", "px2", "=", "AverageMeter", "(", ")", "\n", "self", ".", "px3", "=", "AverageMeter", "(", ")", "\n", "self", ".", "px5", "=", "AverageMeter", "(", ")", "\n", "self", ".", "DELTA", "=", "AverageMeter", "(", ")", "\n", "self", ".", "DELTASQ", "=", "AverageMeter", "(", ")", "\n", "self", ".", "DELTACU", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses", "=", "AverageMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.Metric.update": [[64, 75], ["disp_utils_func.Metric.EPE.update", "disp_utils_func.Metric.px1.update", "disp_utils_func.Metric.px2.update", "disp_utils_func.Metric.px3.update", "disp_utils_func.Metric.px5.update", "disp_utils_func.Metric.DELTA.update", "disp_utils_func.Metric.DELTASQ.update", "disp_utils_func.Metric.DELTACU.update", "disp_utils_func.Metric.losses.update"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update"], ["", "def", "update", "(", "self", ",", "loss", ",", "EPE", ",", "px1", ",", "px2", ",", "px3", ",", "px5", ",", "delta", ",", "delta_sq", ",", "delta_cu", ")", ":", "\n", "        ", "if", "loss", ":", "\n", "            ", "self", ".", "losses", ".", "update", "(", "loss", ")", "\n", "", "self", ".", "EPE", ".", "update", "(", "EPE", ")", "\n", "self", ".", "px1", ".", "update", "(", "px1", ")", "\n", "self", ".", "px2", ".", "update", "(", "px2", ")", "\n", "self", ".", "px3", ".", "update", "(", "px3", ")", "\n", "self", ".", "px5", ".", "update", "(", "px5", ")", "\n", "self", ".", "DELTA", ".", "update", "(", "delta", ")", "\n", "self", ".", "DELTASQ", ".", "update", "(", "delta_sq", ")", "\n", "self", ".", "DELTACU", ".", "update", "(", "delta_cu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.Metric.get_info": [[76, 79], ["None"], "methods", ["None"], ["", "def", "get_info", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "losses", ".", "avg", ",", "self", ".", "EPE", ".", "avg", ",", "self", ".", "px1", ".", "avg", ",", "self", ".", "px2", ".", "avg", ",", "self", ".", "px3", ".", "avg", ",", "self", ".", "px5", ".", "avg", ",", "self", ".", "DELTA", ".", "avg", ",", "\n", "self", ".", "DELTASQ", ".", "avg", ",", "self", ".", "DELTACU", ".", "avg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.Metric.calculate": [[80, 100], ["torch.abs", "disp_utils_func.Metric.update", "mask.float().sum().cpu", "torch.abs.float().mean().cpu", "mask.float().sum", "torch.abs.float().mean", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "mask.float", "torch.abs.float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update"], ["", "def", "calculate", "(", "self", ",", "disp", ",", "predict", ",", "loss", "=", "None", ")", ":", "\n", "        ", "mask", "=", "(", "disp", ">", "0", ")", "*", "(", "disp", "<", "192", ")", "\n", "\n", "disp", "=", "disp", "[", "mask", "]", "\n", "predict", "=", "predict", "[", "mask", "]", "\n", "\n", "abs_error", "=", "torch", ".", "abs", "(", "disp", "-", "predict", ")", "\n", "total_num", "=", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "\n", "EPE", "=", "abs_error", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "px1", "=", "torch", ".", "sum", "(", "torch", ".", "gt", "(", "abs_error", ",", "1", ")", ".", "float", "(", ")", ")", ".", "cpu", "(", ")", ".", "data", "/", "total_num", "*", "100", "\n", "px2", "=", "torch", ".", "sum", "(", "torch", ".", "gt", "(", "abs_error", ",", "2", ")", ".", "float", "(", ")", ")", ".", "cpu", "(", ")", ".", "data", "/", "total_num", "*", "100", "\n", "px3", "=", "torch", ".", "sum", "(", "torch", ".", "gt", "(", "abs_error", ",", "3", ")", ".", "float", "(", ")", ")", ".", "cpu", "(", ")", ".", "data", "/", "total_num", "*", "100", "\n", "px5", "=", "torch", ".", "sum", "(", "torch", ".", "gt", "(", "abs_error", ",", "5", ")", ".", "float", "(", ")", ")", ".", "cpu", "(", ")", ".", "data", "/", "total_num", "*", "100", "\n", "delta", "=", "(", "torch", ".", "max", "(", "predict", "/", "disp", ",", "disp", "/", "predict", ")", "<", "1.25", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "delta_sq", "=", "(", "torch", ".", "max", "(", "predict", "/", "disp", ",", "\n", "disp", "/", "predict", ")", "<", "1.25", "**", "2", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "delta_cu", "=", "(", "torch", ".", "max", "(", "predict", "/", "disp", ",", "\n", "disp", "/", "predict", ")", "<", "1.25", "**", "3", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "self", ".", "update", "(", "loss", ",", "EPE", ",", "px1", ",", "px2", ",", "px3", ",", "px5", ",", "delta", ",", "delta_sq", ",", "delta_cu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.Metric.tensorboard": [[101, 110], ["writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar"], "methods", ["None"], ["", "def", "tensorboard", "(", "self", ",", "writer", ",", "epoch", ",", "token", "=", "'train'", ")", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "token", "+", "'/EPE'", ",", "self", ".", "EPE", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/1px'", ",", "self", ".", "px1", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/2px'", ",", "self", ".", "px2", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/3px'", ",", "self", ".", "px3", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/5px'", ",", "self", ".", "px5", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/DELTA'", ",", "self", ".", "DELTA", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/DELTASQ'", ",", "self", ".", "DELTASQ", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/DELTACU'", ",", "self", ".", "DELTACU", ".", "avg", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.Metric.print": [[111, 114], ["disp_utils_func.Metric.get_info"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.get_info"], ["", "def", "print", "(", "self", ",", "iter", ",", "token", ")", ":", "\n", "        ", "string", "=", "'{}:{}\\tL {:.3f} EPE {:.3f} 1px {:.3f} 2px {:.3f} 3px {:.3f} 5px {:.3f} DEL {:.3f} DELQ {:.3f} DELC {:.3f}'", ".", "format", "(", "token", ",", "iter", ",", "*", "self", ".", "get_info", "(", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.LossWise.__init__": [[118, 128], ["print", "len", "losswise.set_api_key", "losswise.Session", "losswise.Session.graph", "losswise.Session.graph", "losswise.Session.graph"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["    ", "def", "__init__", "(", "self", ",", "key", "=", "None", ",", "tag", "=", "None", ",", "epochs", "=", "300", ")", ":", "\n", "        ", "self", ".", "key", "=", "key", "\n", "print", "(", "self", ".", "key", ")", "\n", "if", "len", "(", "self", ".", "key", ")", ">", "0", ":", "\n", "            ", "losswise", ".", "set_api_key", "(", "self", ".", "key", ")", "\n", "session", "=", "losswise", ".", "Session", "(", "tag", "=", "tag", ",", "max_iter", "=", "epochs", ")", "\n", "self", ".", "error", "=", "session", ".", "graph", "(", "'Error'", ",", "kind", "=", "'min'", ",", "display_interval", "=", "1", ")", "\n", "self", ".", "loss", "=", "session", ".", "graph", "(", "'Loss'", ",", "kind", "=", "'min'", ",", "display_interval", "=", "1", ")", "\n", "self", ".", "delta", "=", "session", ".", "graph", "(", "'Delta'", ",", "kind", "=", "'min'", ",", "display_interval", "=", "1", ")", "\n", "self", ".", "session", "=", "session", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.LossWise.update": [[129, 137], ["len", "disp_utils_func.LossWise.loss.append", "disp_utils_func.LossWise.error.append", "disp_utils_func.LossWise.delta.append"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "info", ",", "epoch", ",", "tag", "=", "'Train'", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "key", ")", ">", "0", ":", "\n", "            ", "self", ".", "loss", ".", "append", "(", "epoch", ",", "{", "tag", "+", "'/loss'", ":", "info", "[", "0", "]", "}", ")", "\n", "self", ".", "error", ".", "append", "(", "epoch", ",", "{", "tag", "+", "'/EPE'", ":", "info", "[", "1", "]", ",", "tag", "+", "'/1px'", ":", "info", "[", "2", "]", ",", "\n", "tag", "+", "'/2px'", ":", "info", "[", "3", "]", ",", "tag", "+", "'/3px'", ":", "info", "[", "4", "]", ",", "\n", "tag", "+", "'/5px'", ":", "info", "[", "5", "]", "}", ")", "\n", "self", ".", "delta", ".", "append", "(", "epoch", ",", "{", "tag", "+", "'/1.25'", ":", "info", "[", "6", "]", ",", "tag", "+", "'/1.25^2'", ":", "info", "[", "7", "]", ",", "\n", "tag", "+", "'/1.25^3'", ":", "info", "[", "8", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.LossWise.done": [[138, 140], ["disp_utils_func.LossWise.session.done"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.LossWise1.done"], ["", "", "def", "done", "(", "self", ")", ":", "\n", "        ", "self", ".", "session", ".", "done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.LossWise1.__init__": [[142, 152], ["print", "len", "losswise.set_api_key", "losswise.Session", "losswise.Session.graph", "losswise.Session.graph", "losswise.Session.graph"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["    ", "def", "__init__", "(", "self", ",", "key", "=", "None", ",", "tag", "=", "None", ",", "epochs", "=", "300", ")", ":", "\n", "        ", "self", ".", "key", "=", "key", "\n", "print", "(", "self", ".", "key", ")", "\n", "if", "len", "(", "self", ".", "key", ")", ">", "0", ":", "\n", "            ", "losswise", ".", "set_api_key", "(", "self", ".", "key", ")", "\n", "session", "=", "losswise", ".", "Session", "(", "tag", "=", "tag", ",", "max_iter", "=", "epochs", ")", "\n", "self", ".", "error", "=", "session", ".", "graph", "(", "'Error'", ",", "kind", "=", "'min'", ",", "display_interval", "=", "1", ")", "\n", "self", ".", "loss_total", "=", "session", ".", "graph", "(", "'Loss'", ",", "kind", "=", "'min'", ",", "display_interval", "=", "1", ")", "\n", "self", ".", "delta", "=", "session", ".", "graph", "(", "'Delta'", ",", "kind", "=", "'min'", ",", "display_interval", "=", "1", ")", "\n", "self", ".", "session", "=", "session", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.LossWise1.update": [[153, 161], ["len", "disp_utils_func.LossWise1.loss_total.append", "disp_utils_func.LossWise1.error.append", "disp_utils_func.LossWise1.delta.append"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "info", ",", "epoch", ",", "tag", "=", "'Train'", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "key", ")", ">", "0", ":", "\n", "            ", "self", ".", "loss_total", ".", "append", "(", "epoch", ",", "{", "tag", "+", "'/loss_gt'", ":", "info", "[", "0", "]", ",", "tag", "+", "'/loss_pseudo'", ":", "info", "[", "1", "]", ",", "tag", "+", "'/loss_total'", ":", "info", "[", "2", "]", "}", ")", "\n", "self", ".", "error", ".", "append", "(", "epoch", ",", "{", "tag", "+", "'/EPE'", ":", "info", "[", "3", "]", ",", "tag", "+", "'/1px'", ":", "info", "[", "4", "]", ",", "\n", "tag", "+", "'/2px'", ":", "info", "[", "5", "]", ",", "tag", "+", "'/3px'", ":", "info", "[", "6", "]", ",", "\n", "tag", "+", "'/5px'", ":", "info", "[", "7", "]", "}", ")", "\n", "self", ".", "delta", ".", "append", "(", "epoch", ",", "{", "tag", "+", "'/1.25'", ":", "info", "[", "8", "]", ",", "tag", "+", "'/1.25^2'", ":", "info", "[", "9", "]", ",", "\n", "tag", "+", "'/1.25^3'", ":", "info", "[", "10", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.LossWise1.done": [[162, 164], ["disp_utils_func.LossWise1.session.done"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.LossWise1.done"], ["", "", "def", "done", "(", "self", ")", ":", "\n", "        ", "self", ".", "session", ".", "done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.Metric1.__init__": [[166, 177], ["disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter", "disp_utils_func.AverageMeter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "RMSELIs", "=", "AverageMeter", "(", ")", "\n", "self", ".", "RMSELGs", "=", "AverageMeter", "(", ")", "\n", "self", ".", "ABSRs", "=", "AverageMeter", "(", ")", "\n", "self", ".", "SQRs", "=", "AverageMeter", "(", ")", "\n", "self", ".", "DELTA", "=", "AverageMeter", "(", ")", "\n", "self", ".", "DELTASQ", "=", "AverageMeter", "(", ")", "\n", "self", ".", "DELTACU", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_gt", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_pseudo", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_total", "=", "AverageMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.Metric1.update": [[178, 189], ["disp_utils_func.Metric1.losses_gt.update", "disp_utils_func.Metric1.losses_pseudo.update", "disp_utils_func.Metric1.losses_total.update", "disp_utils_func.Metric1.RMSELIs.update", "disp_utils_func.Metric1.RMSELGs.update", "disp_utils_func.Metric1.ABSRs.update", "disp_utils_func.Metric1.SQRs.update", "disp_utils_func.Metric1.DELTA.update", "disp_utils_func.Metric1.DELTASQ.update", "disp_utils_func.Metric1.DELTACU.update"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update"], ["", "def", "update", "(", "self", ",", "loss_gt", ",", "loss_pseudo", ",", "loss_total", ",", "RMSE_Linear", ",", "RMSE_Log", ",", "abs_relative", ",", "sq_relative", ",", "delta", ",", "delta_sq", ",", "delta_cu", ")", ":", "\n", "        ", "self", ".", "losses_gt", ".", "update", "(", "loss_gt", ")", "\n", "self", ".", "losses_pseudo", ".", "update", "(", "loss_pseudo", ")", "\n", "self", ".", "losses_total", ".", "update", "(", "loss_total", ")", "\n", "self", ".", "RMSELIs", ".", "update", "(", "RMSE_Linear", ")", "\n", "self", ".", "RMSELGs", ".", "update", "(", "RMSE_Log", ")", "\n", "self", ".", "ABSRs", ".", "update", "(", "abs_relative", ")", "\n", "self", ".", "SQRs", ".", "update", "(", "sq_relative", ")", "\n", "self", ".", "DELTA", ".", "update", "(", "delta", ")", "\n", "self", ".", "DELTASQ", ".", "update", "(", "delta_sq", ")", "\n", "self", ".", "DELTACU", ".", "update", "(", "delta_cu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.Metric1.get_info": [[190, 193], ["None"], "methods", ["None"], ["", "def", "get_info", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "losses_gt", ".", "avg", ",", "self", ".", "losses_pseudo", ".", "avg", ",", "self", ".", "losses_total", ".", "avg", ",", "self", ".", "RMSELIs", ".", "avg", ",", "self", ".", "RMSELGs", ".", "avg", ",", "self", ".", "ABSRs", ".", "avg", ",", "self", ".", "SQRs", ".", "avg", ",", "self", ".", "DELTA", ".", "avg", ",", "\n", "self", ".", "DELTASQ", ".", "avg", ",", "self", ".", "DELTACU", ".", "avg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.Metric1.calculate": [[194, 207], ["disp_utils_func.Metric1.update", "torch.abs", "torch.log", "torch.log", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update"], ["", "def", "calculate", "(", "self", ",", "depth", ",", "predict", ",", "loss_gt", "=", "0", ",", "loss_psuedo", "=", "0", ",", "loss_total", "=", "0", ")", ":", "\n", "# only consider 1~80 meters", "\n", "        ", "mask", "=", "(", "depth", ">=", "1", ")", "*", "(", "depth", "<=", "80", ")", "\n", "RMSE_Linear", "=", "(", "(", "(", "(", "predict", "[", "mask", "]", "-", "depth", "[", "mask", "]", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "**", "0.5", ")", ".", "cpu", "(", ")", ".", "data", "\n", "RMSE_Log", "=", "(", "(", "(", "(", "torch", ".", "log", "(", "predict", "[", "mask", "]", ")", "-", "torch", ".", "log", "(", "depth", "[", "mask", "]", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "**", "0.5", ")", ".", "cpu", "(", ")", ".", "data", "\n", "abs_relative", "=", "(", "torch", ".", "abs", "(", "predict", "[", "mask", "]", "-", "depth", "[", "mask", "]", ")", "/", "depth", "[", "mask", "]", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "sq_relative", "=", "(", "(", "predict", "[", "mask", "]", "-", "depth", "[", "mask", "]", ")", "**", "2", "/", "depth", "[", "mask", "]", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "delta", "=", "(", "torch", ".", "max", "(", "predict", "[", "mask", "]", "/", "depth", "[", "mask", "]", ",", "depth", "[", "mask", "]", "/", "predict", "[", "mask", "]", ")", "<", "1.25", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "delta_sq", "=", "(", "torch", ".", "max", "(", "predict", "[", "mask", "]", "/", "depth", "[", "mask", "]", ",", "\n", "depth", "[", "mask", "]", "/", "predict", "[", "mask", "]", ")", "<", "1.25", "**", "2", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "delta_cu", "=", "(", "torch", ".", "max", "(", "predict", "[", "mask", "]", "/", "depth", "[", "mask", "]", ",", "\n", "depth", "[", "mask", "]", "/", "predict", "[", "mask", "]", ")", "<", "1.25", "**", "3", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "self", ".", "update", "(", "loss_gt", ",", "loss_psuedo", ",", "loss_total", ",", "RMSE_Linear", ",", "RMSE_Log", ",", "abs_relative", ",", "sq_relative", ",", "delta", ",", "delta_sq", ",", "delta_cu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.Metric1.tensorboard": [[208, 216], ["writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar"], "methods", ["None"], ["", "def", "tensorboard", "(", "self", ",", "writer", ",", "epoch", ",", "token", "=", "'train'", ")", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "token", "+", "'/RMSELIs'", ",", "self", ".", "RMSELIs", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/RMSELGs'", ",", "self", ".", "RMSELGs", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/ABSRs'", ",", "self", ".", "ABSRs", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/SQRs'", ",", "self", ".", "SQRs", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/DELTA'", ",", "self", ".", "DELTA", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/DELTASQ'", ",", "self", ".", "DELTASQ", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/DELTACU'", ",", "self", ".", "DELTACU", ".", "avg", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.disp_utils_func.Metric1.print": [[217, 220], ["disp_utils_func.Metric1.get_info"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.get_info"], ["", "def", "print", "(", "self", ",", "iter", ",", "token", ")", ":", "\n", "        ", "string", "=", "'{}:{}\\tL {:.3f} {:.3f} {:.3f} RLI {:.3f} RLO {:.3f} ABS {:.3f} SQ {:.3f} DEL {:.3f} DELQ {:.3f} DELC {:.3f}'", ".", "format", "(", "token", ",", "iter", ",", "*", "self", ".", "get_info", "(", ")", ")", "\n", "return", "string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.ModularizedFunction.__init__": [[9, 12], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__"], ["def", "__init__", "(", "self", ",", "forward_op", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "forward_op", "=", "forward_op", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.ModularizedFunction.forward": [[13, 15], ["utils_func.ModularizedFunction.forward_op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "forward_op", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.CriterionParallel.__init__": [[18, 23], ["super().__init__", "torch.nn.DataParallel", "isinstance", "utils_func.ModularizedFunction"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "criterion", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "criterion", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "            ", "criterion", "=", "ModularizedFunction", "(", "criterion", ")", "\n", "", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "DataParallel", "(", "criterion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.CriterionParallel.forward": [[24, 31], ["utils_func.CriterionParallel.criterion().mean", "utils_func.CriterionParallel.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Note the .mean() here, which is required since DataParallel \n        gathers any scalar outputs of forward() into a vector with \n        one item per GPU (See DataParallel docs).\n        \"\"\"", "\n", "return", "self", ".", "criterion", "(", "*", "args", ",", "**", "kwargs", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.AverageMeter.__init__": [[35, 37], ["utils_func.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.AverageMeter.reset": [[38, 43], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.AverageMeter.update": [[44, 49], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric.__init__": [[52, 62], ["utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "EPE", "=", "AverageMeter", "(", ")", "\n", "self", ".", "RMSELIs", "=", "AverageMeter", "(", ")", "\n", "self", ".", "RMSELGs", "=", "AverageMeter", "(", ")", "\n", "self", ".", "ABSRs", "=", "AverageMeter", "(", ")", "\n", "self", ".", "SQRs", "=", "AverageMeter", "(", ")", "\n", "self", ".", "DELTA", "=", "AverageMeter", "(", ")", "\n", "self", ".", "DELTASQ", "=", "AverageMeter", "(", ")", "\n", "self", ".", "DELTACU", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses", "=", "AverageMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric.update": [[63, 74], ["utils_func.Metric.EPE.update", "utils_func.Metric.RMSELIs.update", "utils_func.Metric.RMSELGs.update", "utils_func.Metric.ABSRs.update", "utils_func.Metric.SQRs.update", "utils_func.Metric.DELTA.update", "utils_func.Metric.DELTASQ.update", "utils_func.Metric.DELTACU.update", "utils_func.Metric.losses.update"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update"], ["", "def", "update", "(", "self", ",", "loss", ",", "EPE", ",", "RMSE_Linear", ",", "RMSE_Log", ",", "abs_relative", ",", "sq_relative", ",", "delta", ",", "delta_sq", ",", "delta_cu", ")", ":", "\n", "        ", "if", "loss", ":", "\n", "            ", "self", ".", "losses", ".", "update", "(", "loss", ")", "\n", "", "self", ".", "EPE", ".", "update", "(", "EPE", ")", "\n", "self", ".", "RMSELIs", ".", "update", "(", "RMSE_Linear", ")", "\n", "self", ".", "RMSELGs", ".", "update", "(", "RMSE_Log", ")", "\n", "self", ".", "ABSRs", ".", "update", "(", "abs_relative", ")", "\n", "self", ".", "SQRs", ".", "update", "(", "sq_relative", ")", "\n", "self", ".", "DELTA", ".", "update", "(", "delta", ")", "\n", "self", ".", "DELTASQ", ".", "update", "(", "delta_sq", ")", "\n", "self", ".", "DELTACU", ".", "update", "(", "delta_cu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric.get_info": [[75, 78], ["None"], "methods", ["None"], ["", "def", "get_info", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "losses", ".", "avg", ",", "self", ".", "EPE", ".", "avg", ",", "self", ".", "RMSELIs", ".", "avg", ",", "self", ".", "RMSELGs", ".", "avg", ",", "self", ".", "ABSRs", ".", "avg", ",", "self", ".", "SQRs", ".", "avg", ",", "self", ".", "DELTA", ".", "avg", ",", "\n", "self", ".", "DELTASQ", ".", "avg", ",", "self", ".", "DELTACU", ".", "avg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric.calculate": [[79, 93], ["utils_func.Metric.update", "torch.abs().float().mean().cpu", "torch.abs().float().mean", "torch.abs().float", "torch.abs", "torch.abs", "torch.log", "torch.log", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update"], ["", "def", "calculate", "(", "self", ",", "depth", ",", "predict", ",", "loss", "=", "None", ")", ":", "\n", "# only consider 1~80 meters", "\n", "        ", "mask", "=", "(", "depth", ">=", "1", ")", "*", "(", "depth", "<=", "80", ")", "\n", "EPE", "=", "torch", ".", "abs", "(", "predict", "[", "mask", "]", "-", "depth", "[", "mask", "]", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "RMSE_Linear", "=", "(", "(", "(", "(", "predict", "[", "mask", "]", "-", "depth", "[", "mask", "]", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "**", "0.5", ")", ".", "cpu", "(", ")", ".", "data", "\n", "RMSE_Log", "=", "(", "(", "(", "(", "torch", ".", "log", "(", "predict", "[", "mask", "]", ")", "-", "torch", ".", "log", "(", "depth", "[", "mask", "]", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "**", "0.5", ")", ".", "cpu", "(", ")", ".", "data", "\n", "abs_relative", "=", "(", "torch", ".", "abs", "(", "predict", "[", "mask", "]", "-", "depth", "[", "mask", "]", ")", "/", "depth", "[", "mask", "]", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "sq_relative", "=", "(", "(", "predict", "[", "mask", "]", "-", "depth", "[", "mask", "]", ")", "**", "2", "/", "depth", "[", "mask", "]", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "delta", "=", "(", "torch", ".", "max", "(", "predict", "[", "mask", "]", "/", "depth", "[", "mask", "]", ",", "depth", "[", "mask", "]", "/", "predict", "[", "mask", "]", ")", "<", "1.25", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "delta_sq", "=", "(", "torch", ".", "max", "(", "predict", "[", "mask", "]", "/", "depth", "[", "mask", "]", ",", "\n", "depth", "[", "mask", "]", "/", "predict", "[", "mask", "]", ")", "<", "1.25", "**", "2", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "delta_cu", "=", "(", "torch", ".", "max", "(", "predict", "[", "mask", "]", "/", "depth", "[", "mask", "]", ",", "\n", "depth", "[", "mask", "]", "/", "predict", "[", "mask", "]", ")", "<", "1.25", "**", "3", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "self", ".", "update", "(", "loss", ",", "EPE", ",", "RMSE_Linear", ",", "RMSE_Log", ",", "abs_relative", ",", "sq_relative", ",", "delta", ",", "delta_sq", ",", "delta_cu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric.tensorboard": [[94, 103], ["writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar"], "methods", ["None"], ["", "def", "tensorboard", "(", "self", ",", "writer", ",", "epoch", ",", "token", "=", "'train'", ")", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "token", "+", "'/EPEs'", ",", "self", ".", "EPE", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/RMSELIs'", ",", "self", ".", "RMSELIs", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/RMSELGs'", ",", "self", ".", "RMSELGs", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/ABSRs'", ",", "self", ".", "ABSRs", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/SQRs'", ",", "self", ".", "SQRs", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/DELTA'", ",", "self", ".", "DELTA", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/DELTASQ'", ",", "self", ".", "DELTASQ", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/DELTACU'", ",", "self", ".", "DELTACU", ".", "avg", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric.print": [[104, 107], ["utils_func.Metric.get_info"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.get_info"], ["", "def", "print", "(", "self", ",", "iter", ",", "token", ")", ":", "\n", "        ", "string", "=", "'{}:{}\\tL {:.3f} EPE {:.3f} RLI {:.3f} RLO {:.3f} ABS {:.3f} SQ {:.3f} DEL {:.3f} DELQ {:.3f} DELC {:.3f}'", ".", "format", "(", "token", ",", "iter", ",", "*", "self", ".", "get_info", "(", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.LossWise.__init__": [[111, 121], ["print", "len", "losswise.set_api_key", "losswise.Session", "losswise.Session.graph", "losswise.Session.graph", "losswise.Session.graph"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["    ", "def", "__init__", "(", "self", ",", "key", "=", "None", ",", "tag", "=", "None", ",", "epochs", "=", "300", ")", ":", "\n", "        ", "self", ".", "key", "=", "key", "\n", "print", "(", "self", ".", "key", ")", "\n", "if", "len", "(", "self", ".", "key", ")", ">", "0", ":", "\n", "            ", "losswise", ".", "set_api_key", "(", "self", ".", "key", ")", "\n", "session", "=", "losswise", ".", "Session", "(", "tag", "=", "tag", ",", "max_iter", "=", "epochs", ")", "\n", "self", ".", "error", "=", "session", ".", "graph", "(", "'Error'", ",", "kind", "=", "'min'", ",", "display_interval", "=", "1", ")", "\n", "self", ".", "loss", "=", "session", ".", "graph", "(", "'Loss'", ",", "kind", "=", "'min'", ",", "display_interval", "=", "1", ")", "\n", "self", ".", "delta", "=", "session", ".", "graph", "(", "'Delta'", ",", "kind", "=", "'min'", ",", "display_interval", "=", "1", ")", "\n", "self", ".", "session", "=", "session", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.LossWise.update": [[122, 130], ["len", "utils_func.LossWise.loss.append", "utils_func.LossWise.error.append", "utils_func.LossWise.delta.append"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "info", ",", "epoch", ",", "tag", "=", "'Train'", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "key", ")", ">", "0", ":", "\n", "            ", "self", ".", "loss", ".", "append", "(", "epoch", ",", "{", "tag", "+", "'/loss'", ":", "info", "[", "0", "]", "}", ")", "\n", "self", ".", "error", ".", "append", "(", "epoch", ",", "{", "tag", "+", "'/EPE'", ":", "info", "[", "1", "]", ",", "\n", "tag", "+", "'/RMSE'", ":", "info", "[", "2", "]", ",", "tag", "+", "'/RMSELog'", ":", "info", "[", "3", "]", ",", "\n", "tag", "+", "'/ABSR'", ":", "info", "[", "4", "]", ",", "tag", "+", "'/SQUR'", ":", "info", "[", "5", "]", "}", ")", "\n", "self", ".", "delta", ".", "append", "(", "epoch", ",", "{", "tag", "+", "'/1.25'", ":", "info", "[", "6", "]", ",", "tag", "+", "'/1.25^2'", ":", "info", "[", "7", "]", ",", "\n", "tag", "+", "'/1.25^3'", ":", "info", "[", "8", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.LossWise.done": [[131, 133], ["utils_func.LossWise.session.done"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.LossWise1.done"], ["", "", "def", "done", "(", "self", ")", ":", "\n", "        ", "self", ".", "session", ".", "done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.LossWise1.__init__": [[135, 145], ["print", "len", "losswise.set_api_key", "losswise.Session", "losswise.Session.graph", "losswise.Session.graph", "losswise.Session.graph"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["    ", "def", "__init__", "(", "self", ",", "key", "=", "None", ",", "tag", "=", "None", ",", "epochs", "=", "300", ")", ":", "\n", "        ", "self", ".", "key", "=", "key", "\n", "print", "(", "self", ".", "key", ")", "\n", "if", "len", "(", "self", ".", "key", ")", ">", "0", ":", "\n", "            ", "losswise", ".", "set_api_key", "(", "self", ".", "key", ")", "\n", "session", "=", "losswise", ".", "Session", "(", "tag", "=", "tag", ",", "max_iter", "=", "epochs", ")", "\n", "self", ".", "error", "=", "session", ".", "graph", "(", "'Error'", ",", "kind", "=", "'min'", ",", "display_interval", "=", "1", ")", "\n", "self", ".", "loss_total", "=", "session", ".", "graph", "(", "'Loss'", ",", "kind", "=", "'min'", ",", "display_interval", "=", "1", ")", "\n", "self", ".", "delta", "=", "session", ".", "graph", "(", "'Delta'", ",", "kind", "=", "'min'", ",", "display_interval", "=", "1", ")", "\n", "self", ".", "session", "=", "session", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.LossWise1.update": [[146, 153], ["len", "utils_func.LossWise1.loss_total.append", "utils_func.LossWise1.error.append", "utils_func.LossWise1.delta.append"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "info", ",", "epoch", ",", "tag", "=", "'Train'", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "key", ")", ">", "0", ":", "\n", "            ", "self", ".", "loss_total", ".", "append", "(", "epoch", ",", "{", "tag", "+", "'/loss_gt'", ":", "info", "[", "0", "]", ",", "tag", "+", "'/loss_pseudo'", ":", "info", "[", "1", "]", ",", "tag", "+", "'/loss_total'", ":", "info", "[", "2", "]", "}", ")", "\n", "self", ".", "error", ".", "append", "(", "epoch", ",", "{", "tag", "+", "'/RMSE'", ":", "info", "[", "3", "]", ",", "tag", "+", "'/RMSELog'", ":", "info", "[", "4", "]", ",", "\n", "tag", "+", "'/ABSR'", ":", "info", "[", "5", "]", ",", "tag", "+", "'/SQUR'", ":", "info", "[", "6", "]", "}", ")", "\n", "self", ".", "delta", ".", "append", "(", "epoch", ",", "{", "tag", "+", "'/1.25'", ":", "info", "[", "7", "]", ",", "tag", "+", "'/1.25^2'", ":", "info", "[", "8", "]", ",", "\n", "tag", "+", "'/1.25^3'", ":", "info", "[", "9", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.LossWise1.done": [[154, 156], ["utils_func.LossWise1.session.done"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.LossWise1.done"], ["", "", "def", "done", "(", "self", ")", ":", "\n", "        ", "self", ".", "session", ".", "done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.__init__": [[158, 169], ["utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter", "utils_func.AverageMeter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "RMSELIs", "=", "AverageMeter", "(", ")", "\n", "self", ".", "RMSELGs", "=", "AverageMeter", "(", ")", "\n", "self", ".", "ABSRs", "=", "AverageMeter", "(", ")", "\n", "self", ".", "SQRs", "=", "AverageMeter", "(", ")", "\n", "self", ".", "DELTA", "=", "AverageMeter", "(", ")", "\n", "self", ".", "DELTASQ", "=", "AverageMeter", "(", ")", "\n", "self", ".", "DELTACU", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_gt", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_pseudo", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_total", "=", "AverageMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update": [[170, 181], ["utils_func.Metric1.losses_gt.update", "utils_func.Metric1.losses_pseudo.update", "utils_func.Metric1.losses_total.update", "utils_func.Metric1.RMSELIs.update", "utils_func.Metric1.RMSELGs.update", "utils_func.Metric1.ABSRs.update", "utils_func.Metric1.SQRs.update", "utils_func.Metric1.DELTA.update", "utils_func.Metric1.DELTASQ.update", "utils_func.Metric1.DELTACU.update"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update"], ["", "def", "update", "(", "self", ",", "loss_gt", ",", "loss_pseudo", ",", "loss_total", ",", "RMSE_Linear", ",", "RMSE_Log", ",", "abs_relative", ",", "sq_relative", ",", "delta", ",", "delta_sq", ",", "delta_cu", ")", ":", "\n", "        ", "self", ".", "losses_gt", ".", "update", "(", "loss_gt", ")", "\n", "self", ".", "losses_pseudo", ".", "update", "(", "loss_pseudo", ")", "\n", "self", ".", "losses_total", ".", "update", "(", "loss_total", ")", "\n", "self", ".", "RMSELIs", ".", "update", "(", "RMSE_Linear", ")", "\n", "self", ".", "RMSELGs", ".", "update", "(", "RMSE_Log", ")", "\n", "self", ".", "ABSRs", ".", "update", "(", "abs_relative", ")", "\n", "self", ".", "SQRs", ".", "update", "(", "sq_relative", ")", "\n", "self", ".", "DELTA", ".", "update", "(", "delta", ")", "\n", "self", ".", "DELTASQ", ".", "update", "(", "delta_sq", ")", "\n", "self", ".", "DELTACU", ".", "update", "(", "delta_cu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.get_info": [[182, 185], ["None"], "methods", ["None"], ["", "def", "get_info", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "losses_gt", ".", "avg", ",", "self", ".", "losses_pseudo", ".", "avg", ",", "self", ".", "losses_total", ".", "avg", ",", "self", ".", "RMSELIs", ".", "avg", ",", "self", ".", "RMSELGs", ".", "avg", ",", "self", ".", "ABSRs", ".", "avg", ",", "self", ".", "SQRs", ".", "avg", ",", "self", ".", "DELTA", ".", "avg", ",", "\n", "self", ".", "DELTASQ", ".", "avg", ",", "self", ".", "DELTACU", ".", "avg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.calculate": [[186, 199], ["utils_func.Metric1.update", "torch.abs", "torch.log", "torch.log", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.update"], ["", "def", "calculate", "(", "self", ",", "depth", ",", "predict", ",", "loss_gt", "=", "0", ",", "loss_psuedo", "=", "0", ",", "loss_total", "=", "0", ")", ":", "\n", "# only consider 1~80 meters", "\n", "        ", "mask", "=", "(", "depth", ">=", "1", ")", "*", "(", "depth", "<=", "80", ")", "\n", "RMSE_Linear", "=", "(", "(", "(", "(", "predict", "[", "mask", "]", "-", "depth", "[", "mask", "]", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "**", "0.5", ")", ".", "cpu", "(", ")", ".", "data", "\n", "RMSE_Log", "=", "(", "(", "(", "(", "torch", ".", "log", "(", "predict", "[", "mask", "]", ")", "-", "torch", ".", "log", "(", "depth", "[", "mask", "]", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "**", "0.5", ")", ".", "cpu", "(", ")", ".", "data", "\n", "abs_relative", "=", "(", "torch", ".", "abs", "(", "predict", "[", "mask", "]", "-", "depth", "[", "mask", "]", ")", "/", "depth", "[", "mask", "]", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "sq_relative", "=", "(", "(", "predict", "[", "mask", "]", "-", "depth", "[", "mask", "]", ")", "**", "2", "/", "depth", "[", "mask", "]", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "delta", "=", "(", "torch", ".", "max", "(", "predict", "[", "mask", "]", "/", "depth", "[", "mask", "]", ",", "depth", "[", "mask", "]", "/", "predict", "[", "mask", "]", ")", "<", "1.25", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "delta_sq", "=", "(", "torch", ".", "max", "(", "predict", "[", "mask", "]", "/", "depth", "[", "mask", "]", ",", "\n", "depth", "[", "mask", "]", "/", "predict", "[", "mask", "]", ")", "<", "1.25", "**", "2", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "delta_cu", "=", "(", "torch", ".", "max", "(", "predict", "[", "mask", "]", "/", "depth", "[", "mask", "]", ",", "\n", "depth", "[", "mask", "]", "/", "predict", "[", "mask", "]", ")", "<", "1.25", "**", "3", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "self", ".", "update", "(", "loss_gt", ",", "loss_psuedo", ",", "loss_total", ",", "RMSE_Linear", ",", "RMSE_Log", ",", "abs_relative", ",", "sq_relative", ",", "delta", ",", "delta_sq", ",", "delta_cu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.tensorboard": [[200, 208], ["writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar"], "methods", ["None"], ["", "def", "tensorboard", "(", "self", ",", "writer", ",", "epoch", ",", "token", "=", "'train'", ")", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "token", "+", "'/RMSELIs'", ",", "self", ".", "RMSELIs", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/RMSELGs'", ",", "self", ".", "RMSELGs", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/ABSRs'", ",", "self", ".", "ABSRs", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/SQRs'", ",", "self", ".", "SQRs", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/DELTA'", ",", "self", ".", "DELTA", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/DELTASQ'", ",", "self", ".", "DELTASQ", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "token", "+", "'/DELTACU'", ",", "self", ".", "DELTACU", ".", "avg", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print": [[209, 212], ["utils_func.Metric1.get_info"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.get_info"], ["", "def", "print", "(", "self", ",", "iter", ",", "token", ")", ":", "\n", "        ", "string", "=", "'{}:{}\\tL {:.3f} {:.3f} {:.3f} RLI {:.3f} RLO {:.3f} ABS {:.3f} SQ {:.3f} DEL {:.3f} DELQ {:.3f} DELC {:.3f}'", ".", "format", "(", "token", ",", "iter", ",", "*", "self", ".", "get_info", "(", ")", ")", "\n", "return", "string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTI_submission_loader.SubmiteDataset.__init__": [[46, 75], ["sorted", "torchvision.Normalize", "torchvision.Compose", "open", "x.strip", "torchvision.ToTensor", "f.readlines", "len", "x.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filepath", ",", "split", ",", "dynamic_bs", "=", "False", ",", "kitti2015", "=", "False", ")", ":", "\n", "        ", "self", ".", "dynamic_bs", "=", "dynamic_bs", "\n", "left_fold", "=", "'image_2/'", "\n", "right_fold", "=", "'image_3/'", "\n", "calib_fold", "=", "'calib/'", "\n", "with", "open", "(", "split", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "image", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "", "image", "=", "sorted", "(", "image", ")", "\n", "\n", "if", "kitti2015", ":", "\n", "            ", "self", ".", "left_test", "=", "[", "filepath", "+", "'/'", "+", "left_fold", "+", "\n", "img", "+", "'_10.png'", "for", "img", "in", "image", "]", "\n", "self", ".", "right_test", "=", "[", "filepath", "+", "'/'", "+", "\n", "right_fold", "+", "img", "+", "'_10.png'", "for", "img", "in", "image", "]", "\n", "self", ".", "calib_test", "=", "[", "filepath", "+", "'/'", "+", "\n", "calib_fold", "+", "img", "+", "'.txt'", "for", "img", "in", "image", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "left_test", "=", "[", "filepath", "+", "'/'", "+", "\n", "left_fold", "+", "img", "+", "'.png'", "for", "img", "in", "image", "]", "\n", "self", ".", "right_test", "=", "[", "filepath", "+", "'/'", "+", "\n", "right_fold", "+", "img", "+", "'.png'", "for", "img", "in", "image", "]", "\n", "self", ".", "calib_test", "=", "[", "filepath", "+", "'/'", "+", "\n", "calib_fold", "+", "img", "+", "'.txt'", "for", "img", "in", "image", "]", "\n", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "trans", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTI_submission_loader.SubmiteDataset.__getitem__": [[77, 99], ["KITTI_submission_loader.read_calib_file", "PIL.open().convert", "PIL.open().convert", "torch.pad", "torch.pad", "KITTI_submission_loader.SubmiteDataset.trans", "KITTI_submission_loader.SubmiteDataset.trans", "imgL[].float", "imgR[].float", "calib.item", "KITTI_submission_loader.dynamic_baseline", "PIL.open", "PIL.open", "KITTI_submission_loader.SubmiteDataset.left_test[].split", "numpy.reshape", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.read_calib_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.dynamic_baseline"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "left_img", "=", "self", ".", "left_test", "[", "item", "]", "\n", "right_img", "=", "self", ".", "right_test", "[", "item", "]", "\n", "calib_info", "=", "read_calib_file", "(", "self", ".", "calib_test", "[", "item", "]", ")", "\n", "if", "self", ".", "dynamic_bs", ":", "\n", "            ", "calib", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "[", "\n", "0", ",", "0", "]", "*", "dynamic_baseline", "(", "calib_info", ")", "\n", "", "else", ":", "\n", "            ", "calib", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "[", "0", ",", "0", "]", "*", "0.54", "\n", "", "imgL", "=", "Image", ".", "open", "(", "left_img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "imgR", "=", "Image", ".", "open", "(", "right_img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "imgL", "=", "self", ".", "trans", "(", "imgL", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "imgR", "=", "self", ".", "trans", "(", "imgR", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "# pad to (384, 1248)", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "imgL", ".", "shape", "\n", "top_pad", "=", "384", "-", "H", "\n", "right_pad", "=", "1248", "-", "W", "\n", "imgL", "=", "F", ".", "pad", "(", "imgL", ",", "(", "0", ",", "right_pad", ",", "top_pad", ",", "0", ")", ",", "\"constant\"", ",", "0", ")", "\n", "imgR", "=", "F", ".", "pad", "(", "imgR", ",", "(", "0", ",", "right_pad", ",", "top_pad", ",", "0", ")", ",", "\"constant\"", ",", "0", ")", "\n", "filename", "=", "self", ".", "left_test", "[", "item", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "\n", "return", "imgL", "[", "0", "]", ".", "float", "(", ")", ",", "imgR", "[", "0", "]", ".", "float", "(", ")", ",", "calib", ".", "item", "(", ")", ",", "H", ",", "W", ",", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTI_submission_loader.SubmiteDataset.__len__": [[100, 102], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "left_test", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTI_submission_loader.read_calib_file": [[8, 22], ["open", "f.readlines", "line.rstrip.rstrip", "line.rstrip.split", "len", "numpy.array", "float", "value.split"], "function", ["None"], ["def", "read_calib_file", "(", "filepath", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "try", ":", "\n", "                ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "value", ".", "split", "(", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTI_submission_loader.dataloader": [[24, 36], ["open", "x.strip", "f.readlines", "len", "x.strip"], "function", ["None"], ["", "def", "dataloader", "(", "filepath", ",", "split", ")", ":", "\n", "    ", "left_fold", "=", "'image_2/'", "\n", "right_fold", "=", "'image_3/'", "\n", "calib_fold", "=", "'calib/'", "\n", "with", "open", "(", "split", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "image", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "\n", "", "left_test", "=", "[", "filepath", "+", "left_fold", "+", "img", "+", "'.png'", "for", "img", "in", "image", "]", "\n", "right_test", "=", "[", "filepath", "+", "right_fold", "+", "img", "+", "'.png'", "for", "img", "in", "image", "]", "\n", "calib_test", "=", "[", "filepath", "+", "calib_fold", "+", "img", "+", "'.txt'", "for", "img", "in", "image", "]", "\n", "\n", "return", "left_test", ",", "right_test", ",", "calib_test", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTI_submission_loader.dynamic_baseline": [[38, 43], ["numpy.reshape", "numpy.reshape"], "function", ["None"], ["", "def", "dynamic_baseline", "(", "calib_info", ")", ":", "\n", "    ", "P3", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P3'", "]", ",", "[", "3", ",", "4", "]", ")", "\n", "P", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "\n", "baseline", "=", "P3", "[", "0", ",", "3", "]", "/", "(", "-", "P3", "[", "0", ",", "0", "]", ")", "-", "P", "[", "0", ",", "3", "]", "/", "(", "-", "P", "[", "0", ",", "0", "]", ")", "\n", "return", "baseline", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader3D_object.is_image_file": [[7, 9], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader3D_object.dataloader": [[11, 46], ["open", "open", "x.strip", "x.strip", "f.readlines", "f.readlines", "len", "len", "x.strip", "x.strip"], "function", ["None"], ["", "def", "dataloader", "(", "filepath", ",", "train_file", ",", "val_file", ",", "kitti2015", "=", "False", ")", ":", "\n", "    ", "left_fold", "=", "'image_2/'", "\n", "right_fold", "=", "'image_3/'", "\n", "lidar", "=", "'velodyne/'", "\n", "object_3d", "=", "'label_2/'", "\n", "\n", "calib", "=", "'calib/'", "\n", "\n", "with", "open", "(", "train_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "train_idx", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "", "with", "open", "(", "val_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "val_idx", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "\n", "", "left_train", "=", "[", "filepath", "+", "'/'", "+", "left_fold", "+", "\n", "img", "+", "'.png'", "for", "img", "in", "train_idx", "]", "\n", "right_train", "=", "[", "filepath", "+", "'/'", "+", "right_fold", "+", "\n", "img", "+", "'.png'", "for", "img", "in", "train_idx", "]", "\n", "lidar_train", "=", "[", "filepath", "+", "'/'", "+", "lidar", "+", "\n", "img", "+", "'.npy'", "for", "img", "in", "train_idx", "]", "\n", "object3d_train", "=", "[", "filepath", "+", "'/'", "+", "object_3d", "+", "\n", "img", "+", "'.npy'", "for", "img", "in", "train_idx", "]", "\n", "calib_train", "=", "[", "filepath", "+", "'/'", "+", "calib", "+", "\n", "img", "+", "'.txt'", "for", "img", "in", "train_idx", "]", "\n", "\n", "left_val", "=", "[", "filepath", "+", "'/'", "+", "left_fold", "+", "\n", "img", "+", "'.png'", "for", "img", "in", "val_idx", "]", "\n", "right_val", "=", "[", "filepath", "+", "'/'", "+", "right_fold", "+", "\n", "img", "+", "'.png'", "for", "img", "in", "val_idx", "]", "\n", "lidar_val", "=", "[", "filepath", "+", "'/'", "+", "lidar", "+", "\n", "img", "+", "'.npy'", "for", "img", "in", "val_idx", "]", "\n", "object3d_val", "=", "[", "filepath", "+", "'/'", "+", "object_3d", "+", "\n", "img", "+", "'.npy'", "for", "img", "in", "val_idx", "]", "\n", "calib_val", "=", "[", "filepath", "+", "'/'", "+", "calib", "+", "img", "+", "'.txt'", "for", "img", "in", "val_idx", "]", "\n", "\n", "return", "[", "left_train", ",", "right_train", ",", "lidar_train", ",", "object3d_train", ",", "calib_train", "]", ",", "[", "left_val", ",", "right_val", ",", "lidar_val", ",", "object3d_val", ",", "calib_val", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.readpfm.readPFM": [[6, 43], ["open", "open.readline().rstrip", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "open.close", "open.readline().decode", "map", "Exception", "open.readline().rstrip", "open.readline", "Exception", "re.match.groups", "open.readline", "open.readline"], "function", ["None"], ["def", "readPFM", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", "==", "b'PF'", ":", "\n", "        ", "color", "=", "True", "\n", "", "elif", "header", "==", "b'Pf'", ":", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "file", ".", "readline", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "if", "dim_match", ":", "\n", "        ", "width", ",", "height", "=", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "        ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "        ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "file", ".", "close", "(", ")", "\n", "return", "data", ",", "scale", "\n", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader3D.is_image_file": [[4, 6], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader3D.dataloader": [[8, 45], ["open", "open", "x.strip", "x.strip", "f.readlines", "f.readlines", "len", "len", "x.strip", "x.strip"], "function", ["None"], ["", "def", "dataloader", "(", "filepath", ",", "train_file", ",", "val_file", ",", "kitti2015", "=", "False", ")", ":", "\n", "    ", "left_fold", "=", "\"image_2/\"", "\n", "right_fold", "=", "\"image_3/\"", "\n", "if", "kitti2015", ":", "\n", "        ", "depth_L", "=", "\"disp_occ_0/\"", "\n", "", "else", ":", "\n", "        ", "depth_L", "=", "\"depth_map/\"", "\n", "", "calib", "=", "\"calib/\"", "\n", "\n", "with", "open", "(", "train_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "train_idx", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "", "with", "open", "(", "val_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "val_idx", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "", "if", "kitti2015", ":", "\n", "        ", "left_train", "=", "[", "filepath", "+", "\"/\"", "+", "left_fold", "+", "img", "+", "\"_10.png\"", "for", "img", "in", "train_idx", "]", "\n", "right_train", "=", "[", "filepath", "+", "\"/\"", "+", "right_fold", "+", "img", "+", "\"_10.png\"", "for", "img", "in", "train_idx", "]", "\n", "depth_train", "=", "[", "filepath", "+", "\"/\"", "+", "depth_L", "+", "img", "+", "\"_10.png\"", "for", "img", "in", "train_idx", "]", "\n", "calib_train", "=", "[", "filepath", "+", "\"/\"", "+", "calib", "+", "img", "+", "\".txt\"", "for", "img", "in", "train_idx", "]", "\n", "\n", "left_val", "=", "[", "filepath", "+", "\"/\"", "+", "left_fold", "+", "img", "+", "\"_10.png\"", "for", "img", "in", "val_idx", "]", "\n", "right_val", "=", "[", "filepath", "+", "\"/\"", "+", "right_fold", "+", "img", "+", "\"_10.png\"", "for", "img", "in", "val_idx", "]", "\n", "depth_val", "=", "[", "filepath", "+", "\"/\"", "+", "depth_L", "+", "img", "+", "\"_10.png\"", "for", "img", "in", "val_idx", "]", "\n", "calib_val", "=", "[", "filepath", "+", "\"/\"", "+", "calib", "+", "img", "+", "\".txt\"", "for", "img", "in", "val_idx", "]", "\n", "", "else", ":", "\n", "        ", "left_train", "=", "[", "filepath", "+", "\"/\"", "+", "left_fold", "+", "img", "+", "\".png\"", "for", "img", "in", "train_idx", "]", "\n", "right_train", "=", "[", "filepath", "+", "\"/\"", "+", "right_fold", "+", "img", "+", "\".png\"", "for", "img", "in", "train_idx", "]", "\n", "depth_train", "=", "[", "filepath", "+", "\"/\"", "+", "depth_L", "+", "img", "+", "\".npy\"", "for", "img", "in", "train_idx", "]", "\n", "calib_train", "=", "[", "filepath", "+", "\"/\"", "+", "calib", "+", "img", "+", "\".txt\"", "for", "img", "in", "train_idx", "]", "\n", "\n", "left_val", "=", "[", "filepath", "+", "\"/\"", "+", "left_fold", "+", "img", "+", "\".png\"", "for", "img", "in", "val_idx", "]", "\n", "right_val", "=", "[", "filepath", "+", "\"/\"", "+", "right_fold", "+", "img", "+", "\".png\"", "for", "img", "in", "val_idx", "]", "\n", "depth_val", "=", "[", "filepath", "+", "\"/\"", "+", "depth_L", "+", "img", "+", "\".npy\"", "for", "img", "in", "val_idx", "]", "\n", "calib_val", "=", "[", "filepath", "+", "\"/\"", "+", "calib", "+", "img", "+", "\".txt\"", "for", "img", "in", "val_idx", "]", "\n", "\n", "", "return", "(", "\n", "[", "left_train", ",", "right_train", ",", "depth_train", ",", "calib_train", "]", ",", "\n", "[", "left_val", ",", "right_val", ",", "depth_val", ",", "calib_val", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.SceneFlowLoader.myImageFloder.__init__": [[27, 42], ["torchvision.Normalize", "torchvision.Compose", "torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "training", ",", "calib", "=", "1417.", ",", "loader", "=", "default_loader", ",", "dploader", "=", "disparity_loader", ")", ":", "\n", "        ", "left", ",", "right", ",", "left_disparity", ",", "=", "data", "\n", "self", ".", "left", "=", "left", "\n", "self", ".", "right", "=", "right", "\n", "self", ".", "disp_L", "=", "left_disparity", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "dploader", "=", "dploader", "\n", "self", ".", "training", "=", "training", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "self", ".", "calib", "=", "calib", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.SceneFlowLoader.myImageFloder.__getitem__": [[43, 88], ["SceneFlowLoader.myImageFloder.loader", "SceneFlowLoader.myImageFloder.loader", "SceneFlowLoader.myImageFloder.dploader", "numpy.ascontiguousarray", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.clip", "random.randint", "random.randint", "SceneFlowLoader.myImageFloder.crop", "SceneFlowLoader.myImageFloder.crop", "SceneFlowLoader.myImageFloder.transform", "SceneFlowLoader.myImageFloder.transform", "SceneFlowLoader.myImageFloder.crop", "SceneFlowLoader.myImageFloder.crop", "SceneFlowLoader.myImageFloder.transform", "SceneFlowLoader.myImageFloder.transform", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "SceneFlowLoader.myImageFloder.float", "SceneFlowLoader.myImageFloder.float", "torch.from_numpy.float", "torch.from_numpy.float", "torch.from_numpy.float", "float"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "left", "=", "self", ".", "left", "[", "index", "]", "\n", "right", "=", "self", ".", "right", "[", "index", "]", "\n", "disp_L", "=", "self", ".", "disp_L", "[", "index", "]", "\n", "\n", "left_img", "=", "self", ".", "loader", "(", "left", ")", "\n", "right_img", "=", "self", ".", "loader", "(", "right", ")", "\n", "dataL", ",", "scaleL", "=", "self", ".", "dploader", "(", "disp_L", ")", "\n", "dataL", "=", "np", ".", "ascontiguousarray", "(", "dataL", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "'15mm'", "in", "left", ":", "\n", "            ", "calib", "=", "self", ".", "calib", "/", "2.33", "*", "0.54", "\n", "", "else", ":", "\n", "            ", "calib", "=", "self", ".", "calib", "*", "0.54", "\n", "\n", "", "mask", "=", "dataL", ">=", "1.", "\n", "dataL", "[", "1", "-", "mask", "]", "=", "0", "\n", "dataL", "[", "mask", "]", "=", "calib", "/", "np", ".", "clip", "(", "dataL", "[", "mask", "]", ",", "1.", ",", "None", ")", "\n", "dataL", "=", "torch", ".", "from_numpy", "(", "dataL", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "th", ",", "tw", "=", "256", ",", "512", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n", "dataL", "=", "dataL", "[", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "\n", "left_img", "=", "self", ".", "transform", "(", "left_img", ")", "\n", "right_img", "=", "self", ".", "transform", "(", "right_img", ")", "\n", "\n", "", "else", ":", "\n", "            ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "w", "-", "960", ",", "h", "-", "544", ",", "w", ",", "h", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "w", "-", "960", ",", "h", "-", "544", ",", "w", ",", "h", ")", ")", "\n", "left_img", "=", "self", ".", "transform", "(", "left_img", ")", "\n", "right_img", "=", "self", ".", "transform", "(", "right_img", ")", "\n", "dataL_pad", "=", "torch", ".", "zeros", "(", "(", "dataL", ".", "shape", "[", "0", "]", "+", "4", ",", "dataL", ".", "shape", "[", "1", "]", ")", ")", "\n", "dataL_pad", "[", "4", ":", ",", ":", "]", "=", "dataL", "\n", "dataL", "=", "dataL_pad", "\n", "\n", "", "return", "left_img", ".", "float", "(", ")", ",", "right_img", ".", "float", "(", ")", ",", "dataL", ".", "float", "(", ")", ",", "float", "(", "calib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.SceneFlowLoader.myImageFloder.__len__": [[89, 91], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "left", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.SceneFlowLoader.is_image_file": [[16, 18], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.SceneFlowLoader.default_loader": [[19, 21], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.SceneFlowLoader.disparity_loader": [[22, 24], ["readpfm.readPFM"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.readpfm.readPFM"], ["", "def", "disparity_loader", "(", "path", ")", ":", "\n", "    ", "return", "rp", ".", "readPFM", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.listflowfile.is_image_file": [[10, 12], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.listflowfile.dataloader": [[14, 101], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.isdir", "os.path.isdir", "listflowfile.is_image_file", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "img.find", "dsp.find", "listflowfile.is_image_file", "listflowfile.is_image_file", "listflowfile.is_image_file", "os.listdir", "os.listdir", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "listflowfile.is_image_file", "listflowfile.is_image_file", "all_left_img.append", "all_left_disp.append", "all_right_img.append", "listflowfile.is_image_file", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "all_left_img.append", "all_left_disp.append", "all_right_img.append", "test_left_img.append", "test_left_disp.append", "test_right_img.append", "listflowfile.is_image_file", "all_left_img.append", "all_left_disp.append", "all_right_img.append", "im.split", "im.split", "im.split", "im.split", "im.split", "im.split", "im.split", "im.split"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file"], ["", "def", "dataloader", "(", "filepath", ")", ":", "\n", "    ", "filepath", "+=", "'/'", "\n", "classes", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "filepath", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "filepath", ",", "d", ")", ")", "]", "\n", "image", "=", "[", "img", "for", "img", "in", "classes", "if", "img", ".", "find", "(", "'frames_cleanpass'", ")", ">", "-", "1", "]", "\n", "disp", "=", "[", "dsp", "for", "dsp", "in", "classes", "if", "dsp", ".", "find", "(", "'disparity'", ")", ">", "-", "1", "]", "\n", "\n", "monkaa_path", "=", "filepath", "+", "[", "x", "for", "x", "in", "image", "if", "'monkaa'", "in", "x", "]", "[", "0", "]", "\n", "monkaa_disp", "=", "filepath", "+", "[", "x", "for", "x", "in", "disp", "if", "'monkaa'", "in", "x", "]", "[", "0", "]", "\n", "\n", "monkaa_dir", "=", "os", ".", "listdir", "(", "monkaa_path", ")", "\n", "\n", "all_left_img", "=", "[", "]", "\n", "all_right_img", "=", "[", "]", "\n", "all_left_disp", "=", "[", "]", "\n", "test_left_img", "=", "[", "]", "\n", "test_right_img", "=", "[", "]", "\n", "test_left_disp", "=", "[", "]", "\n", "\n", "for", "dd", "in", "monkaa_dir", ":", "\n", "        ", "for", "im", "in", "os", ".", "listdir", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/left/'", ")", ":", "\n", "            ", "if", "is_image_file", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/left/'", "+", "im", ")", ":", "\n", "                ", "if", "is_image_file", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/right/'", "+", "im", ")", ":", "\n", "                    ", "if", "os", ".", "path", ".", "isfile", "(", "monkaa_disp", "+", "'/'", "+", "dd", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", ":", "\n", "                        ", "all_left_img", ".", "append", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/left/'", "+", "im", ")", "\n", "all_left_disp", ".", "append", "(", "monkaa_disp", "+", "'/'", "+", "dd", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", "\n", "all_right_img", ".", "append", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/right/'", "+", "im", ")", "\n", "\n", "", "", "", "", "", "flying_path", "=", "filepath", "+", "[", "x", "for", "x", "in", "image", "if", "x", "==", "'frames_cleanpass'", "]", "[", "0", "]", "\n", "flying_disp", "=", "filepath", "+", "[", "x", "for", "x", "in", "disp", "if", "x", "==", "'frames_disparity'", "]", "[", "0", "]", "\n", "flying_dir", "=", "flying_path", "+", "'/TRAIN/'", "\n", "subdir", "=", "[", "'A'", ",", "'B'", ",", "'C'", "]", "\n", "\n", "for", "ss", "in", "subdir", ":", "\n", "        ", "flying", "=", "os", ".", "listdir", "(", "flying_dir", "+", "ss", ")", "\n", "\n", "for", "ff", "in", "flying", ":", "\n", "            ", "imm_l", "=", "os", ".", "listdir", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", ")", "\n", "for", "im", "in", "imm_l", ":", "\n", "                ", "if", "is_image_file", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ")", ":", "\n", "                    ", "if", "os", ".", "path", ".", "isfile", "(", "flying_disp", "+", "'/TRAIN/'", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", ":", "\n", "                        ", "if", "is_image_file", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/right/'", "+", "im", ")", ":", "\n", "                            ", "all_left_img", ".", "append", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ")", "\n", "all_left_disp", ".", "append", "(", "\n", "flying_disp", "+", "'/TRAIN/'", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", "\n", "all_right_img", ".", "append", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/right/'", "+", "im", ")", "\n", "\n", "", "", "", "", "", "", "flying_dir", "=", "flying_path", "+", "'/TEST/'", "\n", "\n", "subdir", "=", "[", "'A'", ",", "'B'", ",", "'C'", "]", "\n", "\n", "for", "ss", "in", "subdir", ":", "\n", "        ", "flying", "=", "os", ".", "listdir", "(", "flying_dir", "+", "ss", ")", "\n", "\n", "for", "ff", "in", "flying", ":", "\n", "            ", "imm_l", "=", "os", ".", "listdir", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", ")", "\n", "for", "im", "in", "imm_l", ":", "\n", "                ", "if", "is_image_file", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ")", ":", "\n", "                    ", "if", "is_image_file", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/right/'", "+", "im", ")", ":", "\n", "                        ", "if", "os", ".", "path", ".", "isfile", "(", "\n", "flying_disp", "+", "'/TEST/'", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", ":", "\n", "                            ", "test_left_img", ".", "append", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ")", "\n", "test_left_disp", ".", "append", "(", "\n", "flying_disp", "+", "'/TEST/'", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", "\n", "test_right_img", ".", "append", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/right/'", "+", "im", ")", "\n", "\n", "", "", "", "", "", "", "driving_dir", "=", "filepath", "+", "[", "x", "for", "x", "in", "image", "if", "'driving'", "in", "x", "]", "[", "0", "]", "+", "'/'", "\n", "driving_disp", "=", "filepath", "+", "[", "x", "for", "x", "in", "disp", "if", "'driving'", "in", "x", "]", "[", "0", "]", "\n", "\n", "subdir1", "=", "[", "'35mm_focallength'", ",", "'15mm_focallength'", "]", "\n", "subdir2", "=", "[", "'scene_backwards'", ",", "'scene_forwards'", "]", "\n", "subdir3", "=", "[", "'fast'", ",", "'slow'", "]", "\n", "\n", "for", "i", "in", "subdir1", ":", "\n", "        ", "for", "j", "in", "subdir2", ":", "\n", "            ", "for", "k", "in", "subdir3", ":", "\n", "                ", "imm_l", "=", "os", ".", "listdir", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/left/'", ")", "\n", "for", "im", "in", "imm_l", ":", "\n", "                    ", "if", "is_image_file", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/left/'", "+", "im", ")", ":", "\n", "                        ", "if", "os", ".", "path", ".", "isfile", "(", "\n", "driving_disp", "+", "'/'", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", ":", "\n", "                            ", "if", "is_image_file", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/right/'", "+", "im", ")", ":", "\n", "                                ", "all_left_img", ".", "append", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/left/'", "+", "im", ")", "\n", "all_left_disp", ".", "append", "(", "\n", "driving_disp", "+", "'/'", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", "\n", "all_right_img", ".", "append", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/right/'", "+", "im", ")", "\n", "\n", "", "", "", "", "", "", "", "return", "[", "all_left_img", ",", "all_right_img", ",", "all_left_disp", "]", ",", "[", "test_left_img", ",", "test_right_img", ",", "test_left_disp", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d_object.myImageFloder.__init__": [[144, 161], ["torchvision.Normalize", "torchvision.Compose", "torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "training", ",", "kitti2015", "=", "False", ",", "dynamic_bs", "=", "False", ",", "loader", "=", "default_loader", ",", "dploader", "=", "disparity_loader", ")", ":", "\n", "        ", "left", ",", "right", ",", "lidar", ",", "object3d", ",", "left_calib", "=", "data", "\n", "self", ".", "left", "=", "left", "\n", "self", ".", "dynamic_bs", "=", "dynamic_bs", "\n", "self", ".", "right", "=", "right", "\n", "self", ".", "lidar", "=", "lidar", "\n", "self", ".", "object_3d", "=", "object3d", "\n", "self", ".", "calib", "=", "left_calib", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "kitti2015", "=", "kitti2015", "\n", "self", ".", "dploader", "=", "dploader", "\n", "self", ".", "training", "=", "training", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d_object.myImageFloder.__getitem__": [[163, 222], ["KITTILoader_dataset3d_object.read_calib_file", "KITTILoader_dataset3d_object.filtrate_objects", "object3d_utils.objs_to_boxes3d", "KITTILoader_dataset3d_object.myImageFloder.loader", "KITTILoader_dataset3d_object.myImageFloder.loader", "KITTILoader_dataset3d_object.myImageFloder.reshape", "KITTILoader_dataset3d_object.generate_rpn_training_labels", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "KITTILoader_dataset3d_object.kitti2015_disparity_loader", "KITTILoader_dataset3d_object.myImageFloder.dploader", "random.randint", "random.randint", "KITTILoader_dataset3d_object.myImageFloder.crop", "KITTILoader_dataset3d_object.myImageFloder.crop", "KITTILoader_dataset3d_object.myImageFloder.transform", "KITTILoader_dataset3d_object.myImageFloder.transform", "KITTILoader_dataset3d_object.myImageFloder.crop", "KITTILoader_dataset3d_object.myImageFloder.crop", "KITTILoader_dataset3d_object.myImageFloder.transform", "KITTILoader_dataset3d_object.myImageFloder.transform", "KITTILoader_dataset3d_object.myImageFloder.float", "KITTILoader_dataset3d_object.myImageFloder.float", "KITTILoader_dataset3d_object.myImageFloder.float", "calib.item", "KITTILoader_dataset3d_object.dynamic_baseline", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.reshape", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.read_calib_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_depth_object3d.filtrate_objects", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.objs_to_boxes3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_depth_object3d.generate_rpn_training_labels", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.kitti2015_disparity_loader", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.dynamic_baseline"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "left", "=", "self", ".", "left", "[", "index", "]", "\n", "right", "=", "self", ".", "right", "[", "index", "]", "\n", "lidar", "=", "self", ".", "lidar", "[", "index", "]", "\n", "object_3d", "=", "self", ".", "object_3d", "[", "index", "]", "\n", "calib_info", "=", "read_calib_file", "(", "self", ".", "calib", "[", "index", "]", ")", "\n", "\n", "gt_obj_list", "=", "filtrate_objects", "(", "object_3d", ")", "\n", "gt_boxes3d", "=", "od_utils", ".", "objs_to_boxes3d", "(", "gt_obj_list", ")", "\n", "\n", "if", "self", ".", "dynamic_bs", ":", "\n", "            ", "calib", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "[", "\n", "0", ",", "0", "]", "*", "dynamic_baseline", "(", "calib_info", ")", "\n", "", "else", ":", "\n", "            ", "calib", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "[", "0", ",", "0", "]", "*", "0.54", "\n", "\n", "", "left_img", "=", "self", ".", "loader", "(", "left", ")", "\n", "right_img", "=", "self", ".", "loader", "(", "right", ")", "\n", "if", "self", ".", "kitti2015", ":", "\n", "            ", "dataL", "=", "kitti2015_disparity_loader", "(", "depth", ",", "calib", ")", "\n", "", "else", ":", "\n", "            ", "dataL", "=", "self", ".", "dploader", "(", "depth", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "th", ",", "tw", "=", "256", ",", "512", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n", "dataL", "=", "dataL", "[", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "\n", "left_img", "=", "self", ".", "transform", "(", "left_img", ")", "\n", "right_img", "=", "self", ".", "transform", "(", "right_img", ")", "\n", "\n", "", "else", ":", "\n", "            ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "\n", "# left_img = left_img.crop((w - 1232, h - 368, w, h))", "\n", "# right_img = right_img.crop((w - 1232, h - 368, w, h))", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "w", "-", "1200", ",", "h", "-", "352", ",", "w", ",", "h", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "w", "-", "1200", ",", "h", "-", "352", ",", "w", ",", "h", ")", ")", "\n", "w1", ",", "h1", "=", "left_img", ".", "size", "\n", "\n", "# dataL1 = dataL[h - 368:h, w - 1232:w]", "\n", "dataL", "=", "dataL", "[", "h", "-", "352", ":", "h", ",", "w", "-", "1200", ":", "w", "]", "\n", "\n", "left_img", "=", "self", ".", "transform", "(", "left_img", ")", "\n", "right_img", "=", "self", ".", "transform", "(", "right_img", ")", "\n", "\n", "", "pts_rect", "=", "dataL", ".", "reshape", "(", "-", "1", ")", "\n", "rpn_cls_label", ",", "rpn_reg_label", "=", "generate_rpn_training_labels", "(", "\n", "pts_rect", ",", "gt_boxes3d", ")", "\n", "\n", "dataL", "=", "torch", ".", "from_numpy", "(", "dataL", ")", ".", "float", "(", ")", "\n", "return", "left_img", ".", "float", "(", ")", ",", "right_img", ".", "float", "(", ")", ",", "dataL", ".", "float", "(", ")", ",", "calib", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d_object.myImageFloder.__len__": [[223, 225], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "left", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d_object.is_image_file": [[16, 18], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d_object.default_loader": [[20, 22], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d_object.disparity_loader": [[24, 26], ["numpy.load().astype", "numpy.load"], "function", ["None"], ["", "def", "disparity_loader", "(", "path", ")", ":", "\n", "    ", "return", "np", ".", "load", "(", "path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d_object.object3d_loader": [[28, 30], ["object3d_utils.get_objects_from_label"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.get_objects_from_label"], ["", "def", "object3d_loader", "(", "path", ")", ":", "\n", "    ", "return", "od_utils", ".", "get_objects_from_label", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d_object.read_calib_file": [[32, 46], ["open", "f.readlines", "line.rstrip.rstrip", "line.rstrip.split", "len", "numpy.array", "float", "value.split"], "function", ["None"], ["", "def", "read_calib_file", "(", "filepath", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "try", ":", "\n", "                ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "value", ".", "split", "(", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d_object.kitti2015_disparity_loader": [[48, 54], ["numpy.zeros_like", "numpy.array", "PIL.Image.open"], "function", ["None"], ["", "def", "kitti2015_disparity_loader", "(", "filepath", ",", "calib", ")", ":", "\n", "    ", "disp", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "filepath", ")", ")", "/", "256.", "\n", "depth", "=", "np", ".", "zeros_like", "(", "disp", ")", "\n", "mask", "=", "disp", ">", "0", "\n", "depth", "[", "mask", "]", "=", "calib", "/", "disp", "[", "mask", "]", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d_object.dynamic_baseline": [[56, 61], ["numpy.reshape", "numpy.reshape"], "function", ["None"], ["", "def", "dynamic_baseline", "(", "calib_info", ")", ":", "\n", "    ", "P3", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P3'", "]", ",", "[", "3", ",", "4", "]", ")", "\n", "P", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "\n", "baseline", "=", "P3", "[", "0", ",", "3", "]", "/", "(", "-", "P3", "[", "0", ",", "0", "]", ")", "-", "P", "[", "0", ",", "3", "]", "/", "(", "-", "P", "[", "0", ",", "0", "]", ")", "\n", "return", "baseline", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d_object.generate_rpn_training_labels": [[63, 106], ["numpy.zeros", "numpy.zeros", "object3d_utils.boxes3d_to_corners3d", "object3d_utils.enlarge_box3d", "object3d_utils.boxes3d_to_corners3d", "range", "object3d_utils.in_hull", "object3d_utils.in_hull", "numpy.logical_xor", "[].copy"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.boxes3d_to_corners3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.enlarge_box3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.boxes3d_to_corners3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.in_hull", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.in_hull"], ["", "def", "generate_rpn_training_labels", "(", "pts_rect", ",", "gt_boxes3d", ")", ":", "\n", "    ", "\"\"\"Generates Classification + Regression labels for each point\n        Input:  pts_rect: Points in rectified coords [N, 3]\n                gt_boxes_3d: 3D groud-truth boxes\n\n        Output: cls_label: Binary labels indicating foreground, shape [N, 1]\n                reg_label: Regression target labels. shape [N, 7]\n                           (Format: dx, dy, dz, ry, h, w, l)\n\n    \"\"\"", "\n", "cls_label", "=", "np", ".", "zeros", "(", "(", "pts_rect", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# dx, dy, dz, ry, h, w, l", "\n", "reg_label", "=", "np", ".", "zeros", "(", "(", "pts_rect", ".", "shape", "[", "0", "]", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_corners", "=", "od_utils", ".", "boxes3d_to_corners3d", "(", "gt_boxes3d", ",", "rotate", "=", "True", ")", "\n", "extend_gt_boxes3d", "=", "od_utils", ".", "enlarge_box3d", "(", "\n", "gt_boxes3d", ",", "extra_width", "=", "0.2", ")", "\n", "extend_gt_corners", "=", "od_utils", ".", "boxes3d_to_corners3d", "(", "\n", "extend_gt_boxes3d", ",", "rotate", "=", "True", ")", "\n", "for", "k", "in", "range", "(", "gt_boxes3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "box_corners", "=", "gt_corners", "[", "k", "]", "\n", "fg_pt_flag", "=", "od_utils", ".", "in_hull", "(", "pts_rect", ",", "box_corners", ")", "\n", "fg_pts_rect", "=", "pts_rect", "[", "fg_pt_flag", "]", "\n", "cls_label", "[", "fg_pt_flag", "]", "=", "1", "\n", "\n", "# enlarge the bbox3d, ignore nearby points", "\n", "extend_box_corners", "=", "extend_gt_corners", "[", "k", "]", "\n", "fg_enlarge_flag", "=", "od_utils", ".", "in_hull", "(", "pts_rect", ",", "extend_box_corners", ")", "\n", "ignore_flag", "=", "np", ".", "logical_xor", "(", "fg_pt_flag", ",", "fg_enlarge_flag", ")", "\n", "cls_label", "[", "ignore_flag", "]", "=", "-", "1", "\n", "\n", "# pixel offset of object center", "\n", "center3d", "=", "gt_boxes3d", "[", "k", "]", "[", "0", ":", "3", "]", ".", "copy", "(", ")", "# (x, y, z)", "\n", "center3d", "[", "1", "]", "-=", "gt_boxes3d", "[", "k", "]", "[", "3", "]", "/", "2", "\n", "# Now y is the true center of 3d box", "\n", "reg_label", "[", "fg_pt_flag", ",", "0", ":", "3", "]", "=", "center3d", "-", "fg_pts_rect", "\n", "\n", "# size and angle encoding", "\n", "reg_label", "[", "fg_pt_flag", ",", "3", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "3", "]", "# h", "\n", "reg_label", "[", "fg_pt_flag", ",", "4", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "4", "]", "# w", "\n", "reg_label", "[", "fg_pt_flag", ",", "5", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "5", "]", "# l", "\n", "reg_label", "[", "fg_pt_flag", ",", "6", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "6", "]", "# ry", "\n", "\n", "", "return", "cls_label", ",", "reg_label", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d_object.filtrate_objects": [[108, 141], ["list", "valid_obj_list.append", "list.append", "list.append"], "function", ["None"], ["", "def", "filtrate_objects", "(", "obj_list", ",", "classes", "=", "'Car'", ",", "training", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Discard objects which are not in self.classes (or its similar classes)\n    :param obj_list: list\n    :return: list\n    \"\"\"", "\n", "if", "classes", "==", "'Car'", ":", "\n", "        ", "classes", "=", "(", "'Background'", ",", "'Car'", ")", "\n", "", "elif", "classes", "==", "'People'", ":", "\n", "        ", "classes", "=", "(", "'Background'", ",", "'Pedestrian'", ",", "'Cyclist'", ")", "\n", "", "elif", "classes", "==", "'Pedestrian'", ":", "\n", "        ", "self", ".", "classes", "=", "(", "'Background'", ",", "'Pedestrian'", ")", "\n", "", "elif", "classes", "==", "'Cyclist'", ":", "\n", "        ", "classes", "=", "(", "'Background'", ",", "'Cyclist'", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "\"Invalid classes: %s\"", "%", "classes", "\n", "\n", "", "type_whitelist", "=", "classes", "\n", "if", "training", ":", "\n", "        ", "type_whitelist", "=", "list", "(", "classes", ")", "\n", "if", "'Car'", "in", "classes", ":", "\n", "            ", "type_whitelist", ".", "append", "(", "'Van'", ")", "\n", "", "if", "'Pedestrian'", "in", "classes", ":", "# or 'Cyclist' in classes:", "\n", "            ", "type_whitelist", ".", "append", "(", "'Person_sitting'", ")", "\n", "\n", "", "", "valid_obj_list", "=", "[", "]", "\n", "for", "obj", "in", "obj_list", ":", "\n", "        ", "if", "obj", ".", "cls_type", "not", "in", "type_whitelist", ":", "\n", "            ", "continue", "\n", "# Maybe should also remove heavily truncated objects", "\n", "\n", "", "valid_obj_list", ".", "append", "(", "obj", ")", "\n", "", "return", "valid_obj_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d.myImageFloder.__init__": [[56, 72], ["torchvision.Normalize", "torchvision.Compose", "torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "training", ",", "kitti2015", "=", "False", ",", "dynamic_bs", "=", "False", ",", "loader", "=", "default_loader", ",", "dploader", "=", "disparity_loader", ")", ":", "\n", "        ", "left", ",", "right", ",", "left_depth", ",", "left_calib", "=", "data", "\n", "self", ".", "left", "=", "left", "\n", "self", ".", "dynamic_bs", "=", "dynamic_bs", "\n", "self", ".", "right", "=", "right", "\n", "self", ".", "depth", "=", "left_depth", "\n", "self", ".", "calib", "=", "left_calib", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "kitti2015", "=", "kitti2015", "\n", "self", ".", "dploader", "=", "dploader", "\n", "self", ".", "training", "=", "training", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d.myImageFloder.__getitem__": [[74, 123], ["KITTILoader_dataset3d.read_calib_file", "KITTILoader_dataset3d.myImageFloder.loader", "KITTILoader_dataset3d.myImageFloder.loader", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "KITTILoader_dataset3d.kitti2015_disparity_loader", "KITTILoader_dataset3d.myImageFloder.dploader", "random.randint", "random.randint", "KITTILoader_dataset3d.myImageFloder.crop", "KITTILoader_dataset3d.myImageFloder.crop", "KITTILoader_dataset3d.myImageFloder.transform", "KITTILoader_dataset3d.myImageFloder.transform", "KITTILoader_dataset3d.myImageFloder.crop", "KITTILoader_dataset3d.myImageFloder.crop", "KITTILoader_dataset3d.myImageFloder.transform", "KITTILoader_dataset3d.myImageFloder.transform", "KITTILoader_dataset3d.myImageFloder.float", "KITTILoader_dataset3d.myImageFloder.float", "KITTILoader_dataset3d.myImageFloder.float", "calib.item", "KITTILoader_dataset3d.dynamic_baseline", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.reshape", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.read_calib_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.kitti2015_disparity_loader", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.dynamic_baseline"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "left", "=", "self", ".", "left", "[", "index", "]", "\n", "right", "=", "self", ".", "right", "[", "index", "]", "\n", "depth", "=", "self", ".", "depth", "[", "index", "]", "\n", "calib_info", "=", "read_calib_file", "(", "self", ".", "calib", "[", "index", "]", ")", "\n", "if", "self", ".", "dynamic_bs", ":", "\n", "            ", "calib", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "[", "0", ",", "0", "]", "*", "dynamic_baseline", "(", "calib_info", ")", "\n", "", "else", ":", "\n", "            ", "calib", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "[", "0", ",", "0", "]", "*", "0.54", "\n", "\n", "", "left_img", "=", "self", ".", "loader", "(", "left", ")", "\n", "right_img", "=", "self", ".", "loader", "(", "right", ")", "\n", "if", "self", ".", "kitti2015", ":", "\n", "            ", "dataL", "=", "kitti2015_disparity_loader", "(", "depth", ",", "calib", ")", "\n", "", "else", ":", "\n", "            ", "dataL", "=", "self", ".", "dploader", "(", "depth", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "th", ",", "tw", "=", "256", ",", "512", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n", "dataL", "=", "dataL", "[", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "\n", "left_img", "=", "self", ".", "transform", "(", "left_img", ")", "\n", "right_img", "=", "self", ".", "transform", "(", "right_img", ")", "\n", "\n", "", "else", ":", "\n", "            ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "\n", "# left_img = left_img.crop((w - 1232, h - 368, w, h))", "\n", "# right_img = right_img.crop((w - 1232, h - 368, w, h))", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "w", "-", "1200", ",", "h", "-", "352", ",", "w", ",", "h", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "w", "-", "1200", ",", "h", "-", "352", ",", "w", ",", "h", ")", ")", "\n", "w1", ",", "h1", "=", "left_img", ".", "size", "\n", "\n", "# dataL1 = dataL[h - 368:h, w - 1232:w]", "\n", "dataL", "=", "dataL", "[", "h", "-", "352", ":", "h", ",", "w", "-", "1200", ":", "w", "]", "\n", "\n", "left_img", "=", "self", ".", "transform", "(", "left_img", ")", "\n", "right_img", "=", "self", ".", "transform", "(", "right_img", ")", "\n", "\n", "", "dataL", "=", "torch", ".", "from_numpy", "(", "dataL", ")", ".", "float", "(", ")", "\n", "return", "left_img", ".", "float", "(", ")", ",", "right_img", ".", "float", "(", ")", ",", "dataL", ".", "float", "(", ")", ",", "calib", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d.myImageFloder.__len__": [[124, 126], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "left", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d.is_image_file": [[15, 17], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d.default_loader": [[19, 21], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d.disparity_loader": [[23, 25], ["numpy.load().astype", "numpy.load"], "function", ["None"], ["", "def", "disparity_loader", "(", "path", ")", ":", "\n", "    ", "return", "np", ".", "load", "(", "path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d.read_calib_file": [[27, 40], ["open", "f.readlines", "line.rstrip.rstrip", "line.rstrip.split", "len", "numpy.array", "float", "value.split"], "function", ["None"], ["", "def", "read_calib_file", "(", "filepath", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "continue", "\n", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "try", ":", "\n", "                ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "value", ".", "split", "(", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d.kitti2015_disparity_loader": [[41, 47], ["numpy.zeros_like", "numpy.array", "PIL.Image.open"], "function", ["None"], ["", "def", "kitti2015_disparity_loader", "(", "filepath", ",", "calib", ")", ":", "\n", "    ", "disp", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "filepath", ")", ")", "/", "256.", "\n", "depth", "=", "np", ".", "zeros_like", "(", "disp", ")", "\n", "mask", "=", "disp", ">", "0", "\n", "depth", "[", "mask", "]", "=", "calib", "/", "disp", "[", "mask", "]", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.dataloader.KITTILoader_dataset3d.dynamic_baseline": [[49, 54], ["numpy.reshape", "numpy.reshape"], "function", ["None"], ["", "def", "dynamic_baseline", "(", "calib_info", ")", ":", "\n", "    ", "P3", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P3'", "]", ",", "[", "3", ",", "4", "]", ")", "\n", "P", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "\n", "baseline", "=", "P3", "[", "0", ",", "3", "]", "/", "(", "-", "P3", "[", "0", ",", "0", "]", ")", "-", "P", "[", "0", ",", "3", "]", "/", "(", "-", "P", "[", "0", ",", "0", "]", ")", "\n", "return", "baseline", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_object.kitti_object.__init__": [[27, 48], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "split", "=", "'training'", ",", "point_style", "=", "'lidar'", ")", ":", "\n", "        ", "'''root_dir contains training and testing folders'''", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "split_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "split", ")", "\n", "\n", "if", "split", "==", "'training'", ":", "\n", "            ", "self", ".", "num_samples", "=", "7481", "\n", "", "elif", "split", "==", "'testing'", ":", "\n", "            ", "self", ".", "num_samples", "=", "7518", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Unknown split: %s'", "%", "(", "split", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'image_2'", ")", "\n", "self", ".", "calib_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'calib'", ")", "\n", "if", "point_style", "==", "'lidar'", ":", "\n", "            ", "self", ".", "lidar_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'velodyne'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lidar_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "point_style", ")", "\n", "", "self", ".", "label_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'label_2'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_object.kitti_object.__len__": [[49, 51], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_object.kitti_object.get_image": [[52, 56], ["os.path.join", "kitti_util.load_image"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.load_image"], ["", "def", "get_image", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "(", "idx", "<", "self", ".", "num_samples", ")", "\n", "img_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "'%06d.png'", "%", "(", "idx", ")", ")", "\n", "return", "utils", ".", "load_image", "(", "img_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_object.kitti_object.get_lidar": [[57, 61], ["os.path.join", "kitti_util.load_velo_scan"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.load_velo_scan"], ["", "def", "get_lidar", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "(", "idx", "<", "self", ".", "num_samples", ")", "\n", "lidar_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "lidar_dir", ",", "'%06d.bin'", "%", "(", "idx", ")", ")", "\n", "return", "utils", ".", "load_velo_scan", "(", "lidar_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_object.kitti_object.get_calibration": [[62, 66], ["os.path.join", "kitti_util.Calibration"], "methods", ["None"], ["", "def", "get_calibration", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "(", "idx", "<", "self", ".", "num_samples", ")", "\n", "calib_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "calib_dir", ",", "'%06d.txt'", "%", "(", "idx", ")", ")", "\n", "return", "utils", ".", "Calibration", "(", "calib_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_object.kitti_object.get_label_objects": [[67, 71], ["os.path.join", "kitti_util.read_label"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.read_label"], ["", "def", "get_label_objects", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "(", "idx", "<", "self", ".", "num_samples", "and", "self", ".", "split", "==", "'training'", ")", "\n", "label_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "label_dir", ",", "'%06d.txt'", "%", "(", "idx", ")", ")", "\n", "return", "utils", ".", "read_label", "(", "label_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_object.kitti_object.get_depth_map": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_depth_map", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_object.kitti_object.get_top_down": [[75, 77], ["None"], "methods", ["None"], ["", "def", "get_top_down", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_object.kitti_object_video.__init__": [[80, 92], ["kitti_util.Calibration", "sorted", "sorted", "print", "print", "len", "len", "len", "os.path.join", "os.path.join", "os.listdir", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["def", "__init__", "(", "self", ",", "img_dir", ",", "lidar_dir", ",", "calib_dir", ")", ":", "\n", "        ", "self", ".", "calib", "=", "utils", ".", "Calibration", "(", "calib_dir", ",", "from_video", "=", "True", ")", "\n", "self", ".", "img_dir", "=", "img_dir", "\n", "self", ".", "lidar_dir", "=", "lidar_dir", "\n", "self", ".", "img_filenames", "=", "sorted", "(", "[", "os", ".", "path", ".", "join", "(", "img_dir", ",", "filename", ")", "for", "filename", "in", "os", ".", "listdir", "(", "img_dir", ")", "]", ")", "\n", "self", ".", "lidar_filenames", "=", "sorted", "(", "[", "os", ".", "path", ".", "join", "(", "lidar_dir", ",", "filename", ")", "for", "filename", "in", "os", ".", "listdir", "(", "lidar_dir", ")", "]", ")", "\n", "print", "(", "len", "(", "self", ".", "img_filenames", ")", ")", "\n", "print", "(", "len", "(", "self", ".", "lidar_filenames", ")", ")", "\n", "#assert(len(self.img_filenames) == len(self.lidar_filenames))", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "img_filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_object.kitti_object_video.__len__": [[93, 95], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_object.kitti_object_video.get_image": [[96, 100], ["kitti_util.load_image"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.load_image"], ["", "def", "get_image", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "(", "idx", "<", "self", ".", "num_samples", ")", "\n", "img_filename", "=", "self", ".", "img_filenames", "[", "idx", "]", "\n", "return", "utils", ".", "load_image", "(", "img_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_object.kitti_object_video.get_lidar": [[101, 105], ["kitti_util.load_velo_scan"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.load_velo_scan"], ["", "def", "get_lidar", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "(", "idx", "<", "self", ".", "num_samples", ")", "\n", "lidar_filename", "=", "self", ".", "lidar_filenames", "[", "idx", "]", "\n", "return", "utils", ".", "load_velo_scan", "(", "lidar_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_object.kitti_object_video.get_calibration": [[106, 108], ["None"], "methods", ["None"], ["", "def", "get_calibration", "(", "self", ",", "unused", ")", ":", "\n", "        ", "return", "self", ".", "calib", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_object.get_lidar_in_image_fov": [[141, 153], ["calib.project_velo_to_image"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_image"], ["", "", "def", "get_lidar_in_image_fov", "(", "pc_velo", ",", "calib", ",", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ",", "\n", "return_more", "=", "False", ",", "clip_distance", "=", "2.0", ")", ":", "\n", "    ", "''' Filter lidar points, keep those in image FOV '''", "\n", "pts_2d", "=", "calib", ".", "project_velo_to_image", "(", "pc_velo", ")", "\n", "fov_inds", "=", "(", "pts_2d", "[", ":", ",", "0", "]", "<", "xmax", ")", "&", "(", "pts_2d", "[", ":", ",", "0", "]", ">=", "xmin", ")", "&", "(", "pts_2d", "[", ":", ",", "1", "]", "<", "ymax", ")", "&", "(", "pts_2d", "[", ":", ",", "1", "]", ">=", "ymin", ")", "\n", "fov_inds", "=", "fov_inds", "&", "(", "pc_velo", "[", ":", ",", "0", "]", ">", "clip_distance", ")", "\n", "imgfov_pc_velo", "=", "pc_velo", "[", "fov_inds", ",", ":", "]", "\n", "if", "return_more", ":", "\n", "        ", "return", "imgfov_pc_velo", ",", "pts_2d", ",", "fov_inds", "\n", "", "else", ":", "\n", "        ", "return", "imgfov_pc_velo", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Object3d.__init__": [[14, 37], ["label_file_line.split", "int", "numpy.array", "float"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "label_file_line", ")", ":", "\n", "        ", "data", "=", "label_file_line", ".", "split", "(", "' '", ")", "\n", "data", "[", "1", ":", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "data", "[", "1", ":", "]", "]", "\n", "\n", "# extract label, truncation, occlusion", "\n", "self", ".", "type", "=", "data", "[", "0", "]", "# 'Car', 'Pedestrian', ...", "\n", "self", ".", "truncation", "=", "data", "[", "1", "]", "# truncated pixel ratio [0..1]", "\n", "self", ".", "occlusion", "=", "int", "(", "data", "[", "2", "]", ")", "# 0=visible, 1=partly occluded, 2=fully occluded, 3=unknown", "\n", "self", ".", "alpha", "=", "data", "[", "3", "]", "# object observation angle [-pi..pi]", "\n", "\n", "# extract 2d bounding box in 0-based coordinates", "\n", "self", ".", "xmin", "=", "data", "[", "4", "]", "# left", "\n", "self", ".", "ymin", "=", "data", "[", "5", "]", "# top", "\n", "self", ".", "xmax", "=", "data", "[", "6", "]", "# right", "\n", "self", ".", "ymax", "=", "data", "[", "7", "]", "# bottom", "\n", "self", ".", "box2d", "=", "np", ".", "array", "(", "[", "self", ".", "xmin", ",", "self", ".", "ymin", ",", "self", ".", "xmax", ",", "self", ".", "ymax", "]", ")", "\n", "\n", "# extract 3d bounding box information", "\n", "self", ".", "h", "=", "data", "[", "8", "]", "# box height", "\n", "self", ".", "w", "=", "data", "[", "9", "]", "# box width", "\n", "self", ".", "l", "=", "data", "[", "10", "]", "# box length (in meters)", "\n", "self", ".", "t", "=", "(", "data", "[", "11", "]", ",", "data", "[", "12", "]", ",", "data", "[", "13", "]", ")", "# location (x,y,z) in camera coord.", "\n", "self", ".", "ry", "=", "data", "[", "14", "]", "# yaw angle (around Y-axis in camera coordinates) [-pi..pi]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Object3d.print_object": [[38, 47], ["print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["", "def", "print_object", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Type, truncation, occlusion, alpha: %s, %d, %d, %f'", "%", "(", "self", ".", "type", ",", "self", ".", "truncation", ",", "self", ".", "occlusion", ",", "self", ".", "alpha", ")", ")", "\n", "print", "(", "'2d bbox (x0,y0,x1,y1): %f, %f, %f, %f'", "%", "(", "self", ".", "xmin", ",", "self", ".", "ymin", ",", "self", ".", "xmax", ",", "self", ".", "ymax", ")", ")", "\n", "print", "(", "'3d bbox h,w,l: %f, %f, %f'", "%", "(", "self", ".", "h", ",", "self", ".", "w", ",", "self", ".", "l", ")", ")", "\n", "print", "(", "'3d bbox location, ry: (%f, %f, %f), %f'", "%", "(", "self", ".", "t", "[", "0", "]", ",", "self", ".", "t", "[", "1", "]", ",", "self", ".", "t", "[", "2", "]", ",", "self", ".", "ry", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.__init__": [[81, 104], ["numpy.reshape", "numpy.reshape", "kitti_util.inverse_rigid_trans", "numpy.reshape", "kitti_util.Calibration.read_calib_from_video", "kitti_util.Calibration.read_calib_file"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.inverse_rigid_trans", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.read_calib_from_video", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.read_calib_file"], ["def", "__init__", "(", "self", ",", "calib_filepath", ",", "from_video", "=", "False", ")", ":", "\n", "        ", "if", "from_video", ":", "\n", "            ", "calibs", "=", "self", ".", "read_calib_from_video", "(", "calib_filepath", ")", "\n", "", "else", ":", "\n", "            ", "calibs", "=", "self", ".", "read_calib_file", "(", "calib_filepath", ")", "\n", "# Projection matrix from rect camera coord to image2 coord", "\n", "", "self", ".", "P", "=", "calibs", "[", "'P2'", "]", "\n", "self", ".", "P", "=", "np", ".", "reshape", "(", "self", ".", "P", ",", "[", "3", ",", "4", "]", ")", "\n", "# Rigid transform from Velodyne coord to reference camera coord", "\n", "self", ".", "V2C", "=", "calibs", "[", "'Tr_velo_to_cam'", "]", "\n", "self", ".", "V2C", "=", "np", ".", "reshape", "(", "self", ".", "V2C", ",", "[", "3", ",", "4", "]", ")", "\n", "self", ".", "C2V", "=", "inverse_rigid_trans", "(", "self", ".", "V2C", ")", "\n", "# Rotation from reference camera coord to rect camera coord", "\n", "self", ".", "R0", "=", "calibs", "[", "'R0_rect'", "]", "\n", "self", ".", "R0", "=", "np", ".", "reshape", "(", "self", ".", "R0", ",", "[", "3", ",", "3", "]", ")", "\n", "\n", "# Camera intrinsics and extrinsics", "\n", "self", ".", "c_u", "=", "self", ".", "P", "[", "0", ",", "2", "]", "\n", "self", ".", "c_v", "=", "self", ".", "P", "[", "1", ",", "2", "]", "\n", "self", ".", "f_u", "=", "self", ".", "P", "[", "0", ",", "0", "]", "\n", "self", ".", "f_v", "=", "self", ".", "P", "[", "1", ",", "1", "]", "\n", "self", ".", "b_x", "=", "self", ".", "P", "[", "0", ",", "3", "]", "/", "(", "-", "self", ".", "f_u", ")", "# relative", "\n", "self", ".", "b_y", "=", "self", ".", "P", "[", "1", ",", "3", "]", "/", "(", "-", "self", ".", "f_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.read_calib_file": [[105, 123], ["open", "f.readlines", "line.rstrip.rstrip.rstrip", "line.rstrip.rstrip.split", "len", "numpy.array", "float", "value.split"], "methods", ["None"], ["", "def", "read_calib_file", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "''' Read in a calibration file and parse into a dictionary.\n        Ref: https://github.com/utiasSTARS/pykitti/blob/master/pykitti/utils.py\n        '''", "\n", "data", "=", "{", "}", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "continue", "\n", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "# The only non-float values in these files are dates, which", "\n", "# we don't care about anyway", "\n", "try", ":", "\n", "                    ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "value", ".", "split", "(", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "pass", "\n", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.read_calib_from_video": [[124, 138], ["kitti_util.Calibration.read_calib_file", "kitti_util.Calibration.read_calib_file", "numpy.zeros", "numpy.reshape", "numpy.reshape", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.read_calib_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.read_calib_file"], ["", "def", "read_calib_from_video", "(", "self", ",", "calib_root_dir", ")", ":", "\n", "        ", "''' Read calibration for camera 2 from video calib files.\n            there are calib_cam_to_cam and calib_velo_to_cam under the calib_root_dir\n        '''", "\n", "data", "=", "{", "}", "\n", "cam2cam", "=", "self", ".", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "calib_root_dir", ",", "'calib_cam_to_cam.txt'", ")", ")", "\n", "velo2cam", "=", "self", ".", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "calib_root_dir", ",", "'calib_velo_to_cam.txt'", ")", ")", "\n", "Tr_velo_to_cam", "=", "np", ".", "zeros", "(", "(", "3", ",", "4", ")", ")", "\n", "Tr_velo_to_cam", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "np", ".", "reshape", "(", "velo2cam", "[", "'R'", "]", ",", "[", "3", ",", "3", "]", ")", "\n", "Tr_velo_to_cam", "[", ":", ",", "3", "]", "=", "velo2cam", "[", "'T'", "]", "\n", "data", "[", "'Tr_velo_to_cam'", "]", "=", "np", ".", "reshape", "(", "Tr_velo_to_cam", ",", "[", "12", "]", ")", "\n", "data", "[", "'R0_rect'", "]", "=", "cam2cam", "[", "'R_rect_00'", "]", "\n", "data", "[", "'P2'", "]", "=", "cam2cam", "[", "'P_rect_02'", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.cart2hom": [[139, 146], ["numpy.hstack", "numpy.ones"], "methods", ["None"], ["", "def", "cart2hom", "(", "self", ",", "pts_3d", ")", ":", "\n", "        ", "''' Input: nx3 points in Cartesian\n            Oupput: nx4 points in Homogeneous by pending 1\n        '''", "\n", "n", "=", "pts_3d", ".", "shape", "[", "0", "]", "\n", "pts_3d_hom", "=", "np", ".", "hstack", "(", "(", "pts_3d", ",", "np", ".", "ones", "(", "(", "n", ",", "1", ")", ")", ")", ")", "\n", "return", "pts_3d_hom", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.project_velo_to_ref": [[150, 153], ["kitti_util.Calibration.cart2hom", "numpy.dot", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.cart2hom"], ["", "def", "project_velo_to_ref", "(", "self", ",", "pts_3d_velo", ")", ":", "\n", "        ", "pts_3d_velo", "=", "self", ".", "cart2hom", "(", "pts_3d_velo", ")", "# nx4", "\n", "return", "np", ".", "dot", "(", "pts_3d_velo", ",", "np", ".", "transpose", "(", "self", ".", "V2C", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.project_ref_to_velo": [[154, 157], ["kitti_util.Calibration.cart2hom", "numpy.dot", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.cart2hom"], ["", "def", "project_ref_to_velo", "(", "self", ",", "pts_3d_ref", ")", ":", "\n", "        ", "pts_3d_ref", "=", "self", ".", "cart2hom", "(", "pts_3d_ref", ")", "# nx4", "\n", "return", "np", ".", "dot", "(", "pts_3d_ref", ",", "np", ".", "transpose", "(", "self", ".", "C2V", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.project_rect_to_ref": [[158, 161], ["numpy.transpose", "numpy.dot", "numpy.linalg.inv", "numpy.transpose"], "methods", ["None"], ["", "def", "project_rect_to_ref", "(", "self", ",", "pts_3d_rect", ")", ":", "\n", "        ", "''' Input and Output are nx3 points '''", "\n", "return", "np", ".", "transpose", "(", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "self", ".", "R0", ")", ",", "np", ".", "transpose", "(", "pts_3d_rect", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.project_ref_to_rect": [[162, 165], ["numpy.transpose", "numpy.dot", "numpy.transpose"], "methods", ["None"], ["", "def", "project_ref_to_rect", "(", "self", ",", "pts_3d_ref", ")", ":", "\n", "        ", "''' Input and Output are nx3 points '''", "\n", "return", "np", ".", "transpose", "(", "np", ".", "dot", "(", "self", ".", "R0", ",", "np", ".", "transpose", "(", "pts_3d_ref", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.project_rect_to_velo": [[166, 172], ["kitti_util.Calibration.project_rect_to_ref", "kitti_util.Calibration.project_ref_to_velo"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_rect_to_ref", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_ref_to_velo"], ["", "def", "project_rect_to_velo", "(", "self", ",", "pts_3d_rect", ")", ":", "\n", "        ", "''' Input: nx3 points in rect camera coord.\n            Output: nx3 points in velodyne coord.\n        '''", "\n", "pts_3d_ref", "=", "self", ".", "project_rect_to_ref", "(", "pts_3d_rect", ")", "\n", "return", "self", ".", "project_ref_to_velo", "(", "pts_3d_ref", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.project_velo_to_rect": [[173, 176], ["kitti_util.Calibration.project_velo_to_ref", "kitti_util.Calibration.project_ref_to_rect"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_ref", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_ref_to_rect"], ["", "def", "project_velo_to_rect", "(", "self", ",", "pts_3d_velo", ")", ":", "\n", "        ", "pts_3d_ref", "=", "self", ".", "project_velo_to_ref", "(", "pts_3d_velo", ")", "\n", "return", "self", ".", "project_ref_to_rect", "(", "pts_3d_ref", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.project_rect_to_image": [[180, 189], ["kitti_util.Calibration.cart2hom", "numpy.dot", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.cart2hom"], ["", "def", "project_rect_to_image", "(", "self", ",", "pts_3d_rect", ")", ":", "\n", "        ", "''' Input: nx3 points in rect camera coord.\n            Output: nx2 points in image2 coord.\n        '''", "\n", "pts_3d_rect", "=", "self", ".", "cart2hom", "(", "pts_3d_rect", ")", "\n", "pts_2d", "=", "np", ".", "dot", "(", "pts_3d_rect", ",", "np", ".", "transpose", "(", "self", ".", "P", ")", ")", "# nx3", "\n", "pts_2d", "[", ":", ",", "0", "]", "/=", "pts_2d", "[", ":", ",", "2", "]", "\n", "pts_2d", "[", ":", ",", "1", "]", "/=", "pts_2d", "[", ":", ",", "2", "]", "\n", "return", "pts_2d", "[", ":", ",", "0", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.project_velo_to_image": [[190, 196], ["kitti_util.Calibration.project_velo_to_rect", "kitti_util.Calibration.project_rect_to_image"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_rect", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_rect_to_image"], ["", "def", "project_velo_to_image", "(", "self", ",", "pts_3d_velo", ")", ":", "\n", "        ", "''' Input: nx3 points in velodyne coord.\n            Output: nx2 points in image2 coord.\n        '''", "\n", "pts_3d_rect", "=", "self", ".", "project_velo_to_rect", "(", "pts_3d_velo", ")", "\n", "return", "self", ".", "project_rect_to_image", "(", "pts_3d_rect", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.project_velo_to_image3": [[201, 207], ["kitti_util.Calibration.project_velo_to_rect", "kitti_util.Calibration.project_rect_to_image3"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_rect", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.project_rect_to_image3"], ["", "def", "project_velo_to_image3", "(", "self", ",", "pts_3d_velo", ")", ":", "\n", "        ", "''' Input: nx3 points in velodyne coord.\n            Output: nx3 points in image2 coord + depth.\n        '''", "\n", "pts_3d_rect", "=", "self", ".", "project_velo_to_rect", "(", "pts_3d_velo", ")", "\n", "return", "self", ".", "project_rect_to_image3", "(", "pts_3d_rect", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.project_rect_to_image3": [[208, 217], ["kitti_util.Calibration.cart2hom", "numpy.dot", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.cart2hom"], ["", "def", "project_rect_to_image3", "(", "self", ",", "pts_3d_rect", ")", ":", "\n", "        ", "''' Input: nx3 points in rect camera coord.\n            Output: nx3 points in image2 coord + depth.\n        '''", "\n", "pts_3d_rect", "=", "self", ".", "cart2hom", "(", "pts_3d_rect", ")", "\n", "pts_2d", "=", "np", ".", "dot", "(", "pts_3d_rect", ",", "np", ".", "transpose", "(", "self", ".", "P", ")", ")", "# nx3", "\n", "pts_2d", "[", ":", ",", "0", "]", "/=", "pts_2d", "[", ":", ",", "2", "]", "\n", "pts_2d", "[", ":", ",", "1", "]", "/=", "pts_2d", "[", ":", ",", "2", "]", "\n", "return", "pts_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.project_image_to_rect": [[222, 235], ["numpy.zeros"], "methods", ["None"], ["", "def", "project_image_to_rect", "(", "self", ",", "uv_depth", ")", ":", "\n", "        ", "''' Input: nx3 first two channels are uv, 3rd channel\n                   is depth in rect camera coord.\n            Output: nx3 points in rect camera coord.\n        '''", "\n", "n", "=", "uv_depth", ".", "shape", "[", "0", "]", "\n", "x", "=", "(", "(", "uv_depth", "[", ":", ",", "0", "]", "-", "self", ".", "c_u", ")", "*", "uv_depth", "[", ":", ",", "2", "]", ")", "/", "self", ".", "f_u", "+", "self", ".", "b_x", "\n", "y", "=", "(", "(", "uv_depth", "[", ":", ",", "1", "]", "-", "self", ".", "c_v", ")", "*", "uv_depth", "[", ":", ",", "2", "]", ")", "/", "self", ".", "f_v", "+", "self", ".", "b_y", "\n", "pts_3d_rect", "=", "np", ".", "zeros", "(", "(", "n", ",", "3", ")", ")", "\n", "pts_3d_rect", "[", ":", ",", "0", "]", "=", "x", "\n", "pts_3d_rect", "[", ":", ",", "1", "]", "=", "y", "\n", "pts_3d_rect", "[", ":", ",", "2", "]", "=", "uv_depth", "[", ":", ",", "2", "]", "\n", "return", "pts_3d_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.Calibration.project_image_to_velo": [[236, 239], ["kitti_util.Calibration.project_image_to_rect", "kitti_util.Calibration.project_rect_to_velo"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_image_to_rect", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_rect_to_velo"], ["", "def", "project_image_to_velo", "(", "self", ",", "uv_depth", ")", ":", "\n", "        ", "pts_3d_rect", "=", "self", ".", "project_image_to_rect", "(", "uv_depth", ")", "\n", "return", "self", ".", "project_rect_to_velo", "(", "pts_3d_rect", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.rotx": [[241, 248], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["", "", "def", "rotx", "(", "t", ")", ":", "\n", "    ", "''' 3D Rotation about the x-axis. '''", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "c", ",", "-", "s", "]", ",", "\n", "[", "0", ",", "s", ",", "c", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.roty": [[250, 257], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["", "def", "roty", "(", "t", ")", ":", "\n", "    ", "''' Rotation about the y-axis. '''", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "0", ",", "s", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "s", ",", "0", ",", "c", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.rotz": [[259, 266], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["", "def", "rotz", "(", "t", ")", ":", "\n", "    ", "''' Rotation about the z-axis. '''", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "-", "s", ",", "0", "]", ",", "\n", "[", "s", ",", "c", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.transform_from_rot_trans": [[268, 273], ["R.reshape.reshape", "t.reshape.reshape", "numpy.vstack", "numpy.hstack"], "function", ["None"], ["", "def", "transform_from_rot_trans", "(", "R", ",", "t", ")", ":", "\n", "    ", "''' Transforation matrix from rotation matrix and translation vector. '''", "\n", "R", "=", "R", ".", "reshape", "(", "3", ",", "3", ")", "\n", "t", "=", "t", ".", "reshape", "(", "3", ",", "1", ")", "\n", "return", "np", ".", "vstack", "(", "(", "np", ".", "hstack", "(", "[", "R", ",", "t", "]", ")", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.inverse_rigid_trans": [[275, 283], ["numpy.zeros_like", "numpy.transpose", "numpy.dot", "numpy.transpose"], "function", ["None"], ["", "def", "inverse_rigid_trans", "(", "Tr", ")", ":", "\n", "    ", "''' Inverse a rigid body transform matrix (3x4 as [R|t])\n        [R'|-R't; 0|1]\n    '''", "\n", "inv_Tr", "=", "np", ".", "zeros_like", "(", "Tr", ")", "# 3x4", "\n", "inv_Tr", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "np", ".", "transpose", "(", "Tr", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", "\n", "inv_Tr", "[", "0", ":", "3", ",", "3", "]", "=", "np", ".", "dot", "(", "-", "np", ".", "transpose", "(", "Tr", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", ",", "Tr", "[", "0", ":", "3", ",", "3", "]", ")", "\n", "return", "inv_Tr", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.read_label": [[284, 288], ["line.rstrip", "kitti_util.Object3d", "open"], "function", ["None"], ["", "def", "read_label", "(", "label_filename", ")", ":", "\n", "    ", "lines", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "label_filename", ")", "]", "\n", "objects", "=", "[", "Object3d", "(", "line", ")", "for", "line", "in", "lines", "]", "\n", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.load_image": [[289, 291], ["cv2.imread"], "function", ["None"], ["", "def", "load_image", "(", "img_filename", ")", ":", "\n", "    ", "return", "cv2", ".", "imread", "(", "img_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.load_velo_scan": [[292, 296], ["numpy.fromfile", "scan.reshape.reshape"], "function", ["None"], ["", "def", "load_velo_scan", "(", "velo_filename", ")", ":", "\n", "    ", "scan", "=", "np", ".", "fromfile", "(", "velo_filename", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "scan", "=", "scan", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "return", "scan", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.project_to_image": [[297, 318], ["numpy.hstack", "numpy.dot", "numpy.transpose", "numpy.ones"], "function", ["None"], ["", "def", "project_to_image", "(", "pts_3d", ",", "P", ")", ":", "\n", "    ", "''' Project 3d points to image plane.\n\n    Usage: pts_2d = projectToImage(pts_3d, P)\n      input: pts_3d: nx3 matrix\n             P:      3x4 projection matrix\n      output: pts_2d: nx2 matrix\n\n      P(3x4) dot pts_3d_extended(4xn) = projected_pts_2d(3xn)\n      => normalize projected_pts_2d(2xn)\n\n      <=> pts_3d_extended(nx4) dot P'(4x3) = projected_pts_2d(nx3)\n          => normalize projected_pts_2d(nx2)\n    '''", "\n", "n", "=", "pts_3d", ".", "shape", "[", "0", "]", "\n", "pts_3d_extend", "=", "np", ".", "hstack", "(", "(", "pts_3d", ",", "np", ".", "ones", "(", "(", "n", ",", "1", ")", ")", ")", ")", "\n", "# print(('pts_3d_extend shape: ', pts_3d_extend.shape))", "\n", "pts_2d", "=", "np", ".", "dot", "(", "pts_3d_extend", ",", "np", ".", "transpose", "(", "P", ")", ")", "# nx3", "\n", "pts_2d", "[", ":", ",", "0", "]", "/=", "pts_2d", "[", ":", ",", "2", "]", "\n", "pts_2d", "[", ":", ",", "1", "]", "/=", "pts_2d", "[", ":", ",", "2", "]", "\n", "return", "pts_2d", "[", ":", ",", "0", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.compute_box_3d": [[320, 356], ["kitti_util.roty", "numpy.dot", "numpy.any", "kitti_util.project_to_image", "numpy.vstack", "numpy.transpose", "numpy.transpose", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.fusion_model.roty", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.project_to_image"], ["", "def", "compute_box_3d", "(", "obj", ",", "P", ")", ":", "\n", "    ", "''' Takes an object and a projection matrix (P) and projects the 3d\n        bounding box into the image plane.\n        Returns:\n            corners_2d: (8,2) array in left image coord.\n            corners_3d: (8,3) array in in rect camera coord.\n    '''", "\n", "# compute rotational matrix around yaw axis", "\n", "R", "=", "roty", "(", "obj", ".", "ry", ")", "\n", "\n", "# 3d bounding box dimensions", "\n", "l", "=", "obj", ".", "l", ";", "\n", "w", "=", "obj", ".", "w", ";", "\n", "h", "=", "obj", ".", "h", ";", "\n", "\n", "# 3d bounding box corners", "\n", "x_corners", "=", "[", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", "]", ";", "\n", "y_corners", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "-", "h", ",", "-", "h", ",", "-", "h", ",", "-", "h", "]", ";", "\n", "z_corners", "=", "[", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ",", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", "]", ";", "\n", "\n", "# rotate and translate 3d bounding box", "\n", "corners_3d", "=", "np", ".", "dot", "(", "R", ",", "np", ".", "vstack", "(", "[", "x_corners", ",", "y_corners", ",", "z_corners", "]", ")", ")", "\n", "#print corners_3d.shape", "\n", "corners_3d", "[", "0", ",", ":", "]", "=", "corners_3d", "[", "0", ",", ":", "]", "+", "obj", ".", "t", "[", "0", "]", ";", "\n", "corners_3d", "[", "1", ",", ":", "]", "=", "corners_3d", "[", "1", ",", ":", "]", "+", "obj", ".", "t", "[", "1", "]", ";", "\n", "corners_3d", "[", "2", ",", ":", "]", "=", "corners_3d", "[", "2", ",", ":", "]", "+", "obj", ".", "t", "[", "2", "]", ";", "\n", "#print 'cornsers_3d: ', corners_3d", "\n", "# only draw 3d bounding box for objs in front of the camera", "\n", "if", "np", ".", "any", "(", "corners_3d", "[", "2", ",", ":", "]", "<", "0.1", ")", ":", "\n", "        ", "corners_2d", "=", "None", "\n", "return", "corners_2d", ",", "np", ".", "transpose", "(", "corners_3d", ")", "\n", "\n", "# project the 3d bounding box into the image plane", "\n", "", "corners_2d", "=", "project_to_image", "(", "np", ".", "transpose", "(", "corners_3d", ")", ",", "P", ")", ";", "\n", "#print 'corners_2d: ', corners_2d", "\n", "return", "corners_2d", ",", "np", ".", "transpose", "(", "corners_3d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.compute_orientation_3d": [[358, 386], ["kitti_util.roty", "numpy.array", "numpy.dot", "numpy.any", "kitti_util.project_to_image", "numpy.transpose", "numpy.transpose", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.fusion_model.roty", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.project_to_image"], ["", "def", "compute_orientation_3d", "(", "obj", ",", "P", ")", ":", "\n", "    ", "''' Takes an object and a projection matrix (P) and projects the 3d\n        object orientation vector into the image plane.\n        Returns:\n            orientation_2d: (2,2) array in left image coord.\n            orientation_3d: (2,3) array in in rect camera coord.\n    '''", "\n", "\n", "# compute rotational matrix around yaw axis", "\n", "R", "=", "roty", "(", "obj", ".", "ry", ")", "\n", "\n", "# orientation in object coordinate system", "\n", "orientation_3d", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "obj", ".", "l", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "# rotate and translate in camera coordinate system, project in image", "\n", "orientation_3d", "=", "np", ".", "dot", "(", "R", ",", "orientation_3d", ")", "\n", "orientation_3d", "[", "0", ",", ":", "]", "=", "orientation_3d", "[", "0", ",", ":", "]", "+", "obj", ".", "t", "[", "0", "]", "\n", "orientation_3d", "[", "1", ",", ":", "]", "=", "orientation_3d", "[", "1", ",", ":", "]", "+", "obj", ".", "t", "[", "1", "]", "\n", "orientation_3d", "[", "2", ",", ":", "]", "=", "orientation_3d", "[", "2", ",", ":", "]", "+", "obj", ".", "t", "[", "2", "]", "\n", "\n", "# vector behind image plane?", "\n", "if", "np", ".", "any", "(", "orientation_3d", "[", "2", ",", ":", "]", "<", "0.1", ")", ":", "\n", "      ", "orientation_2d", "=", "None", "\n", "return", "orientation_2d", ",", "np", ".", "transpose", "(", "orientation_3d", ")", "\n", "\n", "# project orientation into the image plane", "\n", "", "orientation_2d", "=", "project_to_image", "(", "np", ".", "transpose", "(", "orientation_3d", ")", ",", "P", ")", ";", "\n", "return", "orientation_2d", ",", "np", ".", "transpose", "(", "orientation_3d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.draw_projected_box3d": [[387, 411], ["qs.astype.astype", "range", "cv2.line", "cv2.line", "cv2.line"], "function", ["None"], ["", "def", "draw_projected_box3d", "(", "image", ",", "qs", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ",", "thickness", "=", "2", ")", ":", "\n", "    ", "''' Draw 3d bounding box in image\n        qs: (8,3) array of vertices for the 3d box in following order:\n            1 -------- 0\n           /|         /|\n          2 -------- 3 .\n          | |        | |\n          . 5 -------- 4\n          |/         |/\n          6 -------- 7\n    '''", "\n", "qs", "=", "qs", ".", "astype", "(", "np", ".", "int32", ")", "\n", "for", "k", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "# Ref: http://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html", "\n", "       ", "i", ",", "j", "=", "k", ",", "(", "k", "+", "1", ")", "%", "4", "\n", "# use LINE_AA for opencv3", "\n", "cv2", ".", "line", "(", "image", ",", "(", "qs", "[", "i", ",", "0", "]", ",", "qs", "[", "i", ",", "1", "]", ")", ",", "(", "qs", "[", "j", ",", "0", "]", ",", "qs", "[", "j", ",", "1", "]", ")", ",", "color", ",", "thickness", ",", "cv2", ".", "CV_AA", ")", "\n", "\n", "i", ",", "j", "=", "k", "+", "4", ",", "(", "k", "+", "1", ")", "%", "4", "+", "4", "\n", "cv2", ".", "line", "(", "image", ",", "(", "qs", "[", "i", ",", "0", "]", ",", "qs", "[", "i", ",", "1", "]", ")", ",", "(", "qs", "[", "j", ",", "0", "]", ",", "qs", "[", "j", ",", "1", "]", ")", ",", "color", ",", "thickness", ",", "cv2", ".", "CV_AA", ")", "\n", "\n", "i", ",", "j", "=", "k", ",", "k", "+", "4", "\n", "cv2", ".", "line", "(", "image", ",", "(", "qs", "[", "i", ",", "0", "]", ",", "qs", "[", "i", ",", "1", "]", ")", ",", "(", "qs", "[", "j", ",", "0", "]", ",", "qs", "[", "j", ",", "1", "]", ")", ",", "color", ",", "thickness", ",", "cv2", ".", "CV_AA", ")", "\n", "", "return", "image", "\n", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_sparsify.pto_rec_map": [[9, 41], ["depth_map.reshape.reshape", "numpy.ones"], "function", ["None"], ["def", "pto_rec_map", "(", "velo_points", ",", "H", "=", "64", ",", "W", "=", "512", ",", "D", "=", "800", ")", ":", "\n", "\n", "# depth, width, height", "\n", "    ", "valid_inds", "=", "(", "velo_points", "[", ":", ",", "0", "]", "<", "80", ")", "&", "(", "velo_points", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "velo_points", "[", ":", ",", "1", "]", "<", "50", ")", "&", "(", "velo_points", "[", ":", ",", "1", "]", ">=", "-", "50", ")", "&", "(", "velo_points", "[", ":", ",", "2", "]", "<", "1", ")", "&", "(", "velo_points", "[", ":", ",", "2", "]", ">=", "-", "2.5", ")", "\n", "velo_points", "=", "velo_points", "[", "valid_inds", "]", "\n", "\n", "x", ",", "y", ",", "z", ",", "i", "=", "velo_points", "[", ":", ",", "0", "]", ",", "velo_points", "[", ":", ",", "1", "]", ",", "velo_points", "[", ":", ",", "2", "]", ",", "velo_points", "[", ":", ",", "3", "]", "\n", "x_grid", "=", "(", "x", "*", "D", "/", "80.", ")", ".", "astype", "(", "int", ")", "\n", "x_grid", "[", "x_grid", "<", "0", "]", "=", "0", "\n", "x_grid", "[", "x_grid", ">=", "D", "]", "=", "D", "-", "1", "\n", "\n", "y_grid", "=", "(", "(", "y", "+", "50", ")", "*", "W", "/", "100.", ")", ".", "astype", "(", "int", ")", "\n", "y_grid", "[", "y_grid", "<", "0", "]", "=", "0", "\n", "y_grid", "[", "y_grid", ">=", "W", "]", "=", "W", "-", "1", "\n", "\n", "z_grid", "=", "(", "(", "z", "+", "2.5", ")", "*", "H", "/", "3.5", ")", ".", "astype", "(", "int", ")", "\n", "z_grid", "[", "z_grid", "<", "0", "]", "=", "0", "\n", "z_grid", "[", "z_grid", ">=", "H", "]", "=", "H", "-", "1", "\n", "\n", "depth_map", "=", "-", "np", ".", "ones", "(", "(", "D", ",", "W", ",", "H", ",", "4", ")", ")", "\n", "depth_map", "[", "x_grid", ",", "y_grid", ",", "z_grid", ",", "0", "]", "=", "x", "\n", "depth_map", "[", "x_grid", ",", "y_grid", ",", "z_grid", ",", "1", "]", "=", "y", "\n", "depth_map", "[", "x_grid", ",", "y_grid", ",", "z_grid", ",", "2", "]", "=", "z", "\n", "depth_map", "[", "x_grid", ",", "y_grid", ",", "z_grid", ",", "3", "]", "=", "i", "\n", "depth_map", "=", "depth_map", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "depth_map", "=", "depth_map", "[", "depth_map", "[", ":", ",", "0", "]", "!=", "-", "1.0", "]", "\n", "return", "depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_sparsify.pto_ang_map": [[43, 78], ["numpy.radians", "numpy.radians", "numpy.sqrt", "numpy.sqrt", "depth_map.reshape.reshape", "numpy.radians", "numpy.arcsin", "numpy.radians", "numpy.arcsin", "numpy.ones"], "function", ["None"], ["", "def", "pto_ang_map", "(", "velo_points", ",", "H", "=", "64", ",", "W", "=", "512", ",", "slice", "=", "1", ")", ":", "\n", "   ", "\"\"\"\n   :param H: the row num of depth map, could be 64(default), 32, 16\n   :param W: the col num of depth map\n   :param slice: output every slice lines\n   \"\"\"", "\n", "\n", "dtheta", "=", "np", ".", "radians", "(", "0.4", "*", "64.0", "/", "H", ")", "\n", "dphi", "=", "np", ".", "radians", "(", "90.0", "/", "W", ")", "\n", "\n", "x", ",", "y", ",", "z", ",", "i", "=", "velo_points", "[", ":", ",", "0", "]", ",", "velo_points", "[", ":", ",", "1", "]", ",", "velo_points", "[", ":", ",", "2", "]", ",", "velo_points", "[", ":", ",", "3", "]", "\n", "\n", "d", "=", "np", ".", "sqrt", "(", "x", "**", "2", "+", "y", "**", "2", "+", "z", "**", "2", ")", "\n", "r", "=", "np", ".", "sqrt", "(", "x", "**", "2", "+", "y", "**", "2", ")", "\n", "d", "[", "d", "==", "0", "]", "=", "0.000001", "\n", "r", "[", "r", "==", "0", "]", "=", "0.000001", "\n", "phi", "=", "np", ".", "radians", "(", "45.", ")", "-", "np", ".", "arcsin", "(", "y", "/", "r", ")", "\n", "phi_", "=", "(", "phi", "/", "dphi", ")", ".", "astype", "(", "int", ")", "\n", "phi_", "[", "phi_", "<", "0", "]", "=", "0", "\n", "phi_", "[", "phi_", ">=", "W", "]", "=", "W", "-", "1", "\n", "\n", "theta", "=", "np", ".", "radians", "(", "2.", ")", "-", "np", ".", "arcsin", "(", "z", "/", "d", ")", "\n", "theta_", "=", "(", "theta", "/", "dtheta", ")", ".", "astype", "(", "int", ")", "\n", "theta_", "[", "theta_", "<", "0", "]", "=", "0", "\n", "theta_", "[", "theta_", ">=", "H", "]", "=", "H", "-", "1", "\n", "\n", "depth_map", "=", "-", "np", ".", "ones", "(", "(", "H", ",", "W", ",", "4", ")", ")", "\n", "depth_map", "[", "theta_", ",", "phi_", ",", "0", "]", "=", "x", "\n", "depth_map", "[", "theta_", ",", "phi_", ",", "1", "]", "=", "y", "\n", "depth_map", "[", "theta_", ",", "phi_", ",", "2", "]", "=", "z", "\n", "depth_map", "[", "theta_", ",", "phi_", ",", "3", "]", "=", "i", "\n", "depth_map", "=", "depth_map", "[", "0", ":", ":", "slice", ",", ":", ",", ":", "]", "\n", "depth_map", "=", "depth_map", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "depth_map", "=", "depth_map", "[", "depth_map", "[", ":", ",", "0", "]", "!=", "-", "1.0", "]", "\n", "return", "depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_sparsify.gen_sparse_points": [[80, 105], ["dataset.get_calibration", "dataset.get_lidar", "dataset.get_image", "kitti_object.get_lidar_in_image_fov", "print", "kitti_sparsify.pto_rec_map", "print", "kitti_sparsify.pto_ang_map"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object_video.get_calibration", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object_video.get_lidar", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object_video.get_image", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.get_lidar_in_image_fov", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_sparsify.pto_rec_map", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_sparsify.pto_ang_map"], ["", "def", "gen_sparse_points", "(", "dataset", ",", "data_idx", ",", "sparse_type", ")", ":", "\n", "    ", "calib", "=", "dataset", ".", "get_calibration", "(", "data_idx", ")", "\n", "pc_velo", "=", "dataset", ".", "get_lidar", "(", "data_idx", ")", "\n", "img", "=", "dataset", ".", "get_image", "(", "data_idx", ")", "\n", "img_height", ",", "img_width", ",", "img_channel", "=", "img", ".", "shape", "\n", "\n", "_", ",", "_", ",", "valid_inds_fov", "=", "get_lidar_in_image_fov", "(", "\n", "pc_velo", "[", ":", ",", ":", "3", "]", ",", "calib", ",", "0", ",", "0", ",", "img_width", ",", "img_height", ",", "True", ")", "\n", "pc_velo", "=", "pc_velo", "[", "valid_inds_fov", "]", "\n", "\n", "# depth, width, height", "\n", "valid_inds", "=", "(", "pc_velo", "[", ":", ",", "0", "]", "<", "120", ")", "&", "(", "pc_velo", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "pc_velo", "[", ":", ",", "1", "]", "<", "50", ")", "&", "(", "pc_velo", "[", ":", ",", "1", "]", ">=", "-", "50", ")", "&", "(", "pc_velo", "[", ":", ",", "2", "]", "<", "1.5", ")", "&", "(", "pc_velo", "[", ":", ",", "2", "]", ">=", "-", "2.5", ")", "\n", "pc_velo", "=", "pc_velo", "[", "valid_inds", "]", "\n", "\n", "if", "sparse_type", "!=", "\"angular\"", ":", "\n", "        ", "print", "(", "\"rectangular\"", ")", "\n", "return", "pto_rec_map", "(", "pc_velo", ",", "H", "=", "args", ".", "H", ",", "W", "=", "args", ".", "W", ",", "D", "=", "args", ".", "D", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"angular\"", ")", "\n", "return", "pto_ang_map", "(", "pc_velo", ",", "H", "=", "args", ".", "H", ",", "W", "=", "args", ".", "W", ",", "slice", "=", "args", ".", "slice", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_sparsify.gen_sparse_points_all": [[107, 128], ["kitti_object.kitti_object", "os.path.join", "print", "open", "len", "os.exists", "os.makedirs", "print", "kitti_sparsify.gen_sparse_points", "sparse_points.astype.astype", "sparse_points.astype.tofile", "int", "str", "line.rstrip", "f.readlines", "str", "len", "str", "line.strip", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_sparsify.gen_sparse_points"], ["", "", "def", "gen_sparse_points_all", "(", "args", ",", "idx_file", ",", "split", ")", ":", "\n", "    ", "dataset_stereo", "=", "kitti_object", "(", "args", ".", "data_root", "+", "'/'", ",", "split", ",", "point_style", "=", "args", ".", "point_style", ")", "\n", "with", "open", "(", "args", ".", "split", "+", "'/'", "+", "idx_file", ")", "as", "f", ":", "\n", "        ", "data_idx_list", "=", "[", "int", "(", "line", ".", "rstrip", "(", ")", ")", "for", "line", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "line", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "", "outputfolder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "gen_path", ",", "args", ".", "point_style", "+", "'_sparse_'", ")", "\n", "if", "args", ".", "sparse_type", "==", "\"angular\"", ":", "\n", "        ", "outputfolder", "=", "outputfolder", "+", "'angular_H'", "+", "str", "(", "args", ".", "H", ")", "+", "'_W'", "+", "str", "(", "args", ".", "W", ")", "+", "'_S'", "+", "str", "(", "args", ".", "slice", ")", "\n", "", "elif", "args", ".", "sparse_type", "==", "\"rectangular\"", ":", "\n", "        ", "outputfolder", "=", "outputfolder", "+", "'rectangular_H'", "+", "str", "(", "args", ".", "H", ")", "+", "'_W'", "+", "str", "(", "args", ".", "W", ")", "+", "'_D'", "+", "str", "(", "args", ".", "D", ")", "\n", "\n", "", "print", "(", "len", "(", "data_idx_list", ")", ")", "\n", "\n", "if", "not", "osp", ".", "exists", "(", "outputfolder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outputfolder", ")", "\n", "\n", "", "for", "data_idx", "in", "data_idx_list", ":", "\n", "        ", "print", "(", "data_idx", ")", "\n", "\n", "sparse_points", "=", "gen_sparse_points", "(", "dataset_stereo", ",", "data_idx", ",", "args", ".", "sparse_type", ")", "\n", "sparse_points", "=", "sparse_points", ".", "astype", "(", "np", ".", "float32", ")", "\n", "sparse_points", ".", "tofile", "(", "outputfolder", "+", "'/'", "+", "'%06d.bin'", "%", "(", "data_idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.get_objects_from_label": [[8, 13], ["open", "f.readlines", "object3d.Object3d"], "function", ["None"], ["def", "get_objects_from_label", "(", "label_file", ")", ":", "\n", "    ", "with", "open", "(", "label_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "objects", "=", "[", "object3d", ".", "Object3d", "(", "line", ")", "for", "line", "in", "lines", "]", "\n", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.dist_to_plane": [[15, 30], ["numpy.array", "numpy.sqrt"], "function", ["None"], ["", "def", "dist_to_plane", "(", "plane", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the signed distance from a 3D plane to each point in a list of points\n    :param plane: (a, b, c, d)\n    :param points: (N, 3)\n    :return: (N), signed distance of each point to the plane\n    \"\"\"", "\n", "a", ",", "b", ",", "c", ",", "d", "=", "plane", "\n", "\n", "points", "=", "np", ".", "array", "(", "points", ")", "\n", "x", "=", "points", "[", ":", ",", "0", "]", "\n", "y", "=", "points", "[", ":", ",", "1", "]", "\n", "z", "=", "points", "[", ":", ",", "2", "]", "\n", "\n", "return", "(", "a", "*", "x", "+", "b", "*", "y", "+", "c", "*", "z", "+", "d", ")", "/", "np", ".", "sqrt", "(", "a", "**", "2", "+", "b", "**", "2", "+", "c", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.rotate_pc_along_y": [[32, 43], ["numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "numpy.transpose"], "function", ["None"], ["", "def", "rotate_pc_along_y", "(", "pc", ",", "rot_angle", ")", ":", "\n", "    ", "\"\"\"\n    params pc: (N, 3+C), (N, 3) is in the rectified camera coordinate\n    params rot_angle: rad scalar\n    Output pc: updated pc with XYZ rotated\n    \"\"\"", "\n", "cosval", "=", "np", ".", "cos", "(", "rot_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rot_angle", ")", "\n", "rotmat", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "-", "sinval", "]", ",", "[", "sinval", ",", "cosval", "]", "]", ")", "\n", "pc", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "np", ".", "dot", "(", "pc", "[", ":", ",", "[", "0", ",", "2", "]", "]", ",", "np", ".", "transpose", "(", "rotmat", ")", ")", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.rotate_pc_along_y_torch": [[45, 65], ["torch.cos().view", "torch.sin().view", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.cat.permute", "torch.cos", "torch.sin", "torch.cat.unsqueeze", "torch.cat.unsqueeze"], "function", ["None"], ["", "def", "rotate_pc_along_y_torch", "(", "pc", ",", "rot_angle", ")", ":", "\n", "    ", "\"\"\"\n    :param pc: (N, 512, 3 + C)\n    :param rot_angle: (N)\n    :return:\n    TODO: merge with rotate_pc_along_y_torch in bbox_transform.py\n    \"\"\"", "\n", "cosa", "=", "torch", ".", "cos", "(", "rot_angle", ")", ".", "view", "(", "-", "1", ",", "1", ")", "# (N, 1)", "\n", "sina", "=", "torch", ".", "sin", "(", "rot_angle", ")", ".", "view", "(", "-", "1", ",", "1", ")", "# (N, 1)", "\n", "\n", "raw_1", "=", "torch", ".", "cat", "(", "[", "cosa", ",", "-", "sina", "]", ",", "dim", "=", "1", ")", "# (N, 2)", "\n", "raw_2", "=", "torch", ".", "cat", "(", "[", "sina", ",", "cosa", "]", ",", "dim", "=", "1", ")", "# (N, 2)", "\n", "R", "=", "torch", ".", "cat", "(", "(", "raw_1", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "raw_2", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", ",", "\n", "dim", "=", "1", ")", "# (N, 2, 2)", "\n", "\n", "pc_temp", "=", "pc", "[", ":", ",", ":", ",", "[", "0", ",", "2", "]", "]", "# (N, 512, 2)", "\n", "\n", "pc", "[", ":", ",", ":", ",", "[", "0", ",", "2", "]", "]", "=", "torch", ".", "matmul", "(", "pc_temp", ",", "R", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "# (N, 512, 2)", "\n", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.boxes3d_to_corners3d": [[67, 107], ["numpy.zeros", "numpy.concatenate", "np.concatenate.astype", "numpy.array", "numpy.array", "h.reshape().repeat", "numpy.array", "numpy.transpose", "numpy.concatenate", "numpy.matmul", "x_loc.reshape", "x_corners.reshape", "y_loc.reshape", "np.zeros.reshape", "z_loc.reshape", "z_corners.reshape", "numpy.zeros", "numpy.ones", "x.reshape", "y.reshape", "z.reshape", "h.reshape", "x_corners.reshape", "np.zeros.reshape", "z_corners.reshape", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "boxes3d_to_corners3d", "(", "boxes3d", ",", "rotate", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d: (N, 7) [x, y, z, h, w, l, ry]\n    :param rotate:\n    :return: corners3d: (N, 8, 3)\n    \"\"\"", "\n", "boxes_num", "=", "boxes3d", ".", "shape", "[", "0", "]", "\n", "h", ",", "w", ",", "l", "=", "boxes3d", "[", ":", ",", "3", "]", ",", "boxes3d", "[", ":", ",", "4", "]", ",", "boxes3d", "[", ":", ",", "5", "]", "\n", "x_corners", "=", "np", ".", "array", "(", "[", "l", "/", "2.", ",", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "l", "/", "\n", "2.", ",", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "-", "l", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "# (N, 8)", "\n", "z_corners", "=", "np", ".", "array", "(", "[", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "w", "/", "2.", ",", "w", "/", "\n", "2.", ",", "-", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "w", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "# (N, 8)", "\n", "y_corners", "=", "np", ".", "zeros", "(", "(", "boxes_num", ",", "8", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_corners", "[", ":", ",", "4", ":", "8", "]", "=", "-", "h", ".", "reshape", "(", "boxes_num", ",", "1", ")", ".", "repeat", "(", "4", ",", "axis", "=", "1", ")", "# (N, 8)", "\n", "\n", "if", "rotate", ":", "\n", "        ", "ry", "=", "boxes3d", "[", ":", ",", "6", "]", "\n", "zeros", ",", "ones", "=", "np", ".", "zeros", "(", "ry", ".", "size", ",", "dtype", "=", "np", ".", "float32", ")", ",", "np", ".", "ones", "(", "\n", "ry", ".", "size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rot_list", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "ry", ")", ",", "zeros", ",", "-", "np", ".", "sin", "(", "ry", ")", "]", ",", "\n", "[", "zeros", ",", "ones", ",", "zeros", "]", ",", "\n", "[", "np", ".", "sin", "(", "ry", ")", ",", "zeros", ",", "np", ".", "cos", "(", "ry", ")", "]", "]", ")", "# (3, 3, N)", "\n", "R_list", "=", "np", ".", "transpose", "(", "rot_list", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# (N, 3, 3)", "\n", "\n", "temp_corners", "=", "np", ".", "concatenate", "(", "(", "x_corners", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "y_corners", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "\n", "z_corners", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ")", ",", "axis", "=", "2", ")", "# (N, 8, 3)", "\n", "rotated_corners", "=", "np", ".", "matmul", "(", "temp_corners", ",", "R_list", ")", "# (N, 8, 3)", "\n", "x_corners", ",", "y_corners", ",", "z_corners", "=", "rotated_corners", "[", ":", ",", ":", ",", "\n", "0", "]", ",", "rotated_corners", "[", ":", ",", ":", ",", "1", "]", ",", "rotated_corners", "[", ":", ",", ":", ",", "2", "]", "\n", "\n", "", "x_loc", ",", "y_loc", ",", "z_loc", "=", "boxes3d", "[", ":", ",", "0", "]", ",", "boxes3d", "[", ":", ",", "1", "]", ",", "boxes3d", "[", ":", ",", "2", "]", "\n", "\n", "x", "=", "x_loc", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "x_corners", ".", "reshape", "(", "-", "1", ",", "8", ")", "\n", "y", "=", "y_loc", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "y_corners", ".", "reshape", "(", "-", "1", ",", "8", ")", "\n", "z", "=", "z_loc", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "z_corners", ".", "reshape", "(", "-", "1", ",", "8", ")", "\n", "\n", "corners", "=", "np", ".", "concatenate", "(", "\n", "(", "x", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "z", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "return", "corners", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.boxes3d_to_corners3d_torch": [[109, 144], ["torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "corners_rotated.permute.permute", "torch.cos", "torch.sin", "centers.unsqueeze().expand", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "centers.unsqueeze"], "function", ["None"], ["", "def", "boxes3d_to_corners3d_torch", "(", "boxes3d", ",", "flip", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d: (N, 7) [x, y, z, h, w, l, ry]\n    :return: corners_rotated: (N, 8, 3)\n    \"\"\"", "\n", "boxes_num", "=", "boxes3d", ".", "shape", "[", "0", "]", "\n", "h", ",", "w", ",", "l", ",", "ry", "=", "boxes3d", "[", ":", ",", "3", ":", "4", "]", ",", "boxes3d", "[", ":", ",", "\n", "4", ":", "5", "]", ",", "boxes3d", "[", ":", ",", "5", ":", "6", "]", ",", "boxes3d", "[", ":", ",", "6", ":", "7", "]", "\n", "if", "flip", ":", "\n", "        ", "ry", "=", "ry", "+", "np", ".", "pi", "\n", "", "centers", "=", "boxes3d", "[", ":", ",", "0", ":", "3", "]", "\n", "zeros", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "boxes_num", ",", "1", ")", ".", "fill_", "(", "0", ")", "\n", "ones", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "boxes_num", ",", "1", ")", ".", "fill_", "(", "1", ")", "\n", "\n", "x_corners", "=", "torch", ".", "cat", "(", "[", "l", "/", "2.", ",", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "\n", "l", "/", "2.", ",", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "-", "l", "/", "2.", "]", ",", "dim", "=", "1", ")", "# (N, 8)", "\n", "y_corners", "=", "torch", ".", "cat", "(", "\n", "[", "zeros", ",", "zeros", ",", "zeros", ",", "zeros", ",", "-", "h", ",", "-", "h", ",", "-", "h", ",", "-", "h", "]", ",", "dim", "=", "1", ")", "# (N, 8)", "\n", "z_corners", "=", "torch", ".", "cat", "(", "[", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "w", "/", "2.", ",", "\n", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "w", "/", "2.", "]", ",", "dim", "=", "1", ")", "# (N, 8)", "\n", "corners", "=", "torch", ".", "cat", "(", "(", "x_corners", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "y_corners", ".", "unsqueeze", "(", "\n", "dim", "=", "1", ")", ",", "z_corners", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "# (N, 3, 8)", "\n", "\n", "cosa", ",", "sina", "=", "torch", ".", "cos", "(", "ry", ")", ",", "torch", ".", "sin", "(", "ry", ")", "\n", "raw_1", "=", "torch", ".", "cat", "(", "[", "cosa", ",", "zeros", ",", "sina", "]", ",", "dim", "=", "1", ")", "\n", "raw_2", "=", "torch", ".", "cat", "(", "[", "zeros", ",", "ones", ",", "zeros", "]", ",", "dim", "=", "1", ")", "\n", "raw_3", "=", "torch", ".", "cat", "(", "[", "-", "sina", ",", "zeros", ",", "cosa", "]", ",", "dim", "=", "1", ")", "\n", "R", "=", "torch", ".", "cat", "(", "(", "raw_1", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "raw_2", ".", "unsqueeze", "(", "\n", "dim", "=", "1", ")", ",", "raw_3", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "# (N, 3, 3)", "\n", "\n", "corners_rotated", "=", "torch", ".", "matmul", "(", "R", ",", "corners", ")", "# (N, 3, 8)", "\n", "corners_rotated", "=", "corners_rotated", "+", "centers", ".", "unsqueeze", "(", "dim", "=", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "8", ")", "\n", "corners_rotated", "=", "corners_rotated", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "corners_rotated", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.boxes3d_to_bev_torch": [[146, 160], ["boxes3d.new", "torch.Size"], "function", ["None"], ["", "def", "boxes3d_to_bev_torch", "(", "boxes3d", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d: (N, 7) [x, y, z, h, w, l, ry]\n    :return:\n        boxes_bev: (N, 5) [x1, y1, x2, y2, ry]\n    \"\"\"", "\n", "boxes_bev", "=", "boxes3d", ".", "new", "(", "torch", ".", "Size", "(", "(", "boxes3d", ".", "shape", "[", "0", "]", ",", "5", ")", ")", ")", "\n", "\n", "cu", ",", "cv", "=", "boxes3d", "[", ":", ",", "0", "]", ",", "boxes3d", "[", ":", ",", "2", "]", "\n", "half_l", ",", "half_w", "=", "boxes3d", "[", ":", ",", "5", "]", "/", "2", ",", "boxes3d", "[", ":", ",", "4", "]", "/", "2", "\n", "boxes_bev", "[", ":", ",", "0", "]", ",", "boxes_bev", "[", ":", ",", "1", "]", "=", "cu", "-", "half_l", ",", "cv", "-", "half_w", "\n", "boxes_bev", "[", ":", ",", "2", "]", ",", "boxes_bev", "[", ":", ",", "3", "]", "=", "cu", "+", "half_l", ",", "cv", "+", "half_w", "\n", "boxes_bev", "[", ":", ",", "4", "]", "=", "boxes3d", "[", ":", ",", "6", "]", "\n", "return", "boxes_bev", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.enlarge_box3d": [[162, 173], ["isinstance", "boxes3d.copy", "boxes3d.clone"], "function", ["None"], ["", "def", "enlarge_box3d", "(", "boxes3d", ",", "extra_width", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d: (N, 7) [x, y, z, h, w, l, ry]\n    \"\"\"", "\n", "if", "isinstance", "(", "boxes3d", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "large_boxes3d", "=", "boxes3d", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "large_boxes3d", "=", "boxes3d", ".", "clone", "(", ")", "\n", "", "large_boxes3d", "[", ":", ",", "3", ":", "6", "]", "+=", "extra_width", "*", "2", "\n", "large_boxes3d", "[", ":", ",", "1", "]", "+=", "extra_width", "\n", "return", "large_boxes3d", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.in_hull": [[175, 190], ["isinstance", "scipy.spatial.Delaunay", "scipy.spatial.Delaunay.find_simplex", "print", "numpy.zeros", "str"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["", "def", "in_hull", "(", "p", ",", "hull", ")", ":", "\n", "    ", "\"\"\"\n    :param p: (N, K) test points\n    :param hull: (M, K) M corners of a box\n    :return (N) bool\n    \"\"\"", "\n", "try", ":", "\n", "        ", "if", "not", "isinstance", "(", "hull", ",", "Delaunay", ")", ":", "\n", "            ", "hull", "=", "Delaunay", "(", "hull", ")", "\n", "", "flag", "=", "hull", ".", "find_simplex", "(", "p", ")", ">=", "0", "\n", "", "except", "scipy", ".", "spatial", ".", "qhull", ".", "QhullError", ":", "\n", "        ", "print", "(", "'Warning: not a hull %s'", "%", "str", "(", "hull", ")", ")", "\n", "flag", "=", "np", ".", "zeros", "(", "p", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "", "return", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.objs_to_boxes3d": [[192, 198], ["numpy.zeros", "enumerate", "obj_list.__len__"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object_video.__len__"], ["", "def", "objs_to_boxes3d", "(", "obj_list", ")", ":", "\n", "    ", "boxes3d", "=", "np", ".", "zeros", "(", "(", "obj_list", ".", "__len__", "(", ")", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "obj", "in", "enumerate", "(", "obj_list", ")", ":", "\n", "        ", "boxes3d", "[", "k", ",", "0", ":", "3", "]", ",", "boxes3d", "[", "k", ",", "3", "]", ",", "boxes3d", "[", "k", ",", "4", "]", ",", "boxes3d", "[", "k", ",", "5", "]", ",", "boxes3d", "[", "k", ",", "6", "]", "=", "obj", ".", "pos", ",", "obj", ".", "h", ",", "obj", ".", "w", ",", "obj", ".", "l", ",", "obj", ".", "ry", "\n", "", "return", "boxes3d", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.objs_to_scores": [[200, 205], ["numpy.zeros", "enumerate", "obj_list.__len__"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object_video.__len__"], ["", "def", "objs_to_scores", "(", "obj_list", ")", ":", "\n", "    ", "scores", "=", "np", ".", "zeros", "(", "(", "obj_list", ".", "__len__", "(", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "obj", "in", "enumerate", "(", "obj_list", ")", ":", "\n", "        ", "scores", "[", "k", "]", "=", "obj", ".", "score", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.get_iou3d": [[207, 252], ["numpy.zeros", "numpy.zeros", "range", "range", "A[].sum", "A[].sum", "B[].sum", "B[].sum", "numpy.max", "numpy.min", "numpy.max", "Polygon", "Polygon", "bottom_a.intersection"], "function", ["None"], ["", "def", "get_iou3d", "(", "corners3d", ",", "query_corners3d", ",", "need_bev", "=", "False", ")", ":", "\n", "    ", "\"\"\"\t\n    :param corners3d: (N, 8, 3) in rect coords\t\n    :param query_corners3d: (M, 8, 3)\t\n    :return:\t\n    \"\"\"", "\n", "from", "shapely", ".", "geometry", "import", "Polygon", "\n", "A", ",", "B", "=", "corners3d", ",", "query_corners3d", "\n", "N", ",", "M", "=", "A", ".", "shape", "[", "0", "]", ",", "B", ".", "shape", "[", "0", "]", "\n", "iou3d", "=", "np", ".", "zeros", "(", "(", "N", ",", "M", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "iou_bev", "=", "np", ".", "zeros", "(", "(", "N", ",", "M", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# for height overlap, since y face down, use the negative y", "\n", "min_h_a", "=", "-", "A", "[", ":", ",", "0", ":", "4", ",", "1", "]", ".", "sum", "(", "axis", "=", "1", ")", "/", "4.0", "\n", "max_h_a", "=", "-", "A", "[", ":", ",", "4", ":", "8", ",", "1", "]", ".", "sum", "(", "axis", "=", "1", ")", "/", "4.0", "\n", "min_h_b", "=", "-", "B", "[", ":", ",", "0", ":", "4", ",", "1", "]", ".", "sum", "(", "axis", "=", "1", ")", "/", "4.0", "\n", "max_h_b", "=", "-", "B", "[", ":", ",", "4", ":", "8", ",", "1", "]", ".", "sum", "(", "axis", "=", "1", ")", "/", "4.0", "\n", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "M", ")", ":", "\n", "            ", "max_of_min", "=", "np", ".", "max", "(", "[", "min_h_a", "[", "i", "]", ",", "min_h_b", "[", "j", "]", "]", ")", "\n", "min_of_max", "=", "np", ".", "min", "(", "[", "max_h_a", "[", "i", "]", ",", "max_h_b", "[", "j", "]", "]", ")", "\n", "h_overlap", "=", "np", ".", "max", "(", "[", "0", ",", "min_of_max", "-", "max_of_min", "]", ")", "\n", "if", "h_overlap", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "bottom_a", ",", "bottom_b", "=", "Polygon", "(", "\n", "A", "[", "i", ",", "0", ":", "4", ",", "[", "0", ",", "2", "]", "]", ".", "T", ")", ",", "Polygon", "(", "B", "[", "j", ",", "0", ":", "4", ",", "[", "0", ",", "2", "]", "]", ".", "T", ")", "\n", "if", "bottom_a", ".", "is_valid", "and", "bottom_b", ".", "is_valid", ":", "\n", "# check is valid,  A valid Polygon may not possess any overlapping exterior or interior rings.", "\n", "                ", "bottom_overlap", "=", "bottom_a", ".", "intersection", "(", "bottom_b", ")", ".", "area", "\n", "", "else", ":", "\n", "                ", "bottom_overlap", "=", "0.", "\n", "", "overlap3d", "=", "bottom_overlap", "*", "h_overlap", "\n", "union3d", "=", "bottom_a", ".", "area", "*", "(", "max_h_a", "[", "i", "]", "-", "min_h_a", "[", "i", "]", ")", "+", "bottom_b", ".", "area", "*", "(", "max_h_b", "[", "j", "]", "-", "min_h_b", "[", "j", "]", ")", "-", "overlap3d", "\n", "iou3d", "[", "i", "]", "[", "j", "]", "=", "overlap3d", "/", "union3d", "\n", "iou_bev", "[", "i", "]", "[", "j", "]", "=", "bottom_overlap", "/", "(", "bottom_a", ".", "area", "+", "bottom_b", ".", "area", "-", "bottom_overlap", ")", "\n", "\n", "", "", "if", "need_bev", ":", "\n", "        ", "return", "iou3d", ",", "iou_bev", "\n", "\n", "", "return", "iou3d", "\n", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.object3d.Object3d.__init__": [[12, 30], ["line.strip().split", "object3d.cls_type_to_id", "float", "float", "float", "numpy.array", "float", "float", "float", "numpy.array", "numpy.linalg.norm", "float", "object3d.Object3d.get_obj_level", "float", "line.strip", "float", "float", "float", "float", "float", "float", "float", "line.strip().split.__len__"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.object3d.cls_type_to_id", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.object3d.Object3d.get_obj_level", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object_video.__len__"], ["    ", "def", "__init__", "(", "self", ",", "line", ")", ":", "\n", "        ", "label", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "self", ".", "src", "=", "line", "\n", "self", ".", "cls_type", "=", "label", "[", "0", "]", "\n", "self", ".", "cls_id", "=", "cls_type_to_id", "(", "self", ".", "cls_type", ")", "\n", "self", ".", "trucation", "=", "float", "(", "label", "[", "1", "]", ")", "\n", "self", ".", "occlusion", "=", "float", "(", "label", "[", "2", "]", ")", "# 0:fully visible 1:partly occluded 2:largely occluded 3:unknown", "\n", "self", ".", "alpha", "=", "float", "(", "label", "[", "3", "]", ")", "\n", "self", ".", "box2d", "=", "np", ".", "array", "(", "(", "float", "(", "label", "[", "4", "]", ")", ",", "float", "(", "label", "[", "5", "]", ")", ",", "float", "(", "label", "[", "6", "]", ")", ",", "float", "(", "label", "[", "7", "]", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "h", "=", "float", "(", "label", "[", "8", "]", ")", "\n", "self", ".", "w", "=", "float", "(", "label", "[", "9", "]", ")", "\n", "self", ".", "l", "=", "float", "(", "label", "[", "10", "]", ")", "\n", "self", ".", "pos", "=", "np", ".", "array", "(", "(", "float", "(", "label", "[", "11", "]", ")", ",", "float", "(", "label", "[", "12", "]", ")", ",", "float", "(", "label", "[", "13", "]", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "dis_to_cam", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "pos", ")", "\n", "self", ".", "ry", "=", "float", "(", "label", "[", "14", "]", ")", "\n", "self", ".", "score", "=", "float", "(", "label", "[", "15", "]", ")", "if", "label", ".", "__len__", "(", ")", "==", "16", "else", "-", "1.0", "\n", "self", ".", "level_str", "=", "None", "\n", "self", ".", "level", "=", "self", ".", "get_obj_level", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.object3d.Object3d.get_obj_level": [[31, 46], ["float", "float"], "methods", ["None"], ["", "def", "get_obj_level", "(", "self", ")", ":", "\n", "        ", "height", "=", "float", "(", "self", ".", "box2d", "[", "3", "]", ")", "-", "float", "(", "self", ".", "box2d", "[", "1", "]", ")", "+", "1", "\n", "\n", "if", "height", ">=", "40", "and", "self", ".", "trucation", "<=", "0.15", "and", "self", ".", "occlusion", "<=", "0", ":", "\n", "            ", "self", ".", "level_str", "=", "'Easy'", "\n", "return", "1", "# Easy", "\n", "", "elif", "height", ">=", "25", "and", "self", ".", "trucation", "<=", "0.3", "and", "self", ".", "occlusion", "<=", "1", ":", "\n", "            ", "self", ".", "level_str", "=", "'Moderate'", "\n", "return", "2", "# Moderate", "\n", "", "elif", "height", ">=", "25", "and", "self", ".", "trucation", "<=", "0.5", "and", "self", ".", "occlusion", "<=", "2", ":", "\n", "            ", "self", ".", "level_str", "=", "'Hard'", "\n", "return", "3", "# Hard", "\n", "", "else", ":", "\n", "            ", "self", ".", "level_str", "=", "'UnKnown'", "\n", "return", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.object3d.Object3d.generate_corners3d": [[47, 64], ["numpy.array", "numpy.vstack", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "", "def", "generate_corners3d", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        generate corners3d representation for this object\n        :return corners_3d: (8, 3) corners of box3d in camera coord\n        \"\"\"", "\n", "l", ",", "h", ",", "w", "=", "self", ".", "l", ",", "self", ".", "h", ",", "self", ".", "w", "\n", "x_corners", "=", "[", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", "]", "\n", "y_corners", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "-", "h", ",", "-", "h", ",", "-", "h", ",", "-", "h", "]", "\n", "z_corners", "=", "[", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ",", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", "]", "\n", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "self", ".", "ry", ")", ",", "0", ",", "np", ".", "sin", "(", "self", ".", "ry", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "self", ".", "ry", ")", ",", "0", ",", "np", ".", "cos", "(", "self", ".", "ry", ")", "]", "]", ")", "\n", "corners3d", "=", "np", ".", "vstack", "(", "[", "x_corners", ",", "y_corners", ",", "z_corners", "]", ")", "# (3, 8)", "\n", "corners3d", "=", "np", ".", "dot", "(", "R", ",", "corners3d", ")", ".", "T", "\n", "corners3d", "=", "corners3d", "+", "self", ".", "pos", "\n", "return", "corners3d", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.object3d.Object3d.to_bev_box2d": [[65, 90], ["object3d.Object3d.generate_corners3d", "numpy.zeros", "numpy.clip", "numpy.clip", "numpy.zeros", "numpy.floor().astype", "int", "int", "numpy.floor"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.object3d.Object3d.generate_corners3d"], ["", "def", "to_bev_box2d", "(", "self", ",", "oblique", "=", "True", ",", "voxel_size", "=", "0.1", ")", ":", "\n", "        ", "\"\"\"\n        :param bev_shape: (2) for bev shape (h, w), => (y_max, x_max) in image\n        :param voxel_size: float, 0.1m\n        :param oblique:\n        :return: box2d (4, 2)/ (4) in image coordinate\n        \"\"\"", "\n", "if", "oblique", ":", "\n", "            ", "corners3d", "=", "self", ".", "generate_corners3d", "(", ")", "\n", "xz_corners", "=", "corners3d", "[", "0", ":", "4", ",", "[", "0", ",", "2", "]", "]", "\n", "box2d", "=", "np", ".", "zeros", "(", "(", "4", ",", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "box2d", "[", ":", ",", "0", "]", "=", "(", "(", "xz_corners", "[", ":", ",", "0", "]", "-", "Object3d", ".", "MIN_XZ", "[", "0", "]", ")", "/", "voxel_size", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "box2d", "[", ":", ",", "1", "]", "=", "Object3d", ".", "BEV_SHAPE", "[", "0", "]", "-", "1", "-", "(", "(", "xz_corners", "[", ":", ",", "1", "]", "-", "Object3d", ".", "MIN_XZ", "[", "1", "]", ")", "/", "voxel_size", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "box2d", "[", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "box2d", "[", ":", ",", "0", "]", ",", "0", ",", "Object3d", ".", "BEV_SHAPE", "[", "1", "]", ")", "\n", "box2d", "[", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "box2d", "[", ":", ",", "1", "]", ",", "0", ",", "Object3d", ".", "BEV_SHAPE", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "box2d", "=", "np", ".", "zeros", "(", "4", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# discrete_center = np.floor((self.pos / voxel_size)).astype(np.int32)", "\n", "cu", "=", "np", ".", "floor", "(", "(", "self", ".", "pos", "[", "0", "]", "-", "Object3d", ".", "MIN_XZ", "[", "0", "]", ")", "/", "voxel_size", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "cv", "=", "Object3d", ".", "BEV_SHAPE", "[", "0", "]", "-", "1", "-", "(", "(", "self", ".", "pos", "[", "2", "]", "-", "Object3d", ".", "MIN_XZ", "[", "1", "]", ")", "/", "voxel_size", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "half_l", ",", "half_w", "=", "int", "(", "self", ".", "l", "/", "voxel_size", "/", "2", ")", ",", "int", "(", "self", ".", "w", "/", "voxel_size", "/", "2", ")", "\n", "box2d", "[", "0", "]", ",", "box2d", "[", "1", "]", "=", "cu", "-", "half_l", ",", "cv", "-", "half_w", "\n", "box2d", "[", "2", "]", ",", "box2d", "[", "3", "]", "=", "cu", "+", "half_l", ",", "cv", "+", "half_w", "\n", "\n", "", "return", "box2d", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.object3d.Object3d.to_str": [[91, 96], ["None"], "methods", ["None"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "print_str", "=", "'%s %.3f %.3f %.3f box2d: %s hwl: [%.3f %.3f %.3f] pos: %s ry: %.3f'", "%", "(", "self", ".", "cls_type", ",", "self", ".", "trucation", ",", "self", ".", "occlusion", ",", "self", ".", "alpha", ",", "self", ".", "box2d", ",", "self", ".", "h", ",", "self", ".", "w", ",", "self", ".", "l", ",", "\n", "self", ".", "pos", ",", "self", ".", "ry", ")", "\n", "return", "print_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.object3d.Object3d.to_kitti_format": [[97, 103], ["int"], "methods", ["None"], ["", "def", "to_kitti_format", "(", "self", ")", ":", "\n", "        ", "kitti_str", "=", "'%s %.2f %d %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f'", "%", "(", "self", ".", "cls_type", ",", "self", ".", "trucation", ",", "int", "(", "self", ".", "occlusion", ")", ",", "self", ".", "alpha", ",", "self", ".", "box2d", "[", "0", "]", ",", "self", ".", "box2d", "[", "1", "]", ",", "\n", "self", ".", "box2d", "[", "2", "]", ",", "self", ".", "box2d", "[", "3", "]", ",", "self", ".", "h", ",", "self", ".", "w", ",", "self", ".", "l", ",", "self", ".", "pos", "[", "0", "]", ",", "self", ".", "pos", "[", "1", "]", ",", "self", ".", "pos", "[", "2", "]", ",", "\n", "self", ".", "ry", ")", "\n", "return", "kitti_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.object3d.cls_type_to_id": [[4, 9], ["type_to_id.keys"], "function", ["None"], ["def", "cls_type_to_id", "(", "cls_type", ")", ":", "\n", "    ", "type_to_id", "=", "{", "'Car'", ":", "1", ",", "'Pedestrian'", ":", "2", ",", "'Cyclist'", ":", "3", ",", "'Van'", ":", "4", "}", "\n", "if", "cls_type", "not", "in", "type_to_id", ".", "keys", "(", ")", ":", "\n", "        ", "return", "-", "1", "\n", "", "return", "type_to_id", "[", "cls_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass_volume.hourglass.__init__": [[11, 34], ["nn.Module.__init__", "nn.Sequential", "submodule.convbn_3d", "nn.Sequential", "nn.Sequential", "nn.Sequential", "nn.Sequential", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "nn.ReLU", "nn.ConvTranspose3d", "nn.BatchNorm3d", "nn.ConvTranspose3d", "nn.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ")", ":", "\n", "        ", "super", "(", "hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inplanes", "*", "2", ")", ")", "# +conv2", "\n", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "inplanes", "*", "2", ",", "inplanes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inplanes", ")", ")", "# +x", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass_volume.hourglass.forward": [[35, 55], ["stackhourglass_volume.hourglass.conv1", "stackhourglass_volume.hourglass.conv2", "stackhourglass_volume.hourglass.conv3", "stackhourglass_volume.hourglass.conv4", "stackhourglass_volume.hourglass.conv6", "F.relu", "F.relu", "F.relu", "F.relu", "stackhourglass_volume.hourglass.conv5", "stackhourglass_volume.hourglass.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "presqu", ",", "postsqu", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "# in:1/4 out:1/8", "\n", "pre", "=", "self", ".", "conv2", "(", "out", ")", "# in:1/8 out:1/8", "\n", "if", "postsqu", "is", "not", "None", ":", "\n", "            ", "pre", "=", "F", ".", "relu", "(", "pre", "+", "postsqu", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "pre", "=", "F", ".", "relu", "(", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "pre", ")", "# in:1/8 out:1/16", "\n", "out", "=", "self", ".", "conv4", "(", "out", ")", "# in:1/16 out:1/16", "\n", "\n", "if", "presqu", "is", "not", "None", ":", "\n", "            ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "presqu", ",", "inplace", "=", "True", ")", "# in:1/16 out:1/8", "\n", "", "else", ":", "\n", "            ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "", "out", "=", "self", ".", "conv6", "(", "post", ")", "# in:1/8 out:1/4", "\n", "\n", "return", "out", ",", "pre", ",", "post", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass_volume.PSMNet.__init__": [[58, 119], ["nn.Module.__init__", "submodule.feature_extraction", "nn.Sequential", "nn.Sequential", "stackhourglass_volume.hourglass", "stackhourglass_volume.hourglass", "stackhourglass_volume.hourglass", "nn.Sequential", "nn.Sequential", "nn.Sequential", "nn.Sequential", "nn.Sequential", "nn.Sequential", "stackhourglass_volume.PSMNet.modules", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d"], ["    ", "def", "__init__", "(", "self", ",", "maxdisp", ",", "maxdepth", ",", "down", "=", "2", ",", "scale", "=", "1", ")", ":", "\n", "        ", "super", "(", "PSMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxdisp", "=", "maxdisp", "\n", "self", ".", "down", "=", "down", "\n", "self", ".", "maxdepth", "=", "maxdepth", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "feature_extraction", "=", "feature_extraction", "(", ")", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "64", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "dres2", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "dres3", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "dres4", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "classif1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "self", ".", "classif2", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "self", ".", "classif3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "self", ".", "semantic1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "semantic2", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "semantic3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "kernel_size", "[", "2", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass_volume.PSMNet.warp": [[120, 148], ["x.view.view.transpose().transpose", "x.view.view.size", "x.view.view.view", "int", "xx.view.view.view().repeat", "xx.view.view.view", "torch.arange().view().repeat().float", "yy.view().repeat.view().repeat.view().repeat", "torch.cat().float", "Variable", "nn.functional.grid_sample().contiguous", "output.view().transpose().transpose.view().transpose().transpose.view().transpose().transpose", "output.view().transpose().transpose.view().transpose().transpose.contiguous", "x.view.view.transpose", "torch.arange().float", "xx.view.view.view", "torch.arange().view().repeat", "yy.view().repeat.view().repeat.view", "torch.cat", "max", "max", "nn.functional.grid_sample", "output.view().transpose().transpose.view().transpose().transpose.view().transpose", "torch.arange", "torch.arange().view", "output.view().transpose().transpose.view().transpose().transpose.view", "torch.arange"], "methods", ["None"], ["", "", "", "def", "warp", "(", "self", ",", "x", ",", "calib", ")", ":", "\n", "        ", "\"\"\"\n        warp an image/tensor (im2) back to im1, according to the optical flow\n        x: [B, C, D, H, W] (im2)\n        flo: [B, 2, H, W] flow\n        \"\"\"", "\n", "# B,C,D,H,W to B,H,W,C,D", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "3", ")", ".", "transpose", "(", "2", ",", "4", ")", "\n", "B", ",", "H", ",", "W", ",", "C", ",", "D", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "C", ",", "D", ")", "\n", "# mesh grid", "\n", "xx", "=", "(", "calib", "/", "(", "self", ".", "down", "*", "4.", ")", ")", "[", ":", ",", "None", "]", "/", "torch", ".", "arange", "(", "1", ",", "1", "+", "self", ".", "maxdepth", "//", "self", ".", "down", ",", "device", "=", "'cuda'", ")", ".", "float", "(", ")", "[", "None", ",", ":", "]", "\n", "new_D", "=", "int", "(", "self", ".", "maxdepth", "//", "self", ".", "down", ")", "\n", "xx", "=", "xx", ".", "view", "(", "B", ",", "1", ",", "new_D", ")", ".", "repeat", "(", "1", ",", "C", ",", "1", ")", "\n", "xx", "=", "xx", ".", "view", "(", "B", ",", "C", ",", "new_D", ",", "1", ")", "\n", "yy", "=", "torch", ".", "arange", "(", "0", ",", "C", ",", "device", "=", "'cuda'", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "new_D", ")", ".", "float", "(", ")", "\n", "yy", "=", "yy", ".", "view", "(", "1", ",", "C", ",", "new_D", ",", "1", ")", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "xx", ",", "yy", ")", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "\n", "vgrid", "=", "Variable", "(", "grid", ")", "\n", "\n", "# scale grid to [-1,1]", "\n", "vgrid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "2.0", "*", "vgrid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "/", "max", "(", "D", "-", "1", ",", "1", ")", "-", "1.0", "\n", "vgrid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "2.0", "*", "vgrid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "/", "max", "(", "C", "-", "1", ",", "1", ")", "-", "1.0", "\n", "\n", "output", "=", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "vgrid", ")", ".", "contiguous", "(", ")", "\n", "output", "=", "output", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ",", "new_D", ")", ".", "transpose", "(", "1", ",", "3", ")", ".", "transpose", "(", "2", ",", "4", ")", "\n", "return", "output", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass_volume.PSMNet.interpolate_value": [[149, 173], ["x.permute.permute.permute", "torch.unsqueeze", "torch.clamp", "torch.floor().long", "torch.min", "torch.max", "torch.gather", "torch.gather", "torch.squeeze", "torch.zeros_like", "torch.max.float", "torch.floor", "torch.ones_like"], "methods", ["None"], ["", "def", "interpolate_value", "(", "self", ",", "x", ",", "indices", ",", "maxdepth", ")", ":", "\n", "        ", "\"\"\"\n        bilinear interpolate tensor x at sampled indices\n        x: [B, D, H, W] (features)\n        val: [B, H, W] sampled indices (1-indexed)\n        \"\"\"", "\n", "\n", "# B,D,H,W to B,H,W,D", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "indices", "=", "torch", ".", "unsqueeze", "(", "indices", "-", "1", ",", "-", "1", ")", "\n", "\n", "indices", "=", "torch", ".", "clamp", "(", "indices", ",", "0", ",", "maxdepth", "-", "1", ")", "\n", "idx0", "=", "torch", ".", "floor", "(", "indices", ")", ".", "long", "(", ")", "\n", "idx1", "=", "torch", ".", "min", "(", "idx0", "+", "1", ",", "(", "maxdepth", "-", "1", ")", "*", "torch", ".", "ones_like", "(", "idx0", ")", ")", "\n", "idx0", "=", "torch", ".", "max", "(", "idx1", "-", "1", ",", "torch", ".", "zeros_like", "(", "idx0", ")", ")", "\n", "\n", "y0", "=", "torch", ".", "gather", "(", "x", ",", "-", "1", ",", "idx0", ")", "\n", "y1", "=", "torch", ".", "gather", "(", "x", ",", "-", "1", ",", "idx1", ")", "\n", "\n", "lmbda", "=", "indices", "-", "idx0", ".", "float", "(", ")", "\n", "output", "=", "(", "1", "-", "lmbda", ")", "*", "y0", "+", "(", "lmbda", ")", "*", "y1", "\n", "\n", "output", "=", "torch", ".", "squeeze", "(", "output", ",", "-", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass_volume.PSMNet.off_regress": [[180, 185], ["F.tanh", "torch.clamp"], "methods", ["None"], ["", "def", "off_regress", "(", "self", ",", "off", ")", ":", "\n", "        ", "\"Regress offsets in [0, 1] range\"", "\n", "off", "=", "F", ".", "tanh", "(", "off", ")", "\n", "off", "=", "torch", ".", "clamp", "(", "off", ",", "min", "=", "-", "0.5", ",", "max", "=", "0.5", ")", "+", "0.5", "\n", "return", "off", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass_volume.PSMNet.forward": [[186, 280], ["stackhourglass_volume.PSMNet.feature_extraction", "stackhourglass_volume.PSMNet.feature_extraction", "Variable", "range", "stackhourglass_volume.PSMNet.contiguous", "stackhourglass_volume.PSMNet.warp", "stackhourglass_volume.PSMNet.dres0", "stackhourglass_volume.PSMNet.dres2", "stackhourglass_volume.PSMNet.dres3", "stackhourglass_volume.PSMNet.dres4", "stackhourglass_volume.PSMNet.classif1", "stackhourglass_volume.PSMNet.semantic1", "F.upsample", "F.upsample", "torch.squeeze", "torch.squeeze", "F.softmax", "stackhourglass_volume.PSMNet.off_regress", "torch.cuda.FloatTensor().zero_", "stackhourglass_volume.PSMNet.dres1", "stackhourglass_volume.PSMNet.classif2", "stackhourglass_volume.PSMNet.classif3", "stackhourglass_volume.PSMNet.semantic2", "stackhourglass_volume.PSMNet.semantic3", "F.upsample", "F.upsample", "F.upsample", "F.upsample", "torch.squeeze", "torch.squeeze", "F.softmax", "stackhourglass_volume.PSMNet.off_regress", "torch.squeeze", "torch.squeeze", "F.softmax", "stackhourglass_volume.PSMNet.off_regress", "torch.max", "stackhourglass_volume.PSMNet.interpolate_value", "pred3_out.float", "torch.cuda.FloatTensor", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "stackhourglass_volume.PSMNet.size", "stackhourglass_volume.PSMNet.size", "stackhourglass_volume.PSMNet.size", "stackhourglass_volume.PSMNet.size", "stackhourglass_volume.PSMNet.size", "stackhourglass_volume.PSMNet.size", "stackhourglass_volume.PSMNet.size", "stackhourglass_volume.PSMNet.size"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass.PSMNet.warp", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass_volume.PSMNet.off_regress", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass_volume.PSMNet.off_regress", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass_volume.PSMNet.off_regress", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass_volume.PSMNet.interpolate_value"], ["", "def", "forward", "(", "self", ",", "left", ",", "right", ",", "calib", ",", "out_std", "=", "False", ",", "out_cost_volume", "=", "False", ")", ":", "\n", "\n", "        ", "refimg_fea", "=", "self", ".", "feature_extraction", "(", "left", ")", "\n", "targetimg_fea", "=", "self", ".", "feature_extraction", "(", "right", ")", "\n", "\n", "# matching", "\n", "cost", "=", "Variable", "(", "\n", "torch", ".", "cuda", ".", "FloatTensor", "(", "refimg_fea", ".", "size", "(", ")", "[", "0", "]", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", "*", "2", ",", "self", ".", "maxdisp", "//", "4", ",", "refimg_fea", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "refimg_fea", ".", "size", "(", ")", "[", "3", "]", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "maxdisp", "//", "4", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "cost", "[", ":", ",", ":", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", "i", ":", "]", "=", "refimg_fea", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "\n", "cost", "[", ":", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", "i", ":", "]", "=", "targetimg_fea", "[", ":", ",", ":", ",", ":", ",", ":", "-", "i", "]", "\n", "", "else", ":", "\n", "                ", "cost", "[", ":", ",", ":", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", ":", "]", "=", "refimg_fea", "\n", "cost", "[", ":", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", ":", "]", "=", "targetimg_fea", "\n", "", "", "cost", "=", "cost", ".", "contiguous", "(", ")", "\n", "cost", "=", "self", ".", "warp", "(", "cost", ",", "calib", ")", "\n", "\n", "cost0", "=", "self", ".", "dres0", "(", "cost", ")", "\n", "cost0", "=", "self", ".", "dres1", "(", "cost0", ")", "+", "cost0", "\n", "\n", "out1", ",", "pre1", ",", "post1", "=", "self", ".", "dres2", "(", "cost0", ",", "None", ",", "None", ")", "\n", "out1", "=", "out1", "+", "cost0", "\n", "\n", "out2", ",", "pre2", ",", "post2", "=", "self", ".", "dres3", "(", "out1", ",", "pre1", ",", "post1", ")", "\n", "out2", "=", "out2", "+", "cost0", "\n", "\n", "out3", ",", "pre3", ",", "post3", "=", "self", ".", "dres4", "(", "out2", ",", "pre1", ",", "post2", ")", "\n", "out3", "=", "out3", "+", "cost0", "\n", "\n", "cost1", "=", "self", ".", "classif1", "(", "out1", ")", "\n", "cost2", "=", "self", ".", "classif2", "(", "out2", ")", "+", "cost1", "\n", "cost3", "=", "self", ".", "classif3", "(", "out3", ")", "+", "cost2", "\n", "\n", "off1", "=", "self", ".", "semantic1", "(", "out1", ")", "\n", "off2", "=", "self", ".", "semantic2", "(", "out2", ")", "+", "off1", "\n", "off3", "=", "self", ".", "semantic3", "(", "out3", ")", "+", "off2", "\n", "\n", "if", "out_cost_volume", ":", "\n", "            ", "return", "cost3", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "cost1", "=", "F", ".", "upsample", "(", "cost1", ",", "[", "self", ".", "maxdepth", "//", "self", ".", "scale", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ")", "\n", "cost2", "=", "F", ".", "upsample", "(", "cost2", ",", "[", "self", ".", "maxdepth", "//", "self", ".", "scale", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ")", "\n", "\n", "off1", "=", "F", ".", "upsample", "(", "off1", ",", "[", "self", ".", "maxdepth", "//", "self", ".", "scale", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ")", "\n", "off2", "=", "F", ".", "upsample", "(", "off2", ",", "[", "self", ".", "maxdepth", "//", "self", ".", "scale", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ")", "\n", "\n", "cost1", "=", "torch", ".", "squeeze", "(", "cost1", ",", "1", ")", "\n", "off1", "=", "torch", ".", "squeeze", "(", "off1", ",", "1", ")", "\n", "pred1", "=", "F", ".", "softmax", "(", "cost1", ",", "dim", "=", "1", ")", "\n", "# off1 = F.sigmoid(off1)", "\n", "off1", "=", "self", ".", "off_regress", "(", "off1", ")", "\n", "\n", "# _, pred1_out = torch.max(pred1, 1)", "\n", "# pred1_out = pred1_out.float() + 1  # Make 1-indexed", "\n", "# off1 = self.interpolate_value(off1, pred1_out)", "\n", "\n", "cost2", "=", "torch", ".", "squeeze", "(", "cost2", ",", "1", ")", "\n", "off2", "=", "torch", ".", "squeeze", "(", "off2", ",", "1", ")", "\n", "pred2", "=", "F", ".", "softmax", "(", "cost2", ",", "dim", "=", "1", ")", "\n", "# off2 = F.sigmoid(off2)", "\n", "off2", "=", "self", ".", "off_regress", "(", "off2", ")", "\n", "\n", "# _, pred2_out = torch.max(pred2, 1)", "\n", "# pred2_out = pred2_out.float() + 1  # Make 1-indexed", "\n", "# off2 = self.interpolate_value(off2, pred2_out)", "\n", "\n", "", "cost3", "=", "F", ".", "upsample", "(", "cost3", ",", "[", "self", ".", "maxdepth", "//", "self", ".", "scale", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ")", "\n", "off3", "=", "F", ".", "upsample", "(", "off3", ",", "[", "self", ".", "maxdepth", "//", "self", ".", "scale", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ")", "\n", "\n", "cost3", "=", "torch", ".", "squeeze", "(", "cost3", ",", "1", ")", "\n", "off3", "=", "torch", ".", "squeeze", "(", "off3", ",", "1", ")", "\n", "pred3", "=", "F", ".", "softmax", "(", "cost3", ",", "dim", "=", "1", ")", "\n", "# off3 = F.sigmoid(off3)", "\n", "off3", "=", "self", ".", "off_regress", "(", "off3", ")", "\n", "\n", "# For your information: This formulation 'softmax(c)' learned \"similarity\"", "\n", "# while 'softmax(-c)' learned 'matching cost' as mentioned in the paper.", "\n", "# However, 'c' or '-c' do not affect the performance because feature-based cost volume provided flexibility.", "\n", "\n", "if", "self", ".", "training", ":", "\n", "\n", "            ", "return", "pred1", ",", "pred2", ",", "pred3", ",", "off1", ",", "off2", ",", "off3", "\n", "", "else", ":", "\n", "            ", "_", ",", "pred3_out", "=", "torch", ".", "max", "(", "pred3", ",", "1", ")", "\n", "pred3_out", "=", "pred3_out", ".", "float", "(", ")", "+", "1", "# Make 1-indexed", "\n", "off3_out", "=", "self", ".", "interpolate_value", "(", "off3", ",", "pred3_out", ",", "maxdepth", "=", "self", ".", "maxdepth", "//", "self", ".", "scale", ")", "\n", "\n", "if", "out_std", ":", "\n", "                ", "return", "(", "pred3_out", "+", "off3_out", ")", "*", "self", ".", "scale", ",", "off3_out", "*", "self", ".", "scale", "\n", "", "return", "(", "pred3_out", "+", "off3_out", ")", "*", "self", ".", "scale", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.BasicBlock.__init__": [[27, 37], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "pad", ",", "dilation", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "convbn", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "pad", ",", "dilation", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "convbn", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "pad", ",", "dilation", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.BasicBlock.forward": [[38, 48], ["submodule.BasicBlock.conv1", "submodule.BasicBlock.conv2", "submodule.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "x", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.matchshifted.__init__": [[51, 53], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "matchshifted", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.matchshifted.forward": [[54, 67], ["left.size", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "left", ",", "right", ",", "shift", ")", ":", "\n", "        ", "batch", ",", "filters", ",", "height", ",", "width", "=", "left", ".", "size", "(", ")", "\n", "shifted_left", "=", "F", ".", "pad", "(", "\n", "torch", ".", "index_select", "(", "left", ",", "3", ",", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "[", "i", "for", "i", "in", "range", "(", "shift", ",", "width", ")", "]", ")", ")", ".", "cuda", "(", ")", ")", ",", "\n", "(", "shift", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "shifted_right", "=", "F", ".", "pad", "(", "\n", "torch", ".", "index_select", "(", "right", ",", "3", ",", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "[", "i", "for", "i", "in", "range", "(", "width", "-", "shift", ")", "]", ")", ")", ".", "cuda", "(", ")", ")", ",", "\n", "(", "shift", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "shifted_left", ",", "shifted_right", ")", ",", "1", ")", ".", "view", "(", "\n", "batch", ",", "filters", "*", "2", ",", "1", ",", "height", ",", "width", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.depthregression.__init__": [[70, 76], ["torch.Module.__init__", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "maxdepth", ")", ":", "\n", "        ", "super", "(", "depthregression", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.disp = Variable(torch.Tensor(np.reshape(np.array(range(1, 1+maxdepth)), [1, maxdepth, 1, 1])).cuda(),", "\n", "#                      requires_grad=False)", "\n", "self", ".", "disp", "=", "torch", ".", "arange", "(", "\n", "1", ",", "1", "+", "maxdepth", ",", "device", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.depthregression.forward": [[77, 81], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# disp = self.disp.repeat(x.size()[0], 1, x.size()[2], x.size()[3])", "\n", "        ", "out", "=", "torch", ".", "sum", "(", "x", "*", "self", ".", "disp", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.depthregression_off.__init__": [[84, 90], ["torch.Module.__init__", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "maxdepth", ")", ":", "\n", "        ", "super", "(", "depthregression_off", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.disp = Variable(torch.Tensor(np.reshape(np.array(range(1, 1+maxdepth)), [1, maxdepth, 1, 1])).cuda(),", "\n", "#                      requires_grad=False)", "\n", "self", ".", "disp", "=", "torch", ".", "arange", "(", "\n", "1", ",", "1", "+", "maxdepth", ",", "device", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.depthregression_off.forward": [[91, 95], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "off", ")", ":", "\n", "# disp = self.disp.repeat(x.size()[0], 1, x.size()[2], x.size()[3])", "\n", "        ", "out", "=", "torch", ".", "sum", "(", "x", "*", "(", "self", ".", "disp", "+", "off", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.depthregression_std.__init__": [[98, 103], ["torch.Module.__init__", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "maxdepth", ")", ":", "\n", "        ", "super", "(", "depthregression_std", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.disp = Variable(torch.Tensor(np.reshape(np.array(range(1, 1+maxdepth)), [1, maxdepth, 1, 1])).cuda(), requires_grad=False)", "\n", "self", ".", "disp", "=", "torch", ".", "arange", "(", "\n", "1", ",", "1", "+", "maxdepth", ",", "device", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.depthregression_std.forward": [[104, 110], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "predict", ")", ":", "\n", "        ", "disp", "=", "(", "self", ".", "disp", "-", "predict", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", "**", "2", "\n", "\n", "out", "=", "torch", ".", "sum", "(", "x", "*", "disp", ",", "1", ")", "\n", "out", "=", "torch", ".", "log", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.disparityregression_std.__init__": [[113, 118], ["torch.Module.__init__", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "maxdisp", ")", ":", "\n", "        ", "super", "(", "disparityregression_std", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.disp = Variable(torch.Tensor(np.reshape(np.array(range(maxdisp)),[1,maxdisp,1,1])).cuda(), requires_grad=False)", "\n", "self", ".", "disp", "=", "torch", ".", "arange", "(", "maxdisp", ",", "device", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "[", "\n", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.disparityregression_std.forward": [[119, 125], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "predict", ")", ":", "\n", "        ", "disp", "=", "(", "self", ".", "disp", "-", "predict", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", "**", "2", "\n", "\n", "out", "=", "torch", ".", "sum", "(", "x", "*", "disp", ",", "1", ")", "\n", "out", "=", "out", "**", "0.5", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.disparityregression.__init__": [[128, 134], ["torch.Module.__init__", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "maxdisp", ")", ":", "\n", "        ", "super", "(", "disparityregression", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.disp = Variable(torch.Tensor(np.reshape(np.array(range(maxdisp)), [1, maxdisp, 1, 1])).cuda(),", "\n", "#                      requires_grad=False)", "\n", "self", ".", "disp", "=", "torch", ".", "arange", "(", "maxdisp", ",", "devices", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "[", "\n", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.disparityregression.forward": [[135, 139], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# disp = self.disp.repeat(x.size()[0], 1, x.size()[2], x.size()[3])", "\n", "        ", "out", "=", "torch", ".", "sum", "(", "x", "*", "self", ".", "disp", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.feature_extraction_nodownsample.__init__": [[142, 176], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.feature_extraction_nodownsample._make_layer", "submodule.feature_extraction_nodownsample._make_layer", "submodule.feature_extraction_nodownsample._make_layer", "submodule.feature_extraction_nodownsample._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "feature_extraction_nodownsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "32", "\n", "self", ".", "firstconv", "=", "nn", ".", "Sequential", "(", "convbn", "(", "3", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "64", ",", "16", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "64", ",", "64", ")", ",", "stride", "=", "(", "64", ",", "64", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "32", ",", "32", ")", ",", "stride", "=", "(", "32", ",", "32", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch3", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "16", ",", "16", ")", ",", "stride", "=", "(", "16", ",", "16", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch4", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "8", ",", "8", ")", ",", "stride", "=", "(", "8", ",", "8", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "lastconv", "=", "nn", ".", "Sequential", "(", "convbn", "(", "320", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "8", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.feature_extraction_nodownsample._make_layer": [[177, 193], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ",", "pad", ",", "dilation", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "stride", ",", "downsample", ",", "pad", ",", "dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "None", ",", "pad", ",", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.feature_extraction_nodownsample.forward": [[194, 222], ["submodule.feature_extraction_nodownsample.firstconv", "submodule.feature_extraction_nodownsample.layer1", "submodule.feature_extraction_nodownsample.layer2", "submodule.feature_extraction_nodownsample.layer3", "submodule.feature_extraction_nodownsample.layer4", "submodule.feature_extraction_nodownsample.branch1", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction_nodownsample.branch2", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction_nodownsample.branch3", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction_nodownsample.branch4", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "submodule.feature_extraction_nodownsample.lastconv", "submodule.feature_extraction_nodownsample.size", "submodule.feature_extraction_nodownsample.size", "submodule.feature_extraction_nodownsample.size", "submodule.feature_extraction_nodownsample.size", "submodule.feature_extraction_nodownsample.size", "submodule.feature_extraction_nodownsample.size", "submodule.feature_extraction_nodownsample.size", "submodule.feature_extraction_nodownsample.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "firstconv", "(", "x", ")", "\n", "output", "=", "self", ".", "layer1", "(", "output", ")", "\n", "output_raw", "=", "self", ".", "layer2", "(", "output", ")", "\n", "output", "=", "self", ".", "layer3", "(", "output_raw", ")", "\n", "output_skip", "=", "self", ".", "layer4", "(", "output", ")", "\n", "\n", "output_branch1", "=", "self", ".", "branch1", "(", "output_skip", ")", "\n", "output_branch1", "=", "F", ".", "upsample", "(", "output_branch1", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_branch2", "=", "self", ".", "branch2", "(", "output_skip", ")", "\n", "output_branch2", "=", "F", ".", "upsample", "(", "output_branch2", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_branch3", "=", "self", ".", "branch3", "(", "output_skip", ")", "\n", "output_branch3", "=", "F", ".", "upsample", "(", "output_branch3", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_branch4", "=", "self", ".", "branch4", "(", "output_skip", ")", "\n", "output_branch4", "=", "F", ".", "upsample", "(", "output_branch4", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_feature", "=", "torch", ".", "cat", "(", "\n", "(", "output_raw", ",", "output_skip", ",", "output_branch4", ",", "output_branch3", ",", "output_branch2", ",", "output_branch1", ")", ",", "1", ")", "\n", "output_feature", "=", "self", ".", "lastconv", "(", "output_feature", ")", "\n", "\n", "return", "output_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.feature_extraction_full.__init__": [[225, 259], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.feature_extraction_full._make_layer", "submodule.feature_extraction_full._make_layer", "submodule.feature_extraction_full._make_layer", "submodule.feature_extraction_full._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "feature_extraction_full", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "32", "\n", "self", ".", "firstconv", "=", "nn", ".", "Sequential", "(", "convbn", "(", "3", ",", "32", ",", "3", ",", "(", "2", ",", "1", ")", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "64", ",", "16", ",", "(", "2", ",", "1", ")", ",", "1", ",", "1", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "2", ")", "\n", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "64", ",", "64", ")", ",", "stride", "=", "(", "64", ",", "64", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "32", ",", "32", ")", ",", "stride", "=", "(", "32", ",", "32", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch3", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "16", ",", "16", ")", ",", "stride", "=", "(", "16", ",", "16", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch4", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "8", ",", "8", ")", ",", "stride", "=", "(", "8", ",", "8", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "lastconv", "=", "nn", ".", "Sequential", "(", "convbn", "(", "320", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.feature_extraction_full._make_layer": [[260, 276], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "type", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ",", "pad", ",", "dilation", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "type", "(", "stride", ")", "==", "tuple", "or", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "stride", ",", "downsample", ",", "pad", ",", "dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "None", ",", "pad", ",", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.feature_extraction_full.forward": [[277, 305], ["submodule.feature_extraction_full.firstconv", "submodule.feature_extraction_full.layer1", "submodule.feature_extraction_full.layer2", "submodule.feature_extraction_full.layer3", "submodule.feature_extraction_full.layer4", "submodule.feature_extraction_full.branch1", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction_full.branch2", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction_full.branch3", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction_full.branch4", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "submodule.feature_extraction_full.lastconv", "submodule.feature_extraction_full.size", "submodule.feature_extraction_full.size", "submodule.feature_extraction_full.size", "submodule.feature_extraction_full.size", "submodule.feature_extraction_full.size", "submodule.feature_extraction_full.size", "submodule.feature_extraction_full.size", "submodule.feature_extraction_full.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "firstconv", "(", "x", ")", "\n", "output", "=", "self", ".", "layer1", "(", "output", ")", "\n", "output_raw", "=", "self", ".", "layer2", "(", "output", ")", "\n", "output", "=", "self", ".", "layer3", "(", "output_raw", ")", "\n", "output_skip", "=", "self", ".", "layer4", "(", "output", ")", "\n", "\n", "output_branch1", "=", "self", ".", "branch1", "(", "output_skip", ")", "\n", "output_branch1", "=", "F", ".", "upsample", "(", "output_branch1", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_branch2", "=", "self", ".", "branch2", "(", "output_skip", ")", "\n", "output_branch2", "=", "F", ".", "upsample", "(", "output_branch2", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_branch3", "=", "self", ".", "branch3", "(", "output_skip", ")", "\n", "output_branch3", "=", "F", ".", "upsample", "(", "output_branch3", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_branch4", "=", "self", ".", "branch4", "(", "output_skip", ")", "\n", "output_branch4", "=", "F", ".", "upsample", "(", "output_branch4", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_feature", "=", "torch", ".", "cat", "(", "\n", "(", "output_raw", ",", "output_skip", ",", "output_branch4", ",", "output_branch3", ",", "output_branch2", ",", "output_branch1", ")", ",", "1", ")", "\n", "output_feature", "=", "self", ".", "lastconv", "(", "output_feature", ")", "\n", "\n", "return", "output_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.feature_extraction.__init__": [[308, 342], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.feature_extraction._make_layer", "submodule.feature_extraction._make_layer", "submodule.feature_extraction._make_layer", "submodule.feature_extraction._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "feature_extraction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "32", "\n", "self", ".", "firstconv", "=", "nn", ".", "Sequential", "(", "convbn", "(", "3", ",", "32", ",", "3", ",", "2", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "64", ",", "16", ",", "2", ",", "1", ",", "1", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "2", ")", "\n", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "64", ",", "64", ")", ",", "stride", "=", "(", "64", ",", "64", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "32", ",", "32", ")", ",", "stride", "=", "(", "32", ",", "32", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch3", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "16", ",", "16", ")", ",", "stride", "=", "(", "16", ",", "16", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch4", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "8", ",", "8", ")", ",", "stride", "=", "(", "8", ",", "8", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "lastconv", "=", "nn", ".", "Sequential", "(", "convbn", "(", "320", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.feature_extraction._make_layer": [[343, 359], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ",", "pad", ",", "dilation", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "stride", ",", "downsample", ",", "pad", ",", "dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "None", ",", "pad", ",", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.feature_extraction.forward": [[360, 388], ["submodule.feature_extraction.firstconv", "submodule.feature_extraction.layer1", "submodule.feature_extraction.layer2", "submodule.feature_extraction.layer3", "submodule.feature_extraction.layer4", "submodule.feature_extraction.branch1", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction.branch2", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction.branch3", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction.branch4", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "submodule.feature_extraction.lastconv", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "firstconv", "(", "x", ")", "\n", "output", "=", "self", ".", "layer1", "(", "output", ")", "\n", "output_raw", "=", "self", ".", "layer2", "(", "output", ")", "\n", "output", "=", "self", ".", "layer3", "(", "output_raw", ")", "\n", "output_skip", "=", "self", ".", "layer4", "(", "output", ")", "\n", "\n", "output_branch1", "=", "self", ".", "branch1", "(", "output_skip", ")", "\n", "output_branch1", "=", "F", ".", "upsample", "(", "output_branch1", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_branch2", "=", "self", ".", "branch2", "(", "output_skip", ")", "\n", "output_branch2", "=", "F", ".", "upsample", "(", "output_branch2", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_branch3", "=", "self", ".", "branch3", "(", "output_skip", ")", "\n", "output_branch3", "=", "F", ".", "upsample", "(", "output_branch3", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_branch4", "=", "self", ".", "branch4", "(", "output_skip", ")", "\n", "output_branch4", "=", "F", ".", "upsample", "(", "output_branch4", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_feature", "=", "torch", ".", "cat", "(", "\n", "(", "output_raw", ",", "output_skip", ",", "output_branch4", ",", "output_branch3", ",", "output_branch2", ",", "output_branch1", ")", ",", "1", ")", "\n", "output_feature", "=", "self", ".", "lastconv", "(", "output_feature", ")", "\n", "\n", "return", "output_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.feature_extraction_edge.__init__": [[391, 425], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.feature_extraction_edge._make_layer", "submodule.feature_extraction_edge._make_layer", "submodule.feature_extraction_edge._make_layer", "submodule.feature_extraction_edge._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "feature_extraction_edge", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "32", "\n", "self", ".", "firstconv", "=", "nn", ".", "Sequential", "(", "convbn", "(", "3", ",", "32", ",", "3", ",", "2", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "64", ",", "16", ",", "2", ",", "1", ",", "1", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "2", ")", "\n", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "64", ",", "64", ")", ",", "stride", "=", "(", "64", ",", "64", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "32", ",", "32", ")", ",", "stride", "=", "(", "32", ",", "32", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch3", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "16", ",", "16", ")", ",", "stride", "=", "(", "16", ",", "16", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch4", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "8", ",", "8", ")", ",", "stride", "=", "(", "8", ",", "8", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "lastconv", "=", "nn", ".", "Sequential", "(", "convbn", "(", "320", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.feature_extraction_edge._make_layer": [[426, 442], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ",", "pad", ",", "dilation", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "stride", ",", "downsample", ",", "pad", ",", "dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "None", ",", "pad", ",", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.feature_extraction_edge.forward": [[443, 471], ["submodule.feature_extraction_edge.firstconv", "submodule.feature_extraction_edge.layer1", "submodule.feature_extraction_edge.layer2", "submodule.feature_extraction_edge.layer3", "submodule.feature_extraction_edge.layer4", "submodule.feature_extraction_edge.branch1", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction_edge.branch2", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction_edge.branch3", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction_edge.branch4", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "submodule.feature_extraction_edge.lastconv", "submodule.feature_extraction_edge.size", "submodule.feature_extraction_edge.size", "submodule.feature_extraction_edge.size", "submodule.feature_extraction_edge.size", "submodule.feature_extraction_edge.size", "submodule.feature_extraction_edge.size", "submodule.feature_extraction_edge.size", "submodule.feature_extraction_edge.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "firstconv", "(", "x", ")", "\n", "output", "=", "self", ".", "layer1", "(", "output", ")", "\n", "output_raw", "=", "self", ".", "layer2", "(", "output", ")", "\n", "output", "=", "self", ".", "layer3", "(", "output_raw", ")", "\n", "output_skip", "=", "self", ".", "layer4", "(", "output", ")", "\n", "\n", "output_branch1", "=", "self", ".", "branch1", "(", "output_skip", ")", "\n", "output_branch1", "=", "F", ".", "upsample", "(", "output_branch1", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_branch2", "=", "self", ".", "branch2", "(", "output_skip", ")", "\n", "output_branch2", "=", "F", ".", "upsample", "(", "output_branch2", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_branch3", "=", "self", ".", "branch3", "(", "output_skip", ")", "\n", "output_branch3", "=", "F", ".", "upsample", "(", "output_branch3", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_branch4", "=", "self", ".", "branch4", "(", "output_skip", ")", "\n", "output_branch4", "=", "F", ".", "upsample", "(", "output_branch4", ",", "(", "output_skip", ".", "size", "(", ")", "[", "\n", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "output_feature", "=", "torch", ".", "cat", "(", "\n", "(", "output_raw", ",", "output_skip", ",", "output_branch4", ",", "output_branch3", ",", "output_branch2", ",", "output_branch1", ")", ",", "1", ")", "\n", "output_feature", "=", "self", ".", "lastconv", "(", "output_feature", ")", "\n", "\n", "return", "output_feature", ",", "output_raw", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.convbn": [[11, 15], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d"], "function", ["None"], ["def", "convbn", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "pad", ",", "dilation", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", "if", "dilation", ">", "1", "else", "pad", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.submodule.convbn_3d": [[17, 22], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d"], "function", ["None"], ["", "def", "convbn_3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "pad", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "pad", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass.hourglass.__init__": [[10, 33], ["nn.Module.__init__", "nn.Sequential", "submodule.convbn_3d", "nn.Sequential", "nn.Sequential", "nn.Sequential", "nn.Sequential", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "nn.ReLU", "nn.ConvTranspose3d", "nn.BatchNorm3d", "nn.ConvTranspose3d", "nn.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ")", ":", "\n", "        ", "super", "(", "hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inplanes", "*", "2", ")", ")", "# +conv2", "\n", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "inplanes", "*", "2", ",", "inplanes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inplanes", ")", ")", "# +x", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass.hourglass.forward": [[34, 54], ["stackhourglass.hourglass.conv1", "stackhourglass.hourglass.conv2", "stackhourglass.hourglass.conv3", "stackhourglass.hourglass.conv4", "stackhourglass.hourglass.conv6", "F.relu", "F.relu", "F.relu", "F.relu", "stackhourglass.hourglass.conv5", "stackhourglass.hourglass.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "presqu", ",", "postsqu", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "# in:1/4 out:1/8", "\n", "pre", "=", "self", ".", "conv2", "(", "out", ")", "# in:1/8 out:1/8", "\n", "if", "postsqu", "is", "not", "None", ":", "\n", "            ", "pre", "=", "F", ".", "relu", "(", "pre", "+", "postsqu", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "pre", "=", "F", ".", "relu", "(", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "pre", ")", "# in:1/8 out:1/16", "\n", "out", "=", "self", ".", "conv4", "(", "out", ")", "# in:1/16 out:1/16", "\n", "\n", "if", "presqu", "is", "not", "None", ":", "\n", "            ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "presqu", ",", "inplace", "=", "True", ")", "# in:1/16 out:1/8", "\n", "", "else", ":", "\n", "            ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "", "out", "=", "self", ".", "conv6", "(", "post", ")", "# in:1/8 out:1/4", "\n", "\n", "return", "out", ",", "pre", ",", "post", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass.PSMNet.__init__": [[57, 107], ["nn.Module.__init__", "submodule.feature_extraction", "nn.Sequential", "nn.Sequential", "stackhourglass.hourglass", "stackhourglass.hourglass", "stackhourglass.hourglass", "nn.Sequential", "nn.Sequential", "nn.Sequential", "stackhourglass.PSMNet.modules", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d"], ["    ", "def", "__init__", "(", "self", ",", "maxdisp", ",", "maxdepth", ",", "down", "=", "2", ")", ":", "\n", "        ", "super", "(", "PSMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxdisp", "=", "maxdisp", "\n", "self", ".", "down", "=", "down", "\n", "self", ".", "maxdepth", "=", "maxdepth", "\n", "\n", "self", ".", "feature_extraction", "=", "feature_extraction", "(", ")", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "64", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "dres2", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "dres3", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "dres4", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "classif1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "self", ".", "classif2", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "self", ".", "classif3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "kernel_size", "[", "2", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass.PSMNet.warp": [[108, 136], ["x.view.view.transpose().transpose", "x.view.view.size", "x.view.view.view", "xx.view.view.view().repeat", "xx.view.view.view", "torch.arange().view().repeat().float", "yy.view().repeat.view().repeat.view().repeat", "torch.cat().float", "Variable", "nn.functional.grid_sample().contiguous", "output.view().transpose().transpose.view().transpose().transpose.view().transpose().transpose", "output.view().transpose().transpose.view().transpose().transpose.contiguous", "x.view.view.transpose", "torch.arange().float", "xx.view.view.view", "torch.arange().view().repeat", "yy.view().repeat.view().repeat.view", "torch.cat", "max", "max", "nn.functional.grid_sample", "output.view().transpose().transpose.view().transpose().transpose.view().transpose", "torch.arange", "torch.arange().view", "output.view().transpose().transpose.view().transpose().transpose.view", "torch.arange"], "methods", ["None"], ["", "", "", "def", "warp", "(", "self", ",", "x", ",", "calib", ")", ":", "\n", "        ", "\"\"\"\n        warp an image/tensor (im2) back to im1, according to the optical flow\n        x: [B, C, D, H, W] (im2)\n        flo: [B, 2, H, W] flow\n        \"\"\"", "\n", "# B,C,D,H,W to B,H,W,C,D", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "3", ")", ".", "transpose", "(", "2", ",", "4", ")", "\n", "B", ",", "H", ",", "W", ",", "C", ",", "D", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "C", ",", "D", ")", "\n", "# mesh grid", "\n", "xx", "=", "(", "calib", "/", "(", "self", ".", "down", "*", "4.", ")", ")", "[", ":", ",", "None", "]", "/", "torch", ".", "arange", "(", "1", ",", "1", "+", "self", ".", "maxdepth", "//", "self", ".", "down", ",", "device", "=", "'cuda'", ")", ".", "float", "(", ")", "[", "None", ",", ":", "]", "\n", "new_D", "=", "self", ".", "maxdepth", "//", "self", ".", "down", "\n", "xx", "=", "xx", ".", "view", "(", "B", ",", "1", ",", "new_D", ")", ".", "repeat", "(", "1", ",", "C", ",", "1", ")", "\n", "xx", "=", "xx", ".", "view", "(", "B", ",", "C", ",", "new_D", ",", "1", ")", "\n", "yy", "=", "torch", ".", "arange", "(", "0", ",", "C", ",", "device", "=", "'cuda'", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "new_D", ")", ".", "float", "(", ")", "\n", "yy", "=", "yy", ".", "view", "(", "1", ",", "C", ",", "new_D", ",", "1", ")", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "xx", ",", "yy", ")", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "\n", "vgrid", "=", "Variable", "(", "grid", ")", "\n", "\n", "# scale grid to [-1,1]", "\n", "vgrid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "2.0", "*", "vgrid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "/", "max", "(", "D", ",", "1", ")", "-", "1.0", "\n", "vgrid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "2.0", "*", "vgrid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "/", "max", "(", "C", "-", "1", ",", "1", ")", "-", "1.0", "\n", "\n", "output", "=", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "vgrid", ")", ".", "contiguous", "(", ")", "\n", "output", "=", "output", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ",", "new_D", ")", ".", "transpose", "(", "1", ",", "3", ")", ".", "transpose", "(", "2", ",", "4", ")", "\n", "return", "output", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass.PSMNet.forward": [[138, 203], ["stackhourglass.PSMNet.feature_extraction", "stackhourglass.PSMNet.feature_extraction", "Variable", "range", "stackhourglass.PSMNet.contiguous", "stackhourglass.PSMNet.warp", "stackhourglass.PSMNet.dres0", "stackhourglass.PSMNet.dres2", "stackhourglass.PSMNet.dres3", "stackhourglass.PSMNet.dres4", "stackhourglass.PSMNet.classif1", "F.upsample", "torch.squeeze", "F.softmax", "torch.cuda.FloatTensor().zero_", "stackhourglass.PSMNet.dres1", "stackhourglass.PSMNet.classif2", "stackhourglass.PSMNet.classif3", "F.upsample", "F.upsample", "torch.squeeze", "F.softmax", "torch.squeeze", "F.softmax", "submodule.depthregression", "submodule.depthregression", "submodule.depthregression", "torch.cuda.FloatTensor", "left.size", "left.size", "submodule.depthregression_std", "left.size", "left.size", "left.size", "left.size", "stackhourglass.PSMNet.size", "stackhourglass.PSMNet.size", "stackhourglass.PSMNet.size", "stackhourglass.PSMNet.size", "stackhourglass.PSMNet.size", "stackhourglass.PSMNet.size", "stackhourglass.PSMNet.size", "stackhourglass.PSMNet.size"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.models.stackhourglass.PSMNet.warp"], ["", "def", "forward", "(", "self", ",", "left", ",", "right", ",", "calib", ",", "out_std", "=", "False", ",", "out_cost_volume", "=", "False", ")", ":", "\n", "\n", "        ", "refimg_fea", "=", "self", ".", "feature_extraction", "(", "left", ")", "\n", "targetimg_fea", "=", "self", ".", "feature_extraction", "(", "right", ")", "\n", "\n", "# matching", "\n", "cost", "=", "Variable", "(", "\n", "torch", ".", "cuda", ".", "FloatTensor", "(", "refimg_fea", ".", "size", "(", ")", "[", "0", "]", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", "*", "2", ",", "self", ".", "maxdisp", "//", "4", ",", "refimg_fea", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "refimg_fea", ".", "size", "(", ")", "[", "3", "]", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "maxdisp", "//", "4", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "cost", "[", ":", ",", ":", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", "i", ":", "]", "=", "refimg_fea", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "\n", "cost", "[", ":", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", "i", ":", "]", "=", "targetimg_fea", "[", ":", ",", ":", ",", ":", ",", ":", "-", "i", "]", "\n", "", "else", ":", "\n", "                ", "cost", "[", ":", ",", ":", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", ":", "]", "=", "refimg_fea", "\n", "cost", "[", ":", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", ":", "]", "=", "targetimg_fea", "\n", "", "", "cost", "=", "cost", ".", "contiguous", "(", ")", "\n", "cost", "=", "self", ".", "warp", "(", "cost", ",", "calib", ")", "\n", "\n", "cost0", "=", "self", ".", "dres0", "(", "cost", ")", "\n", "cost0", "=", "self", ".", "dres1", "(", "cost0", ")", "+", "cost0", "\n", "\n", "out1", ",", "pre1", ",", "post1", "=", "self", ".", "dres2", "(", "cost0", ",", "None", ",", "None", ")", "\n", "out1", "=", "out1", "+", "cost0", "\n", "\n", "out2", ",", "pre2", ",", "post2", "=", "self", ".", "dres3", "(", "out1", ",", "pre1", ",", "post1", ")", "\n", "out2", "=", "out2", "+", "cost0", "\n", "\n", "out3", ",", "pre3", ",", "post3", "=", "self", ".", "dres4", "(", "out2", ",", "pre1", ",", "post2", ")", "\n", "out3", "=", "out3", "+", "cost0", "\n", "\n", "cost1", "=", "self", ".", "classif1", "(", "out1", ")", "\n", "cost2", "=", "self", ".", "classif2", "(", "out2", ")", "+", "cost1", "\n", "cost3", "=", "self", ".", "classif3", "(", "out3", ")", "+", "cost2", "\n", "if", "out_cost_volume", ":", "\n", "            ", "return", "cost3", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "cost1", "=", "F", ".", "upsample", "(", "cost1", ",", "[", "self", ".", "maxdepth", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ")", "\n", "cost2", "=", "F", ".", "upsample", "(", "cost2", ",", "[", "self", ".", "maxdepth", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ")", "\n", "\n", "cost1", "=", "torch", ".", "squeeze", "(", "cost1", ",", "1", ")", "\n", "pred1", "=", "F", ".", "softmax", "(", "cost1", ",", "dim", "=", "1", ")", "\n", "pred1", "=", "depthregression", "(", "self", ".", "maxdepth", ")", "(", "pred1", ")", "\n", "\n", "cost2", "=", "torch", ".", "squeeze", "(", "cost2", ",", "1", ")", "\n", "pred2", "=", "F", ".", "softmax", "(", "cost2", ",", "dim", "=", "1", ")", "\n", "pred2", "=", "depthregression", "(", "self", ".", "maxdepth", ")", "(", "pred2", ")", "\n", "\n", "", "cost3", "=", "F", ".", "upsample", "(", "cost3", ",", "[", "self", ".", "maxdepth", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ")", "\n", "cost3", "=", "torch", ".", "squeeze", "(", "cost3", ",", "1", ")", "\n", "pred3", "=", "F", ".", "softmax", "(", "cost3", ",", "dim", "=", "1", ")", "\n", "# For your information: This formulation 'softmax(c)' learned \"similarity\"", "\n", "# while 'softmax(-c)' learned 'matching cost' as mentioned in the paper.", "\n", "# However, 'c' or '-c' do not affect the performance because feature-based cost volume provided flexibility.", "\n", "pred3_out", "=", "depthregression", "(", "self", ".", "maxdepth", ")", "(", "pred3", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "pred1", ",", "pred2", ",", "pred3_out", "\n", "", "else", ":", "\n", "            ", "if", "out_std", ":", "\n", "                ", "std", "=", "depthregression_std", "(", "self", ".", "maxdepth", ")", "(", "pred3", ",", "pred3_out", ")", "\n", "return", "pred3_out", ",", "std", "\n", "", "return", "pred3_out", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTI_submission_loader.SubmiteDataset.__init__": [[49, 85], ["sorted", "torchvision.Normalize", "torchvision.Compose", "open", "x.strip", "torchvision.ToTensor", "f.readlines", "len", "x.strip"], "methods", ["None"], ["right_fold", "=", "'image_3/'", "\n", "calib_fold", "=", "'calib/'", "\n", "with", "open", "(", "split", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "image", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "", "image", "=", "sorted", "(", "image", ")", "\n", "\n", "if", "kitti2015", ":", "\n", "            ", "self", ".", "left_test", "=", "[", "filepath", "+", "'/'", "+", "left_fold", "+", "\n", "img", "+", "'_10.png'", "for", "img", "in", "image", "]", "\n", "self", ".", "right_test", "=", "[", "filepath", "+", "'/'", "+", "\n", "right_fold", "+", "img", "+", "'_10.png'", "for", "img", "in", "image", "]", "\n", "self", ".", "calib_test", "=", "[", "filepath", "+", "'/'", "+", "\n", "calib_fold", "+", "img", "+", "'.txt'", "for", "img", "in", "image", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "left_test", "=", "[", "filepath", "+", "'/'", "+", "\n", "left_fold", "+", "img", "+", "'.png'", "for", "img", "in", "image", "]", "\n", "self", ".", "right_test", "=", "[", "filepath", "+", "'/'", "+", "\n", "right_fold", "+", "img", "+", "'.png'", "for", "img", "in", "image", "]", "\n", "self", ".", "calib_test", "=", "[", "filepath", "+", "'/'", "+", "\n", "calib_fold", "+", "img", "+", "'.txt'", "for", "img", "in", "image", "]", "\n", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "trans", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "left_img", "=", "self", ".", "left_test", "[", "item", "]", "\n", "right_img", "=", "self", ".", "right_test", "[", "item", "]", "\n", "calib_info", "=", "read_calib_file", "(", "self", ".", "calib_test", "[", "item", "]", ")", "\n", "if", "self", ".", "dynamic_bs", ":", "\n", "            ", "calib", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "[", "\n", "0", ",", "0", "]", "*", "dynamic_baseline", "(", "calib_info", ")", "\n", "", "else", ":", "\n", "            ", "calib", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "[", "0", ",", "0", "]", "*", "0.54", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTI_submission_loader.SubmiteDataset.__getitem__": [[87, 113], ["KITTI_submission_loader.read_calib_file", "PIL.open().convert", "PIL.open().convert", "torch.pad", "torch.pad", "numpy.array", "KITTI_submission_loader.SubmiteDataset.trans", "KITTI_submission_loader.SubmiteDataset.trans", "imgL[].float", "imgR[].float", "numpy.array.item", "PIL.open", "PIL.open", "KITTI_submission_loader.SubmiteDataset.left_test[].split", "KITTI_submission_loader.dynamic_baseline", "numpy.reshape", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.read_calib_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.dynamic_baseline"], ["imgR", "=", "Image", ".", "open", "(", "right_img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "imgL", "=", "self", ".", "trans", "(", "imgL", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "imgR", "=", "self", ".", "trans", "(", "imgR", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "# pad to (384, 1248)", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "imgL", ".", "shape", "\n", "top_pad", "=", "384", "-", "H", "\n", "right_pad", "=", "1248", "-", "W", "\n", "imgL", "=", "F", ".", "pad", "(", "imgL", ",", "(", "0", ",", "right_pad", ",", "top_pad", ",", "0", ")", ",", "\"constant\"", ",", "0", ")", "\n", "imgR", "=", "F", ".", "pad", "(", "imgR", ",", "(", "0", ",", "right_pad", ",", "top_pad", ",", "0", ")", ",", "\"constant\"", ",", "0", ")", "\n", "filename", "=", "self", ".", "left_test", "[", "item", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "\n", "return", "imgL", "[", "0", "]", ".", "float", "(", ")", ",", "imgR", "[", "0", "]", ".", "float", "(", ")", ",", "calib", ".", "item", "(", ")", ",", "H", ",", "W", ",", "filename", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "left_test", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTI_submission_loader.SubmiteDataset.__len__": [[114, 116], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTI_submission_loader.read_calib_file": [[9, 23], ["open", "f.readlines", "line.rstrip.rstrip", "line.rstrip.split", "len", "numpy.array", "float", "value.split"], "function", ["None"], ["    ", "data", "=", "{", "}", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "try", ":", "\n", "                ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "value", ".", "split", "(", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "\n", "", "", "", "return", "data", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTI_submission_loader.dataloader": [[25, 39], ["open", "x.strip", "f.readlines", "len", "x.strip"], "function", ["None"], ["    ", "left_fold", "=", "'image_2/'", "\n", "right_fold", "=", "'image_3/'", "\n", "calib_fold", "=", "'calib/'", "\n", "with", "open", "(", "split", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "image", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "\n", "", "left_test", "=", "[", "filepath", "+", "left_fold", "+", "img", "+", "'.png'", "for", "img", "in", "image", "]", "\n", "right_test", "=", "[", "filepath", "+", "right_fold", "+", "img", "+", "'.png'", "for", "img", "in", "image", "]", "\n", "calib_test", "=", "[", "filepath", "+", "calib_fold", "+", "img", "+", "'.txt'", "for", "img", "in", "image", "]", "\n", "\n", "return", "left_test", ",", "right_test", ",", "calib_test", "\n", "\n", "\n", "", "def", "dynamic_baseline", "(", "calib_info", ")", ":", "\n", "    ", "P3", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P3'", "]", ",", "[", "3", ",", "4", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTI_submission_loader.dynamic_baseline": [[41, 46], ["numpy.reshape", "numpy.reshape"], "function", ["None"], ["baseline", "=", "P3", "[", "0", ",", "3", "]", "/", "(", "-", "P3", "[", "0", ",", "0", "]", ")", "-", "P", "[", "0", ",", "3", "]", "/", "(", "-", "P", "[", "0", ",", "0", "]", ")", "\n", "return", "baseline", "\n", "\n", "\n", "", "class", "SubmiteDataset", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "filepath", ",", "split", ",", "dynamic_bs", "=", "False", ",", "kitti2015", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader3D_object.is_image_file": [[7, 9], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader3D_object.dataloader": [[11, 46], ["open", "open", "x.strip", "x.strip", "f.readlines", "f.readlines", "len", "len", "x.strip", "x.strip"], "function", ["None"], ["", "def", "dataloader", "(", "filepath", ",", "train_file", ",", "val_file", ",", "kitti2015", "=", "False", ")", ":", "\n", "    ", "left_fold", "=", "'image_2/'", "\n", "right_fold", "=", "'image_3/'", "\n", "lidar", "=", "'velodyne/'", "\n", "object_3d", "=", "'label_2/'", "\n", "\n", "calib", "=", "'calib/'", "\n", "\n", "with", "open", "(", "train_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "train_idx", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "", "with", "open", "(", "val_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "val_idx", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "\n", "", "left_train", "=", "[", "filepath", "+", "'/'", "+", "left_fold", "+", "\n", "img", "+", "'.png'", "for", "img", "in", "train_idx", "]", "\n", "right_train", "=", "[", "filepath", "+", "'/'", "+", "right_fold", "+", "\n", "img", "+", "'.png'", "for", "img", "in", "train_idx", "]", "\n", "lidar_train", "=", "[", "filepath", "+", "'/'", "+", "lidar", "+", "\n", "img", "+", "'.npy'", "for", "img", "in", "train_idx", "]", "\n", "object3d_train", "=", "[", "filepath", "+", "'/'", "+", "object_3d", "+", "\n", "img", "+", "'.npy'", "for", "img", "in", "train_idx", "]", "\n", "calib_train", "=", "[", "filepath", "+", "'/'", "+", "calib", "+", "\n", "img", "+", "'.txt'", "for", "img", "in", "train_idx", "]", "\n", "\n", "left_val", "=", "[", "filepath", "+", "'/'", "+", "left_fold", "+", "\n", "img", "+", "'.png'", "for", "img", "in", "val_idx", "]", "\n", "right_val", "=", "[", "filepath", "+", "'/'", "+", "right_fold", "+", "\n", "img", "+", "'.png'", "for", "img", "in", "val_idx", "]", "\n", "lidar_val", "=", "[", "filepath", "+", "'/'", "+", "lidar", "+", "\n", "img", "+", "'.npy'", "for", "img", "in", "val_idx", "]", "\n", "object3d_val", "=", "[", "filepath", "+", "'/'", "+", "object_3d", "+", "\n", "img", "+", "'.npy'", "for", "img", "in", "val_idx", "]", "\n", "calib_val", "=", "[", "filepath", "+", "'/'", "+", "calib", "+", "img", "+", "'.txt'", "for", "img", "in", "val_idx", "]", "\n", "\n", "return", "[", "left_train", ",", "right_train", ",", "lidar_train", ",", "object3d_train", ",", "calib_train", "]", ",", "[", "left_val", ",", "right_val", ",", "lidar_val", ",", "object3d_val", ",", "calib_val", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.SceneFlow_submission_loader.myImageFloder.__init__": [[28, 43], ["torchvision.Normalize", "torchvision.Compose", "torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "training", ",", "calib", "=", "1417.", ",", "loader", "=", "default_loader", ",", "dploader", "=", "disparity_loader", ")", ":", "\n", "        ", "left", ",", "right", ",", "left_disparity", ",", "=", "data", "\n", "self", ".", "left", "=", "left", "\n", "self", ".", "right", "=", "right", "\n", "self", ".", "disp_L", "=", "left_disparity", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "dploader", "=", "dploader", "\n", "self", ".", "training", "=", "training", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "self", ".", "calib", "=", "calib", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.SceneFlow_submission_loader.myImageFloder.__getitem__": [[44, 77], ["print", "SceneFlow_submission_loader.myImageFloder.loader", "SceneFlow_submission_loader.myImageFloder.loader", "SceneFlow_submission_loader.myImageFloder.dploader", "numpy.ascontiguousarray", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "SceneFlow_submission_loader.myImageFloder.transform", "SceneFlow_submission_loader.myImageFloder.transform", "torch.pad.float", "torch.pad.float", "torch.from_numpy.float", "torch.from_numpy.float", "torch.from_numpy.float", "torch.from_numpy.float", "SceneFlow_submission_loader.myImageFloder.left[].split"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "left", "=", "self", ".", "left", "[", "index", "]", "\n", "right", "=", "self", ".", "right", "[", "index", "]", "\n", "disp_L", "=", "self", ".", "disp_L", "[", "index", "]", "\n", "print", "(", "left", ")", "\n", "left_img", "=", "self", ".", "loader", "(", "left", ")", "\n", "right_img", "=", "self", ".", "loader", "(", "right", ")", "\n", "dataL", ",", "scaleL", "=", "self", ".", "dploader", "(", "disp_L", ")", "\n", "dataL", "=", "np", ".", "ascontiguousarray", "(", "dataL", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "'15mm'", "in", "left", ":", "\n", "            ", "calib", "=", "self", ".", "calib", "/", "2.33", "*", "0.54", "\n", "", "else", ":", "\n", "            ", "calib", "=", "self", ".", "calib", "*", "0.54", "\n", "\n", "# mask = dataL >= 1.", "\n", "# dataL[1-mask] = 0", "\n", "# dataL[mask] = calib / np.clip(dataL[mask], 1., None)", "\n", "", "dataL", "=", "torch", ".", "from_numpy", "(", "dataL", ")", "\n", "\n", "left_img", "=", "self", ".", "transform", "(", "left_img", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "right_img", "=", "self", ".", "transform", "(", "right_img", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "# dataL_pad = torch.zeros((dataL.shape[0]+4,dataL.shape[1]))", "\n", "# dataL_pad[4:,:] = dataL", "\n", "# dataL = dataL_pad", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "left_img", ".", "shape", "\n", "top_pad", "=", "544", "-", "H", "\n", "right_pad", "=", "960", "-", "W", "\n", "\n", "left_img", "=", "F", ".", "pad", "(", "left_img", ",", "(", "0", ",", "right_pad", ",", "top_pad", ",", "0", ")", ",", "\"constant\"", ",", "0", ")", "\n", "right_img", "=", "F", ".", "pad", "(", "right_img", ",", "(", "0", ",", "right_pad", ",", "top_pad", ",", "0", ")", ",", "\"constant\"", ",", "0", ")", "\n", "filename", "=", "self", ".", "left", "[", "index", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "\n", "return", "left_img", ".", "float", "(", ")", ",", "right_img", ".", "float", "(", ")", ",", "dataL", ".", "float", "(", ")", ",", "H", ",", "W", ",", "\"sample\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.SceneFlow_submission_loader.myImageFloder.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "left", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.SceneFlow_submission_loader.is_image_file": [[17, 19], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.SceneFlow_submission_loader.default_loader": [[20, 22], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.SceneFlow_submission_loader.disparity_loader": [[23, 25], ["readpfm.readPFM"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.readpfm.readPFM"], ["", "def", "disparity_loader", "(", "path", ")", ":", "\n", "    ", "return", "rp", ".", "readPFM", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.readpfm.readPFM": [[6, 43], ["open", "open.readline().rstrip", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "open.close", "open.readline().decode", "map", "Exception", "open.readline().rstrip", "open.readline", "Exception", "re.match.groups", "open.readline", "open.readline"], "function", ["None"], ["def", "readPFM", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", "==", "b'PF'", ":", "\n", "        ", "color", "=", "True", "\n", "", "elif", "header", "==", "b'Pf'", ":", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "file", ".", "readline", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "if", "dim_match", ":", "\n", "        ", "width", ",", "height", "=", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "        ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "        ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "file", ".", "close", "(", ")", "\n", "return", "data", ",", "scale", "\n", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader3D.is_image_file": [[4, 6], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader3D.dataloader": [[8, 46], ["open", "open", "x.strip", "x.strip", "f.readlines", "f.readlines", "len", "len", "x.strip", "x.strip"], "function", ["None"], ["", "def", "dataloader", "(", "filepath", ",", "train_file", ",", "val_file", ",", "kitti2015", "=", "False", ")", ":", "\n", "    ", "left_fold", "=", "\"image_2/\"", "\n", "right_fold", "=", "\"image_3/\"", "\n", "if", "kitti2015", ":", "\n", "        ", "depth_L", "=", "\"disp_occ_0/\"", "\n", "", "else", ":", "\n", "        ", "depth_L", "=", "\"depth_map/\"", "\n", "", "calib", "=", "\"calib/\"", "\n", "\n", "with", "open", "(", "train_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "train_idx", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "", "with", "open", "(", "val_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "val_idx", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "", "if", "kitti2015", ":", "\n", "        ", "left_train", "=", "[", "filepath", "+", "\"/\"", "+", "left_fold", "+", "img", "+", "\"_10.png\"", "for", "img", "in", "train_idx", "]", "\n", "right_train", "=", "[", "filepath", "+", "\"/\"", "+", "right_fold", "+", "img", "+", "\"_10.png\"", "for", "img", "in", "train_idx", "]", "\n", "depth_train", "=", "[", "filepath", "+", "\"/\"", "+", "depth_L", "+", "img", "+", "\"_10.png\"", "for", "img", "in", "train_idx", "]", "\n", "calib_train", "=", "[", "filepath", "+", "\"/\"", "+", "calib", "+", "img", "+", "\".txt\"", "for", "img", "in", "train_idx", "]", "\n", "\n", "left_val", "=", "[", "filepath", "+", "\"/\"", "+", "left_fold", "+", "img", "+", "\"_10.png\"", "for", "img", "in", "val_idx", "]", "\n", "right_val", "=", "[", "filepath", "+", "\"/\"", "+", "right_fold", "+", "img", "+", "\"_10.png\"", "for", "img", "in", "val_idx", "]", "\n", "depth_val", "=", "[", "filepath", "+", "\"/\"", "+", "depth_L", "+", "img", "+", "\"_10.png\"", "for", "img", "in", "val_idx", "]", "\n", "calib_val", "=", "[", "filepath", "+", "\"/\"", "+", "calib", "+", "img", "+", "\".txt\"", "for", "img", "in", "val_idx", "]", "\n", "", "else", ":", "\n", "        ", "left_train", "=", "[", "filepath", "+", "\"/\"", "+", "left_fold", "+", "img", "+", "\".png\"", "for", "img", "in", "train_idx", "]", "\n", "right_train", "=", "[", "filepath", "+", "\"/\"", "+", "right_fold", "+", "img", "+", "\".png\"", "for", "img", "in", "train_idx", "]", "\n", "depth_train", "=", "[", "filepath", "+", "\"/\"", "+", "depth_L", "+", "img", "+", "\".npy\"", "for", "img", "in", "train_idx", "]", "\n", "calib_train", "=", "[", "filepath", "+", "\"/\"", "+", "calib", "+", "img", "+", "\".txt\"", "for", "img", "in", "train_idx", "]", "\n", "\n", "left_val", "=", "[", "filepath", "+", "\"/\"", "+", "left_fold", "+", "img", "+", "\".png\"", "for", "img", "in", "val_idx", "]", "\n", "right_val", "=", "[", "filepath", "+", "\"/\"", "+", "right_fold", "+", "img", "+", "\".png\"", "for", "img", "in", "val_idx", "]", "\n", "depth_val", "=", "[", "filepath", "+", "\"/\"", "+", "depth_L", "+", "img", "+", "\".npy\"", "for", "img", "in", "val_idx", "]", "\n", "calib_val", "=", "[", "filepath", "+", "\"/\"", "+", "calib", "+", "img", "+", "\".txt\"", "for", "img", "in", "val_idx", "]", "\n", "\n", "", "return", "(", "\n", "[", "left_train", ",", "right_train", ",", "depth_train", ",", "calib_train", "]", ",", "\n", "[", "left_val", ",", "right_val", ",", "depth_val", ",", "calib_val", "]", ",", "\n", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.SceneFlowLoader.myImageFloder.__init__": [[27, 42], ["torchvision.Normalize", "torchvision.Compose", "torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "training", ",", "calib", "=", "1417.", ",", "loader", "=", "default_loader", ",", "dploader", "=", "disparity_loader", ")", ":", "\n", "        ", "left", ",", "right", ",", "left_disparity", ",", "=", "data", "\n", "self", ".", "left", "=", "left", "\n", "self", ".", "right", "=", "right", "\n", "self", ".", "disp_L", "=", "left_disparity", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "dploader", "=", "dploader", "\n", "self", ".", "training", "=", "training", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "self", ".", "calib", "=", "calib", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.SceneFlowLoader.myImageFloder.__getitem__": [[43, 88], ["SceneFlowLoader.myImageFloder.loader", "SceneFlowLoader.myImageFloder.loader", "SceneFlowLoader.myImageFloder.dploader", "numpy.ascontiguousarray", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "random.randint", "random.randint", "SceneFlowLoader.myImageFloder.crop", "SceneFlowLoader.myImageFloder.crop", "SceneFlowLoader.myImageFloder.transform", "SceneFlowLoader.myImageFloder.transform", "SceneFlowLoader.myImageFloder.crop", "SceneFlowLoader.myImageFloder.crop", "SceneFlowLoader.myImageFloder.transform", "SceneFlowLoader.myImageFloder.transform", "SceneFlowLoader.myImageFloder.float", "SceneFlowLoader.myImageFloder.float", "torch.from_numpy.float", "torch.from_numpy.float", "torch.from_numpy.float", "float"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "left", "=", "self", ".", "left", "[", "index", "]", "\n", "right", "=", "self", ".", "right", "[", "index", "]", "\n", "disp_L", "=", "self", ".", "disp_L", "[", "index", "]", "\n", "\n", "left_img", "=", "self", ".", "loader", "(", "left", ")", "\n", "right_img", "=", "self", ".", "loader", "(", "right", ")", "\n", "dataL", ",", "scaleL", "=", "self", ".", "dploader", "(", "disp_L", ")", "\n", "dataL", "=", "np", ".", "ascontiguousarray", "(", "dataL", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "'15mm'", "in", "left", ":", "\n", "            ", "calib", "=", "self", ".", "calib", "/", "2.33", "*", "0.54", "\n", "", "else", ":", "\n", "            ", "calib", "=", "self", ".", "calib", "*", "0.54", "\n", "\n", "", "mask", "=", "dataL", ">=", "1.", "\n", "dataL", "[", "1", "-", "mask", "]", "=", "0", "\n", "dataL", "[", "mask", "]", "=", "calib", "/", "np", ".", "clip", "(", "dataL", "[", "mask", "]", ",", "1.", ",", "None", ")", "\n", "dataL", "=", "torch", ".", "from_numpy", "(", "dataL", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "th", ",", "tw", "=", "256", ",", "512", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n", "dataL", "=", "dataL", "[", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "\n", "left_img", "=", "self", ".", "transform", "(", "left_img", ")", "\n", "right_img", "=", "self", ".", "transform", "(", "right_img", ")", "\n", "\n", "", "else", ":", "\n", "            ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "w", "-", "960", ",", "h", "-", "544", ",", "w", ",", "h", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "w", "-", "960", ",", "h", "-", "544", ",", "w", ",", "h", ")", ")", "\n", "left_img", "=", "self", ".", "transform", "(", "left_img", ")", "\n", "right_img", "=", "self", ".", "transform", "(", "right_img", ")", "\n", "dataL_pad", "=", "torch", ".", "zeros", "(", "(", "dataL", ".", "shape", "[", "0", "]", "+", "4", ",", "dataL", ".", "shape", "[", "1", "]", ")", ")", "\n", "dataL_pad", "[", "4", ":", ",", ":", "]", "=", "dataL", "\n", "dataL", "=", "dataL_pad", "\n", "\n", "", "return", "left_img", ".", "float", "(", ")", ",", "right_img", ".", "float", "(", ")", ",", "dataL", ".", "float", "(", ")", ",", "float", "(", "calib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.SceneFlowLoader.myImageFloder.__len__": [[89, 91], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "left", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.SceneFlowLoader.is_image_file": [[16, 18], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.SceneFlowLoader.default_loader": [[19, 21], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.SceneFlowLoader.disparity_loader": [[22, 24], ["readpfm.readPFM"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.readpfm.readPFM"], ["", "def", "disparity_loader", "(", "path", ")", ":", "\n", "    ", "return", "rp", ".", "readPFM", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.listflowfile.is_image_file": [[10, 12], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.listflowfile.dataloader": [[14, 101], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.isdir", "os.path.isdir", "listflowfile.is_image_file", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "img.find", "dsp.find", "listflowfile.is_image_file", "listflowfile.is_image_file", "listflowfile.is_image_file", "os.listdir", "os.listdir", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "listflowfile.is_image_file", "listflowfile.is_image_file", "all_left_img.append", "all_left_disp.append", "all_right_img.append", "listflowfile.is_image_file", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "all_left_img.append", "all_left_disp.append", "all_right_img.append", "test_left_img.append", "test_left_disp.append", "test_right_img.append", "listflowfile.is_image_file", "all_left_img.append", "all_left_disp.append", "all_right_img.append", "im.split", "im.split", "im.split", "im.split", "im.split", "im.split", "im.split", "im.split"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file"], ["", "def", "dataloader", "(", "filepath", ")", ":", "\n", "    ", "filepath", "+=", "'/'", "\n", "classes", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "filepath", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "filepath", ",", "d", ")", ")", "]", "\n", "image", "=", "[", "img", "for", "img", "in", "classes", "if", "img", ".", "find", "(", "'frames_cleanpass'", ")", ">", "-", "1", "]", "\n", "disp", "=", "[", "dsp", "for", "dsp", "in", "classes", "if", "dsp", ".", "find", "(", "'disparity'", ")", ">", "-", "1", "]", "\n", "\n", "monkaa_path", "=", "filepath", "+", "[", "x", "for", "x", "in", "image", "if", "'monkaa'", "in", "x", "]", "[", "0", "]", "\n", "monkaa_disp", "=", "filepath", "+", "[", "x", "for", "x", "in", "disp", "if", "'monkaa'", "in", "x", "]", "[", "0", "]", "\n", "\n", "monkaa_dir", "=", "os", ".", "listdir", "(", "monkaa_path", ")", "\n", "\n", "all_left_img", "=", "[", "]", "\n", "all_right_img", "=", "[", "]", "\n", "all_left_disp", "=", "[", "]", "\n", "test_left_img", "=", "[", "]", "\n", "test_right_img", "=", "[", "]", "\n", "test_left_disp", "=", "[", "]", "\n", "\n", "for", "dd", "in", "monkaa_dir", ":", "\n", "        ", "for", "im", "in", "os", ".", "listdir", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/left/'", ")", ":", "\n", "            ", "if", "is_image_file", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/left/'", "+", "im", ")", ":", "\n", "                ", "if", "is_image_file", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/right/'", "+", "im", ")", ":", "\n", "                    ", "if", "os", ".", "path", ".", "isfile", "(", "monkaa_disp", "+", "'/'", "+", "dd", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", ":", "\n", "                        ", "all_left_img", ".", "append", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/left/'", "+", "im", ")", "\n", "all_left_disp", ".", "append", "(", "monkaa_disp", "+", "'/'", "+", "dd", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", "\n", "all_right_img", ".", "append", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/right/'", "+", "im", ")", "\n", "\n", "", "", "", "", "", "flying_path", "=", "filepath", "+", "[", "x", "for", "x", "in", "image", "if", "x", "==", "'frames_cleanpass'", "]", "[", "0", "]", "\n", "flying_disp", "=", "filepath", "+", "[", "x", "for", "x", "in", "disp", "if", "x", "==", "'frames_disparity'", "]", "[", "0", "]", "\n", "flying_dir", "=", "flying_path", "+", "'/TRAIN/'", "\n", "subdir", "=", "[", "'A'", ",", "'B'", ",", "'C'", "]", "\n", "\n", "for", "ss", "in", "subdir", ":", "\n", "        ", "flying", "=", "os", ".", "listdir", "(", "flying_dir", "+", "ss", ")", "\n", "\n", "for", "ff", "in", "flying", ":", "\n", "            ", "imm_l", "=", "os", ".", "listdir", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", ")", "\n", "for", "im", "in", "imm_l", ":", "\n", "                ", "if", "is_image_file", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ")", ":", "\n", "                    ", "if", "os", ".", "path", ".", "isfile", "(", "flying_disp", "+", "'/TRAIN/'", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", ":", "\n", "                        ", "if", "is_image_file", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/right/'", "+", "im", ")", ":", "\n", "                            ", "all_left_img", ".", "append", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ")", "\n", "all_left_disp", ".", "append", "(", "\n", "flying_disp", "+", "'/TRAIN/'", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", "\n", "all_right_img", ".", "append", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/right/'", "+", "im", ")", "\n", "\n", "", "", "", "", "", "", "flying_dir", "=", "flying_path", "+", "'/TEST/'", "\n", "\n", "subdir", "=", "[", "'A'", ",", "'B'", ",", "'C'", "]", "\n", "\n", "for", "ss", "in", "subdir", ":", "\n", "        ", "flying", "=", "os", ".", "listdir", "(", "flying_dir", "+", "ss", ")", "\n", "\n", "for", "ff", "in", "flying", ":", "\n", "            ", "imm_l", "=", "os", ".", "listdir", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", ")", "\n", "for", "im", "in", "imm_l", ":", "\n", "                ", "if", "is_image_file", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ")", ":", "\n", "                    ", "if", "is_image_file", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/right/'", "+", "im", ")", ":", "\n", "                        ", "if", "os", ".", "path", ".", "isfile", "(", "\n", "flying_disp", "+", "'/TEST/'", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", ":", "\n", "                            ", "test_left_img", ".", "append", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ")", "\n", "test_left_disp", ".", "append", "(", "\n", "flying_disp", "+", "'/TEST/'", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", "\n", "test_right_img", ".", "append", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/right/'", "+", "im", ")", "\n", "\n", "", "", "", "", "", "", "driving_dir", "=", "filepath", "+", "[", "x", "for", "x", "in", "image", "if", "'driving'", "in", "x", "]", "[", "0", "]", "+", "'/'", "\n", "driving_disp", "=", "filepath", "+", "[", "x", "for", "x", "in", "disp", "if", "'driving'", "in", "x", "]", "[", "0", "]", "\n", "\n", "subdir1", "=", "[", "'35mm_focallength'", ",", "'15mm_focallength'", "]", "\n", "subdir2", "=", "[", "'scene_backwards'", ",", "'scene_forwards'", "]", "\n", "subdir3", "=", "[", "'fast'", ",", "'slow'", "]", "\n", "\n", "for", "i", "in", "subdir1", ":", "\n", "        ", "for", "j", "in", "subdir2", ":", "\n", "            ", "for", "k", "in", "subdir3", ":", "\n", "                ", "imm_l", "=", "os", ".", "listdir", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/left/'", ")", "\n", "for", "im", "in", "imm_l", ":", "\n", "                    ", "if", "is_image_file", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/left/'", "+", "im", ")", ":", "\n", "                        ", "if", "os", ".", "path", ".", "isfile", "(", "\n", "driving_disp", "+", "'/'", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", ":", "\n", "                            ", "if", "is_image_file", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/right/'", "+", "im", ")", ":", "\n", "                                ", "all_left_img", ".", "append", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/left/'", "+", "im", ")", "\n", "all_left_disp", ".", "append", "(", "\n", "driving_disp", "+", "'/'", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", "\n", "all_right_img", ".", "append", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/right/'", "+", "im", ")", "\n", "\n", "", "", "", "", "", "", "", "return", "[", "all_left_img", ",", "all_right_img", ",", "all_left_disp", "]", ",", "[", "test_left_img", ",", "test_right_img", ",", "test_left_disp", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d_object.myImageFloder.__init__": [[144, 161], ["torchvision.Normalize", "torchvision.Compose", "torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "training", ",", "kitti2015", "=", "False", ",", "dynamic_bs", "=", "False", ",", "loader", "=", "default_loader", ",", "dploader", "=", "disparity_loader", ")", ":", "\n", "        ", "left", ",", "right", ",", "lidar", ",", "object3d", ",", "left_calib", "=", "data", "\n", "self", ".", "left", "=", "left", "\n", "self", ".", "dynamic_bs", "=", "dynamic_bs", "\n", "self", ".", "right", "=", "right", "\n", "self", ".", "lidar", "=", "lidar", "\n", "self", ".", "object_3d", "=", "object3d", "\n", "self", ".", "calib", "=", "left_calib", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "kitti2015", "=", "kitti2015", "\n", "self", ".", "dploader", "=", "dploader", "\n", "self", ".", "training", "=", "training", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d_object.myImageFloder.__getitem__": [[163, 222], ["KITTILoader_dataset3d_object.read_calib_file", "KITTILoader_dataset3d_object.filtrate_objects", "object3d_utils.objs_to_boxes3d", "KITTILoader_dataset3d_object.myImageFloder.loader", "KITTILoader_dataset3d_object.myImageFloder.loader", "KITTILoader_dataset3d_object.myImageFloder.reshape", "KITTILoader_dataset3d_object.generate_rpn_training_labels", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "KITTILoader_dataset3d_object.kitti2015_disparity_loader", "KITTILoader_dataset3d_object.myImageFloder.dploader", "random.randint", "random.randint", "KITTILoader_dataset3d_object.myImageFloder.crop", "KITTILoader_dataset3d_object.myImageFloder.crop", "KITTILoader_dataset3d_object.myImageFloder.transform", "KITTILoader_dataset3d_object.myImageFloder.transform", "KITTILoader_dataset3d_object.myImageFloder.crop", "KITTILoader_dataset3d_object.myImageFloder.crop", "KITTILoader_dataset3d_object.myImageFloder.transform", "KITTILoader_dataset3d_object.myImageFloder.transform", "KITTILoader_dataset3d_object.myImageFloder.float", "KITTILoader_dataset3d_object.myImageFloder.float", "KITTILoader_dataset3d_object.myImageFloder.float", "calib.item", "KITTILoader_dataset3d_object.dynamic_baseline", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.reshape", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.read_calib_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_depth_object3d.filtrate_objects", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.objs_to_boxes3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_depth_object3d.generate_rpn_training_labels", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.kitti2015_disparity_loader", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.dynamic_baseline"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "left", "=", "self", ".", "left", "[", "index", "]", "\n", "right", "=", "self", ".", "right", "[", "index", "]", "\n", "lidar", "=", "self", ".", "lidar", "[", "index", "]", "\n", "object_3d", "=", "self", ".", "object_3d", "[", "index", "]", "\n", "calib_info", "=", "read_calib_file", "(", "self", ".", "calib", "[", "index", "]", ")", "\n", "\n", "gt_obj_list", "=", "filtrate_objects", "(", "object_3d", ")", "\n", "gt_boxes3d", "=", "od_utils", ".", "objs_to_boxes3d", "(", "gt_obj_list", ")", "\n", "\n", "if", "self", ".", "dynamic_bs", ":", "\n", "            ", "calib", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "[", "\n", "0", ",", "0", "]", "*", "dynamic_baseline", "(", "calib_info", ")", "\n", "", "else", ":", "\n", "            ", "calib", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "[", "0", ",", "0", "]", "*", "0.54", "\n", "\n", "", "left_img", "=", "self", ".", "loader", "(", "left", ")", "\n", "right_img", "=", "self", ".", "loader", "(", "right", ")", "\n", "if", "self", ".", "kitti2015", ":", "\n", "            ", "dataL", "=", "kitti2015_disparity_loader", "(", "depth", ",", "calib", ")", "\n", "", "else", ":", "\n", "            ", "dataL", "=", "self", ".", "dploader", "(", "depth", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "th", ",", "tw", "=", "256", ",", "512", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n", "dataL", "=", "dataL", "[", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "\n", "left_img", "=", "self", ".", "transform", "(", "left_img", ")", "\n", "right_img", "=", "self", ".", "transform", "(", "right_img", ")", "\n", "\n", "", "else", ":", "\n", "            ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "\n", "# left_img = left_img.crop((w - 1232, h - 368, w, h))", "\n", "# right_img = right_img.crop((w - 1232, h - 368, w, h))", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "w", "-", "1200", ",", "h", "-", "352", ",", "w", ",", "h", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "w", "-", "1200", ",", "h", "-", "352", ",", "w", ",", "h", ")", ")", "\n", "w1", ",", "h1", "=", "left_img", ".", "size", "\n", "\n", "# dataL1 = dataL[h - 368:h, w - 1232:w]", "\n", "dataL", "=", "dataL", "[", "h", "-", "352", ":", "h", ",", "w", "-", "1200", ":", "w", "]", "\n", "\n", "left_img", "=", "self", ".", "transform", "(", "left_img", ")", "\n", "right_img", "=", "self", ".", "transform", "(", "right_img", ")", "\n", "\n", "", "pts_rect", "=", "dataL", ".", "reshape", "(", "-", "1", ")", "\n", "rpn_cls_label", ",", "rpn_reg_label", "=", "generate_rpn_training_labels", "(", "\n", "pts_rect", ",", "gt_boxes3d", ")", "\n", "\n", "dataL", "=", "torch", ".", "from_numpy", "(", "dataL", ")", ".", "float", "(", ")", "\n", "return", "left_img", ".", "float", "(", ")", ",", "right_img", ".", "float", "(", ")", ",", "dataL", ".", "float", "(", ")", ",", "calib", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d_object.myImageFloder.__len__": [[223, 225], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "left", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d_object.is_image_file": [[16, 18], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d_object.default_loader": [[20, 22], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d_object.disparity_loader": [[24, 26], ["numpy.load().astype", "numpy.load"], "function", ["None"], ["", "def", "disparity_loader", "(", "path", ")", ":", "\n", "    ", "return", "np", ".", "load", "(", "path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d_object.object3d_loader": [[28, 30], ["object3d_utils.get_objects_from_label"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.get_objects_from_label"], ["", "def", "object3d_loader", "(", "path", ")", ":", "\n", "    ", "return", "od_utils", ".", "get_objects_from_label", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d_object.read_calib_file": [[32, 46], ["open", "f.readlines", "line.rstrip.rstrip", "line.rstrip.split", "len", "numpy.array", "float", "value.split"], "function", ["None"], ["", "def", "read_calib_file", "(", "filepath", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "try", ":", "\n", "                ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "value", ".", "split", "(", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d_object.kitti2015_disparity_loader": [[48, 54], ["numpy.zeros_like", "numpy.array", "PIL.Image.open"], "function", ["None"], ["", "def", "kitti2015_disparity_loader", "(", "filepath", ",", "calib", ")", ":", "\n", "    ", "disp", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "filepath", ")", ")", "/", "256.", "\n", "depth", "=", "np", ".", "zeros_like", "(", "disp", ")", "\n", "mask", "=", "disp", ">", "0", "\n", "depth", "[", "mask", "]", "=", "calib", "/", "disp", "[", "mask", "]", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d_object.dynamic_baseline": [[56, 61], ["numpy.reshape", "numpy.reshape"], "function", ["None"], ["", "def", "dynamic_baseline", "(", "calib_info", ")", ":", "\n", "    ", "P3", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P3'", "]", ",", "[", "3", ",", "4", "]", ")", "\n", "P", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "\n", "baseline", "=", "P3", "[", "0", ",", "3", "]", "/", "(", "-", "P3", "[", "0", ",", "0", "]", ")", "-", "P", "[", "0", ",", "3", "]", "/", "(", "-", "P", "[", "0", ",", "0", "]", ")", "\n", "return", "baseline", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d_object.generate_rpn_training_labels": [[63, 106], ["numpy.zeros", "numpy.zeros", "object3d_utils.boxes3d_to_corners3d", "object3d_utils.enlarge_box3d", "object3d_utils.boxes3d_to_corners3d", "range", "object3d_utils.in_hull", "object3d_utils.in_hull", "numpy.logical_xor", "[].copy"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.boxes3d_to_corners3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.enlarge_box3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.boxes3d_to_corners3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.in_hull", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.in_hull"], ["", "def", "generate_rpn_training_labels", "(", "pts_rect", ",", "gt_boxes3d", ")", ":", "\n", "    ", "\"\"\"Generates Classification + Regression labels for each point\n        Input:  pts_rect: Points in rectified coords [N, 3]\n                gt_boxes_3d: 3D groud-truth boxes\n\n        Output: cls_label: Binary labels indicating foreground, shape [N, 1]\n                reg_label: Regression target labels. shape [N, 7]\n                           (Format: dx, dy, dz, ry, h, w, l)\n\n    \"\"\"", "\n", "cls_label", "=", "np", ".", "zeros", "(", "(", "pts_rect", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# dx, dy, dz, ry, h, w, l", "\n", "reg_label", "=", "np", ".", "zeros", "(", "(", "pts_rect", ".", "shape", "[", "0", "]", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_corners", "=", "od_utils", ".", "boxes3d_to_corners3d", "(", "gt_boxes3d", ",", "rotate", "=", "True", ")", "\n", "extend_gt_boxes3d", "=", "od_utils", ".", "enlarge_box3d", "(", "\n", "gt_boxes3d", ",", "extra_width", "=", "0.2", ")", "\n", "extend_gt_corners", "=", "od_utils", ".", "boxes3d_to_corners3d", "(", "\n", "extend_gt_boxes3d", ",", "rotate", "=", "True", ")", "\n", "for", "k", "in", "range", "(", "gt_boxes3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "box_corners", "=", "gt_corners", "[", "k", "]", "\n", "fg_pt_flag", "=", "od_utils", ".", "in_hull", "(", "pts_rect", ",", "box_corners", ")", "\n", "fg_pts_rect", "=", "pts_rect", "[", "fg_pt_flag", "]", "\n", "cls_label", "[", "fg_pt_flag", "]", "=", "1", "\n", "\n", "# enlarge the bbox3d, ignore nearby points", "\n", "extend_box_corners", "=", "extend_gt_corners", "[", "k", "]", "\n", "fg_enlarge_flag", "=", "od_utils", ".", "in_hull", "(", "pts_rect", ",", "extend_box_corners", ")", "\n", "ignore_flag", "=", "np", ".", "logical_xor", "(", "fg_pt_flag", ",", "fg_enlarge_flag", ")", "\n", "cls_label", "[", "ignore_flag", "]", "=", "-", "1", "\n", "\n", "# pixel offset of object center", "\n", "center3d", "=", "gt_boxes3d", "[", "k", "]", "[", "0", ":", "3", "]", ".", "copy", "(", ")", "# (x, y, z)", "\n", "center3d", "[", "1", "]", "-=", "gt_boxes3d", "[", "k", "]", "[", "3", "]", "/", "2", "\n", "# Now y is the true center of 3d box", "\n", "reg_label", "[", "fg_pt_flag", ",", "0", ":", "3", "]", "=", "center3d", "-", "fg_pts_rect", "\n", "\n", "# size and angle encoding", "\n", "reg_label", "[", "fg_pt_flag", ",", "3", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "3", "]", "# h", "\n", "reg_label", "[", "fg_pt_flag", ",", "4", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "4", "]", "# w", "\n", "reg_label", "[", "fg_pt_flag", ",", "5", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "5", "]", "# l", "\n", "reg_label", "[", "fg_pt_flag", ",", "6", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "6", "]", "# ry", "\n", "\n", "", "return", "cls_label", ",", "reg_label", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d_object.filtrate_objects": [[108, 141], ["list", "valid_obj_list.append", "list.append", "list.append"], "function", ["None"], ["", "def", "filtrate_objects", "(", "obj_list", ",", "classes", "=", "'Car'", ",", "training", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Discard objects which are not in self.classes (or its similar classes)\n    :param obj_list: list\n    :return: list\n    \"\"\"", "\n", "if", "classes", "==", "'Car'", ":", "\n", "        ", "classes", "=", "(", "'Background'", ",", "'Car'", ")", "\n", "", "elif", "classes", "==", "'People'", ":", "\n", "        ", "classes", "=", "(", "'Background'", ",", "'Pedestrian'", ",", "'Cyclist'", ")", "\n", "", "elif", "classes", "==", "'Pedestrian'", ":", "\n", "        ", "self", ".", "classes", "=", "(", "'Background'", ",", "'Pedestrian'", ")", "\n", "", "elif", "classes", "==", "'Cyclist'", ":", "\n", "        ", "classes", "=", "(", "'Background'", ",", "'Cyclist'", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "\"Invalid classes: %s\"", "%", "classes", "\n", "\n", "", "type_whitelist", "=", "classes", "\n", "if", "training", ":", "\n", "        ", "type_whitelist", "=", "list", "(", "classes", ")", "\n", "if", "'Car'", "in", "classes", ":", "\n", "            ", "type_whitelist", ".", "append", "(", "'Van'", ")", "\n", "", "if", "'Pedestrian'", "in", "classes", ":", "# or 'Cyclist' in classes:", "\n", "            ", "type_whitelist", ".", "append", "(", "'Person_sitting'", ")", "\n", "\n", "", "", "valid_obj_list", "=", "[", "]", "\n", "for", "obj", "in", "obj_list", ":", "\n", "        ", "if", "obj", ".", "cls_type", "not", "in", "type_whitelist", ":", "\n", "            ", "continue", "\n", "# Maybe should also remove heavily truncated objects", "\n", "\n", "", "valid_obj_list", ".", "append", "(", "obj", ")", "\n", "", "return", "valid_obj_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.myImageFloder.__init__": [[53, 74], ["torchvision.Normalize", "torchvision.Compose", "torchvision.ToTensor"], "methods", ["None"], ["return", "baseline", "\n", "\n", "", "class", "myImageFloder", "(", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data", ",", "training", ",", "kitti2015", "=", "False", ",", "dynamic_bs", "=", "False", ",", "loader", "=", "default_loader", ",", "dploader", "=", "disparity_loader", ")", ":", "\n", "        ", "left", ",", "right", ",", "left_depth", ",", "left_calib", "=", "data", "\n", "self", ".", "left", "=", "left", "\n", "self", ".", "dynamic_bs", "=", "dynamic_bs", "\n", "self", ".", "right", "=", "right", "\n", "self", ".", "depth", "=", "left_depth", "\n", "self", ".", "calib", "=", "left_calib", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "kitti2015", "=", "kitti2015", "\n", "self", ".", "dploader", "=", "dploader", "\n", "self", ".", "training", "=", "training", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.myImageFloder.__getitem__": [[75, 129], ["KITTILoader_dataset3d.read_calib_file", "KITTILoader_dataset3d.myImageFloder.loader", "KITTILoader_dataset3d.myImageFloder.loader", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.array", "KITTILoader_dataset3d.kitti2015_disparity_loader", "KITTILoader_dataset3d.myImageFloder.dploader", "random.randint", "random.randint", "KITTILoader_dataset3d.myImageFloder.crop", "KITTILoader_dataset3d.myImageFloder.crop", "KITTILoader_dataset3d.myImageFloder.transform", "KITTILoader_dataset3d.myImageFloder.transform", "KITTILoader_dataset3d.myImageFloder.crop", "KITTILoader_dataset3d.myImageFloder.crop", "KITTILoader_dataset3d.myImageFloder.transform", "KITTILoader_dataset3d.myImageFloder.transform", "KITTILoader_dataset3d.myImageFloder.float", "KITTILoader_dataset3d.myImageFloder.float", "KITTILoader_dataset3d.myImageFloder.float", "numpy.array.item", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "KITTILoader_dataset3d.dynamic_baseline", "numpy.reshape", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.read_calib_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.kitti2015_disparity_loader", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.dynamic_baseline"], ["        ", "left", "=", "self", ".", "left", "[", "index", "]", "\n", "right", "=", "self", ".", "right", "[", "index", "]", "\n", "depth", "=", "self", ".", "depth", "[", "index", "]", "\n", "calib_info", "=", "read_calib_file", "(", "self", ".", "calib", "[", "index", "]", ")", "\n", "if", "self", ".", "dynamic_bs", ":", "\n", "            ", "calib", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "[", "0", ",", "0", "]", "*", "dynamic_baseline", "(", "calib_info", ")", "\n", "", "else", ":", "\n", "            ", "calib", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P2'", "]", ",", "[", "3", ",", "4", "]", ")", "[", "0", ",", "0", "]", "*", "0.54", "\n", "\n", "", "left_img", "=", "self", ".", "loader", "(", "left", ")", "\n", "right_img", "=", "self", ".", "loader", "(", "right", ")", "\n", "if", "self", ".", "kitti2015", ":", "\n", "            ", "dataL", "=", "kitti2015_disparity_loader", "(", "depth", ",", "calib", ")", "\n", "", "else", ":", "\n", "            ", "dataL", "=", "self", ".", "dploader", "(", "depth", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "th", ",", "tw", "=", "256", ",", "512", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n", "dataL", "=", "dataL", "[", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "\n", "left_img", "=", "self", ".", "transform", "(", "left_img", ")", "\n", "right_img", "=", "self", ".", "transform", "(", "right_img", ")", "\n", "\n", "", "else", ":", "\n", "            ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "\n", "# left_img = left_img.crop((w - 1232, h - 368, w, h))", "\n", "# right_img = right_img.crop((w - 1232, h - 368, w, h))", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "w", "-", "1200", ",", "h", "-", "352", ",", "w", ",", "h", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "w", "-", "1200", ",", "h", "-", "352", ",", "w", ",", "h", ")", ")", "\n", "w1", ",", "h1", "=", "left_img", ".", "size", "\n", "\n", "# dataL1 = dataL[h - 368:h, w - 1232:w]", "\n", "dataL", "=", "dataL", "[", "h", "-", "352", ":", "h", ",", "w", "-", "1200", ":", "w", "]", "\n", "\n", "left_img", "=", "self", ".", "transform", "(", "left_img", ")", "\n", "right_img", "=", "self", ".", "transform", "(", "right_img", ")", "\n", "\n", "", "dataL", "=", "torch", ".", "from_numpy", "(", "dataL", ")", ".", "float", "(", ")", "\n", "return", "left_img", ".", "float", "(", ")", ",", "right_img", ".", "float", "(", ")", ",", "dataL", ".", "float", "(", ")", ",", "calib", ".", "item", "(", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "left", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.myImageFloder.__len__": [[130, 132], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.is_image_file": [[12, 14], ["any", "filename.endswith"], "function", ["None"], ["]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.default_loader": [[16, 18], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.disparity_loader": [[20, 22], ["numpy.load().astype", "numpy.load"], "function", ["None"], ["    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.read_calib_file": [[24, 38], ["open", "f.readlines", "line.rstrip.rstrip", "line.rstrip.split", "len", "numpy.array", "float", "value.split"], "function", ["None"], ["    ", "return", "np", ".", "load", "(", "path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "\n", "", "def", "read_calib_file", "(", "filepath", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "continue", "\n", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "try", ":", "\n", "                ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "value", ".", "split", "(", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.kitti2015_disparity_loader": [[40, 43], ["numpy.array", "PIL.Image.open"], "function", ["None"], ["\n", "", "def", "kitti2015_disparity_loader", "(", "filepath", ",", "calib", ")", ":", "\n", "    ", "disp", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "filepath", ")", ")", "/", "256.", "\n", "depth", "=", "np", ".", "zeros_like", "(", "disp", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_dataloader.KITTILoader_dataset3d.dynamic_baseline": [[45, 50], ["numpy.reshape", "numpy.reshape"], "function", ["None"], ["depth", "[", "mask", "]", "=", "calib", "/", "disp", "[", "mask", "]", "\n", "return", "depth", "\n", "\n", "\n", "", "def", "dynamic_baseline", "(", "calib_info", ")", ":", "\n", "    ", "P3", "=", "np", ".", "reshape", "(", "calib_info", "[", "'P3'", "]", ",", "[", "3", ",", "4", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object.__init__": [[27, 48], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "split", "=", "'training'", ",", "point_style", "=", "'lidar'", ")", ":", "\n", "        ", "'''root_dir contains training and testing folders'''", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "split_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "split", ")", "\n", "\n", "if", "split", "==", "'training'", ":", "\n", "            ", "self", ".", "num_samples", "=", "7481", "\n", "", "elif", "split", "==", "'testing'", ":", "\n", "            ", "self", ".", "num_samples", "=", "7518", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Unknown split: %s'", "%", "(", "split", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'image_2'", ")", "\n", "self", ".", "calib_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'calib'", ")", "\n", "if", "point_style", "==", "'lidar'", ":", "\n", "            ", "self", ".", "lidar_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'velodyne'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lidar_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "point_style", ")", "\n", "", "self", ".", "label_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'label_2'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object.__len__": [[49, 51], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object.get_image": [[52, 56], ["os.path.join", "kitti_util.load_image"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.load_image"], ["", "def", "get_image", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "(", "idx", "<", "self", ".", "num_samples", ")", "\n", "img_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "'%06d.png'", "%", "(", "idx", ")", ")", "\n", "return", "utils", ".", "load_image", "(", "img_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object.get_lidar": [[57, 61], ["os.path.join", "kitti_util.load_velo_scan"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.load_velo_scan"], ["", "def", "get_lidar", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "(", "idx", "<", "self", ".", "num_samples", ")", "\n", "lidar_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "lidar_dir", ",", "'%06d.bin'", "%", "(", "idx", ")", ")", "\n", "return", "utils", ".", "load_velo_scan", "(", "lidar_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object.get_calibration": [[62, 66], ["os.path.join", "kitti_util.Calibration"], "methods", ["None"], ["", "def", "get_calibration", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "(", "idx", "<", "self", ".", "num_samples", ")", "\n", "calib_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "calib_dir", ",", "'%06d.txt'", "%", "(", "idx", ")", ")", "\n", "return", "utils", ".", "Calibration", "(", "calib_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object.get_label_objects": [[67, 71], ["os.path.join", "kitti_util.read_label"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.read_label"], ["", "def", "get_label_objects", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "(", "idx", "<", "self", ".", "num_samples", "and", "self", ".", "split", "==", "'training'", ")", "\n", "label_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "label_dir", ",", "'%06d.txt'", "%", "(", "idx", ")", ")", "\n", "return", "utils", ".", "read_label", "(", "label_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object.get_depth_map": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_depth_map", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object.get_top_down": [[75, 77], ["None"], "methods", ["None"], ["", "def", "get_top_down", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object_video.__init__": [[80, 92], ["kitti_util.Calibration", "sorted", "sorted", "print", "print", "len", "len", "len", "os.path.join", "os.path.join", "os.listdir", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["def", "__init__", "(", "self", ",", "img_dir", ",", "lidar_dir", ",", "calib_dir", ")", ":", "\n", "        ", "self", ".", "calib", "=", "utils", ".", "Calibration", "(", "calib_dir", ",", "from_video", "=", "True", ")", "\n", "self", ".", "img_dir", "=", "img_dir", "\n", "self", ".", "lidar_dir", "=", "lidar_dir", "\n", "self", ".", "img_filenames", "=", "sorted", "(", "[", "os", ".", "path", ".", "join", "(", "img_dir", ",", "filename", ")", "for", "filename", "in", "os", ".", "listdir", "(", "img_dir", ")", "]", ")", "\n", "self", ".", "lidar_filenames", "=", "sorted", "(", "[", "os", ".", "path", ".", "join", "(", "lidar_dir", ",", "filename", ")", "for", "filename", "in", "os", ".", "listdir", "(", "lidar_dir", ")", "]", ")", "\n", "print", "(", "len", "(", "self", ".", "img_filenames", ")", ")", "\n", "print", "(", "len", "(", "self", ".", "lidar_filenames", ")", ")", "\n", "#assert(len(self.img_filenames) == len(self.lidar_filenames))", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "img_filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object_video.__len__": [[93, 95], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object_video.get_image": [[96, 100], ["kitti_util.load_image"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.load_image"], ["", "def", "get_image", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "(", "idx", "<", "self", ".", "num_samples", ")", "\n", "img_filename", "=", "self", ".", "img_filenames", "[", "idx", "]", "\n", "return", "utils", ".", "load_image", "(", "img_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object_video.get_lidar": [[101, 105], ["kitti_util.load_velo_scan"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.sparse.kitti_util.load_velo_scan"], ["", "def", "get_lidar", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "(", "idx", "<", "self", ".", "num_samples", ")", "\n", "lidar_filename", "=", "self", ".", "lidar_filenames", "[", "idx", "]", "\n", "return", "utils", ".", "load_velo_scan", "(", "lidar_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.kitti_object_video.get_calibration": [[106, 108], ["None"], "methods", ["None"], ["", "def", "get_calibration", "(", "self", ",", "unused", ")", ":", "\n", "        ", "return", "self", ".", "calib", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_object.get_lidar_in_image_fov": [[141, 153], ["calib.project_velo_to_image"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_image"], ["", "", "def", "get_lidar_in_image_fov", "(", "pc_velo", ",", "calib", ",", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ",", "\n", "return_more", "=", "False", ",", "clip_distance", "=", "2.0", ")", ":", "\n", "    ", "''' Filter lidar points, keep those in image FOV '''", "\n", "pts_2d", "=", "calib", ".", "project_velo_to_image", "(", "pc_velo", ")", "\n", "fov_inds", "=", "(", "pts_2d", "[", ":", ",", "0", "]", "<", "xmax", ")", "&", "(", "pts_2d", "[", ":", ",", "0", "]", ">=", "xmin", ")", "&", "(", "pts_2d", "[", ":", ",", "1", "]", "<", "ymax", ")", "&", "(", "pts_2d", "[", ":", ",", "1", "]", ">=", "ymin", ")", "\n", "fov_inds", "=", "fov_inds", "&", "(", "pc_velo", "[", ":", ",", "0", "]", ">", "clip_distance", ")", "\n", "imgfov_pc_velo", "=", "pc_velo", "[", "fov_inds", ",", ":", "]", "\n", "if", "return_more", ":", "\n", "        ", "return", "imgfov_pc_velo", ",", "pts_2d", ",", "fov_inds", "\n", "", "else", ":", "\n", "        ", "return", "imgfov_pc_velo", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.fusion_model.roty": [[6, 13], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["def", "roty", "(", "t", ")", ":", "\n", "    ", "''' Rotation about the y-axis. '''", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "0", ",", "s", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "s", ",", "0", ",", "c", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.fusion_model.Fusion": [[15, 43], ["torch.arange", "torch.arange", "torch.stack().permute().numpy", "numpy.concatenate", "depth_index.reshape.reshape", "calib.project_image_to_rect", "print", "numpy.zeros", "numpy.array", "numpy.floor().astype", "roty().dot", "torch.from_numpy().long", "torch.from_numpy().long", "torch.stack().permute", "numpy.floor", "fusion_model.roty", "torch.from_numpy", "torch.from_numpy", "torch.stack", "torch.meshgrid"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_image_to_rect", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.fusion_model.roty"], ["", "def", "Fusion", "(", "depth_map", ",", "calib", ",", "t", ")", ":", "\n", "        ", "high", ",", "width", "=", "depth_map", ".", "shape", "\n", "u", "=", "torch", ".", "arange", "(", "width", ")", "\n", "v", "=", "torch", ".", "arange", "(", "high", ")", "\n", "index", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "u", ",", "v", ")", ")", ".", "permute", "(", "(", "2", ",", "1", ",", "0", ")", ")", ".", "numpy", "(", ")", "\n", "depth_index", "=", "np", ".", "concatenate", "(", "[", "index", ",", "depth_map", "[", ":", ",", ":", ",", "None", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "depth_index", "=", "depth_index", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "xyz", "=", "calib", ".", "project_image_to_rect", "(", "depth_index", ")", "\n", "mask", "=", "xyz", "[", ":", ",", "2", "]", ">", "0", "\n", "xyz_mask", "=", "xyz", "[", "mask", "]", "\n", "xyz_mask", "=", "roty", "(", "t", ")", ".", "dot", "(", "xyz_mask", ".", "T", ")", ".", "T", "\n", "print", "(", "xyz_mask", ".", "shape", ")", "\n", "\n", "depth_index_mask", "=", "depth_index", "[", "mask", "]", "\n", "mask1", "=", "(", "xyz_mask", "[", ":", ",", "0", "]", ">=", "-", "40", ")", "*", "(", "xyz_mask", "[", ":", ",", "0", "]", "<", "40", ")", "*", "(", "xyz_mask", "[", ":", ",", "2", "]", ">=", "0", ")", "*", "(", "xyz_mask", "[", ":", ",", "2", "]", "<", "68.8", ")", "*", "(", "xyz_mask", "[", ":", ",", "1", "]", ">=", "-", "1", ")", "*", "(", "xyz_mask", "[", ":", ",", "1", "]", "<", "2.5", ")", "\n", "xyz_mask1", "=", "xyz_mask", "[", "mask1", "]", "\n", "depth_index_mask1", "=", "depth_index_mask", "[", "mask1", "]", "\n", "xyz_index", "=", "np", ".", "zeros", "(", "(", "depth_index_mask1", ".", "shape", "[", "0", "]", ",", "5", ")", ")", "\n", "xyz_index", "[", ":", ",", ":", "3", "]", "=", "xyz_mask1", "\n", "xyz_index", "[", ":", ",", "3", ":", "]", "=", "depth_index_mask1", "[", ":", ",", ":", "2", "]", "\n", "# xyz_index = sorted(xyz_index.tolist(), key=lambda x: x[1])", "\n", "xyz_index", "=", "np", ".", "array", "(", "xyz_index", ")", "\n", "\n", "\n", "xz_mask1", "=", "xyz_index", "[", ":", ",", "(", "0", ",", "2", ")", "]", "\n", "xz_mask1", "[", ":", ",", "0", "]", "+=", "40", "\n", "xz_mask1_quant", "=", "np", ".", "floor", "(", "xz_mask1", "*", "10", ")", ".", "astype", "(", "int", ")", "\n", "return", "torch", ".", "from_numpy", "(", "xyz_index", "[", ":", ",", "3", ":", "]", ")", ".", "long", "(", ")", ",", "torch", ".", "from_numpy", "(", "xz_mask1_quant", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_lidar_from_depth_intensity.project_disp_to_depth": [[10, 21], ["numpy.meshgrid", "numpy.stack", "points.reshape.reshape", "calib.project_image_to_velo", "std.reshape.reshape", "numpy.concatenate", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_image_to_velo"], ["def", "project_disp_to_depth", "(", "calib", ",", "depth", ",", "std", ",", "max_high", ")", ":", "\n", "    ", "rows", ",", "cols", "=", "depth", ".", "shape", "\n", "c", ",", "r", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "cols", ")", ",", "np", ".", "arange", "(", "rows", ")", ")", "\n", "points", "=", "np", ".", "stack", "(", "[", "c", ",", "r", ",", "depth", "]", ")", "\n", "points", "=", "points", ".", "reshape", "(", "(", "3", ",", "-", "1", ")", ")", "\n", "points", "=", "points", ".", "T", "\n", "cloud", "=", "calib", ".", "project_image_to_velo", "(", "points", ")", "\n", "std", "=", "std", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "cloud", "=", "np", ".", "concatenate", "(", "(", "cloud", ",", "std", ")", ",", "axis", "=", "1", ")", "\n", "valid", "=", "(", "cloud", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "cloud", "[", ":", ",", "2", "]", "<", "max_high", ")", "\n", "return", "cloud", "[", "valid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_lidar_from_depth_masked.project_depth_to_lidar": [[10, 20], ["numpy.meshgrid", "numpy.stack", "filter_velo_with_boxes.reshape", "generate_lidar_from_depth_masked.filter_velo_with_boxes", "calib.project_image_to_velo", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_lidar_from_depth_masked.filter_velo_with_boxes", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_image_to_velo"], ["def", "project_depth_to_lidar", "(", "calib", ",", "depth", ",", "objects", ",", "max_high", ")", ":", "\n", "    ", "rows", ",", "cols", "=", "depth", ".", "shape", "\n", "c", ",", "r", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "cols", ")", ",", "np", ".", "arange", "(", "rows", ")", ")", "\n", "points", "=", "np", ".", "stack", "(", "[", "c", ",", "r", ",", "depth", "]", ")", "\n", "points", "=", "points", ".", "reshape", "(", "(", "3", ",", "-", "1", ")", ")", "\n", "points", "=", "points", ".", "T", "\n", "points", "=", "filter_velo_with_boxes", "(", "points", ",", "objects", ",", "calib", ")", "\n", "cloud", "=", "calib", ".", "project_image_to_velo", "(", "points", ")", "\n", "valid", "=", "(", "cloud", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "cloud", "[", ":", ",", "2", "]", "<", "max_high", ")", "\n", "return", "cloud", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_lidar_from_depth_masked.filter_velo_with_boxes": [[22, 33], ["numpy.zeros"], "function", ["None"], ["", "def", "filter_velo_with_boxes", "(", "points", ",", "objects", ",", "calib", ")", ":", "\n", "    ", "''' Show image with 2D bounding boxes '''", "\n", "mask", "=", "np", ".", "zeros", "(", "points", ".", "shape", "[", "0", "]", ",", "dtype", "=", "bool", ")", "\n", "\n", "for", "obj", "in", "objects", ":", "\n", "        ", "if", "obj", ".", "type", "==", "'Car'", "or", "obj", ".", "type", "==", "'Van'", ":", "\n", "            ", "fov_inds", "=", "(", "points", "[", ":", ",", "0", "]", "<", "obj", ".", "xmax", ")", "&", "(", "points", "[", ":", ",", "0", "]", ">", "obj", ".", "xmin", ")", "&", "(", "points", "[", ":", ",", "1", "]", "<", "obj", ".", "ymax", ")", "&", "(", "points", "[", ":", ",", "1", "]", ">", "obj", ".", "ymin", ")", "\n", "mask", "=", "mask", "|", "fov_inds", "\n", "\n", "", "", "return", "points", "[", "mask", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_depth_map.generate_dispariy_from_velo": [[10, 27], ["calib.project_velo_to_image", "calib.project_velo_to_rect", "numpy.round().astype", "range", "numpy.zeros", "numpy.round", "int", "int"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_image", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_rect"], ["def", "generate_dispariy_from_velo", "(", "pc_velo", ",", "height", ",", "width", ",", "calib", ")", ":", "\n", "    ", "pts_2d", "=", "calib", ".", "project_velo_to_image", "(", "pc_velo", ")", "\n", "fov_inds", "=", "(", "pts_2d", "[", ":", ",", "0", "]", "<", "width", "-", "1", ")", "&", "(", "pts_2d", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "pts_2d", "[", ":", ",", "1", "]", "<", "height", "-", "1", ")", "&", "(", "pts_2d", "[", ":", ",", "1", "]", ">=", "0", ")", "\n", "fov_inds", "=", "fov_inds", "&", "(", "pc_velo", "[", ":", ",", "0", "]", ">", "2", ")", "\n", "imgfov_pc_velo", "=", "pc_velo", "[", "fov_inds", ",", ":", "]", "\n", "imgfov_pts_2d", "=", "pts_2d", "[", "fov_inds", ",", ":", "]", "\n", "imgfov_pc_rect", "=", "calib", ".", "project_velo_to_rect", "(", "imgfov_pc_velo", ")", "\n", "depth_map", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "-", "1", "\n", "imgfov_pts_2d", "=", "np", ".", "round", "(", "imgfov_pts_2d", ")", ".", "astype", "(", "int", ")", "\n", "for", "i", "in", "range", "(", "imgfov_pts_2d", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "depth", "=", "imgfov_pc_rect", "[", "i", ",", "2", "]", "\n", "depth_map", "[", "int", "(", "imgfov_pts_2d", "[", "i", ",", "1", "]", ")", ",", "int", "(", "imgfov_pts_2d", "[", "i", ",", "0", "]", ")", "]", "=", "depth", "\n", "", "baseline", "=", "0.54", "\n", "\n", "# disp_map = (calib.f_u * baseline) / depth_map", "\n", "return", "depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_depth_object3d.generate_rect_from_velo": [[13, 22], ["calib.project_velo_to_image", "calib.project_velo_to_rect"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_image", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_rect"], ["def", "generate_rect_from_velo", "(", "pc_velo", ",", "height", ",", "width", ",", "calib", ")", ":", "\n", "    ", "pts_2d", "=", "calib", ".", "project_velo_to_image", "(", "pc_velo", ")", "\n", "fov_inds", "=", "(", "pts_2d", "[", ":", ",", "0", "]", "<", "width", "-", "1", ")", "&", "(", "pts_2d", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "pts_2d", "[", ":", ",", "1", "]", "<", "height", "-", "1", ")", "&", "(", "pts_2d", "[", ":", ",", "1", "]", ">=", "0", ")", "\n", "fov_inds", "=", "fov_inds", "&", "(", "pc_velo", "[", ":", ",", "0", "]", ">", "2", ")", "\n", "imgfov_pc_velo", "=", "pc_velo", "[", "fov_inds", ",", ":", "]", "\n", "imgfov_pts_2d", "=", "pts_2d", "[", "fov_inds", ",", ":", "]", "\n", "imgfov_pc_rect", "=", "calib", ".", "project_velo_to_rect", "(", "imgfov_pc_velo", ")", "\n", "return", "imgfov_pc_rect", ",", "imgfov_pts_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_depth_object3d.object3d_loader": [[24, 26], ["object3d_utils.get_objects_from_label"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.get_objects_from_label"], ["", "def", "object3d_loader", "(", "path", ")", ":", "\n", "    ", "return", "od_utils", ".", "get_objects_from_label", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_depth_object3d.generate_rpn_training_labels": [[28, 71], ["numpy.zeros", "numpy.zeros", "object3d_utils.boxes3d_to_corners3d", "object3d_utils.enlarge_box3d", "object3d_utils.boxes3d_to_corners3d", "range", "object3d_utils.in_hull", "object3d_utils.in_hull", "numpy.logical_xor", "[].copy"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.boxes3d_to_corners3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.enlarge_box3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.boxes3d_to_corners3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.in_hull", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.object3d_utils.kitti_utils.in_hull"], ["", "def", "generate_rpn_training_labels", "(", "pts_rect", ",", "gt_boxes3d", ")", ":", "\n", "    ", "\"\"\"Generates Classification + Regression labels for each point\n        Input:  pts_rect: Points in rectified coords [N, 3]\n                gt_boxes_3d: 3D groud-truth boxes\n\n        Output: cls_label: Binary labels indicating foreground, shape [N, 1]\n                reg_label: Regression target labels. shape [N, 7]\n                           (Format: dx, dy, dz, ry, h, w, l)\n\n    \"\"\"", "\n", "cls_label", "=", "np", ".", "zeros", "(", "(", "pts_rect", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# dx, dy, dz, ry, h, w, l", "\n", "reg_label", "=", "np", ".", "zeros", "(", "(", "pts_rect", ".", "shape", "[", "0", "]", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_corners", "=", "od_utils", ".", "boxes3d_to_corners3d", "(", "gt_boxes3d", ",", "rotate", "=", "True", ")", "\n", "extend_gt_boxes3d", "=", "od_utils", ".", "enlarge_box3d", "(", "\n", "gt_boxes3d", ",", "extra_width", "=", "0.2", ")", "\n", "extend_gt_corners", "=", "od_utils", ".", "boxes3d_to_corners3d", "(", "\n", "extend_gt_boxes3d", ",", "rotate", "=", "True", ")", "\n", "for", "k", "in", "range", "(", "gt_boxes3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "box_corners", "=", "gt_corners", "[", "k", "]", "\n", "fg_pt_flag", "=", "od_utils", ".", "in_hull", "(", "pts_rect", ",", "box_corners", ")", "\n", "fg_pts_rect", "=", "pts_rect", "[", "fg_pt_flag", "]", "\n", "cls_label", "[", "fg_pt_flag", "]", "=", "1", "\n", "\n", "# enlarge the bbox3d, ignore nearby points", "\n", "extend_box_corners", "=", "extend_gt_corners", "[", "k", "]", "\n", "fg_enlarge_flag", "=", "od_utils", ".", "in_hull", "(", "pts_rect", ",", "extend_box_corners", ")", "\n", "ignore_flag", "=", "np", ".", "logical_xor", "(", "fg_pt_flag", ",", "fg_enlarge_flag", ")", "\n", "cls_label", "[", "ignore_flag", "]", "=", "-", "1", "\n", "\n", "# pixel offset of object center", "\n", "center3d", "=", "gt_boxes3d", "[", "k", "]", "[", "0", ":", "3", "]", ".", "copy", "(", ")", "# (x, y, z)", "\n", "center3d", "[", "1", "]", "-=", "gt_boxes3d", "[", "k", "]", "[", "3", "]", "/", "2", "\n", "# Now y is the true center of 3d box", "\n", "reg_label", "[", "fg_pt_flag", ",", "0", ":", "3", "]", "=", "center3d", "-", "fg_pts_rect", "\n", "\n", "# size and angle encoding", "\n", "reg_label", "[", "fg_pt_flag", ",", "3", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "3", "]", "# h", "\n", "reg_label", "[", "fg_pt_flag", ",", "4", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "4", "]", "# w", "\n", "reg_label", "[", "fg_pt_flag", ",", "5", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "5", "]", "# l", "\n", "reg_label", "[", "fg_pt_flag", ",", "6", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "6", "]", "# ry", "\n", "\n", "", "return", "cls_label", ",", "reg_label", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_depth_object3d.generate_labels_from_velo": [[73, 101], ["generate_depth_object3d.generate_rect_from_velo", "generate_depth_object3d.generate_rpn_training_labels", "numpy.round().astype", "range", "numpy.dstack", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.round", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_depth_object3d.generate_rect_from_velo", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_depth_object3d.generate_rpn_training_labels"], ["", "def", "generate_labels_from_velo", "(", "pc_velo", ",", "gt_boxes3d", ",", "height", ",", "width", ",", "calib", ")", ":", "\n", "    ", "imgfov_pc_rect", ",", "imgfov_pts_2d", "=", "generate_rect_from_velo", "(", "\n", "pc_velo", ",", "height", ",", "width", ",", "calib", ")", "\n", "cls_label", ",", "reg_label", "=", "generate_rpn_training_labels", "(", "\n", "imgfov_pc_rect", ",", "gt_boxes3d", ")", "\n", "\n", "assert", "len", "(", "cls_label", ")", "==", "len", "(", "reg_label", ")", "==", "len", "(", "imgfov_pc_rect", ")", "\n", "\n", "depth_map", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "-", "1", "\n", "cls_map", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "-", "1", "\n", "reg_map", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ",", "7", ")", ")", "-", "1", "\n", "\n", "imgfov_pts_2d", "=", "np", ".", "round", "(", "imgfov_pts_2d", ")", ".", "astype", "(", "int", ")", "\n", "for", "i", "in", "range", "(", "imgfov_pts_2d", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "depth", "=", "imgfov_pc_rect", "[", "i", ",", "2", "]", "\n", "\n", "depth_map", "[", "int", "(", "imgfov_pts_2d", "[", "i", ",", "1", "]", ")", ",", "int", "(", "imgfov_pts_2d", "[", "i", ",", "0", "]", ")", "]", "=", "depth", "\n", "\n", "cls_map", "[", "int", "(", "imgfov_pts_2d", "[", "i", ",", "1", "]", ")", ",", "int", "(", "\n", "imgfov_pts_2d", "[", "i", ",", "0", "]", ")", "]", "=", "cls_label", "[", "i", "]", "\n", "\n", "reg_map", "[", "int", "(", "imgfov_pts_2d", "[", "i", ",", "1", "]", ")", ",", "int", "(", "\n", "imgfov_pts_2d", "[", "i", ",", "0", "]", ")", "]", "=", "reg_label", "[", "i", "]", "\n", "\n", "", "baseline", "=", "0.54", "\n", "\n", "# disp_map = (calib.f_u * baseline) / depth_map", "\n", "return", "np", ".", "dstack", "(", "[", "depth_map", ",", "cls_map", ",", "reg_map", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_depth_object3d.filtrate_objects": [[103, 136], ["list", "valid_obj_list.append", "list.append", "list.append"], "function", ["None"], ["", "def", "filtrate_objects", "(", "obj_list", ",", "classes", "=", "'Car'", ",", "training", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Discard objects which are not in self.classes (or its similar classes)\n    :param obj_list: list\n    :return: list\n    \"\"\"", "\n", "if", "classes", "==", "'Car'", ":", "\n", "        ", "classes", "=", "(", "'Background'", ",", "'Car'", ")", "\n", "", "elif", "classes", "==", "'People'", ":", "\n", "        ", "classes", "=", "(", "'Background'", ",", "'Pedestrian'", ",", "'Cyclist'", ")", "\n", "", "elif", "classes", "==", "'Pedestrian'", ":", "\n", "        ", "self", ".", "classes", "=", "(", "'Background'", ",", "'Pedestrian'", ")", "\n", "", "elif", "classes", "==", "'Cyclist'", ":", "\n", "        ", "classes", "=", "(", "'Background'", ",", "'Cyclist'", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "\"Invalid classes: %s\"", "%", "classes", "\n", "\n", "", "type_whitelist", "=", "classes", "\n", "if", "training", ":", "\n", "        ", "type_whitelist", "=", "list", "(", "classes", ")", "\n", "if", "'Car'", "in", "classes", ":", "\n", "            ", "type_whitelist", ".", "append", "(", "'Van'", ")", "\n", "", "if", "'Pedestrian'", "in", "classes", ":", "# or 'Cyclist' in classes:", "\n", "            ", "type_whitelist", ".", "append", "(", "'Person_sitting'", ")", "\n", "\n", "", "", "valid_obj_list", "=", "[", "]", "\n", "for", "obj", "in", "obj_list", ":", "\n", "        ", "if", "obj", ".", "cls_type", "not", "in", "type_whitelist", ":", "\n", "            ", "continue", "\n", "# Maybe should also remove heavily truncated objects", "\n", "\n", "", "valid_obj_list", ".", "append", "(", "obj", ")", "\n", "", "return", "valid_obj_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_process_RANSAC.extract_ransac": [[10, 54], ["sorted", "os.path.isdir", "os.makedirs", "print", "kitti_util.Calibration", "numpy.fromfile().reshape", "utils.Calibration.project_velo_to_rect", "print", "print", "os.path.join", "result_lines.append", "os.listdir", "len", "sklearn.linear_model.RANSACRegressor().fit", "numpy.zeros", "open", "f.write", "numpy.fromfile", "numpy.linalg.norm", "sklearn.linear_model.RANSACRegressor"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_rect", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["def", "extract_ransac", "(", "calib_dir", ",", "lidar_dir", ",", "planes_dir", ")", ":", "\n", "    ", "data_idx_list", "=", "[", "x", "[", ":", "-", "4", "]", "for", "x", "in", "os", ".", "listdir", "(", "lidar_dir", ")", "if", "x", "[", "-", "4", ":", "]", "==", "'.bin'", "]", "\n", "data_idx_list", "=", "sorted", "(", "data_idx_list", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "planes_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "planes_dir", ")", "\n", "\n", "", "for", "data_idx", "in", "data_idx_list", ":", "\n", "\n", "        ", "print", "(", "'------------- '", ",", "data_idx", ")", "\n", "calib", "=", "calib_dir", "+", "'/'", "+", "data_idx", "+", "'.txt'", "\n", "calib", "=", "utils", ".", "Calibration", "(", "calib", ")", "\n", "pc_velo", "=", "lidar_dir", "+", "'/'", "+", "data_idx", "+", "'.bin'", "\n", "pc_velo", "=", "np", ".", "fromfile", "(", "pc_velo", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "pc_rect", "=", "calib", ".", "project_velo_to_rect", "(", "pc_velo", "[", ":", ",", ":", "3", "]", ")", "\n", "valid_loc", "=", "(", "pc_rect", "[", ":", ",", "1", "]", ">", "1.5", ")", "&", "(", "pc_rect", "[", ":", ",", "1", "]", "<", "1.86", ")", "&", "(", "pc_rect", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "pc_rect", "[", ":", ",", "2", "]", "<", "40", ")", "&", "(", "pc_rect", "[", ":", ",", "0", "]", ">", "-", "15", ")", "&", "(", "pc_rect", "[", ":", ",", "0", "]", "<", "15", ")", "\n", "pc_rect", "=", "pc_rect", "[", "valid_loc", "]", "\n", "if", "len", "(", "pc_rect", ")", "<", "5", ":", "\n", "            ", "w", "=", "[", "0", ",", "-", "1", ",", "0", "]", "\n", "h", "=", "1.65", "\n", "", "else", ":", "\n", "            ", "reg", "=", "RANSACRegressor", "(", ")", ".", "fit", "(", "pc_rect", "[", ":", ",", "[", "0", ",", "2", "]", "]", ",", "pc_rect", "[", ":", ",", "1", "]", ")", "\n", "w", "=", "np", ".", "zeros", "(", "3", ")", "\n", "w", "[", "0", "]", "=", "reg", ".", "estimator_", ".", "coef_", "[", "0", "]", "\n", "w", "[", "2", "]", "=", "reg", ".", "estimator_", ".", "coef_", "[", "1", "]", "\n", "w", "[", "1", "]", "=", "-", "1.0", "\n", "h", "=", "reg", ".", "estimator_", ".", "intercept_", "\n", "w", "=", "w", "/", "np", ".", "linalg", ".", "norm", "(", "w", ")", "\n", "", "print", "(", "w", ")", "\n", "print", "(", "h", ")", "\n", "\n", "lines", "=", "[", "'# Plane'", ",", "'Width 4'", ",", "'Height 1'", "]", "\n", "\n", "plane_file", "=", "os", ".", "path", ".", "join", "(", "planes_dir", ",", "data_idx", "+", "'.txt'", ")", "\n", "result_lines", "=", "lines", "[", ":", "3", "]", "\n", "result_lines", ".", "append", "(", "\"{:e} {:e} {:e} {:e}\"", ".", "format", "(", "w", "[", "0", "]", ",", "w", "[", "1", "]", ",", "w", "[", "2", "]", ",", "h", ")", ")", "\n", "result_str", "=", "'\\n'", ".", "join", "(", "result_lines", ")", "\n", "with", "open", "(", "plane_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "result_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Object3d.__init__": [[12, 35], ["label_file_line.split", "int", "numpy.array", "float"], "methods", ["None"], ["class", "Object3d", "(", "object", ")", ":", "\n", "    ", "''' 3d object label '''", "\n", "def", "__init__", "(", "self", ",", "label_file_line", ")", ":", "\n", "        ", "data", "=", "label_file_line", ".", "split", "(", "' '", ")", "\n", "data", "[", "1", ":", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "data", "[", "1", ":", "]", "]", "\n", "\n", "# extract label, truncation, occlusion", "\n", "self", ".", "type", "=", "data", "[", "0", "]", "# 'Car', 'Pedestrian', ...", "\n", "self", ".", "truncation", "=", "data", "[", "1", "]", "# truncated pixel ratio [0..1]", "\n", "self", ".", "occlusion", "=", "int", "(", "data", "[", "2", "]", ")", "# 0=visible, 1=partly occluded, 2=fully occluded, 3=unknown", "\n", "self", ".", "alpha", "=", "data", "[", "3", "]", "# object observation angle [-pi..pi]", "\n", "\n", "# extract 2d bounding box in 0-based coordinates", "\n", "self", ".", "xmin", "=", "data", "[", "4", "]", "# left", "\n", "self", ".", "ymin", "=", "data", "[", "5", "]", "# top", "\n", "self", ".", "xmax", "=", "data", "[", "6", "]", "# right", "\n", "self", ".", "ymax", "=", "data", "[", "7", "]", "# bottom", "\n", "self", ".", "box2d", "=", "np", ".", "array", "(", "[", "self", ".", "xmin", ",", "self", ".", "ymin", ",", "self", ".", "xmax", ",", "self", ".", "ymax", "]", ")", "\n", "\n", "# extract 3d bounding box information", "\n", "self", ".", "h", "=", "data", "[", "8", "]", "# box height", "\n", "self", ".", "w", "=", "data", "[", "9", "]", "# box width", "\n", "self", ".", "l", "=", "data", "[", "10", "]", "# box length (in meters)", "\n", "self", ".", "t", "=", "(", "data", "[", "11", "]", ",", "data", "[", "12", "]", ",", "data", "[", "13", "]", ")", "# location (x,y,z) in camera coord.", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Object3d.print_object": [[36, 45], ["print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.src.utils_func.Metric1.print"], ["self", ".", "ry", "=", "data", "[", "14", "]", "# yaw angle (around Y-axis in camera coordinates) [-pi..pi]", "\n", "\n", "", "def", "print_object", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Type, truncation, occlusion, alpha: %s, %d, %d, %f'", "%", "(", "self", ".", "type", ",", "self", ".", "truncation", ",", "self", ".", "occlusion", ",", "self", ".", "alpha", ")", ")", "\n", "print", "(", "'2d bbox (x0,y0,x1,y1): %f, %f, %f, %f'", "%", "(", "self", ".", "xmin", ",", "self", ".", "ymin", ",", "self", ".", "xmax", ",", "self", ".", "ymax", ")", ")", "\n", "print", "(", "'3d bbox h,w,l: %f, %f, %f'", "%", "(", "self", ".", "h", ",", "self", ".", "w", ",", "self", ".", "l", ")", ")", "\n", "print", "(", "'3d bbox location, ry: (%f, %f, %f), %f'", "%"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.__init__": [[79, 100], ["kitti_util.Calibration.read_calib_file", "numpy.reshape", "numpy.reshape", "kitti_util.inverse_rigid_trans", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.read_calib_file", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.inverse_rigid_trans"], ["\n", "def", "__init__", "(", "self", ",", "calib_filepath", ",", "from_video", "=", "False", ")", ":", "\n", "        ", "if", "from_video", ":", "\n", "            ", "calibs", "=", "self", ".", "read_calib_from_video", "(", "calib_filepath", ")", "\n", "", "else", ":", "\n", "            ", "calibs", "=", "self", ".", "read_calib_file", "(", "calib_filepath", ")", "\n", "# Projection matrix from rect camera coord to image2 coord", "\n", "", "self", ".", "P", "=", "calibs", "[", "'P2'", "]", "\n", "self", ".", "P", "=", "np", ".", "reshape", "(", "self", ".", "P", ",", "[", "3", ",", "4", "]", ")", "\n", "# Rigid transform from Velodyne coord to reference camera coord", "\n", "self", ".", "V2C", "=", "calibs", "[", "'Tr_velo_to_cam'", "]", "\n", "self", ".", "V2C", "=", "np", ".", "reshape", "(", "self", ".", "V2C", ",", "[", "3", ",", "4", "]", ")", "\n", "self", ".", "C2V", "=", "inverse_rigid_trans", "(", "self", ".", "V2C", ")", "\n", "# Rotation from reference camera coord to rect camera coord", "\n", "self", ".", "R0", "=", "calibs", "[", "'R0_rect'", "]", "\n", "self", ".", "R0", "=", "np", ".", "reshape", "(", "self", ".", "R0", ",", "[", "3", ",", "3", "]", ")", "\n", "\n", "# Camera intrinsics and extrinsics", "\n", "self", ".", "c_u", "=", "self", ".", "P", "[", "0", ",", "2", "]", "\n", "self", ".", "c_v", "=", "self", ".", "P", "[", "1", ",", "2", "]", "\n", "self", ".", "f_u", "=", "self", ".", "P", "[", "0", ",", "0", "]", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.read_calib_file": [[101, 119], ["open", "f.readlines", "line.rstrip.rstrip.rstrip", "line.rstrip.rstrip.split", "len", "numpy.array", "float", "value.split"], "methods", ["None"], ["self", ".", "f_v", "=", "self", ".", "P", "[", "1", ",", "1", "]", "\n", "self", ".", "b_x", "=", "self", ".", "P", "[", "0", ",", "3", "]", "/", "(", "-", "self", ".", "f_u", ")", "# relative", "\n", "self", ".", "b_y", "=", "self", ".", "P", "[", "1", ",", "3", "]", "/", "(", "-", "self", ".", "f_v", ")", "\n", "\n", "", "def", "read_calib_file", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "''' Read in a calibration file and parse into a dictionary.\n        Ref: https://github.com/utiasSTARS/pykitti/blob/master/pykitti/utils.py\n        '''", "\n", "data", "=", "{", "}", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "continue", "\n", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "# The only non-float values in these files are dates, which", "\n", "# we don't care about anyway", "\n", "try", ":", "\n", "                    ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "value", ".", "split", "(", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.cart2hom": [[120, 127], ["numpy.hstack", "numpy.ones"], "methods", ["None"], ["                    ", "pass", "\n", "\n", "", "", "", "return", "data", "\n", "\n", "", "def", "read_calib_from_video", "(", "self", ",", "calib_root_dir", ")", ":", "\n", "        ", "''' Read calibration for camera 2 from video calib files.\n            there are calib_cam_to_cam and calib_velo_to_cam under the calib_root_dir\n        '''", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_ref": [[131, 134], ["kitti_util.Calibration.cart2hom", "numpy.dot", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.cart2hom"], ["Tr_velo_to_cam", "=", "np", ".", "zeros", "(", "(", "3", ",", "4", ")", ")", "\n", "Tr_velo_to_cam", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "np", ".", "reshape", "(", "velo2cam", "[", "'R'", "]", ",", "[", "3", ",", "3", "]", ")", "\n", "Tr_velo_to_cam", "[", ":", ",", "3", "]", "=", "velo2cam", "[", "'T'", "]", "\n", "data", "[", "'Tr_velo_to_cam'", "]", "=", "np", ".", "reshape", "(", "Tr_velo_to_cam", ",", "[", "12", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_ref_to_velo": [[135, 138], ["kitti_util.Calibration.cart2hom", "numpy.dot", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.cart2hom"], ["data", "[", "'R0_rect'", "]", "=", "cam2cam", "[", "'R_rect_00'", "]", "\n", "data", "[", "'P2'", "]", "=", "cam2cam", "[", "'P_rect_02'", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_rect_to_ref": [[139, 142], ["numpy.transpose", "numpy.dot", "numpy.linalg.inv", "numpy.transpose"], "methods", ["None"], ["", "def", "cart2hom", "(", "self", ",", "pts_3d", ")", ":", "\n", "        ", "''' Input: nx3 points in Cartesian\n            Oupput: nx4 points in Homogeneous by pending 1\n        '''", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_ref_to_rect": [[143, 146], ["numpy.transpose", "numpy.dot", "numpy.transpose"], "methods", ["None"], ["n", "=", "pts_3d", ".", "shape", "[", "0", "]", "\n", "pts_3d_hom", "=", "np", ".", "hstack", "(", "(", "pts_3d", ",", "np", ".", "ones", "(", "(", "n", ",", "1", ")", ")", ")", ")", "\n", "return", "pts_3d_hom", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_rect_to_velo": [[147, 153], ["kitti_util.Calibration.project_rect_to_ref", "kitti_util.Calibration.project_ref_to_velo"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_rect_to_ref", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_ref_to_velo"], ["# ===========================", "\n", "# ------- 3d to 3d ----------", "\n", "# ===========================", "\n", "", "def", "project_velo_to_ref", "(", "self", ",", "pts_3d_velo", ")", ":", "\n", "        ", "pts_3d_velo", "=", "self", ".", "cart2hom", "(", "pts_3d_velo", ")", "# nx4", "\n", "return", "np", ".", "dot", "(", "pts_3d_velo", ",", "np", ".", "transpose", "(", "self", ".", "V2C", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_rect": [[154, 157], ["kitti_util.Calibration.project_velo_to_ref", "kitti_util.Calibration.project_ref_to_rect"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_ref", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_ref_to_rect"], ["", "def", "project_ref_to_velo", "(", "self", ",", "pts_3d_ref", ")", ":", "\n", "        ", "pts_3d_ref", "=", "self", ".", "cart2hom", "(", "pts_3d_ref", ")", "# nx4", "\n", "return", "np", ".", "dot", "(", "pts_3d_ref", ",", "np", ".", "transpose", "(", "self", ".", "C2V", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_rect_to_image": [[161, 170], ["kitti_util.Calibration.cart2hom", "numpy.dot", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.cart2hom"], ["\n", "", "def", "project_ref_to_rect", "(", "self", ",", "pts_3d_ref", ")", ":", "\n", "        ", "''' Input and Output are nx3 points '''", "\n", "return", "np", ".", "transpose", "(", "np", ".", "dot", "(", "self", ".", "R0", ",", "np", ".", "transpose", "(", "pts_3d_ref", ")", ")", ")", "\n", "\n", "", "def", "project_rect_to_velo", "(", "self", ",", "pts_3d_rect", ")", ":", "\n", "        ", "''' Input: nx3 points in rect camera coord.\n            Output: nx3 points in velodyne coord.\n        '''", "\n", "pts_3d_ref", "=", "self", ".", "project_rect_to_ref", "(", "pts_3d_rect", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_image": [[171, 177], ["kitti_util.Calibration.project_velo_to_rect", "kitti_util.Calibration.project_rect_to_image"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_rect", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_rect_to_image"], ["return", "self", ".", "project_ref_to_velo", "(", "pts_3d_ref", ")", "\n", "\n", "", "def", "project_velo_to_rect", "(", "self", ",", "pts_3d_velo", ")", ":", "\n", "        ", "pts_3d_ref", "=", "self", ".", "project_velo_to_ref", "(", "pts_3d_velo", ")", "\n", "return", "self", ".", "project_ref_to_rect", "(", "pts_3d_ref", ")", "\n", "\n", "# ===========================", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_image_to_rect": [[181, 194], ["numpy.zeros"], "methods", ["None"], ["        ", "''' Input: nx3 points in rect camera coord.\n            Output: nx2 points in image2 coord.\n        '''", "\n", "pts_3d_rect", "=", "self", ".", "cart2hom", "(", "pts_3d_rect", ")", "\n", "pts_2d", "=", "np", ".", "dot", "(", "pts_3d_rect", ",", "np", ".", "transpose", "(", "self", ".", "P", ")", ")", "# nx3", "\n", "pts_2d", "[", ":", ",", "0", "]", "/=", "pts_2d", "[", ":", ",", "2", "]", "\n", "pts_2d", "[", ":", ",", "1", "]", "/=", "pts_2d", "[", ":", ",", "2", "]", "\n", "return", "pts_2d", "[", ":", ",", "0", ":", "2", "]", "\n", "\n", "", "def", "project_velo_to_image", "(", "self", ",", "pts_3d_velo", ")", ":", "\n", "        ", "''' Input: nx3 points in velodyne coord.\n            Output: nx2 points in image2 coord.\n        '''", "\n", "pts_3d_rect", "=", "self", ".", "project_velo_to_rect", "(", "pts_3d_velo", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_image_to_velo": [[195, 198], ["kitti_util.Calibration.project_image_to_rect", "kitti_util.Calibration.project_rect_to_velo"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_image_to_rect", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_rect_to_velo"], ["return", "self", ".", "project_rect_to_image", "(", "pts_3d_rect", ")", "\n", "\n", "# ===========================", "\n", "# ------- New ----------", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.inverse_rigid_trans": [[200, 208], ["numpy.zeros_like", "numpy.transpose", "numpy.dot", "numpy.transpose"], "function", ["None"], ["\n", "", "def", "project_velo_to_image3", "(", "self", ",", "pts_3d_velo", ")", ":", "\n", "        ", "''' Input: nx3 points in velodyne coord.\n            Output: nx3 points in image2 coord + depth.\n        '''", "\n", "pts_3d_rect", "=", "self", ".", "project_velo_to_rect", "(", "pts_3d_velo", ")", "\n", "return", "self", ".", "project_rect_to_image3", "(", "pts_3d_rect", ")", "\n", "\n", "", "def", "project_rect_to_image3", "(", "self", ",", "pts_3d_rect", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.read_label": [[209, 213], ["line.rstrip", "kitti_util.Object3d", "open"], "function", ["None"], ["        ", "''' Input: nx3 points in rect camera coord.\n            Output: nx3 points in image2 coord + depth.\n        '''", "\n", "pts_3d_rect", "=", "self", ".", "cart2hom", "(", "pts_3d_rect", ")", "\n", "pts_2d", "=", "np", ".", "dot", "(", "pts_3d_rect", ",", "np", ".", "transpose", "(", "self", ".", "P", ")", ")", "# nx3", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_lidar.project_disp_to_depth": [[10, 24], ["numpy.meshgrid", "numpy.stack", "points.reshape.reshape", "calib.project_image_to_velo", "numpy.arange", "numpy.arange", "mask.reshape"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_image_to_velo"], ["def", "project_disp_to_depth", "(", "calib", ",", "disp", ",", "max_high", ")", ":", "\n", "    ", "disp", "[", "disp", "<", "0", "]", "=", "0", "\n", "baseline", "=", "0.54", "\n", "mask", "=", "disp", ">", "0", "\n", "depth", "=", "calib", ".", "f_u", "*", "baseline", "/", "(", "disp", "+", "1.", "-", "mask", ")", "\n", "rows", ",", "cols", "=", "depth", ".", "shape", "\n", "c", ",", "r", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "cols", ")", ",", "np", ".", "arange", "(", "rows", ")", ")", "\n", "points", "=", "np", ".", "stack", "(", "[", "c", ",", "r", ",", "depth", "]", ")", "\n", "points", "=", "points", ".", "reshape", "(", "(", "3", ",", "-", "1", ")", ")", "\n", "points", "=", "points", ".", "T", "\n", "points", "=", "points", "[", "mask", ".", "reshape", "(", "-", "1", ")", "]", "\n", "cloud", "=", "calib", ".", "project_image_to_velo", "(", "points", ")", "\n", "valid", "=", "(", "cloud", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "cloud", "[", ":", ",", "2", "]", "<", "max_high", ")", "\n", "return", "cloud", "[", "valid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_lidar_from_depth.project_disp_to_depth": [[10, 19], ["numpy.meshgrid", "numpy.stack", "points.reshape.reshape", "calib.project_image_to_velo", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_image_to_velo"], ["def", "project_disp_to_depth", "(", "calib", ",", "depth", ",", "max_high", ")", ":", "\n", "    ", "rows", ",", "cols", "=", "depth", ".", "shape", "\n", "c", ",", "r", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "cols", ")", ",", "np", ".", "arange", "(", "rows", ")", ")", "\n", "points", "=", "np", ".", "stack", "(", "[", "c", ",", "r", ",", "depth", "]", ")", "\n", "points", "=", "points", ".", "reshape", "(", "(", "3", ",", "-", "1", ")", ")", "\n", "points", "=", "points", ".", "T", "\n", "cloud", "=", "calib", ".", "project_image_to_velo", "(", "points", ")", "\n", "valid", "=", "(", "cloud", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "cloud", "[", ":", ",", "2", "]", "<", "max_high", ")", "\n", "return", "cloud", "[", "valid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_disp.generate_dispariy_from_velo": [[10, 27], ["calib.project_velo_to_image", "calib.project_velo_to_rect", "numpy.round().astype", "range", "numpy.zeros", "numpy.round", "int", "int"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_image", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_velo_to_rect"], ["def", "generate_dispariy_from_velo", "(", "pc_velo", ",", "height", ",", "width", ",", "calib", ")", ":", "\n", "    ", "pts_2d", "=", "calib", ".", "project_velo_to_image", "(", "pc_velo", ")", "\n", "fov_inds", "=", "(", "pts_2d", "[", ":", ",", "0", "]", "<", "width", "-", "1", ")", "&", "(", "pts_2d", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "pts_2d", "[", ":", ",", "1", "]", "<", "height", "-", "1", ")", "&", "(", "pts_2d", "[", ":", ",", "1", "]", ">=", "0", ")", "\n", "fov_inds", "=", "fov_inds", "&", "(", "pc_velo", "[", ":", ",", "0", "]", ">", "2", ")", "\n", "imgfov_pc_velo", "=", "pc_velo", "[", "fov_inds", ",", ":", "]", "\n", "imgfov_pts_2d", "=", "pts_2d", "[", "fov_inds", ",", ":", "]", "\n", "imgfov_pc_rect", "=", "calib", ".", "project_velo_to_rect", "(", "imgfov_pc_velo", ")", "\n", "depth_map", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "-", "1", "\n", "imgfov_pts_2d", "=", "np", ".", "round", "(", "imgfov_pts_2d", ")", ".", "astype", "(", "int", ")", "\n", "for", "i", "in", "range", "(", "imgfov_pts_2d", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "depth", "=", "imgfov_pc_rect", "[", "i", ",", "2", "]", "\n", "depth_map", "[", "int", "(", "imgfov_pts_2d", "[", "i", ",", "1", "]", ")", ",", "int", "(", "imgfov_pts_2d", "[", "i", ",", "0", "]", ")", "]", "=", "depth", "\n", "", "baseline", "=", "0.54", "\n", "\n", "disp_map", "=", "(", "calib", ".", "f_u", "*", "baseline", ")", "/", "depth_map", "\n", "return", "disp_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.convert_calib_from_stereo_dataset.main": [[12, 57], ["os.listdir", "os.path.isdir", "os.makedirs", "dict", "dict", "data[].strip().split", "data[].strip().split", "dict", "data[].strip().split", "data[].strip().split", "enumerate", "open", "open", "open", "r0.strip", "velo_cam.strip", "imu_velo.strip", "open", "f.write", "data[].strip", "data[].strip", "data[].strip", "data[].strip", "p.strip", "x.strip().split", "x.strip().split", "x.strip().split", "f.readlines", "f.readlines", "f.readlines", "x.strip", "len", "x.strip", "len", "x.strip", "len", "x.strip", "x.strip", "x.strip"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\n", "\n", "    ", "input_path", "=", "args", ".", "input_path", "\n", "output_path", "=", "args", ".", "output_path", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "", "name_list", "=", "os", ".", "listdir", "(", "input_path", "+", "'/calib_cam_to_cam'", ")", "\n", "for", "name", "in", "name_list", ":", "\n", "#cam to cam", "\n", "        ", "path", "=", "input_path", "+", "'/calib_cam_to_cam/'", "+", "name", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "data", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "':'", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "[", "1", ":", "]", "\n", "", "data", "=", "dict", "(", "data", ")", "\n", "pinfo", "=", "[", "data", "[", "'P_rect_00'", "]", ",", "data", "[", "'P_rect_01'", "]", ",", "data", "[", "'P_rect_02'", "]", ",", "data", "[", "'P_rect_03'", "]", "]", "\n", "r0", "=", "data", "[", "'R_rect_00'", "]", "\n", "\n", "#velo to cam", "\n", "path", "=", "input_path", "+", "'/calib_velo_to_cam/'", "+", "name", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "data", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "':'", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "[", "1", ":", "]", "\n", "", "data", "=", "dict", "(", "data", ")", "\n", "R", "=", "data", "[", "'R'", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "T", "=", "data", "[", "'T'", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "velo_cam", "=", "R", "[", ":", "3", "]", "+", "T", "[", ":", "1", "]", "+", "R", "[", "3", ":", "6", "]", "+", "T", "[", "1", ":", "2", "]", "+", "R", "[", "6", ":", "]", "+", "T", "[", "2", ":", "]", "\n", "velo_cam", "=", "' '", ".", "join", "(", "velo_cam", ")", "\n", "\n", "# imu to velo", "\n", "path", "=", "input_path", "+", "'/calib_imu_to_velo/'", "+", "name", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "data", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "':'", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "strip", "(", ")", ")", ">", "0", "]", "[", "1", ":", "]", "\n", "", "data", "=", "dict", "(", "data", ")", "\n", "R", "=", "data", "[", "'R'", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "T", "=", "data", "[", "'T'", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "imu_velo", "=", "R", "[", ":", "3", "]", "+", "T", "[", ":", "1", "]", "+", "R", "[", "3", ":", "6", "]", "+", "T", "[", "1", ":", "2", "]", "+", "R", "[", "6", ":", "]", "+", "T", "[", "2", ":", "]", "\n", "imu_velo", "=", "' '", ".", "join", "(", "imu_velo", ")", "\n", "\n", "text", "=", "''", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "pinfo", ")", ":", "\n", "            ", "text", "+=", "'P{}: {}\\n'", ".", "format", "(", "i", ",", "p", ".", "strip", "(", ")", ")", "\n", "", "text", "+=", "'R0_rect: {}\\n'", ".", "format", "(", "r0", ".", "strip", "(", ")", ")", "\n", "text", "+=", "'Tr_velo_to_cam: {}\\n'", ".", "format", "(", "velo_cam", ".", "strip", "(", ")", ")", "\n", "text", "+=", "'Tr_imu_to_velo: {}\\n'", ".", "format", "(", "imu_velo", ".", "strip", "(", ")", ")", "\n", "with", "open", "(", "output_path", "+", "'/'", "+", "name", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.generate_lidar_from_depth_std.project_disp_to_depth": [[10, 23], ["numpy.meshgrid", "numpy.stack", "points.reshape.reshape", "calib.project_image_to_velo", "numpy.arange", "numpy.arange", "mask.reshape"], "function", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.preprocess.kitti_util.Calibration.project_image_to_velo"], ["def", "project_disp_to_depth", "(", "calib", ",", "depth", ",", "max_high", ",", "std", ",", "std_th", ")", ":", "\n", "    ", "mask", "=", "std", ">", "std_th", "\n", "depth", "[", "mask", "]", "=", "0", "\n", "mask", "=", "(", "depth", ">=", "1", ")", "*", "(", "depth", "<=", "80", ")", "\n", "rows", ",", "cols", "=", "depth", ".", "shape", "\n", "c", ",", "r", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "cols", ")", ",", "np", ".", "arange", "(", "rows", ")", ")", "\n", "points", "=", "np", ".", "stack", "(", "[", "c", ",", "r", ",", "depth", "]", ")", "\n", "points", "=", "points", ".", "reshape", "(", "(", "3", ",", "-", "1", ")", ")", "\n", "points", "=", "points", ".", "T", "\n", "points", "=", "points", "[", "mask", ".", "reshape", "(", "-", "1", ")", "]", "\n", "cloud", "=", "calib", ".", "project_image_to_velo", "(", "points", ")", "\n", "valid", "=", "(", "cloud", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "cloud", "[", ":", ",", "2", "]", "<", "max_high", ")", "\n", "return", "cloud", "[", "valid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass_volume.hourglass.__init__": [[10, 33], ["nn.Module.__init__", "nn.Sequential", "submodule.convbn_3d", "nn.Sequential", "nn.Sequential", "nn.Sequential", "nn.Sequential", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "nn.ReLU", "nn.ConvTranspose3d", "nn.BatchNorm3d", "nn.ConvTranspose3d", "nn.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d"], ["class", "hourglass", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "inplanes", ")", ":", "\n", "        ", "super", "(", "hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inplanes", "*", "2", ")", ")", "# +conv2", "\n", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "inplanes", "*", "2", ",", "inplanes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inplanes", ")", ")", "# +x", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass_volume.hourglass.forward": [[34, 54], ["stackhourglass_volume.hourglass.conv1", "stackhourglass_volume.hourglass.conv2", "stackhourglass_volume.hourglass.conv3", "stackhourglass_volume.hourglass.conv4", "stackhourglass_volume.hourglass.conv6", "F.relu", "F.relu", "F.relu", "F.relu", "stackhourglass_volume.hourglass.conv5", "stackhourglass_volume.hourglass.conv5"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ",", "presqu", ",", "postsqu", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "# in:1/4 out:1/8", "\n", "pre", "=", "self", ".", "conv2", "(", "out", ")", "# in:1/8 out:1/8", "\n", "if", "postsqu", "is", "not", "None", ":", "\n", "            ", "pre", "=", "F", ".", "relu", "(", "pre", "+", "postsqu", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "pre", "=", "F", ".", "relu", "(", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "pre", ")", "# in:1/8 out:1/16", "\n", "out", "=", "self", ".", "conv4", "(", "out", ")", "# in:1/16 out:1/16", "\n", "\n", "if", "presqu", "is", "not", "None", ":", "\n", "            ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "presqu", ",", "inplace", "=", "True", ")", "# in:1/16 out:1/8", "\n", "", "else", ":", "\n", "            ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "", "out", "=", "self", ".", "conv6", "(", "post", ")", "# in:1/8 out:1/4", "\n", "\n", "return", "out", ",", "pre", ",", "post", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass_volume.PSMNet.__init__": [[57, 117], ["nn.Module.__init__", "submodule.feature_extraction", "nn.Sequential", "nn.Sequential", "stackhourglass_volume.hourglass", "stackhourglass_volume.hourglass", "stackhourglass_volume.hourglass", "nn.Sequential", "nn.Sequential", "nn.Sequential", "nn.Sequential", "nn.Sequential", "nn.Sequential", "stackhourglass_volume.PSMNet.modules", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "nn.ReLU", "submodule.convbn_3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "submodule.convbn_3d", "nn.ReLU", "nn.Conv3d", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d"], ["", "", "class", "PSMNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "maxdisp", ",", "maxdepth", ",", "down", "=", "2", ",", "scale", "=", "1", ")", ":", "\n", "        ", "super", "(", "PSMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxdisp", "=", "maxdisp", "\n", "self", ".", "down", "=", "down", "\n", "self", ".", "maxdepth", "=", "maxdepth", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "feature_extraction", "=", "feature_extraction", "(", ")", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "64", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "dres2", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "dres3", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "dres4", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "classif1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "self", ".", "classif2", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "self", ".", "classif3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "self", ".", "semantic1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "semantic2", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "semantic3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "kernel_size", "[", "2", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass_volume.PSMNet.interpolate_value_disp": [[118, 142], ["x.permute.permute.permute", "torch.unsqueeze", "torch.clamp", "torch.floor().long", "torch.min", "torch.max", "torch.gather", "torch.gather", "torch.squeeze", "torch.zeros_like", "torch.max.float", "torch.floor", "torch.ones_like"], "methods", ["None"], ["                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "warp", "(", "self", ",", "x", ",", "calib", ")", ":", "\n", "        ", "\"\"\"\n        warp an image/tensor (im2) back to im1, according to the optical flow\n        x: [B, C, D, H, W] (im2)\n        flo: [B, 2, H, W] flow\n        \"\"\"", "\n", "# B,C,D,H,W to B,H,W,C,D", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "3", ")", ".", "transpose", "(", "2", ",", "4", ")", "\n", "B", ",", "H", ",", "W", ",", "C", ",", "D", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "C", ",", "D", ")", "\n", "# mesh grid", "\n", "xx", "=", "(", "calib", "/", "(", "self", ".", "down", "*", "4.", ")", ")", "[", ":", ",", "None", "]", "/", "torch", ".", "arange", "(", "1", ",", "1", "+", "self", ".", "maxdepth", "//", "self", ".", "down", ",", "device", "=", "'cuda'", ")", ".", "float", "(", ")", "[", "None", ",", ":", "]", "\n", "new_D", "=", "int", "(", "self", ".", "maxdepth", "//", "self", ".", "down", ")", "\n", "xx", "=", "xx", ".", "view", "(", "B", ",", "1", ",", "new_D", ")", ".", "repeat", "(", "1", ",", "C", ",", "1", ")", "\n", "xx", "=", "xx", ".", "view", "(", "B", ",", "C", ",", "new_D", ",", "1", ")", "\n", "yy", "=", "torch", ".", "arange", "(", "0", ",", "C", ",", "device", "=", "'cuda'", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "new_D", ")", ".", "float", "(", ")", "\n", "yy", "=", "yy", ".", "view", "(", "1", ",", "C", ",", "new_D", ",", "1", ")", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "xx", ",", "yy", ")", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "\n", "vgrid", "=", "Variable", "(", "grid", ")", "\n", "\n", "# scale grid to [-1,1]", "\n", "vgrid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "2.0", "*", "vgrid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "/", "max", "(", "D", "-", "1", ",", "1", ")", "-", "1.0", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass_volume.PSMNet.off_regress": [[143, 148], ["F.tanh", "torch.clamp"], "methods", ["None"], ["vgrid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "2.0", "*", "vgrid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "/", "max", "(", "C", "-", "1", ",", "1", ")", "-", "1.0", "\n", "\n", "output", "=", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "vgrid", ")", ".", "contiguous", "(", ")", "\n", "output", "=", "output", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ",", "new_D", ")", ".", "transpose", "(", "1", ",", "3", ")", ".", "transpose", "(", "2", ",", "4", ")", "\n", "return", "output", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass_volume.PSMNet.forward": [[155, 247], ["stackhourglass_volume.PSMNet.feature_extraction", "stackhourglass_volume.PSMNet.feature_extraction", "Variable", "range", "cost.contiguous.contiguous.contiguous", "stackhourglass_volume.PSMNet.dres0", "stackhourglass_volume.PSMNet.dres2", "stackhourglass_volume.PSMNet.dres3", "stackhourglass_volume.PSMNet.dres4", "stackhourglass_volume.PSMNet.classif1", "stackhourglass_volume.PSMNet.semantic1", "F.upsample", "F.upsample", "torch.squeeze", "torch.squeeze", "F.softmax", "stackhourglass_volume.PSMNet.off_regress", "torch.cuda.FloatTensor().zero_", "stackhourglass_volume.PSMNet.dres1", "stackhourglass_volume.PSMNet.classif2", "stackhourglass_volume.PSMNet.classif3", "stackhourglass_volume.PSMNet.semantic2", "stackhourglass_volume.PSMNet.semantic3", "F.upsample", "F.upsample", "F.upsample", "F.upsample", "torch.squeeze", "torch.squeeze", "F.softmax", "stackhourglass_volume.PSMNet.off_regress", "torch.squeeze", "torch.squeeze", "F.softmax", "stackhourglass_volume.PSMNet.off_regress", "torch.max", "pred3_out.float.float.float", "stackhourglass_volume.PSMNet.interpolate_value_disp", "torch.cuda.FloatTensor", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "stackhourglass_volume.PSMNet.size", "stackhourglass_volume.PSMNet.size", "stackhourglass_volume.PSMNet.size", "stackhourglass_volume.PSMNet.size", "stackhourglass_volume.PSMNet.size", "stackhourglass_volume.PSMNet.size", "stackhourglass_volume.PSMNet.size", "stackhourglass_volume.PSMNet.size"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass_volume.PSMNet.off_regress", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass_volume.PSMNet.off_regress", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass_volume.PSMNet.off_regress", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass_volume.PSMNet.interpolate_value_disp"], ["\n", "# B,D,H,W to B,H,W,D", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "indices", "=", "torch", ".", "unsqueeze", "(", "indices", "-", "1", ",", "-", "1", ")", "\n", "\n", "indices", "=", "torch", ".", "clamp", "(", "indices", ",", "0", ",", "maxdepth", "-", "1", ")", "\n", "idx0", "=", "torch", ".", "floor", "(", "indices", ")", ".", "long", "(", ")", "\n", "idx1", "=", "torch", ".", "min", "(", "idx0", "+", "1", ",", "(", "maxdepth", "-", "1", ")", "*", "torch", ".", "ones_like", "(", "idx0", ")", ")", "\n", "idx0", "=", "torch", ".", "max", "(", "idx1", "-", "1", ",", "torch", ".", "zeros_like", "(", "idx0", ")", ")", "\n", "\n", "y0", "=", "torch", ".", "gather", "(", "x", ",", "-", "1", ",", "idx0", ")", "\n", "y1", "=", "torch", ".", "gather", "(", "x", ",", "-", "1", ",", "idx1", ")", "\n", "\n", "lmbda", "=", "indices", "-", "idx0", ".", "float", "(", ")", "\n", "output", "=", "(", "1", "-", "lmbda", ")", "*", "y0", "+", "(", "lmbda", ")", "*", "y1", "\n", "\n", "output", "=", "torch", ".", "squeeze", "(", "output", ",", "-", "1", ")", "\n", "return", "output", "\n", "\n", "# def off_regress(self, off):", "\n", "#     \"Regress offsets in [0, 1] range\"", "\n", "#     off = F.tanh(off) * 1.5", "\n", "#     off = torch.clamp(off, min=-1, max=1)*0.5 + 0.5", "\n", "#     return off", "\n", "\n", "", "def", "off_regress", "(", "self", ",", "off", ")", ":", "\n", "        ", "\"Regress offsets in [0, 1] range\"", "\n", "off", "=", "F", ".", "tanh", "(", "off", ")", "\n", "off", "=", "torch", ".", "clamp", "(", "off", ",", "min", "=", "-", "0.5", ",", "max", "=", "0.5", ")", "+", "0.5", "\n", "return", "off", "\n", "\n", "", "def", "forward", "(", "self", ",", "left", ",", "right", ",", "calib", ",", "out_std", "=", "False", ",", "out_cost_volume", "=", "False", ")", ":", "\n", "\n", "        ", "refimg_fea", "=", "self", ".", "feature_extraction", "(", "left", ")", "\n", "targetimg_fea", "=", "self", ".", "feature_extraction", "(", "right", ")", "\n", "\n", "# matching", "\n", "cost", "=", "Variable", "(", "\n", "torch", ".", "cuda", ".", "FloatTensor", "(", "refimg_fea", ".", "size", "(", ")", "[", "0", "]", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", "*", "2", ",", "self", ".", "maxdisp", "//", "4", ",", "refimg_fea", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "refimg_fea", ".", "size", "(", ")", "[", "3", "]", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "maxdisp", "//", "4", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "cost", "[", ":", ",", ":", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", "i", ":", "]", "=", "refimg_fea", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "\n", "cost", "[", ":", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", "i", ":", "]", "=", "targetimg_fea", "[", ":", ",", ":", ",", ":", ",", ":", "-", "i", "]", "\n", "", "else", ":", "\n", "                ", "cost", "[", ":", ",", ":", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", ":", "]", "=", "refimg_fea", "\n", "cost", "[", ":", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", ":", "]", "=", "targetimg_fea", "\n", "", "", "cost", "=", "cost", ".", "contiguous", "(", ")", "\n", "cost", "=", "self", ".", "warp", "(", "cost", ",", "calib", ")", "\n", "\n", "cost0", "=", "self", ".", "dres0", "(", "cost", ")", "\n", "cost0", "=", "self", ".", "dres1", "(", "cost0", ")", "+", "cost0", "\n", "\n", "out1", ",", "pre1", ",", "post1", "=", "self", ".", "dres2", "(", "cost0", ",", "None", ",", "None", ")", "\n", "out1", "=", "out1", "+", "cost0", "\n", "\n", "out2", ",", "pre2", ",", "post2", "=", "self", ".", "dres3", "(", "out1", ",", "pre1", ",", "post1", ")", "\n", "out2", "=", "out2", "+", "cost0", "\n", "\n", "out3", ",", "pre3", ",", "post3", "=", "self", ".", "dres4", "(", "out2", ",", "pre1", ",", "post2", ")", "\n", "out3", "=", "out3", "+", "cost0", "\n", "\n", "cost1", "=", "self", ".", "classif1", "(", "out1", ")", "\n", "cost2", "=", "self", ".", "classif2", "(", "out2", ")", "+", "cost1", "\n", "cost3", "=", "self", ".", "classif3", "(", "out3", ")", "+", "cost2", "\n", "\n", "off1", "=", "self", ".", "semantic1", "(", "out1", ")", "\n", "off2", "=", "self", ".", "semantic2", "(", "out2", ")", "+", "off1", "\n", "off3", "=", "self", ".", "semantic3", "(", "out3", ")", "+", "off2", "\n", "\n", "if", "out_cost_volume", ":", "\n", "            ", "return", "cost3", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "cost1", "=", "F", ".", "upsample", "(", "cost1", ",", "[", "self", ".", "maxdepth", "//", "self", ".", "scale", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ")", "\n", "cost2", "=", "F", ".", "upsample", "(", "cost2", ",", "[", "self", ".", "maxdepth", "//", "self", ".", "scale", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ")", "\n", "\n", "off1", "=", "F", ".", "upsample", "(", "off1", ",", "[", "self", ".", "maxdepth", "//", "self", ".", "scale", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ")", "\n", "off2", "=", "F", ".", "upsample", "(", "off2", ",", "[", "self", ".", "maxdepth", "//", "self", ".", "scale", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ")", "\n", "\n", "cost1", "=", "torch", ".", "squeeze", "(", "cost1", ",", "1", ")", "\n", "off1", "=", "torch", ".", "squeeze", "(", "off1", ",", "1", ")", "\n", "pred1", "=", "F", ".", "softmax", "(", "cost1", ",", "dim", "=", "1", ")", "\n", "# off1 = F.sigmoid(off1)", "\n", "off1", "=", "self", ".", "off_regress", "(", "off1", ")", "\n", "\n", "# _, pred1_out = torch.max(pred1, 1)", "\n", "# pred1_out = pred1_out.float() + 1  # Make 1-indexed", "\n", "# off1 = self.interpolate_value(off1, pred1_out)", "\n", "\n", "cost2", "=", "torch", ".", "squeeze", "(", "cost2", ",", "1", ")", "\n", "off2", "=", "torch", ".", "squeeze", "(", "off2", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.BasicBlock.__init__": [[23, 33], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn"], ["\n", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "pad", ",", "dilation", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "convbn", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "pad", ",", "dilation", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "convbn", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "pad", ",", "dilation", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.BasicBlock.forward": [[34, 44], ["submodule.BasicBlock.conv1", "submodule.BasicBlock.conv2", "submodule.BasicBlock.downsample"], "methods", ["None"], ["\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.matchshifted.__init__": [[46, 48], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__"], ["\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.matchshifted.forward": [[49, 55], ["left.size", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "range"], "methods", ["None"], ["\n", "", "", "class", "matchshifted", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "matchshifted", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "left", ",", "right", ",", "shift", ")", ":", "\n", "        ", "batch", ",", "filters", ",", "height", ",", "width", "=", "left", ".", "size", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.disparityregression.__init__": [[57, 61], ["torch.Module.__init__", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__"], ["torch", ".", "index_select", "(", "left", ",", "3", ",", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "[", "i", "for", "i", "in", "range", "(", "shift", ",", "width", ")", "]", ")", ")", ".", "cuda", "(", ")", ")", ",", "\n", "(", "shift", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "shifted_right", "=", "F", ".", "pad", "(", "\n", "torch", ".", "index_select", "(", "right", ",", "3", ",", "Variable", "(", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.disparityregression.forward": [[62, 66], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["torch", ".", "LongTensor", "(", "[", "i", "for", "i", "in", "range", "(", "width", "-", "shift", ")", "]", ")", ")", ".", "cuda", "(", ")", ")", ",", "\n", "(", "shift", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "shifted_left", ",", "shifted_right", ")", ",", "1", ")", ".", "view", "(", "\n", "batch", ",", "filters", "*", "2", ",", "1", ",", "height", ",", "width", ")", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.disparityregression_std.__init__": [[68, 72], ["torch.Module.__init__", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__"], ["\n", "", "", "class", "depthregression", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "maxdepth", ")", ":", "\n", "        ", "super", "(", "depthregression", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.disp = Variable(torch.Tensor(np.reshape(np.array(range(1, 1+maxdepth)), [1, maxdepth, 1, 1])).cuda(),", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.disparityregression_std.forward": [[73, 79], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["#                      requires_grad=False)", "\n", "self", ".", "disp", "=", "torch", ".", "arange", "(", "\n", "1", ",", "1", "+", "maxdepth", ",", "device", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# disp = self.disp.repeat(x.size()[0], 1, x.size()[2], x.size()[3])", "\n", "        ", "out", "=", "torch", ".", "sum", "(", "x", "*", "self", ".", "disp", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction.__init__": [[81, 115], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.feature_extraction._make_layer", "submodule.feature_extraction._make_layer", "submodule.feature_extraction._make_layer", "submodule.feature_extraction._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn"], ["\n", "\n", "", "", "class", "depthregression_off", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "maxdepth", ")", ":", "\n", "        ", "super", "(", "depthregression_off", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.disp = Variable(torch.Tensor(np.reshape(np.array(range(1, 1+maxdepth)), [1, maxdepth, 1, 1])).cuda(),", "\n", "#                      requires_grad=False)", "\n", "self", ".", "disp", "=", "torch", ".", "arange", "(", "\n", "1", ",", "1", "+", "maxdepth", ",", "device", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "off", ")", ":", "\n", "# disp = self.disp.repeat(x.size()[0], 1, x.size()[2], x.size()[3])", "\n", "        ", "out", "=", "torch", ".", "sum", "(", "x", "*", "(", "self", ".", "disp", "+", "off", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "depthregression_std", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "maxdepth", ")", ":", "\n", "        ", "super", "(", "depthregression_std", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.disp = Variable(torch.Tensor(np.reshape(np.array(range(1, 1+maxdepth)), [1, maxdepth, 1, 1])).cuda(), requires_grad=False)", "\n", "self", ".", "disp", "=", "torch", ".", "arange", "(", "\n", "1", ",", "1", "+", "maxdepth", ",", "device", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "predict", ")", ":", "\n", "        ", "disp", "=", "(", "self", ".", "disp", "-", "predict", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", "**", "2", "\n", "\n", "out", "=", "torch", ".", "sum", "(", "x", "*", "disp", ",", "1", ")", "\n", "out", "=", "torch", ".", "log", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "disparityregression_std", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "maxdisp", ")", ":", "\n", "        ", "super", "(", "disparityregression_std", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.disp = Variable(torch.Tensor(np.reshape(np.array(range(maxdisp)),[1,maxdisp,1,1])).cuda(), requires_grad=False)", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction._make_layer": [[116, 131], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["self", ".", "disp", "=", "torch", ".", "arange", "(", "maxdisp", ",", "device", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "[", "\n", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "predict", ")", ":", "\n", "        ", "disp", "=", "(", "self", ".", "disp", "-", "predict", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", "**", "2", "\n", "\n", "out", "=", "torch", ".", "sum", "(", "x", "*", "disp", ",", "1", ")", "\n", "out", "=", "out", "**", "0.5", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "disparityregression", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "maxdisp", ")", ":", "\n", "        ", "super", "(", "disparityregression", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.disp = Variable(torch.Tensor(np.reshape(np.array(range(maxdisp)), [1, maxdisp, 1, 1])).cuda(),", "\n", "#                      requires_grad=False)", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.feature_extraction.forward": [[132, 156], ["submodule.feature_extraction.firstconv", "submodule.feature_extraction.layer1", "submodule.feature_extraction.layer2", "submodule.feature_extraction.layer3", "submodule.feature_extraction.layer4", "submodule.feature_extraction.branch1", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction.branch2", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction.branch3", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction.branch4", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "submodule.feature_extraction.lastconv", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size"], "methods", ["None"], ["self", ".", "disp", "=", "torch", ".", "arange", "(", "maxdisp", ",", "devices", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", "[", "\n", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# disp = self.disp.repeat(x.size()[0], 1, x.size()[2], x.size()[3])", "\n", "        ", "out", "=", "torch", ".", "sum", "(", "x", "*", "self", ".", "disp", ",", "1", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "feature_extraction_nodownsample", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "feature_extraction_nodownsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "32", "\n", "self", ".", "firstconv", "=", "nn", ".", "Sequential", "(", "convbn", "(", "3", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "64", ",", "16", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn": [[10, 14], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d"], "function", ["None"], ["\n", "def", "convbn", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "pad", ",", "dilation", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", "if", "dilation", ">", "1", "else", "pad", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d": [[16, 20], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d"], "function", ["None"], ["\n", "", "def", "convbn_3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "pad", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "pad", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.hourglass.__init__": [[14, 37], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn_3d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inplanes", "*", "2", ")", ")", "# +conv2", "\n", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "inplanes", "*", "2", ",", "inplanes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inplanes", ")", ")", "# +x", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "presqu", ",", "postsqu", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "# in:1/4 out:1/8", "\n", "pre", "=", "self", ".", "conv2", "(", "out", ")", "# in:1/8 out:1/8", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.hourglass.forward": [[38, 58], ["stackhourglass.hourglass.conv1", "stackhourglass.hourglass.conv2", "stackhourglass.hourglass.conv3", "stackhourglass.hourglass.conv4", "stackhourglass.hourglass.conv6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "stackhourglass.hourglass.conv5", "stackhourglass.hourglass.conv5"], "methods", ["None"], ["if", "postsqu", "is", "not", "None", ":", "\n", "            ", "pre", "=", "F", ".", "relu", "(", "pre", "+", "postsqu", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "pre", "=", "F", ".", "relu", "(", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "pre", ")", "# in:1/8 out:1/16", "\n", "out", "=", "self", ".", "conv4", "(", "out", ")", "# in:1/16 out:1/16", "\n", "\n", "if", "presqu", "is", "not", "None", ":", "\n", "            ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "presqu", ",", "inplace", "=", "True", ")", "# in:1/16 out:1/8", "\n", "", "else", ":", "\n", "            ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "", "out", "=", "self", ".", "conv6", "(", "post", ")", "# in:1/8 out:1/4", "\n", "\n", "return", "out", ",", "pre", ",", "post", "\n", "\n", "\n", "", "", "class", "PSMNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "maxdisp", ",", "maxdepth", ",", "down", "=", "2", ")", ":", "\n", "        ", "super", "(", "PSMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__": [[61, 109], ["torch.Module.__init__", "submodule.feature_extraction", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "stackhourglass.hourglass", "stackhourglass.hourglass", "stackhourglass.hourglass", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "stackhourglass.PSMNet.modules", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn_3d", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.__init__", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d", "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.submodule.convbn_3d"], ["self", ".", "maxdepth", "=", "maxdepth", "\n", "\n", "self", ".", "feature_extraction", "=", "feature_extraction", "(", ")", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "64", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "dres2", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "dres3", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "dres4", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "classif1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "self", ".", "classif2", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "self", ".", "classif3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "kernel_size", "[", "2", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "warp", "(", "self", ",", "x", ",", "calib", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Div99_W-Stereo-Disp.disp_models.stackhourglass.PSMNet.forward": [[112, 174], ["stackhourglass.PSMNet.feature_extraction", "stackhourglass.PSMNet.feature_extraction", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "cost.contiguous.contiguous.contiguous", "stackhourglass.PSMNet.dres0", "stackhourglass.PSMNet.dres2", "stackhourglass.PSMNet.dres3", "stackhourglass.PSMNet.dres4", "stackhourglass.PSMNet.classif1", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "stackhourglass.PSMNet.dres1", "stackhourglass.PSMNet.classif2", "stackhourglass.PSMNet.classif3", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "submodule.disparityregression", "submodule.disparityregression", "submodule.disparityregression", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "left.size", "left.size", "submodule.disparityregression_std", "left.size", "left.size", "left.size", "left.size", "stackhourglass.PSMNet.size", "stackhourglass.PSMNet.size", "stackhourglass.PSMNet.size", "stackhourglass.PSMNet.size", "stackhourglass.PSMNet.size", "stackhourglass.PSMNet.size", "stackhourglass.PSMNet.size", "stackhourglass.PSMNet.size"], "methods", ["None"], ["\n", "# B,C,D,H,W to B,H,W,C,D", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "3", ")", ".", "transpose", "(", "2", ",", "4", ")", "\n", "B", ",", "H", ",", "W", ",", "C", ",", "D", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "C", ",", "D", ")", "\n", "# mesh grid", "\n", "xx", "=", "(", "calib", "/", "(", "self", ".", "down", "*", "4.", ")", ")", "[", ":", ",", "None", "]", "/", "torch", ".", "arange", "(", "1", ",", "1", "+", "self", ".", "maxdepth", "//", "self", ".", "down", ",", "device", "=", "'cuda'", ")", ".", "float", "(", ")", "[", "None", ",", ":", "]", "\n", "new_D", "=", "self", ".", "maxdepth", "//", "self", ".", "down", "\n", "xx", "=", "xx", ".", "view", "(", "B", ",", "1", ",", "new_D", ")", ".", "repeat", "(", "1", ",", "C", ",", "1", ")", "\n", "xx", "=", "xx", ".", "view", "(", "B", ",", "C", ",", "new_D", ",", "1", ")", "\n", "yy", "=", "torch", ".", "arange", "(", "0", ",", "C", ",", "device", "=", "'cuda'", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "new_D", ")", ".", "float", "(", ")", "\n", "yy", "=", "yy", ".", "view", "(", "1", ",", "C", ",", "new_D", ",", "1", ")", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "xx", ",", "yy", ")", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "\n", "vgrid", "=", "Variable", "(", "grid", ")", "\n", "\n", "# scale grid to [-1,1]", "\n", "vgrid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "2.0", "*", "vgrid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "/", "max", "(", "D", ",", "1", ")", "-", "1.0", "\n", "vgrid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "2.0", "*", "vgrid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "/", "max", "(", "C", "-", "1", ",", "1", ")", "-", "1.0", "\n", "\n", "output", "=", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "vgrid", ")", ".", "contiguous", "(", ")", "\n", "output", "=", "output", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ",", "new_D", ")", ".", "transpose", "(", "1", ",", "3", ")", ".", "transpose", "(", "2", ",", "4", ")", "\n", "return", "output", ".", "contiguous", "(", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "left", ",", "right", ",", "calib", ",", "out_std", "=", "False", ",", "out_cost_volume", "=", "False", ")", ":", "\n", "\n", "        ", "refimg_fea", "=", "self", ".", "feature_extraction", "(", "left", ")", "\n", "targetimg_fea", "=", "self", ".", "feature_extraction", "(", "right", ")", "\n", "\n", "# matching", "\n", "cost", "=", "Variable", "(", "\n", "torch", ".", "cuda", ".", "FloatTensor", "(", "refimg_fea", ".", "size", "(", ")", "[", "0", "]", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", "*", "2", ",", "self", ".", "maxdisp", "//", "4", ",", "refimg_fea", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "refimg_fea", ".", "size", "(", ")", "[", "3", "]", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "maxdisp", "//", "4", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "cost", "[", ":", ",", ":", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", "i", ":", "]", "=", "refimg_fea", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "\n", "cost", "[", ":", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", "i", ":", "]", "=", "targetimg_fea", "[", ":", ",", ":", ",", ":", ",", ":", "-", "i", "]", "\n", "", "else", ":", "\n", "                ", "cost", "[", ":", ",", ":", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", ":", "]", "=", "refimg_fea", "\n", "cost", "[", ":", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", ":", "]", "=", "targetimg_fea", "\n", "", "", "cost", "=", "cost", ".", "contiguous", "(", ")", "\n", "cost", "=", "self", ".", "warp", "(", "cost", ",", "calib", ")", "\n", "\n", "cost0", "=", "self", ".", "dres0", "(", "cost", ")", "\n", "cost0", "=", "self", ".", "dres1", "(", "cost0", ")", "+", "cost0", "\n", "\n", "out1", ",", "pre1", ",", "post1", "=", "self", ".", "dres2", "(", "cost0", ",", "None", ",", "None", ")", "\n", "out1", "=", "out1", "+", "cost0", "\n", "\n", "out2", ",", "pre2", ",", "post2", "=", "self", ".", "dres3", "(", "out1", ",", "pre1", ",", "post1", ")", "\n", "out2", "=", "out2", "+", "cost0", "\n", "\n", "out3", ",", "pre3", ",", "post3", "=", "self", ".", "dres4", "(", "out2", ",", "pre1", ",", "post2", ")", "\n", "out3", "=", "out3", "+", "cost0", "\n", "\n", "cost1", "=", "self", ".", "classif1", "(", "out1", ")", "\n", "cost2", "=", "self", ".", "classif2", "(", "out2", ")", "+", "cost1", "\n", "cost3", "=", "self", ".", "classif3", "(", "out3", ")", "+", "cost2", "\n", "if", "out_cost_volume", ":", "\n", "            ", "return", "cost3", "\n"]]}