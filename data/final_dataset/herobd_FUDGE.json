{"home.repos.pwc.inspect_result.herobd_FUDGE.None.graph.graph": [[14, 61], ["collections.defaultdict", "log.entries.items", "print", "collections.defaultdict.items", "entry.items", "numpy.array", "collections.defaultdict.items", "plt.show", "collections.defaultdict.items", "numpy.dtype", "np.array.max", "np.array.min", "np.array.mean", "print", "skip.append", "[].append", "[].append", "plt.figure", "plt.plot", "plt.xlabel", "plt.ylabel", "plt.title", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.show"], ["def", "graph", "(", "log", ",", "plot", "=", "True", ",", "substring", "=", "None", ")", ":", "\n", "    ", "graphs", "=", "defaultdict", "(", "lambda", ":", "{", "'iters'", ":", "[", "]", ",", "'values'", ":", "[", "]", "}", ")", "\n", "for", "index", ",", "entry", "in", "log", ".", "entries", ".", "items", "(", ")", ":", "\n", "        ", "iteration", "=", "entry", "[", "'iteration'", "]", "\n", "for", "metric", ",", "value", "in", "entry", ".", "items", "(", ")", ":", "\n", "            ", "if", "metric", "!=", "'iteration'", ":", "\n", "                ", "graphs", "[", "metric", "]", "[", "'iters'", "]", ".", "append", "(", "iteration", ")", "\n", "graphs", "[", "metric", "]", "[", "'values'", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "", "", "print", "(", "'summed'", ")", "\n", "skip", "=", "[", "]", "\n", "for", "metric", ",", "data", "in", "graphs", ".", "items", "(", ")", ":", "\n", "#print('{} max: {}, min {}'.format(metric,max(data['values']),min(data['values'])))", "\n", "        ", "ndata", "=", "np", ".", "array", "(", "data", "[", "'values'", "]", ")", "\n", "if", "ndata", ".", "dtype", "is", "not", "np", ".", "dtype", "(", "object", ")", ":", "\n", "            ", "maxV", "=", "ndata", ".", "max", "(", "axis", "=", "0", ")", "\n", "minV", "=", "ndata", ".", "min", "(", "axis", "=", "0", ")", "\n", "meanV", "=", "ndata", ".", "mean", "(", "axis", "=", "0", ")", "\n", "print", "(", "'{} max: {}, min: {}, mean: {}'", ".", "format", "(", "metric", ",", "maxV", ",", "minV", ",", "meanV", ")", ")", "\n", "", "else", ":", "\n", "            ", "skip", ".", "append", "(", "metric", ")", "\n", "\n", "", "", "if", "plot", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "i", "=", "1", "\n", "for", "metric", ",", "data", "in", "graphs", ".", "items", "(", ")", ":", "\n", "            ", "if", "metric", "in", "skip", ":", "\n", "                ", "continue", "\n", "", "if", "(", "substring", "is", "None", "and", "(", "metric", "[", ":", "3", "]", "==", "'avg'", "or", "metric", "[", ":", "3", "]", "==", "'val'", ")", ")", "or", "(", "substring", "is", "not", "None", "and", "substring", "in", "metric", ")", ":", "\n", "#print('{} == {}? {}'.format(metric[:len(substring)],substring,metric[:len(substring)]==substring))", "\n", "                ", "plt", ".", "figure", "(", "i", ")", "\n", "i", "+=", "1", "\n", "plt", ".", "plot", "(", "data", "[", "'iters'", "]", ",", "data", "[", "'values'", "]", ",", "'.-'", ")", "\n", "plt", ".", "xlabel", "(", "'iterations'", ")", "\n", "plt", ".", "ylabel", "(", "metric", ")", "\n", "plt", ".", "title", "(", "metric", ")", "\n", "\n", "if", "i", ">", "15", ":", "\n", "                    ", "print", "(", "'WARNING, too many windows, stopping'", ")", "\n", "break", "\n", "", "", "", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "i", "=", "1", "\n", "for", "metric", ",", "data", "in", "graphs", ".", "items", "(", ")", ":", "\n", "            ", "if", "metric", "[", ":", "3", "]", "==", "'avg'", "or", "metric", "[", ":", "3", "]", "==", "'val'", ":", "\n", "                ", "print", "(", "metric", ")", "\n", "print", "(", "data", "[", "'values'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.FUNSD_extract_lines.write": [[12, 76], ["print", "range", "data[].size", "cv2.boxPoints", "numpy.int0", "int", "int", "np.int0.astype", "numpy.array", "cv2.getPerspectiveTransform", "cv2.warpPerspective", "heights.append", "widths.append", "os.path.join", "cv2.imwrite", "out_text.write", "[].permute", "len", "img.numpy"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imwrite", "home.repos.pwc.inspect_result.herobd_FUDGE.None.FUNSD_extract_lines.write"], ["def", "write", "(", "data", ",", "out_dir", ",", "out_text", ")", ":", "#,out_handwriting,out_signature):", "\n", "    ", "b", "=", "0", "\n", "\n", "#print (data['img'].size())", "\n", "#img = (data['img'][0].permute(1,2,0)+1)/2.0", "\n", "img", "=", "(", "data", "[", "'img'", "]", "[", "b", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "+", "1", ")", "/", "2.0", "\n", "img", "=", "(", "img", ".", "numpy", "(", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "#print(img.shape)", "\n", "#print(data['pixel_gt']['table_pixels'].shape)", "\n", "print", "(", "data", "[", "'imgName'", "]", ")", "\n", "\n", "\n", "\n", "\n", "#print('num bb:{}'.format(data['bb_sizes'][b]))", "\n", "heights", "=", "[", "]", "\n", "widths", "=", "[", "]", "\n", "#with open(os.path.join(out_dir,'trans.txt'),'w') as out_text:", "\n", "for", "i", "in", "range", "(", "data", "[", "'bb_gt'", "]", ".", "size", "(", "1", ")", ")", ":", "\n", "        ", "xc", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "0", "]", "\n", "yc", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "1", "]", "\n", "rot", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "2", "]", "\n", "h", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "3", "]", "\n", "w", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "4", "]", "\n", "text", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "13", "]", "\n", "field", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "14", "]", "\n", "#typeBB= data['metadata'][i]['type']", "\n", "if", "len", "(", "data", "[", "'transcription'", "]", ")", ">", "0", ":", "\n", "            ", "trans", "=", "data", "[", "'transcription'", "]", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "trans", "=", "'$UNKNOWN$'", "\n", "#tr = (math.cos(rot)*w-math.sin(rot)*h +xc, math.sin(rot)*w+math.cos(rot)*h +yc)", "\n", "#tl = (math.cos(rot)*-w-math.sin(rot)*h +xc, math.sin(rot)*-w+math.cos(rot)*h +yc)", "\n", "#br = (math.cos(rot)*w-math.sin(rot)*-h +xc, math.sin(rot)*w+math.cos(rot)*-h +yc)", "\n", "#bl = (math.cos(rot)*-w-math.sin(rot)*-h +xc, math.sin(rot)*-w+math.cos(rot)*-h +yc)", "\n", "##from https://jdhao.github.io/2019/02/23/crop_rotated_rectangle_opencv/", "\n", "#rect = cv2.minAreaRect(np.array([bl,br,tr,tl]))", "\n", "##import pdb;pdb.set_trace()", "\n", "", "rect", "=", "(", "(", "xc", ",", "yc", ")", ",", "(", "2", "*", "w", ",", "2", "*", "h", ")", ",", "-", "180", "*", "rot", "/", "np", ".", "pi", ")", "\n", "box", "=", "cv2", ".", "boxPoints", "(", "rect", ")", "\n", "box", "=", "np", ".", "int0", "(", "box", ")", "\n", "width", "=", "int", "(", "rect", "[", "1", "]", "[", "0", "]", ")", "\n", "height", "=", "int", "(", "rect", "[", "1", "]", "[", "1", "]", ")", "\n", "\n", "src_pts", "=", "box", ".", "astype", "(", "\"float32\"", ")", "\n", "dst_pts", "=", "np", ".", "array", "(", "[", "[", "0", ",", "height", "-", "1", "]", ",", "\n", "[", "0", ",", "0", "]", ",", "\n", "[", "width", "-", "1", ",", "0", "]", ",", "\n", "[", "width", "-", "1", ",", "height", "-", "1", "]", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "# the perspective transformation matrix", "\n", "M", "=", "cv2", ".", "getPerspectiveTransform", "(", "src_pts", ",", "dst_pts", ")", "\n", "\n", "# directly warp the rotated rectangle to get the straightened rectangle", "\n", "warped", "=", "cv2", ".", "warpPerspective", "(", "img", "[", ":", ",", ":", ",", "0", "]", ",", "M", ",", "(", "width", ",", "height", ")", ")", "\n", "heights", ".", "append", "(", "warped", ".", "shape", "[", "0", "]", ")", "\n", "widths", ".", "append", "(", "warped", ".", "shape", "[", "1", "]", ")", "\n", "#line_img", "\n", "#print([tr,tl,br,bl])", "\n", "line_name", "=", "\"{}_{}.png\"", ".", "format", "(", "data", "[", "'imgName'", "]", ",", "i", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "line_name", ")", "\n", "cv2", ".", "imwrite", "(", "path", ",", "warped", ")", "\n", "out_text", ".", "write", "(", "'{}|{}\\n'", ".", "format", "(", "line_name", ",", "trans", "if", "trans", "is", "not", "None", "else", "'$UNKOWN$'", ")", ")", "\n", "", "return", "heights", ",", "widths", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.eval.update_status": [[19, 24], ["requests.get"], "function", ["None"], ["def", "update_status", "(", "name", ",", "message", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "r", "=", "requests", ".", "get", "(", "'http://sensei-status.herokuapp.com/sensei-update/{}?message={}'", ".", "format", "(", "name", ",", "message", ")", ")", "\n", "", "except", "requests", ".", "exceptions", ".", "ConnectionError", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.eval.save_style": [[30, 44], ["numpy.concatenate", "len", "numpy.array", "pickle.dump", "print", "open"], "function", ["None"], ["def", "save_style", "(", "location", ",", "volume", ",", "styles", ",", "authors", ",", "ids", "=", "None", ",", "doIds", "=", "False", ",", "spaced", "=", "None", ",", "strings", "=", "None", ",", "doSpaced", "=", "False", ")", ":", "\n", "    ", "styles", "=", "np", ".", "concatenate", "(", "styles", ",", "axis", "=", "0", ")", "\n", "todump", "=", "{", "'styles'", ":", "styles", ",", "'authors'", ":", "authors", "}", "\n", "\n", "if", "doIds", ":", "\n", "        ", "todump", "[", "'ids'", "]", "=", "ids", "\n", "", "if", "doSpaced", ":", "\n", "        ", "todump", "[", "'spaced'", "]", "=", "spaced", "#np.concatenate(spaced,axis=0)", "\n", "todump", "[", "'strings'", "]", "=", "strings", "\n", "", "if", "len", "(", "styles", ")", ">", "0", ":", "\n", "        ", "authors", "=", "np", ".", "array", "(", "authors", ")", "\n", "loc", "=", "location", "+", "'.{}'", ".", "format", "(", "volume", ")", "\n", "pickle", ".", "dump", "(", "todump", ",", "open", "(", "loc", ",", "'wb'", ")", ")", "\n", "print", "(", "'saved '", "+", "loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.eval.main": [[48, 569], ["numpy.random.seed", "torch.manual_seed", "logger.Logger", "eval", "eval.", "eval", "iter", "torch.load", "print", "json.load.keys", "json.load", "print", "data_loader.getDataLoader", "data_loader.getDataLoader", "model.train", "model.eval", "model.summary", "type", "config[].items", "eval", "eval", "iter", "torch.no_grad", "trainerClass.displayCharacterization", "json.load", "open", "range", "print", "model.load_state_dict", "print", "eval", "print", "eval", "numpy.zeros", "collections.defaultdict", "collections.defaultdict", "range", "open", "eval", "model.style_extractor.add_authors", "model.load_state_dict", "os.path.join", "os.path.join", "len", "saveStyleLoc.rfind", "range", "warnings.catch_warnings", "warnings.simplefilter", "len", "print", "range", "pickle.dump", "saveSpacedLoc.rfind", "type", "range", "eval.", "len", "int", "value[].split", "checkpoint[].items", "key.startswith", "eval", "model.style_extractor.add_authors", "model.num_params", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "collections.defaultdict", "toEval.append", "toEval.append", "eval.", "len", "iter.next", "eval.", "print", "len", "print", "print", "print", "print", "print", "print", "open", "open", "pickle.dump", "open", "pickle.dump", "len", "eval.save_style", "len", "eval.save_style", "instances.next", "eval.", "print", "print", "int", "toEval.append", "toEval.append", "len", "print", "iter.next", "type", "metricsO.items", "aux[].cpu().numpy", "stylesVal.append", "len", "eval.", "print", "type", "metricsO.items", "aux[].cpu().numpy", "stylesVal.append", "sum", "len", "len", "metricsO.sum", "eval.save_style", "print", "iter.next", "aux[].cpu().numpy", "styles.append", "metricsO.sum", "eval.save_style", "str", "sum", "float", "len", "type", "typeLists.items", "aux[].cpu", "eval.save_style", "len", "type", "typeLists.items", "aux[].cpu", "len", "sum", "type", "val_comb_metrics[].append", "len", "aux[].cpu", "sum", "type", "type", "type", "val_comb_metrics[].append", "sum", "type", "type", "sum", "sum", "sum", "sum", "sum", "numpy.mean", "numpy.mean", "print", "val_metrics_list[].items", "numpy.mean", "print", "print", "print", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.data_loader.data_loaders.getDataLoader", "home.repos.pwc.inspect_result.herobd_FUDGE.data_loader.data_loaders.getDataLoader", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.summary", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.displayCharacterization", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.num_params", "home.repos.pwc.inspect_result.herobd_FUDGE.None.eval.save_style", "home.repos.pwc.inspect_result.herobd_FUDGE.None.eval.save_style", "home.repos.pwc.inspect_result.herobd_FUDGE.None.eval.save_style", "home.repos.pwc.inspect_result.herobd_FUDGE.None.eval.save_style", "home.repos.pwc.inspect_result.herobd_FUDGE.None.eval.save_style"], ["", "", "def", "main", "(", "resume", ",", "saveDir", ",", "numberOfImages", ",", "index", ",", "gpu", "=", "None", ",", "shuffle", "=", "False", ",", "setBatch", "=", "None", ",", "config", "=", "None", ",", "thresh", "=", "None", ",", "addToConfig", "=", "None", ",", "test", "=", "False", ",", "toEval", "=", "None", ",", "verbosity", "=", "2", ",", "do_train", "=", "False", ",", "use_train_model", "=", "False", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "1234", ")", "\n", "torch", ".", "manual_seed", "(", "1234", ")", "\n", "if", "resume", "is", "not", "None", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "resume", ",", "map_location", "=", "lambda", "storage", ",", "location", ":", "storage", ")", "\n", "print", "(", "'loaded {} iteration {}'", ".", "format", "(", "checkpoint", "[", "'config'", "]", "[", "'name'", "]", ",", "checkpoint", "[", "'iteration'", "]", ")", ")", "\n", "if", "config", "is", "None", ":", "\n", "            ", "config", "=", "checkpoint", "[", "'config'", "]", "\n", "", "else", ":", "\n", "            ", "config", "=", "json", ".", "load", "(", "open", "(", "config", ")", ")", "\n", "", "for", "key", "in", "config", ".", "keys", "(", ")", ":", "\n", "            ", "if", "'pretrained'", "in", "key", ":", "\n", "                ", "config", "[", "key", "]", "=", "None", "\n", "", "", "", "else", ":", "\n", "        ", "checkpoint", "=", "None", "\n", "config", "=", "json", ".", "load", "(", "open", "(", "config", ")", ")", "\n", "", "config", "[", "'optimizer_type'", "]", "=", "\"none\"", "\n", "config", "[", "'trainer'", "]", "[", "'use_learning_schedule'", "]", "=", "False", "\n", "config", "[", "'trainer'", "]", "[", "'swa'", "]", "=", "False", "\n", "if", "gpu", "is", "None", ":", "\n", "        ", "config", "[", "'cuda'", "]", "=", "False", "\n", "", "else", ":", "\n", "        ", "config", "[", "'cuda'", "]", "=", "True", "\n", "config", "[", "'gpu'", "]", "=", "gpu", "\n", "", "if", "thresh", "is", "not", "None", ":", "\n", "        ", "config", "[", "'THRESH'", "]", "=", "thresh", "\n", "print", "(", "'Threshold at {}'", ".", "format", "(", "thresh", ")", ")", "\n", "", "config", "[", "'model'", "]", "[", "'max_graph_size'", "]", "=", "750", "\n", "config", "[", "'model'", "]", "[", "'max_graph_cand'", "]", "=", "700", "\n", "config", "[", "'data_loader'", "]", "[", "'pixel_count_thresh'", "]", "=", "900000000000", "\n", "config", "[", "'data_loader'", "]", "[", "'max_dim_thresh'", "]", "=", "999999999", "\n", "addDATASET", "=", "False", "\n", "if", "addToConfig", "is", "not", "None", ":", "\n", "        ", "for", "add", "in", "addToConfig", ":", "\n", "            ", "addTo", "=", "config", "\n", "printM", "=", "'added config['", "\n", "for", "i", "in", "range", "(", "len", "(", "add", ")", "-", "2", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "indName", "=", "int", "(", "add", "[", "i", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "indName", "=", "add", "[", "i", "]", "\n", "", "addTo", "=", "addTo", "[", "indName", "]", "\n", "printM", "+=", "add", "[", "i", "]", "+", "']['", "\n", "", "value", "=", "add", "[", "-", "1", "]", "\n", "if", "value", "==", "\"\"", ":", "\n", "                ", "value", "=", "None", "\n", "", "elif", "value", "[", "0", "]", "==", "'['", "and", "value", "[", "-", "1", "]", "==", "']'", ":", "\n", "                ", "value", "=", "value", "[", "1", ":", "-", "1", "]", ".", "split", "(", "'-'", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "value", "=", "int", "(", "value", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "try", ":", "\n", "                        ", "value", "=", "float", "(", "value", ")", "\n", "", "except", "ValueError", ":", "\n", "                        ", "if", "value", "==", "'None'", ":", "\n", "                            ", "value", "=", "None", "\n", "", "", "", "", "addTo", "[", "add", "[", "-", "2", "]", "]", "=", "value", "\n", "printM", "+=", "add", "[", "-", "2", "]", "+", "']={}'", ".", "format", "(", "value", ")", "\n", "print", "(", "printM", ")", "\n", "#if (add[-2]=='useDetections' or add[-2]=='useDetect') and 'gt' not in value:", "\n", "#    addDATASET=True", "\n", "\n", "#config['data_loader']['batch_size']=math.ceil(config['data_loader']['batch_size']/2)", "\n", "", "", "if", "'save_spaced'", "in", "config", ":", "\n", "        ", "spaced", "=", "{", "}", "\n", "spaced_val", "=", "{", "}", "\n", "config", "[", "'data_loader'", "]", "[", "'batch_size'", "]", "=", "1", "\n", "config", "[", "'validation'", "]", "[", "'batch_size'", "]", "=", "1", "\n", "if", "'a_batch_size'", "in", "config", "[", "'data_loader'", "]", ":", "\n", "            ", "config", "[", "'data_loader'", "]", "[", "'a_batch_size'", "]", "=", "1", "\n", "", "if", "'a_batch_size'", "in", "config", "[", "'validation'", "]", ":", "\n", "            ", "config", "[", "'validation'", "]", "[", "'a_batch_size'", "]", "=", "1", "\n", "\n", "", "", "config", "[", "'data_loader'", "]", "[", "'shuffle'", "]", "=", "shuffle", "\n", "#config['data_loader']['rot']=False", "\n", "config", "[", "'validation'", "]", "[", "'shuffle'", "]", "=", "shuffle", "\n", "config", "[", "'data_loader'", "]", "[", "'eval'", "]", "=", "True", "\n", "config", "[", "'validation'", "]", "[", "'eval'", "]", "=", "True", "\n", "#config['validation']", "\n", "\n", "if", "config", "[", "'data_loader'", "]", "[", "'data_set_name'", "]", "==", "'FormsDetect'", ":", "\n", "        ", "config", "[", "'data_loader'", "]", "[", "'batch_size'", "]", "=", "1", "\n", "del", "config", "[", "'data_loader'", "]", "[", "\"crop_params\"", "]", "\n", "config", "[", "'data_loader'", "]", "[", "\"rescale_range\"", "]", "=", "config", "[", "'validation'", "]", "[", "\"rescale_range\"", "]", "\n", "\n", "#print(config['data_loader'])", "\n", "", "if", "setBatch", "is", "not", "None", ":", "\n", "        ", "config", "[", "'data_loader'", "]", "[", "'batch_size'", "]", "=", "setBatch", "\n", "config", "[", "'validation'", "]", "[", "'batch_size'", "]", "=", "setBatch", "\n", "", "batchSize", "=", "config", "[", "'data_loader'", "]", "[", "'batch_size'", "]", "\n", "if", "'batch_size'", "in", "config", "[", "'validation'", "]", ":", "\n", "        ", "vBatchSize", "=", "config", "[", "'validation'", "]", "[", "'batch_size'", "]", "\n", "", "else", ":", "\n", "        ", "vBatchSize", "=", "batchSize", "\n", "", "if", "not", "test", ":", "\n", "        ", "data_loader", ",", "valid_data_loader", "=", "getDataLoader", "(", "config", ",", "'train'", ")", "\n", "", "else", ":", "\n", "        ", "valid_data_loader", ",", "data_loader", "=", "getDataLoader", "(", "config", ",", "'test'", ")", "\n", "data_loader", "=", "valid_data_loader", "\n", "\n", "", "if", "addDATASET", ":", "\n", "        ", "config", "[", "'DATASET'", "]", "=", "valid_data_loader", ".", "dataset", "\n", "#ttt=FormsDetect(dirPath='/home/ubuntu/brian/data/forms',split='train',config={'crop_to_page':False,'rescale_range':[450,800],'crop_params':{\"crop_size\":512},'no_blanks':True, \"only_types\": [\"text_start_gt\"], 'cache_resized_images': True})", "\n", "#data_loader = torch.utils.data.DataLoader(ttt, batch_size=16, shuffle=False, num_workers=5, collate_fn=forms_detect.collate)", "\n", "#valid_data_loader = data_loader.split_validation()", "\n", "\n", "", "if", "checkpoint", "is", "not", "None", ":", "\n", "        ", "if", "'swa_state_dict'", "in", "checkpoint", "and", "checkpoint", "[", "'iteration'", "]", ">", "config", "[", "'trainer'", "]", "[", "'swa_start'", "]", ":", "\n", "            ", "model", "=", "eval", "(", "config", "[", "'arch'", "]", ")", "(", "config", "[", "'model'", "]", ")", "\n", "if", "'style'", "in", "config", "[", "'model'", "]", "and", "'lookup'", "in", "config", "[", "'model'", "]", "[", "'style'", "]", ":", "\n", "                ", "model", ".", "style_extractor", ".", "add_authors", "(", "data_loader", ".", "dataset", ".", "authors", ")", "##HERE", "\n", "#just strip off the 'module.' tag. I DON'T KNOW IF THIS WILL WORK PROPERLY WITH BATCHNORM", "\n", "", "new_state_dict", "=", "{", "key", "[", "7", ":", "]", ":", "value", "for", "key", ",", "value", "in", "checkpoint", "[", "'swa_state_dict'", "]", ".", "items", "(", ")", "if", "key", ".", "startswith", "(", "'module.'", ")", "}", "\n", "model", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "print", "(", "'Successfully loaded SWA model'", ")", "\n", "", "elif", "'state_dict'", "in", "checkpoint", ":", "\n", "            ", "model", "=", "eval", "(", "config", "[", "'arch'", "]", ")", "(", "config", "[", "'model'", "]", ")", "\n", "if", "'style'", "in", "config", "[", "'model'", "]", "and", "'lookup'", "in", "config", "[", "'model'", "]", "[", "'style'", "]", ":", "\n", "                ", "model", ".", "style_extractor", ".", "add_authors", "(", "data_loader", ".", "dataset", ".", "authors", ")", "##HERE", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "elif", "'swa_model'", "in", "checkpoint", ":", "\n", "            ", "model", "=", "checkpoint", "[", "'swa_model'", "]", "\n", "", "else", ":", "\n", "            ", "model", "=", "checkpoint", "[", "'model'", "]", "\n", "", "", "else", ":", "\n", "        ", "model", "=", "eval", "(", "config", "[", "'arch'", "]", ")", "(", "config", "[", "'model'", "]", ")", "\n", "\n", "", "if", "use_train_model", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "", "if", "verbosity", ">", "1", ":", "\n", "        ", "model", ".", "summary", "(", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "'model param counts: {}'", ".", "format", "(", "model", ".", "num_params", "(", ")", ")", ")", "\n", "", "except", "torch", ".", "nn", ".", "modules", ".", "module", ".", "ModuleAttributeError", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "type", "(", "config", "[", "'loss'", "]", ")", "==", "dict", ":", "\n", "        ", "loss", "=", "{", "}", "#[eval(l) for l in config['loss']]", "\n", "for", "name", ",", "l", "in", "config", "[", "'loss'", "]", ".", "items", "(", ")", ":", "\n", "            ", "loss", "[", "name", "]", "=", "eval", "(", "l", ")", "\n", "", "", "else", ":", "\n", "        ", "loss", "=", "eval", "(", "config", "[", "'loss'", "]", ")", "\n", "", "metrics", "=", "[", "eval", "(", "metric", ")", "for", "metric", "in", "config", "[", "'metrics'", "]", "]", "\n", "\n", "\n", "train_logger", "=", "Logger", "(", ")", "\n", "trainerClass", "=", "eval", "(", "config", "[", "'trainer'", "]", "[", "'class'", "]", ")", "\n", "trainer", "=", "trainerClass", "(", "model", ",", "loss", ",", "metrics", ",", "\n", "resume", "=", "False", ",", "#path", "\n", "config", "=", "config", ",", "\n", "data_loader", "=", "data_loader", ",", "\n", "valid_data_loader", "=", "valid_data_loader", ",", "\n", "train_logger", "=", "train_logger", ")", "\n", "trainer", ".", "save_images_every", "=", "-", "1", "\n", "#saveFunc = eval(trainer_class+'_printer')", "\n", "saveFunc", "=", "eval", "(", "config", "[", "'data_loader'", "]", "[", "'data_set_name'", "]", "+", "'_eval'", ")", "\n", "\n", "\n", "step", "=", "5", "\n", "\n", "#numberOfImages = numberOfImages//config['data_loader']['batch_size']", "\n", "#print(len(data_loader))", "\n", "if", "data_loader", "is", "not", "None", ":", "\n", "        ", "train_iter", "=", "iter", "(", "data_loader", ")", "\n", "", "valid_iter", "=", "iter", "(", "valid_data_loader", ")", "\n", "\n", "#print(\"WARNING GRAD ENABLED\")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "index", "is", "None", ":", "\n", "\n", "\n", "            ", "if", "saveDir", "is", "not", "None", ":", "\n", "                ", "trainDir", "=", "os", ".", "path", ".", "join", "(", "saveDir", ",", "'train_'", "+", "config", "[", "'name'", "]", ")", "\n", "validDir", "=", "os", ".", "path", ".", "join", "(", "saveDir", ",", "'valid_'", "+", "config", "[", "'name'", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "trainDir", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "trainDir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "validDir", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "validDir", ")", "\n", "", "", "else", ":", "\n", "                ", "trainDir", "=", "None", "\n", "validDir", "=", "None", "\n", "\n", "", "val_metrics_sum", "=", "np", ".", "zeros", "(", "len", "(", "metrics", ")", ")", "\n", "val_metrics_list", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", "\n", "val_comb_metrics", "=", "defaultdict", "(", "list", ")", "\n", "\n", "#if numberOfImages==0:", "\n", "#    for i in range(len(valid_data_loader)):", "\n", "#        print('valid batch index: {}\\{} (not save)'.format(i,len(valid_data_loader)),end='\\r')", "\n", "#        instance=valid_iter.next()", "\n", "#        metricsO,_ = saveFunc(config,instance,model,gpu,metrics)", "\n", "\n", "#        if type(metricsO) == dict:", "\n", "#            for typ,typeLists in metricsO.items():", "\n", "#                if type(typeLists) == dict:", "\n", "#                    for name,lst in typeLists.items():", "\n", "#                        val_metrics_list[typ][name]+=lst", "\n", "#                        val_comb_metrics[typ]+=lst", "\n", "#                else:", "\n", "#                    if type(typeLists) is float or type(typeLists) is int:", "\n", "#                        typeLists = [typeLists]", "\n", "#                    val_comb_metrics[typ]+=typeLists", "\n", "#        else:", "\n", "#            val_metrics_sum += metricsO.sum(axis=0)/metricsO.shape[0]", "\n", "#else:", "\n", "\n", "####", "\n", "if", "'save_spaced'", "in", "config", ":", "\n", "                ", "spaced", "=", "{", "}", "\n", "spaced_val", "=", "{", "}", "\n", "assert", "(", "config", "[", "'data_loader'", "]", "[", "'batch_size'", "]", "==", "1", ")", "\n", "assert", "(", "config", "[", "'validation'", "]", "[", "'batch_size'", "]", "==", "1", ")", "\n", "if", "'a_batch_size'", "in", "config", "[", "'data_loader'", "]", ":", "\n", "                    ", "assert", "(", "config", "[", "'data_loader'", "]", "[", "'a_batch_size'", "]", "==", "1", ")", "\n", "", "if", "'a_batch_size'", "in", "config", "[", "'validation'", "]", ":", "\n", "                    ", "assert", "(", "config", "[", "'validation'", "]", "[", "'a_batch_size'", "]", "==", "1", ")", "\n", "", "", "if", "'save_nns'", "in", "config", ":", "\n", "                ", "nns", "=", "[", "]", "\n", "", "if", "'save_style'", "in", "config", ":", "\n", "                ", "if", "toEval", "is", "None", ":", "\n", "                    ", "toEval", "=", "[", "]", "\n", "", "if", "'style'", "not", "in", "toEval", ":", "\n", "                    ", "toEval", ".", "append", "(", "'style'", ")", "\n", "", "if", "'author'", "not", "in", "toEval", ":", "\n", "                    ", "toEval", ".", "append", "(", "'author'", ")", "\n", "", "styles", "=", "[", "]", "\n", "authors", "=", "[", "]", "\n", "strings", "=", "[", "]", "\n", "stylesVal", "=", "[", "]", "\n", "authorsVal", "=", "[", "]", "\n", "spacedVal", "=", "[", "]", "\n", "stringsVal", "=", "[", "]", "\n", "\n", "doIds", "=", "config", "[", "'data_loader'", "]", "[", "'data_set_name'", "]", "==", "'StyleWordDataset'", "\n", "#doSpaced = not doIds#?", "\n", "doSpaced", "=", "'doSpaced'", "in", "config", "\n", "if", "doSpaced", ":", "\n", "                    ", "if", "'spaced_label'", "not", "in", "toEval", ":", "\n", "                        ", "toEval", ".", "append", "(", "'spaced_label'", ")", "\n", "", "if", "'gt'", "not", "in", "toEval", ":", "\n", "                        ", "toEval", ".", "append", "(", "'gt'", ")", "\n", "", "", "ids", "=", "[", "]", "\n", "idsVal", "=", "[", "]", "\n", "saveStyleEvery", "=", "config", "[", "'saveStyleEvery'", "]", "if", "'saveStyleEvery'", "in", "config", "else", "5000", "\n", "saveStyleLoc", "=", "config", "[", "'save_style'", "]", "\n", "lastSlash", "=", "saveStyleLoc", ".", "rfind", "(", "'/'", ")", "\n", "if", "lastSlash", ">=", "0", ":", "\n", "                    ", "saveStyleValLoc", "=", "saveStyleLoc", "[", ":", "lastSlash", "+", "1", "]", "+", "'val_'", "+", "saveStyleLoc", "[", "lastSlash", "+", "1", ":", "]", "\n", "", "else", ":", "\n", "                    ", "saveStyleValLoc", "=", "'val_'", "+", "saveStyleLoc", "\n", "\n", "", "", "validName", "=", "'valid'", "if", "not", "test", "else", "'test'", "\n", "\n", "startBatch", "=", "config", "[", "'startBatch'", "]", "if", "'startBatch'", "in", "config", "else", "0", "\n", "numberOfBatches", "=", "numberOfImages", "//", "batchSize", "\n", "if", "numberOfBatches", "==", "0", "and", "numberOfImages", ">", "1", ":", "\n", "                ", "numberOfBatches", "=", "1", "\n", "\n", "#for index in range(startIndex,numberOfImages,step*batchSize):", "\n", "", "batch", "=", "startBatch", "\n", "for", "batch", "in", "range", "(", "startBatch", ",", "numberOfBatches", ")", ":", "\n", "\n", "#for validIndex in range(index,index+step*vBatchSize, vBatchSize):", "\n", "#for validBatch", "\n", "#if valyypidIndex/vBatchSize < len(valid_data_loader):", "\n", "                ", "if", "batch", "<", "len", "(", "valid_data_loader", ")", "and", "not", "do_train", ":", "\n", "                        ", "if", "verbosity", ">", "0", ":", "\n", "                            ", "print", "(", "'{} batch index: {}/{}       '", ".", "format", "(", "validName", ",", "batch", ",", "len", "(", "valid_data_loader", ")", ")", ",", "end", "=", "'\\r'", ")", "\n", "#data, target = valid_iter.next() #valid_data_loader[validIndex]", "\n", "#dataT  = _to_tensor(gpu,data)", "\n", "#output = model(dataT)", "\n", "#data = data.cpu().data.numpy()", "\n", "#output = output.cpu().data.numpy()", "\n", "#target = target.data.numpy()", "\n", "#metricsO = _eval_metrics_ind(metrics,output, target)", "\n", "", "metricsO", ",", "aux", "=", "saveFunc", "(", "config", ",", "valid_iter", ".", "next", "(", ")", ",", "trainer", ",", "metrics", ",", "validDir", ",", "batch", "*", "vBatchSize", ",", "toEval", "=", "toEval", ")", "\n", "if", "type", "(", "metricsO", ")", "==", "dict", ":", "\n", "                            ", "for", "typ", ",", "typeLists", "in", "metricsO", ".", "items", "(", ")", ":", "\n", "                                ", "if", "type", "(", "typeLists", ")", "==", "dict", ":", "\n", "                                    ", "for", "name", ",", "lst", "in", "typeLists", ".", "items", "(", ")", ":", "\n", "                                        ", "val_metrics_list", "[", "typ", "]", "[", "name", "]", "+=", "lst", "\n", "val_comb_metrics", "[", "typ", "]", "+=", "lst", "\n", "", "", "else", ":", "\n", "                                    ", "if", "type", "(", "typeLists", ")", "is", "float", "or", "type", "(", "typeLists", ")", "is", "int", ":", "\n", "                                        ", "typeLists", "=", "[", "typeLists", "]", "\n", "", "if", "type", "(", "typeLists", ")", "is", "np", ".", "ndarray", ":", "\n", "                                        ", "val_comb_metrics", "[", "typ", "]", ".", "append", "(", "typeLists", ")", "\n", "", "else", ":", "\n", "                                        ", "val_comb_metrics", "[", "typ", "]", "+=", "typeLists", "\n", "", "", "", "", "else", ":", "\n", "                            ", "val_metrics_sum", "+=", "metricsO", ".", "sum", "(", "axis", "=", "0", ")", "/", "metricsO", ".", "shape", "[", "0", "]", "\n", "", "if", "'save_spaced'", "in", "config", ":", "\n", "                            ", "spaced_val", "[", "aux", "[", "'name'", "]", "[", "0", "]", "]", "=", "aux", "[", "'spaced_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "'save_style'", "in", "config", ":", "\n", "                            ", "stylesVal", ".", "append", "(", "aux", "[", "'style'", "]", ")", "\n", "authorsVal", "+=", "aux", "[", "'authors'", "]", "\n", "if", "doIds", ":", "\n", "                                ", "idsVal", "+=", "aux", "[", "'name'", "]", "\n", "", "elif", "doSpaced", ":", "\n", "#spacedVal.append(aux[2])", "\n", "                                ", "spacedVal", "+=", "aux", "[", "'spaced_label'", "]", "\n", "stringsVal", "+=", "aux", "[", "'gt'", "]", "\n", "", "if", "batch", ">", "0", "and", "batch", "%", "saveStyleEvery", "==", "0", ":", "\n", "                                ", "save_style", "(", "saveStyleValLoc", ",", "batch", ",", "stylesVal", ",", "authorsVal", ",", "idsVal", ",", "doIds", ",", "spacedVal", ",", "stringsVal", ",", "doSpaced", ")", "\n", "stylesVal", "=", "[", "]", "\n", "authorsVal", "=", "[", "]", "\n", "idsVal", "=", "[", "]", "\n", "spacedVal", "=", "[", "]", "\n", "stringsVal", "=", "[", "]", "\n", "\n", "\n", "", "", "", "if", "not", "test", "and", "do_train", ":", "\n", "#for trainIndex in range(index,index+step*batchSize, batchSize):", "\n", "#    if trainIndex/batchSize < len(data_loader):", "\n", "                    ", "if", "batch", "<", "len", "(", "data_loader", ")", ":", "\n", "                            ", "if", "verbosity", ">", "0", ":", "\n", "                                ", "print", "(", "'train batch index: {}/{}        '", ".", "format", "(", "batch", ",", "len", "(", "data_loader", ")", ")", ",", "end", "=", "'\\r'", ")", "\n", "#data, target = train_iter.next() #data_loader[trainIndex]", "\n", "#dataT = _to_tensor(gpu,data)", "\n", "#output = model(dataT)", "\n", "#data = data.cpu().data.numpy()", "\n", "#output = output.cpu().data.numpy()", "\n", "#target = target.data.numpy()", "\n", "#metricsO = _eval_metrics_ind(metrics,output, target)", "\n", "", "_", ",", "aux", "=", "saveFunc", "(", "config", ",", "train_iter", ".", "next", "(", ")", ",", "trainer", ",", "metrics", ",", "trainDir", ",", "batch", "*", "batchSize", ",", "toEval", "=", "toEval", ")", "\n", "if", "'save_nns'", "in", "config", ":", "\n", "                                ", "nns", "+=", "aux", "[", "-", "1", "]", "\n", "", "if", "'save_spaced'", "in", "config", ":", "\n", "                                ", "spaced", "[", "aux", "[", "'name'", "]", "[", "0", "]", "]", "=", "aux", "[", "'spaced_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "'save_style'", "in", "config", ":", "\n", "                                ", "styles", ".", "append", "(", "aux", "[", "'style'", "]", ")", "\n", "authors", "+=", "aux", "[", "'author'", "]", "\n", "if", "doIds", ":", "\n", "                                    ", "ids", "+=", "aux", "[", "'name'", "]", "\n", "", "elif", "doSpaced", ":", "\n", "#spaced.append(aux[2])", "\n", "                                    ", "spaced", "+=", "aux", "[", "'spaced_label'", "]", "\n", "strings", "+=", "aux", "[", "'gt'", "]", "\n", "", "if", "batch", ">", "0", "and", "batch", "%", "saveStyleEvery", "==", "0", ":", "\n", "                                    ", "save_style", "(", "saveStyleLoc", ",", "batch", ",", "styles", ",", "authors", ",", "ids", ",", "doIds", ",", "spaced", ",", "strings", ",", "doSpaced", ")", "\n", "styles", "=", "[", "]", "\n", "authors", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "spaced", "=", "[", "]", "\n", "strings", "=", "[", "]", "\n", "\n", "#if gpu is not None or numberOfImages==0:", "\n", "", "", "", "", "", "try", ":", "\n", "                ", "for", "vi", "in", "range", "(", "batch", ",", "len", "(", "valid_data_loader", ")", ")", ":", "\n", "                    ", "if", "verbosity", ">", "0", ":", "\n", "                        ", "print", "(", "'{} batch index: {}\\{} (not save)   '", ".", "format", "(", "validName", ",", "vi", ",", "len", "(", "valid_data_loader", ")", ")", ",", "end", "=", "'\\r'", ")", "\n", "", "instance", "=", "valid_iter", ".", "next", "(", ")", "\n", "metricsO", ",", "aux", "=", "saveFunc", "(", "config", ",", "instance", ",", "trainer", ",", "metrics", ",", "toEval", "=", "toEval", ")", "\n", "if", "type", "(", "metricsO", ")", "==", "dict", ":", "\n", "                        ", "for", "typ", ",", "typeLists", "in", "metricsO", ".", "items", "(", ")", ":", "\n", "                            ", "if", "type", "(", "typeLists", ")", "==", "dict", ":", "\n", "                                ", "for", "name", ",", "lst", "in", "typeLists", ".", "items", "(", ")", ":", "\n", "                                    ", "val_metrics_list", "[", "typ", "]", "[", "name", "]", "+=", "lst", "\n", "val_comb_metrics", "[", "typ", "]", "+=", "lst", "\n", "", "", "elif", "typeLists", "is", "not", "None", ":", "\n", "                                ", "if", "type", "(", "typeLists", ")", "is", "float", "or", "type", "(", "typeLists", ")", "is", "int", ":", "\n", "                                    ", "typeLists", "=", "[", "typeLists", "]", "\n", "", "if", "type", "(", "typeLists", ")", "is", "np", ".", "ndarray", ":", "\n", "                                    ", "val_comb_metrics", "[", "typ", "]", ".", "append", "(", "typeLists", ")", "\n", "", "else", ":", "\n", "                                    ", "val_comb_metrics", "[", "typ", "]", "+=", "typeLists", "\n", "", "", "", "", "else", ":", "\n", "                        ", "val_metrics_sum", "+=", "metricsO", ".", "sum", "(", "axis", "=", "0", ")", "/", "metricsO", ".", "shape", "[", "0", "]", "\n", "", "if", "'save_spaced'", "in", "config", ":", "\n", "                        ", "spaced_val", "[", "aux", "[", "'name'", "]", "[", "0", "]", "]", "=", "aux", "[", "'spaced_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "'save_style'", "in", "config", ":", "\n", "                        ", "stylesVal", ".", "append", "(", "aux", "[", "'style'", "]", ")", "\n", "authorsVal", "+=", "aux", "[", "'author'", "]", "\n", "if", "doIds", ":", "\n", "                            ", "idsVal", "+=", "aux", "[", "'name'", "]", "\n", "", "elif", "doSpaced", ":", "\n", "#spacedVal.append(aux[2])", "\n", "                            ", "spacedVal", "+=", "aux", "[", "'spaced_label'", "]", "\n", "stringsVal", "+=", "aux", "[", "'gt'", "]", "\n", "", "if", "vi", ">", "0", "and", "vi", "%", "saveStyleEvery", "==", "0", ":", "\n", "                            ", "save_style", "(", "saveStyleValLoc", ",", "vi", ",", "stylesVal", ",", "authorsVal", ",", "idsVal", ",", "doIds", ",", "spacedVal", ",", "stringsVal", ",", "doSpaced", ")", "\n", "stylesVal", "=", "[", "]", "\n", "authorsVal", "=", "[", "]", "\n", "idsVal", "=", "[", "]", "\n", "spacedVal", "=", "[", "]", "\n", "stringsVal", "=", "[", "]", "\n", "", "", "", "", "except", "StopIteration", ":", "\n", "                ", "print", "(", "'ERROR: ran out of valid batches early. Expected {} more'", ".", "format", "(", "len", "(", "valid_data_loader", ")", "-", "vi", ")", ")", "\n", "####", "\n", "\n", "", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "simplefilter", "(", "'error'", ")", "\n", "val_metrics_sum", "/=", "len", "(", "valid_data_loader", ")", "\n", "BROS_prec", "=", "None", "\n", "rel_BROS_TP", "=", "None", "\n", "group_TP", "=", "None", "\n", "print", "(", "'{} metrics'", ".", "format", "(", "validName", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "metrics", ")", ")", ":", "\n", "                    ", "print", "(", "metrics", "[", "i", "]", ".", "__name__", "+", "': '", "+", "str", "(", "val_metrics_sum", "[", "i", "]", ")", ")", "\n", "", "for", "typ", "in", "val_comb_metrics", ":", "\n", "                    ", "if", "'final_rel_XX_predCount'", "==", "typ", ":", "\n", "                        ", "rel_pred_count", "=", "sum", "(", "val_comb_metrics", "[", "typ", "]", ")", "\n", "", "elif", "'final_rel_XX_gtCount'", "==", "typ", ":", "\n", "                        ", "rel_gt_count", "=", "sum", "(", "val_comb_metrics", "[", "typ", "]", ")", "\n", "", "elif", "'final_rel_XX_strict_TP'", "==", "typ", ":", "\n", "                        ", "rel_strict_TP", "=", "sum", "(", "val_comb_metrics", "[", "typ", "]", ")", "\n", "", "elif", "'final_rel_XX_BROS_TP'", "==", "typ", ":", "\n", "                        ", "rel_BROS_TP", "=", "sum", "(", "val_comb_metrics", "[", "typ", "]", ")", "\n", "", "elif", "'final_group_XX_TP'", "==", "typ", ":", "\n", "                        ", "group_TP", "=", "sum", "(", "val_comb_metrics", "[", "typ", "]", ")", "\n", "", "elif", "'final_group_XX_gtCount'", "==", "typ", ":", "\n", "                        ", "group_gt_count", "=", "sum", "(", "val_comb_metrics", "[", "typ", "]", ")", "\n", "", "elif", "'final_group_XX_predCount'", "==", "typ", ":", "\n", "                        ", "group_pred_count", "=", "sum", "(", "val_comb_metrics", "[", "typ", "]", ")", "\n", "", "elif", "'ED_TP_XX'", "==", "typ", ":", "\n", "                        ", "group_TP", "=", "sum", "(", "val_comb_metrics", "[", "typ", "]", ")", "\n", "", "elif", "'ED_true_count_XX'", "==", "typ", ":", "\n", "                        ", "group_gt_count", "=", "sum", "(", "val_comb_metrics", "[", "typ", "]", ")", "\n", "", "elif", "'ED_pred_count_XX'", "==", "typ", ":", "\n", "                        ", "group_pred_count", "=", "sum", "(", "val_comb_metrics", "[", "typ", "]", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "assert", "'XX'", "not", "in", "typ", "\n", "if", "'final_rel_BROS_prec'", "==", "typ", ":", "\n", "                            ", "BROS_prec", "=", "np", ".", "mean", "(", "val_comb_metrics", "[", "typ", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "'final_rel_BROS_recall'", "==", "typ", ":", "\n", "                            ", "BROS_recall", "=", "np", ".", "mean", "(", "val_comb_metrics", "[", "typ", "]", ",", "axis", "=", "0", ")", "\n", "", "if", "'final_rel_BROS_Fm'", "==", "typ", ":", "\n", "                            ", "BROS_Fm", "=", "np", ".", "mean", "(", "val_comb_metrics", "[", "typ", "]", ",", "axis", "=", "0", ")", "\n", "", "try", ":", "\n", "                            ", "print", "(", "'{} overall mean: {}, std {}'", ".", "format", "(", "typ", ",", "np", ".", "mean", "(", "val_comb_metrics", "[", "typ", "]", ",", "axis", "=", "0", ")", ",", "np", ".", "std", "(", "val_comb_metrics", "[", "typ", "]", ",", "axis", "=", "0", ")", ")", ")", "\n", "for", "name", ",", "typeLists", "in", "val_metrics_list", "[", "typ", "]", ".", "items", "(", ")", ":", "\n", "                                ", "print", "(", "'{} {} mean: {}, std {}'", ".", "format", "(", "typ", ",", "name", ",", "np", ".", "mean", "(", "typeLists", ",", "axis", "=", "0", ")", ",", "np", ".", "std", "(", "typeLists", ",", "axis", "=", "0", ")", ")", ")", "\n", "", "", "except", "e", ":", "\n", "                            ", "print", "(", "'ERROR on {}: {}'", ".", "format", "(", "typ", ",", "e", ")", ")", "\n", "print", "(", "'{}'", ".", "format", "(", "val_comb_metrics", "[", "typ", "]", ")", ")", "\n", "\n", "", "", "", "if", "BROS_prec", "is", "not", "None", ":", "\n", "                    ", "print", "(", "'----PER DOCUMENT------'", ")", "\n", "print", "(", "'BROS relationship Recall Prec F1: {:.2f} , {:.2f} , {:.2f}'", ".", "format", "(", "100", "*", "BROS_recall", ",", "100", "*", "BROS_prec", ",", "100", "*", "BROS_Fm", ")", ")", "\n", "", "if", "rel_BROS_TP", "is", "not", "None", ":", "\n", "                    ", "print", "(", "'----OVERALL------'", ")", "\n", "BROS_recall", "=", "rel_BROS_TP", "/", "rel_gt_count", "\n", "BROS_prec", "=", "rel_BROS_TP", "/", "rel_pred_count", "\n", "print", "(", "'BROS relationships Recall Prec F1: {:.2f} , {:.2f} , {:.2f}'", ".", "format", "(", "100", "*", "BROS_recall", ",", "100", "*", "BROS_prec", ",", "100", "*", "2", "*", "BROS_recall", "*", "BROS_prec", "/", "(", "BROS_prec", "+", "BROS_recall", ")", ")", ")", "\n", "#strict_recall = rel_strict_TP/rel_gt_count", "\n", "#strict_prec = rel_strict_TP/rel_pred_count", "\n", "#print('strict relationships Recall Prec F1: {:.2f} , {:.2f} , {:.2f}'.format(100*strict_recall,100*strict_prec,100*2*strict_recall*strict_prec/(strict_prec+strict_recall)))", "\n", "", "if", "group_TP", "is", "not", "None", ":", "\n", "                    ", "group_recall", "=", "group_TP", "/", "group_gt_count", "\n", "group_prec", "=", "group_TP", "/", "group_pred_count", "\n", "print", "(", "'entity Recall Prec F1: {:.2f} , {:.2f} , {:.2f}'", ".", "format", "(", "100", "*", "group_recall", ",", "100", "*", "group_prec", ",", "100", "*", "2", "*", "group_recall", "*", "group_prec", "/", "(", "group_prec", "+", "group_recall", ")", ")", ")", "\n", "\n", "", "", "if", "'save_nns'", "in", "config", ":", "\n", "                ", "pickle", ".", "dump", "(", "nns", ",", "open", "(", "config", "[", "'save_nns'", "]", ",", "'wb'", ")", ")", "\n", "", "if", "'save_spaced'", "in", "config", ":", "\n", "#import pdb;pdb.set_trace()", "\n", "#spaced = torch.cat(spaced,dim=1).numpy()", "\n", "#spaced_val = torch.cat(spaced_val,dim=1).numpy()", "\n", "                ", "saveSpacedLoc", "=", "config", "[", "'save_spaced'", "]", "\n", "lastSlash", "=", "saveSpacedLoc", ".", "rfind", "(", "'/'", ")", "\n", "if", "lastSlash", ">=", "0", ":", "\n", "                    ", "saveSpacedValLoc", "=", "saveSpacedLoc", "[", ":", "lastSlash", "+", "1", "]", "+", "'val_'", "+", "saveSpacedLoc", "[", "lastSlash", "+", "1", ":", "]", "\n", "", "else", ":", "\n", "                    ", "saveSpacedValLoc", "=", "'val_'", "+", "saveSpacedLoc", "\n", "", "with", "open", "(", "saveSpacedLoc", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "spaced", ",", "f", ")", "\n", "\n", "", "with", "open", "(", "saveSpacedValLoc", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "spaced_val", ",", "f", ")", "\n", "\n", "", "", "if", "'save_style'", "in", "config", ":", "\n", "                ", "if", "len", "(", "styles", ")", ">", "0", ":", "\n", "                    ", "save_style", "(", "saveStyleLoc", ",", "len", "(", "data_loader", ")", ",", "styles", ",", "authors", ",", "ids", ",", "doIds", ")", "\n", "", "if", "len", "(", "stylesVal", ")", ">", "0", ":", "\n", "                    ", "save_style", "(", "saveStyleValLoc", ",", "len", "(", "valid_data_loader", ")", ",", "stylesVal", ",", "authorsVal", ",", "idsVal", ",", "doIds", ")", "\n", "", "", "", "elif", "type", "(", "index", ")", "==", "int", ":", "\n", "            ", "if", "index", ">", "0", ":", "\n", "                ", "instances", "=", "train_iter", "\n", "", "else", ":", "\n", "                ", "index", "*=", "-", "1", "\n", "instances", "=", "valid_iter", "\n", "", "batchIndex", "=", "index", "//", "batchSize", "\n", "inBatchIndex", "=", "index", "%", "batchSize", "\n", "for", "i", "in", "range", "(", "batchIndex", "+", "1", ")", ":", "\n", "                ", "instance", "=", "instances", ".", "next", "(", ")", "\n", "#data, target = data[inBatchIndex:inBatchIndex+1], target[inBatchIndex:inBatchIndex+1]", "\n", "#dataT = _to_tensor(gpu,data)", "\n", "#output = model(dataT)", "\n", "#data = data.cpu().data.numpy()", "\n", "#output = output.cpu().data.numpy()", "\n", "#target = target.data.numpy()", "\n", "#print (output.shape)", "\n", "#print ((output.min(), output.amin()))", "\n", "#print (target.shape)", "\n", "#print ((target.amin(), target.amin()))", "\n", "#metricsO = _eval_metrics_ind(metrics,output, target)", "\n", "", "saveFunc", "(", "config", ",", "instance", ",", "model", ",", "gpu", ",", "metrics", ",", "saveDir", ",", "batchIndex", "*", "batchSize", ",", "toEval", "=", "toEval", ")", "\n", "", "else", ":", "\n", "            ", "for", "instance", "in", "data_loader", ":", "\n", "                ", "if", "index", "in", "instance", "[", "'imgName'", "]", ":", "\n", "                    ", "break", "\n", "", "", "if", "index", "not", "in", "instance", "[", "'imgName'", "]", ":", "\n", "                ", "for", "instance", "in", "valid_data_loader", ":", "\n", "                    ", "if", "index", "in", "instance", "[", "'imgName'", "]", ":", "\n", "                        ", "break", "\n", "", "", "", "if", "index", "in", "instance", "[", "'imgName'", "]", ":", "\n", "                ", "saveFunc", "(", "config", ",", "instance", ",", "model", ",", "gpu", ",", "metrics", ",", "saveDir", ",", "0", ",", "toEval", "=", "toEval", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'{} not found! (on {})'", ".", "format", "(", "index", ",", "instance", "[", "'imgName'", "]", ")", ")", "\n", "print", "(", "'{} not found! (on {})'", ".", "format", "(", "index", ",", "instance", "[", "'imgName'", "]", ")", ")", "\n", "", "", "", "try", ":", "\n", "        ", "do", "=", "trainer", ".", "do_characterization", "\n", "", "except", ":", "\n", "        ", "do", "=", "False", "\n", "", "if", "do", ":", "\n", "        ", "trainer", ".", "displayCharacterization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.train.set_procname": [[29, 36], ["os.fsencode", "cdll.LoadLibrary", "create_string_buffer", "cdll.LoadLibrary.prctl", "byref", "len"], "function", ["None"], ["def", "set_procname", "(", "newname", ")", ":", "\n", "        ", "from", "ctypes", "import", "cdll", ",", "byref", ",", "create_string_buffer", "\n", "newname", "=", "os", ".", "fsencode", "(", "newname", ")", "\n", "libc", "=", "cdll", ".", "LoadLibrary", "(", "'libc.so.6'", ")", "#Loading a 3rd party library C", "\n", "buff", "=", "create_string_buffer", "(", "len", "(", "newname", ")", "+", "1", ")", "#Note: One larger than the name (man prctl says that)", "\n", "buff", ".", "value", "=", "newname", "#Null terminated string as it should be", "\n", "libc", ".", "prctl", "(", "15", ",", "byref", "(", "buff", ")", ",", "0", ",", "0", ",", "0", ")", "#Refer to \"#define\" of \"/usr/include/linux/prctl.h\" for the misterious value 16 & arg[3..5] are zero as the man page says.", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.train.main_wraper": [[37, 47], ["torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "train.notify_main", "train.main"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.None.do_update_bn.notify_main", "home.repos.pwc.inspect_result.herobd_FUDGE.None.do_update_bn.main"], ["", "def", "main_wraper", "(", "rank", ",", "config", ",", "resume", ",", "world_size", ")", ":", "\n", "    ", "if", "'gpus'", "not", "in", "config", ":", "\n", "        ", "config", "[", "'gpu'", "]", "=", "rank", "\n", "", "else", ":", "\n", "        ", "config", "[", "'gpu'", "]", "=", "config", "[", "'gpus'", "]", "[", "rank", "]", "\n", "", "with", "torch", ".", "cuda", ".", "device", "(", "config", "[", "'gpu'", "]", ")", ":", "\n", "        ", "if", "rank", "==", "0", "and", "not", "config", "[", "'super_computer'", "]", ":", "\n", "            ", "notify_main", "(", "rank", ",", "config", ",", "resume", ",", "world_size", ")", "\n", "", "else", ":", "\n", "            ", "main", "(", "rank", ",", "config", ",", "resume", ",", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.train.notify_main": [[48, 50], ["train.main"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.None.do_update_bn.main"], ["", "", "", "def", "notify_main", "(", "rank", ",", "config", ",", "resume", ",", "world_size", "=", "None", ")", ":", "\n", "    ", "main", "(", "rank", ",", "config", ",", "resume", ",", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.train.main": [[51, 116], ["logger.Logger", "data_loader.getDataLoader", "model.summary", "eval.", "print", "trainerClass.train", "eval", "type", "config[].items", "eval", "type", "config[].items", "eval", "trainerClass.finishSetup", "signal.signal", "print", "print", "torch.init_process_group", "print", "torch.init_process_group", "eval", "eval", "trainerClass.save", "sys.exit", "eval"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.data_loader.data_loaders.getDataLoader", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.summary", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.finishSetup", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.save"], ["", "def", "main", "(", "rank", ",", "config", ",", "resume", ",", "world_size", "=", "None", ")", ":", "\n", "    ", "if", "rank", "is", "not", "None", ":", "#multiprocessing", "\n", "#print('Process {} can see these GPUs:'.format(rank,os.environ['CUDA_VISIBLE_DEVICES']))", "\n", "        ", "if", "'distributed'", "in", "config", ":", "\n", "            ", "print", "(", "'env NCCL_SOCKET_IFNAME: {}'", ".", "format", "(", "os", ".", "environ", "[", "'NCCL_SOCKET_IFNAME'", "]", ")", ")", "\n", "print", "(", "'{} calling dist.init_process_group()'", ".", "format", "(", "rank", ")", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "'0'", "\n", "dist", ".", "init_process_group", "(", "\n", "\"nccl\"", ",", "\n", "init_method", "=", "'file:///fslhome/brianld/job_comm/{}'", ".", "format", "(", "config", "[", "'name'", "]", ")", ",", "\n", "rank", "=", "rank", ",", "\n", "world_size", "=", "world_size", ")", "\n", "print", "(", "'{} finished dist.init_process_group()'", ".", "format", "(", "rank", ")", ")", "\n", "", "else", ":", "\n", "            ", "dist", ".", "init_process_group", "(", "\"gloo\"", ",", "rank", "=", "rank", ",", "world_size", "=", "world_size", ")", "\n", "\n", "#np.random.seed(1234) I don't have a way of restarting the DataLoader at the same place, so this makes it totaly random", "\n", "", "", "train_logger", "=", "Logger", "(", ")", "\n", "\n", "split", "=", "config", "[", "'split'", "]", "if", "'split'", "in", "config", "else", "'train'", "\n", "data_loader", ",", "valid_data_loader", "=", "getDataLoader", "(", "config", ",", "split", ",", "rank", ",", "world_size", ")", "\n", "#valid_data_loader = data_loader.split_validation()", "\n", "\n", "model", "=", "eval", "(", "config", "[", "'arch'", "]", ")", "(", "config", "[", "'model'", "]", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "if", "type", "(", "config", "[", "'loss'", "]", ")", "==", "dict", ":", "\n", "        ", "loss", "=", "{", "}", "#[eval(l) for l in config['loss']]", "\n", "for", "name", ",", "l", "in", "config", "[", "'loss'", "]", ".", "items", "(", ")", ":", "\n", "            ", "loss", "[", "name", "]", "=", "eval", "(", "l", ")", "\n", "", "", "else", ":", "\n", "        ", "loss", "=", "eval", "(", "config", "[", "'loss'", "]", ")", "\n", "", "if", "type", "(", "config", "[", "'metrics'", "]", ")", "==", "dict", ":", "\n", "        ", "metrics", "=", "{", "}", "\n", "for", "name", ",", "m", "in", "config", "[", "'metrics'", "]", ".", "items", "(", ")", ":", "\n", "            ", "metrics", "[", "name", "]", "=", "[", "eval", "(", "metric", ")", "for", "metric", "in", "m", "]", "\n", "", "", "else", ":", "\n", "        ", "metrics", "=", "[", "eval", "(", "metric", ")", "for", "metric", "in", "config", "[", "'metrics'", "]", "]", "\n", "\n", "", "if", "'class'", "in", "config", "[", "'trainer'", "]", ":", "\n", "        ", "trainerClass", "=", "eval", "(", "config", "[", "'trainer'", "]", "[", "'class'", "]", ")", "\n", "", "else", ":", "\n", "        ", "trainerClass", "=", "Trainer", "\n", "", "trainer", "=", "trainerClass", "(", "model", ",", "loss", ",", "metrics", ",", "\n", "resume", "=", "resume", ",", "\n", "config", "=", "config", ",", "\n", "data_loader", "=", "data_loader", ",", "\n", "valid_data_loader", "=", "valid_data_loader", ",", "\n", "train_logger", "=", "train_logger", ")", "\n", "\n", "name", "=", "config", "[", "'name'", "]", "\n", "supercomputer", "=", "config", "[", "'super_computer'", "]", "if", "'super_computer'", "in", "config", "else", "False", "\n", "\n", "if", "rank", "is", "not", "None", "and", "rank", "!=", "0", ":", "\n", "        ", "trainer", ".", "side_process", "=", "rank", "#this tells the trainer not to log or validate on this thread", "\n", "", "else", ":", "\n", "        ", "trainer", ".", "finishSetup", "(", ")", "\n", "def", "handleSIGINT", "(", "sig", ",", "frame", ")", ":", "\n", "            ", "trainer", ".", "save", "(", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "handleSIGINT", ")", "\n", "\n", "", "print", "(", "\"Begin training\"", ")", "\n", "#warnings.filterwarnings(\"error\")", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.do_update_bn.set_procname": [[26, 33], ["os.fsencode", "cdll.LoadLibrary", "create_string_buffer", "cdll.LoadLibrary.prctl", "byref", "len"], "function", ["None"], ["def", "set_procname", "(", "newname", ")", ":", "\n", "        ", "from", "ctypes", "import", "cdll", ",", "byref", ",", "create_string_buffer", "\n", "newname", "=", "os", ".", "fsencode", "(", "newname", ")", "\n", "libc", "=", "cdll", ".", "LoadLibrary", "(", "'libc.so.6'", ")", "#Loading a 3rd party library C", "\n", "buff", "=", "create_string_buffer", "(", "len", "(", "newname", ")", "+", "1", ")", "#Note: One larger than the name (man prctl says that)", "\n", "buff", ".", "value", "=", "newname", "#Null terminated string as it should be", "\n", "libc", ".", "prctl", "(", "15", ",", "byref", "(", "buff", ")", ",", "0", ",", "0", ",", "0", ")", "#Refer to \"#define\" of \"/usr/include/linux/prctl.h\" for the misterious value 16 & arg[3..5] are zero as the man page says.", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.do_update_bn.notify_main": [[34, 37], ["slack_sender", "do_update_bn.main"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.None.do_update_bn.main"], ["", "@", "slack_sender", "(", "webhook_url", "=", "webhook_url", ",", "channel", "=", "\"herding-neural-networks\"", ")", "\n", "def", "notify_main", "(", "config", ",", "resume", ")", ":", "\n", "    ", "main", "(", "config", ",", "resume", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.do_update_bn.main": [[38, 84], ["logger.Logger", "data_loader.getDataLoader", "model.summary", "eval.", "trainerClass.update_swa_batch_norm", "trainerClass.save", "eval", "model.style_extractor.add_authors", "type", "config[].items", "eval", "type", "config[].items", "eval", "eval", "eval", "eval"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.data_loader.data_loaders.getDataLoader", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.summary", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.update_swa_batch_norm", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.save"], ["", "def", "main", "(", "config", ",", "resume", ")", ":", "\n", "    ", "supercomputer", "=", "config", "[", "'super_computer'", "]", "if", "'super_computer'", "in", "config", "else", "False", "\n", "#np.random.seed(1234) I don't have a way of restarting the DataLoader at the same place, so this makes it totaly random", "\n", "train_logger", "=", "Logger", "(", ")", "\n", "\n", "split", "=", "config", "[", "'split'", "]", "if", "'split'", "in", "config", "else", "'train'", "\n", "data_loader", ",", "valid_data_loader", "=", "getDataLoader", "(", "config", ",", "split", ")", "\n", "#valid_data_loader = data_loader.split_validation()", "\n", "\n", "model", "=", "eval", "(", "config", "[", "'arch'", "]", ")", "(", "config", "[", "'model'", "]", ")", "\n", "if", "'style'", "in", "config", "[", "'model'", "]", "and", "'lookup'", "in", "config", "[", "'model'", "]", "[", "'style'", "]", ":", "\n", "        ", "model", ".", "style_extractor", ".", "add_authors", "(", "data_loader", ".", "dataset", ".", "authors", ")", "##HERE", "\n", "", "model", ".", "summary", "(", ")", "\n", "if", "config", "[", "'trainer'", "]", "[", "'class'", "]", "==", "'HWRWithSynthTrainer'", ":", "\n", "        ", "gen_model", "=", "model", "\n", "model", "=", "model", ".", "hwr", "\n", "gen_model", ".", "hwr", "=", "None", "\n", "#config['gen_model$'] = gen_model", "\n", "", "if", "type", "(", "config", "[", "'loss'", "]", ")", "==", "dict", ":", "\n", "        ", "loss", "=", "{", "}", "#[eval(l) for l in config['loss']]", "\n", "for", "name", ",", "l", "in", "config", "[", "'loss'", "]", ".", "items", "(", ")", ":", "\n", "            ", "loss", "[", "name", "]", "=", "eval", "(", "l", ")", "\n", "", "", "else", ":", "\n", "        ", "loss", "=", "eval", "(", "config", "[", "'loss'", "]", ")", "\n", "", "if", "type", "(", "config", "[", "'metrics'", "]", ")", "==", "dict", ":", "\n", "        ", "metrics", "=", "{", "}", "\n", "for", "name", ",", "m", "in", "config", "[", "'metrics'", "]", ".", "items", "(", ")", ":", "\n", "            ", "metrics", "[", "name", "]", "=", "[", "eval", "(", "metric", ")", "for", "metric", "in", "m", "]", "\n", "", "", "else", ":", "\n", "        ", "metrics", "=", "[", "eval", "(", "metric", ")", "for", "metric", "in", "config", "[", "'metrics'", "]", "]", "\n", "\n", "", "if", "'class'", "in", "config", "[", "'trainer'", "]", ":", "\n", "        ", "trainerClass", "=", "eval", "(", "config", "[", "'trainer'", "]", "[", "'class'", "]", ")", "\n", "", "else", ":", "\n", "        ", "trainerClass", "=", "Trainer", "\n", "", "trainer", "=", "trainerClass", "(", "model", ",", "loss", ",", "metrics", ",", "\n", "resume", "=", "resume", ",", "\n", "config", "=", "config", ",", "\n", "data_loader", "=", "data_loader", ",", "\n", "valid_data_loader", "=", "valid_data_loader", ",", "\n", "train_logger", "=", "train_logger", ")", "\n", "if", "config", "[", "'trainer'", "]", "[", "'class'", "]", "==", "'HWRWithSynthTrainer'", ":", "\n", "        ", "trainer", ".", "gen", "=", "gen_model", "\n", "\n", "", "trainer", ".", "update_swa_batch_norm", "(", ")", "\n", "trainer", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.run.getCorners": [[19, 32], ["min", "min", "int", "int", "int", "int", "int", "int", "int", "int", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos"], "function", ["None"], ["def", "getCorners", "(", "xyrhw", ")", ":", "\n", "    ", "xc", "=", "xyrhw", "[", "0", "]", "\n", "yc", "=", "xyrhw", "[", "1", "]", "\n", "rot", "=", "xyrhw", "[", "2", "]", "\n", "h", "=", "xyrhw", "[", "3", "]", "\n", "w", "=", "xyrhw", "[", "4", "]", "\n", "h", "=", "min", "(", "30000", ",", "h", ")", "\n", "w", "=", "min", "(", "30000", ",", "w", ")", "\n", "tr", "=", "(", "int", "(", "w", "*", "math", ".", "cos", "(", "rot", ")", "-", "h", "*", "math", ".", "sin", "(", "rot", ")", "+", "xc", ")", ",", "int", "(", "w", "*", "math", ".", "sin", "(", "rot", ")", "+", "h", "*", "math", ".", "cos", "(", "rot", ")", "+", "yc", ")", ")", "\n", "tl", "=", "(", "int", "(", "-", "w", "*", "math", ".", "cos", "(", "rot", ")", "-", "h", "*", "math", ".", "sin", "(", "rot", ")", "+", "xc", ")", ",", "int", "(", "-", "w", "*", "math", ".", "sin", "(", "rot", ")", "+", "h", "*", "math", ".", "cos", "(", "rot", ")", "+", "yc", ")", ")", "\n", "br", "=", "(", "int", "(", "w", "*", "math", ".", "cos", "(", "rot", ")", "+", "h", "*", "math", ".", "sin", "(", "rot", ")", "+", "xc", ")", ",", "int", "(", "w", "*", "math", ".", "sin", "(", "rot", ")", "-", "h", "*", "math", ".", "cos", "(", "rot", ")", "+", "yc", ")", ")", "\n", "bl", "=", "(", "int", "(", "-", "w", "*", "math", ".", "cos", "(", "rot", ")", "+", "h", "*", "math", ".", "sin", "(", "rot", ")", "+", "xc", ")", ",", "int", "(", "-", "w", "*", "math", ".", "sin", "(", "rot", ")", "-", "h", "*", "math", ".", "cos", "(", "rot", ")", "+", "yc", ")", ")", "\n", "return", "tl", ",", "tr", ",", "br", ",", "bl", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.run.plotRect": [[33, 40], ["run.getCorners", "cv2.line", "cv2.line", "cv2.line", "cv2.line"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.getCorners", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line"], ["", "def", "plotRect", "(", "img", ",", "color", ",", "xyrhw", ",", "lineW", "=", "1", ")", ":", "\n", "    ", "tl", ",", "tr", ",", "br", ",", "bl", "=", "getCorners", "(", "xyrhw", ")", "\n", "\n", "cv2", ".", "line", "(", "img", ",", "tl", ",", "tr", ",", "color", ",", "lineW", ")", "\n", "cv2", ".", "line", "(", "img", ",", "tr", ",", "br", ",", "color", ",", "lineW", ")", "\n", "cv2", ".", "line", "(", "img", ",", "br", ",", "bl", ",", "color", ",", "lineW", ")", "\n", "cv2", ".", "line", "(", "img", ",", "bl", ",", "tl", ",", "color", ",", "lineW", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.run.detect_boxes": [[41, 93], ["torch.load", "print", "model.load_state_dict", "model.eval", "print", "print", "eval", "torch.no_grad", "model", "i[].item", "run.getCorners", "output.append", "print", "skimage.io.imsave", "i[].tolist", "i[].argmax().item", "run.plotRect", "float", "float", "float", "float", "float", "float", "float", "float", "i[].argmax"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.getCorners", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.plotRect"], ["", "def", "detect_boxes", "(", "run_img", ",", "np_img", ",", "include_threshold", "=", "INCLUDE_THRESHOLD_DEFAULT", ",", "output_image", "=", "None", ",", "model_checkpoint", "=", "DETECTOR_TRAINED_MODEL", ")", ":", "\n", "# fetch the model", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "model_checkpoint", ",", "map_location", "=", "lambda", "storage", ",", "location", ":", "storage", ")", "\n", "print", "(", "f\"Using {checkpoint['config']['arch']}\"", ")", "\n", "model", "=", "eval", "(", "checkpoint", "[", "'config'", "]", "[", "'arch'", "]", ")", "(", "checkpoint", "[", "'config'", "]", "[", "'model'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "\n", "# run the image through the model", "\n", "print", "(", "f\"Run image through model: {imagePath}\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "result", "=", "model", "(", "run_img", ")", "\n", "\n", "# produce the output", "\n", "", "boundingboxes", "=", "result", "[", "0", "]", "#.tolist()", "\n", "output", "=", "[", "]", "\n", "\n", "print", "(", "f\"Process bounding boxes: {imagePath}\"", ")", "\n", "#for i in tqdm(boundingboxes[0]):", "\n", "for", "i", "in", "boundingboxes", "[", "0", "]", ":", "\n", "        ", "score", "=", "i", "[", "0", "]", ".", "item", "(", ")", "\n", "if", "score", "<", "include_threshold", ":", "\n", "            ", "continue", "\n", "#print(i)", "\n", "", "tl", ",", "tr", ",", "br", ",", "bl", "=", "getCorners", "(", "i", "[", "1", ":", "]", ".", "tolist", "(", ")", ")", "\n", "scale", "=", "1", "\n", "bb", "=", "{", "\n", "'poly_points'", ":", "[", "[", "float", "(", "tl", "[", "0", "]", "/", "scale", ")", ",", "float", "(", "tl", "[", "1", "]", "/", "scale", ")", "]", ",", "\n", "[", "float", "(", "tr", "[", "0", "]", "/", "scale", ")", ",", "float", "(", "tr", "[", "1", "]", "/", "scale", ")", "]", ",", "\n", "[", "float", "(", "br", "[", "0", "]", "/", "scale", ")", ",", "float", "(", "br", "[", "1", "]", "/", "scale", ")", "]", ",", "\n", "[", "float", "(", "bl", "[", "0", "]", "/", "scale", ")", ",", "float", "(", "bl", "[", "1", "]", "/", "scale", ")", "]", "]", ",", "\n", "'type'", ":", "'detectorPrediction'", ",", "\n", "'class'", ":", "i", "[", "6", ":", "]", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "}", "\n", "if", "bb", "[", "'class'", "]", "==", "0", ":", "\n", "            ", "colour", "=", "(", "0", ",", "0", ",", "255", ")", "# header", "\n", "", "elif", "bb", "[", "'class'", "]", "==", "1", ":", "\n", "            ", "colour", "=", "(", "0", ",", "255", ",", "255", ")", "# queation", "\n", "", "elif", "bb", "[", "'class'", "]", "==", "1", ":", "\n", "            ", "colour", "=", "(", "255", ",", "255", ",", "0", ")", "# answer", "\n", "", "else", ":", "\n", "            ", "colour", "=", "(", "255", ",", "0", ",", "255", ")", "# other", "\n", "\n", "", "output", ".", "append", "(", "bb", ")", "\n", "if", "output_image", ":", "\n", "            ", "plotRect", "(", "np_img", ",", "colour", ",", "i", "[", "1", ":", "6", "]", ")", "\n", "\n", "", "", "if", "output_image", ":", "\n", "        ", "print", "(", "f\"Saving output: {output_image}\"", ")", "\n", "io", ".", "imsave", "(", "output_image", ",", "np_img", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.None.run.detect_boxes_and_pairs": [[95, 115], ["torch.load", "print", "model.load_state_dict", "model.eval", "print", "evaluators.draw_graph.draw_graph", "print", "eval", "torch.no_grad", "model"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.draw_graph.draw_graph"], ["", "def", "detect_boxes_and_pairs", "(", "run_img", ",", "output_image", "=", "None", ",", "model_checkpoint", "=", "TRAINED_MODEL", ")", ":", "\n", "# fetch the model", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "model_checkpoint", ",", "map_location", "=", "lambda", "storage", ",", "location", ":", "storage", ")", "\n", "print", "(", "f\"Using {checkpoint['config']['arch']}\"", ")", "\n", "model", "=", "eval", "(", "checkpoint", "[", "'config'", "]", "[", "'arch'", "]", ")", "(", "checkpoint", "[", "'config'", "]", "[", "'model'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "\n", "# run the image through the model", "\n", "print", "(", "f\"Run image through model: {imagePath}\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "result", "=", "model", "(", "run_img", ")", "\n", "\n", "", "allOutputBoxes", ",", "outputOffsets", ",", "allEdgePred", ",", "allEdgeIndexes", ",", "allNodePred", ",", "allPredGroups", ",", "rel_prop_pred", ",", "merge_prop_scores", ",", "final", "=", "result", "\n", "finalOutputBoxes", ",", "finalPredGroups", ",", "finalEdgeIndexes", ",", "finalBBTrans", "=", "final", "\n", "draw_graph", "(", "finalOutputBoxes", ",", "None", ",", "None", ",", "finalEdgeIndexes", ",", "finalPredGroups", ",", "run_img", ",", "None", ",", "None", ",", "None", ",", "None", ",", "output_image", ")", "\n", "print", "(", "f\"Saved output: {output_image}\"", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line": [[9, 98], ["max", "max", "max", "max", "min", "min", "min", "min", "skimage.draw.circle_perimeter", "set", "skimage.draw.line", "zip", "skimage.draw.line", "skimage.draw.line", "skimage.draw.line", "skimage.draw.line", "skimage.draw.line", "skimage.draw.line", "skimage.draw.line", "skimage.draw.line", "skimage.draw.line"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line"], ["def", "line", "(", "img", ",", "p1", ",", "p2", ",", "color", ",", "thickness", "=", "1", ",", "draw", "=", "'set'", ")", ":", "\n", "    ", "y1", "=", "max", "(", "0", ",", "min", "(", "img", ".", "shape", "[", "0", "]", "-", "1", ",", "p1", "[", "1", "]", ")", ")", "\n", "y2", "=", "max", "(", "0", ",", "min", "(", "img", ".", "shape", "[", "0", "]", "-", "1", ",", "p2", "[", "1", "]", ")", ")", "\n", "x1", "=", "max", "(", "0", ",", "min", "(", "img", ".", "shape", "[", "1", "]", "-", "1", ",", "p1", "[", "0", "]", ")", ")", "\n", "x2", "=", "max", "(", "0", ",", "min", "(", "img", ".", "shape", "[", "1", "]", "-", "1", ",", "p2", "[", "0", "]", ")", ")", "\n", "\n", "if", "thickness", ">", "3", ":", "\n", "        ", "c_rr", ",", "c_cc", "=", "skimage", ".", "draw", ".", "circle_perimeter", "(", "0", ",", "0", ",", "(", "thickness", ")", "//", "2", ")", "\n", "c_points", "=", "set", "(", "zip", "(", "c_rr", ",", "c_cc", ")", ")", "#remove duplicates", "\n", "for", "r", ",", "c", "in", "c_points", ":", "\n", "            ", "rr", ",", "cc", "=", "skimage", ".", "draw", ".", "line", "(", "y1", "+", "r", ",", "x1", "+", "c", ",", "y2", "+", "r", ",", "x2", "+", "c", ")", "\n", "if", "draw", "==", "'set'", ":", "\n", "                ", "img", "[", "rr", ",", "cc", "]", "=", "color", "\n", "", "elif", "draw", "==", "'add'", ":", "\n", "                ", "img", "[", "rr", ",", "cc", "]", "+=", "color", "\n", "", "elif", "draw", "==", "'mult'", ":", "\n", "                ", "img", "[", "rr", ",", "cc", "]", "*=", "color", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "rr", ",", "cc", "=", "skimage", ".", "draw", ".", "line", "(", "y1", ",", "x1", ",", "y2", ",", "x2", ")", "\n", "if", "draw", "==", "'set'", ":", "\n", "            ", "img", "[", "rr", ",", "cc", "]", "=", "color", "\n", "", "elif", "draw", "==", "'add'", ":", "\n", "            ", "img", "[", "rr", ",", "cc", "]", "+=", "color", "\n", "", "elif", "draw", "==", "'mult'", ":", "\n", "            ", "img", "[", "rr", ",", "cc", "]", "*=", "color", "\n", "", "if", "thickness", ">", "1", ":", "\n", "            ", "if", "x1", "<", "img", ".", "shape", "[", "1", "]", "-", "2", "and", "y1", "<", "img", ".", "shape", "[", "0", "]", "-", "2", "and", "x2", "<", "img", ".", "shape", "[", "1", "]", "-", "2", "and", "y2", "<", "img", ".", "shape", "[", "0", "]", "-", "2", ":", "\n", "                ", "rr", ",", "cc", "=", "skimage", ".", "draw", ".", "line", "(", "y1", "+", "1", ",", "x1", "+", "1", ",", "y2", "+", "1", ",", "x2", "+", "1", ")", "\n", "if", "draw", "==", "'set'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "=", "color", "\n", "", "elif", "draw", "==", "'add'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "+=", "color", "\n", "", "elif", "draw", "==", "'mult'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "*=", "color", "\n", "", "", "if", "x1", "<", "img", ".", "shape", "[", "1", "]", "-", "2", "and", "x2", "<", "img", ".", "shape", "[", "1", "]", "-", "2", ":", "\n", "                ", "rr", ",", "cc", "=", "skimage", ".", "draw", ".", "line", "(", "y1", ",", "x1", "+", "1", ",", "y2", ",", "x2", "+", "1", ")", "\n", "if", "draw", "==", "'set'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "=", "color", "\n", "", "elif", "draw", "==", "'add'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "+=", "color", "\n", "", "elif", "draw", "==", "'mult'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "*=", "color", "\n", "", "", "if", "y1", "<", "img", ".", "shape", "[", "0", "]", "-", "2", "and", "y2", "<", "img", ".", "shape", "[", "0", "]", "-", "2", ":", "\n", "                ", "rr", ",", "cc", "=", "skimage", ".", "draw", ".", "line", "(", "y1", "+", "1", ",", "x1", ",", "y2", "+", "1", ",", "x2", ")", "\n", "if", "draw", "==", "'set'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "=", "color", "\n", "", "elif", "draw", "==", "'add'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "+=", "color", "\n", "", "elif", "draw", "==", "'mult'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "*=", "color", "\n", "", "", "", "if", "thickness", ">", "2", ":", "\n", "            ", "rr", ",", "cc", "=", "skimage", ".", "draw", ".", "line", "(", "y1", "-", "1", ",", "x1", "-", "1", ",", "y2", "-", "1", ",", "x2", "-", "1", ")", "\n", "if", "draw", "==", "'set'", ":", "\n", "                ", "img", "[", "rr", ",", "cc", "]", "=", "color", "\n", "", "elif", "draw", "==", "'add'", ":", "\n", "                ", "img", "[", "rr", ",", "cc", "]", "+=", "color", "\n", "", "elif", "draw", "==", "'mult'", ":", "\n", "                ", "img", "[", "rr", ",", "cc", "]", "*=", "color", "\n", "", "rr", ",", "cc", "=", "skimage", ".", "draw", ".", "line", "(", "y1", ",", "x1", "-", "1", ",", "y2", ",", "x2", "-", "1", ")", "\n", "if", "draw", "==", "'set'", ":", "\n", "                ", "img", "[", "rr", ",", "cc", "]", "=", "color", "\n", "", "elif", "draw", "==", "'add'", ":", "\n", "                ", "img", "[", "rr", ",", "cc", "]", "+=", "color", "\n", "", "elif", "draw", "==", "'mult'", ":", "\n", "                ", "img", "[", "rr", ",", "cc", "]", "*=", "color", "\n", "", "rr", ",", "cc", "=", "skimage", ".", "draw", ".", "line", "(", "y1", "-", "1", ",", "x1", ",", "y2", "-", "1", ",", "x2", ")", "\n", "if", "draw", "==", "'set'", ":", "\n", "                ", "img", "[", "rr", ",", "cc", "]", "=", "color", "\n", "", "elif", "draw", "==", "'add'", ":", "\n", "                ", "img", "[", "rr", ",", "cc", "]", "+=", "color", "\n", "", "elif", "draw", "==", "'mult'", ":", "\n", "                ", "img", "[", "rr", ",", "cc", "]", "*=", "color", "\n", "", "if", "y1", "<", "img", ".", "shape", "[", "0", "]", "-", "2", "and", "y2", "<", "img", ".", "shape", "[", "0", "]", "-", "2", ":", "\n", "                ", "rr", ",", "cc", "=", "skimage", ".", "draw", ".", "line", "(", "y1", "+", "1", ",", "x1", "-", "1", ",", "y2", "+", "1", ",", "x2", "-", "1", ")", "\n", "if", "draw", "==", "'set'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "=", "color", "\n", "", "elif", "draw", "==", "'add'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "+=", "color", "\n", "", "elif", "draw", "==", "'mult'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "*=", "color", "\n", "", "", "if", "x1", "<", "img", ".", "shape", "[", "1", "]", "-", "2", "and", "x2", "<", "img", ".", "shape", "[", "1", "]", "-", "2", ":", "\n", "                ", "rr", ",", "cc", "=", "skimage", ".", "draw", ".", "line", "(", "y1", "-", "1", ",", "x1", "+", "1", ",", "y2", "-", "1", ",", "x2", "+", "1", ")", "\n", "if", "draw", "==", "'set'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "=", "color", "\n", "", "elif", "draw", "==", "'add'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "+=", "color", "\n", "", "elif", "draw", "==", "'mult'", ":", "\n", "                    ", "img", "[", "rr", ",", "cc", "]", "*=", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.rectangle": [[99, 104], ["img_f.line", "img_f.line", "img_f.line", "img_f.line"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line"], ["", "", "", "", "", "def", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "thickness", "=", "1", ")", ":", "\n", "    ", "line", "(", "img", ",", "c1", ",", "(", "c2", "[", "0", "]", ",", "c1", "[", "1", "]", ")", ",", "color", ",", "thickness", ")", "\n", "line", "(", "img", ",", "(", "c2", "[", "0", "]", ",", "c1", "[", "1", "]", ")", ",", "c2", ",", "color", ",", "thickness", ")", "\n", "line", "(", "img", ",", "c2", ",", "(", "c1", "[", "0", "]", ",", "c2", "[", "1", "]", ")", ",", "color", ",", "thickness", ")", "\n", "line", "(", "img", ",", "(", "c1", "[", "0", "]", ",", "c2", "[", "1", "]", ")", ",", "c1", ",", "color", ",", "thickness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imread": [[105, 107], ["skimage.io.imread"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imread"], ["", "def", "imread", "(", "path", ",", "color", "=", "True", ")", ":", "\n", "    ", "return", "io", ".", "imread", "(", "path", ",", "not", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imwrite": [[108, 114], ["img.astype.min", "img.astype.max", "skimage.io.imsave", "img.astype.astype"], "function", ["None"], ["", "def", "imwrite", "(", "path", ",", "img", ")", ":", "\n", "    ", "minV", "=", "img", ".", "min", "(", ")", "\n", "maxV", "=", "img", ".", "max", "(", ")", "\n", "if", "maxV", ">", "1", "and", "minV", ">=", "0", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "return", "io", ".", "imsave", "(", "path", ",", "img", ",", "plugin", "=", "'pil'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow": [[115, 117], ["skimage.io.imshow"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow"], ["", "def", "imshow", "(", "name", ",", "img", ")", ":", "\n", "    ", "return", "io", ".", "imshow", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.show": [[118, 120], ["skimage.io.show"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.show"], ["", "def", "show", "(", ")", ":", "#replaces cv2.waitKey()", "\n", "    ", "return", "io", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.resize": [[121, 130], ["len", "skimage.transform.rescale", "skimage.transform.resize"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.resize"], ["", "def", "resize", "(", "img", ",", "dim", ",", "fx", "=", "None", ",", "fy", "=", "None", ")", ":", "#remove \",interpolation = cv2.INTER_CUBIC\"", "\n", "    ", "hasColor", "=", "len", "(", "img", ".", "shape", ")", "==", "3", "\n", "if", "dim", "[", "0", "]", "==", "0", ":", "\n", "        ", "downsize", "=", "fx", "<", "1", "and", "fy", "<", "1", "\n", "\n", "return", "transform", ".", "rescale", "(", "img", ",", "(", "fy", ",", "fx", ")", ",", "3", ",", "multichannel", "=", "hasColor", ",", "anti_aliasing", "=", "downsize", ",", "preserve_range", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "downsize", "=", "dim", "[", "0", "]", "<", "img", ".", "shape", "[", "0", "]", "and", "dim", "[", "1", "]", "<", "img", ".", "shape", "[", "1", "]", "\n", "return", "transform", ".", "resize", "(", "img", ",", "dim", ",", "3", ",", "multichannel", "=", "hasColor", ",", "anti_aliasing", "=", "downsize", ",", "preserve_range", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.otsuThreshold": [[131, 136], ["skimage.filters.threshold_otsu"], "function", ["None"], ["", "", "def", "otsuThreshold", "(", "img", ")", ":", "\n", "#if len(img.shape)==3 and img.shape[2]==1:", "\n", "#    img=img[:,:,0]", "\n", "    ", "t", "=", "filters", ".", "threshold_otsu", "(", "img", ")", "\n", "return", "t", ",", "(", "img", ">", "t", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.rgb2hsv": [[137, 139], ["skimage.color.rgb2hsv"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.rgb2hsv"], ["", "def", "rgb2hsv", "(", "img", ")", ":", "\n", "    ", "return", "skimage", ".", "color", ".", "rgb2hsv", "(", "img", ")", "\n", "", "def", "hsv2rgb", "(", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.hsv2rgb": [[139, 141], ["skimage.color.hsv2rgb"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.hsv2rgb"], ["", "def", "hsv2rgb", "(", "img", ")", ":", "\n", "    ", "return", "skimage", ".", "color", ".", "hsv2rgb", "(", "img", ")", "\n", "", "def", "rgb2gray", "(", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.rgb2gray": [[141, 143], ["skimage.color.rgb2gray"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.rgb2gray"], ["", "def", "rgb2gray", "(", "img", ")", ":", "\n", "    ", "return", "skimage", ".", "color", ".", "rgb2gray", "(", "img", ")", "\n", "", "def", "gray2rgb", "(", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.gray2rgb": [[143, 147], ["skimage.color.gray2rgb", "len"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.gray2rgb"], ["", "def", "gray2rgb", "(", "img", ")", ":", "\n", "    ", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", "0", "]", "\n", "", "return", "skimage", ".", "color", ".", "gray2rgb", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.polylines": [[148, 161], ["len", "skimage.draw.polygon_perimeter", "skimage.draw.polygon", "skimage.draw.polygon", "skimage.draw.polygon_perimeter", "numpy.array"], "function", ["None"], ["", "def", "polylines", "(", "img", ",", "points", ",", "isClosed", ",", "color", ",", "thickness", "=", "1", ")", ":", "\n", "    ", "if", "len", "(", "points", ".", "shape", ")", "==", "3", ":", "\n", "        ", "assert", "(", "points", ".", "shape", "[", "1", "]", "==", "1", ")", "\n", "points", "=", "points", "[", ":", ",", "0", "]", "\n", "", "if", "isClosed", "==", "'transparent'", ":", "\n", "        ", "rr", ",", "cc", "=", "skimage", ".", "draw", ".", "polygon_perimeter", "(", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "0", "]", ",", "shape", "=", "img", ".", "shape", ")", "\n", "rr_f", ",", "cc_f", "=", "skimage", ".", "draw", ".", "polygon", "(", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "0", "]", ",", "shape", "=", "img", ".", "shape", ")", "\n", "img", "[", "rr_f", ",", "cc_f", "]", "=", "img", "[", "rr_f", ",", "cc_f", "]", "*", "0.7", "+", "np", ".", "array", "(", "color", ")", "*", "0.3", "\n", "", "elif", "isClosed", ":", "\n", "        ", "rr", ",", "cc", "=", "skimage", ".", "draw", ".", "polygon", "(", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "0", "]", ",", "shape", "=", "img", ".", "shape", ")", "\n", "", "else", ":", "\n", "        ", "rr", ",", "cc", "=", "skimage", ".", "draw", ".", "polygon_perimeter", "(", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "0", "]", ",", "shape", "=", "img", ".", "shape", ")", "\n", "", "img", "[", "rr", ",", "cc", "]", "=", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.fillConvexPoly": [[162, 164], ["img_f.polylines"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.polylines"], ["", "def", "fillConvexPoly", "(", "img", ",", "points", ",", "color", ")", ":", "\n", "    ", "return", "polylines", "(", "img", ",", "points", ",", "True", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.warpAffine": [[165, 172], ["skimage.transform.AffineTransform", "skimage.transform.warp", "numpy.concatenate", "numpy.array"], "function", ["None"], ["", "def", "warpAffine", "(", "img", ",", "M", ",", "shape", "=", "None", ")", ":", "\n", "    ", "if", "shape", "is", "None", ":", "\n", "        ", "shape", "=", "img", ".", "shape", "\n", "", "if", "M", ".", "shape", "[", "0", "]", "==", "2", ":", "#OpenCV takes 2x3 instead of 3x3", "\n", "        ", "M", "=", "np", ".", "concatenate", "(", "(", "M", ",", "np", ".", "array", "(", "[", "[", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "T", "=", "transform", ".", "AffineTransform", "(", "M", ")", "\n", "return", "transform", ".", "warp", "(", "img", ",", "T", ",", "output_shape", "=", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.remap": [[173, 175], ["skimage.transform.warp", "numpy.stack"], "function", ["None"], ["", "def", "remap", "(", "img", ",", "map_x", ",", "map_y", ",", "interpolation", "=", "2", ",", "borderValue", "=", "None", ")", ":", "\n", "    ", "return", "transform", ".", "warp", "(", "img", ",", "np", ".", "stack", "(", "(", "map_y", ",", "map_x", ")", ",", "axis", "=", "0", ")", ",", "order", "=", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.rotate": [[179, 184], ["numpy.rot90", "NotImplementedError"], "function", ["None"], ["def", "rotate", "(", "img", ",", "num_rot", ",", "degress", "=", "None", ")", ":", "\n", "    ", "if", "num_rot", "is", "not", "None", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ",", "num_rot", ",", "axes", "=", "(", "0", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.getAffineTransform": [[185, 187], ["skimage.transform.estimate_transform"], "function", ["None"], ["", "", "def", "getAffineTransform", "(", "src", ",", "dst", ")", ":", "\n", "    ", "return", "transform", ".", "estimate_transform", "(", "'affine'", ",", "src", ",", "dst", ")", ".", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.distancePoints": [[9, 11], ["math.sqrt"], "function", ["None"], ["def", "distancePoints", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "math", ".", "sqrt", "(", "(", "a", "[", "0", "]", "-", "b", "[", "0", "]", ")", "**", "2", "+", "(", "a", "[", "1", "]", "-", "b", "[", "1", "]", ")", "**", "2", ")", "\n", "", "def", "distancePointLine", "(", "p", ",", "la", ",", "lb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.distancePointLine": [[11, 13], ["abs", "math.sqrt"], "function", ["None"], ["", "def", "distancePointLine", "(", "p", ",", "la", ",", "lb", ")", ":", "\n", "    ", "return", "abs", "(", "(", "la", "[", "1", "]", "-", "lb", "[", "1", "]", ")", "*", "p", "[", "0", "]", "-", "(", "la", "[", "0", "]", "-", "lb", "[", "0", "]", ")", "*", "p", "[", "1", "]", "+", "la", "[", "0", "]", "*", "lb", "[", "1", "]", "-", "la", "[", "1", "]", "*", "lb", "[", "0", "]", ")", "/", "math", ".", "sqrt", "(", "(", "la", "[", "1", "]", "-", "lb", "[", "1", "]", ")", "**", "2", "+", "(", "la", "[", "0", "]", "-", "lb", "[", "0", "]", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.non_max_sup_overseg": [[171, 198], ["yolo_tools.allIO_clipU", "heights[].expand", "heights[].expand", "torch.logical_and", "torch.triu", "set", "torch.nonzero", "set", "pred_boxes.size", "pred_boxes.size", "pred_boxes.size", "pred_boxes.size", "torch.abs", "range", "torch.min", "pred_boxes.size", "list", "set.add", "set.add", "b.item", "a.item"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allIO_clipU"], ["", "def", "non_max_sup_overseg", "(", "pred_boxes", ",", "thresh_iou", "=", "0.3", ",", "thresh_height_diff", "=", "0.2", ")", ":", "\n", "    ", "ious", "=", "allIO_clipU", "(", "pred_boxes", "[", ":", ",", "1", ":", "]", ",", "pred_boxes", "[", ":", ",", "1", ":", "]", ",", "x1y1x2y2", "=", "True", ")", "#discard conf channel for iou", "\n", "heights", "=", "pred_boxes", "[", ":", ",", "4", "]", "-", "pred_boxes", "[", ":", ",", "2", "]", "\n", "heights1", "=", "heights", "[", "None", ",", ":", "]", ".", "expand", "(", "pred_boxes", ".", "size", "(", "0", ")", ",", "pred_boxes", ".", "size", "(", "0", ")", ")", "\n", "heights2", "=", "heights", "[", ":", ",", "None", "]", ".", "expand", "(", "pred_boxes", ".", "size", "(", "0", ")", ",", "pred_boxes", ".", "size", "(", "0", ")", ")", "\n", "diff_h", "=", "torch", ".", "abs", "(", "heights1", "-", "heights2", ")", ">", "thresh_height_diff", "*", "torch", ".", "min", "(", "heights1", ",", "heights2", ")", "\n", "ious", "=", "ious", ">", "thresh_iou", "\n", "in_conflict", "=", "torch", ".", "logical_and", "(", "diff_h", ",", "ious", ")", "#symetric", "\n", "# conf1>conf2... tensorize", "\n", "in_conflict", "=", "torch", ".", "triu", "(", "in_conflict", ",", "1", ")", "#not symetric", "\n", "to_remove", "=", "set", "(", ")", "\n", "\n", "for", "a", ",", "b", "in", "torch", ".", "nonzero", "(", "in_conflict", ")", ":", "\n", "        ", "if", "a", "not", "in", "to_remove", "and", "b", "not", "in", "to_remove", ":", "\n", "            ", "a_conf", "=", "pred_boxes", "[", "a", ",", "0", "]", "\n", "b_conf", "=", "pred_boxes", "[", "b", ",", "0", "]", "\n", "if", "a_conf", ">", "b_conf", ":", "\n", "                ", "to_remove", ".", "add", "(", "b", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "to_remove", ".", "add", "(", "a", ".", "item", "(", ")", ")", "\n", "", "", "", "keep", "=", "set", "(", "range", "(", "pred_boxes", ".", "size", "(", "0", ")", ")", ")", "\n", "keep", "=", "keep", "-", "to_remove", "\n", "#import pdb;pdb.set_trace()", "\n", "\n", "#assert(len(keep) < pred_boxes.size(0))", "\n", "\n", "return", "pred_boxes", "[", "list", "(", "keep", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.non_max_sup_iou": [[16, 18], ["yolo_tools.non_max_sup_"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.non_max_sup_"], ["", "def", "non_max_sup_iou", "(", "pred_boxes", ",", "thresh_conf", "=", "0.5", ",", "thresh_inter", "=", "0.5", ",", "hard_limit", "=", "300", ")", ":", "\n", "    ", "return", "non_max_sup_", "(", "pred_boxes", ",", "thresh_conf", ",", "thresh_inter", ",", "max_intersection", ",", "hard_limit", ")", "\n", "", "def", "non_max_sup_dist", "(", "pred_boxes", ",", "thresh_conf", "=", "0.5", ",", "thresh_dist", "=", "0.9", ",", "hard_limit", "=", "300", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.non_max_sup_dist": [[18, 20], ["yolo_tools.non_max_sup_"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.non_max_sup_"], ["", "def", "non_max_sup_dist", "(", "pred_boxes", ",", "thresh_conf", "=", "0.5", ",", "thresh_dist", "=", "0.9", ",", "hard_limit", "=", "300", ")", ":", "\n", "    ", "return", "non_max_sup_", "(", "pred_boxes", ",", "thresh_conf", ",", "thresh_dist", "*", "-", "1", ",", "dist_neg", ",", "hard_limit", ")", "\n", "", "def", "non_max_sup_", "(", "pred_boxes", ",", "thresh_conf", ",", "thresh_loc", ",", "loc_metric", ",", "hard_limit", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.non_max_sup_": [[20, 54], ["range", "range", "above_thresh.sort", "to_return.append", "range", "above_thresh.append", "len", "len", "to_remove.append", "yolo_tools.verticle_bias_intersection", "yolo_tools.max_intersection", "yolo_tools.dist_neg"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.verticle_bias_intersection", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.max_intersection", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.dist_neg"], ["", "def", "non_max_sup_", "(", "pred_boxes", ",", "thresh_conf", ",", "thresh_loc", ",", "loc_metric", ",", "hard_limit", ")", ":", "\n", "#rearr = [0,1,2,5,4,3]", "\n", "#for i in range(6,pred_boxes.shape[2]):", "\n", "#    rearr.append(i)", "\n", "#pred_boxes = pred_boxes[:,:,rearr]", "\n", "    ", "to_return", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "pred_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "#allIOU = bbox_iou(", "\n", "        ", "above_thresh", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "pred_boxes", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "pred_boxes", "[", "b", ",", "i", ",", "0", "]", ">", "thresh_conf", ":", "\n", "                ", "above_thresh", ".", "append", "(", "(", "pred_boxes", "[", "b", ",", "i", ",", "0", "]", ",", "i", ")", ")", "\n", "", "", "above_thresh", ".", "sort", "(", "key", "=", "lambda", "a", ":", "a", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "above_thresh", "=", "above_thresh", "[", ":", "hard_limit", "]", "\n", "li", "=", "0", "\n", "while", "li", "<", "len", "(", "above_thresh", ")", "-", "1", ":", "\n", "            ", "i", "=", "above_thresh", "[", "li", "]", "[", "1", "]", "\n", "loc_measures", "=", "loc_metric", "(", "pred_boxes", "[", "b", ",", "i", ",", "1", ":", "6", "]", ",", "pred_boxes", "[", "b", ",", "[", "x", "[", "1", "]", "for", "x", "in", "above_thresh", "[", "li", "+", "1", ":", "]", "]", ",", "1", ":", "6", "]", ")", "\n", "#ious = bbox_iou(pred_boxes[b,i:i+1,1:5],pred_boxes[b,[x[1] for x in above_thresh[li+1:]],1:5], x1y1x2y2=False)", "\n", "to_remove", "=", "[", "]", "\n", "for", "lj", "in", "range", "(", "len", "(", "above_thresh", ")", "-", "1", ",", "li", ",", "-", "1", ")", ":", "\n", "                ", "j", "=", "above_thresh", "[", "lj", "]", "[", "1", "]", "\n", "#if bbox_iou( pred_boxes[b,i:i+1,1:5], pred_boxes[b,j:j+1,1:5], x1y1x2y2=False) > thresh_iou:", "\n", "if", "loc_measures", "[", "lj", "-", "(", "li", "+", "1", ")", "]", ">", "thresh_loc", ":", "\n", "                    ", "to_remove", ".", "append", "(", "lj", ")", "\n", "#to_remove.reverse()", "\n", "", "", "for", "index", "in", "to_remove", ":", "\n", "                ", "del", "above_thresh", "[", "index", "]", "\n", "", "li", "+=", "1", "\n", "\n", "", "best", "=", "pred_boxes", "[", "b", ",", "[", "x", "[", "1", "]", "for", "x", "in", "above_thresh", "]", ",", ":", "]", "\n", "to_return", ".", "append", "(", "best", ")", "#[:,rearr])", "\n", "", "return", "to_return", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.non_max_sup_keep_overlap_iou": [[55, 170], ["range", "print", "print", "print", "print", "print", "print", "print", "print", "timeit.default_timer", "range", "above_thresh.sort", "times_above_thresh.append", "timeit.default_timer", "yolo_tools.allIOU", "times_all_iou.append", "timeit.default_timer", "adj_b.type", "torch.where", "times_bridge_first.append", "set", "print", "list", "list.sort", "to_return.append", "times_batch.append", "torch.zeros_like", "torch.matmul", "len", "timeit.default_timer", "list", "list.sort", "times_zip_sort.append", "timeit.default_timer", "times_for_loc_measures.append", "timeit.default_timer", "numpy.mean", "numpy.sum", "numpy.mean", "numpy.sum", "numpy.mean", "numpy.sum", "numpy.mean", "numpy.sum", "numpy.mean", "numpy.sum", "numpy.mean", "numpy.sum", "numpy.mean", "numpy.sum", "numpy.mean", "numpy.sum", "above_thresh.append", "timeit.default_timer", "timeit.default_timer", "timeit.default_timer", "zip", "len", "list.update", "times_remove.append", "timeit.default_timer", "adj_b.type", "torch.where", "times_bridge_second.append", "len", "timeit.default_timer", "range", "timeit.default_timer", "timeit.default_timer", "torch.zeros_like", "torch.matmul", "len", "to_remove.append", "timeit.default_timer", "timeit.default_timer"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allIOU"], ["", "def", "non_max_sup_keep_overlap_iou", "(", "pred_boxes", ",", "thresh_conf", ",", "thresh_loc", ",", "hard_limit", "=", "9999", ")", ":", "\n", "    ", "times_batch", "=", "[", "]", "\n", "times_above_thresh", "=", "[", "]", "\n", "times_all_iou", "=", "[", "]", "\n", "times_bridge_first", "=", "[", "]", "\n", "times_zip_sort", "=", "[", "]", "\n", "times_for_loc_measures", "=", "[", "]", "\n", "times_remove", "=", "[", "]", "\n", "times_bridge_second", "=", "[", "]", "\n", "\n", "to_return", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "pred_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "tic_b", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "\n", "#all_iou = ... or only on above_thresh?", "\n", "\n", "#TODO the creation of above_thresh could be faster", "\n", "above_thresh", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "pred_boxes", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "pred_boxes", "[", "b", ",", "i", ",", "0", "]", ">", "thresh_conf", ":", "\n", "                ", "above_thresh", ".", "append", "(", "(", "pred_boxes", "[", "b", ",", "i", ",", "0", "]", ",", "i", ")", ")", "\n", "", "", "above_thresh", ".", "sort", "(", "key", "=", "lambda", "a", ":", "a", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "above_thresh", "=", "above_thresh", "[", ":", "hard_limit", "]", "\n", "above_thresh", "=", "[", "x", "[", "1", "]", "for", "x", "in", "above_thresh", "]", "\n", "abv_thr_bbs", "=", "pred_boxes", "[", "b", ",", "above_thresh", "]", "\n", "\n", "times_above_thresh", ".", "append", "(", "timeit", ".", "default_timer", "(", ")", "-", "tic_b", ")", "\n", "tic", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "all_iou", "=", "allIOU", "(", "abv_thr_bbs", ",", "abv_thr_bbs", ",", "x1y1x2y2", "=", "True", ")", "\n", "\n", "times_all_iou", ".", "append", "(", "timeit", ".", "default_timer", "(", ")", "-", "tic", ")", "\n", "tic", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "adj_b", "=", "all_iou", ">", "0", "\n", "adj", "=", "adj_b", ".", "type", "(", "torch", ".", "IntTensor", ")", "\n", "bridged_to", "=", "torch", ".", "where", "(", "adj_b", ",", "torch", ".", "zeros_like", "(", "adj", ")", ",", "torch", ".", "matmul", "(", "adj", ",", "adj", ")", ")", "#which bbs a bb is bridged to by another bb (but is not directly overlapping with)", "\n", "\n", "adj_b", "=", "None", "\n", "#this is some graph theory. adj^N=A is a matrix showing at A[i,j] how many paths there are from node i to node j", "\n", "#We use this to track which bbs are exclusive bridges, that is, they overlap two bbs and no other bb overlaps both of those bbs", "\n", "times_bridge_first", ".", "append", "(", "timeit", ".", "default_timer", "(", ")", "-", "tic", ")", "\n", "\n", "li", "=", "0", "\n", "to_remove_all", "=", "set", "(", ")", "\n", "while", "li", "<", "len", "(", "above_thresh", ")", ":", "\n", "#print('b:{}/{}, li:{}/{}'.format(b,pred_boxes.shape[0],li,len(above_thresh)))", "\n", "            ", "if", "li", "in", "to_remove_all", ":", "\n", "                ", "li", "+=", "1", "\n", "continue", "\n", "\n", "", "tic", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "loc_measures", "=", "all_iou", "[", "li", "]", "#loc_metric(pred_boxes[b,i,1:6],pred_boxes[b,[x[1] for x in above_thresh[li+1:]],1:6])", "\n", "#loc_measures = list(enumerate(loc_measures)).sort(key=lambda a: a[1])", "\n", "loc_measures", "=", "list", "(", "zip", "(", "range", "(", "li", "+", "1", ",", "len", "(", "above_thresh", ")", ")", ",", "loc_measures", "[", "li", "+", "1", ":", "]", ",", "abv_thr_bbs", "[", "li", "+", "1", ":", ",", "0", "]", ")", ")", "\n", "loc_measures", ".", "sort", "(", "key", "=", "lambda", "a", ":", "a", "[", "2", "]", ")", "\n", "\n", "times_zip_sort", ".", "append", "(", "timeit", ".", "default_timer", "(", ")", "-", "tic", ")", "\n", "tic", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "to_remove", "=", "[", "]", "\n", "for", "loc_i", ",", "iou", ",", "loc_conf", "in", "loc_measures", ":", "\n", "                ", "if", "iou", ">", "thresh_loc", ":", "\n", "#Is this an exclusive bridge?", "\n", "                    ", "bridging", "=", "(", "adj", "[", "loc_i", "]", "-", "adj", "[", "li", "]", ")", "==", "1", "#where this is 1, I am a bridge", "\n", "if", "not", "(", "(", "bridged_to", "[", "li", "]", "==", "1", ")", "&", "bridging", ")", ".", "any", "(", ")", ":", "\n", "#loc_i is not an exlusive bridge", "\n", "                        ", "to_remove", ".", "append", "(", "loc_i", ")", "\n", "bridged_to", "[", "li", ",", "bridging", "]", "-=", "1", "\n", "\n", "", "", "", "times_for_loc_measures", ".", "append", "(", "timeit", ".", "default_timer", "(", ")", "-", "tic", ")", "\n", "tic", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "if", "len", "(", "to_remove", ")", ">", "0", ":", "\n", "                ", "to_remove_all", ".", "update", "(", "to_remove", ")", "\n", "for", "index", "in", "to_remove", ":", "\n", "#del above_thresh[index]", "\n", "                    ", "all_iou", "[", "index", ",", ":", "]", "=", "0", "\n", "all_iou", "[", ":", ",", "index", "]", "=", "0", "\n", "\n", "", "times_remove", ".", "append", "(", "timeit", ".", "default_timer", "(", ")", "-", "tic", ")", "\n", "tic", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "#recompute bridging after removeal", "\n", "adj_b", "=", "all_iou", ">", "0", "\n", "adj", "=", "adj_b", ".", "type", "(", "torch", ".", "IntTensor", ")", "\n", "bridged_to", "=", "torch", ".", "where", "(", "adj_b", ",", "torch", ".", "zeros_like", "(", "adj", ")", ",", "torch", ".", "matmul", "(", "adj", ",", "adj", ")", ")", "\n", "adj_b", "=", "None", "\n", "\n", "times_bridge_second", ".", "append", "(", "timeit", ".", "default_timer", "(", ")", "-", "tic", ")", "\n", "", "li", "+=", "1", "\n", "\n", "\n", "", "print", "(", "'removing: {}.'", ".", "format", "(", "len", "(", "to_remove_all", ")", ")", ")", "\n", "to_remove_all", "=", "list", "(", "to_remove_all", ")", "\n", "to_remove_all", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "for", "index", "in", "to_remove_all", ":", "\n", "            ", "del", "above_thresh", "[", "index", "]", "\n", "", "best", "=", "pred_boxes", "[", "b", ",", "above_thresh", ",", ":", "]", "\n", "to_return", ".", "append", "(", "best", ")", "#[:,rearr])", "\n", "\n", "times_batch", ".", "append", "(", "timeit", ".", "default_timer", "(", ")", "-", "tic_b", ")", "\n", "\n", "", "print", "(", "'times_batch mean:{}, total:{}'", ".", "format", "(", "np", ".", "mean", "(", "times_batch", ")", ",", "np", ".", "sum", "(", "times_batch", ")", ")", ")", "\n", "print", "(", "'times_above_thresh mean:{}, total:{}'", ".", "format", "(", "np", ".", "mean", "(", "times_above_thresh", ")", ",", "np", ".", "sum", "(", "times_above_thresh", ")", ")", ")", "\n", "print", "(", "'times_all_iou mean:{}, total:{}'", ".", "format", "(", "np", ".", "mean", "(", "times_all_iou", ")", ",", "np", ".", "sum", "(", "times_all_iou", ")", ")", ")", "\n", "print", "(", "'times_bridge_first mean:{}, total:{}'", ".", "format", "(", "np", ".", "mean", "(", "times_bridge_first", ")", ",", "np", ".", "sum", "(", "times_bridge_first", ")", ")", ")", "\n", "print", "(", "'times_zip_sort mean:{}, total:{}'", ".", "format", "(", "np", ".", "mean", "(", "times_zip_sort", ")", ",", "np", ".", "sum", "(", "times_zip_sort", ")", ")", ")", "\n", "print", "(", "'times_for_loc_measures mean:{}, total:{}'", ".", "format", "(", "np", ".", "mean", "(", "times_for_loc_measures", ")", ",", "np", ".", "sum", "(", "times_for_loc_measures", ")", ")", ")", "\n", "print", "(", "'times_remove mean:{}, total:{}'", ".", "format", "(", "np", ".", "mean", "(", "times_remove", ")", ",", "np", ".", "sum", "(", "times_remove", ")", ")", ")", "\n", "print", "(", "'times_bridge_second mean:{}, total:{}'", ".", "format", "(", "np", ".", "mean", "(", "times_bridge_second", ")", ",", "np", ".", "sum", "(", "times_bridge_second", ")", ")", ")", "\n", "\n", "return", "to_return", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.verticle_bias_intersection": [[200, 229], ["torch.max", "torch.min", "torch.max", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.min"], "function", ["None"], ["", "def", "verticle_bias_intersection", "(", "query_box", ",", "candidate_boxes", ")", ":", "\n", "    ", "q_x1", ",", "q_x2", "=", "query_box", "[", "0", "]", "-", "query_box", "[", "4", "]", ",", "query_box", "[", "0", "]", "+", "query_box", "[", "4", "]", "\n", "q_y1", ",", "q_y2", "=", "query_box", "[", "1", "]", "-", "query_box", "[", "3", "]", ",", "query_box", "[", "1", "]", "+", "query_box", "[", "3", "]", "\n", "q_yc", "=", "(", "q_y1", "+", "q_y2", ")", "/", "2", "\n", "q_h", "=", "q_y2", "-", "q_y1", "\n", "c_x1", ",", "c_x2", "=", "candidate_boxes", "[", ":", ",", "0", "]", "-", "candidate_boxes", "[", ":", ",", "4", "]", ",", "candidate_boxes", "[", ":", ",", "0", "]", "+", "candidate_boxes", "[", ":", ",", "4", "]", "\n", "c_y1", ",", "c_y2", "=", "candidate_boxes", "[", ":", ",", "1", "]", "-", "candidate_boxes", "[", ":", ",", "3", "]", ",", "candidate_boxes", "[", ":", ",", "1", "]", "+", "candidate_boxes", "[", ":", ",", "3", "]", "\n", "c_yc", "=", "(", "c_y1", "+", "c_y2", ")", "/", "2", "\n", "c_h", "=", "c_y2", "-", "c_y1", "\n", "\n", "inter_rect_x1", "=", "torch", ".", "max", "(", "q_x1", ",", "c_x1", ")", "\n", "inter_rect_x2", "=", "torch", ".", "min", "(", "q_x2", ",", "c_x2", ")", "\n", "inter_rect_y1", "=", "torch", ".", "max", "(", "q_y1", ",", "c_y1", ")", "\n", "inter_rect_y2", "=", "torch", ".", "min", "(", "q_y2", ",", "c_y2", ")", "\n", "\n", "inter_area", "=", "torch", ".", "clamp", "(", "inter_rect_x2", "-", "inter_rect_x1", "+", "1", ",", "min", "=", "0", ")", "*", "torch", ".", "clamp", "(", "\n", "inter_rect_y2", "-", "inter_rect_y1", "+", "1", ",", "min", "=", "0", ")", "\n", "\n", "q_area", "=", "(", "q_x2", "-", "q_x1", "+", "1", ")", "*", "(", "q_y2", "-", "q_y1", "+", "1", ")", "\n", "c_area", "=", "(", "c_x2", "-", "c_x1", "+", "1", ")", "*", "(", "c_y2", "-", "c_y1", "+", "1", ")", "\n", "min_area", "=", "torch", ".", "min", "(", "q_area", ",", "c_area", ")", "\n", "#import pdb; pdb.set_trace()", "\n", "\n", "max_inter", "=", "inter_area", "/", "min_area", "\n", "#max_inter[(q_yc-c_yc).abs()>torch.min(", "\n", "#Apply bias", "\n", "mult", "=", "3", "\n", "max_inter", "*=", "(", "mult", "*", "(", "(", "(", "q_yc", "-", "c_yc", ")", ".", "abs", "(", ")", "/", "torch", ".", "min", "(", "q_h", ",", "c_h", ")", ")", ")", ".", "pow", "(", "2", ")", ")", ".", "clamp", "(", "min", "=", "0.5", ")", "\n", "return", "max_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.max_intersection": [[231, 251], ["torch.max", "torch.min", "torch.max", "torch.min", "torch.min", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "def", "max_intersection", "(", "query_box", ",", "candidate_boxes", ")", ":", "\n", "    ", "q_x1", ",", "q_x2", "=", "query_box", "[", "0", "]", "-", "query_box", "[", "4", "]", ",", "query_box", "[", "0", "]", "+", "query_box", "[", "4", "]", "\n", "q_y1", ",", "q_y2", "=", "query_box", "[", "1", "]", "-", "query_box", "[", "3", "]", ",", "query_box", "[", "1", "]", "+", "query_box", "[", "3", "]", "\n", "c_x1", ",", "c_x2", "=", "candidate_boxes", "[", ":", ",", "0", "]", "-", "candidate_boxes", "[", ":", ",", "4", "]", ",", "candidate_boxes", "[", ":", ",", "0", "]", "+", "candidate_boxes", "[", ":", ",", "4", "]", "\n", "c_y1", ",", "c_y2", "=", "candidate_boxes", "[", ":", ",", "1", "]", "-", "candidate_boxes", "[", ":", ",", "3", "]", ",", "candidate_boxes", "[", ":", ",", "1", "]", "+", "candidate_boxes", "[", ":", ",", "3", "]", "\n", "\n", "inter_rect_x1", "=", "torch", ".", "max", "(", "q_x1", ",", "c_x1", ")", "\n", "inter_rect_x2", "=", "torch", ".", "min", "(", "q_x2", ",", "c_x2", ")", "\n", "inter_rect_y1", "=", "torch", ".", "max", "(", "q_y1", ",", "c_y1", ")", "\n", "inter_rect_y2", "=", "torch", ".", "min", "(", "q_y2", ",", "c_y2", ")", "\n", "\n", "inter_area", "=", "torch", ".", "clamp", "(", "inter_rect_x2", "-", "inter_rect_x1", "+", "1", ",", "min", "=", "0", ")", "*", "torch", ".", "clamp", "(", "\n", "inter_rect_y2", "-", "inter_rect_y1", "+", "1", ",", "min", "=", "0", ")", "\n", "\n", "q_area", "=", "(", "q_x2", "-", "q_x1", "+", "1", ")", "*", "(", "q_y2", "-", "q_y1", "+", "1", ")", "\n", "c_area", "=", "(", "c_x2", "-", "c_x1", "+", "1", ")", "*", "(", "c_y2", "-", "c_y1", "+", "1", ")", "\n", "min_area", "=", "torch", ".", "min", "(", "q_area", ",", "c_area", ")", "\n", "#import pdb; pdb.set_trace()", "\n", "\n", "return", "inter_area", "/", "min_area", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.dist_neg": [[252, 295], ["torch.sin", "torch.cos", "torch.tensor", "query_points.expand.expand", "queryHW.expand.expand", "torch.sin", "torch.cos", "torch.stack", "candidate_boxes.size", "candidate_boxes.size", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "function", ["None"], ["", "def", "dist_neg", "(", "query_box", ",", "candidate_boxes", ")", ":", "\n", "#convert boxes to points", "\n", "    ", "sin_r", "=", "torch", ".", "sin", "(", "query_box", "[", "2", "]", ")", "\n", "cos_r", "=", "torch", ".", "cos", "(", "query_box", "[", "2", "]", ")", "\n", "qlx", "=", "query_box", "[", "0", "]", "-", "cos_r", "*", "query_box", "[", "4", "]", "\n", "qly", "=", "query_box", "[", "1", "]", "+", "sin_r", "*", "query_box", "[", "3", "]", "\n", "qrx", "=", "query_box", "[", "0", "]", "+", "cos_r", "*", "query_box", "[", "4", "]", "\n", "qry", "=", "query_box", "[", "1", "]", "-", "sin_r", "*", "query_box", "[", "3", "]", "\n", "qtx", "=", "query_box", "[", "0", "]", "-", "cos_r", "*", "query_box", "[", "4", "]", "\n", "qty", "=", "query_box", "[", "1", "]", "-", "sin_r", "*", "query_box", "[", "3", "]", "\n", "qbx", "=", "query_box", "[", "0", "]", "+", "cos_r", "*", "query_box", "[", "4", "]", "\n", "qby", "=", "query_box", "[", "1", "]", "+", "sin_r", "*", "query_box", "[", "3", "]", "\n", "query_points", "=", "torch", ".", "tensor", "(", "[", "[", "qlx", ",", "qly", ",", "qrx", ",", "qry", ",", "qtx", ",", "qty", ",", "qbx", ",", "qby", "]", "]", ")", "\n", "queryHW", "=", "(", "query_box", "[", "4", "]", "+", "query_box", "[", "3", "]", ")", "/", "2", "\n", "#queryHW = torch.min(query_box[3:5])", "\n", "\n", "query_points", "=", "query_points", ".", "expand", "(", "candidate_boxes", ".", "size", "(", "0", ")", ",", "8", ")", "\n", "queryHW", "=", "queryHW", ".", "expand", "(", "candidate_boxes", ".", "size", "(", "0", ")", ")", "\n", "\n", "sin_r", "=", "torch", ".", "sin", "(", "candidate_boxes", "[", ":", ",", "2", "]", ")", "\n", "cos_r", "=", "torch", ".", "cos", "(", "candidate_boxes", "[", ":", ",", "2", "]", ")", "\n", "clx", "=", "candidate_boxes", "[", ":", ",", "0", "]", "-", "cos_r", "*", "candidate_boxes", "[", ":", ",", "4", "]", "\n", "cly", "=", "candidate_boxes", "[", ":", ",", "1", "]", "+", "sin_r", "*", "candidate_boxes", "[", ":", ",", "3", "]", "\n", "crx", "=", "candidate_boxes", "[", ":", ",", "0", "]", "+", "cos_r", "*", "candidate_boxes", "[", ":", ",", "4", "]", "\n", "cry", "=", "candidate_boxes", "[", ":", ",", "1", "]", "-", "sin_r", "*", "candidate_boxes", "[", ":", ",", "3", "]", "\n", "ctx", "=", "candidate_boxes", "[", ":", ",", "0", "]", "-", "cos_r", "*", "candidate_boxes", "[", ":", ",", "4", "]", "\n", "cty", "=", "candidate_boxes", "[", ":", ",", "1", "]", "-", "sin_r", "*", "candidate_boxes", "[", ":", ",", "3", "]", "\n", "cbx", "=", "candidate_boxes", "[", ":", ",", "0", "]", "+", "cos_r", "*", "candidate_boxes", "[", ":", ",", "4", "]", "\n", "cby", "=", "candidate_boxes", "[", ":", ",", "1", "]", "+", "sin_r", "*", "candidate_boxes", "[", ":", ",", "3", "]", "\n", "cand_points", "=", "torch", ".", "stack", "(", "[", "clx", ",", "cly", ",", "crx", ",", "cry", ",", "ctx", ",", "cty", ",", "cbx", ",", "cby", "]", ",", "dim", "=", "1", ")", "\n", "candHW", "=", "(", "candidate_boxes", "[", ":", ",", "4", "]", "+", "candidate_boxes", "[", ":", ",", "3", "]", ")", "/", "2", "\n", "#candHW,_ = torch.min(candidate_boxes[:,3:5],dim=1)", "\n", "#compute distances", "\n", "normalization", "=", "(", "queryHW", "+", "candHW", ")", "/", "2.0", "\n", "\n", "deltas", "=", "query_points", "-", "cand_points", "\n", "dist", "=", "(", "(", "\n", "torch", ".", "norm", "(", "deltas", "[", ":", ",", "0", ":", "2", "]", ",", "2", ",", "1", ")", "+", "\n", "torch", ".", "norm", "(", "deltas", "[", ":", ",", "2", ":", "4", "]", ",", "2", ",", "1", ")", "+", "\n", "torch", ".", "norm", "(", "deltas", "[", ":", ",", "4", ":", "6", "]", ",", "2", ",", "1", ")", "+", "\n", "torch", ".", "norm", "(", "deltas", "[", ":", ",", "6", ":", "8", "]", ",", "2", ",", "1", ")", "\n", ")", "/", "normalization", ")", "**", "2", "\n", "return", "dist", "*", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allIOU": [[296, 335], ["b1_x1[].expand", "b1_y1[].expand", "b1_x2[].expand", "b1_y2[].expand", "b2_x1[].expand", "b2_y1[].expand", "b2_x2[].expand", "b2_y2[].expand", "torch.max", "torch.min", "torch.max", "torch.min", "boxes1.size", "boxes2.size", "boxes1.size", "boxes2.size", "boxes1.size", "boxes2.size", "boxes1.size", "boxes2.size", "boxes1.size", "boxes2.size", "boxes1.size", "boxes2.size", "boxes1.size", "boxes2.size", "boxes1.size", "boxes2.size", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "def", "allIOU", "(", "boxes1", ",", "boxes2", ",", "boxes1XYWH", "=", "[", "0", ",", "1", ",", "4", ",", "3", "]", ",", "x1y1x2y2", "=", "False", ")", ":", "\n", "    ", "if", "x1y1x2y2", ":", "\n", "        ", "b1_x1", "=", "boxes1", "[", ":", ",", "0", "]", "\n", "b1_y1", "=", "boxes1", "[", ":", ",", "1", "]", "\n", "b1_x2", "=", "boxes1", "[", ":", ",", "2", "]", "\n", "b1_y2", "=", "boxes1", "[", ":", ",", "3", "]", "\n", "b2_x1", "=", "boxes2", "[", ":", ",", "0", "]", "\n", "b2_y1", "=", "boxes2", "[", ":", ",", "1", "]", "\n", "b2_x2", "=", "boxes2", "[", ":", ",", "2", "]", "\n", "b2_y2", "=", "boxes2", "[", ":", ",", "3", "]", "\n", "", "else", ":", "\n", "        ", "b1_x1", ",", "b1_x2", "=", "boxes1", "[", ":", ",", "boxes1XYWH", "[", "0", "]", "]", "-", "boxes1", "[", ":", ",", "boxes1XYWH", "[", "2", "]", "]", ",", "boxes1", "[", ":", ",", "boxes1XYWH", "[", "0", "]", "]", "+", "boxes1", "[", ":", ",", "boxes1XYWH", "[", "2", "]", "]", "\n", "b1_y1", ",", "b1_y2", "=", "boxes1", "[", ":", ",", "boxes1XYWH", "[", "1", "]", "]", "-", "boxes1", "[", ":", ",", "boxes1XYWH", "[", "3", "]", "]", ",", "boxes1", "[", ":", ",", "boxes1XYWH", "[", "1", "]", "]", "+", "boxes1", "[", ":", ",", "boxes1XYWH", "[", "3", "]", "]", "\n", "b2_x1", ",", "b2_x2", "=", "boxes2", "[", ":", ",", "0", "]", "-", "boxes2", "[", ":", ",", "4", "]", ",", "boxes2", "[", ":", ",", "0", "]", "+", "boxes2", "[", ":", ",", "4", "]", "\n", "b2_y1", ",", "b2_y2", "=", "boxes2", "[", ":", ",", "1", "]", "-", "boxes2", "[", ":", ",", "3", "]", ",", "boxes2", "[", ":", ",", "1", "]", "+", "boxes2", "[", ":", ",", "3", "]", "\n", "\n", "#expand to make two dimensional, allowing every instance of boxes1", "\n", "#to be compared with every intsance of boxes2", "\n", "", "b1_x1", "=", "b1_x1", "[", ":", ",", "None", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ")", "\n", "b1_y1", "=", "b1_y1", "[", ":", ",", "None", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ")", "\n", "b1_x2", "=", "b1_x2", "[", ":", ",", "None", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ")", "\n", "b1_y2", "=", "b1_y2", "[", ":", ",", "None", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ")", "\n", "b2_x1", "=", "b2_x1", "[", "None", ",", ":", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ")", "\n", "b2_y1", "=", "b2_y1", "[", "None", ",", ":", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ")", "\n", "b2_x2", "=", "b2_x2", "[", "None", ",", ":", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ")", "\n", "b2_y2", "=", "b2_y2", "[", "None", ",", ":", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ")", "\n", "\n", "inter_rect_x1", "=", "torch", ".", "max", "(", "b1_x1", ",", "b2_x1", ")", "\n", "inter_rect_x2", "=", "torch", ".", "min", "(", "b1_x2", ",", "b2_x2", ")", "\n", "inter_rect_y1", "=", "torch", ".", "max", "(", "b1_y1", ",", "b2_y1", ")", "\n", "inter_rect_y2", "=", "torch", ".", "min", "(", "b1_y2", ",", "b2_y2", ")", "\n", "\n", "inter_area", "=", "torch", ".", "clamp", "(", "inter_rect_x2", "-", "inter_rect_x1", "+", "1", ",", "min", "=", "0", ")", "*", "torch", ".", "clamp", "(", "\n", "inter_rect_y2", "-", "inter_rect_y1", "+", "1", ",", "min", "=", "0", ")", "\n", "\n", "b1_area", "=", "(", "b1_x2", "-", "b1_x1", "+", "1", ")", "*", "(", "b1_y2", "-", "b1_y1", "+", "1", ")", "\n", "b2_area", "=", "(", "b2_x2", "-", "b2_x1", "+", "1", ")", "*", "(", "b2_y2", "-", "b2_y1", "+", "1", ")", "\n", "iou", "=", "inter_area", "/", "(", "b1_area", "+", "b2_area", "-", "inter_area", "+", "1e-16", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allIO_clipU": [[336, 396], ["bT_x1[].expand", "bT_y1[].expand", "bT_x2[].expand", "bT_y2[].expand", "bP_x1[].expand", "bP_y1[].expand", "bP_x2[].expand", "bP_y2[].expand", "torch.max", "torch.min", "torch.max", "torch.min", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "def", "allIO_clipU", "(", "boxesT", ",", "boxesP", ",", "boxesPXYWH", "=", "[", "0", ",", "1", ",", "4", ",", "3", "]", ",", "x1y1x2y2", "=", "False", ")", ":", "\n", "    ", "if", "x1y1x2y2", ":", "\n", "        ", "bT_x1", "=", "boxesT", "[", ":", ",", "0", "]", "\n", "bT_y1", "=", "boxesT", "[", ":", ",", "1", "]", "\n", "bT_x2", "=", "boxesT", "[", ":", ",", "2", "]", "\n", "bT_y2", "=", "boxesT", "[", ":", ",", "3", "]", "\n", "bP_x1", "=", "boxesP", "[", ":", ",", "0", "]", "\n", "bP_y1", "=", "boxesP", "[", ":", ",", "1", "]", "\n", "bP_x2", "=", "boxesP", "[", ":", ",", "2", "]", "\n", "bP_y2", "=", "boxesP", "[", ":", ",", "3", "]", "\n", "", "else", ":", "\n", "        ", "bP_x1", ",", "bP_x2", "=", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "0", "]", "]", "-", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "2", "]", "]", ",", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "0", "]", "]", "+", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "2", "]", "]", "\n", "bP_y1", ",", "bP_y2", "=", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "1", "]", "]", "-", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "3", "]", "]", ",", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "1", "]", "]", "+", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "3", "]", "]", "\n", "bT_x1", ",", "bT_x2", "=", "boxesT", "[", ":", ",", "0", "]", "-", "boxesT", "[", ":", ",", "4", "]", ",", "boxesT", "[", ":", ",", "0", "]", "+", "boxesT", "[", ":", ",", "4", "]", "\n", "bT_y1", ",", "bT_y2", "=", "boxesT", "[", ":", ",", "1", "]", "-", "boxesT", "[", ":", ",", "3", "]", ",", "boxesT", "[", ":", ",", "1", "]", "+", "boxesT", "[", ":", ",", "3", "]", "\n", "\n", "#expand to make two dimensional, allowing every instance of boxesP", "\n", "#to be compared with every intsance of boxesT", "\n", "", "bT_x1", "=", "bT_x1", "[", ":", ",", "None", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "bT_y1", "=", "bT_y1", "[", ":", ",", "None", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "bT_x2", "=", "bT_x2", "[", ":", ",", "None", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "bT_y2", "=", "bT_y2", "[", ":", ",", "None", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "bP_x1", "=", "bP_x1", "[", "None", ",", ":", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "bP_y1", "=", "bP_y1", "[", "None", ",", ":", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "bP_x2", "=", "bP_x2", "[", "None", ",", ":", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "bP_y2", "=", "bP_y2", "[", "None", ",", ":", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "\n", "inter_rect_x1", "=", "torch", ".", "max", "(", "bP_x1", ",", "bT_x1", ")", "\n", "inter_rect_x2", "=", "torch", ".", "min", "(", "bP_x2", ",", "bT_x2", ")", "\n", "inter_rect_y1", "=", "torch", ".", "max", "(", "bP_y1", ",", "bT_y1", ")", "\n", "inter_rect_y2", "=", "torch", ".", "min", "(", "bP_y2", ",", "bT_y2", ")", "\n", "\n", "inter_area", "=", "torch", ".", "clamp", "(", "inter_rect_x2", "-", "inter_rect_x1", "+", "1", ",", "min", "=", "0", ")", "*", "torch", ".", "clamp", "(", "\n", "inter_rect_y2", "-", "inter_rect_y1", "+", "1", ",", "min", "=", "0", ")", "\n", "\n", "bP_area", "=", "(", "bP_x2", "-", "bP_x1", "+", "1", ")", "*", "(", "bP_y2", "-", "bP_y1", "+", "1", ")", "\n", "#clip target region by pred region", "\n", "bT_clippedArea", "=", "(", "inter_rect_x2", "-", "inter_rect_x1", "+", "1", ")", "*", "(", "bT_y2", "-", "bT_y1", "+", "1", ")", "\n", "\n", "#iou = inter_area / (bP_area + bT_area - inter_area + 1e-16)", "\n", "io_clipped_u", "=", "inter_area", "/", "(", "bP_area", "+", "bT_clippedArea", "-", "inter_area", "+", "1e-16", ")", "\n", "\n", "#gt_r = rboxes[:,None,2].expand(rboxes.size(0), len(bbs))", "\n", "#pr_allRs = pr_allRs[None,:].expand(rboxes.size(0), len(bbs))", "\n", "#angle_compatible = torch.abs(gt_r-pr_allRs)", "\n", "#angle_compatible[angle_compatible>math.pi]-=math.pi", "\n", "#angle_compatible[angle_compatible>math.pi]-=math.pi", "\n", "#angle_compatible = angle_compatible.abs()<math.pi/3", "\n", "#iou *= angle_compatible", "\n", "\n", "#", "\n", "#gt_cls_ind = torch.argmax(rboxes[:,13:],dim=1)", "\n", "#pr_allClss = torch.FloatTensor([bb.getCls() for bb in bbs])", "\n", "##pr_allClss = torch.stack([bb.getCls() for bb in bbs],dim=0)", "\n", "#pr_cls_int = torch.argmax(pr_allClss,dim=1)", "\n", "#gt_cls_ind = gt_cls_ind[:,None].expand(rboxes.size(0), len(bbs))", "\n", "#pr_cls_int = pr_cls_int[None,:].expand(rboxes.size(0), len(bbs))", "\n", "#class_compatible = gt_cls_ind==pr_cls_int", "\n", "#iou *= class_compatible", "\n", "return", "io_clipped_u", "\n", "", "def", "classIOU", "(", "boxesT", ",", "boxesP", ",", "num_classes", ",", "boxesPXYWH", "=", "[", "0", ",", "1", ",", "4", ",", "3", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.classIOU": [[396, 436], ["bT_x1[].expand", "bT_y1[].expand", "bT_x2[].expand", "bT_y2[].expand", "bP_x1[].expand", "bP_y1[].expand", "bP_x2[].expand", "bP_y2[].expand", "torch.max", "torch.min", "torch.max", "torch.min", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size", "torch.clamp", "torch.clamp", "torch.argmax", "torch.argmax", "gt_cls_ind[].expand", "pr_cls_ind[].expand", "boxesT.size", "boxesP.size", "boxesT.size", "boxesP.size"], "function", ["None"], ["", "def", "classIOU", "(", "boxesT", ",", "boxesP", ",", "num_classes", ",", "boxesPXYWH", "=", "[", "0", ",", "1", ",", "4", ",", "3", "]", ")", ":", "\n", "    ", "bP_x1", ",", "bP_x2", "=", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "0", "]", "]", "-", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "2", "]", "]", ",", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "0", "]", "]", "+", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "2", "]", "]", "\n", "bP_y1", ",", "bP_y2", "=", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "1", "]", "]", "-", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "3", "]", "]", ",", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "1", "]", "]", "+", "boxesP", "[", ":", ",", "boxesPXYWH", "[", "3", "]", "]", "\n", "bT_x1", ",", "bT_x2", "=", "boxesT", "[", ":", ",", "0", "]", "-", "boxesT", "[", ":", ",", "4", "]", ",", "boxesT", "[", ":", ",", "0", "]", "+", "boxesT", "[", ":", ",", "4", "]", "\n", "bT_y1", ",", "bT_y2", "=", "boxesT", "[", ":", ",", "1", "]", "-", "boxesT", "[", ":", ",", "3", "]", ",", "boxesT", "[", ":", ",", "1", "]", "+", "boxesT", "[", ":", ",", "3", "]", "\n", "\n", "#expand to make two dimensional, allowing every instance of boxesP", "\n", "#to be compared with every intsance of boxesT", "\n", "bT_x1", "=", "bT_x1", "[", ":", ",", "None", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "bT_y1", "=", "bT_y1", "[", ":", ",", "None", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "bT_x2", "=", "bT_x2", "[", ":", ",", "None", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "bT_y2", "=", "bT_y2", "[", ":", ",", "None", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "bP_x1", "=", "bP_x1", "[", "None", ",", ":", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "bP_y1", "=", "bP_y1", "[", "None", ",", ":", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "bP_x2", "=", "bP_x2", "[", "None", ",", ":", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "bP_y2", "=", "bP_y2", "[", "None", ",", ":", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "\n", "inter_rect_x1", "=", "torch", ".", "max", "(", "bP_x1", ",", "bT_x1", ")", "\n", "inter_rect_x2", "=", "torch", ".", "min", "(", "bP_x2", ",", "bT_x2", ")", "\n", "inter_rect_y1", "=", "torch", ".", "max", "(", "bP_y1", ",", "bT_y1", ")", "\n", "inter_rect_y2", "=", "torch", ".", "min", "(", "bP_y2", ",", "bT_y2", ")", "\n", "\n", "inter_area", "=", "torch", ".", "clamp", "(", "inter_rect_x2", "-", "inter_rect_x1", "+", "1", ",", "min", "=", "0", ")", "*", "torch", ".", "clamp", "(", "\n", "inter_rect_y2", "-", "inter_rect_y1", "+", "1", ",", "min", "=", "0", ")", "\n", "\n", "bP_area", "=", "(", "bP_x2", "-", "bP_x1", "+", "1", ")", "*", "(", "bP_y2", "-", "bP_y1", "+", "1", ")", "\n", "bT_area", "=", "(", "bT_x2", "-", "bT_x1", "+", "1", ")", "*", "(", "bT_y2", "-", "bT_y1", "+", "1", ")", "\n", "\n", "iou", "=", "inter_area", "/", "(", "bP_area", "+", "bT_area", "-", "inter_area", "+", "1e-16", ")", "\n", "\n", "#", "\n", "if", "num_classes", ">", "0", ":", "\n", "        ", "gt_cls_ind", "=", "torch", ".", "argmax", "(", "boxesT", "[", ":", ",", "13", ":", "13", "+", "num_classes", "]", ",", "dim", "=", "1", ")", "#13:", "\n", "pr_cls_ind", "=", "torch", ".", "argmax", "(", "boxesP", "[", ":", ",", "5", ":", "5", "+", "num_classes", "]", ",", "dim", "=", "1", ")", "#5+numN:", "\n", "gt_cls_ind", "=", "gt_cls_ind", "[", ":", ",", "None", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "pr_cls_ind", "=", "pr_cls_ind", "[", "None", ",", ":", "]", ".", "expand", "(", "boxesT", ".", "size", "(", "0", ")", ",", "boxesP", ".", "size", "(", "0", ")", ")", "\n", "class_compatible", "=", "gt_cls_ind", "==", "pr_cls_ind", "\n", "iou", "*=", "class_compatible", "\n", "#target[0] pred[8]?", "\n", "", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allDist": [[441, 455], ["b1_x[].expand", "b1_y[].expand", "b2_x[].expand", "b2_y[].expand", "torch.sqrt", "boxes1.size", "boxes2.size", "boxes1.size", "boxes2.size", "boxes1.size", "boxes2.size", "boxes1.size", "boxes2.size", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "allDist", "(", "boxes1", ",", "boxes2", ")", ":", "\n", "    ", "b1_x", "=", "boxes1", "[", ":", ",", "0", "]", "\n", "b1_y", "=", "boxes1", "[", ":", ",", "1", "]", "\n", "b2_x", "=", "boxes2", "[", ":", ",", "0", "]", "\n", "b2_y", "=", "boxes2", "[", ":", ",", "1", "]", "\n", "\n", "#expand to make two dimensional, allowing every instance of boxes1", "\n", "#to be compared with every intsance of boxes2", "\n", "b1_x", "=", "b1_x", "[", ":", ",", "None", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ")", "\n", "b1_y", "=", "b1_y", "[", ":", ",", "None", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ")", "\n", "b2_x", "=", "b2_x", "[", "None", ",", ":", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ")", "\n", "b2_y", "=", "b2_y", "[", "None", ",", ":", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ")", "\n", "\n", "return", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "b1_x", "-", "b2_x", ",", "2", ")", "+", "torch", ".", "pow", "(", "b1_y", "-", "b2_y", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allBoxDistNeg": [[456, 501], ["torch.sin", "torch.cos", "torch.stack", "torch.sin", "torch.cos", "torch.stack", "boxes1_points[].expand", "boxes2_points[].expand", "boxes1HW[].expand", "boxes2HW[].expand", "boxes1.size", "boxes2.size", "boxes1.size", "boxes2.size", "boxes1.size", "boxes2.size", "boxes1.size", "boxes2.size", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "function", ["None"], ["", "def", "allBoxDistNeg", "(", "boxes1", ",", "boxes2", ")", ":", "\n", "#convert boxes to points", "\n", "    ", "sin_r", "=", "torch", ".", "sin", "(", "boxes1", "[", ":", ",", "2", "]", ")", "\n", "cos_r", "=", "torch", ".", "cos", "(", "boxes1", "[", ":", ",", "2", "]", ")", "\n", "clx", "=", "boxes1", "[", ":", ",", "0", "]", "-", "cos_r", "*", "boxes1", "[", ":", ",", "4", "]", "\n", "cly", "=", "boxes1", "[", ":", ",", "1", "]", "+", "sin_r", "*", "boxes1", "[", ":", ",", "3", "]", "\n", "crx", "=", "boxes1", "[", ":", ",", "0", "]", "+", "cos_r", "*", "boxes1", "[", ":", ",", "4", "]", "\n", "cry", "=", "boxes1", "[", ":", ",", "1", "]", "-", "sin_r", "*", "boxes1", "[", ":", ",", "3", "]", "\n", "ctx", "=", "boxes1", "[", ":", ",", "0", "]", "-", "cos_r", "*", "boxes1", "[", ":", ",", "4", "]", "\n", "cty", "=", "boxes1", "[", ":", ",", "1", "]", "-", "sin_r", "*", "boxes1", "[", ":", ",", "3", "]", "\n", "cbx", "=", "boxes1", "[", ":", ",", "0", "]", "+", "cos_r", "*", "boxes1", "[", ":", ",", "4", "]", "\n", "cby", "=", "boxes1", "[", ":", ",", "1", "]", "+", "sin_r", "*", "boxes1", "[", ":", ",", "3", "]", "\n", "boxes1_points", "=", "torch", ".", "stack", "(", "[", "clx", ",", "cly", ",", "crx", ",", "cry", ",", "ctx", ",", "cty", ",", "cbx", ",", "cby", "]", ",", "dim", "=", "1", ")", "\n", "boxes1HW", "=", "(", "boxes1", "[", ":", ",", "4", "]", "+", "boxes1", "[", ":", ",", "3", "]", ")", "/", "2", "\n", "\n", "\n", "sin_r", "=", "torch", ".", "sin", "(", "boxes2", "[", ":", ",", "2", "]", ")", "\n", "cos_r", "=", "torch", ".", "cos", "(", "boxes2", "[", ":", ",", "2", "]", ")", "\n", "clx", "=", "boxes2", "[", ":", ",", "0", "]", "-", "cos_r", "*", "boxes2", "[", ":", ",", "4", "]", "\n", "cly", "=", "boxes2", "[", ":", ",", "1", "]", "+", "sin_r", "*", "boxes2", "[", ":", ",", "3", "]", "\n", "crx", "=", "boxes2", "[", ":", ",", "0", "]", "+", "cos_r", "*", "boxes2", "[", ":", ",", "4", "]", "\n", "cry", "=", "boxes2", "[", ":", ",", "1", "]", "-", "sin_r", "*", "boxes2", "[", ":", ",", "3", "]", "\n", "ctx", "=", "boxes2", "[", ":", ",", "0", "]", "-", "cos_r", "*", "boxes2", "[", ":", ",", "4", "]", "\n", "cty", "=", "boxes2", "[", ":", ",", "1", "]", "-", "sin_r", "*", "boxes2", "[", ":", ",", "3", "]", "\n", "cbx", "=", "boxes2", "[", ":", ",", "0", "]", "+", "cos_r", "*", "boxes2", "[", ":", ",", "4", "]", "\n", "cby", "=", "boxes2", "[", ":", ",", "1", "]", "+", "sin_r", "*", "boxes2", "[", ":", ",", "3", "]", "\n", "boxes2_points", "=", "torch", ".", "stack", "(", "[", "clx", ",", "cly", ",", "crx", ",", "cry", ",", "ctx", ",", "cty", ",", "cbx", ",", "cby", "]", ",", "dim", "=", "1", ")", "\n", "boxes2HW", "=", "(", "boxes2", "[", ":", ",", "4", "]", "+", "boxes2", "[", ":", ",", "3", "]", ")", "/", "2", "\n", "#candHW,_ = torch.min(candidate_boxes[:,3:5],dim=1)", "\n", "#compute distances", "\n", "\n", "boxes1_points", "=", "boxes1_points", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ",", "8", ")", "\n", "boxes2_points", "=", "boxes2_points", "[", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ",", "8", ")", "\n", "boxes1HW", "=", "boxes1HW", "[", ":", ",", "None", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ")", "\n", "boxes2HW", "=", "boxes2HW", "[", "None", ",", ":", "]", ".", "expand", "(", "boxes1", ".", "size", "(", "0", ")", ",", "boxes2", ".", "size", "(", "0", ")", ")", "\n", "normalization", "=", "(", "boxes1HW", "+", "boxes2HW", ")", "/", "2.0", "\n", "\n", "deltas", "=", "boxes1_points", "-", "boxes2_points", "\n", "dist", "=", "(", "(", "\n", "torch", ".", "norm", "(", "deltas", "[", ":", ",", ":", ",", "0", ":", "2", "]", ",", "2", ",", "2", ")", "+", "\n", "torch", ".", "norm", "(", "deltas", "[", ":", ",", ":", ",", "2", ":", "4", "]", ",", "2", ",", "2", ")", "+", "\n", "torch", ".", "norm", "(", "deltas", "[", ":", ",", ":", ",", "4", ":", "6", "]", ",", "2", ",", "2", ")", "+", "\n", "torch", ".", "norm", "(", "deltas", "[", ":", ",", ":", ",", "6", ":", "8", "]", ",", "2", ",", "2", ")", "\n", ")", "/", "normalization", ")", "**", "2", "\n", "return", "dist", "*", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.AP_iou": [[503, 505], ["yolo_tools.AP_"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.AP_"], ["", "def", "AP_iou", "(", "target", ",", "pred", ",", "iou_thresh", ",", "numClasses", "=", "2", ",", "ignoreClasses", "=", "False", ",", "beforeCls", "=", "0", ",", "getClassAP", "=", "False", ")", ":", "\n", "    ", "return", "AP_", "(", "target", ",", "pred", ",", "iou_thresh", ",", "numClasses", ",", "ignoreClasses", ",", "beforeCls", ",", "allIOU", ",", "getClassAP", ")", "\n", "", "def", "AP_dist", "(", "target", ",", "pred", ",", "dist_thresh", ",", "numClasses", "=", "2", ",", "ignoreClasses", "=", "False", ",", "beforeCls", "=", "0", ",", "getClassAP", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.AP_dist": [[505, 507], ["yolo_tools.AP_"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.AP_"], ["", "def", "AP_dist", "(", "target", ",", "pred", ",", "dist_thresh", ",", "numClasses", "=", "2", ",", "ignoreClasses", "=", "False", ",", "beforeCls", "=", "0", ",", "getClassAP", "=", "False", ")", ":", "\n", "    ", "return", "AP_", "(", "target", ",", "pred", ",", "-", "dist_thresh", ",", "numClasses", ",", "ignoreClasses", ",", "beforeCls", ",", "allBoxDistNeg", ",", "getClassAP", ")", "\n", "", "def", "AP_", "(", "target", ",", "pred", ",", "iou_thresh", ",", "numClasses", ",", "ignoreClasses", ",", "beforeCls", ",", "getLoc", ",", "getClassAP", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.AP_": [[507, 691], ["range", "torch.argmax", "torch.argmax", "targetClasses_index[].expand", "predClasses_index[].expand", "validHits.max", "range", "torch.argmax", "range", "torch.max", "range", "allScores.append", "len", "target.size", "range", "len", "pred.size", "print", "torch.argmax.size", "torch.argmax.size", "torch.argmax.size", "torch.argmax.size", "allScores.append", "classScores[].append", "torch.argmax.size", "allScores.append", "classScores[].append", "torch.empty", "hits.float", "torch.argmax", "torch.ones", "range", "precisions.append", "recalls.append", "max", "clsTarg.size", "torch.empty.size", "clsTargInd.size", "yolo_tools.computeAP", "yolo_tools.computeAP", "yolo_tools.computeAP", "target.size", "len", "pred.size", "precisions.append", "recalls.append", "range", "pred.size", "predClasses.size", "predClasses.size", "allScores.append", "classScores[].append", "float", "len", "pred.size", "torch.argmax", "clsTargInd.any", "torch.empty.any", "clsPred.size", "clsTarg.size", "pdb.set_trace", "clsPred.size", "precisions.append", "recalls.append", "pred.size", "recalls.append", "predClasses.size", "pred.size", "notHitScores[].item", "notHitScores[].item", "float", "float", "pred.size", "pred.size", "max", "clsTarg.size", "torch.empty.any", "clsTargInd.any", "torch.empty.any", "precisions.append", "recalls.append", "precisions.append", "class_ap.append", "precisions.append", "class_ap.append", "pred[].item", "pred[].item", "float", "clsPred.size", "recalls.append", "precisions.append", "precisions.append", "recalls.append", "torch.argmax", "yolo_tools.allIOU", "yolo_tools.allBoxDistNeg"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.computeAP", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.computeAP", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.computeAP", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allIOU", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allBoxDistNeg"], ["", "def", "AP_", "(", "target", ",", "pred", ",", "iou_thresh", ",", "numClasses", ",", "ignoreClasses", ",", "beforeCls", ",", "getLoc", ",", "getClassAP", ")", ":", "\n", "#mAP=0.0", "\n", "#aps=[]", "\n", "    ", "precisions", "=", "[", "]", "\n", "recalls", "=", "[", "]", "\n", "\n", "#how many classes are there?", "\n", "if", "ignoreClasses", ":", "\n", "        ", "numClasses", "=", "1", "\n", "", "if", "len", "(", "target", ".", "size", "(", ")", ")", ">", "1", "and", "target", ".", "size", "(", "0", ")", ">", "0", ":", "\n", "#numClasses=target.size(1)-13", "\n", "        ", "pass", "\n", "", "elif", "pred", "is", "not", "None", "and", "len", "(", "pred", ".", "size", "(", ")", ")", ">", "1", "and", "pred", ".", "size", "(", "0", ")", ">", "0", ":", "\n", "#if there are no targets, we shouldn't be pred anything", "\n", "        ", "if", "ignoreClasses", ":", "\n", "#aps.append(0)", "\n", "            ", "ap", "=", "0.0", "\n", "precisions", ".", "append", "(", "0.0", ")", "\n", "recalls", ".", "append", "(", "1.0", ")", "\n", "", "else", ":", "\n", "#numClasses=pred.size(1)-6", "\n", "            ", "ap", "=", "0", "\n", "class_ap", "=", "[", "]", "\n", "for", "cls", "in", "range", "(", "numClasses", ")", ":", "\n", "                ", "if", "(", "torch", ".", "argmax", "(", "pred", "[", ":", ",", "beforeCls", "+", "6", ":", "]", ",", "dim", "=", "1", ")", "==", "cls", ")", ".", "any", "(", ")", ":", "\n", "#aps.append(0) #but we did for this class :(", "\n", "                    ", "ap", "+=", "0.0", "\n", "precisions", ".", "append", "(", "0.0", ")", "\n", "class_ap", ".", "append", "(", "0.0", ")", "\n", "", "else", ":", "\n", "#aps.append(1) #we didn't for this class :)", "\n", "                    ", "ap", "+=", "1.0", "\n", "precisions", ".", "append", "(", "1.0", ")", "\n", "class_ap", ".", "append", "(", "1.0", ")", "\n", "", "recalls", ".", "append", "(", "1.0", ")", "\n", "", "", "allPrec", "=", "0", "\n", "allRecall", "=", "1", "\n", "if", "getClassAP", ":", "\n", "            ", "return", "ap", "/", "numClasses", ",", "precisions", ",", "recalls", ",", "class_ap", "\n", "", "else", ":", "\n", "            ", "return", "ap", "/", "numClasses", ",", "precisions", ",", "recalls", ",", "allPrec", ",", "allRecall", "\n", "", "", "else", ":", "\n", "        ", "if", "getClassAP", ":", "\n", "            ", "return", "1.0", ",", "[", "1.0", "]", "*", "numClasses", ",", "[", "1.0", "]", "*", "numClasses", ",", "[", "1.0", "]", "*", "numClasses", "#we didn't for all classes :)", "\n", "", "else", ":", "\n", "            ", "return", "1.0", ",", "[", "1.0", "]", "*", "numClasses", ",", "[", "1.0", "]", "*", "numClasses", ",", "1.0", ",", "1.0", "\n", "\n", "", "", "allScores", "=", "[", "]", "\n", "classScores", "=", "[", "[", "]", "for", "i", "in", "range", "(", "numClasses", ")", "]", "\n", "allTruPos", "=", "0", "\n", "allPred", "=", "0", "\n", "allGT", "=", "0", "\n", "if", "pred", "is", "not", "None", "and", "len", "(", "pred", ".", "size", "(", ")", ")", ">", "1", "and", "pred", ".", "size", "(", "0", ")", ">", "0", ":", "\n", "#This is an alternate metric that computes AP of all classes together", "\n", "#Your only a hit if you have the same class", "\n", "        ", "allIOUs", "=", "getLoc", "(", "target", "[", ":", ",", "0", ":", "]", ",", "pred", "[", ":", ",", "1", ":", "]", ")", "\n", "allHits", "=", "allIOUs", ">", "iou_thresh", "\n", "\n", "#evalute hits to see if they're valid (matching class)", "\n", "targetClasses_index", "=", "torch", ".", "argmax", "(", "target", "[", ":", ",", "13", ":", "13", "+", "numClasses", "]", ",", "dim", "=", "1", ")", "\n", "predClasses", "=", "pred", "[", ":", ",", "beforeCls", "+", "6", ":", "beforeCls", "+", "6", "+", "numClasses", "]", "\n", "if", "predClasses", ".", "size", "(", "0", ")", "==", "0", "or", "predClasses", ".", "size", "(", "1", ")", "==", "0", ":", "\n", "            ", "print", "(", "'ERROR, zero sized predClasses: {}. pred is {}'", ".", "format", "(", "predClasses", ".", "size", "(", ")", ",", "pred", ".", "size", "(", ")", ")", ")", "\n", "", "predClasses_index", "=", "torch", ".", "argmax", "(", "predClasses", ",", "dim", "=", "1", ")", "\n", "targetClasses_index_ex", "=", "targetClasses_index", "[", ":", ",", "None", "]", ".", "expand", "(", "targetClasses_index", ".", "size", "(", "0", ")", ",", "predClasses_index", ".", "size", "(", "0", ")", ")", "\n", "predClasses_index_ex", "=", "predClasses_index", "[", "None", ",", ":", "]", ".", "expand", "(", "targetClasses_index", ".", "size", "(", "0", ")", ",", "predClasses_index", ".", "size", "(", "0", ")", ")", "\n", "matchingClasses", "=", "targetClasses_index_ex", "==", "predClasses_index_ex", "\n", "validHits", "=", "allHits", "*", "matchingClasses", "\n", "\n", "#add all the preds that didn't have a hit", "\n", "hasHit", ",", "_", "=", "validHits", ".", "max", "(", "dim", "=", "0", ")", "#which preds have hits", "\n", "notHitScores", "=", "pred", "[", "~", "hasHit", ",", "0", "]", "\n", "notHitClass", "=", "predClasses_index", "[", "~", "hasHit", "]", "\n", "for", "i", "in", "range", "(", "notHitScores", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "allScores", ".", "append", "(", "(", "notHitScores", "[", "i", "]", ".", "item", "(", ")", ",", "False", ")", ")", "\n", "cls", "=", "notHitClass", "[", "i", "]", "\n", "classScores", "[", "cls", "]", ".", "append", "(", "(", "notHitScores", "[", "i", "]", ".", "item", "(", ")", ",", "False", ")", ")", "\n", "\n", "# if something has multiple hits, it gets paired to the closest (with matching class)", "\n", "", "allIOUs", "[", "~", "validHits", "]", "-=", "9999999", "#Force these to be smaller", "\n", "maxValidHitIndexes", "=", "torch", ".", "argmax", "(", "allIOUs", ",", "dim", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "maxValidHitIndexes", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "if", "validHits", "[", "maxValidHitIndexes", "[", "i", "]", ",", "i", "]", ":", "\n", "                ", "allScores", ".", "append", "(", "(", "pred", "[", "i", ",", "0", "]", ".", "item", "(", ")", ",", "True", ")", ")", "\n", "#but now we've consumed this pred, so we'll zero its hit", "\n", "validHits", "[", "maxValidHitIndexes", "[", "i", "]", ",", "i", "]", "=", "0", "\n", "cls", "=", "predClasses_index", "[", "i", "]", "\n", "classScores", "[", "cls", "]", ".", "append", "(", "(", "pred", "[", "i", ",", "0", "]", ".", "item", "(", ")", ",", "True", ")", ")", "\n", "\n", "#add nan scores for missed targets", "\n", "", "", "gotHit", ",", "gotHitIndex", "=", "torch", ".", "max", "(", "validHits", ",", "dim", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "(", "gotHit", "==", "0", ")", ".", "sum", "(", ")", ")", ":", "\n", "            ", "allScores", ".", "append", "(", "(", "float", "(", "'nan'", ")", ",", "True", ")", ")", "\n", "cls", "=", "targetClasses_index", "[", "i", "]", "\n", "classScores", "[", "cls", "]", ".", "append", "(", "(", "float", "(", "'nan'", ")", ",", "True", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "allScores", ".", "append", "(", "(", "float", "(", "'nan'", ")", ",", "True", ")", ")", "\n", "classScores", "=", "[", "[", "(", "float", "(", "'nan'", ")", ",", "True", ")", "]", "]", "*", "numClasses", "\n", "\n", "\n", "", "if", "ignoreClasses", ":", "\n", "        ", "numClasses", "=", "1", "\n", "", "totalTruPos", "=", "0", "\n", "totalPred", "=", "0", "\n", "totalGT", "=", "0", "\n", "#by class", "\n", "#import pdb; pdb.set_trace()", "\n", "for", "cls", "in", "range", "(", "numClasses", ")", ":", "\n", "        ", "clsTargInd", "=", "target", "[", ":", ",", "cls", "+", "13", "]", "==", "1", "\n", "if", "pred", "is", "not", "None", "and", "len", "(", "pred", ".", "size", "(", ")", ")", ">", "1", "and", "pred", ".", "size", "(", "0", ")", ">", "0", ":", "\n", "#print(pred.size())", "\n", "            ", "clsPredInd", "=", "torch", ".", "argmax", "(", "pred", "[", ":", ",", "beforeCls", "+", "6", ":", "beforeCls", "+", "6", "+", "numClasses", "]", ",", "dim", "=", "1", ")", "==", "cls", "\n", "", "else", ":", "\n", "            ", "clsPredInd", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "", "if", "(", "ignoreClasses", "and", "pred", ".", "size", "(", "0", ")", ">", "0", ")", "or", "(", "clsTargInd", ".", "any", "(", ")", "and", "clsPredInd", ".", "any", "(", ")", ")", ":", "\n", "            ", "if", "ignoreClasses", ":", "\n", "                ", "clsTarg", "=", "target", "\n", "clsPred", "=", "pred", "\n", "", "else", ":", "\n", "                ", "clsTarg", "=", "target", "[", "clsTargInd", "]", "\n", "clsPred", "=", "pred", "[", "clsPredInd", "]", "\n", "", "clsIOUs", "=", "getLoc", "(", "clsTarg", "[", ":", ",", "0", ":", "]", ",", "clsPred", "[", ":", ",", "1", ":", "]", ")", "\n", "hits", "=", "clsIOUs", ">", "iou_thresh", "\n", "\n", "clsIOUs", "*=", "hits", ".", "float", "(", ")", "\n", "ps", "=", "torch", ".", "argmax", "(", "clsIOUs", ",", "dim", "=", "1", ")", "\n", "left_ps", "=", "torch", ".", "ones", "(", "clsPred", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "left_ps", "[", "ps", "]", "=", "0", "\n", "truePos", "=", "0", "\n", "for", "t", "in", "range", "(", "clsTarg", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "p", "=", "ps", "[", "t", "]", "\n", "if", "hits", "[", "t", ",", "p", "]", ":", "\n", "#scores.append( (clsPred[p,0],True) )", "\n", "#hits[t,p]=0", "\n", "                    ", "truePos", "+=", "1", "\n", "#else:", "\n", "#scores.append( (float('nan'),True) )", "\n", "\n", "", "", "left_conf", "=", "clsPred", "[", "left_ps", ",", "0", "]", "\n", "#for i in range(left_conf.size(0)):", "\n", "#scores.append( (left_conf[i],False) )", "\n", "\n", "#ap = computeAP(scores)", "\n", "#if ap is not None:", "\n", "#    aps.append(ap)", "\n", "\n", "precisions", ".", "append", "(", "truePos", "/", "max", "(", "clsPred", ".", "size", "(", "0", ")", ",", "truePos", ")", ")", "\n", "if", "precisions", "[", "-", "1", "]", ">", "1", ":", "\n", "                ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "recalls", ".", "append", "(", "truePos", "/", "clsTarg", ".", "size", "(", "0", ")", ")", "\n", "totalTruPos", "+=", "truePos", "\n", "totalPred", "+=", "max", "(", "clsPred", ".", "size", "(", "0", ")", ",", "truePos", ")", "\n", "totalGT", "+=", "clsTarg", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "totalPred", "+=", "clsPredInd", ".", "size", "(", "0", ")", "\n", "totalGT", "+=", "clsTargInd", ".", "size", "(", "0", ")", "\n", "if", "ignoreClasses", ":", "\n", "#no pred", "\n", "#aps.append(0)", "\n", "                ", "precisions", ".", "append", "(", "0", ")", "\n", "recalls", ".", "append", "(", "0", ")", "\n", "", "elif", "clsPredInd", ".", "any", "(", ")", "or", "clsTargInd", ".", "any", "(", ")", ":", "\n", "#aps.append(0)", "\n", "                ", "if", "clsPredInd", ".", "any", "(", ")", ":", "\n", "                    ", "recalls", ".", "append", "(", "1", ")", "\n", "precisions", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "precisions", ".", "append", "(", "0", ")", "\n", "recalls", ".", "append", "(", "0", ")", "\n", "", "", "else", ":", "\n", "#aps.append(1)", "\n", "                ", "precisions", ".", "append", "(", "1", ")", "\n", "recalls", ".", "append", "(", "1", ")", "\n", "\n", "", "", "", "allPrec", "=", "totalTruPos", "/", "totalPred", "if", "totalPred", ">", "0", "else", "1", "\n", "allRecall", "=", "totalTruPos", "/", "totalGT", "if", "totalGT", ">", "0", "else", "1", "\n", "if", "getClassAP", ":", "\n", "        ", "classAPs", "=", "[", "computeAP", "(", "scores", ")", "for", "scores", "in", "classScores", "]", "\n", "#for i in range(len(classAPs)):", "\n", "#    if classAPs[i] is None:", "\n", "#        classAPs[i]=1", "\n", "return", "computeAP", "(", "allScores", ")", ",", "precisions", ",", "recalls", ",", "classAPs", "\n", "", "else", ":", "\n", "        ", "return", "computeAP", "(", "allScores", ")", ",", "precisions", ",", "recalls", ",", "allPrec", ",", "allRecall", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.getTargIndexForPreds_iou": [[693, 695], ["yolo_tools.getTargIndexForPreds"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.getTargIndexForPreds"], ["", "", "def", "getTargIndexForPreds_iou", "(", "target", ",", "pred", ",", "iou_thresh", ",", "numClasses", ",", "beforeCls", "=", "0", ",", "hard_thresh", "=", "True", ",", "fixed", "=", "True", ")", ":", "\n", "    ", "return", "getTargIndexForPreds", "(", "target", ",", "pred", ",", "iou_thresh", ",", "numClasses", ",", "beforeCls", ",", "allIOU", ",", "hard_thresh", ",", "fixed", ")", "\n", "", "def", "getTargIndexForPreds_dist", "(", "target", ",", "pred", ",", "iou_thresh", ",", "numClasses", ",", "beforeCls", "=", "0", ",", "hard_thresh", "=", "True", ",", "fixed", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.getTargIndexForPreds_dist": [[695, 698], ["NotImplementedError", "yolo_tools.getTargIndexForPreds"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.getTargIndexForPreds"], ["", "def", "getTargIndexForPreds_dist", "(", "target", ",", "pred", ",", "iou_thresh", ",", "numClasses", ",", "beforeCls", "=", "0", ",", "hard_thresh", "=", "True", ",", "fixed", "=", "True", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "'Checking if preds with no intersection not implemented for dist'", ")", "\n", "return", "getTargIndexForPreds", "(", "target", ",", "pred", ",", "iou_thresh", ",", "numClasses", ",", "beforeCls", ",", "allBoxDistNeg", ",", "hard_thresh", ",", "fixed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.getTargIndexForPreds": [[699, 759], ["torch.LongTensor", "getLoc.max", "range", "pred.size", "len", "hits.float", "torch.empty.any", "hits.max", "target.size", "torch.empty", "torch.max", "len", "pred.size", "torch.argmax", "notClsTargInd.any", "notClsTargInd[].expand", "clsPredInd[].expand", "pred.size", "getLoc.size", "getLoc.size", "yolo_tools.allIOU", "yolo_tools.allBoxDistNeg"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allIOU", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allBoxDistNeg"], ["", "def", "getTargIndexForPreds", "(", "target", ",", "pred", ",", "iou_thresh", ",", "numClasses", ",", "beforeCls", ",", "getLoc", ",", "hard_thresh", ",", "fixed", ")", ":", "\n", "    ", "targIndex", "=", "torch", ".", "LongTensor", "(", "(", "pred", ".", "size", "(", "0", ")", ")", ")", "\n", "targIndex", "[", ":", "]", "=", "-", "1", "\n", "#mAP=0.0", "\n", "aps", "=", "[", "]", "\n", "precisions", "=", "[", "]", "\n", "recalls", "=", "[", "]", "\n", "\n", "if", "len", "(", "target", ".", "size", "(", ")", ")", "<=", "1", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n", "#by class", "\n", "#import pdb; pdb.set_trace()", "\n", "#first get all IOUs, then process by class", "\n", "", "allIOUs", "=", "getLoc", "(", "target", "[", ":", ",", "0", ":", "]", ",", "pred", "[", ":", ",", "1", ":", "]", ")", "\n", "#This isn't going to work of dist as 0 is perfect", "\n", "maxIOUsForPred", ",", "_", "=", "allIOUs", ".", "max", "(", "dim", "=", "0", ")", "\n", "predsWithNoIntersection", "=", "maxIOUsForPred", "==", "0", "\n", "\n", "hits", "=", "allIOUs", ">", "iou_thresh", "\n", "if", "hard_thresh", ":", "\n", "        ", "allIOUs", "*=", "hits", ".", "float", "(", ")", "\n", "\n", "\n", "", "for", "cls", "in", "range", "(", "numClasses", ")", ":", "\n", "        ", "scores", "=", "[", "]", "\n", "clsTargInd", "=", "target", "[", ":", ",", "cls", "+", "13", "]", "==", "1", "\n", "notClsTargInd", "=", "target", "[", ":", ",", "cls", "+", "13", "]", "!=", "1", "\n", "if", "len", "(", "pred", ".", "size", "(", ")", ")", ">", "1", "and", "pred", ".", "size", "(", "0", ")", ">", "0", ":", "\n", "#print(pred.size())", "\n", "#clsPredInd = torch.argmax(pred[:,beforeCls+6:],dim=1)==cls", "\n", "            ", "clsPredInd", "=", "torch", ".", "argmax", "(", "pred", "[", ":", ",", "-", "numClasses", ":", "]", ",", "dim", "=", "1", ")", "==", "cls", "\n", "", "else", ":", "\n", "            ", "clsPredInd", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "", "if", "clsPredInd", ".", "any", "(", ")", ":", "\n", "            ", "if", "notClsTargInd", ".", "any", "(", ")", "and", "fixed", ":", "\n", "                ", "notClsTargIndX", "=", "notClsTargInd", "[", ":", ",", "None", "]", ".", "expand", "(", "allIOUs", ".", "size", "(", ")", ")", "\n", "clsPredIndX", "=", "clsPredInd", "[", "None", ",", ":", "]", ".", "expand", "(", "allIOUs", ".", "size", "(", ")", ")", "\n", "allIOUs", "[", "notClsTargIndX", "*", "clsPredIndX", "]", "=", "0", "#set IOU for instances that are from different class than predicted to 0 (different class so no intersection)", "\n", "#allIOUs[notClsTargInd][:,clsPredInd]=0 this doesn't work for some reason", "\n", "", "val", ",", "targIndexes", "=", "torch", ".", "max", "(", "allIOUs", "[", ":", ",", "clsPredInd", "]", ",", "dim", "=", "0", ")", "\n", "#targIndexes has the target indexes for the predictions of cls", "\n", "\n", "#assign -1 index to places that don't really have a match", "\n", "#targIndexes[:] = torch.where(val==0,-torch.ones_like(targIndexes),targIndexes)", "\n", "targIndexes", "[", "val", "==", "0", "]", "=", "-", "1", "\n", "#targIndexes[notClsTargInd] = -1", "\n", "#assert(notClsTargInd[targIndexes].sum()==0)", "\n", "targIndex", "[", "clsPredInd", "]", "=", "targIndexes", "\n", "\n", "#debug", "\n", "#for i in range(targIndex.size(0)):", "\n", "#if targIndex[i]>=0:", "\n", "#         assert(torch.argmax(pred[i,-numClasses:],dim=0) == torch.argmax(target[targIndex[i],-numClasses:],dim=0))", "\n", "\n", "", "", "if", "hard_thresh", ":", "\n", "        ", "return", "targIndex", ",", "predsWithNoIntersection", "\n", "", "else", ":", "\n", "        ", "hits", ",", "_", "=", "hits", ".", "max", "(", "dim", "=", "0", ")", "#since we always take max pred", "\n", "return", "targIndex", ",", "hits", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.newGetTargIndexForPreds_iou": [[762, 794], ["hits.float", "getLoc", "pred.size", "yolo_tools.allIO_clipU", "yolo_tools.classIOU", "torch.max", "torch.IntTensor", "len", "target.size", "pred.size", "classIOU.size", "classIOU.size", "target.size"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allIO_clipU", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.classIOU"], ["", "", "def", "newGetTargIndexForPreds_iou", "(", "target", ",", "pred", ",", "iou_thresh", ",", "numClasses", ",", "train_targs", ")", ":", "\n", "    ", "if", "pred", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "if", "len", "(", "target", ".", "size", "(", ")", ")", "<=", "1", "or", "target", ".", "size", "(", "0", ")", "==", "0", "or", "pred", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "#first get all IOUs. These are already filtered with angle and class", "\n", "#allIOUs, allIO_clippedU = allPolyIOU_andClip(target,pred,class_sensitive=not train_targs) #clippedUnion, target is clipped horizontally to match pred. This filters for class matching", "\n", "", "assert", "(", "pred", ".", "size", "(", "1", ")", ">=", "numClasses", "+", "6", ")", "#might have num neighbors", "\n", "if", "train_targs", ":", "\n", "        ", "allIOUs", "=", "allIO_clipU", "(", "target", ",", "pred", "[", ":", ",", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "allIOUs", "=", "classIOU", "(", "target", ",", "pred", "[", ":", ",", "1", ":", "]", ",", "numClasses", ")", "\n", "", "hits", "=", "allIOUs", ">", "iou_thresh", "\n", "#overSeg_thresh = iou_thresh*1.05", "\n", "#overSegmented= (allIO_clippedU>overSeg_thresh)", "\n", "allIOUs", "*=", "hits", ".", "float", "(", ")", "\n", "#allIO_clippedU *= overSegmented", "\n", "\n", "#if train_targs:", "\n", "#    val,targIndex = torch.max(allIO_clippedU,dim=0)", "\n", "#else:", "\n", "if", "allIOUs", ".", "size", "(", "0", ")", ">", "0", "and", "allIOUs", ".", "size", "(", "1", ")", ">", "0", ":", "\n", "        ", "val", ",", "targIndex", "=", "torch", ".", "max", "(", "allIOUs", ",", "dim", "=", "0", ")", "\n", "targIndex", "[", "val", "==", "0", "]", "=", "-", "1", "#These don't have a match", "\n", "", "else", ":", "\n", "        ", "targIndex", "=", "torch", ".", "IntTensor", "(", "0", ")", "\n", "\n", "\n", "", "return", "targIndex", "\n", "allIOUs", ",", "allIO_clippedU", "=", "getLoc", "(", "target", "[", ":", ",", "0", ":", "]", ",", "pred", "[", ":", ",", "1", ":", "]", ")", "#clippedUnion, target is clipped horizontally to match pred", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.computeAP": [[796, 824], ["rank.sort", "range", "len", "len", "len", "ValueError", "math.isnan", "float", "rank.append", "math.ceil"], "function", ["None"], ["", "def", "computeAP", "(", "scores", ")", ":", "\n", "    ", "rank", "=", "[", "]", "\n", "missed", "=", "0", "\n", "for", "conf", ",", "rel", "in", "scores", ":", "\n", "        ", "if", "rel", ":", "\n", "            ", "if", "math", ".", "isnan", "(", "conf", ")", ":", "\n", "                ", "missed", "+=", "1", "\n", "", "else", ":", "\n", "                ", "better", "=", "0", "\n", "equal", "=", "-", "1", "# as we'll iterate over this instance here", "\n", "for", "conf2", ",", "rel2", "in", "scores", ":", "\n", "                    ", "if", "conf2", ">", "conf", ":", "\n", "                        ", "better", "+=", "1", "\n", "", "elif", "conf2", "==", "conf", ":", "\n", "                        ", "equal", "+=", "1", "\n", "", "", "rank", ".", "append", "(", "better", "+", "math", ".", "ceil", "(", "equal", "/", "2.0", ")", ")", "\n", "", "", "", "if", "len", "(", "rank", ")", "==", "0", ":", "\n", "        ", "if", "missed", ">", "0", ":", "\n", "            ", "return", "0", "\n", "", "return", "None", "\n", "", "rank", ".", "sort", "(", ")", "\n", "ap", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "rank", ")", ")", ":", "\n", "        ", "ap", "+=", "float", "(", "i", "+", "1", ")", "/", "(", "rank", "[", "i", "]", "+", "1", ")", "\n", "", "ap", "/=", "(", "len", "(", "rank", ")", "+", "missed", ")", "\n", "if", "ap", ">", "1.0001", ":", "\n", "        ", "raise", "ValueError", "(", "'ap greater than 1({}), from {}'", ".", "format", "(", "ap", ",", "scores", ")", ")", "\n", "", "return", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.group_pairing.getGTGroup": [[3, 19], ["collections.defaultdict", "collections.defaultdict.items"], "function", ["None"], ["def", "getGTGroup", "(", "targetIndexes", ",", "targetIndexToGroup", ")", ":", "\n", "    ", "ids", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "for", "t", "in", "targetIndexes", ":", "\n", "        ", "gtId", "=", "targetIndexToGroup", "[", "t", "]", "\n", "ids", "[", "gtId", "]", "+=", "1", "\n", "\n", "", "bestId", "=", "-", "1", "\n", "bestCount", "=", "-", "1", "\n", "for", "gtId", ",", "count", "in", "ids", ".", "items", "(", ")", ":", "\n", "        ", "if", "count", "==", "bestCount", ":", "\n", "            ", "bestId", "=", "-", "1", "\n", "", "elif", "count", ">", "bestCount", ":", "\n", "            ", "bestId", "=", "gtId", "\n", "bestCount", "=", "count", "\n", "\n", "", "", "return", "bestId", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.group_pairing.pure": [[22, 31], ["set"], "function", ["None"], ["", "def", "pure", "(", "targetIndexes", ",", "targetIndexToGroup", ")", ":", "\n", "    ", "test", "=", "set", "(", ")", "\n", "gtId", "=", "None", "\n", "for", "t", "in", "targetIndexes", ":", "\n", "        ", "if", "gtId", "is", "None", ":", "\n", "            ", "gtId", "=", "targetIndexToGroup", "[", "t", "]", "\n", "", "elif", "gtId", "!=", "targetIndexToGroup", "[", "t", "]", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.group_pairing.purity": [[32, 40], ["collections.defaultdict", "len", "max", "len", "collections.defaultdict.values"], "function", ["None"], ["", "def", "purity", "(", "targetIndexes", ",", "targetIndexToGroup", ")", ":", "\n", "    ", "if", "len", "(", "targetIndexes", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "groups", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "for", "t", "in", "targetIndexes", ":", "\n", "        ", "gtId", "=", "targetIndexToGroup", "[", "t", "]", "\n", "groups", "[", "gtId", "]", "+=", "1", "\n", "", "return", "max", "(", "groups", ".", "values", "(", ")", ")", "/", "len", "(", "targetIndexes", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.funsd_annotations.combineLine": [[5, 42], ["len", "numpy.empty", "min", "max", "min", "max", "bbs.append", "trans.append"], "function", ["None"], ["def", "combineLine", "(", "classMap", ",", "line", ",", "bbs", ",", "trans", ",", "lineTrans", ",", "s", ",", "label", ")", ":", "\n", "    ", "numClasses", "=", "len", "(", "classMap", ")", "\n", "bb", "=", "np", ".", "empty", "(", "8", "+", "8", "+", "numClasses", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "lXL", "=", "min", "(", "[", "w", "[", "0", "]", "for", "w", "in", "line", "]", ")", "\n", "rXL", "=", "max", "(", "[", "w", "[", "2", "]", "for", "w", "in", "line", "]", ")", "\n", "tYL", "=", "min", "(", "[", "w", "[", "1", "]", "for", "w", "in", "line", "]", ")", "\n", "bYL", "=", "max", "(", "[", "w", "[", "3", "]", "for", "w", "in", "line", "]", ")", "\n", "bb", "[", "0", "]", "=", "lXL", "*", "s", "\n", "bb", "[", "1", "]", "=", "tYL", "*", "s", "\n", "bb", "[", "2", "]", "=", "rXL", "*", "s", "\n", "bb", "[", "3", "]", "=", "tYL", "*", "s", "\n", "bb", "[", "4", "]", "=", "rXL", "*", "s", "\n", "bb", "[", "5", "]", "=", "bYL", "*", "s", "\n", "bb", "[", "6", "]", "=", "lXL", "*", "s", "\n", "bb", "[", "7", "]", "=", "bYL", "*", "s", "\n", "#we add these for conveince to crop BBs within window", "\n", "bb", "[", "8", "]", "=", "s", "*", "lXL", "\n", "bb", "[", "9", "]", "=", "s", "*", "(", "tYL", "+", "bYL", ")", "/", "2.0", "\n", "bb", "[", "10", "]", "=", "s", "*", "rXL", "\n", "bb", "[", "11", "]", "=", "s", "*", "(", "tYL", "+", "bYL", ")", "/", "2.0", "\n", "bb", "[", "12", "]", "=", "s", "*", "(", "lXL", "+", "rXL", ")", "/", "2.0", "\n", "bb", "[", "13", "]", "=", "s", "*", "tYL", "\n", "bb", "[", "14", "]", "=", "s", "*", "(", "rXL", "+", "lXL", ")", "/", "2.0", "\n", "bb", "[", "15", "]", "=", "s", "*", "bYL", "\n", "\n", "bb", "[", "16", ":", "]", "=", "0", "\n", "bb", "[", "classMap", "[", "label", "]", "]", "=", "1", "\n", "#if boxinfo['label']=='header':", "\n", "#    bb[16]=1", "\n", "#elif boxinfo['label']=='question':", "\n", "#    bb[17]=1", "\n", "#elif boxinfo['label']=='answer':", "\n", "#    bb[18]=1", "\n", "#elif boxinfo['label']=='other':", "\n", "#    bb[19]=1", "\n", "bbs", ".", "append", "(", "bb", ")", "\n", "trans", ".", "append", "(", "' '", ".", "join", "(", "lineTrans", ")", ")", "\n", "#nex = j<len(boxes)-1", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.funsd_annotations.createLines": [[48, 122], ["len", "collections.defaultdict", "len", "enumerate", "enumerate", "numpy.stack", "len", "funsd_annotations.combineLine", "len", "groups.append", "range", "len", "list", "[].append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "range", "len", "line.append", "lineTrans.append", "line.append", "lineTrans.append", "range", "[].append", "len", "funsd_annotations.combineLine", "[].append", "print", "print", "print", "pdb.set_trace"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.funsd_annotations.combineLine", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.funsd_annotations.combineLine"], ["", "def", "createLines", "(", "annotations", ",", "classMap", ",", "scale", ")", ":", "\n", "    ", "numClasses", "=", "len", "(", "classMap", ")", "\n", "boxes", "=", "annotations", "[", "'form'", "]", "\n", "origIdToIndexes", "=", "{", "}", "\n", "annotations", "[", "'linking'", "]", "=", "defaultdict", "(", "list", ")", "\n", "groups", "=", "[", "]", "\n", "bbs", "=", "[", "]", "\n", "trans", "=", "[", "]", "\n", "line", "=", "[", "]", "\n", "lineTrans", "=", "[", "]", "\n", "\n", "numBBs", "=", "len", "(", "boxes", ")", "\n", "#new line", "\n", "line", "=", "[", "]", "\n", "lineTrans", "=", "[", "]", "\n", "for", "j", ",", "boxinfo", "in", "enumerate", "(", "boxes", ")", ":", "\n", "        ", "prev", "=", "False", "\n", "line", "=", "[", "]", "\n", "lineTrans", "=", "[", "]", "\n", "startIdx", "=", "len", "(", "bbs", ")", "\n", "for", "word", "in", "boxinfo", "[", "'words'", "]", ":", "\n", "            ", "lX", ",", "tY", ",", "rX", ",", "bY", "=", "word", "[", "'box'", "]", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "                ", "line", ".", "append", "(", "word", "[", "'box'", "]", "+", "[", "(", "lX", "+", "rX", ")", "/", "2", ",", "(", "tY", "+", "bY", ")", "/", "2", "]", ")", "\n", "lineTrans", ".", "append", "(", "word", "[", "'text'", "]", ")", "\n", "", "else", ":", "\n", "                ", "difX", "=", "lX", "-", "line", "[", "-", "1", "]", "[", "2", "]", "\n", "difY", "=", "(", "tY", "+", "bY", ")", "/", "2", "-", "line", "[", "-", "1", "]", "[", "5", "]", "\n", "pW", "=", "line", "[", "-", "1", "]", "[", "2", "]", "-", "line", "[", "-", "1", "]", "[", "0", "]", "\n", "pH", "=", "line", "[", "-", "1", "]", "[", "3", "]", "-", "line", "[", "-", "1", "]", "[", "1", "]", "\n", "if", "difX", "<", "-", "pW", "*", "0.25", "or", "difY", ">", "pH", "*", "0.75", ":", "\n", "                    ", "combineLine", "(", "classMap", ",", "line", ",", "bbs", ",", "trans", ",", "lineTrans", ",", "scale", ",", "boxinfo", "[", "'label'", "]", ")", "\n", "line", "=", "[", "]", "\n", "lineTrans", "=", "[", "]", "\n", "", "line", ".", "append", "(", "word", "[", "'box'", "]", "+", "[", "(", "lX", "+", "rX", ")", "/", "2", ",", "(", "tY", "+", "bY", ")", "/", "2", "]", ")", "\n", "lineTrans", ".", "append", "(", "word", "[", "'text'", "]", ")", "\n", "", "", "combineLine", "(", "classMap", ",", "line", ",", "bbs", ",", "trans", ",", "lineTrans", ",", "scale", ",", "boxinfo", "[", "'label'", "]", ")", "\n", "endIdx", "=", "len", "(", "bbs", ")", "\n", "groups", ".", "append", "(", "list", "(", "range", "(", "startIdx", ",", "endIdx", ")", ")", ")", "\n", "for", "idx", "in", "range", "(", "startIdx", ",", "endIdx", "-", "1", ")", ":", "\n", "            ", "annotations", "[", "'linking'", "]", "[", "idx", "]", ".", "append", "(", "idx", "+", "1", ")", "#we link them in read order. The group supervises dense connections. Read order is how the NAF dataset is labeled.", "\n", "", "origIdToIndexes", "[", "j", "]", "=", "(", "startIdx", ",", "endIdx", "-", "1", ")", "\n", "\n", "", "for", "j", ",", "boxinfo", "in", "enumerate", "(", "boxes", ")", ":", "\n", "        ", "for", "linkId", "in", "boxinfo", "[", "'linking'", "]", ":", "\n", "            ", "linkId", "=", "linkId", "[", "0", "]", "if", "linkId", "[", "1", "]", "==", "j", "else", "linkId", "[", "1", "]", "\n", "j_first_x", "=", "np", ".", "mean", "(", "bbs", "[", "origIdToIndexes", "[", "j", "]", "[", "0", "]", "]", "[", "0", ":", "8", ":", "2", "]", ")", "\n", "j_first_y", "=", "np", ".", "mean", "(", "bbs", "[", "origIdToIndexes", "[", "j", "]", "[", "0", "]", "]", "[", "1", ":", "8", ":", "2", "]", ")", "\n", "link_first_x", "=", "np", ".", "mean", "(", "bbs", "[", "origIdToIndexes", "[", "linkId", "]", "[", "0", "]", "]", "[", "0", ":", "8", ":", "2", "]", ")", "\n", "link_first_y", "=", "np", ".", "mean", "(", "bbs", "[", "origIdToIndexes", "[", "linkId", "]", "[", "0", "]", "]", "[", "1", ":", "8", ":", "2", "]", ")", "\n", "j_last_x", "=", "np", ".", "mean", "(", "bbs", "[", "origIdToIndexes", "[", "j", "]", "[", "1", "]", "]", "[", "0", ":", "8", ":", "2", "]", ")", "\n", "j_last_y", "=", "np", ".", "mean", "(", "bbs", "[", "origIdToIndexes", "[", "j", "]", "[", "1", "]", "]", "[", "1", ":", "8", ":", "2", "]", ")", "\n", "link_last_x", "=", "np", ".", "mean", "(", "bbs", "[", "origIdToIndexes", "[", "linkId", "]", "[", "1", "]", "]", "[", "0", ":", "8", ":", "2", "]", ")", "\n", "link_last_y", "=", "np", ".", "mean", "(", "bbs", "[", "origIdToIndexes", "[", "linkId", "]", "[", "1", "]", "]", "[", "1", ":", "8", ":", "2", "]", ")", "\n", "\n", "above", "=", "link_last_y", "<=", "j_first_y", "+", "2", "\n", "below", "=", "link_first_y", ">=", "j_last_y", "-", "2", "\n", "left", "=", "link_last_x", "<=", "j_first_x", "+", "2", "\n", "right", "=", "link_first_x", ">=", "j_last_x", "-", "2", "\n", "if", "above", "or", "left", ":", "\n", "                ", "annotations", "[", "'linking'", "]", "[", "origIdToIndexes", "[", "j", "]", "[", "0", "]", "]", ".", "append", "(", "origIdToIndexes", "[", "linkId", "]", "[", "1", "]", ")", "\n", "", "elif", "below", "or", "right", ":", "\n", "                ", "annotations", "[", "'linking'", "]", "[", "origIdToIndexes", "[", "j", "]", "[", "1", "]", "]", ".", "append", "(", "origIdToIndexes", "[", "linkId", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"!!!!!!!!\"", ")", "\n", "print", "(", "\"Print odd para align, unhandeled case.\"", ")", "\n", "print", "(", "\"trans:{}, ({},{}), trans:{}, ({},{})   , trans:{}, ({},{}), trans:{}, ({},{})\"", ".", "format", "(", "trans", "[", "origIdToIndexes", "[", "j", "]", "[", "0", "]", "]", ",", "j_first_x", ",", "j_first_y", ",", "trans", "[", "origIdToIndexes", "[", "j", "]", "[", "1", "]", "]", ",", "j_last_x", ",", "j_last_y", ",", "trans", "[", "origIdToIndexes", "[", "linkId", "]", "[", "0", "]", "]", ",", "link_first_x", ",", "link_first_y", ",", "trans", "[", "origIdToIndexes", "[", "linkId", "]", "[", "1", "]", "]", ",", "link_last_x", ",", "link_last_y", ")", ")", "\n", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "#annotations['linking'][origIdToIndexes[j][1]].append(origIdToIndexes[linkId][0])", "\n", "", "", "", "numNeighbors", "=", "[", "len", "(", "annotations", "[", "'linking'", "]", "[", "index", "]", ")", "for", "index", "in", "range", "(", "len", "(", "bbs", ")", ")", "]", "\n", "bbs", "=", "np", ".", "stack", "(", "bbs", ",", "axis", "=", "0", ")", "\n", "bbs", "=", "bbs", "[", "None", ",", "...", "]", "#add batch dim", "\n", "\n", "return", "bbs", ",", "numNeighbors", ",", "trans", ",", "groups", "\n", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.crop_transform.CropTransform.__init__": [[275, 283], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_params", ")", ":", "\n", "        ", "crop_size", "=", "crop_params", "[", "'crop_size'", "]", "\n", "self", ".", "random_crop_params", "=", "crop_params", "\n", "if", "'pad'", "in", "crop_params", ":", "\n", "            ", "pad_by", "=", "crop_params", "[", "'pad'", "]", "\n", "", "else", ":", "\n", "            ", "pad_by", "=", "crop_size", "//", "2", "\n", "", "self", ".", "pad_params", "=", "(", "(", "pad_by", ",", "pad_by", ")", ",", "(", "pad_by", ",", "pad_by", ")", ",", "(", "0", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.crop_transform.CropTransform.__call__": [[284, 344], ["numpy.pad", "line_gts.items", "point_gts.items", "crop_transform.generate_random_crop", "line_gts.items", "point_gts.items", "numpy.pad"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.crop_transform.generate_random_crop"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "org_img", "=", "sample", "[", "'img'", "]", "\n", "line_gts", "=", "sample", "[", "'line_gt'", "]", "\n", "point_gts", "=", "sample", "[", "'point_gt'", "]", "\n", "pixel_gt", "=", "sample", "[", "'pixel_gt'", "]", "\n", "\n", "#pad out to allow random samples to take space off of the page", "\n", "##tic=timeit.default_timer()", "\n", "#org_img = np.pad(org_img, self.pad_params, 'mean')", "\n", "org_img", "=", "np", ".", "pad", "(", "org_img", ",", "self", ".", "pad_params", ",", "'constant'", ")", "\n", "if", "pixel_gt", "is", "not", "None", ":", "\n", "            ", "pixel_gt", "=", "np", ".", "pad", "(", "pixel_gt", ",", "self", ".", "pad_params", ",", "'constant'", ")", "\n", "##print('pad: {}'.format(timeit.default_timer()-##tic))", "\n", "\n", "##tic=timeit.default_timer()", "\n", "", "j", "=", "0", "\n", "#pad the points accordingly", "\n", "for", "name", ",", "gt", "in", "line_gts", ".", "items", "(", ")", ":", "\n", "#if np.isnan(gt).any():", "\n", "#    print('gt has nan, {}'.format(name))", "\n", "            ", "gt", "[", ":", ",", ":", ",", "0", "]", "=", "gt", "[", ":", ",", ":", ",", "0", "]", "+", "self", ".", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "gt", "[", ":", ",", ":", ",", "1", "]", "=", "gt", "[", ":", ",", ":", ",", "1", "]", "+", "self", ".", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "\n", "gt", "[", ":", ",", ":", ",", "2", "]", "=", "gt", "[", ":", ",", ":", ",", "2", "]", "+", "self", ".", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "gt", "[", ":", ",", ":", ",", "3", "]", "=", "gt", "[", ":", ",", ":", ",", "3", "]", "+", "self", ".", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "", "for", "name", ",", "gt", "in", "point_gts", ".", "items", "(", ")", ":", "\n", "            ", "gt", "[", ":", ",", ":", ",", "0", "]", "=", "gt", "[", ":", ",", ":", ",", "0", "]", "+", "self", ".", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "gt", "[", ":", ",", ":", ",", "1", "]", "=", "gt", "[", ":", ",", ":", ",", "1", "]", "+", "self", ".", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "\n", "", "crop_params", ",", "org_img", ",", "pixel_gt", ",", "line_gt_match", ",", "point_gt_match", ",", "_", ",", "_", ",", "cropPoint", "=", "generate_random_crop", "(", "org_img", ",", "pixel_gt", ",", "line_gts", ",", "point_gts", ",", "self", ".", "random_crop_params", ")", "\n", "#print(crop_params)", "\n", "#print(gt_match)", "\n", "\n", "##tic=timeit.default_timer()", "\n", "new_line_gts", "=", "{", "}", "\n", "for", "name", ",", "gt", "in", "line_gts", ".", "items", "(", ")", ":", "\n", "            ", "gt", "=", "gt", "[", "line_gt_match", "[", "name", "]", "]", "[", "None", ",", "...", "]", "#add batch dim (?)", "\n", "gt", "[", "...", ",", "0", "]", "=", "gt", "[", "...", ",", "0", "]", "-", "crop_params", "[", "'dim1'", "]", "[", "0", "]", "\n", "gt", "[", "...", ",", "1", "]", "=", "gt", "[", "...", ",", "1", "]", "-", "crop_params", "[", "'dim0'", "]", "[", "0", "]", "\n", "\n", "gt", "[", "...", ",", "2", "]", "=", "gt", "[", "...", ",", "2", "]", "-", "crop_params", "[", "'dim1'", "]", "[", "0", "]", "\n", "gt", "[", "...", ",", "3", "]", "=", "gt", "[", "...", ",", "3", "]", "-", "crop_params", "[", "'dim0'", "]", "[", "0", "]", "\n", "new_line_gts", "[", "name", "]", "=", "gt", "\n", "", "new_point_gts", "=", "{", "}", "\n", "for", "name", ",", "gt", "in", "point_gts", ".", "items", "(", ")", ":", "\n", "            ", "gt", "=", "gt", "[", "point_gt_match", "[", "name", "]", "]", "[", "None", ",", "...", "]", "#add batch dim (?)", "\n", "gt", "[", "...", ",", "0", "]", "=", "gt", "[", "...", ",", "0", "]", "-", "crop_params", "[", "'dim1'", "]", "[", "0", "]", "\n", "gt", "[", "...", ",", "1", "]", "=", "gt", "[", "...", ",", "1", "]", "-", "crop_params", "[", "'dim0'", "]", "[", "0", "]", "\n", "new_point_gts", "[", "name", "]", "=", "gt", "\n", "##print('pad-minus: {}'.format(timeit.default_timer()-##tic))", "\n", "\n", "#if 'start' in name:", "\n", "#    for j in range(min(10,gt.size(1))):", "\n", "#        ##print('a {},{}   {},{}'.format(gt[:,j,0],gt[:,j,1],gt[:,j,2],gt[:,j,3]))", "\n", "\n", "", "return", "{", "\n", "\"img\"", ":", "org_img", ",", "\n", "\"line_gt\"", ":", "new_line_gts", ",", "\n", "\"point_gt\"", ":", "new_point_gts", ",", "\n", "\"pixel_gt\"", ":", "pixel_gt", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.crop_transform.CropBoxTransform.__init__": [[346, 373], ["type", "min"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_params", ",", "rotate", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_params", "[", "'crop_size'", "]", "\n", "if", "type", "(", "self", ".", "crop_size", ")", "is", "int", ":", "\n", "            ", "self", ".", "crop_size", "=", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "", "self", ".", "random_crop_params", "=", "crop_params", "\n", "if", "'pad'", "in", "crop_params", ":", "\n", "            ", "pad_by", "=", "crop_params", "[", "'pad'", "]", "\n", "", "else", ":", "\n", "            ", "pad_by", "=", "min", "(", "self", ".", "crop_size", ")", "//", "2", "\n", "", "self", ".", "pad_params", "=", "(", "(", "pad_by", ",", "pad_by", ")", ",", "(", "pad_by", ",", "pad_by", ")", ",", "(", "0", ",", "0", ")", ")", "\n", "#self.all_bbs=all_bbs", "\n", "if", "rotate", "or", "'rot_degree_std_dev'", "in", "crop_params", ":", "\n", "            ", "self", ".", "rotate", "=", "True", "\n", "if", "'rot_degree_std_dev'", "in", "crop_params", ":", "\n", "                ", "self", ".", "degree_std_dev", "=", "crop_params", "[", "'rot_degree_std_dev'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "degree_std_dev", "=", "1", "\n", "\n", "", "if", "'rot_freq'", "in", "crop_params", ":", "\n", "                ", "self", ".", "rot_freq", "=", "crop_params", "[", "'rot_freq'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "rot_freq", "=", "0.99", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "rotate", "=", "False", "\n", "self", ".", "degree_std_dev", "=", "0", "\n", "", "self", ".", "flip_horz", "=", "crop_params", "[", "'flip_horz'", "]", "if", "'flip_horz'", "in", "crop_params", "else", "False", "\n", "self", ".", "flip_vert", "=", "crop_params", "[", "'flip_vert'", "]", "if", "'flip_vert'", "in", "crop_params", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.crop_transform.CropBoxTransform.__call__": [[375, 606], ["crop_transform.generate_random_crop", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array.dot", "numpy.array.dot", "numpy.array.dot", "utils.warpAffine", "numpy.pad", "numpy.pad", "numpy.pad", "point_gts.items", "line_gts.items", "point_gts.items", "line_gts.items", "numpy.random.uniform", "numpy.random.normal", "numpy.array", "numpy.array.dot", "numpy.array.dot", "numpy.array", "numpy.array.dot", "numpy.array.dot", "numpy.array.dot", "len", "utils.warpAffine", "numpy.reshape", "numpy.append", "numpy.reshape", "line_gts.items", "point_gts.items", "numpy.reshape", "numpy.append", "numpy.reshape", "numpy.random.uniform", "numpy.random.uniform", "len", "numpy.ones", "np.array.dot.dot", "numpy.ones", "np.array.dot.dot", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "numpy.reshape", "numpy.append", "numpy.reshape", "numpy.append", "math.sin", "math.sin", "numpy.ones", "np.array.dot.dot", "numpy.ones", "np.array.dot.dot"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.crop_transform.generate_random_crop", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.warpAffine", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.warpAffine"], ["", "def", "__call__", "(", "self", ",", "sample", ",", "cropPoint", "=", "None", ")", ":", "\n", "        ", "org_img", "=", "sample", "[", "'img'", "]", "\n", "bb_gt", "=", "sample", "[", "'bb_gt'", "]", "\n", "\n", "##DEBUG##", "\n", "#for i in range(bb_gt.shape[1]):", "\n", "#    tttx = (bb_gt[0,i,0]+bb_gt[0,i,2])/2", "\n", "#    ttty = (bb_gt[0,i,1]+bb_gt[0,i,3])/2", "\n", "#    bbbx = (bb_gt[0,i,4]+bb_gt[0,i,6])/2", "\n", "#    bbby = (bb_gt[0,i,5]+bb_gt[0,i,7])/2", "\n", "#    lllx = (bb_gt[0,i,0]+bb_gt[0,i,6])/2", "\n", "#    llly = (bb_gt[0,i,1]+bb_gt[0,i,7])/2", "\n", "#    rrrx = (bb_gt[0,i,4]+bb_gt[0,i,2])/2", "\n", "#    rrry = (bb_gt[0,i,5]+bb_gt[0,i,3])/2", "\n", "#    hhh = math.sqrt((tttx-bbbx)**2 + (ttty-bbby)**2)", "\n", "#    www = math.sqrt((lllx-rrrx)**2 + (llly-rrry)**2)", "\n", "#    #print('before {}: {} = {}, {}'.format(i,hhh/www,hhh,www))", "\n", "#    assert(hhh/www<5)", "\n", "##DEBUG##", "\n", "\n", "aux_str", "=", "'bb_auxs'", "\n", "if", "'bb_ids'", "in", "sample", ":", "\n", "            ", "aux_str", "=", "'bb_ids'", "\n", "", "bb_auxs", "=", "sample", "[", "aux_str", "]", "if", "aux_str", "in", "sample", "else", "None", "\n", "line_gts", "=", "sample", "[", "'line_gt'", "]", "if", "'line_gt'", "in", "sample", "else", "None", "\n", "point_gts", "=", "sample", "[", "'point_gt'", "]", "if", "'point_gt'", "in", "sample", "else", "None", "\n", "pixel_gt", "=", "sample", "[", "'pixel_gt'", "]", "if", "'pixel_gt'", "in", "sample", "else", "None", "\n", "query_bb", "=", "sample", "[", "'query_bb'", "]", "if", "'query_bb'", "in", "sample", "else", "None", "\n", "\n", "#rotation", "\n", "if", "self", ".", "rotate", "or", "self", ".", "flip_horz", "or", "self", ".", "flip_vert", ":", "\n", "            ", "if", "self", ".", "rot_freq", ">", "np", ".", "random", ".", "uniform", "(", ")", ":", "\n", "                ", "amount", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "self", ".", "degree_std_dev", ")", "\n", "amount", "=", "math", ".", "pi", "*", "amount", "/", "180", "\n", "", "else", ":", "\n", "                ", "amount", "=", "0", "\n", "#M = img_f.getRotationMatrix2D((org_img.shape[1]/2,org_img.shape[0]/2),amount,1)", "\n", "", "rot", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "amount", ")", ",", "-", "math", ".", "sin", "(", "amount", ")", ",", "0", "]", ",", "\n", "[", "math", ".", "sin", "(", "amount", ")", ",", "math", ".", "cos", "(", "amount", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "rrot", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "-", "amount", ")", ",", "-", "math", ".", "sin", "(", "-", "amount", ")", ",", "0", "]", ",", "\n", "[", "math", ".", "sin", "(", "-", "amount", ")", ",", "math", ".", "cos", "(", "-", "amount", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "center", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "-", "org_img", ".", "shape", "[", "1", "]", "/", "2", "]", ",", "\n", "[", "0", ",", "1", ",", "-", "org_img", ".", "shape", "[", "0", "]", "/", "2", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "#center = np.array([[1,0,-org_img.shape[1]/2],[0,1,-org_img.shape[0]/2]])", "\n", "uncenter", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "org_img", ".", "shape", "[", "1", "]", "/", "2", "]", ",", "\n", "[", "0", ",", "1", ",", "org_img", ".", "shape", "[", "0", "]", "/", "2", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "M", "=", "center", "\n", "rM", "=", "center", "\n", "if", "self", ".", "flip_horz", "and", "np", ".", "random", ".", "uniform", "(", ")", "<", "0.33", ":", "\n", "                ", "assert", "(", "False", ")", "#this is broken, I don't know why", "\n", "flipH", "=", "np", ".", "array", "(", "[", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "M", "=", "flipH", ".", "dot", "(", "M", ")", "\n", "rM", "=", "flipH", ".", "dot", "(", "rM", ")", "\n", "", "if", "self", ".", "flip_vert", "and", "np", ".", "random", ".", "uniform", "(", ")", "<", "0.33", ":", "\n", "#M[0:2,1]*=-1", "\n", "                ", "flipV", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "-", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "M", "=", "flipV", ".", "dot", "(", "M", ")", "\n", "rM", "=", "flipV", ".", "dot", "(", "rM", ")", "\n", "", "M", "=", "rot", ".", "dot", "(", "M", ")", "\n", "rM", "=", "rrot", ".", "dot", "(", "rM", ")", "\n", "#M=center", "\n", "M", "=", "uncenter", ".", "dot", "(", "M", ")", "\n", "M", "=", "M", "[", ":", "2", "]", "#opencv didn't want 3x3", "\n", "rM", "=", "uncenter", ".", "dot", "(", "rM", ")", "[", ":", "2", "]", "\n", "#rotate image", "\n", "org_img", "=", "img_f", ".", "warpAffine", "(", "org_img", ",", "M", ",", "(", "org_img", ".", "shape", "[", "0", "]", ",", "org_img", ".", "shape", "[", "1", "]", ")", ")", "\n", "if", "len", "(", "org_img", ".", "shape", ")", "==", "2", ":", "\n", "                ", "org_img", "=", "org_img", "[", ":", ",", ":", ",", "None", "]", "\n", "", "if", "pixel_gt", "is", "not", "None", ":", "\n", "                ", "pixel_gt", "=", "img_f", ".", "warpAffine", "(", "pixel_gt", ",", "M", ",", "(", "pixel_gt", ".", "shape", "[", "1", "]", ",", "pixel_gt", ".", "shape", "[", "0", "]", ")", ")", "\n", "if", "len", "(", "pixel_gt", ".", "shape", ")", "==", "2", ":", "\n", "                    ", "pixel_gt", "=", "pixel_gt", "[", ":", ",", ":", ",", "None", "]", "\n", "#rotate points", "\n", "", "", "if", "bb_gt", "is", "not", "None", ":", "\n", "                ", "points", "=", "np", ".", "reshape", "(", "bb_gt", "[", "0", ",", ":", ",", "0", ":", "16", "]", ",", "(", "-", "1", ",", "2", ")", ")", "#reshape all box points to vector of x,y pairs", "\n", "points", "=", "np", ".", "append", "(", "points", ",", "np", ".", "ones", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "#append 1 to make homogeneous (x,y,1)", "\n", "#I HAVE NO IDEA WHY I NEED THE OPPOSITE ROTATION HERE", "\n", "points", "=", "rM", ".", "dot", "(", "points", ".", "T", ")", ".", "T", "#multiply rot matrix", "\n", "bb_gt", "[", "0", ",", ":", ",", "0", ":", "16", "]", "=", "np", ".", "reshape", "(", "points", ",", "(", "-", "1", ",", "16", ")", ")", "#reshape back to single vector for each bb", "\n", "\n", "", "if", "line_gts", "is", "not", "None", ":", "\n", "                ", "for", "name", ",", "gt", "in", "line_gts", ".", "items", "(", ")", ":", "\n", "                    ", "if", "gt", "is", "not", "None", ":", "\n", "                        ", "points", "=", "np", ".", "reshape", "(", "gt", "[", "0", ",", ":", ",", "0", ":", "4", "]", ",", "(", "-", "1", ",", "2", ")", ")", "#reshape all line points to vector of x,y pairs", "\n", "points", "=", "np", ".", "append", "(", "points", ",", "np", ".", "ones", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "#append 1 to make homogeneous (x,y,1)", "\n", "points", "=", "M", ".", "dot", "(", "points", ".", "T", ")", ".", "T", "#multiply rot matrix", "\n", "gt", "[", "0", ",", ":", ",", "0", ":", "4", "]", "=", "np", ".", "reshape", "(", "points", ",", "(", "-", "1", ",", "4", ")", ")", "#reshape back to single vector for each line", "\n", "\n", "", "", "", "if", "point_gts", "is", "not", "None", ":", "\n", "                ", "for", "name", ",", "gt", "in", "point_gts", ".", "items", "(", ")", ":", "\n", "                    ", "if", "gt", "is", "not", "None", ":", "\n", "                        ", "points", "=", "gt", "[", "0", ",", ":", ",", "0", ":", "2", "]", "\n", "points", "=", "np", ".", "append", "(", "points", ",", "np", ".", "ones", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "#append 1 to make homogeneous (x,y,1)", "\n", "points", "=", "M", ".", "dot", "(", "points", ".", "T", ")", ".", "T", "#multiply rot matrix", "\n", "gt", "[", "0", ",", ":", ",", "0", ":", "2", "]", "=", "points", "\n", "\n", "", "", "", "if", "query_bb", "is", "not", "None", ":", "\n", "                ", "points", "=", "np", ".", "reshape", "(", "query_bb", "[", "0", ":", "16", "]", ",", "(", "8", ",", "2", ")", ")", "#reshape all box points to vector of x,y pairs", "\n", "points", "=", "np", ".", "append", "(", "points", ",", "np", ".", "ones", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "#append 1 to make homogeneous (x,y,1)", "\n", "points", "=", "M", ".", "dot", "(", "points", ".", "T", ")", ".", "T", "#multiply rot matrix", "\n", "query_bb", "[", "0", ":", "16", "]", "=", "np", ".", "reshape", "(", "points", ",", "16", ")", "#reshape back to single vector", "\n", "\n", "#page_boundaries =", "\n", "", "", "pad_params", "=", "self", ".", "pad_params", "\n", "if", "org_img", ".", "shape", "[", "0", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "+", "pad_params", "[", "0", "]", "[", "1", "]", "<", "self", ".", "crop_size", "[", "0", "]", "+", "1", ":", "\n", "            ", "diff", "=", "self", ".", "crop_size", "[", "0", "]", "+", "1", "-", "(", "org_img", ".", "shape", "[", "0", "]", ")", "#+pad_params[0][0]+pad_params[0][1])", "\n", "pad_byT", "=", "diff", "//", "2", "\n", "pad_byB", "=", "diff", "//", "2", "+", "diff", "%", "2", "\n", "pad_params", "=", "(", "(", "pad_byT", ",", "pad_byB", ")", ",", ")", "+", "pad_params", "[", "1", ":", "]", "\n", "", "if", "org_img", ".", "shape", "[", "1", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "+", "pad_params", "[", "1", "]", "[", "1", "]", "<", "self", ".", "crop_size", "[", "1", "]", "+", "1", ":", "\n", "            ", "diff", "=", "self", ".", "crop_size", "[", "1", "]", "+", "1", "-", "(", "org_img", ".", "shape", "[", "1", "]", ")", "#+pad_params[1][0]+pad_params[1][1])", "\n", "pad_byL", "=", "diff", "//", "2", "\n", "pad_byR", "=", "diff", "//", "2", "+", "diff", "%", "2", "\n", "pad_params", "=", "(", "pad_params", "[", "0", "]", ",", "(", "pad_byL", ",", "pad_byR", ")", ",", "pad_params", "[", "2", "]", ")", "\n", "#print(pad_params)", "\n", "\n", "\n", "#pad out to allow random samples to take space off of the page", "\n", "##tic=timeit.default_timer()", "\n", "#org_img = np.pad(org_img, self.pad_params, 'mean')", "\n", "", "if", "org_img", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "org_img", "=", "np", ".", "pad", "(", "org_img", ",", "pad_params", ",", "'constant'", ",", "constant_values", "=", "0", ")", "#zero, since that what Conv2d pads with", "\n", "", "else", ":", "\n", "            ", "org_img", "=", "np", ".", "pad", "(", "org_img", ",", "pad_params", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "", "if", "pixel_gt", "is", "not", "None", ":", "\n", "            ", "pixel_gt", "=", "np", ".", "pad", "(", "pixel_gt", ",", "pad_params", ",", "'constant'", ")", "\n", "##print('pad: {}'.format(timeit.default_timer()-##tic))", "\n", "\n", "##tic=timeit.default_timer()", "\n", "#corner points", "\n", "", "bb_gt", "[", ":", ",", ":", ",", "0", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "0", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "bb_gt", "[", ":", ",", ":", ",", "1", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "1", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "bb_gt", "[", ":", ",", ":", ",", "2", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "2", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "bb_gt", "[", ":", ",", ":", ",", "3", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "3", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "bb_gt", "[", ":", ",", ":", ",", "4", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "4", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "bb_gt", "[", ":", ",", ":", ",", "5", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "5", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "bb_gt", "[", ":", ",", ":", ",", "6", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "6", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "bb_gt", "[", ":", ",", ":", ",", "7", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "7", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "\n", "#cross/edge points", "\n", "bb_gt", "[", ":", ",", ":", ",", "8", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "8", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "bb_gt", "[", ":", ",", ":", ",", "9", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "9", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "bb_gt", "[", ":", ",", ":", ",", "10", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "10", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "bb_gt", "[", ":", ",", ":", ",", "11", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "11", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "bb_gt", "[", ":", ",", ":", ",", "12", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "12", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "bb_gt", "[", ":", ",", ":", ",", "13", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "13", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "bb_gt", "[", ":", ",", ":", ",", "14", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "14", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "bb_gt", "[", ":", ",", ":", ",", "15", "]", "=", "bb_gt", "[", ":", ",", ":", ",", "15", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "\n", "if", "query_bb", "is", "not", "None", ":", "\n", "            ", "query_bb", "[", "8", "]", "=", "query_bb", "[", "8", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "query_bb", "[", "9", "]", "=", "query_bb", "[", "9", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "query_bb", "[", "10", "]", "=", "query_bb", "[", "10", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "query_bb", "[", "11", "]", "=", "query_bb", "[", "11", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "query_bb", "[", "12", "]", "=", "query_bb", "[", "12", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "query_bb", "[", "13", "]", "=", "query_bb", "[", "13", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "query_bb", "[", "14", "]", "=", "query_bb", "[", "14", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "query_bb", "[", "15", "]", "=", "query_bb", "[", "15", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "\n", "\n", "", "if", "point_gts", "is", "not", "None", ":", "\n", "            ", "for", "name", ",", "gt", "in", "point_gts", ".", "items", "(", ")", ":", "\n", "                ", "if", "gt", "is", "not", "None", ":", "\n", "                    ", "gt", "[", ":", ",", ":", ",", "0", "]", "=", "gt", "[", ":", ",", ":", ",", "0", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "gt", "[", ":", ",", ":", ",", "1", "]", "=", "gt", "[", ":", ",", ":", ",", "1", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "", "", "", "if", "line_gts", "is", "not", "None", ":", "\n", "            ", "for", "name", ",", "gt", "in", "line_gts", ".", "items", "(", ")", ":", "\n", "                ", "if", "gt", "is", "not", "None", ":", "\n", "                    ", "gt", "[", ":", ",", ":", ",", "0", "]", "=", "gt", "[", ":", ",", ":", ",", "0", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "gt", "[", ":", ",", ":", ",", "1", "]", "=", "gt", "[", ":", ",", ":", ",", "1", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "gt", "[", ":", ",", ":", ",", "2", "]", "=", "gt", "[", ":", ",", ":", ",", "2", "]", "+", "pad_params", "[", "1", "]", "[", "0", "]", "\n", "gt", "[", ":", ",", ":", ",", "3", "]", "=", "gt", "[", ":", ",", ":", ",", "3", "]", "+", "pad_params", "[", "0", "]", "[", "0", "]", "\n", "\n", "\n", "", "", "", "crop_params", ",", "org_img", ",", "pixel_gt", ",", "line_gt_match", ",", "point_gt_match", ",", "new_bb_gt", ",", "new_bb_auxs", ",", "cropPoint", "=", "generate_random_crop", "(", "org_img", ",", "pixel_gt", ",", "line_gts", ",", "point_gts", ",", "self", ".", "random_crop_params", ",", "bb_gt", "=", "bb_gt", ",", "bb_auxs", "=", "bb_auxs", ",", "query_bb", "=", "query_bb", ",", "cropPoint", "=", "cropPoint", ")", "\n", "#print(crop_params)", "\n", "#print(gt_match)", "\n", "\n", "##tic=timeit.default_timer()", "\n", "#new_bb_gt=bb_gt[bb_gt_match][None,...] #this is done in generate_random_crop() as it modified some bbs", "\n", "new_bb_gt", "=", "new_bb_gt", "[", "None", ",", "...", "]", "#this re-adds the batch dim", "\n", "new_bb_gt", "[", "...", ",", "0", "]", "=", "new_bb_gt", "[", "...", ",", "0", "]", "-", "crop_params", "[", "'dim1'", "]", "[", "0", "]", "\n", "new_bb_gt", "[", "...", ",", "1", "]", "=", "new_bb_gt", "[", "...", ",", "1", "]", "-", "crop_params", "[", "'dim0'", "]", "[", "0", "]", "\n", "new_bb_gt", "[", "...", ",", "2", "]", "=", "new_bb_gt", "[", "...", ",", "2", "]", "-", "crop_params", "[", "'dim1'", "]", "[", "0", "]", "\n", "new_bb_gt", "[", "...", ",", "3", "]", "=", "new_bb_gt", "[", "...", ",", "3", "]", "-", "crop_params", "[", "'dim0'", "]", "[", "0", "]", "\n", "new_bb_gt", "[", "...", ",", "4", "]", "=", "new_bb_gt", "[", "...", ",", "4", "]", "-", "crop_params", "[", "'dim1'", "]", "[", "0", "]", "\n", "new_bb_gt", "[", "...", ",", "5", "]", "=", "new_bb_gt", "[", "...", ",", "5", "]", "-", "crop_params", "[", "'dim0'", "]", "[", "0", "]", "\n", "new_bb_gt", "[", "...", ",", "6", "]", "=", "new_bb_gt", "[", "...", ",", "6", "]", "-", "crop_params", "[", "'dim1'", "]", "[", "0", "]", "\n", "new_bb_gt", "[", "...", ",", "7", "]", "=", "new_bb_gt", "[", "...", ",", "7", "]", "-", "crop_params", "[", "'dim0'", "]", "[", "0", "]", "\n", "#the cross/edge points are invalid now", "\n", "new_point_gts", "=", "{", "}", "\n", "if", "point_gts", "is", "not", "None", ":", "\n", "            ", "for", "name", ",", "gt", "in", "point_gts", ".", "items", "(", ")", ":", "\n", "                ", "if", "gt", "is", "not", "None", ":", "\n", "                    ", "gt", "=", "gt", "[", "point_gt_match", "[", "name", "]", "]", "[", "None", ",", "...", "]", "#add batch dim (?)", "\n", "gt", "[", "...", ",", "0", "]", "=", "gt", "[", "...", ",", "0", "]", "-", "crop_params", "[", "'dim1'", "]", "[", "0", "]", "\n", "gt", "[", "...", ",", "1", "]", "=", "gt", "[", "...", ",", "1", "]", "-", "crop_params", "[", "'dim0'", "]", "[", "0", "]", "\n", "new_point_gts", "[", "name", "]", "=", "gt", "\n", "", "", "", "new_line_gts", "=", "{", "}", "\n", "if", "line_gts", "is", "not", "None", ":", "\n", "            ", "for", "name", ",", "gt", "in", "line_gts", ".", "items", "(", ")", ":", "\n", "                ", "if", "gt", "is", "not", "None", ":", "\n", "                    ", "gt", "=", "gt", "[", "line_gt_match", "[", "name", "]", "]", "[", "None", ",", "...", "]", "#add batch dim (?)", "\n", "gt", "[", "...", ",", "0", "]", "=", "gt", "[", "...", ",", "0", "]", "-", "crop_params", "[", "'dim1'", "]", "[", "0", "]", "\n", "gt", "[", "...", ",", "1", "]", "=", "gt", "[", "...", ",", "1", "]", "-", "crop_params", "[", "'dim0'", "]", "[", "0", "]", "\n", "gt", "[", "...", ",", "2", "]", "=", "gt", "[", "...", ",", "2", "]", "-", "crop_params", "[", "'dim1'", "]", "[", "0", "]", "\n", "gt", "[", "...", ",", "3", "]", "=", "gt", "[", "...", ",", "3", "]", "-", "crop_params", "[", "'dim0'", "]", "[", "0", "]", "\n", "new_line_gts", "[", "name", "]", "=", "gt", "\n", "##print('pad-minus: {}'.format(timeit.default_timer()-##tic))", "\n", "\n", "#if 'start' in name:", "\n", "#    for j in range(min(10,gt.size(1))):", "\n", "#        ##print('a {},{}   {},{}'.format(gt[:,j,0],gt[:,j,1],gt[:,j,2],gt[:,j,3]))", "\n", "\n", "\n", "", "", "", "return", "(", "{", "\n", "\"img\"", ":", "org_img", ",", "\n", "\"bb_gt\"", ":", "new_bb_gt", ",", "\n", "aux_str", ":", "new_bb_auxs", ",", "\n", "\"line_gt\"", ":", "new_line_gts", ",", "\n", "\"point_gt\"", ":", "new_point_gts", ",", "\n", "\"pixel_gt\"", ":", "pixel_gt", "\n", "}", ",", "cropPoint", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.crop_transform.perform_crop": [[7, 20], ["len", "len"], "function", ["None"], ["def", "perform_crop", "(", "img", ",", "gt", ",", "crop", ")", ":", "\n", "#csX,csY = crop['crop_size']", "\n", "    ", "cropped_gt_img", "=", "img", "[", "crop", "[", "'dim0'", "]", "[", "0", "]", ":", "crop", "[", "'dim0'", "]", "[", "1", "]", ",", "crop", "[", "'dim1'", "]", "[", "0", "]", ":", "crop", "[", "'dim1'", "]", "[", "1", "]", "]", "\n", "scaled_gt_img", "=", "cropped_gt_img", "#img_f.resize(cropped_gt_img, (csY, csX))", "\n", "if", "len", "(", "scaled_gt_img", ".", "shape", ")", "==", "2", ":", "\n", "        ", "scaled_gt_img", "=", "scaled_gt_img", "[", "...", ",", "None", "]", "\n", "", "scaled_gt", "=", "None", "\n", "if", "gt", "is", "not", "None", ":", "\n", "        ", "cropped_gt", "=", "gt", "[", "crop", "[", "'dim0'", "]", "[", "0", "]", ":", "crop", "[", "'dim0'", "]", "[", "1", "]", ",", "crop", "[", "'dim1'", "]", "[", "0", "]", ":", "crop", "[", "'dim1'", "]", "[", "1", "]", "]", "\n", "scaled_gt", "=", "cropped_gt", "#img_f.resize(cropped_gt, (cs, cs))", "\n", "if", "len", "(", "scaled_gt", ".", "shape", ")", "==", "2", ":", "\n", "            ", "scaled_gt", "=", "scaled_gt", "[", "...", ",", "None", "]", "\n", "", "", "return", "scaled_gt_img", ",", "scaled_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.crop_transform.generate_random_crop": [[22, 273], ["type", "numpy.random.random", "line_gts.items", "numpy.zeros_like", "numpy.logical_and.reduce", "numpy.logical_and.reduce", "numpy.logical_and", "numpy.logical_and", "numpy.logical_or", "np.logical_or.all", "point_gts.items", "crop_transform.perform_crop", "numpy.random.randint", "numpy.random.randint", "int", "int", "int", "int", "numpy.zeros_like", "numpy.logical_and.reduce", "numpy.logical_or", "numpy.logical_and", "np.logical_or.sum", "max", "min", "random.choice", "random.choice", "int", "numpy.random.randint", "max", "min", "random.choice", "random.choice", "int", "numpy.random.randint", "line_gt_match[].sum", "numpy.zeros_like", "numpy.logical_and", "numpy.where", "warnings.catch_warnings", "warnings.simplefilter", "numpy.nan_to_num", "numpy.nan_to_num", "numpy.nan_to_num", "numpy.nan_to_num", "numpy.nan_to_num", "numpy.nan_to_num", "numpy.nan_to_num", "numpy.nan_to_num", "numpy.where", "random.choice", "numpy.random.randint", "min", "random.choice", "numpy.random.randint", "min", "point_gt_match[].sum", "max", "max", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.maximum.reduce", "numpy.maximum.reduce", "enumerate"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.crop_transform.perform_crop"], ["", "def", "generate_random_crop", "(", "img", ",", "pixel_gt", ",", "line_gts", ",", "point_gts", ",", "params", ",", "bb_gt", "=", "None", ",", "bb_auxs", "=", "None", ",", "query_bb", "=", "None", ",", "cropPoint", "=", "None", ")", ":", "\n", "\n", "    ", "contains_label", "=", "np", ".", "random", ".", "random", "(", ")", "<", "params", "[", "'prob_label'", "]", "if", "'prob_label'", "in", "params", "else", "None", "\n", "cs", "=", "params", "[", "'crop_size'", "]", "\n", "if", "type", "(", "cs", ")", "==", "int", ":", "\n", "        ", "csX", "=", "cs", "\n", "csY", "=", "cs", "\n", "", "else", ":", "\n", "        ", "csX", "=", "cs", "[", "1", "]", "\n", "csY", "=", "cs", "[", "0", "]", "\n", "", "cs", "=", "None", "\n", "\n", "cnt", "=", "0", "\n", "while", "True", ":", "#we loop random crops to try and get an instance", "\n", "        ", "if", "cropPoint", "is", "None", ":", "\n", "            ", "if", "query_bb", "is", "None", ":", "\n", "                ", "dim0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img", ".", "shape", "[", "0", "]", "-", "csY", ")", "\n", "dim1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img", ".", "shape", "[", "1", "]", "-", "csX", ")", "\n", "", "else", ":", "\n", "#force the random crop to fully contain the query, if it can", "\n", "# otherwise contain part of it", "\n", "                ", "minY", "=", "int", "(", "max", "(", "0", ",", "query_bb", "[", "9", "]", "-", "csY", ",", "query_bb", "[", "11", "]", "-", "csY", ",", "query_bb", "[", "13", "]", "-", "csY", ",", "query_bb", "[", "15", "]", "-", "csY", ")", ")", "\n", "maxY", "=", "int", "(", "min", "(", "img", ".", "shape", "[", "0", "]", "-", "csY", ",", "query_bb", "[", "9", "]", "+", "1", ",", "query_bb", "[", "11", "]", "+", "1", ",", "query_bb", "[", "13", "]", "+", "1", ",", "query_bb", "[", "15", "]", "+", "1", ")", ")", "\n", "if", "minY", ">=", "maxY", ":", "\n", "                    ", "minY", "=", "random", ".", "choice", "(", "[", "query_bb", "[", "11", "]", "-", "csY", ",", "query_bb", "[", "13", "]", "-", "csY", ",", "query_bb", "[", "15", "]", "-", "csY", "]", ")", "\n", "maxY", "=", "random", ".", "choice", "(", "[", "query_bb", "[", "9", "]", "+", "1", ",", "query_bb", "[", "11", "]", "+", "1", ",", "query_bb", "[", "13", "]", "+", "1", ",", "query_bb", "[", "15", "]", "+", "1", "]", ")", "\n", "if", "minY", ">=", "maxY", ":", "\n", "                        ", "dim0", "=", "random", ".", "choice", "(", "[", "minY", ",", "maxY", "]", ")", "\n", "", "else", ":", "\n", "                        ", "dim0", "=", "np", ".", "random", ".", "randint", "(", "minY", ",", "maxY", ")", "\n", "", "dim0", "=", "int", "(", "min", "(", "img", ".", "shape", "[", "0", "]", "-", "csY", ",", "max", "(", "0", ",", "dim0", ")", ")", ")", "\n", "#minY=int(max(0,min(query_bb[9],query_bb[11],query_bb[13],query_bb[15])))", "\n", "#maxY=int(min(img.shape[0]-csY,1+max(query_bb[9]-csY,query_bb[11]-csY,query_bb[13]-csY,query_bb[15]-csY)))", "\n", "", "else", ":", "\n", "                    ", "dim0", "=", "np", ".", "random", ".", "randint", "(", "minY", ",", "maxY", ")", "\n", "", "minX", "=", "int", "(", "max", "(", "0", ",", "query_bb", "[", "8", "]", "-", "csX", ",", "query_bb", "[", "10", "]", "-", "csX", ",", "query_bb", "[", "12", "]", "-", "csX", ",", "query_bb", "[", "14", "]", "-", "csX", ")", ")", "\n", "maxX", "=", "int", "(", "min", "(", "img", ".", "shape", "[", "1", "]", "-", "csX", ",", "query_bb", "[", "8", "]", "+", "1", ",", "query_bb", "[", "10", "]", "+", "1", ",", "query_bb", "[", "12", "]", "+", "1", ",", "query_bb", "[", "14", "]", "+", "1", ")", ")", "\n", "if", "minX", ">=", "maxX", ":", "\n", "                    ", "minX", "=", "random", ".", "choice", "(", "[", "query_bb", "[", "8", "]", "-", "csY", ",", "query_bb", "[", "10", "]", "-", "csX", ",", "query_bb", "[", "12", "]", "-", "csX", ",", "query_bb", "[", "14", "]", "-", "csX", "]", ")", "\n", "maxX", "=", "random", ".", "choice", "(", "[", "query_bb", "[", "8", "]", "+", "1", ",", "query_bb", "[", "10", "]", "+", "1", ",", "query_bb", "[", "12", "]", "+", "1", ",", "query_bb", "[", "14", "]", "+", "1", "]", ")", "\n", "if", "minX", ">=", "maxX", ":", "\n", "                        ", "dim1", "=", "random", ".", "choice", "(", "[", "minX", ",", "maxX", "]", ")", "\n", "", "else", ":", "\n", "                        ", "dim1", "=", "np", ".", "random", ".", "randint", "(", "minX", ",", "maxX", ")", "\n", "", "dim1", "=", "int", "(", "min", "(", "img", ".", "shape", "[", "1", "]", "-", "csX", ",", "max", "(", "0", ",", "dim1", ")", ")", ")", "\n", "#minX=int(max(0,min(query_bb[8],query_bb[10],query_bb[12],query_bb[14])))", "\n", "#maxX=int(min(img.shape[1]-csX,1+max(query_bb[8]-csX,query_bb[10]-csX,query_bb[12]-csX,query_bb[14]-csY)))", "\n", "", "else", ":", "\n", "                    ", "dim1", "=", "np", ".", "random", ".", "randint", "(", "minX", ",", "maxX", ")", "\n", "", "", "", "else", ":", "\n", "            ", "dim0", "=", "cropPoint", "[", "1", "]", "\n", "dim1", "=", "cropPoint", "[", "0", "]", "\n", "\n", "", "crop", "=", "{", "\n", "\"dim0\"", ":", "[", "dim0", ",", "dim0", "+", "csY", "]", ",", "\n", "\"dim1\"", ":", "[", "dim1", ",", "dim1", "+", "csX", "]", ",", "\n", "#\"crop_size\": (csX,csY)", "\n", "}", "\n", "hit", "=", "False", "\n", "\n", "if", "line_gts", "is", "not", "None", ":", "\n", "            ", "line_gt_match", "=", "{", "}", "\n", "for", "name", ",", "gt", "in", "line_gts", ".", "items", "(", ")", ":", "\n", "##tic=timeit.default_timer()", "\n", "                ", "line_gt_match", "[", "name", "]", "=", "np", ".", "zeros_like", "(", "gt", ")", "\n", "line_gt_match", "[", "name", "]", "[", "...", ",", "0", "]", "[", "gt", "[", "...", ",", "0", "]", "<", "dim1", "]", "=", "1", "\n", "line_gt_match", "[", "name", "]", "[", "...", ",", "0", "]", "[", "gt", "[", "...", ",", "0", "]", ">", "dim1", "+", "csX", "]", "=", "1", "\n", "\n", "line_gt_match", "[", "name", "]", "[", "...", ",", "1", "]", "[", "gt", "[", "...", ",", "1", "]", "<", "dim0", "]", "=", "1", "\n", "line_gt_match", "[", "name", "]", "[", "...", ",", "1", "]", "[", "gt", "[", "...", ",", "1", "]", ">", "dim0", "+", "csY", "]", "=", "1", "\n", "\n", "line_gt_match", "[", "name", "]", "[", "...", ",", "2", "]", "[", "gt", "[", "...", ",", "2", "]", "<", "dim1", "]", "=", "1", "\n", "line_gt_match", "[", "name", "]", "[", "...", ",", "2", "]", "[", "gt", "[", "...", ",", "2", "]", ">", "dim1", "+", "csX", "]", "=", "1", "\n", "\n", "line_gt_match", "[", "name", "]", "[", "...", ",", "3", "]", "[", "gt", "[", "...", ",", "3", "]", "<", "dim0", "]", "=", "1", "\n", "line_gt_match", "[", "name", "]", "[", "...", ",", "3", "]", "[", "gt", "[", "...", ",", "3", "]", ">", "dim0", "+", "csY", "]", "=", "1", "\n", "\n", "line_gt_match", "[", "name", "]", "=", "1", "-", "line_gt_match", "[", "name", "]", "\n", "line_gt_match", "[", "name", "]", "=", "np", ".", "logical_and", ".", "reduce", "(", "(", "line_gt_match", "[", "name", "]", "[", "...", ",", "0", "]", ",", "line_gt_match", "[", "name", "]", "[", "...", ",", "1", "]", ",", "line_gt_match", "[", "name", "]", "[", "...", ",", "2", "]", ",", "line_gt_match", "[", "name", "]", "[", "...", ",", "3", "]", ")", ")", "\n", "if", "line_gt_match", "[", "name", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "hit", "=", "True", "\n", "", "", "", "else", ":", "\n", "            ", "line_gt_match", "=", "None", "\n", "\n", "\n", "\n", "", "got_all", "=", "True", "\n", "if", "bb_gt", "is", "not", "None", ":", "\n", "            ", "bb_gt_match", "=", "np", ".", "zeros_like", "(", "bb_gt", ")", "\n", "\n", "bb_gt_match", "[", "...", ",", "8", "]", "[", "bb_gt", "[", "...", ",", "8", "]", "<", "dim1", "]", "=", "1", "\n", "bb_gt_match", "[", "...", ",", "0", "]", "[", "bb_gt", "[", "...", ",", "8", "]", ">=", "dim1", "+", "csX", "]", "=", "1", "\n", "\n", "bb_gt_match", "[", "...", ",", "9", "]", "[", "bb_gt", "[", "...", ",", "9", "]", "<", "dim0", "]", "=", "1", "\n", "bb_gt_match", "[", "...", ",", "1", "]", "[", "bb_gt", "[", "...", ",", "9", "]", ">=", "dim0", "+", "csY", "]", "=", "1", "\n", "\n", "bb_gt_match", "[", "...", ",", "10", "]", "[", "bb_gt", "[", "...", ",", "10", "]", "<", "dim1", "]", "=", "1", "\n", "bb_gt_match", "[", "...", ",", "2", "]", "[", "bb_gt", "[", "...", ",", "10", "]", ">=", "dim1", "+", "csX", "]", "=", "1", "\n", "\n", "bb_gt_match", "[", "...", ",", "11", "]", "[", "bb_gt", "[", "...", ",", "11", "]", "<", "dim0", "]", "=", "1", "\n", "bb_gt_match", "[", "...", ",", "3", "]", "[", "bb_gt", "[", "...", ",", "11", "]", ">=", "dim0", "+", "csY", "]", "=", "1", "\n", "\n", "bb_gt_match", "[", "...", ",", "12", "]", "[", "bb_gt", "[", "...", ",", "12", "]", "<", "dim1", "]", "=", "1", "\n", "bb_gt_match", "[", "...", ",", "12", "]", "[", "bb_gt", "[", "...", ",", "12", "]", ">=", "dim1", "+", "csX", "]", "=", "1", "\n", "\n", "bb_gt_match", "[", "...", ",", "13", "]", "[", "bb_gt", "[", "...", ",", "13", "]", "<", "dim0", "]", "=", "1", "\n", "bb_gt_match", "[", "...", ",", "13", "]", "[", "bb_gt", "[", "...", ",", "13", "]", ">=", "dim0", "+", "csY", "]", "=", "1", "\n", "\n", "bb_gt_match", "[", "...", ",", "14", "]", "[", "bb_gt", "[", "...", ",", "14", "]", "<", "dim1", "]", "=", "1", "\n", "bb_gt_match", "[", "...", ",", "14", "]", "[", "bb_gt", "[", "...", ",", "14", "]", ">=", "dim1", "+", "csX", "]", "=", "1", "\n", "\n", "bb_gt_match", "[", "...", ",", "15", "]", "[", "bb_gt", "[", "...", ",", "15", "]", "<", "dim0", "]", "=", "1", "\n", "bb_gt_match", "[", "...", ",", "15", "]", "[", "bb_gt", "[", "...", ",", "15", "]", ">=", "dim0", "+", "csY", "]", "=", "1", "\n", "\n", "\n", "bb_gt_match", "=", "1", "-", "bb_gt_match", "\n", "left_inside_l", "=", "bb_gt_match", "[", "...", ",", "8", "]", "\n", "left_inside_r", "=", "bb_gt_match", "[", "...", ",", "0", "]", "\n", "left_inside_t", "=", "bb_gt_match", "[", "...", ",", "9", "]", "\n", "left_inside_b", "=", "bb_gt_match", "[", "...", ",", "1", "]", "\n", "has_left", "=", "np", ".", "logical_and", ".", "reduce", "(", "[", "left_inside_l", ",", "left_inside_r", ",", "left_inside_t", ",", "left_inside_b", "]", ")", "\n", "right_inside_l", "=", "bb_gt_match", "[", "...", ",", "10", "]", "\n", "right_inside_r", "=", "bb_gt_match", "[", "...", ",", "2", "]", "\n", "right_inside_t", "=", "bb_gt_match", "[", "...", ",", "11", "]", "\n", "right_inside_b", "=", "bb_gt_match", "[", "...", ",", "3", "]", "\n", "has_right", "=", "np", ".", "logical_and", ".", "reduce", "(", "[", "right_inside_l", ",", "right_inside_r", ",", "right_inside_t", ",", "right_inside_b", "]", ")", "\n", "has_top", "=", "np", ".", "logical_and", "(", "bb_gt_match", "[", "...", ",", "12", "]", ",", "bb_gt_match", "[", "...", ",", "13", "]", ")", "\n", "has_bot", "=", "np", ".", "logical_and", "(", "bb_gt_match", "[", "...", ",", "14", "]", ",", "bb_gt_match", "[", "...", ",", "15", "]", ")", "\n", "\n", "#bb_gt_cornerCount = has_left+has_right+has_top+has_bot", "\n", "#bb_gt_part = bb_gt_cornerCount==2 #if you have two corners in, your a partial", "\n", "#bb_gt_candidate = np.logical_or( np.logical_and(np.logical_or(has_top,has_bot),np.logical_or(has_left,has_right)),", "\n", "bb_gt_candidate", "=", "np", ".", "logical_or", "(", "np", ".", "logical_or", "(", "has_left", ",", "has_right", ")", ",", "\n", "np", ".", "logical_and", "(", "has_top", ",", "has_bot", ")", ")", "\n", "got_all", "=", "bb_gt_candidate", ".", "all", "(", ")", "\n", "\n", "\n", "\n", "if", "bb_gt_candidate", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "hit", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "got_all", "=", "True", "\n", "bb_gt_match", "=", "None", "\n", "\n", "", "point_gt_match", "=", "{", "}", "\n", "if", "point_gts", "is", "not", "None", ":", "\n", "            ", "for", "name", ",", "gt", "in", "point_gts", ".", "items", "(", ")", ":", "\n", "                ", "if", "gt", "is", "not", "None", ":", "\n", "##tic=timeit.default_timer()", "\n", "                    ", "point_gt_match", "[", "name", "]", "=", "np", ".", "zeros_like", "(", "gt", ")", "\n", "point_gt_match", "[", "name", "]", "[", "...", ",", "0", "]", "[", "gt", "[", "...", ",", "0", "]", "<", "dim1", "]", "=", "1", "\n", "point_gt_match", "[", "name", "]", "[", "...", ",", "0", "]", "[", "gt", "[", "...", ",", "0", "]", ">", "dim1", "+", "csX", "]", "=", "1", "\n", "\n", "point_gt_match", "[", "name", "]", "[", "...", ",", "1", "]", "[", "gt", "[", "...", ",", "1", "]", "<", "dim0", "]", "=", "1", "\n", "point_gt_match", "[", "name", "]", "[", "...", ",", "1", "]", "[", "gt", "[", "...", ",", "1", "]", ">", "dim0", "+", "csY", "]", "=", "1", "\n", "\n", "point_gt_match", "[", "name", "]", "=", "1", "-", "point_gt_match", "[", "name", "]", "\n", "point_gt_match", "[", "name", "]", "=", "np", ".", "logical_and", "(", "point_gt_match", "[", "name", "]", "[", "...", ",", "0", "]", ",", "point_gt_match", "[", "name", "]", "[", "...", ",", "1", "]", ")", "\n", "if", "point_gt_match", "[", "name", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                        ", "hit", "=", "True", "\n", "##print('match: {}'.format(timeit.default_timer()-##tic))", "\n", "", "", "", "", "else", ":", "\n", "            ", "point_gt_match", "=", "None", "\n", "\n", "", "if", "(", "\n", "(", "cropPoint", "is", "not", "None", ")", "\n", "or", "\n", "(", "\n", "query_bb", "is", "not", "None", "and", "(", "\n", "got_all", "or", "\n", "cnt", ">", "50", ")", "\n", ")", "\n", "or", "\n", "(", "\n", "query_bb", "is", "None", "and", "(", "\n", "cnt", ">", "100", "or", "\n", "(", "contains_label", "is", "None", "or", "\n", "(", "hit", "and", "contains_label", ")", "or", "\n", "(", "not", "hit", "and", "not", "contains_label", ")", ")", ")", "\n", ")", "\n", ")", ":", "\n", "                ", "cropped_gt_img", ",", "cropped_pixel_gt", "=", "perform_crop", "(", "img", ",", "pixel_gt", ",", "crop", ")", "\n", "if", "line_gts", "is", "not", "None", ":", "\n", "                    ", "for", "name", "in", "line_gts", ":", "\n", "                        ", "line_gt_match", "[", "name", "]", "=", "np", ".", "where", "(", "line_gt_match", "[", "name", "]", "!=", "0", ")", "\n", "", "", "if", "bb_gt", "is", "not", "None", ":", "\n", "                    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                        ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "#we do some div by zero stuff that's caught within", "\n", "#We need to clip bbs that go outsire crop", "\n", "#this is a bit of a mess...", "\n", "#we do the clipping for all BBs, but those inside just dont get clipped", "\n", "bb_gt", "=", "bb_gt", "[", "np", ".", "where", "(", "bb_gt_candidate", ")", "]", "\n", "left_inside_l", "=", "left_inside_l", "[", "np", ".", "where", "(", "bb_gt_candidate", ")", "]", "\n", "left_inside_r", "=", "left_inside_r", "[", "np", ".", "where", "(", "bb_gt_candidate", ")", "]", "\n", "left_inside_t", "=", "left_inside_t", "[", "np", ".", "where", "(", "bb_gt_candidate", ")", "]", "\n", "left_inside_b", "=", "left_inside_b", "[", "np", ".", "where", "(", "bb_gt_candidate", ")", "]", "\n", "right_inside_l", "=", "right_inside_l", "[", "np", ".", "where", "(", "bb_gt_candidate", ")", "]", "\n", "right_inside_r", "=", "right_inside_r", "[", "np", ".", "where", "(", "bb_gt_candidate", ")", "]", "\n", "right_inside_t", "=", "right_inside_t", "[", "np", ".", "where", "(", "bb_gt_candidate", ")", "]", "\n", "right_inside_b", "=", "right_inside_b", "[", "np", ".", "where", "(", "bb_gt_candidate", ")", "]", "\n", "#we're going to edit bb_gt to make boxes partially in crop to be fully in crop ", "\n", "#bring in left side", "\n", "#needs_left = np.logical_and(bb_gt_candidate,1-has_left)[:,:,None]#, [1,1,2]) # things that are candidates where the left point is out-of-bounds", "\n", "v_r", "=", "bb_gt", "[", "...", ",", "10", ":", "12", "]", "-", "bb_gt", "[", "...", ",", "8", ":", "10", "]", "#vector to opposite point", "\n", "#what do we need to bring in?", "\n", "dist1_l", "=", "(", "1", "-", "left_inside_l", ")", "*", "(", "dim1", "-", "bb_gt", "[", "...", ",", "8", "]", ")", "/", "v_r", "[", "...", ",", "0", "]", "#distance along vector till intersecting left clipped boundary", "\n", "dist1_r", "=", "(", "1", "-", "left_inside_r", ")", "*", "(", "dim1", "+", "csX", "-", "bb_gt", "[", "...", ",", "8", "]", ")", "/", "v_r", "[", "...", ",", "0", "]", "# \" right boundary", "\n", "dist0_t", "=", "(", "1", "-", "left_inside_t", ")", "*", "(", "dim0", "-", "bb_gt", "[", "...", ",", "9", "]", ")", "/", "v_r", "[", "...", ",", "1", "]", "# \" top boudary", "\n", "dist0_b", "=", "(", "1", "-", "left_inside_b", ")", "*", "(", "dim0", "+", "csY", "-", "bb_gt", "[", "...", ",", "9", "]", ")", "/", "v_r", "[", "...", ",", "1", "]", "# \" bottom boundarya", "\n", "np", ".", "nan_to_num", "(", "dist1_l", ",", "False", ")", "\n", "np", ".", "nan_to_num", "(", "dist1_r", ",", "False", ")", "\n", "np", ".", "nan_to_num", "(", "dist0_t", ",", "False", ")", "\n", "np", ".", "nan_to_num", "(", "dist0_b", ",", "False", ")", "\n", "# #Take the closest boundary intersection and get the vector that corresponds", "\n", "# #mv_left = v_r*(np.maximum(np.minimum.reduce([dist1_l,dist1_r,dist0_t,dist0_b]),0)[:,:,None])", "\n", "#Take the largest of the boundaries we need (others are zeroed out)", "\n", "mv_left", "=", "v_r", "*", "(", "np", ".", "maximum", ".", "reduce", "(", "[", "dist1_l", ",", "dist1_r", ",", "dist0_t", ",", "dist0_b", "]", ")", "[", "...", ",", "None", "]", ")", "\n", "#Now add that vector to the two corner points to bring them in", "\n", "#bb_gt[...,0:2] = np.where( needs_left , bb_gt[...,0:2]+mv_left, bb_gt[...,0:2])", "\n", "#bb_gt[...,6:8] = np.where( needs_left , bb_gt[...,6:8]+mv_left, bb_gt[...,6:8])", "\n", "bb_gt", "[", "...", ",", "0", ":", "2", "]", "+=", "mv_left", "\n", "bb_gt", "[", "...", ",", "6", ":", "8", "]", "+=", "mv_left", "\n", "\n", "#bring in right side", "\n", "#same process as left side", "\n", "#needs_right = np.logical_and(bb_gt_candidate,1-has_right)[:,:,None]#, [1,1,2])", "\n", "v_l", "=", "-", "bb_gt", "[", "...", ",", "10", ":", "12", "]", "+", "bb_gt", "[", "...", ",", "8", ":", "10", "]", "\n", "dist1_l", "=", "(", "1", "-", "right_inside_l", ")", "*", "(", "dim1", "-", "bb_gt", "[", "...", ",", "10", "]", ")", "/", "v_l", "[", "...", ",", "0", "]", "\n", "dist1_r", "=", "(", "1", "-", "right_inside_r", ")", "*", "(", "dim1", "+", "csX", "-", "bb_gt", "[", "...", ",", "10", "]", ")", "/", "v_l", "[", "...", ",", "0", "]", "\n", "dist0_t", "=", "(", "1", "-", "right_inside_t", ")", "*", "(", "dim0", "-", "bb_gt", "[", "...", ",", "11", "]", ")", "/", "v_l", "[", "...", ",", "1", "]", "\n", "dist0_b", "=", "(", "1", "-", "right_inside_b", ")", "*", "(", "dim0", "+", "csY", "-", "bb_gt", "[", "...", ",", "11", "]", ")", "/", "v_l", "[", "...", ",", "1", "]", "\n", "np", ".", "nan_to_num", "(", "dist1_l", ",", "False", ")", "\n", "np", ".", "nan_to_num", "(", "dist1_r", ",", "False", ")", "\n", "np", ".", "nan_to_num", "(", "dist0_t", ",", "False", ")", "\n", "np", ".", "nan_to_num", "(", "dist0_b", ",", "False", ")", "\n", "#mv_right = v_l*(np.maximum(np.minimum.reduce([dist1_l,dist1_r,dist0_t,dist0_b]),0)[:,:,None])", "\n", "mv_right", "=", "v_l", "*", "(", "np", ".", "maximum", ".", "reduce", "(", "[", "dist1_l", ",", "dist1_r", ",", "dist0_t", ",", "dist0_b", "]", ")", "[", "...", ",", "None", "]", ")", "\n", "#bb_gt[...,2:4] = np.where( needs_right, bb_gt[...,2:4]+mv_right, bb_gt[...,2:4])", "\n", "#bb_gt[...,4:6] = np.where( needs_right, bb_gt[...,4:6]+mv_right, bb_gt[...,4:6])", "\n", "bb_gt", "[", "...", ",", "2", ":", "4", "]", "+=", "mv_right", "\n", "bb_gt", "[", "...", ",", "4", ":", "6", "]", "+=", "mv_right", "\n", "#bb_gt = bb_gt[np.where(bb_gt_candidate)]", "\n", "\n", "if", "bb_auxs", "is", "not", "None", ":", "\n", "                            ", "bb_auxs", "=", "[", "id", "for", "ind", ",", "id", "in", "enumerate", "(", "bb_auxs", ")", "if", "bb_gt_candidate", "[", "0", ",", "ind", "]", "]", "\n", "", "", "", "if", "point_gts", "is", "not", "None", ":", "\n", "                    ", "for", "name", "in", "point_gt_match", ":", "\n", "                        ", "point_gt_match", "[", "name", "]", "=", "np", ".", "where", "(", "point_gt_match", "[", "name", "]", "!=", "0", ")", "\n", "", "", "return", "crop", ",", "cropped_gt_img", ",", "cropped_pixel_gt", ",", "line_gt_match", ",", "point_gt_match", ",", "bb_gt", ",", "bb_auxs", ",", "(", "dim1", ",", "dim0", ")", "\n", "\n", "", "cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.calcCorners": [[6, 16], ["math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin"], "function", ["None"], ["def", "calcCorners", "(", "x", ",", "y", ",", "r", ",", "h", ",", "w", ")", ":", "\n", "    ", "tlX", "=", "-", "w", "*", "math", ".", "cos", "(", "r", ")", "-", "h", "*", "math", ".", "sin", "(", "r", ")", "+", "x", "\n", "tlY", "=", "-", "h", "*", "math", ".", "cos", "(", "r", ")", "+", "w", "*", "math", ".", "sin", "(", "r", ")", "+", "y", "\n", "trX", "=", "w", "*", "math", ".", "cos", "(", "r", ")", "-", "h", "*", "math", ".", "sin", "(", "r", ")", "+", "x", "\n", "trY", "=", "-", "h", "*", "math", ".", "cos", "(", "r", ")", "-", "w", "*", "math", ".", "sin", "(", "r", ")", "+", "y", "\n", "brX", "=", "w", "*", "math", ".", "cos", "(", "r", ")", "+", "h", "*", "math", ".", "sin", "(", "r", ")", "+", "x", "\n", "brY", "=", "h", "*", "math", ".", "cos", "(", "r", ")", "-", "w", "*", "math", ".", "sin", "(", "r", ")", "+", "y", "\n", "blX", "=", "-", "w", "*", "math", ".", "cos", "(", "r", ")", "+", "h", "*", "math", ".", "sin", "(", "r", ")", "+", "x", "\n", "blY", "=", "h", "*", "math", ".", "cos", "(", "r", ")", "+", "w", "*", "math", ".", "sin", "(", "r", ")", "+", "y", "\n", "return", "[", "[", "tlX", ",", "tlY", "]", ",", "[", "trX", ",", "trY", "]", ",", "[", "brX", ",", "brY", "]", ",", "[", "blX", ",", "blY", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.calcCornersTorch": [[17, 27], ["torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.cos", "torch.sin"], "function", ["None"], ["", "def", "calcCornersTorch", "(", "x", ",", "y", ",", "r", ",", "h", ",", "w", ")", ":", "\n", "    ", "tlX", "=", "-", "w", "*", "torch", ".", "cos", "(", "r", ")", "-", "h", "*", "torch", ".", "sin", "(", "r", ")", "+", "x", "\n", "tlY", "=", "-", "h", "*", "torch", ".", "cos", "(", "r", ")", "+", "w", "*", "torch", ".", "sin", "(", "r", ")", "+", "y", "\n", "trX", "=", "w", "*", "torch", ".", "cos", "(", "r", ")", "-", "h", "*", "torch", ".", "sin", "(", "r", ")", "+", "x", "\n", "trY", "=", "-", "h", "*", "torch", ".", "cos", "(", "r", ")", "-", "w", "*", "torch", ".", "sin", "(", "r", ")", "+", "y", "\n", "brX", "=", "w", "*", "torch", ".", "cos", "(", "r", ")", "+", "h", "*", "torch", ".", "sin", "(", "r", ")", "+", "x", "\n", "brY", "=", "h", "*", "torch", ".", "cos", "(", "r", ")", "-", "w", "*", "torch", ".", "sin", "(", "r", ")", "+", "y", "\n", "blX", "=", "-", "w", "*", "torch", ".", "cos", "(", "r", ")", "+", "h", "*", "torch", ".", "sin", "(", "r", ")", "+", "x", "\n", "blY", "=", "h", "*", "torch", ".", "cos", "(", "r", ")", "+", "w", "*", "torch", ".", "sin", "(", "r", ")", "+", "y", "\n", "return", "tlX", ",", "tlY", ",", "trX", ",", "trY", ",", "brX", ",", "brY", ",", "blX", ",", "blY", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.avg_y": [[28, 31], ["None"], "function", ["None"], ["", "def", "avg_y", "(", "bb", ")", ":", "\n", "    ", "points", "=", "bb", "[", "'poly_points'", "]", "\n", "return", "(", "points", "[", "0", "]", "[", "1", "]", "+", "points", "[", "1", "]", "[", "1", "]", "+", "points", "[", "2", "]", "[", "1", "]", "+", "points", "[", "3", "]", "[", "1", "]", ")", "/", "4.0", "\n", "", "def", "avg_x", "(", "bb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.avg_x": [[31, 34], ["None"], "function", ["None"], ["", "def", "avg_x", "(", "bb", ")", ":", "\n", "    ", "points", "=", "bb", "[", "'poly_points'", "]", "\n", "return", "(", "points", "[", "0", "]", "[", "0", "]", "+", "points", "[", "1", "]", "[", "0", "]", "+", "points", "[", "2", "]", "[", "0", "]", "+", "points", "[", "3", "]", "[", "0", "]", ")", "/", "4.0", "\n", "", "def", "left_x", "(", "bb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.left_x": [[34, 37], ["None"], "function", ["None"], ["", "def", "left_x", "(", "bb", ")", ":", "\n", "    ", "points", "=", "bb", "[", "'poly_points'", "]", "\n", "return", "(", "points", "[", "0", "]", "[", "0", "]", "+", "points", "[", "3", "]", "[", "0", "]", ")", "/", "2.0", "\n", "", "def", "right_x", "(", "bb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.right_x": [[37, 40], ["None"], "function", ["None"], ["", "def", "right_x", "(", "bb", ")", ":", "\n", "    ", "points", "=", "bb", "[", "'poly_points'", "]", "\n", "return", "(", "points", "[", "1", "]", "[", "0", "]", "+", "points", "[", "2", "]", "[", "0", "]", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.convertBBs": [[42, 143], ["numpy.empty", "numpy.sqrt", "numpy.arctan2", "numpy.abs", "torch.from_numpy", "numpy.minimum.reduce", "numpy.minimum.reduce", "numpy.maximum.reduce", "numpy.minimum.reduce", "numpy.maximum.reduce", "numpy.maximum.reduce", "numpy.minimum.reduce", "numpy.maximum.reduce", "print", "numpy.isnan().any", "numpy.logical_or", "numpy.logical_or", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.isnan", "numpy.isnan", "numpy.isnan"], "function", ["None"], ["", "def", "convertBBs", "(", "bbs", ",", "rotate", ",", "numClasses", ")", ":", "\n", "    ", "if", "bbs", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "new_bbs", "=", "np", ".", "empty", "(", "(", "1", ",", "bbs", ".", "shape", "[", "1", "]", ",", "5", "+", "8", "+", "numClasses", ")", ",", "dtype", "=", "np", ".", "float32", ")", "#5 params, 8 points (used in loss), n classes", "\n", "\n", "tlX_", "=", "bbs", "[", ":", ",", ":", ",", "0", "]", "\n", "tlY_", "=", "bbs", "[", ":", ",", ":", ",", "1", "]", "\n", "trX_", "=", "bbs", "[", ":", ",", ":", ",", "2", "]", "\n", "trY_", "=", "bbs", "[", ":", ",", ":", ",", "3", "]", "\n", "brX_", "=", "bbs", "[", ":", ",", ":", ",", "4", "]", "\n", "brY_", "=", "bbs", "[", ":", ",", ":", ",", "5", "]", "\n", "blX_", "=", "bbs", "[", ":", ",", ":", ",", "6", "]", "\n", "blY_", "=", "bbs", "[", ":", ",", ":", ",", "7", "]", "\n", "\n", "if", "not", "rotate", ":", "\n", "        ", "tlX", "=", "np", ".", "minimum", ".", "reduce", "(", "(", "tlX_", ",", "blX_", ",", "trX_", ",", "brX_", ")", ")", "\n", "tlY", "=", "np", ".", "minimum", ".", "reduce", "(", "(", "tlY_", ",", "trY_", ",", "blY_", ",", "brY_", ")", ")", "\n", "trX", "=", "np", ".", "maximum", ".", "reduce", "(", "(", "tlX_", ",", "blX_", ",", "trX_", ",", "brX_", ")", ")", "\n", "trY", "=", "np", ".", "minimum", ".", "reduce", "(", "(", "tlY_", ",", "trY_", ",", "blY_", ",", "brY_", ")", ")", "\n", "brX", "=", "np", ".", "maximum", ".", "reduce", "(", "(", "tlX_", ",", "blX_", ",", "trX_", ",", "brX_", ")", ")", "\n", "brY", "=", "np", ".", "maximum", ".", "reduce", "(", "(", "tlY_", ",", "trY_", ",", "blY_", ",", "brY_", ")", ")", "\n", "blX", "=", "np", ".", "minimum", ".", "reduce", "(", "(", "tlX_", ",", "blX_", ",", "trX_", ",", "brX_", ")", ")", "\n", "blY", "=", "np", ".", "maximum", ".", "reduce", "(", "(", "tlY_", ",", "trY_", ",", "blY_", ",", "brY_", ")", ")", "\n", "", "else", ":", "\n", "        ", "tlX", "=", "tlX_", "\n", "tlY", "=", "tlY_", "\n", "trX", "=", "trX_", "\n", "trY", "=", "trY_", "\n", "brX", "=", "brX_", "\n", "brY", "=", "brY_", "\n", "blX", "=", "blX_", "\n", "blY", "=", "blY_", "\n", "\n", "", "lX", "=", "(", "tlX", "+", "blX", ")", "/", "2.0", "\n", "lY", "=", "(", "tlY", "+", "blY", ")", "/", "2.0", "\n", "rX", "=", "(", "trX", "+", "brX", ")", "/", "2.0", "\n", "rY", "=", "(", "trY", "+", "brY", ")", "/", "2.0", "\n", "d", "=", "np", ".", "sqrt", "(", "(", "lX", "-", "rX", ")", "**", "2", "+", "(", "lY", "-", "rY", ")", "**", "2", ")", "\n", "\n", "if", "(", "d", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "        ", "print", "(", "'ERROR: zero length bb {}'", ".", "format", "(", "bbs", "[", "0", "]", "[", "d", "[", "0", "]", "==", "0", "]", ")", ")", "\n", "d", "[", "d", "==", "0", "]", "=", "1", "\n", "\n", "", "hl", "=", "(", "(", "tlX", "-", "lX", ")", "*", "-", "(", "rY", "-", "lY", ")", "+", "(", "tlY", "-", "lY", ")", "*", "(", "rX", "-", "lX", ")", ")", "/", "d", "#projection of half-left edge onto transpose horz run", "\n", "hr", "=", "(", "(", "brX", "-", "rX", ")", "*", "-", "(", "lY", "-", "rY", ")", "+", "(", "brY", "-", "rY", ")", "*", "(", "lX", "-", "rX", ")", ")", "/", "d", "#projection of half-right edge onto transpose horz run", "\n", "h", "=", "(", "hl", "+", "hr", ")", "/", "2.0", "\n", "\n", "#tX = lX + h*-(rY-lY)/d", "\n", "#tY = lY + h*(rX-lX)/d", "\n", "#bX = lX - h*-(rY-lY)/d", "\n", "#bY = lY - h*(rX-lX)/d", "\n", "\n", "#etX =tX + rX-lX", "\n", "#etY =tY + rY-lY", "\n", "#ebX =bX + rX-lX", "\n", "#ebY =bY + rY-lY", "\n", "\n", "cX", "=", "(", "lX", "+", "rX", ")", "/", "2.0", "\n", "cY", "=", "(", "lY", "+", "rY", ")", "/", "2.0", "\n", "rot", "=", "np", ".", "arctan2", "(", "-", "(", "rY", "-", "lY", ")", ",", "rX", "-", "lX", ")", "\n", "height", "=", "np", ".", "abs", "(", "h", ")", "#this is half height", "\n", "width", "=", "d", "/", "2.0", "#and half width", "\n", "\n", "\n", "height", "[", "np", ".", "logical_or", "(", "np", ".", "isnan", "(", "height", ")", ",", "height", "==", "0", ")", "]", "=", "1", "\n", "width", "[", "np", ".", "logical_or", "(", "np", ".", "isnan", "(", "width", ")", ",", "width", "==", "0", ")", "]", "=", "1", "\n", "#topX = (tlX+trX)/2.0", "\n", "#topY = (tlY+trY)/2.0", "\n", "#botX = (blX+brX)/2.0", "\n", "#botY = (blY+brY)/2.0", "\n", "topX", "=", "cX", "-", "np", ".", "sin", "(", "rot", ")", "*", "height", "\n", "botX", "=", "cX", "+", "np", ".", "sin", "(", "rot", ")", "*", "height", "\n", "topY", "=", "cY", "-", "np", ".", "cos", "(", "rot", ")", "*", "height", "\n", "botY", "=", "cY", "+", "np", ".", "cos", "(", "rot", ")", "*", "height", "\n", "leftX", "=", "lX", "\n", "leftY", "=", "lY", "\n", "rightX", "=", "rX", "\n", "rightY", "=", "rY", "\n", "\n", "\n", "new_bbs", "[", ":", ",", ":", ",", "0", "]", "=", "cX", "\n", "new_bbs", "[", ":", ",", ":", ",", "1", "]", "=", "cY", "\n", "new_bbs", "[", ":", ",", ":", ",", "2", "]", "=", "rot", "\n", "new_bbs", "[", ":", ",", ":", ",", "3", "]", "=", "height", "\n", "new_bbs", "[", ":", ",", ":", ",", "4", "]", "=", "width", "\n", "new_bbs", "[", ":", ",", ":", ",", "5", "]", "=", "leftX", "\n", "new_bbs", "[", ":", ",", ":", ",", "6", "]", "=", "leftY", "\n", "new_bbs", "[", ":", ",", ":", ",", "7", "]", "=", "rightX", "\n", "new_bbs", "[", ":", ",", ":", ",", "8", "]", "=", "rightY", "\n", "new_bbs", "[", ":", ",", ":", ",", "9", "]", "=", "topX", "\n", "new_bbs", "[", ":", ",", ":", ",", "10", "]", "=", "topY", "\n", "new_bbs", "[", ":", ",", ":", ",", "11", "]", "=", "botX", "\n", "new_bbs", "[", ":", ",", ":", ",", "12", "]", "=", "botY", "\n", "#print(\"{} {}, {} {}\".format(new_bbs.shape,new_bbs[:,:,13:].shape,bbs.shape,bbs[:,:,-numClasses].shape))", "\n", "if", "numClasses", ">", "0", ":", "\n", "        ", "new_bbs", "[", ":", ",", ":", ",", "13", ":", "]", "=", "bbs", "[", ":", ",", ":", ",", "-", "numClasses", ":", "]", "\n", "\n", "", "assert", "(", "not", "np", ".", "isnan", "(", "new_bbs", ")", ".", "any", "(", ")", ")", "\n", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "new_bbs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.fixAnnotations": [[146, 441], ["enumerate", "set", "collections.defaultdict", "enumerate", "pairsToRemove.sort", "collections.defaultdict.items", "set", "collections.defaultdict", "forms_annotations.fixAnnotations.fixIsBlank"], "function", ["None"], ["", "def", "fixAnnotations", "(", "this", ",", "annotations", ")", ":", "\n", "    ", "def", "isSkipField", "(", "this", ",", "bb", ")", ":", "\n", "        ", "return", "(", "(", "this", ".", "no_blanks", "and", "(", "bb", "[", "'isBlank'", "]", "==", "'blank'", "or", "bb", "[", "'isBlank'", "]", "==", "3", ")", ")", "or", "\n", "(", "this", ".", "no_print_fields", "and", "(", "bb", "[", "'isBlank'", "]", "==", "'print'", "or", "bb", "[", "'isBlank'", "]", "==", "2", ")", ")", "or", "\n", "(", "this", ".", "no_graphics", "and", "bb", "[", "'type'", "]", "==", "'graphic'", ")", "or", "\n", "bb", "[", "'type'", "]", "==", "'fieldRow'", "or", "\n", "bb", "[", "'type'", "]", "==", "'fieldCol'", "or", "\n", "bb", "[", "'type'", "]", "==", "'fieldRegion'", "\n", ")", "\n", "", "def", "fixIsBlank", "(", "bb", ")", ":", "\n", "        ", "if", "'isBlank'", "in", "bb", ":", "\n", "            ", "if", "bb", "[", "'type'", "]", "==", "'fieldCircle'", ":", "\n", "                ", "bb", "[", "'isBlank'", "]", "=", "'print'", "\n", "", "else", ":", "\n", "                ", "if", "type", "(", "bb", "[", "'isBlank'", "]", ")", "is", "int", ":", "\n", "                    ", "isBlankMap", "=", "[", "'print'", ",", "'handwriting'", ",", "'print'", ",", "'blank'", ",", "'signature'", ",", "'ERROR5?'", ",", "'ERROR6?'", ",", "'ERROR7?'", ",", "'ERROR8?'", ",", "'ERROR9?'", "]", "\n", "if", "bb", "[", "'isBlank'", "]", ">", "len", "(", "isBlankMap", ")", ":", "\n", "                        ", "print", "(", "'bad isBlank: {} for {}'", ".", "format", "(", "bb", "[", "'isBlank'", "]", ",", "annotations", "[", "'imageFilename'", "]", ")", ")", "\n", "bb", "[", "'isBlank'", "]", "=", "'unknown'", "\n", "", "else", ":", "\n", "                        ", "bb", "[", "'isBlank'", "]", "=", "isBlankMap", "[", "bb", "[", "'isBlank'", "]", "]", "\n", "", "", "", "", "else", ":", "\n", "            ", "bb", "[", "'isBlank'", "]", "=", "'print'", "\n", "\n", "\n", "\n", "#restructure", "\n", "", "", "annotations", "[", "'byId'", "]", "=", "{", "}", "\n", "for", "iii", ",", "bb", "in", "enumerate", "(", "annotations", "[", "'textBBs'", "]", ")", ":", "\n", "        ", "fixIsBlank", "(", "bb", ")", "\n", "annotations", "[", "'byId'", "]", "[", "bb", "[", "'id'", "]", "]", "=", "bb", "\n", "", "for", "bb", "in", "annotations", "[", "'fieldBBs'", "]", ":", "\n", "        ", "fixIsBlank", "(", "bb", ")", "\n", "annotations", "[", "'byId'", "]", "[", "bb", "[", "'id'", "]", "]", "=", "bb", "\n", "", "if", "'samePairs'", "in", "annotations", ":", "\n", "        ", "if", "not", "this", ".", "only_opposite_pairs", ":", "\n", "            ", "annotations", "[", "'pairs'", "]", "+=", "annotations", "[", "'samePairs'", "]", "\n", "", "del", "annotations", "[", "'samePairs'", "]", "\n", "\n", "\n", "", "numPairsWithoutBB", "=", "0", "\n", "for", "id1", ",", "id2", "in", "annotations", "[", "'pairs'", "]", ":", "\n", "        ", "if", "id1", "not", "in", "annotations", "[", "'byId'", "]", "or", "id2", "not", "in", "annotations", "[", "'byId'", "]", ":", "\n", "            ", "numPairsWithoutBB", "+=", "1", "\n", "\n", "", "", "toAdd", "=", "[", "]", "\n", "idsToRemove", "=", "set", "(", ")", "\n", "\n", "#enumerations inside a row they are paired to should be removed", "\n", "#enumerations paired with the left row of a chained row need to be paired with the right", "\n", "pairsToRemove", "=", "[", "]", "\n", "pairsToAdd", "=", "[", "]", "\n", "for", "bb", "in", "annotations", "[", "'textBBs'", "]", ":", "\n", "        ", "if", "bb", "[", "'type'", "]", "==", "'textNumber'", ":", "\n", "            ", "for", "pair", "in", "annotations", "[", "'pairs'", "]", ":", "\n", "                ", "if", "bb", "[", "'id'", "]", "in", "pair", ":", "\n", "                    ", "if", "pair", "[", "0", "]", "==", "bb", "[", "'id'", "]", ":", "\n", "                        ", "otherId", "=", "pair", "[", "1", "]", "\n", "", "else", ":", "\n", "                        ", "otherId", "=", "pair", "[", "0", "]", "\n", "", "otherBB", "=", "annotations", "[", "'byId'", "]", "[", "otherId", "]", "\n", "if", "otherBB", "[", "'type'", "]", "==", "'fieldRow'", ":", "\n", "                        ", "if", "avg_x", "(", "bb", ")", ">", "left_x", "(", "otherBB", ")", "and", "avg_x", "(", "bb", ")", "<", "right_x", "(", "otherBB", ")", ":", "\n", "                            ", "idsToRemove", ".", "add", "(", "bb", "[", "'id'", "]", ")", "\n", "#else TODO chained row case", "\n", "\n", "\n", "\n", "#remove fields we're skipping", "\n", "#reconnect para chains we broke by removing them", "\n", "#print('removing fields')", "\n", "", "", "", "", "", "", "idsToFix", "=", "[", "]", "\n", "circleIds", "=", "[", "]", "\n", "for", "bb", "in", "annotations", "[", "'fieldBBs'", "]", ":", "\n", "        ", "id", "=", "bb", "[", "'id'", "]", "\n", "#print('skip:{}, type:{}'.format(isSkipField(this,bb),bb['type']))", "\n", "if", "isSkipField", "(", "this", ",", "bb", ")", ":", "\n", "#print('remove {}'.format(id))", "\n", "            ", "idsToRemove", ".", "add", "(", "id", ")", "\n", "if", "bb", "[", "'type'", "]", "==", "'fieldP'", ":", "\n", "                ", "idsToFix", ".", "append", "(", "id", ")", "\n", "", "", "elif", "bb", "[", "'type'", "]", "==", "'fieldCircle'", ":", "\n", "            ", "circleIds", ".", "append", "(", "id", ")", "\n", "if", "this", ".", "swapCircle", ":", "\n", "                ", "annotations", "[", "'byId'", "]", "[", "id", "]", "[", "'type'", "]", "=", "'textCircle'", "\n", "\n", "", "", "", "del", "annotations", "[", "'fieldBBs'", "]", "\n", "del", "annotations", "[", "'textBBs'", "]", "\n", "\n", "\n", "parasLinkedTo", "=", "defaultdict", "(", "list", ")", "\n", "pairsToRemove", "=", "[", "]", "\n", "for", "i", ",", "pair", "in", "enumerate", "(", "annotations", "[", "'pairs'", "]", ")", ":", "\n", "        ", "assert", "(", "len", "(", "pair", ")", "==", "2", ")", "\n", "if", "pair", "[", "0", "]", "not", "in", "annotations", "[", "'byId'", "]", "or", "pair", "[", "1", "]", "not", "in", "annotations", "[", "'byId'", "]", ":", "\n", "            ", "pairsToRemove", ".", "append", "(", "i", ")", "\n", "", "elif", "pair", "[", "0", "]", "in", "idsToFix", "and", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", "[", "-", "1", "]", "==", "'P'", ":", "\n", "            ", "parasLinkedTo", "[", "pair", "[", "0", "]", "]", ".", "append", "(", "pair", "[", "1", "]", ")", "\n", "pairsToRemove", ".", "append", "(", "i", ")", "\n", "", "elif", "pair", "[", "1", "]", "in", "idsToFix", "and", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "[", "-", "1", "]", "==", "'P'", ":", "\n", "            ", "parasLinkedTo", "[", "pair", "[", "1", "]", "]", ".", "append", "(", "pair", "[", "0", "]", ")", "\n", "pairsToRemove", ".", "append", "(", "i", ")", "\n", "", "elif", "pair", "[", "0", "]", "in", "idsToRemove", "or", "pair", "[", "1", "]", "in", "idsToRemove", ":", "\n", "            ", "pairsToRemove", ".", "append", "(", "i", ")", "\n", "", "elif", "(", "this", ".", "only_opposite_pairs", "and", "\n", "(", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "[", ":", "4", "]", "==", "'text'", "and", "\n", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", "[", ":", "4", "]", "==", "'text'", ")", "or", "\n", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "[", ":", "4", "]", "==", "'field'", "and", "\n", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", "[", ":", "4", "]", "==", "'field'", ")", ")", ")", ":", "\n", "            ", "pairsToRemove", ".", "append", "(", "i", ")", "\n", "\n", "", "", "pairsToRemove", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "last", "=", "None", "\n", "for", "i", "in", "pairsToRemove", ":", "\n", "        ", "if", "i", "==", "last", ":", "#in case of duplicated", "\n", "            ", "continue", "\n", "#print('del pair: {}'.format(annotations['pairs'][i]))", "\n", "", "del", "annotations", "[", "'pairs'", "]", "[", "i", "]", "\n", "last", "=", "i", "\n", "", "for", "_", ",", "ids", "in", "parasLinkedTo", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "ids", ")", "==", "2", ":", "\n", "            ", "if", "ids", "[", "0", "]", "not", "in", "idsToRemove", "and", "ids", "[", "1", "]", "not", "in", "idsToRemove", ":", "\n", "#print('adding: {}'.format([ids[0],ids[1]]))", "\n", "#annotations['pairs'].append([ids[0],ids[1]])", "\n", "                ", "toAdd", ".", "append", "(", "[", "ids", "[", "0", "]", ",", "ids", "[", "1", "]", "]", ")", "\n", "#else I don't know what's going on", "\n", "\n", "\n", "", "", "", "for", "id", "in", "idsToRemove", ":", "\n", "#print('deleted: {}'.format(annotations['byId'][id]))", "\n", "        ", "del", "annotations", "[", "'byId'", "]", "[", "id", "]", "\n", "\n", "\n", "#skipped link between col and enumeration when enumeration is between col header and col", "\n", "", "for", "pair", "in", "annotations", "[", "'pairs'", "]", ":", "\n", "        ", "notNum", "=", "num", "=", "None", "\n", "if", "pair", "[", "0", "]", "in", "annotations", "[", "'byId'", "]", "and", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "==", "'textNumber'", ":", "\n", "            ", "num", "=", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "\n", "notNum", "=", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "\n", "", "elif", "pair", "[", "1", "]", "in", "annotations", "[", "'byId'", "]", "and", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", "==", "'textNumber'", ":", "\n", "            ", "num", "=", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "\n", "notNum", "=", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "\n", "\n", "", "if", "notNum", "is", "not", "None", "and", "notNum", "[", "'type'", "]", "!=", "'textNumber'", ":", "\n", "            ", "for", "pair2", "in", "annotations", "[", "'pairs'", "]", ":", "\n", "                ", "if", "notNum", "[", "'id'", "]", "in", "pair2", ":", "\n", "                    ", "if", "notNum", "[", "'id'", "]", "==", "pair2", "[", "0", "]", ":", "\n", "                        ", "otherId", "=", "pair2", "[", "1", "]", "\n", "", "else", ":", "\n", "                        ", "otherId", "=", "pair2", "[", "0", "]", "\n", "", "if", "annotations", "[", "'byId'", "]", "[", "otherId", "]", "[", "'type'", "]", "==", "'fieldCol'", "and", "avg_y", "(", "annotations", "[", "'byId'", "]", "[", "otherId", "]", ")", ">", "avg_y", "(", "annotations", "[", "'byId'", "]", "[", "num", "[", "'id'", "]", "]", ")", ":", "\n", "                        ", "toAdd", ".", "append", "(", "[", "num", "[", "'id'", "]", ",", "otherId", "]", ")", "\n", "\n", "", "", "", "", "", "for", "pair", "in", "annotations", "[", "'pairs'", "]", ":", "\n", "        ", "assert", "(", "len", "(", "pair", ")", "==", "2", ")", "\n", "#heirarchy labels.", "\n", "#for pair in annotations['samePairs']:", "\n", "#    text=textMinor=None", "\n", "#    if annotations['byId'][pair[0]]['type']=='text':", "\n", "#        text=pair[0]", "\n", "#        if annotations['byId'][pair[1]]['type']=='textMinor':", "\n", "#            textMinor=pair[1]", "\n", "#    elif annotations['byId'][pair[1]]['type']=='text':", "\n", "#        text=pair[1]", "\n", "#        if annotations['byId'][pair[0]]['type']=='textMinor':", "\n", "#            textMinor=pair[0]", "\n", "#    else:#catch case of minor-minor-field", "\n", "#        if annotations['byId'][pair[1]]['type']=='textMinor' and annotations['byId'][pair[0]]['type']=='textMinor':", "\n", "#            a=pair[0]", "\n", "#            b=pair[1]", "\n", "#            for pair2 in annotations['pairs']:", "\n", "#                if a in pair2:", "\n", "#                    if pair2[0]==a:", "\n", "#                        otherId=pair2[1]", "\n", "#                    else:", "\n", "#                        otherId=pair2[0]", "\n", "#                    toAdd.append([b,otherId])", "\n", "#                if b in pair2:", "\n", "#                    if pair2[0]==b:", "\n", "#                        otherId=pair2[1]", "\n", "#                    else:", "\n", "#                        otherId=pair2[0]", "\n", "#                    toAdd.append([a,otherId])", "\n", "\n", "#    ", "\n", "#    if text is not None and textMinor is not None:", "\n", "#        for pair2 in annotations['pairs']:", "\n", "#            if textMinor in pair2:", "\n", "#                if pair2[0]==textMinor:", "\n", "#                    otherId=pair2[1]", "\n", "#                else:", "\n", "#                    otherId=pair2[0]", "\n", "#                toAdd.append([text,otherId])", "\n", "#        for pair2 in annotations['samePairs']:", "\n", "#            if textMinor in pair2:", "\n", "#                if pair2[0]==textMinor:", "\n", "#                    otherId=pair2[1]", "\n", "#                else:", "\n", "#                    otherId=pair2[0]", "\n", "#                if annotations['byId'][otherId]['type']=='textMinor':", "\n", "#                    toAddSame.append([text,otherId])", "\n", "\n", "", "for", "pair", "in", "toAdd", ":", "\n", "        ", "assert", "(", "len", "(", "pair", ")", "==", "2", ")", "\n", "if", "pair", "not", "in", "annotations", "[", "'pairs'", "]", "and", "[", "pair", "[", "1", "]", ",", "pair", "[", "0", "]", "]", "not", "in", "annotations", "[", "'pairs'", "]", ":", "\n", "             ", "annotations", "[", "'pairs'", "]", ".", "append", "(", "pair", ")", "\n", "#annotations['pairs']+=toAdd", "\n", "\n", "#handle groups of things that are intended to be circled or crossed out", "\n", "#first identify groups", "\n", "", "", "circleGroups", "=", "{", "}", "\n", "circleGroupId", "=", "0", "\n", "#also find text-field pairings", "\n", "paired", "=", "set", "(", ")", "\n", "for", "pair", "in", "annotations", "[", "'pairs'", "]", ":", "\n", "        ", "if", "pair", "[", "0", "]", "in", "circleIds", "and", "pair", "[", "1", "]", "in", "circleIds", ":", "\n", "            ", "group0", "=", "None", "\n", "group1", "=", "None", "\n", "for", "id", ",", "group", "in", "circleGroups", ".", "items", "(", ")", ":", "\n", "                ", "if", "pair", "[", "0", "]", "in", "group", ":", "\n", "                    ", "group0", "=", "id", "\n", "", "if", "pair", "[", "1", "]", "in", "group", ":", "\n", "                    ", "group1", "=", "id", "\n", "", "", "if", "group0", "is", "not", "None", ":", "\n", "                ", "if", "group1", "is", "None", ":", "\n", "                    ", "circleGroups", "[", "group0", "]", ".", "append", "(", "pair", "[", "1", "]", ")", "\n", "", "elif", "group0", "!=", "group1", ":", "\n", "                    ", "circleGroups", "[", "group0", "]", "+=", "circleGroups", "[", "group1", "]", "\n", "del", "circleGroups", "[", "group1", "]", "\n", "", "", "elif", "group1", "is", "not", "None", ":", "\n", "                ", "circleGroups", "[", "group1", "]", ".", "append", "(", "pair", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "circleGroups", "[", "circleGroupId", "]", "=", "pair", ".", "copy", "(", ")", "\n", "circleGroupId", "+=", "1", "\n", "\n", "", "", "if", "pair", "[", "0", "]", "in", "annotations", "[", "'byId'", "]", "and", "pair", "[", "1", "]", "in", "annotations", "[", "'byId'", "]", ":", "\n", "            ", "cls0", "=", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "[", ":", "4", "]", "==", "'text'", "\n", "cls1", "=", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", "[", ":", "4", "]", "==", "'text'", "\n", "if", "cls0", "!=", "cls1", ":", "\n", "                ", "paired", ".", "add", "(", "pair", "[", "0", "]", ")", "\n", "paired", ".", "add", "(", "pair", "[", "1", "]", ")", "\n", "\n", "", "", "", "for", "pair", "in", "annotations", "[", "'pairs'", "]", ":", "\n", "        ", "assert", "(", "len", "(", "pair", ")", "==", "2", ")", "\n", "\n", "#what pairs to each group?", "\n", "", "groupPairedTo", "=", "defaultdict", "(", "list", ")", "\n", "for", "pair", "in", "annotations", "[", "'pairs'", "]", ":", "\n", "        ", "if", "pair", "[", "0", "]", "in", "circleIds", "and", "pair", "[", "1", "]", "not", "in", "circleIds", ":", "\n", "            ", "for", "id", ",", "group", "in", "circleGroups", ".", "items", "(", ")", ":", "\n", "                ", "if", "pair", "[", "0", "]", "in", "group", ":", "\n", "                    ", "groupPairedTo", "[", "id", "]", ".", "append", "(", "pair", "[", "1", "]", ")", "\n", "\n", "", "", "", "if", "pair", "[", "1", "]", "in", "circleIds", "and", "pair", "[", "0", "]", "not", "in", "circleIds", ":", "\n", "            ", "for", "id", ",", "group", "in", "circleGroups", ".", "items", "(", ")", ":", "\n", "                ", "if", "pair", "[", "1", "]", "in", "group", ":", "\n", "                    ", "groupPairedTo", "[", "id", "]", ".", "append", "(", "pair", "[", "0", "]", ")", "\n", "\n", "\n", "", "", "", "", "for", "pair", "in", "annotations", "[", "'pairs'", "]", ":", "\n", "        ", "assert", "(", "len", "(", "pair", ")", "==", "2", ")", "\n", "#add pairs", "\n", "", "toAdd", "=", "[", "]", "\n", "if", "not", "this", ".", "only_opposite_pairs", ":", "\n", "        ", "for", "gid", ",", "group", "in", "circleGroups", ".", "items", "(", ")", ":", "\n", "            ", "for", "id", "in", "group", ":", "\n", "                ", "for", "id2", "in", "group", ":", "\n", "                    ", "if", "id", "!=", "id2", ":", "\n", "                        ", "toAdd", ".", "append", "(", "[", "id", ",", "id2", "]", ")", "\n", "", "", "for", "id2", "in", "groupPairedTo", "[", "gid", "]", ":", "\n", "                    ", "toAdd", ".", "append", "(", "[", "id", ",", "id2", "]", ")", "\n", "", "", "", "", "for", "pair", "in", "toAdd", ":", "\n", "        ", "assert", "(", "len", "(", "pair", ")", "==", "2", ")", "\n", "if", "pair", "not", "in", "annotations", "[", "'pairs'", "]", "and", "[", "pair", "[", "1", "]", ",", "pair", "[", "0", "]", "]", "not", "in", "annotations", "[", "'pairs'", "]", ":", "\n", "             ", "annotations", "[", "'pairs'", "]", ".", "append", "(", "pair", ")", "\n", "\n", "#mark each bb that is chained to a cross-class pairing", "\n", "", "", "while", "True", ":", "\n", "        ", "size", "=", "len", "(", "paired", ")", "\n", "for", "pair", "in", "annotations", "[", "'pairs'", "]", ":", "\n", "            ", "if", "pair", "[", "0", "]", "in", "paired", ":", "\n", "                ", "paired", ".", "add", "(", "pair", "[", "1", "]", ")", "\n", "", "elif", "pair", "[", "1", "]", "in", "paired", ":", "\n", "                ", "paired", ".", "add", "(", "pair", "[", "0", "]", ")", "\n", "", "", "if", "len", "(", "paired", ")", "<=", "size", ":", "\n", "            ", "break", "#at the end of every chain", "\n", "", "", "for", "id", "in", "paired", ":", "\n", "        ", "if", "id", "in", "annotations", "[", "'byId'", "]", ":", "\n", "            ", "annotations", "[", "'byId'", "]", "[", "id", "]", "[", "'paired'", "]", "=", "True", "\n", "\n", "", "", "for", "pair", "in", "annotations", "[", "'pairs'", "]", ":", "\n", "        ", "assert", "(", "len", "(", "pair", ")", "==", "2", ")", "\n", "\n", "\n", "", "return", "numPairsWithoutBB", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getBBWithPoints": [[442, 512], ["numpy.empty", "enumerate", "len", "len"], "function", ["None"], ["", "def", "getBBWithPoints", "(", "useBBs", ",", "s", ",", "useBlankClass", "=", "False", ",", "usePairedClass", "=", "False", ",", "useAllClass", "=", "[", "]", ")", ":", "\n", "\n", "    ", "numClasses", "=", "2", "\n", "if", "useBlankClass", ":", "\n", "        ", "numClasses", "+=", "1", "\n", "", "if", "usePairedClass", ":", "\n", "        ", "numClasses", "+=", "1", "\n", "", "bbs", "=", "np", ".", "empty", "(", "(", "1", ",", "len", "(", "useBBs", ")", ",", "8", "+", "8", "+", "numClasses", ")", ",", "dtype", "=", "np", ".", "float32", ")", "#2x4 corners, 2x4 cross-points, 2 classes", "\n", "for", "j", ",", "bb", "in", "enumerate", "(", "useBBs", ")", ":", "\n", "        ", "tlX", "=", "bb", "[", "'poly_points'", "]", "[", "0", "]", "[", "0", "]", "\n", "tlY", "=", "bb", "[", "'poly_points'", "]", "[", "0", "]", "[", "1", "]", "\n", "trX", "=", "bb", "[", "'poly_points'", "]", "[", "1", "]", "[", "0", "]", "\n", "trY", "=", "bb", "[", "'poly_points'", "]", "[", "1", "]", "[", "1", "]", "\n", "brX", "=", "bb", "[", "'poly_points'", "]", "[", "2", "]", "[", "0", "]", "\n", "brY", "=", "bb", "[", "'poly_points'", "]", "[", "2", "]", "[", "1", "]", "\n", "blX", "=", "bb", "[", "'poly_points'", "]", "[", "3", "]", "[", "0", "]", "\n", "blY", "=", "bb", "[", "'poly_points'", "]", "[", "3", "]", "[", "1", "]", "\n", "\n", "###DEBUG", "\n", "#h = math.sqrt(((tlX+trX)/2 - (blX+brX)/2)**2 + ((tlY+trY)/2 - (blY+brY)/2)**2)", "\n", "#w = math.sqrt(((tlX+blX)/2 - (brX+trX)/2)**2 + ((tlY+blY)/2 - (trY+brY)/2)**2)", "\n", "#assert(h/w<5 or min(h,w)<1)", "\n", "###DEBUG", "\n", "\n", "\n", "bbs", "[", ":", ",", "j", ",", "0", "]", "=", "tlX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "1", "]", "=", "tlY", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "2", "]", "=", "trX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "3", "]", "=", "trY", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "4", "]", "=", "brX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "5", "]", "=", "brY", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "6", "]", "=", "blX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "7", "]", "=", "blY", "*", "s", "\n", "#we add these for conveince to crop BBs within window", "\n", "bbs", "[", ":", ",", "j", ",", "8", "]", "=", "s", "*", "(", "tlX", "+", "blX", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "9", "]", "=", "s", "*", "(", "tlY", "+", "blY", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "10", "]", "=", "s", "*", "(", "trX", "+", "brX", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "11", "]", "=", "s", "*", "(", "trY", "+", "brY", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "12", "]", "=", "s", "*", "(", "tlX", "+", "trX", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "13", "]", "=", "s", "*", "(", "tlY", "+", "trY", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "14", "]", "=", "s", "*", "(", "brX", "+", "blX", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "15", "]", "=", "s", "*", "(", "brY", "+", "blY", ")", "/", "2.0", "\n", "\n", "#classes", "\n", "if", "bb", "[", "'type'", "]", "==", "'detectorPrediction'", ":", "\n", "            ", "bbs", "[", ":", ",", "j", ",", "16", "]", "=", "bb", "[", "'textPred'", "]", "\n", "bbs", "[", ":", ",", "j", ",", "17", "]", "=", "bb", "[", "'fieldPred'", "]", "\n", "", "else", ":", "\n", "            ", "field", "=", "bb", "[", "'type'", "]", "[", ":", "4", "]", "!=", "'text'", "\n", "text", "=", "not", "field", "\n", "bbs", "[", ":", ",", "j", ",", "16", "]", "=", "1", "if", "text", "else", "0", "\n", "bbs", "[", ":", ",", "j", ",", "17", "]", "=", "1", "if", "field", "else", "0", "\n", "", "index", "=", "18", "\n", "if", "len", "(", "useAllClass", ")", ">", "0", ":", "\n", "            ", "for", "clas", "in", "useAllClass", ":", "\n", "                ", "bbs", "[", ":", ",", "j", ",", "index", "]", "=", "bb", "[", "'type'", "]", "==", "clas", "\n", "index", "+=", "1", "\n", "", "", "if", "useBlankClass", ":", "\n", "            ", "if", "bb", "[", "'type'", "]", "==", "'detectorPrediction'", ":", "\n", "                ", "bbs", "[", ":", ",", "j", ",", "index", "]", "=", "bb", "[", "'blankPred'", "]", "\n", "", "else", ":", "\n", "                ", "blank", "=", "(", "bb", "[", "'isBlank'", "]", "==", "'blank'", "or", "bb", "[", "'isBlank'", "]", "==", "3", ")", "if", "'isBlank'", "in", "bb", "else", "False", "\n", "bbs", "[", ":", ",", "j", ",", "index", "]", "=", "1", "if", "blank", "else", "0", "\n", "", "index", "+=", "1", "\n", "", "if", "usePairedClass", ":", "\n", "            ", "assert", "(", "bb", "[", "'type'", "]", "!=", "'detectorPrediction'", ")", "\n", "paired", "=", "bb", "[", "'paired'", "]", "if", "'paired'", "in", "bb", "else", "False", "\n", "bbs", "[", ":", ",", "j", ",", "index", "]", "=", "1", "if", "paired", "else", "0", "\n", "index", "+=", "1", "\n", "", "", "return", "bbs", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getStartEndGT": [[513, 581], ["numpy.empty", "numpy.empty", "math.sqrt", "len", "len"], "function", ["None"], ["", "def", "getStartEndGT", "(", "useBBs", ",", "s", ",", "useBlankClass", "=", "False", ")", ":", "\n", "\n", "\n", "    ", "if", "useBlankClass", ":", "\n", "        ", "numClasses", "=", "3", "\n", "", "else", ":", "\n", "        ", "numClasses", "=", "2", "\n", "", "start_gt", "=", "np", ".", "empty", "(", "(", "1", ",", "len", "(", "useBBs", ")", ",", "4", "+", "numClasses", ")", ",", "dtype", "=", "np", ".", "float32", ")", "#x,y,r,h, x classes", "\n", "end_gt", "=", "np", ".", "empty", "(", "(", "1", ",", "len", "(", "useBBs", ")", ",", "4", "+", "numClasses", ")", ",", "dtype", "=", "np", ".", "float32", ")", "#x,y,r,h, x classes", "\n", "j", "=", "0", "\n", "for", "bb", "in", "useBBs", ":", "\n", "        ", "tlX", "=", "bb", "[", "'poly_points'", "]", "[", "0", "]", "[", "0", "]", "\n", "tlY", "=", "bb", "[", "'poly_points'", "]", "[", "0", "]", "[", "1", "]", "\n", "trX", "=", "bb", "[", "'poly_points'", "]", "[", "1", "]", "[", "0", "]", "\n", "trY", "=", "bb", "[", "'poly_points'", "]", "[", "1", "]", "[", "1", "]", "\n", "brX", "=", "bb", "[", "'poly_points'", "]", "[", "2", "]", "[", "0", "]", "\n", "brY", "=", "bb", "[", "'poly_points'", "]", "[", "2", "]", "[", "1", "]", "\n", "blX", "=", "bb", "[", "'poly_points'", "]", "[", "3", "]", "[", "0", "]", "\n", "blY", "=", "bb", "[", "'poly_points'", "]", "[", "3", "]", "[", "1", "]", "\n", "\n", "field", "=", "bb", "[", "'type'", "]", "[", ":", "4", "]", "!=", "'text'", "\n", "if", "useBlankClass", "and", "(", "bb", "[", "'isBlank'", "]", "==", "'blank'", "or", "bb", "[", "'isBlank'", "]", "==", "3", ")", ":", "\n", "            ", "field", "=", "False", "\n", "text", "=", "False", "\n", "blank", "=", "True", "\n", "", "else", ":", "\n", "            ", "text", "=", "not", "field", "\n", "blank", "=", "False", "\n", "\n", "", "lX", "=", "(", "tlX", "+", "blX", ")", "/", "2.0", "\n", "lY", "=", "(", "tlY", "+", "blY", ")", "/", "2.0", "\n", "rX", "=", "(", "trX", "+", "brX", ")", "/", "2.0", "\n", "rY", "=", "(", "trY", "+", "brY", ")", "/", "2.0", "\n", "d", "=", "math", ".", "sqrt", "(", "(", "lX", "-", "rX", ")", "**", "2", "+", "(", "lY", "-", "rY", ")", "**", "2", ")", "\n", "\n", "hl", "=", "(", "(", "tlX", "-", "lX", ")", "*", "-", "(", "rY", "-", "lY", ")", "+", "(", "tlY", "-", "lY", ")", "*", "(", "rX", "-", "lX", ")", ")", "/", "d", "#projection of half-left edge onto transpose horz run", "\n", "hr", "=", "(", "(", "brX", "-", "rX", ")", "*", "-", "(", "lY", "-", "rY", ")", "+", "(", "brY", "-", "rY", ")", "*", "(", "lX", "-", "rX", ")", ")", "/", "d", "#projection of half-right edge onto transpose horz run", "\n", "h", "=", "(", "hl", "+", "hr", ")", "/", "2.0", "\n", "\n", "tX", "=", "lX", "+", "h", "*", "-", "(", "rY", "-", "lY", ")", "/", "d", "\n", "tY", "=", "lY", "+", "h", "*", "(", "rX", "-", "lX", ")", "/", "d", "\n", "bX", "=", "lX", "-", "h", "*", "-", "(", "rY", "-", "lY", ")", "/", "d", "\n", "bY", "=", "lY", "-", "h", "*", "(", "rX", "-", "lX", ")", "/", "d", "\n", "start_gt", "[", ":", ",", "j", ",", "0", "]", "=", "tX", "*", "s", "\n", "start_gt", "[", ":", ",", "j", ",", "1", "]", "=", "tY", "*", "s", "\n", "start_gt", "[", ":", ",", "j", ",", "2", "]", "=", "bX", "*", "s", "\n", "start_gt", "[", ":", ",", "j", ",", "3", "]", "=", "bY", "*", "s", "\n", "\n", "etX", "=", "tX", "+", "rX", "-", "lX", "\n", "etY", "=", "tY", "+", "rY", "-", "lY", "\n", "ebX", "=", "bX", "+", "rX", "-", "lX", "\n", "ebY", "=", "bY", "+", "rY", "-", "lY", "\n", "end_gt", "[", ":", ",", "j", ",", "0", "]", "=", "etX", "*", "s", "\n", "end_gt", "[", ":", ",", "j", ",", "1", "]", "=", "etY", "*", "s", "\n", "end_gt", "[", ":", ",", "j", ",", "2", "]", "=", "ebX", "*", "s", "\n", "end_gt", "[", ":", ",", "j", ",", "3", "]", "=", "ebY", "*", "s", "\n", "\n", "#classes", "\n", "start_gt", "[", ":", ",", "j", ",", "4", "]", "=", "1", "if", "text", "else", "0", "\n", "start_gt", "[", ":", ",", "j", ",", "5", "]", "=", "1", "if", "field", "else", "0", "\n", "if", "useBlankClass", ":", "\n", "            ", "start_gt", "[", ":", ",", "j", ",", "6", "]", "=", "1", "if", "blank", "else", "0", "\n", "", "end_gt", "[", ":", ",", "j", ",", "4", "]", "=", "1", "if", "text", "else", "0", "\n", "end_gt", "[", ":", ",", "j", ",", "5", "]", "=", "1", "if", "field", "else", "0", "\n", "if", "useBlankClass", ":", "\n", "            ", "end_gt", "[", ":", ",", "j", ",", "6", "]", "=", "1", "if", "blank", "else", "0", "\n", "", "j", "+=", "1", "\n", "", "return", "start_gt", ",", "end_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getBBInfo": [[582, 653], ["math.sqrt", "numpy.arctan2", "numpy.minimum.reduce", "numpy.minimum.reduce", "numpy.maximum.reduce", "numpy.minimum.reduce", "numpy.maximum.reduce", "numpy.maximum.reduce", "numpy.minimum.reduce", "numpy.maximum.reduce", "numpy.abs", "numpy.abs"], "function", ["None"], ["", "def", "getBBInfo", "(", "bb", ",", "rotate", ",", "useBlankClass", "=", "False", ")", ":", "\n", "\n", "    ", "tlX_", "=", "bb", "[", "'poly_points'", "]", "[", "0", "]", "[", "0", "]", "\n", "tlY_", "=", "bb", "[", "'poly_points'", "]", "[", "0", "]", "[", "1", "]", "\n", "trX_", "=", "bb", "[", "'poly_points'", "]", "[", "1", "]", "[", "0", "]", "\n", "trY_", "=", "bb", "[", "'poly_points'", "]", "[", "1", "]", "[", "1", "]", "\n", "brX_", "=", "bb", "[", "'poly_points'", "]", "[", "2", "]", "[", "0", "]", "\n", "brY_", "=", "bb", "[", "'poly_points'", "]", "[", "2", "]", "[", "1", "]", "\n", "blX_", "=", "bb", "[", "'poly_points'", "]", "[", "3", "]", "[", "0", "]", "\n", "blY_", "=", "bb", "[", "'poly_points'", "]", "[", "3", "]", "[", "1", "]", "\n", "\n", "if", "not", "rotate", ":", "\n", "        ", "tlX", "=", "np", ".", "minimum", ".", "reduce", "(", "(", "tlX_", ",", "blX_", ",", "trX_", ",", "brX_", ")", ")", "\n", "tlY", "=", "np", ".", "minimum", ".", "reduce", "(", "(", "tlY_", ",", "trY_", ",", "blY_", ",", "brY_", ")", ")", "\n", "trX", "=", "np", ".", "maximum", ".", "reduce", "(", "(", "tlX_", ",", "blX_", ",", "trX_", ",", "brX_", ")", ")", "\n", "trY", "=", "np", ".", "minimum", ".", "reduce", "(", "(", "tlY_", ",", "trY_", ",", "blY_", ",", "brY_", ")", ")", "\n", "brX", "=", "np", ".", "maximum", ".", "reduce", "(", "(", "tlX_", ",", "blX_", ",", "trX_", ",", "brX_", ")", ")", "\n", "brY", "=", "np", ".", "maximum", ".", "reduce", "(", "(", "tlY_", ",", "trY_", ",", "blY_", ",", "brY_", ")", ")", "\n", "blX", "=", "np", ".", "minimum", ".", "reduce", "(", "(", "tlX_", ",", "blX_", ",", "trX_", ",", "brX_", ")", ")", "\n", "blY", "=", "np", ".", "maximum", ".", "reduce", "(", "(", "tlY_", ",", "trY_", ",", "blY_", ",", "brY_", ")", ")", "\n", "", "else", ":", "\n", "        ", "tlX", "=", "tlX_", "\n", "tlY", "=", "tlY_", "\n", "trX", "=", "trX_", "\n", "trY", "=", "trY_", "\n", "brX", "=", "brX_", "\n", "brY", "=", "brY_", "\n", "blX", "=", "blX_", "\n", "blY", "=", "blY_", "\n", "\n", "\n", "", "if", "bb", "[", "'type'", "]", "==", "'detectorPrediction'", ":", "\n", "        ", "text", "=", "bb", "[", "'textPred'", "]", "\n", "field", "=", "bb", "[", "'fieldPred'", "]", "\n", "blank", "=", "bb", "[", "'blankPred'", "]", "if", "'blankPred'", "in", "bb", "else", "None", "\n", "nn", "=", "bb", "[", "'nnPred'", "]", "if", "'nnPred'", "in", "bb", "else", "None", "\n", "", "else", ":", "\n", "        ", "field", "=", "bb", "[", "'type'", "]", "[", ":", "4", "]", "!=", "'text'", "\n", "if", "useBlankClass", ":", "\n", "            ", "blank", "=", "bb", "[", "'isBlank'", "]", "==", "'blank'", "or", "bb", "[", "'isBlank'", "]", "==", "3", "\n", "", "else", ":", "\n", "            ", "blank", "=", "None", "\n", "", "text", "=", "not", "field", "\n", "nn", "=", "None", "\n", "\n", "", "lX", "=", "(", "tlX", "+", "blX", ")", "/", "2.0", "\n", "lY", "=", "(", "tlY", "+", "blY", ")", "/", "2.0", "\n", "rX", "=", "(", "trX", "+", "brX", ")", "/", "2.0", "\n", "rY", "=", "(", "trY", "+", "brY", ")", "/", "2.0", "\n", "d", "=", "math", ".", "sqrt", "(", "(", "lX", "-", "rX", ")", "**", "2", "+", "(", "lY", "-", "rY", ")", "**", "2", ")", "\n", "\n", "#orthX = -(rY-lY)", "\n", "#orthY = (rX-lX)", "\n", "#origLX = blX-tlX", "\n", "#origLY = blY-tlY", "\n", "#origRX = brX-trX", "\n", "#origRY = brY-trY", "\n", "#hl = (orthX*origLX + orthY*origLY)/d", "\n", "#hr = (orthX*origRX + orthY*origRY)/d", "\n", "hl", "=", "(", "(", "tlX", "-", "lX", ")", "*", "-", "(", "rY", "-", "lY", ")", "+", "(", "tlY", "-", "lY", ")", "*", "(", "rX", "-", "lX", ")", ")", "/", "d", "#projection of half-left edge onto transpose horz run", "\n", "hr", "=", "(", "(", "brX", "-", "rX", ")", "*", "-", "(", "lY", "-", "rY", ")", "+", "(", "brY", "-", "rY", ")", "*", "(", "lX", "-", "rX", ")", ")", "/", "d", "#projection of half-right edge onto transpose horz run", "\n", "h", "=", "(", "np", ".", "abs", "(", "hl", ")", "+", "np", ".", "abs", "(", "hr", ")", ")", "/", "2.0", "\n", "#h=0", "\n", "\n", "cX", "=", "(", "lX", "+", "rX", ")", "/", "2.0", "\n", "cY", "=", "(", "lY", "+", "rY", ")", "/", "2.0", "\n", "rot", "=", "np", ".", "arctan2", "(", "-", "(", "rY", "-", "lY", ")", ",", "rX", "-", "lX", ")", "\n", "height", "=", "h", "*", "2", "#use full height", "\n", "width", "=", "d", "\n", "\n", "return", "cX", ",", "cY", ",", "height", ",", "width", ",", "rot", ",", "text", ",", "field", ",", "blank", ",", "nn", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getResponseBBIdList_": [[655, 667], ["responseBBList.append"], "function", ["None"], ["", "def", "getResponseBBIdList_", "(", "this", ",", "queryId", ",", "annotations", ")", ":", "\n", "    ", "responseBBList", "=", "[", "]", "\n", "for", "pair", "in", "annotations", "[", "'pairs'", "]", ":", "#done already +annotations['samePairs']:", "\n", "        ", "if", "queryId", "in", "pair", ":", "\n", "            ", "if", "pair", "[", "0", "]", "==", "queryId", ":", "\n", "                ", "otherId", "=", "pair", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "otherId", "=", "pair", "[", "0", "]", "\n", "", "if", "otherId", "in", "annotations", "[", "'byId'", "]", "and", "(", "not", "this", ".", "onlyFormStuff", "or", "(", "'paired'", "in", "bb", "and", "bb", "[", "'paired'", "]", ")", ")", ":", "\n", "#responseBBList.append(annotations['byId'][otherId])", "\n", "                ", "responseBBList", ".", "append", "(", "otherId", ")", "\n", "", "", "", "return", "responseBBList", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.computeRotation": [[668, 684], ["math.atan2"], "function", ["None"], ["", "def", "computeRotation", "(", "bb", ")", ":", "\n", "    ", "tlX", "=", "bb", "[", "'poly_points'", "]", "[", "0", "]", "[", "0", "]", "\n", "tlY", "=", "bb", "[", "'poly_points'", "]", "[", "0", "]", "[", "1", "]", "\n", "trX", "=", "bb", "[", "'poly_points'", "]", "[", "1", "]", "[", "0", "]", "\n", "trY", "=", "bb", "[", "'poly_points'", "]", "[", "1", "]", "[", "1", "]", "\n", "brX", "=", "bb", "[", "'poly_points'", "]", "[", "2", "]", "[", "0", "]", "\n", "brY", "=", "bb", "[", "'poly_points'", "]", "[", "2", "]", "[", "1", "]", "\n", "blX", "=", "bb", "[", "'poly_points'", "]", "[", "3", "]", "[", "0", "]", "\n", "blY", "=", "bb", "[", "'poly_points'", "]", "[", "3", "]", "[", "1", "]", "\n", "\n", "lX", "=", "(", "tlX", "+", "blX", ")", "/", "2", "\n", "lY", "=", "(", "tlY", "+", "blY", ")", "/", "2", "\n", "rX", "=", "(", "trX", "+", "brX", ")", "/", "2", "\n", "rY", "=", "(", "trY", "+", "brY", ")", "/", "2", "\n", "\n", "return", "math", ".", "atan2", "(", "rY", "-", "lY", ",", "rX", "-", "lX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.computeRotationDiff": [[685, 695], ["forms_annotations.computeRotation", "forms_annotations.computeRotation", "abs"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.computeRotation", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.computeRotation"], ["", "def", "computeRotationDiff", "(", "bb1", ",", "bb2", ")", ":", "\n", "    ", "r1", "=", "computeRotation", "(", "bb1", ")", "\n", "r2", "=", "computeRotation", "(", "bb2", ")", "\n", "\n", "diff", "=", "r1", "-", "r2", "\n", "if", "diff", ">", "np", ".", "pi", ":", "\n", "        ", "diff", "-=", "2", "*", "np", ".", "pi", "\n", "", "elif", "diff", "<", "-", "np", ".", "pi", ":", "\n", "        ", "diff", "+=", "2", "*", "np", ".", "pi", "\n", "", "return", "abs", "(", "diff", ")", "\n", "", "def", "getCenterPoint", "(", "bb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getCenterPoint": [[695, 705], ["None"], "function", ["None"], ["", "def", "getCenterPoint", "(", "bb", ")", ":", "\n", "    ", "tlX", "=", "bb", "[", "'poly_points'", "]", "[", "0", "]", "[", "0", "]", "\n", "tlY", "=", "bb", "[", "'poly_points'", "]", "[", "0", "]", "[", "1", "]", "\n", "trX", "=", "bb", "[", "'poly_points'", "]", "[", "1", "]", "[", "0", "]", "\n", "trY", "=", "bb", "[", "'poly_points'", "]", "[", "1", "]", "[", "1", "]", "\n", "brX", "=", "bb", "[", "'poly_points'", "]", "[", "2", "]", "[", "0", "]", "\n", "brY", "=", "bb", "[", "'poly_points'", "]", "[", "2", "]", "[", "1", "]", "\n", "blX", "=", "bb", "[", "'poly_points'", "]", "[", "3", "]", "[", "0", "]", "\n", "blY", "=", "bb", "[", "'poly_points'", "]", "[", "3", "]", "[", "1", "]", "\n", "return", "(", "tlX", "+", "trX", "+", "blX", "+", "brX", ")", "/", "4", ",", "(", "tlY", "+", "trY", "+", "blY", "+", "brY", ")", "/", "4", "\n", "", "def", "connectionNotParallel", "(", "bb1", ",", "bb2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.connectionNotParallel": [[705, 720], ["forms_annotations.computeRotation", "forms_annotations.computeRotation", "forms_annotations.getCenterPoint", "forms_annotations.getCenterPoint", "math.atan2", "abs"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.computeRotation", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.computeRotation", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getCenterPoint", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getCenterPoint"], ["", "def", "connectionNotParallel", "(", "bb1", ",", "bb2", ")", ":", "\n", "    ", "r1", "=", "computeRotation", "(", "bb1", ")", "\n", "r2", "=", "computeRotation", "(", "bb2", ")", "\n", "cx1", ",", "cy1", "=", "getCenterPoint", "(", "bb1", ")", "\n", "cx2", ",", "cy2", "=", "getCenterPoint", "(", "bb2", ")", "\n", "\n", "a", "=", "math", ".", "atan2", "(", "cy2", "-", "cy1", ",", "cx2", "-", "cx1", ")", "\n", "\n", "r", "=", "(", "r1", "+", "r2", ")", "/", "2", "\n", "if", "r", "<", "0", ":", "\n", "        ", "r", "+=", "np", ".", "pi", "\n", "", "if", "a", "<", "0", ":", "\n", "        ", "a", "+=", "np", ".", "pi", "\n", "\n", "", "return", "abs", "(", "r", "-", "a", ")", ">", "(", "15", "/", "180", "*", "np", ".", "pi", ")", "\n", "", "def", "horizontalOverlap", "(", "bb1", ",", "bb2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.horizontalOverlap": [[720, 766], ["forms_annotations.computeRotation", "forms_annotations.computeRotation", "min", "min", "max", "max", "max", "min", "min", "max", "max", "max", "min", "max", "min", "max"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.computeRotation", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.computeRotation"], ["", "def", "horizontalOverlap", "(", "bb1", ",", "bb2", ")", ":", "\n", "    ", "tlX1", "=", "bb1", "[", "'poly_points'", "]", "[", "0", "]", "[", "0", "]", "\n", "tlY1", "=", "bb1", "[", "'poly_points'", "]", "[", "0", "]", "[", "1", "]", "\n", "trX1", "=", "bb1", "[", "'poly_points'", "]", "[", "1", "]", "[", "0", "]", "\n", "trY1", "=", "bb1", "[", "'poly_points'", "]", "[", "1", "]", "[", "1", "]", "\n", "brX1", "=", "bb1", "[", "'poly_points'", "]", "[", "2", "]", "[", "0", "]", "\n", "brY1", "=", "bb1", "[", "'poly_points'", "]", "[", "2", "]", "[", "1", "]", "\n", "blX1", "=", "bb1", "[", "'poly_points'", "]", "[", "3", "]", "[", "0", "]", "\n", "blY1", "=", "bb1", "[", "'poly_points'", "]", "[", "3", "]", "[", "1", "]", "\n", "tlX2", "=", "bb2", "[", "'poly_points'", "]", "[", "0", "]", "[", "0", "]", "\n", "tlY2", "=", "bb2", "[", "'poly_points'", "]", "[", "0", "]", "[", "1", "]", "\n", "trX2", "=", "bb2", "[", "'poly_points'", "]", "[", "1", "]", "[", "0", "]", "\n", "trY2", "=", "bb2", "[", "'poly_points'", "]", "[", "1", "]", "[", "1", "]", "\n", "brX2", "=", "bb2", "[", "'poly_points'", "]", "[", "2", "]", "[", "0", "]", "\n", "brY2", "=", "bb2", "[", "'poly_points'", "]", "[", "2", "]", "[", "1", "]", "\n", "blX2", "=", "bb2", "[", "'poly_points'", "]", "[", "3", "]", "[", "0", "]", "\n", "blY2", "=", "bb2", "[", "'poly_points'", "]", "[", "3", "]", "[", "1", "]", "\n", "r1", "=", "computeRotation", "(", "bb1", ")", "\n", "r2", "=", "computeRotation", "(", "bb2", ")", "\n", "r", "=", "(", "r1", "+", "r2", ")", "/", "2", "\n", "r", "=", "r", "/", "np", ".", "pi", "*", "180", "\n", "if", "(", "45", ">", "r", "and", "r", ">", "-", "45", ")", "or", "r", ">", "135", "or", "r", "<", "-", "135", ":", "#horizontal", "\n", "        ", "lX1", "=", "(", "tlX1", "+", "blX1", ")", "/", "2", "\n", "lX2", "=", "(", "tlX2", "+", "blX2", ")", "/", "2", "\n", "rX1", "=", "(", "trX1", "+", "brX1", ")", "/", "2", "\n", "rX2", "=", "(", "trX2", "+", "brX2", ")", "/", "2", "\n", "\n", "aX1", "=", "min", "(", "lX1", ",", "rX1", ")", "\n", "aX2", "=", "min", "(", "lX2", ",", "rX2", ")", "\n", "bX1", "=", "max", "(", "lX1", ",", "rX1", ")", "\n", "bX2", "=", "max", "(", "lX2", ",", "rX2", ")", "\n", "overlap", "=", "min", "(", "bX1", ",", "bX2", ")", "-", "max", "(", "aX1", ",", "aX2", ")", "\n", "return", "max", "(", "0", ",", "overlap", "/", "(", "bX1", "-", "aX1", ")", ",", "overlap", "/", "(", "bX2", "-", "aX2", ")", ")", "\n", "", "else", ":", "\n", "        ", "lY1", "=", "(", "tlY1", "+", "blY1", ")", "/", "2", "\n", "lY2", "=", "(", "tlY2", "+", "blY2", ")", "/", "2", "\n", "rY1", "=", "(", "trY1", "+", "brY1", ")", "/", "2", "\n", "rY2", "=", "(", "trY2", "+", "brY2", ")", "/", "2", "\n", "\n", "aY1", "=", "min", "(", "lY1", ",", "rY1", ")", "\n", "aY2", "=", "min", "(", "lY2", ",", "rY2", ")", "\n", "bY1", "=", "max", "(", "lY1", ",", "rY1", ")", "\n", "bY2", "=", "max", "(", "lY2", ",", "rY2", ")", "\n", "overlap", "=", "min", "(", "bY1", ",", "bY2", ")", "-", "max", "(", "aY1", ",", "aY2", ")", "\n", "#print(overlap)", "\n", "return", "max", "(", "0", ",", "overlap", "/", "(", "bY1", "-", "aY1", ")", ",", "overlap", "/", "(", "bY2", "-", "aY2", ")", ")", "\n", "", "", "def", "areFar", "(", "bb1", ",", "bb2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.areFar": [[766, 801], ["math.sqrt", "max", "min"], "function", ["None"], ["", "", "def", "areFar", "(", "bb1", ",", "bb2", ")", ":", "\n", "    ", "tlX1", "=", "bb1", "[", "'poly_points'", "]", "[", "0", "]", "[", "0", "]", "\n", "tlY1", "=", "bb1", "[", "'poly_points'", "]", "[", "0", "]", "[", "1", "]", "\n", "trX1", "=", "bb1", "[", "'poly_points'", "]", "[", "1", "]", "[", "0", "]", "\n", "trY1", "=", "bb1", "[", "'poly_points'", "]", "[", "1", "]", "[", "1", "]", "\n", "brX1", "=", "bb1", "[", "'poly_points'", "]", "[", "2", "]", "[", "0", "]", "\n", "brY1", "=", "bb1", "[", "'poly_points'", "]", "[", "2", "]", "[", "1", "]", "\n", "blX1", "=", "bb1", "[", "'poly_points'", "]", "[", "3", "]", "[", "0", "]", "\n", "blY1", "=", "bb1", "[", "'poly_points'", "]", "[", "3", "]", "[", "1", "]", "\n", "tlX2", "=", "bb2", "[", "'poly_points'", "]", "[", "0", "]", "[", "0", "]", "\n", "tlY2", "=", "bb2", "[", "'poly_points'", "]", "[", "0", "]", "[", "1", "]", "\n", "trX2", "=", "bb2", "[", "'poly_points'", "]", "[", "1", "]", "[", "0", "]", "\n", "trY2", "=", "bb2", "[", "'poly_points'", "]", "[", "1", "]", "[", "1", "]", "\n", "brX2", "=", "bb2", "[", "'poly_points'", "]", "[", "2", "]", "[", "0", "]", "\n", "brY2", "=", "bb2", "[", "'poly_points'", "]", "[", "2", "]", "[", "1", "]", "\n", "blX2", "=", "bb2", "[", "'poly_points'", "]", "[", "3", "]", "[", "0", "]", "\n", "blY2", "=", "bb2", "[", "'poly_points'", "]", "[", "3", "]", "[", "1", "]", "\n", "\n", "lX1", "=", "(", "tlX1", "+", "blX1", ")", "/", "2", "\n", "rX1", "=", "(", "trX1", "+", "brX1", ")", "/", "2", "\n", "lY1", "=", "(", "tlY1", "+", "blY1", ")", "/", "2", "\n", "rY1", "=", "(", "trY1", "+", "brY1", ")", "/", "2", "\n", "lX2", "=", "(", "tlX2", "+", "blX2", ")", "/", "2", "\n", "rX2", "=", "(", "trX2", "+", "brX2", ")", "/", "2", "\n", "lY2", "=", "(", "tlY2", "+", "blY2", ")", "/", "2", "\n", "rY2", "=", "(", "trY2", "+", "brY2", ")", "/", "2", "\n", "\n", "h1", "=", "(", "(", "blX1", "-", "tlX1", ")", "+", "(", "brX1", "-", "blX1", ")", ")", "/", "2", "\n", "h2", "=", "(", "(", "blX2", "-", "tlX2", ")", "+", "(", "brX2", "-", "blX2", ")", ")", "/", "2", "\n", "\n", "thresh", "=", "1.2", "*", "max", "(", "h1", ",", "h2", ")", "\n", "\n", "\n", "dist", "=", "math", ".", "sqrt", "(", "min", "(", "(", "lX1", "-", "rX2", ")", "**", "2", "+", "(", "lY1", "-", "rY2", ")", "**", "2", ",", "(", "lX2", "-", "rX1", ")", "**", "2", "+", "(", "lY2", "-", "rY1", ")", "**", "2", ")", ")", "\n", "return", "dist", ">", "thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.formGroups": [[802, 1014], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "groups.items", "list", "textNeighbors[].append", "textNeighbors[].append", "forms_annotations.computeRotation", "forms_annotations.computeRotation", "forms_annotations.getCenterPoint", "forms_annotations.getCenterPoint", "math.atan2", "math.atan2", "relative_rel_angles[].items", "removeGroupIds.append", "len", "removeGroupIds.append", "groups.items", "groups.append", "list", "len", "splitCandidates.append", "splitAllTextDownCandidates.append", "len", "forms_annotations.getCenterPoint", "newGroups.items", "forms_annotations.horizontalOverlap", "groups[].append", "upPairs.append", "angles.append", "downTexts.append", "forms_annotations.getCenterPoint", "list.remove", "list.remove", "len", "len", "newGroups[].append", "newGroups.items", "forms_annotations.computeRotationDiff", "forms_annotations.computeRotationDiff", "groups[].append", "list.remove", "list.remove", "forms_annotations.horizontalOverlap", "forms_annotations.horizontalOverlap", "len", "len", "partOf.append"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.computeRotation", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.computeRotation", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getCenterPoint", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getCenterPoint", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getCenterPoint", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.horizontalOverlap", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getCenterPoint", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.computeRotationDiff", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.computeRotationDiff", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.horizontalOverlap", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.horizontalOverlap"], ["", "def", "formGroups", "(", "annotations", ",", "group_only_same", "=", "False", ")", ":", "\n", "#printTypes(annotations)", "\n", "    ", "groups", "=", "{", "}", "\n", "groupMap", "=", "{", "}", "\n", "curGroupId", "=", "0", "\n", "rot_diff", "=", "40", "/", "180.0", "*", "np", ".", "pi", "\n", "rightThresh", "=", "-", "160", "/", "180.0", "*", "np", ".", "pi", "\n", "leftThresh", "=", "-", "20", "/", "180.0", "*", "np", ".", "pi", "\n", "\n", "#These are for collecting info used to split bad groups later", "\n", "relative_rel_angles", "=", "defaultdict", "(", "dict", ")", "\n", "hasMinorNeighbor", "=", "defaultdict", "(", "lambda", ":", "False", ")", "\n", "textNeighbors", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "pair", "in", "annotations", "[", "'pairs'", "]", ":", "\n", "        ", "if", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "==", "'text'", "and", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", "==", "'text'", ":", "\n", "            ", "textNeighbors", "[", "pair", "[", "0", "]", "]", ".", "append", "(", "pair", "[", "1", "]", ")", "\n", "textNeighbors", "[", "pair", "[", "1", "]", "]", ".", "append", "(", "pair", "[", "0", "]", ")", "\n", "", "if", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "==", "'textMinor'", "and", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", "==", "'field'", ":", "\n", "            ", "hasMinorNeighbor", "[", "pair", "[", "1", "]", "]", "=", "True", "\n", "", "elif", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", "==", "'textMinor'", "and", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "==", "'field'", ":", "\n", "            ", "hasMinorNeighbor", "[", "pair", "[", "0", "]", "]", "=", "True", "\n", "#this is the rule that determines which bbs get grouped", "\n", "", "if", "group_only_same", ":", "\n", "            ", "should_be_grouped", "=", "(", "\n", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "==", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", ")", "\n", "and", "(", "\n", "computeRotationDiff", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", ",", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", ")", "<", "rot_diff", "and", "\n", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "!=", "'textMinor'", "or", "horizontalOverlap", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", ",", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", ")", ">", "0.2", ")", "\n", ")", "and", "(", "\n", "#horz_overlapped", "\n", "horizontalOverlap", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", ",", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", ")", ">", "0", "\n", ")", ")", "\n", "", "else", ":", "\n", "#if you have the same label, if your joined para, if you are a minor text or circle that's in para", "\n", "            ", "should_be_grouped", "=", "(", "(", "\n", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "==", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", ")", "or", "\n", "(", "'P'", "in", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "and", "'P'", "in", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", ")", "or", "\n", "(", "(", "'fieldP'", "in", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "or", "'fieldP'", "in", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", ")", "and", "(", "'textMinor'", "in", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "or", "'textMinor'", "in", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", ")", ")", "\n", "or", "(", "(", "'P'", "in", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "or", "'P'", "in", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", ")", "and", "(", "'Circle'", "in", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "or", "'Circle'", "in", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", ")", ")", "\n", ")", "and", "(", "\n", "computeRotationDiff", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", ",", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", ")", "<", "rot_diff", "and", "\n", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "!=", "'textMinor'", "or", "horizontalOverlap", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", ",", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", ")", ">", "0.2", ")", "\n", "#(annotations['byId'][pair[0]]['type']!='textMinor' or connectionNotParallel(annotations['byId'][pair[0]],annotations['byId'][pair[1]]) )", "\n", ")", ")", "\n", "", "if", "should_be_grouped", ":", "\n", "\n", "#print('adding grouping between: {} and {}'.format(annotations['byId'][pair[0]]['type'],annotations['byId'][pair[1]]['type']))", "\n", "\n", "#add to appropriate group or form a new one", "\n", "            ", "if", "pair", "[", "0", "]", "not", "in", "groupMap", "and", "pair", "[", "1", "]", "not", "in", "groupMap", ":", "\n", "                ", "groups", "[", "curGroupId", "]", "=", "list", "(", "pair", ")", "\n", "groupMap", "[", "pair", "[", "0", "]", "]", "=", "curGroupId", "\n", "groupMap", "[", "pair", "[", "1", "]", "]", "=", "curGroupId", "\n", "curGroupId", "+=", "1", "\n", "", "elif", "pair", "[", "1", "]", "not", "in", "groupMap", ":", "\n", "                ", "groupId", "=", "groupMap", "[", "pair", "[", "0", "]", "]", "\n", "groups", "[", "groupId", "]", ".", "append", "(", "pair", "[", "1", "]", ")", "\n", "groupMap", "[", "pair", "[", "1", "]", "]", "=", "groupId", "\n", "", "elif", "pair", "[", "0", "]", "not", "in", "groupMap", ":", "\n", "                ", "groupId", "=", "groupMap", "[", "pair", "[", "1", "]", "]", "\n", "groups", "[", "groupId", "]", ".", "append", "(", "pair", "[", "0", "]", ")", "\n", "groupMap", "[", "pair", "[", "0", "]", "]", "=", "groupId", "\n", "", "elif", "groupMap", "[", "pair", "[", "1", "]", "]", "!=", "groupMap", "[", "pair", "[", "0", "]", "]", ":", "\n", "                ", "goneGroupId", "=", "groupMap", "[", "pair", "[", "1", "]", "]", "\n", "goneGroup", "=", "groups", "[", "goneGroupId", "]", "\n", "del", "groups", "[", "goneGroupId", "]", "\n", "groupId", "=", "groupMap", "[", "pair", "[", "0", "]", "]", "\n", "groups", "[", "groupId", "]", "+=", "goneGroup", "\n", "for", "bbId", "in", "goneGroup", ":", "\n", "                    ", "groupMap", "[", "bbId", "]", "=", "groupId", "\n", "\n", "#store angle of relationship for later processing", "\n", "", "", "rot0", "=", "computeRotation", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", ")", "\n", "rot1", "=", "computeRotation", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", ")", "\n", "\n", "cx0", ",", "cy0", "=", "getCenterPoint", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "0", "]", "]", ")", "\n", "cx1", ",", "cy1", "=", "getCenterPoint", "(", "annotations", "[", "'byId'", "]", "[", "pair", "[", "1", "]", "]", ")", "\n", "\n", "a0_to_1", "=", "math", ".", "atan2", "(", "cy1", "-", "cy0", ",", "cx1", "-", "cx0", ")", "\n", "a1_to_0", "=", "math", ".", "atan2", "(", "cy0", "-", "cy1", ",", "cx0", "-", "cx1", ")", "\n", "rela0", "=", "a0_to_1", "-", "rot0", "\n", "rela1", "=", "a1_to_0", "-", "rot1", "\n", "if", "rela0", ">", "np", ".", "pi", ":", "\n", "                ", "rela0", "-=", "2", "*", "np", ".", "pi", "\n", "", "elif", "rela0", "<", "-", "np", ".", "pi", ":", "\n", "                ", "rela0", "+=", "2", "*", "np", ".", "pi", "\n", "", "if", "rela1", ">", "np", ".", "pi", ":", "\n", "                ", "rela1", "-=", "2", "*", "np", ".", "pi", "\n", "", "elif", "rela1", "<", "-", "np", ".", "pi", ":", "\n", "                ", "rela1", "+=", "2", "*", "np", ".", "pi", "\n", "", "relative_rel_angles", "[", "pair", "[", "0", "]", "]", "[", "pair", "[", "1", "]", "]", "=", "rela0", "\n", "relative_rel_angles", "[", "pair", "[", "1", "]", "]", "[", "pair", "[", "0", "]", "]", "=", "rela1", "\n", "\n", "#Now, we're going to examine each group to see if it needs split", "\n", "", "", "removeGroupIds", "=", "[", "]", "\n", "allNewGroups", "=", "[", "]", "\n", "for", "groupId", ",", "group", "in", "groups", ".", "items", "(", ")", ":", "\n", "        ", "splitCandidates", "=", "[", "]", "#These will be instances of side-by-side paragraphs, particularly the last line in a paragraph", "\n", "splitAllTextDownCandidates", "=", "[", "]", "#These are instances of a title with sub-texts below it", "\n", "allHaveMinorNeighbor", "=", "True", "\n", "for", "bbId", "in", "group", ":", "\n", "            ", "bbType", "=", "annotations", "[", "'byId'", "]", "[", "bbId", "]", "[", "'type'", "]", "\n", "downTexts", "=", "[", "]", "if", "bbType", "==", "'text'", "or", "bbType", "==", "'textMinor'", "else", "None", "\n", "#toprint='{}[{}]: '.format(bbId,annotations['byId'][bbId]['type'])", "\n", "upPairs", "=", "[", "]", "\n", "angles", "=", "[", "]", "\n", "for", "otherId", ",", "angle", "in", "relative_rel_angles", "[", "bbId", "]", ".", "items", "(", ")", ":", "\n", "#toprint+='[{}] {}, '.format(annotations['byId'][otherId]['type'],angle)", "\n", "#is the neighbor above?", "\n", "                ", "if", "leftThresh", ">", "angle", "and", "angle", ">", "rightThresh", ":", "# and areFar(annotations['byId'][bbId],annotations['byId'][otherId]):", "\n", "                    ", "upPairs", ".", "append", "(", "otherId", ")", "\n", "angles", ".", "append", "(", "angle", ")", "\n", "\n", "#if downTexts is not None and annotations['byId'][otherId]['type']=='text':", "\n", "#    print('{} - {}: {}'.format(bbId,otherId,angle))", "\n", "", "if", "downTexts", "is", "not", "None", "and", "annotations", "[", "'byId'", "]", "[", "otherId", "]", "[", "'type'", "]", "==", "bbType", "and", "angle", "<", "np", ".", "pi", "and", "angle", ">", "0", ":", "\n", "                    ", "downTexts", ".", "append", "(", "otherId", ")", "\n", "", "", "if", "len", "(", "upPairs", ")", ">", "1", ":", "\n", "\n", "                ", "splitCandidates", ".", "append", "(", "(", "bbId", ",", "upPairs", ")", ")", "\n", "#print('split cand: {} {}'.format(bbId,list(zip(upPairs,angles))))", "\n", "", "if", "downTexts", "is", "not", "None", "and", "(", "(", "len", "(", "downTexts", ")", ">", "2", "and", "bbType", "==", "'text'", ")", "or", "(", "len", "(", "downTexts", ")", ">", "1", "and", "bbType", "==", "'textMinor'", ")", ")", ":", "\n", "                ", "splitAllTextDownCandidates", ".", "append", "(", "(", "bbId", ",", "downTexts", ")", ")", "\n", "#print('Down split {}[{}]: {}'.format(bbId,bbType,downTexts))", "\n", "\n", "#print(toprint)", "\n", "", "if", "not", "hasMinorNeighbor", "[", "bbId", "]", ":", "\n", "                ", "allHaveMinorNeighbor", "=", "False", "\n", "", "", "if", "allHaveMinorNeighbor", ":", "#This is not group fields that are together, but have individual minor labels", "\n", "            ", "assert", "(", "len", "(", "splitCandidates", ")", "==", "0", ")", "\n", "removeGroupIds", ".", "append", "(", "groupId", ")", "\n", "allNewGroups", "+=", "[", "[", "bbId", "]", "for", "bbId", "in", "group", "]", "\n", "\n", "", "recreate", "=", "False", "\n", "newPairs", "=", "list", "(", "annotations", "[", "'pairs'", "]", ")", "\n", "if", "len", "(", "splitCandidates", ")", ">", "0", ":", "\n", "            ", "recreate", "=", "True", "\n", "#print('split cand {}'.format(splitCandidates))", "\n", "\n", "for", "bbId", ",", "upPairs", "in", "splitCandidates", ":", "\n", "                ", "cx", ",", "cy", "=", "getCenterPoint", "(", "annotations", "[", "'byId'", "]", "[", "bbId", "]", ")", "\n", "furthestDist", "=", "0", "\n", "cutThis", "=", "None", "\n", "for", "otherId", "in", "upPairs", ":", "\n", "                    ", "cxo", ",", "cyo", "=", "getCenterPoint", "(", "annotations", "[", "'byId'", "]", "[", "otherId", "]", ")", "\n", "dist", "=", "(", "(", "cx", "-", "cxo", ")", "**", "2", ")", "+", "(", "(", "cy", "-", "cyo", ")", "**", "2", ")", "\n", "if", "dist", ">", "furthestDist", ":", "\n", "                        ", "furthestDist", "=", "dist", "\n", "cutThis", "=", "otherId", "\n", "", "", "if", "[", "bbId", ",", "cutThis", "]", "in", "newPairs", ":", "\n", "                    ", "newPairs", ".", "remove", "(", "[", "bbId", ",", "cutThis", "]", ")", "\n", "", "elif", "[", "cutThis", ",", "bbId", "]", "in", "newPairs", ":", "\n", "                    ", "newPairs", ".", "remove", "(", "[", "cutThis", ",", "bbId", "]", ")", "\n", "\n", "", "", "", "for", "headId", ",", "subIds", "in", "splitAllTextDownCandidates", ":", "\n", "            ", "recreate", "=", "True", "\n", "for", "subId", "in", "subIds", ":", "\n", "                ", "if", "[", "headId", ",", "subId", "]", "in", "newPairs", ":", "\n", "                    ", "newPairs", ".", "remove", "(", "[", "headId", ",", "subId", "]", ")", "\n", "", "elif", "[", "subId", ",", "headId", "]", "in", "newPairs", ":", "\n", "                    ", "newPairs", ".", "remove", "(", "[", "subId", ",", "headId", "]", ")", "\n", "\n", "", "", "", "if", "recreate", ":", "\n", "#recreate groups", "\n", "            ", "newGroups", "=", "{", "}", "\n", "newGroupMap", "=", "{", "}", "\n", "for", "bbId", "in", "group", ":", "\n", "                ", "partOf", "=", "[", "]", "\n", "#for otherId,newGroupId in newGroupMap.items():", "\n", "#    if (bbId,otherId) in newPairs or (otherId,bbId) in newPairs:", "\n", "#        partOf.append(newGroupId)", "\n", "for", "newGroupId", ",", "newGroup", "in", "newGroups", ".", "items", "(", ")", ":", "\n", "                    ", "for", "otherId", "in", "newGroup", ":", "\n", "                        ", "if", "[", "bbId", ",", "otherId", "]", "in", "newPairs", "or", "[", "otherId", ",", "bbId", "]", "in", "newPairs", ":", "\n", "                            ", "partOf", ".", "append", "(", "newGroupId", ")", "\n", "break", "\n", "", "", "", "if", "len", "(", "partOf", ")", ">", "1", ":", "\n", "#merge", "\n", "                    ", "finalGroupId", "=", "partOf", "[", "0", "]", "\n", "for", "goneGroupId", "in", "partOf", "[", "1", ":", "]", ":", "\n", "                        ", "newGroups", "[", "finalGroupId", "]", "+=", "newGroups", "[", "goneGroupId", "]", "\n", "#for otherId in 0-", "\n", "del", "newGroups", "[", "goneGroupId", "]", "\n", "", "", "if", "len", "(", "partOf", ")", ">", "0", ":", "\n", "                    ", "newGroups", "[", "partOf", "[", "0", "]", "]", ".", "append", "(", "bbId", ")", "\n", "", "else", ":", "\n", "                    ", "newGroups", "[", "curGroupId", "]", "=", "[", "bbId", "]", "\n", "curGroupId", "+=", "1", "\n", "\n", "", "", "allNewGroups", "+=", "[", "group", "for", "gid", ",", "group", "in", "newGroups", ".", "items", "(", ")", "]", "\n", "removeGroupIds", ".", "append", "(", "groupId", ")", "\n", "\n", "\n", "\n", "\n", "", "", "groups", "=", "[", "group", "for", "gid", ",", "group", "in", "groups", ".", "items", "(", ")", "if", "gid", "not", "in", "removeGroupIds", "]", "\n", "groups", "+=", "allNewGroups", "\n", "\n", "#groups of single elements", "\n", "for", "bbId", "in", "annotations", "[", "'byId'", "]", ":", "\n", "        ", "if", "bbId", "not", "in", "groupMap", ":", "\n", "            ", "groups", ".", "append", "(", "[", "bbId", "]", ")", "\n", "\n", "#for group in groups:", "\n", "#    toprint=''", "\n", "#    for bbId in group:", "\n", "#        toprint+=annotations['byId'][bbId]['type']+', '", "\n", "#    toprint+=':'", "\n", "#    print(toprint)", "\n", "\n", "", "", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.printTypes": [[1015, 1027], ["enumerate", "print", "annotations[].items", "len", "print"], "function", ["None"], ["", "def", "printTypes", "(", "annotations", ")", ":", "\n", "    ", "toprint", "=", "''", "\n", "n", "=", "6", "\n", "for", "i", ",", "(", "bbId", ",", "bb", ")", "in", "enumerate", "(", "annotations", "[", "'byId'", "]", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "len", "(", "bb", "[", "'type'", "]", ")", ">", "7", ":", "\n", "            ", "toprint", "+=", "bb", "[", "'type'", "]", "+", "'\\t'", "\n", "", "else", ":", "\n", "            ", "toprint", "+=", "bb", "[", "'type'", "]", "+", "'\\t\\t'", "\n", "", "if", "i", "%", "n", "==", "n", "-", "1", ":", "\n", "            ", "print", "(", "toprint", ")", "\n", "toprint", "=", "''", "\n", "", "", "print", "(", "toprint", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.ensure_dir": [[7, 10], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "ensure_dir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.pt_xyrs_2_xyxy": [[12, 29], ["torch.ones().type", "torch.cat", "state.data.type", "torch.ones", "torch.sin", "torch.cos", "torch.sin", "torch.cos"], "function", ["None"], ["", "", "def", "pt_xyrs_2_xyxy", "(", "state", ")", ":", "\n", "    ", "out", "=", "torch", ".", "ones", "(", "state", ".", "data", ".", "shape", "[", "0", "]", ",", "5", ")", ".", "type", "(", "state", ".", "data", ".", "type", "(", ")", ")", "\n", "\n", "x", "=", "state", "[", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "y", "=", "state", "[", ":", ",", ":", ",", "2", ":", "3", "]", "\n", "r", "=", "state", "[", ":", ",", ":", ",", "3", ":", "4", "]", "\n", "s", "=", "state", "[", ":", ",", ":", ",", "4", ":", "5", "]", "\n", "\n", "x0", "=", "-", "torch", ".", "sin", "(", "r", ")", "*", "s", "+", "x", "\n", "y0", "=", "-", "torch", ".", "cos", "(", "r", ")", "*", "s", "+", "y", "\n", "x1", "=", "torch", ".", "sin", "(", "r", ")", "*", "s", "+", "x", "\n", "y1", "=", "torch", ".", "cos", "(", "r", ")", "*", "s", "+", "y", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "\n", "state", "[", ":", ",", ":", ",", "0", ":", "1", "]", ",", "\n", "x0", ",", "y0", ",", "x1", ",", "y1", "\n", "]", ",", "2", ")", "\n", "", "def", "pt_xyxy_2_xyrs", "(", "state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.pt_xyxy_2_xyrs": [[29, 51], ["torch.ones().type", "torch.cat", "state.data.type", "torch.sqrt", "torch.atan2", "torch.ones"], "function", ["None"], ["", "def", "pt_xyxy_2_xyrs", "(", "state", ")", ":", "\n", "    ", "out", "=", "torch", ".", "ones", "(", "state", ".", "data", ".", "shape", "[", "0", "]", ",", "5", ")", ".", "type", "(", "state", ".", "data", ".", "type", "(", ")", ")", "\n", "\n", "x0", "=", "state", "[", ":", ",", "0", ":", "1", "]", "\n", "y0", "=", "state", "[", ":", ",", "1", ":", "2", "]", "\n", "x1", "=", "state", "[", ":", ",", "2", ":", "3", "]", "\n", "y1", "=", "state", "[", ":", ",", "3", ":", "4", "]", "\n", "\n", "dx", "=", "x0", "-", "x1", "\n", "dy", "=", "y0", "-", "y1", "\n", "\n", "d", "=", "torch", ".", "sqrt", "(", "dx", "**", "2.0", "+", "dy", "**", "2.0", ")", "/", "2.0", "\n", "\n", "mx", "=", "(", "x0", "+", "x1", ")", "/", "2.0", "\n", "my", "=", "(", "y0", "+", "y1", ")", "/", "2.0", "\n", "\n", "theta", "=", "-", "torch", ".", "atan2", "(", "dx", ",", "-", "dy", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "\n", "mx", ",", "my", ",", "theta", ",", "d", ",", "\n", "state", "[", ":", ",", "4", ":", "5", "]", "\n", "]", ",", "1", ")", "\n", "#-------------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.get_image_size": [[66, 125], ["os.path.getsize", "open", "input.read", "struct.unpack", "int", "int", "input.read.startswith", "struct.unpack", "int", "int", "input.read.startswith", "struct.unpack", "int", "int", "input.read.startswith", "input.seek", "input.read", "input.read", "util.UnknownImageFormat", "int", "int", "input.read", "util.UnknownImageFormat", "util.UnknownImageFormat", "util.UnknownImageFormat", "ord", "ord", "input.read", "ord", "input.read", "input.read", "struct.unpack", "input.read", "ord", "ord", "input.read", "int", "struct.unpack", "input.read"], "function", ["None"], ["", "def", "get_image_size", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    Return (width, height) for a given img file content - no external\n    dependencies except the os and struct modules from core\n    \"\"\"", "\n", "size", "=", "os", ".", "path", ".", "getsize", "(", "file_path", ")", "\n", "\n", "with", "open", "(", "file_path", ")", "as", "input", ":", "\n", "        ", "height", "=", "-", "1", "\n", "width", "=", "-", "1", "\n", "data", "=", "input", ".", "read", "(", "25", ")", "\n", "\n", "if", "(", "size", ">=", "10", ")", "and", "data", "[", ":", "6", "]", "in", "(", "'GIF87a'", ",", "'GIF89a'", ")", ":", "\n", "# GIFs", "\n", "            ", "w", ",", "h", "=", "struct", ".", "unpack", "(", "\"<HH\"", ",", "data", "[", "6", ":", "10", "]", ")", "\n", "width", "=", "int", "(", "w", ")", "\n", "height", "=", "int", "(", "h", ")", "\n", "", "elif", "(", "(", "size", ">=", "24", ")", "and", "data", ".", "startswith", "(", "'\\211PNG\\r\\n\\032\\n'", ")", "\n", "and", "(", "data", "[", "12", ":", "16", "]", "==", "'IHDR'", ")", ")", ":", "\n", "# PNGs", "\n", "            ", "w", ",", "h", "=", "struct", ".", "unpack", "(", "\">LL\"", ",", "data", "[", "16", ":", "24", "]", ")", "\n", "width", "=", "int", "(", "w", ")", "\n", "height", "=", "int", "(", "h", ")", "\n", "", "elif", "(", "size", ">=", "16", ")", "and", "data", ".", "startswith", "(", "'\\211PNG\\r\\n\\032\\n'", ")", ":", "\n", "# older PNGs?", "\n", "            ", "w", ",", "h", "=", "struct", ".", "unpack", "(", "\">LL\"", ",", "data", "[", "8", ":", "16", "]", ")", "\n", "width", "=", "int", "(", "w", ")", "\n", "height", "=", "int", "(", "h", ")", "\n", "", "elif", "(", "size", ">=", "2", ")", "and", "data", ".", "startswith", "(", "'\\377\\330'", ")", ":", "\n", "# JPEG", "\n", "            ", "msg", "=", "\" raised while trying to decode as JPEG.\"", "\n", "input", ".", "seek", "(", "0", ")", "\n", "input", ".", "read", "(", "2", ")", "\n", "b", "=", "input", ".", "read", "(", "1", ")", "\n", "try", ":", "\n", "                ", "while", "(", "b", "and", "ord", "(", "b", ")", "!=", "0xDA", ")", ":", "\n", "                    ", "while", "(", "ord", "(", "b", ")", "!=", "0xFF", ")", ":", "b", "=", "input", ".", "read", "(", "1", ")", "\n", "while", "(", "ord", "(", "b", ")", "==", "0xFF", ")", ":", "b", "=", "input", ".", "read", "(", "1", ")", "\n", "if", "(", "ord", "(", "b", ")", ">=", "0xC0", "and", "ord", "(", "b", ")", "<=", "0xC3", ")", ":", "\n", "                        ", "input", ".", "read", "(", "3", ")", "\n", "h", ",", "w", "=", "struct", ".", "unpack", "(", "\">HH\"", ",", "input", ".", "read", "(", "4", ")", ")", "\n", "break", "\n", "", "else", ":", "\n", "                        ", "input", ".", "read", "(", "int", "(", "struct", ".", "unpack", "(", "\">H\"", ",", "input", ".", "read", "(", "2", ")", ")", "[", "0", "]", ")", "-", "2", ")", "\n", "", "b", "=", "input", ".", "read", "(", "1", ")", "\n", "", "width", "=", "int", "(", "w", ")", "\n", "height", "=", "int", "(", "h", ")", "\n", "", "except", "struct", ".", "error", ":", "\n", "                ", "raise", "UnknownImageFormat", "(", "\"StructError\"", "+", "msg", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "raise", "UnknownImageFormat", "(", "\"ValueError\"", "+", "msg", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "UnknownImageFormat", "(", "e", ".", "__class__", ".", "__name__", "+", "msg", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "UnknownImageFormat", "(", "\n", "\"Sorry, don't know how to get information from this file.\"", "\n", ")", "\n", "\n", "", "", "return", "width", ",", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.xyrhwToCorners": [[127, 133], ["math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos"], "function", ["None"], ["", "def", "xyrhwToCorners", "(", "xc", ",", "yc", ",", "rot", ",", "h", ",", "w", ")", ":", "\n", "    ", "tr", "=", "(", "(", "w", "*", "math", ".", "cos", "(", "-", "rot", ")", "-", "h", "*", "math", ".", "sin", "(", "-", "rot", ")", "+", "xc", ")", ",", "(", "w", "*", "math", ".", "sin", "(", "-", "rot", ")", "+", "h", "*", "math", ".", "cos", "(", "-", "rot", ")", "+", "yc", ")", ")", "\n", "tl", "=", "(", "(", "-", "w", "*", "math", ".", "cos", "(", "-", "rot", ")", "-", "h", "*", "math", ".", "sin", "(", "-", "rot", ")", "+", "xc", ")", ",", "(", "-", "w", "*", "math", ".", "sin", "(", "-", "rot", ")", "+", "h", "*", "math", ".", "cos", "(", "-", "rot", ")", "+", "yc", ")", ")", "\n", "br", "=", "(", "(", "w", "*", "math", ".", "cos", "(", "-", "rot", ")", "+", "h", "*", "math", ".", "sin", "(", "-", "rot", ")", "+", "xc", ")", ",", "(", "w", "*", "math", ".", "sin", "(", "-", "rot", ")", "-", "h", "*", "math", ".", "cos", "(", "-", "rot", ")", "+", "yc", ")", ")", "\n", "bl", "=", "(", "(", "-", "w", "*", "math", ".", "cos", "(", "-", "rot", ")", "+", "h", "*", "math", ".", "sin", "(", "-", "rot", ")", "+", "xc", ")", ",", "(", "-", "w", "*", "math", ".", "sin", "(", "-", "rot", ")", "-", "h", "*", "math", ".", "cos", "(", "-", "rot", ")", "+", "yc", ")", ")", "\n", "return", "tl", ",", "tr", ",", "br", ",", "bl", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.plotRect": [[134, 152], ["xyrhw[].item", "xyrhw[].item", "xyrhw[].item", "xyrhw[].item", "xyrhw[].item", "min", "min", "util.xyrhwToCorners", "utils.line", "utils.line", "utils.line", "utils.line", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.xyrhwToCorners", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line"], ["", "def", "plotRect", "(", "img", ",", "color", ",", "xyrhw", ",", "lineWidth", "=", "1", ")", ":", "\n", "    ", "xc", "=", "xyrhw", "[", "0", "]", ".", "item", "(", ")", "\n", "yc", "=", "xyrhw", "[", "1", "]", ".", "item", "(", ")", "\n", "rot", "=", "xyrhw", "[", "2", "]", ".", "item", "(", ")", "\n", "h", "=", "xyrhw", "[", "3", "]", ".", "item", "(", ")", "\n", "w", "=", "xyrhw", "[", "4", "]", ".", "item", "(", ")", "\n", "h", "=", "min", "(", "30000", ",", "h", ")", "\n", "w", "=", "min", "(", "30000", ",", "w", ")", "\n", "tl", ",", "tr", ",", "br", ",", "bl", "=", "xyrhwToCorners", "(", "xc", ",", "yc", ",", "rot", ",", "h", ",", "w", ")", "\n", "tl", "=", "(", "int", "(", "tl", "[", "0", "]", ")", ",", "int", "(", "tl", "[", "1", "]", ")", ")", "\n", "tr", "=", "(", "int", "(", "tr", "[", "0", "]", ")", ",", "int", "(", "tr", "[", "1", "]", ")", ")", "\n", "br", "=", "(", "int", "(", "br", "[", "0", "]", ")", ",", "int", "(", "br", "[", "1", "]", ")", ")", "\n", "bl", "=", "(", "int", "(", "bl", "[", "0", "]", ")", ",", "int", "(", "bl", "[", "1", "]", ")", ")", "\n", "\n", "img_f", ".", "line", "(", "img", ",", "tl", ",", "tr", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "img", ",", "tr", ",", "br", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "img", ",", "br", ",", "bl", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "img", ",", "bl", ",", "tl", ",", "color", ",", "lineWidth", ")", "\n", "", "def", "pointDistance", "(", "p1", ",", "p2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.pointDistance": [[152, 154], ["math.sqrt"], "function", ["None"], ["", "def", "pointDistance", "(", "p1", ",", "p2", ")", ":", "\n", "    ", "return", "math", ".", "sqrt", "(", "(", "p1", "[", "0", "]", "-", "p2", "[", "0", "]", ")", "**", "2", "+", "(", "p1", "[", "1", "]", "-", "p2", "[", "1", "]", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.inv_tanh": [[155, 161], ["math.log"], "function", ["None"], ["", "def", "inv_tanh", "(", "y", ")", ":", "\n", "    ", "if", "y", "<=", "-", "1", ":", "#implicit gradient clipping done here", "\n", "        ", "return", "-", "2", "\n", "", "elif", "y", ">=", "1", ":", "\n", "        ", "return", "2", "\n", "", "return", "0.5", "*", "(", "math", ".", "log", "(", "(", "1", "+", "y", ")", "/", "(", "1", "-", "y", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.augmentation.tensmeyer_brightness": [[4, 28], ["img.astype.astype", "img.astype.astype", "utils.rgb2gray", "utils.otsuThreshold", "th.astype"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.rgb2gray", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.otsuThreshold"], ["def", "tensmeyer_brightness", "(", "img", ",", "foreground", "=", "0", ",", "background", "=", "0", ")", ":", "\n", "    ", "if", "img", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "        ", "gray", "=", "img_f", ".", "rgb2gray", "(", "img", ")", "\n", "", "else", ":", "\n", "        ", "gray", "=", "img", "\n", "", "try", ":", "\n", "        ", "ret", ",", "th", "=", "img_f", ".", "otsuThreshold", "(", "gray", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "th", "=", "img", "/", "2", "\n", "\n", "", "th", "=", "(", "th", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", ")", "#[...,None]", "\n", "\n", "if", "img", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "        ", "th", "=", "th", "[", "...", ",", "None", "]", "\n", "\n", "\n", "", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "img", "+", "(", "1.0", "-", "th", ")", "*", "foreground", "\n", "img", "=", "img", "+", "th", "*", "background", "\n", "\n", "img", "[", "img", ">", "255", "]", "=", "255", "\n", "img", "[", "img", "<", "0", "]", "=", "0", "\n", "\n", "return", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.augmentation.apply_tensmeyer_brightness": [[29, 42], ["numpy.random.RandomState", "kwargs.get", "augmentation.tensmeyer_brightness", "kwargs.get", "np.random.RandomState.normal", "np.random.RandomState.normal", "np.random.RandomState.beta", "np.random.RandomState.beta"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.augmentation.tensmeyer_brightness"], ["", "def", "apply_tensmeyer_brightness", "(", "img", ",", "sigma", "=", "20", ",", "**", "kwargs", ")", ":", "\n", "    ", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "kwargs", ".", "get", "(", "\"random_seed\"", ",", "None", ")", ")", "\n", "if", "kwargs", ".", "get", "(", "\"better\"", ",", "False", ")", ":", "\n", "        ", "foreground", "=", "(", "random_state", ".", "beta", "(", "1.2", ",", "2", ")", "-", "0.1", ")", "*", "256", "/", "0.9", "\n", "background", "=", "(", "(", "-", "random_state", ".", "beta", "(", "1.2", ",", "2", ")", ")", "+", "0.1", ")", "*", "256", "/", "0.9", "\n", "", "else", ":", "\n", "        ", "foreground", "=", "random_state", ".", "normal", "(", "0", ",", "sigma", ")", "\n", "background", "=", "random_state", ".", "normal", "(", "0", ",", "sigma", ")", "\n", "#print('fore {}, back {}'.format(foreground,background))", "\n", "\n", "", "img", "=", "tensmeyer_brightness", "(", "img", ",", "foreground", ",", "background", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.augmentation.increase_brightness": [[44, 51], ["img.astype.astype", "img.astype.astype"], "function", ["None"], ["", "def", "increase_brightness", "(", "img", ",", "brightness", "=", "0", ",", "contrast", "=", "1", ")", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "img", "*", "contrast", "+", "brightness", "\n", "img", "[", "img", ">", "255", "]", "=", "255", "\n", "img", "[", "img", "<", "0", "]", "=", "0", "\n", "\n", "return", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.augmentation.apply_random_brightness": [[52, 59], ["numpy.random.RandomState", "np.random.RandomState.randint", "augmentation.increase_brightness", "kwargs.get"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.augmentation.increase_brightness"], ["", "def", "apply_random_brightness", "(", "img", ",", "b_range", "=", "[", "-", "50", ",", "51", "]", ",", "**", "kwargs", ")", ":", "\n", "    ", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "kwargs", ".", "get", "(", "\"random_seed\"", ",", "None", ")", ")", "\n", "brightness", "=", "random_state", ".", "randint", "(", "b_range", "[", "0", "]", ",", "b_range", "[", "1", "]", ")", "\n", "\n", "img", "=", "increase_brightness", "(", "img", ",", "brightness", ")", "\n", "\n", "return", "input_data", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.utils.augmentation.apply_random_color_rotation": [[60, 69], ["numpy.random.RandomState", "np.random.RandomState.randint", "utils.rgb2hsv", "utils.hsv2rgb", "kwargs.get"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.rgb2hsv", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.hsv2rgb"], ["", "def", "apply_random_color_rotation", "(", "img", ",", "**", "kwargs", ")", ":", "\n", "    ", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "kwargs", ".", "get", "(", "\"random_seed\"", ",", "None", ")", ")", "\n", "shift", "=", "random_state", ".", "randint", "(", "0", ",", "255", ")", "\n", "\n", "hsv", "=", "img_f", ".", "rgb2hsv", "(", "img", ")", "\n", "hsv", "[", "...", ",", "0", "]", "=", "hsv", "[", "...", ",", "0", "]", "+", "shift", "\n", "img", "=", "img_f", ".", "hsv2rgb", "(", "hsv", ")", "\n", "\n", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.graph_pair.GraphPairDataset.__init__": [[29, 52], ["utils.crop_transform.CropBoxTransform", "type", "os.path.join", "os.path.exists", "os.mkdir", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dirPath", "=", "None", ",", "split", "=", "None", ",", "config", "=", "None", ",", "images", "=", "None", ")", ":", "\n", "        ", "self", ".", "color", "=", "config", "[", "'color'", "]", "if", "'color'", "in", "config", "else", "True", "\n", "self", ".", "rotate", "=", "config", "[", "'rotation'", "]", "if", "'rotation'", "in", "config", "else", "False", "\n", "if", "'crop_params'", "in", "config", "and", "config", "[", "'crop_params'", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "transform", "=", "CropBoxTransform", "(", "config", "[", "'crop_params'", "]", ",", "self", ".", "rotate", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "None", "\n", "", "self", ".", "rescale_range", "=", "config", "[", "'rescale_range'", "]", "\n", "if", "type", "(", "self", ".", "rescale_range", ")", "is", "float", ":", "\n", "            ", "self", ".", "rescale_range", "=", "[", "self", ".", "rescale_range", ",", "self", ".", "rescale_range", "]", "\n", "", "if", "'cache_resized_images'", "in", "config", ":", "\n", "            ", "self", ".", "cache_resized", "=", "config", "[", "'cache_resized_images'", "]", "\n", "if", "self", ".", "cache_resized", ":", "\n", "                ", "self", ".", "cache_path", "=", "os", ".", "path", ".", "join", "(", "dirPath", ",", "'cache_'", "+", "str", "(", "self", ".", "rescale_range", "[", "1", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "cache_path", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "self", ".", "cache_path", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "cache_resized", "=", "False", "\n", "", "self", ".", "aug_params", "=", "config", "[", "'additional_aug_params'", "]", "if", "'additional_aug_params'", "in", "config", "else", "{", "}", "\n", "\n", "\n", "self", ".", "pixel_count_thresh", "=", "config", "[", "'pixel_count_thresh'", "]", "if", "'pixel_count_thresh'", "in", "config", "else", "10000000", "\n", "self", ".", "max_dim_thresh", "=", "config", "[", "'max_dim_thresh'", "]", "if", "'max_dim_thresh'", "in", "config", "else", "2700", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.graph_pair.GraphPairDataset.__len__": [[58, 60], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.graph_pair.GraphPairDataset.__getitem__": [[61, 63], ["graph_pair.GraphPairDataset.getitem"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.datasets.box_detect.BoxDetectDataset.getitem"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "getitem", "(", "index", ")", "\n", "", "def", "getitem", "(", "self", ",", "index", ",", "scaleP", "=", "None", ",", "cropPoint", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.graph_pair.GraphPairDataset.getitem": [[63, 230], ["utils.imread", "utils.resize", "graph_pair.GraphPairDataset.parseAnn", "set", "enumerate", "torch.from_numpy.astype", "torch.from_numpy", "utils.forms_annotations.convertBBs", "set", "open", "json.loads", "utils.augmentation.apply_tensmeyer_brightness.max", "print", "graph_pair.GraphPairDataset.__getitem__", "numpy.random.uniform", "len", "numpy.repeat", "graph_pair.GraphPairDataset.transform", "len", "graph_pair.GraphPairDataset.getResponseBBIdList", "utils.augmentation.apply_tensmeyer_brightness.transpose", "len", "enumerate", "annFile.read", "math.sqrt", "print", "max", "print", "numpy.zeros", "numpy.concatenate", "enumerate", "utils.augmentation.apply_random_color_rotation", "utils.augmentation.apply_tensmeyer_brightness", "utils.augmentation.apply_tensmeyer_brightness", "ids.index", "len", "newGroups.append", "utils.forms_annotations.convertBBs", "torch.tensor", "enumerate", "targetIndexToGroup.update", "graph_pair.GraphPairDataset.__len__", "numpy.concatenate", "ids.index", "set.add", "set.add", "max", "range", "int", "min", "max", "min", "max", "type"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imread", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.resize", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.FormsBoxDetect.parseAnn", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.convertBBs", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.box_detect.BoxDetectDataset.__getitem__", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.FormsGraphPair.getResponseBBIdList", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.augmentation.apply_random_color_rotation", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.augmentation.apply_tensmeyer_brightness", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.augmentation.apply_tensmeyer_brightness", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.convertBBs", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader.__len__"], ["", "def", "getitem", "(", "self", ",", "index", ",", "scaleP", "=", "None", ",", "cropPoint", "=", "None", ")", ":", "\n", "        ", "imagePath", "=", "self", ".", "images", "[", "index", "]", "[", "'imagePath'", "]", "\n", "imageName", "=", "self", ".", "images", "[", "index", "]", "[", "'imageName'", "]", "\n", "annotationPath", "=", "self", ".", "images", "[", "index", "]", "[", "'annotationPath'", "]", "\n", "rescaled", "=", "self", ".", "images", "[", "index", "]", "[", "'rescaled'", "]", "\n", "with", "open", "(", "annotationPath", ")", "as", "annFile", ":", "\n", "            ", "annotations", "=", "json", ".", "loads", "(", "annFile", ".", "read", "(", ")", ")", "\n", "\n", "#Read image", "\n", "", "np_img", "=", "img_f", ".", "imread", "(", "imagePath", ",", "1", "if", "self", ".", "color", "else", "0", ")", "#*255.0", "\n", "if", "np_img", ".", "max", "(", ")", "<", "200", ":", "\n", "            ", "np_img", "*=", "255", "\n", "", "if", "np_img", "is", "None", "or", "np_img", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "print", "(", "\"ERROR, could not open \"", "+", "imagePath", ")", "\n", "return", "self", ".", "__getitem__", "(", "(", "index", "+", "1", ")", "%", "self", ".", "__len__", "(", ")", ")", "\n", "", "if", "scaleP", "is", "None", ":", "\n", "            ", "s", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "rescale_range", "[", "0", "]", ",", "self", ".", "rescale_range", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "scaleP", "\n", "", "partial_rescale", "=", "s", "/", "rescaled", "\n", "if", "self", ".", "transform", "is", "None", ":", "#we're doing the whole image", "\n", "#this is a check to be sure we don't send too big images through", "\n", "            ", "pixel_count", "=", "partial_rescale", "*", "partial_rescale", "*", "np_img", ".", "shape", "[", "0", "]", "*", "np_img", ".", "shape", "[", "1", "]", "\n", "if", "pixel_count", ">", "self", ".", "pixel_count_thresh", ":", "\n", "                ", "partial_rescale", "=", "math", ".", "sqrt", "(", "partial_rescale", "*", "partial_rescale", "*", "self", ".", "pixel_count_thresh", "/", "pixel_count", ")", "\n", "print", "(", "'{} exceed thresh: {}: {}, new {}: {}'", ".", "format", "(", "imageName", ",", "s", ",", "pixel_count", ",", "rescaled", "*", "partial_rescale", ",", "partial_rescale", "*", "partial_rescale", "*", "np_img", ".", "shape", "[", "0", "]", "*", "np_img", ".", "shape", "[", "1", "]", ")", ")", "\n", "s", "=", "rescaled", "*", "partial_rescale", "\n", "\n", "\n", "", "max_dim", "=", "partial_rescale", "*", "max", "(", "np_img", ".", "shape", "[", "0", "]", ",", "np_img", ".", "shape", "[", "1", "]", ")", "\n", "if", "max_dim", ">", "self", ".", "max_dim_thresh", ":", "\n", "                ", "partial_rescale", "=", "partial_rescale", "*", "(", "self", ".", "max_dim_thresh", "/", "max_dim", ")", "\n", "print", "(", "'{} exceed thresh: {}: {}, new {}: {}'", ".", "format", "(", "imageName", ",", "s", ",", "max_dim", ",", "rescaled", "*", "partial_rescale", ",", "partial_rescale", "*", "max", "(", "np_img", ".", "shape", "[", "0", "]", ",", "np_img", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "s", "=", "rescaled", "*", "partial_rescale", "\n", "\n", "\n", "\n", "", "", "np_img", "=", "img_f", ".", "resize", "(", "np_img", ",", "(", "0", ",", "0", ")", ",", "\n", "fx", "=", "partial_rescale", ",", "\n", "fy", "=", "partial_rescale", ",", "\n", ")", "\n", "if", "len", "(", "np_img", ".", "shape", ")", "==", "2", ":", "\n", "            ", "np_img", "=", "np_img", "[", "...", ",", "None", "]", "#add 'color' channel", "\n", "", "if", "self", ".", "color", "and", "np_img", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "np_img", "=", "np", ".", "repeat", "(", "np_img", ",", "3", ",", "axis", "=", "2", ")", "\n", "\n", "", "bbs", ",", "ids", ",", "numClasses", ",", "trans", ",", "groups", ",", "metadata", ",", "form_metadata", "=", "self", ".", "parseAnn", "(", "annotations", ",", "s", ")", "\n", "\n", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "if", "'word_boxes'", "in", "form_metadata", ":", "\n", "                ", "word_bbs", "=", "form_metadata", "[", "'word_boxes'", "]", "\n", "dif_f", "=", "bbs", ".", "shape", "[", "2", "]", "-", "word_bbs", ".", "shape", "[", "1", "]", "\n", "blank", "=", "np", ".", "zeros", "(", "[", "word_bbs", ".", "shape", "[", "0", "]", ",", "dif_f", "]", ")", "\n", "prep_word_bbs", "=", "np", ".", "concatenate", "(", "[", "word_bbs", ",", "blank", "]", ",", "axis", "=", "1", ")", "[", "None", ",", "...", "]", "\n", "crop_bbs", "=", "np", ".", "concatenate", "(", "[", "bbs", ",", "prep_word_bbs", "]", ",", "axis", "=", "1", ")", "\n", "crop_ids", "=", "ids", "+", "[", "'word{}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "word_bbs", ".", "shape", "[", "0", "]", ")", "]", "\n", "", "else", ":", "\n", "                ", "crop_bbs", "=", "bbs", "\n", "crop_ids", "=", "ids", "\n", "\n", "#This will do crop augmentation", "\n", "", "out", ",", "cropPoint", "=", "self", ".", "transform", "(", "{", "\n", "\"img\"", ":", "np_img", ",", "\n", "\"bb_gt\"", ":", "crop_bbs", ",", "\n", "'bb_auxs'", ":", "crop_ids", ",", "\n", "}", ",", "cropPoint", ")", "\n", "np_img", "=", "out", "[", "'img'", "]", "\n", "\n", "if", "'word_boxes'", "in", "form_metadata", ":", "\n", "                ", "saw_word", "=", "False", "\n", "word_index", "=", "-", "1", "\n", "for", "i", ",", "ii", "in", "enumerate", "(", "out", "[", "'bb_auxs'", "]", ")", ":", "\n", "                    ", "if", "not", "saw_word", ":", "\n", "                        ", "if", "type", "(", "ii", ")", "is", "str", "and", "'word'", "in", "ii", ":", "\n", "                            ", "saw_word", "=", "True", "\n", "word_index", "=", "i", "\n", "", "", "else", ":", "\n", "                        ", "assert", "'word'", "in", "ii", "\n", "", "", "bbs", "=", "out", "[", "'bb_gt'", "]", "[", ":", ",", ":", "word_index", "]", "\n", "ids", "=", "out", "[", "'bb_auxs'", "]", "[", ":", "word_index", "]", "\n", "form_metadata", "[", "'word_boxes'", "]", "=", "out", "[", "'bb_gt'", "]", "[", "0", ",", "word_index", ":", ",", ":", "8", "]", "\n", "word_ids", "=", "out", "[", "'bb_auxs'", "]", "[", "word_index", ":", "]", "\n", "form_metadata", "[", "'word_trans'", "]", "=", "[", "form_metadata", "[", "'word_trans'", "]", "[", "int", "(", "id", "[", "4", ":", "]", ")", "]", "for", "id", "in", "word_ids", "]", "\n", "", "else", ":", "\n", "                ", "bbs", "=", "out", "[", "'bb_gt'", "]", "\n", "ids", "=", "out", "[", "'bb_auxs'", "]", "\n", "\n", "", "if", "np_img", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "                ", "np_img", "=", "augmentation", ".", "apply_random_color_rotation", "(", "np_img", ")", "\n", "np_img", "=", "augmentation", ".", "apply_tensmeyer_brightness", "(", "np_img", ",", "**", "self", ".", "aug_params", ")", "\n", "", "else", ":", "\n", "                ", "np_img", "=", "augmentation", ".", "apply_tensmeyer_brightness", "(", "np_img", ",", "**", "self", ".", "aug_params", ")", "\n", "\n", "\n", "\n", "", "", "newGroups", "=", "[", "]", "\n", "for", "group", "in", "groups", ":", "\n", "            ", "newGroup", "=", "[", "ids", ".", "index", "(", "bbId", ")", "for", "bbId", "in", "group", "if", "bbId", "in", "ids", "]", "\n", "if", "len", "(", "newGroup", ")", ">", "0", ":", "\n", "                ", "newGroups", ".", "append", "(", "newGroup", ")", "\n", "", "", "groups", "=", "newGroups", "\n", "pairs", "=", "set", "(", ")", "\n", "numNeighbors", "=", "[", "0", "]", "*", "len", "(", "ids", ")", "\n", "for", "index1", ",", "id", "in", "enumerate", "(", "ids", ")", ":", "#updated", "\n", "            ", "responseBBIdList", "=", "self", ".", "getResponseBBIdList", "(", "id", ",", "annotations", ")", "\n", "for", "bbId", "in", "responseBBIdList", ":", "\n", "                ", "try", ":", "\n", "                    ", "index2", "=", "ids", ".", "index", "(", "bbId", ")", "\n", "#adjMatrix[min(index1,index2),max(index1,index2)]=1", "\n", "pairs", ".", "add", "(", "(", "min", "(", "index1", ",", "index2", ")", ",", "max", "(", "index1", ",", "index2", ")", ")", ")", "\n", "numNeighbors", "[", "index1", "]", "+=", "1", "\n", "", "except", "ValueError", ":", "\n", "                    ", "pass", "\n", "", "", "", "img", "=", "np_img", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "[", "None", ",", "...", "]", "#from [row,col,color] to [batch,color,row,col]", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "img", "=", "1.0", "-", "img", "/", "128.0", "#ideally the median value would be 0", "\n", "\n", "bbs", "=", "convertBBs", "(", "bbs", ",", "self", ".", "rotate", ",", "numClasses", ")", "\n", "if", "'word_boxes'", "in", "form_metadata", ":", "\n", "             ", "form_metadata", "[", "'word_boxes'", "]", "=", "convertBBs", "(", "form_metadata", "[", "'word_boxes'", "]", "[", "None", ",", "...", "]", ",", "self", ".", "rotate", ",", "0", ")", "[", "0", ",", "...", "]", "\n", "", "if", "len", "(", "numNeighbors", ")", ">", "0", ":", "\n", "            ", "numNeighbors", "=", "torch", ".", "tensor", "(", "numNeighbors", ")", "[", "None", ",", ":", "]", "#add batch dim", "\n", "", "else", ":", "\n", "            ", "numNeighbors", "=", "None", "\n", "\n", "", "groups_adj", "=", "set", "(", ")", "\n", "if", "groups", "is", "not", "None", ":", "\n", "            ", "for", "n0", ",", "n1", "in", "pairs", ":", "\n", "                ", "g0", "=", "-", "1", "\n", "g1", "=", "-", "1", "\n", "for", "i", ",", "ns", "in", "enumerate", "(", "groups", ")", ":", "\n", "                    ", "if", "n0", "in", "ns", ":", "\n", "                        ", "g0", "=", "i", "\n", "if", "g1", "!=", "-", "1", ":", "\n", "                            ", "break", "\n", "", "", "if", "n1", "in", "ns", ":", "\n", "                        ", "g1", "=", "i", "\n", "if", "g0", "!=", "-", "1", ":", "\n", "                            ", "break", "\n", "", "", "", "if", "g0", "!=", "g1", ":", "\n", "                    ", "groups_adj", ".", "add", "(", "(", "min", "(", "g0", ",", "g1", ")", ",", "max", "(", "g0", ",", "g1", ")", ")", ")", "\n", "", "", "for", "group", "in", "groups", ":", "\n", "                ", "for", "i", "in", "group", ":", "\n", "                    ", "assert", "(", "i", "<", "bbs", ".", "shape", "[", "1", "]", ")", "\n", "", "", "targetIndexToGroup", "=", "{", "}", "\n", "for", "groupId", ",", "bbIds", "in", "enumerate", "(", "groups", ")", ":", "\n", "                ", "targetIndexToGroup", ".", "update", "(", "{", "bbId", ":", "groupId", "for", "bbId", "in", "bbIds", "}", ")", "\n", "\n", "", "", "transcription", "=", "[", "trans", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "\n", "return", "{", "\n", "\"img\"", ":", "img", ",", "\n", "\"bb_gt\"", ":", "bbs", ",", "\n", "\"num_neighbors\"", ":", "numNeighbors", ",", "\n", "\"adj\"", ":", "pairs", ",", "#adjMatrix,", "\n", "\"imgName\"", ":", "imageName", ",", "\n", "\"scale\"", ":", "s", ",", "\n", "\"cropPoint\"", ":", "cropPoint", ",", "\n", "\"transcription\"", ":", "transcription", ",", "\n", "\"metadata\"", ":", "[", "metadata", "[", "id", "]", "for", "id", "in", "ids", "if", "id", "in", "metadata", "]", ",", "\n", "\"form_metadata\"", ":", "form_metadata", ",", "\n", "\"gt_groups\"", ":", "groups", ",", "\n", "\"targetIndexToGroup\"", ":", "targetIndexToGroup", ",", "\n", "\"gt_groups_adj\"", ":", "groups_adj", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.graph_pair.collate": [[18, 21], ["len"], "function", ["None"], ["def", "collate", "(", "batch", ")", ":", "\n", "    ", "assert", "(", "len", "(", "batch", ")", "==", "1", ")", "\n", "return", "batch", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.funsd_graph_pair.FUNSDGraphPair.__init__": [[28, 98], ["graph_pair.GraphPairDataset.__init__", "open", "json.loads", "os.path.exists", "os.path.join", "f.read", "type", "os.path.join", "os.path.join", "os.path.join", "funsd_graph_pair.FUNSDGraphPair.images.append", "imagesAndAnn.append", "type", "print", "exit", "os.path.join", "os.path.join", "os.path.exists", "utils.imread", "utils.resize", "utils.imwrite", "os.path.join", "os.path.join", "imagesAndAnn.append", "print", "imageName.rfind", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imread", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.resize", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imwrite"], ["def", "__init__", "(", "self", ",", "dirPath", "=", "None", ",", "split", "=", "None", ",", "config", "=", "None", ",", "images", "=", "None", ")", ":", "\n", "        ", "super", "(", "FUNSDGraphPair", ",", "self", ")", ".", "__init__", "(", "dirPath", ",", "split", ",", "config", ",", "images", ")", "\n", "\n", "self", ".", "only_types", "=", "None", "\n", "\n", "self", ".", "split_to_lines", "=", "config", "[", "'split_to_lines'", "]", "\n", "\n", "if", "images", "is", "not", "None", ":", "\n", "            ", "self", ".", "images", "=", "images", "\n", "", "else", ":", "\n", "            ", "if", "'overfit'", "in", "config", "and", "config", "[", "'overfit'", "]", ":", "\n", "                ", "splitFile", "=", "'overfit_split.json'", "\n", "", "else", ":", "\n", "                ", "splitFile", "=", "'FUNSD_train_valid_test_split.json'", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "splitFile", ")", ")", "as", "f", ":", "\n", "                ", "readFile", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "if", "type", "(", "split", ")", "is", "str", ":", "\n", "                    ", "toUse", "=", "readFile", "[", "split", "]", "\n", "imagesAndAnn", "=", "[", "]", "\n", "imageDir", "=", "os", ".", "path", ".", "join", "(", "dirPath", ",", "toUse", "[", "'root'", "]", ",", "'images'", ")", "\n", "annDir", "=", "os", ".", "path", ".", "join", "(", "dirPath", ",", "toUse", "[", "'root'", "]", ",", "'annotations'", ")", "\n", "for", "name", "in", "toUse", "[", "'images'", "]", ":", "\n", "                        ", "imagesAndAnn", ".", "append", "(", "(", "name", "+", "'.png'", ",", "os", ".", "path", ".", "join", "(", "imageDir", ",", "name", "+", "'.png'", ")", ",", "os", ".", "path", ".", "join", "(", "annDir", ",", "name", "+", "'.json'", ")", ")", ")", "\n", "", "", "elif", "type", "(", "split", ")", "is", "list", ":", "\n", "                    ", "imagesAndAnn", "=", "[", "]", "\n", "for", "spstr", "in", "split", ":", "\n", "                        ", "toUse", "=", "readFile", "[", "spstr", "]", "\n", "imageDir", "=", "os", ".", "path", ".", "join", "(", "dirPath", ",", "toUse", "[", "'root'", "]", ",", "'images'", ")", "\n", "annDir", "=", "os", ".", "path", ".", "join", "(", "dirPath", ",", "toUse", "[", "'root'", "]", ",", "'annotations'", ")", "\n", "for", "name", "in", "toUse", "[", "'images'", "]", ":", "\n", "                            ", "imagesAndAnn", ".", "append", "(", "(", "name", "+", "'.png'", ",", "os", ".", "path", ".", "join", "(", "imageDir", ",", "name", "+", "'.png'", ")", ",", "os", ".", "path", ".", "join", "(", "annDir", ",", "name", "+", "'.json'", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "print", "(", "\"Error, unknown split {}\"", ".", "format", "(", "split", ")", ")", "\n", "exit", "(", ")", "\n", "", "", "self", ".", "images", "=", "[", "]", "\n", "for", "imageName", ",", "imagePath", ",", "jsonPath", "in", "imagesAndAnn", ":", "\n", "                ", "org_path", "=", "imagePath", "\n", "if", "self", ".", "cache_resized", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "imageName", ")", "\n", "", "else", ":", "\n", "                    ", "path", "=", "org_path", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "jsonPath", ")", ":", "\n", "                    ", "rescale", "=", "1.0", "\n", "if", "self", ".", "cache_resized", ":", "\n", "                        ", "rescale", "=", "self", ".", "rescale_range", "[", "1", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                            ", "org_img", "=", "img_f", ".", "imread", "(", "org_path", ")", "\n", "if", "org_img", "is", "None", ":", "\n", "                                ", "print", "(", "'WARNING, could not read {}'", ".", "format", "(", "org_img", ")", ")", "\n", "continue", "\n", "", "resized", "=", "img_f", ".", "resize", "(", "org_img", ",", "(", "0", ",", "0", ")", ",", "\n", "fx", "=", "self", ".", "rescale_range", "[", "1", "]", ",", "\n", "fy", "=", "self", ".", "rescale_range", "[", "1", "]", ",", "\n", ")", "\n", "img_f", ".", "imwrite", "(", "path", ",", "resized", ")", "\n", "", "", "self", ".", "images", ".", "append", "(", "{", "'id'", ":", "imageName", ",", "'imagePath'", ":", "path", ",", "'annotationPath'", ":", "jsonPath", ",", "'rescaled'", ":", "rescale", ",", "'imageName'", ":", "imageName", "[", ":", "imageName", ".", "rfind", "(", "'.'", ")", "]", "}", ")", "\n", "", "", "", "self", ".", "only_types", "=", "None", "\n", "self", ".", "errors", "=", "[", "]", "\n", "\n", "self", ".", "classMap", "=", "{", "\n", "'header'", ":", "16", ",", "\n", "'question'", ":", "17", ",", "\n", "'answer'", ":", "18", ",", "\n", "'other'", ":", "19", "\n", "}", "\n", "self", ".", "index_class_map", "=", "[", "\n", "'header'", ",", "\n", "'question'", ",", "\n", "'answer'", ",", "\n", "'other'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.funsd_graph_pair.FUNSDGraphPair.parseAnn": [[104, 220], ["len", "numpy.array", "utils.funsd_annotations.createLines", "numpy.empty", "enumerate", "list", "trans.append", "numNeighbors.append", "numpy.array.append", "word_trans.append", "range", "len", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.funsd_annotations.createLines"], ["", "def", "parseAnn", "(", "self", ",", "annotations", ",", "s", ")", ":", "\n", "\n", "        ", "numClasses", "=", "len", "(", "self", ".", "classMap", ")", "\n", "if", "self", ".", "split_to_lines", ":", "\n", "            ", "bbs", ",", "numNeighbors", ",", "trans", ",", "groups", "=", "createLines", "(", "annotations", ",", "self", ".", "classMap", ",", "s", ")", "\n", "", "else", ":", "\n", "            ", "boxes", "=", "annotations", "[", "'form'", "]", "\n", "bbs", "=", "np", ".", "empty", "(", "(", "1", ",", "len", "(", "boxes", ")", ",", "8", "+", "8", "+", "numClasses", ")", ",", "dtype", "=", "np", ".", "float32", ")", "#2x4 corners, 2x4 cross-points, n classes", "\n", "#pairs=set()", "\n", "numNeighbors", "=", "[", "]", "\n", "trans", "=", "[", "]", "\n", "for", "j", ",", "boxinfo", "in", "enumerate", "(", "boxes", ")", ":", "\n", "                ", "lX", ",", "tY", ",", "rX", ",", "bY", "=", "boxinfo", "[", "'box'", "]", "\n", "h", "=", "bY", "-", "tY", "\n", "w", "=", "rX", "-", "lX", "\n", "if", "h", "/", "w", ">", "5", "and", "self", ".", "rotate", ":", "#flip labeling, since FUNSD doesn't label verticle text correctly", "\n", "#I don't know if it needs rotated clockwise or countercw, so I just say countercw", "\n", "                    ", "bbs", "[", ":", ",", "j", ",", "0", "]", "=", "lX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "1", "]", "=", "bY", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "2", "]", "=", "lX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "3", "]", "=", "tY", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "4", "]", "=", "rX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "5", "]", "=", "tY", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "6", "]", "=", "rX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "7", "]", "=", "bY", "*", "s", "\n", "#we add these for conveince to crop BBs within window", "\n", "bbs", "[", ":", ",", "j", ",", "8", "]", "=", "s", "*", "(", "lX", "+", "rX", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "9", "]", "=", "s", "*", "bY", "\n", "bbs", "[", ":", ",", "j", ",", "10", "]", "=", "s", "*", "(", "lX", "+", "rX", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "11", "]", "=", "s", "*", "tY", "\n", "bbs", "[", ":", ",", "j", ",", "12", "]", "=", "s", "*", "lX", "\n", "bbs", "[", ":", ",", "j", ",", "13", "]", "=", "s", "*", "(", "tY", "+", "bY", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "14", "]", "=", "s", "*", "rX", "\n", "bbs", "[", ":", ",", "j", ",", "15", "]", "=", "s", "*", "(", "tY", "+", "bY", ")", "/", "2.0", "\n", "", "else", ":", "\n", "                    ", "bbs", "[", ":", ",", "j", ",", "0", "]", "=", "lX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "1", "]", "=", "tY", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "2", "]", "=", "rX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "3", "]", "=", "tY", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "4", "]", "=", "rX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "5", "]", "=", "bY", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "6", "]", "=", "lX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "7", "]", "=", "bY", "*", "s", "\n", "#we add these for conveince to crop BBs within window", "\n", "bbs", "[", ":", ",", "j", ",", "8", "]", "=", "s", "*", "lX", "\n", "bbs", "[", ":", ",", "j", ",", "9", "]", "=", "s", "*", "(", "tY", "+", "bY", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "10", "]", "=", "s", "*", "rX", "\n", "bbs", "[", ":", ",", "j", ",", "11", "]", "=", "s", "*", "(", "tY", "+", "bY", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "12", "]", "=", "s", "*", "(", "lX", "+", "rX", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "13", "]", "=", "s", "*", "tY", "\n", "bbs", "[", ":", ",", "j", ",", "14", "]", "=", "s", "*", "(", "rX", "+", "lX", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "15", "]", "=", "s", "*", "bY", "\n", "\n", "", "bbs", "[", ":", ",", "j", ",", "16", ":", "]", "=", "0", "\n", "if", "boxinfo", "[", "'label'", "]", "==", "'header'", ":", "\n", "                    ", "bbs", "[", ":", ",", "j", ",", "16", "]", "=", "1", "\n", "", "elif", "boxinfo", "[", "'label'", "]", "==", "'question'", ":", "\n", "                    ", "bbs", "[", ":", ",", "j", ",", "17", "]", "=", "1", "\n", "", "elif", "boxinfo", "[", "'label'", "]", "==", "'answer'", ":", "\n", "                    ", "bbs", "[", ":", ",", "j", ",", "18", "]", "=", "1", "\n", "", "elif", "boxinfo", "[", "'label'", "]", "==", "'other'", ":", "\n", "                    ", "bbs", "[", ":", ",", "j", ",", "19", "]", "=", "1", "\n", "\n", "", "trans", ".", "append", "(", "boxinfo", "[", "'text'", "]", ")", "\n", "numNeighbors", ".", "append", "(", "len", "(", "boxinfo", "[", "'linking'", "]", ")", ")", "\n", "", "groups", "=", "[", "[", "n", "]", "for", "n", "in", "range", "(", "len", "(", "boxes", ")", ")", "]", "\n", "\n", "", "word_boxes", "=", "[", "]", "\n", "word_trans", "=", "[", "]", "\n", "for", "entity", "in", "annotations", "[", "'form'", "]", ":", "\n", "            ", "for", "word", "in", "entity", "[", "'words'", "]", ":", "\n", "                ", "lX", ",", "tY", ",", "rX", ",", "bY", "=", "word", "[", "'box'", "]", "\n", "h", "=", "bY", "-", "tY", "+", "1", "\n", "w", "=", "rX", "-", "lX", "+", "1", "\n", "bb", "=", "[", "None", "]", "*", "16", "\n", "if", "h", "/", "w", ">", "5", "and", "self", ".", "rotate", ":", "#flip labeling, since FUNSD doesn't label verticle text correctly", "\n", "#I don't know if it needs rotated clockwise or countercw, so I just say countercw", "\n", "                    ", "bb", "[", "0", "]", "=", "lX", "*", "s", "\n", "bb", "[", "1", "]", "=", "bY", "*", "s", "\n", "bb", "[", "2", "]", "=", "lX", "*", "s", "\n", "bb", "[", "3", "]", "=", "tY", "*", "s", "\n", "bb", "[", "4", "]", "=", "rX", "*", "s", "\n", "bb", "[", "5", "]", "=", "tY", "*", "s", "\n", "bb", "[", "6", "]", "=", "rX", "*", "s", "\n", "bb", "[", "7", "]", "=", "bY", "*", "s", "\n", "#w these for conveince to crop BBs within window", "\n", "bb", "[", "8", "]", "=", "s", "*", "(", "lX", "+", "rX", ")", "/", "2.0", "\n", "bb", "[", "9", "]", "=", "s", "*", "bY", "\n", "bb", "[", "10", "]", "=", "s", "*", "(", "lX", "+", "rX", ")", "/", "2.0", "\n", "bb", "[", "11", "]", "=", "s", "*", "tY", "\n", "bb", "[", "12", "]", "=", "s", "*", "lX", "\n", "bb", "[", "13", "]", "=", "s", "*", "(", "tY", "+", "bY", ")", "/", "2.0", "\n", "bb", "[", "14", "]", "=", "s", "*", "rX", "\n", "bb", "[", "15", "]", "=", "s", "*", "(", "tY", "+", "bY", ")", "/", "2.0", "\n", "", "else", ":", "\n", "                    ", "bb", "[", "0", "]", "=", "lX", "*", "s", "\n", "bb", "[", "1", "]", "=", "tY", "*", "s", "\n", "bb", "[", "2", "]", "=", "rX", "*", "s", "\n", "bb", "[", "3", "]", "=", "tY", "*", "s", "\n", "bb", "[", "4", "]", "=", "rX", "*", "s", "\n", "bb", "[", "5", "]", "=", "bY", "*", "s", "\n", "bb", "[", "6", "]", "=", "lX", "*", "s", "\n", "bb", "[", "7", "]", "=", "bY", "*", "s", "\n", "#w these for conveince to crop BBs within window", "\n", "bb", "[", "8", "]", "=", "s", "*", "lX", "\n", "bb", "[", "9", "]", "=", "s", "*", "(", "tY", "+", "bY", ")", "/", "2.0", "\n", "bb", "[", "10", "]", "=", "s", "*", "rX", "\n", "bb", "[", "11", "]", "=", "s", "*", "(", "tY", "+", "bY", ")", "/", "2.0", "\n", "bb", "[", "12", "]", "=", "s", "*", "(", "lX", "+", "rX", ")", "/", "2.0", "\n", "bb", "[", "13", "]", "=", "s", "*", "tY", "\n", "bb", "[", "14", "]", "=", "s", "*", "(", "rX", "+", "lX", ")", "/", "2.0", "\n", "bb", "[", "15", "]", "=", "s", "*", "bY", "\n", "", "word_boxes", ".", "append", "(", "bb", ")", "\n", "word_trans", ".", "append", "(", "word", "[", "'text'", "]", ")", "\n", "", "", "word_boxes", "=", "np", ".", "array", "(", "word_boxes", ")", "\n", "return", "bbs", ",", "list", "(", "range", "(", "bbs", ".", "shape", "[", "1", "]", ")", ")", ",", "numClasses", ",", "trans", ",", "groups", ",", "{", "}", ",", "{", "'word_boxes'", ":", "word_boxes", ",", "'word_trans'", ":", "word_trans", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.funsd_graph_pair.FUNSDGraphPair.getResponseBBIdList": [[222, 235], ["cto.append", "cto.append"], "methods", ["None"], ["", "def", "getResponseBBIdList", "(", "self", ",", "queryId", ",", "annotations", ")", ":", "\n", "        ", "if", "self", ".", "split_to_lines", ":", "\n", "            ", "return", "annotations", "[", "'linking'", "]", "[", "queryId", "]", "\n", "", "else", ":", "\n", "            ", "boxes", "=", "annotations", "[", "'form'", "]", "\n", "cto", "=", "[", "]", "\n", "boxinfo", "=", "boxes", "[", "queryId", "]", "\n", "for", "id1", ",", "id2", "in", "boxinfo", "[", "'linking'", "]", ":", "\n", "                ", "if", "id1", "==", "queryId", ":", "\n", "                    ", "cto", ".", "append", "(", "id2", ")", "\n", "", "else", ":", "\n", "                    ", "cto", ".", "append", "(", "id1", ")", "\n", "", "", "return", "cto", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.funsd_graph_pair.collate": [[17, 20], ["len"], "function", ["None"], ["def", "collate", "(", "batch", ")", ":", "\n", "    ", "assert", "(", "len", "(", "batch", ")", "==", "1", ")", "#only batchsize of 1 allowed", "\n", "return", "batch", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.funsd_graph_pair.getWidthFromBB": [[238, 240], ["numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "", "", "def", "getWidthFromBB", "(", "bb", ")", ":", "\n", "    ", "return", "(", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "0", "]", "-", "bb", "[", "1", "]", ")", "+", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "3", "]", "-", "bb", "[", "2", "]", ")", ")", "/", "2", "\n", "", "def", "getHeightFromBB", "(", "bb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.funsd_graph_pair.getHeightFromBB": [[240, 242], ["numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "getHeightFromBB", "(", "bb", ")", ":", "\n", "    ", "return", "(", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "0", "]", "-", "bb", "[", "3", "]", ")", "+", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "1", "]", "-", "bb", "[", "2", "]", ")", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.testforms_graph_pair.display": [[13, 145], ["print", "matplotlib.pyplot.figure", "matplotlib.pyplot.subplot", "plt.subplot.set_axis_off", "plt.subplot.imshow", "range", "matplotlib.pyplot.show", "len", "data[].size", "plt.subplot.plot", "plt.subplot.plot", "groupCenters.append", "[].permute", "max", "min", "max", "min", "len", "plt.subplot.plot", "plt.subplot.plot", "len", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.show"], ["def", "display", "(", "data", ")", ":", "\n", "    ", "b", "=", "0", "\n", "\n", "#print (data['img'].size())", "\n", "#img = (data['img'][0].permute(1,2,0)+1)/2.0", "\n", "img", "=", "(", "data", "[", "'img'", "]", "[", "b", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "+", "1", ")", "/", "2.0", "\n", "#print(img.shape)", "\n", "#print(data['pixel_gt']['table_pixels'].shape)", "\n", "if", "len", "(", "only", ")", ">", "0", ":", "\n", "        ", "if", "only", "not", "in", "data", "[", "'imgName'", "]", ":", "\n", "            ", "return", "\n", "", "", "print", "(", "data", "[", "'imgName'", "]", ")", "\n", "\n", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "#gs = gridspec.GridSpec(1, 3)", "\n", "\n", "ax_im", "=", "plt", ".", "subplot", "(", ")", "\n", "ax_im", ".", "set_axis_off", "(", ")", "\n", "ax_im", ".", "imshow", "(", "img", "[", ":", ",", ":", ",", "0", "]", ",", "cmap", "=", "'gray'", ")", "\n", "\n", "colors", "=", "{", "'text_start_gt'", ":", "'g-'", ",", "\n", "'text_end_gt'", ":", "'b-'", ",", "\n", "'field_start_gt'", ":", "'r-'", ",", "\n", "'field_end_gt'", ":", "'y-'", ",", "\n", "'table_points'", ":", "'co'", "\n", "}", "\n", "#print('num bb:{}'.format(data['bb_sizes'][b]))", "\n", "for", "i", "in", "range", "(", "data", "[", "'bb_gt'", "]", ".", "size", "(", "1", ")", ")", ":", "\n", "        ", "xc", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "0", "]", "\n", "yc", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "1", "]", "\n", "rot", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "2", "]", "\n", "h", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "3", "]", "\n", "w", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "4", "]", "\n", "text", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "13", "]", "\n", "field", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "14", "]", "\n", "if", "text", ">", "0", ":", "\n", "            ", "color", "=", "'b-'", "\n", "", "else", ":", "\n", "            ", "color", "=", "'r-'", "\n", "", "tr", "=", "(", "math", ".", "cos", "(", "rot", ")", "*", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "h", "+", "xc", ",", "math", ".", "sin", "(", "rot", ")", "*", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "h", "+", "yc", ")", "\n", "tl", "=", "(", "math", ".", "cos", "(", "rot", ")", "*", "-", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "h", "+", "xc", ",", "math", ".", "sin", "(", "rot", ")", "*", "-", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "h", "+", "yc", ")", "\n", "br", "=", "(", "math", ".", "cos", "(", "rot", ")", "*", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "-", "h", "+", "xc", ",", "math", ".", "sin", "(", "rot", ")", "*", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "-", "h", "+", "yc", ")", "\n", "bl", "=", "(", "math", ".", "cos", "(", "rot", ")", "*", "-", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "-", "h", "+", "xc", ",", "math", ".", "sin", "(", "rot", ")", "*", "-", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "-", "h", "+", "yc", ")", "\n", "#print([tr,tl,br,bl])", "\n", "\n", "ax_im", ".", "plot", "(", "[", "tr", "[", "0", "]", ",", "tl", "[", "0", "]", ",", "bl", "[", "0", "]", ",", "br", "[", "0", "]", ",", "tr", "[", "0", "]", "]", ",", "[", "tr", "[", "1", "]", ",", "tl", "[", "1", "]", ",", "bl", "[", "1", "]", ",", "br", "[", "1", "]", ",", "tr", "[", "1", "]", "]", ",", "color", ")", "\n", "#groups=[]", "\n", "#groupMap={}", "\n", "", "for", "ind1", ",", "ind2", "in", "data", "[", "'adj'", "]", ":", "\n", "        ", "x1", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "ind1", ",", "0", "]", "\n", "y1", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "ind1", ",", "1", "]", "\n", "x2", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "ind2", ",", "0", "]", "\n", "y2", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "ind2", ",", "1", "]", "\n", "\n", "ax_im", ".", "plot", "(", "[", "x1", ",", "x2", "]", ",", "[", "y1", ",", "y2", "]", ",", "'g-'", ")", "\n", "#print('{} to {}, {} - {}'.format(ind1,ind2,(x1,y1),(x2,y2)))", "\n", "\n", "#    if data['bb_gt'][b,ind1,13]==data['bb_gt'][b,ind2,13]:", "\n", "#        if ind1 not in groupMap and ind2 not in groupMap:", "\n", "#            groups.append([ind1,ind2])", "\n", "#            groupMap[ind1]=groups[-1]", "\n", "#            groupMap[ind2]=groups[-1]", "\n", "#        elif ind1 not in groupMap:", "\n", "#            groupMap[ind2].append(ind1)", "\n", "#            groupMap[ind1]=groupMap[ind2]", "\n", "#        elif ind2 not in groupMap:", "\n", "#            groupMap[ind1].append(ind2)", "\n", "#            groupMap[ind2]=groupMap[ind1]", "\n", "#        else:", "\n", "#            goneGroup = groupMap[ind2]", "\n", "#            groups.remove(groupMap[ind2])", "\n", "#            groupMap[ind1] += goneGroup", "\n", "#            for indx in goneGroup:", "\n", "#                groupMap[indx] = groupMap[ind1]", "\n", "\n", "#for group in groups:", "\n", "#    maxX=0", "\n", "#    maxY=0", "\n", "#    minX=9999999", "\n", "#    minY=9999999", "\n", "#    for i in group:", "\n", "#        xc=data['bb_gt'][b,i,0]", "\n", "#        yc=data['bb_gt'][b,i,1]", "\n", "#        rot=data['bb_gt'][b,i,2]", "\n", "#        h=data['bb_gt'][b,i,3]", "\n", "#        w=data['bb_gt'][b,i,4]", "\n", "#        text=data['bb_gt'][b,i,13]", "\n", "#        field=data['bb_gt'][b,i,14]", "\n", "#        if text>0:", "\n", "#            color = 'y:'", "\n", "#        else:", "\n", "#            color = 'm:'", "\n", "#        tr = (math.cos(rot)*w-math.sin(rot)*h +xc, math.sin(rot)*w+math.cos(rot)*h +yc)", "\n", "#        tl = (math.cos(rot)*-w-math.sin(rot)*h +xc, math.sin(rot)*-w+math.cos(rot)*h +yc)", "\n", "#        br = (math.cos(rot)*w-math.sin(rot)*-h +xc, math.sin(rot)*w+math.cos(rot)*-h +yc)", "\n", "#        bl = (math.cos(rot)*-w-math.sin(rot)*-h +xc, math.sin(rot)*-w+math.cos(rot)*-h +yc)", "\n", "#        maxX = max(maxX,tr[0],tl[0],br[0],bl[0])", "\n", "#        minX = min(minX,tr[0],tl[0],br[0],bl[0])", "\n", "#        maxY = max(maxY,tr[1],tl[1],br[1],bl[1])", "\n", "#        minY = min(minY,tr[1],tl[1],br[1],bl[1])", "\n", "#    ax_im.plot([minX,maxX,maxX,minX,minX],[minY,minY,maxY,maxY,minY],color)", "\n", "", "groupCenters", "=", "[", "]", "\n", "for", "group", "in", "data", "[", "'gt_groups'", "]", ":", "\n", "        ", "maxX", "=", "maxY", "=", "0", "\n", "minX", "=", "minY", "=", "999999999", "\n", "for", "i", "in", "group", ":", "\n", "            ", "xc", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "0", "]", "\n", "yc", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "1", "]", "\n", "rot", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "2", "]", "\n", "h", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "3", "]", "\n", "w", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "4", "]", "\n", "tr", "=", "(", "math", ".", "cos", "(", "rot", ")", "*", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "h", "+", "xc", ",", "math", ".", "sin", "(", "rot", ")", "*", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "h", "+", "yc", ")", "\n", "tl", "=", "(", "math", ".", "cos", "(", "rot", ")", "*", "-", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "h", "+", "xc", ",", "math", ".", "sin", "(", "rot", ")", "*", "-", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "h", "+", "yc", ")", "\n", "br", "=", "(", "math", ".", "cos", "(", "rot", ")", "*", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "-", "h", "+", "xc", ",", "math", ".", "sin", "(", "rot", ")", "*", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "-", "h", "+", "yc", ")", "\n", "bl", "=", "(", "math", ".", "cos", "(", "rot", ")", "*", "-", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "-", "h", "+", "xc", ",", "math", ".", "sin", "(", "rot", ")", "*", "-", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "-", "h", "+", "yc", ")", "\n", "maxX", "=", "max", "(", "maxX", ",", "tr", "[", "0", "]", ",", "tl", "[", "0", "]", ",", "br", "[", "0", "]", ",", "bl", "[", "0", "]", ")", "\n", "minX", "=", "min", "(", "minX", ",", "tr", "[", "0", "]", ",", "tl", "[", "0", "]", ",", "br", "[", "0", "]", ",", "bl", "[", "0", "]", ")", "\n", "maxY", "=", "max", "(", "maxY", ",", "tr", "[", "1", "]", ",", "tl", "[", "1", "]", ",", "br", "[", "1", "]", ",", "bl", "[", "1", "]", ")", "\n", "minY", "=", "min", "(", "minY", ",", "tr", "[", "1", "]", ",", "tl", "[", "1", "]", ",", "br", "[", "1", "]", ",", "bl", "[", "1", "]", ")", "\n", "\n", "", "if", "len", "(", "group", ")", ">", "1", ":", "\n", "            ", "ax_im", ".", "plot", "(", "[", "minX", ",", "maxX", ",", "maxX", ",", "minX", ",", "minX", "]", ",", "[", "minY", ",", "minY", ",", "maxY", ",", "maxY", ",", "minY", "]", ",", "'c:'", ")", "\n", "", "groupCenters", ".", "append", "(", "(", "(", "minX", "+", "maxX", ")", "//", "2", ",", "(", "minY", "+", "minY", ")", "//", "2", ",", "len", "(", "group", ")", ">", "1", ")", ")", "\n", "\n", "", "for", "g1", ",", "g2", "in", "data", "[", "'gt_groups_adj'", "]", ":", "\n", "        ", "x1", ",", "y1", ",", "big1", "=", "groupCenters", "[", "g1", "]", "\n", "x2", ",", "y2", ",", "big2", "=", "groupCenters", "[", "g2", "]", "\n", "if", "big1", "or", "big2", ":", "\n", "            ", "ax_im", ".", "plot", "(", "[", "x1", ",", "x2", "]", ",", "[", "y1", ",", "y2", "]", ",", "'c-'", ")", "\n", "", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.testfunsd_graph_pair.display": [[14, 116], ["print", "zip", "matplotlib.pyplot.figure", "matplotlib.pyplot.subplot", "plt.subplot.set_axis_off", "plt.subplot.imshow", "range", "matplotlib.pyplot.show", "print", "data[].size", "plt.subplot.plot", "groupCenters.append", "plt.subplot.plot", "[].permute", "max", "max", "min", "min", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.sin", "math.cos"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.show"], ["def", "display", "(", "data", ")", ":", "\n", "    ", "b", "=", "0", "\n", "\n", "#print (data['img'].size())", "\n", "#img = (data['img'][0].permute(1,2,0)+1)/2.0", "\n", "img", "=", "(", "1", "-", "data", "[", "'img'", "]", "[", "b", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ")", "/", "2.0", "\n", "#print(img.shape)", "\n", "#print(data['pixel_gt']['table_pixels'].shape)", "\n", "print", "(", "data", "[", "'imgName'", "]", ")", "\n", "\n", "#hs.append(img.shape[0])", "\n", "#ws.append(img.shape[1])", "\n", "#return", "\n", "\n", "for", "q", ",", "a", "in", "zip", "(", "data", "[", "'questions'", "]", ",", "data", "[", "'answers'", "]", ")", ":", "\n", "        ", "print", "(", "q", "+", "' '", "+", "a", ")", "\n", "", "return", "\n", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "ax_im", "=", "plt", ".", "subplot", "(", ")", "\n", "ax_im", ".", "set_axis_off", "(", ")", "\n", "ax_im", ".", "imshow", "(", "img", "[", ":", ",", ":", ",", "0", "]", ",", "cmap", "=", "'gray'", ")", "\n", "\n", "colors", "=", "{", "'text_start_gt'", ":", "'g-'", ",", "\n", "'text_end_gt'", ":", "'b-'", ",", "\n", "'field_start_gt'", ":", "'r-'", ",", "\n", "'field_end_gt'", ":", "'y-'", ",", "\n", "'table_points'", ":", "'co'", "\n", "}", "\n", "#print('num bb:{}'.format(data['bb_sizes'][b]))", "\n", "for", "i", "in", "range", "(", "data", "[", "'bb_gt'", "]", ".", "size", "(", "1", ")", ")", ":", "\n", "        ", "xc", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "0", "]", "\n", "yc", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "1", "]", "\n", "rot", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "2", "]", "\n", "h", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "3", "]", "\n", "w", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "4", "]", "\n", "header", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "13", "]", "\n", "question", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "14", "]", "\n", "answer", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "15", "]", "\n", "other", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "16", "]", "\n", "if", "header", ":", "\n", "            ", "color", "=", "'b-'", "\n", "", "elif", "question", ":", "\n", "            ", "color", "=", "'c-'", "\n", "", "elif", "answer", ":", "\n", "            ", "color", "=", "'y-'", "\n", "", "elif", "other", ":", "\n", "            ", "color", "=", "'m-'", "\n", "", "tr", "=", "(", "math", ".", "cos", "(", "rot", ")", "*", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "h", "+", "xc", ",", "math", ".", "sin", "(", "rot", ")", "*", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "h", "+", "yc", ")", "\n", "tl", "=", "(", "math", ".", "cos", "(", "rot", ")", "*", "-", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "h", "+", "xc", ",", "math", ".", "sin", "(", "rot", ")", "*", "-", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "h", "+", "yc", ")", "\n", "br", "=", "(", "math", ".", "cos", "(", "rot", ")", "*", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "-", "h", "+", "xc", ",", "math", ".", "sin", "(", "rot", ")", "*", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "-", "h", "+", "yc", ")", "\n", "bl", "=", "(", "math", ".", "cos", "(", "rot", ")", "*", "-", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "-", "h", "+", "xc", ",", "math", ".", "sin", "(", "rot", ")", "*", "-", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "-", "h", "+", "yc", ")", "\n", "#print([tr,tl,br,bl])", "\n", "#for i in range(data['form_metadata']['word_boxes'].size(0)):", "\n", "#    word_bbs = data['form_metadata']['word_boxes']", "\n", "#    xc=word_bbs[i,0]", "\n", "#    yc=word_bbs[i,1]", "\n", "#    rot=word_bbs[i,2]", "\n", "#    h=word_bbs[i,3]", "\n", "#    w=word_bbs[i,4]", "\n", "#    color = 'r-'", "\n", "#    tr = (math.cos(rot)*w-math.sin(rot)*h +xc, math.sin(rot)*w+math.cos(rot)*h +yc)", "\n", "#    tl = (math.cos(rot)*-w-math.sin(rot)*h +xc, math.sin(rot)*-w+math.cos(rot)*h +yc)", "\n", "#    br = (math.cos(rot)*w-math.sin(rot)*-h +xc, math.sin(rot)*w+math.cos(rot)*-h +yc)", "\n", "#    bl = (math.cos(rot)*-w-math.sin(rot)*-h +xc, math.sin(rot)*-w+math.cos(rot)*-h +yc)", "\n", "\n", "#    ax_im.plot([tr[0],tl[0],bl[0],br[0],tr[0]],[tr[1],tl[1],bl[1],br[1],tr[1]],color)", "\n", "#for ind1,ind2 in data['adj']:", "\n", "#    x1=data['bb_gt'][b,ind1,0]", "\n", "#    y1=data['bb_gt'][b,ind1,1]", "\n", "#    x2=data['bb_gt'][b,ind2,0]", "\n", "#    y2=data['bb_gt'][b,ind2,1]", "\n", "\n", "#    ax_im.plot([x1,x2],[y1,y2],'m-')", "\n", "#    #print('{} to {}, {} - {}'.format(ind1,ind2,(x1,y1),(x2,y2)))", "\n", "\n", "", "groupCenters", "=", "[", "]", "\n", "for", "group", "in", "data", "[", "'gt_groups'", "]", ":", "\n", "        ", "maxX", "=", "maxY", "=", "0", "\n", "minX", "=", "minY", "=", "999999999", "\n", "for", "i", "in", "group", ":", "\n", "            ", "xc", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "0", "]", "\n", "yc", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "1", "]", "\n", "rot", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "2", "]", "\n", "assert", "(", "rot", "==", "0", ")", "\n", "h", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "3", "]", "\n", "w", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "4", "]", "\n", "maxX", "=", "max", "(", "maxX", ",", "xc", "+", "w", ")", "\n", "maxY", "=", "max", "(", "maxY", ",", "yc", "+", "h", ")", "\n", "minX", "=", "min", "(", "minX", ",", "xc", "-", "w", ")", "\n", "minY", "=", "min", "(", "minY", ",", "yc", "-", "h", ")", "\n", "", "ax_im", ".", "plot", "(", "[", "minX", ",", "maxX", ",", "maxX", ",", "minX", ",", "minX", "]", ",", "[", "minY", ",", "minY", ",", "maxY", ",", "maxY", ",", "minY", "]", ",", "'c:'", ")", "\n", "groupCenters", ".", "append", "(", "(", "(", "minX", "+", "maxX", ")", "//", "2", ",", "(", "minY", "+", "minY", ")", "//", "2", ")", ")", "\n", "\n", "", "for", "g1", ",", "g2", "in", "data", "[", "'gt_groups_adj'", "]", ":", "\n", "        ", "x1", ",", "y1", "=", "groupCenters", "[", "g1", "]", "\n", "x2", ",", "y2", "=", "groupCenters", "[", "g2", "]", "\n", "ax_im", ".", "plot", "(", "[", "x1", ",", "x2", "]", ",", "[", "y1", ",", "y2", "]", ",", "'c-'", ")", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.testfunsd_box_detect.display": [[12, 75], ["data[].size", "range", "print", "print", "print", "range", "utils.img_f.imshow", "utils.img_f.show", "utils.img_f.gray2rgb", "utils.img_f.polylines", "[].permute", "numpy.array", "math.cos", "math.sin", "math.cos", "math.sin", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.sin", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.show", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.gray2rgb", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.polylines"], ["def", "display", "(", "data", ")", ":", "\n", "    ", "batchSize", "=", "data", "[", "'img'", "]", ".", "size", "(", "0", ")", "\n", "for", "b", "in", "range", "(", "batchSize", ")", ":", "\n", "        ", "img", "=", "(", "data", "[", "'img'", "]", "[", "b", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "+", "1", ")", "/", "2.0", "\n", "print", "(", "data", "[", "'imgName'", "]", "[", "b", "]", ")", "\n", "\n", "\n", "\n", "#fig = plt.figure()", "\n", "#gs = gridspec.GridSpec(1, 3)", "\n", "\n", "#ax_im = plt.subplot()", "\n", "#ax_im.set_axis_off()", "\n", "#if img.shape[2]==1:", "\n", "#    ax_im.imshow(img[0])", "\n", "#else:", "\n", "#    ax_im.imshow(img)", "\n", "if", "img", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "img", "=", "img_f", ".", "gray2rgb", "(", "img", ")", "\n", "\n", "", "colors", "=", "{", "'text_start_gt'", ":", "'g-'", ",", "\n", "'text_end_gt'", ":", "'b-'", ",", "\n", "'field_start_gt'", ":", "'r-'", ",", "\n", "'field_end_gt'", ":", "'y-'", ",", "\n", "'table_points'", ":", "'co'", ",", "\n", "'start_of_line'", ":", "'y-'", ",", "\n", "'end_of_line'", ":", "'c-'", ",", "\n", "}", "\n", "print", "(", "'num bb:{}'", ".", "format", "(", "data", "[", "'bb_sizes'", "]", "[", "b", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "data", "[", "'bb_sizes'", "]", "[", "b", "]", ")", ":", "\n", "            ", "xc", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "0", "]", "\n", "yc", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "1", "]", "\n", "rot", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "2", "]", "\n", "h", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "3", "]", "\n", "w", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "4", "]", "\n", "header", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "13", "]", "\n", "question", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "14", "]", "\n", "answer", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "15", "]", "\n", "other", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "16", "]", "\n", "if", "header", ":", "\n", "                ", "color", "=", "(", "1", ",", "0", ",", "0", ")", "#'r-'", "\n", "", "elif", "question", ":", "\n", "                ", "color", "=", "(", "0", ",", "0", ",", "1", ")", "#'b-'", "\n", "", "elif", "answer", ":", "\n", "                ", "color", "=", "(", "0", ",", "1", ",", "0", ")", "#'g-'", "\n", "", "elif", "other", ":", "\n", "                ", "color", "=", "(", "1", ",", "1", ",", "0", ")", "#'y-'", "\n", "", "else", ":", "\n", "                ", "assert", "(", "False", ")", "\n", "", "tr", "=", "(", "math", ".", "cos", "(", "rot", ")", "*", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "h", "+", "xc", ",", "-", "math", ".", "sin", "(", "rot", ")", "*", "w", "-", "math", ".", "cos", "(", "rot", ")", "*", "h", "+", "yc", ")", "\n", "tl", "=", "(", "-", "math", ".", "cos", "(", "rot", ")", "*", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "h", "+", "xc", ",", "math", ".", "sin", "(", "rot", ")", "*", "w", "-", "math", ".", "cos", "(", "rot", ")", "*", "h", "+", "yc", ")", "\n", "br", "=", "(", "math", ".", "cos", "(", "rot", ")", "*", "w", "+", "math", ".", "sin", "(", "rot", ")", "*", "h", "+", "xc", ",", "-", "math", ".", "sin", "(", "rot", ")", "*", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "h", "+", "yc", ")", "\n", "bl", "=", "(", "-", "math", ".", "cos", "(", "rot", ")", "*", "w", "+", "math", ".", "sin", "(", "rot", ")", "*", "h", "+", "xc", ",", "math", ".", "sin", "(", "rot", ")", "*", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "h", "+", "yc", ")", "\n", "#print([tr,tl,br,bl])", "\n", "\n", "#ax_im.plot([tr[0],tl[0],bl[0],br[0],tr[0]],[tr[1],tl[1],bl[1],br[1],tr[1]],color)", "\n", "img_f", ".", "polylines", "(", "img", ",", "np", ".", "array", "(", "[", "tr", ",", "tl", ",", "bl", ",", "br", "]", ")", ",", "'transparent'", ",", "color", ")", "\n", "\n", "\n", "#plt.show()", "\n", "", "img_f", ".", "imshow", "(", "'page'", ",", "img", ")", "\n", "img_f", ".", "show", "(", ")", "\n", "", "print", "(", "'batch complete'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.box_detect.BoxDetectDataset.__init__": [[188, 221], ["utils.crop_transform.CropBoxTransform", "type", "type", "os.path.join", "os.path.exists", "os.mkdir", "type", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dirPath", "=", "None", ",", "split", "=", "None", ",", "config", "=", "None", ",", "images", "=", "None", ")", ":", "\n", "#if 'augmentation_params' in config['data_loader']:", "\n", "#    self.augmentation_params=config['augmentation_params']", "\n", "#else:", "\n", "#    self.augmentation_params=None", "\n", "        ", "self", ".", "rotate", "=", "config", "[", "'rotation'", "]", "if", "'rotation'", "in", "config", "else", "True", "\n", "#patchSize=config['patch_size']", "\n", "if", "'crop_params'", "in", "config", "and", "config", "[", "'crop_params'", "]", ":", "\n", "            ", "self", ".", "transform", "=", "CropBoxTransform", "(", "config", "[", "'crop_params'", "]", ",", "self", ".", "rotate", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "None", "\n", "", "self", ".", "rescale_range", "=", "config", "[", "'rescale_range'", "]", "\n", "if", "type", "(", "self", ".", "rescale_range", ")", "is", "float", "or", "type", "(", "self", ".", "rescale_range", ")", "is", "int", ":", "\n", "            ", "self", ".", "rescale_range", "=", "[", "self", ".", "rescale_range", ",", "self", ".", "rescale_range", "]", "\n", "", "if", "'cache_resized_images'", "in", "config", ":", "\n", "            ", "self", ".", "cache_resized", "=", "config", "[", "'cache_resized_images'", "]", "\n", "if", "self", ".", "cache_resized", ":", "\n", "                ", "self", ".", "cache_path", "=", "os", ".", "path", ".", "join", "(", "dirPath", ",", "'cache_'", "+", "str", "(", "self", ".", "rescale_range", "[", "1", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "cache_path", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "self", ".", "cache_path", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "cache_resized", "=", "False", "\n", "", "self", ".", "pixel_count_thresh", "=", "config", "[", "'pixel_count_thresh'", "]", "if", "'pixel_count_thresh'", "in", "config", "else", "10000000", "\n", "self", ".", "max_dim_thresh", "=", "config", "[", "'max_dim_thresh'", "]", "if", "'max_dim_thresh'", "in", "config", "else", "2700", "\n", "self", ".", "color", "=", "config", "[", "'color'", "]", "if", "'color'", "in", "config", "else", "True", "\n", "\n", "if", "'random_image_aug'", "in", "config", "and", "config", "[", "'random_image_aug'", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "useRandomAugProb", "=", "config", "[", "'random_image_aug'", "]", "if", "type", "(", "config", "[", "'random_image_aug'", "]", ")", "is", "float", "else", "0.05", "\n", "self", ".", "randomImageTypes", "=", "config", "[", "'random_image_types'", "]", "if", "'random_image_types'", "in", "config", "else", "[", "'blank'", ",", "'uniform'", ",", "'gaussian'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "useRandomAugProb", "=", "None", "\n", "\n", "", "self", ".", "coordConv", "=", "config", "[", "'coord_conv'", "]", "if", "'coord_conv'", "in", "config", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.box_detect.BoxDetectDataset.__len__": [[225, 227], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.box_detect.BoxDetectDataset.__getitem__": [[228, 230], ["box_detect.BoxDetectDataset.getitem"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.datasets.box_detect.BoxDetectDataset.getitem"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "getitem", "(", "index", ")", "\n", "", "def", "getitem", "(", "self", ",", "index", ",", "scaleP", "=", "None", ",", "cropPoint", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.box_detect.BoxDetectDataset.getitem": [[230, 438], ["utils.imread", "box_detect.BoxDetectDataset.parseAnn", "torch.from_numpy.astype", "torch.from_numpy", "utils.forms_annotations.convertBBs", "box_detect.BoxDetectDataset.getRandomImage", "open", "json.loads", "numpy.concatenate.max", "print", "box_detect.BoxDetectDataset.__getitem__", "numpy.random.uniform", "utils.resize", "len", "numpy.repeat", "numpy.repeat", "numpy.repeat", "numpy.concatenate", "box_detect.BoxDetectDataset.transform", "numpy.concatenate.transpose", "torch.from_numpy", "numpy.random.rand", "annFile.read", "math.sqrt", "print", "max", "print", "utils.augmentation.apply_random_color_rotation", "utils.augmentation.apply_tensmeyer_brightness", "utils.augmentation.apply_tensmeyer_brightness", "torch.from_numpy.transpose", "len", "torch.tensor", "box_detect.BoxDetectDataset.__len__", "numpy.arange", "numpy.arange", "numpy.repeat.astype", "numpy.repeat.astype", "torch.from_numpy", "torch.from_numpy", "type", "type", "max", "len", "torch.cat", "len", "torch.cat", "toComb.append", "toComb.append"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imread", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.FormsBoxDetect.parseAnn", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.convertBBs", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.box_detect.BoxDetectDataset.getRandomImage", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.box_detect.BoxDetectDataset.__getitem__", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.resize", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.augmentation.apply_random_color_rotation", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.augmentation.apply_tensmeyer_brightness", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.augmentation.apply_tensmeyer_brightness", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader.__len__"], ["", "def", "getitem", "(", "self", ",", "index", ",", "scaleP", "=", "None", ",", "cropPoint", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "useRandomAugProb", "is", "not", "None", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "useRandomAugProb", "and", "scaleP", "is", "None", "and", "cropPoint", "is", "None", ":", "\n", "            ", "return", "self", ".", "getRandomImage", "(", ")", "\n", "##ticFull=timeit.default_timer()", "\n", "", "imagePath", "=", "self", ".", "images", "[", "index", "]", "[", "'imagePath'", "]", "\n", "imageName", "=", "self", ".", "images", "[", "index", "]", "[", "'imageName'", "]", "\n", "annotationPath", "=", "self", ".", "images", "[", "index", "]", "[", "'annotationPath'", "]", "\n", "#print(annotationPath)", "\n", "rescaled", "=", "self", ".", "images", "[", "index", "]", "[", "'rescaled'", "]", "\n", "with", "open", "(", "annotationPath", ")", "as", "annFile", ":", "\n", "            ", "annotations", "=", "json", ".", "loads", "(", "annFile", ".", "read", "(", ")", ")", "\n", "\n", "\n", "##tic=timeit.default_timer()", "\n", "", "np_img", "=", "img_f", ".", "imread", "(", "imagePath", ",", "1", "if", "self", ".", "color", "else", "0", ")", "#/255.0", "\n", "if", "np_img", ".", "max", "(", ")", "<", "200", ":", "\n", "            ", "np_img", "*=", "255", "\n", "", "if", "np_img", "is", "None", "or", "np_img", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "print", "(", "\"ERROR, could not open \"", "+", "imagePath", ")", "\n", "return", "self", ".", "__getitem__", "(", "(", "index", "+", "1", ")", "%", "self", ".", "__len__", "(", ")", ")", "\n", "\n", "", "if", "scaleP", "is", "None", ":", "\n", "            ", "s", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "rescale_range", "[", "0", "]", ",", "self", ".", "rescale_range", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "scaleP", "\n", "", "partial_rescale", "=", "s", "/", "rescaled", "\n", "if", "self", ".", "transform", "is", "None", ":", "#we're doing the whole image", "\n", "#this is a check to be sure we don't send too big images through", "\n", "            ", "pixel_count", "=", "partial_rescale", "*", "partial_rescale", "*", "np_img", ".", "shape", "[", "0", "]", "*", "np_img", ".", "shape", "[", "1", "]", "\n", "if", "pixel_count", ">", "self", ".", "pixel_count_thresh", ":", "\n", "                ", "partial_rescale", "=", "math", ".", "sqrt", "(", "partial_rescale", "*", "partial_rescale", "*", "self", ".", "pixel_count_thresh", "/", "pixel_count", ")", "\n", "print", "(", "'{} exceed thresh: {}: {}, new {}: {}'", ".", "format", "(", "imageName", ",", "s", ",", "pixel_count", ",", "rescaled", "*", "partial_rescale", ",", "partial_rescale", "*", "partial_rescale", "*", "np_img", ".", "shape", "[", "0", "]", "*", "np_img", ".", "shape", "[", "1", "]", ")", ")", "\n", "s", "=", "rescaled", "*", "partial_rescale", "\n", "\n", "\n", "", "max_dim", "=", "partial_rescale", "*", "max", "(", "np_img", ".", "shape", "[", "0", "]", ",", "np_img", ".", "shape", "[", "1", "]", ")", "\n", "if", "max_dim", ">", "self", ".", "max_dim_thresh", ":", "\n", "                ", "partial_rescale", "=", "partial_rescale", "*", "(", "self", ".", "max_dim_thresh", "/", "max_dim", ")", "\n", "print", "(", "'{} exceed thresh: {}: {}, new {}: {}'", ".", "format", "(", "imageName", ",", "s", ",", "max_dim", ",", "rescaled", "*", "partial_rescale", ",", "partial_rescale", "*", "max", "(", "np_img", ".", "shape", "[", "0", "]", ",", "np_img", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "s", "=", "rescaled", "*", "partial_rescale", "\n", "#print('! dataset transformed {}'.format(np_img.shape))", "\n", "\n", "\n", "\n", "##tic=timeit.default_timer()", "\n", "#np_img = img_f.resize(np_img,(target_dim1, target_dim0))", "\n", "", "", "if", "np_img", "is", "not", "None", ":", "\n", "#print('! dataset not none...')", "\n", "            ", "np_img", "=", "img_f", ".", "resize", "(", "np_img", ",", "(", "0", ",", "0", ")", ",", "\n", "fx", "=", "partial_rescale", ",", "\n", "fy", "=", "partial_rescale", ",", "\n", ")", "\n", "#print('! dataset resize')", "\n", "", "if", "len", "(", "np_img", ".", "shape", ")", "==", "2", ":", "\n", "            ", "np_img", "=", "np_img", "[", "...", ",", "None", "]", "#add 'color' channel", "\n", "", "if", "self", ".", "color", "and", "np_img", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "np_img", "=", "np", ".", "repeat", "(", "np_img", ",", "3", ",", "axis", "=", "2", ")", "\n", "##print('resize: {}  [{}, {}]'.format(timeit.default_timer()-tic,np_img.shape[0],np_img.shape[1]))", "\n", "\n", "\n", "", "bbs", ",", "line_gts", ",", "point_gts", ",", "pixel_gt", ",", "numClasses", ",", "numNeighbors", ",", "pairs", "=", "self", ".", "parseAnn", "(", "np_img", ",", "annotations", ",", "s", ",", "imagePath", ")", "\n", "\n", "if", "self", ".", "coordConv", ":", "#add absolute position information", "\n", "            ", "xs", "=", "255", "*", "np", ".", "arange", "(", "np_img", ".", "shape", "[", "1", "]", ")", "/", "(", "np_img", ".", "shape", "[", "1", "]", ")", "\n", "xs", "=", "np", ".", "repeat", "(", "xs", "[", "None", ",", ":", ",", "None", "]", ",", "np_img", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "ys", "=", "255", "*", "np", ".", "arange", "(", "np_img", ".", "shape", "[", "0", "]", ")", "/", "(", "np_img", ".", "shape", "[", "0", "]", ")", "\n", "ys", "=", "np", ".", "repeat", "(", "ys", "[", ":", ",", "None", ",", "None", "]", ",", "np_img", ".", "shape", "[", "1", "]", ",", "axis", "=", "1", ")", "\n", "np_img", "=", "np", ".", "concatenate", "(", "(", "np_img", ",", "xs", ".", "astype", "(", "np_img", ".", "dtype", ")", ",", "ys", ".", "astype", "(", "np_img", ".", "dtype", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "##ticTr=timeit.default_timer()", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "pairs", "=", "None", "\n", "out", ",", "cropPoint", "=", "self", ".", "transform", "(", "{", "\n", "\"img\"", ":", "np_img", ",", "\n", "\"bb_gt\"", ":", "bbs", ",", "\n", "\"bb_auxs\"", ":", "numNeighbors", ",", "\n", "\"line_gt\"", ":", "line_gts", ",", "\n", "\"point_gt\"", ":", "point_gts", ",", "\n", "\"pixel_gt\"", ":", "pixel_gt", ",", "\n", "\n", "}", ",", "cropPoint", ")", "\n", "np_img", "=", "out", "[", "'img'", "]", "\n", "bbs", "=", "out", "[", "'bb_gt'", "]", "\n", "numNeighbors", "=", "out", "[", "'bb_auxs'", "]", "\n", "#if 'table_points' in out['point_gt']:", "\n", "#    table_points = out['point_gt']['table_points']", "\n", "#else:", "\n", "#    table_points=None", "\n", "point_gts", "=", "out", "[", "'point_gt'", "]", "\n", "pixel_gt", "=", "out", "[", "'pixel_gt'", "]", "\n", "#start_of_line = out['line_gt']['start_of_line']", "\n", "#end_of_line = out['line_gt']['end_of_line']", "\n", "line_gts", "=", "out", "[", "'line_gt'", "]", "\n", "\n", "##tic=timeit.default_timer()", "\n", "if", "self", ".", "color", ":", "\n", "                ", "np_img", "[", ":", ",", ":", ",", ":", "3", "]", "=", "augmentation", ".", "apply_random_color_rotation", "(", "np_img", "[", ":", ",", ":", ",", ":", "3", "]", ")", "\n", "np_img", "[", ":", ",", ":", ",", ":", "3", "]", "=", "augmentation", ".", "apply_tensmeyer_brightness", "(", "np_img", "[", ":", ",", ":", ",", ":", "3", "]", ")", "\n", "", "else", ":", "\n", "                ", "np_img", "[", ":", ",", ":", ",", "0", ":", "1", "]", "=", "augmentation", ".", "apply_tensmeyer_brightness", "(", "np_img", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", "\n", "##print('augmentation: {}'.format(timeit.default_timer()-tic))", "\n", "##print('transfrm: {}  [{}, {}]'.format(timeit.default_timer()-ticTr,org_img.shape[0],org_img.shape[1]))", "\n", "\n", "#if len(np_img.shape)==2:", "\n", "#    img=np_img[None,None,:,:] #add \"color\" channel and batch", "\n", "#else:", "\n", "", "", "img", "=", "np_img", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "[", "None", ",", "...", "]", "#from [row,col,color] to [batch,color,row,col]", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "img", "=", "1.0", "-", "img", "/", "128.0", "#ideally the median value would be 0", "\n", "\n", "if", "pixel_gt", "is", "not", "None", ":", "\n", "            ", "pixel_gt", "=", "pixel_gt", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "[", "None", ",", "...", "]", "\n", "pixel_gt", "=", "torch", ".", "from_numpy", "(", "pixel_gt", ")", "\n", "\n", "#start_of_line = None if start_of_line is None or start_of_line.shape[1] == 0 else torch.from_numpy(start_of_line)", "\n", "#end_of_line = None if end_of_line is None or end_of_line.shape[1] == 0 else torch.from_numpy(end_of_line)", "\n", "", "if", "line_gts", "is", "not", "None", ":", "\n", "            ", "for", "name", "in", "line_gts", ":", "\n", "                ", "line_gts", "[", "name", "]", "=", "None", "if", "line_gts", "[", "name", "]", "is", "None", "or", "line_gts", "[", "name", "]", ".", "shape", "[", "1", "]", "==", "0", "else", "torch", ".", "from_numpy", "(", "line_gts", "[", "name", "]", ")", "\n", "\n", "#bbs = None if bbs.shape[1] == 0 else torch.from_numpy(bbs)", "\n", "", "", "bbs", "=", "convertBBs", "(", "bbs", ",", "self", ".", "rotate", ",", "numClasses", ")", "\n", "if", "numNeighbors", "is", "not", "None", "and", "len", "(", "numNeighbors", ")", ">", "0", ":", "\n", "            ", "numNeighbors", "=", "torch", ".", "tensor", "(", "numNeighbors", ")", "[", "None", ",", ":", "]", "#add batch dim", "\n", "", "else", ":", "\n", "            ", "numNeighbors", "=", "None", "\n", "#start_of_line = convertLines(start_of_line,numClasses)", "\n", "#end_of_line = convertLines(end_of_line,numClasses)", "\n", "", "if", "point_gts", "is", "not", "None", ":", "\n", "            ", "for", "name", "in", "point_gts", ":", "\n", "#if table_points is not None:", "\n", "#table_points = None if table_points.shape[1] == 0 else torch.from_numpy(table_points)", "\n", "                ", "if", "point_gts", "[", "name", "]", "is", "not", "None", ":", "\n", "                    ", "point_gts", "[", "name", "]", "=", "None", "if", "point_gts", "[", "name", "]", ".", "shape", "[", "1", "]", "==", "0", "else", "torch", ".", "from_numpy", "(", "point_gts", "[", "name", "]", ")", "\n", "\n", "##print('__getitem__: '+str(timeit.default_timer()-ticFull))", "\n", "", "", "", "if", "self", ".", "only_types", "is", "None", ":", "\n", "            ", "return", "{", "\n", "\"img\"", ":", "img", ",", "\n", "\"bb_gt\"", ":", "bbs", ",", "\n", "\"num_neighbors\"", ":", "numNeighbors", ",", "\n", "\"line_gt\"", ":", "line_gts", ",", "\n", "\"point_gt\"", ":", "point_gts", ",", "\n", "\"pixel_gt\"", ":", "pixel_gt", ",", "\n", "\"imgName\"", ":", "imageName", ",", "\n", "\"scale\"", ":", "s", ",", "\n", "\"cropPoint\"", ":", "cropPoint", ",", "\n", "\"pairs\"", ":", "pairs", "\n", "}", "\n", "", "else", ":", "\n", "            ", "if", "'boxes'", "not", "in", "self", ".", "only_types", "or", "not", "self", ".", "only_types", "[", "'boxes'", "]", ":", "\n", "                ", "bbs", "=", "None", "\n", "", "line_gt", "=", "{", "}", "\n", "if", "'line'", "in", "self", ".", "only_types", ":", "\n", "                ", "for", "ent", "in", "self", ".", "only_types", "[", "'line'", "]", ":", "\n", "                    ", "if", "type", "(", "ent", ")", "==", "list", ":", "\n", "                        ", "toComb", "=", "[", "]", "\n", "for", "inst", "in", "ent", "[", "1", ":", "]", ":", "\n", "                            ", "einst", "=", "line_gts", "[", "inst", "]", "\n", "if", "einst", "is", "not", "None", ":", "\n", "                                ", "toComb", ".", "append", "(", "einst", ")", "\n", "", "", "if", "len", "(", "toComb", ")", ">", "0", ":", "\n", "                            ", "comb", "=", "torch", ".", "cat", "(", "toComb", ",", "dim", "=", "1", ")", "\n", "line_gt", "[", "ent", "[", "0", "]", "]", "=", "comb", "\n", "", "else", ":", "\n", "                            ", "line_gt", "[", "ent", "[", "0", "]", "]", "=", "None", "\n", "", "", "else", ":", "\n", "                        ", "line_gt", "[", "ent", "]", "=", "line_gts", "[", "ent", "]", "\n", "", "", "", "point_gt", "=", "{", "}", "\n", "if", "'point'", "in", "self", ".", "only_types", ":", "\n", "                ", "for", "ent", "in", "self", ".", "only_types", "[", "'point'", "]", ":", "\n", "                    ", "if", "type", "(", "ent", ")", "==", "list", ":", "\n", "                        ", "toComb", "=", "[", "]", "\n", "for", "inst", "in", "ent", "[", "1", ":", "]", ":", "\n", "                            ", "einst", "=", "point_gts", "[", "inst", "]", "\n", "if", "einst", "is", "not", "None", ":", "\n", "                                ", "toComb", ".", "append", "(", "einst", ")", "\n", "", "", "if", "len", "(", "toComb", ")", ">", "0", ":", "\n", "                            ", "comb", "=", "torch", ".", "cat", "(", "toComb", ",", "dim", "=", "1", ")", "\n", "point_gt", "[", "ent", "[", "0", "]", "]", "=", "comb", "\n", "", "else", ":", "\n", "                            ", "line_gt", "[", "ent", "[", "0", "]", "]", "=", "None", "\n", "", "", "else", ":", "\n", "                        ", "point_gt", "[", "ent", "]", "=", "point_gts", "[", "ent", "]", "\n", "", "", "", "pixel_gtR", "=", "None", "\n", "#for ent in self.only_types['pixel']:", "\n", "#    if type(ent)==list:", "\n", "#        comb = ent[1]", "\n", "#        for inst in ent[2:]:", "\n", "#            comb = (comb + inst)==2 #:eq(2) #pixel-wise AND", "\n", "#        pixel_gt[ent[0]]=comb", "\n", "#    else:", "\n", "#        pixel_gt[ent]=eval(ent)", "\n", "if", "'pixel'", "in", "self", ".", "only_types", ":", "# and self.only_types['pixel'][0]=='table_pixels':", "\n", "                ", "pixel_gtR", "=", "pixel_gt", "\n", "\n", "", "return", "{", "\n", "\"img\"", ":", "img", ",", "\n", "\"bb_gt\"", ":", "bbs", ",", "\n", "\"num_neighbors\"", ":", "numNeighbors", ",", "\n", "\"line_gt\"", ":", "line_gt", ",", "\n", "\"point_gt\"", ":", "point_gt", ",", "\n", "\"pixel_gt\"", ":", "pixel_gtR", ",", "\n", "\"imgName\"", ":", "imageName", ",", "\n", "\"scale\"", ":", "s", ",", "\n", "\"cropPoint\"", ":", "cropPoint", ",", "\n", "\"pairs\"", ":", "pairs", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.box_detect.BoxDetectDataset.getRandomImage": [[443, 476], ["numpy.random.choice", "numpy.random.uniform", "torch.FloatTensor().fill_", "numpy.random.uniform", "torch.FloatTensor().uniform_", "torch.FloatTensor", "abs", "numpy.random.uniform", "torch.FloatTensor().normal_", "torch.FloatTensor", "abs", "torch.FloatTensor"], "methods", ["None"], ["", "", "def", "getRandomImage", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "transform", "is", "not", "None", ")", "\n", "w", "=", "self", ".", "transform", ".", "crop_size", "[", "1", "]", "\n", "h", "=", "self", ".", "transform", ".", "crop_size", "[", "0", "]", "\n", "if", "self", ".", "color", ":", "\n", "            ", "shape", "=", "(", "3", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "            ", "shape", "=", "(", "1", ",", "h", ",", "w", ")", "\n", "", "typ", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "randomImageTypes", ")", "\n", "center", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "\n", "if", "typ", "==", "'blank'", ":", "#blank", "\n", "            ", "image", "=", "torch", ".", "FloatTensor", "(", "*", "shape", ")", ".", "fill_", "(", "center", ")", "\n", "", "elif", "typ", "==", "'uniform'", ":", "#uniform random", "\n", "            ", "maxRange", "=", "1", "-", "abs", "(", "center", ")", "\n", "second", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "maxRange", ")", "\n", "image", "=", "torch", ".", "FloatTensor", "(", "*", "shape", ")", ".", "uniform_", "(", "center", "-", "maxRange", ",", "center", "+", "maxRange", ")", "\n", "", "elif", "typ", "==", "'gaussian'", ":", "#guassian", "\n", "            ", "maxRange", "=", "1", "-", "abs", "(", "center", ")", "\n", "second", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "maxRange", ")", "\n", "image", "=", "torch", ".", "FloatTensor", "(", "*", "shape", ")", ".", "normal_", "(", "center", ",", "maxRange", ")", "\n", "", "image", "=", "image", "[", "None", ",", ":", ",", ":", "]", "#add batch channel", "\n", "\n", "return", "{", "\n", "\"img\"", ":", "image", ",", "\n", "\"bb_gt\"", ":", "None", ",", "\n", "\"num_neighbors\"", ":", "None", ",", "\n", "\"line_gt\"", ":", "{", "}", ",", "\n", "\"point_gt\"", ":", "{", "}", ",", "\n", "\"pixel_gt\"", ":", "None", ",", "\n", "\"imgName\"", ":", "'rand_'", "+", "typ", ",", "\n", "\"scale\"", ":", "1.0", ",", "\n", "\"cropPoint\"", ":", "(", "0", ",", "0", ")", ",", "\n", "\"pairs\"", ":", "None", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.box_detect.BoxDetectDataset.cluster": [[478, 686], ["numpy.concatenate", "range", "numpy.zeros", "range", "utils.imshow", "utils.waitKey", "range", "range", "open", "out.write", "print", "numpy.array", "numpy.array", "open", "json.loads", "box_detect.BoxDetectDataset.parseAnn", "numpy.cos", "numpy.sin", "numpy.stack", "numpy.concatenate.append", "numpy.random.randint", "len", "print", "numpy.stack", "print", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "normed_difference.argmin", "normed_difference.min().mean", "math.isnan", "range", "numpy.random.uniform().tolist", "toWrite.append", "utils.line", "utils.line", "utils.line", "utils.line", "outPath.format", "json.dumps", "math.cos", "math.sin", "math.sin", "math.cos", "annFile.read", "numpy.random.uniform", "numpy.array", "numpy.isnan().any", "utils.forms_annotations.convertBBs().numpy", "numpy.isnan().any", "numpy.concatenate", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.isnan().any", "numpy.isnan().any", "pdb.set_trace", "float", "outPath.format", "math.cos", "math.sin", "math.cos", "math.sin", "numpy.linspace", "numpy.stack.append", "numpy.linspace", "numpy.stack.append", "normed_difference.min", "selected.sum", "numpy.random.uniform", "h.item", "w.item", "rot.item", "int", "int", "int", "int", "int", "int", "int", "int", "numpy.isnan", "utils.forms_annotations.convertBBs", "numpy.isnan", "numpy.stack.append", "box_detect.BoxDetectDataset.cluster.makePointsAndRects"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow", "home.repos.pwc.inspect_result.herobd_FUDGE.None.FUNSD_extract_lines.write", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.FormsBoxDetect.parseAnn", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.convertBBs"], ["", "def", "cluster", "(", "self", ",", "k", ",", "sample_count", ",", "outPath", ")", ":", "\n", "        ", "def", "makePointsAndRects", "(", "h", ",", "w", ",", "r", "=", "None", ")", ":", "\n", "            ", "if", "r", "is", "None", ":", "\n", "                ", "return", "np", ".", "array", "(", "[", "-", "w", "/", "2.0", ",", "0", ",", "w", "/", "2.0", ",", "0", ",", "0", ",", "-", "h", "/", "2.0", ",", "0", ",", "h", "/", "2.0", ",", "0", ",", "0", ",", "0", ",", "h", ",", "w", "]", ")", "\n", "", "else", ":", "\n", "                ", "lx", "=", "-", "math", ".", "cos", "(", "r", ")", "*", "w", "\n", "ly", "=", "-", "math", ".", "sin", "(", "r", ")", "*", "w", "\n", "rx", "=", "math", ".", "cos", "(", "r", ")", "*", "w", "\n", "ry", "=", "math", ".", "sin", "(", "r", ")", "*", "w", "\n", "tx", "=", "math", ".", "sin", "(", "r", ")", "*", "h", "\n", "ty", "=", "-", "math", ".", "cos", "(", "r", ")", "*", "h", "\n", "bx", "=", "-", "math", ".", "sin", "(", "r", ")", "*", "h", "\n", "by", "=", "math", ".", "cos", "(", "r", ")", "*", "h", "\n", "return", "np", ".", "array", "(", "[", "lx", ",", "ly", ",", "rx", ",", "ry", ",", "tx", ",", "ty", ",", "bx", ",", "by", ",", "0", ",", "0", ",", "r", ",", "h", ",", "w", "]", ")", "\n", "", "", "meanH", "=", "62.42", "\n", "stdH", "=", "87.31", "\n", "meanW", "=", "393.03", "\n", "stdW", "=", "533.53", "\n", "ratios", "=", "[", "4.0", ",", "7.18", ",", "11.0", ",", "15.0", ",", "19.0", ",", "27.0", "]", "\n", "pointsAndRects", "=", "[", "]", "\n", "for", "inst", "in", "self", ".", "images", ":", "\n", "            ", "annotationPath", "=", "inst", "[", "'annotationPath'", "]", "\n", "#rescaled = inst['rescaled']", "\n", "with", "open", "(", "annotationPath", ")", "as", "annFile", ":", "\n", "                ", "annotations", "=", "json", ".", "loads", "(", "annFile", ".", "read", "(", ")", ")", "\n", "", "for", "i", "in", "range", "(", "1", ")", ":", "#sample_count):", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "s", "=", "(", "self", ".", "rescale_range", "[", "0", "]", "+", "self", ".", "rescale_range", "[", "1", "]", ")", "/", "2", "\n", "", "else", ":", "\n", "                    ", "s", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "rescale_range", "[", "0", "]", ",", "self", ".", "rescale_range", "[", "1", "]", ")", "\n", "#partial_rescale = s/rescaled", "\n", "#bbs = getBBWithPoints(annotations['byId'].values(),s)", "\n", "", "bbs", ",", "line_gts", ",", "point_gts", ",", "pixel_gt", ",", "numClasses", "=", "self", ".", "parseAnn", "(", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", ",", "annotations", ",", "s", ",", "''", ")", "\n", "#field_bbs = self.getBBGT(annotations['fieldBBs'],s,fields=True)", "\n", "#bbs = np.concatenate([text_bbs,field_bbs],axis=1)", "\n", "assert", "(", "not", "np", ".", "isnan", "(", "bbs", ")", ".", "any", "(", ")", ")", "\n", "bbs", "=", "convertBBs", "(", "bbs", ",", "self", ".", "rotate", ",", "numClasses", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "assert", "(", "not", "np", ".", "isnan", "(", "bbs", ")", ".", "any", "(", ")", ")", "\n", "cos_rot", "=", "np", ".", "cos", "(", "bbs", "[", ":", ",", "2", "]", ")", "\n", "sin_rot", "=", "np", ".", "sin", "(", "bbs", "[", ":", ",", "2", "]", ")", "\n", "p_left_x", "=", "-", "cos_rot", "*", "bbs", "[", ":", ",", "4", "]", "\n", "p_left_y", "=", "-", "sin_rot", "*", "bbs", "[", ":", ",", "4", "]", "\n", "p_right_x", "=", "cos_rot", "*", "bbs", "[", ":", ",", "4", "]", "\n", "p_right_y", "=", "sin_rot", "*", "bbs", "[", ":", ",", "4", "]", "\n", "p_top_x", "=", "sin_rot", "*", "bbs", "[", ":", ",", "3", "]", "\n", "p_top_y", "=", "-", "cos_rot", "*", "bbs", "[", ":", ",", "3", "]", "\n", "p_bot_x", "=", "-", "sin_rot", "*", "bbs", "[", ":", ",", "3", "]", "\n", "p_bot_y", "=", "cos_rot", "*", "bbs", "[", ":", ",", "3", "]", "\n", "points", "=", "np", ".", "stack", "(", "[", "p_left_x", ",", "p_left_y", ",", "p_right_x", ",", "p_right_y", ",", "p_top_x", ",", "p_top_y", ",", "p_bot_x", ",", "p_bot_y", "]", ",", "axis", "=", "1", ")", "\n", "pointsAndRects", ".", "append", "(", "np", ".", "concatenate", "(", "[", "points", ",", "bbs", "[", ":", ",", ":", "5", "]", "]", ",", "axis", "=", "1", ")", ")", "\n", "", "", "pointsAndRects", "=", "np", ".", "concatenate", "(", "pointsAndRects", ",", "axis", "=", "0", ")", "\n", "#all_points = pointsAndRects[:,0:8]", "\n", "#all_heights = pointsAndRects[:,11]", "\n", "#all_widths = pointsAndRects[:,12]", "\n", "\n", "bestDistsFromMean", "=", "None", "\n", "for", "attempt", "in", "range", "(", "20", "if", "k", ">", "0", "else", "1", ")", ":", "\n", "            ", "if", "k", ">", "0", ":", "\n", "                ", "randomIndexes", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "pointsAndRects", ".", "shape", "[", "0", "]", ",", "(", "k", ")", ")", "\n", "means", "=", "pointsAndRects", "[", "randomIndexes", "]", "\n", "", "else", ":", "\n", "#minH=5", "\n", "#minW=5", "\n", "                ", "means", "=", "[", "]", "\n", "\n", "##smaller than mean", "\n", "#for step in range(5):", "\n", "#    height = minH + (meanH-minH)*(step/5.0)", "\n", "#    width = minW + (meanW-minW)*(step/5.0)", "\n", "#    for ratio in ratios:", "\n", "#        means.append(makePointsAndRects(height,ratio*height))", "\n", "#        means.append(makePointsAndRects(width/ratio,width))", "\n", "#for stddev in range(0,5):", "\n", "#    for step in range(5-stddev):", "\n", "#        height = meanH + stddev*stdH + stdH*(step/(5.0-stddev))", "\n", "#        width = meanW + stddev*stdW + stdW*(step/(5.0-stddev))", "\n", "#        for ratio in ratios:", "\n", "#            means.append(makePointsAndRects(height,ratio*height))", "\n", "#            means.append(makePointsAndRects(width/ratio,width))", "\n", "rots", "=", "[", "0", ",", "math", ".", "pi", "/", "2", ",", "math", ".", "pi", ",", "1.5", "*", "math", ".", "pi", "]", "\n", "if", "self", ".", "rotate", ":", "\n", "                    ", "for", "height", "in", "np", ".", "linspace", "(", "15", ",", "200", ",", "num", "=", "4", ")", ":", "\n", "                        ", "for", "width", "in", "np", ".", "linspace", "(", "30", ",", "1200", ",", "num", "=", "4", ")", ":", "\n", "                            ", "for", "rot", "in", "rots", ":", "\n", "                                ", "means", ".", "append", "(", "makePointsAndRects", "(", "height", ",", "width", ",", "rot", ")", ")", "\n", "#long boxes", "\n", "", "", "", "for", "width", "in", "np", ".", "linspace", "(", "1600", ",", "4000", ",", "num", "=", "3", ")", ":", "\n", "#for height in np.linspace(30,100,num=3):", "\n", "#    for rot in rots:", "\n", "#        means.append(makePointsAndRects(height,width,rot))", "\n", "                        ", "for", "rot", "in", "rots", ":", "\n", "                            ", "means", ".", "append", "(", "makePointsAndRects", "(", "50", ",", "width", ",", "rot", ")", ")", "\n", "", "", "", "else", ":", "\n", "#rotated boxes", "\n", "#for height in np.linspace(13,300,num=4):", "\n", "                    ", "for", "height", "in", "np", ".", "linspace", "(", "13", ",", "300", ",", "num", "=", "3", ")", ":", "\n", "                        ", "means", ".", "append", "(", "makePointsAndRects", "(", "height", ",", "20", ")", ")", "\n", "#general boxes", "\n", "#for height in np.linspace(15,200,num=4):", "\n", "#for width in np.linspace(30,1200,num=4):", "\n", "", "for", "height", "in", "np", ".", "linspace", "(", "15", ",", "200", ",", "num", "=", "2", ")", ":", "\n", "                        ", "for", "width", "in", "np", ".", "linspace", "(", "30", ",", "1200", ",", "num", "=", "3", ")", ":", "\n", "                            ", "means", ".", "append", "(", "makePointsAndRects", "(", "height", ",", "width", ")", ")", "\n", "#long boxes", "\n", "", "", "for", "width", "in", "np", ".", "linspace", "(", "1600", ",", "4000", ",", "num", "=", "3", ")", ":", "\n", "#for height in np.linspace(30,100,num=3):", "\n", "#    means.append(makePointsAndRects(height,width))", "\n", "                        ", "means", ".", "append", "(", "makePointsAndRects", "(", "50", ",", "width", ")", ")", "\n", "\n", "", "", "k", "=", "len", "(", "means", ")", "\n", "print", "(", "'K: {}'", ".", "format", "(", "k", ")", ")", "\n", "means", "=", "np", ".", "stack", "(", "means", ",", "axis", "=", "0", ")", "\n", "#pointsAndRects [0:p_left_x, 1:p_left_y,2:p_right_x,3:p_right_y,4:p_top_x,5:p_top_y,6:p_bot_x,7:p_bot_y, 8:xc, 9:yc, 10:rot, 11:h, 12:w", "\n", "", "cluster_centers", "=", "means", "\n", "distsFromMean", "=", "None", "\n", "prevDistsFromMean", "=", "None", "\n", "for", "iteration", "in", "range", "(", "100000", ")", ":", "#intended to break out", "\n", "                ", "print", "(", "'attempt:{}, bestDistsFromMean:{}, iteration:{}, bestDistsFromMean:{}'", ".", "format", "(", "attempt", ",", "bestDistsFromMean", ",", "iteration", ",", "prevDistsFromMean", ")", ",", "end", "=", "'\\r'", ")", "\n", "#means_points = means[:,0:8]", "\n", "#means_heights = means[:,11]", "\n", "#means_widths = means[:,12]", "\n", "# = groups = assignGroups(means,pointsAndRects)", "\n", "expanded_all_points", "=", "pointsAndRects", "[", ":", ",", "None", ",", "0", ":", "8", "]", "\n", "expanded_all_heights", "=", "pointsAndRects", "[", ":", ",", "None", ",", "11", "]", "\n", "expanded_all_widths", "=", "pointsAndRects", "[", ":", ",", "None", ",", "12", "]", "\n", "\n", "expanded_means_points", "=", "means", "[", "None", ",", ":", ",", "0", ":", "8", "]", "\n", "expanded_means_heights", "=", "means", "[", "None", ",", ":", ",", "11", "]", "\n", "expanded_means_widths", "=", "means", "[", "None", ",", ":", ",", "12", "]", "\n", "\n", "#expanded_all_points = expanded_all_points.expand(all_points.shape[0], all_points.shape[1], means_points.shape[1], all_points.shape[2])", "\n", "expanded_all_points", "=", "np", ".", "tile", "(", "expanded_all_points", ",", "(", "1", ",", "means", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "expanded_all_heights", "=", "np", ".", "tile", "(", "expanded_all_heights", ",", "(", "1", ",", "means", ".", "shape", "[", "0", "]", ")", ")", "\n", "expanded_all_widths", "=", "np", ".", "tile", "(", "expanded_all_widths", ",", "(", "1", ",", "means", ".", "shape", "[", "0", "]", ")", ")", "\n", "#expanded_means_points = expanded_means_points.expand(means_points.shape[0], all_points.shape[0], means_points.shape[0], means_points.shape[2])", "\n", "expanded_means_points", "=", "np", ".", "tile", "(", "expanded_means_points", ",", "(", "pointsAndRects", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ")", "\n", "expanded_means_heights", "=", "np", ".", "tile", "(", "expanded_means_heights", ",", "(", "pointsAndRects", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "expanded_means_widths", "=", "np", ".", "tile", "(", "expanded_means_widths", ",", "(", "pointsAndRects", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "point_deltas", "=", "(", "expanded_all_points", "-", "expanded_means_points", ")", "\n", "#avg_heights = ((expanded_means_heights+expanded_all_heights)/2)", "\n", "#avg_widths = ((expanded_means_widths+expanded_all_widths)/2)", "\n", "avg_heights", "=", "avg_widths", "=", "(", "expanded_means_heights", "+", "expanded_all_heights", "+", "expanded_means_widths", "+", "expanded_all_widths", ")", "/", "4", "\n", "#print point_deltas", "\n", "assert", "(", "not", "np", ".", "isnan", "(", "point_deltas", ")", ".", "any", "(", ")", ")", "\n", "\n", "normed_difference", "=", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "point_deltas", "[", ":", ",", ":", ",", "0", ":", "2", "]", ",", "2", ",", "2", ")", "/", "avg_widths", "+", "\n", "np", ".", "linalg", ".", "norm", "(", "point_deltas", "[", ":", ",", ":", ",", "2", ":", "4", "]", ",", "2", ",", "2", ")", "/", "avg_widths", "+", "\n", "np", ".", "linalg", ".", "norm", "(", "point_deltas", "[", ":", ",", ":", ",", "4", ":", "6", "]", ",", "2", ",", "2", ")", "/", "avg_heights", "+", "\n", "np", ".", "linalg", ".", "norm", "(", "point_deltas", "[", ":", ",", ":", ",", "6", ":", "8", "]", ",", "2", ",", "2", ")", "/", "avg_heights", "\n", ")", "**", "2", "\n", "#print normed_difference", "\n", "assert", "(", "not", "np", ".", "isnan", "(", "normed_difference", ")", ".", "any", "(", ")", ")", "\n", "\n", "groups", "=", "normed_difference", ".", "argmin", "(", "1", ")", "#this should list the mean (index) for each element of all", "\n", "distsFromMean", "=", "normed_difference", ".", "min", "(", "1", ")", ".", "mean", "(", ")", "\n", "if", "math", ".", "isnan", "(", "distsFromMean", ")", ":", "\n", "                    ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "if", "prevDistsFromMean", "is", "not", "None", "and", "distsFromMean", ">=", "prevDistsFromMean", ":", "\n", "                    ", "break", "\n", "", "prevDistsFromMean", "=", "distsFromMean", "\n", "\n", "#means = computeMeans(groups,pointsAndRects)", "\n", "#means = np.zeros(k,13)", "\n", "for", "ki", "in", "range", "(", "k", ")", ":", "\n", "                    ", "selected", "=", "(", "groups", "==", "ki", ")", "[", ":", ",", "None", "]", "\n", "numSel", "=", "float", "(", "selected", ".", "sum", "(", ")", ")", "\n", "if", "(", "numSel", "==", "0", ")", ":", "\n", "                        ", "break", "\n", "", "means", "[", "ki", ",", ":", "]", "=", "(", "pointsAndRects", "*", "np", ".", "tile", "(", "selected", ",", "(", "1", ",", "13", ")", ")", ")", ".", "sum", "(", "0", ")", "/", "numSel", "\n", "", "", "if", "bestDistsFromMean", "is", "None", "or", "distsFromMean", "<", "bestDistsFromMean", ":", "\n", "                ", "bestDistsFromMean", "=", "distsFromMean", "\n", "cluster_centers", "=", "means", "\n", "#cluster_centers=means", "\n", "", "", "dH", "=", "600", "\n", "dW", "=", "3000", "\n", "draw", "=", "np", ".", "zeros", "(", "[", "dH", ",", "dW", ",", "3", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "toWrite", "=", "[", "]", "\n", "final_k", "=", "k", "\n", "for", "ki", "in", "range", "(", "k", ")", ":", "\n", "            ", "pop", "=", "(", "groups", "==", "ki", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "pop", ">", "2", ":", "\n", "                ", "color", "=", "np", ".", "random", ".", "uniform", "(", "0.2", ",", "1", ",", "3", ")", ".", "tolist", "(", ")", "\n", "#d=math.sqrt(mean[ki,11]**2 + mean[ki,12]**2)", "\n", "#theta = math.atan2(mean[ki,11],mean[ki,12]) + mean[ki,10]", "\n", "h", "=", "cluster_centers", "[", "ki", ",", "11", "]", "\n", "w", "=", "cluster_centers", "[", "ki", ",", "12", "]", "\n", "rot", "=", "cluster_centers", "[", "ki", ",", "10", "]", "\n", "toWrite", ".", "append", "(", "{", "'height'", ":", "h", ".", "item", "(", ")", ",", "'width'", ":", "w", ".", "item", "(", ")", ",", "'rot'", ":", "rot", ".", "item", "(", ")", ",", "'popularity'", ":", "pop", "}", ")", "\n", "tr", "=", "(", "int", "(", "math", ".", "cos", "(", "rot", ")", "*", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "h", ")", "+", "dW", "//", "2", ",", "int", "(", "math", ".", "sin", "(", "rot", ")", "*", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "h", ")", "+", "dH", "//", "2", ")", "\n", "tl", "=", "(", "int", "(", "math", ".", "cos", "(", "rot", ")", "*", "-", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "h", ")", "+", "dW", "//", "2", ",", "int", "(", "math", ".", "sin", "(", "rot", ")", "*", "-", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "h", ")", "+", "dH", "//", "2", ")", "\n", "br", "=", "(", "int", "(", "math", ".", "cos", "(", "rot", ")", "*", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "-", "h", ")", "+", "dW", "//", "2", ",", "int", "(", "math", ".", "sin", "(", "rot", ")", "*", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "-", "h", ")", "+", "dH", "//", "2", ")", "\n", "bl", "=", "(", "int", "(", "math", ".", "cos", "(", "rot", ")", "*", "-", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "-", "h", ")", "+", "dW", "//", "2", ",", "int", "(", "math", ".", "sin", "(", "rot", ")", "*", "-", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "-", "h", ")", "+", "dH", "//", "2", ")", "\n", "\n", "img_f", ".", "line", "(", "draw", ",", "tl", ",", "tr", ",", "color", ")", "\n", "img_f", ".", "line", "(", "draw", ",", "tr", ",", "br", ",", "color", ")", "\n", "img_f", ".", "line", "(", "draw", ",", "br", ",", "bl", ",", "color", ")", "\n", "img_f", ".", "line", "(", "draw", ",", "bl", ",", "tl", ",", "color", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "final_k", "-=", "1", "\n", "\n", "#print(toWrite)", "\n", "", "", "with", "open", "(", "outPath", ".", "format", "(", "final_k", ")", ",", "'w'", ")", "as", "out", ":", "\n", "            ", "out", ".", "write", "(", "json", ".", "dumps", "(", "toWrite", ")", ")", "\n", "print", "(", "'saved '", "+", "outPath", ".", "format", "(", "final_k", ")", ")", "\n", "", "img_f", ".", "imshow", "(", "'clusters'", ",", "draw", ")", "\n", "img_f", ".", "waitKey", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.box_detect.collate": [[18, 179], ["len", "collections.defaultdict", "collections.defaultdict", "max", "len", "largest_line_label.items", "enumerate", "largest_point_label.items", "enumerate", "torch.cat", "len", "imageNames.append", "scales.append", "torch.cat.append", "torch.cat.append", "max", "max", "len", "torch.zeros", "torch.zeros", "enumerate", "len", "b[].size", "b[].size", "bb_sizes.append", "bb_sizes.append", "gt.size", "b[].items", "b[].items", "max", "max", "torch.zeros().type", "resized_imgs.append", "resized_imgs.append", "torch.zeros", "b[].items", "torch.zeros", "b[].items", "len", "torch.cat", "gt.size", "img.size", "img.size", "img.type", "img.size", "img.size", "torch.zeros().type", "resized_pixel_gt.append", "resized_pixel_gt.append", "line_label_sizes[].append", "line_label_sizes[].append", "gt.size", "point_label_sizes[].append", "point_label_sizes[].append", "torch.zeros", "pixel_gt[].type", "gt.size", "gt.size", "torch.zeros", "img.size", "img.size", "img.size", "pixel_gt[].size", "img.size", "img.size"], "function", ["None"], ["def", "collate", "(", "batch", ")", ":", "\n", "\n", "##tic=timeit.default_timer()", "\n", "    ", "batch_size", "=", "len", "(", "batch", ")", "\n", "imageNames", "=", "[", "]", "\n", "scales", "=", "[", "]", "\n", "imgs", "=", "[", "]", "\n", "pixel_gt", "=", "[", "]", "\n", "max_h", "=", "0", "\n", "max_w", "=", "0", "\n", "line_label_sizes", "=", "defaultdict", "(", "list", ")", "\n", "point_label_sizes", "=", "defaultdict", "(", "list", ")", "\n", "largest_line_label", "=", "{", "}", "\n", "largest_point_label", "=", "{", "}", "\n", "bb_sizes", "=", "[", "]", "\n", "bb_dim", "=", "None", "\n", "line_dim", "=", "None", "\n", "if", "len", "(", "batch", ")", "==", "1", ":", "\n", "        ", "pairs", "=", "batch", "[", "0", "]", "[", "'pairs'", "]", "\n", "", "else", ":", "\n", "        ", "pairs", "=", "None", "\n", "\n", "", "for", "b", "in", "batch", ":", "\n", "        ", "if", "b", "is", "None", ":", "\n", "            ", "continue", "\n", "", "imageNames", ".", "append", "(", "b", "[", "'imgName'", "]", ")", "\n", "scales", ".", "append", "(", "b", "[", "'scale'", "]", ")", "\n", "imgs", ".", "append", "(", "b", "[", "\"img\"", "]", ")", "\n", "pixel_gt", ".", "append", "(", "b", "[", "'pixel_gt'", "]", ")", "\n", "max_h", "=", "max", "(", "max_h", ",", "b", "[", "\"img\"", "]", ".", "size", "(", "2", ")", ")", "\n", "max_w", "=", "max", "(", "max_w", ",", "b", "[", "\"img\"", "]", ".", "size", "(", "3", ")", ")", "\n", "gt", "=", "b", "[", "'bb_gt'", "]", "\n", "if", "gt", "is", "None", ":", "\n", "            ", "bb_sizes", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "bb_sizes", ".", "append", "(", "gt", ".", "size", "(", "1", ")", ")", "\n", "bb_dim", "=", "gt", ".", "size", "(", "2", ")", "\n", "", "if", "b", "[", "'line_gt'", "]", "is", "not", "None", ":", "\n", "            ", "for", "name", ",", "gt", "in", "b", "[", "'line_gt'", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "gt", "is", "None", ":", "\n", "                    ", "line_label_sizes", "[", "name", "]", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "line_label_sizes", "[", "name", "]", ".", "append", "(", "gt", ".", "size", "(", "1", ")", ")", "\n", "line_dim", "=", "gt", ".", "size", "(", "2", ")", "\n", "", "", "", "if", "b", "[", "'point_gt'", "]", "is", "not", "None", ":", "\n", "            ", "for", "name", ",", "gt", "in", "b", "[", "'point_gt'", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "gt", "is", "None", ":", "\n", "                    ", "point_label_sizes", "[", "name", "]", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "point_label_sizes", "[", "name", "]", ".", "append", "(", "gt", ".", "size", "(", "1", ")", ")", "\n", "", "", "", "", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "", "largest_bb_count", "=", "max", "(", "bb_sizes", ")", "\n", "if", "b", "[", "'point_gt'", "]", "is", "not", "None", ":", "\n", "        ", "for", "name", "in", "b", "[", "'point_gt'", "]", ":", "\n", "            ", "largest_point_label", "[", "name", "]", "=", "max", "(", "point_label_sizes", "[", "name", "]", ")", "\n", "", "", "if", "b", "[", "'line_gt'", "]", "is", "not", "None", ":", "\n", "        ", "for", "name", "in", "b", "[", "'line_gt'", "]", ":", "\n", "            ", "largest_line_label", "[", "name", "]", "=", "max", "(", "line_label_sizes", "[", "name", "]", ")", "\n", "\n", "##print(' col channels: {}'.format(len(imgs[0].size())))", "\n", "", "", "batch_size", "=", "len", "(", "imgs", ")", "\n", "\n", "resized_imgs", "=", "[", "]", "\n", "resized_pixel_gt", "=", "[", "]", "\n", "index", "=", "0", "\n", "for", "img", "in", "imgs", ":", "\n", "        ", "if", "img", ".", "size", "(", "2", ")", "<", "max_h", "or", "img", ".", "size", "(", "3", ")", "<", "max_w", ":", "\n", "            ", "resized", "=", "torch", ".", "zeros", "(", "[", "1", ",", "img", ".", "size", "(", "1", ")", ",", "max_h", ",", "max_w", "]", ")", ".", "type", "(", "img", ".", "type", "(", ")", ")", "\n", "diff_h", "=", "max_h", "-", "img", ".", "size", "(", "2", ")", "\n", "pos_r", "=", "0", "#np.random.randint(0,diff_h+1)", "\n", "diff_w", "=", "max_w", "-", "img", ".", "size", "(", "3", ")", "\n", "pos_c", "=", "0", "#np.random.randint(0,diff_w+1)", "\n", "#if len(img.size())==3:", "\n", "#    resized[:,pos_r:pos_r+img.size(1), pos_c:pos_c+img.size(2)]=img", "\n", "#else:", "\n", "#    resized[pos_r:pos_r+img.size(1), pos_c:pos_c+img.size(2)]=img", "\n", "resized", "[", ":", ",", ":", ",", "pos_r", ":", "pos_r", "+", "img", ".", "size", "(", "2", ")", ",", "pos_c", ":", "pos_c", "+", "img", ".", "size", "(", "3", ")", "]", "=", "img", "\n", "resized_imgs", ".", "append", "(", "resized", ")", "\n", "\n", "if", "pixel_gt", "[", "index", "]", "is", "not", "None", ":", "\n", "                ", "resized_gt", "=", "torch", ".", "zeros", "(", "[", "1", ",", "pixel_gt", "[", "index", "]", ".", "size", "(", "1", ")", ",", "max_h", ",", "max_w", "]", ")", ".", "type", "(", "pixel_gt", "[", "index", "]", ".", "type", "(", ")", ")", "\n", "resized_gt", "[", ":", ",", ":", ",", "pos_r", ":", "pos_r", "+", "img", ".", "size", "(", "2", ")", ",", "pos_c", ":", "pos_c", "+", "img", ".", "size", "(", "3", ")", "]", "=", "pixel_gt", "[", "index", "]", "\n", "resized_pixel_gt", ".", "append", "(", "resized_gt", ")", "\n", "", "", "else", ":", "\n", "            ", "resized_imgs", ".", "append", "(", "img", ")", "\n", "if", "pixel_gt", "[", "index", "]", "is", "not", "None", ":", "\n", "                ", "resized_pixel_gt", ".", "append", "(", "pixel_gt", "[", "index", "]", ")", "\n", "", "", "index", "+=", "1", "\n", "\n", "\n", "\n", "", "if", "largest_bb_count", "!=", "0", ":", "\n", "        ", "bbs", "=", "torch", ".", "zeros", "(", "batch_size", ",", "largest_bb_count", ",", "bb_dim", ")", "\n", "numNeighbors", "=", "torch", ".", "zeros", "(", "batch_size", ",", "largest_bb_count", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "batch", ")", ":", "\n", "            ", "gt", "=", "b", "[", "'bb_gt'", "]", "\n", "if", "bb_sizes", "[", "i", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "bbs", "[", "i", ",", ":", "bb_sizes", "[", "i", "]", "]", "=", "gt", "\n", "if", "b", "[", "'num_neighbors'", "]", "is", "not", "None", ":", "\n", "                ", "numNeighbors", "[", "i", ",", ":", "bb_sizes", "[", "i", "]", "]", "=", "b", "[", "'num_neighbors'", "]", "\n", "", "else", ":", "\n", "                ", "numNeighbors", "=", "None", "\n", "", "", "", "else", ":", "\n", "        ", "bbs", "=", "None", "\n", "numNeighbors", "=", "None", "\n", "\n", "", "line_labels", "=", "{", "}", "\n", "for", "name", ",", "count", "in", "largest_line_label", ".", "items", "(", ")", ":", "\n", "        ", "if", "count", ">", "0", ":", "\n", "            ", "line_labels", "[", "name", "]", "=", "torch", ".", "zeros", "(", "batch_size", ",", "count", ",", "line_dim", ")", "\n", "", "else", ":", "\n", "            ", "line_labels", "[", "name", "]", "=", "None", "\n", "", "", "for", "i", ",", "b", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "if", "b", "[", "'line_gt'", "]", "is", "not", "None", ":", "\n", "            ", "for", "name", ",", "gt", "in", "b", "[", "'line_gt'", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "line_label_sizes", "[", "name", "]", "[", "i", "]", "==", "0", ":", "\n", "                    ", "continue", "\n", "#print(line_label_sizes[name][i])", "\n", "#print(gt.shape)", "\n", "", "line_labels", "[", "name", "]", "[", "i", ",", ":", "line_label_sizes", "[", "name", "]", "[", "i", "]", "]", "=", "gt", "\n", "", "", "", "point_labels", "=", "{", "}", "\n", "for", "name", ",", "count", "in", "largest_point_label", ".", "items", "(", ")", ":", "\n", "        ", "if", "count", ">", "0", ":", "\n", "            ", "point_labels", "[", "name", "]", "=", "torch", ".", "zeros", "(", "batch_size", ",", "count", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "point_labels", "[", "name", "]", "=", "None", "\n", "", "", "for", "i", ",", "b", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "if", "b", "[", "'point_gt'", "]", "is", "not", "None", ":", "\n", "            ", "for", "name", ",", "gt", "in", "b", "[", "'point_gt'", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "point_label_sizes", "[", "name", "]", "[", "i", "]", "==", "0", ":", "\n", "                    ", "continue", "\n", "#print(point_label_sizes[name][i])", "\n", "#print(gt.shape)", "\n", "", "point_labels", "[", "name", "]", "[", "i", ",", ":", "point_label_sizes", "[", "name", "]", "[", "i", "]", "]", "=", "gt", "\n", "\n", "", "", "", "imgs", "=", "torch", ".", "cat", "(", "resized_imgs", ")", "\n", "if", "len", "(", "resized_pixel_gt", ")", "==", "1", ":", "\n", "        ", "pixel_gt", "=", "resized_pixel_gt", "[", "0", "]", "\n", "", "elif", "len", "(", "resized_pixel_gt", ")", ">", "1", ":", "\n", "        ", "pixel_gt", "=", "torch", ".", "cat", "(", "resized_pixel_gt", ")", "\n", "", "else", ":", "\n", "        ", "pixel_gt", "=", "None", "\n", "\n", "\n", "##print('collate: '+str(timeit.default_timer()-tic))", "\n", "", "return", "{", "\n", "'img'", ":", "imgs", ",", "\n", "'bb_gt'", ":", "bbs", ",", "\n", "'num_neighbors'", ":", "numNeighbors", ",", "\n", "\"bb_sizes\"", ":", "bb_sizes", ",", "\n", "'line_gt'", ":", "line_labels", ",", "\n", "\"line_label_sizes\"", ":", "line_label_sizes", ",", "\n", "'point_gt'", ":", "point_labels", ",", "\n", "\"point_label_sizes\"", ":", "point_label_sizes", ",", "\n", "'pixel_gt'", ":", "pixel_gt", ",", "\n", "\"imgName\"", ":", "imageNames", ",", "\n", "\"scale\"", ":", "scales", ",", "\n", "'pairs'", ":", "pairs", "#this is only used to save a new json", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.funsd_box_detect.FUNSDBoxDetect.__init__": [[94, 161], ["box_detect.BoxDetectDataset.__init__", "open", "json.loads", "os.path.exists", "os.path.join", "f.read", "type", "os.path.join", "os.path.join", "os.path.join", "funsd_box_detect.FUNSDBoxDetect.images.append", "imagesAndAnn.append", "type", "print", "exit", "os.path.join", "os.path.join", "os.path.exists", "utils.imread", "utils.resize", "utils.imwrite", "os.path.join", "os.path.join", "imagesAndAnn.append", "print", "imageName.rfind", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imread", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.resize", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imwrite"], ["def", "__init__", "(", "self", ",", "dirPath", "=", "None", ",", "split", "=", "None", ",", "config", "=", "None", ",", "images", "=", "None", ")", ":", "\n", "        ", "super", "(", "FUNSDBoxDetect", ",", "self", ")", ".", "__init__", "(", "dirPath", ",", "split", ",", "config", ",", "images", ")", "\n", "#if 'augmentation_params' in config['data_loader']:", "\n", "#    self.augmentation_params=config['augmentation_params']", "\n", "#else:", "\n", "#    self.augmentation_params=None", "\n", "self", ".", "split_to_lines", "=", "config", "[", "'split_to_lines'", "]", "\n", "if", "images", "is", "not", "None", ":", "\n", "            ", "self", ".", "images", "=", "images", "\n", "", "else", ":", "\n", "            ", "splitFile", "=", "'FUNSD_train_valid_test_split.json'", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "splitFile", ")", ")", "as", "f", ":", "\n", "#if split=='valid' or split=='validation':", "\n", "#    trainTest='train'", "\n", "#else:", "\n", "#    trainTest=split", "\n", "                ", "readFile", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "if", "type", "(", "split", ")", "is", "str", ":", "\n", "                    ", "toUse", "=", "readFile", "[", "split", "]", "\n", "imagesAndAnn", "=", "[", "]", "\n", "imageDir", "=", "os", ".", "path", ".", "join", "(", "dirPath", ",", "toUse", "[", "'root'", "]", ",", "'images'", ")", "\n", "annDir", "=", "os", ".", "path", ".", "join", "(", "dirPath", ",", "toUse", "[", "'root'", "]", ",", "'annotations'", ")", "\n", "for", "name", "in", "toUse", "[", "'images'", "]", ":", "\n", "                        ", "imagesAndAnn", ".", "append", "(", "(", "name", "+", "'.png'", ",", "os", ".", "path", ".", "join", "(", "imageDir", ",", "name", "+", "'.png'", ")", ",", "os", ".", "path", ".", "join", "(", "annDir", ",", "name", "+", "'.json'", ")", ")", ")", "\n", "", "", "elif", "type", "(", "split", ")", "is", "list", ":", "\n", "                    ", "imagesAndAnn", "=", "[", "]", "\n", "for", "spstr", "in", "split", ":", "\n", "                        ", "toUse", "=", "readFile", "[", "spstr", "]", "\n", "imageDir", "=", "os", ".", "path", ".", "join", "(", "dirPath", ",", "toUse", "[", "'root'", "]", ",", "'images'", ")", "\n", "annDir", "=", "os", ".", "path", ".", "join", "(", "dirPath", ",", "toUse", "[", "'root'", "]", ",", "'annotations'", ")", "\n", "for", "name", "in", "toUse", "[", "'images'", "]", ":", "\n", "                            ", "imagesAndAnn", ".", "append", "(", "(", "name", "+", "'.png'", ",", "os", ".", "path", ".", "join", "(", "imageDir", ",", "name", "+", "'.png'", ")", ",", "os", ".", "path", ".", "join", "(", "annDir", ",", "name", "+", "'.json'", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "print", "(", "\"Error, unknown split {}\"", ".", "format", "(", "split", ")", ")", "\n", "exit", "(", ")", "\n", "", "", "self", ".", "images", "=", "[", "]", "\n", "for", "imageName", ",", "imagePath", ",", "jsonPath", "in", "imagesAndAnn", ":", "\n", "                ", "org_path", "=", "imagePath", "\n", "if", "self", ".", "cache_resized", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "imageName", ")", "\n", "", "else", ":", "\n", "                    ", "path", "=", "org_path", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "jsonPath", ")", ":", "\n", "                    ", "rescale", "=", "1.0", "\n", "if", "self", ".", "cache_resized", ":", "\n", "                        ", "rescale", "=", "self", ".", "rescale_range", "[", "1", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                            ", "org_img", "=", "img_f", ".", "imread", "(", "org_path", ")", "\n", "if", "org_img", "is", "None", ":", "\n", "                                ", "print", "(", "'WARNING, could not read {}'", ".", "format", "(", "org_img", ")", ")", "\n", "continue", "\n", "", "resized", "=", "img_f", ".", "resize", "(", "org_img", ",", "(", "0", ",", "0", ")", ",", "\n", "fx", "=", "self", ".", "rescale_range", "[", "1", "]", ",", "\n", "fy", "=", "self", ".", "rescale_range", "[", "1", "]", ",", "\n", ")", "\n", "img_f", ".", "imwrite", "(", "path", ",", "resized", ")", "\n", "", "", "self", ".", "images", ".", "append", "(", "{", "'id'", ":", "imageName", ",", "'imagePath'", ":", "path", ",", "'annotationPath'", ":", "jsonPath", ",", "'rescaled'", ":", "rescale", ",", "'imageName'", ":", "imageName", "[", ":", "imageName", ".", "rfind", "(", "'.'", ")", "]", "}", ")", "\n", "", "", "", "self", ".", "only_types", "=", "None", "\n", "self", ".", "errors", "=", "[", "]", "\n", "\n", "self", ".", "classMap", "=", "{", "\n", "'header'", ":", "16", ",", "\n", "'question'", ":", "17", ",", "\n", "'answer'", ":", "18", ",", "\n", "'other'", ":", "19", "\n", "}", "\n", "self", ".", "no_blanks", "=", "True", "#too bad", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.funsd_box_detect.FUNSDBoxDetect.parseAnn": [[163, 227], ["utils.funsd_annotations.createLines", "len", "numpy.empty", "set", "enumerate", "list", "numNeighbors.append", "len", "list.add", "len", "min", "max"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.funsd_annotations.createLines"], ["", "def", "parseAnn", "(", "self", ",", "np_img", ",", "annotations", ",", "s", ",", "imageName", ")", ":", "\n", "        ", "if", "self", ".", "split_to_lines", ":", "\n", "            ", "bbs", ",", "numNeighbors", ",", "trans", ",", "groups", "=", "createLines", "(", "annotations", ",", "self", ".", "classMap", ",", "s", ")", "\n", "numClasses", "=", "len", "(", "self", ".", "classMap", ")", "\n", "pairs", "=", "None", "\n", "", "else", ":", "\n", "            ", "boxes", "=", "annotations", "[", "'form'", "]", "\n", "numClasses", "=", "4", "\n", "#if useBlankClass:", "\n", "#    numClasses+=1", "\n", "#if usePairedClass:", "\n", "#    numClasses+=1", "\n", "\n", "bbs", "=", "np", ".", "empty", "(", "(", "1", ",", "len", "(", "boxes", ")", ",", "8", "+", "8", "+", "numClasses", ")", ",", "dtype", "=", "np", ".", "float32", ")", "#2x4 corners, 2x4 cross-points, n classes", "\n", "pairs", "=", "set", "(", ")", "\n", "numNeighbors", "=", "[", "]", "\n", "for", "j", ",", "boxinfo", "in", "enumerate", "(", "boxes", ")", ":", "\n", "                ", "lX", ",", "tY", ",", "rX", ",", "bY", "=", "boxinfo", "[", "'box'", "]", "\n", "bbs", "[", ":", ",", "j", ",", "0", "]", "=", "lX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "1", "]", "=", "tY", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "2", "]", "=", "rX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "3", "]", "=", "tY", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "4", "]", "=", "rX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "5", "]", "=", "bY", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "6", "]", "=", "lX", "*", "s", "\n", "bbs", "[", ":", ",", "j", ",", "7", "]", "=", "bY", "*", "s", "\n", "#we add these for conveince to crop BBs within window", "\n", "bbs", "[", ":", ",", "j", ",", "8", "]", "=", "s", "*", "lX", "\n", "bbs", "[", ":", ",", "j", ",", "9", "]", "=", "s", "*", "(", "tY", "+", "bY", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "10", "]", "=", "s", "*", "rX", "\n", "bbs", "[", ":", ",", "j", ",", "11", "]", "=", "s", "*", "(", "tY", "+", "bY", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "12", "]", "=", "s", "*", "(", "lX", "+", "rX", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "13", "]", "=", "s", "*", "tY", "\n", "bbs", "[", ":", ",", "j", ",", "14", "]", "=", "s", "*", "(", "rX", "+", "lX", ")", "/", "2.0", "\n", "bbs", "[", ":", ",", "j", ",", "15", "]", "=", "s", "*", "bY", "\n", "\n", "bbs", "[", ":", ",", "j", ",", "16", ":", "]", "=", "0", "\n", "if", "boxinfo", "[", "'label'", "]", "==", "'header'", ":", "\n", "                    ", "bbs", "[", ":", ",", "j", ",", "16", "]", "=", "1", "\n", "", "elif", "boxinfo", "[", "'label'", "]", "==", "'question'", ":", "\n", "                    ", "bbs", "[", ":", ",", "j", ",", "17", "]", "=", "1", "\n", "", "elif", "boxinfo", "[", "'label'", "]", "==", "'answer'", ":", "\n", "                    ", "bbs", "[", ":", ",", "j", ",", "18", "]", "=", "1", "\n", "", "elif", "boxinfo", "[", "'label'", "]", "==", "'other'", ":", "\n", "                    ", "bbs", "[", ":", ",", "j", ",", "19", "]", "=", "1", "\n", "", "for", "id1", ",", "id2", "in", "boxinfo", "[", "'linking'", "]", ":", "\n", "                    ", "pairs", ".", "add", "(", "(", "min", "(", "id1", ",", "id2", ")", ",", "max", "(", "id1", ",", "id2", ")", ")", ")", "\n", "", "numNeighbors", ".", "append", "(", "len", "(", "boxinfo", "[", "'linking'", "]", ")", ")", "\n", "\n", "\n", "", "pairs", "=", "list", "(", "pairs", ")", "\n", "\n", "\n", "", "pixel_gt", "=", "None", "\n", "\n", "line_gts", "=", "None", "#{", "\n", "#\"start_of_line\": None,", "\n", "#\"end_of_line\": None", "\n", "#}", "\n", "point_gts", "=", "None", "#{", "\n", "#\"table_points\": None", "\n", "#}", "\n", "\n", "return", "bbs", ",", "line_gts", ",", "point_gts", ",", "pixel_gt", ",", "numClasses", ",", "numNeighbors", ",", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.funsd_box_detect.FUNSDBoxDetect.cluster": [[232, 459], ["numpy.concatenate", "range", "numpy.zeros", "range", "utils.imwrite", "range", "range", "open", "out.write", "print", "numpy.array", "numpy.array", "open", "json.loads", "numpy.stack", "numpy.concatenate.append", "numpy.random.randint", "len", "print", "numpy.stack", "print", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "normed_difference.argmin", "normed_difference.min().mean", "range", "numpy.random.uniform().tolist", "toWrite.append", "utils.line", "utils.line", "utils.line", "utils.line", "outPath.format", "json.dumps", "math.cos", "math.sin", "math.sin", "math.cos", "annFile.read", "numpy.random.uniform", "utils.funsd_annotations.createLines", "range", "enumerate", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "float", "outPath.format", "math.cos", "math.sin", "math.cos", "math.sin", "numpy.stack.append", "numpy.stack.append", "numpy.linspace", "numpy.stack.append", "numpy.linspace", "numpy.stack.append", "normed_difference.min", "selected.sum", "numpy.random.uniform", "h.item", "min.item", "rot.item", "int", "int", "int", "int", "int", "int", "int", "int", "min", "numpy.array", "min", "numpy.array", "numpy.stack.append", "funsd_box_detect.FUNSDBoxDetect.cluster.makePointsAndRects"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imwrite", "home.repos.pwc.inspect_result.herobd_FUDGE.None.FUNSD_extract_lines.write", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.funsd_annotations.createLines"], ["", "def", "cluster", "(", "self", ",", "k", ",", "sample_count", ",", "outPath", ",", "use_max_width", "=", "False", ")", ":", "\n", "        ", "def", "makePointsAndRects", "(", "h", ",", "w", ",", "r", "=", "None", ")", ":", "\n", "            ", "if", "r", "is", "None", ":", "\n", "                ", "return", "np", ".", "array", "(", "[", "-", "w", "/", "2.0", ",", "0", ",", "w", "/", "2.0", ",", "0", ",", "0", ",", "-", "h", "/", "2.0", ",", "0", ",", "h", "/", "2.0", ",", "0", ",", "0", ",", "0", ",", "h", ",", "w", "]", ")", "\n", "", "else", ":", "\n", "                ", "lx", "=", "-", "math", ".", "cos", "(", "r", ")", "*", "w", "\n", "ly", "=", "-", "math", ".", "sin", "(", "r", ")", "*", "w", "\n", "rx", "=", "math", ".", "cos", "(", "r", ")", "*", "w", "\n", "ry", "=", "math", ".", "sin", "(", "r", ")", "*", "w", "\n", "tx", "=", "math", ".", "sin", "(", "r", ")", "*", "h", "\n", "ty", "=", "-", "math", ".", "cos", "(", "r", ")", "*", "h", "\n", "bx", "=", "-", "math", ".", "sin", "(", "r", ")", "*", "h", "\n", "by", "=", "math", ".", "cos", "(", "r", ")", "*", "h", "\n", "return", "np", ".", "array", "(", "[", "lx", ",", "ly", ",", "rx", ",", "ry", ",", "tx", ",", "ty", ",", "bx", ",", "by", ",", "0", ",", "0", ",", "r", ",", "h", ",", "w", "]", ")", "\n", "", "", "meanH", "=", "None", "\n", "stdH", "=", "None", "\n", "meanW", "=", "None", "\n", "stdW", "=", "None", "\n", "ratios", "=", "[", "4.0", ",", "7.18", ",", "11.0", ",", "15.0", ",", "19.0", ",", "27.0", "]", "\n", "pointsAndRects", "=", "[", "]", "\n", "for", "inst", "in", "self", ".", "images", ":", "\n", "            ", "annotationPath", "=", "inst", "[", "'annotationPath'", "]", "\n", "#rescaled = inst['rescaled']", "\n", "with", "open", "(", "annotationPath", ")", "as", "annFile", ":", "\n", "                ", "annotations", "=", "json", ".", "loads", "(", "annFile", ".", "read", "(", ")", ")", "\n", "", "for", "i", "in", "range", "(", "sample_count", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "s", "=", "(", "self", ".", "rescale_range", "[", "0", "]", "+", "self", ".", "rescale_range", "[", "1", "]", ")", "/", "2", "\n", "", "else", ":", "\n", "                    ", "s", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "rescale_range", "[", "0", "]", ",", "self", ".", "rescale_range", "[", "1", "]", ")", "\n", "#partial_rescale = s/rescaled", "\n", "", "points", "=", "[", "]", "\n", "if", "self", ".", "split_to_lines", ":", "\n", "                    ", "bbs", ",", "numNeighbors", ",", "trans", ",", "groups", "=", "createLines", "(", "annotations", ",", "self", ".", "classMap", ",", "s", ")", "\n", "for", "j", "in", "range", "(", "bbs", ".", "shape", "[", "1", "]", ")", ":", "\n", "                        ", "w", "=", "bbs", "[", "0", ",", "j", ",", "2", "]", "-", "bbs", "[", "0", ",", "j", ",", "0", "]", "\n", "h", "=", "bbs", "[", "0", ",", "j", ",", "5", "]", "-", "bbs", "[", "0", ",", "j", ",", "1", "]", "\n", "if", "use_max_width", ":", "\n", "                            ", "w", "=", "min", "(", "w", ",", "use_max_width", ")", "\n", "", "p_left_x", "=", "bbs", "[", "0", ",", "j", ",", "8", "]", "\n", "p_left_x", "=", "-", "w", "/", "2", "\n", "p_left_y", "=", "0", "\n", "p_right_x", "=", "w", "/", "2", "\n", "p_right_y", "=", "0", "\n", "p_top_x", "=", "0", "\n", "p_top_y", "=", "-", "h", "/", "2", "\n", "p_bot_x", "=", "0", "\n", "p_bot_y", "=", "h", "/", "2", "\n", "points", ".", "append", "(", "np", ".", "array", "(", "[", "p_left_x", ",", "p_left_y", ",", "p_right_x", ",", "p_right_y", ",", "p_top_x", ",", "p_top_y", ",", "p_bot_x", ",", "p_bot_y", ",", "0", ",", "0", ",", "0", ",", "h", ",", "w", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "boxes", "=", "annotations", "[", "'form'", "]", "\n", "for", "j", ",", "boxinfo", "in", "enumerate", "(", "boxes", ")", ":", "\n", "                        ", "lX", ",", "tY", ",", "rX", ",", "bY", "=", "boxinfo", "[", "'box'", "]", "\n", "w", "=", "rX", "-", "lX", "+", "1", "\n", "h", "=", "bY", "-", "tY", "+", "1", "\n", "w", "*=", "s", "\n", "h", "*=", "s", "\n", "if", "use_max_width", ":", "\n", "                            ", "w", "=", "min", "(", "w", ",", "use_max_width", ")", "\n", "", "p_left_x", "=", "-", "w", "/", "2", "\n", "p_left_y", "=", "0", "\n", "p_right_x", "=", "w", "/", "2", "\n", "p_right_y", "=", "0", "\n", "p_top_x", "=", "0", "\n", "p_top_y", "=", "-", "h", "/", "2", "\n", "p_bot_x", "=", "0", "\n", "p_bot_y", "=", "h", "/", "2", "\n", "points", ".", "append", "(", "np", ".", "array", "(", "[", "p_left_x", ",", "p_left_y", ",", "p_right_x", ",", "p_right_y", ",", "p_top_x", ",", "p_top_y", ",", "p_bot_x", ",", "p_bot_y", ",", "0", ",", "0", ",", "0", ",", "h", ",", "w", "]", ")", ")", "\n", "", "", "points", "=", "np", ".", "stack", "(", "points", ",", "axis", "=", "0", ")", "\n", "pointsAndRects", ".", "append", "(", "points", ")", "\n", "", "", "pointsAndRects", "=", "np", ".", "concatenate", "(", "pointsAndRects", ",", "axis", "=", "0", ")", "\n", "#all_points = pointsAndRects[:,0:8]", "\n", "#all_heights = pointsAndRects[:,11]", "\n", "#all_widths = pointsAndRects[:,12]", "\n", "\n", "bestDistsFromMean", "=", "None", "\n", "num_attempts", "=", "20", "if", "k", ">", "0", "else", "1", "\n", "for", "attempt", "in", "range", "(", "num_attempts", ")", ":", "\n", "            ", "if", "k", ">", "0", ":", "\n", "                ", "randomIndexes", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "pointsAndRects", ".", "shape", "[", "0", "]", ",", "(", "k", ")", ")", "\n", "means", "=", "pointsAndRects", "[", "randomIndexes", "]", "\n", "", "else", ":", "\n", "#minH=5", "\n", "#minW=5", "\n", "                ", "means", "=", "[", "]", "\n", "\n", "##smaller than mean", "\n", "#for step in range(5):", "\n", "#    height = minH + (meanH-minH)*(step/5.0)", "\n", "#    width = minW + (meanW-minW)*(step/5.0)", "\n", "#    for ratio in ratios:", "\n", "#        means.append(makePointsAndRects(height,ratio*height))", "\n", "#        means.append(makePointsAndRects(width/ratio,width))", "\n", "#for stddev in range(0,5):", "\n", "#    for step in range(5-stddev):", "\n", "#        height = meanH + stddev*stdH + stdH*(step/(5.0-stddev))", "\n", "#        width = meanW + stddev*stdW + stdW*(step/(5.0-stddev))", "\n", "#        for ratio in ratios:", "\n", "#            means.append(makePointsAndRects(height,ratio*height))", "\n", "#            means.append(makePointsAndRects(width/ratio,width))", "\n", "rots", "=", "[", "0", ",", "math", ".", "pi", "/", "2", ",", "math", ".", "pi", ",", "1.5", "*", "math", ".", "pi", "]", "\n", "if", "self", ".", "rotate", ":", "\n", "                    ", "for", "height", "in", "np", ".", "linspace", "(", "15", ",", "200", ",", "num", "=", "4", ")", ":", "\n", "                        ", "for", "width", "in", "np", ".", "linspace", "(", "30", ",", "1200", ",", "num", "=", "4", ")", ":", "\n", "                            ", "for", "rot", "in", "rots", ":", "\n", "                                ", "means", ".", "append", "(", "makePointsAndRects", "(", "height", ",", "width", ",", "rot", ")", ")", "\n", "#long boxes", "\n", "", "", "", "for", "width", "in", "np", ".", "linspace", "(", "1600", ",", "4000", ",", "num", "=", "3", ")", ":", "\n", "#for height in np.linspace(30,100,num=3):", "\n", "#    for rot in rots:", "\n", "#        means.append(makePointsAndRects(height,width,rot))", "\n", "                        ", "for", "rot", "in", "rots", ":", "\n", "                            ", "means", ".", "append", "(", "makePointsAndRects", "(", "50", ",", "width", ",", "rot", ")", ")", "\n", "", "", "", "else", ":", "\n", "#rotated boxes", "\n", "#for height in np.linspace(13,300,num=4):", "\n", "                    ", "for", "height", "in", "np", ".", "linspace", "(", "13", ",", "300", ",", "num", "=", "3", ")", ":", "\n", "                        ", "means", ".", "append", "(", "makePointsAndRects", "(", "height", ",", "20", ")", ")", "\n", "#general boxes", "\n", "#for height in np.linspace(15,200,num=4):", "\n", "#for width in np.linspace(30,1200,num=4):", "\n", "", "for", "height", "in", "np", ".", "linspace", "(", "15", ",", "200", ",", "num", "=", "2", ")", ":", "\n", "                        ", "for", "width", "in", "np", ".", "linspace", "(", "30", ",", "1200", ",", "num", "=", "3", ")", ":", "\n", "                            ", "means", ".", "append", "(", "makePointsAndRects", "(", "height", ",", "width", ")", ")", "\n", "#long boxes", "\n", "", "", "for", "width", "in", "np", ".", "linspace", "(", "1600", ",", "4000", ",", "num", "=", "3", ")", ":", "\n", "#for height in np.linspace(30,100,num=3):", "\n", "#    means.append(makePointsAndRects(height,width))", "\n", "                        ", "means", ".", "append", "(", "makePointsAndRects", "(", "50", ",", "width", ")", ")", "\n", "\n", "", "", "k", "=", "len", "(", "means", ")", "\n", "print", "(", "'K: {}'", ".", "format", "(", "k", ")", ")", "\n", "means", "=", "np", ".", "stack", "(", "means", ",", "axis", "=", "0", ")", "\n", "#pointsAndRects [0:p_left_x, 1:p_left_y,2:p_right_x,3:p_right_y,4:p_top_x,5:p_top_y,6:p_bot_x,7:p_bot_y, 8:xc, 9:yc, 10:rot, 11:h, 12:w", "\n", "", "cluster_centers", "=", "means", "\n", "distsFromMean", "=", "None", "\n", "prevDistsFromMean", "=", "None", "\n", "for", "iteration", "in", "range", "(", "100000", ")", ":", "#intended to break out", "\n", "                ", "print", "(", "'attempt:{}/{}, bestDistsFromMean:{}, iteration:{}, bestDistsFromMean:{}'", ".", "format", "(", "attempt", "+", "1", ",", "num_attempts", ",", "bestDistsFromMean", ",", "iteration", ",", "prevDistsFromMean", ")", ",", "end", "=", "'\\r'", ")", "\n", "#means_points = means[:,0:8]", "\n", "#means_heights = means[:,11]", "\n", "#means_widths = means[:,12]", "\n", "# = groups = assignGroups(means,pointsAndRects)", "\n", "expanded_all_points", "=", "pointsAndRects", "[", ":", ",", "None", ",", "0", ":", "8", "]", "\n", "expanded_all_heights", "=", "pointsAndRects", "[", ":", ",", "None", ",", "11", "]", "\n", "expanded_all_widths", "=", "pointsAndRects", "[", ":", ",", "None", ",", "12", "]", "\n", "\n", "expanded_means_points", "=", "means", "[", "None", ",", ":", ",", "0", ":", "8", "]", "\n", "expanded_means_heights", "=", "means", "[", "None", ",", ":", ",", "11", "]", "\n", "expanded_means_widths", "=", "means", "[", "None", ",", ":", ",", "12", "]", "\n", "\n", "#expanded_all_points = expanded_all_points.expand(all_points.shape[0], all_points.shape[1], means_points.shape[1], all_points.shape[2])", "\n", "expanded_all_points", "=", "np", ".", "tile", "(", "expanded_all_points", ",", "(", "1", ",", "means", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "expanded_all_heights", "=", "np", ".", "tile", "(", "expanded_all_heights", ",", "(", "1", ",", "means", ".", "shape", "[", "0", "]", ")", ")", "\n", "expanded_all_widths", "=", "np", ".", "tile", "(", "expanded_all_widths", ",", "(", "1", ",", "means", ".", "shape", "[", "0", "]", ")", ")", "\n", "#expanded_means_points = expanded_means_points.expand(means_points.shape[0], all_points.shape[0], means_points.shape[0], means_points.shape[2])", "\n", "expanded_means_points", "=", "np", ".", "tile", "(", "expanded_means_points", ",", "(", "pointsAndRects", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ")", "\n", "expanded_means_heights", "=", "np", ".", "tile", "(", "expanded_means_heights", ",", "(", "pointsAndRects", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "expanded_means_widths", "=", "np", ".", "tile", "(", "expanded_means_widths", ",", "(", "pointsAndRects", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "point_deltas", "=", "(", "expanded_all_points", "-", "expanded_means_points", ")", "\n", "#avg_heights = ((expanded_means_heights+expanded_all_heights)/2)", "\n", "#avg_widths = ((expanded_means_widths+expanded_all_widths)/2)", "\n", "avg_heights", "=", "avg_widths", "=", "(", "expanded_means_heights", "+", "expanded_all_heights", "+", "expanded_means_widths", "+", "expanded_all_widths", ")", "/", "4", "\n", "#print point_deltas", "\n", "\n", "normed_difference", "=", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "point_deltas", "[", ":", ",", ":", ",", "0", ":", "2", "]", ",", "2", ",", "2", ")", "/", "avg_widths", "+", "\n", "np", ".", "linalg", ".", "norm", "(", "point_deltas", "[", ":", ",", ":", ",", "2", ":", "4", "]", ",", "2", ",", "2", ")", "/", "avg_widths", "+", "\n", "np", ".", "linalg", ".", "norm", "(", "point_deltas", "[", ":", ",", ":", ",", "4", ":", "6", "]", ",", "2", ",", "2", ")", "/", "avg_heights", "+", "\n", "np", ".", "linalg", ".", "norm", "(", "point_deltas", "[", ":", ",", ":", ",", "6", ":", "8", "]", ",", "2", ",", "2", ")", "/", "avg_heights", "\n", ")", "**", "2", "\n", "#print normed_difference", "\n", "#import pdb; pdb.set_trace()", "\n", "\n", "groups", "=", "normed_difference", ".", "argmin", "(", "1", ")", "#this should list the mean (index) for each element of all", "\n", "distsFromMean", "=", "normed_difference", ".", "min", "(", "1", ")", ".", "mean", "(", ")", "\n", "if", "prevDistsFromMean", "is", "not", "None", "and", "distsFromMean", ">=", "prevDistsFromMean", ":", "\n", "                    ", "break", "\n", "", "prevDistsFromMean", "=", "distsFromMean", "\n", "\n", "#means = computeMeans(groups,pointsAndRects)", "\n", "#means = np.zeros(k,13)", "\n", "for", "ki", "in", "range", "(", "k", ")", ":", "\n", "                    ", "selected", "=", "(", "groups", "==", "ki", ")", "[", ":", ",", "None", "]", "\n", "numSel", "=", "float", "(", "selected", ".", "sum", "(", ")", ")", "\n", "if", "(", "numSel", "==", "0", ")", ":", "\n", "                        ", "break", "\n", "", "means", "[", "ki", ",", ":", "]", "=", "(", "pointsAndRects", "*", "np", ".", "tile", "(", "selected", ",", "(", "1", ",", "13", ")", ")", ")", ".", "sum", "(", "0", ")", "/", "numSel", "\n", "", "", "if", "bestDistsFromMean", "is", "None", "or", "distsFromMean", "<", "bestDistsFromMean", ":", "\n", "                ", "bestDistsFromMean", "=", "distsFromMean", "\n", "cluster_centers", "=", "means", "\n", "#cluster_centers=means", "\n", "", "", "dH", "=", "600", "\n", "dW", "=", "3000", "\n", "draw", "=", "np", ".", "zeros", "(", "[", "dH", ",", "dW", ",", "3", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "toWrite", "=", "[", "]", "\n", "final_k", "=", "k", "\n", "for", "ki", "in", "range", "(", "k", ")", ":", "\n", "            ", "pop", "=", "(", "groups", "==", "ki", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "pop", ">", "2", ":", "\n", "                ", "color", "=", "np", ".", "random", ".", "uniform", "(", "0.2", ",", "1", ",", "3", ")", ".", "tolist", "(", ")", "\n", "#d=math.sqrt(mean[ki,11]**2 + mean[ki,12]**2)", "\n", "#theta = math.atan2(mean[ki,11],mean[ki,12]) + mean[ki,10]", "\n", "h", "=", "cluster_centers", "[", "ki", ",", "11", "]", "\n", "w", "=", "cluster_centers", "[", "ki", ",", "12", "]", "\n", "rot", "=", "cluster_centers", "[", "ki", ",", "10", "]", "\n", "toWrite", ".", "append", "(", "{", "'height'", ":", "h", ".", "item", "(", ")", ",", "'width'", ":", "w", ".", "item", "(", ")", ",", "'rot'", ":", "rot", ".", "item", "(", ")", ",", "'popularity'", ":", "pop", "}", ")", "\n", "tr", "=", "(", "int", "(", "math", ".", "cos", "(", "rot", ")", "*", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "h", ")", "+", "dW", "//", "2", ",", "int", "(", "math", ".", "sin", "(", "rot", ")", "*", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "h", ")", "+", "dH", "//", "2", ")", "\n", "tl", "=", "(", "int", "(", "math", ".", "cos", "(", "rot", ")", "*", "-", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "h", ")", "+", "dW", "//", "2", ",", "int", "(", "math", ".", "sin", "(", "rot", ")", "*", "-", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "h", ")", "+", "dH", "//", "2", ")", "\n", "br", "=", "(", "int", "(", "math", ".", "cos", "(", "rot", ")", "*", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "-", "h", ")", "+", "dW", "//", "2", ",", "int", "(", "math", ".", "sin", "(", "rot", ")", "*", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "-", "h", ")", "+", "dH", "//", "2", ")", "\n", "bl", "=", "(", "int", "(", "math", ".", "cos", "(", "rot", ")", "*", "-", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "-", "h", ")", "+", "dW", "//", "2", ",", "int", "(", "math", ".", "sin", "(", "rot", ")", "*", "-", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "-", "h", ")", "+", "dH", "//", "2", ")", "\n", "\n", "img_f", ".", "line", "(", "draw", ",", "tl", ",", "tr", ",", "color", ")", "\n", "img_f", ".", "line", "(", "draw", ",", "tr", ",", "br", ",", "color", ")", "\n", "img_f", ".", "line", "(", "draw", ",", "br", ",", "bl", ",", "color", ")", "\n", "img_f", ".", "line", "(", "draw", ",", "bl", ",", "tl", ",", "color", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "final_k", "-=", "1", "\n", "\n", "#print(toWrite)", "\n", "", "", "with", "open", "(", "outPath", ".", "format", "(", "final_k", ")", ",", "'w'", ")", "as", "out", ":", "\n", "            ", "out", ".", "write", "(", "json", ".", "dumps", "(", "toWrite", ")", ")", "\n", "print", "(", "'saved '", "+", "outPath", ".", "format", "(", "final_k", ")", ")", "\n", "#img_f.imshow('clusters',draw)", "\n", "#img_f.waitKey()", "\n", "", "img_f", ".", "imwrite", "(", "'clusters.png'", ",", "draw", "*", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.funsd_box_detect.polyIntersect": [[22, 45], ["numpy.array", "numpy.dot", "numpy.dot", "numpy.linalg.norm", "numpy.dot", "max", "min", "numpy.dot", "max", "min"], "function", ["None"], ["def", "polyIntersect", "(", "poly1", ",", "poly2", ")", ":", "\n", "    ", "prevPoint", "=", "poly1", "[", "-", "1", "]", "\n", "for", "point", "in", "poly1", ":", "\n", "        ", "perpVec", "=", "np", ".", "array", "(", "[", "-", "(", "point", "[", "1", "]", "-", "prevPoint", "[", "1", "]", ")", ",", "point", "[", "0", "]", "-", "prevPoint", "[", "0", "]", "]", ")", "\n", "perpVec", "=", "perpVec", "/", "np", ".", "linalg", ".", "norm", "(", "perpVec", ")", "\n", "\n", "maxPoly1", "=", "np", ".", "dot", "(", "perpVec", ",", "poly1", "[", "0", "]", ")", "\n", "minPoly1", "=", "maxPoly1", "\n", "for", "p", "in", "poly1", ":", "\n", "            ", "p_onLine", "=", "np", ".", "dot", "(", "perpVec", ",", "p", ")", "\n", "maxPoly1", "=", "max", "(", "maxPoly1", ",", "p_onLine", ")", "\n", "minPoly1", "=", "min", "(", "minPoly1", ",", "p_onLine", ")", "\n", "", "maxPoly2", "=", "np", ".", "dot", "(", "perpVec", ",", "poly2", "[", "0", "]", ")", "\n", "minPoly2", "=", "maxPoly2", "\n", "for", "p", "in", "poly2", ":", "\n", "            ", "p_onLine", "=", "np", ".", "dot", "(", "perpVec", ",", "p", ")", "\n", "maxPoly2", "=", "max", "(", "maxPoly2", ",", "p_onLine", ")", "\n", "minPoly2", "=", "min", "(", "minPoly2", ",", "p_onLine", ")", "\n", "\n", "", "if", "(", "maxPoly1", "<", "minPoly2", "or", "minPoly1", ">", "maxPoly2", ")", ":", "\n", "            ", "return", "False", "\n", "", "prevPoint", "=", "point", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.funsd_box_detect.perp": [[46, 51], ["numpy.empty_like"], "function", ["None"], ["", "def", "perp", "(", "a", ")", ":", "\n", "    ", "b", "=", "np", ".", "empty_like", "(", "a", ")", "\n", "b", "[", "0", "]", "=", "-", "a", "[", "1", "]", "\n", "b", "[", "1", "]", "=", "a", "[", "0", "]", "\n", "return", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.funsd_box_detect.lineIntersection": [[52, 86], ["funsd_box_detect.perp", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm", "np.dot.astype", "min", "max", "min", "max", "min", "max", "min", "max"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.perp"], ["", "def", "lineIntersection", "(", "lineA", ",", "lineB", ",", "threshA_low", "=", "10", ",", "threshA_high", "=", "10", ",", "threshB_low", "=", "10", ",", "threshB_high", "=", "10", ",", "both", "=", "False", ")", ":", "\n", "    ", "a1", "=", "lineA", "[", "0", "]", "\n", "a2", "=", "lineA", "[", "1", "]", "\n", "b1", "=", "lineB", "[", "0", "]", "\n", "b2", "=", "lineB", "[", "1", "]", "\n", "da", "=", "a2", "-", "a1", "\n", "db", "=", "b2", "-", "b1", "\n", "dp", "=", "a1", "-", "b1", "\n", "dap", "=", "perp", "(", "da", ")", "\n", "denom", "=", "np", ".", "dot", "(", "dap", ",", "db", ")", "\n", "num", "=", "np", ".", "dot", "(", "dap", ",", "dp", ")", "\n", "point", "=", "(", "num", "/", "denom", ".", "astype", "(", "float", ")", ")", "*", "db", "+", "b1", "\n", "#check if it is on atleast one line segment", "\n", "vecA", "=", "da", "/", "np", ".", "linalg", ".", "norm", "(", "da", ")", "\n", "p_A", "=", "np", ".", "dot", "(", "point", ",", "vecA", ")", "\n", "a1_A", "=", "np", ".", "dot", "(", "a1", ",", "vecA", ")", "\n", "a2_A", "=", "np", ".", "dot", "(", "a2", ",", "vecA", ")", "\n", "\n", "vecB", "=", "db", "/", "np", ".", "linalg", ".", "norm", "(", "db", ")", "\n", "p_B", "=", "np", ".", "dot", "(", "point", ",", "vecB", ")", "\n", "b1_B", "=", "np", ".", "dot", "(", "b1", ",", "vecB", ")", "\n", "b2_B", "=", "np", ".", "dot", "(", "b2", ",", "vecB", ")", "\n", "\n", "###rint('A:{},  B:{}, int p:{}'.format(lineA,lineB,point))", "\n", "###rint('{:.0f}>{:.0f} and {:.0f}<{:.0f}  and/or  {:.0f}>{:.0f} and {:.0f}<{:.0f} = {} {} {}'.format((p_A+threshA_low),(min(a1_A,a2_A)),(p_A-threshA_high),(max(a1_A,a2_A)),(p_B+threshB_low),(min(b1_B,b2_B)),(p_B-threshB_high),(max(b1_B,b2_B)),(p_A+threshA_low>min(a1_A,a2_A) and p_A-threshA_high<max(a1_A,a2_A)),'and' if both else 'or',(p_B+threshB_low>min(b1_B,b2_B) and p_B-threshB_high<max(b1_B,b2_B))))", "\n", "if", "both", ":", "\n", "        ", "if", "(", "(", "p_A", "+", "threshA_low", ">", "min", "(", "a1_A", ",", "a2_A", ")", "and", "p_A", "-", "threshA_high", "<", "max", "(", "a1_A", ",", "a2_A", ")", ")", "and", "\n", "(", "p_B", "+", "threshB_low", ">", "min", "(", "b1_B", ",", "b2_B", ")", "and", "p_B", "-", "threshB_high", "<", "max", "(", "b1_B", ",", "b2_B", ")", ")", ")", ":", "\n", "            ", "return", "point", "\n", "", "", "else", ":", "\n", "        ", "if", "(", "(", "p_A", "+", "threshA_low", ">", "min", "(", "a1_A", ",", "a2_A", ")", "and", "p_A", "-", "threshA_high", "<", "max", "(", "a1_A", ",", "a2_A", ")", ")", "or", "\n", "(", "p_B", "+", "threshB_low", ">", "min", "(", "b1_B", ",", "b2_B", ")", "and", "p_B", "-", "threshB_high", "<", "max", "(", "b1_B", ",", "b2_B", ")", ")", ")", ":", "\n", "            ", "return", "point", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.funsd_box_detect.getWidthFromBB": [[461, 463], ["numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "", "def", "getWidthFromBB", "(", "bb", ")", ":", "\n", "    ", "return", "(", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "0", "]", "-", "bb", "[", "1", "]", ")", "+", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "3", "]", "-", "bb", "[", "2", "]", ")", ")", "/", "2", "\n", "", "def", "getHeightFromBB", "(", "bb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.funsd_box_detect.getHeightFromBB": [[463, 465], ["numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "getHeightFromBB", "(", "bb", ")", ":", "\n", "    ", "return", "(", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "0", "]", "-", "bb", "[", "3", "]", ")", "+", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "1", "]", "-", "bb", "[", "2", "]", ")", ")", "/", "2", "\n", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.FormsGraphPair.__init__": [[31, 168], ["graph_pair.GraphPairDataset.__init__", "enumerate", "list", "list.sort", "print", "print", "open", "json.loads", "groupsToUse.keys", "len", "os.path.join", "f.read", "type", "print", "os.path.join", "os.path.exists", "len", "type", "print", "exit", "os.path.join", "forms_graph_pair.FormsGraphPair.images.append", "groupsToUse.update", "os.path.join.rfind", "os.path.exists", "utils.imread", "utils.resize", "utils.imwrite", "print", "imageName.rfind"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imread", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.resize", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imwrite"], ["def", "__init__", "(", "self", ",", "dirPath", "=", "None", ",", "split", "=", "None", ",", "config", "=", "None", ",", "images", "=", "None", ")", ":", "\n", "        ", "super", "(", "FormsGraphPair", ",", "self", ")", ".", "__init__", "(", "dirPath", ",", "split", ",", "config", ",", "images", ")", "\n", "\n", "if", "'only_types'", "in", "config", ":", "\n", "            ", "self", ".", "only_types", "=", "config", "[", "'only_types'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "only_types", "=", "None", "\n", "#print( self.only_types)", "\n", "", "if", "'swap_circle'", "in", "config", ":", "\n", "            ", "self", ".", "swapCircle", "=", "config", "[", "'swap_circle'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "swapCircle", "=", "False", "\n", "\n", "", "self", ".", "special_dataset", "=", "config", "[", "'special_dataset'", "]", "if", "'special_dataset'", "in", "config", "else", "None", "\n", "if", "'simple_dataset'", "in", "config", "and", "config", "[", "'simple_dataset'", "]", ":", "\n", "            ", "self", ".", "special_dataset", "=", "'simple'", "\n", "\n", "", "if", "images", "is", "not", "None", ":", "\n", "            ", "self", ".", "images", "=", "images", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "special_dataset", "is", "not", "None", ":", "\n", "                ", "splitFile", "=", "self", ".", "special_dataset", "+", "'_train_valid_test_split.json'", "\n", "", "else", ":", "\n", "                ", "splitFile", "=", "'train_valid_test_split.json'", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dirPath", ",", "splitFile", ")", ")", "as", "f", ":", "\n", "                ", "readFile", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "if", "type", "(", "split", ")", "is", "str", ":", "\n", "                    ", "groupsToUse", "=", "readFile", "[", "split", "]", "\n", "", "elif", "type", "(", "split", ")", "is", "list", ":", "\n", "                    ", "groupsToUse", "=", "{", "}", "\n", "for", "spstr", "in", "split", ":", "\n", "                        ", "newGroups", "=", "readFile", "[", "spstr", "]", "\n", "groupsToUse", ".", "update", "(", "newGroups", ")", "\n", "", "", "else", ":", "\n", "                    ", "print", "(", "\"Error, unknown split {}\"", ".", "format", "(", "split", ")", ")", "\n", "exit", "(", ")", "\n", "", "", "self", ".", "images", "=", "[", "]", "\n", "groupNames", "=", "list", "(", "groupsToUse", ".", "keys", "(", ")", ")", "\n", "groupNames", ".", "sort", "(", ")", "\n", "\n", "for", "groupName", "in", "groupNames", ":", "\n", "                ", "imageNames", "=", "groupsToUse", "[", "groupName", "]", "\n", "\n", "#print('{} {}'.format(groupName, imageNames))", "\n", "#oneonly=False", "\n", "if", "groupName", "in", "SKIP", ":", "\n", "                    ", "print", "(", "'Skipped group {}'", ".", "format", "(", "groupName", ")", ")", "\n", "continue", "\n", "#    if groupName in ONE_DONE:", "\n", "#        oneonly=True", "\n", "#        with open(os.path.join(dirPath,'groups',groupName,'template'+groupName+'.json')) as f:", "\n", "#            T_annotations = json.loads(f.read())", "\n", "#    else:", "\n", "", "for", "imageName", "in", "imageNames", ":", "\n", "#if oneonly and T_annotations['imageFilename']!=imageName:", "\n", "#    #print('skipped {} {}'.format(imageName,groupName))", "\n", "#    continue", "\n", "#elif oneonly:", "\n", "#    print('only {} from {}'.format(imageName,groupName))", "\n", "                    ", "org_path", "=", "os", ".", "path", ".", "join", "(", "dirPath", ",", "'groups'", ",", "groupName", ",", "imageName", ")", "\n", "if", "self", ".", "cache_resized", ":", "\n", "                        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "imageName", ")", "\n", "", "else", ":", "\n", "                        ", "path", "=", "org_path", "\n", "", "jsonPath", "=", "org_path", "[", ":", "org_path", ".", "rfind", "(", "'.'", ")", "]", "+", "'.json'", "\n", "#print(jsonPath)", "\n", "if", "os", ".", "path", ".", "exists", "(", "jsonPath", ")", ":", "\n", "                        ", "rescale", "=", "1.0", "\n", "if", "self", ".", "cache_resized", ":", "\n", "                            ", "rescale", "=", "self", ".", "rescale_range", "[", "1", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                                ", "org_img", "=", "img_f", ".", "imread", "(", "org_path", ")", "\n", "if", "org_img", "is", "None", ":", "\n", "                                    ", "print", "(", "'WARNING, could not read {}'", ".", "format", "(", "org_img", ")", ")", "\n", "continue", "\n", "#target_dim1 = self.rescale_range[1]", "\n", "#target_dim0 = int(org_img.shape[0]/float(org_img.shape[1]) * target_dim1)", "\n", "#resized = img_f.resize(org_img,(target_dim1, target_dim0))", "\n", "", "resized", "=", "img_f", ".", "resize", "(", "org_img", ",", "(", "0", ",", "0", ")", ",", "\n", "fx", "=", "self", ".", "rescale_range", "[", "1", "]", ",", "\n", "fy", "=", "self", ".", "rescale_range", "[", "1", "]", ",", "\n", ")", "\n", "img_f", ".", "imwrite", "(", "path", ",", "resized", ")", "\n", "#rescale = target_dim1/float(org_img.shape[1])", "\n", "#elif self.cache_resized:", "\n", "#print(jsonPath)", "\n", "#with open(jsonPath) as f:", "\n", "#    annotations = json.loads(f.read())", "\n", "#imW = annotations['width']", "\n", "\n", "#target_dim1 = self.rescale_range[1]", "\n", "#rescale = target_dim1/float(imW)", "\n", "#print('addint {}'.format(imageName))", "\n", "", "", "self", ".", "images", ".", "append", "(", "{", "'id'", ":", "imageName", ",", "'imagePath'", ":", "path", ",", "'annotationPath'", ":", "jsonPath", ",", "'rescaled'", ":", "rescale", ",", "'imageName'", ":", "imageName", "[", ":", "imageName", ".", "rfind", "(", "'.'", ")", "]", "}", ")", "\n", "#else:", "\n", "#    print('couldnt find {}'.format(jsonPath))", "\n", "\n", "# with open(path+'.json') as f:", "\n", "#    annotations = json.loads(f.read())", "\n", "#    imH = annotations['height']", "\n", "#    imW = annotations['width']", "\n", "#    #startCount=len(self.instances)", "\n", "#    for bb in annotations['textBBs']:", "\n", "\n", "", "", "", "", "self", ".", "no_blanks", "=", "config", "[", "'no_blanks'", "]", "if", "'no_blanks'", "in", "config", "else", "False", "\n", "self", ".", "use_paired_class", "=", "config", "[", "'use_paired_class'", "]", "if", "'use_paired_class'", "in", "config", "else", "False", "\n", "if", "'no_print_fields'", "in", "config", ":", "\n", "            ", "self", ".", "no_print_fields", "=", "config", "[", "'no_print_fields'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "no_print_fields", "=", "False", "\n", "", "self", ".", "no_graphics", "=", "config", "[", "'no_graphics'", "]", "if", "'no_graphics'", "in", "config", "else", "False", "\n", "self", ".", "only_opposite_pairs", "=", "config", "[", "'only_opposite_pairs'", "]", "if", "'only_opposite_pairs'", "in", "config", "else", "False", "\n", "\n", "\n", "self", ".", "group_only_same", "=", "config", "[", "'group_only_same'", "]", "if", "'group_only_same'", "in", "config", "else", "False", "\n", "self", ".", "no_groups", "=", "config", "[", "'no_groups'", "]", "if", "'no_groups'", "in", "config", "else", "False", "\n", "assert", "(", "not", "self", ".", "no_groups", "or", "not", "self", ".", "group_only_same", ")", "\n", "if", "(", "self", ".", "group_only_same", "or", "self", ".", "no_groups", ")", "and", "self", ".", "only_opposite_pairs", ":", "\n", "            ", "print", "(", "'Warning, you may want only_opposite_pairs off'", ")", "\n", "", "if", "(", "self", ".", "group_only_same", "or", "self", ".", "no_groups", ")", "and", "not", "self", ".", "rotate", ":", "\n", "            ", "print", "(", "'Warning, you may want rotation on'", ")", "\n", "\n", "\n", "", "self", ".", "onlyFormStuff", "=", "False", "\n", "self", ".", "errors", "=", "[", "]", "\n", "\n", "self", ".", "useClasses", "=", "config", "[", "'use_classes'", "]", "if", "'use_classes'", "in", "config", "else", "[", "]", "\n", "self", ".", "classMap", "=", "{", "\n", "'textGeneric'", ":", "13", ",", "\n", "'fieldGeneric'", ":", "14", ",", "\n", "}", "\n", "for", "i", ",", "clas", "in", "enumerate", "(", "self", ".", "useClasses", ")", ":", "\n", "            ", "self", ".", "classMap", "[", "clas", "]", "=", "i", "+", "15", "\n", "", "if", "not", "self", ".", "no_blanks", ":", "\n", "            ", "self", ".", "classMap", "[", "'blank'", "]", "=", "15", "+", "len", "(", "self", ".", "useClasses", ")", "\n", "", "if", "self", ".", "use_paired_class", ":", "\n", "            ", "self", ".", "classMap", "[", "'paired'", "]", "=", "15", "+", "len", "(", "self", ".", "useClasses", ")", "+", "(", "0", "if", "self", ".", "no_blanks", "else", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.FormsGraphPair.parseAnn": [[174, 211], ["utils.forms_annotations.fixAnnotations", "annotations[].items", "utils.forms_annotations.getBBWithPoints", "len", "utils.forms_annotations.formGroups", "len", "bbsToUse.append", "ids.append"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.fixAnnotations", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getBBWithPoints", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.formGroups"], ["", "", "def", "parseAnn", "(", "self", ",", "annotations", ",", "scale", ")", ":", "\n", "#fieldBBs = annotations['fieldBBs']", "\n", "        ", "fixAnnotations", "(", "self", ",", "annotations", ")", "\n", "bbsToUse", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "trans", "=", "{", "}", "\n", "metadata", "=", "{", "}", "\n", "for", "id", ",", "bb", "in", "annotations", "[", "'byId'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "onlyFormStuff", "or", "(", "'paired'", "in", "bb", "and", "bb", "[", "'paired'", "]", ")", ":", "\n", "                ", "bbsToUse", ".", "append", "(", "bb", ")", "\n", "ids", ".", "append", "(", "bb", "[", "'id'", "]", ")", "\n", "if", "'transcriptions'", "in", "annotations", "and", "bb", "[", "'id'", "]", "in", "annotations", "[", "'transcriptions'", "]", ":", "\n", "                    ", "trans", "[", "bb", "[", "'id'", "]", "]", "=", "annotations", "[", "'transcriptions'", "]", "[", "bb", "[", "'id'", "]", "]", "\n", "", "else", ":", "\n", "                    ", "trans", "[", "bb", "[", "'id'", "]", "]", "=", "None", "\n", "\n", "", "", "metadata", "[", "bb", "[", "'id'", "]", "]", "=", "{", "'type'", ":", "bb", "[", "'isBlank'", "]", "}", "\n", "\n", "\n", "\n", "", "bbs", "=", "getBBWithPoints", "(", "bbsToUse", ",", "scale", ",", "useBlankClass", "=", "(", "not", "self", ".", "no_blanks", ")", ",", "usePairedClass", "=", "self", ".", "use_paired_class", ",", "useAllClass", "=", "self", ".", "useClasses", ")", "\n", "#numClasses = bbs.shape[2]-16", "\n", "numClasses", "=", "len", "(", "self", ".", "classMap", ")", "\n", "\n", "#import pdb;pdb.set_trace()", "\n", "if", "self", ".", "no_groups", ":", "\n", "            ", "idGroups", "=", "[", "[", "bbid", "]", "for", "bbid", "in", "ids", "]", "\n", "", "else", ":", "\n", "            ", "idGroups", "=", "formGroups", "(", "annotations", ",", "self", ".", "group_only_same", ")", "\n", "#revIds = {bbId:n for n,bbId in enumerate(ids)}", "\n", "#groups = [ [revIds[bbId] for bbId in group] for group in idGroups]", "\n", "", "groups", "=", "idGroups", "\n", "assert", "(", "bbs", "is", "not", "None", ")", "\n", "#print(metadata)", "\n", "assert", "(", "bbs", "is", "not", "None", ")", "\n", "assert", "(", "len", "(", "groups", ")", ">", "0", ")", "\n", "return", "bbs", ",", "ids", ",", "numClasses", ",", "trans", ",", "groups", ",", "metadata", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.FormsGraphPair.getResponseBBIdList": [[212, 214], ["utils.forms_annotations.getResponseBBIdList_"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getResponseBBIdList_"], ["", "def", "getResponseBBIdList", "(", "self", ",", "queryId", ",", "annotations", ")", ":", "\n", "        ", "return", "getResponseBBIdList_", "(", "self", ",", "queryId", ",", "annotations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.collate": [[20, 23], ["len"], "function", ["None"], ["def", "collate", "(", "batch", ")", ":", "\n", "    ", "assert", "(", "len", "(", "batch", ")", "==", "1", ")", "\n", "return", "batch", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.getWidthFromBB": [[216, 218], ["numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "", "def", "getWidthFromBB", "(", "bb", ")", ":", "\n", "    ", "return", "(", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "0", "]", "-", "bb", "[", "1", "]", ")", "+", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "3", "]", "-", "bb", "[", "2", "]", ")", ")", "/", "2", "\n", "", "def", "getHeightFromBB", "(", "bb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.getHeightFromBB": [[218, 220], ["numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "getHeightFromBB", "(", "bb", ")", ":", "\n", "    ", "return", "(", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "0", "]", "-", "bb", "[", "3", "]", ")", "+", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "1", "]", "-", "bb", "[", "2", "]", ")", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.getIntersectsCols": [[223, 353], ["float", "float", "range", "len", "len", "forms_graph_pair.getIntersectsCols", "forms_graph_pair.getWidthFromBB", "forms_graph_pair.lineIntersection", "len", "forms_graph_pair.getWidthFromBB", "forms_graph_pair.getWidthFromBB", "forms_graph_pair.lineIntersection", "forms_graph_pair.lineIntersection", "forms_graph_pair.getWidthFromBB", "forms_graph_pair.lineIntersection", "len", "iPoints.append", "iPoints.append", "len", "forms_graph_pair.getIntersectsCols", "iPoints.append", "iPoints.append", "len", "float", "float", "float", "float", "float", "float", "float", "float", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getIntersectsCols", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getWidthFromBB", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.lineIntersection", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getWidthFromBB", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getWidthFromBB", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.lineIntersection", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.lineIntersection", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getWidthFromBB", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.lineIntersection", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getIntersectsCols"], ["", "def", "getIntersectsCols", "(", "line", ",", "cols", ",", "startInd", ",", "threshLine_low", "=", "10", ",", "threshLine_high", "=", "10", ",", "threshLeft", "=", "float", "(", "'inf'", ")", ",", "threshRight", "=", "float", "(", "'inf'", ")", ",", "failed", "=", "0", ")", ":", "\n", "    ", "if", "startInd", ">", "0", ":", "\n", "        ", "startInd", "-=", "1", "\n", "tryBefore", "=", "True", "\n", "", "else", ":", "\n", "        ", "tryBefore", "=", "False", "\n", "", "intersectionThresh", "=", "20", "\n", "intersectionBoth", "=", "True", "\n", "if", "failed", "==", "1", ":", "\n", "        ", "intersectionThresh", "=", "40", "\n", "", "elif", "failed", "==", "2", ":", "\n", "        ", "intersectionBoth", "=", "False", "\n", "", "elif", "failed", ">", "2", ":", "\n", "        ", "return", "[", "]", ",", "0", ",", "tryBefore", "\n", "\n", "#left-most boundary", "\n", "", "p", "=", "None", "\n", "if", "startInd", "==", "0", ":", "\n", "        ", "j", "=", "0", "\n", "for", "lineComponent", "in", "cols", "[", "0", "]", ":", "\n", "###rint('first, j:{}, failed:{}'.format(j,failed))", "\n", "            ", "width", "=", "getWidthFromBB", "(", "lineComponent", ")", "\n", "p", "=", "lineIntersection", "(", "line", ",", "[", "lineComponent", "[", "0", "]", ",", "lineComponent", "[", "3", "]", "]", ",", "\n", "threshA_low", "=", "threshLeft", ",", "#float(\"inf\"), ", "\n", "threshA_high", "=", "width", "/", "2", ",", "\n", "threshB_low", "=", "threshLine_low", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_low", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "threshB_high", "=", "threshLine_high", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_high", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "both", "=", "intersectionBoth", ")", "\n", "j", "+=", "1", "\n", "if", "p", "is", "not", "None", ":", "\n", "                ", "break", "\n", "", "", "if", "p", "is", "None", ":", "\n", "            ", "if", "tryBefore", ":", "\n", "                ", "tryBefore", "=", "False", "\n", "startInd", "=", "1", "\n", "iPoints", "=", "[", "]", "\n", "", "elif", "failed", "==", "2", ":", "\n", "                ", "return", "[", "]", ",", "0", ",", "tryBefore", "\n", "", "else", ":", "\n", "                ", "return", "getIntersectsCols", "(", "line", ",", "cols", ",", "startInd", ",", "threshLine_low", ",", "threshLine_high", ",", "threshLeft", ",", "threshRight", ",", "failed", "+", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "iPoints", "=", "[", "p", "]", "\n", "startInd", "=", "1", "\n", "#tryBefore=False", "\n", "", "", "else", ":", "\n", "        ", "iPoints", "=", "[", "]", "\n", "\n", "", "done", "=", "False", "\n", "i", "=", "startInd", "-", "1", "#in case the for-loop doesn't run at all", "\n", "for", "i", "in", "range", "(", "startInd", "-", "1", ",", "len", "(", "cols", ")", "-", "1", ")", ":", "\n", "#if i==(startInd):", "\n", "#tryBefore=False", "\n", "        ", "avgWidth_ip1", "=", "0", "\n", "for", "lineComponent", "in", "cols", "[", "i", "+", "1", "]", ":", "\n", "            ", "width", "=", "getWidthFromBB", "(", "lineComponent", ")", "\n", "avgWidth_ip1", "+=", "width", "\n", "", "avgWidth_ip1", "/=", "len", "(", "cols", "[", "i", "+", "1", "]", ")", "\n", "avgHWidth_ip1", "=", "avgWidth_ip1", "/", "2", "\n", "pL", "=", "pR", "=", "None", "\n", "avgWidth_i", "=", "0", "\n", "j", "=", "0", "\n", "for", "lineComponent", "in", "cols", "[", "i", "]", ":", "\n", "###rint('L i:{}, j:{}, failed:{}'.format(i,j,failed))", "\n", "            ", "width", "=", "getWidthFromBB", "(", "lineComponent", ")", "\n", "avgWidth_i", "+=", "width", "\n", "pL", "=", "lineIntersection", "(", "line", ",", "lineComponent", "[", "1", ":", "3", "]", ",", "\n", "threshA_low", "=", "width", "/", "2", ",", "\n", "threshA_high", "=", "avgHWidth_ip1", ",", "\n", "threshB_low", "=", "threshLine_low", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_low", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "threshB_high", "=", "threshLine_high", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_high", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "both", "=", "intersectionBoth", ")", "\n", "j", "+=", "1", "\n", "if", "pL", "is", "not", "None", ":", "\n", "                ", "break", "\n", "", "", "avgWidth_i", "/=", "len", "(", "cols", "[", "i", "]", ")", "\n", "avgHWidth_i", "=", "avgWidth_i", "/", "2", "\n", "j", "=", "0", "\n", "for", "lineComponent", "in", "cols", "[", "i", "+", "1", "]", ":", "\n", "###rint('R i:{}, j:{}, failed:{}'.format(i,j,failed))", "\n", "            ", "pR", "=", "lineIntersection", "(", "line", ",", "[", "lineComponent", "[", "0", "]", ",", "lineComponent", "[", "3", "]", "]", ",", "\n", "threshA_low", "=", "avgHWidth_i", ",", "\n", "threshA_high", "=", "width", "/", "2", ",", "\n", "threshB_low", "=", "threshLine_low", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_low", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "threshB_high", "=", "threshLine_high", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_high", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "both", "=", "intersectionBoth", ")", "\n", "j", "+=", "1", "\n", "if", "pR", "is", "not", "None", ":", "\n", "                ", "break", "\n", "#print('pL {}'.format(pL))", "\n", "#print('pR {}'.format(pR))", "\n", "#print('failed {}, i={}, line={}'.format(failed,i,line))", "\n", "#assert((pL is None) == (pR is None))", "\n", "", "", "if", "(", "pL", "is", "None", ")", "and", "(", "pR", "is", "None", ")", ":", "\n", "            ", "if", "tryBefore", "and", "i", "==", "startInd", "-", "1", ":", "\n", "                ", "tryBefore", "=", "False", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "done", "=", "True", "\n", "break", "\n", "", "", "elif", "pL", "is", "None", ":", "\n", "            ", "iPoints", ".", "append", "(", "pR", ")", "\n", "", "elif", "pR", "is", "None", ":", "\n", "            ", "iPoints", ".", "append", "(", "pL", ")", "\n", "", "else", ":", "\n", "            ", "iPoints", ".", "append", "(", "(", "pL", "+", "pR", ")", "/", "2.0", ")", "\n", "", "", "if", "not", "done", ":", "\n", "#right-most boundary", "\n", "        ", "j", "=", "0", "\n", "for", "lineComponent", "in", "cols", "[", "-", "1", "]", ":", "\n", "###rint('last, j:{}, failed:{}'.format(j,failed))", "\n", "            ", "width", "=", "getWidthFromBB", "(", "lineComponent", ")", "\n", "p", "=", "lineIntersection", "(", "line", ",", "lineComponent", "[", "1", ":", "3", "]", ",", "\n", "threshA_low", "=", "width", "/", "2", ",", "\n", "threshA_high", "=", "threshRight", ",", "#float('inf'), ", "\n", "threshB_low", "=", "threshLine_low", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_low", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "threshB_high", "=", "threshLine_high", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_high", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "both", "=", "intersectionBoth", ")", "\n", "j", "+=", "1", "\n", "if", "p", "is", "not", "None", ":", "\n", "                ", "iPoints", ".", "append", "(", "p", ")", "\n", "i", "=", "len", "(", "cols", ")", "+", "1", "\n", "break", "\n", "", "else", ":", "\n", "                ", "i", "=", "len", "(", "cols", ")", "\n", "", "", "", "else", ":", "\n", "        ", "i", "+=", "1", "\n", "", "if", "len", "(", "iPoints", ")", ">", "0", "or", "failed", "==", "2", ":", "\n", "        ", "return", "iPoints", ",", "i", ",", "tryBefore", "\n", "", "else", ":", "\n", "        ", "return", "getIntersectsCols", "(", "line", ",", "cols", ",", "startInd", ",", "threshLine_low", ",", "threshLine_high", ",", "threshLeft", ",", "threshRight", ",", "failed", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.polyIntersect": [[355, 378], ["numpy.array", "numpy.dot", "numpy.dot", "numpy.linalg.norm", "numpy.dot", "max", "min", "numpy.dot", "max", "min"], "function", ["None"], ["", "", "def", "polyIntersect", "(", "poly1", ",", "poly2", ")", ":", "\n", "    ", "prevPoint", "=", "poly1", "[", "-", "1", "]", "\n", "for", "point", "in", "poly1", ":", "\n", "        ", "perpVec", "=", "np", ".", "array", "(", "[", "-", "(", "point", "[", "1", "]", "-", "prevPoint", "[", "1", "]", ")", ",", "point", "[", "0", "]", "-", "prevPoint", "[", "0", "]", "]", ")", "\n", "perpVec", "=", "perpVec", "/", "np", ".", "linalg", ".", "norm", "(", "perpVec", ")", "\n", "\n", "maxPoly1", "=", "np", ".", "dot", "(", "perpVec", ",", "poly1", "[", "0", "]", ")", "\n", "minPoly1", "=", "maxPoly1", "\n", "for", "p", "in", "poly1", ":", "\n", "            ", "p_onLine", "=", "np", ".", "dot", "(", "perpVec", ",", "p", ")", "\n", "maxPoly1", "=", "max", "(", "maxPoly1", ",", "p_onLine", ")", "\n", "minPoly1", "=", "min", "(", "minPoly1", ",", "p_onLine", ")", "\n", "", "maxPoly2", "=", "np", ".", "dot", "(", "perpVec", ",", "poly2", "[", "0", "]", ")", "\n", "minPoly2", "=", "maxPoly2", "\n", "for", "p", "in", "poly2", ":", "\n", "            ", "p_onLine", "=", "np", ".", "dot", "(", "perpVec", ",", "p", ")", "\n", "maxPoly2", "=", "max", "(", "maxPoly2", ",", "p_onLine", ")", "\n", "minPoly2", "=", "min", "(", "minPoly2", ",", "p_onLine", ")", "\n", "\n", "", "if", "(", "maxPoly1", "<", "minPoly2", "or", "minPoly1", ">", "maxPoly2", ")", ":", "\n", "            ", "return", "False", "\n", "", "prevPoint", "=", "point", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.perp": [[379, 384], ["numpy.empty_like"], "function", ["None"], ["", "def", "perp", "(", "a", ")", ":", "\n", "    ", "b", "=", "np", ".", "empty_like", "(", "a", ")", "\n", "b", "[", "0", "]", "=", "-", "a", "[", "1", "]", "\n", "b", "[", "1", "]", "=", "a", "[", "0", "]", "\n", "return", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.lineIntersection": [[385, 419], ["forms_graph_pair.perp", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm", "np.dot.astype", "min", "max", "min", "max", "min", "max", "min", "max"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.perp"], ["", "def", "lineIntersection", "(", "lineA", ",", "lineB", ",", "threshA_low", "=", "10", ",", "threshA_high", "=", "10", ",", "threshB_low", "=", "10", ",", "threshB_high", "=", "10", ",", "both", "=", "False", ")", ":", "\n", "    ", "a1", "=", "lineA", "[", "0", "]", "\n", "a2", "=", "lineA", "[", "1", "]", "\n", "b1", "=", "lineB", "[", "0", "]", "\n", "b2", "=", "lineB", "[", "1", "]", "\n", "da", "=", "a2", "-", "a1", "\n", "db", "=", "b2", "-", "b1", "\n", "dp", "=", "a1", "-", "b1", "\n", "dap", "=", "perp", "(", "da", ")", "\n", "denom", "=", "np", ".", "dot", "(", "dap", ",", "db", ")", "\n", "num", "=", "np", ".", "dot", "(", "dap", ",", "dp", ")", "\n", "point", "=", "(", "num", "/", "denom", ".", "astype", "(", "float", ")", ")", "*", "db", "+", "b1", "\n", "#check if it is on atleast one line segment", "\n", "vecA", "=", "da", "/", "np", ".", "linalg", ".", "norm", "(", "da", ")", "\n", "p_A", "=", "np", ".", "dot", "(", "point", ",", "vecA", ")", "\n", "a1_A", "=", "np", ".", "dot", "(", "a1", ",", "vecA", ")", "\n", "a2_A", "=", "np", ".", "dot", "(", "a2", ",", "vecA", ")", "\n", "\n", "vecB", "=", "db", "/", "np", ".", "linalg", ".", "norm", "(", "db", ")", "\n", "p_B", "=", "np", ".", "dot", "(", "point", ",", "vecB", ")", "\n", "b1_B", "=", "np", ".", "dot", "(", "b1", ",", "vecB", ")", "\n", "b2_B", "=", "np", ".", "dot", "(", "b2", ",", "vecB", ")", "\n", "\n", "###rint('A:{},  B:{}, int p:{}'.format(lineA,lineB,point))", "\n", "###rint('{:.0f}>{:.0f} and {:.0f}<{:.0f}  and/or  {:.0f}>{:.0f} and {:.0f}<{:.0f} = {} {} {}'.format((p_A+threshA_low),(min(a1_A,a2_A)),(p_A-threshA_high),(max(a1_A,a2_A)),(p_B+threshB_low),(min(b1_B,b2_B)),(p_B-threshB_high),(max(b1_B,b2_B)),(p_A+threshA_low>min(a1_A,a2_A) and p_A-threshA_high<max(a1_A,a2_A)),'and' if both else 'or',(p_B+threshB_low>min(b1_B,b2_B) and p_B-threshB_high<max(b1_B,b2_B))))", "\n", "if", "both", ":", "\n", "        ", "if", "(", "(", "p_A", "+", "threshA_low", ">", "min", "(", "a1_A", ",", "a2_A", ")", "and", "p_A", "-", "threshA_high", "<", "max", "(", "a1_A", ",", "a2_A", ")", ")", "and", "\n", "(", "p_B", "+", "threshB_low", ">", "min", "(", "b1_B", ",", "b2_B", ")", "and", "p_B", "-", "threshB_high", "<", "max", "(", "b1_B", ",", "b2_B", ")", ")", ")", ":", "\n", "            ", "return", "point", "\n", "", "", "else", ":", "\n", "        ", "if", "(", "(", "p_A", "+", "threshA_low", ">", "min", "(", "a1_A", ",", "a2_A", ")", "and", "p_A", "-", "threshA_high", "<", "max", "(", "a1_A", ",", "a2_A", ")", ")", "or", "\n", "(", "p_B", "+", "threshB_low", ">", "min", "(", "b1_B", ",", "b2_B", ")", "and", "p_B", "-", "threshB_high", "<", "max", "(", "b1_B", ",", "b2_B", ")", ")", ")", ":", "\n", "            ", "return", "point", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.FormsBoxDetect.__init__": [[94, 217], ["box_detect.BoxDetectDataset.__init__", "list", "list.sort", "open", "json.loads", "groupsToUse.keys", "os.path.join", "f.read", "type", "print", "os.path.join", "os.path.exists", "type", "print", "exit", "os.path.join", "forms_box_detect.FormsBoxDetect.images.append", "groupsToUse.update", "os.path.join.rfind", "os.path.exists", "utils.imread", "utils.resize", "utils.imwrite", "print", "imageName.rfind"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imread", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.resize", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imwrite"], ["def", "__init__", "(", "self", ",", "dirPath", "=", "None", ",", "split", "=", "None", ",", "config", "=", "None", ",", "images", "=", "None", ")", ":", "\n", "        ", "super", "(", "FormsBoxDetect", ",", "self", ")", ".", "__init__", "(", "dirPath", ",", "split", ",", "config", ",", "images", ")", "\n", "#if 'augmentation_params' in config['data_loader']:", "\n", "#    self.augmentation_params=config['augmentation_params']", "\n", "#else:", "\n", "#    self.augmentation_params=None", "\n", "if", "'only_types'", "in", "config", ":", "\n", "            ", "self", ".", "only_types", "=", "config", "[", "'only_types'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "only_types", "=", "None", "\n", "#print( self.only_types)", "\n", "", "if", "'swap_circle'", "in", "config", ":", "\n", "            ", "self", ".", "swapCircle", "=", "config", "[", "'swap_circle'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "swapCircle", "=", "False", "\n", "\n", "", "self", ".", "special_dataset", "=", "config", "[", "'special_dataset'", "]", "if", "'special_dataset'", "in", "config", "else", "None", "\n", "if", "'simple_dataset'", "in", "config", "and", "config", "[", "'simple_dataset'", "]", ":", "\n", "            ", "self", ".", "special_dataset", "=", "'simple'", "\n", "\n", "", "if", "images", "is", "not", "None", ":", "\n", "            ", "self", ".", "images", "=", "images", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "special_dataset", "is", "not", "None", ":", "\n", "                ", "splitFile", "=", "self", ".", "special_dataset", "+", "'_train_valid_test_split.json'", "\n", "", "else", ":", "\n", "                ", "splitFile", "=", "'train_valid_test_split.json'", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dirPath", ",", "splitFile", ")", ")", "as", "f", ":", "\n", "#if split=='valid' or split=='validation':", "\n", "#    trainTest='train'", "\n", "#else:", "\n", "#    trainTest=split", "\n", "                ", "readFile", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "if", "type", "(", "split", ")", "is", "str", ":", "\n", "                    ", "groupsToUse", "=", "readFile", "[", "split", "]", "\n", "", "elif", "type", "(", "split", ")", "is", "list", ":", "\n", "                    ", "groupsToUse", "=", "{", "}", "\n", "for", "spstr", "in", "split", ":", "\n", "                        ", "newGroups", "=", "readFile", "[", "spstr", "]", "\n", "groupsToUse", ".", "update", "(", "newGroups", ")", "\n", "", "", "else", ":", "\n", "                    ", "print", "(", "\"Error, unknown split {}\"", ".", "format", "(", "split", ")", ")", "\n", "exit", "(", ")", "\n", "", "", "self", ".", "images", "=", "[", "]", "\n", "groupNames", "=", "list", "(", "groupsToUse", ".", "keys", "(", ")", ")", "\n", "groupNames", ".", "sort", "(", ")", "\n", "for", "groupName", "in", "groupNames", ":", "\n", "                ", "imageNames", "=", "groupsToUse", "[", "groupName", "]", "\n", "#print('{} {}'.format(groupName, imageNames))", "\n", "#oneonly=False", "\n", "if", "groupName", "in", "SKIP", ":", "\n", "                    ", "print", "(", "'Skipped group {}'", ".", "format", "(", "groupName", ")", ")", "\n", "continue", "\n", "#    if groupName in ONE_DONE:", "\n", "#        oneonly=True", "\n", "#        with open(os.path.join(dirPath,'groups',groupName,'template'+groupName+'.json')) as f:", "\n", "#            T_annotations = json.loads(f.read())", "\n", "#    else:", "\n", "", "for", "imageName", "in", "imageNames", ":", "\n", "#if oneonly and T_annotations['imageFilename']!=imageName:", "\n", "#    #print('skipped {} {}'.format(imageName,groupName))", "\n", "#    continue", "\n", "#elif oneonly:", "\n", "#    print('only {} from {}'.format(imageName,groupName))", "\n", "                    ", "org_path", "=", "os", ".", "path", ".", "join", "(", "dirPath", ",", "'groups'", ",", "groupName", ",", "imageName", ")", "\n", "if", "self", ".", "cache_resized", ":", "\n", "                        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "imageName", ")", "\n", "", "else", ":", "\n", "                        ", "path", "=", "org_path", "\n", "", "jsonPath", "=", "org_path", "[", ":", "org_path", ".", "rfind", "(", "'.'", ")", "]", "+", "'.json'", "\n", "#print(jsonPath)", "\n", "if", "os", ".", "path", ".", "exists", "(", "jsonPath", ")", ":", "\n", "                        ", "rescale", "=", "1.0", "\n", "if", "self", ".", "cache_resized", ":", "\n", "                            ", "rescale", "=", "self", ".", "rescale_range", "[", "1", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                                ", "org_img", "=", "img_f", ".", "imread", "(", "org_path", ")", "\n", "if", "org_img", "is", "None", ":", "\n", "                                    ", "print", "(", "'WARNING, could not read {}'", ".", "format", "(", "org_img", ")", ")", "\n", "continue", "\n", "#target_dim1 = self.rescale_range[1]", "\n", "#target_dim0 = int(org_img.shape[0]/float(org_img.shape[1]) * target_dim1)", "\n", "#resized = img_f.resize(org_img,(target_dim1, target_dim0))", "\n", "", "resized", "=", "img_f", ".", "resize", "(", "org_img", ",", "(", "0", ",", "0", ")", ",", "\n", "fx", "=", "self", ".", "rescale_range", "[", "1", "]", ",", "\n", "fy", "=", "self", ".", "rescale_range", "[", "1", "]", ",", "\n", ")", "\n", "img_f", ".", "imwrite", "(", "path", ",", "resized", ")", "\n", "#rescale = target_dim1/float(org_img.shape[1])", "\n", "#elif self.cache_resized:", "\n", "#print(jsonPath)", "\n", "#with open(jsonPath) as f:", "\n", "#    annotations = json.loads(f.read())", "\n", "#imW = annotations['width']", "\n", "\n", "#target_dim1 = self.rescale_range[1]", "\n", "#rescale = target_dim1/float(imW)", "\n", "#print('addint {}'.format(imageName))", "\n", "", "", "self", ".", "images", ".", "append", "(", "{", "'id'", ":", "imageName", ",", "'imagePath'", ":", "path", ",", "'annotationPath'", ":", "jsonPath", ",", "'rescaled'", ":", "rescale", ",", "'imageName'", ":", "imageName", "[", ":", "imageName", ".", "rfind", "(", "'.'", ")", "]", "}", ")", "\n", "#else:", "\n", "#    print('couldnt find {}'.format(jsonPath))", "\n", "\n", "# with open(path+'.json') as f:", "\n", "#    annotations = json.loads(f.read())", "\n", "#    imH = annotations['height']", "\n", "#    imW = annotations['width']", "\n", "#    #startCount=len(self.instances)", "\n", "#    for bb in annotations['textBBs']:", "\n", "\n", "", "", "", "", "self", ".", "no_blanks", "=", "config", "[", "'no_blanks'", "]", "if", "'no_blanks'", "in", "config", "else", "False", "\n", "self", ".", "use_paired_class", "=", "config", "[", "'use_paired_class'", "]", "if", "'use_paired_class'", "in", "config", "else", "False", "\n", "if", "'no_print_fields'", "in", "config", ":", "\n", "            ", "self", ".", "no_print_fields", "=", "config", "[", "'no_print_fields'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "no_print_fields", "=", "False", "\n", "", "self", ".", "no_graphics", "=", "config", "[", "'no_graphics'", "]", "if", "'no_graphics'", "in", "config", "else", "False", "\n", "self", ".", "only_opposite_pairs", "=", "config", "[", "'only_opposite_pairs'", "]", "if", "'only_opposite_pairs'", "in", "config", "else", "False", "\n", "self", ".", "onlyFormStuff", "=", "False", "\n", "self", ".", "errors", "=", "[", "]", "\n", "self", ".", "classMap", "=", "{", "\n", "\"text\"", ":", "16", ",", "\n", "\"field\"", ":", "17", ",", "\n", "\"blank\"", ":", "18", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.FormsBoxDetect.parseAnn": [[220, 279], ["utils.forms_annotations.fixAnnotations", "annotations[].values", "utils.forms_annotations.getBBWithPoints", "utils.forms_annotations.getStartEndGT", "collections.defaultdict", "annotations[].items", "enumerate", "forms_box_detect.FormsBoxDetect.getTables", "utils.forms_annotations.getResponseBBIdList_", "annotations[].items", "print", "print", "forms_box_detect.FormsBoxDetect.errors.append"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.fixAnnotations", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getBBWithPoints", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getStartEndGT", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.FormsBoxDetect.getTables", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getResponseBBIdList_"], ["", "def", "parseAnn", "(", "self", ",", "np_img", ",", "annotations", ",", "s", ",", "imageName", ")", ":", "\n", "        ", "fieldBBs", "=", "annotations", "[", "'fieldBBs'", "]", "\n", "fixAnnotations", "(", "self", ",", "annotations", ")", "\n", "\n", "full_bbs", "=", "annotations", "[", "'byId'", "]", ".", "values", "(", ")", "\n", "\n", "bbs", "=", "getBBWithPoints", "(", "full_bbs", ",", "s", ",", "useBlankClass", "=", "(", "not", "self", ".", "no_blanks", ")", ",", "usePairedClass", "=", "self", ".", "use_paired_class", ")", "\n", "numClasses", "=", "bbs", ".", "shape", "[", "2", "]", "-", "16", "\n", "#field_bbs = getBBWithPoints(annotations['fieldBBs'],s)", "\n", "#bbs = np.concatenate([text_bbs,field_bbs],axis=1) #has batch dim", "\n", "start_of_line", ",", "end_of_line", "=", "getStartEndGT", "(", "full_bbs", ",", "s", ")", "\n", "try", ":", "\n", "            ", "table_points", ",", "table_pixels", "=", "self", ".", "getTables", "(", "\n", "fieldBBs", ",", "\n", "s", ",", "\n", "np_img", ".", "shape", "[", "0", "]", ",", "\n", "np_img", ".", "shape", "[", "1", "]", ",", "\n", "annotations", "[", "'pairs'", "]", ")", "\n", "", "except", "Exception", "as", "inst", ":", "\n", "            ", "table_points", "=", "None", "\n", "table_pixels", "=", "None", "\n", "if", "imageName", "not", "in", "self", ".", "errors", ":", "\n", "                ", "print", "(", "inst", ")", "\n", "print", "(", "'Table error on: '", "+", "imageName", ")", "\n", "self", ".", "errors", ".", "append", "(", "imageName", ")", "\n", "\n", "##print('getStartEndGt: '+str(timeit.default_timer()-tic))", "\n", "\n", "", "", "pixel_gt", "=", "table_pixels", "\n", "\n", "line_gts", "=", "{", "\n", "\"start_of_line\"", ":", "start_of_line", ",", "\n", "\"end_of_line\"", ":", "end_of_line", "\n", "}", "\n", "point_gts", "=", "{", "\n", "\"table_points\"", ":", "table_points", "\n", "}", "\n", "\n", "numNeighbors", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "for", "id", ",", "bb", "in", "annotations", "[", "'byId'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "onlyFormStuff", "or", "(", "'paired'", "in", "bb", "and", "bb", "[", "'paired'", "]", ")", ":", "\n", "                ", "responseIds", "=", "getResponseBBIdList_", "(", "self", ",", "id", ",", "annotations", ")", "\n", "for", "id2", ",", "bb2", "in", "annotations", "[", "'byId'", "]", ".", "items", "(", ")", ":", "\n", "                    ", "if", "id", "!=", "id2", ":", "\n", "                        ", "pair", "=", "id2", "in", "responseIds", "\n", "if", "pair", ":", "\n", "                            ", "numNeighbors", "[", "id", "]", "+=", "1", "\n", "", "", "", "", "", "numNeighbors", "=", "[", "numNeighbors", "[", "bb", "[", "'id'", "]", "]", "for", "bb", "in", "full_bbs", "]", "\n", "#if self.pred_neighbors:", "\n", "#    bbs = torch.cat(bbs,", "\n", "idToIndex", "=", "{", "}", "\n", "for", "i", ",", "bb", "in", "enumerate", "(", "full_bbs", ")", ":", "\n", "            ", "idToIndex", "[", "bb", "[", "'id'", "]", "]", "=", "i", "\n", "", "pairs", "=", "[", "(", "idToIndex", "[", "id1", "]", ",", "idToIndex", "[", "id2", "]", ")", "for", "id1", ",", "id2", "in", "annotations", "[", "'pairs'", "]", "]", "\n", "\n", "\n", "\n", "\n", "return", "bbs", ",", "line_gts", ",", "point_gts", ",", "pixel_gt", ",", "numClasses", ",", "numNeighbors", ",", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.FormsBoxDetect.getTables": [[325, 704], ["collections.defaultdict", "collections.defaultdict", "groups.items", "numpy.zeros", "numpy.empty", "collections.defaultdict", "combIds.items", "table.items", "rows.sort", "cols.sort", "range", "len", "list", "list.sort", "math.ceil", "set", "set", "forms_box_detect.FormsBoxDetect.getTables.addPaired"], "methods", ["None"], ["", "def", "getTables", "(", "self", ",", "bbs", ",", "s", ",", "sH", ",", "sW", ",", "selfPairs", ")", ":", "\n", "#find which rows and cols are part of the same tables", "\n", "        ", "groups", "=", "{", "}", "\n", "#groupsT={}", "\n", "groupId", "=", "0", "\n", "lookup", "=", "defaultdict", "(", "lambda", ":", "None", ")", "\n", "#print('num bbs {}'.format(len(bbs)))", "\n", "intersect", "=", "defaultdict", "(", "list", ")", "\n", "for", "bb", "in", "bbs", ":", "\n", "            ", "if", "bb", "[", "'type'", "]", "==", "'fieldCol'", ":", "# and bb['type'] != 'fieldRow':", "\n", "                ", "myGroup", "=", "lookup", "[", "bb", "[", "'id'", "]", "]", "\n", "\n", "\n", "for", "bb2", "in", "bbs", ":", "\n", "                    ", "if", "bb2", "[", "'type'", "]", "==", "'fieldRow'", ":", "\n", "                        ", "if", "polyIntersect", "(", "bb", "[", "'poly_points'", "]", ",", "bb2", "[", "'poly_points'", "]", ")", ":", "\n", "                            ", "intersect", "[", "bb", "[", "'id'", "]", "]", ".", "append", "(", "bb2", "[", "'id'", "]", ")", "\n", "\n", "otherGroup", "=", "lookup", "[", "bb2", "[", "'id'", "]", "]", "\n", "#if otherGroup is None:", "\n", "#    print('intersection! {}:{},  {}:{}'.format(bb['id'],bb['poly_points'],bb2['id'],bb2['poly_points']))", "\n", "if", "otherGroup", "is", "not", "None", ":", "\n", "                                ", "if", "myGroup", "is", "None", ":", "\n", "                                    ", "groups", "[", "otherGroup", "]", ".", "append", "(", "bb", ")", "\n", "#groupsT[otherGroup].append(bb['id'])", "\n", "lookup", "[", "bb", "[", "'id'", "]", "]", "=", "otherGroup", "\n", "myGroup", "=", "otherGroup", "\n", "", "elif", "myGroup", "!=", "otherGroup", ":", "\n", "#merge groups", "\n", "                                    ", "for", "ele", "in", "groups", "[", "otherGroup", "]", ":", "\n", "                                        ", "lookup", "[", "ele", "[", "'id'", "]", "]", "=", "myGroup", "\n", "", "groups", "[", "myGroup", "]", "+=", "groups", "[", "otherGroup", "]", "\n", "#groupsT[myGroup] +=  groupsT[otherGroup]", "\n", "del", "groups", "[", "otherGroup", "]", "\n", "#del groupsT[otherGroup]", "\n", "", "", "elif", "myGroup", "is", "None", ":", "\n", "                                ", "myGroup", "=", "str", "(", "groupId", ")", "\n", "groupId", "+=", "1", "\n", "groups", "[", "myGroup", "]", "=", "[", "bb", ",", "bb2", "]", "\n", "#groupsT[myGroup] = [bb['id'],bb2['id']]", "\n", "lookup", "[", "bb", "[", "'id'", "]", "]", "=", "myGroup", "\n", "lookup", "[", "bb2", "[", "'id'", "]", "]", "=", "myGroup", "\n", "", "else", ":", "\n", "                                ", "groups", "[", "myGroup", "]", ".", "append", "(", "bb2", ")", "\n", "#groupsT[myGroup].append(bb2['id'])", "\n", "lookup", "[", "bb2", "[", "'id'", "]", "]", "=", "myGroup", "\n", "#print(bb['id']+'  '+bb2['id'])", "\n", "#print('{}  {}'.format(myGroup,otherGroup))", "\n", "#print(groupsT)", "\n", "#input(\"Press Enter to continue...\")", "\n", "#now we check if a group needs split into two tables (horizontally)", "\n", "", "", "", "", "", "", "final_groups", "=", "[", "]", "\n", "for", "gid", ",", "group", "in", "groups", ".", "items", "(", ")", ":", "\n", "            ", "rowsOfCol", "=", "defaultdict", "(", "list", ")", "\n", "colOfX", "=", "{", "}", "\n", "for", "bbCol", "in", "group", ":", "\n", "                ", "if", "bbCol", "[", "'type'", "]", "==", "'fieldCol'", ":", "\n", "                    ", "colOfX", "[", "bbCol", "[", "'poly_points'", "]", "[", "0", "]", "[", "0", "]", "]", "=", "bbCol", "[", "'id'", "]", "\n", "for", "bbRow", "in", "group", ":", "\n", "                        ", "if", "bbRow", "[", "'type'", "]", "==", "'fieldRow'", "and", "bbRow", "[", "'id'", "]", "in", "intersect", "[", "bbCol", "[", "'id'", "]", "]", ":", "\n", "                            ", "rowsOfCol", "[", "bbCol", "[", "'id'", "]", "]", ".", "append", "(", "bbRow", "[", "'id'", "]", ")", "\n", "\n", "\n", "\n", "", "", "", "", "if", "len", "(", "rowsOfCol", ")", ">", "4", ":", "\n", "                ", "xs", "=", "list", "(", "colOfX", ".", "keys", "(", ")", ")", "\n", "xs", ".", "sort", "(", ")", "\n", "\n", "numColAnchors", "=", "math", ".", "ceil", "(", "len", "(", "rowsOfCol", ")", "*", "0.25", ")", "\n", "leftAnchors", "=", "[", "colOfX", "[", "x", "]", "for", "x", "in", "xs", "[", "0", ":", "numColAnchors", "]", "]", "\n", "rightAnchors", "=", "[", "colOfX", "[", "x", "]", "for", "x", "in", "xs", "[", "-", "numColAnchors", ":", "]", "]", "\n", "leftRows", "=", "[", "]", "\n", "for", "col", "in", "leftAnchors", ":", "\n", "                    ", "leftRows", "+=", "rowsOfCol", "[", "col", "]", "\n", "", "rightRows", "=", "[", "]", "\n", "for", "col", "in", "rightAnchors", ":", "\n", "                    ", "rightRows", "+=", "rowsOfCol", "[", "col", "]", "\n", "", "leftRows", "=", "set", "(", "leftRows", ")", "\n", "rightRows", "=", "set", "(", "rightRows", ")", "\n", "\n", "def", "addPaired", "(", "s", ",", "pairs", ")", ":", "\n", "                    ", "for", "pair", "in", "pairs", ":", "\n", "                        ", "if", "pair", "[", "0", "]", "in", "s", ":", "\n", "                            ", "s", ".", "add", "(", "pair", "[", "1", "]", ")", "\n", "", "elif", "pair", "[", "1", "]", "in", "s", ":", "\n", "                            ", "s", ".", "add", "(", "pair", "[", "0", "]", ")", "\n", "", "", "", "addPaired", "(", "leftRows", ",", "selfPairs", ")", "\n", "addPaired", "(", "rightRows", ",", "selfPairs", ")", "\n", "\n", "intersected", "=", "leftRows", ".", "intersection", "(", "rightRows", ")", "\n", "if", "len", "(", "intersected", ")", "==", "0", ":", "\n", "#split", "\n", "                    ", "loseRowCounts", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "leftGroup", "=", "[", "]", "#list(leftRows)", "\n", "rightGroup", "=", "[", "]", "#list(rightRows)", "\n", "for", "bb", "in", "group", ":", "\n", "                        ", "if", "bb", "[", "'type'", "]", "==", "'fieldCol'", ":", "\n", "                            ", "count", "=", "0", "\n", "addLose", "=", "[", "]", "\n", "for", "rowId", "in", "rowsOfCol", "[", "bb", "[", "'id'", "]", "]", ":", "\n", "                                ", "if", "rowId", "in", "leftRows", ":", "\n", "                                    ", "count", "-=", "1", "\n", "", "elif", "rowId", "in", "rightRows", ":", "\n", "                                    ", "count", "+=", "1", "\n", "", "else", ":", "\n", "                                    ", "addLose", ".", "append", "(", "rowId", ")", "\n", "", "", "if", "count", "<", "0", ":", "\n", "                                ", "leftGroup", ".", "append", "(", "bb", ")", "\n", "for", "id", "in", "addLose", ":", "\n", "                                    ", "loseRowCounts", "[", "id", "]", "-=", "1", "\n", "", "", "elif", "count", ">", "0", ":", "\n", "                                ", "rightGroup", ".", "append", "(", "bb", ")", "\n", "for", "id", "in", "addLose", ":", "\n", "                                    ", "loseRowCounts", "[", "id", "]", "+=", "1", "\n", "", "", "else", ":", "\n", "#error, this col is ambigous", "\n", "                                ", "raise", "Exception", "(", "\"ambig col\"", ",", "bb", ")", "\n", "", "", "if", "bb", "[", "'type'", "]", "==", "'fieldRow'", ":", "\n", "                            ", "if", "bb", "[", "'id'", "]", "in", "leftRows", ":", "\n", "                                ", "leftGroup", ".", "append", "(", "bb", ")", "\n", "", "elif", "bb", "[", "'id'", "]", "in", "rightRows", ":", "\n", "                                ", "rightGroup", ".", "append", "(", "bb", ")", "\n", "", "else", ":", "\n", "                                ", "loseRowCounts", "[", "bb", "[", "'id'", "]", "]", "+=", "0", "\n", "", "", "", "for", "bb", "in", "group", ":", "\n", "                        ", "if", "bb", "[", "'id'", "]", "in", "loseRowCounts", ":", "\n", "                            ", "if", "loseRowCounts", "[", "bb", "[", "'id'", "]", "]", "<", "0", ":", "\n", "                                ", "leftGroup", ".", "append", "(", "bb", ")", "\n", "", "elif", "loseRowCounts", "[", "bb", "[", "'id'", "]", "]", ">", "0", ":", "\n", "                                ", "rightGroup", ".", "append", "(", "bb", ")", "\n", "", "else", ":", "\n", "                                ", "raise", "Exception", "(", "\"ambig row\"", ",", "bb", ")", "\n", "", "", "", "final_groups", "+=", "[", "leftGroup", ",", "rightGroup", "]", "\n", "", "else", ":", "\n", "                    ", "final_groups", ".", "append", "(", "group", ")", "\n", "", "", "else", ":", "\n", "                ", "final_groups", ".", "append", "(", "group", ")", "\n", "#elif len(intersect)<len(leftRows):", "\n", "#    #error, we have a row spannign left to right, but some dont", "\n", "\n", "#print(groups)", "\n", "#parse table bbs for intersection points", "\n", "", "", "intersectionPoints", "=", "[", "]", "\n", "pixelMap", "=", "np", ".", "zeros", "(", "(", "sH", ",", "sW", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "#print('num tables {}'.format(len(groups)))", "\n", "for", "tableBBs", "in", "final_groups", ":", "\n", "#print('tableBBs {}'.format(len(tableBBs)))", "\n", "            ", "table", "=", "{", "}", "\n", "for", "bb", "in", "tableBBs", ":", "\n", "                ", "bb", "[", "'poly_points'", "]", "=", "np", ".", "array", "(", "bb", "[", "'poly_points'", "]", ")", "\n", "table", "[", "bb", "[", "'id'", "]", "]", "=", "bb", "\n", "", "rows", "=", "[", "]", "\n", "cols", "=", "[", "]", "\n", "\n", "#I assume that rows and columns may be represented by multiple BBs", "\n", "combIds", "=", "{", "}", "\n", "idToComb", "=", "{", "}", "\n", "curComb", "=", "0", "\n", "#first we figure out what these are (they are paired)", "\n", "for", "pair", "in", "selfPairs", ":", "\n", "                ", "if", "pair", "[", "0", "]", "in", "table", "and", "pair", "[", "1", "]", "in", "table", "and", "table", "[", "pair", "[", "0", "]", "]", "[", "'type'", "]", "==", "table", "[", "pair", "[", "1", "]", "]", "[", "'type'", "]", ":", "\n", "                    ", "if", "pair", "[", "0", "]", "in", "idToComb", ":", "\n", "                        ", "pair0Comb", "=", "idToComb", "[", "pair", "[", "0", "]", "]", "\n", "if", "pair", "[", "1", "]", "in", "idToComb", ":", "\n", "                            ", "pair1Comb", "=", "idToComb", "[", "pair", "[", "1", "]", "]", "\n", "if", "pair0Comb", "!=", "pair1Comb", ":", "\n", "#merge", "\n", "#print('merge {}:{} and {}:{}'.format(pair0Comb,combIds[pair0Comb],pair1Comb,combIds[pair0Comb]))", "\n", "                                ", "combIds", "[", "pair0Comb", "]", "+=", "combIds", "[", "pair1Comb", "]", "\n", "for", "id", "in", "combIds", "[", "pair1Comb", "]", ":", "\n", "                                    ", "idToComb", "[", "id", "]", "=", "pair0Comb", "\n", "", "del", "combIds", "[", "pair1Comb", "]", "\n", "", "", "else", ":", "\n", "                            ", "combIds", "[", "pair0Comb", "]", ".", "append", "(", "pair", "[", "1", "]", ")", "\n", "idToComb", "[", "pair", "[", "1", "]", "]", "=", "pair0Comb", "\n", "", "", "elif", "pair", "[", "1", "]", "in", "idToComb", ":", "\n", "                        ", "pair1Comb", "=", "idToComb", "[", "pair", "[", "1", "]", "]", "\n", "combIds", "[", "pair1Comb", "]", ".", "append", "(", "pair", "[", "0", "]", ")", "\n", "idToComb", "[", "pair", "[", "0", "]", "]", "=", "pair1Comb", "\n", "", "else", ":", "\n", "                        ", "combIds", "[", "curComb", "]", "=", "[", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", "]", "\n", "idToComb", "[", "pair", "[", "0", "]", "]", "=", "curComb", "\n", "idToComb", "[", "pair", "[", "1", "]", "]", "=", "curComb", "\n", "curComb", "+=", "1", "\n", "#print(combIds)", "\n", "#print(idToComb)", "\n", "#sort them in order (left->right or top->botton) and add them to our lists", "\n", "", "", "", "for", "_", ",", "ids", "in", "combIds", ".", "items", "(", ")", ":", "\n", "                    ", "typ", "=", "table", "[", "ids", "[", "0", "]", "]", "[", "'type'", "]", "\n", "toApp", "=", "[", "]", "\n", "for", "id", "in", "ids", ":", "\n", "                        ", "toApp", ".", "append", "(", "table", "[", "id", "]", "[", "'poly_points'", "]", ")", "\n", "img_f", ".", "fillConvexPoly", "(", "pixelMap", "[", ":", ",", ":", ",", "0", "]", ",", "(", "table", "[", "id", "]", "[", "'poly_points'", "]", "*", "s", ")", ".", "astype", "(", "int", ")", ",", "1", ")", "\n", "del", "table", "[", "id", "]", "\n", "\n", "", "if", "typ", "==", "'fieldRow'", ":", "\n", "                        ", "toApp", ".", "sort", "(", "key", "=", "lambda", "a", ":", "a", "[", "0", ",", "0", "]", ")", "#sort horz by top-left point", "\n", "rows", ".", "append", "(", "toApp", ")", "\n", "", "else", ":", "\n", "                        ", "toApp", ".", "sort", "(", "key", "=", "lambda", "a", ":", "a", "[", "0", ",", "1", "]", ")", "#sort vert by top-left point", "\n", "cols", ".", "append", "(", "toApp", ")", "\n", "\n", "#add the single BB rows and columns", "\n", "", "", "for", "id", ",", "bb", "in", "table", ".", "items", "(", ")", ":", "\n", "#npBB = np.array(bb['poly_points'])", "\n", "                ", "if", "bb", "[", "'type'", "]", "==", "'fieldRow'", ":", "\n", "                    ", "rows", ".", "append", "(", "[", "bb", "[", "'poly_points'", "]", "]", ")", "\n", "", "else", ":", "\n", "                    ", "cols", ".", "append", "(", "[", "bb", "[", "'poly_points'", "]", "]", ")", "\n", "#print(npBB*s)", "\n", "", "img_f", ".", "fillConvexPoly", "(", "pixelMap", "[", ":", ",", ":", ",", "0", "]", ",", "(", "bb", "[", "'poly_points'", "]", "*", "s", ")", ".", "astype", "(", "int", ")", ",", "1", ")", "\n", "\n", "", "rows", ".", "sort", "(", "key", "=", "lambda", "a", ":", "a", "[", "0", "]", "[", "0", ",", "1", "]", ")", "#sort vertically by top-left point", "\n", "cols", ".", "sort", "(", "key", "=", "lambda", "a", ":", "a", "[", "0", "]", "[", "0", ",", "0", "]", ")", "#sort horizontally by top-left point", "\n", "#print (len(rows))", "\n", "#print (len(cols))", "\n", "#for each row seperator line (top and bottom lines of BBs) find intersecting column sep lines", "\n", "#we must iterate over all the components of each row", "\n", "#the very top boundary (and bottom) must be handeled specially since they don't have two lines", "\n", "nextInd", "=", "0", "\n", "j", "=", "0", "\n", "for", "lineComponent", "in", "rows", "[", "0", "]", ":", "\n", "###rint('row start, comp:{}'.format(j))", "\n", "                ", "height", "=", "getHeightFromBB", "(", "lineComponent", ")", "\n", "if", "j", "==", "0", ":", "\n", "                    ", "distFromPrev", "=", "getWidthFromBB", "(", "lineComponent", ")", "/", "2", "#float('inf')", "\n", "", "else", ":", "\n", "                    ", "distFromPrev", "=", "np", ".", "linalg", ".", "norm", "(", "lineComponent", "[", "0", "]", "-", "rows", "[", "0", "]", "[", "j", "-", "1", "]", "[", "1", "]", ")", "\n", "", "if", "j", "==", "len", "(", "rows", "[", "0", "]", ")", "-", "1", ":", "\n", "                    ", "distToNext", "=", "getWidthFromBB", "(", "lineComponent", ")", "/", "2", "#float('inf')", "\n", "", "else", ":", "\n", "                    ", "distToNext", "=", "np", ".", "linalg", ".", "norm", "(", "lineComponent", "[", "1", "]", "-", "rows", "[", "0", "]", "[", "j", "+", "1", "]", "[", "0", "]", ")", "\n", "", "somePoints", ",", "nextInd", ",", "before", "=", "getIntersectsCols", "(", "lineComponent", "[", "0", ":", "2", "]", ",", "\n", "cols", ",", "\n", "nextInd", ",", "\n", "threshLine_low", "=", "height", "/", "2", ",", "#float('inf'),", "\n", "threshLine_high", "=", "height", "/", "2", ",", "\n", "threshLeft", "=", "distFromPrev", ",", "\n", "threshRight", "=", "distToNext", ")", "\n", "if", "before", ":", "\n", "                    ", "intersectionPoints", "[", "-", "1", "]", "=", "(", "intersectionPoints", "[", "-", "1", "]", "+", "somePoints", "[", "0", "]", "*", "s", ")", "/", "2", "\n", "for", "p", "in", "somePoints", "[", "1", ":", "]", ":", "\n", "                        ", "intersectionPoints", ".", "append", "(", "s", "*", "p", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "p", "in", "somePoints", ":", "\n", "                        ", "intersectionPoints", ".", "append", "(", "s", "*", "p", ")", "\n", "", "", "j", "+=", "1", "\n", "", "for", "i", "in", "range", "(", "len", "(", "rows", ")", "-", "1", ")", ":", "\n", "                ", "avgHHeight_ip1", "=", "0", "\n", "for", "lineComponent", "in", "rows", "[", "i", "+", "1", "]", ":", "\n", "                    ", "height", "=", "getHeightFromBB", "(", "lineComponent", ")", "\n", "avgHHeight_ip1", "+=", "height", "/", "2", "\n", "", "avgHHeight_ip1", "/=", "len", "(", "rows", "[", "i", "+", "1", "]", ")", "\n", "nextInd", "=", "0", "\n", "pointsU", "=", "[", "]", "#points from the bottom line of the BB above the seperator", "\n", "avgHHeight_i", "=", "0", "\n", "j", "=", "0", "\n", "#get the upper points (bottom of above BB)", "\n", "for", "lineComponent", "in", "rows", "[", "i", "]", ":", "\n", "###rint('row U {}, comp:{}'.format(i,j))", "\n", "                    ", "height", "=", "getHeightFromBB", "(", "lineComponent", ")", "\n", "avgHHeight_i", "+=", "height", "/", "2", "\n", "if", "j", "==", "0", ":", "\n", "                        ", "distFromPrev", "=", "getWidthFromBB", "(", "lineComponent", ")", "/", "2", "#float('inf')", "\n", "", "else", ":", "\n", "                        ", "distFromPrev", "=", "np", ".", "linalg", ".", "norm", "(", "lineComponent", "[", "3", "]", "-", "rows", "[", "i", "]", "[", "j", "-", "1", "]", "[", "2", "]", ")", "\n", "", "if", "j", "==", "len", "(", "rows", "[", "i", "]", ")", "-", "1", ":", "\n", "                        ", "distToNext", "=", "getWidthFromBB", "(", "lineComponent", ")", "/", "2", "#float('inf')", "\n", "", "else", ":", "\n", "                        ", "distToNext", "=", "np", ".", "linalg", ".", "norm", "(", "lineComponent", "[", "2", "]", "-", "rows", "[", "i", "]", "[", "j", "+", "1", "]", "[", "3", "]", ")", "\n", "", "somePoints", ",", "nextInd", ",", "before", "=", "getIntersectsCols", "(", "lineComponent", "[", "2", ":", "4", "]", ",", "\n", "cols", ",", "\n", "nextInd", ",", "\n", "threshLine_low", "=", "height", "/", "2", ",", "\n", "threshLine_high", "=", "avgHHeight_ip1", ",", "\n", "threshLeft", "=", "distFromPrev", ",", "\n", "threshRight", "=", "distToNext", ")", "\n", "if", "before", ":", "\n", "                        ", "if", "len", "(", "pointsU", ")", ">", "0", ":", "\n", "                            ", "pointsU", "=", "pointsU", "[", ":", "-", "1", "]", "+", "[", "(", "pointsU", "[", "-", "1", "]", "+", "somePoints", "[", "0", "]", ")", "/", "2", "]", "+", "somePoints", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                            ", "pointsU", "=", "somePoints", "[", "1", ":", "]", "\n", "", "", "else", ":", "\n", "                        ", "pointsU", "+=", "somePoints", "\n", "", "j", "+=", "1", "\n", "", "avgHHeight_i", "/=", "len", "(", "rows", "[", "i", "]", ")", "\n", "pointsL", "=", "[", "]", "#points from the top line of the BB below the seperator", "\n", "nextInd", "=", "0", "\n", "j", "=", "0", "\n", "#get lower points (top of below BB)", "\n", "for", "lineComponent", "in", "rows", "[", "i", "+", "1", "]", ":", "\n", "###rint('row L {}, comp:{}'.format(i,j))", "\n", "                    ", "height", "=", "getHeightFromBB", "(", "lineComponent", ")", "\n", "if", "j", "==", "0", ":", "\n", "                        ", "distFromPrev", "=", "getWidthFromBB", "(", "lineComponent", ")", "/", "2", "#float('inf')", "\n", "", "else", ":", "\n", "                        ", "distFromPrev", "=", "np", ".", "linalg", ".", "norm", "(", "lineComponent", "[", "0", "]", "-", "rows", "[", "i", "+", "1", "]", "[", "j", "-", "1", "]", "[", "1", "]", ")", "\n", "", "if", "j", "==", "len", "(", "rows", "[", "i", "+", "1", "]", ")", "-", "1", ":", "\n", "                        ", "distToNext", "=", "getWidthFromBB", "(", "lineComponent", ")", "/", "2", "#float('inf')", "\n", "", "else", ":", "\n", "                        ", "distToNext", "=", "np", ".", "linalg", ".", "norm", "(", "lineComponent", "[", "1", "]", "-", "rows", "[", "i", "+", "1", "]", "[", "j", "+", "1", "]", "[", "0", "]", ")", "\n", "", "somePoints", ",", "nextInd", ",", "before", "=", "getIntersectsCols", "(", "lineComponent", "[", "0", ":", "2", "]", ",", "\n", "cols", ",", "\n", "nextInd", ",", "\n", "threshLine_low", "=", "avgHHeight_i", ",", "\n", "threshLine_high", "=", "height", "/", "2", ",", "\n", "threshLeft", "=", "distFromPrev", ",", "\n", "threshRight", "=", "distToNext", ")", "\n", "if", "before", ":", "\n", "                        ", "if", "len", "(", "pointsL", ")", ">", "0", ":", "\n", "                            ", "pointsL", "=", "pointsL", "[", ":", "-", "1", "]", "+", "[", "(", "pointsL", "[", "-", "1", "]", "+", "somePoints", "[", "0", "]", ")", "/", "2", "]", "+", "somePoints", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                            ", "pointsL", "=", "somePoints", "[", "1", ":", "]", "\n", "", "", "else", ":", "\n", "                        ", "pointsL", "+=", "somePoints", "\n", "", "j", "+=", "1", "\n", "#print(i)", "\n", "#print(pointsU)", "\n", "#print(pointsL)", "\n", "", "if", "len", "(", "pointsU", ")", "!=", "len", "(", "pointsL", ")", ":", "\n", "                    ", "raise", "Exception", "(", "i", ",", "pointsU", ",", "pointsL", ")", "\n", "#average the upper and lower points (and scale them)", "\n", "", "for", "pi", "in", "range", "(", "len", "(", "pointsU", ")", ")", ":", "\n", "                    ", "intersectionPoints", ".", "append", "(", "s", "*", "(", "pointsU", "[", "pi", "]", "+", "pointsL", "[", "pi", "]", ")", "/", "2.0", ")", "\n", "\n", "#special handeling of bottom boundary", "\n", "", "", "nextInd", "=", "0", "\n", "j", "=", "0", "\n", "for", "lineComponent", "in", "rows", "[", "-", "1", "]", ":", "\n", "###rint('row end, comp:{}'.format(j))", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "distFromPrev", "=", "getWidthFromBB", "(", "lineComponent", ")", "/", "2", "#float('inf')", "\n", "", "else", ":", "\n", "                    ", "distFromPrev", "=", "np", ".", "linalg", ".", "norm", "(", "lineComponent", "[", "3", "]", "-", "rows", "[", "-", "1", "]", "[", "j", "-", "1", "]", "[", "2", "]", ")", "\n", "", "if", "j", "==", "len", "(", "rows", "[", "-", "1", "]", ")", "-", "1", ":", "\n", "                    ", "distToNext", "=", "getWidthFromBB", "(", "lineComponent", ")", "/", "2", "#float('inf')", "\n", "", "else", ":", "\n", "                    ", "distToNext", "=", "np", ".", "linalg", ".", "norm", "(", "lineComponent", "[", "2", "]", "-", "rows", "[", "-", "1", "]", "[", "j", "+", "1", "]", "[", "3", "]", ")", "\n", "", "somePoints", ",", "nextInd", ",", "before", "=", "getIntersectsCols", "(", "lineComponent", "[", "2", ":", "4", "]", ",", "\n", "cols", ",", "\n", "nextInd", ",", "\n", "threshLine_low", "=", "height", "/", "2", ",", "\n", "threshLine_high", "=", "height", "/", "2", ",", "#float('inf'),", "\n", "threshLeft", "=", "distFromPrev", ",", "\n", "threshRight", "=", "distToNext", ")", "\n", "j", "+=", "1", "\n", "if", "before", ":", "\n", "                    ", "intersectionPoints", "[", "-", "1", "]", "=", "(", "intersectionPoints", "[", "-", "1", "]", "+", "somePoints", "[", "0", "]", "*", "s", ")", "/", "2", "\n", "for", "p", "in", "somePoints", "[", "1", ":", "]", ":", "\n", "                        ", "intersectionPoints", ".", "append", "(", "s", "*", "p", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "p", "in", "somePoints", ":", "\n", "                        ", "intersectionPoints", ".", "append", "(", "s", "*", "p", ")", "\n", "\n", "#rowLines=[ [rows[0][0], rows[0][1]] ]", "\n", "#for i in range(len(rows)-1):", "\n", "#    rowLines.append( [(rows[i][3]+rows[i+1][0])/2, (rows[i][2]+rows[i+1][1])/2] )", "\n", "#rowLines.append( [rows[-1][3], rows[-1][2]] )", "\n", "\n", "#colLines=[ [cols[0][0], cols[0][3]] ]", "\n", "#for i in range(len(cols)-1):", "\n", "#    colLines.append( [(cols[i][1]+cols[i+1][0])/2, (cols[i][2]+cols[i+1][3])/2] )", "\n", "#colLines.append( [cols[-1][1], cols[-1][2]] )", "\n", "\n", "#for rowLine in rowLines:", "\n", "#    for colLine in colLines:", "\n", "#        p = lineIntersection(rowLine,colLine)", "\n", "#        if p is not None:", "\n", "#            #print('{} {} = {}'.format(rowLine,colLine,p))", "\n", "#            intersectionPoints.append((p[0]*s,p[1]*s))", "\n", "\n", "", "", "", "", "intersectionPointsM", "=", "np", ".", "empty", "(", "(", "1", ",", "len", "(", "intersectionPoints", ")", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "j", "=", "0", "\n", "for", "x", ",", "y", "in", "intersectionPoints", ":", "\n", "            ", "intersectionPointsM", "[", "0", ",", "j", ",", "0", "]", "=", "x", "\n", "intersectionPointsM", "[", "0", ",", "j", ",", "1", "]", "=", "y", "\n", "j", "+=", "1", "\n", "\n", "", "return", "intersectionPointsM", ",", "pixelMap", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.FormsBoxDetect.cluster": [[705, 908], ["numpy.concatenate", "range", "numpy.zeros", "range", "utils.imshow", "utils.waitKey", "utils.forms_annotations.fixAnnotations", "range", "range", "open", "out.write", "print", "numpy.array", "numpy.array", "open", "json.loads", "utils.forms_annotations.getBBWithPoints", "numpy.cos", "numpy.sin", "numpy.stack", "numpy.concatenate.append", "numpy.random.randint", "len", "print", "numpy.stack", "print", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "normed_difference.argmin", "normed_difference.min().mean", "range", "numpy.random.uniform().tolist", "toWrite.append", "utils.line", "utils.line", "utils.line", "utils.line", "outPath.format", "json.dumps", "math.cos", "math.sin", "math.sin", "math.cos", "annFile.read", "numpy.random.uniform", "annotations[].values", "utils.forms_annotations.convertBBs().numpy", "numpy.concatenate", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "float", "outPath.format", "math.cos", "math.sin", "math.cos", "math.sin", "numpy.linspace", "numpy.stack.append", "numpy.linspace", "numpy.stack.append", "normed_difference.min", "selected.sum", "numpy.random.uniform", "h.item", "w.item", "rot.item", "int", "int", "int", "int", "int", "int", "int", "int", "utils.forms_annotations.convertBBs", "numpy.stack.append", "forms_box_detect.FormsBoxDetect.cluster.makePointsAndRects"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.fixAnnotations", "home.repos.pwc.inspect_result.herobd_FUDGE.None.FUNSD_extract_lines.write", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getBBWithPoints", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.convertBBs"], ["", "def", "cluster", "(", "self", ",", "k", ",", "sample_count", ",", "outPath", ")", ":", "\n", "        ", "def", "makePointsAndRects", "(", "h", ",", "w", ",", "r", "=", "None", ")", ":", "\n", "            ", "if", "r", "is", "None", ":", "\n", "                ", "return", "np", ".", "array", "(", "[", "-", "w", "/", "2.0", ",", "0", ",", "w", "/", "2.0", ",", "0", ",", "0", ",", "-", "h", "/", "2.0", ",", "0", ",", "h", "/", "2.0", ",", "0", ",", "0", ",", "0", ",", "h", ",", "w", "]", ")", "\n", "", "else", ":", "\n", "                ", "lx", "=", "-", "math", ".", "cos", "(", "r", ")", "*", "w", "\n", "ly", "=", "-", "math", ".", "sin", "(", "r", ")", "*", "w", "\n", "rx", "=", "math", ".", "cos", "(", "r", ")", "*", "w", "\n", "ry", "=", "math", ".", "sin", "(", "r", ")", "*", "w", "\n", "tx", "=", "math", ".", "sin", "(", "r", ")", "*", "h", "\n", "ty", "=", "-", "math", ".", "cos", "(", "r", ")", "*", "h", "\n", "bx", "=", "-", "math", ".", "sin", "(", "r", ")", "*", "h", "\n", "by", "=", "math", ".", "cos", "(", "r", ")", "*", "h", "\n", "return", "np", ".", "array", "(", "[", "lx", ",", "ly", ",", "rx", ",", "ry", ",", "tx", ",", "ty", ",", "bx", ",", "by", ",", "0", ",", "0", ",", "r", ",", "h", ",", "w", "]", ")", "\n", "", "", "meanH", "=", "62.42", "\n", "stdH", "=", "87.31", "\n", "meanW", "=", "393.03", "\n", "stdW", "=", "533.53", "\n", "ratios", "=", "[", "4.0", ",", "7.18", ",", "11.0", ",", "15.0", ",", "19.0", ",", "27.0", "]", "\n", "pointsAndRects", "=", "[", "]", "\n", "for", "inst", "in", "self", ".", "images", ":", "\n", "            ", "annotationPath", "=", "inst", "[", "'annotationPath'", "]", "\n", "#rescaled = inst['rescaled']", "\n", "with", "open", "(", "annotationPath", ")", "as", "annFile", ":", "\n", "                ", "annotations", "=", "json", ".", "loads", "(", "annFile", ".", "read", "(", ")", ")", "\n", "", "fixAnnotations", "(", "self", ",", "annotations", ")", "\n", "for", "i", "in", "range", "(", "sample_count", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "s", "=", "(", "self", ".", "rescale_range", "[", "0", "]", "+", "self", ".", "rescale_range", "[", "1", "]", ")", "/", "2", "\n", "", "else", ":", "\n", "                    ", "s", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "rescale_range", "[", "0", "]", ",", "self", ".", "rescale_range", "[", "1", "]", ")", "\n", "#partial_rescale = s/rescaled", "\n", "", "bbs", "=", "getBBWithPoints", "(", "annotations", "[", "'byId'", "]", ".", "values", "(", ")", ",", "s", ")", "\n", "#field_bbs = self.getBBGT(annotations['fieldBBs'],s,fields=True)", "\n", "#bbs = np.concatenate([text_bbs,field_bbs],axis=1)", "\n", "bbs", "=", "convertBBs", "(", "bbs", ",", "self", ".", "rotate", ",", "2", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "cos_rot", "=", "np", ".", "cos", "(", "bbs", "[", ":", ",", "2", "]", ")", "\n", "sin_rot", "=", "np", ".", "sin", "(", "bbs", "[", ":", ",", "2", "]", ")", "\n", "p_left_x", "=", "-", "cos_rot", "*", "bbs", "[", ":", ",", "4", "]", "\n", "p_left_y", "=", "-", "sin_rot", "*", "bbs", "[", ":", ",", "4", "]", "\n", "p_right_x", "=", "cos_rot", "*", "bbs", "[", ":", ",", "4", "]", "\n", "p_right_y", "=", "sin_rot", "*", "bbs", "[", ":", ",", "4", "]", "\n", "p_top_x", "=", "sin_rot", "*", "bbs", "[", ":", ",", "3", "]", "\n", "p_top_y", "=", "-", "cos_rot", "*", "bbs", "[", ":", ",", "3", "]", "\n", "p_bot_x", "=", "-", "sin_rot", "*", "bbs", "[", ":", ",", "3", "]", "\n", "p_bot_y", "=", "cos_rot", "*", "bbs", "[", ":", ",", "3", "]", "\n", "points", "=", "np", ".", "stack", "(", "[", "p_left_x", ",", "p_left_y", ",", "p_right_x", ",", "p_right_y", ",", "p_top_x", ",", "p_top_y", ",", "p_bot_x", ",", "p_bot_y", "]", ",", "axis", "=", "1", ")", "\n", "pointsAndRects", ".", "append", "(", "np", ".", "concatenate", "(", "[", "points", ",", "bbs", "[", ":", ",", ":", "5", "]", "]", ",", "axis", "=", "1", ")", ")", "\n", "", "", "pointsAndRects", "=", "np", ".", "concatenate", "(", "pointsAndRects", ",", "axis", "=", "0", ")", "\n", "#all_points = pointsAndRects[:,0:8]", "\n", "#all_heights = pointsAndRects[:,11]", "\n", "#all_widths = pointsAndRects[:,12]", "\n", "\n", "bestDistsFromMean", "=", "None", "\n", "for", "attempt", "in", "range", "(", "20", "if", "k", ">", "0", "else", "1", ")", ":", "\n", "            ", "if", "k", ">", "0", ":", "\n", "                ", "randomIndexes", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "pointsAndRects", ".", "shape", "[", "0", "]", ",", "(", "k", ")", ")", "\n", "means", "=", "pointsAndRects", "[", "randomIndexes", "]", "\n", "", "else", ":", "\n", "#minH=5", "\n", "#minW=5", "\n", "                ", "means", "=", "[", "]", "\n", "\n", "##smaller than mean", "\n", "#for step in range(5):", "\n", "#    height = minH + (meanH-minH)*(step/5.0)", "\n", "#    width = minW + (meanW-minW)*(step/5.0)", "\n", "#    for ratio in ratios:", "\n", "#        means.append(makePointsAndRects(height,ratio*height))", "\n", "#        means.append(makePointsAndRects(width/ratio,width))", "\n", "#for stddev in range(0,5):", "\n", "#    for step in range(5-stddev):", "\n", "#        height = meanH + stddev*stdH + stdH*(step/(5.0-stddev))", "\n", "#        width = meanW + stddev*stdW + stdW*(step/(5.0-stddev))", "\n", "#        for ratio in ratios:", "\n", "#            means.append(makePointsAndRects(height,ratio*height))", "\n", "#            means.append(makePointsAndRects(width/ratio,width))", "\n", "rots", "=", "[", "0", ",", "math", ".", "pi", "/", "2", ",", "math", ".", "pi", ",", "1.5", "*", "math", ".", "pi", "]", "\n", "if", "self", ".", "rotate", ":", "\n", "                    ", "for", "height", "in", "np", ".", "linspace", "(", "15", ",", "200", ",", "num", "=", "4", ")", ":", "\n", "                        ", "for", "width", "in", "np", ".", "linspace", "(", "30", ",", "1200", ",", "num", "=", "4", ")", ":", "\n", "                            ", "for", "rot", "in", "rots", ":", "\n", "                                ", "means", ".", "append", "(", "makePointsAndRects", "(", "height", ",", "width", ",", "rot", ")", ")", "\n", "#long boxes", "\n", "", "", "", "for", "width", "in", "np", ".", "linspace", "(", "1600", ",", "4000", ",", "num", "=", "3", ")", ":", "\n", "#for height in np.linspace(30,100,num=3):", "\n", "#    for rot in rots:", "\n", "#        means.append(makePointsAndRects(height,width,rot))", "\n", "                        ", "for", "rot", "in", "rots", ":", "\n", "                            ", "means", ".", "append", "(", "makePointsAndRects", "(", "50", ",", "width", ",", "rot", ")", ")", "\n", "", "", "", "else", ":", "\n", "#rotated boxes", "\n", "#for height in np.linspace(13,300,num=4):", "\n", "                    ", "for", "height", "in", "np", ".", "linspace", "(", "13", ",", "300", ",", "num", "=", "3", ")", ":", "\n", "                        ", "means", ".", "append", "(", "makePointsAndRects", "(", "height", ",", "20", ")", ")", "\n", "#general boxes", "\n", "#for height in np.linspace(15,200,num=4):", "\n", "#for width in np.linspace(30,1200,num=4):", "\n", "", "for", "height", "in", "np", ".", "linspace", "(", "15", ",", "200", ",", "num", "=", "2", ")", ":", "\n", "                        ", "for", "width", "in", "np", ".", "linspace", "(", "30", ",", "1200", ",", "num", "=", "3", ")", ":", "\n", "                            ", "means", ".", "append", "(", "makePointsAndRects", "(", "height", ",", "width", ")", ")", "\n", "#long boxes", "\n", "", "", "for", "width", "in", "np", ".", "linspace", "(", "1600", ",", "4000", ",", "num", "=", "3", ")", ":", "\n", "#for height in np.linspace(30,100,num=3):", "\n", "#    means.append(makePointsAndRects(height,width))", "\n", "                        ", "means", ".", "append", "(", "makePointsAndRects", "(", "50", ",", "width", ")", ")", "\n", "\n", "", "", "k", "=", "len", "(", "means", ")", "\n", "print", "(", "'K: {}'", ".", "format", "(", "k", ")", ")", "\n", "means", "=", "np", ".", "stack", "(", "means", ",", "axis", "=", "0", ")", "\n", "#pointsAndRects [0:p_left_x, 1:p_left_y,2:p_right_x,3:p_right_y,4:p_top_x,5:p_top_y,6:p_bot_x,7:p_bot_y, 8:xc, 9:yc, 10:rot, 11:h, 12:w", "\n", "", "cluster_centers", "=", "means", "\n", "distsFromMean", "=", "None", "\n", "prevDistsFromMean", "=", "None", "\n", "for", "iteration", "in", "range", "(", "100000", ")", ":", "#intended to break out", "\n", "                ", "print", "(", "'attempt:{}, bestDistsFromMean:{}, iteration:{}, bestDistsFromMean:{}'", ".", "format", "(", "attempt", ",", "bestDistsFromMean", ",", "iteration", ",", "prevDistsFromMean", ")", ",", "end", "=", "'\\r'", ")", "\n", "#means_points = means[:,0:8]", "\n", "#means_heights = means[:,11]", "\n", "#means_widths = means[:,12]", "\n", "# = groups = assignGroups(means,pointsAndRects)", "\n", "expanded_all_points", "=", "pointsAndRects", "[", ":", ",", "None", ",", "0", ":", "8", "]", "\n", "expanded_all_heights", "=", "pointsAndRects", "[", ":", ",", "None", ",", "11", "]", "\n", "expanded_all_widths", "=", "pointsAndRects", "[", ":", ",", "None", ",", "12", "]", "\n", "\n", "expanded_means_points", "=", "means", "[", "None", ",", ":", ",", "0", ":", "8", "]", "\n", "expanded_means_heights", "=", "means", "[", "None", ",", ":", ",", "11", "]", "\n", "expanded_means_widths", "=", "means", "[", "None", ",", ":", ",", "12", "]", "\n", "\n", "#expanded_all_points = expanded_all_points.expand(all_points.shape[0], all_points.shape[1], means_points.shape[1], all_points.shape[2])", "\n", "expanded_all_points", "=", "np", ".", "tile", "(", "expanded_all_points", ",", "(", "1", ",", "means", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "expanded_all_heights", "=", "np", ".", "tile", "(", "expanded_all_heights", ",", "(", "1", ",", "means", ".", "shape", "[", "0", "]", ")", ")", "\n", "expanded_all_widths", "=", "np", ".", "tile", "(", "expanded_all_widths", ",", "(", "1", ",", "means", ".", "shape", "[", "0", "]", ")", ")", "\n", "#expanded_means_points = expanded_means_points.expand(means_points.shape[0], all_points.shape[0], means_points.shape[0], means_points.shape[2])", "\n", "expanded_means_points", "=", "np", ".", "tile", "(", "expanded_means_points", ",", "(", "pointsAndRects", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ")", "\n", "expanded_means_heights", "=", "np", ".", "tile", "(", "expanded_means_heights", ",", "(", "pointsAndRects", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "expanded_means_widths", "=", "np", ".", "tile", "(", "expanded_means_widths", ",", "(", "pointsAndRects", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "point_deltas", "=", "(", "expanded_all_points", "-", "expanded_means_points", ")", "\n", "#avg_heights = ((expanded_means_heights+expanded_all_heights)/2)", "\n", "#avg_widths = ((expanded_means_widths+expanded_all_widths)/2)", "\n", "avg_heights", "=", "avg_widths", "=", "(", "expanded_means_heights", "+", "expanded_all_heights", "+", "expanded_means_widths", "+", "expanded_all_widths", ")", "/", "4", "\n", "#print point_deltas", "\n", "\n", "normed_difference", "=", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "point_deltas", "[", ":", ",", ":", ",", "0", ":", "2", "]", ",", "2", ",", "2", ")", "/", "avg_widths", "+", "\n", "np", ".", "linalg", ".", "norm", "(", "point_deltas", "[", ":", ",", ":", ",", "2", ":", "4", "]", ",", "2", ",", "2", ")", "/", "avg_widths", "+", "\n", "np", ".", "linalg", ".", "norm", "(", "point_deltas", "[", ":", ",", ":", ",", "4", ":", "6", "]", ",", "2", ",", "2", ")", "/", "avg_heights", "+", "\n", "np", ".", "linalg", ".", "norm", "(", "point_deltas", "[", ":", ",", ":", ",", "6", ":", "8", "]", ",", "2", ",", "2", ")", "/", "avg_heights", "\n", ")", "**", "2", "\n", "#print normed_difference", "\n", "#import pdb; pdb.set_trace()", "\n", "\n", "groups", "=", "normed_difference", ".", "argmin", "(", "1", ")", "#this should list the mean (index) for each element of all", "\n", "distsFromMean", "=", "normed_difference", ".", "min", "(", "1", ")", ".", "mean", "(", ")", "\n", "if", "prevDistsFromMean", "is", "not", "None", "and", "distsFromMean", ">=", "prevDistsFromMean", ":", "\n", "                    ", "break", "\n", "", "prevDistsFromMean", "=", "distsFromMean", "\n", "\n", "#means = computeMeans(groups,pointsAndRects)", "\n", "#means = np.zeros(k,13)", "\n", "for", "ki", "in", "range", "(", "k", ")", ":", "\n", "                    ", "selected", "=", "(", "groups", "==", "ki", ")", "[", ":", ",", "None", "]", "\n", "numSel", "=", "float", "(", "selected", ".", "sum", "(", ")", ")", "\n", "if", "(", "numSel", "==", "0", ")", ":", "\n", "                        ", "break", "\n", "", "means", "[", "ki", ",", ":", "]", "=", "(", "pointsAndRects", "*", "np", ".", "tile", "(", "selected", ",", "(", "1", ",", "13", ")", ")", ")", ".", "sum", "(", "0", ")", "/", "numSel", "\n", "", "", "if", "bestDistsFromMean", "is", "None", "or", "distsFromMean", "<", "bestDistsFromMean", ":", "\n", "                ", "bestDistsFromMean", "=", "distsFromMean", "\n", "cluster_centers", "=", "means", "\n", "#cluster_centers=means", "\n", "", "", "dH", "=", "600", "\n", "dW", "=", "3000", "\n", "draw", "=", "np", ".", "zeros", "(", "[", "dH", ",", "dW", ",", "3", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "toWrite", "=", "[", "]", "\n", "final_k", "=", "k", "\n", "for", "ki", "in", "range", "(", "k", ")", ":", "\n", "            ", "pop", "=", "(", "groups", "==", "ki", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "pop", ">", "2", ":", "\n", "                ", "color", "=", "np", ".", "random", ".", "uniform", "(", "0.2", ",", "1", ",", "3", ")", ".", "tolist", "(", ")", "\n", "#d=math.sqrt(mean[ki,11]**2 + mean[ki,12]**2)", "\n", "#theta = math.atan2(mean[ki,11],mean[ki,12]) + mean[ki,10]", "\n", "h", "=", "cluster_centers", "[", "ki", ",", "11", "]", "\n", "w", "=", "cluster_centers", "[", "ki", ",", "12", "]", "\n", "rot", "=", "cluster_centers", "[", "ki", ",", "10", "]", "\n", "toWrite", ".", "append", "(", "{", "'height'", ":", "h", ".", "item", "(", ")", ",", "'width'", ":", "w", ".", "item", "(", ")", ",", "'rot'", ":", "rot", ".", "item", "(", ")", ",", "'popularity'", ":", "pop", "}", ")", "\n", "tr", "=", "(", "int", "(", "math", ".", "cos", "(", "rot", ")", "*", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "h", ")", "+", "dW", "//", "2", ",", "int", "(", "math", ".", "sin", "(", "rot", ")", "*", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "h", ")", "+", "dH", "//", "2", ")", "\n", "tl", "=", "(", "int", "(", "math", ".", "cos", "(", "rot", ")", "*", "-", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "h", ")", "+", "dW", "//", "2", ",", "int", "(", "math", ".", "sin", "(", "rot", ")", "*", "-", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "h", ")", "+", "dH", "//", "2", ")", "\n", "br", "=", "(", "int", "(", "math", ".", "cos", "(", "rot", ")", "*", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "-", "h", ")", "+", "dW", "//", "2", ",", "int", "(", "math", ".", "sin", "(", "rot", ")", "*", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "-", "h", ")", "+", "dH", "//", "2", ")", "\n", "bl", "=", "(", "int", "(", "math", ".", "cos", "(", "rot", ")", "*", "-", "w", "-", "math", ".", "sin", "(", "rot", ")", "*", "-", "h", ")", "+", "dW", "//", "2", ",", "int", "(", "math", ".", "sin", "(", "rot", ")", "*", "-", "w", "+", "math", ".", "cos", "(", "rot", ")", "*", "-", "h", ")", "+", "dH", "//", "2", ")", "\n", "\n", "img_f", ".", "line", "(", "draw", ",", "tl", ",", "tr", ",", "color", ")", "\n", "img_f", ".", "line", "(", "draw", ",", "tr", ",", "br", ",", "color", ")", "\n", "img_f", ".", "line", "(", "draw", ",", "br", ",", "bl", ",", "color", ")", "\n", "img_f", ".", "line", "(", "draw", ",", "bl", ",", "tl", ",", "color", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "final_k", "-=", "1", "\n", "\n", "#print(toWrite)", "\n", "", "", "with", "open", "(", "outPath", ".", "format", "(", "final_k", ")", ",", "'w'", ")", "as", "out", ":", "\n", "            ", "out", ".", "write", "(", "json", ".", "dumps", "(", "toWrite", ")", ")", "\n", "print", "(", "'saved '", "+", "outPath", ".", "format", "(", "final_k", ")", ")", "\n", "", "img_f", ".", "imshow", "(", "'clusters'", ",", "draw", ")", "\n", "img_f", ".", "waitKey", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.polyIntersect": [[22, 45], ["numpy.array", "numpy.dot", "numpy.dot", "numpy.linalg.norm", "numpy.dot", "max", "min", "numpy.dot", "max", "min"], "function", ["None"], ["def", "polyIntersect", "(", "poly1", ",", "poly2", ")", ":", "\n", "    ", "prevPoint", "=", "poly1", "[", "-", "1", "]", "\n", "for", "point", "in", "poly1", ":", "\n", "        ", "perpVec", "=", "np", ".", "array", "(", "[", "-", "(", "point", "[", "1", "]", "-", "prevPoint", "[", "1", "]", ")", ",", "point", "[", "0", "]", "-", "prevPoint", "[", "0", "]", "]", ")", "\n", "perpVec", "=", "perpVec", "/", "np", ".", "linalg", ".", "norm", "(", "perpVec", ")", "\n", "\n", "maxPoly1", "=", "np", ".", "dot", "(", "perpVec", ",", "poly1", "[", "0", "]", ")", "\n", "minPoly1", "=", "maxPoly1", "\n", "for", "p", "in", "poly1", ":", "\n", "            ", "p_onLine", "=", "np", ".", "dot", "(", "perpVec", ",", "p", ")", "\n", "maxPoly1", "=", "max", "(", "maxPoly1", ",", "p_onLine", ")", "\n", "minPoly1", "=", "min", "(", "minPoly1", ",", "p_onLine", ")", "\n", "", "maxPoly2", "=", "np", ".", "dot", "(", "perpVec", ",", "poly2", "[", "0", "]", ")", "\n", "minPoly2", "=", "maxPoly2", "\n", "for", "p", "in", "poly2", ":", "\n", "            ", "p_onLine", "=", "np", ".", "dot", "(", "perpVec", ",", "p", ")", "\n", "maxPoly2", "=", "max", "(", "maxPoly2", ",", "p_onLine", ")", "\n", "minPoly2", "=", "min", "(", "minPoly2", ",", "p_onLine", ")", "\n", "\n", "", "if", "(", "maxPoly1", "<", "minPoly2", "or", "minPoly1", ">", "maxPoly2", ")", ":", "\n", "            ", "return", "False", "\n", "", "prevPoint", "=", "point", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.perp": [[46, 51], ["numpy.empty_like"], "function", ["None"], ["", "def", "perp", "(", "a", ")", ":", "\n", "    ", "b", "=", "np", ".", "empty_like", "(", "a", ")", "\n", "b", "[", "0", "]", "=", "-", "a", "[", "1", "]", "\n", "b", "[", "1", "]", "=", "a", "[", "0", "]", "\n", "return", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.lineIntersection": [[52, 86], ["forms_box_detect.perp", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm", "np.dot.astype", "min", "max", "min", "max", "min", "max", "min", "max"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.perp"], ["", "def", "lineIntersection", "(", "lineA", ",", "lineB", ",", "threshA_low", "=", "10", ",", "threshA_high", "=", "10", ",", "threshB_low", "=", "10", ",", "threshB_high", "=", "10", ",", "both", "=", "False", ")", ":", "\n", "    ", "a1", "=", "lineA", "[", "0", "]", "\n", "a2", "=", "lineA", "[", "1", "]", "\n", "b1", "=", "lineB", "[", "0", "]", "\n", "b2", "=", "lineB", "[", "1", "]", "\n", "da", "=", "a2", "-", "a1", "\n", "db", "=", "b2", "-", "b1", "\n", "dp", "=", "a1", "-", "b1", "\n", "dap", "=", "perp", "(", "da", ")", "\n", "denom", "=", "np", ".", "dot", "(", "dap", ",", "db", ")", "\n", "num", "=", "np", ".", "dot", "(", "dap", ",", "dp", ")", "\n", "point", "=", "(", "num", "/", "denom", ".", "astype", "(", "float", ")", ")", "*", "db", "+", "b1", "\n", "#check if it is on atleast one line segment", "\n", "vecA", "=", "da", "/", "np", ".", "linalg", ".", "norm", "(", "da", ")", "\n", "p_A", "=", "np", ".", "dot", "(", "point", ",", "vecA", ")", "\n", "a1_A", "=", "np", ".", "dot", "(", "a1", ",", "vecA", ")", "\n", "a2_A", "=", "np", ".", "dot", "(", "a2", ",", "vecA", ")", "\n", "\n", "vecB", "=", "db", "/", "np", ".", "linalg", ".", "norm", "(", "db", ")", "\n", "p_B", "=", "np", ".", "dot", "(", "point", ",", "vecB", ")", "\n", "b1_B", "=", "np", ".", "dot", "(", "b1", ",", "vecB", ")", "\n", "b2_B", "=", "np", ".", "dot", "(", "b2", ",", "vecB", ")", "\n", "\n", "###rint('A:{},  B:{}, int p:{}'.format(lineA,lineB,point))", "\n", "###rint('{:.0f}>{:.0f} and {:.0f}<{:.0f}  and/or  {:.0f}>{:.0f} and {:.0f}<{:.0f} = {} {} {}'.format((p_A+threshA_low),(min(a1_A,a2_A)),(p_A-threshA_high),(max(a1_A,a2_A)),(p_B+threshB_low),(min(b1_B,b2_B)),(p_B-threshB_high),(max(b1_B,b2_B)),(p_A+threshA_low>min(a1_A,a2_A) and p_A-threshA_high<max(a1_A,a2_A)),'and' if both else 'or',(p_B+threshB_low>min(b1_B,b2_B) and p_B-threshB_high<max(b1_B,b2_B))))", "\n", "if", "both", ":", "\n", "        ", "if", "(", "(", "p_A", "+", "threshA_low", ">", "min", "(", "a1_A", ",", "a2_A", ")", "and", "p_A", "-", "threshA_high", "<", "max", "(", "a1_A", ",", "a2_A", ")", ")", "and", "\n", "(", "p_B", "+", "threshB_low", ">", "min", "(", "b1_B", ",", "b2_B", ")", "and", "p_B", "-", "threshB_high", "<", "max", "(", "b1_B", ",", "b2_B", ")", ")", ")", ":", "\n", "            ", "return", "point", "\n", "", "", "else", ":", "\n", "        ", "if", "(", "(", "p_A", "+", "threshA_low", ">", "min", "(", "a1_A", ",", "a2_A", ")", "and", "p_A", "-", "threshA_high", "<", "max", "(", "a1_A", ",", "a2_A", ")", ")", "or", "\n", "(", "p_B", "+", "threshB_low", ">", "min", "(", "b1_B", ",", "b2_B", ")", "and", "p_B", "-", "threshB_high", "<", "max", "(", "b1_B", ",", "b2_B", ")", ")", ")", ":", "\n", "            ", "return", "point", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getWidthFromBB": [[910, 912], ["numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "", "def", "getWidthFromBB", "(", "bb", ")", ":", "\n", "    ", "return", "(", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "0", "]", "-", "bb", "[", "1", "]", ")", "+", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "3", "]", "-", "bb", "[", "2", "]", ")", ")", "/", "2", "\n", "", "def", "getHeightFromBB", "(", "bb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getHeightFromBB": [[912, 914], ["numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "getHeightFromBB", "(", "bb", ")", ":", "\n", "    ", "return", "(", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "0", "]", "-", "bb", "[", "3", "]", ")", "+", "np", ".", "linalg", ".", "norm", "(", "bb", "[", "1", "]", "-", "bb", "[", "2", "]", ")", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getIntersectsCols": [[917, 1047], ["float", "float", "range", "len", "len", "forms_box_detect.getIntersectsCols", "forms_box_detect.getWidthFromBB", "forms_box_detect.lineIntersection", "len", "forms_box_detect.getWidthFromBB", "forms_box_detect.getWidthFromBB", "forms_box_detect.lineIntersection", "forms_box_detect.lineIntersection", "forms_box_detect.getWidthFromBB", "forms_box_detect.lineIntersection", "len", "iPoints.append", "iPoints.append", "len", "forms_box_detect.getIntersectsCols", "iPoints.append", "iPoints.append", "len", "float", "float", "float", "float", "float", "float", "float", "float", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getIntersectsCols", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getWidthFromBB", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.lineIntersection", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getWidthFromBB", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getWidthFromBB", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.lineIntersection", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.lineIntersection", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getWidthFromBB", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.lineIntersection", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_box_detect.getIntersectsCols"], ["", "def", "getIntersectsCols", "(", "line", ",", "cols", ",", "startInd", ",", "threshLine_low", "=", "10", ",", "threshLine_high", "=", "10", ",", "threshLeft", "=", "float", "(", "'inf'", ")", ",", "threshRight", "=", "float", "(", "'inf'", ")", ",", "failed", "=", "0", ")", ":", "\n", "    ", "if", "startInd", ">", "0", ":", "\n", "        ", "startInd", "-=", "1", "\n", "tryBefore", "=", "True", "\n", "", "else", ":", "\n", "        ", "tryBefore", "=", "False", "\n", "", "intersectionThresh", "=", "20", "\n", "intersectionBoth", "=", "True", "\n", "if", "failed", "==", "1", ":", "\n", "        ", "intersectionThresh", "=", "40", "\n", "", "elif", "failed", "==", "2", ":", "\n", "        ", "intersectionBoth", "=", "False", "\n", "", "elif", "failed", ">", "2", ":", "\n", "        ", "return", "[", "]", ",", "0", ",", "tryBefore", "\n", "\n", "#left-most boundary", "\n", "", "p", "=", "None", "\n", "if", "startInd", "==", "0", ":", "\n", "        ", "j", "=", "0", "\n", "for", "lineComponent", "in", "cols", "[", "0", "]", ":", "\n", "###rint('first, j:{}, failed:{}'.format(j,failed))", "\n", "            ", "width", "=", "getWidthFromBB", "(", "lineComponent", ")", "\n", "p", "=", "lineIntersection", "(", "line", ",", "[", "lineComponent", "[", "0", "]", ",", "lineComponent", "[", "3", "]", "]", ",", "\n", "threshA_low", "=", "threshLeft", ",", "#float(\"inf\"), ", "\n", "threshA_high", "=", "width", "/", "2", ",", "\n", "threshB_low", "=", "threshLine_low", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_low", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "threshB_high", "=", "threshLine_high", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_high", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "both", "=", "intersectionBoth", ")", "\n", "j", "+=", "1", "\n", "if", "p", "is", "not", "None", ":", "\n", "                ", "break", "\n", "", "", "if", "p", "is", "None", ":", "\n", "            ", "if", "tryBefore", ":", "\n", "                ", "tryBefore", "=", "False", "\n", "startInd", "=", "1", "\n", "iPoints", "=", "[", "]", "\n", "", "elif", "failed", "==", "2", ":", "\n", "                ", "return", "[", "]", ",", "0", ",", "tryBefore", "\n", "", "else", ":", "\n", "                ", "return", "getIntersectsCols", "(", "line", ",", "cols", ",", "startInd", ",", "threshLine_low", ",", "threshLine_high", ",", "threshLeft", ",", "threshRight", ",", "failed", "+", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "iPoints", "=", "[", "p", "]", "\n", "startInd", "=", "1", "\n", "#tryBefore=False", "\n", "", "", "else", ":", "\n", "        ", "iPoints", "=", "[", "]", "\n", "\n", "", "done", "=", "False", "\n", "i", "=", "startInd", "-", "1", "#in case the for-loop doesn't run at all", "\n", "for", "i", "in", "range", "(", "startInd", "-", "1", ",", "len", "(", "cols", ")", "-", "1", ")", ":", "\n", "#if i==(startInd):", "\n", "#tryBefore=False", "\n", "        ", "avgWidth_ip1", "=", "0", "\n", "for", "lineComponent", "in", "cols", "[", "i", "+", "1", "]", ":", "\n", "            ", "width", "=", "getWidthFromBB", "(", "lineComponent", ")", "\n", "avgWidth_ip1", "+=", "width", "\n", "", "avgWidth_ip1", "/=", "len", "(", "cols", "[", "i", "+", "1", "]", ")", "\n", "avgHWidth_ip1", "=", "avgWidth_ip1", "/", "2", "\n", "pL", "=", "pR", "=", "None", "\n", "avgWidth_i", "=", "0", "\n", "j", "=", "0", "\n", "for", "lineComponent", "in", "cols", "[", "i", "]", ":", "\n", "###rint('L i:{}, j:{}, failed:{}'.format(i,j,failed))", "\n", "            ", "width", "=", "getWidthFromBB", "(", "lineComponent", ")", "\n", "avgWidth_i", "+=", "width", "\n", "pL", "=", "lineIntersection", "(", "line", ",", "lineComponent", "[", "1", ":", "3", "]", ",", "\n", "threshA_low", "=", "width", "/", "2", ",", "\n", "threshA_high", "=", "avgHWidth_ip1", ",", "\n", "threshB_low", "=", "threshLine_low", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_low", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "threshB_high", "=", "threshLine_high", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_high", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "both", "=", "intersectionBoth", ")", "\n", "j", "+=", "1", "\n", "if", "pL", "is", "not", "None", ":", "\n", "                ", "break", "\n", "", "", "avgWidth_i", "/=", "len", "(", "cols", "[", "i", "]", ")", "\n", "avgHWidth_i", "=", "avgWidth_i", "/", "2", "\n", "j", "=", "0", "\n", "for", "lineComponent", "in", "cols", "[", "i", "+", "1", "]", ":", "\n", "###rint('R i:{}, j:{}, failed:{}'.format(i,j,failed))", "\n", "            ", "pR", "=", "lineIntersection", "(", "line", ",", "[", "lineComponent", "[", "0", "]", ",", "lineComponent", "[", "3", "]", "]", ",", "\n", "threshA_low", "=", "avgHWidth_i", ",", "\n", "threshA_high", "=", "width", "/", "2", ",", "\n", "threshB_low", "=", "threshLine_low", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_low", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "threshB_high", "=", "threshLine_high", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_high", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "both", "=", "intersectionBoth", ")", "\n", "j", "+=", "1", "\n", "if", "pR", "is", "not", "None", ":", "\n", "                ", "break", "\n", "#print('pL {}'.format(pL))", "\n", "#print('pR {}'.format(pR))", "\n", "#print('failed {}, i={}, line={}'.format(failed,i,line))", "\n", "#assert((pL is None) == (pR is None))", "\n", "", "", "if", "(", "pL", "is", "None", ")", "and", "(", "pR", "is", "None", ")", ":", "\n", "            ", "if", "tryBefore", "and", "i", "==", "startInd", "-", "1", ":", "\n", "                ", "tryBefore", "=", "False", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "done", "=", "True", "\n", "break", "\n", "", "", "elif", "pL", "is", "None", ":", "\n", "            ", "iPoints", ".", "append", "(", "pR", ")", "\n", "", "elif", "pR", "is", "None", ":", "\n", "            ", "iPoints", ".", "append", "(", "pL", ")", "\n", "", "else", ":", "\n", "            ", "iPoints", ".", "append", "(", "(", "pL", "+", "pR", ")", "/", "2.0", ")", "\n", "", "", "if", "not", "done", ":", "\n", "#right-most boundary", "\n", "        ", "j", "=", "0", "\n", "for", "lineComponent", "in", "cols", "[", "-", "1", "]", ":", "\n", "###rint('last, j:{}, failed:{}'.format(j,failed))", "\n", "            ", "width", "=", "getWidthFromBB", "(", "lineComponent", ")", "\n", "p", "=", "lineIntersection", "(", "line", ",", "lineComponent", "[", "1", ":", "3", "]", ",", "\n", "threshA_low", "=", "width", "/", "2", ",", "\n", "threshA_high", "=", "threshRight", ",", "#float('inf'), ", "\n", "threshB_low", "=", "threshLine_low", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_low", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "threshB_high", "=", "threshLine_high", "if", "j", "==", "len", "(", "cols", "[", "0", "]", ")", "-", "1", "or", "threshLine_high", "!=", "float", "(", "'inf'", ")", "else", "10", ",", "\n", "both", "=", "intersectionBoth", ")", "\n", "j", "+=", "1", "\n", "if", "p", "is", "not", "None", ":", "\n", "                ", "iPoints", ".", "append", "(", "p", ")", "\n", "i", "=", "len", "(", "cols", ")", "+", "1", "\n", "break", "\n", "", "else", ":", "\n", "                ", "i", "=", "len", "(", "cols", ")", "\n", "", "", "", "else", ":", "\n", "        ", "i", "+=", "1", "\n", "", "if", "len", "(", "iPoints", ")", ">", "0", "or", "failed", "==", "2", ":", "\n", "        ", "return", "iPoints", ",", "i", ",", "tryBefore", "\n", "", "else", ":", "\n", "        ", "return", "getIntersectsCols", "(", "line", ",", "cols", ",", "startInd", ",", "threshLine_low", ",", "threshLine_high", ",", "threshLeft", ",", "threshRight", ",", "failed", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.testforms_box.display": [[14, 116], ["data[].size", "range", "print", "print", "print", "range", "utils.img_f.imshow", "utils.img_f.show", "utils.img_f.gray2rgb", "utils.forms_annotations.calcCorners", "utils.img_f.polylines", "data[].items", "data[].items", "[].permute", "int", "int", "int", "int", "numpy.array", "data[].size", "range", "range", "ax_im.plot", "ax_im.plot"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.show", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.gray2rgb", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.calcCorners", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.polylines"], ["def", "display", "(", "data", ")", ":", "\n", "    ", "batchSize", "=", "data", "[", "'img'", "]", ".", "size", "(", "0", ")", "\n", "for", "b", "in", "range", "(", "batchSize", ")", ":", "\n", "#print (data['img'].size())", "\n", "#img = (data['img'][0].permute(1,2,0)+1)/2.0", "\n", "        ", "img", "=", "(", "data", "[", "'img'", "]", "[", "b", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "+", "1", ")", "/", "2.0", "\n", "#print(img.shape)", "\n", "#print(data['pixel_gt']['table_pixels'].shape)", "\n", "if", "'pixel_gt'", "in", "data", "and", "data", "[", "'pixel_gt'", "]", "is", "not", "None", ":", "\n", "            ", "img", "[", ":", ",", ":", ",", "1", "]", "=", "data", "[", "'pixel_gt'", "]", "[", "b", ",", "0", ",", ":", ",", ":", "]", "\n", "", "print", "(", "data", "[", "'imgName'", "]", "[", "b", "]", ")", "\n", "\n", "\n", "\n", "#fig = plt.figure()", "\n", "#gs = gridspec.GridSpec(1, 3)", "\n", "\n", "#ax_im = plt.subplot()", "\n", "#ax_im.set_axis_off()", "\n", "#if img.shape[2]==1:", "\n", "#    ax_im.imshow(img[0])", "\n", "#else:", "\n", "#    ax_im.imshow(img)A", "\n", "if", "img", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "img", "=", "img_f", ".", "gray2rgb", "(", "img", ")", "\n", "\n", "", "colors", "=", "{", "'text_start_gt'", ":", "'g-'", ",", "\n", "'text_end_gt'", ":", "'b-'", ",", "\n", "'field_start_gt'", ":", "'r-'", ",", "\n", "'field_end_gt'", ":", "'y-'", ",", "\n", "'table_points'", ":", "'co'", ",", "\n", "'start_of_line'", ":", "'y-'", ",", "\n", "'end_of_line'", ":", "'c-'", ",", "\n", "}", "\n", "print", "(", "'num bb:{}'", ".", "format", "(", "data", "[", "'bb_sizes'", "]", "[", "b", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "data", "[", "'bb_sizes'", "]", "[", "b", "]", ")", ":", "\n", "            ", "xc", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "0", "]", "\n", "yc", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "1", "]", "\n", "rot", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "2", "]", "\n", "#print(rot)", "\n", "h", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "3", "]", "\n", "w", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "4", "]", "\n", "text", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "13", "]", "\n", "field", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "14", "]", "\n", "if", "text", ">", "0", ":", "\n", "                ", "color", "=", "(", "1", ",", "0", ",", "0", ")", "#'b-'", "\n", "", "else", ":", "\n", "                ", "color", "=", "(", "0", ",", "1", ",", "0", ")", "#'r-'", "\n", "#tr = (int(math.cos(rot)*w-math.sin(rot)*h +xc), int(-math.sin(rot)*w-math.cos(rot)*h +yc))", "\n", "#tl = (int(-math.cos(rot)*w-math.sin(rot)*h +xc),int( math.sin(rot)*w-math.cos(rot)*h +yc))", "\n", "#br = (int(math.cos(rot)*w+math.sin(rot)*h +xc), int(-math.sin(rot)*w+math.cos(rot)*h +yc))", "\n", "#bl = (int(-math.cos(rot)*w+math.sin(rot)*h +xc),int( math.sin(rot)*w+math.cos(rot)*h +yc))", "\n", "#print([tr,tl,br,bl])", "\n", "", "tl", ",", "tr", ",", "br", ",", "bl", "=", "calcCorners", "(", "xc", ",", "yc", ",", "rot", ",", "h", ",", "w", ")", "\n", "tl", "=", "[", "int", "(", "x", ")", "for", "x", "in", "tl", "]", "\n", "tr", "=", "[", "int", "(", "x", ")", "for", "x", "in", "tr", "]", "\n", "br", "=", "[", "int", "(", "x", ")", "for", "x", "in", "br", "]", "\n", "bl", "=", "[", "int", "(", "x", ")", "for", "x", "in", "bl", "]", "\n", "\n", "#ax_im.plot([tr[0],tl[0],bl[0],br[0],tr[0]],[tr[1],tl[1],bl[1],br[1],tr[1]],color)", "\n", "img_f", ".", "polylines", "(", "img", ",", "np", ".", "array", "(", "[", "tr", ",", "tl", ",", "bl", ",", "br", "]", ")", ",", "'transparent'", ",", "color", ")", "\n", "\n", "if", "data", "[", "'bb_gt'", "]", ".", "shape", "[", "2", "]", ">", "15", ":", "\n", "                ", "blank", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "15", "]", "\n", "if", "blank", ">", "0", ":", "\n", "#ax_im.plot(tr[0],tr[1],'mo')", "\n", "                    ", "img", "[", "tr", "[", "1", "]", "-", "1", ":", "tr", "[", "1", "]", "+", "2", ",", "tr", "[", "0", "]", "-", "1", ":", "tr", "[", "0", "]", "+", "2", ",", "2", "]", "=", "1", "\n", "", "if", "data", "[", "'bb_gt'", "]", ".", "size", "(", "2", ")", ">", "16", ":", "\n", "                    ", "paired", "=", "data", "[", "'bb_gt'", "]", "[", "b", ",", "i", ",", "16", "]", "\n", "if", "paired", ">", "0", ":", "\n", "#ax_im.plot(br[0],br[1],'go')", "\n", "                        ", "img", "[", "tr", "[", "1", "]", "-", "1", ":", "tr", "[", "1", "]", "+", "2", ",", "tr", "[", "0", "]", "-", "1", ":", "tr", "[", "0", "]", "+", "2", ",", "0", ":", "2", "]", "=", "1", "\n", "\n", "\n", "", "", "", "", "if", "'line_gt'", "in", "data", "and", "data", "[", "'line_gt'", "]", "is", "not", "None", ":", "\n", "            ", "for", "name", ",", "gt", "in", "data", "[", "'line_gt'", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "gt", "is", "not", "None", ":", "\n", "#print (gt.size())", "\n", "                    ", "for", "i", "in", "range", "(", "data", "[", "'line_label_sizes'", "]", "[", "name", "]", "[", "b", "]", ")", ":", "\n", "                        ", "x0", "=", "gt", "[", "b", ",", "i", ",", "0", "]", "\n", "y0", "=", "gt", "[", "b", ",", "i", ",", "1", "]", "\n", "x1", "=", "gt", "[", "b", ",", "i", ",", "2", "]", "\n", "y1", "=", "gt", "[", "b", ",", "i", ",", "3", "]", "\n", "#print(1,'{},{}   {},{}'.format(x0,y0,x1,y1))", "\n", "\n", "ax_im", ".", "plot", "(", "[", "x0", ",", "x1", "]", ",", "[", "y0", ",", "y1", "]", ",", "colors", "[", "name", "]", ")", "\n", "\n", "\n", "", "", "", "", "if", "'point_gt'", "in", "data", "and", "data", "[", "'point_gt'", "]", "is", "not", "None", ":", "\n", "            ", "for", "name", ",", "gt", "in", "data", "[", "'point_gt'", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "gt", "is", "not", "None", ":", "\n", "#print (gt.size())", "\n", "#print(data)", "\n", "                    ", "for", "i", "in", "range", "(", "data", "[", "'point_label_sizes'", "]", "[", "name", "]", "[", "b", "]", ")", ":", "\n", "                        ", "x0", "=", "gt", "[", "b", ",", "i", ",", "0", "]", "\n", "y0", "=", "gt", "[", "b", ",", "i", ",", "1", "]", "\n", "\n", "ax_im", ".", "plot", "(", "[", "x0", "]", ",", "[", "y0", "]", ",", "colors", "[", "name", "]", ")", "\n", "#plt.show()", "\n", "", "", "", "", "img_f", ".", "imshow", "(", "'page'", ",", "img", ")", "\n", "img_f", ".", "show", "(", ")", "\n", "", "print", "(", "'batch complete'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.old_binary_pair_real.OldBinaryPairReal.__init__": [[28, 82], ["torch.nn.Module.__init__", "net_builder.make_layers", "torch.nn.Sequential", "torch.nn.Sequential", "net_builder.make_layers", "torch.nn.Sequential", "torch.nn.Sequential", "type", "net_builder.make_layers", "torch.nn.Sequential", "torch.nn.Sequential", "torch.load", "torch.load", "torch.load", "torch.load", "old_binary_pair_real.OldBinaryPairReal.shape_layers.parameters", "torch.nn.Parameter", "torch.nn.Parameter", "old_binary_pair_real.OldBinaryPairReal.shape_layers.load_state_dict", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "eval"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "# predCount, base_0, base_1):", "\n", "        ", "super", "(", "OldBinaryPairReal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "numBBOut", "=", "config", "[", "'bb_out'", "]", "if", "'bb_out'", "in", "config", "else", "0", "\n", "numRelOut", "=", "config", "[", "'rel_out'", "]", "if", "'rel_out'", "in", "config", "else", "1", "\n", "\n", "in_ch", "=", "config", "[", "'in_channels'", "]", "\n", "\n", "norm", "=", "config", "[", "'norm'", "]", "if", "'norm'", "in", "config", "else", "'group_norm'", "\n", "dropout", "=", "config", "[", "'dropout'", "]", "if", "'dropout'", "in", "config", "else", "True", "\n", "\n", "layer_desc", "=", "config", "[", "'layers'", "]", "if", "'layers'", "in", "config", "else", "[", "'FC256'", ",", "'FC256'", ",", "'FC256'", "]", "\n", "layer_desc", "=", "[", "in_ch", "]", "+", "layer_desc", "+", "[", "'FCnR{}'", ".", "format", "(", "numRelOut", ")", "]", "\n", "layers", ",", "last_ch_relC", "=", "make_layers", "(", "layer_desc", ",", "norm", "=", "norm", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "if", "numBBOut", ">", "0", ":", "\n", "            ", "layer_desc", "=", "config", "[", "'layers_bb'", "]", "if", "'layers_bb'", "in", "config", "else", "[", "'FC256'", ",", "'FC256'", ",", "'FC256'", "]", "\n", "layer_desc", "=", "[", "in_ch", "]", "+", "layer_desc", "+", "[", "'FCnR{}'", ".", "format", "(", "numBBOut", ")", "]", "\n", "layers", ",", "last_ch_relC", "=", "make_layers", "(", "layer_desc", ",", "norm", "=", "norm", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "layersBB", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "#This is written to by the PairingGraph object (which holds this one)", "\n", "", "self", ".", "numShapeFeats", "=", "config", "[", "'num_shape_feats'", "]", "if", "'num_shape_feats'", "in", "config", "else", "16", "\n", "\n", "\n", "\n", "if", "'shape_layers'", "in", "config", ":", "\n", "            ", "if", "type", "(", "config", "[", "'shape_layers'", "]", ")", "is", "list", ":", "\n", "                ", "layer_desc", "=", "config", "[", "'shape_layers'", "]", "\n", "layer_desc", "=", "[", "self", ".", "numShapeFeats", "]", "+", "layer_desc", "+", "[", "'FCnR{}'", ".", "format", "(", "numRelOut", ")", "]", "\n", "layers", ",", "last_ch_relC", "=", "make_layers", "(", "layer_desc", ",", "norm", "=", "norm", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "shape_layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "frozen_shape_layers", "=", "False", "\n", "", "else", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'shape_layers'", "]", ")", "\n", "shape_config", "=", "checkpoint", "[", "'config'", "]", "[", "'model'", "]", "\n", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "                    ", "self", ".", "shape_layers", "=", "eval", "(", "checkpoint", "[", "'config'", "]", "[", "'arch'", "]", ")", "(", "shape_config", ")", "\n", "self", ".", "shape_layers", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "shape_layers", "=", "checkpoint", "[", "'model'", "]", "\n", "", "for", "param", "in", "self", ".", "shape_layers", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "frozen_shape_layers", "=", "True", "\n", "", "if", "'weight_split'", "in", "config", ":", "\n", "                ", "if", "type", "(", "config", "[", "'weight_split'", "]", ")", "is", "float", ":", "\n", "                    ", "init", "=", "config", "[", "'weight_split'", "]", "\n", "", "else", ":", "\n", "                    ", "init", "=", "0.5", "\n", "", "self", ".", "split_weighting", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "init", ",", "requires_grad", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "split_weighting", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "shape_layers", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.old_binary_pair_real.OldBinaryPairReal.forward": [[85, 104], ["old_binary_pair_real.OldBinaryPairReal.layers", "old_binary_pair_real.OldBinaryPairReal.shape_layers", "old_binary_pair_real.OldBinaryPairReal.layersBB", "old_binary_pair_real.OldBinaryPairReal.shape_layers.eval", "old_binary_pair_real.OldBinaryPairReal.split_weighting.clamp"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "node_features", ",", "adjacencyMatrix", ",", "numBBs", ")", ":", "\n", "        ", "node_featuresR", "=", "node_features", "[", "numBBs", ":", "]", "\n", "res", "=", "self", ".", "layers", "(", "node_featuresR", ")", "\n", "if", "self", ".", "shape_layers", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "frozen_shape_layers", ":", "\n", "                ", "self", ".", "shape_layers", ".", "eval", "(", ")", "\n", "", "res2", "=", "self", ".", "shape_layers", "(", "node_featuresR", "[", ":", ",", "-", "self", ".", "numShapeFeats", ":", "]", ")", "\n", "if", "self", ".", "split_weighting", "is", "None", ":", "\n", "                ", "res", "=", "(", "res", "+", "res2", ")", "/", "2", "\n", "", "else", ":", "\n", "                ", "weight", "=", "self", ".", "split_weighting", ".", "clamp", "(", "0", ",", "1", ")", "\n", "res", "=", "weight", "*", "res", "+", "(", "1", "-", "weight", ")", "*", "res2", "\n", "", "", "if", "numBBs", ">", "0", ":", "\n", "            ", "node_featuresB", "=", "node_features", "[", ":", "numBBs", "]", "\n", "resB", "=", "self", ".", "layersBB", "(", "node_featuresB", ")", "\n", "", "else", ":", "\n", "            ", "resB", "=", "None", "\n", "#import pdb;pdb.set_trace()", "\n", "", "return", "resB", ",", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.MetaGraphFCEncoderLayer.__init__": [[15, 25], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "type"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat", ",", "edgeFeat", ",", "ch", ")", ":", "\n", "        ", "super", "(", "MetaGraphFCEncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "node_layer", "=", "nn", ".", "Linear", "(", "feat", ",", "ch", ")", "\n", "if", "type", "(", "edgeFeat", ")", "is", "int", "and", "edgeFeat", ">", "0", ":", "\n", "            ", "self", ".", "edge_layer", "=", "nn", ".", "Linear", "(", "edgeFeat", ",", "ch", ")", "\n", "self", ".", "hasEdgeInfo", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "edge_layer", "=", "nn", ".", "Linear", "(", "feat", "*", "2", ",", "ch", ")", "\n", "self", ".", "hasEdgeInfo", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.MetaGraphFCEncoderLayer.forward": [[26, 35], ["meta_graph_net.MetaGraphFCEncoderLayer.node_layer", "meta_graph_net.MetaGraphFCEncoderLayer.edge_layer", "node_features[].permute().reshape", "edge_indexes.size", "node_features[].permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "node_features", ",", "edge_indexes", ",", "edge_features", ",", "u_features", "=", "input", "\n", "node_featuresN", "=", "self", ".", "node_layer", "(", "node_features", ")", "\n", "if", "not", "self", ".", "hasEdgeInfo", ":", "\n", "            ", "edge_features", "=", "node_features", "[", "edge_indexes", "]", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "reshape", "(", "edge_indexes", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "", "edge_features", "=", "self", ".", "edge_layer", "(", "edge_features", ")", "\n", "\n", "\n", "return", "node_featuresN", ",", "edge_indexes", ",", "edge_features", ",", "u_features", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.EdgeFunc.__init__": [[37, 115], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "actM.append", "act.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Sequential", "net_builder.getGroupSize", "net_builder.getGroupSize", "net_builder.getGroupSize", "actS.append", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "actR.append", "actP.append", "NotImplemented", "act.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "net_builder.getGroupSize", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "type", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "meta_graph_net.SharpSigmoid", "net_builder.getGroupSize", "net_builder.getGroupSize", "net_builder.getGroupSize", "len", "meta_graph_net.EdgeFunc.edge_decider[].bias.size", "len", "len"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize"], ["    ", "def", "__init__", "(", "self", ",", "ch", ",", "dropout", "=", "0.1", ",", "norm", "=", "'group'", ",", "useRes", "=", "True", ",", "useGlobal", "=", "False", ",", "hidden_ch", "=", "None", ",", "soft_prune_edges", "=", "False", ",", "edge_decider", "=", "None", ",", "rcrhdn_size", "=", "0", ",", "avgEdges", "=", "False", ",", "sep_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "EdgeFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "soft_prune_edges", "=", "soft_prune_edges", "\n", "self", ".", "res", "=", "useRes", "\n", "self", ".", "avgEdges", "=", "avgEdges", "\n", "self", ".", "sep_norm", "=", "sep_norm", "\n", "\n", "if", "rcrhdn_size", "!=", "0", ":", "\n", "            ", "if", "rcrhdn_size", "<", "0", ":", "\n", "                ", "rcrhdn_size", "*=", "-", "1", "\n", "rcrhdn_size_out", "=", "0", "\n", "self", ".", "use_rcrhdn", "=", "'gru'", "\n", "", "else", ":", "\n", "#use a special memory channel for recurrent applications of this layer", "\n", "                ", "self", ".", "use_rcrhdn", "=", "True", "\n", "rcrhdn_size_out", "=", "rcrhdn_size", "\n", "", "self", ".", "rcrhdn_size", "=", "rcrhdn_size", "\n", "self", ".", "rcrhdn_edges", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "rcrhdn_size", "=", "0", "\n", "rcrhdn_size_out", "=", "0", "\n", "self", ".", "use_rcrhdn", "=", "False", "\n", "", "if", "hidden_ch", "is", "None", ":", "\n", "            ", "hidden_ch", "=", "ch", "+", "self", ".", "rcrhdn_size", "\n", "\n", "", "edge_in", "=", "3", "\n", "self", ".", "useGlobal", "=", "useGlobal", "\n", "if", "useGlobal", ":", "\n", "            ", "edge_in", "+=", "1", "\n", "\n", "", "actS", "=", "[", "]", "\n", "actM", "=", "[", "]", "\n", "actR", "=", "[", "]", "\n", "actP", "=", "[", "]", "\n", "acts", "=", "[", "actS", ",", "actM", ",", "actR", ",", "actP", "]", "\n", "\n", "if", "self", ".", "sep_norm", ":", "\n", "            ", "self", ".", "source_norm", "=", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", ")", ",", "ch", ")", "\n", "self", ".", "target_norm", "=", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", ")", ",", "ch", ")", "\n", "self", ".", "edge_norm", "=", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", ")", ",", "ch", ")", "\n", "\n", "", "if", "'group'", "in", "norm", ":", "\n", "            ", "if", "not", "self", ".", "sep_norm", ":", "\n", "                ", "actS", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "edge_in", "*", "ch", "+", "rcrhdn_size", ",", "edge_in", "*", "8", ")", ",", "edge_in", "*", "ch", "+", "rcrhdn_size", ")", ")", "\n", "", "actM", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "hidden_ch", ")", ",", "hidden_ch", ")", ")", "\n", "if", "self", ".", "use_rcrhdn", ":", "\n", "                ", "actR", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", ")", ",", "ch", ")", ")", "\n", "", "if", "self", ".", "soft_prune_edges", "and", "edge_decider", "is", "None", ":", "\n", "                ", "actP", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", ")", ",", "ch", ")", ")", "\n", "", "", "elif", "norm", ":", "\n", "            ", "raise", "NotImplemented", "(", "'Norm: {}, not implmeneted for EdgeFunc'", ".", "format", "(", "norm", ")", ")", "\n", "", "if", "dropout", "is", "not", "None", ":", "\n", "            ", "if", "type", "(", "dropout", ")", "is", "float", "or", "dropout", "==", "0", ":", "\n", "                ", "da", "=", "dropout", "\n", "", "else", ":", "\n", "                ", "da", "=", "0.1", "\n", "", "for", "act", "in", "acts", ":", "\n", "                ", "act", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "da", ",", "inplace", "=", "True", ")", ")", "\n", "", "", "for", "act", "in", "acts", ":", "\n", "            ", "act", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "self", ".", "edge_mlp", "=", "nn", ".", "Sequential", "(", "*", "(", "actS", ")", ",", "nn", ".", "Linear", "(", "ch", "*", "edge_in", "+", "rcrhdn_size", ",", "hidden_ch", ")", ",", "*", "(", "actM", ")", ",", "nn", ".", "Linear", "(", "hidden_ch", ",", "ch", "+", "rcrhdn_size_out", ")", ")", "\n", "\n", "if", "self", ".", "soft_prune_edges", ":", "\n", "            ", "if", "edge_decider", "is", "None", ":", "\n", "                ", "self", ".", "edge_decider", "=", "nn", ".", "Sequential", "(", "*", "(", "actP", ")", ",", "nn", ".", "Linear", "(", "ch", ",", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "# we shift the mean up to bias keeping edges (should help begining of training", "\n", "self", ".", "edge_decider", "[", "len", "(", "actP", ")", "]", ".", "bias", "=", "nn", ".", "Parameter", "(", "self", ".", "edge_decider", "[", "len", "(", "actP", ")", "]", ".", "bias", ".", "data", "+", "2.0", "/", "self", ".", "edge_decider", "[", "len", "(", "actP", ")", "]", ".", "bias", ".", "size", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "# we shouldn't need that bias here since it's already getting trained", "\n", "                ", "self", ".", "edge_decider", "=", "nn", ".", "Sequential", "(", "edge_decider", ",", "SharpSigmoid", "(", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "edge_decider", "=", "None", "\n", "", "if", "self", ".", "use_rcrhdn", ":", "\n", "#these layers are for providing initial values when cold-starting the recurrent net", "\n", "            ", "self", ".", "start_rcrhdn_edges", "=", "nn", ".", "Sequential", "(", "*", "actR", ",", "nn", ".", "Linear", "(", "ch", ",", "self", ".", "rcrhdn_size", ")", ")", "\n", "if", "self", ".", "use_rcrhdn", "==", "'gru'", ":", "\n", "                ", "self", ".", "edge_rcr", "=", "nn", ".", "GRU", "(", "input_size", "=", "ch", "*", "edge_in", ",", "hidden_size", "=", "rcrhdn_size", ",", "num_layers", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.EdgeFunc.clear": [[116, 118], ["None"], "methods", ["None"], ["", "", "", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "rcrhdn_edges", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.EdgeFunc.forward": [[119, 157], ["meta_graph_net.EdgeFunc.edge_mlp", "meta_graph_net.EdgeFunc.start_rcrhdn_edges", "u.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "meta_graph_net.EdgeFunc.edge_decider", "avg.repeat", "u.size", "meta_graph_net.EdgeFunc.size", "u.size", "meta_graph_net.EdgeFunc.source_norm", "meta_graph_net.EdgeFunc.target_norm", "meta_graph_net.EdgeFunc.edge_norm", "meta_graph_net.EdgeFunc.edge_rcr", "avg.repeat.size", "avg.repeat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "source", ",", "target", ",", "edge_attr", ",", "u", ",", "batch", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "use_rcrhdn", "and", "self", ".", "rcrhdn_edges", "is", "None", ":", "\n", "            ", "self", ".", "rcrhdn_edges", "=", "self", ".", "start_rcrhdn_edges", "(", "edge_attr", ")", "\n", "# source, target: [E, F_x], where E is the number of edges.", "\n", "# edge_attr: [E, F_e]", "\n", "# u: [B, F_u], where B is the number of graphs.", "\n", "", "if", "u", "is", "not", "None", ":", "\n", "            ", "assert", "(", "u", ".", "size", "(", "0", ")", "==", "1", ")", "\n", "assert", "(", "not", "self", ".", "sep_norm", ")", "\n", "us", "=", "u", ".", "expand", "(", "source", ".", "size", "(", "0", ")", ",", "u", ".", "size", "(", "1", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "source", ",", "target", ",", "edge_attr", ",", "us", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "sep_norm", ":", "\n", "                ", "source", "=", "self", ".", "source_norm", "(", "source", ")", "\n", "target", "=", "self", ".", "target_norm", "(", "target", ")", "\n", "edge_attr", "=", "self", ".", "edge_norm", "(", "edge_attr", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "[", "source", ",", "target", ",", "edge_attr", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "use_rcrhdn", "==", "'gru'", ":", "\n", "            ", "self", ".", "rcrhdn_edges", "=", "self", ".", "edge_rcr", "(", "out", "[", "None", ",", "...", "]", ",", "self", ".", "rcrhdn_edges", "[", "None", ",", "...", "]", ")", "[", "1", "]", "[", "0", "]", "\n", "", "if", "self", ".", "use_rcrhdn", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "self", ".", "rcrhdn_edges", "]", ",", "dim", "=", "1", ")", "\n", "", "out", "=", "self", ".", "edge_mlp", "(", "out", ")", "\n", "if", "self", ".", "use_rcrhdn", "and", "self", ".", "use_rcrhdn", "!=", "'gru'", ":", "\n", "            ", "self", ".", "rcrhdn_edges", "=", "out", "[", ":", ",", "-", "self", ".", "rcrhdn_size", ":", "]", "\n", "out", "=", "out", "[", ":", ",", ":", "-", "self", ".", "rcrhdn_size", "]", "\n", "\n", "\n", "", "if", "self", ".", "soft_prune_edges", ":", "\n", "            ", "pruneDecision", "=", "self", ".", "edge_decider", "(", "out", ")", "\n", "#print(pruneDecision)", "\n", "out", "*=", "self", ".", "soft_prune_edges", "\n", "", "if", "self", ".", "res", ":", "\n", "            ", "out", "+=", "edge_attr", "\n", "", "if", "self", ".", "avgEdges", ":", "#assumes bidirection edges repeated in order", "\n", "            ", "avg", "=", "(", "out", "[", ":", "out", ".", "size", "(", "0", ")", "//", "2", "]", "+", "out", "[", "out", ".", "size", "(", "0", ")", "//", "2", ":", "]", ")", "/", "2", "\n", "out", "=", "avg", ".", "repeat", "(", "2", ",", "1", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.NodeTreeFunc.__init__": [[159, 221], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "actS.append", "actM.append", "actE.append", "act1Step.append", "act2Step.append", "act.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "actR.append", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "NotImplemented", "act.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.GRU", "torch.nn.GRU", "net_builder.getGroupSize", "net_builder.getGroupSize", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "net_builder.getGroupSize", "net_builder.getGroupSize", "net_builder.getGroupSize", "type", "torch.nn.Dropout", "torch.nn.Dropout", "net_builder.getGroupSize"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize"], ["    ", "def", "__init__", "(", "self", ",", "ch", ",", "heads", "=", "4", ",", "dropout", "=", "0.1", ",", "norm", "=", "'group'", ",", "useRes", "=", "True", ",", "useGlobal", "=", "False", ",", "hidden_ch", "=", "None", ",", "rcrhdn_size", "=", "0", ")", ":", "\n", "        ", "super", "(", "NodeTreeFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "res", "=", "useRes", "\n", "\n", "if", "rcrhdn_size", "!=", "0", ":", "\n", "            ", "if", "rcrhdn_size", "<", "0", ":", "\n", "                ", "rcrhdn_size", "*=", "-", "1", "\n", "rcrhdn_size_out", "=", "0", "\n", "self", ".", "use_rcrhdn", "=", "'gru'", "\n", "", "else", ":", "\n", "#use a special memory channel for recurrent applications of this layer", "\n", "                ", "self", ".", "use_rcrhdn", "=", "True", "\n", "rcrhdn_size_out", "=", "rcrhdn_size", "\n", "", "self", ".", "rcrhdn_size", "=", "rcrhdn_size", "\n", "self", ".", "rcrhdn_nodes", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "rcrhdn_size", "=", "0", "\n", "rcrhdn_size_out", "=", "0", "\n", "self", ".", "use_rcrhdn", "=", "False", "\n", "", "if", "hidden_ch", "is", "None", ":", "\n", "            ", "hidden_ch", "=", "ch", "+", "self", ".", "rcrhdn_size", "\n", "\n", "", "node_in", "=", "2", "\n", "self", ".", "useGlobal", "=", "useGlobal", "\n", "if", "useGlobal", ":", "\n", "            ", "node_in", "+=", "1", "\n", "", "actS", "=", "[", "]", "\n", "actM", "=", "[", "]", "\n", "actR", "=", "[", "]", "\n", "actE", "=", "[", "]", "\n", "act1Step", "=", "[", "]", "\n", "act2Step", "=", "[", "]", "\n", "acts", "=", "[", "actS", ",", "actM", ",", "actR", ",", "actE", ",", "act1Step", ",", "act2Step", "]", "\n", "if", "'group'", "in", "norm", ":", "\n", "            ", "actS", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "node_in", "*", "ch", "+", "rcrhdn_size", ",", "node_in", "*", "8", ")", ",", "node_in", "*", "ch", "+", "rcrhdn_size", ")", ")", "\n", "actM", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "hidden_ch", ")", ",", "hidden_ch", ")", ")", "\n", "if", "self", ".", "use_rcrhdn", ":", "\n", "                ", "actR", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", ")", ",", "ch", ")", ")", "\n", "", "actE", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", "*", "2", ")", ",", "ch", "*", "2", ")", ")", "\n", "act1Step", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", "*", "3", ")", ",", "ch", "*", "3", ")", ")", "\n", "act2Step", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", "*", "2", ")", ",", "ch", "*", "2", ")", ")", "\n", "", "elif", "norm", ":", "\n", "            ", "raise", "NotImplemented", "(", "'Norm: {}, not implmeneted for NodeTreeF'", ".", "format", "(", "norm", ")", ")", "\n", "", "if", "dropout", "is", "not", "None", ":", "\n", "            ", "if", "type", "(", "dropout", ")", "is", "float", "or", "dropout", "==", "0", ":", "\n", "                ", "da", "=", "dropout", "\n", "", "else", ":", "\n", "                ", "da", "=", "0.1", "\n", "", "for", "act", "in", "acts", ":", "\n", "                ", "act", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "da", ",", "inplace", "=", "True", ")", ")", "\n", "", "", "for", "act", "in", "acts", ":", "\n", "            ", "act", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "\n", "", "self", ".", "node_mlp", "=", "nn", ".", "Sequential", "(", "*", "actS", ",", "nn", ".", "Linear", "(", "ch", "*", "node_in", "+", "rcrhdn_size", ",", "hidden_ch", ")", ",", "*", "(", "actM", ")", ",", "nn", ".", "Linear", "(", "hidden_ch", ",", "ch", "+", "rcrhdn_size_out", ")", ")", "\n", "if", "self", ".", "use_rcrhdn", ":", "\n", "#these layers are for providing initial values when cold-starting the recurrent net", "\n", "            ", "self", ".", "start_rcrhdn_nodes", "=", "nn", ".", "Sequential", "(", "*", "actR", ",", "nn", ".", "Linear", "(", "ch", ",", "self", ".", "rcrhdn_size", ")", ")", "\n", "if", "self", ".", "use_rcrhdn", "==", "'gru'", ":", "\n", "                ", "self", ".", "node_rcr", "=", "nn", ".", "GRU", "(", "input_size", "=", "ch", "*", "node_in", ",", "hidden_size", "=", "rcrhdn_size", ",", "num_layers", "=", "1", ")", "\n", "", "", "self", ".", "sum_encode", "=", "nn", ".", "Sequential", "(", "*", "actE", ",", "nn", ".", "Linear", "(", "2", "*", "ch", ",", "ch", ")", ")", "\n", "self", ".", "sum_step", "=", "nn", ".", "Sequential", "(", "*", "act1Step", ",", "nn", ".", "Linear", "(", "3", "*", "ch", ",", "2", "*", "ch", ")", ",", "*", "act2Step", ",", "nn", ".", "Linear", "(", "2", "*", "ch", ",", "ch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.NodeTreeFunc.clear": [[222, 224], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "rcrhdn_nodes", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.NodeTreeFunc.summerize": [[225, 253], ["meta_graph_net.NodeTreeFunc.sum_encode", "torch.cat.size", "torch.cat.size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "x.view().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "meta_graph_net.NodeTreeFunc.sum_step", "torch.cat.size", "torch.cat.size", "torch.cat.view.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.view().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "x.view", "x.size", "torch.cat.size", "torch.cat.size", "oddout.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "x.view", "torch.cat.size", "torch.cat.size", "oddout.size"], "methods", ["None"], ["", "def", "summerize", "(", "self", ",", "data", ",", "x", ")", ":", "\n", "        ", "if", "data", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "            ", "return", "torch", ".", "zeros", "(", "1", ",", "x", ".", "size", "(", "0", ")", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "", "data", "=", "self", ".", "sum_encode", "(", "torch", ".", "cat", "(", "(", "data", ",", "x", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "data", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "oddout", "=", "None", "\n", "while", "data", ".", "size", "(", "0", ")", ">", "1", "or", "oddout", "is", "not", "None", ":", "\n", "            ", "if", "oddout", "is", "not", "None", ":", "\n", "                ", "if", "(", "data", ".", "size", "(", "0", ")", "+", "oddout", ".", "size", "(", "0", ")", ")", "%", "2", "==", "0", ":", "\n", "                    ", "data", "=", "torch", ".", "cat", "(", "(", "data", ",", "oddout", ")", ",", "dim", "=", "0", ")", "\n", "oddout", "=", "None", "#torch.FloatTensor", "\n", "", "elif", "oddout", ".", "size", "(", "0", ")", ">", "1", ":", "\n", "                    ", "data", "=", "torch", ".", "cat", "(", "(", "data", ",", "oddout", "[", ":", "-", "1", "]", ")", ",", "dim", "=", "0", ")", "\n", "oddout", "=", "oddout", "[", "-", "1", ":", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "data", ".", "size", "(", "0", ")", "%", "2", "==", "1", ":", "\n", "                    ", "oddout", "=", "data", "[", "-", "1", ":", "]", "\n", "data", "=", "data", "[", ":", "-", "1", "]", "\n", "", "", "paired", "=", "data", ".", "view", "(", "data", ".", "size", "(", "0", ")", "//", "2", ",", "data", ".", "size", "(", "1", ")", "*", "2", ")", "\n", "x_e", "=", "x", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "paired", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "cated", "=", "torch", ".", "cat", "(", "(", "paired", ",", "x_e", ")", ",", "dim", "=", "1", ")", "\n", "#cated=cated.clone()", "\n", "#return cated[0:1,-x.size(0):]", "\n", "data", "=", "self", ".", "sum_step", "(", "cated", ")", "\n", "#data = cated[:,:x.size(0)]+cated[:,x.size(0):2*x.size(0)]+cated[:,-x.size(0):]", "\n", "#return data[0:1]", "\n", "\n", "#data = paired.view(data.size(0),data.size(1))", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.NodeTreeFunc.forward": [[254, 291], ["range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "meta_graph_net.NodeTreeFunc.node_mlp", "meta_graph_net.NodeTreeFunc.start_rcrhdn_nodes", "col.size", "edgeLists[].append", "range", "x.size", "torch.cat.append", "torch.cat.append", "u.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "x.size", "random.shuffle", "meta_graph_net.NodeTreeFunc.summerize", "u.size", "source.size", "u.size", "x.size", "meta_graph_net.NodeTreeFunc.node_rcr"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.NodeTreeFunc.summerize"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", ",", "u", ",", "batch", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "use_rcrhdn", "and", "self", ".", "rcrhdn_nodes", "is", "None", ":", "\n", "            ", "self", ".", "rcrhdn_nodes", "=", "self", ".", "start_rcrhdn_nodes", "(", "x", ")", "\n", "# x: [N, F_x], where N is the number of nodes.", "\n", "# edge_index: [2, E] with max entry N - 1.", "\n", "# edge_attr: [E, F_e]", "\n", "# u: [B, F_u]", "\n", "", "edgeLists", "=", "[", "[", "]", "for", "i", "in", "range", "(", "x", ".", "size", "(", "0", ")", ")", "]", "\n", "row", ",", "col", "=", "edge_index", "\n", "for", "i", "in", "range", "(", "col", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "edgeLists", "[", "col", "[", "i", "]", "]", ".", "append", "(", "i", ")", "#edge_attr[:,", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "for", "node", "in", "range", "(", "x", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "random", ".", "shuffle", "(", "edgeLists", "[", "node", "]", ")", "\n", "#summary = torch.FloatTensor(x.size(0),edge_attr.size(1)).to(x.device)", "\n", "", "", "summary", "=", "[", "]", "\n", "for", "node", "in", "range", "(", "x", ".", "size", "(", "0", ")", ")", ":", "#TODO this can be optimized by doing everything at once and doing book keeping", "\n", "            ", "summary", ".", "append", "(", "self", ".", "summerize", "(", "edge_attr", "[", "edgeLists", "[", "node", "]", "]", ",", "x", "[", "node", "]", ")", ")", "\n", "", "summary", "=", "torch", ".", "cat", "(", "summary", ",", "dim", "=", "0", ")", "\n", "if", "u", "is", "not", "None", ":", "\n", "            ", "assert", "(", "u", ".", "size", "(", "0", ")", "==", "1", ")", "\n", "us", "=", "u", ".", "expand", "(", "source", ".", "size", "(", "0", ")", ",", "u", ".", "size", "(", "1", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x", ",", "summary", ",", "us", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "[", "x", ",", "summary", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "use_rcrhdn", "==", "'gru'", ":", "\n", "            ", "self", ".", "rcrhdn_nodes", "=", "self", ".", "node_rcr", "(", "out", "[", "None", ",", "...", "]", ",", "self", ".", "rcrhdn_nodes", "[", "None", ",", "...", "]", ")", "[", "1", "]", "[", "0", "]", "\n", "", "if", "self", ".", "use_rcrhdn", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "self", ".", "rcrhdn_nodes", "]", ",", "dim", "=", "1", ")", "\n", "", "out", "=", "self", ".", "node_mlp", "(", "out", ")", "\n", "if", "self", ".", "use_rcrhdn", "and", "self", ".", "use_rcrhdn", "!=", "'gru'", ":", "\n", "            ", "self", ".", "rcrhdn_nodes", "=", "out", "[", ":", ",", "-", "self", ".", "rcrhdn_size", ":", "]", "\n", "out", "=", "out", "[", ":", ",", ":", "-", "self", ".", "rcrhdn_size", "]", "\n", "\n", "", "if", "self", ".", "res", ":", "\n", "            ", "out", "+=", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.NodeAttFunc.__init__": [[293, 371], ["torch.nn.Module.__init__", "actM.append", "actR.append", "torch.nn.Sequential", "torch.nn.Sequential", "attention.MultiHeadedAttention", "actM.append", "actM.append", "actR.append", "dropN.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "meta_graph_net.NodeAttFunc.actN.append", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Sequential", "NotImplementedError", "meta_graph_net.NodeAttFunc.actN_u.append", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "actR.append", "dropN.append", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "meta_graph_net.NodeAttFunc.actN.append", "NotImplemented", "type", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "net_builder.getGroupSize", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "net_builder.getGroupSize", "net_builder.getGroupSize", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "net_builder.getGroupSize", "net_builder.getGroupSize", "net_builder.getGroupSize", "net_builder.getGroupSize"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize"], ["    ", "def", "__init__", "(", "self", ",", "ch", ",", "heads", "=", "4", ",", "dropout", "=", "0.1", ",", "norm", "=", "'group'", ",", "useRes", "=", "True", ",", "useGlobal", "=", "False", ",", "hidden_ch", "=", "None", ",", "agg_thinker", "=", "'cat'", ",", "rcrhdn_size", "=", "0", ",", "relu_node_act", "=", "False", ",", "att_mod", "=", "False", ",", "more_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "NodeAttFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "thinker", "=", "agg_thinker", "\n", "self", ".", "res", "=", "useRes", "\n", "self", ".", "norm_before_att", "=", "more_norm", "\n", "\n", "if", "rcrhdn_size", "!=", "0", ":", "\n", "            ", "if", "rcrhdn_size", "<", "0", ":", "\n", "                ", "rcrhdn_size", "*=", "-", "1", "\n", "rcrhdn_size_out", "=", "0", "\n", "self", ".", "use_rcrhdn", "=", "'gru'", "\n", "", "else", ":", "\n", "#use a special memory channel for recurrent applications of this layer", "\n", "                ", "self", ".", "use_rcrhdn", "=", "True", "\n", "rcrhdn_size_out", "=", "rcrhdn_size", "\n", "", "self", ".", "rcrhdn_size", "=", "rcrhdn_size", "\n", "self", ".", "rcrhdn_nodes", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "rcrhdn_size", "=", "0", "\n", "rcrhdn_size_out", "=", "0", "\n", "self", ".", "use_rcrhdn", "=", "False", "\n", "", "if", "hidden_ch", "is", "None", ":", "\n", "            ", "hidden_ch", "=", "ch", "+", "self", ".", "rcrhdn_size", "\n", "\n", "", "if", "self", ".", "thinker", "==", "'cat'", ":", "\n", "            ", "node_in", "=", "2", "\n", "", "elif", "self", ".", "thinker", "==", "'add'", ":", "\n", "            ", "node_in", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Unknown thinker option for NodeAttFunction: {}'", ".", "format", "(", "self", ".", "thinker", ")", ")", "\n", "", "self", ".", "useGlobal", "=", "useGlobal", "\n", "if", "useGlobal", ":", "\n", "            ", "node_in", "+=", "1", "\n", "", "dropN", "=", "[", "]", "\n", "actM", "=", "[", "]", "\n", "self", ".", "actN", "=", "[", "]", "\n", "self", ".", "actN_u", "=", "[", "]", "\n", "actR", "=", "[", "]", "\n", "if", "'group'", "in", "norm", ":", "\n", "            ", "if", "useGlobal", ":", "\n", "                ", "self", ".", "actN_u", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", ")", ",", "ch", ")", ")", "\n", "", "actM", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "hidden_ch", ")", ",", "hidden_ch", ")", ")", "\n", "if", "self", ".", "use_rcrhdn", ":", "\n", "                ", "actR", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", ")", ",", "ch", ")", ")", "\n", "", "if", "more_norm", ":", "\n", "                ", "dropN", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", "*", "node_in", "+", "rcrhdn_size", ")", ",", "ch", "*", "node_in", "+", "rcrhdn_size", ")", ")", "\n", "self", ".", "norm1N", "=", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", ")", ",", "ch", ")", "\n", "self", ".", "norm1E", "=", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", ")", ",", "ch", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "actN", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", "+", "rcrhdn_size", ")", ",", "ch", "+", "rcrhdn_size_out", ")", ")", "\n", "\n", "", "", "elif", "norm", ":", "\n", "            ", "raise", "NotImplemented", "(", "'Norm: {}, not implmeneted for NodeAttFunc'", ".", "format", "(", "norm", ")", ")", "\n", "", "if", "dropout", "is", "not", "None", ":", "\n", "            ", "if", "type", "(", "dropout", ")", "is", "float", ":", "\n", "                ", "da", "=", "dropout", "\n", "", "else", ":", "\n", "                ", "da", "=", "0.1", "\n", "", "actM", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "da", ",", "inplace", "=", "True", ")", ")", "\n", "actR", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "da", ",", "inplace", "=", "True", ")", ")", "\n", "dropN", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "da", ",", "inplace", "=", "True", ")", ")", "\n", "", "actM", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "actR", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "if", "relu_node_act", ":", "\n", "            ", "self", ".", "actN", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "if", "not", "more_norm", ":", "\n", "            ", "self", ".", "actN", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "actN", ")", "\n", "", "if", "useGlobal", ":", "\n", "            ", "self", ".", "actN_u", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "actN_u", ")", "\n", "\n", "\n", "", "self", ".", "node_mlp", "=", "nn", ".", "Sequential", "(", "*", "dropN", ",", "nn", ".", "Linear", "(", "ch", "*", "node_in", "+", "rcrhdn_size", ",", "hidden_ch", ")", ",", "*", "(", "actM", ")", ",", "nn", ".", "Linear", "(", "hidden_ch", ",", "ch", "+", "rcrhdn_size_out", ")", ")", "\n", "self", ".", "mhAtt", "=", "MultiHeadedAttention", "(", "heads", ",", "ch", ",", "mod", "=", "att_mod", ")", "\n", "if", "self", ".", "use_rcrhdn", ":", "\n", "#these layers are for providing initial values when cold-starting the recurrent net", "\n", "            ", "self", ".", "start_rcrhdn_nodes", "=", "nn", ".", "Sequential", "(", "*", "actR", ",", "nn", ".", "Linear", "(", "ch", ",", "self", ".", "rcrhdn_size", ")", ")", "\n", "if", "self", ".", "use_rcrhdn", "==", "'gru'", ":", "\n", "                ", "self", ".", "node_rcr", "=", "nn", ".", "GRU", "(", "input_size", "=", "ch", "*", "node_in", ",", "hidden_size", "=", "rcrhdn_size", ",", "num_layers", "=", "1", ")", "\n", "#maybe add normalization layer?", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.NodeAttFunc.clear": [[373, 375], ["None"], "methods", ["None"], ["", "", "", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "rcrhdn_nodes", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.NodeAttFunc.forward": [[376, 435], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mask.to.to.to", "meta_graph_net.NodeAttFunc.mhAtt", "meta_graph_net.NodeAttFunc.node_mlp", "meta_graph_net.NodeAttFunc.start_rcrhdn_nodes", "col.size", "meta_graph_net.NodeAttFunc.size", "meta_graph_net.NodeAttFunc.size", "meta_graph_net.NodeAttFunc.norm1N", "meta_graph_net.NodeAttFunc.norm1E", "u.expand", "meta_graph_net.NodeAttFunc.actN_u", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "meta_graph_net.NodeAttFunc.actN", "meta_graph_net.NodeAttFunc.actN", "u.size", "source.size", "u.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "meta_graph_net.NodeAttFunc.node_rcr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", ",", "u", ",", "batch", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "use_rcrhdn", "and", "self", ".", "rcrhdn_nodes", "is", "None", ":", "\n", "            ", "self", ".", "rcrhdn_nodes", "=", "self", ".", "start_rcrhdn_nodes", "(", "x", ")", "\n", "# x: [N, F_x], where N is the number of nodes.", "\n", "# edge_index: [2, E] with max entry N - 1.", "\n", "# edge_attr: [E, F_e]", "\n", "# u: [B, F_u]", "\n", "", "row", ",", "col", "=", "edge_index", "\n", "eRange", "=", "torch", ".", "arange", "(", "col", ".", "size", "(", "0", ")", ")", "\n", "mask", "=", "torch", ".", "zeros", "(", "x", ".", "size", "(", "0", ")", ",", "edge_attr", ".", "size", "(", "0", ")", ")", "\n", "mask", "[", "col", ",", "eRange", "]", "=", "1", "\n", "mask", "=", "mask", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "if", "self", ".", "norm_before_att", ":", "\n", "            ", "x", "=", "self", ".", "norm1N", "(", "x", ")", "\n", "edge_attr", "=", "self", ".", "norm1E", "(", "edge_attr", ")", "\n", "\n", "#Add batch dimension", "\n", "", "x_b", "=", "x", "[", "None", ",", "...", "]", "\n", "edge_attr_b", "=", "edge_attr", "[", "None", ",", "...", "]", "\n", "g", "=", "self", ".", "mhAtt", "(", "x_b", ",", "edge_attr_b", ",", "edge_attr_b", ",", "mask", ")", "\n", "\n", "#above uses unnormalized, unactivated features.", "\n", "g", "=", "g", "[", "0", "]", "#discard batch dim", "\n", "\n", "if", "not", "self", ".", "norm_before_att", ":", "\n", "            ", "if", "self", ".", "use_rcrhdn", "and", "self", ".", "use_rcrhdn", "!=", "'gru'", ":", "\n", "                ", "xa", "=", "self", ".", "actN", "(", "torch", ".", "cat", "(", "(", "x", ",", "self", ".", "rcrhdn_nodes", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "xa", "=", "self", ".", "actN", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "xa", "=", "x", "\n", "", "if", "u", "is", "not", "None", ":", "\n", "            ", "assert", "(", "u", ".", "size", "(", "0", ")", "==", "1", ")", "\n", "us", "=", "u", ".", "expand", "(", "source", ".", "size", "(", "0", ")", ",", "u", ".", "size", "(", "1", ")", ")", "\n", "us", "=", "self", ".", "actN_u", "(", "us", ")", "\n", "if", "self", ".", "thinker", "==", "'cat'", ":", "\n", "                ", "input", "=", "torch", ".", "cat", "(", "(", "xa", ",", "g", ",", "us", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "thinker", "==", "'add'", ":", "\n", "                ", "g", "+=", "xa", "\n", "input", "=", "torch", ".", "cat", "(", "(", "g", ",", "us", ")", ",", "dim", "=", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "thinker", "==", "'cat'", ":", "\n", "                ", "input", "=", "torch", ".", "cat", "(", "(", "xa", ",", "g", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "thinker", "==", "'add'", ":", "\n", "                ", "input", "=", "g", "+", "xa", "\n", "", "", "if", "self", ".", "norm_before_att", ":", "\n", "            ", "if", "self", ".", "use_rcrhdn", "and", "self", ".", "use_rcrhdn", "!=", "'gru'", ":", "\n", "                ", "input", "=", "torch", ".", "cat", "(", "(", "input", ",", "self", ".", "rcrhdn_nodes", ")", ",", "dim", "=", "1", ")", "\n", "", "", "if", "self", ".", "use_rcrhdn", "==", "'gru'", ":", "\n", "            ", "self", ".", "rcrhdn_nodes", "=", "self", ".", "node_rcr", "(", "input", "[", "None", ",", "...", "]", ",", "self", ".", "rcrhdn_nodes", "[", "None", ",", "...", "]", ")", "[", "1", "]", "[", "0", "]", "\n", "input", "=", "torch", ".", "cat", "(", "(", "input", ",", "self", ".", "rcrhdn_nodes", ")", ",", "dim", "=", "1", ")", "\n", "", "out", "=", "self", ".", "node_mlp", "(", "input", ")", "\n", "if", "self", ".", "use_rcrhdn", "and", "self", ".", "use_rcrhdn", "!=", "'gru'", ":", "\n", "            ", "self", ".", "rcrhdn_nodes", "=", "out", "[", ":", ",", "-", "self", ".", "rcrhdn_size", ":", "]", "\n", "out", "=", "out", "[", ":", ",", ":", "-", "self", ".", "rcrhdn_size", "]", "\n", "", "if", "self", ".", "res", ":", "\n", "            ", "out", "+=", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.NoGlobalFunc.__init__": [[437, 439], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "         ", "super", "(", "NoGlobalFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", ",", "u", ",", "batch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.NoGlobalFunc.forward": [[439, 441], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", ",", "u", ",", "batch", ")", ":", "\n", "        ", "return", "None", "\n", "", "def", "clear", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.NoGlobalFunc.clear": [[441, 443], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.GlobalAvgFunc.__init__": [[445, 477], ["torch.nn.Module.__init__", "actS.append", "actM.append", "actR.append", "torch.nn.Sequential", "torch.nn.Sequential", "actS.append", "actM.append", "actS.append", "actM.append", "actR.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "actR.append", "NotImplemented", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.GRU", "torch.nn.GRU", "net_builder.getGroupSize", "net_builder.getGroupSize", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "type", "net_builder.getGroupSize"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize"], ["    ", "def", "__init__", "(", "self", ",", "ch", ",", "dropout", "=", "0.1", ",", "norm", "=", "'group'", ",", "useRes", "=", "True", ",", "hidden_ch", "=", "None", ",", "rcrhdn_size", "=", "0", ")", ":", "\n", "        ", "super", "(", "GlobalAvgFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "res", "=", "useRes", "\n", "\n", "actS", "=", "[", "]", "\n", "actM", "=", "[", "]", "\n", "actR", "=", "[", "]", "\n", "if", "'group'", "in", "norm", ":", "\n", "            ", "actS", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "3", "*", "ch", "+", "rcrhdn_size", ",", "24", ")", ",", "3", "*", "ch", "+", "rcrhdn_size", ")", ")", "\n", "actM", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "hidden_ch", ")", ",", "hidden_ch", ")", ")", "\n", "if", "self", ".", "use_rcrhdn", ":", "\n", "                ", "actR", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", ")", ",", "ch", ")", ")", "\n", "", "", "elif", "norm", ":", "\n", "            ", "raise", "NotImplemented", "(", "'Norm: {}, not implmeneted for EdgeFunc'", ".", "format", "(", "norm", ")", ")", "\n", "", "if", "dropout", "is", "not", "None", ":", "\n", "            ", "if", "type", "(", "dropout", ")", "is", "float", "or", "dropout", "==", "0", ":", "\n", "                ", "da", "=", "dropout", "\n", "", "else", ":", "\n", "                ", "da", "=", "0.1", "\n", "", "actS", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "da", ",", "inplace", "=", "True", ")", ")", "\n", "actM", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "da", ",", "inplace", "=", "True", ")", ")", "\n", "actR", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "da", ",", "inplace", "=", "True", ")", ")", "\n", "", "actS", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "actM", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "actR", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "global_mlp", "=", "nn", ".", "Sequential", "(", "*", "(", "act", "[", "0", "]", ")", ",", "nn", ".", "Linear", "(", "ch", "*", "3", "+", "rcrhdn_size", ",", "hidden_ch", ")", ",", "*", "(", "act", "[", "1", "]", ")", ",", "nn", ".", "Linear", "(", "hidden_ch", ",", "ch", "+", "rcrhdn_size_out", ")", ")", "\n", "if", "self", ".", "use_rcrhdn", ":", "\n", "#these layers are for providing initial values when cold-starting the recurrent net", "\n", "            ", "self", ".", "start_rcrhdn_global", "=", "nn", ".", "Sequential", "(", "*", "act", "[", "8", "]", ",", "nn", ".", "Linear", "(", "ch", ",", "self", ".", "rcrhdn_size", ")", ")", "\n", "if", "self", ".", "use_rcrhdn", "==", "'gru'", ":", "\n", "                ", "self", ".", "global_rcr", "=", "nn", ".", "GRU", "(", "input_size", "=", "ch", "*", "3", ",", "hidden_size", "=", "rcrhdn_size", ",", "num_layers", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.GlobalAvgFunc.clear": [[478, 480], ["None"], "methods", ["None"], ["", "", "", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "rcrhdn_global", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.GlobalAvgFunc.forward": [[481, 505], ["meta_graph_net.GlobalAvgFunc.global_mlp", "meta_graph_net.GlobalAvgFunc.start_rcrhdn_global", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NotImplemented", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NotImplemented", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch_scatter.scatter_mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", ",", "u", ",", "batch", ")", ":", "\n", "        ", "if", "self", ".", "use_rcrhdn", "and", "self", ".", "rcrhdn_global", "is", "None", ":", "\n", "            ", "self", ".", "rcrhdn_global", "=", "self", ".", "start_rcrhdn_global", "(", "u", ")", "\n", "# x: [N, F_x], where N is the number of nodes.", "\n", "# edge_index: [2, E] with max entry N - 1.", "\n", "# edge_attr: [E, F_e]", "\n", "# u: [B, F_u]", "\n", "# batch: [N] with max entry B - 1.", "\n", "", "if", "batch", "is", "None", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "[", "u", ",", "torch", ".", "mean", "(", "x", ",", "dim", "=", "0", ")", ",", "torch", ".", "mean", "(", "edge_attr", ",", "dim", "=", "0", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "(", "'batching not implemented for scatter_mean of edge_attr'", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "u", ",", "scatter_mean", "(", "x", ",", "batch", ",", "dim", "=", "0", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "use_rcrhdn", "==", "'gru'", ":", "\n", "            ", "raise", "NotImplemented", "(", "'GRU not implemented for global, but is easy to do'", ")", "\n", "", "if", "self", ".", "use_rcrhdn", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "self", ".", "rcrhdn_global", "]", ",", "dim", "=", "1", ")", "\n", "", "out", "=", "self", ".", "global_mlp", "(", "out", ")", "\n", "if", "self", ".", "use_rcrhdn", ":", "\n", "            ", "self", ".", "rcrhdn_global", "=", "out", "[", ":", ",", "-", "self", ".", "rcrhdn_size", ":", "]", "\n", "out", "=", "out", "[", ":", ",", ":", "-", "self", ".", "rcrhdn_size", "]", "\n", "", "if", "self", ".", "res", ":", "\n", "            ", "out", "+=", "u", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.MetaGraphLayer.__init__": [[508, 511], ["torch.nn.Module.__init__", "torch_geometric.nn.MetaLayer"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "edge_m", ",", "node_m", ",", "global_m", ")", ":", "\n", "        ", "super", "(", "MetaGraphLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "MetaLayer", "(", "edge_m", ",", "node_m", ",", "global_m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.MetaGraphLayer.clear": [[512, 516], ["meta_graph_net.MetaGraphLayer.op.edge_model.clear", "meta_graph_net.MetaGraphLayer.op.node_model.clear", "meta_graph_net.MetaGraphLayer.op.global_model.clear"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.MetaGraphLayer.clear", "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.MetaGraphLayer.clear", "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.MetaGraphLayer.clear"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "op", ".", "edge_model", ".", "clear", "(", ")", "\n", "self", ".", "op", ".", "node_model", ".", "clear", "(", ")", "\n", "self", ".", "op", ".", "global_model", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.MetaGraphLayer.forward": [[517, 522], ["meta_graph_net.MetaGraphLayer.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", ",", "edge_index", ",", "edge_attr", ",", "u", "=", "input", "\n", "batch", "=", "None", "\n", "x", ",", "edge_attr", ",", "u", "=", "self", ".", "op", "(", "x", ",", "edge_index", ",", "edge_attr", "=", "edge_attr", ",", "u", "=", "u", ",", "batch", "=", "batch", ")", "\n", "return", "x", ",", "edge_index", ",", "edge_attr", ",", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.SharpSigmoid.__init__": [[527, 531], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "center", ",", "sharp", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "SharpSigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c", "=", "center", "\n", "self", ".", "sharp", "=", "sharp", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.SharpSigmoid.forward": [[531, 533], ["torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "1", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "(", "input", "+", "self", ".", "c", ")", "/", "self", ".", "sharp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.MetaGraphNet.__init__": [[802, 943], ["torch.nn.Module.__init__", "logging.getLogger", "actN.append", "actE.append", "soft_prune_edges_l.append", "rcrhdn_size.append", "torch.nn.Sequential", "torch.nn.Sequential", "actN.append", "actE.append", "actN.append", "actE.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "meta_graph_net.MetaGraphLayer", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "NotImplemented", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "type", "meta_graph_net.EdgeFunc", "meta_graph_net.NodeAttFunc", "meta_graph_net.MetaGraphNet.__init__.getEdgeFunc"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "# predCount, base_0, base_1):", "\n", "        ", "super", "(", "MetaGraphNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "validate_input", "=", "config", "[", "'debug_check_input'", "]", "if", "'debug_check_input'", "in", "config", "else", "False", "\n", "\n", "\n", "self", ".", "useRepRes", "=", "config", "[", "'use_repetition_res'", "]", "if", "'use_repetition_res'", "in", "config", "else", "False", "\n", "#how many times to re-apply main layers", "\n", "self", ".", "repetitions", "=", "config", "[", "'repetitions'", "]", "if", "'repetitions'", "in", "config", "else", "1", "\n", "self", ".", "randomReps", "=", "False", "\n", "\n", "self", ".", "undirected", "=", "(", "not", "config", "[", "'directed'", "]", ")", "if", "'directed'", "in", "config", "else", "True", "\n", "\n", "ch", "=", "config", "[", "'in_channels'", "]", "\n", "layerType", "=", "config", "[", "'layer_type'", "]", "if", "'layer_type'", "in", "config", "else", "'attention'", "\n", "layerCount", "=", "config", "[", "'num_layers'", "]", "if", "'num_layers'", "in", "config", "else", "3", "\n", "numNodeOut", "=", "config", "[", "'node_out'", "]", "\n", "numEdgeOut", "=", "config", "[", "'edge_out'", "]", "\n", "norm", "=", "config", "[", "'norm'", "]", "if", "'norm'", "in", "config", "else", "'group'", "\n", "dropout", "=", "config", "[", "'dropout'", "]", "if", "'dropout'", "in", "config", "else", "0.1", "\n", "hasEdgeInfo", "=", "config", "[", "'input_edge'", "]", "if", "'input_edge'", "in", "config", "else", "True", "\n", "\n", "if", "'better_norm_attention'", "in", "config", "and", "config", "[", "'better_norm_attention'", "]", ":", "\n", "            ", "node_att_thinker", "=", "'add'", "\n", "node_att_more_norm", "=", "True", "\n", "", "else", ":", "\n", "            ", "node_att_thinker", "=", "'cat'", "\n", "node_att_more_norm", "=", "False", "\n", "\n", "", "if", "'node_att_thinker'", "in", "config", ":", "\n", "            ", "node_att_thinker", "=", "config", "[", "'node_att_thinker'", "]", "\n", "\n", "", "edge_sep_norm", "=", "'better_norm_edge'", "in", "config", "and", "config", "[", "'better_norm_edge'", "]", "\n", "\n", "\n", "self", ".", "trackAtt", "=", "False", "\n", "\n", "actN", "=", "[", "]", "\n", "actE", "=", "[", "]", "\n", "if", "'group'", "in", "norm", ":", "\n", "            ", "actN", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", ")", ",", "ch", ")", ")", "\n", "actE", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "ch", ")", ",", "ch", ")", ")", "\n", "", "elif", "norm", ":", "\n", "            ", "raise", "NotImplemented", "(", "'Havent implemented other norms ({}) in MetaGraphNet'", ".", "format", "(", "norm", ")", ")", "\n", "", "if", "dropout", ":", "\n", "            ", "actN", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout", ",", "inplace", "=", "True", ")", ")", "\n", "actE", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout", ",", "inplace", "=", "True", ")", ")", "\n", "", "actN", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "actE", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "if", "numNodeOut", ">", "0", ":", "\n", "            ", "self", ".", "node_out_layers", "=", "nn", ".", "Sequential", "(", "*", "actN", ",", "nn", ".", "Linear", "(", "ch", ",", "numNodeOut", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "node_out_layers", "=", "lambda", "x", ":", "None", "\n", "", "if", "numEdgeOut", ">", "0", ":", "\n", "            ", "self", ".", "edge_out_layers", "=", "nn", ".", "Sequential", "(", "*", "actE", ",", "nn", ".", "Linear", "(", "ch", ",", "numEdgeOut", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "edge_out_layers", "=", "lambda", "x", ":", "None", "\n", "\n", "", "useGlobal", "=", "None", "\n", "\n", "rcrhdn_size", "=", "config", "[", "'rcrhdn_size'", "]", "if", "'rcrhdn_size'", "in", "config", "else", "0", "\n", "avgEdges", "=", "config", "[", "'avg_edges'", "]", "if", "'avg_edges'", "in", "config", "else", "False", "\n", "soft_prune_edges", "=", "config", "[", "'soft_prune_edges'", "]", "if", "'soft_prune_edges'", "in", "config", "else", "False", "\n", "if", "'prune_with_classifier'", "in", "config", "and", "config", "[", "'prune_with_classifier'", "]", ":", "\n", "            ", "edge_decider", "=", "self", ".", "edge_out_layers", "\n", "", "else", ":", "\n", "            ", "edge_decider", "=", "None", "\n", "", "if", "soft_prune_edges", "==", "'last'", ":", "\n", "            ", "soft_prune_edges_l", "=", "(", "[", "False", "]", "*", "(", "layerCount", "-", "1", ")", ")", "+", "[", "True", "]", "\n", "", "elif", "type", "(", "soft_prune_edges", ")", "is", "int", ":", "\n", "            ", "soft_prune_edges_l", "=", "(", "[", "True", "]", "*", "soft_prune_edges", ")", "+", "(", "[", "False", "]", "*", "(", "layerCount", "-", "1", "-", "soft_prune_edges", ")", ")", "\n", "", "elif", "soft_prune_edges", ":", "\n", "            ", "soft_prune_edges_l", "=", "[", "True", "]", "*", "layerCount", "\n", "", "else", ":", "\n", "            ", "soft_prune_edges_l", "=", "[", "False", "]", "*", "layerCount", "\n", "", "soft_prune_edges_l", ".", "append", "(", "False", ")", "\n", "rcrhdn_size", "=", "[", "rcrhdn_size", "]", "*", "layerCount", "\n", "rcrhdn_size", ".", "append", "(", "0", ")", "\n", "\n", "if", "layerType", "==", "'attention'", ":", "\n", "            ", "att_mod", "=", "config", "[", "'att_mod'", "]", "if", "'att_mod'", "in", "config", "else", "False", "\n", "relu_node_act", "=", "config", "[", "'relu_node_act'", "]", "if", "'relu_node_act'", "in", "config", "else", "0", "\n", "heads", "=", "config", "[", "'num_heads'", "]", "if", "'num_heads'", "in", "config", "else", "4", "\n", "\n", "def", "getEdgeFunc", "(", "i", ")", ":", "\n", "                ", "return", "EdgeFunc", "(", "ch", ",", "dropout", "=", "dropout", ",", "norm", "=", "norm", ",", "useRes", "=", "True", ",", "useGlobal", "=", "useGlobal", ",", "hidden_ch", "=", "None", ",", "soft_prune_edges", "=", "soft_prune_edges_l", "[", "i", "]", ",", "edge_decider", "=", "edge_decider", ",", "rcrhdn_size", "=", "rcrhdn_size", "[", "i", "]", ",", "avgEdges", "=", "avgEdges", ",", "sep_norm", "=", "edge_sep_norm", ")", "\n", "", "def", "getNodeFunc", "(", "i", ")", ":", "\n", "                ", "return", "NodeAttFunc", "(", "ch", ",", "heads", "=", "heads", ",", "dropout", "=", "dropout", ",", "norm", "=", "norm", ",", "useRes", "=", "True", ",", "useGlobal", "=", "useGlobal", ",", "hidden_ch", "=", "None", ",", "agg_thinker", "=", "node_att_thinker", ",", "rcrhdn_size", "=", "rcrhdn_size", "[", "i", "]", ",", "att_mod", "=", "att_mod", ",", "more_norm", "=", "node_att_more_norm", ")", "\n", "", "def", "getGlobalFunc", "(", "i", ")", ":", "\n", "                ", "if", "useGlobal", ":", "\n", "                    ", "return", "GlobalFunc", "(", "ch", ",", "heads", "=", "heads", ",", "dropout", "=", "dropout", ",", "norm", "=", "norm", ",", "useRes", "=", "True", ",", "hidden_ch", "=", "None", ",", "rcrhdn_size", "=", "rcrhdn_size", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "return", "NoGlobalFunc", "(", ")", "\n", "\n", "\n", "#layers = [MetaGraphAttentionLayerOLD(ch,heads=heads,dropout=dropout,norm=norm,useRes=True,useGlobal=False,hidden_ch=None,agg_thinker='cat',soft_prune_edges=soft_prune_edges_l[i],edge_decider=edge_decider,rcrhdn_size=rcrhdn_size[i],relu_node_act=relu_node_act,att_mod=att_mod,avgEdges=avgEdges) for i in range(layerCount)]", "\n", "", "", "", "elif", "layerType", "==", "'tree'", ":", "\n", "            ", "def", "getEdgeFunc", "(", "i", ")", ":", "\n", "                ", "return", "EdgeFunc", "(", "ch", ",", "dropout", "=", "dropout", ",", "norm", "=", "norm", ",", "useRes", "=", "True", ",", "useGlobal", "=", "useGlobal", ",", "hidden_ch", "=", "None", ",", "soft_prune_edges", "=", "soft_prune_edges_l", "[", "i", "]", ",", "edge_decider", "=", "edge_decider", ",", "rcrhdn_size", "=", "rcrhdn_size", "[", "i", "]", ",", "avgEdges", "=", "avgEdges", ")", "\n", "", "def", "getNodeFunc", "(", "i", ")", ":", "\n", "                ", "return", "NodeTreeFunc", "(", "ch", ",", "dropout", "=", "dropout", ",", "norm", "=", "norm", ",", "useRes", "=", "True", ",", "useGlobal", "=", "useGlobal", ",", "hidden_ch", "=", "None", ",", "rcrhdn_size", "=", "rcrhdn_size", "[", "i", "]", ")", "\n", "", "def", "getGlobalFunc", "(", "i", ")", ":", "\n", "                ", "if", "useGlobal", ":", "\n", "                    ", "return", "GlobalFunc", "(", "ch", ",", "heads", "=", "heads", ",", "dropout", "=", "dropout", ",", "norm", "=", "norm", ",", "useRes", "=", "True", ",", "hidden_ch", "=", "None", ",", "rcrhdn_size", "=", "rcrhdn_size", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "return", "NoGlobalFunc", "(", ")", "\n", "", "", "", "elif", "layerType", "==", "'mean'", ":", "\n", "            ", "def", "getEdgeFunc", "(", "i", ")", ":", "\n", "                ", "return", "EdgeFunc", "(", "ch", ",", "dropout", "=", "dropout", ",", "norm", "=", "norm", ",", "useRes", "=", "True", ",", "useGlobal", "=", "useGlobal", ",", "hidden_ch", "=", "None", ",", "soft_prune_edges", "=", "soft_prune_edges_l", "[", "i", "]", ",", "edge_decider", "=", "edge_decider", ",", "rcrhdn_size", "=", "rcrhdn_size", ",", "avgEdges", "=", "avgEdges", ")", "\n", "", "def", "getNodeFunc", "(", "i", ")", ":", "\n", "                ", "return", "NodeMeanFunc", "(", "ch", ",", "heads", "=", "heads", ",", "dropout", "=", "dropout", ",", "norm", "=", "norm", ",", "useRes", "=", "True", ",", "useGlobal", "=", "useGlobal", ",", "hidden_ch", "=", "None", ",", "agg_thinker", "=", "'cat'", ",", "rcrhdn_size", "=", "rcrhdn_size", ",", "att_mod", "=", "att_mod", ")", "\n", "", "def", "getGlobalFunc", "(", "i", ")", ":", "\n", "                ", "if", "useGlobal", ":", "\n", "                    ", "return", "GlobalFunc", "(", "ch", ",", "heads", "=", "heads", ",", "dropout", "=", "dropout", ",", "norm", "=", "norm", ",", "useRes", "=", "True", ",", "hidden_ch", "=", "None", ",", "rcrhdn_size", "=", "rcrhdn_size", ")", "\n", "", "else", ":", "\n", "                    ", "return", "NoGlobalFunc", "(", ")", "\n", "", "", "layers", "=", "[", "MetaGraphMeanLayer", "(", "ch", ",", "False", ")", "for", "i", "in", "range", "(", "layerCount", ")", "]", "\n", "self", ".", "main_layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Unknown layer type: {}'", ".", "format", "(", "layerType", ")", ")", "\n", "exit", "(", ")", "\n", "", "layers", "=", "[", "MetaGraphLayer", "(", "getEdgeFunc", "(", "i", ")", ",", "getNodeFunc", "(", "i", ")", ",", "getGlobalFunc", "(", "i", ")", ")", "for", "i", "in", "range", "(", "layerCount", ")", "]", "\n", "self", ".", "main_layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "input_layers", "=", "None", "\n", "if", "'encode_type'", "in", "config", ":", "\n", "            ", "inputLayerType", "=", "config", "[", "'encode_type'", "]", "\n", "if", "'fc'", "in", "inputLayerType", ":", "\n", "                ", "infeats", "=", "config", "[", "'infeats'", "]", "\n", "infeatsEdge", "=", "config", "[", "'infeats_edge'", "]", "if", "'infeats_edge'", "in", "config", "else", "0", "\n", "self", ".", "input_layers", "=", "MetaGraphFCEncoderLayer", "(", "infeats", ",", "infeatsEdge", ",", "ch", ")", "\n", "", "if", "inputLayerType", "!=", "'fc'", ":", "\n", "#layer = MetaGraphAttentionLayerOLD(ch,heads=heads,dropout=dropout,norm=norm,useRes=True,useGlobal=False,hidden_ch=None,agg_thinker='cat',relu_node_act=relu_node_act,att_mod=att_mod,avgEdges=avgEdges)", "\n", "                ", "layer", "=", "MetaGraphLayer", "(", "getEdgeFunc", "(", "-", "1", ")", ",", "getNodeFunc", "(", "-", "1", ")", ",", "getGlobalFunc", "(", "-", "1", ")", ")", "\n", "if", "self", ".", "input_layers", "is", "None", ":", "\n", "                    ", "self", ".", "input_layers", "=", "layer", "\n", "", "else", ":", "\n", "                    ", "self", ".", "input_layers", "=", "nn", ".", "Sequential", "(", "self", ".", "input_layers", ",", "layer", ")", "\n", "", "", "self", ".", "force_encoding", "=", "config", "[", "'force_encoding'", "]", "if", "'force_encoding'", "in", "config", "else", "False", "\n", "", "else", ":", "\n", "            ", "assert", "(", "hasEdgeInfo", "==", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.MetaGraphNet.forward": [[947, 1033], ["range", "meta_graph_net.MetaGraphNet.input_layers", "meta_graph_net.MetaGraphNet.main_layers", "meta_graph_net.MetaGraphNet.node_out_layers", "meta_graph_net.MetaGraphNet.edge_out_layers", "layer.clear", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "node_features.max", "numpy.random.randint", "meta_graph_net.MetaGraphNet.attn.append", "meta_graph_net.MetaGraphNet.node_out_layers", "meta_graph_net.MetaGraphNet.edge_out_layers", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "node_features.max", "edge_features.max", "node_features.min", "edge_features.size", "edge_features.max", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "meta_graph_net.MetaGraphNet.attn.append", "torch.stack.size", "torch.stack.size", "torch.stack.size", "torch.stack.size", "edge_features.size", "edge_features.size"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.MetaGraphLayer.clear"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "node_features", ",", "edge_indexes", ",", "edge_features", ",", "u_features", "=", "input", "\n", "if", "self", ".", "validate_input", ":", "\n", "            ", "assert", "(", "node_features", ".", "min", "(", ")", "<", "0", "and", "'Im assuming the input has not been ReLUed'", ")", "\n", "assert", "(", "node_features", ".", "max", "(", ")", "<", "900", ")", "\n", "assert", "(", "edge_features", ".", "size", "(", "0", ")", "==", "0", "or", "edge_features", ".", "max", "(", ")", "<", "900", ")", "\n", "", "if", "self", ".", "randomReps", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "repetitions", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "minReps", ",", "self", ".", "maxReps", "+", "1", ")", "\n", "", "else", ":", "\n", "                ", "repetitions", "=", "self", ".", "maxReps", "\n", "", "", "else", ":", "\n", "            ", "repetitions", "=", "self", ".", "repetitions", "\n", "\n", "#if self.useRes:", "\n", "#node_featuresA = self.act_layers(node_features)", "\n", "#edge_featuresA = self.act_layers(edge_features)", "\n", "#if u_features is not None:", "\n", "#    u_featuresA = self.act_layers(u_features)", "\n", "#else:", "\n", "#    u_featuresA = None", "\n", "\n", "", "out_nodes", "=", "[", "]", "\n", "out_edges", "=", "[", "]", "#for holding each repititions outputs, so we can backprop on all of them", "\n", "\n", "if", "self", ".", "trackAtt", ":", "\n", "            ", "self", ".", "attn", "=", "[", "]", "\n", "\n", "", "if", "self", ".", "input_layers", "is", "not", "None", ":", "\n", "            ", "node_features", ",", "edge_indexes", ",", "edge_features", ",", "u_features", "=", "self", ".", "input_layers", "(", "(", "node_features", ",", "edge_indexes", ",", "edge_features", ",", "u_features", ")", ")", "\n", "if", "self", ".", "trackAtt", ":", "\n", "                ", "self", ".", "attn", ".", "append", "(", "self", ".", "input_layers", ".", "mhAtt", ".", "attn", ")", "\n", "\n", "", "if", "self", ".", "force_encoding", ":", "\n", "                ", "node_out", "=", "self", ".", "node_out_layers", "(", "node_features", ")", "\n", "edge_out", "=", "self", ".", "edge_out_layers", "(", "edge_features", ")", "\n", "\n", "if", "node_out", "is", "not", "None", ":", "\n", "                    ", "out_nodes", ".", "append", "(", "node_out", ")", "\n", "", "if", "edge_out", "is", "not", "None", ":", "\n", "                    ", "out_edges", ".", "append", "(", "edge_out", ")", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "            ", "node_featuresT", ",", "edge_indexesT", ",", "edge_featuresT", ",", "u_featuresT", "=", "self", ".", "main_layers", "(", "(", "node_features", ",", "edge_indexes", ",", "edge_features", ",", "u_features", ")", ")", "\n", "if", "self", ".", "trackAtt", ":", "\n", "                ", "for", "layer", "in", "self", ".", "main_layers", ":", "\n", "                    ", "self", ".", "attn", ".", "append", "(", "layer", ".", "mhAtt", ".", "attn", ")", "\n", "", "", "if", "self", ".", "useRepRes", ":", "\n", "                ", "node_features", "=", "node_features", "+", "node_featuresT", "\n", "edge_features", "=", "edge_features", "+", "edge_featuresT", "\n", "if", "u_features", "is", "not", "None", ":", "\n", "                    ", "u_features", "=", "u_features", "+", "u_featuresT", "\n", "", "else", ":", "\n", "                    ", "u_features", "=", "u_featuresT", "\n", "", "", "else", ":", "\n", "                ", "node_features", "=", "node_featuresT", "\n", "edge_features", "=", "edge_featuresT", "\n", "u_features", "=", "u_featuresT", "\n", "\n", "", "node_out", "=", "self", ".", "node_out_layers", "(", "node_features", ")", "\n", "edge_out", "=", "self", ".", "edge_out_layers", "(", "edge_features", ")", "\n", "\n", "if", "node_out", "is", "not", "None", ":", "\n", "                ", "out_nodes", ".", "append", "(", "node_out", ")", "\n", "", "if", "edge_out", "is", "not", "None", ":", "\n", "                ", "out_edges", ".", "append", "(", "edge_out", ")", "\n", "", "", "for", "layer", "in", "self", ".", "main_layers", ":", "\n", "            ", "layer", ".", "clear", "(", ")", "\n", "\n", "", "if", "len", "(", "out_nodes", ")", ">", "0", ":", "\n", "            ", "out_nodes", "=", "torch", ".", "stack", "(", "out_nodes", ",", "dim", "=", "1", ")", "#we introduce a 'time' dimension", "\n", "", "else", ":", "\n", "            ", "out_nodes", "=", "None", "\n", "", "if", "len", "(", "out_edges", ")", ">", "0", ":", "\n", "            ", "out_edges", "=", "torch", ".", "stack", "(", "out_edges", ",", "dim", "=", "1", ")", "#we introduce a 'time' dimension, indexXtimeXclass", "\n", "", "else", ":", "\n", "            ", "out_edges", "=", "None", "\n", "\n", "", "if", "self", ".", "undirected", ":", "\n", "            ", "out_edges", "=", "(", "out_edges", "[", ":", "out_edges", ".", "size", "(", "0", ")", "//", "2", "]", "+", "out_edges", "[", "out_edges", ".", "size", "(", "0", ")", "//", "2", ":", "]", ")", "/", "2", "\n", "edge_features", "=", "(", "edge_features", "[", ":", "edge_features", ".", "size", "(", "0", ")", "//", "2", "]", "+", "edge_features", "[", "edge_features", ".", "size", "(", "0", ")", "//", "2", ":", "]", ")", "/", "2", "\n", "", "if", "self", ".", "validate_input", ":", "\n", "            ", "assert", "(", "node_features", ".", "max", "(", ")", "<", "1000", ")", "\n", "assert", "(", "edge_features", ".", "max", "(", ")", "<", "1000", ")", "\n", "\n", "", "return", "out_nodes", ",", "out_edges", ",", "node_features", ",", "edge_features", ",", "u_features", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.meta_graph_net.MetaGraphNet.summary": [[1036, 1044], ["filter", "sum", "meta_graph_net.MetaGraphNet.logger.info", "meta_graph_net.MetaGraphNet.logger.info", "meta_graph_net.MetaGraphNet.parameters", "numpy.prod", "p.size"], "methods", ["None"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Model summary\n        \"\"\"", "\n", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Trainable parameters: {}'", ".", "format", "(", "params", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "self", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.coordconv.CoordConv.__init__": [[6, 40], ["torch.nn.Module.__init__", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "features", "=", "'wave'", ")", ":", "\n", "        ", "super", "(", "CoordConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "if", "'wave'", "in", "features", ":", "\n", "            ", "if", "'Big'", "in", "features", ":", "\n", "                ", "self", ".", "numChX", "=", "10", "\n", "self", ".", "numChY", "=", "7", "\n", "self", ".", "minCycle", "=", "8", "\n", "self", ".", "maxCycleX", "=", "2000", "\n", "self", ".", "maxCycleY", "=", "1400", "\n", "", "elif", "'Med'", "in", "features", ":", "\n", "                ", "self", ".", "numChX", "=", "10", "\n", "self", ".", "numChY", "=", "7", "\n", "self", ".", "minCycle", "=", "4", "\n", "self", ".", "maxCycleX", "=", "1000", "\n", "self", ".", "maxCycleY", "=", "700", "\n", "", "elif", "'Small'", "in", "features", ":", "\n", "                ", "self", ".", "numChX", "=", "10", "\n", "self", ".", "numChY", "=", "7", "\n", "self", ".", "minCycle", "=", "2", "\n", "self", ".", "maxCycleX", "=", "500", "\n", "self", ".", "maxCycleY", "=", "350", "\n", "", "else", ":", "\n", "                ", "self", ".", "numChX", "=", "5", "\n", "self", ".", "numChY", "=", "4", "\n", "self", ".", "minCycle", "=", "16", "\n", "self", ".", "maxCycleX", "=", "1000", "\n", "self", ".", "maxCycleY", "=", "700", "\n", "\n", "", "self", ".", "cycleStepX", "=", "(", "self", ".", "maxCycleX", "-", "self", ".", "minCycle", ")", "/", "(", "(", "self", ".", "numChX", "-", "1", ")", "**", "2", ")", "\n", "self", ".", "cycleStepY", "=", "(", "self", ".", "maxCycleY", "-", "self", ".", "minCycle", ")", "/", "(", "(", "self", ".", "numChY", "-", "1", ")", "**", "2", ")", "\n", "self", ".", "numExtra", "=", "self", ".", "numChX", "+", "self", ".", "numChY", "\n", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_ch", "+", "self", ".", "numExtra", ",", "out_ch", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.coordconv.CoordConv.forward": [[41, 73], ["input.size", "input.size", "input.size", "extra[].repeat().to", "torch.cat", "coordconv.CoordConv.conv", "torch.FloatTensor", "range", "extraX[].expand", "torch.FloatTensor", "range", "extraY[].expand", "torch.cat", "numpy.random.randint", "numpy.random.randint", "torch.arange", "torch.sin", "torch.arange", "torch.sin", "extra[].repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "dimY", "=", "input", ".", "size", "(", "2", ")", "\n", "dimX", "=", "input", ".", "size", "(", "3", ")", "\n", "if", "'wave'", "in", "self", ".", "features", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "xOffset", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "maxCycleX", ")", "\n", "yOffset", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "maxCycleY", ")", "\n", "", "else", ":", "\n", "                ", "xOffset", "=", "0", "\n", "yOffset", "=", "0", "\n", "\n", "", "extraX", "=", "torch", ".", "FloatTensor", "(", "self", ".", "numChX", ",", "dimX", ")", "\n", "x_range", "=", "torch", ".", "arange", "(", "dimX", ",", "dtype", "=", "torch", ".", "float64", ")", "+", "xOffset", "\n", "for", "i", "in", "range", "(", "self", ".", "numChX", ")", ":", "\n", "                ", "cycle", "=", "self", ".", "minCycle", "+", "self", ".", "cycleStepX", "*", "(", "i", "**", "2", ")", "\n", "extraX", "[", "i", "]", "=", "torch", ".", "sin", "(", "x_range", "*", "np", ".", "pi", "*", "2", "/", "cycle", ")", "\n", "", "extraX", "=", "extraX", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "self", ".", "numChX", ",", "dimY", ",", "dimX", ")", "\n", "\n", "extraY", "=", "torch", ".", "FloatTensor", "(", "self", ".", "numChY", ",", "dimY", ")", "\n", "y_range", "=", "torch", ".", "arange", "(", "dimY", ",", "dtype", "=", "torch", ".", "float64", ")", "+", "yOffset", "\n", "for", "i", "in", "range", "(", "self", ".", "numChY", ")", ":", "\n", "                ", "cycle", "=", "self", ".", "minCycle", "+", "self", ".", "cycleStepY", "*", "(", "i", "**", "2", ")", "\n", "extraY", "[", "i", "]", "=", "torch", ".", "sin", "(", "y_range", "*", "np", ".", "pi", "*", "2", "/", "cycle", ")", "\n", "", "extraY", "=", "extraY", "[", ":", ",", ":", ",", "None", "]", ".", "expand", "(", "self", ".", "numChY", ",", "dimY", ",", "dimX", ")", "\n", "extra", "=", "torch", ".", "cat", "(", "(", "extraY", ",", "extraX", ")", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "", "extra", "=", "extra", "[", "None", ",", "...", "]", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "data", "=", "torch", ".", "cat", "(", "(", "input", ",", "extra", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "self", ".", "conv", "(", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.binary_pair_real.BinaryPairReal.__init__": [[13, 85], ["torch.nn.Module.__init__", "net_builder.make_layers", "torch.nn.Sequential", "torch.nn.Sequential", "net_builder.make_layers", "torch.nn.Sequential", "torch.nn.Sequential", "net_builder.make_layers", "torch.nn.Sequential", "torch.nn.Sequential", "net_builder.make_layers", "torch.nn.Sequential", "torch.nn.Sequential", "type", "net_builder.make_layers", "torch.nn.Sequential", "torch.nn.Sequential", "torch.load", "torch.load", "torch.load", "torch.load", "binary_pair_real.BinaryPairReal.shape_layers.parameters", "torch.nn.Parameter", "torch.nn.Parameter", "binary_pair_real.BinaryPairReal.shape_layers.load_state_dict", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "eval"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "# predCount, base_0, base_1):", "\n", "        ", "super", "(", "BinaryPairReal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "undirected", "=", "(", "not", "config", "[", "'directed'", "]", ")", "if", "'directed'", "in", "config", "else", "True", "\n", "numBBOut", "=", "config", "[", "'bb_out'", "]", "if", "'bb_out'", "in", "config", "else", "(", "config", "[", "'node_out'", "]", "if", "'node_out'", "in", "config", "else", "0", ")", "\n", "numRelOut", "=", "config", "[", "'rel_out'", "]", "if", "'rel_out'", "in", "config", "else", "(", "config", "[", "'edge_out'", "]", "if", "'edge_out'", "in", "config", "else", "1", ")", "\n", "\n", "in_ch", "=", "config", "[", "'in_channels'", "]", "\n", "\n", "norm", "=", "config", "[", "'norm'", "]", "if", "'norm'", "in", "config", "else", "'group_norm'", "\n", "dropout", "=", "config", "[", "'dropout'", "]", "if", "'dropout'", "in", "config", "else", "True", "\n", "\n", "self", ".", "use_node_for_rel_pred", "=", "config", "[", "'use_node_for_rel_pred'", "]", "if", "'use_node_for_rel_pred'", "in", "config", "else", "False", "\n", "self", ".", "in_ch", "=", "in_ch", "\n", "if", "self", ".", "use_node_for_rel_pred", ":", "\n", "            ", "rel_in_ch", "=", "in_ch", "*", "3", "\n", "", "else", ":", "\n", "            ", "rel_in_ch", "=", "in_ch", "\n", "\n", "", "layer_desc", "=", "config", "[", "'layers'", "]", "if", "'layers'", "in", "config", "else", "[", "'FC256'", ",", "'FC256'", ",", "'FC256'", "]", "\n", "if", "'FCnR'", "in", "layer_desc", "[", "-", "1", "]", ":", "#no ReLU", "\n", "            ", "assert", "'Norm'", "in", "layer_desc", "[", "0", "]", "\n", "act", "=", "[", "'GroupNorm'", ",", "'ReLU'", "]", "\n", "", "else", ":", "\n", "            ", "assert", "'Norm'", "not", "in", "layer_desc", "[", "0", "]", "\n", "act", "=", "[", "]", "\n", "", "layer_desc", "=", "[", "rel_in_ch", "]", "+", "layer_desc", "#+['FCnR{}'.format(numRelOut)]", "\n", "layers", ",", "last_ch_relC", "=", "make_layers", "(", "layer_desc", ",", "norm", "=", "norm", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "layersRel", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "final", ",", "fin_ch_iout", "=", "make_layers", "(", "[", "last_ch_relC", ",", "*", "act", ",", "'FCnR{}'", ".", "format", "(", "numRelOut", ")", "]", ",", "norm", "=", "norm", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "finalRel", "=", "nn", ".", "Sequential", "(", "*", "final", ")", "\n", "\n", "if", "numBBOut", ">", "0", ":", "\n", "            ", "layer_desc", "=", "config", "[", "'layers_bb'", "]", "if", "'layers_bb'", "in", "config", "else", "[", "'FC256'", ",", "'FC256'", ",", "'FC256'", "]", "\n", "layer_desc", "=", "[", "in_ch", "]", "+", "layer_desc", "#+['FCnR{}'.format(numBBOut)]", "\n", "layers", ",", "last_ch_bbC", "=", "make_layers", "(", "layer_desc", ",", "norm", "=", "norm", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "layersBB", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "final", ",", "fin_ch_out", "=", "make_layers", "(", "[", "last_ch_bbC", ",", "*", "act", ",", "'FCnR{}'", ".", "format", "(", "numBBOut", ")", "]", ",", "norm", "=", "norm", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "finalBB", "=", "nn", ".", "Sequential", "(", "*", "final", ")", "\n", "\n", "#This is written to by the PairingGraph object (which holds this one)", "\n", "", "self", ".", "numShapeFeats", "=", "config", "[", "'num_shape_feats'", "]", "if", "'num_shape_feats'", "in", "config", "else", "16", "\n", "\n", "\n", "\n", "if", "'shape_layers'", "in", "config", ":", "\n", "            ", "if", "type", "(", "config", "[", "'shape_layers'", "]", ")", "is", "list", ":", "\n", "                ", "layer_desc", "=", "config", "[", "'shape_layers'", "]", "\n", "layer_desc", "=", "[", "self", ".", "numShapeFeats", "]", "+", "layer_desc", "+", "[", "'FCnR{}'", ".", "format", "(", "numRelOut", ")", "]", "\n", "layers", ",", "last_ch_relC", "=", "make_layers", "(", "layer_desc", ",", "norm", "=", "norm", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "shape_layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "frozen_shape_layers", "=", "False", "\n", "", "else", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'shape_layers'", "]", ")", "\n", "shape_config", "=", "checkpoint", "[", "'config'", "]", "[", "'model'", "]", "\n", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "                    ", "self", ".", "shape_layers", "=", "eval", "(", "checkpoint", "[", "'config'", "]", "[", "'arch'", "]", ")", "(", "shape_config", ")", "\n", "self", ".", "shape_layers", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "shape_layers", "=", "checkpoint", "[", "'model'", "]", "\n", "", "for", "param", "in", "self", ".", "shape_layers", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "frozen_shape_layers", "=", "True", "\n", "", "if", "'weight_split'", "in", "config", ":", "\n", "                ", "if", "type", "(", "config", "[", "'weight_split'", "]", ")", "is", "float", ":", "\n", "                    ", "init", "=", "config", "[", "'weight_split'", "]", "\n", "", "else", ":", "\n", "                    ", "init", "=", "0.5", "\n", "", "self", ".", "split_weighting", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "init", ",", "requires_grad", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "split_weighting", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "shape_layers", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.binary_pair_real.BinaryPairReal.forward": [[88, 133], ["binary_pair_real.BinaryPairReal.layersRel", "binary_pair_real.BinaryPairReal.finalRel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "binary_pair_real.BinaryPairReal.shape_layers", "binary_pair_real.BinaryPairReal.layersBB", "binary_pair_real.BinaryPairReal.finalBB", "binary_pair_real.BinaryPairReal.shape_layers.eval", "binary_pair_real.BinaryPairReal.split_weighting.clamp", "binary_pair_real.BinaryPairReal.size", "binary_pair_real.BinaryPairReal.size", "binary_pair_real.BinaryPairReal.size", "binary_pair_real.BinaryPairReal.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "features", ",", "adjacencyMatrix", "=", "None", ",", "numBBs", "=", "None", ")", ":", "\n", "        ", "if", "adjacencyMatrix", "is", "None", "and", "numBBs", "is", "None", ":", "\n", "            ", "node_features", ",", "edge_indexes", ",", "edge_features", ",", "u_features", "=", "features", "#graph input", "\n", "", "else", ":", "\n", "            ", "edge_features", "=", "features", "[", "numBBs", ":", "]", "\n", "if", "numBBs", ">", "0", ":", "\n", "                ", "node_features", "=", "features", "[", ":", "numBBs", "]", "\n", "", "else", ":", "\n", "                ", "node_features", "=", "None", "\n", "", "", "if", "self", ".", "use_node_for_rel_pred", ":", "\n", "#set up both directions of relationships, appending node features to edge features", "\n", "#node_feats_for_edges = edge_features.new_empty(edge_features.size(0),self.in_ch*2)", "\n", "#for i,(n1,n2) in enumerate(edge_indexes):", "\n", "#    node_feats_for_edges[i,0:self.in_ch] = node_features[n1]", "\n", "#    node_feats_for_edges[i,self.in_ch:] = node_features[n2]", "\n", "#    node_feats_for_edges[i+len(edge_indexes),0:self.in_ch] = node_features[n2]", "\n", "#    node_feats_for_edges[i+len(edge_indexes),self.in_ch:] = node_features[n1]", "\n", "#edge_features = torch.cat([edge_features.repeat(2,1),node_feats_for_edges],dim=1)", "\n", "            ", "edge_features", "=", "torch", ".", "cat", "(", "[", "edge_features", ",", "node_features", "[", "edge_indexes", "[", "0", "]", "]", ",", "node_features", "[", "edge_indexes", "[", "1", "]", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "featsRel", "=", "self", ".", "layersRel", "(", "edge_features", ")", "\n", "res", "=", "self", ".", "finalRel", "(", "featsRel", ")", "\n", "\n", "if", "self", ".", "shape_layers", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "frozen_shape_layers", ":", "\n", "                ", "self", ".", "shape_layers", ".", "eval", "(", ")", "\n", "", "res2", "=", "self", ".", "shape_layers", "(", "edge_features", "[", ":", ",", "-", "self", ".", "numShapeFeats", ":", "]", ")", "\n", "if", "self", ".", "split_weighting", "is", "None", ":", "\n", "                ", "res", "=", "(", "res", "+", "res2", ")", "/", "2", "\n", "", "else", ":", "\n", "                ", "weight", "=", "self", ".", "split_weighting", ".", "clamp", "(", "0", ",", "1", ")", "\n", "res", "=", "weight", "*", "res", "+", "(", "1", "-", "weight", ")", "*", "res2", "\n", "", "", "if", "node_features", "is", "not", "None", ":", "\n", "            ", "featsB", "=", "self", ".", "layersBB", "(", "node_features", ")", "\n", "resB", "=", "self", ".", "finalBB", "(", "featsB", ")", "\n", "", "else", ":", "\n", "            ", "featsB", "=", "None", "\n", "resB", "=", "None", "\n", "#import pdb;pdb.set_trace()", "\n", "", "if", "self", ".", "undirected", ":", "\n", "            ", "res", "=", "(", "res", "[", ":", "res", ".", "size", "(", "0", ")", "//", "2", "]", "+", "res", "[", "res", ".", "size", "(", "0", ")", "//", "2", ":", "]", ")", "/", "2", "\n", "featsRel", "=", "(", "featsRel", "[", ":", "featsRel", ".", "size", "(", "0", ")", "//", "2", "]", "+", "featsRel", "[", "featsRel", ".", "size", "(", "0", ")", "//", "2", ":", "]", ")", "/", "2", "\n", "", "if", "adjacencyMatrix", "is", "None", "and", "numBBs", "is", "None", ":", "\n", "            ", "return", "resB", "[", ":", ",", "None", ",", ":", "]", ",", "res", "[", ":", ",", "None", ",", ":", "]", ",", "featsB", ",", "featsRel", ",", "u_features", "\n", "", "else", ":", "\n", "            ", "return", "resB", ",", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.ncReLU.__init__": [[50, 53], ["torch.nn.Module.__init__", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ncReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "r", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.ncReLU.forward": [[53, 55], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_builder.ncReLU.r", "net_builder.ncReLU.r"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "self", ".", "r", "(", "input", ")", ",", "-", "self", ".", "r", "(", "-", "input", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.ResBlock.__init__": [[59, 121], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "layers.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "layers.append", "len", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "torch.nn.ReLU", "torch.nn.ReLU", "layers.append", "layers.append", "net_builder.ncReLU", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "layers.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "layers.append", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "layers.append", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "layers.append", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "layers.append", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "net_builder.getGroupSize", "net_builder.getGroupSize"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "dilation", "=", "1", ",", "norm", "=", "'batch'", ",", "downsample", "=", "False", ",", "dropout", "=", "True", ",", "secondKernel", "=", "3", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "skipFirstReLU", "=", "False", "\n", "if", "in_ch", "!=", "out_ch", ":", "\n", "            ", "assert", "(", "out_ch", "==", "2", "*", "in_ch", ")", "\n", "layers", ".", "append", "(", "ncReLU", "(", ")", ")", "\n", "skipFirstReLU", "=", "True", "\n", "", "if", "downsample", "==", "'unlearned'", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "2", ")", ")", "#could be learned, but this allows a better identity?", "\n", "", "if", "len", "(", "layers", ")", ">", "0", ":", "\n", "            ", "self", ".", "transform", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "lambda", "x", ":", "x", "\n", "\n", "", "if", "downsample", "and", "downsample", "!=", "'unlearned'", ":", "\n", "            ", "self", ".", "id_transform", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "conv1_stride", "=", "2", "\n", "padding", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "id_transform", "=", "lambda", "x", ":", "x", "\n", "conv1_stride", "=", "1", "\n", "padding", "=", "dilation", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "not", "skipFirstReLU", ":", "\n", "#I'm not sure if this is the best thing", "\n", "#there should be a way to normalize (mask after normalization?)", "\n", "            ", "if", "'batch'", "in", "norm", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ")", "\n", "", "elif", "'instance'", "in", "norm", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "out_ch", ")", ")", "\n", "", "elif", "'group'", "in", "norm", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "out_ch", ")", ",", "out_ch", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "if", "downsample", "and", "downsample", "!=", "'unlearned'", ":", "\n", "#we have to do an uneven padding so that the output will be the same as 2x2 avg pool", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "ZeroPad2d", "(", "(", "0", ",", "1", ",", "0", ",", "1", ")", ")", ")", "\n", "", "conv1", "=", "nn", ".", "Conv2d", "(", "out_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "stride", "=", "conv1_stride", ")", "\n", "if", "'weight'", "in", "norm", "and", "not", "skipFirstReLU", ":", "#or just use this normalization?", "\n", "            ", "layers", ".", "append", "(", "weight_norm", "(", "conv1", ")", ")", "\n", "", "else", ":", "\n", "            ", "layers", ".", "append", "(", "conv1", ")", "\n", "\n", "\n", "", "if", "'batch'", "in", "norm", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ")", "\n", "", "elif", "'instance'", "in", "norm", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "out_ch", ")", ")", "\n", "", "elif", "'group'", "in", "norm", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "out_ch", ")", ",", "out_ch", ")", ")", "\n", "", "if", "dropout", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Dropout2d", "(", "p", "=", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "assert", "(", "secondKernel", "%", "2", "==", "1", ")", "\n", "conv2", "=", "nn", ".", "Conv2d", "(", "out_ch", ",", "out_ch", ",", "kernel_size", "=", "secondKernel", ",", "padding", "=", "(", "secondKernel", "-", "1", ")", "//", "2", ")", "\n", "if", "'weight'", "in", "norm", ":", "\n", "            ", "layers", ".", "append", "(", "weight_norm", "(", "conv2", ")", ")", "\n", "", "else", ":", "\n", "            ", "layers", ".", "append", "(", "conv2", ")", "\n", "\n", "", "self", ".", "side", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.ResBlock.forward": [[122, 125], ["net_builder.ResBlock.transform", "net_builder.ResBlock.id_transform", "net_builder.ResBlock.side"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "transform", "(", "x", ")", "\n", "return", "self", ".", "id_transform", "(", "x", ")", "+", "self", ".", "side", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.GeneralRes.__init__": [[127, 177], ["torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "layers.append", "len", "torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "layers.append", "layers.append", "layers.append", "net_builder.ncReLU", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "layers.append", "layers.append", "layers.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "layers.append", "layers.append", "layers.append", "torch.nn.ReLU", "torch.nn.ReLU", "layers.append", "layers.append", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "layers.append", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "net_builder.getGroupSize", "net_builder.getGroupSize", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "layers.append", "torch.nn.Dropout2d", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize"], ["    ", "def", "__init__", "(", "self", ",", "ms", ",", "in_ch", ",", "out_ch", ",", "norm", ",", "dropout", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "skipFirstReLU", "=", "False", "\n", "if", "in_ch", "!=", "out_ch", ":", "\n", "            ", "assert", "(", "out_ch", "==", "2", "*", "in_ch", ")", "\n", "layers", ".", "append", "(", "ncReLU", "(", ")", ")", "\n", "skipFirstReLU", "=", "True", "\n", "", "if", "downsample", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "2", ")", ")", "#could be learned, but this allows a better identity?", "\n", "", "if", "len", "(", "layers", ")", ">", "0", ":", "\n", "            ", "self", ".", "transform", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "lambda", "x", ":", "x", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "not", "skipFirstReLU", ":", "\n", "#I'm not sure if this is the best thing", "\n", "#there should be a way to normalize (mask after normalization?)", "\n", "            ", "if", "'batch'", "in", "norm", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ")", "\n", "", "if", "'instance'", "in", "norm", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "out_ch", ")", ")", "\n", "", "if", "'group'", "in", "norm", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "out_ch", ")", ",", "out_ch", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "if", "'weight'", "in", "norm", "and", "not", "skipFirstReLU", ":", "#or just use this normalization?", "\n", "            ", "layers", ".", "append", "(", "weight_norm", "(", "ms", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "layers", ".", "append", "(", "ms", "[", "0", "]", ")", "\n", "\n", "", "for", "m", "in", "ms", "[", "1", ":", "]", ":", "\n", "            ", "if", "'batch'", "in", "norm", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ")", "\n", "", "if", "'instance'", "in", "norm", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "out_ch", ")", ")", "\n", "", "if", "'group'", "in", "norm", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "out_ch", ")", ",", "out_ch", ")", ")", "\n", "", "if", "dropout", "is", "not", "None", ":", "\n", "                ", "if", "dropout", "==", "True", "or", "dropout", "==", "'2d'", ":", "\n", "                    ", "layers", ".", "append", "(", "nn", ".", "Dropout2d", "(", "p", "=", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "", "elif", "dropout", "==", "'normal'", ":", "\n", "                    ", "layers", ".", "append", "(", "nn", ".", "Dropout2d", "(", "p", "=", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "", "", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "assert", "(", "secondKernel", "%", "2", "==", "1", ")", "\n", "if", "'weight'", "in", "norm", ":", "\n", "                ", "layers", ".", "append", "(", "weight_norm", "(", "m", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "m", ")", "\n", "\n", "", "", "self", ".", "side", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.GeneralRes.forward": [[178, 181], ["net_builder.GeneralRes.transform", "net_builder.GeneralRes.side"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "transform", "(", "x", ")", "\n", "return", "x", "+", "self", ".", "side", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.up.__init__": [[461, 469], ["torch.nn.Module.__init__", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", "up", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "outSize", "=", "in_ch", "\n", "if", "bilinear", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "#self.up = nn.functional.interpolate", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_ch", "//", "2", ",", "in_ch", "//", "2", ",", "2", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.up.addConv": [[470, 472], ["None"], "methods", ["None"], ["", "", "def", "addConv", "(", "self", ",", "conv", ")", ":", "\n", "        ", "self", ".", "conv", "=", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.up.forward": [[473, 481], ["net_builder.up.up", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_builder.up.conv", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size", "math.ceil", "math.ceil"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "(", "diffX", "//", "2", ",", "math", ".", "ceil", "(", "diffX", "/", "2", ")", ",", "\n", "diffY", "//", "2", ",", "math", ".", "ceil", "(", "diffY", "/", "2", ")", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.primeFactors": [[10, 32], ["range", "ret.append", "len", "ret.append", "int", "ret.append", "math.sqrt"], "function", ["None"], ["def", "primeFactors", "(", "n", ")", ":", "\n", "    ", "ret", "=", "[", "1", "]", "\n", "# Print the number of two's that divide n ", "\n", "while", "n", "%", "2", "==", "0", ":", "\n", "        ", "if", "len", "(", "ret", ")", "==", "0", ":", "\n", "            ", "ret", ".", "append", "(", "2", ")", "\n", "", "n", "=", "n", "/", "2", "\n", "\n", "# n must be odd at this point ", "\n", "# so a skip of 2 ( i = i + 2) can be used ", "\n", "", "for", "i", "in", "range", "(", "3", ",", "int", "(", "math", ".", "sqrt", "(", "n", ")", ")", "+", "1", ",", "2", ")", ":", "\n", "\n", "# while i divides n , print i ad divide n ", "\n", "        ", "while", "n", "%", "i", "==", "0", ":", "\n", "            ", "ret", ".", "append", "(", "i", ")", "\n", "n", "=", "n", "/", "i", "\n", "\n", "# Condition if n is a prime ", "\n", "# number greater than 2 ", "\n", "", "", "if", "n", ">", "2", ":", "\n", "        ", "ret", ".", "append", "(", "n", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize": [[33, 48], ["net_builder.primeFactors", "int", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.primeFactors"], ["", "def", "getGroupSize", "(", "channels", ",", "goalSize", "=", "None", ")", ":", "\n", "    ", "if", "goalSize", "is", "None", ":", "\n", "        ", "if", "channels", ">=", "32", ":", "\n", "            ", "goalSize", "=", "8", "\n", "", "else", ":", "\n", "            ", "goalSize", "=", "4", "\n", "", "", "if", "channels", "%", "goalSize", "==", "0", ":", "\n", "        ", "return", "goalSize", "\n", "", "factors", "=", "primeFactors", "(", "channels", ")", "\n", "bestDist", "=", "9999", "\n", "for", "f", "in", "factors", ":", "\n", "        ", "if", "abs", "(", "f", "-", "goalSize", ")", "<=", "bestDist", ":", "#favor larger", "\n", "            ", "bestDist", "=", "abs", "(", "f", "-", "goalSize", ")", "\n", "bestGroup", "=", "f", "\n", "", "", "return", "int", "(", "bestGroup", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.convReLU": [[184, 218], ["type", "type", "coordconv.CoordConv", "torch.nn.Conv2d", "layers.append", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.BatchNorm2d", "layers.append", "layers.append", "torch.nn.ReLU", "torch.nn.InstanceNorm2d", "layers.append", "torch.nn.Dropout2d", "layers.append", "torch.nn.GroupNorm", "torch.nn.Dropout", "type", "layers.append", "net_builder.getGroupSize", "torch.nn.Dropout2d"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize"], ["", "", "def", "convReLU", "(", "in_ch", ",", "out_ch", ",", "norm", ",", "dilation", "=", "1", ",", "kernel", "=", "3", ",", "dropout", "=", "None", ",", "depthwise", "=", "False", ",", "coordconv", "=", "None", ",", "bias", "=", "True", ",", "stride", "=", "1", ",", "relu", "=", "True", ")", ":", "\n", "    ", "if", "type", "(", "dilation", ")", "is", "int", ":", "\n", "        ", "dilation", "=", "(", "dilation", ",", "dilation", ")", "\n", "", "if", "type", "(", "kernel", ")", "is", "int", ":", "\n", "        ", "kernel", "=", "(", "kernel", ",", "kernel", ")", "\n", "", "padding", "=", "(", "dilation", "[", "0", "]", "*", "(", "kernel", "[", "0", "]", "//", "2", ")", ",", "dilation", "[", "1", "]", "*", "(", "kernel", "[", "1", "]", "//", "2", ")", ")", "\n", "groups", "=", "in_ch", "if", "depthwise", "else", "1", "\n", "if", "coordconv", "is", "not", "None", ":", "\n", "        ", "conv2d", "=", "CoordConv", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "kernel", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "features", "=", "coordconv", ")", "\n", "", "else", ":", "\n", "        ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "kernel", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ")", "\n", "#if i == len(cfg)-1:", "\n", "#    layers += [conv2d]", "\n", "#    break", "\n", "", "if", "'weight'", "in", "norm", ":", "\n", "        ", "layers", "=", "[", "weight_norm", "(", "conv2d", ")", "]", "\n", "", "else", ":", "\n", "        ", "layers", "=", "[", "conv2d", "]", "\n", "", "if", "'batch'", "in", "norm", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ")", "\n", "", "elif", "'instance'", "in", "norm", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "out_ch", ")", ")", "\n", "", "elif", "'group'", "in", "norm", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "out_ch", ")", ",", "out_ch", ")", ")", "\n", "", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "if", "dropout", "==", "True", "or", "dropout", "==", "'2d'", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Dropout2d", "(", "p", "=", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "", "elif", "dropout", "==", "'normal'", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "", "elif", "type", "(", "dropout", ")", "==", "float", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Dropout2d", "(", "p", "=", "dropout", ",", "inplace", "=", "True", ")", ")", "\n", "", "", "if", "relu", ":", "\n", "        ", "layers", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.fcReLU": [[219, 237], ["torch.nn.Linear", "layers.append", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.BatchNorm1d", "layers.append", "layers.append", "torch.nn.ReLU", "torch.nn.InstanceNorm1d", "layers.append", "torch.nn.Dropout", "torch.nn.GroupNorm", "net_builder.getGroupSize"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize"], ["", "def", "fcReLU", "(", "in_ch", ",", "out_ch", ",", "norm", ",", "dropout", "=", "None", ",", "relu", "=", "True", ")", ":", "\n", "    ", "fc", "=", "nn", ".", "Linear", "(", "in_ch", ",", "out_ch", ")", "\n", "if", "'weight'", "in", "norm", ":", "\n", "        ", "layers", "=", "[", "weight_norm", "(", "fc", ")", "]", "\n", "", "else", ":", "\n", "        ", "layers", "=", "[", "fc", "]", "\n", "", "if", "'batch'", "in", "norm", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "out_ch", ")", ")", "\n", "", "elif", "'instance'", "in", "norm", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "InstanceNorm1d", "(", "out_ch", ")", ")", "\n", "", "elif", "'group'", "in", "norm", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "out_ch", ")", ",", "out_ch", ")", ")", "\n", "", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "if", "dropout", "!=", "False", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "", "", "if", "relu", ":", "\n", "        ", "layers", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers": [[238, 458], ["enumerate", "len", "modules.append", "layers[].addConv", "modules.append", "modules.append", "torch.nn.Sequential", "torch.nn.MaxPool2d", "modules.append", "type", "torch.nn.Sequential", "torch.nn.Sequential", "type", "torch.nn.Sequential", "torch.nn.MaxPool2d", "layers.append", "type", "torch.nn.GroupNorm", "layers.append", "layerCodes.append", "net_builder.getGroupSize", "type", "torch.nn.ReLU", "layers.append", "layerCodes.append", "type", "len", "float", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "in_channels.append", "len", "type", "len", "net_builder.up", "int", "layers.append", "layerCodes.append", "in_channels.append", "layers[].addConv", "modules.append", "modules.append", "int", "type", "net_builder.ResBlock", "v.find", "torch.nn.Conv2d", "layers.append", "layerCodes.append", "in_channels.append", "type", "torch.nn.Sequential", "torch.nn.Sequential", "type", "int", "int", "int", "int", "layers.append", "layerCodes.append", "in_channels.append", "type", "net_builder.ResBlock", "int", "layers.append", "layerCodes.append", "in_channels.append", "type", "torch.nn.ConvTranspose2d", "int", "net_builder.convReLU", "layerCodes.append", "in_channels.append", "type", "v.find", "int", "int", "net_builder.convReLU", "layerCodes.append", "in_channels.append", "type", "v.find", "int", "int", "net_builder.convReLU", "layerCodes.append", "in_channels.append", "type", "v.find", "v.find", "int", "net_builder.convReLU", "layerCodes.append", "in_channels.append", "type", "v[].split", "v.find", "v.find", "int", "net_builder.convReLU", "layerCodes.append", "in_channels.append", "type", "int", "v.find", "int", "int", "net_builder.convReLU", "layerCodes.append", "in_channels.append", "int", "int", "int", "type", "v.find", "int", "int", "net_builder.convReLU", "layerCodes.append", "in_channels.append", "int", "type", "v.find", "int", "int", "layers.append", "layerCodes.append", "in_channels.append", "type", "net_builder.ResBlock", "v.find", "int.find", "int", "layers.append", "layerCodes.append", "in_channels.append", "print", "exit", "type", "int", "net_builder.ResBlock", "int", "net_builder.fcReLU", "layerCodes.append", "in_channels.append", "int", "int", "type", "int", "net_builder.convReLU", "net_builder.convReLU", "layerCodes.append", "in_channels.append", "type", "type", "print", "exit", "net_builder.convReLU", "layerCodes.append", "in_channels.append"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.up.addConv", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.up.addConv", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.convReLU", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.convReLU", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.convReLU", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.convReLU", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.convReLU", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.convReLU", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.convReLU", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.fcReLU", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.convReLU", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.convReLU", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.convReLU"], ["", "def", "make_layers", "(", "cfg", ",", "dilation", "=", "1", ",", "norm", "=", "None", ",", "dropout", "=", "None", ")", ":", "\n", "    ", "modules", "=", "[", "]", "\n", "in_channels", "=", "[", "cfg", "[", "0", "]", "]", "\n", "\n", "layers", "=", "[", "]", "\n", "layerCodes", "=", "[", "]", "\n", "if", "norm", "is", "None", ":", "\n", "        ", "norm", "=", "''", "\n", "", "for", "i", ",", "v", "in", "enumerate", "(", "cfg", "[", "1", ":", "]", ")", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "modules", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "layers", ")", ")", "\n", "layers", "=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "layerCodes", "=", "[", "v", "]", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", "0", ":", "4", "]", "==", "'long'", ":", "\n", "            ", "modules", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "layers", ")", ")", "\n", "layers", "=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "3", ")", ")", "]", "\n", "layerCodes", "=", "[", "v", "]", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "==", "'GroupNorm'", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "in_channels", "[", "-", "1", "]", ")", ",", "in_channels", "[", "-", "1", "]", ")", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "==", "'ReLU'", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", ":", "4", "]", "==", "'drop'", ":", "\n", "            ", "if", "len", "(", "v", ")", ">", "6", "and", "v", "[", "4", ":", "7", "]", "==", "'out'", ":", "\n", "                ", "ind", "=", "8", "\n", "", "else", ":", "\n", "                ", "ind", "=", "4", "\n", "", "if", "len", "(", "v", ")", ">", "ind", ":", "\n", "                ", "amount", "=", "float", "(", "v", "[", "ind", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "amount", "=", "0.5", "\n", "", "layers", ".", "append", "(", "torch", ".", "nn", ".", "Dropout2d", "(", "p", "=", "amount", ",", "inplace", "=", "True", ")", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", ":", "2", "]", "==", "'U+'", ":", "\n", "            ", "if", "len", "(", "layers", ")", ">", "0", ":", "\n", "                ", "if", "type", "(", "layerCodes", "[", "0", "]", ")", "==", "str", "and", "layerCodes", "[", "0", "]", "[", ":", "2", "]", "==", "'U+'", ":", "\n", "                    ", "layers", "[", "0", "]", ".", "addConv", "(", "nn", ".", "Sequential", "(", "*", "layers", "[", "1", ":", "]", ")", ")", "\n", "modules", ".", "append", "(", "layers", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "modules", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "layers", ")", ")", "\n", "", "", "layers", "=", "[", "up", "(", "in_channels", "[", "-", "1", "]", ")", "]", "\n", "layerCodes", "=", "[", "v", "]", "\n", "\n", "in_channels", ".", "append", "(", "int", "(", "v", "[", "2", ":", "]", ")", "+", "in_channels", "[", "-", "1", "]", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", "0", "]", "==", "'R'", ":", "\n", "            ", "outCh", "=", "int", "(", "v", "[", "1", ":", "]", ")", "\n", "layers", ".", "append", "(", "ResBlock", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "dilation", ",", "norm", ",", "dropout", "=", "dropout", ")", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", "0", "]", "==", "'C'", ":", "\n", "            ", "div", "=", "v", ".", "find", "(", "'-'", ")", "\n", "if", "div", "==", "-", "1", ":", "\n", "                ", "kernel_size", "=", "5", "\n", "outCh", "=", "int", "(", "v", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "kernel_size", "=", "int", "(", "v", "[", "1", ":", "div", "]", ")", "\n", "outCh", "=", "int", "(", "v", "[", "1", "+", "div", ":", "]", ")", "\n", "", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ")", "\n", "#if i == len(cfg)-1:", "\n", "#    layers += [conv2d]", "\n", "#    break", "\n", "layers", ".", "append", "(", "conv2d", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", "0", "]", "==", "'D'", ":", "\n", "            ", "outCh", "=", "int", "(", "v", "[", "1", ":", "]", ")", "#down sampling ResNet layer", "\n", "layers", ".", "append", "(", "ResBlock", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "dilation", ",", "norm", ",", "downsample", "=", "True", ",", "dropout", "=", "dropout", ")", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", "0", "]", "==", "'U'", ":", "\n", "            ", "outCh", "=", "int", "(", "v", "[", "1", ":", "]", ")", "#up sampling layer, linear", "\n", "layers", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", "0", "]", "==", "'W'", ":", "#dilated conv later", "\n", "            ", "outCh", "=", "int", "(", "v", "[", "1", ":", "]", ")", "\n", "layers", "+=", "convReLU", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "norm", ",", "dilation", ",", "dropout", "=", "dropout", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", "0", "]", "==", "'k'", ":", "#conv later with custom kernel size", "\n", "            ", "div", "=", "v", ".", "find", "(", "'-'", ")", "\n", "kernel_size", "=", "int", "(", "v", "[", "1", ":", "div", "]", ")", "\n", "outCh", "=", "int", "(", "v", "[", "div", "+", "1", ":", "]", ")", "\n", "layers", "+=", "convReLU", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "norm", ",", "kernel", "=", "kernel_size", ",", "dropout", "=", "dropout", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", "0", "]", "==", "'$'", ":", "#conv later for starting ResNet. No bias and stride of 2", "\n", "            ", "if", "v", "[", "-", "1", "]", "==", "'r'", ":", "\n", "                ", "relu", "=", "True", "\n", "v", "=", "v", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "relu", "=", "False", "\n", "", "div", "=", "v", ".", "find", "(", "'-'", ")", "\n", "kernel_size", "=", "int", "(", "v", "[", "1", ":", "div", "]", ")", "\n", "outCh", "=", "int", "(", "v", "[", "div", "+", "1", ":", "]", ")", "\n", "layers", "+=", "convReLU", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "norm", ",", "kernel", "=", "kernel_size", ",", "dropout", "=", "dropout", ",", "stride", "=", "2", ",", "bias", "=", "False", ",", "relu", "=", "True", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", ":", "2", "]", "==", "'cc'", ":", "#CoordConv 'ccTYPE-k#,d#,hd-CHS'", "\n", "            ", "div", "=", "v", ".", "find", "(", "'-'", ")", "\n", "div2", "=", "v", ".", "find", "(", "'-'", ",", "div", "+", "1", ")", "\n", "typ", "=", "v", "[", "2", ":", "div", "]", "\n", "kernel_size", "=", "[", "3", ",", "3", "]", "\n", "dilate", "=", "1", "\n", "if", "div2", "!=", "-", "1", ":", "\n", "                ", "for", "param", "in", "v", "[", "div", "+", "1", ":", "div2", "]", ".", "split", "(", "','", ")", ":", "\n", "                    ", "if", "param", "[", "0", "]", "==", "'k'", ":", "\n", "                        ", "kernel_size", "=", "int", "(", "param", "[", "1", ":", "]", ")", "\n", "kernel_size", "=", "[", "kernel_size", ",", "kernel_size", "]", "\n", "", "elif", "param", "[", "0", "]", "==", "'d'", ":", "\n", "                        ", "dilate", "=", "int", "(", "param", "[", "1", ":", "]", ")", "\n", "", "elif", "param", "[", ":", "2", "]", "==", "'h'", ":", "\n", "                        ", "kernel_size", "[", "0", "]", "=", "1", "\n", "", "elif", "param", "[", ":", "2", "]", "==", "'v'", ":", "\n", "                        ", "kernel_size", "[", "1", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "print", "(", "\"unknown subparameter {} in {}\"", ".", "format", "(", "param", ",", "v", ")", ")", "\n", "exit", "(", ")", "\n", "", "", "", "else", ":", "\n", "                ", "div2", "=", "div", "\n", "", "outCh", "=", "int", "(", "v", "[", "div2", "+", "1", ":", "]", ")", "\n", "layers", "+=", "convReLU", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "norm", ",", "dilate", ",", "kernel", "=", "kernel_size", ",", "dropout", "=", "dropout", ",", "coordconv", "=", "typ", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", "0", "]", "==", "'d'", ":", "#3x3 conv layer with custom dilation", "\n", "            ", "if", "v", "[", ":", "3", "]", "==", "'dil'", ":", "\n", "                ", "ind", "=", "4", "\n", "", "else", ":", "\n", "                ", "ind", "=", "1", "\n", "", "div", "=", "v", ".", "find", "(", "'-'", ")", "\n", "div0", "=", "v", ".", "find", "(", "','", ")", "\n", "if", "div0", "==", "-", "1", ":", "\n", "                ", "dilate", "=", "int", "(", "v", "[", "ind", ":", "div", "]", ")", "\n", "", "else", ":", "\n", "                ", "assert", "(", "div0", "<", "div", ")", "\n", "dilate", "=", "(", "int", "(", "v", "[", "ind", ":", "div0", "]", ")", ",", "int", "(", "v", "[", "div0", "+", "1", ":", "div", "]", ")", ")", "\n", "", "outCh", "=", "int", "(", "v", "[", "div", "+", "1", ":", "]", ")", "\n", "layers", "+=", "convReLU", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "norm", ",", "dilate", ",", "dropout", "=", "dropout", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", ":", "2", "]", "==", "'hd'", ":", "#horz 1x3 conv layer with custom dilation", "\n", "            ", "if", "v", "[", ":", "4", "]", "==", "'hdil'", ":", "\n", "                ", "ind", "=", "5", "\n", "", "else", ":", "\n", "                ", "ind", "=", "2", "\n", "", "div", "=", "v", ".", "find", "(", "'-'", ")", "\n", "dilate", "=", "int", "(", "v", "[", "ind", ":", "div", "]", ")", "\n", "outCh", "=", "int", "(", "v", "[", "div", "+", "1", ":", "]", ")", "\n", "layers", "+=", "convReLU", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "norm", ",", "dilate", ",", "kernel", "=", "(", "1", ",", "3", ")", ",", "dropout", "=", "dropout", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", ":", "2", "]", "==", "'vd'", ":", "#vert 3x1 conv layer with custom dilation", "\n", "            ", "if", "v", "[", ":", "4", "]", "==", "'vdil'", ":", "\n", "                ", "ind", "=", "5", "\n", "", "else", ":", "\n", "                ", "ind", "=", "2", "\n", "", "div", "=", "v", ".", "find", "(", "'-'", ")", "\n", "dilate", "=", "int", "(", "v", "[", "ind", ":", "div", "]", ")", "\n", "outCh", "=", "int", "(", "v", "[", "div", "+", "1", ":", "]", ")", "\n", "layers", "+=", "convReLU", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "norm", ",", "dilate", ",", "kernel", "=", "(", "3", ",", "1", ")", ",", "dropout", "=", "dropout", ")", "\n", "layerCodes", ".", "append", "(", "outCh", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", "0", "]", "==", "'B'", ":", "#ResNet layer with custom dilation", "\n", "            ", "div", "=", "v", ".", "find", "(", "'-'", ")", "\n", "dilate", "=", "int", "(", "v", "[", "1", ":", "div", "]", ")", "\n", "outCh", "=", "int", "(", "v", "[", "div", "+", "1", ":", "]", ")", "\n", "layers", ".", "append", "(", "ResBlock", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "dilate", ",", "norm", ",", "dropout", "=", "dropout", ")", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", ":", "4", "]", "==", "'wave'", ":", "#Res layer that is dilated in first conv and second conv is 1x1", "\n", "            ", "div", "=", "v", ".", "find", "(", "'-'", ")", "\n", "dilate", "=", "v", "[", "4", ":", "div", "]", "\n", "div0", "=", "dilate", ".", "find", "(", "','", ")", "\n", "if", "div0", "==", "-", "1", ":", "\n", "                ", "dilate", "=", "int", "(", "dilate", ")", "\n", "", "else", ":", "\n", "                ", "assert", "(", "div0", "<", "div", ")", "\n", "dilate", "=", "(", "int", "(", "dilate", "[", ":", "div0", "]", ")", ",", "int", "(", "dilate", "[", "div0", "+", "1", ":", "]", ")", ")", "\n", "", "outCh", "=", "int", "(", "v", "[", "div", "+", "1", ":", "]", ")", "\n", "layers", ".", "append", "(", "ResBlock", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "dilate", ",", "norm", ",", "dropout", "=", "dropout", ",", "secondKernel", "=", "1", ")", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", ":", "2", "]", "==", "'FC'", ":", "#fully connected layer", "\n", "            ", "if", "v", "[", "2", ":", "4", "]", "==", "'nR'", ":", "\n", "                ", "div", "=", "4", "\n", "relu", "=", "False", "\n", "norm", "=", "''", "\n", "dropout", "=", "None", "\n", "", "else", ":", "\n", "                ", "div", "=", "2", "\n", "relu", "=", "True", "\n", "", "outCh", "=", "int", "(", "v", "[", "div", ":", "]", ")", "\n", "layers", "+=", "fcReLU", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "norm", ",", "dropout", "=", "dropout", ",", "relu", "=", "relu", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "#elif type(v)==str and len(v)>9 and v[:10] == 'global-avg':", "\n", "#    modules.append(nn.Sequential(*layers))", "\n", "#    layers = [nn.MaxPool2d(kernel_size=2, stride=2)]", "\n", "#    layerCodes = [v]", "\n", "", "elif", "type", "(", "v", ")", "==", "str", "and", "v", "[", ":", "3", "]", "==", "'sep'", ":", "#depth-wise seperable conv", "\n", "            ", "outCh", "=", "int", "(", "v", "[", "3", ":", "]", ")", "\n", "layers", "+=", "convReLU", "(", "in_channels", "[", "-", "1", "]", ",", "in_channels", "[", "-", "1", "]", ",", "norm", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "dropout", "=", "dropout", ",", "depthwise", "=", "True", ")", "\n", "layers", "+=", "convReLU", "(", "in_channels", "[", "-", "1", "]", ",", "outCh", ",", "norm", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "dropout", "=", "dropout", ",", "depthwise", "=", "False", ")", "\n", "layerCodes", ".", "append", "(", "outCh", ")", "\n", "in_channels", ".", "append", "(", "outCh", ")", "\n", "\n", "", "elif", "type", "(", "v", ")", "==", "str", ":", "\n", "            ", "print", "(", "'Error reading net cfg, unknown layer: '", "+", "v", ")", "\n", "exit", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "layers", "+=", "convReLU", "(", "in_channels", "[", "-", "1", "]", ",", "v", ",", "norm", ",", "dropout", "=", "dropout", ")", "\n", "layerCodes", ".", "append", "(", "v", ")", "\n", "in_channels", ".", "append", "(", "v", ")", "\n", "", "", "if", "len", "(", "layers", ")", ">", "0", ":", "\n", "        ", "if", "type", "(", "layerCodes", "[", "0", "]", ")", "==", "str", "and", "layerCodes", "[", "0", "]", "[", ":", "2", "]", "==", "'U+'", ":", "\n", "            ", "layers", "[", "0", "]", ".", "addConv", "(", "nn", ".", "Sequential", "(", "*", "layers", "[", "1", ":", "]", ")", ")", "\n", "modules", ".", "append", "(", "layers", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "modules", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "layers", ")", ")", "\n", "", "", "return", "modules", ",", "in_channels", "[", "-", "1", "]", "#nn.Sequential(*layers)", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.loss.sigmoid_BCE_loss": [[7, 9], ["torch.binary_cross_entropy_with_logits"], "function", ["None"], ["def", "sigmoid_BCE_loss", "(", "y_input", ",", "y_target", ")", ":", "\n", "    ", "return", "F", ".", "binary_cross_entropy_with_logits", "(", "y_input", ",", "y_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.loss.MSE": [[10, 12], ["torch.mse_loss", "y_target.float"], "function", ["None"], ["", "def", "MSE", "(", "y_input", ",", "y_target", ")", ":", "\n", "    ", "return", "F", ".", "mse_loss", "(", "y_input", ",", "y_target", ".", "float", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.attention.MultiHeadedAttention.__init__": [[72, 98], ["torch.nn.Module.__init__", "attention.clones", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.model.attention.clones"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ",", "mod", "=", "None", ")", ":", "\n", "        ", "\"Take in model size and number of heads.\"", "\n", "super", "(", "MultiHeadedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "# We assume d_v always equals d_k", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "linears", "=", "clones", "(", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", ",", "4", ")", "#W_q W_k W_v W_o", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "mod", "=", "mod", "if", "mod", "else", "''", "#learned: use network for attention instead of dot product, half: use only half of query/keys for dot product", "\n", "if", "'learned'", "in", "self", ".", "mod", ":", "\n", "            ", "self", ".", "learned", "=", "True", "\n", "self", ".", "attNet", "=", "nn", ".", "Sequential", "(", "\n", "#nn.GroupNorm(getGroupSize(self.d_k*2),self.d_k*2),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "d_k", "*", "2", ",", "self", ".", "d_k", "//", "4", ")", ",", "\n", "#nn.GroupNorm(getGroupSize(self.d_k//4),self.d_k//4),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "d_k", "//", "4", ",", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "learned", "=", "False", "\n", "", "self", ".", "half", "=", "'half'", "in", "self", ".", "mod", "\n", "self", ".", "none", "=", "'none'", "in", "self", ".", "mod", "\n", "self", ".", "fixed", "=", "'fixed'", "in", "self", ".", "mod", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.attention.MultiHeadedAttention.forward": [[100, 132], ["query.size", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "l().view().transpose", "attention.attention", "zip", "attention.learned_attention", "attention.attention", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "l().view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "l", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.attention.attention", "home.repos.pwc.inspect_result.herobd_FUDGE.model.attention.learned_attention", "home.repos.pwc.inspect_result.herobd_FUDGE.model.attention.attention"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"Implements Figure 2\"", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Same mask applied to all h heads.", "\n", "            ", "mask", "=", "mask", "[", "None", ",", "None", ",", "...", "]", "#mask.unsqueeze(1)", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "if", "self", ".", "none", ":", "\n", "            ", "key", "=", "torch", ".", "cat", "(", "(", "key", ",", "torch", ".", "ones", "(", "key", ".", "size", "(", "0", ")", ",", "1", ",", "key", ".", "size", "(", "2", ")", ")", ".", "to", "(", "key", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "value", "=", "torch", ".", "cat", "(", "(", "value", ",", "torch", ".", "zeros", "(", "value", ".", "size", "(", "0", ")", ",", "1", ",", "value", ".", "size", "(", "2", ")", ")", ".", "to", "(", "value", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "(", "mask", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "mask", ".", "size", "(", "2", ")", ",", "1", ")", ".", "to", "(", "mask", ".", "device", ")", ")", ",", "dim", "=", "3", ")", "\n", "\n", "# 1) Do all the linear projections in batch from d_model => h x d_k ", "\n", "", "query", ",", "key", ",", "value", "=", "[", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "]", "\n", "\n", "# 2) Apply attention on all the projected vectors in batch. ", "\n", "if", "self", ".", "half", ":", "\n", "            ", "x", ",", "self", ".", "attn", "=", "attention", "(", "query", "[", "...", ",", ":", "self", ".", "d_k", "//", "2", "]", ",", "key", "[", "...", ",", ":", "self", ".", "d_k", "//", "2", "]", ",", "value", ",", "mask", "=", "mask", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "fixed", "=", "self", ".", "fixed", ")", "\n", "", "elif", "self", ".", "learned", ":", "\n", "            ", "x", ",", "self", ".", "attn", "=", "learned_attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "network", "=", "self", ".", "attNet", ")", "\n", "", "else", ":", "\n", "            ", "x", ",", "self", ".", "attn", "=", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "fixed", "=", "self", ".", "fixed", ")", "\n", "\n", "# 3) \"Concat\" using a view and apply a final linear. ", "\n", "", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.attention.clones": [[8, 11], ["torch.nn.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["def", "clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "\"Produce N identical layers.\"", "\n", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "", "def", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "key_padding_mask", "=", "None", ",", "dropout", "=", "None", ",", "fixed", "=", "False", ",", "att_bias", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.attention.attention": [[11, 47], ["query.size", "torch.softmax", "torch.matmul", "torch.matmul", "math.sqrt", "torch.is_autocast_enabled", "torch.is_autocast_enabled", "scores.masked_fill.masked_fill", "dropout.masked_fill", "dropout", "torch.matmul", "torch.matmul", "key.transpose", "scores.masked_fill.masked_fill", "scores.masked_fill.masked_fill", "key_padding_mask.unsqueeze().unsqueeze", "float", "key_padding_mask.unsqueeze"], "function", ["None"], ["", "def", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "key_padding_mask", "=", "None", ",", "dropout", "=", "None", ",", "fixed", "=", "False", ",", "att_bias", "=", "None", ")", ":", "\n", "#print(query.size()) #batch,heads,len,feats", "\n", "    ", "\"Compute 'Scaled Dot Product Attention'\"", "\n", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "#bsz, num_heads, src_len,d_k = key.size()", "\n", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "###", "\n", "#scores.fill_(0.1)", "\n", "###", "\n", "#scores.size() = (batch heads queries keys)", "\n", "if", "att_bias", "is", "not", "None", ":", "\n", "        ", "scores", "+=", "att_bias", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "        ", "if", "torch", ".", "is_autocast_enabled", "(", ")", ":", "\n", "            ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e4", ")", "\n", "", "else", ":", "\n", "            ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "#import pdb;pdb.set_trace()", "\n", "#tgt_len = query.size(2)", "\n", "#scores = scores.view(bsz, num_heads, tgt_len, src_len", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "\n", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ",", "\n", "float", "(", "\"-inf\"", ")", ",", "\n", ")", "\n", "#scores = scores.view(bsz * num_heads, tgt_len, src_len)", "\n", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "mask", "is", "not", "None", "and", "fixed", ":", "\n", "        ", "p_attn", "=", "p_attn", ".", "masked_fill", "(", "mask", "==", "0", ",", "0", ")", "#this is needed in case a node has no neigbors (softmax gives even attention to everything", "\n", "#will create a zero vector in those cases, instead of the average of all nodes", "\n", "", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "", "def", "learned_attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ",", "network", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.attention.learned_attention": [[47, 70], ["query.size", "query.size", "query[].expand", "key[].expand", "torch.cat", "torch.cat", "comb.view.view", "network", "scores.masked_fill.view", "torch.softmax", "len", "query.size", "key.size", "query.size", "key.size", "comb.view.size", "query.size", "key.size", "scores.masked_fill.masked_fill", "scores.masked_fill.masked_fill", "dropout", "torch.matmul", "torch.matmul", "query.size"], "function", ["None"], ["", "def", "learned_attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ",", "network", "=", "None", ")", ":", "\n", "    ", "\"Compute Attention using provided network\"", "\n", "\n", "#naive \"everywhere\" implmenetation", "\n", "assert", "(", "len", "(", "query", ".", "size", "(", ")", ")", "==", "4", ")", "\n", "batch_size", "=", "query", ".", "size", "(", "0", ")", "\n", "heads", "=", "query", ".", "size", "(", "1", ")", "\n", "query_ex", "=", "query", "[", ":", ",", ":", ",", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "query", ".", "size", "(", "2", ")", ",", "key", ".", "size", "(", "2", ")", ",", "-", "1", ")", "\n", "key_ex", "=", "key", "[", ":", ",", ":", ",", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "query", ".", "size", "(", "2", ")", ",", "key", ".", "size", "(", "2", ")", ",", "-", "1", ")", "\n", "comb", "=", "torch", ".", "cat", "(", "(", "query_ex", ",", "key_ex", ")", ",", "dim", "=", "4", ")", "\n", "comb", "=", "comb", ".", "view", "(", "batch_size", "*", "heads", ",", "-", "1", ",", "comb", ".", "size", "(", "-", "1", ")", ")", "\n", "scores", "=", "network", "(", "comb", ")", "#same function for each head", "\n", "scores", "=", "scores", ".", "view", "(", "batch_size", ",", "heads", ",", "query", ".", "size", "(", "2", ")", ",", "key", ".", "size", "(", "2", ")", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "0", ")", "#this is needed in casa node has no neigbors", "\n", "#will create a zero vector in those cases, instead of an average of all nodes", "\n", "", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.YoloLoss.__init__": [[12, 27], ["torch.Module.__init__", "len", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "rotation", ",", "scale", ",", "anchors", ",", "ignore_thresh", "=", "0.5", ",", "use_special_loss", "=", "False", ",", "bad_conf_weight", "=", "1.25", ",", "multiclass", "=", "False", ")", ":", "\n", "        ", "super", "(", "YoloLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_thresh", "=", "ignore_thresh", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "rotation", "=", "rotation", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "use_special_loss", "=", "use_special_loss", "\n", "self", ".", "bad_conf_weight", "=", "bad_conf_weight", "\n", "self", ".", "multiclass", "=", "multiclass", "\n", "self", ".", "anchors", "=", "anchors", "\n", "self", ".", "num_anchors", "=", "len", "(", "anchors", ")", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", "# Coordinate loss", "\n", "self", ".", "bce_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'mean'", ")", "# Confidence loss", "\n", "self", ".", "ce_loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ")", "# Class loss", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", "# Num neighbor regression", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.YoloLoss.forward": [[28, 169], ["prediction.size", "prediction.size", "prediction.size", "torch.arange().repeat().view().type().to", "torch.arange().repeat().view().type().to", "torch.arange().repeat().view().type().to", "torch.arange().repeat().view().type().to", "torch.arange().repeat().view().type().to", "torch.arange().repeat().view().type().to", "torch.arange().repeat().view().type().to", "torch.arange().repeat().view().type().to", "torch.arange().repeat().view().type().to", "torch.arange().repeat().t().view().type().to", "torch.arange().repeat().t().view().type().to", "torch.arange().repeat().t().view().type().to", "torch.arange().repeat().t().view().type().to", "torch.arange().repeat().t().view().type().to", "torch.arange().repeat().t().view().type().to", "torch.arange().repeat().t().view().type().to", "torch.arange().repeat().t().view().type().to", "torch.arange().repeat().t().view().type().to", "FloatTensor", "scaled_anchors[].view().to", "scaled_anchors[].view().to", "FloatTensor", "yolo_loss.build_targets", "int", "mask.type.type.type", "conf_mask.type.type.type", "tx.type().to.type().to.type().to", "ty.type().to.type().to.type().to", "tw.type().to.type().to.type().to", "th.type().to.type().to.type().to", "tconf.type().to.type().to.type().to", "tcls.type().to.type().to.type().to", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "float", "float", "float", "float", "tneighbors.type().to.type().to.type().to", "yolo_loss.weighted_bce_loss", "yolo_loss.YoloLoss.bce_loss", "yolo_loss.YoloLoss.mse_loss", "yolo_loss.YoloLoss.mse_loss", "yolo_loss.YoloLoss.mse_loss", "yolo_loss.YoloLoss.mse_loss", "yolo_loss.YoloLoss.bce_loss", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "scaled_anchors[].view", "scaled_anchors[].view", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "tx.type().to.type().to.type", "ty.type().to.type().to.type", "tw.type().to.type().to.type", "th.type().to.type().to.type", "tconf.type().to.type().to.type", "tcls.type().to.type().to.type", "yolo_loss.YoloLoss.bce_loss", "loss_nn.item.item.item", "yolo_loss.YoloLoss.item", "yolo_loss.YoloLoss.item", "yolo_loss.YoloLoss.item", "FloatTensor.cpu", "pred_conf.cpu", "pred_cls.cpu", "FloatTensor.cpu", "tneighbors.type().to.type().to.type", "tcls[].float", "yolo_loss.YoloLoss.ce_loss", "yolo_loss.YoloLoss.mse_loss", "yolo_loss.YoloLoss.item", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "target.cpu", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "yolo_loss.YoloLoss.item", "yolo_loss.YoloLoss.item", "yolo_loss.YoloLoss.item", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.build_targets", "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.weighted_bce_loss"], ["", "def", "forward", "(", "self", ",", "prediction", ",", "target", ",", "target_sizes", ",", "target_num_neighbors", "=", "None", ")", ":", "\n", "\n", "        ", "nA", "=", "self", ".", "num_anchors", "\n", "nB", "=", "prediction", ".", "size", "(", "0", ")", "\n", "nH", "=", "prediction", ".", "size", "(", "2", ")", "\n", "nW", "=", "prediction", ".", "size", "(", "3", ")", "\n", "stride", "=", "self", ".", "scale", "\n", "\n", "FloatTensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "prediction", ".", "is_cuda", "else", "torch", ".", "FloatTensor", "\n", "LongTensor", "=", "torch", ".", "cuda", ".", "LongTensor", "if", "prediction", ".", "is_cuda", "else", "torch", ".", "LongTensor", "\n", "ByteTensor", "=", "torch", ".", "cuda", ".", "ByteTensor", "if", "prediction", ".", "is_cuda", "else", "torch", ".", "ByteTensor", "\n", "BoolTensor", "=", "torch", ".", "cuda", ".", "BoolTensor", "if", "prediction", ".", "is_cuda", "else", "torch", ".", "BoolTensor", "\n", "\n", "x", "=", "prediction", "[", "...", ",", "1", "]", "# Center x", "\n", "y", "=", "prediction", "[", "...", ",", "2", "]", "# Center y", "\n", "w", "=", "prediction", "[", "...", ",", "5", "]", "# Width", "\n", "h", "=", "prediction", "[", "...", ",", "4", "]", "# Height", "\n", "#r = prediction[..., 3]  # Rotation (not used here)", "\n", "pred_conf", "=", "prediction", "[", "...", ",", "0", "]", "# Conf ", "\n", "if", "target_num_neighbors", "is", "not", "None", ":", "#self.predNumNeighbors:", "\n", "            ", "pred_neighbors", "=", "1", "+", "prediction", "[", "...", ",", "6", "]", "# num of neighbors, offset pred range so -1 is 0 neighbirs", "\n", "pred_cls", "=", "prediction", "[", "...", ",", "7", ":", "]", "# Cls pred.", "\n", "", "else", ":", "\n", "            ", "pred_cls", "=", "prediction", "[", "...", ",", "6", ":", "]", "# Cls pred.", "\n", "\n", "", "grid_x", "=", "torch", ".", "arange", "(", "nW", ")", ".", "repeat", "(", "nH", ",", "1", ")", ".", "view", "(", "[", "1", ",", "1", ",", "nH", ",", "nW", "]", ")", ".", "type", "(", "FloatTensor", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "grid_y", "=", "torch", ".", "arange", "(", "nH", ")", ".", "repeat", "(", "nW", ",", "1", ")", ".", "t", "(", ")", ".", "view", "(", "[", "1", ",", "1", ",", "nH", ",", "nW", "]", ")", ".", "type", "(", "FloatTensor", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "scaled_anchors", "=", "FloatTensor", "(", "[", "(", "a", "[", "'width'", "]", "/", "stride", "[", "0", "]", ",", "a", "[", "'height'", "]", "/", "stride", "[", "1", "]", ")", "for", "a", "in", "self", ".", "anchors", "]", ")", "\n", "anchor_w", "=", "scaled_anchors", "[", ":", ",", "0", ":", "1", "]", ".", "view", "(", "(", "1", ",", "nA", ",", "1", ",", "1", ")", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "anchor_h", "=", "scaled_anchors", "[", ":", ",", "1", ":", "2", "]", ".", "view", "(", "(", "1", ",", "nA", ",", "1", ",", "1", ")", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "\n", "# Add offset and scale with anchors", "\n", "pred_boxes", "=", "FloatTensor", "(", "prediction", "[", "...", ",", ":", "4", "]", ".", "shape", ")", "\n", "pred_boxes", "[", "...", ",", "0", "]", "=", "torch", ".", "tanh", "(", "x", ".", "data", ")", "+", "0.5", "+", "grid_x", "\n", "pred_boxes", "[", "...", ",", "1", "]", "=", "torch", ".", "tanh", "(", "y", ".", "data", ")", "+", "0.5", "+", "grid_y", "\n", "pred_boxes", "[", "...", ",", "2", "]", "=", "torch", ".", "exp", "(", "w", ".", "data", ")", "*", "anchor_w", "\n", "pred_boxes", "[", "...", ",", "3", "]", "=", "torch", ".", "exp", "(", "h", ".", "data", ")", "*", "anchor_h", "\n", "\n", "#moved back into build_targets", "\n", "#if target is not None:", "\n", "#    target[:,:,[0,4]] /= self.scale[0]", "\n", "#    target[:,:,[1,3]] /= self.scale[1]", "\n", "\n", "nGT", ",", "nCorrect", ",", "nCorrect_noclass", ",", "mask", ",", "conf_mask", ",", "tx", ",", "ty", ",", "tw", ",", "th", ",", "tconf", ",", "tcls", ",", "tneighbors", ",", "distances", ",", "ious", "=", "build_targets", "(", "\n", "pred_boxes", "=", "pred_boxes", ".", "cpu", "(", ")", ".", "data", ",", "\n", "pred_conf", "=", "pred_conf", ".", "cpu", "(", ")", ".", "data", ",", "\n", "pred_cls", "=", "pred_cls", ".", "cpu", "(", ")", ".", "data", ",", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "data", "if", "target", "is", "not", "None", "else", "None", ",", "\n", "target_sizes", "=", "target_sizes", ",", "\n", "anchors", "=", "scaled_anchors", ".", "cpu", "(", ")", ".", "data", ",", "\n", "num_anchors", "=", "nA", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "grid_sizeH", "=", "nH", ",", "\n", "grid_sizeW", "=", "nW", ",", "\n", "ignore_thres", "=", "self", ".", "ignore_thresh", ",", "\n", "scale", "=", "self", ".", "scale", ",", "\n", "calcIOUAndDist", "=", "self", ".", "use_special_loss", ",", "\n", "target_num_neighbors", "=", "target_num_neighbors", "\n", ")", "\n", "\n", "nProposals", "=", "int", "(", "(", "pred_conf", ">", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "recall", "=", "float", "(", "nCorrect", "/", "nGT", ")", "if", "nGT", "else", "1", "\n", "if", "nProposals", ">", "0", ":", "\n", "            ", "precision", "=", "float", "(", "nCorrect", "/", "nProposals", ")", "\n", "", "else", ":", "\n", "            ", "precision", "=", "1", "\n", "\n", "", "recall_noclass", "=", "float", "(", "nCorrect_noclass", "/", "nGT", ")", "if", "nGT", "else", "1", "\n", "if", "nProposals", ">", "0", ":", "\n", "            ", "precision_noclass", "=", "float", "(", "nCorrect_noclass", "/", "nProposals", ")", "\n", "", "else", ":", "\n", "            ", "precision_noclass", "=", "1", "\n", "\n", "# Handle masks", "\n", "", "mask", "=", "(", "mask", ".", "type", "(", "BoolTensor", ")", ")", "\n", "conf_mask", "=", "(", "conf_mask", ".", "type", "(", "BoolTensor", ")", ")", "\n", "\n", "# Handle target variables", "\n", "tx", "=", "tx", ".", "type", "(", "FloatTensor", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "ty", "=", "ty", ".", "type", "(", "FloatTensor", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "tw", "=", "tw", ".", "type", "(", "FloatTensor", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "th", "=", "th", ".", "type", "(", "FloatTensor", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "tconf", "=", "tconf", ".", "type", "(", "FloatTensor", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "tcls", "=", "tcls", ".", "type", "(", "LongTensor", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "if", "target_num_neighbors", "is", "not", "None", ":", "\n", "            ", "tneighbors", "=", "tneighbors", ".", "type", "(", "FloatTensor", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "\n", "# Get conf mask where gt and where there is no gt", "\n", "", "conf_mask_true", "=", "mask", "\n", "conf_mask_false", "=", "conf_mask", "&", "~", "mask", "#conf_mask - mask", "\n", "\n", "#import pdb; pdb.set_trace()", "\n", "\n", "# Mask outputs to ignore non-existing objects", "\n", "if", "self", ".", "use_special_loss", ":", "\n", "            ", "loss_conf", "=", "weighted_bce_loss", "(", "pred_conf", "[", "conf_mask_false", "]", ",", "tconf", "[", "conf_mask_false", "]", ",", "distances", "[", "conf_mask_false", "]", ",", "ious", "[", "conf_mask_false", "]", ",", "nB", ")", "\n", "distances", "=", "None", "\n", "ious", "=", "None", "\n", "", "else", ":", "\n", "            ", "loss_conf", "=", "self", ".", "bce_loss", "(", "pred_conf", "[", "conf_mask_false", "]", ",", "tconf", "[", "conf_mask_false", "]", ")", "\n", "", "loss_conf", "*=", "self", ".", "bad_conf_weight", "\n", "if", "target", "is", "not", "None", "and", "nGT", ">", "0", ":", "\n", "            ", "loss_x", "=", "self", ".", "mse_loss", "(", "x", "[", "mask", "]", ",", "tx", "[", "mask", "]", ")", "\n", "loss_y", "=", "self", ".", "mse_loss", "(", "y", "[", "mask", "]", ",", "ty", "[", "mask", "]", ")", "\n", "loss_w", "=", "self", ".", "mse_loss", "(", "w", "[", "mask", "]", ",", "tw", "[", "mask", "]", ")", "\n", "loss_h", "=", "self", ".", "mse_loss", "(", "h", "[", "mask", "]", ",", "th", "[", "mask", "]", ")", "\n", "\n", "if", "self", ".", "multiclass", ":", "\n", "                ", "loss_cls", "=", "self", ".", "bce_loss", "(", "pred_cls", "[", "mask", "]", ",", "tcls", "[", "mask", "]", ".", "float", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_cls", "=", "self", ".", "ce_loss", "(", "pred_cls", "[", "mask", "]", ",", "torch", ".", "argmax", "(", "tcls", "[", "mask", "]", ",", "1", ")", ")", "*", "(", "1", "/", "nB", ")", "#this multiply is erronous", "\n", "", "loss_conf", "+=", "self", ".", "bce_loss", "(", "pred_conf", "[", "conf_mask_true", "]", ",", "tconf", "[", "conf_mask_true", "]", ")", "\n", "if", "target_num_neighbors", "is", "not", "None", ":", "#if self.predNumNeighbors:", "\n", "                ", "loss_nn", "=", "0.1", "*", "self", ".", "mse_loss", "(", "pred_neighbors", "[", "mask", "]", ",", "tneighbors", "[", "mask", "]", ")", "\n", "", "else", ":", "\n", "                ", "loss_nn", "=", "0", "\n", "", "loss", "=", "loss_x", "+", "loss_y", "+", "loss_w", "+", "loss_h", "+", "loss_conf", "+", "loss_cls", "+", "loss_nn", "\n", "if", "target_num_neighbors", "is", "not", "None", ":", "\n", "                ", "loss_nn", "=", "loss_nn", ".", "item", "(", ")", "\n", "", "return", "(", "\n", "loss", ",", "\n", "loss_x", ".", "item", "(", ")", "+", "loss_y", ".", "item", "(", ")", "+", "loss_w", ".", "item", "(", ")", "+", "loss_h", ".", "item", "(", ")", ",", "\n", "loss_conf", ".", "item", "(", ")", ",", "\n", "loss_cls", ".", "item", "(", ")", ",", "\n", "loss_nn", ",", "\n", "recall", ",", "\n", "precision", ",", "\n", "recall_noclass", ",", "\n", "precision_noclass", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "\n", "loss_conf", ",", "\n", "0", ",", "\n", "loss_conf", ".", "item", "(", ")", ",", "\n", "0", ",", "\n", "0", ",", "\n", "recall", ",", "\n", "precision", ",", "\n", "recall_noclass", ",", "\n", "precision_noclass", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.YoloDistLoss.__init__": [[400, 433], ["torch.Module.__init__", "len", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "rotation", ",", "scale", ",", "anchors", ",", "ignore_thresh", "=", "0.5", ",", "bad_conf_weight", "=", "1.25", ",", "multiclass", "=", "False", ")", ":", "\n", "        ", "super", "(", "YoloDistLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_thresh", "=", "ignore_thresh", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "rotation", "=", "rotation", "\n", "assert", "(", "scale", "[", "0", "]", "==", "scale", "[", "1", "]", ")", "#arrggh, acounting for rotation is a real pain.", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "bad_conf_weight", "=", "bad_conf_weight", "\n", "self", ".", "multiclass", "=", "multiclass", "\n", "self", ".", "anchors", "=", "anchors", "\n", "self", ".", "num_anchors", "=", "len", "(", "anchors", ")", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", "# Coordinate loss", "\n", "self", ".", "bce_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'mean'", ")", "# Confidence loss", "\n", "self", ".", "ce_loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ")", "# Class loss", "\n", "\n", "#make anchor points from anchors", "\n", "self", ".", "scaled_anchors", "=", "torch", ".", "FloatTensor", "(", "[", "(", "a", "[", "'width'", "]", "/", "scale", "[", "0", "]", ",", "a", "[", "'height'", "]", "/", "scale", "[", "1", "]", ",", "a", "[", "'rot'", "]", ")", "for", "a", "in", "self", ".", "anchors", "]", ")", "\n", "\n", "o_r", "=", "torch", ".", "FloatTensor", "(", "[", "a", "[", "'rot'", "]", "for", "a", "in", "anchors", "]", ")", "\n", "o_h", "=", "torch", ".", "FloatTensor", "(", "[", "a", "[", "'height'", "]", "for", "a", "in", "anchors", "]", ")", "\n", "o_w", "=", "torch", ".", "FloatTensor", "(", "[", "a", "[", "'width'", "]", "for", "a", "in", "anchors", "]", ")", "\n", "cos_rot", "=", "torch", ".", "cos", "(", "o_r", ")", "\n", "sin_rot", "=", "torch", ".", "sin", "(", "o_r", ")", "\n", "p_left_x", "=", "-", "cos_rot", "*", "o_w", "/", "scale", "[", "0", "]", "\n", "p_left_y", "=", "sin_rot", "*", "o_w", "/", "scale", "[", "1", "]", "\n", "p_right_x", "=", "cos_rot", "*", "o_w", "/", "scale", "[", "0", "]", "\n", "p_right_y", "=", "-", "sin_rot", "*", "o_w", "/", "scale", "[", "1", "]", "\n", "p_top_x", "=", "-", "sin_rot", "*", "o_h", "/", "scale", "[", "0", "]", "\n", "p_top_y", "=", "-", "cos_rot", "*", "o_h", "/", "scale", "[", "1", "]", "\n", "p_bot_x", "=", "sin_rot", "*", "o_h", "/", "scale", "[", "0", "]", "\n", "p_bot_y", "=", "cos_rot", "*", "o_h", "/", "scale", "[", "1", "]", "\n", "self", ".", "scaled_anchor_points", "=", "torch", ".", "stack", "(", "[", "p_left_x", ",", "p_left_y", ",", "p_right_x", ",", "p_right_y", ",", "p_top_x", ",", "p_top_y", ",", "p_bot_x", ",", "p_bot_y", "]", ",", "dim", "=", "1", ")", "\n", "self", ".", "scaled_anchor_hws", "=", "(", "o_h", "/", "scale", "[", "1", "]", "+", "o_w", "/", "scale", "[", "0", "]", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.YoloDistLoss.forward": [[434, 568], ["prediction.size", "prediction.size", "prediction.size", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "yolo_loss.YoloDistLoss.scaled_anchors[].view().to", "yolo_loss.YoloDistLoss.scaled_anchors[].view().to", "yolo_loss.YoloDistLoss.scaled_anchors[].view().to", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "yolo_loss.build_targets_dist", "int", "mask.type.type.type", "conf_mask.type.type.type", "tx.type.type.type", "ty.type.type.type", "tw.type.type.type", "th.type.type.type", "tr.type.type.type", "tconf.type.type.type", "tcls.type.type.type", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "float", "float", "yolo_loss.YoloDistLoss.bce_loss", "yolo_loss.YoloDistLoss.mse_loss", "yolo_loss.YoloDistLoss.mse_loss", "yolo_loss.YoloDistLoss.mse_loss", "yolo_loss.YoloDistLoss.mse_loss", "yolo_loss.YoloDistLoss.mse_loss", "yolo_loss.YoloDistLoss.bce_loss", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "yolo_loss.YoloDistLoss.scaled_anchors[].view", "yolo_loss.YoloDistLoss.scaled_anchors[].view", "yolo_loss.YoloDistLoss.scaled_anchors[].view", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "yolo_loss.YoloDistLoss.bce_loss", "loss_conf.item", "yolo_loss.YoloDistLoss.item", "loss_conf.item", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "pred_conf.cpu", "pred_cls.cpu", "yolo_loss.YoloDistLoss.scaled_anchors.cpu", "yolo_loss.YoloDistLoss.scaled_anchor_points.cpu", "yolo_loss.YoloDistLoss.scaled_anchor_hws.cpu", "tcls[].float", "yolo_loss.YoloDistLoss.ce_loss", "yolo_loss.YoloDistLoss.item", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "target.cpu", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "yolo_loss.YoloDistLoss.item", "yolo_loss.YoloDistLoss.item", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "yolo_loss.YoloDistLoss.item", "yolo_loss.YoloDistLoss.item", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.build_targets_dist"], ["", "def", "forward", "(", "self", ",", "prediction", ",", "target", ",", "target_sizes", ")", ":", "\n", "\n", "        ", "nA", "=", "self", ".", "num_anchors", "\n", "nB", "=", "prediction", ".", "size", "(", "0", ")", "\n", "nH", "=", "prediction", ".", "size", "(", "2", ")", "\n", "nW", "=", "prediction", ".", "size", "(", "3", ")", "\n", "stride", "=", "self", ".", "scale", "\n", "\n", "FloatTensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "prediction", ".", "is_cuda", "else", "torch", ".", "FloatTensor", "\n", "LongTensor", "=", "torch", ".", "cuda", ".", "LongTensor", "if", "prediction", ".", "is_cuda", "else", "torch", ".", "LongTensor", "\n", "ByteTensor", "=", "torch", ".", "cuda", ".", "ByteTensor", "if", "prediction", ".", "is_cuda", "else", "torch", ".", "ByteTensor", "\n", "\n", "x", "=", "prediction", "[", "...", ",", "1", "]", "# Center x", "\n", "y", "=", "prediction", "[", "...", ",", "2", "]", "# Center y", "\n", "w", "=", "prediction", "[", "...", ",", "5", "]", "# Width", "\n", "h", "=", "prediction", "[", "...", ",", "4", "]", "# Height", "\n", "r", "=", "prediction", "[", "...", ",", "3", "]", "# Rotation", "\n", "pred_conf", "=", "prediction", "[", "...", ",", "0", "]", "# Conf ", "\n", "pred_cls", "=", "prediction", "[", "...", ",", "6", ":", "]", "# Cls pred.", "\n", "\n", "grid_x", "=", "torch", ".", "arange", "(", "nW", ")", ".", "repeat", "(", "nH", ",", "1", ")", ".", "view", "(", "[", "1", ",", "1", ",", "nH", ",", "nW", "]", ")", ".", "type", "(", "FloatTensor", ")", "\n", "grid_y", "=", "torch", ".", "arange", "(", "nH", ")", ".", "repeat", "(", "nW", ",", "1", ")", ".", "t", "(", ")", ".", "view", "(", "[", "1", ",", "1", ",", "nH", ",", "nW", "]", ")", ".", "type", "(", "FloatTensor", ")", "\n", "#scaled_anchors = FloatTensor([(a['width'] / stride[0], a['height']/ stride[1], a['rot']) for a in self.anchors])", "\n", "#scaled_anchor_points[[0,2,4,6]] = self.anchor_points/stride", "\n", "#scaled_anchor_points = self.anchor_points/stride", "\n", "#scaled_anchor_hws = self.anchor_hws/( (stride[0]+stride[1])/2 )", "\n", "anchor_w", "=", "self", ".", "scaled_anchors", "[", ":", ",", "0", ":", "1", "]", ".", "view", "(", "(", "1", ",", "nA", ",", "1", ",", "1", ")", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "anchor_h", "=", "self", ".", "scaled_anchors", "[", ":", ",", "1", ":", "2", "]", ".", "view", "(", "(", "1", ",", "nA", ",", "1", ",", "1", ")", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "anchor_r", "=", "self", ".", "scaled_anchors", "[", ":", ",", "2", ":", "3", "]", ".", "view", "(", "(", "1", ",", "nA", ",", "1", ",", "1", ")", ")", ".", "to", "(", "prediction", ".", "device", ")", "\n", "\n", "# Add offset and scale with anchors", "\n", "#pred_boxes = FloatTensor(prediction[..., :bbParams].shape)", "\n", "#pred_boxes[..., 0] = x.data + grid_x", "\n", "#pred_boxes[..., 1] = y.data + grid_y", "\n", "#pred_boxes[..., 2] = torch.exp(w.data) * anchor_w", "\n", "#pred_boxes[..., 3] = torch.exp(h.data) * anchor_h", "\n", "#pred_boxes[..., 4] = r.data", "\n", "\n", "#Create points from predicted boxes", "\n", "o_x", "=", "torch", ".", "tanh", "(", "x", ")", "+", "0.5", "+", "grid_x", "\n", "o_y", "=", "torch", ".", "tanh", "(", "y", ")", "+", "0.5", "+", "grid_y", "\n", "o_w", "=", "torch", ".", "exp", "(", "w", ")", "*", "anchor_w", "\n", "o_h", "=", "torch", ".", "exp", "(", "h", ")", "*", "anchor_h", "\n", "o_r", "=", "(", "math", ".", "pi", "/", "2", ")", "*", "torch", ".", "tanh", "(", "r", ")", "+", "anchor_r", "\n", "\n", "cos_rot", "=", "torch", ".", "cos", "(", "o_r", ")", "\n", "sin_rot", "=", "torch", ".", "sin", "(", "o_r", ")", "\n", "p_left_x", "=", "o_x", "-", "cos_rot", "*", "o_w", "\n", "p_left_y", "=", "o_y", "+", "sin_rot", "*", "o_w", "\n", "p_right_x", "=", "o_x", "+", "cos_rot", "*", "o_w", "\n", "p_right_y", "=", "o_y", "-", "sin_rot", "*", "o_w", "\n", "p_top_x", "=", "o_x", "-", "sin_rot", "*", "o_h", "\n", "p_top_y", "=", "o_y", "-", "cos_rot", "*", "o_h", "\n", "p_bot_x", "=", "o_x", "+", "sin_rot", "*", "o_h", "\n", "p_bot_y", "=", "o_y", "+", "cos_rot", "*", "o_h", "\n", "pred_points", "=", "torch", ".", "stack", "(", "[", "p_left_x", ",", "p_left_y", ",", "p_right_x", ",", "p_right_y", ",", "p_top_x", ",", "p_top_y", ",", "p_bot_x", ",", "p_bot_y", "]", ",", "dim", "=", "4", ")", "\n", "\n", "#moved back into build_targets", "\n", "#if target is not None:", "\n", "#    target[:,:,[0,1,3,4]] /= self.scale[0]", "\n", "#    target[:,:,5:13] /= self.scale[0]", "\n", "\n", "nGT", ",", "nCorrect", ",", "mask", ",", "conf_mask", ",", "tx", ",", "ty", ",", "tw", ",", "th", ",", "tr", ",", "tconf", ",", "tcls", "=", "build_targets_dist", "(", "\n", "pred_points", "=", "pred_points", ".", "cpu", "(", ")", ".", "data", ",", "\n", "pred_hws", "=", "(", "(", "o_h", "+", "o_w", ")", "/", "2.0", ")", ".", "cpu", "(", ")", ".", "data", ",", "\n", "pred_conf", "=", "pred_conf", ".", "cpu", "(", ")", ".", "data", ",", "\n", "pred_cls", "=", "pred_cls", ".", "cpu", "(", ")", ".", "data", ",", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "data", "if", "target", "is", "not", "None", "else", "None", ",", "\n", "target_sizes", "=", "target_sizes", ",", "\n", "anchors", "=", "self", ".", "scaled_anchors", ".", "cpu", "(", ")", ".", "data", ",", "\n", "anchor_points", "=", "self", ".", "scaled_anchor_points", ".", "cpu", "(", ")", ".", "data", ",", "\n", "anchor_hws", "=", "self", ".", "scaled_anchor_hws", ".", "cpu", "(", ")", ".", "data", ",", "\n", "num_anchors", "=", "nA", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "grid_sizeH", "=", "nH", ",", "\n", "grid_sizeW", "=", "nW", ",", "\n", "ignore_thres", "=", "self", ".", "ignore_thresh", ",", "\n", "scale", "=", "self", ".", "scale", "\n", ")", "\n", "\n", "nProposals", "=", "int", "(", "(", "pred_conf", ">", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "recall", "=", "float", "(", "nCorrect", "/", "nGT", ")", "if", "nGT", "else", "1", "\n", "if", "nProposals", ">", "0", ":", "\n", "            ", "precision", "=", "float", "(", "nCorrect", "/", "nProposals", ")", "\n", "", "else", ":", "\n", "            ", "precision", "=", "1", "\n", "\n", "# Handle masks", "\n", "", "mask", "=", "(", "mask", ".", "type", "(", "ByteTensor", ")", ")", "\n", "conf_mask", "=", "(", "conf_mask", ".", "type", "(", "ByteTensor", ")", ")", "\n", "\n", "# Handle target variables", "\n", "tx", "=", "tx", ".", "type", "(", "FloatTensor", ")", "\n", "ty", "=", "ty", ".", "type", "(", "FloatTensor", ")", "\n", "tw", "=", "tw", ".", "type", "(", "FloatTensor", ")", "\n", "th", "=", "th", ".", "type", "(", "FloatTensor", ")", "\n", "tr", "=", "tr", ".", "type", "(", "FloatTensor", ")", "\n", "tconf", "=", "tconf", ".", "type", "(", "FloatTensor", ")", "\n", "tcls", "=", "tcls", ".", "type", "(", "LongTensor", ")", "\n", "\n", "# Get conf mask where gt and where there is no gt", "\n", "conf_mask_true", "=", "mask", "\n", "conf_mask_false", "=", "conf_mask", "-", "mask", "\n", "\n", "# Mask outputs to ignore non-existing objects", "\n", "loss_conf", "=", "self", ".", "bad_conf_weight", "*", "self", ".", "bce_loss", "(", "pred_conf", "[", "conf_mask_false", "]", ",", "tconf", "[", "conf_mask_false", "]", ")", "\n", "if", "target", "is", "not", "None", "and", "nGT", ">", "0", ":", "\n", "            ", "loss_x", "=", "self", ".", "mse_loss", "(", "x", "[", "mask", "]", ",", "tx", "[", "mask", "]", ")", "\n", "loss_y", "=", "self", ".", "mse_loss", "(", "y", "[", "mask", "]", ",", "ty", "[", "mask", "]", ")", "\n", "loss_w", "=", "self", ".", "mse_loss", "(", "w", "[", "mask", "]", ",", "tw", "[", "mask", "]", ")", "\n", "loss_h", "=", "self", ".", "mse_loss", "(", "h", "[", "mask", "]", ",", "th", "[", "mask", "]", ")", "\n", "loss_r", "=", "self", ".", "mse_loss", "(", "r", "[", "mask", "]", ",", "tr", "[", "mask", "]", ")", "\n", "if", "self", ".", "multiclass", ":", "\n", "                ", "loss_cls", "=", "self", ".", "bce_loss", "(", "pred_cls", "[", "mask", "]", ",", "tcls", "[", "mask", "]", ".", "float", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_cls", "=", "(", "1", "/", "nB", ")", "*", "self", ".", "ce_loss", "(", "pred_cls", "[", "mask", "]", ",", "torch", ".", "argmax", "(", "tcls", "[", "mask", "]", ",", "1", ")", ")", "\n", "", "loss_conf", "+=", "self", ".", "bce_loss", "(", "pred_conf", "[", "conf_mask_true", "]", ",", "tconf", "[", "conf_mask_true", "]", ")", "\n", "loss", "=", "loss_x", "+", "loss_y", "+", "loss_w", "+", "loss_h", "+", "loss_r", "+", "loss_conf", "+", "loss_cls", "\n", "return", "(", "\n", "loss", ",", "\n", "loss_x", ".", "item", "(", ")", "+", "loss_y", ".", "item", "(", ")", "+", "loss_w", ".", "item", "(", ")", "+", "loss_h", ".", "item", "(", ")", "+", "loss_r", ".", "item", "(", ")", ",", "\n", "loss_conf", ".", "item", "(", ")", ",", "\n", "loss_cls", ".", "item", "(", ")", ",", "\n", "recall", ",", "\n", "precision", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "\n", "loss_conf", ",", "\n", "0", ",", "\n", "loss_conf", ".", "item", "(", ")", ",", "\n", "0", ",", "\n", "recall", ",", "\n", "precision", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.LineLoss.__init__": [[731, 742], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "scale", ",", "anchor_h", ",", "bad_conf_weight", "=", "1.25", ")", ":", "\n", "        ", "super", "(", "LineLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.ignore_thresh=ignore_thresh", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "scale", "=", "scale", "\n", "assert", "(", "scale", "[", "0", "]", "==", "scale", "[", "1", "]", ")", "\n", "self", ".", "bad_conf_weight", "=", "bad_conf_weight", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", "size_average", "=", "True", ")", "# Coordinate loss", "\n", "self", ".", "bce_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "size_average", "=", "True", ")", "# Confidence loss", "\n", "self", ".", "ce_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "# Class loss", "\n", "self", ".", "anchor_h", "=", "anchor_h", "#/((scale[0]+scale[1])/2)", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.LineLoss.forward": [[743, 839], ["prediction.size", "prediction.size", "prediction.size", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.arange().repeat().t().view().type", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "yolo_loss.LineLoss.build_targets_lines", "mask.type.type.type", "conf_mask.type.type.type", "tx1.type.type.type", "ty1.type.type.type", "tx2.type.type.type", "ty2.type.type.type", "tconf.type.type.type", "tcls.type.type.type", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "yolo_loss.LineLoss.bce_loss", "yolo_loss.LineLoss.mse_loss", "yolo_loss.LineLoss.mse_loss", "yolo_loss.LineLoss.mse_loss", "yolo_loss.LineLoss.mse_loss", "yolo_loss.LineLoss.bce_loss", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.arange().repeat().t().view", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "yolo_loss.LineLoss.ce_loss", "loss_conf.item", "loss_cls.item", "loss_conf.item", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "pred_conf.cpu", "pred_cls.cpu", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "yolo_loss.LineLoss.item", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "torch.arange().repeat().t", "target.cpu", "yolo_loss.LineLoss.item", "yolo_loss.LineLoss.item", "yolo_loss.LineLoss.item", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.LineLoss.build_targets_lines"], ["", "def", "forward", "(", "self", ",", "prediction", ",", "target", ",", "target_sizes", ")", ":", "\n", "\n", "        ", "nB", "=", "prediction", ".", "size", "(", "0", ")", "\n", "nH", "=", "prediction", ".", "size", "(", "1", ")", "\n", "nW", "=", "prediction", ".", "size", "(", "2", ")", "\n", "stride", "=", "self", ".", "scale", "\n", "\n", "FloatTensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "prediction", ".", "is_cuda", "else", "torch", ".", "FloatTensor", "\n", "LongTensor", "=", "torch", ".", "cuda", ".", "LongTensor", "if", "prediction", ".", "is_cuda", "else", "torch", ".", "LongTensor", "\n", "ByteTensor", "=", "torch", ".", "cuda", ".", "ByteTensor", "if", "prediction", ".", "is_cuda", "else", "torch", ".", "ByteTensor", "\n", "\n", "x", "=", "prediction", "[", "...", ",", "1", "]", "# Center x", "\n", "y", "=", "prediction", "[", "...", ",", "2", "]", "# Center y", "\n", "h", "=", "prediction", "[", "...", ",", "4", "]", "# Height", "\n", "r", "=", "prediction", "[", "...", ",", "3", "]", "# Rotation", "\n", "pred_conf", "=", "prediction", "[", "...", ",", "0", "]", "# Conf ", "\n", "pred_cls", "=", "prediction", "[", "...", ",", "5", ":", "]", "# Cls pred.", "\n", "\n", "grid_x", "=", "torch", ".", "arange", "(", "nW", ")", ".", "repeat", "(", "nH", ",", "1", ")", ".", "view", "(", "[", "1", ",", "nH", ",", "nW", "]", ")", ".", "type", "(", "FloatTensor", ")", "\n", "grid_y", "=", "torch", ".", "arange", "(", "nH", ")", ".", "repeat", "(", "nW", ",", "1", ")", ".", "t", "(", ")", ".", "view", "(", "[", "1", ",", "nH", ",", "nW", "]", ")", ".", "type", "(", "FloatTensor", ")", "\n", "\n", "#Create points from predicted boxes", "\n", "o_x", "=", "torch", ".", "tanh", "(", "x", ")", "+", "0.5", "+", "grid_x", "\n", "o_y", "=", "torch", ".", "tanh", "(", "y", ")", "+", "0.5", "+", "grid_y", "\n", "o_h", "=", "torch", ".", "exp", "(", "h", ")", "*", "self", ".", "anchor_h", "#half, not scaled", "\n", "o_r", "=", "(", "math", ".", "pi", ")", "*", "torch", ".", "tanh", "(", "r", ")", "\n", "\n", "x1", "=", "(", "-", "o_h", "*", "torch", ".", "sin", "(", "o_r", ")", ")", "/", "self", ".", "scale", "[", "0", "]", "+", "o_x", "\n", "y1", "=", "(", "-", "o_h", "*", "torch", ".", "cos", "(", "o_r", ")", ")", "/", "self", ".", "scale", "[", "1", "]", "+", "o_y", "\n", "x2", "=", "(", "o_h", "*", "torch", ".", "sin", "(", "o_r", ")", ")", "/", "self", ".", "scale", "[", "0", "]", "+", "o_x", "\n", "y2", "=", "(", "o_h", "*", "torch", ".", "cos", "(", "o_r", ")", ")", "/", "self", ".", "scale", "[", "1", "]", "+", "o_y", "\n", "\n", "pred", "=", "torch", ".", "stack", "(", "[", "o_x", ",", "o_y", ",", "o_r", ",", "o_h", "]", ",", "dim", "=", "3", ")", "\n", "\n", "#moved back into build_targets", "\n", "#if target is not None: #target is x1,y1,x2,y2", "\n", "#    target[:,:,[0,2]] /= self.scale[0]", "\n", "#    target[:,:,[1,3]] /= self.scale[1]", "\n", "\n", "nGT", ",", "mask", ",", "conf_mask", ",", "tx1", ",", "ty1", ",", "tx2", ",", "ty2", ",", "tconf", ",", "tcls", "=", "self", ".", "build_targets_lines", "(", "\n", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "data", ",", "\n", "pred_conf", "=", "pred_conf", ".", "cpu", "(", ")", ".", "data", ",", "\n", "pred_cls", "=", "pred_cls", ".", "cpu", "(", ")", ".", "data", ",", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "data", "if", "target", "is", "not", "None", "else", "None", ",", "\n", "target_sizes", "=", "target_sizes", ",", "\n", "grid_sizeH", "=", "nH", ",", "\n", "grid_sizeW", "=", "nW", ",", "\n", ")", "\n", "\n", "#nProposals = int((pred_conf > 0).sum().item())", "\n", "#recall = float(nCorrect / nGT) if nGT else 1", "\n", "#if nProposals>0:", "\n", "#    precision = float(nCorrect / nProposals)", "\n", "#else:", "\n", "#    precision = 1", "\n", "\n", "# Handle masks", "\n", "mask", "=", "(", "mask", ".", "type", "(", "ByteTensor", ")", ")", "\n", "conf_mask", "=", "(", "conf_mask", ".", "type", "(", "ByteTensor", ")", ")", "\n", "\n", "# Handle target variables", "\n", "tx1", "=", "tx1", ".", "type", "(", "FloatTensor", ")", "\n", "ty1", "=", "ty1", ".", "type", "(", "FloatTensor", ")", "\n", "tx2", "=", "tx2", ".", "type", "(", "FloatTensor", ")", "\n", "ty2", "=", "ty2", ".", "type", "(", "FloatTensor", ")", "\n", "tconf", "=", "tconf", ".", "type", "(", "FloatTensor", ")", "\n", "tcls", "=", "tcls", ".", "type", "(", "LongTensor", ")", "\n", "\n", "# Get conf mask where gt and where there is no gt", "\n", "conf_mask_true", "=", "mask", "\n", "conf_mask_false", "=", "conf_mask", "-", "mask", "\n", "\n", "# Mask outputs to ignore non-existing objects", "\n", "loss_conf", "=", "self", ".", "bad_conf_weight", "*", "self", ".", "bce_loss", "(", "pred_conf", "[", "conf_mask_false", "]", ",", "tconf", "[", "conf_mask_false", "]", ")", "\n", "if", "target", "is", "not", "None", "and", "nGT", ">", "0", ":", "\n", "            ", "loss_x1", "=", "self", ".", "mse_loss", "(", "x1", "[", "mask", "]", ",", "tx1", "[", "mask", "]", ")", "\n", "loss_y1", "=", "self", ".", "mse_loss", "(", "y1", "[", "mask", "]", ",", "ty1", "[", "mask", "]", ")", "\n", "loss_x2", "=", "self", ".", "mse_loss", "(", "x2", "[", "mask", "]", ",", "tx2", "[", "mask", "]", ")", "\n", "loss_y2", "=", "self", ".", "mse_loss", "(", "y2", "[", "mask", "]", ",", "ty2", "[", "mask", "]", ")", "\n", "loss_cls", "=", "(", "1", "/", "nB", ")", "*", "self", ".", "ce_loss", "(", "pred_cls", "[", "mask", "]", ",", "torch", ".", "argmax", "(", "tcls", "[", "mask", "]", ",", "1", ")", ")", "\n", "loss_conf", "+=", "self", ".", "bce_loss", "(", "pred_conf", "[", "conf_mask_true", "]", ",", "tconf", "[", "conf_mask_true", "]", ")", "\n", "loss", "=", "loss_x1", "+", "loss_y1", "+", "loss_x2", "+", "loss_y2", "+", "loss_conf", "+", "loss_cls", "\n", "return", "(", "\n", "loss", ",", "\n", "loss_x1", ".", "item", "(", ")", "+", "loss_y1", ".", "item", "(", ")", "+", "loss_x2", ".", "item", "(", ")", "+", "loss_y2", ".", "item", "(", ")", ",", "\n", "loss_conf", ".", "item", "(", ")", ",", "\n", "loss_cls", ".", "item", "(", ")", ",", "\n", "#recall,", "\n", "#precision,", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "\n", "loss_conf", ",", "\n", "0", ",", "\n", "loss_conf", ".", "item", "(", ")", ",", "\n", "0", ",", "\n", "#recall,", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.LineLoss.build_targets_lines": [[845, 904], ["pred.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "range", "range", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "max", "max", "min", "min", "int", "int", "torch.ones.size", "torch.ones.size", "torch.ones.size", "torch.ones.size", "torch.ones.size", "torch.ones.size"], "methods", ["None"], ["", "", "def", "build_targets_lines", "(", "self", ",", "\n", "pred", ",", "pred_conf", ",", "pred_cls", ",", "target", ",", "target_sizes", ",", "grid_sizeH", ",", "grid_sizeW", "\n", ")", ":", "\n", "        ", "nB", "=", "pred", ".", "size", "(", "0", ")", "\n", "nC", "=", "self", ".", "num_classes", "\n", "nH", "=", "grid_sizeH", "\n", "nW", "=", "grid_sizeW", "\n", "mask", "=", "torch", ".", "zeros", "(", "nB", ",", "nH", ",", "nW", ")", "\n", "conf_mask", "=", "torch", ".", "ones", "(", "nB", ",", "nH", ",", "nW", ")", "\n", "tx1", "=", "torch", ".", "zeros", "(", "nB", ",", "nH", ",", "nW", ")", "\n", "ty1", "=", "torch", ".", "zeros", "(", "nB", ",", "nH", ",", "nW", ")", "\n", "tx2", "=", "torch", ".", "zeros", "(", "nB", ",", "nH", ",", "nW", ")", "\n", "ty2", "=", "torch", ".", "zeros", "(", "nB", ",", "nH", ",", "nW", ")", "\n", "#th = torch.zeros(nB, nH, nW)", "\n", "#tr = torch.zeros(nB, nH, nW)", "\n", "tconf", "=", "torch", ".", "ByteTensor", "(", "nB", ",", "nH", ",", "nW", ")", ".", "fill_", "(", "0", ")", "\n", "tcls", "=", "torch", ".", "ByteTensor", "(", "nB", ",", "nH", ",", "nW", ",", "nC", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "nGT", "=", "0", "\n", "for", "b", "in", "range", "(", "nB", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "target_sizes", "[", "b", "]", ")", ":", "#range(target.shape[1]):", "\n", "#if target[b, t].sum() == 0:", "\n", "#    continue", "\n", "\n", "# Convert to position relative to box", "\n", "                ", "gx1", "=", "target", "[", "b", ",", "t", ",", "0", "]", "/", "scale", "[", "0", "]", "\n", "gy1", "=", "target", "[", "b", ",", "t", ",", "1", "]", "/", "scale", "[", "1", "]", "\n", "gx2", "=", "target", "[", "b", ",", "t", ",", "2", "]", "/", "scale", "[", "0", "]", "\n", "gy2", "=", "target", "[", "b", ",", "t", ",", "3", "]", "/", "scale", "[", "1", "]", "\n", "gx", "=", "(", "gx1", "+", "gx2", ")", "/", "2.0", "\n", "gy", "=", "(", "gy1", "+", "gy2", ")", "/", "2.0", "\n", "#if gh==0:", "\n", "#    continue", "\n", "nGT", "+=", "1", "\n", "# Get grid box indices", "\n", "gi", "=", "max", "(", "min", "(", "int", "(", "gx", ")", ",", "conf_mask", ".", "size", "(", "2", ")", "-", "1", ")", ",", "0", ")", "\n", "gj", "=", "max", "(", "min", "(", "int", "(", "gy", ")", ",", "conf_mask", ".", "size", "(", "1", ")", "-", "1", ")", ",", "0", ")", "\n", "# Masks", "\n", "mask", "[", "b", ",", "gj", ",", "gi", "]", "=", "1", "\n", "conf_mask", "[", "b", ",", "gj", ",", "gi", "]", "=", "1", "\n", "# Coordinates", "\n", "tx1", "[", "b", ",", "gj", ",", "gi", "]", "=", "gx1", "-", "(", "gi", "+", "0.5", ")", "#inv_tanh(gx1 - (gi+0.5))", "\n", "ty1", "[", "b", ",", "gj", ",", "gi", "]", "=", "gy1", "-", "(", "gj", "+", "0.5", ")", "#inv_tanh(gy1 - (gj+0.5))", "\n", "tx2", "[", "b", ",", "gj", ",", "gi", "]", "=", "gx2", "-", "(", "gi", "+", "0.5", ")", "#inv_tanh(gx2 - (gi+0.5))", "\n", "ty2", "[", "b", ",", "gj", ",", "gi", "]", "=", "gy2", "-", "(", "gj", "+", "0.5", ")", "#inv_tanh(gy2 - (gj+0.5))", "\n", "# One-hot encoding of label", "\n", "#target_label = int(target[b, t, 0])", "\n", "tcls", "[", "b", ",", "gj", ",", "gi", "]", "=", "target", "[", "b", ",", "t", ",", "5", ":", "]", "\n", "tconf", "[", "b", ",", "gj", ",", "gi", "]", "=", "1", "\n", "\n", "# Calculate iou between ground truth and best matching prediction", "\n", "#dist = bbox_dist(gt_points, (gh+gw)/2.0, pred_point, pred_hw)", "\n", "#dist = ", "\n", "#pred_label = torch.argmax(pred_cls[b, gj, gi])", "\n", "#score = pred_conf[b, gj, gi]", "\n", "#if dist < 0.85 and pred_label == torch.argmax(target[b,t,13:]) and score > 0.0:", "\n", "#    nCorrect += 1", "\n", "#nGT, nCorrect, mask, conf_mask, tx, ty, tw, th, tr, tconf, tcls", "\n", "", "", "return", "nGT", ",", "mask", ",", "conf_mask", ",", "tx1", ",", "ty1", ",", "tx2", ",", "ty2", ",", "tconf", ",", "tcls", "\n", "", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.weighted_bce_loss": [[171, 194], ["lossByBatch.sum.mean", "distances.mean", "keep.sum", "distances.max", "distances.sum", "distances.mean", "keep.sum", "distance_weights.to", "torch.binary_cross_entropy_with_logits", "lossByBatch.sum.sum", "distances.view().max", "distances.view().sum", "keep.sum.float", "distances.view", "distances.view"], "function", ["None"], ["", "", "", "def", "weighted_bce_loss", "(", "pred", ",", "gt", ",", "distances", ",", "ious", ",", "batch_size", ")", ":", "\n", "#remove any good predictions", "\n", "    ", "keep", "=", "ious", "<", "0.6", "\n", "#pred=pred[keep]", "\n", "#gt=gt[keep]", "\n", "distances", "=", "distances", "[", "keep", "]", "\n", "if", "batch_size", ">", "1", ":", "\n", "        ", "max_per_batch", "=", "distances", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "sum_per_batch", "=", "distances", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "[", "0", "]", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "epsilon", "=", "distances", ".", "mean", "(", "dim", "=", "1", ")", "\n", "count_per", "=", "keep", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "max_per_batch", "=", "distances", ".", "max", "(", ")", "\n", "sum_per_batch", "=", "distances", ".", "sum", "(", ")", "\n", "epsilon", "=", "distances", ".", "mean", "(", ")", "\n", "count_per", "=", "keep", ".", "sum", "(", ")", "\n", "", "distance_weights", "=", "(", "max_per_batch", "-", "distances", "+", "epsilon", ")", "/", "(", "sum_per_batch", "+", "count_per", ".", "float", "(", ")", "*", "epsilon", ")", "\n", "lossByBatch", "=", "distance_weights", ".", "to", "(", "pred", ".", "device", ")", "*", "F", ".", "binary_cross_entropy_with_logits", "(", "pred", "[", "keep", "]", ",", "gt", "[", "keep", "]", ",", "reduction", "=", "'none'", ")", "\n", "if", "batch_size", ">", "1", ":", "\n", "        ", "lossByBatch", "=", "lossByBatch", ".", "sum", "(", "dim", "=", "1", ")", "\n", "#lossByBatch= (-distance_weights*(gt*torch.log(pred) + (1-gt)*torch.log(1-pred))).sum(dim=1)", "\n", "", "distance_weights", "=", "None", "\n", "return", "lossByBatch", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.bbox_iou": [[195, 227], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "def", "bbox_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Returns the IoU of two bounding boxes\n    \"\"\"", "\n", "if", "not", "x1y1x2y2", ":", "\n", "# Transform from center and width to exact coordinates", "\n", "#I assume H and W are half", "\n", "        ", "b1_x1", ",", "b1_x2", "=", "box1", "[", ":", ",", "0", "]", "-", "box1", "[", ":", ",", "2", "]", ",", "box1", "[", ":", ",", "0", "]", "+", "box1", "[", ":", ",", "2", "]", "\n", "b1_y1", ",", "b1_y2", "=", "box1", "[", ":", ",", "1", "]", "-", "box1", "[", ":", ",", "3", "]", ",", "box1", "[", ":", ",", "1", "]", "+", "box1", "[", ":", ",", "3", "]", "\n", "b2_x1", ",", "b2_x2", "=", "box2", "[", ":", ",", "0", "]", "-", "box2", "[", ":", ",", "2", "]", ",", "box2", "[", ":", ",", "0", "]", "+", "box2", "[", ":", ",", "2", "]", "\n", "b2_y1", ",", "b2_y2", "=", "box2", "[", ":", ",", "1", "]", "-", "box2", "[", ":", ",", "3", "]", ",", "box2", "[", ":", ",", "1", "]", "+", "box2", "[", ":", ",", "3", "]", "\n", "", "else", ":", "\n", "# Get the coordinates of bounding boxes", "\n", "        ", "b1_x1", ",", "b1_y1", ",", "b1_x2", ",", "b1_y2", "=", "box1", "[", ":", ",", "0", "]", ",", "box1", "[", ":", ",", "1", "]", ",", "box1", "[", ":", ",", "2", "]", ",", "box1", "[", ":", ",", "3", "]", "\n", "b2_x1", ",", "b2_y1", ",", "b2_x2", ",", "b2_y2", "=", "box2", "[", ":", ",", "0", "]", ",", "box2", "[", ":", ",", "1", "]", ",", "box2", "[", ":", ",", "2", "]", ",", "box2", "[", ":", ",", "3", "]", "\n", "\n", "# get the corrdinates of the intersection rectangle", "\n", "", "inter_rect_x1", "=", "torch", ".", "max", "(", "b1_x1", ",", "b2_x1", ")", "\n", "inter_rect_y1", "=", "torch", ".", "max", "(", "b1_y1", ",", "b2_y1", ")", "\n", "inter_rect_x2", "=", "torch", ".", "min", "(", "b1_x2", ",", "b2_x2", ")", "\n", "inter_rect_y2", "=", "torch", ".", "min", "(", "b1_y2", ",", "b2_y2", ")", "\n", "# Intersection area", "\n", "inter_area", "=", "torch", ".", "clamp", "(", "inter_rect_x2", "-", "inter_rect_x1", "+", "1", ",", "min", "=", "0", ")", "*", "torch", ".", "clamp", "(", "\n", "inter_rect_y2", "-", "inter_rect_y1", "+", "1", ",", "min", "=", "0", "\n", ")", "\n", "# Union Area", "\n", "b1_area", "=", "(", "b1_x2", "-", "b1_x1", "+", "1", ")", "*", "(", "b1_y2", "-", "b1_y1", "+", "1", ")", "\n", "b2_area", "=", "(", "b2_x2", "-", "b2_x1", "+", "1", ")", "*", "(", "b2_y2", "-", "b2_y1", "+", "1", ")", "\n", "\n", "iou", "=", "inter_area", "/", "(", "b1_area", "+", "b2_area", "-", "inter_area", "+", "1e-16", ")", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.multi_bbox_iou": [[228, 270], ["b1_x1[].expand", "b1_y1[].expand", "b1_x2[].expand", "b1_y2[].expand", "b2_x1[].expand", "b2_y1[].expand", "b2_x2[].expand", "b2_y2[].expand", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "len", "len", "len", "len", "len", "len", "len", "len", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "def", "multi_bbox_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Returns the IoU of each box1 against each box2\n    \"\"\"", "\n", "if", "not", "x1y1x2y2", ":", "\n", "# Transform from center and width to exact coordinates", "\n", "#I assume H and W are half", "\n", "        ", "b1_x1", ",", "b1_x2", "=", "box1", "[", ":", ",", "0", "]", "-", "box1", "[", ":", ",", "2", "]", ",", "box1", "[", ":", ",", "0", "]", "+", "box1", "[", ":", ",", "2", "]", "\n", "b1_y1", ",", "b1_y2", "=", "box1", "[", ":", ",", "1", "]", "-", "box1", "[", ":", ",", "3", "]", ",", "box1", "[", ":", ",", "1", "]", "+", "box1", "[", ":", ",", "3", "]", "\n", "b2_x1", ",", "b2_x2", "=", "box2", "[", ":", ",", "0", "]", "-", "box2", "[", ":", ",", "2", "]", ",", "box2", "[", ":", ",", "0", "]", "+", "box2", "[", ":", ",", "2", "]", "\n", "b2_y1", ",", "b2_y2", "=", "box2", "[", ":", ",", "1", "]", "-", "box2", "[", ":", ",", "3", "]", ",", "box2", "[", ":", ",", "1", "]", "+", "box2", "[", ":", ",", "3", "]", "\n", "", "else", ":", "\n", "# Get the coordinates of bounding boxes", "\n", "        ", "b1_x1", ",", "b1_y1", ",", "b1_x2", ",", "b1_y2", "=", "box1", "[", ":", ",", "0", "]", ",", "box1", "[", ":", ",", "1", "]", ",", "box1", "[", ":", ",", "2", "]", ",", "box1", "[", ":", ",", "3", "]", "\n", "b2_x1", ",", "b2_y1", ",", "b2_x2", ",", "b2_y2", "=", "box2", "[", ":", ",", "0", "]", ",", "box2", "[", ":", ",", "1", "]", ",", "box2", "[", ":", ",", "2", "]", ",", "box2", "[", ":", ",", "3", "]", "\n", "\n", "", "b1_x1", "=", "b1_x1", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "len", "(", "box2", ")", ")", "\n", "b1_y1", "=", "b1_y1", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "len", "(", "box2", ")", ")", "\n", "b1_x2", "=", "b1_x2", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "len", "(", "box2", ")", ")", "\n", "b1_y2", "=", "b1_y2", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "len", "(", "box2", ")", ")", "\n", "\n", "b2_x1", "=", "b2_x1", "[", "None", ",", ":", "]", ".", "expand", "(", "len", "(", "box1", ")", ",", "-", "1", ")", "\n", "b2_y1", "=", "b2_y1", "[", "None", ",", ":", "]", ".", "expand", "(", "len", "(", "box1", ")", ",", "-", "1", ")", "\n", "b2_x2", "=", "b2_x2", "[", "None", ",", ":", "]", ".", "expand", "(", "len", "(", "box1", ")", ",", "-", "1", ")", "\n", "b2_y2", "=", "b2_y2", "[", "None", ",", ":", "]", ".", "expand", "(", "len", "(", "box1", ")", ",", "-", "1", ")", "\n", "\n", "# get the corrdinates of the intersection rectangle", "\n", "inter_rect_x1", "=", "torch", ".", "max", "(", "b1_x1", ",", "b2_x1", ")", "\n", "inter_rect_y1", "=", "torch", ".", "max", "(", "b1_y1", ",", "b2_y1", ")", "\n", "inter_rect_x2", "=", "torch", ".", "min", "(", "b1_x2", ",", "b2_x2", ")", "\n", "inter_rect_y2", "=", "torch", ".", "min", "(", "b1_y2", ",", "b2_y2", ")", "\n", "# Intersection area", "\n", "inter_area", "=", "torch", ".", "clamp", "(", "inter_rect_x2", "-", "inter_rect_x1", "+", "1", ",", "min", "=", "0", ")", "*", "torch", ".", "clamp", "(", "\n", "inter_rect_y2", "-", "inter_rect_y1", "+", "1", ",", "min", "=", "0", "\n", ")", "\n", "# Union Area", "\n", "b1_area", "=", "(", "b1_x2", "-", "b1_x1", "+", "1", ")", "*", "(", "b1_y2", "-", "b1_y1", "+", "1", ")", "\n", "b2_area", "=", "(", "b2_x2", "-", "b2_x1", "+", "1", ")", "*", "(", "b2_y2", "-", "b2_y1", "+", "1", ")", "\n", "\n", "iou", "=", "inter_area", "/", "(", "b1_area", "+", "b2_area", "-", "inter_area", "+", "1e-16", ")", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.get_closest_anchor_iou": [[272, 283], ["torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "yolo_loss.bbox_iou", "numpy.argmax", "numpy.concatenate", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.zeros", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.bbox_iou"], ["", "def", "get_closest_anchor_iou", "(", "anchors", ",", "gh", ",", "gw", ")", ":", "\n", "# Get shape of gt box", "\n", "    ", "gt_box", "=", "torch", ".", "FloatTensor", "(", "[", "0", ",", "0", ",", "gw", ",", "gh", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "# Get shape of anchor box", "\n", "anchor_shapes", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "len", "(", "anchors", ")", ",", "2", ")", ")", ",", "np", ".", "array", "(", "anchors", ")", ")", ",", "1", ")", ")", "\n", "# Calculate iou between gt and anchor shapes", "\n", "anch_ious", "=", "bbox_iou", "(", "gt_box", ",", "anchor_shapes", ")", "#these are at half their size, but IOU is the same", "\n", "# Find the best matching anchor box", "\n", "best_n", "=", "np", ".", "argmax", "(", "anch_ious", ")", "\n", "\n", "return", "best_n", ",", "anch_ious", "\n", "", "def", "multi_get_closest_anchor_iou", "(", "anchors", ",", "gh", ",", "gws", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.multi_get_closest_anchor_iou": [[283, 297], ["torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "enumerate", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "yolo_loss.multi_bbox_iou", "multi_bbox_iou.argmax", "numpy.concatenate", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "len", "numpy.zeros", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.multi_bbox_iou"], ["", "def", "multi_get_closest_anchor_iou", "(", "anchors", ",", "gh", ",", "gws", ")", ":", "\n", "# Get shape of gt box", "\n", "    ", "gt_box", "=", "torch", ".", "FloatTensor", "(", "len", "(", "gws", ")", ",", "4", ")", ".", "zero_", "(", ")", "\n", "gt_box", "[", ":", ",", "3", "]", "=", "torch", ".", "FloatTensor", "(", "len", "(", "gws", ")", ")", ".", "fill_", "(", "gh", ")", "\n", "for", "i", ",", "gw", "in", "enumerate", "(", "gws", ")", ":", "\n", "        ", "gt_box", "[", "i", ",", "2", "]", "=", "gw", "\n", "# Get shape of anchor box", "\n", "", "anchor_shapes", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "len", "(", "anchors", ")", ",", "2", ")", ")", ",", "np", ".", "array", "(", "anchors", ")", ")", ",", "1", ")", ")", "\n", "# Calculate iou between gt and anchor shapes", "\n", "anch_ious", "=", "multi_bbox_iou", "(", "gt_box", ",", "anchor_shapes", ")", "#these are at half their size, but IOU is the same", "\n", "# Find the best matching anchor box index", "\n", "best_n", "=", "anch_ious", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "return", "best_n", ",", "anch_ious", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.build_targets": [[298, 395], ["pred_boxes.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "range", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "Exception", "pred_boxes[].view", "utils.yolo_tools.allIOU", "iousB.view.view", "utils.yolo_tools.allDist", "[].view", "max", "max", "yolo_loss.get_closest_anchor_iou", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "pred_boxes[].unsqueeze", "utils.util.inv_tanh", "utils.util.inv_tanh", "math.log", "math.log", "torch.argmax", "torch.argmax", "torch.argmax", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "pred_boxes.size", "iousB.view.max", "min", "min", "yolo_loss.bbox_iou", "int", "int", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.argmax", "torch.argmax", "torch.argmax", "utils.yolo_tools.allDist.min", "torch.ones.size", "torch.ones.size", "numpy.array"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allIOU", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allDist", "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.get_closest_anchor_iou", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.inv_tanh", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.inv_tanh", "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.bbox_iou"], ["", "def", "build_targets", "(", "\n", "pred_boxes", ",", "pred_conf", ",", "pred_cls", ",", "target", ",", "target_sizes", ",", "anchors", ",", "num_anchors", ",", "num_classes", ",", "grid_sizeH", ",", "grid_sizeW", ",", "ignore_thres", ",", "scale", ",", "calcIOUAndDist", "=", "False", ",", "target_num_neighbors", "=", "None", "\n", ")", ":", "\n", "    ", "nB", "=", "pred_boxes", ".", "size", "(", "0", ")", "\n", "nA", "=", "num_anchors", "\n", "nC", "=", "num_classes", "\n", "nH", "=", "grid_sizeH", "\n", "nW", "=", "grid_sizeW", "\n", "mask", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "conf_mask", "=", "torch", ".", "ones", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "tx", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "ty", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "tw", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "th", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "tconf", "=", "torch", ".", "ByteTensor", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", ".", "fill_", "(", "0", ")", "\n", "tcls", "=", "torch", ".", "ByteTensor", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ",", "nC", ")", ".", "fill_", "(", "0", ")", "\n", "if", "target_num_neighbors", "is", "not", "None", ":", "\n", "        ", "tneighbors", "=", "torch", ".", "FloatTensor", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", ".", "fill_", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "tneighbors", "=", "None", "\n", "", "if", "calcIOUAndDist", ":", "\n", "        ", "distances", "=", "torch", ".", "ones", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "#distance to closest target", "\n", "ious", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "#max iou to target", "\n", "", "else", ":", "\n", "        ", "distances", "=", "None", "\n", "ious", "=", "None", "\n", "\n", "", "nGT", "=", "0", "\n", "nCorrect", "=", "0", "\n", "nCorrect_noclass", "=", "0", "\n", "#import pdb; pdb.set_trace()", "\n", "for", "b", "in", "range", "(", "nB", ")", ":", "\n", "        ", "if", "calcIOUAndDist", "and", "target_sizes", "[", "b", "]", ">", "0", ":", "\n", "            ", "raise", "Exception", "(", "'caclIOUAndDist does not have normalized target (scaled)'", ")", "\n", "flat_pred", "=", "pred_boxes", "[", "b", "]", ".", "view", "(", "-", "1", ",", "pred_boxes", ".", "size", "(", "-", "1", ")", ")", "\n", "#flat_target = target[b,:target_sizes[b]].view(-1,target.size(-1))", "\n", "iousB", "=", "allIOU", "(", "flat_pred", ",", "target", "[", "b", ",", ":", "target_sizes", "[", "b", "]", "]", ",", "boxes1XYWH", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "iousB", "=", "iousB", ".", "view", "(", "nA", ",", "nH", ",", "nW", ",", "-", "1", ")", "\n", "ious", "[", "b", "]", "=", "iousB", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "distancesB", "=", "allDist", "(", "flat_pred", ",", "target", "[", "b", ",", ":", "target_sizes", "[", "b", "]", "]", ")", "\n", "distances", "[", "b", "]", "=", "distancesB", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "view", "(", "nA", ",", "nH", ",", "nW", ")", "\n", "#import pdb;pdb.set_trace()", "\n", "\n", "", "for", "t", "in", "range", "(", "target_sizes", "[", "b", "]", ")", ":", "#range(target.shape[1]):", "\n", "#if target[b, t].sum() == 0:", "\n", "#    continue", "\n", "# Convert to position relative to box", "\n", "            ", "gx", "=", "target", "[", "b", ",", "t", ",", "0", "]", "/", "scale", "[", "0", "]", "\n", "gy", "=", "target", "[", "b", ",", "t", ",", "1", "]", "/", "scale", "[", "1", "]", "\n", "gw", "=", "target", "[", "b", ",", "t", ",", "4", "]", "/", "scale", "[", "0", "]", "\n", "gh", "=", "target", "[", "b", ",", "t", ",", "3", "]", "/", "scale", "[", "1", "]", "\n", "\n", "if", "gw", "==", "0", "or", "gh", "==", "0", ":", "\n", "                ", "continue", "\n", "", "nGT", "+=", "1", "\n", "# Get grid box indices", "\n", "gi", "=", "max", "(", "min", "(", "int", "(", "gx", ")", ",", "conf_mask", ".", "size", "(", "3", ")", "-", "1", ")", ",", "0", ")", "\n", "gj", "=", "max", "(", "min", "(", "int", "(", "gy", ")", ",", "conf_mask", ".", "size", "(", "2", ")", "-", "1", ")", ",", "0", ")", "\n", "#Get best matching anchor", "\n", "best_n", ",", "anch_ious", "=", "get_closest_anchor_iou", "(", "anchors", ",", "gh", ",", "gw", ")", "\n", "# Where the overlap is larger than threshold set mask to zero (ignore)", "\n", "conf_mask", "[", "b", ",", "anch_ious", ">", "ignore_thres", ",", "gj", ",", "gi", "]", "=", "0", "\n", "# Get ground truth box", "\n", "gt_box", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "[", "gx", ",", "gy", ",", "gw", ",", "gh", "]", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "# Get the best prediction", "\n", "pred_box", "=", "pred_boxes", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", ".", "unsqueeze", "(", "0", ")", "\n", "# Masks", "\n", "mask", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "1", "\n", "conf_mask", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "1", "#why not just set this to 0?", "\n", "# Coordigates", "\n", "tx", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "inv_tanh", "(", "gx", "-", "(", "gi", "+", "0.5", ")", ")", "\n", "ty", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "inv_tanh", "(", "gy", "-", "(", "gj", "+", "0.5", ")", ")", "\n", "# Width and height", "\n", "tw", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "math", ".", "log", "(", "gw", "/", "anchors", "[", "best_n", "]", "[", "0", "]", "+", "1e-16", ")", "\n", "th", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "math", ".", "log", "(", "gh", "/", "anchors", "[", "best_n", "]", "[", "1", "]", "+", "1e-16", ")", "\n", "# One-hot encoding of label", "\n", "#target_label = int(target[b, t, 0])", "\n", "tcls", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "target", "[", "b", ",", "t", ",", "-", "nC", ":", "]", "\n", "if", "target_num_neighbors", "is", "not", "None", ":", "\n", "                ", "tneighbors", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "target_num_neighbors", "[", "b", ",", "t", "]", "\n", "", "tconf", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "1", "\n", "\n", "# Calculate iou between ground truth and best matching prediction", "\n", "if", "calcIOUAndDist", ":", "\n", "#iou = ious[best_n*(nH*nW) + gj*(nW) + gi,t]", "\n", "                ", "iou", "=", "iousB", "[", "best_n", ",", "gj", ",", "gi", ",", "t", "]", "\n", "", "else", ":", "\n", "                ", "iou", "=", "bbox_iou", "(", "gt_box", ",", "pred_box", ",", "x1y1x2y2", "=", "False", ")", "\n", "", "pred_label", "=", "torch", ".", "argmax", "(", "pred_cls", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", ")", "\n", "score", "=", "pred_conf", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "\n", "#import pdb; pdb.set_trace()", "\n", "if", "iou", ">", "0.5", "and", "score", ">", "0", ":", "\n", "                ", "nCorrect_noclass", "+=", "1", "\n", "if", "torch", ".", "argmax", "(", "target", "[", "b", ",", "t", ",", "13", ":", "]", ")", "==", "pred_label", ":", "\n", "                    ", "nCorrect", "+=", "1", "\n", "\n", "", "", "", "", "return", "nGT", ",", "nCorrect", ",", "nCorrect_noclass", ",", "mask", ",", "conf_mask", ",", "tx", ",", "ty", ",", "tw", ",", "th", ",", "tconf", ",", "tcls", ",", "tneighbors", ",", "distances", ",", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.get_closest_anchor_dist": [[570, 589], ["math.cos", "math.sin", "torch.tensor", "torch.tensor", "torch.tensor", "yolo_loss.bbox_dist", "numpy.argmin"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.bbox_dist"], ["", "", "", "def", "get_closest_anchor_dist", "(", "anchors", ",", "rot", ",", "gh", ",", "gw", ")", ":", "\n", "#make points for rect", "\n", "    ", "cos_rot", "=", "math", ".", "cos", "(", "rot", ")", "\n", "sin_rot", "=", "math", ".", "sin", "(", "rot", ")", "\n", "g_left_x", "=", "-", "cos_rot", "*", "gw", "\n", "g_left_y", "=", "sin_rot", "*", "gw", "\n", "g_right_x", "=", "cos_rot", "*", "gw", "\n", "g_right_y", "=", "-", "sin_rot", "*", "gw", "\n", "g_top_x", "=", "-", "sin_rot", "*", "gh", "\n", "g_top_y", "=", "-", "cos_rot", "*", "gh", "\n", "g_bot_x", "=", "sin_rot", "*", "gh", "\n", "g_bot_y", "=", "cos_rot", "*", "gh", "\n", "gt_points", "=", "torch", ".", "tensor", "(", "[", "g_left_x", ",", "g_left_y", ",", "g_right_x", ",", "g_right_y", ",", "g_top_x", ",", "g_top_y", ",", "g_bot_x", ",", "g_bot_y", "]", ")", "\n", "\n", "anchor_points", "=", "anchors", "[", "0", "]", "\n", "anchor_hws", "=", "anchors", "[", "1", "]", "\n", "anch_dists", "=", "bbox_dist", "(", "gt_points", ",", "(", "gh", "+", "gw", ")", "/", "2.0", ",", "anchor_points", ",", "anchor_hws", ")", "\n", "best_n", "=", "np", ".", "argmin", "(", "anch_dists", ")", "\n", "return", "best_n", ",", "anch_dists", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.build_targets_dist": [[591, 676], ["pred_points.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "range", "range", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "max", "max", "yolo_loss.bbox_dist", "numpy.argmin", "utils.util.inv_tanh", "utils.util.inv_tanh", "utils.util.inv_tanh", "math.log", "math.log", "yolo_loss.bbox_dist", "torch.argmax", "torch.argmax", "torch.argmax", "min", "min", "int", "int", "torch.argmax", "torch.argmax", "torch.argmax", "torch.ones.size", "torch.ones.size"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.bbox_dist", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.inv_tanh", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.inv_tanh", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.inv_tanh", "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.bbox_dist"], ["", "def", "build_targets_dist", "(", "\n", "pred_points", ",", "pred_hws", ",", "pred_conf", ",", "pred_cls", ",", "target", ",", "target_sizes", ",", "anchors", ",", "anchor_points", ",", "anchor_hws", ",", "num_anchors", ",", "num_classes", ",", "grid_sizeH", ",", "grid_sizeW", ",", "ignore_thres", ",", "scale", "\n", ")", ":", "\n", "    ", "nB", "=", "pred_points", ".", "size", "(", "0", ")", "\n", "nA", "=", "num_anchors", "\n", "nC", "=", "num_classes", "\n", "nH", "=", "grid_sizeH", "\n", "nW", "=", "grid_sizeW", "\n", "mask", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "conf_mask", "=", "torch", ".", "ones", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "tx", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "ty", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "tw", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "th", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "tr", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "tconf", "=", "torch", ".", "ByteTensor", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", ".", "fill_", "(", "0", ")", "\n", "tcls", "=", "torch", ".", "ByteTensor", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ",", "nC", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "nGT", "=", "0", "\n", "nCorrect", "=", "0", "\n", "for", "b", "in", "range", "(", "nB", ")", ":", "\n", "        ", "for", "t", "in", "range", "(", "target_sizes", "[", "b", "]", ")", ":", "#range(target.shape[1]):", "\n", "#if target[b, t].sum() == 0:", "\n", "#    continue", "\n", "\n", "# Convert to position relative to box", "\n", "            ", "gx", "=", "target", "[", "b", ",", "t", ",", "0", "]", "/", "scale", "[", "0", "]", "\n", "gy", "=", "target", "[", "b", ",", "t", ",", "1", "]", "/", "scale", "[", "0", "]", "\n", "gw", "=", "target", "[", "b", ",", "t", ",", "4", "]", "/", "scale", "[", "0", "]", "\n", "gh", "=", "target", "[", "b", ",", "t", ",", "3", "]", "/", "scale", "[", "0", "]", "\n", "gr", "=", "target", "[", "b", ",", "t", ",", "2", "]", "\n", "if", "gw", "==", "0", "or", "gh", "==", "0", ":", "\n", "                ", "continue", "\n", "", "nGT", "+=", "1", "\n", "# Get grid box indices", "\n", "gi", "=", "max", "(", "min", "(", "int", "(", "gx", ")", ",", "conf_mask", ".", "size", "(", "3", ")", "-", "1", ")", ",", "0", ")", "\n", "gj", "=", "max", "(", "min", "(", "int", "(", "gy", ")", ",", "conf_mask", ".", "size", "(", "2", ")", "-", "1", ")", ",", "0", ")", "\n", "# Get shape of gt box", "\n", "gt_points", "=", "target", "[", "b", ",", "t", ",", "5", ":", "13", "]", "/", "scale", "[", "0", "]", "\n", "gt_points", "[", "[", "0", ",", "2", ",", "4", ",", "6", "]", "]", "-=", "gx", "#center the points about the origin instead of BB location", "\n", "gt_points", "[", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", "-=", "gy", "\n", "# Get shape of anchor box", "\n", "#anchor_shapes = torch.FloatTensor(np.concatenate((np.zeros((len(anchors), 2)), np.array(anchors)), 1))", "\n", "# Calculate iou between gt and anchor shapes", "\n", "anch_dists", "=", "bbox_dist", "(", "gt_points", ",", "(", "gh", "+", "gw", ")", "/", "2.0", ",", "anchor_points", ",", "anchor_hws", ")", "\n", "# Where the overlap is larger than threshold set mask to zero (ignore)", "\n", "conf_mask", "[", "b", ",", "anch_dists", "<", "ignore_thres", ",", "gj", ",", "gi", "]", "=", "0", "\n", "# Find the best matching anchor box", "\n", "best_n", "=", "np", ".", "argmin", "(", "anch_dists", ")", "\n", "# Get ground truth box", "\n", "gt_points", "=", "target", "[", "b", ",", "t", ",", "5", ":", "13", "]", "/", "scale", "[", "0", "]", "\n", "#gt_points[[0,2,4,6]]+=gx", "\n", "#gt_points[[1,3,5,7]]+=gy", "\n", "# Get the best prediction", "\n", "pred_point", "=", "pred_points", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "#.unsqueeze(0)", "\n", "pred_hw", "=", "pred_hws", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "#.unsqueeze(0)", "\n", "# Masks", "\n", "mask", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "1", "\n", "conf_mask", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "1", "\n", "# Coordinates", "\n", "tx", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "inv_tanh", "(", "gx", "-", "(", "gi", "+", "0.5", ")", ")", "\n", "ty", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "inv_tanh", "(", "gy", "-", "(", "gj", "+", "0.5", ")", ")", "\n", "# Rotation", "\n", "rot_diff", "=", "gr", "-", "anchors", "[", "best_n", "]", "[", "2", "]", "\n", "if", "rot_diff", ">", "math", ".", "pi", ":", "\n", "                ", "rot_diff", "-=", "2", "*", "math", ".", "pi", "\n", "", "elif", "rot_diff", "<", "-", "math", ".", "pi", ":", "\n", "                ", "rot_diff", "+=", "2", "*", "math", ".", "pi", "\n", "", "tr", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "inv_tanh", "(", "rot_diff", "/", "(", "math", ".", "pi", "/", "2", ")", ")", "\n", "# Width and height", "\n", "tw", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "math", ".", "log", "(", "gw", "/", "anchors", "[", "best_n", "]", "[", "0", "]", "+", "1e-16", ")", "\n", "th", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "math", ".", "log", "(", "gh", "/", "anchors", "[", "best_n", "]", "[", "1", "]", "+", "1e-16", ")", "\n", "# One-hot encoding of label", "\n", "#target_label = int(target[b, t, 0])", "\n", "tcls", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "target", "[", "b", ",", "t", ",", "13", ":", "]", "\n", "tconf", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "=", "1", "\n", "\n", "# Calculate iou between ground truth and best matching prediction", "\n", "dist", "=", "bbox_dist", "(", "gt_points", ",", "(", "gh", "+", "gw", ")", "/", "2.0", ",", "pred_point", ",", "pred_hw", ")", "\n", "pred_label", "=", "torch", ".", "argmax", "(", "pred_cls", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", ")", "\n", "score", "=", "pred_conf", "[", "b", ",", "best_n", ",", "gj", ",", "gi", "]", "\n", "if", "dist", "<", "0.85", "and", "pred_label", "==", "torch", ".", "argmax", "(", "target", "[", "b", ",", "t", ",", "13", ":", "]", ")", "and", "score", ">", "0.0", ":", "\n", "                ", "nCorrect", "+=", "1", "\n", "#nGT, nCorrect, mask, conf_mask, tx, ty, tw, th, tr, tconf, tcls", "\n", "", "", "", "return", "nGT", ",", "nCorrect", ",", "mask", ",", "conf_mask", ",", "tx", ",", "ty", ",", "tw", ",", "th", ",", "tr", ",", "tconf", ",", "tcls", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_loss.bbox_dist": [[678, 725], ["box1[].expand", "box1H[].expand", "box2[].expand", "box2H[].expand", "len", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "len", "torch.tensor", "torch.tensor", "torch.tensor", "box1.size", "box2.size", "box1.size", "box2.size", "box1.size", "box2.size", "box1.size", "box2.size", "box2.size", "box1.size", "box1.size", "box2.size", "dist.size", "torch.norm", "torch.norm", "torch.norm", "dist.size", "dist.size", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "function", ["None"], ["", "def", "bbox_dist", "(", "box1", ",", "box1H", ",", "box2", ",", "box2H", ")", ":", "\n", "    ", "\"\"\"\n    Returns the point distance of bounding boxes\n    the boxes are [leftX,Y,rightX,Y,topX,Y,botX,Y]\n    \"\"\"", "\n", "if", "len", "(", "box2", ".", "size", "(", ")", ")", ">", "1", "or", "len", "(", "box1", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "        ", "if", "len", "(", "box1", ".", "size", "(", ")", ")", "==", "1", ":", "\n", "            ", "box1", "=", "box1", "[", "None", ",", ":", "]", "\n", "box1H", "=", "torch", ".", "tensor", "(", "[", "box1H", "]", ")", "\n", "flat1", "=", "True", "\n", "", "else", ":", "\n", "            ", "flat1", "=", "False", "\n", "", "if", "len", "(", "box2", ".", "size", "(", ")", ")", "==", "1", ":", "\n", "            ", "box2", "=", "box2", "[", "None", ",", ":", "]", "\n", "box2H", "=", "torch", ".", "tensor", "(", "[", "box2H", "]", ")", "\n", "flat2", "=", "True", "\n", "", "else", ":", "\n", "            ", "flat2", "=", "False", "\n", "", "expanded1", "=", "box1", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "box1", ".", "size", "(", "0", ")", ",", "box2", ".", "size", "(", "0", ")", ",", "8", ")", "\n", "expanded1H", "=", "box1H", "[", ":", ",", "None", "]", ".", "expand", "(", "box1", ".", "size", "(", "0", ")", ",", "box2", ".", "size", "(", "0", ")", ")", "\n", "expanded2", "=", "box2", "[", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "box1", ".", "size", "(", "0", ")", ",", "box2", ".", "size", "(", "0", ")", ",", "8", ")", "\n", "expanded2H", "=", "box2H", "[", "None", ",", ":", "]", ".", "expand", "(", "box1", ".", "size", "(", "0", ")", ",", "box2", ".", "size", "(", "0", ")", ")", "\n", "\n", "normalization", "=", "(", "expanded1H", "+", "expanded2H", ")", "/", "2.0", "\n", "\n", "deltas", "=", "expanded1", "-", "expanded2", "\n", "dist", "=", "(", "(", "\n", "torch", ".", "norm", "(", "deltas", "[", ":", ",", ":", ",", "0", ":", "2", "]", ",", "2", ",", "2", ")", "+", "\n", "torch", ".", "norm", "(", "deltas", "[", ":", ",", ":", ",", "2", ":", "4", "]", ",", "2", ",", "2", ")", "+", "\n", "torch", ".", "norm", "(", "deltas", "[", ":", ",", ":", ",", "4", ":", "6", "]", ",", "2", ",", "2", ")", "+", "\n", "torch", ".", "norm", "(", "deltas", "[", ":", ",", ":", ",", "6", ":", "8", "]", ",", "2", ",", "2", ")", "\n", ")", "/", "normalization", ")", "**", "2", "\n", "if", "flat1", ":", "\n", "            ", "assert", "(", "dist", ".", "size", "(", "0", ")", "==", "1", ")", "\n", "dist", "=", "dist", "[", "0", "]", "\n", "", "if", "flat2", ":", "\n", "            ", "if", "flat1", ":", "\n", "                ", "assert", "(", "dist", ".", "size", "(", "0", ")", "==", "1", ")", "\n", "dist", "=", "dist", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "assert", "(", "dist", ".", "size", "(", "1", ")", "==", "1", ")", "\n", "dist", "=", "dist", "[", ":", ",", "0", "]", "\n", "", "", "", "else", ":", "\n", "        ", "diff", "=", "box1", "-", "box2", "\n", "normalizer", "=", "(", "box1H", "+", "box2H", ")", "/", "2.0", "\n", "dist", "=", "(", "(", "torch", ".", "norm", "(", "diff", "[", "0", ":", "2", "]", ")", "+", "torch", ".", "norm", "(", "diff", "[", "2", ":", "4", "]", ")", "+", "torch", ".", "norm", "(", "diff", "[", "4", ":", "6", "]", ")", "+", "torch", ".", "norm", "(", "diff", "[", "6", ":", "8", "]", ")", ")", "/", "normalizer", ")", "**", "2", "\n", "", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.__init__": [[76, 187], ["base.BaseModel.__init__", "fudge.FUDGE.detector.setForGraphPairing", "fudge.FUDGE.buildNet", "os.path.exists", "os.path.exists", "fudge.FUDGE.detector.parameters", "type", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "NotImplementedError", "eval", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "checkpoint[].items", "fudge.FUDGE.detector.load_state_dict", "json.load", "fudge.FUDGE.detector.load_state_dict", "name.startswith", "FileNotFoundError", "open", "eval"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_box_detector.YoloBoxDetector.setForGraphPairing", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.buildNet"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "FUDGE", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "#First load in the detector using the checkpoint", "\n", "if", "'detector_checkpoint'", "in", "config", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "config", "[", "'detector_checkpoint'", "]", ")", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'detector_checkpoint'", "]", ",", "map_location", "=", "lambda", "storage", ",", "location", ":", "storage", ")", "\n", "checkpoint", "[", "'config'", "]", "[", "'model'", "]", "[", "'arch'", "]", "=", "checkpoint", "[", "'config'", "]", "[", "'arch'", "]", "\n", "", "else", ":", "\n", "                ", "checkpoint", "=", "None", "\n", "print", "(", "'Warning: unable to load {}'", ".", "format", "(", "config", "[", "'detector_checkpoint'", "]", ")", ")", "\n", "", "detector_config", "=", "json", ".", "load", "(", "open", "(", "config", "[", "'detector_config'", "]", ")", ")", "[", "'model'", "]", "if", "'detector_config'", "in", "config", "else", "checkpoint", "[", "'config'", "]", "[", "'model'", "]", "\n", "if", "checkpoint", "is", "None", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "elif", "'state_dict'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "detector", "=", "eval", "(", "detector_config", "[", "'arch'", "]", ")", "(", "detector_config", ")", "\n", "self", ".", "detector", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "detector", "=", "checkpoint", "[", "'model'", "]", "\n", "", "", "else", ":", "\n", "            ", "detector_config", "=", "config", "[", "'detector_config'", "]", "\n", "self", ".", "detector", "=", "eval", "(", "detector_config", "[", "'arch'", "]", ")", "(", "detector_config", ")", "\n", "\n", "#Alternatively you can load the detector from a snapshot of the full model", "\n", "#but you need to define the dector architecture in config['detector_config']", "\n", "", "if", "'pretrained_backbone_checkpoint'", "in", "config", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "config", "[", "'pretrained_backbone_checkpoint'", "]", ")", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'pretrained_backbone_checkpoint'", "]", ",", "map_location", "=", "lambda", "storage", ",", "location", ":", "storage", ")", "\n", "detector_state_dict", "=", "{", "}", "\n", "for", "name", ",", "data", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "                    ", "if", "name", ".", "startswith", "(", "'detector.'", ")", ":", "\n", "                        ", "detector_state_dict", "[", "name", "[", "9", ":", "]", "]", "=", "data", "\n", "", "", "self", ".", "detector", ".", "load_state_dict", "(", "detector_state_dict", ")", "\n", "", "elif", "'DONT_NEED_TO_LOAD_PRETRAINED'", "not", "in", "config", "or", "not", "config", "[", "'DONT_NEED_TO_LOAD_PRETRAINED'", "]", ":", "\n", "                ", "raise", "FileNotFoundError", "(", "'Could not find pretrained backbone: {}'", ".", "format", "(", "config", "[", "'pretrained_backbone_checkpoint'", "]", ")", ")", "\n", "\n", "", "", "self", ".", "detector_predNumNeighbors", "=", "False", "\n", "assert", "not", "self", ".", "detector", ".", "predNumNeighbors", "\n", "\n", "#select which layers of the detector to use as features for the graph", "\n", "#This is a bit convoluted becuase the detector's architecture has some layers to it", "\n", "useBeginningOfLast", "=", "config", "[", "'use_beg_det_feats'", "]", "if", "'use_beg_det_feats'", "in", "config", "else", "False", "\n", "useFeatsLayer", "=", "config", "[", "'use_detect_layer_feats'", "]", "if", "'use_detect_layer_feats'", "in", "config", "else", "-", "1", "\n", "useFeatsScale", "=", "config", "[", "'use_detect_scale_feats'", "]", "if", "'use_detect_scale_feats'", "in", "config", "else", "-", "2", "\n", "useFLayer2", "=", "config", "[", "'use_2nd_detect_layer_feats'", "]", "if", "'use_2nd_detect_layer_feats'", "in", "config", "else", "None", "\n", "useFScale2", "=", "config", "[", "'use_2nd_detect_scale_feats'", "]", "if", "'use_2nd_detect_scale_feats'", "in", "config", "else", "None", "\n", "detectorSavedFeatSize", "=", "config", "[", "'use_detect_feats_size'", "]", "if", "'use_detect_feats_size'", "in", "config", "else", "self", ".", "detector", ".", "last_channels", "\n", "assert", "(", "(", "useFeatsScale", "==", "-", "2", ")", "or", "(", "'use_detect_feats_size'", "in", "config", ")", ")", "\n", "detectorSavedFeatSize2", "=", "config", "[", "'use_2nd_detect_feats_size'", "]", "if", "'use_2nd_detect_feats_size'", "in", "config", "else", "None", "\n", "\n", "\n", "self", ".", "use2ndFeatures", "=", "useFLayer2", "is", "not", "None", "\n", "\n", "\n", "#Have the detector set up the hooks on the correct layers", "\n", "self", ".", "detector", ".", "setForGraphPairing", "(", "useBeginningOfLast", ",", "useFeatsLayer", ",", "useFeatsScale", ",", "useFLayer2", ",", "useFScale2", ")", "\n", "\n", "if", "'detect_save_scale'", "in", "config", ":", "\n", "            ", "detect_save_scale", "=", "config", "[", "'detect_save_scale'", "]", "\n", "", "elif", "useBeginningOfLast", ":", "\n", "            ", "detect_save_scale", "=", "self", ".", "detector", ".", "scale", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "detect_save_scale", "=", "self", ".", "detector", ".", "save_scale", "\n", "", "if", "'detect_save2_scale'", "in", "config", ":", "\n", "            ", "detect_save2_scale", "=", "config", "[", "'detect_save2_scale'", "]", "\n", "", "elif", "self", ".", "use2ndFeatures", ":", "\n", "            ", "detect_save2_scale", "=", "self", ".", "detector", ".", "save2_scale", "\n", "", "else", ":", "\n", "            ", "detect_save2_scale", "=", "None", "\n", "\n", "\n", "#whether to start the detector frozen", "\n", "", "if", "(", "config", "[", "'start_frozen'", "]", "if", "'start_frozen'", "in", "config", "else", "False", ")", ":", "\n", "            ", "for", "param", "in", "self", ".", "detector", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "will_use_grad", "=", "param", ".", "requires_grad", "\n", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "detector_frozen", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "detector_frozen", "=", "False", "\n", "\n", "\n", "#get parameters from detector", "\n", "", "self", ".", "numBBTypes", "=", "self", ".", "detector", ".", "numBBTypes", "\n", "self", ".", "rotation", "=", "self", ".", "detector", ".", "rotation", "\n", "self", ".", "scale", "=", "self", ".", "detector", ".", "scale", "\n", "self", ".", "anchors", "=", "self", ".", "detector", ".", "anchors", "\n", "if", "'detect_conf_thresh'", "in", "config", ":", "\n", "            ", "self", ".", "detect_conf_thresh", "=", "config", "[", "'detect_conf_thresh'", "]", "\n", "", "elif", "'conf_thresh'", "in", "config", ":", "\n", "            ", "self", ".", "detect_conf_thresh", "=", "config", "[", "'conf_thresh'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "detect_conf_thresh", "=", "0.5", "\n", "", "self", ".", "useHardConfThresh", "=", "config", "[", "'use_hard_conf_thresh'", "]", "if", "'use_hard_conf_thresh'", "in", "config", "else", "True", "\n", "\n", "\n", "if", "type", "(", "self", ".", "detector", ".", "scale", "[", "0", "]", ")", "is", "int", ":", "\n", "            ", "assert", "(", "self", ".", "detector", ".", "scale", "[", "0", "]", "==", "self", ".", "detector", ".", "scale", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "for", "level_sc", "in", "self", ".", "detector", ".", "scale", ":", "\n", "                ", "assert", "(", "level_sc", "[", "0", "]", "==", "level_sc", "[", "1", "]", ")", "\n", "\n", "\n", "", "", "self", ".", "set_detect_params", "=", "(", "useBeginningOfLast", ",", "useFeatsLayer", ",", "useFeatsScale", ",", "useFLayer2", ",", "useFScale2", ")", "\n", "\n", "\n", "self", ".", "numTextFeats", "=", "0", "#no text", "\n", "\n", "\n", "\n", "#Use collected detector paramters to build the GCN and all those little networks", "\n", "self", ".", "buildNet", "(", "config", ",", "detectorSavedFeatSize", ",", "detectorSavedFeatSize2", ",", "detect_save_scale", ",", "detect_save2_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.buildNet": [[190, 598], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model.net_builder.make_layers", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fudge.FUDGE.graphnets.append", "fudge.FUDGE.mergeThresh.append", "fudge.FUDGE.groupThresh.append", "fudge.FUDGE.keepEdgeThresh.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fudge.FUDGE.node_transition_layers.append", "fudge.FUDGE.edge_transition_layers.append", "range", "NotImplementedError", "NotImplementedError", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fudge.FUDGE.detector.setDEBUG", "fudge.FUDGE.setDEBUG", "model.net_builder.make_layers", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torchvision.ops.RoIAlign", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torchvision.ops.RoIAlign", "model.net_builder.make_layers", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "fudge.FUDGE.node_transition_layers.append", "fudge.FUDGE.edge_transition_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fudge.FUDGE.reintroduce_node_visual_activations.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fudge.FUDGE.reintroduce_edge_visual_activations.append", "range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "type", "model.net_builder.make_layers", "torch.Sequential", "torch.Sequential", "torch.Sequential", "featurizer_conv.append", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torchvision.ops.RoIAlign", "type", "model.net_builder.make_layers", "convlayers.append", "torchvision.ops.RoIAlign", "eval", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "fudge.FUDGE.reintroduce_node_visual_activations.append", "fudge.FUDGE.reintroduce_edge_visual_activations.append", "print", "model.net_builder.make_layers", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.net_builder.make_layers", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "type", "len", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "type", "type", "model.net_builder.getGroupSize", "type", "model.net_builder.getGroupSize", "model.net_builder.getGroupSize", "type", "type", "type", "type", "type", "type", "type", "type", "type", "type"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.setDEBUG", "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.setDEBUG", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize"], ["", "def", "buildNet", "(", "self", ",", "config", ",", "backboneSavedFeatSize", ",", "backboneSavedFeatSize2", ",", "backbone_save_scale", ",", "backbone_save2_scale", ")", ":", "\n", "        ", "self", ".", "all_grad", "=", "False", "\n", "\n", "#Whether to have a seperate CNN process the two layers of detector features", "\n", "self", ".", "splitFeatures", "=", "config", "[", "'split_features_scale'", "]", "if", "'split_features_scale'", "in", "config", "else", "False", "\n", "\n", "if", "self", ".", "use2ndFeatures", "and", "not", "self", ".", "splitFeatures", ":", "\n", "            ", "backboneSavedFeatSize", "+=", "backboneSavedFeatSize2", "\n", "\n", "#whether the GCN should predict new class for nodes", "\n", "", "self", ".", "predClass", "=", "config", "[", "'pred_class'", "]", "if", "'pred_class'", "in", "config", "else", "False", "\n", "\n", "self", ".", "predNN", "=", "False", "#does not predict num neighbors", "\n", "\n", "self", ".", "prevent_vert_merges", "=", "config", "[", "'prevent_vert_merges'", "]", "if", "'prevent_vert_merges'", "in", "config", "else", "False", "\n", "\n", "\n", "self", ".", "nodeIdxConf", "=", "0", "\n", "self", ".", "nodeIdxClass", "=", "1", "\n", "self", ".", "nodeIdxClassEnd", "=", "self", ".", "nodeIdxClass", "+", "self", ".", "numBBTypes", "\n", "\n", "#graph_in_channels is both the input size and hidden size of the GCN", "\n", "graph_in_channels", "=", "config", "[", "'graph_config'", "]", "[", "0", "]", "[", "'in_channels'", "]", "if", "'in_channels'", "in", "config", "[", "'graph_config'", "]", "[", "0", "]", "else", "1", "\n", "\n", "self", ".", "useBBVisualFeats", "=", "True", "\n", "if", "(", "type", "(", "config", "[", "'graph_config'", "]", ")", "is", "str", "and", "config", "[", "'graph_config'", "]", "[", "'arch'", "]", "[", ":", "10", "]", "==", "'BinaryPair'", "and", "not", "self", ".", "predNN", ")", "or", "(", "'noBBVisualFeats'", "in", "config", "and", "config", "[", "'noBBVisualFeats'", "]", ")", ":", "\n", "            ", "self", ".", "useBBVisualFeats", "=", "False", "\n", "\n", "", "if", "'use_rel_shape_feats'", "in", "config", ":", "\n", "             ", "config", "[", "'use_shape_feats'", "]", "=", "config", "[", "'use_rel_shape_feats'", "]", "\n", "", "self", ".", "useShapeFeats", "=", "config", "[", "'use_shape_feats'", "]", "if", "'use_shape_feats'", "in", "config", "else", "False", "\n", "#This can be set to 'only' to turn off the visual features", "\n", "#'only for edge' will turn off visual features for edges", "\n", "\n", "if", "self", ".", "useShapeFeats", "!=", "'only'", ":", "\n", "            ", "if", "self", ".", "useShapeFeats", "!=", "'only for edge'", ":", "\n", "                ", "self", ".", "pool_h", "=", "config", "[", "'featurizer_start_h'", "]", "\n", "self", ".", "pool_w", "=", "config", "[", "'featurizer_start_w'", "]", "\n", "self", ".", "pool2_h", "=", "self", ".", "pool_h", "\n", "self", ".", "pool2_w", "=", "self", ".", "pool_w", "\n", "\n", "#ROIAlign result size", "\n", "", "self", ".", "poolBB_h", "=", "config", "[", "'featurizer_bb_start_h'", "]", "if", "'featurizer_bb_start_h'", "in", "config", "else", "2", "\n", "self", ".", "poolBB_w", "=", "config", "[", "'featurizer_bb_start_w'", "]", "if", "'featurizer_bb_start_w'", "in", "config", "else", "3", "\n", "\n", "self", ".", "poolBB2_h", "=", "self", ".", "poolBB_h", "\n", "self", ".", "poolBB2_w", "=", "self", ".", "poolBB_w", "\n", "\n", "#if your using this for the merge-only first step", "\n", "", "self", ".", "merge_pool_h", "=", "self", ".", "merge_pool2_h", "=", "config", "[", "'merge_featurizer_start_h'", "]", "if", "'merge_featurizer_start_h'", "in", "config", "else", "None", "\n", "self", ".", "merge_pool_w", "=", "self", ".", "merge_pool2_w", "=", "config", "[", "'merge_featurizer_start_w'", "]", "if", "'merge_featurizer_start_w'", "in", "config", "else", "None", "\n", "\n", "#Telling it to re-append the visual features at each GCN", "\n", "self", ".", "reintroduce_features", "=", "config", "[", "'reintroduce_features'", "]", "if", "'reintroduce_features'", "in", "config", "else", "(", "config", "[", "'reintroduce_visual_features'", "]", "if", "'reintroduce_visual_features'", "in", "config", "else", "False", ")", "#\"fixed map\"", "\n", "\n", "\n", "#Add x,y location as a spatial feature", "\n", "self", ".", "usePositionFeature", "=", "config", "[", "'use_position_feats'", "]", "if", "'use_position_feats'", "in", "config", "else", "False", "\n", "assert", "(", "not", "self", ".", "usePositionFeature", "or", "self", ".", "useShapeFeats", ")", "\n", "\n", "#Look at these magic numbers...", "\n", "#These were based on the average height and width of NAF bbs", "\n", "self", ".", "normalizeHorz", "=", "config", "[", "'normalize_horz'", "]", "if", "'normalize_horz'", "in", "config", "else", "400", "\n", "self", ".", "normalizeVert", "=", "config", "[", "'normalize_vert'", "]", "if", "'normalize_vert'", "in", "config", "else", "50", "\n", "self", ".", "normalizeDist", "=", "(", "self", ".", "normalizeHorz", "+", "self", ".", "normalizeVert", ")", "/", "2", "\n", "\n", "\n", "if", "self", ".", "useShapeFeats", ":", "\n", "           ", "self", ".", "shape_feats_normal", "=", "config", "[", "'shape_feats_normal'", "]", "if", "'shape_feats_normal'", "in", "config", "else", "True", "\n", "self", ".", "numShapeFeats", "=", "8", "+", "2", "*", "self", ".", "numBBTypes", "#we'll append some extra feats", "\n", "self", ".", "numShapeFeatsBB", "=", "3", "+", "self", ".", "numBBTypes", "\n", "if", "self", ".", "useShapeFeats", "!=", "'old'", ":", "\n", "               ", "self", ".", "numShapeFeats", "+=", "4", "\n", "", "if", "self", ".", "usePositionFeature", ":", "\n", "               ", "self", ".", "numShapeFeats", "+=", "4", "\n", "self", ".", "numShapeFeatsBB", "+=", "2", "\n", "", "", "else", ":", "\n", "           ", "self", ".", "numShapeFeats", "=", "0", "\n", "self", ".", "numShapeFeatsBB", "=", "0", "\n", "\n", "\n", "\n", "", "for", "graphconfig", "in", "config", "[", "'graph_config'", "]", ":", "\n", "            ", "graphconfig", "[", "'num_shape_feats'", "]", "=", "self", ".", "numShapeFeats", "\n", "", "featurizer_fc", "=", "config", "[", "'featurizer_fc'", "]", "if", "'featurizer_fc'", "in", "config", "else", "[", "]", "\n", "if", "self", ".", "useShapeFeats", "!=", "'only'", ":", "\n", "#We're using visual features", "\n", "\n", "#This is the padding added to the node feature windows", "\n", "            ", "self", ".", "expandedBBContext", "=", "config", "[", "'expand_bb_context'", "]", "if", "'expand_bb_context'", "in", "config", "else", "None", "\n", "if", "self", ".", "expandedBBContext", "is", "not", "None", ":", "#we only will use the mask if we're padding", "\n", "                ", "bbMasks_bb", "=", "2", "\n", "", "else", ":", "\n", "                ", "bbMasks_bb", "=", "0", "\n", "\n", "", "self", ".", "splitFeatureRes", "=", "config", "[", "'split_feature_res'", "]", "if", "'split_feature_res'", "in", "config", "else", "False", "\n", "\n", "feat_norm", "=", "config", "[", "'feat_norm'", "]", "if", "'feat_norm'", "in", "config", "else", "'group_norm'", "#detector_config['norm_type'] #if 'norm_type' in detector_config else None", "\n", "if", "self", ".", "useShapeFeats", "!=", "'only for edge'", ":", "\n", "#This is the padding for edge windows", "\n", "                ", "self", ".", "expandedRelContext", "=", "config", "[", "'expand_rel_context'", "]", "if", "'expand_rel_context'", "in", "config", "else", "None", "\n", "if", "self", ".", "expandedRelContext", "is", "not", "None", ":", "#we will only use the everything mask if we're padding", "\n", "                    ", "bbMasks", "=", "3", "\n", "", "else", ":", "\n", "                    ", "bbMasks", "=", "2", "\n", "#although it probably should anyway...", "\n", "\n", "#this is the definition of the CNN for the edge feature windows", "\n", "", "featurizer_conv", "=", "config", "[", "'featurizer_conv'", "]", "if", "'featurizer_conv'", "in", "config", "else", "[", "512", ",", "'M'", ",", "512", "]", "\n", "if", "self", ".", "splitFeatures", ":", "\n", "#the alternate 2nd CNN", "\n", "                    ", "featurizer_conv2", "=", "config", "[", "'featurizer_conv_first'", "]", "if", "'featurizer_conv_first'", "in", "config", "else", "None", "\n", "featurizer_conv2", "=", "[", "backboneSavedFeatSize2", "+", "bbMasks", "]", "+", "featurizer_conv2", "#bbMasks are appended", "\n", "scaleX", "=", "1", "\n", "scaleY", "=", "1", "\n", "for", "a", "in", "featurizer_conv2", ":", "\n", "                        ", "if", "a", "==", "'M'", "or", "(", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'D'", ")", ":", "\n", "                            ", "scaleX", "*=", "2", "\n", "scaleY", "*=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'U'", ":", "\n", "                            ", "scaleX", "/=", "2", "\n", "scaleY", "/=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", ":", "4", "]", "==", "'long'", ":", "#long pool", "\n", "                            ", "scaleX", "*=", "3", "\n", "scaleY", "*=", "2", "\n", "", "", "assert", "(", "scaleX", "==", "scaleY", ")", "\n", "splitScaleDiff", "=", "scaleX", "\n", "self", ".", "pool_h", "=", "self", ".", "pool_h", "//", "splitScaleDiff", "\n", "self", ".", "pool_w", "=", "self", ".", "pool_w", "//", "splitScaleDiff", "\n", "layers", ",", "last_ch_relC", "=", "make_layers", "(", "featurizer_conv2", ",", "norm", "=", "feat_norm", ",", "dropout", "=", "True", ")", "\n", "self", ".", "relFeaturizerConv2", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "featurizer_conv", "=", "[", "backboneSavedFeatSize", "+", "last_ch_relC", "]", "+", "featurizer_conv", "\n", "", "else", ":", "\n", "#add input channels", "\n", "                    ", "featurizer_conv", "=", "[", "backboneSavedFeatSize", "+", "bbMasks", "]", "+", "featurizer_conv", "#bbMasks are appended", "\n", "\n", "#Figure out how much the scale changes", "\n", "", "scaleX", "=", "1", "\n", "scaleY", "=", "1", "\n", "for", "a", "in", "featurizer_conv", ":", "\n", "                    ", "if", "a", "==", "'M'", "or", "(", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'D'", ")", ":", "#maxpool/downsample", "\n", "                        ", "scaleX", "*=", "2", "\n", "scaleY", "*=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'U'", ":", "#upsample", "\n", "                        ", "scaleX", "/=", "2", "\n", "scaleY", "/=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", ":", "4", "]", "==", "'long'", ":", "#long pool", "\n", "                        ", "scaleX", "*=", "3", "\n", "scaleY", "*=", "2", "\n", "#self.scale=(scaleX,scaleY) this holds scale for detector", "\n", "", "", "fsizeX", "=", "self", ".", "pool_w", "//", "scaleX", "\n", "fsizeY", "=", "self", ".", "pool_h", "//", "scaleY", "\n", "\n", "if", "'featurizer_conv_auto'", "in", "config", "and", "config", "[", "'featurizer_conv_auto'", "]", ":", "\n", "#add the correct 3x3 conv layer so when the result is appended to the shape/spatial features, it will be the right size to go into the GCN", "\n", "                    ", "featurizer_conv", ".", "append", "(", "graph_in_channels", "-", "self", ".", "numShapeFeats", ")", "\n", "assert", "featurizer_fc", "is", "None", "\n", "\n", "#actual construct the CNN", "\n", "", "layers", ",", "last_ch_relC", "=", "make_layers", "(", "featurizer_conv", ",", "norm", "=", "feat_norm", ",", "dropout", "=", "True", ")", "\n", "\n", "if", "featurizer_fc", "is", "None", ":", "#we don't have a FC layer, so channels need to be the same as graph model expects", "\n", "#if we used featurizer_conv_auto it will match", "\n", "                    ", "if", "last_ch_relC", "+", "self", ".", "numShapeFeats", "!=", "graph_in_channels", ":", "\n", "#a less elegant correction", "\n", "                        ", "new_layer", "=", "[", "last_ch_relC", ",", "'k1-{}'", ".", "format", "(", "graph_in_channels", "-", "self", ".", "numShapeFeats", ")", "]", "\n", "print", "(", "'WARNING: featurizer_conv did not line up with graph_in_channels, adding layer k1-{}'", ".", "format", "(", "graph_in_channels", "-", "self", ".", "numShapeFeats", ")", ")", "\n", "#new_layer = last_ch_relC,'C3-{}'.format(graph_in_channels-self.numShapeFeats)]", "\n", "new_layer", ",", "last_ch_relC", "=", "make_layers", "(", "new_layer", ",", "norm", "=", "feat_norm", ",", "dropout", "=", "True", ")", "\n", "layers", "+=", "new_layer", "\n", "\n", "#add the final \"global\" pool", "\n", "", "", "layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "(", "fsizeY", ",", "fsizeX", ")", ")", ")", "\n", "self", ".", "relFeaturizerConv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "rel_featurizer_conv_last", "=", "last_ch_relC", "\n", "\n", "#here's the ROIAligns for the edge visual features window", "\n", "self", ".", "roi_align", "=", "RoIAlign", "(", "(", "self", ".", "pool_h", ",", "self", ".", "pool_w", ")", ",", "1.0", "/", "backbone_save_scale", ",", "-", "1", ")", "\n", "if", "self", ".", "use2ndFeatures", ":", "\n", "#for the 2nd layer of features", "\n", "                    ", "self", ".", "roi_align2", "=", "RoIAlign", "(", "(", "self", ".", "pool2_h", ",", "self", ".", "pool2_w", ")", ",", "1.0", "/", "backbone_save2_scale", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "last_ch_relC", "=", "0", "\n", "", "", "else", ":", "\n", "                ", "rel_featurizer_conv_last", "=", "0", "\n", "last_ch_relC", "=", "0", "\n", "self", ".", "expandedRelContext", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "rel_featurizer_conv_last", "=", "0", "\n", "\n", "\n", "", "feat_norm_fc", "=", "'group_norm'", "#I use GroupNorm everywhere as a batch size of 1 is used in training", "\n", "\n", "if", "featurizer_fc", "is", "not", "None", ":", "\n", "#this is an extra layer, but it's purpose is replaced by the transition layers", "\n", "            ", "if", "type", "(", "self", ".", "reintroduce_features", ")", "is", "str", "and", "'map'", "in", "self", ".", "reintroduce_features", ":", "\n", "                ", "featurizer_fc", "=", "[", "rel_featurizer_conv_last", "+", "self", ".", "numShapeFeats", "]", "+", "featurizer_fc", "+", "[", "'FC{}'", ".", "format", "(", "graph_in_channels", ")", "]", "\n", "", "else", ":", "\n", "                ", "featurizer_fc", "=", "[", "rel_featurizer_conv_last", "+", "self", ".", "numShapeFeats", "]", "+", "featurizer_fc", "+", "[", "'FCnR{}'", ".", "format", "(", "graph_in_channels", ")", "]", "\n", "", "layers", ",", "last_ch_rel", "=", "make_layers", "(", "featurizer_fc", ",", "norm", "=", "feat_norm_fc", ",", "dropout", "=", "True", ")", "\n", "self", ".", "relFeaturizerFC", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relFeaturizerFC", "=", "None", "\n", "\n", "", "if", "self", ".", "useBBVisualFeats", ":", "\n", "#We are using visual features for the nodes too", "\n", "\n", "#The definition of the CNN for processing node features", "\n", "            ", "featurizer", "=", "config", "[", "'bb_featurizer_conv'", "]", "if", "'bb_featurizer_conv'", "in", "config", "else", "None", "\n", "\n", "#not used", "\n", "featurizer_fc", "=", "config", "[", "'bb_featurizer_fc'", "]", "if", "'bb_featurizer_fc'", "in", "config", "else", "None", "\n", "\n", "if", "self", ".", "useShapeFeats", "!=", "'only'", ":", "\n", "                ", "if", "featurizer_fc", "is", "None", ":", "\n", "#this is what featurizer_conv_auto does", "\n", "#it computs the final feature out for the CNN so when it's appended to the spatial/shape features it's ready for the GCN", "\n", "                    ", "convOut", "=", "graph_in_channels", "-", "(", "self", ".", "numShapeFeatsBB", "+", "self", ".", "numTextFeats", ")", "\n", "", "else", ":", "\n", "                    ", "convOut", "=", "featurizer_fc", "[", "0", "]", "-", "(", "self", ".", "numShapeFeatsBB", "+", "self", ".", "numTextFeats", ")", "\n", "", "assert", "convOut", ">", "100", ",", "'There should be sufficient visual features. May need to increase graph (in) channels'", "\n", "if", "featurizer", "is", "None", ":", "\n", "                    ", "convlayers", "=", "[", "nn", ".", "Conv2d", "(", "backboneSavedFeatSize", "+", "bbMasks_bb", ",", "convOut", ",", "kernel_size", "=", "(", "2", ",", "3", ")", ")", "]", "\n", "if", "featurizer_fc", "is", "not", "None", ":", "\n", "                        ", "convlayers", "+=", "[", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "convOut", ")", ",", "convOut", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "p", "=", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "]", "\n", "", "", "else", ":", "\n", "                    ", "if", "self", ".", "splitFeatures", ":", "\n", "#optional 2nd CNN (not used)", "\n", "                        ", "featurizer_conv2", "=", "config", "[", "'bb_featurizer_conv_first'", "]", "if", "'bb_featurizer_conv_first'", "in", "config", "else", "None", "\n", "featurizer_conv2", "=", "[", "backboneSavedFeatSize2", "+", "bbMasks_bb", "]", "+", "featurizer_conv2", "#bbMasks are appended", "\n", "#compute scale", "\n", "scaleX", "=", "1", "\n", "scaleY", "=", "1", "\n", "for", "a", "in", "featurizer_conv2", ":", "\n", "                            ", "if", "a", "==", "'M'", "or", "(", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'D'", ")", ":", "\n", "                                ", "scaleX", "*=", "2", "\n", "scaleY", "*=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'U'", ":", "\n", "                                ", "scaleX", "/=", "2", "\n", "scaleY", "/=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", ":", "4", "]", "==", "'long'", ":", "#long pool", "\n", "                                ", "scaleX", "*=", "3", "\n", "scaleY", "*=", "2", "\n", "", "", "assert", "(", "scaleX", "==", "scaleY", ")", "\n", "splitScaleDiff", "=", "scaleX", "\n", "self", ".", "poolBB_h", "=", "self", ".", "poolBB_h", "//", "splitScaleDiff", "\n", "self", ".", "poolBB_w", "=", "self", ".", "poolBB_w", "//", "splitScaleDiff", "\n", "layers", ",", "last_ch_relC", "=", "make_layers", "(", "featurizer_conv2", ",", "norm", "=", "feat_norm", ",", "dropout", "=", "True", ")", "\n", "self", ".", "bbFeaturizerConv2", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "featurizer_conv", "=", "[", "backboneSavedFeatSize", "+", "last_ch_relC", "]", "+", "featurizer_conv", "\n", "", "else", ":", "\n", "#add input size", "\n", "                        ", "featurizer_conv", "=", "[", "backboneSavedFeatSize", "+", "bbMasks_bb", "]", "+", "featurizer", "\n", "", "if", "featurizer_fc", "is", "None", ":", "\n", "                        ", "if", "type", "(", "self", ".", "reintroduce_features", ")", "is", "str", "and", "'map'", "in", "self", ".", "reintroduce_features", ":", "\n", "                            ", "featurizer_conv", "+=", "[", "convOut", "]", "\n", "", "else", ":", "\n", "                            ", "featurizer_conv", "+=", "[", "'C3-{}'", ".", "format", "(", "convOut", ")", "]", "\n", "", "", "else", ":", "\n", "                         ", "featurizer_conv", "+=", "[", "convOut", "]", "\n", "\n", "#make actual CNN", "\n", "", "convlayers", ",", "_", "=", "make_layers", "(", "featurizer_conv", ",", "norm", "=", "feat_norm", ",", "dropout", "=", "True", ")", "\n", "\n", "#get the scale change from CNN", "\n", "scaleX", "=", "1", "\n", "scaleY", "=", "1", "\n", "for", "a", "in", "featurizer_conv", ":", "\n", "                        ", "if", "a", "==", "'M'", "or", "(", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'D'", ")", ":", "\n", "                            ", "scaleX", "*=", "2", "\n", "scaleY", "*=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'U'", ":", "\n", "                            ", "scaleX", "/=", "2", "\n", "scaleY", "/=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", ":", "4", "]", "==", "'long'", ":", "#long pool", "\n", "                            ", "scaleX", "*=", "3", "\n", "scaleY", "*=", "2", "\n", "#get final output size of CNN", "\n", "", "", "fsizeX", "=", "self", ".", "poolBB_w", "//", "scaleX", "\n", "fsizeY", "=", "self", ".", "poolBB_h", "//", "scaleY", "\n", "\n", "#add \"global\" pool", "\n", "convlayers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "(", "fsizeY", ",", "fsizeX", ")", ")", ")", "\n", "", "self", ".", "bbFeaturizerConv", "=", "nn", ".", "Sequential", "(", "*", "convlayers", ")", "\n", "\n", "#The ROIAligns for the node feature window", "\n", "self", ".", "roi_alignBB", "=", "RoIAlign", "(", "(", "self", ".", "poolBB_h", ",", "self", ".", "poolBB_w", ")", ",", "1.0", "/", "backbone_save_scale", ",", "-", "1", ")", "\n", "if", "self", ".", "use2ndFeatures", ":", "\n", "                    ", "self", ".", "roi_alignBB2", "=", "RoIAlign", "(", "(", "self", ".", "poolBB2_h", ",", "self", ".", "poolBB2_w", ")", ",", "1.0", "/", "backbone_save2_scale", ",", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "featurizer_fc", "=", "[", "self", ".", "numShapeFeatsBB", "+", "self", ".", "numTextFeats", "]", "+", "featurizer_fc", "\n", "", "if", "featurizer_fc", "is", "not", "None", ":", "\n", "                ", "if", "type", "(", "self", ".", "reintroduce_features", ")", "is", "str", "and", "'map'", "in", "self", ".", "reintroduce_features", ":", "\n", "                    ", "featurizer_fc", "=", "featurizer_fc", "+", "[", "'FC{}'", ".", "format", "(", "graph_in_channels", ")", "]", "#the noRelu is handeled in remap", "\n", "", "else", ":", "\n", "                    ", "featurizer_fc", "=", "featurizer_fc", "+", "[", "'FCnR{}'", ".", "format", "(", "graph_in_channels", ")", "]", "\n", "", "layers", ",", "last_ch_node", "=", "make_layers", "(", "featurizer_fc", ",", "norm", "=", "feat_norm_fc", ")", "\n", "self", ".", "bbFeaturizerFC", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "bbFeaturizerFC", "=", "None", "\n", "\n", "#Build the actual GCNs", "\n", "", "", "self", ".", "useMetaGraph", "=", "True", "\n", "self", ".", "graphnets", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "#Frist we'll get thresholds", "\n", "self", ".", "mergeThresh", "=", "[", "]", "\n", "self", ".", "groupThresh", "=", "[", "]", "\n", "self", ".", "keepEdgeThresh", "=", "[", "]", "\n", "\n", "for", "graphconfig", "in", "config", "[", "'graph_config'", "]", ":", "\n", "            ", "self", ".", "graphnets", ".", "append", "(", "eval", "(", "graphconfig", "[", "'arch'", "]", ")", "(", "graphconfig", ")", ")", "\n", "#self.relThresh.append(graphconfig['rel_thresh'] if 'rel_thresh' in graphconfig else 0.6)", "\n", "self", ".", "mergeThresh", ".", "append", "(", "graphconfig", "[", "'merge_thresh'", "]", "if", "'merge_thresh'", "in", "graphconfig", "else", "0.6", ")", "\n", "self", ".", "groupThresh", ".", "append", "(", "graphconfig", "[", "'group_thresh'", "]", "if", "'group_thresh'", "in", "graphconfig", "else", "0.6", ")", "\n", "self", ".", "keepEdgeThresh", ".", "append", "(", "graphconfig", "[", "'keep_edge_thresh'", "]", "if", "'keep_edge_thresh'", "in", "graphconfig", "else", "0.4", ")", "\n", "\n", "", "self", ".", "pairer", "=", "None", "\n", "\n", "#if we are reintroducing visual features at each GCN", "\n", "if", "type", "(", "self", ".", "reintroduce_features", ")", "is", "str", "and", "'map'", "in", "self", ".", "reintroduce_features", ":", "\n", "#These maps are the transition layers", "\n", "            ", "self", ".", "node_transition_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "edge_transition_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "node_transition_layers", ".", "append", "(", "nn", ".", "Linear", "(", "graph_in_channels", ",", "graph_in_channels", ")", ")", "\n", "self", ".", "edge_transition_layers", ".", "append", "(", "nn", ".", "Linear", "(", "graph_in_channels", ",", "graph_in_channels", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "graphnets", ")", "-", "1", ")", ":", "\n", "                ", "self", ".", "node_transition_layers", ".", "append", "(", "nn", ".", "Linear", "(", "graph_in_channels", "*", "2", ",", "graph_in_channels", ")", ")", "\n", "self", ".", "edge_transition_layers", ".", "append", "(", "nn", ".", "Linear", "(", "graph_in_channels", "*", "2", ",", "graph_in_channels", ")", ")", "\n", "", "if", "'fixed'", "in", "self", ".", "reintroduce_features", ":", "\n", "#The proper activation things", "\n", "                ", "self", ".", "reintroduce_node_visual_activations", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "reintroduce_node_visual_activations", ".", "append", "(", "None", ")", "\n", "self", ".", "reintroduce_edge_visual_activations", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "reintroduce_edge_visual_activations", ".", "append", "(", "None", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "graphnets", ")", "-", "1", ")", ":", "\n", "                    ", "self", ".", "reintroduce_node_visual_activations", ".", "append", "(", "nn", ".", "Sequential", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "graph_in_channels", ")", ",", "graph_in_channels", ")", ",", "nn", ".", "LeakyReLU", "(", "0.01", ",", "True", ")", ")", ")", "\n", "self", ".", "reintroduce_edge_visual_activations", ".", "append", "(", "nn", ".", "Sequential", "(", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "graph_in_channels", ")", ",", "graph_in_channels", ")", ",", "nn", ".", "LeakyReLU", "(", "0.01", ",", "True", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "node_transition_layers", "=", "None", "\n", "self", ".", "edge_transition_layers", "=", "None", "\n", "\n", "#define that we just average features when grouping", "\n", "", "if", "'group_node_method'", "not", "in", "config", "or", "config", "[", "'group_node_method'", "]", "==", "'mean'", ":", "\n", "            ", "self", ".", "groupNodeFunc", "=", "lambda", "l", ":", "torch", ".", "stack", "(", "l", ",", "dim", "=", "0", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Error, unknown node group method: {}'", ".", "format", "(", "config", "[", "'group_node_method'", "]", ")", ")", "\n", "", "if", "'group_edge_method'", "not", "in", "config", "or", "config", "[", "'group_edge_method'", "]", "==", "'mean'", ":", "\n", "            ", "self", ".", "groupEdgeFunc", "=", "lambda", "l", ":", "torch", ".", "stack", "(", "l", ",", "dim", "=", "0", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Error, unknown edge group method: {}'", ".", "format", "(", "config", "[", "'group_edge_method'", "]", ")", ")", "\n", "\n", "#These are only used if using the old line-of-sight proposal", "\n", "", "if", "'max_graph_size'", "in", "config", ":", "\n", "            ", "MAX_GRAPH_SIZE", "=", "config", "[", "'max_graph_size'", "]", "\n", "", "self", ".", "useOldDecay", "=", "config", "[", "'use_old_len_decay'", "]", "if", "'use_old_len_decay'", "in", "config", "else", "False", "\n", "\n", "\n", "#which proposal method are we using?", "\n", "self", ".", "relationshipProposal", "=", "config", "[", "'relationship_proposal'", "]", "if", "'relationship_proposal'", "in", "config", "else", "'line_of_sight'", "\n", "if", "self", ".", "relationshipProposal", "==", "'feature_nn'", ":", "\n", "#oh good, that's right, use the NN", "\n", "            ", "num_bb_feat", "=", "self", ".", "numBBTypes", "\n", "prop_feats", "=", "30", "+", "2", "*", "num_bb_feat", "\n", "\n", "#  ... if only we had a text embedding", "\n", "self", ".", "prop_with_text_emb", "=", "config", "[", "'prop_with_text_emb'", "]", "if", "'prop_with_text_emb'", "in", "config", "else", "False", "\n", "if", "self", ".", "prop_with_text_emb", ":", "\n", "                ", "prop_feats", "+=", "2", "*", "self", ".", "numTextFeats", "\n", "\n", "#number of hidden features", "\n", "", "prop_num_hidden", "=", "config", "[", "'prop_num_hidden'", "]", "if", "'prop_num_hidden'", "in", "config", "else", "64", "\n", "#build the small network", "\n", "self", ".", "rel_prop_nn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "prop_feats", ",", "prop_num_hidden", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.25", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "prop_num_hidden", ",", "1", ")", "\n", ")", "\n", "\n", "\n", "#different ways to threshold the relationship proposals", "\n", "self", ".", "rel_merge_hard_thresh", "=", "config", "[", "'rel_merge_hard_thresh'", "]", "if", "'rel_merge_hard_thresh'", "in", "config", "else", "None", "\n", "self", ".", "rel_hard_thresh", "=", "config", "[", "'rel_hard_thresh'", "]", "if", "'rel_hard_thresh'", "in", "config", "else", "None", "\n", "self", ".", "percent_rel_to_keep", "=", "config", "[", "'percent_rel_to_keep'", "]", "if", "'percent_rel_to_keep'", "in", "config", "else", "0.2", "\n", "self", ".", "max_rel_to_keep", "=", "config", "[", "'max_rel_to_keep'", "]", "if", "'max_rel_to_keep'", "in", "config", "else", "3000", "\n", "self", ".", "max_merge_rel_to_keep", "=", "config", "[", "'max_merge_rel_to_keep'", "]", "if", "'max_merge_rel_to_keep'", "in", "config", "else", "5000", "\n", "\n", "#This allows the roi pooling and processing of edge visual features to be broken into chunks to save memory", "\n", "self", ".", "roi_batch_size", "=", "config", "[", "'roi_batch_size'", "]", "if", "'roi_batch_size'", "in", "config", "else", "300", "\n", "\n", "\n", "\n", "", "if", "'DEBUG'", "in", "config", ":", "\n", "            ", "self", ".", "detector", ".", "setDEBUG", "(", ")", "\n", "self", ".", "setDEBUG", "(", ")", "\n", "self", ".", "debug", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "debug", "=", "False", "\n", "\n", "#this is how I did the ablation, by just swapping out the proposal method on the trained model", "\n", "", "if", "'change_relationship_proposal'", "in", "config", ":", "\n", "            ", "self", ".", "relationshipProposal", "=", "config", "[", "'change_relationship_proposal'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.unfreeze": [[601, 607], ["fudge.FUDGE.detector.parameters", "print"], "methods", ["None"], ["", "", "def", "unfreeze", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "detector_frozen", ":", "\n", "            ", "for", "param", "in", "self", ".", "detector", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "param", ".", "will_use_grad", "\n", "", "self", ".", "detector_frozen", "=", "False", "\n", "print", "(", "'Unfroze detector'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.forward": [[609, 713], ["fudge.FUDGE.detector", "utils.yolo_tools.non_max_sup_iou", "useBBs.detach.detach.detach", "len", "image.size", "fudge.FUDGE.detector.setForGraphPairing", "fudge.FUDGE.detector.setForGraphPairing", "fudge.FUDGE.detector", "bbPredictions[].max().item", "max", "numpy.random.normal", "utils.yolo_tools.non_max_sup_iou.cpu", "len", "fudge.FUDGE.alignGTBBs", "fudge.FUDGE.runGraph", "fudge.FUDGE.embedding_model", "bbPredictions[].max", "useBBs.detach.detach.cpu().detach", "useBBs.detach.detach.cpu"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.non_max_sup_iou", "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_box_detector.YoloBoxDetector.setForGraphPairing", "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_box_detector.YoloBoxDetector.setForGraphPairing", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.alignGTBBs", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.runGraph"], ["", "", "def", "forward", "(", "self", ",", "\n", "image", ",", "#the input image [batch x channels x height x width]", "\n", "gtBBs", "=", "None", ",", "#the gtBBs (if they're to be used) [batch x len x features]", "\n", "gtNNs", "=", "None", ",", "#number of neighbors, not used", "\n", "useGTBBs", "=", "False", ",", "#whether to actually use the gtBBs", "\n", "otherThresh", "=", "None", ",", "#not used, I used to modify the detection threshold in training", "\n", "otherThreshIntur", "=", "None", ",", "#not used", "\n", "hard_detect_limit", "=", "5000", ",", "#if needed for memory reasons", "\n", "debug", "=", "False", ",", "\n", "old_nn", "=", "False", ",", "\n", "gtTrans", "=", "None", ",", "#not used", "\n", "gtGroups", "=", "None", "#used in our comparison to DocStruct", "\n", ")", ":", "\n", "\n", "        ", "assert", "(", "image", ".", "size", "(", "0", ")", "==", "1", ")", "#implementation designed for batch size of 1. Should work to do data parallelism, since each copy of the model will get a batch size of 1", "\n", "\n", "self", ".", "merges_performed", "=", "0", "#just tracking to see if it's working", "\n", "\n", "if", "not", "self", ".", "detector", ".", "forGraphPairing", ":", "#This is needed to be checked becuase of weird things when doing SWA", "\n", "            ", "self", ".", "detector", ".", "setForGraphPairing", "(", "*", "self", ".", "set_detect_params", ")", "\n", "\n", "#run the detector on the backbone", "\n", "#it has hooks saving the features we need", "\n", "", "bbPredictions", ",", "offsetPredictions", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "detector", "(", "image", ")", "\n", "_", "=", "None", "\n", "\n", "if", "self", ".", "detector", ".", "saved_features", "is", "None", ":", "#weird SWA stuff fix", "\n", "            ", "self", ".", "detector", ".", "setForGraphPairing", "(", "*", "self", ".", "set_detect_params", ")", "\n", "bbPredictions", ",", "offsetPredictions", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "detector", "(", "image", ")", "\n", "\n", "#get the saved features to extract our visual features", "\n", "", "saved_features", "=", "self", ".", "detector", ".", "saved_features", "\n", "self", ".", "detector", ".", "saved_features", "=", "None", "\n", "\n", "if", "self", ".", "use2ndFeatures", ":", "\n", "            ", "saved_features2", "=", "self", ".", "detector", ".", "saved_features2", "\n", "", "else", ":", "\n", "            ", "saved_features2", "=", "None", "\n", "\n", "\n", "#get the detection threshold", "\n", "", "if", "self", ".", "useHardConfThresh", ":", "\n", "            ", "self", ".", "used_threshConf", "=", "self", ".", "detect_conf_thresh", "\n", "", "else", ":", "\n", "#This isn't used", "\n", "            ", "maxConf", "=", "bbPredictions", "[", ":", ",", ":", ",", "0", "]", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "if", "otherThreshIntur", "is", "None", ":", "\n", "                ", "confThreshMul", "=", "self", ".", "detect_conf_thresh", "\n", "", "else", ":", "\n", "                ", "confThreshMul", "=", "self", ".", "detect_conf_thresh", "*", "(", "1", "-", "otherThreshIntur", ")", "+", "otherThresh", "*", "otherThreshIntur", "\n", "", "self", ".", "used_threshConf", "=", "max", "(", "maxConf", "*", "confThreshMul", ",", "0.5", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "used_threshConf", "+=", "np", ".", "random", ".", "normal", "(", "0", ",", "0.1", ")", "#we'll tweak the threshold around to make training more robust", "\n", "\n", "\n", "\n", "#apply non maximal suppression to the detector results", "\n", "", "bbPredictions", "=", "non_max_sup_iou", "(", "bbPredictions", ".", "cpu", "(", ")", ",", "self", ".", "used_threshConf", ",", "0.4", ",", "hard_detect_limit", ")", "\n", "\n", "#I'm assuming batch size of one", "\n", "assert", "(", "len", "(", "bbPredictions", ")", "==", "1", ")", "\n", "bbPredictions", "=", "bbPredictions", "[", "0", "]", "\n", "\n", "\n", "if", "useGTBBs", "and", "gtBBs", "is", "not", "None", ":", "\n", "#We'll fix up the gtBBs with some conf and class predictions", "\n", "            ", "useBBs", ",", "gtBBs", ",", "gtGroups", ",", "gt_to_new", "=", "self", ".", "alignGTBBs", "(", "useGTBBs", ",", "gtBBs", ",", "gtGroups", ",", "bbPredictions", ")", "\n", "\n", "", "else", ":", "\n", "            ", "useBBs", "=", "bbPredictions", "\n", "\n", "", "useBBs", "=", "useBBs", ".", "detach", "(", ")", "#We probably don't want anything backproping here. The detector is supervised.", "\n", "\n", "transcriptions", "=", "None", "#FUDGE doesn't use text", "\n", "\n", "\n", "if", "len", "(", "useBBs", ")", ":", "#Do we have any BBs?", "\n", "            ", "if", "transcriptions", "is", "not", "None", ":", "\n", "                ", "embeddings", "=", "self", ".", "embedding_model", "(", "transcriptions", ",", "saved_features", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "embeddings", "=", "None", "\n", "\n", "\n", "\n", "", "bbTrans", "=", "transcriptions", "\n", "\n", "\n", "#build the graph and run the GCN", "\n", "allOutputBoxes", ",", "allEdgeOuts", ",", "allEdgeIndexes", ",", "allNodeOuts", ",", "allGroups", ",", "rel_prop_scores", ",", "merge_prop_scores", ",", "final", "=", "self", ".", "runGraph", "(", "\n", "gtGroups", ",", "\n", "gtTrans", ",", "\n", "image", ",", "\n", "useBBs", ",", "\n", "saved_features", ",", "\n", "saved_features2", ",", "\n", "bbTrans", ",", "\n", "embeddings", ")", "\n", "\n", "return", "allOutputBoxes", ",", "offsetPredictions", ",", "allEdgeOuts", ",", "allEdgeIndexes", ",", "allNodeOuts", ",", "allGroups", ",", "rel_prop_scores", ",", "merge_prop_scores", ",", "final", "\n", "\n", "", "else", ":", "\n", "#node BBs, no nodes, no graph", "\n", "            ", "return", "[", "bbPredictions", "]", ",", "offsetPredictions", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "(", "useBBs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ",", "None", ",", "None", ",", "transcriptions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.appendVisualFeatures": [[716, 833], ["torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "same_node_map.items", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "enumerate", "node_features.size", "all", "zip", "len", "fudge.FUDGE.computeEdgeVisualFeatures", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "list", "list", "fudge.FUDGE.computeNodeVisualFeatures", "same_node_map.items", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "need_edge_ids.append", "need_edge_node_ids.append", "edge_features.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "node_features.size", "prev_node_visual_feats.size", "fudge.FUDGE.makeAllMasks", "len", "prev_edge_visual_feats.size", "prev_edge_indexes.index", "edge_features.size", "edge_features.size", "edge_features.size", "print", "print", "print", "need_edge_ids.append", "need_edge_node_ids.append", "torch.FloatTensor().to.size", "torch.FloatTensor().to.size", "torch.FloatTensor().to.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "edge_features.size", "edge_features.size", "enumerate", "min", "max", "torch.FloatTensor().to.size", "torch.FloatTensor().to.size", "torch.FloatTensor().to.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.FloatTensor().to.size", "torch.FloatTensor().to.size", "torch.FloatTensor().to.size", "torch.FloatTensor().to.repeat", "torch.FloatTensor().to.repeat", "torch.FloatTensor().to.repeat", "zip", "torch.FloatTensor().to.repeat", "torch.FloatTensor().to.repeat", "torch.FloatTensor().to.repeat", "min", "max", "torch.FloatTensor().to.repeat", "torch.FloatTensor().to.repeat", "torch.FloatTensor().to.repeat"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.computeEdgeVisualFeatures", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.computeNodeVisualFeatures", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.makeAllMasks"], ["", "", "def", "appendVisualFeatures", "(", "self", ",", "\n", "giter", ",", "#iteration # of GCN", "\n", "bbs", ",", "#Tensor of bbs", "\n", "graph", ",", "#Full graph", "\n", "groups", ",", "#list of list of node indexes", "\n", "edge_indexes", ",", "#list of node index pairs", "\n", "features", ",", "#visual features from backbone", "\n", "features2", ",", "#other layer of visual features", "\n", "text_emb", ",", "#nope", "\n", "image_height", ",", "\n", "image_width", ",", "\n", "same_node_map", ",", "#A map between the previous nodes and the current ones", "\n", "prev_node_visual_feats", ",", "#the previous features so we can reuse them", "\n", "prev_edge_visual_feats", ",", "\n", "prev_edge_indexes", ",", "\n", "good_edges", "=", "None", ",", "\n", "flip", "=", "None", ")", ":", "\n", "\n", "        ", "node_features", ",", "_edge_indexes", ",", "edge_features", ",", "universal_features", "=", "graph", "\n", "#same_node_map, maps the old node id (index) to the new one", "\n", "\n", "node_visual_feats", "=", "torch", ".", "FloatTensor", "(", "node_features", ".", "size", "(", "0", ")", ",", "prev_node_visual_feats", ".", "size", "(", "1", ")", ")", ".", "to", "(", "node_features", ".", "device", ")", "\n", "\n", "#Find out which nodes are unchanged", "\n", "has_feat", "=", "[", "False", "]", "*", "node_features", ".", "size", "(", "0", ")", "\n", "for", "old_id", ",", "new_id", "in", "same_node_map", ".", "items", "(", ")", ":", "\n", "            ", "has_feat", "[", "new_id", "]", "=", "True", "\n", "node_visual_feats", "[", "new_id", "]", "=", "prev_node_visual_feats", "[", "old_id", "]", "\n", "\n", "\n", "", "if", "not", "all", "(", "has_feat", ")", ":", "\n", "#Redo the features for these nodes", "\n", "            ", "need_new_ids", ",", "need_groups", "=", "zip", "(", "*", "[", "(", "i", ",", "g", ")", "for", "i", ",", "(", "has", ",", "g", ")", "in", "enumerate", "(", "zip", "(", "has_feat", ",", "groups", ")", ")", "if", "not", "has", "]", ")", "\n", "need_text_emb", "=", "None", "\n", "if", "len", "(", "need_new_ids", ")", ">", "0", ":", "\n", "                ", "need_new_ids", "=", "list", "(", "need_new_ids", ")", "\n", "need_new_ids", "=", "list", "(", "need_new_ids", ")", "\n", "if", "self", ".", "useShapeFeats", "!=", "'only'", ":", "\n", "                    ", "allMasks", "=", "self", ".", "makeAllMasks", "(", "image_height", ",", "image_width", ",", "bbs", ")", "\n", "", "else", ":", "\n", "                    ", "allMasks", "=", "None", "\n", "\n", "#compute the features", "\n", "", "node_visual_feats", "[", "need_new_ids", "]", "=", "self", ".", "computeNodeVisualFeatures", "(", "features", ",", "features2", ",", "image_height", ",", "image_width", ",", "bbs", ",", "need_groups", ",", "need_text_emb", ",", "allMasks", ")", "\n", "\n", "#now figure out which edges need updated (any touching an updated node)", "\n", "", "", "new_to_old_ids", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "same_node_map", ".", "items", "(", ")", "}", "\n", "edge_visual_feats", "=", "torch", ".", "FloatTensor", "(", "len", "(", "edge_indexes", ")", ",", "prev_edge_visual_feats", ".", "size", "(", "1", ")", ")", ".", "to", "(", "edge_features", ".", "device", ")", "\n", "need_edge_ids", "=", "[", "]", "\n", "need_edge_node_ids", "=", "[", "]", "\n", "for", "ei", ",", "(", "n0", ",", "n1", ")", "in", "enumerate", "(", "edge_indexes", ")", ":", "\n", "            ", "if", "n0", "in", "new_to_old_ids", "and", "n1", "in", "new_to_old_ids", ":", "\n", "                ", "old_id0", "=", "new_to_old_ids", "[", "n0", "]", "\n", "old_id1", "=", "new_to_old_ids", "[", "n1", "]", "\n", "try", ":", "\n", "                    ", "old_ei", "=", "prev_edge_indexes", ".", "index", "(", "(", "min", "(", "old_id0", ",", "old_id1", ")", ",", "max", "(", "old_id0", ",", "old_id1", ")", ")", ")", "\n", "edge_visual_feats", "[", "ei", "]", "=", "prev_edge_visual_feats", "[", "old_ei", "]", "\n", "", "except", "ValueError", ":", "\n", "                    ", "print", "(", "'{ERROR ERROR ERROR'", ")", "\n", "print", "(", "'Edge {} could not be found in prev edges, but is in new as {}'", ".", "format", "(", "(", "min", "(", "old_id0", ",", "old_id1", ")", ",", "max", "(", "old_id0", ",", "old_id1", ")", ")", ",", "(", "n0", ",", "n1", ")", ")", ")", "\n", "print", "(", "'ERROR ERROR ERROR}'", ")", "\n", "need_edge_ids", ".", "append", "(", "ei", ")", "\n", "need_edge_node_ids", ".", "append", "(", "(", "n0", ",", "n1", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "need_edge_ids", ".", "append", "(", "ei", ")", "\n", "need_edge_node_ids", ".", "append", "(", "(", "n0", ",", "n1", ")", ")", "\n", "\n", "", "", "if", "len", "(", "need_edge_ids", ")", ">", "0", ":", "\n", "#compute the features", "\n", "            ", "edge_visual_feats", "[", "need_edge_ids", "]", "=", "self", ".", "computeEdgeVisualFeatures", "(", "features", ",", "features2", ",", "image_height", ",", "image_width", ",", "bbs", ",", "groups", ",", "need_edge_node_ids", ",", "allMasks", ",", "flip", ")", "\n", "\n", "", "if", "self", ".", "reintroduce_features", "==", "'fixed map'", ":", "\n", "#This is what FUDGE does", "\n", "\n", "#First, the graph features are un-activated, so activate them", "\n", "            ", "node_features_old", "=", "self", ".", "reintroduce_node_visual_activations", "[", "giter", "]", "(", "node_features", ")", "\n", "edge_features_old", "=", "self", ".", "reintroduce_edge_visual_activations", "[", "giter", "]", "(", "edge_features", ")", "\n", "#concat and transition", "\n", "cat_node_f", "=", "torch", ".", "cat", "(", "(", "node_features_old", ",", "node_visual_feats", ")", ",", "dim", "=", "1", ")", "\n", "node_features", "=", "self", ".", "node_transition_layers", "[", "giter", "]", "(", "cat_node_f", ")", "\n", "\n", "#for the graph, we will have the visual features duplicated", "\n", "if", "edge_features", ".", "size", "(", "1", ")", "==", "0", ":", "\n", "                ", "edge_features", "=", "edge_visual_feats", "\n", "", "elif", "edge_features", ".", "size", "(", "0", ")", "==", "edge_visual_feats", ".", "size", "(", "0", ")", "*", "2", ":", "\n", "#we need to repeat them", "\n", "                ", "edge_features", "=", "self", ".", "edge_transition_layers", "[", "giter", "]", "(", "torch", ".", "cat", "(", "(", "edge_features_old", ",", "edge_visual_feats", ".", "repeat", "(", "2", ",", "1", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "#don't need repeated", "\n", "                ", "edge_features", "=", "self", ".", "edge_transition_layers", "[", "giter", "]", "(", "torch", ".", "cat", "(", "(", "edge_features_old", ",", "edge_visual_feats", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "", "elif", "self", ".", "reintroduce_features", "==", "'map'", ":", "\n", "#old", "\n", "            ", "node_features_old", "=", "node_features", "\n", "edge_features_old", "=", "edge_features", "\n", "cat_node_f", "=", "torch", ".", "cat", "(", "(", "node_features_old", ",", "node_visual_feats", ")", ",", "dim", "=", "1", ")", "\n", "node_features", "=", "self", ".", "node_transition_layers", "[", "giter", "]", "(", "cat_node_f", ")", "\n", "if", "edge_features", ".", "size", "(", "1", ")", "==", "0", ":", "\n", "                ", "edge_features", "=", "edge_visual_feats", "\n", "", "elif", "edge_features", ".", "size", "(", "0", ")", "==", "edge_visual_feats", ".", "size", "(", "0", ")", "*", "2", ":", "\n", "                ", "edge_features", "=", "self", ".", "edge_transition_layers", "[", "giter", "]", "(", "torch", ".", "cat", "(", "(", "edge_features_old", ",", "edge_visual_feats", ".", "repeat", "(", "2", ",", "1", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "edge_features", "=", "self", ".", "edge_transition_layers", "[", "giter", "]", "(", "torch", ".", "cat", "(", "(", "edge_features_old", ",", "edge_visual_feats", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "", "else", ":", "\n", "#simple sum", "\n", "            ", "node_features", "+=", "node_visual_feats", "\n", "if", "edge_features", ".", "size", "(", "1", ")", "==", "0", ":", "\n", "                ", "edge_features", "=", "edge_visual_feats", "\n", "", "elif", "edge_features", ".", "size", "(", "0", ")", "==", "edge_visual_feats", ".", "size", "(", "0", ")", "*", "2", ":", "\n", "                ", "edge_features", "=", "edge_features", "+", "edge_visual_feats", ".", "repeat", "(", "2", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "edge_features", "=", "edge_features", "+", "edge_visual_feats", "\n", "\n", "\n", "", "", "new_graph", "=", "(", "node_features", ",", "_edge_indexes", ",", "edge_features", ",", "universal_features", ")", "\n", "return", "new_graph", ",", "node_visual_feats", ",", "edge_visual_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.updateBBs": [[835, 856], ["len", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu.new_empty", "torch.sigmoid().cpu.new_empty", "torch.sigmoid().cpu.new_empty", "enumerate", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu.new_empty", "torch.sigmoid().cpu.new_empty", "torch.sigmoid().cpu.new_empty", "enumerate", "nodeConfPred[].detach", "nodeClassPred[].detach", "torch.sigmoid().cpu.size", "torch.sigmoid().cpu.size", "torch.sigmoid().cpu.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "bbs.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "bbs.size", "torch.sigmoid().cpu.size", "torch.sigmoid().cpu.size", "torch.sigmoid().cpu.size", "torch.sigmoid().cpu.size", "torch.sigmoid().cpu.size", "torch.sigmoid().cpu.size", "nodeOuts[].detach"], "methods", ["None"], ["", "def", "updateBBs", "(", "self", ",", "bbs", ",", "groups", ",", "nodeOuts", ")", ":", "\n", "        ", "if", "len", "(", "bbs", ")", ">", "1", ":", "\n", "            ", "nodeConfPred", "=", "torch", ".", "sigmoid", "(", "nodeOuts", "[", ":", ",", "-", "1", ",", "self", ".", "nodeIdxConf", ":", "self", ".", "nodeIdxConf", "+", "1", "]", ")", ".", "cpu", "(", ")", "\n", "bbConfPred", "=", "nodeConfPred", ".", "new_empty", "(", "(", "bbs", ".", "size", "(", "0", ")", ",", "1", ")", ")", "#torch.FloatTensor(bbs.size(0),1)", "\n", "for", "i", ",", "group", "in", "enumerate", "(", "groups", ")", ":", "\n", "                ", "bbConfPred", "[", "group", "]", "=", "nodeConfPred", "[", "i", "]", ".", "detach", "(", ")", "\n", "", "bbs", "[", ":", ",", "0", ":", "1", "]", "=", "bbConfPred", "\n", "\n", "\n", "", "if", "self", ".", "predClass", ":", "\n", "#if not useGTBBs:", "\n", "            ", "nodeClassPred", "=", "torch", ".", "sigmoid", "(", "nodeOuts", "[", ":", ",", "-", "1", ",", "self", ".", "nodeIdxClass", ":", "self", ".", "nodeIdxClassEnd", "]", ".", "detach", "(", ")", ")", ".", "cpu", "(", ")", "\n", "bbClasPred", "=", "nodeClassPred", ".", "new_empty", "(", "(", "bbs", ".", "size", "(", "0", ")", ",", "nodeClassPred", ".", "size", "(", "1", ")", ")", ")", "#torch.FloatTensor(bbs.size(0),nodeClassPred.size(1))", "\n", "for", "i", ",", "group", "in", "enumerate", "(", "groups", ")", ":", "\n", "                ", "bbClasPred", "[", "group", "]", "=", "nodeClassPred", "[", "i", "]", ".", "detach", "(", ")", "\n", "", "if", "self", ".", "numBBTypes", "==", "nodeClassPred", ".", "size", "(", "1", ")", ":", "\n", "                ", "bbs", "[", ":", ",", "-", "self", ".", "numBBTypes", ":", "]", "=", "bbClasPred", "\n", "", "else", ":", "\n", "                ", "diff", "=", "self", ".", "numBBTypes", "-", "nodeClassPred", ".", "size", "(", "1", ")", "\n", "bbs", "[", ":", ",", "-", "self", ".", "numBBTypes", ":", "-", "diff", "]", "=", "bbClasPred", "\n", "", "", "return", "bbs", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.mergeBB": [[858, 891], ["NotImplementedError", "min", "max", "min", "max", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "int", "int", "int", "int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int.item", "int.item", "int.item", "int.item"], "methods", ["None"], ["", "def", "mergeBB", "(", "self", ",", "bb0", ",", "bb1", ")", ":", "\n", "\n", "        ", "if", "self", ".", "rotation", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Rotation not implemented for merging bounding boxes'", ")", "\n", "", "else", ":", "\n", "            ", "locIdx", "=", "1", "\n", "classIdx", "=", "6", "\n", "conf", "=", "(", "bb0", "[", "0", ":", "1", "]", "+", "bb1", "[", "0", ":", "1", "]", ")", "/", "2", "\n", "\n", "x0", ",", "y0", ",", "r0", ",", "h0", ",", "w0", "=", "bb0", "[", "locIdx", ":", "classIdx", "]", "\n", "x1", ",", "y1", ",", "r1", ",", "h1", ",", "w1", "=", "bb1", "[", "locIdx", ":", "classIdx", "]", "\n", "minX", "=", "min", "(", "x0", "-", "w0", ",", "x1", "-", "w1", ")", "\n", "maxX", "=", "max", "(", "x0", "+", "w0", ",", "x1", "+", "w1", ")", "\n", "minY", "=", "min", "(", "y0", "-", "h0", ",", "y1", "-", "h1", ")", "\n", "maxY", "=", "max", "(", "y0", "+", "h0", ",", "y1", "+", "h1", ")", "\n", "\n", "newW", "=", "(", "maxX", "-", "minX", ")", "/", "2", "\n", "newH", "=", "(", "maxY", "-", "minY", ")", "/", "2", "\n", "newX", "=", "(", "maxX", "+", "minX", ")", "/", "2", "\n", "newY", "=", "(", "maxY", "+", "minY", ")", "/", "2", "\n", "\n", "newClass", "=", "(", "bb0", "[", "classIdx", ":", "]", "+", "bb1", "[", "classIdx", ":", "]", ")", "/", "2", "\n", "\n", "loc", "=", "torch", ".", "FloatTensor", "(", "[", "newX", ",", "newY", ",", "0", ",", "newH", ",", "newW", "]", ")", "\n", "\n", "minX", "=", "int", "(", "minX", ".", "item", "(", ")", ")", "\n", "minY", "=", "int", "(", "minY", ".", "item", "(", ")", ")", "\n", "maxX", "=", "int", "(", "maxX", ".", "item", "(", ")", ")", "\n", "maxY", "=", "int", "(", "maxY", ".", "item", "(", ")", ")", "\n", "\n", "bb", "=", "torch", ".", "cat", "(", "(", "conf", ",", "loc", ",", "newClass", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "bb", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.mergeAndGroup": [[895, 1207], ["len", "oldBBs.cpu.cpu.cpu", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "set", "enumerate", "enumerate", "collections.defaultdict", "oldGroupToNew.items", "enumerate", "enumerate", "collections.defaultdict", "oldGroupToNewGrouping.items", "enumerate", "collections.defaultdict", "collections.defaultdict.items", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "enumerate", "enumerate", "newGroupToOldMerge[].append", "len", "groupEdges.sort", "groupEdges.pop", "bbs.items", "torch.stack.append", "torch.stack.append", "torch.stack.append", "newGroupToOldGrouping[].append", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "workGroups.items", "newGroups.append", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "set", "newEdges.append", "list", "len", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "newEdgeFeats.repeat.repeat.repeat", "oldNodeFeats.size", "len", "enumerate", "range", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "changedGroups.append", "prunedOldEdgeIndexes.append", "workGroups.keys", "groupEdges.append", "workGroups.items", "workGroups.items", "featsToCombine.append", "embeddings_to_combine.append", "len", "newEdges_map[].append", "any", "newEdgeIndexes.to.to.to", "len", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "len", "groupEdges.append", "fix_gg.append", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "fudge.FUDGE.groupNodeFunc", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "fudge.FUDGE.groupEdgeFunc", "set.add", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "random.random", "len", "len", "bb0ToMerge.getHeight", "bb0ToMerge.getReadPosition", "bb1ToMerge.getHeight", "bb1ToMerge.getReadPosition", "fudge.FUDGE.mergeBB", "set.add", "oldGroupToNewGrouping.items", "len", "oldNodeFeats.size", "len", "old_text_emb.size", "featsToCombine.append", "embeddings_to_combine.append", "len", "oldEdgeFeats.size", "len", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "abs", "groupPreds[].item", "w_groups.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "len", "bb0ToMerge.medianAngle", "bb1ToMerge.medianAngle", "oldToNewBBIndexes.items", "oldGroupToNewGrouping.items", "min", "max"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.mergeBB"], ["", "def", "mergeAndGroup", "(", "self", ",", "\n", "mergeThresh", ",", "\n", "keepEdgeThresh", ",", "\n", "groupThresh", ",", "\n", "oldEdgeIndexes", ",", "#old meaning the ones we will update. List of node index pairs", "\n", "edgePredictions", ",", "#output of GCN edges", "\n", "oldGroups", ",", "#list of list of node indexes", "\n", "oldNodeFeats", ",", "#GCN node features", "\n", "oldEdgeFeats", ",", "#GCN edge features", "\n", "oldUniversalFeats", ",", "#none of these", "\n", "oldBBs", ",", "#the bounding boxes", "\n", "oldBBTrans", ",", "#nope", "\n", "old_text_emb", ",", "#nope", "\n", "good_edges", "=", "None", ",", "\n", "keep_edges", "=", "None", ",", "\n", "gt_groups", "=", "None", ",", "#for DocStruct comparison", "\n", "final", "=", "False", "#if this is the final edit, use relationship prediction to prune edges", "\n", ")", ":", "\n", "        ", "assert", "(", "oldNodeFeats", "is", "None", "or", "oldGroups", "is", "None", "or", "oldNodeFeats", ".", "size", "(", "0", ")", "==", "len", "(", "oldGroups", ")", ")", "\n", "oldNumGroups", "=", "len", "(", "oldGroups", ")", "\n", "oldBBs", "=", "oldBBs", ".", "cpu", "(", ")", "\n", "bbs", "=", "{", "i", ":", "v", "for", "i", ",", "v", "in", "enumerate", "(", "oldBBs", ")", "}", "\n", "bbTrans", "=", "None", "\n", "oldToNewBBIndexes", "=", "{", "i", ":", "i", "for", "i", "in", "range", "(", "len", "(", "oldBBs", ")", ")", "}", "\n", "newBBIdCounter", "=", "0", "\n", "#Run predictions through sigmoid", "\n", "if", "not", "final", ":", "\n", "            ", "edgePreds", "=", "torch", ".", "sigmoid", "(", "edgePredictions", "[", ":", ",", "-", "1", ",", "0", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "#keep edge pred", "\n", "", "else", ":", "\n", "            ", "edgePreds", "=", "torch", ".", "sigmoid", "(", "edgePredictions", "[", ":", ",", "-", "1", ",", "1", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "#rel pred", "\n", "", "mergePreds", "=", "torch", ".", "sigmoid", "(", "edgePredictions", "[", ":", ",", "-", "1", ",", "2", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "groupPreds", "=", "torch", ".", "sigmoid", "(", "edgePredictions", "[", ":", ",", "-", "1", ",", "3", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "if", "gt_groups", ":", "\n", "#just rewrite the predictions to match the GT groups", "\n", "            ", "gt_groups_map", "=", "{", "}", "\n", "for", "i", ",", "group", "in", "enumerate", "(", "gt_groups", ")", ":", "\n", "                ", "for", "n", "in", "group", ":", "\n", "                    ", "gt_groups_map", "[", "n", "]", "=", "i", "\n", "", "", "for", "i", ",", "(", "n0", ",", "n1", ")", "in", "enumerate", "(", "oldEdgeIndexes", ")", ":", "\n", "                ", "if", "gt_groups_map", "[", "n0", "]", "==", "gt_groups_map", "[", "n1", "]", ":", "\n", "                    ", "groupPreds", "[", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "groupPreds", "[", "i", "]", "=", "0", "\n", "\n", "", "", "", "if", "gt_groups", "is", "not", "None", ":", "\n", "            ", "mergeThresh", "=", "6", "#In DocStruct eval we're also using GT line bbs, so we shouldn't need to merge", "\n", "\n", "", "mergedTo", "=", "set", "(", ")", "\n", "#check for merges, where we will combine two BBs into one", "\n", "for", "i", ",", "(", "n0", ",", "n1", ")", "in", "enumerate", "(", "oldEdgeIndexes", ")", ":", "\n", "#n0 and n1 are the node indexes", "\n", "#i is the edge index", "\n", "\n", "            ", "if", "mergePreds", "[", "i", "]", ">", "mergeThresh", ":", "\n", "                ", "if", "self", ".", "training", "and", "random", ".", "random", "(", ")", "<", "0.001", ":", "#randomly don't merge for robustness in training. 0.001 is pretty small, but this was with oversegmented (Word-FUDGE) training in mind", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "oldGroups", "[", "n0", "]", ")", "==", "1", "and", "len", "(", "oldGroups", "[", "n1", "]", ")", "==", "1", ":", "#can only merge ungrouped nodes. This assumption is used later in the code WXS", "\n", "                    ", "bbId0", "=", "oldGroups", "[", "n0", "]", "[", "0", "]", "\n", "bbId1", "=", "oldGroups", "[", "n1", "]", "[", "0", "]", "\n", "newId0", "=", "oldToNewBBIndexes", "[", "bbId0", "]", "\n", "bb0ToMerge", "=", "bbs", "[", "newId0", "]", "\n", "\n", "newId1", "=", "oldToNewBBIndexes", "[", "bbId1", "]", "\n", "bb1ToMerge", "=", "bbs", "[", "newId1", "]", "\n", "\n", "if", "self", ".", "prevent_vert_merges", ":", "\n", "#This is not used", "\n", "#This will introduce slowdowns as we are computing each partail merge instead of waiting till all merges are found", "\n", "                        ", "angle", "=", "(", "bb0ToMerge", ".", "medianAngle", "(", ")", "+", "bb1ToMerge", ".", "medianAngle", "(", ")", ")", "/", "2", "\n", "h0", "=", "bb0ToMerge", ".", "getHeight", "(", ")", "\n", "r0", "=", "bb0ToMerge", ".", "getReadPosition", "(", "angle", ")", "\n", "h1", "=", "bb1ToMerge", ".", "getHeight", "(", ")", "\n", "r1", "=", "bb1ToMerge", ".", "getReadPosition", "(", "angle", ")", "\n", "\n", "if", "abs", "(", "r0", "-", "r1", ")", ">", "(", "h0", "+", "h1", ")", "/", "4", ":", "\n", "                            ", "continue", "\n", "\n", "\n", "\n", "", "", "if", "newId0", "!=", "newId1", ":", "#if these haven't been merged already (due to chain merges)", "\n", "                        ", "bbs", "[", "newId0", "]", "=", "self", ".", "mergeBB", "(", "bb0ToMerge", ",", "bb1ToMerge", ")", "\n", "#merge two merged bbs", "\n", "oldToNewBBIndexes", "=", "{", "k", ":", "(", "v", "if", "v", "!=", "newId1", "else", "newId0", ")", "for", "k", ",", "v", "in", "oldToNewBBIndexes", ".", "items", "(", ")", "}", "\n", "del", "bbs", "[", "newId1", "]", "\n", "if", "bbTrans", "is", "not", "None", ":", "\n", "                            ", "del", "bbTrans", "[", "newId1", "]", "\n", "", "mergedTo", ".", "add", "(", "newId0", ")", "\n", "self", ".", "merges_performed", "+=", "1", "\n", "\n", "\n", "\n", "#rewrite groups with merged instances", "\n", "", "", "", "", "assignedGroup", "=", "{", "}", "#This points a bb to its (new) group. This will allow us to remove merged instances", "\n", "oldGroupToNew", "=", "{", "}", "#id map", "\n", "workGroups", "=", "{", "}", "#This stores the new groups", "\n", "changedGroups", "=", "[", "]", "\n", "#We reuse the same ids as we can only get less groups", "\n", "for", "id", ",", "bbIds", "in", "enumerate", "(", "oldGroups", ")", ":", "\n", "#rewrite the bb ids", "\n", "            ", "newGroup", "=", "[", "oldToNewBBIndexes", "[", "oldId", "]", "for", "oldId", "in", "bbIds", "]", "\n", "if", "len", "(", "newGroup", ")", "==", "1", "and", "newGroup", "[", "0", "]", "in", "assignedGroup", ":", "#WXS assuming only single bbs can merge", "\n", "#id is merged and my group is already assigned, so add id to the group", "\n", "                ", "oldGroupToNew", "[", "id", "]", "=", "assignedGroup", "[", "newGroup", "[", "0", "]", "]", "\n", "changedGroups", ".", "append", "(", "newGroup", "[", "0", "]", ")", "\n", "#nothing else needs done, since the group has the ID,", "\n", "", "else", ":", "\n", "#assign the nodes to the group id (no change)", "\n", "                ", "workGroups", "[", "id", "]", "=", "newGroup", "\n", "for", "bbId", "in", "newGroup", ":", "\n", "                    ", "assignedGroup", "[", "bbId", "]", "=", "id", "\n", "\n", "", "", "", "newGroupToOldMerge", "=", "defaultdict", "(", "list", ")", "#tracks what has been merged", "\n", "for", "k", ",", "v", "in", "oldGroupToNew", ".", "items", "(", ")", ":", "\n", "            ", "newGroupToOldMerge", "[", "v", "]", ".", "append", "(", "k", ")", "\n", "\n", "\n", "#We'll adjust the edges to acount for merges as well as prune edges and get ready for grouping", "\n", "\n", "#Prune and adjust the edges (to groups)", "\n", "", "groupEdges", "=", "[", "]", "\n", "\n", "prunedOldEdgeIndexes", "=", "[", "]", "\n", "for", "i", ",", "(", "n0", ",", "n1", ")", "in", "enumerate", "(", "oldEdgeIndexes", ")", ":", "\n", "            ", "if", "(", "(", "keep_edges", "is", "not", "None", "and", "i", "in", "keep_edges", ")", "or", "\n", "edgePreds", "[", "i", "]", ">", "keepEdgeThresh", ")", ":", "\n", "#great, it's above the prune threshold", "\n", "                ", "old_n0", "=", "n0", "\n", "old_n1", "=", "n1", "\n", "if", "n0", "in", "oldGroupToNew", ":", "\n", "                    ", "n0", "=", "oldGroupToNew", "[", "n0", "]", "\n", "", "if", "n1", "in", "oldGroupToNew", ":", "\n", "                    ", "n1", "=", "oldGroupToNew", "[", "n1", "]", "\n", "\n", "", "if", "n0", "!=", "n1", ":", "\n", "                    ", "groupEdges", ".", "append", "(", "(", "groupPreds", "[", "i", "]", ".", "item", "(", ")", ",", "n0", ",", "n1", ")", ")", "\n", "#else:", "\n", "#    It disapears. If the nodes are the same node now, no edge exists", "\n", "", "prunedOldEdgeIndexes", ".", "append", "(", "(", "i", ",", "old_n0", ",", "old_n1", ")", ")", "\n", "\n", "\n", "\n", "\n", "#Find nodes that should be grouped", "\n", "", "", "oldGroupToNewGrouping", "=", "{", "i", ":", "i", "for", "i", "in", "workGroups", ".", "keys", "(", ")", "}", "#a map so we can see which nodes were grouped", "\n", "while", "len", "(", "groupEdges", ")", ">", "0", ":", "\n", "            ", "groupEdges", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "#we do greedy grouping. Although I don't think order matters", "\n", "score", ",", "g0", ",", "g1", "=", "groupEdges", ".", "pop", "(", ")", "\n", "assert", "(", "g0", "!=", "g1", ")", "\n", "if", "score", "<", "groupThresh", ":", "\n", "#no grouping, we add this edge back as we use the leftover list", "\n", "                ", "groupEdges", ".", "append", "(", "(", "score", ",", "g0", ",", "g1", ")", ")", "\n", "break", "\n", "\n", "", "new_g0", "=", "oldGroupToNewGrouping", "[", "g0", "]", "\n", "new_g1", "=", "oldGroupToNewGrouping", "[", "g1", "]", "\n", "if", "new_g0", "!=", "new_g1", ":", "#if these are not already in the same group", "\n", "                ", "workGroups", "[", "new_g0", "]", "+=", "workGroups", "[", "new_g1", "]", "#merge node ids", "\n", "oldGroupToNewGrouping", "=", "{", "k", ":", "(", "v", "if", "v", "!=", "new_g1", "else", "new_g0", ")", "for", "k", ",", "v", "in", "oldGroupToNewGrouping", ".", "items", "(", ")", "}", "\n", "\n", "del", "workGroups", "[", "new_g1", "]", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "if", "gt_groups", "is", "not", "None", ":", "\n", "#check the produced groups to see if they match gt groups", "\n", "            ", "fix_gg", "=", "[", "]", "#gt groups not in workGroups (because no edge existed)", "\n", "for", "gg", "in", "gt_groups", ":", "\n", "                ", "match_found", "=", "False", "\n", "for", "id", ",", "group", "in", "workGroups", ".", "items", "(", ")", ":", "\n", "                    ", "is_match", "=", "True", "\n", "for", "bb", "in", "gg", ":", "\n", "                        ", "if", "bb", "not", "in", "group", ":", "\n", "                            ", "is_match", "=", "False", "\n", "break", "\n", "", "", "if", "is_match", ":", "\n", "                        ", "match_found", "=", "True", "\n", "break", "\n", "#assert match_found", "\n", "", "", "if", "not", "match_found", ":", "\n", "                    ", "fix_gg", ".", "append", "(", "gg", ")", "\n", "\n", "#fix", "\n", "", "", "for", "gg", "in", "fix_gg", ":", "\n", "                ", "w_groups", "=", "[", "]", "\n", "for", "new_g", ",", "w_group", "in", "workGroups", ".", "items", "(", ")", ":", "\n", "                    ", "for", "g_bb", "in", "gg", ":", "\n", "                        ", "if", "g_bb", "in", "w_group", ":", "\n", "                            ", "w_groups", ".", "append", "(", "new_g", ")", "\n", "break", "\n", "", "", "", "assert", "len", "(", "w_groups", ")", ">", "1", "\n", "root_new_g", "=", "w_groups", "[", "0", "]", "\n", "for", "new_g", "in", "w_groups", "[", "1", ":", "]", ":", "\n", "                    ", "if", "new_g", "in", "workGroups", ":", "\n", "                        ", "workGroups", "[", "root_new_g", "]", "+=", "workGroups", "[", "new_g", "]", "\n", "oldGroupToNewGrouping", "=", "{", "k", ":", "(", "v", "if", "v", "!=", "new_g", "else", "root_new_g", ")", "for", "k", ",", "v", "in", "oldGroupToNewGrouping", ".", "items", "(", ")", "}", "\n", "del", "workGroups", "[", "new_g", "]", "\n", "\n", "\n", "\n", "#Actually change bbs to list,  we'll adjusting appropriate values in groups as we convert groups to list", "\n", "", "", "", "", "bbIdToPos", "=", "{", "}", "\n", "newBBs", "=", "[", "]", "\n", "newBBTrans", "=", "[", "]", "\n", "for", "i", ",", "(", "bbId", ",", "bb", ")", "in", "enumerate", "(", "bbs", ".", "items", "(", ")", ")", ":", "\n", "            ", "bbIdToPos", "[", "bbId", "]", "=", "i", "\n", "newBBs", ".", "append", "(", "bb", ")", "\n", "\n", "##pull the features together for nodes", "\n", "#Actually change workGroups to list", "\n", "", "newGroupToOldGrouping", "=", "defaultdict", "(", "list", ")", "#tracks what has been merged", "\n", "for", "k", ",", "v", "in", "oldGroupToNewGrouping", ".", "items", "(", ")", ":", "\n", "            ", "newGroupToOldGrouping", "[", "v", "]", ".", "append", "(", "k", ")", "\n", "", "if", "oldNodeFeats", "is", "not", "None", ":", "\n", "            ", "newNodeFeats", "=", "torch", ".", "FloatTensor", "(", "len", "(", "workGroups", ")", ",", "oldNodeFeats", ".", "size", "(", "1", ")", ")", ".", "to", "(", "oldNodeFeats", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "newNodeFeats", "=", "None", "\n", "\n", "", "if", "old_text_emb", "is", "not", "None", ":", "\n", "            ", "new_text_emb", "=", "torch", ".", "FloatTensor", "(", "len", "(", "workGroups", ")", ",", "old_text_emb", ".", "size", "(", "1", ")", ")", ".", "to", "(", "old_text_emb", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "new_text_emb", "=", "None", "\n", "\n", "#gather the node features than need combined", "\n", "", "oldToNewNodeIds_unchanged", "=", "{", "}", "\n", "oldToNewIds_all", "=", "{", "}", "\n", "newGroups", "=", "[", "]", "\n", "groupNodeTrans", "=", "[", "]", "\n", "for", "i", ",", "(", "idx", ",", "bbIds", ")", "in", "enumerate", "(", "workGroups", ".", "items", "(", ")", ")", ":", "#for each new group", "\n", "            ", "newGroups", ".", "append", "(", "[", "bbIdToPos", "[", "bbId", "]", "for", "bbId", "in", "bbIds", "]", ")", "\n", "featsToCombine", "=", "[", "]", "\n", "embeddings_to_combine", "=", "[", "]", "\n", "for", "oldNodeIdx", "in", "newGroupToOldGrouping", "[", "idx", "]", ":", "#for each node in that group", "\n", "                ", "oldToNewIds_all", "[", "oldNodeIdx", "]", "=", "i", "\n", "featsToCombine", ".", "append", "(", "oldNodeFeats", "[", "oldNodeIdx", "]", "if", "oldNodeFeats", "is", "not", "None", "else", "None", ")", "\n", "embeddings_to_combine", ".", "append", "(", "old_text_emb", "[", "oldNodeIdx", "]", "if", "old_text_emb", "is", "not", "None", "else", "None", ")", "\n", "if", "oldNodeIdx", "in", "newGroupToOldMerge", ":", "#if the node was merged, get it's merged node features", "\n", "                    ", "for", "mergedIdx", "in", "newGroupToOldMerge", "[", "oldNodeIdx", "]", ":", "\n", "                        ", "featsToCombine", ".", "append", "(", "oldNodeFeats", "[", "mergedIdx", "]", "if", "oldNodeFeats", "is", "not", "None", "else", "None", ")", "\n", "embeddings_to_combine", ".", "append", "(", "old_text_emb", "[", "mergedIdx", "]", "if", "old_text_emb", "is", "not", "None", "else", "None", ")", "\n", "oldToNewIds_all", "[", "mergedIdx", "]", "=", "i", "\n", "\n", "", "", "", "if", "len", "(", "featsToCombine", ")", "==", "1", ":", "\n", "                ", "oldToNewNodeIds_unchanged", "[", "oldNodeIdx", "]", "=", "i", "\n", "if", "oldNodeFeats", "is", "not", "None", ":", "\n", "                    ", "newNodeFeats", "[", "i", "]", "=", "featsToCombine", "[", "0", "]", "\n", "", "if", "new_text_emb", "is", "not", "None", ":", "\n", "                    ", "new_text_emb", "[", "i", "]", "=", "embeddings_to_combine", "[", "0", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "oldNodeFeats", "is", "not", "None", ":", "\n", "                    ", "newNodeFeats", "[", "i", "]", "=", "self", ".", "groupNodeFunc", "(", "featsToCombine", ")", "#average them gether", "\n", "", "if", "new_text_emb", "is", "not", "None", ":", "\n", "                    ", "new_text_emb", "[", "i", "]", "=", "torch", ".", "stack", "(", "embeddings_to_combine", ",", "dim", "=", "0", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "\n", "\n", "\n", "\n", "\n", "#find overlapped edges and combine", "\n", "#first change all node ids to their new ones", "\n", "", "", "", "newEdges_map", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "n0", ",", "n1", "in", "prunedOldEdgeIndexes", ":", "\n", "            ", "new_n0", "=", "oldToNewIds_all", "[", "n0", "]", "\n", "new_n1", "=", "oldToNewIds_all", "[", "n1", "]", "\n", "if", "new_n0", "!=", "new_n1", ":", "\n", "                ", "newEdges_map", "[", "(", "min", "(", "new_n0", ",", "new_n1", ")", ",", "max", "(", "new_n0", ",", "new_n1", ")", ")", "]", ".", "append", "(", "i", ")", "\n", "\n", "#This leaves some old edges pointing to the same new edge, so combine their features", "\n", "", "", "newEdges", "=", "[", "]", "\n", "if", "oldEdgeFeats", "is", "not", "None", ":", "\n", "            ", "newEdgeFeats", "=", "torch", ".", "FloatTensor", "(", "len", "(", "newEdges_map", ")", ",", "oldEdgeFeats", ".", "size", "(", "1", ")", ")", ".", "to", "(", "oldEdgeFeats", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "newEdgeFeats", "=", "None", "\n", "", "if", "keep_edges", "is", "not", "None", ":", "\n", "            ", "old_keep_edges", "=", "keep_edges", "\n", "keep_edges", "=", "set", "(", ")", "\n", "", "for", "edge", ",", "oldIds", "in", "newEdges_map", ".", "items", "(", ")", ":", "#for each new edge", "\n", "            ", "if", "oldEdgeFeats", "is", "not", "None", ":", "\n", "                ", "if", "len", "(", "oldIds", ")", "==", "1", ":", "\n", "#no combining needed", "\n", "                    ", "newEdgeFeats", "[", "len", "(", "newEdges", ")", "]", "=", "oldEdgeFeats", "[", "oldIds", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "#average the edge features together", "\n", "                    ", "newEdgeFeats", "[", "len", "(", "newEdges", ")", "]", "=", "self", ".", "groupEdgeFunc", "(", "[", "oldEdgeFeats", "[", "oId", "]", "for", "oId", "in", "oldIds", "]", ")", "\n", "", "", "if", "keep_edges", "is", "not", "None", ":", "\n", "                ", "if", "any", "(", "[", "oId", "in", "old_keep_edges", "for", "oId", "in", "oldIds", "]", ")", ":", "\n", "                    ", "keep_edges", ".", "add", "(", "len", "(", "newEdges", ")", ")", "\n", "", "", "newEdges", ".", "append", "(", "edge", ")", "\n", "\n", "\n", "\n", "#put together the new (full) graph", "\n", "", "edges", "=", "newEdges", "\n", "newEdges", "=", "list", "(", "newEdges", ")", "+", "[", "(", "y", ",", "x", ")", "for", "x", ",", "y", "in", "newEdges", "]", "#add reverse edges so undirected/bidirectional", "\n", "\n", "if", "len", "(", "newEdges", ")", ">", "0", ":", "\n", "            ", "newEdgeIndexes", "=", "torch", ".", "LongTensor", "(", "newEdges", ")", ".", "t", "(", ")", "\n", "if", "oldEdgeFeats", "is", "not", "None", ":", "\n", "                ", "newEdgeIndexes", "=", "newEdgeIndexes", ".", "to", "(", "oldEdgeFeats", ".", "device", ")", "\n", "", "", "else", ":", "\n", "            ", "newEdgeIndexes", "=", "torch", ".", "LongTensor", "(", "0", ")", "\n", "", "if", "oldEdgeFeats", "is", "not", "None", ":", "\n", "            ", "newEdgeFeats", "=", "newEdgeFeats", ".", "repeat", "(", "2", ",", "1", ")", "\n", "\n", "", "newGraph", "=", "(", "newNodeFeats", ",", "newEdgeIndexes", ",", "newEdgeFeats", ",", "oldUniversalFeats", ")", "\n", "\n", "\n", "newBBs", "=", "torch", ".", "stack", "(", "newBBs", ",", "dim", "=", "0", ")", "\n", "\n", "return", "newBBs", ",", "newGraph", ",", "newGroups", ",", "edges", ",", "None", ",", "new_text_emb", ",", "oldToNewNodeIds_unchanged", ",", "keep_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.createGraph": [[1211, 1290], ["fudge.FUDGE.computeEdgeVisualFeatures", "fudge.FUDGE.computeNodeVisualFeatures", "len", "len", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "edgeFeatures.repeat.repeat.repeat", "fudge.FUDGE.selectLineOfSightEdges", "len", "random.shuffle", "fudge.FUDGE.makeAllMasks", "fudge.FUDGE.selectFeatureNNEdges", "range", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.computeEdgeVisualFeatures", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.computeNodeVisualFeatures", "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.selectLineOfSightEdges", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.makeAllMasks", "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.selectFeatureNNEdges"], ["", "def", "createGraph", "(", "self", ",", "\n", "bbs", ",", "#the detected or GT BBs", "\n", "features", ",", "#features from detector", "\n", "features2", ",", "#features from detector (other layer)", "\n", "imageHeight", ",", "\n", "imageWidth", ",", "\n", "text_emb", "=", "None", ",", "#nope", "\n", "flip", "=", "None", ",", "#becuse we use the appended masks for the edge features, there is an ordering, this can control it. If None, it's random", "\n", "image", "=", "None", ",", "#was used for some features extraction not used now", "\n", ")", ":", "\n", "\n", "        ", "if", "self", ".", "relationshipProposal", "==", "'line_of_sight'", ":", "\n", "            ", "candidates", "=", "self", ".", "selectLineOfSightEdges", "(", "bbs", ",", "imageHeight", ",", "imageWidth", ")", "\n", "rel_prop_scores", "=", "None", "\n", "", "elif", "self", ".", "relationshipProposal", "==", "'feature_nn'", ":", "#FUDGE does this", "\n", "            ", "candidates", ",", "rel_prop_scores", "=", "self", ".", "selectFeatureNNEdges", "(", "bbs", ",", "imageHeight", ",", "imageWidth", ",", "image", ",", "features", ".", "device", ",", "text_emb", "=", "text_emb", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", "if", "len", "(", "candidates", ")", "==", "0", ":", "\n", "#no edges, no graph", "\n", "            ", "return", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "", "if", "self", ".", "training", ":", "\n", "#This matters if it splits edge featurizing, as it only keeps the gradient for the first batch", "\n", "            ", "random", ".", "shuffle", "(", "candidates", ")", "\n", "\n", "", "keep_edges", "=", "None", "\n", "\n", "if", "self", ".", "useShapeFeats", "!=", "'only'", ":", "\n", "#precompute mask of all BBs for whole image", "\n", "            ", "allMasks", "=", "self", ".", "makeAllMasks", "(", "imageHeight", ",", "imageWidth", ",", "bbs", ")", "\n", "", "else", ":", "\n", "            ", "allMasks", "=", "None", "\n", "", "groups", "=", "[", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "bbs", ")", ")", "]", "\n", "\n", "edge_vis_features", "=", "self", ".", "computeEdgeVisualFeatures", "(", "features", ",", "features2", ",", "imageHeight", ",", "imageWidth", ",", "bbs", ",", "groups", ",", "candidates", ",", "allMasks", ",", "flip", ")", "\n", "\n", "\n", "if", "self", ".", "edge_transition_layers", "is", "not", "None", ":", "\n", "            ", "rel_features", "=", "self", ".", "edge_transition_layers", "[", "0", "]", "(", "edge_vis_features", ")", "#this is an extra linear layer to prep the features for the graph (which expects non-activated values)", "\n", "", "else", ":", "\n", "            ", "rel_features", "=", "edge_vis_features", "\n", "\n", "#compute features for the bounding boxes/nodes by themselves", "\n", "", "node_vis_features", "=", "self", ".", "computeNodeVisualFeatures", "(", "features", ",", "features2", ",", "imageHeight", ",", "imageWidth", ",", "bbs", ",", "groups", ",", "text_emb", ",", "allMasks", ")", "\n", "\n", "if", "self", ".", "node_transition_layers", "is", "not", "None", ":", "\n", "            ", "bb_features", "=", "self", ".", "node_transition_layers", "[", "0", "]", "(", "node_vis_features", ")", "#this is an extra linear layer to prep the features for the graph (which expects non-activated values)", "\n", "", "else", ":", "\n", "            ", "bb_features", "=", "node_vis_features", "\n", "\n", "", "relIndexes", "=", "candidates", "\n", "numBB", "=", "len", "(", "bbs", ")", "\n", "numRel", "=", "len", "(", "candidates", ")", "\n", "\n", "nodeFeatures", "=", "bb_features", "\n", "edgeFeatures", "=", "rel_features", "\n", "edges", "=", "candidates", "\n", "\n", "#add backward edges to make graph bidirectional", "\n", "edges", "+=", "[", "(", "y", ",", "x", ")", "for", "x", ",", "y", "in", "edges", "]", "\n", "edgeIndexes", "=", "torch", ".", "LongTensor", "(", "edges", ")", ".", "t", "(", ")", ".", "to", "(", "rel_features", ".", "device", ")", "\n", "\n", "#now we need to also replicate the edgeFeatures", "\n", "edgeFeatures", "=", "edgeFeatures", ".", "repeat", "(", "2", ",", "1", ")", "\n", "\n", "universalFeatures", "=", "None", "#No universal features", "\n", "\n", "\n", "return", "(", "\n", "(", "nodeFeatures", ",", "edgeIndexes", ",", "edgeFeatures", ",", "universalFeatures", ")", ",", "#the whole graph", "\n", "relIndexes", ",", "#the unduplicated edges", "\n", "rel_prop_scores", ",", "#to supervise the proposal network", "\n", "node_vis_features", ",", "#to reuse visual features", "\n", "edge_vis_features", ",", "#to reuse visual features", "\n", "keep_edges", "#not used", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.makeAllMasks": [[1293, 1329], ["torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "tlX.cpu.cpu.cpu", "tlY.cpu.cpu.cpu", "trX.cpu.cpu.cpu", "trY.cpu.cpu.cpu", "blX.cpu.cpu.cpu", "blY.cpu.cpu.cpu", "brX.cpu.cpu.cpu", "brY.cpu.cpu.cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "len", "skimage.draw.polygon"], "methods", ["None"], ["", "def", "makeAllMasks", "(", "self", ",", "imageHeight", ",", "imageWidth", ",", "bbs", ")", ":", "\n", "        ", "bbs", "=", "bbs", "[", ":", ",", "1", ":", "]", "#remove conf", "\n", "#get corners from bb predictions", "\n", "x", "=", "bbs", "[", ":", ",", "0", "]", "\n", "y", "=", "bbs", "[", ":", ",", "1", "]", "\n", "r", "=", "bbs", "[", ":", ",", "2", "]", "\n", "h", "=", "bbs", "[", ":", ",", "3", "]", "\n", "w", "=", "bbs", "[", ":", ",", "4", "]", "\n", "cos_r", "=", "torch", ".", "cos", "(", "r", ")", "\n", "sin_r", "=", "torch", ".", "sin", "(", "r", ")", "\n", "tlX", "=", "-", "w", "*", "cos_r", "+", "-", "h", "*", "sin_r", "+", "x", "\n", "tlY", "=", "w", "*", "sin_r", "+", "-", "h", "*", "cos_r", "+", "y", "\n", "trX", "=", "w", "*", "cos_r", "+", "-", "h", "*", "sin_r", "+", "x", "\n", "trY", "=", "-", "w", "*", "sin_r", "+", "-", "h", "*", "cos_r", "+", "y", "\n", "brX", "=", "w", "*", "cos_r", "+", "h", "*", "sin_r", "+", "x", "\n", "brY", "=", "-", "w", "*", "sin_r", "+", "h", "*", "cos_r", "+", "y", "\n", "blX", "=", "-", "w", "*", "cos_r", "+", "h", "*", "sin_r", "+", "x", "\n", "blY", "=", "w", "*", "sin_r", "+", "h", "*", "cos_r", "+", "y", "\n", "\n", "tlX", "=", "tlX", ".", "cpu", "(", ")", "\n", "tlY", "=", "tlY", ".", "cpu", "(", ")", "\n", "trX", "=", "trX", ".", "cpu", "(", ")", "\n", "trY", "=", "trY", ".", "cpu", "(", ")", "\n", "blX", "=", "blX", ".", "cpu", "(", ")", "\n", "blY", "=", "blY", ".", "cpu", "(", ")", "\n", "brX", "=", "brX", ".", "cpu", "(", ")", "\n", "brY", "=", "brY", ".", "cpu", "(", ")", "\n", "#build all-mask image, may want to move this up and use for relationship proposals", "\n", "if", "self", ".", "expandedRelContext", "is", "not", "None", "or", "self", ".", "expandedBBContext", "is", "not", "None", ":", "\n", "            ", "allMasks", "=", "torch", ".", "zeros", "(", "imageHeight", ",", "imageWidth", ")", "\n", "for", "bbIdx", "in", "range", "(", "len", "(", "bbs", ")", ")", ":", "\n", "                ", "rr", ",", "cc", "=", "draw", ".", "polygon", "(", "[", "tlY", "[", "bbIdx", "]", ",", "trY", "[", "bbIdx", "]", ",", "brY", "[", "bbIdx", "]", ",", "blY", "[", "bbIdx", "]", "]", ",", "[", "tlX", "[", "bbIdx", "]", ",", "trX", "[", "bbIdx", "]", ",", "brX", "[", "bbIdx", "]", ",", "blX", "[", "bbIdx", "]", "]", ",", "[", "imageHeight", ",", "imageWidth", "]", ")", "\n", "allMasks", "[", "rr", ",", "cc", "]", "=", "1", "\n", "", "return", "allMasks", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.computeEdgeVisualFeatures": [[1331, 1628], ["torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "tlX.cpu.cpu.cpu", "tlY.cpu.cpu.cpu", "trX.cpu.cpu.cpu", "trY.cpu.cpu.cpu", "blX.cpu.cpu.cpu", "blY.cpu.cpu.cpu", "brX.cpu.cpu.cpu", "brY.cpu.cpu.cpu", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "torch.max().to", "D_xs.all", "D_ys.all", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "len", "fudge.FUDGE.append", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "fudge.FUDGE.relFeaturizerFC", "type", "D_xs.all", "print", "print", "print", "D_ys.all", "print", "print", "print", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.FloatTensor().to.to", "torch.FloatTensor().to.to", "torch.FloatTensor().to.to", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "min", "range", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "fudge.FUDGE.roi_align", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "fudge.FUDGE.relFeaturizerConv", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "len", "len", "len", "b_rois.to", "fudge.FUDGE.roi_align2", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fudge.FUDGE.relFeaturizerConv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "b_rois.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "type", "type", "fudge.combineShapeFeatsTensor", "fudge.combineShapeFeatsTensor", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "len", "fudge.groupRect", "fudge.groupRect", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "skimage.draw.polygon", "skimage.draw.polygon", "min", "max", "min", "max", "min", "max", "min", "max", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "random.random", "len", "ValueError", "torch.interpolate", "torch.interpolate", "torch.interpolate", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "h_m[].item", "h_m[].item", "h_m[].item", "h_m[].item", "w_m[].item", "w_m[].item", "w_m[].item", "w_m[].item", "h_m[].item", "h_m[].item", "h_m[].item", "h_m[].item", "w_m[].item", "w_m[].item", "w_m[].item", "w_m[].item", "b_rois[].item", "round", "b_rois[].item", "round", "b_rois[].item", "round", "b_rois[].item", "round", "tlY[].item", "b_rois[].item", "trY[].item", "b_rois[].item", "brY[].item", "b_rois[].item", "blY[].item", "b_rois[].item", "tlX[].item", "b_rois[].item", "trX[].item", "b_rois[].item", "brX[].item", "b_rois[].item", "blX[].item", "b_rois[].item", "tlY[].item", "b_rois[].item", "trY[].item", "b_rois[].item", "brY[].item", "b_rois[].item", "blY[].item", "b_rois[].item", "tlX[].item", "b_rois[].item", "trX[].item", "b_rois[].item", "brX[].item", "b_rois[].item", "blX[].item", "b_rois[].item", "b_rois[].item", "b_rois[].item", "b_rois[].item", "b_rois[].item"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.combineShapeFeatsTensor", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.combineShapeFeatsTensor", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.groupRect", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.groupRect"], ["", "", "def", "computeEdgeVisualFeatures", "(", "self", ",", "features", ",", "features2", ",", "imageHeight", ",", "imageWidth", ",", "bbs", ",", "groups", ",", "edges", ",", "allMasks", ",", "flip", ")", ":", "\n", "\n", "        ", "if", "self", ".", "useShapeFeats", "!=", "'only'", "and", "self", ".", "useShapeFeats", "!=", "'only for edge'", ":", "\n", "            ", "pool_h", "=", "self", ".", "pool_h", "\n", "pool_w", "=", "self", ".", "pool_w", "\n", "pool2_h", "=", "self", ".", "pool2_h", "\n", "pool2_w", "=", "self", ".", "pool2_w", "\n", "\n", "\n", "#get corners from bb predictions", "\n", "", "x", "=", "bbs", "[", ":", ",", "1", "]", "\n", "y", "=", "bbs", "[", ":", ",", "2", "]", "\n", "r", "=", "bbs", "[", ":", ",", "3", "]", "\n", "h", "=", "bbs", "[", ":", ",", "4", "]", "\n", "w", "=", "bbs", "[", ":", ",", "5", "]", "\n", "cos_r", "=", "torch", ".", "cos", "(", "r", ")", "\n", "sin_r", "=", "torch", ".", "sin", "(", "r", ")", "\n", "tlX", "=", "-", "w", "*", "cos_r", "+", "-", "h", "*", "sin_r", "+", "x", "\n", "tlY", "=", "w", "*", "sin_r", "+", "-", "h", "*", "cos_r", "+", "y", "\n", "trX", "=", "w", "*", "cos_r", "+", "-", "h", "*", "sin_r", "+", "x", "\n", "trY", "=", "-", "w", "*", "sin_r", "+", "-", "h", "*", "cos_r", "+", "y", "\n", "brX", "=", "w", "*", "cos_r", "+", "h", "*", "sin_r", "+", "x", "\n", "brY", "=", "-", "w", "*", "sin_r", "+", "h", "*", "cos_r", "+", "y", "\n", "blX", "=", "-", "w", "*", "cos_r", "+", "h", "*", "sin_r", "+", "x", "\n", "blY", "=", "w", "*", "sin_r", "+", "h", "*", "cos_r", "+", "y", "\n", "\n", "tlX", "=", "tlX", ".", "cpu", "(", ")", "\n", "tlY", "=", "tlY", ".", "cpu", "(", ")", "\n", "trX", "=", "trX", ".", "cpu", "(", ")", "\n", "trY", "=", "trY", ".", "cpu", "(", ")", "\n", "blX", "=", "blX", ".", "cpu", "(", ")", "\n", "blY", "=", "blY", ".", "cpu", "(", ")", "\n", "brX", "=", "brX", ".", "cpu", "(", ")", "\n", "brY", "=", "brY", ".", "cpu", "(", ")", "\n", "\n", "\n", "groups_index1", "=", "[", "[", "bbs", "[", "b", "]", "for", "b", "in", "groups", "[", "c", "[", "0", "]", "]", "]", "for", "c", "in", "edges", "]", "\n", "groups_index2", "=", "[", "[", "bbs", "[", "b", "]", "for", "b", "in", "groups", "[", "c", "[", "1", "]", "]", "]", "for", "c", "in", "edges", "]", "\n", "assert", "(", "not", "self", ".", "rotation", ")", "\n", "groupIs_index1", "=", "[", "[", "b", "for", "b", "in", "groups", "[", "c", "[", "0", "]", "]", "]", "for", "c", "in", "edges", "]", "\n", "groupIs_index2", "=", "[", "[", "b", "for", "b", "in", "groups", "[", "c", "[", "1", "]", "]", "]", "for", "c", "in", "edges", "]", "\n", "\n", "if", "self", ".", "useShapeFeats", "!=", "'only'", "and", "self", ".", "useShapeFeats", "!=", "'only for edge'", ":", "\n", "#get axis aligned rectangle from corners", "\n", "\n", "            ", "rois", "=", "torch", ".", "zeros", "(", "(", "len", "(", "edges", ")", ",", "5", ")", ")", ".", "to", "(", "features", ".", "device", ")", "#(batchIndex,x1,y1,x2,y2) as expected by ROI Align", "\n", "\n", "\n", "#Get the encompassing rectangle for each group", "\n", "min_X1", ",", "min_Y1", ",", "max_X1", ",", "max_Y1", "=", "torch", ".", "IntTensor", "(", "[", "groupRect", "(", "[", "[", "tlX", "[", "b", "]", ",", "tlY", "[", "b", "]", ",", "brX", "[", "b", "]", ",", "brY", "[", "b", "]", "]", "for", "b", "in", "group", "]", ")", "for", "group", "in", "groupIs_index1", "]", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "min_X2", ",", "min_Y2", ",", "max_X2", ",", "max_Y2", "=", "torch", ".", "IntTensor", "(", "[", "groupRect", "(", "[", "[", "tlX", "[", "b", "]", ",", "tlY", "[", "b", "]", ",", "brX", "[", "b", "]", ",", "brY", "[", "b", "]", "]", "for", "b", "in", "group", "]", ")", "for", "group", "in", "groupIs_index2", "]", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "\n", "#Get encompassing rectangle for each edge", "\n", "min_X", "=", "torch", ".", "min", "(", "min_X1", ",", "min_X2", ")", ".", "to", "(", "features", ".", "device", ")", "\n", "min_Y", "=", "torch", ".", "min", "(", "min_Y1", ",", "min_Y2", ")", ".", "to", "(", "features", ".", "device", ")", "\n", "max_X", "=", "torch", ".", "max", "(", "max_X1", ",", "max_X2", ")", ".", "to", "(", "features", ".", "device", ")", "\n", "max_Y", "=", "torch", ".", "max", "(", "max_Y1", ",", "max_Y2", ")", ".", "to", "(", "features", ".", "device", ")", "\n", "\n", "#Pad the rectangles", "\n", "if", "type", "(", "self", ".", "expandedRelContext", ")", "is", "list", ":", "\n", "                ", "padY", ",", "padX", "=", "self", ".", "expandedRelContext", "\n", "", "else", ":", "\n", "                ", "padX", "=", "padY", "=", "self", ".", "expandedRelContext", "\n", "\n", "", "D_xs", "=", "min_X", "<=", "max_X", "\n", "D_ys", "=", "min_Y", "<=", "max_Y", "\n", "if", "not", "D_xs", ".", "all", "(", ")", ":", "\n", "                ", "print", "(", "'bad x'", ")", "\n", "print", "(", "min_X", "[", "~", "D_xs", "]", ")", "\n", "print", "(", "max_X", "[", "~", "D_xs", "]", ")", "\n", "", "if", "not", "D_ys", ".", "all", "(", ")", ":", "\n", "                ", "print", "(", "'bad y'", ")", "\n", "print", "(", "min_Y", "[", "~", "D_ys", "]", ")", "\n", "print", "(", "max_Y", "[", "~", "D_ys", "]", ")", "\n", "", "assert", "(", "(", "D_xs", ")", ".", "all", "(", ")", ")", "\n", "assert", "(", "(", "D_ys", ")", ".", "all", "(", ")", ")", "\n", "\n", "#clip rectangles to image size", "\n", "oneT", "=", "torch", ".", "FloatTensor", "(", "[", "1", "]", ")", ".", "to", "(", "features", ".", "device", ")", "\n", "zeroT", "=", "torch", ".", "FloatTensor", "(", "[", "1", "]", ")", ".", "to", "(", "features", ".", "device", ")", "\n", "max_X", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "(", "max_X", "+", "padX", ")", ".", "float", "(", ")", ",", "torch", ".", "FloatTensor", "(", "[", "imageWidth", "-", "1", "]", ")", ".", "to", "(", "features", ".", "device", ")", ")", ",", "oneT", ")", "\n", "min_X", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "(", "min_X", "-", "padX", ")", ".", "float", "(", ")", ",", "torch", ".", "FloatTensor", "(", "[", "imageWidth", "-", "2", "]", ")", ".", "to", "(", "features", ".", "device", ")", ")", ",", "zeroT", ".", "to", "(", "features", ".", "device", ")", ")", "\n", "max_Y", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "(", "max_Y", "+", "padY", ")", ".", "float", "(", ")", ",", "torch", ".", "FloatTensor", "(", "[", "imageHeight", "-", "1", "]", ")", ".", "to", "(", "features", ".", "device", ")", ")", ",", "oneT", ")", "\n", "min_Y", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "(", "min_Y", "-", "padY", ")", ".", "float", "(", ")", ",", "torch", ".", "FloatTensor", "(", "[", "imageHeight", "-", "2", "]", ")", ".", "to", "(", "features", ".", "device", ")", ")", ",", "zeroT", ")", "\n", "zeroT", "=", "oneT", "=", "None", "\n", "\n", "rois", "[", ":", ",", "1", "]", "=", "min_X", "\n", "rois", "[", ":", ",", "2", "]", "=", "min_Y", "\n", "rois", "[", ":", ",", "3", "]", "=", "max_X", "\n", "rois", "[", ":", ",", "4", "]", "=", "max_Y", "\n", "\n", "\n", "#How many masks get appended?", "\n", "", "if", "self", ".", "useShapeFeats", "!=", "'only'", "and", "self", ".", "useShapeFeats", "!=", "'only for edge'", ":", "\n", "            ", "if", "self", ".", "expandedRelContext", "is", "not", "None", ":", "\n", "#We're going to add a third mask for all bbs", "\n", "                ", "numMasks", "=", "3", "\n", "", "else", ":", "\n", "                ", "numMasks", "=", "2", "\n", "", "", "else", ":", "\n", "            ", "numMasks", "=", "0", "\n", "\n", "", "relFeats", "=", "[", "]", "#where we'll store the feature of each batch", "\n", "\n", "#Set up to allow batching out edge feature computation", "\n", "if", "self", ".", "useShapeFeats", "==", "'only'", "or", "self", ".", "useShapeFeats", "==", "'only for edge'", ":", "\n", "            ", "batch_size", "=", "len", "(", "edges", ")", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "self", ".", "roi_batch_size", "\n", "\n", "", "innerbatches", "=", "[", "(", "s", ",", "min", "(", "s", "+", "batch_size", ",", "len", "(", "edges", ")", ")", ")", "for", "s", "in", "range", "(", "0", ",", "len", "(", "edges", ")", ",", "batch_size", ")", "]", "\n", "\n", "for", "ib", ",", "(", "b_start", ",", "b_end", ")", "in", "enumerate", "(", "innerbatches", ")", ":", "#we can batch extracting computing the feature vector from rois to save memory", "\n", "\n", "            ", "if", "ib", ">", "0", "and", "not", "self", ".", "all_grad", ":", "\n", "                ", "torch", ".", "set_grad_enabled", "(", "False", ")", "#After first batch, no gradient to save memeory", "\n", "\n", "#get the batch", "\n", "", "if", "(", "self", ".", "useShapeFeats", "!=", "'only'", "and", "self", ".", "useShapeFeats", "!=", "'only for edge'", ")", ":", "\n", "                ", "b_rois", "=", "rois", "[", "b_start", ":", "b_end", "]", "#edge rectangles", "\n", "\n", "", "b_edges", "=", "edges", "[", "b_start", ":", "b_end", "]", "#node indexes", "\n", "b_groups_index1", "=", "groups_index1", "[", "b_start", ":", "b_end", "]", "#bb indexes", "\n", "b_groups_index2", "=", "groups_index2", "[", "b_start", ":", "b_end", "]", "\n", "\n", "b_groupIs_index1", "=", "groupIs_index1", "[", "b_start", ":", "b_end", "]", "\n", "b_groupIs_index2", "=", "groupIs_index2", "[", "b_start", ":", "b_end", "]", "\n", "\n", "if", "self", ".", "useShapeFeats", ":", "\n", "                ", "shapeFeats", "=", "torch", ".", "FloatTensor", "(", "len", "(", "b_edges", ")", ",", "self", ".", "numShapeFeats", ")", "\n", "\n", "#perform ROIAlign", "\n", "", "if", "self", ".", "useShapeFeats", "!=", "'only'", "and", "self", ".", "useShapeFeats", "!=", "'only for edge'", ":", "\n", "                ", "stackedEdgeFeatWindows", "=", "self", ".", "roi_align", "(", "features", ",", "b_rois", ".", "to", "(", "features", ".", "device", ")", ")", "\n", "if", "features2", "is", "not", "None", ":", "\n", "                    ", "stackedEdgeFeatWindows2", "=", "self", ".", "roi_align2", "(", "features2", ",", "b_rois", ".", "to", "(", "features", ".", "device", ")", ")", "\n", "if", "not", "self", ".", "splitFeatures", ":", "\n", "                        ", "stackedEdgeFeatWindows", "=", "torch", ".", "cat", "(", "(", "stackedEdgeFeatWindows", ",", "stackedEdgeFeatWindows2", ")", ",", "dim", "=", "1", ")", "\n", "stackedEdgeFeatWindows2", "=", "None", "\n", "\n", "\n", "#create and add masks", "\n", "", "", "masks", "=", "torch", ".", "zeros", "(", "stackedEdgeFeatWindows", ".", "size", "(", "0", ")", ",", "numMasks", ",", "pool2_h", ",", "pool2_w", ")", "\n", "\n", "#make instance specific masks and make shape (spatial) features", "\n", "if", "self", ".", "useShapeFeats", "!=", "'only'", "and", "self", ".", "useShapeFeats", "!=", "'only for edge'", ":", "\n", "                    ", "if", "(", "random", ".", "random", "(", ")", "<", "0.5", "and", "flip", "is", "None", "and", "not", "self", ".", "debug", ")", "or", "flip", ":", "\n", "                        ", "pass", "\n", "#TODO", "\n", "", "feature_w", "=", "b_rois", "[", ":", ",", "3", "]", "-", "b_rois", "[", ":", ",", "1", "]", "+", "1", "\n", "feature_h", "=", "b_rois", "[", ":", ",", "4", "]", "-", "b_rois", "[", ":", ",", "2", "]", "+", "1", "\n", "w_m", "=", "pool2_w", "/", "feature_w", "\n", "h_m", "=", "pool2_h", "/", "feature_h", "\n", "\n", "\n", "\n", "", "for", "i", ",", "(", "index1", ",", "index2", ")", "in", "enumerate", "(", "b_edges", ")", ":", "\n", "                    ", "if", "self", ".", "useShapeFeats", "!=", "'only'", "and", "self", ".", "useShapeFeats", "!=", "'only for edge'", ":", "\n", "\n", "#for each bb in node 1", "\n", "                        ", "for", "bb_id", "in", "groups", "[", "index1", "]", ":", "\n", "                            ", "rr", ",", "cc", "=", "draw", ".", "polygon", "(", "\n", "[", "round", "(", "(", "tlY", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", "*", "h_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "trY", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", "*", "h_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "brY", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", "*", "h_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "blY", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", "*", "h_m", "[", "i", "]", ".", "item", "(", ")", ")", "]", ",", "\n", "[", "round", "(", "(", "tlX", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "*", "w_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "trX", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "*", "w_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "brX", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "*", "w_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "blX", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "*", "w_m", "[", "i", "]", ".", "item", "(", ")", ")", "]", ",", "\n", "[", "pool2_h", ",", "pool2_w", "]", ")", "\n", "masks", "[", "i", ",", "0", ",", "rr", ",", "cc", "]", "=", "1", "\n", "\n", "#for each bb in node 2", "\n", "", "for", "bb_id", "in", "groups", "[", "index2", "]", ":", "\n", "                            ", "rr", ",", "cc", "=", "draw", ".", "polygon", "(", "\n", "[", "round", "(", "(", "tlY", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", "*", "h_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "trY", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", "*", "h_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "brY", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", "*", "h_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "blY", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", "*", "h_m", "[", "i", "]", ".", "item", "(", ")", ")", "]", ",", "\n", "[", "round", "(", "(", "tlX", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "*", "w_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "trX", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "*", "w_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "brX", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "*", "w_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "blX", "[", "bb_id", "]", ".", "item", "(", ")", "-", "b_rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "*", "w_m", "[", "i", "]", ".", "item", "(", ")", ")", "]", ",", "\n", "[", "pool2_h", ",", "pool2_w", "]", ")", "\n", "masks", "[", "i", ",", "1", ",", "rr", ",", "cc", "]", "=", "1", "\n", "\n", "\n", "#add the crop for the allMasks we computed earlier", "\n", "", "if", "self", ".", "expandedRelContext", "is", "not", "None", ":", "\n", "                            ", "cropArea", "=", "allMasks", "[", "round", "(", "b_rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", ":", "round", "(", "b_rois", "[", "i", ",", "4", "]", ".", "item", "(", ")", ")", "+", "1", ",", "round", "(", "b_rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", ":", "round", "(", "b_rois", "[", "i", ",", "3", "]", ".", "item", "(", ")", ")", "+", "1", "]", "\n", "if", "len", "(", "cropArea", ".", "shape", ")", "==", "0", ":", "\n", "                                ", "raise", "ValueError", "(", "\"RoI is bad: {}:{},{}:{} for size {}\"", ".", "format", "(", "round", "(", "b_rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", ",", "round", "(", "b_rois", "[", "i", ",", "4", "]", ".", "item", "(", ")", ")", "+", "1", ",", "round", "(", "b_rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", ",", "round", "(", "b_rois", "[", "i", ",", "3", "]", ".", "item", "(", ")", ")", "+", "1", ",", "allMasks", ".", "shape", ")", ")", "\n", "#also need to resize it to match the ROIAlign ouput", "\n", "", "masks", "[", "i", ",", "2", "]", "=", "F", ".", "interpolate", "(", "cropArea", "[", "None", ",", "None", ",", "...", "]", ",", "size", "=", "(", "pool2_h", ",", "pool2_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "0", ",", "0", "]", "\n", "\n", "\n", "\n", "\n", "#Calculate the spatail features", "\n", "", "", "", "", "if", "self", ".", "useShapeFeats", ":", "\n", "                ", "if", "type", "(", "self", ".", "pairer", ")", "is", "BinaryPairReal", "and", "type", "(", "self", ".", "pairer", ".", "shape_layers", ")", "is", "not", "nn", ".", "Sequential", ":", "\n", "#The index specification is to allign with the format feat nets are trained with", "\n", "                    ", "ixs", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "3", "+", "self", ".", "numBBTypes", ",", "3", "+", "self", ".", "numBBTypes", ",", "4", "+", "self", ".", "numBBTypes", ",", "5", "+", "self", ".", "numBBTypes", ",", "6", "+", "self", ".", "numBBTypes", ",", "6", "+", "2", "*", "self", ".", "numBBTypes", ",", "6", "+", "2", "*", "self", ".", "numBBTypes", ",", "7", "+", "2", "*", "self", ".", "numBBTypes", "]", "\n", "", "else", ":", "\n", "                    ", "ixs", "=", "[", "4", ",", "6", ",", "2", ",", "8", ",", "8", "+", "self", ".", "numBBTypes", ",", "5", ",", "7", ",", "3", ",", "8", "+", "self", ".", "numBBTypes", ",", "8", "+", "self", ".", "numBBTypes", "+", "self", ".", "numBBTypes", ",", "0", ",", "1", "]", "\n", "#allFeats is just the dimensions and stuff", "\n", "#shapeFeats are the features used by the GCN", "\n", "", "allFeats1", "=", "torch", ".", "stack", "(", "[", "combineShapeFeatsTensor", "(", "[", "bb", "for", "bb", "in", "group", "]", ")", "for", "group", "in", "b_groups_index1", "]", ",", "dim", "=", "0", ")", "\n", "allFeats2", "=", "torch", ".", "stack", "(", "[", "combineShapeFeatsTensor", "(", "[", "bb", "for", "bb", "in", "group", "]", ")", "for", "group", "in", "b_groups_index2", "]", ",", "dim", "=", "0", ")", "\n", "allFeats1", "=", "allFeats1", "[", ":", ",", "1", ":", "]", "#discard conf", "\n", "allFeats2", "=", "allFeats2", "[", ":", ",", "1", ":", "]", "#discard conf", "\n", "\n", "shapeFeats", "[", ":", ",", "ixs", "[", "0", "]", "]", "=", "2", "*", "allFeats1", "[", ":", ",", "3", "]", "/", "self", ".", "normalizeVert", "#bb preds half height/width", "\n", "shapeFeats", "[", ":", ",", "ixs", "[", "1", "]", "]", "=", "2", "*", "allFeats1", "[", ":", ",", "4", "]", "/", "self", ".", "normalizeHorz", "\n", "shapeFeats", "[", ":", ",", "ixs", "[", "2", "]", "]", "=", "allFeats1", "[", ":", ",", "2", "]", "/", "math", ".", "pi", "#rotation (not used, always 0)", "\n", "shapeFeats", "[", ":", ",", "ixs", "[", "3", "]", ":", "ixs", "[", "4", "]", "]", "=", "allFeats1", "[", ":", ",", "-", "self", ".", "numBBTypes", ":", "]", "#classes", "\n", "\n", "shapeFeats", "[", ":", ",", "ixs", "[", "5", "]", "]", "=", "2", "*", "allFeats2", "[", ":", ",", "3", "]", "/", "self", ".", "normalizeVert", "#height", "\n", "shapeFeats", "[", ":", ",", "ixs", "[", "6", "]", "]", "=", "2", "*", "allFeats2", "[", ":", ",", "4", "]", "/", "self", ".", "normalizeHorz", "#width", "\n", "shapeFeats", "[", ":", ",", "ixs", "[", "7", "]", "]", "=", "allFeats2", "[", ":", ",", "2", "]", "/", "math", ".", "pi", "#rotation (not used)", "\n", "shapeFeats", "[", ":", ",", "ixs", "[", "8", "]", ":", "ixs", "[", "9", "]", "]", "=", "allFeats2", "[", ":", ",", "-", "self", ".", "numBBTypes", ":", "]", "#classes", "\n", "\n", "shapeFeats", "[", ":", ",", "ixs", "[", "10", "]", "]", "=", "(", "allFeats1", "[", ":", ",", "0", "]", "-", "allFeats2", "[", ":", ",", "0", "]", ")", "/", "self", ".", "normalizeHorz", "#difference in x position", "\n", "shapeFeats", "[", ":", ",", "ixs", "[", "11", "]", "]", "=", "(", "allFeats1", "[", ":", ",", "1", "]", "-", "allFeats2", "[", ":", ",", "1", "]", ")", "/", "self", ".", "normalizeVert", "#difference in y position", "\n", "if", "self", ".", "useShapeFeats", "!=", "'old'", ":", "\n", "                    ", "assert", "(", "not", "self", ".", "rotation", ")", "\n", "#get corners of group of BBs", "\n", "tlX_index1", "=", "blX_index1", "=", "torch", ".", "stack", "(", "[", "min", "(", "[", "tlX", "[", "b", "]", "for", "b", "in", "group", "]", ")", "for", "group", "in", "b_groupIs_index1", "]", ",", "dim", "=", "0", ")", "\n", "trX_index1", "=", "brX_index1", "=", "torch", ".", "stack", "(", "[", "max", "(", "[", "trX", "[", "b", "]", "for", "b", "in", "group", "]", ")", "for", "group", "in", "b_groupIs_index1", "]", ",", "dim", "=", "0", ")", "\n", "tlY_index1", "=", "trY_index1", "=", "torch", ".", "stack", "(", "[", "min", "(", "[", "tlY", "[", "b", "]", "for", "b", "in", "group", "]", ")", "for", "group", "in", "b_groupIs_index1", "]", ",", "dim", "=", "0", ")", "\n", "blY_index1", "=", "brY_index1", "=", "torch", ".", "stack", "(", "[", "max", "(", "[", "brY", "[", "b", "]", "for", "b", "in", "group", "]", ")", "for", "group", "in", "b_groupIs_index1", "]", ",", "dim", "=", "0", ")", "\n", "\n", "tlX_index2", "=", "blX_index2", "=", "torch", ".", "stack", "(", "[", "min", "(", "[", "tlX", "[", "b", "]", "for", "b", "in", "group", "]", ")", "for", "group", "in", "b_groupIs_index2", "]", ",", "dim", "=", "0", ")", "\n", "trX_index2", "=", "brX_index2", "=", "torch", ".", "stack", "(", "[", "max", "(", "[", "trX", "[", "b", "]", "for", "b", "in", "group", "]", ")", "for", "group", "in", "b_groupIs_index2", "]", ",", "dim", "=", "0", ")", "\n", "tlY_index2", "=", "trY_index2", "=", "torch", ".", "stack", "(", "[", "min", "(", "[", "tlY", "[", "b", "]", "for", "b", "in", "group", "]", ")", "for", "group", "in", "b_groupIs_index2", "]", ",", "dim", "=", "0", ")", "\n", "blY_index2", "=", "brY_index2", "=", "torch", ".", "stack", "(", "[", "max", "(", "[", "brY", "[", "b", "]", "for", "b", "in", "group", "]", ")", "for", "group", "in", "b_groupIs_index2", "]", ",", "dim", "=", "0", ")", "\n", "\n", "startCorners", "=", "8", "+", "self", ".", "numBBTypes", "+", "self", ".", "numBBTypes", "\n", "#distance between corners", "\n", "shapeFeats", "[", ":", ",", "startCorners", "+", "0", "]", "=", "torch", ".", "sqrt", "(", "(", "tlX_index1", "-", "tlX_index2", ")", "**", "2", "+", "(", "tlY_index1", "-", "tlY_index2", ")", "**", "2", ")", "/", "self", ".", "normalizeDist", "\n", "shapeFeats", "[", ":", ",", "startCorners", "+", "1", "]", "=", "torch", ".", "sqrt", "(", "(", "trX_index1", "-", "trX_index2", ")", "**", "2", "+", "(", "trY_index1", "-", "trY_index2", ")", "**", "2", ")", "/", "self", ".", "normalizeDist", "\n", "shapeFeats", "[", ":", ",", "startCorners", "+", "3", "]", "=", "torch", ".", "sqrt", "(", "(", "brX_index1", "-", "brX_index2", ")", "**", "2", "+", "(", "brY_index1", "-", "brY_index2", ")", "**", "2", ")", "/", "self", ".", "normalizeDist", "\n", "shapeFeats", "[", ":", ",", "startCorners", "+", "2", "]", "=", "torch", ".", "sqrt", "(", "(", "blX_index1", "-", "blX_index2", ")", "**", "2", "+", "(", "blY_index1", "-", "blY_index2", ")", "**", "2", ")", "/", "self", ".", "normalizeDist", "\n", "startNN", "=", "startCorners", "+", "4", "\n", "", "else", ":", "\n", "                    ", "startNN", "=", "8", "+", "self", ".", "numBBTypes", "+", "self", ".", "numBBTypes", "\n", "", "startPos", "=", "startNN", "\n", "if", "self", ".", "usePositionFeature", ":", "#not used, for better or worse", "\n", "                    ", "if", "self", ".", "usePositionFeature", "==", "'absolute'", ":", "\n", "                        ", "shapeFeats", "[", ":", ",", "startPos", "+", "0", "]", "=", "(", "allFeats1", "[", ":", ",", "0", "]", "-", "imageWidth", "/", "2", ")", "/", "(", "5", "*", "self", ".", "normalizeHorz", ")", "\n", "shapeFeats", "[", ":", ",", "startPos", "+", "1", "]", "=", "(", "allFeats1", "[", ":", ",", "1", "]", "-", "imageHeight", "/", "2", ")", "/", "(", "10", "*", "self", ".", "normalizeVert", ")", "\n", "shapeFeats", "[", ":", ",", "startPos", "+", "2", "]", "=", "(", "allFeats2", "[", ":", ",", "0", "]", "-", "imageWidth", "/", "2", ")", "/", "(", "5", "*", "self", ".", "normalizeHorz", ")", "\n", "shapeFeats", "[", ":", ",", "startPos", "+", "3", "]", "=", "(", "allFeats2", "[", ":", ",", "1", "]", "-", "imageHeight", "/", "2", ")", "/", "(", "10", "*", "self", ".", "normalizeVert", ")", "\n", "", "else", ":", "\n", "                        ", "shapeFeats", "[", ":", ",", "startPos", "+", "0", "]", "=", "(", "allFeats1", "[", ":", ",", "0", "]", "-", "imageWidth", "/", "2", ")", "/", "(", "imageWidth", "/", "2", ")", "\n", "shapeFeats", "[", ":", ",", "startPos", "+", "1", "]", "=", "(", "allFeats1", "[", ":", ",", "1", "]", "-", "imageHeight", "/", "2", ")", "/", "(", "imageHeight", "/", "2", ")", "\n", "shapeFeats", "[", ":", ",", "startPos", "+", "2", "]", "=", "(", "allFeats2", "[", ":", ",", "0", "]", "-", "imageWidth", "/", "2", ")", "/", "(", "imageWidth", "/", "2", ")", "\n", "shapeFeats", "[", ":", ",", "startPos", "+", "3", "]", "=", "(", "allFeats2", "[", ":", ",", "1", "]", "-", "imageHeight", "/", "2", ")", "/", "(", "imageHeight", "/", "2", ")", "\n", "\n", "\n", "\n", "", "", "", "if", "self", ".", "useShapeFeats", "!=", "'only'", "and", "self", ".", "useShapeFeats", "!=", "'only for edge'", ":", "\n", "                ", "if", "self", ".", "splitFeatures", ":", "#FUDGE doesn't split", "\n", "                    ", "stackedEdgeFeatWindows2", "=", "torch", ".", "cat", "(", "(", "stackedEdgeFeatWindows2", ",", "masks", ".", "to", "(", "stackedEdgeFeatWindows2", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "b_relFeats", "=", "self", ".", "relFeaturizerConv2", "(", "stackedEdgeFeatWindows2", ")", "\n", "stackedEdgeFeatWindows", "=", "torch", ".", "cat", "(", "(", "stackedEdgeFeatWindows", ",", "b_relFeats", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "#FUDGE appends them together", "\n", "                    ", "stackedEdgeFeatWindows", "=", "torch", ".", "cat", "(", "(", "stackedEdgeFeatWindows", ",", "masks", ".", "to", "(", "stackedEdgeFeatWindows", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "b_relFeats", "=", "self", ".", "relFeaturizerConv", "(", "stackedEdgeFeatWindows", ")", "#preparing for graph feature size", "\n", "b_relFeats", "=", "b_relFeats", ".", "view", "(", "b_relFeats", ".", "size", "(", "0", ")", ",", "b_relFeats", ".", "size", "(", "1", ")", ")", "#flatten", "\n", "#these are the visual features", "\n", "\n", "", "if", "self", ".", "useShapeFeats", ":", "\n", "                ", "if", "self", ".", "useShapeFeats", "==", "'only'", "or", "self", ".", "useShapeFeats", "==", "'only for edge'", ":", "\n", "                    ", "b_relFeats", "=", "shapeFeats", ".", "to", "(", "features", ".", "device", ")", "\n", "", "else", ":", "\n", "#Append the spatial features", "\n", "                    ", "b_relFeats", "=", "torch", ".", "cat", "(", "(", "b_relFeats", ",", "shapeFeats", ".", "to", "(", "features", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "assert", "(", "not", "torch", ".", "isnan", "(", "b_relFeats", ")", ".", "any", "(", ")", ")", "\n", "relFeats", ".", "append", "(", "b_relFeats", ")", "#append", "\n", "\n", "#end batching loop", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "", "relFeats", "=", "torch", ".", "cat", "(", "relFeats", ",", "dim", "=", "0", ")", "\n", "stackedEdgeFeatWindows", "=", "None", "\n", "stackedEdgeFeatWindows2", "=", "None", "\n", "b_relFeats", "=", "None", "\n", "\n", "if", "self", ".", "relFeaturizerFC", "is", "not", "None", ":", "#not used by FUDGE", "\n", "            ", "relFeats", "=", "self", ".", "relFeaturizerFC", "(", "relFeats", ")", "\n", "", "return", "relFeats", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.computeNodeVisualFeatures": [[1630, 1770], ["features.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tlX.cpu.cpu.cpu", "tlY.cpu.cpu.cpu", "brX.cpu.cpu.cpu", "brY.cpu.cpu.cpu", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.IntTensor().permute", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "range", "fudge.FUDGE.roi_alignBB", "fudge.FUDGE.bbFeaturizerConv", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fudge.FUDGE.bbFeaturizerFC", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "len", "len", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "len", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "fudge.FUDGE.roi_alignBB2", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "type", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "fudge.combineShapeFeatsTensor", "skimage.draw.polygon", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fudge.FUDGE.bbFeaturizerConv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "fudge.groupRect", "round", "round", "round", "round", "round", "round", "round", "round", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "round", "round", "h_m[].item", "h_m[].item", "h_m[].item", "h_m[].item", "w_m[].item", "w_m[].item", "w_m[].item", "w_m[].item", "rois[].item", "round", "rois[].item", "round", "tlY[].item", "rois[].item", "trY[].item", "rois[].item", "brY[].item", "rois[].item", "blY[].item", "rois[].item", "tlX[].item", "rois[].item", "trX[].item", "rois[].item", "brX[].item", "rois[].item", "blX[].item", "rois[].item", "rois[].item", "rois[].item"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.combineShapeFeatsTensor", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.groupRect"], ["", "def", "computeNodeVisualFeatures", "(", "self", ",", "\n", "features", ",", "#features from detector network", "\n", "features2", ",", "#other layer", "\n", "imageHeight", ",", "\n", "imageWidth", ",", "\n", "bbs", ",", "#BBs", "\n", "groups", ",", "#these define the nodes, bb indexes", "\n", "text_emb", ",", "#nope", "\n", "allMasks", ",", "#precomputed mask for each bb", "\n", ")", ":", "\n", "\n", "        ", "if", "self", ".", "useBBVisualFeats", ":", "\n", "            ", "assert", "(", "features", ".", "size", "(", "0", ")", "==", "1", ")", "\n", "if", "self", ".", "useShapeFeats", ":", "\n", "                ", "node_shapeFeats", "=", "torch", ".", "FloatTensor", "(", "len", "(", "groups", ")", ",", "self", ".", "numShapeFeatsBB", ")", "\n", "", "if", "self", ".", "useShapeFeats", "!=", "\"only\"", "and", "self", ".", "expandedBBContext", ":", "\n", "                ", "masks", "=", "torch", ".", "zeros", "(", "len", "(", "groups", ")", ",", "2", ",", "self", ".", "poolBB2_h", ",", "self", ".", "poolBB2_w", ")", "\n", "\n", "", "if", "self", ".", "useShapeFeats", "!=", "\"only\"", ":", "\n", "#Get the ROI rectangles surrounding each group/node", "\n", "                ", "rois", "=", "torch", ".", "zeros", "(", "(", "len", "(", "groups", ")", ",", "5", ")", ")", "\n", "assert", "(", "not", "self", ".", "rotation", ")", "\n", "x", "=", "bbs", "[", ":", ",", "1", "]", "\n", "y", "=", "bbs", "[", ":", ",", "2", "]", "\n", "h", "=", "bbs", "[", ":", ",", "3", "]", "\n", "w", "=", "bbs", "[", ":", ",", "4", "]", "\n", "tlX", "=", "-", "w", "+", "x", "\n", "tlY", "=", "-", "h", "+", "y", "\n", "brX", "=", "w", "+", "x", "\n", "brY", "=", "h", "+", "y", "\n", "\n", "tlX", "=", "blX", "=", "tlX", ".", "cpu", "(", ")", "\n", "tlY", "=", "trY", "=", "tlY", ".", "cpu", "(", ")", "\n", "brX", "=", "trX", "=", "brX", ".", "cpu", "(", ")", "\n", "brY", "=", "blY", "=", "brY", ".", "cpu", "(", ")", "\n", "min_X", ",", "min_Y", ",", "max_X", ",", "max_Y", "=", "torch", ".", "IntTensor", "(", "[", "\n", "groupRect", "(", "[", "[", "tlX", "[", "b", "]", ",", "tlY", "[", "b", "]", ",", "brX", "[", "b", "]", ",", "brY", "[", "b", "]", "]", "for", "b", "in", "group", "]", ")", "\n", "for", "group", "in", "groups", "]", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "\n", "if", "self", ".", "expandedBBContext", "is", "not", "None", ":", "\n", "                    ", "if", "type", "(", "self", ".", "expandedBBContext", ")", "is", "list", ":", "\n", "                        ", "padY", ",", "padX", "=", "self", ".", "expandedBBContext", "\n", "", "else", ":", "\n", "                        ", "padY", "=", "padX", "=", "self", ".", "expandedBBContext", "\n", "#pad and clip to images size", "\n", "", "max_X", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "max_X", "+", "padX", ",", "torch", ".", "IntTensor", "(", "[", "imageWidth", "-", "1", "]", ")", ")", ",", "torch", ".", "IntTensor", "(", "[", "1", "]", ")", ")", "\n", "min_X", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "min_X", "-", "padX", ",", "torch", ".", "IntTensor", "(", "[", "imageWidth", "-", "2", "]", ")", ")", ",", "torch", ".", "IntTensor", "(", "[", "0", "]", ")", ")", "\n", "max_Y", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "max_Y", "+", "padY", ",", "torch", ".", "IntTensor", "(", "[", "imageHeight", "-", "1", "]", ")", ")", ",", "torch", ".", "IntTensor", "(", "[", "1", "]", ")", ")", "\n", "min_Y", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "min_Y", "-", "padY", ",", "torch", ".", "IntTensor", "(", "[", "imageHeight", "-", "2", "]", ")", ")", ",", "torch", ".", "IntTensor", "(", "[", "0", "]", ")", ")", "\n", "", "rois", "[", ":", ",", "1", "]", "=", "min_X", "\n", "rois", "[", ":", ",", "2", "]", "=", "min_Y", "\n", "rois", "[", ":", ",", "3", "]", "=", "max_X", "\n", "rois", "[", ":", ",", "4", "]", "=", "max_Y", "\n", "\n", "", "if", "self", ".", "useShapeFeats", ":", "\n", "#the spatial features for the GCN", "\n", "                ", "allFeats", "=", "torch", ".", "stack", "(", "[", "combineShapeFeatsTensor", "(", "[", "bbs", "[", "bb_id", "]", "for", "bb_id", "in", "group", "]", ")", "for", "group", "in", "groups", "]", ",", "dim", "=", "0", ")", "\n", "allFeats", "=", "allFeats", "[", ":", ",", "1", ":", "]", "\n", "node_shapeFeats", "[", ":", ",", "0", "]", "=", "(", "allFeats", "[", ":", ",", "2", "]", "+", "math", ".", "pi", ")", "/", "(", "2", "*", "math", ".", "pi", ")", "#rotation (always 0 for FUDGE)", "\n", "node_shapeFeats", "[", ":", ",", "1", "]", "=", "allFeats", "[", ":", ",", "3", "]", "/", "self", ".", "normalizeVert", "#height", "\n", "node_shapeFeats", "[", ":", ",", "2", "]", "=", "allFeats", "[", ":", ",", "4", "]", "/", "self", ".", "normalizeHorz", "#width", "\n", "node_shapeFeats", "[", ":", ",", "3", ":", "self", ".", "numBBTypes", "+", "3", "]", "=", "torch", ".", "sigmoid", "(", "allFeats", "[", ":", ",", "-", "self", ".", "numBBTypes", ":", "]", ")", "#classes", "\n", "if", "self", ".", "usePositionFeature", ":", "#not used in FUDGE", "\n", "                    ", "if", "self", ".", "usePositionFeature", "==", "'absolute'", ":", "\n", "                        ", "node_shapeFeats", "[", ":", ",", "self", ".", "numBBTypes", "+", "3", "]", "=", "(", "allFeats", "[", ":", ",", "0", "]", "-", "imageWidth", "/", "2", ")", "/", "(", "5", "*", "self", ".", "normalizeHorz", ")", "\n", "node_shapeFeats", "[", ":", ",", "self", ".", "numBBTypes", "+", "4", "]", "=", "(", "allFeats", "[", ":", ",", "1", "]", "-", "imageHeight", "/", "2", ")", "/", "(", "10", "*", "self", ".", "normalizeVert", ")", "\n", "", "else", ":", "\n", "                        ", "node_shapeFeats", "[", ":", ",", "self", ".", "numBBTypes", "+", "3", "]", "=", "(", "allFeats", "[", ":", ",", "0", "]", "-", "imageWidth", "/", "2", ")", "/", "(", "imageWidth", "/", "2", ")", "\n", "node_shapeFeats", "[", ":", ",", "self", ".", "numBBTypes", "+", "4", "]", "=", "(", "allFeats", "[", ":", ",", "1", "]", "-", "imageHeight", "/", "2", ")", "/", "(", "imageHeight", "/", "2", ")", "\n", "", "", "", "if", "self", ".", "useShapeFeats", "!=", "\"only\"", "and", "self", ".", "expandedBBContext", ":", "\n", "#warp to roi space", "\n", "                ", "feature_w", "=", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", "+", "1", "\n", "feature_h", "=", "rois", "[", ":", ",", "4", "]", "-", "rois", "[", ":", ",", "2", "]", "+", "1", "\n", "w_m", "=", "self", ".", "poolBB2_w", "/", "feature_w", "\n", "h_m", "=", "self", ".", "poolBB2_h", "/", "feature_h", "\n", "\n", "\n", "#Add mask for BBs in group", "\n", "for", "i", "in", "range", "(", "len", "(", "groups", ")", ")", ":", "\n", "                    ", "for", "bb_id", "in", "groups", "[", "i", "]", ":", "\n", "                        ", "rr", ",", "cc", "=", "draw", ".", "polygon", "(", "\n", "[", "round", "(", "(", "tlY", "[", "bb_id", "]", ".", "item", "(", ")", "-", "rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", "*", "h_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "trY", "[", "bb_id", "]", ".", "item", "(", ")", "-", "rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", "*", "h_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "brY", "[", "bb_id", "]", ".", "item", "(", ")", "-", "rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", "*", "h_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "blY", "[", "bb_id", "]", ".", "item", "(", ")", "-", "rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", "*", "h_m", "[", "i", "]", ".", "item", "(", ")", ")", "]", ",", "\n", "[", "round", "(", "(", "tlX", "[", "bb_id", "]", ".", "item", "(", ")", "-", "rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "*", "w_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "trX", "[", "bb_id", "]", ".", "item", "(", ")", "-", "rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "*", "w_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "brX", "[", "bb_id", "]", ".", "item", "(", ")", "-", "rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "*", "w_m", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "round", "(", "(", "blX", "[", "bb_id", "]", ".", "item", "(", ")", "-", "rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", "*", "w_m", "[", "i", "]", ".", "item", "(", ")", ")", "]", ",", "\n", "[", "self", ".", "poolBB2_h", ",", "self", ".", "poolBB2_w", "]", ")", "\n", "", "masks", "[", "i", ",", "0", ",", "rr", ",", "cc", "]", "=", "1", "\n", "if", "self", ".", "expandedBBContext", "is", "not", "None", ":", "\n", "#crop and resize all-bbs mask", "\n", "                        ", "cropArea", "=", "allMasks", "[", "round", "(", "rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", ":", "round", "(", "rois", "[", "i", ",", "4", "]", ".", "item", "(", ")", ")", "+", "1", ",", "round", "(", "rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", ":", "round", "(", "rois", "[", "i", ",", "3", "]", ".", "item", "(", ")", ")", "+", "1", "]", "\n", "masks", "[", "i", ",", "1", "]", "=", "F", ".", "interpolate", "(", "cropArea", "[", "None", ",", "None", ",", "...", "]", ",", "size", "=", "(", "self", ".", "poolBB2_h", ",", "self", ".", "poolBB2_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "0", ",", "0", "]", "\n", "\n", "", "", "", "if", "self", ".", "useShapeFeats", "!=", "\"only\"", ":", "\n", "#Do ROIAlign (we don't need to batch nodes like edges becuase there's far fewer and they're smaller)", "\n", "                ", "node_features", "=", "self", ".", "roi_alignBB", "(", "features", ",", "rois", ".", "to", "(", "features", ".", "device", ")", ")", "\n", "\n", "assert", "(", "not", "torch", ".", "isnan", "(", "node_features", ")", ".", "any", "(", ")", ")", "\n", "if", "features2", "is", "not", "None", ":", "\n", "                    ", "node_features2", "=", "self", ".", "roi_alignBB2", "(", "features2", ",", "rois", ".", "to", "(", "features", ".", "device", ")", ")", "\n", "if", "not", "self", ".", "splitFeatures", ":", "\n", "#FUDGE cats them", "\n", "                        ", "node_features", "=", "torch", ".", "cat", "(", "(", "node_features", ",", "node_features2", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "if", "self", ".", "expandedBBContext", ":", "\n", "                    ", "if", "self", ".", "splitFeatures", ":", "#FUDGE doesn't split", "\n", "                        ", "node_features2", "=", "torch", ".", "cat", "(", "(", "node_features2", ",", "masks", ".", "to", "(", "node_features2", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "node_features2", "=", "self", ".", "bbFeaturizerConv2", "(", "node_features2", ")", "\n", "node_features", "=", "torch", ".", "cat", "(", "(", "node_features", ",", "node_features2", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "#Append the masks", "\n", "                        ", "node_features", "=", "torch", ".", "cat", "(", "(", "node_features", ",", "masks", ".", "to", "(", "node_features", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "node_features", "=", "self", ".", "bbFeaturizerConv", "(", "node_features", ")", "#run CNN!", "\n", "node_features", "=", "node_features", ".", "view", "(", "node_features", ".", "size", "(", "0", ")", ",", "node_features", ".", "size", "(", "1", ")", ")", "#flatten", "\n", "#visual features for nodes", "\n", "\n", "if", "self", ".", "useShapeFeats", ":", "\n", "#append the spatial features", "\n", "                    ", "node_features", "=", "torch", ".", "cat", "(", "(", "node_features", ",", "node_shapeFeats", ".", "to", "(", "node_features", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "#These are the final node features for the GCN (before transition layer)", "\n", "", "", "else", ":", "\n", "                ", "assert", "(", "self", ".", "useShapeFeats", ")", "\n", "node_features", "=", "node_shapeFeats", ".", "to", "(", "features", ".", "device", ")", "\n", "\n", "", "if", "text_emb", "is", "not", "None", ":", "#nope", "\n", "                ", "node_features", "=", "torch", ".", "cat", "(", "(", "node_features", ",", "text_emb", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "bbFeaturizerFC", "is", "not", "None", ":", "#not used by FUDGE", "\n", "                ", "node_features", "=", "self", ".", "bbFeaturizerFC", "(", "node_features", ")", "#if uncommented, change rot on node_shapeFeats, maybe not", "\n", "", "assert", "(", "not", "torch", ".", "isnan", "(", "node_features", ")", ".", "any", "(", ")", ")", "\n", "", "elif", "text_emb", "is", "not", "None", ":", "\n", "            ", "node_features", "=", "text_emb", "\n", "", "else", ":", "\n", "            ", "node_features", "=", "None", "\n", "\n", "", "return", "node_features", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.selectFeatureNNEdges": [[1774, 1996], ["classFeat.size", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "fudge.FUDGE.selectLineOfSightEdges", "conf[].expand", "conf[].expand", "x[].expand", "x[].expand", "y[].expand", "y[].expand", "r[].expand", "r[].expand", "h[].expand", "h[].expand", "w[].expand", "w[].expand", "classFeat[].expand", "classFeat[].expand", "cos_r[].expand", "cos_r[].expand", "sin_r[].expand", "sin_r[].expand", "tlX[].expand", "tlX[].expand", "tlY[].expand", "tlY[].expand", "trX[].expand", "trX[].expand", "trY[].expand", "trY[].expand", "brX[].expand", "brX[].expand", "brY[].expand", "brY[].expand", "blX[].expand", "blX[].expand", "blY[].expand", "blY[].expand", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "features[].zero_", "features.view.view.view", "fudge.FUDGE.rel_prop_nn", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "torch.triu_indices", "torch.triu_indices", "torch.triu_indices", "torch.triu_indices", "torch.triu_indices", "torch.triu_indices", "torch.triu_indices", "torch.triu_indices", "torch.triu_indices", "list", "len", "conf.size", "conf.size", "x.size", "x.size", "y.size", "y.size", "r.size", "r.size", "h.size", "h.size", "w.size", "w.size", "classFeat.size", "classFeat.size", "torch.cos.size", "torch.cos.size", "torch.cos.size", "torch.cos.size", "torch.cos.size", "torch.cos.size", "torch.sin.size", "torch.sin.size", "torch.sin.size", "torch.sin.size", "torch.sin.size", "torch.sin.size", "tlX.size", "tlX.size", "tlY.size", "tlY.size", "trX.size", "trX.size", "trY.size", "trY.size", "brX.size", "brX.size", "brY.size", "brY.size", "blX.size", "blX.size", "blY.size", "blY.size", "len", "len", "features.view.view.to", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "len", "len", "len", "len", "zip", "list.sort", "math.ceil", "min", "len", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril().permute", "torch.tril().permute", "torch.tril().permute", "torch.tril().permute", "torch.tril().permute", "torch.tril().permute", "torch.tril().permute", "torch.tril().permute", "torch.tril().permute", "torch.triu_indices.tolist", "torch.triu_indices.tolist", "torch.triu_indices.tolist", "torch.triu_indices.permute().tolist", "torch.triu_indices.permute().tolist", "torch.triu_indices.permute().tolist", "torch.sigmoid.cpu().tolist", "torch.sigmoid.cpu().tolist", "torch.sigmoid.cpu().tolist", "list.sort", "len", "len", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.triu_indices.permute", "torch.triu_indices.permute", "torch.triu_indices.permute", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "reduced_emb.size", "reduced_emb.size", "reduced_emb.size"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.selectLineOfSightEdges"], ["", "def", "selectFeatureNNEdges", "(", "self", ",", "bbs", ",", "imageHeight", ",", "imageWidth", ",", "image", ",", "device", ",", "text_emb", "=", "False", ")", ":", "\n", "        ", "if", "len", "(", "bbs", ")", "<", "2", ":", "#if we have only one BB, we don't have any edges", "\n", "            ", "return", "[", "]", ",", "None", "\n", "\n", "#we build the features as the every bb to every bb matrix and flatten       ", "\n", "\n", "#These are the features used:", "\n", "#0: top-left x diff", "\n", "#1: top-right x diff", "\n", "#2: bot-right x diff", "\n", "#3: bot-left x diff", "\n", "#4: center x Diff", "\n", "#5: width bb1", "\n", "#6: width bb2", "\n", "#7: top-left Y Diff", "\n", "#8: top-right Y Diff", "\n", "#9: bot-right Y Diff", "\n", "#10: bot-left Y Diff", "\n", "#11: center Y Diff", "\n", "#12: height bb1", "\n", "#13: height bb2", "\n", "#14: top-left to top-left Dist", "\n", "#15: top-right to top-right Dist", "\n", "#16: bot-right to bot-right Dist", "\n", "#17: bot-left to bot-left Dist", "\n", "#18: center to center Dist", "\n", "#19: abs pos X1", "\n", "#20: abs pos Y1", "\n", "#21: abs pos X2", "\n", "#22: abs pos Y2", "\n", "#23: line of sight", "\n", "#24: conf1", "\n", "#25: conf2", "\n", "#26: sin rot bb 1 #the rotation is always 0 (since we don't use it)", "\n", "#27: sin rot bb 2", "\n", "#28: cos rot bb 1", "\n", "#29: cos rot bb 2", "\n", "#30-n: classpred bb1", "\n", "#n-m: classpred bb2", "\n", "\n", "", "conf", "=", "bbs", "[", ":", ",", "0", "]", "\n", "x", "=", "bbs", "[", ":", ",", "1", "]", "\n", "y", "=", "bbs", "[", ":", ",", "2", "]", "\n", "r", "=", "bbs", "[", ":", ",", "3", "]", "\n", "h", "=", "bbs", "[", ":", ",", "4", "]", "\n", "w", "=", "bbs", "[", ":", ",", "5", "]", "\n", "classFeat", "=", "bbs", "[", ":", ",", "6", ":", "]", "#this is meant to capture num neighbor pred", "\n", "numClassFeat", "=", "classFeat", ".", "size", "(", "1", ")", "\n", "cos_r", "=", "torch", ".", "cos", "(", "r", ")", "\n", "sin_r", "=", "torch", ".", "sin", "(", "r", ")", "\n", "#get corners", "\n", "tlX", "=", "-", "w", "*", "cos_r", "+", "-", "h", "*", "sin_r", "+", "x", "\n", "tlY", "=", "w", "*", "sin_r", "+", "-", "h", "*", "cos_r", "+", "y", "\n", "trX", "=", "w", "*", "cos_r", "+", "-", "h", "*", "sin_r", "+", "x", "\n", "trY", "=", "-", "w", "*", "sin_r", "+", "-", "h", "*", "cos_r", "+", "y", "\n", "brX", "=", "w", "*", "cos_r", "+", "h", "*", "sin_r", "+", "x", "\n", "brY", "=", "-", "w", "*", "sin_r", "+", "h", "*", "cos_r", "+", "y", "\n", "blX", "=", "-", "w", "*", "cos_r", "+", "h", "*", "sin_r", "+", "x", "\n", "blY", "=", "w", "*", "sin_r", "+", "h", "*", "cos_r", "+", "y", "\n", "\n", "#all line-of-sights", "\n", "line_of_sight", "=", "self", ".", "selectLineOfSightEdges", "(", "bbs", ",", "imageHeight", ",", "imageWidth", ",", "return_all", "=", "True", ")", "\n", "\n", "\n", "conf1", "=", "conf", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "conf", ".", "size", "(", "0", ")", ")", "\n", "conf2", "=", "conf", "[", "None", ",", ":", "]", ".", "expand", "(", "conf", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x1", "=", "x", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "x", ".", "size", "(", "0", ")", ")", "\n", "x2", "=", "x", "[", "None", ",", ":", "]", ".", "expand", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y1", "=", "y", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "y2", "=", "y", "[", "None", ",", ":", "]", ".", "expand", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "r1", "=", "r", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "r", ".", "size", "(", "0", ")", ")", "\n", "r2", "=", "r", "[", "None", ",", ":", "]", ".", "expand", "(", "r", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "h1", "=", "h", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "h", ".", "size", "(", "0", ")", ")", "\n", "h2", "=", "h", "[", "None", ",", ":", "]", ".", "expand", "(", "h", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "w1", "=", "w", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "w", ".", "size", "(", "0", ")", ")", "\n", "w2", "=", "w", "[", "None", ",", ":", "]", ".", "expand", "(", "w", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "classFeat1", "=", "classFeat", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "classFeat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "classFeat2", "=", "classFeat", "[", "None", ",", ":", "]", ".", "expand", "(", "classFeat", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "cos_r1", "=", "cos_r", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "cos_r", ".", "size", "(", "0", ")", ")", "\n", "cos_r2", "=", "cos_r", "[", "None", ",", ":", "]", ".", "expand", "(", "cos_r", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "sin_r1", "=", "sin_r", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "sin_r", ".", "size", "(", "0", ")", ")", "\n", "sin_r2", "=", "sin_r", "[", "None", ",", ":", "]", ".", "expand", "(", "sin_r", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "tlX1", "=", "tlX", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "tlX", ".", "size", "(", "0", ")", ")", "\n", "tlX2", "=", "tlX", "[", "None", ",", ":", "]", ".", "expand", "(", "tlX", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "tlY1", "=", "tlY", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "tlY", ".", "size", "(", "0", ")", ")", "\n", "tlY2", "=", "tlY", "[", "None", ",", ":", "]", ".", "expand", "(", "tlY", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "trX1", "=", "trX", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "trX", ".", "size", "(", "0", ")", ")", "\n", "trX2", "=", "trX", "[", "None", ",", ":", "]", ".", "expand", "(", "trX", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "trY1", "=", "trY", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "trY", ".", "size", "(", "0", ")", ")", "\n", "trY2", "=", "trY", "[", "None", ",", ":", "]", ".", "expand", "(", "trY", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "brX1", "=", "brX", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "brX", ".", "size", "(", "0", ")", ")", "\n", "brX2", "=", "brX", "[", "None", ",", ":", "]", ".", "expand", "(", "brX", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "brY1", "=", "brY", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "brY", ".", "size", "(", "0", ")", ")", "\n", "brY2", "=", "brY", "[", "None", ",", ":", "]", ".", "expand", "(", "brY", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "blX1", "=", "blX", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "blX", ".", "size", "(", "0", ")", ")", "\n", "blX2", "=", "blX", "[", "None", ",", ":", "]", ".", "expand", "(", "blX", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "blY1", "=", "blY", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "blY", ".", "size", "(", "0", ")", ")", "\n", "blY2", "=", "blY", "[", "None", ",", ":", "]", ".", "expand", "(", "blY", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "\n", "num_feats", "=", "30", "+", "numClassFeat", "*", "2", "\n", "\n", "if", "self", ".", "prop_with_text_emb", ":", "\n", "            ", "num_feats", "+=", "2", "*", "self", ".", "numTextFeats", "\n", "\n", "#put the features all in", "\n", "", "features", "=", "torch", ".", "FloatTensor", "(", "len", "(", "bbs", ")", ",", "len", "(", "bbs", ")", ",", "num_feats", ")", "\n", "features", "[", ":", ",", ":", ",", "0", "]", "=", "tlX1", "-", "tlX2", "\n", "features", "[", ":", ",", ":", ",", "1", "]", "=", "trX1", "-", "trX2", "\n", "features", "[", ":", ",", ":", ",", "2", "]", "=", "brX1", "-", "brX2", "\n", "features", "[", ":", ",", ":", ",", "3", "]", "=", "blX1", "-", "blX2", "\n", "features", "[", ":", ",", ":", ",", "4", "]", "=", "x1", "-", "x2", "\n", "features", "[", ":", ",", ":", ",", "5", "]", "=", "w1", "\n", "features", "[", ":", ",", ":", ",", "6", "]", "=", "w2", "\n", "features", "[", ":", ",", ":", ",", "7", "]", "=", "tlY1", "-", "tlY2", "\n", "features", "[", ":", ",", ":", ",", "8", "]", "=", "trY1", "-", "trY2", "\n", "features", "[", ":", ",", ":", ",", "9", "]", "=", "brY1", "-", "brY2", "\n", "features", "[", ":", ",", ":", ",", "10", "]", "=", "blY1", "-", "blY2", "\n", "features", "[", ":", ",", ":", ",", "11", "]", "=", "y1", "-", "y2", "\n", "features", "[", ":", ",", ":", ",", "12", "]", "=", "h1", "\n", "features", "[", ":", ",", ":", ",", "13", "]", "=", "h2", "\n", "features", "[", ":", ",", ":", ",", "14", "]", "=", "torch", ".", "sqrt", "(", "(", "tlY1", "-", "tlY2", ")", "**", "2", "+", "(", "tlX1", "-", "tlX2", ")", "**", "2", ")", "\n", "features", "[", ":", ",", ":", ",", "15", "]", "=", "torch", ".", "sqrt", "(", "(", "trY1", "-", "trY2", ")", "**", "2", "+", "(", "trX1", "-", "trX2", ")", "**", "2", ")", "\n", "features", "[", ":", ",", ":", ",", "16", "]", "=", "torch", ".", "sqrt", "(", "(", "brY1", "-", "brY2", ")", "**", "2", "+", "(", "brX1", "-", "brX2", ")", "**", "2", ")", "\n", "features", "[", ":", ",", ":", ",", "17", "]", "=", "torch", ".", "sqrt", "(", "(", "blY1", "-", "blY2", ")", "**", "2", "+", "(", "blX1", "-", "blX2", ")", "**", "2", ")", "\n", "features", "[", ":", ",", ":", ",", "18", "]", "=", "torch", ".", "sqrt", "(", "(", "y1", "-", "y2", ")", "**", "2", "+", "(", "x1", "-", "x2", ")", "**", "2", ")", "\n", "features", "[", ":", ",", ":", ",", "19", "]", "=", "x1", "/", "imageWidth", "\n", "features", "[", ":", ",", ":", ",", "20", "]", "=", "y1", "/", "imageHeight", "\n", "features", "[", ":", ",", ":", ",", "21", "]", "=", "x2", "/", "imageWidth", "\n", "features", "[", ":", ",", ":", ",", "22", "]", "=", "y2", "/", "imageHeight", "\n", "#features[:,:,23] = 1 if (index1,index2) in line_of_sight else 0", "\n", "features", "[", ":", ",", ":", ",", "23", "]", ".", "zero_", "(", ")", "\n", "for", "index1", ",", "index2", "in", "line_of_sight", ":", "\n", "            ", "features", "[", "index1", ",", "index2", ",", "23", "]", "=", "1", "\n", "features", "[", "index2", ",", "index1", ",", "23", "]", "=", "1", "\n", "", "features", "[", ":", ",", ":", ",", "24", "]", "=", "conf1", "\n", "features", "[", ":", ",", ":", ",", "25", "]", "=", "conf2", "\n", "features", "[", ":", ",", ":", ",", "26", "]", "=", "sin_r1", "\n", "features", "[", ":", ",", ":", ",", "27", "]", "=", "sin_r2", "\n", "features", "[", ":", ",", ":", ",", "28", "]", "=", "cos_r1", "\n", "features", "[", ":", ",", ":", ",", "29", "]", "=", "cos_r2", "\n", "features", "[", ":", ",", ":", ",", "30", ":", "30", "+", "numClassFeat", "]", "=", "classFeat1", "\n", "features", "[", ":", ",", ":", ",", "30", "+", "numClassFeat", ":", "30", "+", "2", "*", "numClassFeat", "]", "=", "classFeat2", "\n", "\n", "\n", "#normalize distance features", "\n", "features", "[", ":", ",", ":", ",", "0", ":", "7", "]", "/=", "self", ".", "normalizeHorz", "\n", "features", "[", ":", ",", ":", ",", "7", ":", "14", "]", "/=", "self", ".", "normalizeVert", "\n", "features", "[", ":", ",", ":", ",", "14", ":", "19", "]", "/=", "(", "self", ".", "normalizeVert", "+", "self", ".", "normalizeHorz", ")", "/", "2", "\n", "\n", "if", "self", ".", "prop_with_text_emb", ":", "#nope", "\n", "            ", "reduced_emb", "=", "text_emb", "\n", "\n", "features", "[", ":", ",", ":", ",", "-", "2", "*", "reduced_emb", ".", "size", "(", "1", ")", ":", "-", "reduced_emb", ".", "size", "(", "1", ")", "]", "=", "reduced_emb", "[", "None", ",", ":", ",", ":", "]", "\n", "features", "[", ":", ",", ":", ",", "-", "reduced_emb", ".", "size", "(", "1", ")", ":", "]", "=", "reduced_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "", "features", "=", "features", ".", "view", "(", "len", "(", "bbs", ")", "**", "2", ",", "num_feats", ")", "#flatten", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "#run through MLP", "\n", "rel_pred", "=", "self", ".", "rel_prop_nn", "(", "features", ".", "to", "(", "device", ")", ")", "\n", "\n", "if", "self", ".", "rel_hard_thresh", "is", "not", "None", ":", "\n", "            ", "rel_pred", "=", "torch", ".", "sigmoid", "(", "rel_pred", ")", "\n", "\n", "\n", "", "rel_pred2d", "=", "rel_pred", ".", "view", "(", "len", "(", "bbs", ")", ",", "len", "(", "bbs", ")", ")", "#unflatten", "\n", "rel_pred2d_comb", "=", "(", "torch", ".", "triu", "(", "rel_pred2d", ",", "diagonal", "=", "1", ")", "+", "torch", ".", "tril", "(", "rel_pred2d", ",", "diagonal", "=", "-", "1", ")", ".", "permute", "(", "1", ",", "0", ")", ")", "/", "2", "#average the two permutations (x,y)+(y,x)", "\n", "\n", "#get the coordinates", "\n", "rel_coords", "=", "torch", ".", "triu_indices", "(", "len", "(", "bbs", ")", ",", "len", "(", "bbs", ")", ",", "offset", "=", "1", ")", "\n", "rel_pred", "=", "rel_pred2d_comb", "[", "rel_coords", ".", "tolist", "(", ")", "]", "\n", "#I need to convert to tuples so that later \"(x,y) in rels\" works", "\n", "rel_coords", "=", "[", "(", "i", ",", "j", ")", "for", "i", ",", "j", "in", "rel_coords", ".", "permute", "(", "1", ",", "0", ")", ".", "tolist", "(", ")", "]", "\n", "rels_ordered", "=", "list", "(", "zip", "(", "rel_pred", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ",", "rel_coords", ")", ")", "\n", "\n", "\n", "rel_hard_thresh", "=", "self", ".", "rel_hard_thresh", "\n", "\n", "\n", "if", "rel_hard_thresh", "is", "not", "None", ":", "\n", "#we don't do this", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "rels_ordered", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "", "keep_rels", "=", "[", "r", "[", "1", "]", "for", "r", "in", "rels_ordered", "if", "r", "[", "0", "]", ">", "rel_hard_thresh", "]", "\n", "max_rel_to_keep", "=", "self", ".", "max_rel_to_keep", "\n", "if", "self", ".", "training", ":", "\n", "                ", "max_rel_to_keep", "*=", "4", "\n", "", "keep_rels", "=", "keep_rels", "[", ":", "max_rel_to_keep", "]", "\n", "implicit_threshold", "=", "rel_hard_thresh", "\n", "", "else", ":", "\n", "#Sort by predicted score", "\n", "            ", "rels_ordered", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "#get the best x%", "\n", "keep", "=", "math", ".", "ceil", "(", "self", ".", "percent_rel_to_keep", "*", "len", "(", "rels_ordered", ")", ")", "\n", "\n", "max_rel_to_keep", "=", "self", ".", "max_rel_to_keep", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "                ", "max_rel_to_keep", "*=", "3", "\n", "", "keep", "=", "min", "(", "keep", ",", "max_rel_to_keep", ")", "\n", "\n", "#trim to max limit", "\n", "keep_rels", "=", "[", "r", "[", "1", "]", "for", "r", "in", "rels_ordered", "[", ":", "keep", "]", "]", "\n", "\n", "#just for record keeping", "\n", "if", "keep", "<", "len", "(", "rels_ordered", ")", ":", "\n", "                ", "implicit_threshold", "=", "rels_ordered", "[", "keep", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "implicit_threshold", "=", "rels_ordered", "[", "-", "1", "]", "[", "0", "]", "-", "0.1", "#We're taking everything", "\n", "\n", "\n", "\n", "", "", "return", "keep_rels", ",", "(", "rel_pred", ",", "rel_coords", ",", "implicit_threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.selectLineOfSightEdges": [[2000, 2224], ["torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "min", "min", "max", "max", "min", "min", "min", "min", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "print", "bbs.size", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "max", "max", "max", "max", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.zeros", "bbs.size", "range", "set", "range", "list", "min.item", "min.item", "min.item", "min.item", "skimage.draw.polygon_perimeter", "set", "range", "set", "fudge.FUDGE.selectLineOfSightEdges.fan"], "methods", ["None"], ["", "def", "selectLineOfSightEdges", "(", "self", ",", "bbs", ",", "\n", "imageHeight", ",", "\n", "imageWidth", ",", "\n", "return_all", "=", "False", "#when using this as the proposal, we shorten the max distance to trim the nuber of edges down to a maximum amount. FUDGE just gets all since they're a feature", "\n", ")", ":", "\n", "        ", "if", "bbs", ".", "size", "(", "0", ")", "<", "2", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "bbs", "=", "bbs", "[", ":", ",", "1", ":", "]", "#remove conf as we won't use it", "\n", "\n", "\n", "#set up getting corners, etc", "\n", "sin_r", "=", "torch", ".", "sin", "(", "bbs", "[", ":", ",", "2", "]", ")", "\n", "cos_r", "=", "torch", ".", "cos", "(", "bbs", "[", ":", ",", "2", "]", ")", "\n", "brX", "=", "bbs", "[", ":", ",", "4", "]", "*", "cos_r", "-", "bbs", "[", ":", ",", "3", "]", "*", "sin_r", "+", "bbs", "[", ":", ",", "0", "]", "\n", "brY", "=", "bbs", "[", ":", ",", "4", "]", "*", "sin_r", "+", "bbs", "[", ":", ",", "3", "]", "*", "cos_r", "+", "bbs", "[", ":", ",", "1", "]", "\n", "blX", "=", "-", "bbs", "[", ":", ",", "4", "]", "*", "cos_r", "-", "bbs", "[", ":", ",", "3", "]", "*", "sin_r", "+", "bbs", "[", ":", ",", "0", "]", "\n", "blY", "=", "-", "bbs", "[", ":", ",", "4", "]", "*", "sin_r", "+", "bbs", "[", ":", ",", "3", "]", "*", "cos_r", "+", "bbs", "[", ":", ",", "1", "]", "\n", "trX", "=", "bbs", "[", ":", ",", "4", "]", "*", "cos_r", "+", "bbs", "[", ":", ",", "3", "]", "*", "sin_r", "+", "bbs", "[", ":", ",", "0", "]", "\n", "trY", "=", "bbs", "[", ":", ",", "4", "]", "*", "sin_r", "-", "bbs", "[", ":", ",", "3", "]", "*", "cos_r", "+", "bbs", "[", ":", ",", "1", "]", "\n", "tlX", "=", "-", "bbs", "[", ":", ",", "4", "]", "*", "cos_r", "+", "bbs", "[", ":", ",", "3", "]", "*", "sin_r", "+", "bbs", "[", ":", ",", "0", "]", "\n", "tlY", "=", "-", "bbs", "[", ":", ",", "4", "]", "*", "sin_r", "-", "bbs", "[", ":", ",", "3", "]", "*", "cos_r", "+", "bbs", "[", ":", ",", "1", "]", "\n", "\n", "minX", "=", "min", "(", "torch", ".", "min", "(", "trX", ")", ",", "torch", ".", "min", "(", "tlX", ")", ",", "torch", ".", "min", "(", "blX", ")", ",", "torch", ".", "min", "(", "brX", ")", ")", "\n", "minY", "=", "min", "(", "torch", ".", "min", "(", "trY", ")", ",", "torch", ".", "min", "(", "tlY", ")", ",", "torch", ".", "min", "(", "blY", ")", ",", "torch", ".", "min", "(", "brY", ")", ")", "\n", "maxX", "=", "max", "(", "torch", ".", "max", "(", "trX", ")", ",", "torch", ".", "max", "(", "tlX", ")", ",", "torch", ".", "max", "(", "blX", ")", ",", "torch", ".", "max", "(", "brX", ")", ")", "\n", "maxY", "=", "max", "(", "torch", ".", "max", "(", "trY", ")", ",", "torch", ".", "max", "(", "tlY", ")", ",", "torch", ".", "max", "(", "blY", ")", ",", "torch", ".", "max", "(", "brY", ")", ")", "\n", "\n", "minX", "=", "min", "(", "max", "(", "minX", ".", "item", "(", ")", ",", "0", ")", ",", "imageWidth", ")", "\n", "minY", "=", "min", "(", "max", "(", "minY", ".", "item", "(", ")", ",", "0", ")", ",", "imageHeight", ")", "\n", "maxX", "=", "min", "(", "max", "(", "maxX", ".", "item", "(", ")", ",", "0", ")", ",", "imageWidth", ")", "\n", "maxY", "=", "min", "(", "max", "(", "maxY", ".", "item", "(", ")", ",", "0", ")", ",", "imageHeight", ")", "\n", "if", "minX", ">=", "maxX", "or", "minY", ">=", "maxY", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "zeros", "=", "torch", ".", "zeros_like", "(", "trX", ")", "\n", "tImageWidth", "=", "torch", ".", "ones_like", "(", "trX", ")", "*", "imageWidth", "\n", "tImageHeight", "=", "torch", ".", "ones_like", "(", "trX", ")", "*", "imageHeight", "\n", "trX", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "trX", ",", "zeros", ")", ",", "tImageWidth", ")", "\n", "trY", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "trY", ",", "zeros", ")", ",", "tImageHeight", ")", "\n", "tlX", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "tlX", ",", "zeros", ")", ",", "tImageWidth", ")", "\n", "tlY", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "tlY", ",", "zeros", ")", ",", "tImageHeight", ")", "\n", "brX", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "brX", ",", "zeros", ")", ",", "tImageWidth", ")", "\n", "brY", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "brY", ",", "zeros", ")", ",", "tImageHeight", ")", "\n", "blX", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "blX", ",", "zeros", ")", ",", "tImageWidth", ")", "\n", "blY", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "blY", ",", "zeros", ")", ",", "tImageHeight", ")", "\n", "trX", "-=", "minX", "\n", "trY", "-=", "minY", "\n", "tlX", "-=", "minX", "\n", "tlY", "-=", "minY", "\n", "brX", "-=", "minX", "\n", "brY", "-=", "minY", "\n", "blX", "-=", "minX", "\n", "blY", "-=", "minY", "\n", "\n", "\n", "\n", "#we'll be plotting pixels, so scale everything down", "\n", "scaleCand", "=", "0.5", "\n", "minX", "*=", "scaleCand", "\n", "minY", "*=", "scaleCand", "\n", "maxX", "*=", "scaleCand", "\n", "maxY", "*=", "scaleCand", "\n", "trX", "*=", "scaleCand", "\n", "trY", "*=", "scaleCand", "\n", "tlX", "*=", "scaleCand", "\n", "tlY", "*=", "scaleCand", "\n", "brX", "*=", "scaleCand", "\n", "brY", "*=", "scaleCand", "\n", "blX", "*=", "scaleCand", "\n", "blY", "*=", "scaleCand", "\n", "h", "=", "bbs", "[", ":", ",", "3", "]", "*", "scaleCand", "\n", "w", "=", "bbs", "[", ":", ",", "4", "]", "*", "scaleCand", "\n", "r", "=", "bbs", "[", ":", ",", "2", "]", "\n", "\n", "distMul", "=", "1.0", "#this multiplier is how the max distance is shortened", "\n", "while", "distMul", ">", "0.03", ":", "#we'll repeatedly shorten until we have few enough", "\n", "\n", "            ", "boxesDrawn", "=", "np", ".", "zeros", "(", "(", "math", ".", "ceil", "(", "maxY", "-", "minY", ")", ",", "math", ".", "ceil", "(", "maxX", "-", "minX", ")", ")", ",", "dtype", "=", "int", ")", "\n", "if", "boxesDrawn", ".", "shape", "[", "0", "]", "==", "0", "or", "boxesDrawn", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "                ", "return", "[", "]", "\n", "\n", "", "numBoxes", "=", "bbs", ".", "size", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "numBoxes", ")", ":", "\n", "\n", "\n", "#These are to catch the wierd case of a (clipped) bb having 0 height or width", "\n", "#we just add a bit, this shouldn't greatly effect the heuristic pairing", "\n", "                ", "if", "int", "(", "tlY", "[", "i", "]", ")", "==", "int", "(", "trY", "[", "i", "]", ")", "and", "int", "(", "tlY", "[", "i", "]", ")", "==", "int", "(", "brY", "[", "i", "]", ")", "and", "int", "(", "tlY", "[", "i", "]", ")", "==", "int", "(", "blY", "[", "i", "]", ")", ":", "\n", "                    ", "if", "int", "(", "tlY", "[", "i", "]", ")", "<", "2", ":", "\n", "                        ", "blY", "[", "i", "]", "+=", "1.1", "\n", "brY", "[", "i", "]", "+=", "1.1", "\n", "", "else", ":", "\n", "                        ", "tlY", "[", "i", "]", "-=", "1.1", "\n", "trY", "[", "i", "]", "-=", "1.1", "\n", "", "", "if", "int", "(", "tlX", "[", "i", "]", ")", "==", "int", "(", "trX", "[", "i", "]", ")", "and", "int", "(", "tlX", "[", "i", "]", ")", "==", "int", "(", "brX", "[", "i", "]", ")", "and", "int", "(", "tlX", "[", "i", "]", ")", "==", "int", "(", "blX", "[", "i", "]", ")", ":", "\n", "                    ", "if", "int", "(", "tlX", "[", "i", "]", ")", "<", "2", ":", "\n", "                        ", "trX", "[", "i", "]", "+=", "1.1", "\n", "brX", "[", "i", "]", "+=", "1.1", "\n", "", "else", ":", "\n", "                        ", "tlX", "[", "i", "]", "-=", "1.1", "\n", "blX", "[", "i", "]", "-=", "1.1", "\n", "\n", "\n", "", "", "rr", ",", "cc", "=", "draw", ".", "polygon_perimeter", "(", "[", "int", "(", "tlY", "[", "i", "]", ")", ",", "int", "(", "trY", "[", "i", "]", ")", ",", "int", "(", "brY", "[", "i", "]", ")", ",", "int", "(", "blY", "[", "i", "]", ")", "]", ",", "[", "int", "(", "tlX", "[", "i", "]", ")", ",", "int", "(", "trX", "[", "i", "]", ")", ",", "int", "(", "brX", "[", "i", "]", ")", ",", "int", "(", "blX", "[", "i", "]", ")", "]", ",", "boxesDrawn", ".", "shape", ",", "True", ")", "\n", "boxesDrawn", "[", "rr", ",", "cc", "]", "=", "i", "+", "1", "#we put each bbs outline as an ID in the image", "\n", "\n", "#walk until number found.", "\n", "# if in list, end", "\n", "# else add to list, continue", "\n", "#list is candidates", "\n", "", "maxDist", "=", "600", "*", "scaleCand", "*", "distMul", "\n", "maxDistY", "=", "200", "*", "scaleCand", "*", "distMul", "\n", "minWidth", "=", "30", "\n", "minHeight", "=", "20", "\n", "numFan", "=", "5", "\n", "\n", "#This defines how a ray travels", "\n", "def", "pathWalk", "(", "myId", ",", "startX", ",", "startY", ",", "angle", ",", "distStart", "=", "0", ",", "splitDist", "=", "100", ")", ":", "\n", "                ", "hit", "=", "set", "(", ")", "\n", "lineId", "=", "myId", "+", "numBoxes", "\n", "if", "angle", "<", "-", "180", ":", "\n", "                    ", "angle", "+=", "360", "\n", "", "if", "angle", ">", "180", ":", "\n", "                    ", "angle", "-=", "360", "\n", "", "if", "(", "angle", ">", "45", "and", "angle", "<", "135", ")", "or", "(", "angle", ">", "-", "135", "and", "angle", "<", "-", "45", ")", ":", "\n", "#compute slope based on y stepa", "\n", "                    ", "yStep", "=", "-", "1", "\n", "#if angle==90 or angle==-90:", "\n", "\n", "xStep", "=", "1", "/", "math", ".", "tan", "(", "math", ".", "pi", "*", "angle", "/", "180.0", ")", "\n", "", "else", ":", "\n", "#compute slope based on x step", "\n", "                    ", "xStep", "=", "1", "\n", "yStep", "=", "-", "math", ".", "tan", "(", "math", ".", "pi", "*", "angle", "/", "180.0", ")", "\n", "", "if", "angle", ">=", "135", "or", "angle", "<", "-", "45", ":", "\n", "                    ", "xStep", "*=", "-", "1", "\n", "yStep", "*=", "-", "1", "\n", "", "distSoFar", "=", "distStart", "\n", "prev", "=", "0", "\n", "numSteps", "=", "0", "\n", "y", "=", "startY", "\n", "while", "distSoFar", "<", "maxDist", "and", "abs", "(", "y", "-", "startY", ")", "<", "maxDistY", ":", "\n", "                    ", "x", "=", "int", "(", "round", "(", "startX", "+", "numSteps", "*", "xStep", ")", ")", "\n", "y", "=", "int", "(", "round", "(", "startY", "+", "numSteps", "*", "yStep", ")", ")", "\n", "numSteps", "+=", "1", "\n", "if", "x", "<", "0", "or", "y", "<", "0", "or", "x", ">=", "boxesDrawn", ".", "shape", "[", "1", "]", "or", "y", ">=", "boxesDrawn", ".", "shape", "[", "0", "]", ":", "\n", "                        ", "break", "\n", "", "here", "=", "boxesDrawn", "[", "y", ",", "x", "]", "\n", "if", "here", ">", "0", "and", "here", "<=", "numBoxes", "and", "here", "!=", "myId", ":", "\n", "                        ", "if", "here", "in", "hit", "and", "prev", "!=", "here", ":", "\n", "                            ", "break", "\n", "", "else", ":", "\n", "                            ", "hit", ".", "add", "(", "here", ")", "\n", "", "", "else", ":", "\n", "                        ", "boxesDrawn", "[", "y", ",", "x", "]", "=", "lineId", "\n", "", "prev", "=", "here", "\n", "distSoFar", "=", "distStart", "+", "math", ".", "sqrt", "(", "(", "x", "-", "startX", ")", "**", "2", "+", "(", "y", "-", "startY", ")", "**", "2", ")", "\n", "\n", "\n", "", "return", "hit", "\n", "\n", "#send rays out", "\n", "", "def", "fan", "(", "boxId", ",", "x", ",", "y", ",", "angle", ",", "num", ",", "hit", ")", ":", "\n", "                ", "deg", "=", "90", "/", "(", "num", "+", "1", ")", "\n", "curDeg", "=", "angle", "-", "45", "+", "deg", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                    ", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "x", ",", "y", ",", "curDeg", ")", ")", "\n", "curDeg", "+=", "deg", "\n", "\n", "#and go!", "\n", "\n", "", "", "candidates", "=", "set", "(", ")", "\n", "for", "i", "in", "range", "(", "numBoxes", ")", ":", "\n", "                ", "boxId", "=", "i", "+", "1", "\n", "toSplit", "=", "[", "]", "\n", "hit", "=", "set", "(", ")", "\n", "\n", "horzDiv", "=", "1", "+", "math", ".", "ceil", "(", "w", "[", "i", "]", "/", "minWidth", ")", "\n", "vertDiv", "=", "1", "+", "math", ".", "ceil", "(", "h", "[", "i", "]", "/", "minHeight", ")", "\n", "\n", "#went send rays out from each edge", "\n", "if", "horzDiv", "==", "1", ":", "\n", "                    ", "leftW", "=", "0.5", "\n", "rightW", "=", "0.5", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "tlX", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trX", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "tlY", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trY", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "90", ")", ")", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "tlX", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trX", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "tlY", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trY", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "r", "[", "i", "]", ".", "item", "(", ")", "-", "90", ")", ")", "\n", "", "else", ":", "\n", "                    ", "for", "j", "in", "range", "(", "horzDiv", ")", ":", "\n", "                        ", "leftW", "=", "1", "-", "j", "/", "(", "horzDiv", "-", "1", ")", "\n", "rightW", "=", "j", "/", "(", "horzDiv", "-", "1", ")", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "tlX", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trX", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "tlY", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trY", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "90", ")", ")", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "tlX", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trX", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "tlY", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trY", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "r", "[", "i", "]", ".", "item", "(", ")", "-", "90", ")", ")", "\n", "\n", "", "", "if", "vertDiv", "==", "1", ":", "\n", "                    ", "topW", "=", "0.5", "\n", "botW", "=", "0.5", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "tlX", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "blX", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "tlY", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "blY", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "180", ")", ")", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "trX", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "brX", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "trY", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "brY", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "r", "[", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "for", "j", "in", "range", "(", "vertDiv", ")", ":", "\n", "                        ", "topW", "=", "1", "-", "j", "/", "(", "vertDiv", "-", "1", ")", "\n", "botW", "=", "j", "/", "(", "vertDiv", "-", "1", ")", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "tlX", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "blX", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "tlY", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "blY", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "180", ")", ")", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "trX", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "brX", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "trY", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "brY", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "r", "[", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "#we fan rays out from each corner", "\n", "", "", "fan", "(", "boxId", ",", "tlX", "[", "i", "]", ".", "item", "(", ")", ",", "tlY", "[", "i", "]", ".", "item", "(", ")", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "135", ",", "numFan", ",", "hit", ")", "\n", "fan", "(", "boxId", ",", "trX", "[", "i", "]", ".", "item", "(", ")", ",", "trY", "[", "i", "]", ".", "item", "(", ")", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "45", ",", "numFan", ",", "hit", ")", "\n", "fan", "(", "boxId", ",", "blX", "[", "i", "]", ".", "item", "(", ")", ",", "blY", "[", "i", "]", ".", "item", "(", ")", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "225", ",", "numFan", ",", "hit", ")", "\n", "fan", "(", "boxId", ",", "brX", "[", "i", "]", ".", "item", "(", ")", ",", "brY", "[", "i", "]", ".", "item", "(", ")", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "315", ",", "numFan", ",", "hit", ")", "\n", "\n", "for", "jId", "in", "hit", ":", "\n", "                    ", "candidates", ".", "add", "(", "(", "min", "(", "i", ",", "jId", "-", "1", ")", ",", "max", "(", "i", ",", "jId", "-", "1", ")", ")", ")", "\n", "\n", "", "", "if", "(", "len", "(", "candidates", ")", "+", "numBoxes", "<", "MAX_GRAPH_SIZE", "and", "len", "(", "candidates", ")", "<", "MAX_CANDIDATES", ")", "or", "return_all", ":", "\n", "                ", "return", "list", "(", "candidates", ")", "#FUDGE just gets them all", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "useOldDecay", ":", "\n", "                    ", "distMul", "*=", "0.75", "\n", "", "else", ":", "\n", "                    ", "distMul", "=", "distMul", "*", "0.8", "-", "0.05", "\n", "#This is a problem, we couldn't prune down enough", "\n", "", "", "", "print", "(", "\"ERROR: could not prune number of candidates down: {} (should be {})\"", ".", "format", "(", "len", "(", "candidates", ")", ",", "MAX_GRAPH_SIZE", "-", "numBoxes", ")", ")", "\n", "return", "list", "(", "candidates", ")", "[", ":", "MAX_GRAPH_SIZE", "-", "numBoxes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.runGraph": [[2229, 2358], ["fudge.FUDGE.createGraph", "fudge.FUDGE.updateBBs", "allOutputBoxes.append", "allNodeOuts.append", "allEdgeOuts.append", "allGroups.append", "allEdgeIndexes.append", "enumerate", "fudge.FUDGE.mergeAndGroup", "image.size", "image.size", "fudge.FUDGE.cpu", "fudge.FUDGE.mergeAndGroup", "graphnet", "fudge.FUDGE.updateBBs", "allOutputBoxes.append", "allNodeOuts.append", "allEdgeOuts.append", "allGroups.append", "allEdgeIndexes.append", "edgeOuts.detach", "fudge.FUDGE.cpu().detach", "range", "fudge.FUDGE.appendVisualFeatures", "len", "fudge.FUDGE.cpu", "len", "fudge.FUDGE.cpu().detach", "len", "image.size", "image.size", "fudge.FUDGE.cpu", "fudge.FUDGE.cpu", "range", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.createGraph", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.updateBBs", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.mergeAndGroup", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.mergeAndGroup", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.updateBBs", "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.appendVisualFeatures"], ["", "def", "runGraph", "(", "self", ",", "\n", "gtGroups", ",", "#only used for DocStruct eval", "\n", "gtTrans", ",", "#nope", "\n", "image", ",", "\n", "useBBs", ",", "#the detected or GT BBs", "\n", "saved_features", ",", "#The detector features", "\n", "saved_features2", ",", "#other feature layers", "\n", "bbTrans", ",", "embeddings", ",", "#nope", "\n", ")", ":", "\n", "\n", "#create initial groups (single BB in each group)", "\n", "        ", "groups", "=", "[", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "useBBs", ")", ")", "]", "\n", "\n", "#init containers for each GCN iteration", "\n", "merge_prop_scores", "=", "None", "\n", "allOutputBoxes", "=", "[", "]", "\n", "allNodeOuts", "=", "[", "]", "\n", "allEdgeOuts", "=", "[", "]", "\n", "allGroups", "=", "[", "]", "\n", "allEdgeIndexes", "=", "[", "]", "\n", "\n", "\n", "\n", "#create the graph", "\n", "graph", ",", "edgeIndexes", ",", "rel_prop_scores", ",", "last_node_visual_feats", ",", "last_edge_visual_feats", ",", "keep_edges", "=", "self", ".", "createGraph", "(", "useBBs", ",", "saved_features", ",", "saved_features2", ",", "image", ".", "size", "(", "-", "2", ")", ",", "image", ".", "size", "(", "-", "1", ")", ",", "text_emb", "=", "embeddings", ",", "image", "=", "image", ")", "\n", "\n", "\n", "#no edges, no need for GCN", "\n", "if", "graph", "is", "None", ":", "\n", "            ", "return", "[", "useBBs", "]", ",", "None", ",", "None", ",", "None", ",", "None", ",", "rel_prop_scores", ",", "merge_prop_scores", ",", "(", "useBBs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ",", "None", ",", "None", ",", "bbTrans", ")", "\n", "\n", "", "if", "self", ".", "reintroduce_features", "==", "'map'", ":", "\n", "#save the initial features to reintroduce", "\n", "            ", "last_node_visual_feats", "=", "graph", "[", "0", "]", "\n", "last_edge_visual_feats", "=", "graph", "[", "2", "]", "\n", "\n", "#Run first GCN", "\n", "", "nodeOuts", ",", "edgeOuts", ",", "nodeFeats", ",", "edgeFeats", ",", "uniFeats", "=", "self", ".", "graphnets", "[", "0", "]", "(", "graph", ")", "\n", "\n", "edgeIndexes", "=", "edgeIndexes", "[", ":", "len", "(", "edgeIndexes", ")", "//", "2", "]", "#remove reverse edges", "\n", "\n", "#update BBs with node predictions", "\n", "useBBs", "=", "self", ".", "updateBBs", "(", "useBBs", ",", "groups", ",", "nodeOuts", ")", "\n", "\n", "#save output for this GCN", "\n", "allOutputBoxes", ".", "append", "(", "useBBs", ".", "cpu", "(", ")", ")", "\n", "allNodeOuts", ".", "append", "(", "nodeOuts", ")", "\n", "allEdgeOuts", ".", "append", "(", "edgeOuts", ")", "\n", "allGroups", ".", "append", "(", "groups", ")", "\n", "allEdgeIndexes", ".", "append", "(", "edgeIndexes", ")", "\n", "\n", "#for the rest of the GCNs", "\n", "for", "gIter", ",", "graphnet", "in", "enumerate", "(", "self", ".", "graphnets", "[", "1", ":", "]", ")", ":", "\n", "\n", "            ", "good_edges", "=", "None", "\n", "#perform the merges, groupings, and prunings", "\n", "useBBs", ",", "graph", ",", "groups", ",", "edgeIndexes", ",", "bbTrans", ",", "embeddings", ",", "same_node_map", ",", "keep_edges", "=", "self", ".", "mergeAndGroup", "(", "\n", "self", ".", "mergeThresh", "[", "gIter", "]", ",", "\n", "self", ".", "keepEdgeThresh", "[", "gIter", "]", ",", "\n", "self", ".", "groupThresh", "[", "gIter", "]", ",", "\n", "edgeIndexes", ",", "\n", "edgeOuts", ",", "\n", "groups", ",", "\n", "nodeFeats", ",", "\n", "edgeFeats", ",", "\n", "uniFeats", ",", "\n", "useBBs", ",", "\n", "bbTrans", ",", "\n", "embeddings", ",", "\n", "good_edges", "=", "good_edges", ",", "\n", "keep_edges", "=", "keep_edges", ",", "\n", "gt_groups", "=", "gtGroups", "if", "gIter", "==", "0", "else", "(", "[", "[", "g", "]", "for", "g", "in", "range", "(", "len", "(", "groups", ")", ")", "]", "if", "gtGroups", "is", "not", "None", "else", "None", ")", ")", "\n", "\n", "\n", "if", "self", ".", "reintroduce_features", ":", "\n", "#recompute and reintroduce features", "\n", "                ", "graph", ",", "last_node_visual_feats", ",", "last_edge_visual_feats", "=", "self", ".", "appendVisualFeatures", "(", "\n", "gIter", "+", "1", ",", "\n", "useBBs", ",", "\n", "graph", ",", "\n", "groups", ",", "\n", "edgeIndexes", ",", "\n", "saved_features", ",", "\n", "saved_features2", ",", "\n", "embeddings", ",", "\n", "image", ".", "size", "(", "-", "2", ")", ",", "\n", "image", ".", "size", "(", "-", "1", ")", ",", "\n", "same_node_map", ",", "\n", "last_node_visual_feats", ",", "\n", "last_edge_visual_feats", ",", "\n", "allEdgeIndexes", "[", "-", "1", "]", ",", "\n", "good_edges", "=", "good_edges", ")", "\n", "", "if", "len", "(", "edgeIndexes", ")", "==", "0", ":", "\n", "                ", "break", "#we have no graph left, so we can just end here", "\n", "\n", "#Run the next GCN", "\n", "", "nodeOuts", ",", "edgeOuts", ",", "nodeFeats", ",", "edgeFeats", ",", "uniFeats", "=", "graphnet", "(", "graph", ")", "\n", "\n", "useBBs", "=", "self", ".", "updateBBs", "(", "useBBs", ",", "groups", ",", "nodeOuts", ")", "\n", "\n", "#store these outs", "\n", "allOutputBoxes", ".", "append", "(", "useBBs", ".", "cpu", "(", ")", ")", "\n", "allNodeOuts", ".", "append", "(", "nodeOuts", ")", "\n", "allEdgeOuts", ".", "append", "(", "edgeOuts", ")", "\n", "allGroups", ".", "append", "(", "groups", ")", "\n", "allEdgeIndexes", ".", "append", "(", "edgeIndexes", ")", "\n", "#end GCN loop", "\n", "\n", "##Final state of the graph, via a final edit step", "\n", "", "useBBs", ",", "graph", ",", "groups", ",", "edgeIndexes", ",", "bbTrans", ",", "_", ",", "same_node_map", ",", "keep_edges", "=", "self", ".", "mergeAndGroup", "(", "\n", "self", ".", "mergeThresh", "[", "-", "1", "]", ",", "\n", "self", ".", "keepEdgeThresh", "[", "-", "1", "]", ",", "\n", "self", ".", "groupThresh", "[", "-", "1", "]", ",", "\n", "edgeIndexes", ",", "\n", "edgeOuts", ".", "detach", "(", ")", ",", "\n", "groups", ",", "\n", "None", ",", "#we don't need features anymore", "\n", "None", ",", "#", "\n", "None", ",", "#", "\n", "useBBs", ",", "\n", "bbTrans", ",", "\n", "None", ",", "\n", "gt_groups", "=", "[", "[", "g", "]", "for", "g", "in", "range", "(", "len", "(", "groups", ")", ")", "]", "if", "gtGroups", "is", "not", "None", "else", "None", ",", "\n", "final", "=", "True", "#This tells it to use the relationship predictions to prune", "\n", ")", "\n", "final", "=", "(", "useBBs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ",", "groups", ",", "edgeIndexes", ",", "bbTrans", ")", "\n", "\n", "#return lots of things for all the supervision required", "\n", "return", "allOutputBoxes", ",", "allEdgeOuts", ",", "allEdgeIndexes", ",", "allNodeOuts", ",", "allGroups", ",", "rel_prop_scores", ",", "merge_prop_scores", ",", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.FUDGE.alignGTBBs": [[2361, 2424], ["utils.yolo_tools.allIOU.cpu", "bbPredictions.cpu.cpu.cpu", "gtBBs.cpu.cpu.cpu", "ious_list.sort", "collections.defaultdict", "enumerate", "gtBBs.cpu.cpu.cpu", "utils.yolo_tools.allIO_clipU", "utils.yolo_tools.allIOU", "gtBBs.cpu.cpu.size", "bbPredictions.cpu.cpu.size", "gt_i.item.item.item", "len", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "utils.yolo_tools.allIOU.triu().nonzero", "len", "torch.FloatTensor().to.append", "torch.FloatTensor().to.append", "torch.FloatTensor().to.append", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "len", "torch.FloatTensor().to.append", "torch.FloatTensor().to.append", "torch.FloatTensor().to.append", "torch.FloatTensor().to.size", "torch.FloatTensor().to.size", "torch.FloatTensor().to.size", "gtBBs.cpu.cpu.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gtBBs.cpu.cpu.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "utils.yolo_tools.allIOU.triu", "bbPredictions.cpu.cpu.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allIO_clipU", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.allIOU"], ["", "def", "alignGTBBs", "(", "self", ",", "useGTBBs", ",", "gtBBs", ",", "gtGroups", ",", "bbPredictions", ")", ":", "\n", "            ", "useBBs", "=", "[", "]", "\n", "gtBBs", "=", "gtBBs", "[", "0", "]", "#assume a batch size of 1", "\n", "\n", "\n", "#perform greedy alignment of gt and predicted. Only keep aligned predictions", "\n", "if", "not", "bbPredictions", ".", "is_cuda", ":", "\n", "                ", "gtBBs", "=", "gtBBs", ".", "cpu", "(", ")", "\n", "\n", "", "if", "'word_bbs'", "in", "useGTBBs", ":", "#if these are the word BBs", "\n", "                ", "ious", "=", "allIO_clipU", "(", "gtBBs", ",", "bbPredictions", "[", ":", ",", "1", ":", "]", ",", "x1y1x2y2", "=", "False", ")", "#iou calculation, words are oversegmented lines", "\n", "", "else", ":", "\n", "                ", "ious", "=", "allIOU", "(", "gtBBs", ",", "bbPredictions", "[", ":", ",", "1", ":", "]", ",", "x1y1x2y2", "=", "False", ")", "#iou calculation", "\n", "\n", "", "ious", "=", "ious", ".", "cpu", "(", ")", "\n", "bbPredictions", "=", "bbPredictions", ".", "cpu", "(", ")", "\n", "gtBBs", "=", "gtBBs", ".", "cpu", "(", ")", "\n", "#sort, do highest ious first", "\n", "gt_used", "=", "[", "False", "]", "*", "gtBBs", ".", "size", "(", "0", ")", "\n", "num_gt_used", "=", "0", "\n", "pred_used", "=", "[", "False", "]", "*", "bbPredictions", ".", "size", "(", "0", ")", "\n", "num_pred_used", "=", "0", "\n", "ious_list", "=", "[", "(", "ious", "[", "gt_i", ",", "p_i", "]", ",", "gt_i", ",", "p_i", ")", "for", "gt_i", ",", "p_i", "in", "ious", ".", "triu", "(", "1", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", "]", "\n", "ious", "=", "None", "\n", "ious_list", ".", "sort", "(", "key", "=", "lambda", "a", ":", "a", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "gt_parts", "=", "defaultdict", "(", "list", ")", "\n", "gt_to_new", "=", "{", "}", "\n", "for", "iou", ",", "gt_i", ",", "p_i", "in", "ious_list", ":", "\n", "                ", "gt_i", "=", "gt_i", ".", "item", "(", ")", "\n", "if", "not", "gt_used", "[", "gt_i", "]", "and", "not", "pred_used", "[", "p_i", "]", ":", "\n", "                    ", "gt_to_new", "[", "gt_i", "]", "=", "len", "(", "useBBs", ")", "\n", "useBBs", ".", "append", "(", "torch", ".", "cat", "(", "(", "bbPredictions", "[", "p_i", ",", "0", ":", "1", "]", ",", "gtBBs", "[", "gt_i", ",", "0", ":", "5", "]", ",", "bbPredictions", "[", "p_i", ",", "6", ":", "]", ")", ",", "dim", "=", "0", ")", ")", "\n", "num_gt_used", "+=", "1", "\n", "if", "num_gt_used", ">=", "gtBBs", ".", "size", "(", "0", ")", ":", "\n", "                        ", "break", "\n", "", "gt_used", "[", "gt_i", "]", "=", "True", "\n", "\n", "if", "not", "pred_used", "[", "p_i", "]", ":", "\n", "                        ", "num_pred_used", "+=", "1", "\n", "if", "num_pred_used", ">=", "bbPredictions", ".", "size", "(", "0", ")", ":", "\n", "                            ", "break", "\n", "", "pred_used", "[", "p_i", "]", "=", "True", "\n", "", "", "", "ious_list", "=", "None", "\n", "\n", "\n", "#Add any undetected boxes.", "\n", "for", "gt_i", ",", "used", "in", "enumerate", "(", "gt_used", ")", ":", "\n", "                ", "if", "not", "used", ":", "\n", "                    ", "conf", "=", "torch", ".", "FloatTensor", "(", "[", "1", "]", ")", "\n", "cls", "=", "torch", ".", "FloatTensor", "(", "self", ".", "numBBTypes", ")", ".", "fill_", "(", "0.5", ")", "\n", "gt_to_new", "[", "gt_i", "]", "=", "len", "(", "useBBs", ")", "\n", "useBBs", ".", "append", "(", "torch", ".", "cat", "(", "(", "conf", ",", "gtBBs", "[", "gt_i", ",", "0", ":", "5", "]", ",", "cls", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n", "", "", "if", "gtGroups", "is", "not", "None", ":", "\n", "                ", "gtGroups", "=", "[", "[", "gt_to_new", "[", "gt_i", "]", "for", "gt_i", "in", "group", "]", "for", "group", "in", "gtGroups", "]", "#this just updating it", "\n", "", "if", "len", "(", "useBBs", ")", ">", "0", ":", "\n", "                ", "useBBs", "=", "torch", ".", "stack", "(", "useBBs", ",", "dim", "=", "0", ")", ".", "to", "(", "gtBBs", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "useBBs", "=", "torch", ".", "FloatTensor", "(", "0", ")", ".", "to", "(", "gtBBs", ".", "device", ")", "\n", "", "assert", "self", ".", "training", "or", "useBBs", ".", "size", "(", "0", ")", "==", "gtBBs", ".", "size", "(", "0", ")", "\n", "gtBBs", "=", "gtBBs", "[", "None", ",", "...", "]", "\n", "\n", "return", "useBBs", ",", "gtBBs", ",", "gtGroups", ",", "gt_to_new", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.minAndMaxXY": [[23, 26], ["numpy.array().transpose", "min_X.min", "max_X.max", "min_Y.min", "max_Y.max", "numpy.array"], "function", ["None"], ["def", "minAndMaxXY", "(", "boundingRects", ")", ":", "\n", "    ", "min_X", ",", "min_Y", ",", "max_X", ",", "max_Y", "=", "np", ".", "array", "(", "boundingRects", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "return", "min_X", ".", "min", "(", ")", ",", "max_X", ".", "max", "(", ")", ",", "min_Y", ".", "min", "(", ")", ",", "max_Y", ".", "max", "(", ")", "\n", "", "def", "combineShapeFeatsTensor", "(", "feats", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.combineShapeFeatsTensor": [[26, 29], ["torch.stack", "torch.stack", "torch.stack", "torch.stack.mean"], "function", ["None"], ["", "def", "combineShapeFeatsTensor", "(", "feats", ")", ":", "\n", "    ", "feats", "=", "torch", ".", "stack", "(", "feats", ",", "dim", "=", "0", ")", "\n", "return", "feats", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "def", "groupRect", "(", "corners", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.fudge.groupRect": [[29, 32], ["numpy.array", "corners[].min", "corners[].min", "corners[].max", "corners[].max"], "function", ["None"], ["", "def", "groupRect", "(", "corners", ")", ":", "\n", "    ", "corners", "=", "np", ".", "array", "(", "corners", ")", "\n", "return", "corners", "[", ":", ",", "0", "]", ".", "min", "(", ")", ",", "corners", "[", ":", ",", "1", "]", ".", "min", "(", ")", ",", "corners", "[", ":", ",", "2", "]", ".", "max", "(", ")", ",", "corners", "[", ":", ",", "3", "]", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_box_detector.YoloBoxDetector.__init__": [[13, 96], ["torch.nn.Module.__init__", "len", "net_builder.make_layers", "yolo_box_detector.YoloBoxDetector.net_down_modules.append", "torch.nn.Sequential", "print", "open", "json.loads", "print", "print", "torch.nn.Conv2d", "net_builder.make_layers", "yolo_box_detector.YoloBoxDetector.net_up_modules.append", "torch.nn.Sequential", "yolo_box_detector.YoloBoxDetector.setDEBUG", "f.read", "torch.nn.Conv2d", "type", "type", "type"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.setDEBUG"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "# predCount, base_0, base_1):", "\n", "#super(YoloBoxDetector, self).__init__(config)", "\n", "        ", "super", "(", "YoloBoxDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "forPairing", "=", "False", "\n", "self", ".", "forGraphPairing", "=", "False", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "rotation", "=", "config", "[", "'rotation'", "]", "if", "'rotation'", "in", "config", "else", "True", "\n", "self", ".", "numBBTypes", "=", "config", "[", "'number_of_box_types'", "]", "\n", "self", ".", "numBBParams", "=", "6", "#conf,x-off,y-off,h-scale,w-scale,rot-off", "\n", "self", ".", "numLineParams", "=", "5", "#conf,x-off,y-off,h-scale,rot", "\n", "if", "'pred_num_neighbors'", "in", "config", "and", "config", "[", "'pred_num_neighbors'", "]", ":", "\n", "            ", "self", ".", "predNumNeighbors", "=", "True", "\n", "self", ".", "numBBParams", "+=", "1", "\n", "print", "(", "\"Detecting number of neighbors!\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "predNumNeighbors", "=", "False", "\n", "", "self", ".", "discard_first_class_pred", "=", "config", "[", "'discard_first_class'", "]", "if", "'discard_first_class'", "in", "config", "else", "False", "#hack to fix bad parameterization", "\n", "\n", "self", ".", "predPointCount", "=", "config", "[", "'number_of_point_types'", "]", "if", "'number_of_point_types'", "in", "config", "else", "0", "\n", "self", ".", "predPixelCount", "=", "config", "[", "'number_of_pixel_types'", "]", "if", "'number_of_pixel_types'", "in", "config", "else", "0", "\n", "self", ".", "predLineCount", "=", "config", "[", "'number_of_line_types'", "]", "if", "'number_of_line_types'", "in", "config", "else", "0", "\n", "\n", "with", "open", "(", "config", "[", "'anchors_file'", "]", ")", "as", "f", ":", "\n", "            ", "self", ".", "anchors", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "#array of objects {rot,height,width}", "\n", "", "if", "self", ".", "rotation", ":", "\n", "            ", "self", ".", "meanH", "=", "48.0046359128", "/", "2", "\n", "", "else", ":", "\n", "            ", "self", ".", "meanH", "=", "62.1242376857", "/", "2", "\n", "", "self", ".", "numAnchors", "=", "len", "(", "self", ".", "anchors", ")", "\n", "if", "self", ".", "predLineCount", ">", "0", ":", "\n", "            ", "print", "(", "'Warning, using hardcoded mean H (yolo_box_detector)'", ")", "\n", "\n", "", "in_ch", "=", "3", "if", "'color'", "not", "in", "config", "or", "config", "[", "'color'", "]", "else", "1", "\n", "norm", "=", "config", "[", "'norm_type'", "]", "if", "\"norm_type\"", "in", "config", "else", "None", "\n", "if", "norm", "is", "None", ":", "\n", "            ", "print", "(", "'Warning: YoloBoxDetector has no normalization!'", ")", "\n", "", "dilation", "=", "config", "[", "'dilation'", "]", "if", "'dilation'", "in", "config", "else", "1", "\n", "dropout", "=", "config", "[", "'dropout'", "]", "if", "'dropout'", "in", "config", "else", "None", "\n", "#self.cnn, self.scale = vgg.vgg11_custOut(self.predLineCount*5+self.predPointCount*3,batch_norm=batch_norm, weight_norm=weight_norm)", "\n", "self", ".", "numOutBB", "=", "(", "self", ".", "numBBTypes", "+", "self", ".", "numBBParams", ")", "*", "self", ".", "numAnchors", "\n", "self", ".", "numOutLine", "=", "(", "self", ".", "numBBTypes", "+", "self", ".", "numLineParams", ")", "*", "self", ".", "predLineCount", "\n", "self", ".", "numOutPoint", "=", "self", ".", "predPointCount", "*", "3", "\n", "\n", "if", "'down_layers_cfg'", "in", "config", ":", "\n", "            ", "layers_cfg", "=", "config", "[", "'down_layers_cfg'", "]", "\n", "", "else", ":", "\n", "            ", "layers_cfg", "=", "[", "in_ch", ",", "64", ",", "'M'", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", "]", "\n", "\n", "", "self", ".", "net_down_modules", ",", "down_last_channels", "=", "make_layers", "(", "layers_cfg", ",", "dilation", ",", "norm", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "final_features", "=", "None", "\n", "self", ".", "last_channels", "=", "down_last_channels", "\n", "scaleX", "=", "1", "\n", "scaleY", "=", "1", "\n", "for", "a", "in", "layers_cfg", ":", "\n", "            ", "if", "a", "==", "'M'", "or", "(", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'D'", ")", ":", "\n", "                ", "scaleX", "*=", "2", "\n", "scaleY", "*=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'U'", ":", "\n", "                ", "scaleX", "/=", "2", "\n", "scaleY", "/=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", ":", "4", "]", "==", "'long'", ":", "#long pool", "\n", "                ", "scaleX", "*=", "3", "\n", "scaleY", "*=", "2", "\n", "", "", "self", ".", "scale", "=", "(", "scaleX", ",", "scaleY", ")", "\n", "self", ".", "net_down_modules", ".", "append", "(", "nn", ".", "Conv2d", "(", "down_last_channels", ",", "self", ".", "numOutBB", "+", "self", ".", "numOutLine", "+", "self", ".", "numOutPoint", ",", "kernel_size", "=", "1", ")", ")", "\n", "self", ".", "_hack_down", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net_down_modules", ")", "\n", "\n", "if", "self", ".", "predPixelCount", ">", "0", ":", "\n", "            ", "if", "'up_layers_cfg'", "in", "config", ":", "\n", "                ", "up_layers_cfg", "=", "config", "[", "'up_layers_cfg'", "]", "\n", "", "else", ":", "\n", "                ", "up_layers_cfg", "=", "[", "512", ",", "'U+512'", ",", "256", ",", "'U+256'", ",", "128", ",", "'U+128'", ",", "64", ",", "'U+64'", "]", "\n", "", "self", ".", "net_up_modules", ",", "up_last_channels", "=", "make_layers", "(", "up_layers_cfg", ",", "1", ",", "norm", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "net_up_modules", ".", "append", "(", "nn", ".", "Conv2d", "(", "up_last_channels", ",", "self", ".", "predPixelCount", ",", "kernel_size", "=", "1", ")", ")", "\n", "self", ".", "_hack_up", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net_up_modules", ")", "\n", "\n", "#self.base_0 = config['base_0']", "\n", "#self.base_1 = config['base_1']", "\n", "", "if", "'DEBUG'", "in", "config", ":", "\n", "            ", "self", ".", "setDEBUG", "(", ")", "\n", "\n", "", "if", "self", ".", "discard_first_class_pred", ":", "\n", "            ", "self", ".", "numBBTypes", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_box_detector.YoloBoxDetector.forward": [[97, 225], ["yolo_box_detector.YoloBoxDetector._hack_down", "priors_0[].to.expand", "priors_0[].to", "priors_1[].to.expand", "priors_1[].to", "range", "range", "range", "range", "torch.cat", "torch.arange().type_as", "torch.cat.size", "priors_0[].to.size", "torch.cat.size", "torch.arange().type_as", "torch.cat.size", "torch.cat.size", "priors_1[].to.size", "range", "pred_boxes.append", "pred_offsets.append", "len", "torch.stack", "torch.stack", "bbPredictions.view.view.transpose().contiguous", "bbPredictions.view.view.view", "bbPredictions.view.view.view", "offsetPredictions.permute().contiguous.permute().contiguous.permute().contiguous", "range", "torch.cat", "predictions.view.view.transpose().contiguous", "predictions.view.view.view", "linePreds.append", "offsets.permute().contiguous.permute().contiguous.permute().contiguous", "offsetLinePreds.append", "torch.cat", "predictions.view.view.transpose().contiguous", "predictions.view.view.view", "pointPreds.append", "to_cat.append", "to_cat.append", "torch.zeros_like", "torch.sigmoid", "stackedPred.append", "stackedPred.append", "torch.cat", "bbPredictions.view.view.size", "bbPredictions.view.view.size", "bbPredictions.view.view.size", "bbPredictions.view.view.size", "bbPredictions.view.view.size", "torch.sigmoid", "stackedPred.append", "predictions.view.view.size", "predictions.view.view.size", "predictions.view.view.size", "module", "torch.arange", "torch.arange", "torch.tanh", "torch.exp", "torch.exp", "torch.sigmoid", "bbPredictions.view.view.transpose", "offsetPredictions.permute().contiguous.permute().contiguous.permute", "torch.tanh", "torch.exp", "predictions.view.view.transpose", "offsets.permute().contiguous.permute().contiguous.permute", "torch.sigmoid", "predictions.view.view.transpose", "torch.cat.size", "torch.cat.size", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "#import pdb; pdb.set_trace()", "\n", "        ", "y", "=", "self", ".", "_hack_down", "(", "img", ")", "\n", "if", "self", ".", "discard_first_class_pred", ":", "\n", "            ", "to_cat", "=", "[", "]", "\n", "for", "a", "in", "range", "(", "self", ".", "numAnchors", ")", ":", "\n", "                ", "start_of_a", "=", "(", "self", ".", "numBBParams", "+", "self", ".", "numBBTypes", "+", "1", ")", "*", "a", "\n", "end_of_a", "=", "(", "self", ".", "numBBParams", "+", "self", ".", "numBBTypes", "+", "1", ")", "*", "(", "a", "+", "1", ")", "\n", "to_cat", ".", "append", "(", "y", "[", ":", ",", "start_of_a", ":", "start_of_a", "+", "self", ".", "numBBParams", "]", ")", "\n", "to_cat", ".", "append", "(", "y", "[", ":", ",", "start_of_a", "+", "self", ".", "numBBParams", "+", "1", ":", "end_of_a", "]", ")", "\n", "", "y", "=", "torch", ".", "cat", "(", "to_cat", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "forPairing", ":", "\n", "            ", "return", "y", "[", ":", ",", ":", "(", "self", ".", "numBBParams", "+", "self", ".", "numBBTypes", ")", "*", "self", ".", "numAnchors", ",", ":", ",", ":", "]", "\n", "#levels=[img]", "\n", "#for module in self.net_down_modules:", "\n", "#    levels.append(module(levels[-1]))", "\n", "#y=levels[-1]", "\n", "\n", "\n", "#priors_0 = Variable(torch.arange(0,y.size(2)).type_as(img.data), requires_grad=False)[None,:,None]", "\n", "", "priors_0", "=", "torch", ".", "arange", "(", "0", ",", "y", ".", "size", "(", "2", ")", ")", ".", "type_as", "(", "img", ".", "data", ")", "[", "None", ",", ":", ",", "None", "]", "\n", "priors_0", "=", "(", "priors_0", "+", "0.5", ")", "*", "self", ".", "scale", "[", "1", "]", "#self.base_0", "\n", "priors_0", "=", "priors_0", ".", "expand", "(", "y", ".", "size", "(", "0", ")", ",", "priors_0", ".", "size", "(", "1", ")", ",", "y", ".", "size", "(", "3", ")", ")", "\n", "priors_0", "=", "priors_0", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "to", "(", "img", ".", "device", ")", "\n", "\n", "#priors_1 = Variable(torch.arange(0,y.size(3)).type_as(img.data), requires_grad=False)[None,None,:]", "\n", "priors_1", "=", "torch", ".", "arange", "(", "0", ",", "y", ".", "size", "(", "3", ")", ")", ".", "type_as", "(", "img", ".", "data", ")", "[", "None", ",", "None", ",", ":", "]", "\n", "priors_1", "=", "(", "priors_1", "+", "0.5", ")", "*", "self", ".", "scale", "[", "0", "]", "#elf.base_1", "\n", "priors_1", "=", "priors_1", ".", "expand", "(", "y", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "2", ")", ",", "priors_1", ".", "size", "(", "2", ")", ")", "\n", "priors_1", "=", "priors_1", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "to", "(", "img", ".", "device", ")", "\n", "\n", "anchor", "=", "self", ".", "anchors", "\n", "pred_boxes", "=", "[", "]", "\n", "pred_offsets", "=", "[", "]", "#we seperate anchor predictions here. And compute actual bounding boxes", "\n", "for", "i", "in", "range", "(", "self", ".", "numAnchors", ")", ":", "\n", "\n", "            ", "offset", "=", "i", "*", "(", "self", ".", "numBBParams", "+", "self", ".", "numBBTypes", ")", "\n", "if", "self", ".", "rotation", ":", "\n", "                ", "rot_dif", "=", "(", "math", ".", "pi", "/", "2", ")", "*", "torch", ".", "tanh", "(", "y", "[", ":", ",", "3", "+", "offset", ":", "4", "+", "offset", ",", ":", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "rot_dif", "=", "torch", ".", "zeros_like", "(", "y", "[", ":", ",", "3", "+", "offset", ":", "4", "+", "offset", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "stackedPred", "=", "[", "\n", "torch", ".", "sigmoid", "(", "y", "[", ":", ",", "0", "+", "offset", ":", "1", "+", "offset", ",", ":", ",", ":", "]", ")", ",", "#0. confidence", "\n", "torch", ".", "tanh", "(", "y", "[", ":", ",", "1", "+", "offset", ":", "2", "+", "offset", ",", ":", ",", ":", "]", ")", "*", "self", ".", "scale", "[", "0", "]", "+", "priors_1", ",", "#1. x-center", "\n", "torch", ".", "tanh", "(", "y", "[", ":", ",", "2", "+", "offset", ":", "3", "+", "offset", ",", ":", ",", ":", "]", ")", "*", "self", ".", "scale", "[", "1", "]", "+", "priors_0", ",", "#2. y-center", "\n", "rot_dif", "+", "anchor", "[", "i", "]", "[", "'rot'", "]", ",", "#3. rotation (radians)", "\n", "torch", ".", "exp", "(", "y", "[", ":", ",", "4", "+", "offset", ":", "5", "+", "offset", ",", ":", ",", ":", "]", ")", "*", "anchor", "[", "i", "]", "[", "'height'", "]", ",", "#4. height (half), I don't think this needs scaled", "\n", "torch", ".", "exp", "(", "y", "[", ":", ",", "5", "+", "offset", ":", "6", "+", "offset", ",", ":", ",", ":", "]", ")", "*", "anchor", "[", "i", "]", "[", "'width'", "]", ",", "#5. width (half)   as we scale the anchors in training", "\n", "]", "\n", "\n", "\n", "if", "self", ".", "predNumNeighbors", ":", "\n", "                ", "stackedPred", ".", "append", "(", "1", "+", "y", "[", ":", ",", "6", "+", "offset", ":", "7", "+", "offset", ",", ":", ",", ":", "]", ")", "#+1 so predicted -1 is 0 neighbors", "\n", "extra", "=", "1", "\n", "", "else", ":", "\n", "                ", "extra", "=", "0", "\n", "", "for", "j", "in", "range", "(", "self", ".", "numBBTypes", ")", ":", "\n", "                ", "stackedPred", ".", "append", "(", "torch", ".", "sigmoid", "(", "y", "[", ":", ",", "6", "+", "j", "+", "extra", "+", "offset", ":", "7", "+", "j", "+", "extra", "+", "offset", ",", ":", ",", ":", "]", ")", ")", "#x. class prediction", "\n", "#stackedOffsets.append(y[:,6+j+offset:7+j+offset,:,:])         #x. class prediction", "\n", "", "pred_boxes", ".", "append", "(", "torch", ".", "cat", "(", "stackedPred", ",", "dim", "=", "1", ")", ")", "\n", "#pred_offsets.append(torch.cat(stackedOffsets, dim=1))", "\n", "pred_offsets", ".", "append", "(", "y", "[", ":", ",", "offset", ":", "offset", "+", "self", ".", "numBBParams", "+", "self", ".", "numBBTypes", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "if", "len", "(", "pred_boxes", ")", ">", "0", ":", "\n", "            ", "bbPredictions", "=", "torch", ".", "stack", "(", "pred_boxes", ",", "dim", "=", "1", ")", "\n", "offsetPredictions", "=", "torch", ".", "stack", "(", "pred_offsets", ",", "dim", "=", "1", ")", "\n", "\n", "bbPredictions", "=", "bbPredictions", ".", "transpose", "(", "2", ",", "4", ")", ".", "contiguous", "(", ")", "#from [batch, anchors, channel, rows, cols] to [batch, anchros, cols, rows, channels]", "\n", "bbPredictions", "=", "bbPredictions", ".", "view", "(", "bbPredictions", ".", "size", "(", "0", ")", ",", "bbPredictions", ".", "size", "(", "1", ")", ",", "-", "1", ",", "bbPredictions", ".", "size", "(", "4", ")", ")", "#flatten to [batch, anchors, instances, channel]", "\n", "#avg_conf_per_anchor = bbPredictions[:,:,:,0].mean(dim=0).mean(dim=1)", "\n", "bbPredictions", "=", "bbPredictions", ".", "view", "(", "bbPredictions", ".", "size", "(", "0", ")", ",", "-", "1", ",", "bbPredictions", ".", "size", "(", "3", ")", ")", "#[batch, instances+anchors, channel]", "\n", "\n", "offsetPredictions", "=", "offsetPredictions", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "bbPredictions", "=", "None", "\n", "offsetPredictions", "=", "None", "\n", "\n", "", "linePreds", "=", "[", "]", "\n", "offsetLinePreds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "predLineCount", ")", ":", "\n", "            ", "offset", "=", "i", "*", "(", "self", ".", "numLineParams", "+", "self", ".", "numBBTypes", ")", "+", "self", ".", "numAnchors", "*", "(", "self", ".", "numBBParams", "+", "self", ".", "numBBTypes", ")", "\n", "stackedPred", "=", "[", "\n", "torch", ".", "sigmoid", "(", "y", "[", ":", ",", "0", "+", "offset", ":", "1", "+", "offset", ",", ":", ",", ":", "]", ")", ",", "#confidence", "\n", "torch", ".", "tanh", "(", "y", "[", ":", ",", "1", "+", "offset", ":", "2", "+", "offset", ",", ":", ",", ":", "]", ")", "*", "self", ".", "scale", "[", "0", "]", "+", "priors_1", ",", "#x-center", "\n", "torch", ".", "tanh", "(", "y", "[", ":", ",", "2", "+", "offset", ":", "3", "+", "offset", ",", ":", ",", ":", "]", ")", "*", "self", ".", "scale", "[", "1", "]", "+", "priors_0", ",", "#y-center", "\n", "(", "math", ".", "pi", ")", "*", "torch", ".", "tanh", "(", "y", "[", ":", ",", "3", "+", "offset", ":", "4", "+", "offset", ",", ":", ",", ":", "]", ")", ",", "#rotation (radians)", "\n", "torch", ".", "exp", "(", "y", "[", ":", ",", "4", "+", "offset", ":", "5", "+", "offset", ",", ":", ",", ":", "]", ")", "*", "self", ".", "meanH", "#scale (half-height),", "\n", "\n", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "numBBTypes", ")", ":", "\n", "                ", "stackedPred", ".", "append", "(", "y", "[", ":", ",", "5", "+", "j", "+", "offset", ":", "6", "+", "j", "+", "offset", ",", ":", ",", ":", "]", ")", "#x. class prediction", "\n", "\n", "", "predictions", "=", "torch", ".", "cat", "(", "stackedPred", ",", "dim", "=", "1", ")", "\n", "predictions", "=", "predictions", ".", "transpose", "(", "1", ",", "3", ")", ".", "contiguous", "(", ")", "#from [batch, channel, rows, cols] to [batch, cols, rows, channels]", "\n", "predictions", "=", "predictions", ".", "view", "(", "predictions", ".", "size", "(", "0", ")", ",", "-", "1", ",", "predictions", ".", "size", "(", "3", ")", ")", "#flatten to [batch, instances, channel]", "\n", "linePreds", ".", "append", "(", "predictions", ")", "\n", "\n", "offsets", "=", "y", "[", ":", ",", "offset", ":", "offset", "+", "self", ".", "numLineParams", "+", "self", ".", "numBBTypes", ",", ":", ",", ":", "]", "\n", "offsets", "=", "offsets", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "offsetLinePreds", ".", "append", "(", "offsets", ")", "\n", "\n", "", "pointPreds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "predPointCount", ")", ":", "\n", "            ", "offset", "=", "i", "*", "3", "+", "self", ".", "numAnchors", "*", "(", "self", ".", "numBBParams", "+", "self", ".", "numBBTypes", ")", "\n", "predictions", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "sigmoid", "(", "y", "[", ":", ",", "0", "+", "offset", ":", "1", "+", "offset", ",", ":", ",", ":", "]", ")", ",", "#confidence", "\n", "y", "[", ":", ",", "1", "+", "offset", ":", "2", "+", "offset", ",", ":", ",", ":", "]", "+", "priors_1", ",", "#x", "\n", "y", "[", ":", ",", "2", "+", "offset", ":", "3", "+", "offset", ",", ":", ",", ":", "]", "+", "priors_0", "#y", "\n", "]", ",", "dim", "=", "1", ")", "\n", "\n", "predictions", "=", "predictions", ".", "transpose", "(", "1", ",", "3", ")", ".", "contiguous", "(", ")", "#from [batch, channel, rows, cols] to [batch, cols, rows, channels]", "\n", "predictions", "=", "predictions", ".", "view", "(", "predictions", ".", "size", "(", "0", ")", ",", "-", "1", ",", "3", ")", "#flatten to [batch, instances, channel]", "\n", "pointPreds", ".", "append", "(", "predictions", ")", "\n", "\n", "", "pixelPreds", "=", "None", "\n", "if", "self", ".", "predPixelCount", ">", "0", ":", "\n", "            ", "y2", "=", "levels", "[", "-", "2", "]", "\n", "p", "=", "-", "3", "\n", "for", "module", "in", "self", ".", "net_up_modules", "[", ":", "-", "1", "]", ":", "\n", "#print('uping {} , {}'.format(y2.size(), levels[p].size()))", "\n", "                ", "y2", "=", "module", "(", "y2", ",", "levels", "[", "p", "]", ")", "\n", "p", "-=", "1", "\n", "", "pixelPreds", "=", "self", ".", "net_up_modules", "[", "-", "1", "]", "(", "y2", ")", "\n", "\n", "\n", "\n", "", "return", "bbPredictions", ",", "offsetPredictions", ",", "linePreds", ",", "offsetLinePreds", ",", "pointPreds", ",", "pixelPreds", "#, avg_conf_per_anchor", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_box_detector.YoloBoxDetector.summary": [[226, 234], ["filter", "sum", "print", "print", "yolo_box_detector.YoloBoxDetector.parameters", "numpy.prod", "p.size"], "methods", ["None"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Model summary\n        \"\"\"", "\n", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "print", "(", "'Trainable parameters: {}'", ".", "format", "(", "params", ")", ")", "\n", "print", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_box_detector.YoloBoxDetector.setForPairing": [[235, 240], ["yolo_box_detector.YoloBoxDetector.net_down_modules[].register_forward_hook"], "methods", ["None"], ["", "def", "setForPairing", "(", "self", ")", ":", "\n", "        ", "self", ".", "forPairing", "=", "True", "\n", "def", "save_final", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "self", ".", "final_features", "=", "output", "\n", "", "self", ".", "net_down_modules", "[", "-", "2", "]", ".", "register_forward_hook", "(", "save_final", ")", "\n", "", "def", "setForGraphPairing", "(", "self", ",", "beginningOfLast", "=", "False", ",", "featuresFromHere", "=", "-", "1", ",", "featuresFromScale", "=", "-", "2", ",", "f2Here", "=", "None", ",", "f2Scale", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_box_detector.YoloBoxDetector.setForGraphPairing": [[240, 269], ["[].register_forward_hook", "type", "type", "[].register_forward_hook", "print", "exit", "[].register_forward_hook", "print", "len", "len"], "methods", ["None"], ["", "def", "setForGraphPairing", "(", "self", ",", "beginningOfLast", "=", "False", ",", "featuresFromHere", "=", "-", "1", ",", "featuresFromScale", "=", "-", "2", ",", "f2Here", "=", "None", ",", "f2Scale", "=", "None", ")", ":", "\n", "        ", "self", ".", "forGraphPairing", "=", "True", "\n", "self", ".", "saved_features", "=", "None", "\n", "def", "save_feats", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "self", ".", "saved_features", "=", "output", "\n", "", "if", "beginningOfLast", ":", "\n", "            ", "self", ".", "net_down_modules", "[", "-", "2", "]", "[", "0", "]", ".", "register_forward_hook", "(", "save_final", ")", "#after max pool", "\n", "self", ".", "last_channels", "=", "self", ".", "last_channels", "//", "2", "#HACK", "\n", "", "else", ":", "\n", "            ", "typ", "=", "type", "(", "self", ".", "net_down_modules", "[", "featuresFromScale", "]", "[", "featuresFromHere", "]", ")", "\n", "if", "typ", "==", "torch", ".", "nn", ".", "modules", ".", "activation", ".", "ReLU", "or", "typ", "==", "torch", ".", "nn", ".", "modules", ".", "MaxPool2d", ":", "\n", "                ", "self", ".", "net_down_modules", "[", "featuresFromScale", "]", "[", "featuresFromHere", "]", ".", "register_forward_hook", "(", "save_feats", ")", "\n", "if", "featuresFromScale", "<", "0", ":", "\n", "                    ", "featuresFromScale", "=", "len", "(", "self", ".", "net_down_modules", ")", "+", "featuresFromScale", "\n", "", "self", ".", "save_scale", "=", "2", "**", "featuresFromScale", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Layer {},{} of the final conv block was specified, but it is not a ReLU layer. Did you choose the right layer?'", ".", "format", "(", "featuresFromScale", ",", "featuresFromHere", ")", ")", "\n", "exit", "(", ")", "\n", "", "", "if", "f2Here", "is", "not", "None", ":", "\n", "            ", "def", "save_feats2", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "                ", "self", ".", "saved_features2", "=", "output", "\n", "", "typ", "=", "type", "(", "self", ".", "net_down_modules", "[", "f2Scale", "]", "[", "f2Here", "]", ")", "\n", "if", "typ", "==", "torch", ".", "nn", ".", "modules", ".", "activation", ".", "ReLU", "or", "typ", "==", "torch", ".", "nn", ".", "modules", ".", "MaxPool2d", ":", "\n", "                ", "self", ".", "net_down_modules", "[", "f2Scale", "]", "[", "f2Here", "]", ".", "register_forward_hook", "(", "save_feats2", ")", "\n", "if", "f2Scale", "<", "0", ":", "\n", "                    ", "f2Scale", "=", "len", "(", "self", ".", "net_down_modules", ")", "+", "f2Scale", "\n", "", "self", ".", "save2_scale", "=", "2", "**", "f2Scale", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Layer {},{} of the final conv block was specified, but it is not a ReLU layer. Did you choose the right layer?'", ".", "format", "(", "f2Scale", ",", "f2Here", ")", ")", "\n", "", "", "", "def", "setDEBUG", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_box_detector.YoloBoxDetector.setDEBUG": [[269, 291], ["yolo_box_detector.YoloBoxDetector.net_down_modules[].register_forward_hook", "yolo_box_detector.YoloBoxDetector.net_down_modules[].register_forward_hook", "yolo_box_detector.YoloBoxDetector.net_down_modules[].register_forward_hook", "yolo_box_detector.YoloBoxDetector.net_down_modules[].register_forward_hook", "yolo_box_detector.YoloBoxDetector.net_down_modules[].register_forward_hook", "output.cpu", "output.cpu", "output.cpu", "output.cpu", "output.cpu"], "methods", ["None"], ["", "", "", "def", "setDEBUG", "(", "self", ")", ":", "\n", "#self.debug=[None]*5", "\n", "#for i in range(0,1):", "\n", "#    def save_layer(module,input,output):", "\n", "#        self.debug[i]=output.cpu()", "\n", "#    self.net_down_modules[i].register_forward_hook(save_layer)", "\n", "\n", "        ", "def", "save_layer0", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "self", ".", "debug0", "=", "output", ".", "cpu", "(", ")", "\n", "", "self", ".", "net_down_modules", "[", "0", "]", ".", "register_forward_hook", "(", "save_layer0", ")", "\n", "def", "save_layer1", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "self", ".", "debug1", "=", "output", ".", "cpu", "(", ")", "\n", "", "self", ".", "net_down_modules", "[", "1", "]", ".", "register_forward_hook", "(", "save_layer1", ")", "\n", "def", "save_layer2", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "self", ".", "debug2", "=", "output", ".", "cpu", "(", ")", "\n", "", "self", ".", "net_down_modules", "[", "2", "]", ".", "register_forward_hook", "(", "save_layer2", ")", "\n", "def", "save_layer3", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "self", ".", "debug3", "=", "output", ".", "cpu", "(", ")", "\n", "", "self", ".", "net_down_modules", "[", "3", "]", ".", "register_forward_hook", "(", "save_layer3", ")", "\n", "def", "save_layer4", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "self", ".", "debug4", "=", "output", ".", "cpu", "(", ")", "\n", "", "self", ".", "net_down_modules", "[", "4", "]", ".", "register_forward_hook", "(", "save_layer4", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.__init__": [[24, 326], ["base.base_model.BaseModel.__init__", "pairing_graph.PairingGraph.detector.setForGraphPairing", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "pairing_graph.PairingGraph.detector.parameters", "model.net_builder.make_layers", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torchvision.ops.RoIAlign", "model.net_builder.make_layers", "torch.Sequential", "torch.Sequential", "torch.Sequential", "eval", "type", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pairing_graph.PairingGraph.detector.setDEBUG", "pairing_graph.PairingGraph.setDEBUG", "print", "pairing_graph.PairingGraph.detector.load_state_dict", "eval", "model.net_builder.make_layers", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torchvision.ops.RoIAlign", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torchvision.ops.RoIAlign", "model.net_builder.make_layers", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "type", "type", "json.load", "eval", "print", "model.net_builder.make_layers", "model.net_builder.make_layers", "convlayers.append", "torchvision.ops.RoIAlign", "open", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.net_builder.make_layers", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "type", "type", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "type", "type", "type", "model.net_builder.getGroupSize", "type", "type", "type", "type", "type", "type", "type"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.model.yolo_box_detector.YoloBoxDetector.setForGraphPairing", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.setDEBUG", "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.setDEBUG", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.make_layers", "home.repos.pwc.inspect_result.herobd_FUDGE.model.net_builder.getGroupSize"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PairingGraph", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "'detector_checkpoint'", "in", "config", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'detector_checkpoint'", "]", ",", "map_location", "=", "lambda", "storage", ",", "location", ":", "storage", ")", "\n", "detector_config", "=", "json", ".", "load", "(", "open", "(", "config", "[", "'detector_config'", "]", ")", ")", "[", "'model'", "]", "if", "'detector_config'", "in", "config", "else", "checkpoint", "[", "'config'", "]", "[", "'model'", "]", "\n", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "detector", "=", "eval", "(", "checkpoint", "[", "'config'", "]", "[", "'arch'", "]", ")", "(", "detector_config", ")", "\n", "self", ".", "detector", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "detector", "=", "checkpoint", "[", "'model'", "]", "\n", "", "", "else", ":", "\n", "            ", "detector_config", "=", "config", "[", "'detector_config'", "]", "\n", "self", ".", "detector", "=", "eval", "(", "detector_config", "[", "'arch'", "]", ")", "(", "detector_config", ")", "\n", "", "useBeginningOfLast", "=", "config", "[", "'use_beg_det_feats'", "]", "if", "'use_beg_det_feats'", "in", "config", "else", "False", "\n", "useFeatsLayer", "=", "config", "[", "'use_detect_layer_feats'", "]", "if", "'use_detect_layer_feats'", "in", "config", "else", "-", "1", "\n", "useFeatsScale", "=", "config", "[", "'use_detect_scale_feats'", "]", "if", "'use_detect_scale_feats'", "in", "config", "else", "-", "2", "\n", "useFLayer2", "=", "config", "[", "'use_2nd_detect_layer_feats'", "]", "if", "'use_2nd_detect_layer_feats'", "in", "config", "else", "None", "\n", "useFScale2", "=", "config", "[", "'use_2nd_detect_scale_feats'", "]", "if", "'use_2nd_detect_scale_feats'", "in", "config", "else", "None", "\n", "detectorSavedFeatSize", "=", "config", "[", "'use_detect_feats_size'", "]", "if", "'use_detect_feats_size'", "in", "config", "else", "self", ".", "detector", ".", "last_channels", "\n", "assert", "(", "(", "useFeatsScale", "==", "-", "2", ")", "or", "(", "'use_detect_feats_size'", "in", "config", ")", ")", "\n", "detectorSavedFeatSize2", "=", "config", "[", "'use_2nd_detect_feats_size'", "]", "if", "'use_2nd_detect_feats_size'", "in", "config", "else", "None", "\n", "\n", "#splitScaleDiff = config['split_features_scale_diff'] if 'split_features_scale_diff' in config else None", "\n", "self", ".", "splitFeatures", "=", "config", "[", "'split_features_scale'", "]", "if", "'split_features_scale'", "in", "config", "else", "False", "\n", "\n", "self", ".", "use2ndFeatures", "=", "useFLayer2", "is", "not", "None", "\n", "if", "self", ".", "use2ndFeatures", "and", "not", "self", ".", "splitFeatures", ":", "\n", "            ", "detectorSavedFeatSize", "+=", "detectorSavedFeatSize2", "\n", "\n", "", "self", ".", "detector", ".", "setForGraphPairing", "(", "useBeginningOfLast", ",", "useFeatsLayer", ",", "useFeatsScale", ",", "useFLayer2", ",", "useFScale2", ")", "\n", "self", ".", "detector_predNumNeighbors", "=", "self", ".", "detector", ".", "predNumNeighbors", "\n", "\n", "\n", "self", ".", "no_grad_feats", "=", "config", "[", "'no_grad_feats'", "]", "if", "'no_grad_feats'", "in", "config", "else", "False", "\n", "\n", "if", "(", "config", "[", "'start_frozen'", "]", "if", "'start_frozen'", "in", "config", "else", "False", ")", ":", "\n", "            ", "for", "param", "in", "self", ".", "detector", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "will_use_grad", "=", "param", ".", "requires_grad", "\n", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "detector_frozen", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "detector_frozen", "=", "False", "\n", "\n", "\n", "", "self", ".", "numBBTypes", "=", "self", ".", "detector", ".", "numBBTypes", "\n", "self", ".", "rotation", "=", "self", ".", "detector", ".", "rotation", "\n", "self", ".", "scale", "=", "self", ".", "detector", ".", "scale", "\n", "self", ".", "anchors", "=", "self", ".", "detector", ".", "anchors", "\n", "self", ".", "confThresh", "=", "config", "[", "'conf_thresh'", "]", "if", "'conf_thresh'", "in", "config", "else", "0.5", "\n", "self", ".", "predNN", "=", "config", "[", "'pred_nn'", "]", "if", "'pred_nn'", "in", "config", "else", "False", "\n", "self", ".", "predClass", "=", "config", "[", "'pred_class'", "]", "if", "'pred_class'", "in", "config", "else", "False", "\n", "\n", "\n", "graph_in_channels", "=", "config", "[", "'graph_config'", "]", "[", "'in_channels'", "]", "if", "'in_channels'", "in", "config", "[", "'graph_config'", "]", "else", "1", "\n", "self", ".", "useBBVisualFeats", "=", "True", "\n", "if", "config", "[", "'graph_config'", "]", "[", "'arch'", "]", "[", ":", "10", "]", "==", "'BinaryPair'", "and", "not", "self", ".", "predNN", ":", "\n", "            ", "self", ".", "useBBVisualFeats", "=", "False", "\n", "", "self", ".", "includeRelRelEdges", "=", "config", "[", "'use_rel_rel_edges'", "]", "if", "'use_rel_rel_edges'", "in", "config", "else", "True", "\n", "#rel_channels = config['graph_config']['rel_channels']", "\n", "self", ".", "pool_h", "=", "config", "[", "'featurizer_start_h'", "]", "\n", "self", ".", "pool_w", "=", "config", "[", "'featurizer_start_w'", "]", "\n", "self", ".", "poolBB_h", "=", "config", "[", "'featurizer_bb_start_h'", "]", "if", "'featurizer_bb_start_h'", "in", "config", "else", "2", "\n", "self", ".", "poolBB_w", "=", "config", "[", "'featurizer_bb_start_w'", "]", "if", "'featurizer_bb_start_w'", "in", "config", "else", "3", "\n", "\n", "self", ".", "pool2_h", "=", "self", ".", "pool_h", "\n", "self", ".", "pool2_w", "=", "self", ".", "pool_w", "\n", "self", ".", "poolBB2_h", "=", "self", ".", "poolBB_h", "\n", "self", ".", "poolBB2_w", "=", "self", ".", "poolBB_w", "\n", "\n", "\n", "if", "'use_rel_shape_feats'", "in", "config", ":", "\n", "             ", "config", "[", "'use_shape_feats'", "]", "=", "config", "[", "'use_rel_shape_feats'", "]", "\n", "", "self", ".", "useShapeFeats", "=", "config", "[", "'use_shape_feats'", "]", "if", "'use_shape_feats'", "in", "config", "else", "False", "\n", "self", ".", "usePositionFeature", "=", "config", "[", "'use_position_feats'", "]", "if", "'use_position_feats'", "in", "config", "else", "False", "\n", "assert", "(", "not", "self", ".", "usePositionFeature", "or", "self", ".", "useShapeFeats", ")", "\n", "self", ".", "normalizeHorz", "=", "config", "[", "'normalize_horz'", "]", "if", "'normalize_horz'", "in", "config", "else", "400", "\n", "self", ".", "normalizeVert", "=", "config", "[", "'normalize_vert'", "]", "if", "'normalize_vert'", "in", "config", "else", "50", "\n", "self", ".", "normalizeDist", "=", "(", "self", ".", "normalizeHorz", "+", "self", ".", "normalizeVert", ")", "/", "2", "\n", "\n", "assert", "(", "self", ".", "detector", ".", "scale", "[", "0", "]", "==", "self", ".", "detector", ".", "scale", "[", "1", "]", ")", "\n", "if", "useBeginningOfLast", ":", "\n", "            ", "detect_save_scale", "=", "self", ".", "detector", ".", "scale", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "detect_save_scale", "=", "self", ".", "detector", ".", "save_scale", "\n", "", "if", "self", ".", "use2ndFeatures", ":", "\n", "            ", "detect_save2_scale", "=", "self", ".", "detector", ".", "save2_scale", "\n", "\n", "", "if", "self", ".", "useShapeFeats", ":", "\n", "           ", "self", ".", "numShapeFeats", "=", "8", "+", "2", "*", "self", ".", "numBBTypes", "#we'll append some extra feats", "\n", "self", ".", "numShapeFeatsBB", "=", "3", "+", "self", ".", "numBBTypes", "\n", "if", "self", ".", "useShapeFeats", "!=", "'old'", ":", "\n", "               ", "self", ".", "numShapeFeats", "+=", "4", "\n", "", "if", "self", ".", "detector", ".", "predNumNeighbors", ":", "\n", "               ", "self", ".", "numShapeFeats", "+=", "2", "\n", "self", ".", "numShapeFeatsBB", "+=", "1", "\n", "", "if", "self", ".", "usePositionFeature", ":", "\n", "               ", "self", ".", "numShapeFeats", "+=", "4", "\n", "self", ".", "numShapeFeatsBB", "+=", "2", "\n", "", "", "else", ":", "\n", "           ", "self", ".", "numShapeFeats", "=", "0", "\n", "self", ".", "numShapeFeatsBB", "=", "0", "\n", "", "config", "[", "'graph_config'", "]", "[", "'num_shape_feats'", "]", "=", "self", ".", "numShapeFeats", "\n", "featurizer_fc", "=", "config", "[", "'featurizer_fc'", "]", "if", "'featurizer_fc'", "in", "config", "else", "[", "]", "\n", "if", "self", ".", "useShapeFeats", "!=", "'only'", ":", "\n", "\n", "            ", "self", ".", "expandedRelContext", "=", "config", "[", "'expand_rel_context'", "]", "if", "'expand_rel_context'", "in", "config", "else", "None", "\n", "if", "self", ".", "expandedRelContext", "is", "not", "None", ":", "\n", "                ", "bbMasks", "=", "3", "\n", "", "else", ":", "\n", "                ", "bbMasks", "=", "2", "\n", "", "self", ".", "expandedBBContext", "=", "config", "[", "'expand_bb_context'", "]", "if", "'expand_bb_context'", "in", "config", "else", "None", "\n", "if", "self", ".", "expandedBBContext", "is", "not", "None", ":", "\n", "                ", "bbMasks_bb", "=", "2", "\n", "", "else", ":", "\n", "                ", "bbMasks_bb", "=", "0", "\n", "\n", "", "self", ".", "use_fixed_masks", "=", "config", "[", "'use_fixed_masks'", "]", "if", "'use_fixed_masks'", "in", "config", "else", "False", "\n", "self", ".", "splitFeatureRes", "=", "config", "[", "'split_feature_res'", "]", "if", "'split_feature_res'", "in", "config", "else", "False", "\n", "\n", "feat_norm", "=", "detector_config", "[", "'norm_type'", "]", "if", "'norm_type'", "in", "detector_config", "else", "None", "\n", "feat_norm_fc", "=", "detector_config", "[", "'norm_type_fc'", "]", "if", "'norm_type_fc'", "in", "detector_config", "else", "None", "\n", "featurizer_conv", "=", "config", "[", "'featurizer_conv'", "]", "if", "'featurizer_conv'", "in", "config", "else", "[", "512", ",", "'M'", ",", "512", "]", "\n", "if", "self", ".", "splitFeatures", ":", "\n", "                ", "featurizer_conv2", "=", "config", "[", "'featurizer_conv_first'", "]", "if", "'featurizer_conv_first'", "in", "config", "else", "None", "\n", "featurizer_conv2", "=", "[", "detectorSavedFeatSize2", "+", "bbMasks", "]", "+", "featurizer_conv2", "#bbMasks are appended", "\n", "scaleX", "=", "1", "\n", "scaleY", "=", "1", "\n", "for", "a", "in", "featurizer_conv2", ":", "\n", "                    ", "if", "a", "==", "'M'", "or", "(", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'D'", ")", ":", "\n", "                        ", "scaleX", "*=", "2", "\n", "scaleY", "*=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'U'", ":", "\n", "                        ", "scaleX", "/=", "2", "\n", "scaleY", "/=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", ":", "4", "]", "==", "'long'", ":", "#long pool", "\n", "                        ", "scaleX", "*=", "3", "\n", "scaleY", "*=", "2", "\n", "", "", "assert", "(", "scaleX", "==", "scaleY", ")", "\n", "splitScaleDiff", "=", "scaleX", "\n", "self", ".", "pool_h", "=", "self", ".", "pool_h", "//", "splitScaleDiff", "\n", "self", ".", "pool_w", "=", "self", ".", "pool_w", "//", "splitScaleDiff", "\n", "layers", ",", "last_ch_relC", "=", "make_layers", "(", "featurizer_conv2", ",", "norm", "=", "feat_norm", ",", "dropout", "=", "True", ")", "\n", "self", ".", "relFeaturizerConv2", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "featurizer_conv", "=", "[", "detectorSavedFeatSize", "+", "last_ch_relC", "]", "+", "featurizer_conv", "\n", "", "else", ":", "\n", "                ", "featurizer_conv", "=", "[", "detectorSavedFeatSize", "+", "bbMasks", "]", "+", "featurizer_conv", "#bbMasks are appended", "\n", "", "scaleX", "=", "1", "\n", "scaleY", "=", "1", "\n", "for", "a", "in", "featurizer_conv", ":", "\n", "                ", "if", "a", "==", "'M'", "or", "(", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'D'", ")", ":", "\n", "                    ", "scaleX", "*=", "2", "\n", "scaleY", "*=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'U'", ":", "\n", "                    ", "scaleX", "/=", "2", "\n", "scaleY", "/=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", ":", "4", "]", "==", "'long'", ":", "#long pool", "\n", "                    ", "scaleX", "*=", "3", "\n", "scaleY", "*=", "2", "\n", "#self.scale=(scaleX,scaleY) this holds scale for detector", "\n", "", "", "fsizeX", "=", "self", ".", "pool_w", "//", "scaleX", "\n", "fsizeY", "=", "self", ".", "pool_h", "//", "scaleY", "\n", "layers", ",", "last_ch_relC", "=", "make_layers", "(", "featurizer_conv", ",", "norm", "=", "feat_norm", ",", "dropout", "=", "True", ")", "\n", "if", "featurizer_fc", "is", "None", ":", "#we don't have a FC layer, so channels need to be the same as graph model expects", "\n", "                ", "if", "last_ch_relC", "+", "self", ".", "numShapeFeats", "!=", "graph_in_channels", ":", "\n", "                    ", "new_layer", "=", "[", "last_ch_relC", ",", "'k1-{}'", ".", "format", "(", "graph_in_channels", "-", "self", ".", "numShapeFeats", ")", "]", "\n", "print", "(", "'WARNING: featurizer_conv did not line up with graph_in_channels, adding layer k1-{}'", ".", "format", "(", "graph_in_channels", "-", "self", ".", "numShapeFeats", ")", ")", "\n", "new_layer", ",", "last_ch_relC", "=", "make_layers", "(", "new_layer", ",", "norm", "=", "feat_norm", ",", "dropout", "=", "True", ")", "\n", "layers", "+=", "new_layer", "\n", "", "", "layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "(", "fsizeY", ",", "fsizeX", ")", ")", ")", "\n", "self", ".", "relFeaturizerConv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "roi_align", "=", "RoIAlign", "(", "(", "self", ".", "pool_h", ",", "self", ".", "pool_w", ")", ",", "1.0", "/", "detect_save_scale", ",", "-", "1", ")", "\n", "if", "self", ".", "use2ndFeatures", ":", "\n", "                ", "self", ".", "roi_align2", "=", "RoIAlign", "(", "(", "self", ".", "pool2_h", ",", "self", ".", "pool2_w", ")", ",", "1.0", "/", "detect_save2_scale", ",", "-", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "last_ch_relC", "=", "0", "\n", "\n", "#if config['graph_config']['arch'][:10]=='BinaryPair' or self.useShapeFeats=='only':", "\n", "#    feat_norm_fc=None", "\n", "", "if", "featurizer_fc", "is", "not", "None", ":", "\n", "            ", "featurizer_fc", "=", "[", "last_ch_relC", "+", "self", ".", "numShapeFeats", "]", "+", "featurizer_fc", "+", "[", "'FCnR{}'", ".", "format", "(", "graph_in_channels", ")", "]", "\n", "layers", ",", "last_ch_rel", "=", "make_layers", "(", "featurizer_fc", ",", "norm", "=", "feat_norm_fc", ",", "dropout", "=", "True", ")", "\n", "self", ".", "relFeaturizerFC", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relFeaturizerFC", "=", "None", "\n", "\n", "", "if", "self", ".", "useBBVisualFeats", ":", "\n", "            ", "featurizer", "=", "config", "[", "'bb_featurizer_conv'", "]", "if", "'bb_featurizer_conv'", "in", "config", "else", "None", "\n", "featurizer_fc", "=", "config", "[", "'bb_featurizer_fc'", "]", "if", "'bb_featurizer_fc'", "in", "config", "else", "None", "\n", "if", "self", ".", "useShapeFeats", "!=", "'only'", ":", "\n", "                ", "if", "featurizer_fc", "is", "None", ":", "\n", "                    ", "convOut", "=", "graph_in_channels", "-", "self", ".", "numShapeFeatsBB", "\n", "", "else", ":", "\n", "                    ", "convOut", "=", "featurizer_fc", "[", "0", "]", "-", "self", ".", "numShapeFeatsBB", "\n", "", "if", "featurizer", "is", "None", ":", "\n", "                    ", "convlayers", "=", "[", "nn", ".", "Conv2d", "(", "detectorSavedFeatSize", "+", "bbMasks_bb", ",", "convOut", ",", "kernel_size", "=", "(", "2", ",", "3", ")", ")", "]", "\n", "if", "featurizer_fc", "is", "not", "None", ":", "\n", "                        ", "convlayers", "+=", "[", "nn", ".", "GroupNorm", "(", "getGroupSize", "(", "convOut", ")", ",", "convOut", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "p", "=", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "]", "\n", "", "", "else", ":", "\n", "                    ", "if", "self", ".", "splitFeatures", ":", "\n", "                        ", "featurizer_conv2", "=", "config", "[", "'bb_featurizer_conv_first'", "]", "if", "'bb_featurizer_conv_first'", "in", "config", "else", "None", "\n", "featurizer_conv2", "=", "[", "detectorSavedFeatSize2", "+", "bbMasks_bb", "]", "+", "featurizer_conv2", "#bbMasks are appended", "\n", "scaleX", "=", "1", "\n", "scaleY", "=", "1", "\n", "for", "a", "in", "featurizer_conv2", ":", "\n", "                            ", "if", "a", "==", "'M'", "or", "(", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'D'", ")", ":", "\n", "                                ", "scaleX", "*=", "2", "\n", "scaleY", "*=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'U'", ":", "\n", "                                ", "scaleX", "/=", "2", "\n", "scaleY", "/=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", ":", "4", "]", "==", "'long'", ":", "#long pool", "\n", "                                ", "scaleX", "*=", "3", "\n", "scaleY", "*=", "2", "\n", "", "", "assert", "(", "scaleX", "==", "scaleY", ")", "\n", "splitScaleDiff", "=", "scaleX", "\n", "self", ".", "poolBB_h", "=", "self", ".", "poolBB_h", "//", "splitScaleDiff", "\n", "self", ".", "poolBB_w", "=", "self", ".", "poolBB_w", "//", "splitScaleDiff", "\n", "layers", ",", "last_ch_relC", "=", "make_layers", "(", "featurizer_conv2", ",", "norm", "=", "feat_norm", ",", "dropout", "=", "True", ")", "\n", "self", ".", "bbFeaturizerConv2", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "featurizer_conv", "=", "[", "detectorSavedFeatSize", "+", "last_ch_relC", "]", "+", "featurizer_conv", "\n", "", "else", ":", "\n", "                        ", "featurizer_conv", "=", "[", "detectorSavedFeatSize", "+", "bbMasks_bb", "]", "+", "featurizer", "\n", "", "if", "featurizer_fc", "is", "None", ":", "\n", "                         ", "featurizer_conv", "+=", "[", "'C3-{}'", ".", "format", "(", "convOut", ")", "]", "\n", "", "else", ":", "\n", "                         ", "featurizer_conv", "+=", "[", "convOut", "]", "\n", "", "convlayers", ",", "_", "=", "make_layers", "(", "featurizer_conv", ",", "norm", "=", "feat_norm", ",", "dropout", "=", "True", ")", "\n", "scaleX", "=", "1", "\n", "scaleY", "=", "1", "\n", "for", "a", "in", "featurizer_conv", ":", "\n", "                        ", "if", "a", "==", "'M'", "or", "(", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'D'", ")", ":", "\n", "                            ", "scaleX", "*=", "2", "\n", "scaleY", "*=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", "]", "==", "'U'", ":", "\n", "                            ", "scaleX", "/=", "2", "\n", "scaleY", "/=", "2", "\n", "", "elif", "type", "(", "a", ")", "is", "str", "and", "a", "[", "0", ":", "4", "]", "==", "'long'", ":", "#long pool", "\n", "                            ", "scaleX", "*=", "3", "\n", "scaleY", "*=", "2", "\n", "#self.scale=(scaleX,scaleY) this holds scale for detector", "\n", "", "", "fsizeX", "=", "self", ".", "poolBB_w", "//", "scaleX", "\n", "fsizeY", "=", "self", ".", "poolBB_h", "//", "scaleY", "\n", "convlayers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "(", "fsizeY", ",", "fsizeX", ")", ")", ")", "\n", "", "self", ".", "bbFeaturizerConv", "=", "nn", ".", "Sequential", "(", "*", "convlayers", ")", "\n", "\n", "self", ".", "roi_alignBB", "=", "RoIAlign", "(", "(", "self", ".", "poolBB_h", ",", "self", ".", "poolBB_w", ")", ",", "1.0", "/", "detect_save_scale", ",", "-", "1", ")", "\n", "if", "self", ".", "use2ndFeatures", ":", "\n", "                    ", "self", ".", "roi_alignBB2", "=", "RoIAlign", "(", "(", "self", ".", "poolBB2_h", ",", "self", ".", "poolBB2_w", ")", ",", "1.0", "/", "detect_save2_scale", ",", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "featurizer_fc", "=", "[", "self", ".", "numShapeFeatsBB", "]", "+", "featurizer_fc", "\n", "", "if", "featurizer_fc", "is", "not", "None", ":", "\n", "                ", "featurizer_fc", "=", "featurizer_fc", "+", "[", "'FCnR{}'", ".", "format", "(", "graph_in_channels", ")", "]", "\n", "layers", ",", "last_ch_node", "=", "make_layers", "(", "featurizer_fc", ",", "norm", "=", "feat_norm_fc", ")", "\n", "self", ".", "bbFeaturizerFC", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "bbFeaturizerFC", "=", "None", "\n", "\n", "\n", "", "", "self", ".", "pairer", "=", "eval", "(", "config", "[", "'graph_config'", "]", "[", "'arch'", "]", ")", "(", "config", "[", "'graph_config'", "]", ")", "\n", "self", ".", "useMetaGraph", "=", "type", "(", "self", ".", "pairer", ")", "is", "MetaGraphNet", "\n", "self", ".", "fixBiDirection", "=", "config", "[", "'fix_bi_dir'", "]", "if", "'fix_bi_dir'", "in", "config", "else", "False", "\n", "\n", "self", ".", "MAX_CANDIDATES", "=", "325", "#450", "\n", "self", ".", "MAX_GRAPH_SIZE", "=", "370", "\n", "if", "'max_graph_size'", "in", "config", ":", "\n", "            ", "self", ".", "MAX_GRAPH_SIZE", "=", "config", "[", "'max_graph_size'", "]", "\n", "", "if", "'max_graph_cand'", "in", "config", ":", "\n", "            ", "self", ".", "MAX_CANDIDATES", "=", "config", "[", "'max_graph_cand'", "]", "\n", "\n", "", "self", ".", "useOldDecay", "=", "config", "[", "'use_old_len_decay'", "]", "if", "'use_old_len_decay'", "in", "config", "else", "False", "\n", "\n", "self", ".", "relationshipProposal", "=", "config", "[", "'relationship_proposal'", "]", "if", "'relationship_proposal'", "in", "config", "else", "'line_of_sight'", "\n", "self", ".", "include_bb_conf", "=", "False", "\n", "if", "self", ".", "relationshipProposal", "==", "'feature_nn'", ":", "\n", "            ", "self", ".", "include_bb_conf", "=", "True", "\n", "#num_classes = config['num_class']", "\n", "num_bb_feat", "=", "self", ".", "numBBTypes", "+", "(", "1", "if", "self", ".", "detector", ".", "predNumNeighbors", "else", "0", ")", "#config['graph_config']['bb_out']", "\n", "self", ".", "rel_prop_nn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "26", "+", "2", "*", "num_bb_feat", ",", "64", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.25", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "1", ")", "\n", ")", "\n", "self", ".", "percent_rel_to_keep", "=", "config", "[", "'percent_rel_to_keep'", "]", "if", "'percent_rel_to_keep'", "in", "config", "else", "0.2", "\n", "self", ".", "max_rel_to_keep", "=", "config", "[", "'max_rel_to_keep'", "]", "if", "'max_rel_to_keep'", "in", "config", "else", "3000", "\n", "\n", "\n", "", "if", "'DEBUG'", "in", "config", ":", "\n", "            ", "self", ".", "detector", ".", "setDEBUG", "(", ")", "\n", "self", ".", "setDEBUG", "(", ")", "\n", "self", ".", "debug", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "debug", "=", "False", "\n", "", "if", "type", "(", "self", ".", "pairer", ")", "is", "BinaryPairReal", "and", "type", "(", "self", ".", "pairer", ".", "shape_layers", ")", "is", "not", "nn", ".", "Sequential", ":", "\n", "            ", "print", "(", "\"Shape feats aligned to feat dataset.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.unfreeze": [[328, 334], ["pairing_graph.PairingGraph.detector.parameters", "print"], "methods", ["None"], ["", "", "def", "unfreeze", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "detector_frozen", ":", "\n", "            ", "for", "param", "in", "self", ".", "detector", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "param", ".", "will_use_grad", "\n", "", "self", ".", "detector_frozen", "=", "False", "\n", "print", "(", "'Unfroze detector'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.forward": [[336, 473], ["pairing_graph.PairingGraph.detector", "bbPredictions[].max().item", "max", "print", "pdb.set_trace", "utils.yolo_tools.non_max_sup_dist", "utils.yolo_tools.non_max_sup_iou", "len", "bbPredictions.detach.detach.detach", "torch.cat.size", "torch.cat.size", "torch.cat.size", "bbPredictions[].max", "bbPredictions.detach.detach.cpu", "bbPredictions.detach.detach.cpu", "bbPredictions.detach.detach.size", "pairing_graph.PairingGraph.createGraph", "pairing_graph.PairingGraph.pairer", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "image.size", "image.size", "pairing_graph.PairingGraph.createGraph", "pairing_graph.PairingGraph.pairer", "pairing_graph.PairingGraph.createGraph", "pairing_graph.PairingGraph.createGraph", "enumerate", "pairing_graph.PairingGraph.pairer", "pairing_graph.PairingGraph.pairer", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bbOuts[].detach", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pdb.set_trace", "image.size", "image.size", "image.size", "image.size", "image.size", "image.size", "bbOuts[].detach", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "gtNNs.float", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "conf.to", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.cat.size", "torch.cat.size", "torch.cat.size", "len", "relOuts.size", "relOuts.size"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.non_max_sup_dist", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.non_max_sup_iou", "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.createGraph", "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.createGraph", "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.createGraph", "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.createGraph"], ["", "", "def", "forward", "(", "self", ",", "image", ",", "gtBBs", "=", "None", ",", "gtNNs", "=", "None", ",", "useGTBBs", "=", "False", ",", "otherThresh", "=", "None", ",", "otherThreshIntur", "=", "None", ",", "hard_detect_limit", "=", "300", ",", "debug", "=", "False", ",", "old_nn", "=", "False", ")", ":", "\n", "##tic=timeit.default_timer()", "\n", "        ", "bbPredictions", ",", "offsetPredictions", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "detector", "(", "image", ")", "\n", "_", "=", "None", "\n", "saved_features", "=", "self", ".", "detector", ".", "saved_features", "\n", "self", ".", "detector", ".", "saved_features", "=", "None", "\n", "if", "self", ".", "use2ndFeatures", ":", "\n", "            ", "saved_features2", "=", "self", ".", "detector", ".", "saved_features2", "\n", "", "else", ":", "\n", "            ", "saved_features2", "=", "None", "\n", "##print('detector: {}'.format(timeit.default_timer()-tic))", "\n", "\n", "", "if", "saved_features", "is", "None", ":", "\n", "            ", "print", "(", "'ERROR:no saved features!'", ")", "\n", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "\n", "##tic=timeit.default_timer()", "\n", "", "maxConf", "=", "bbPredictions", "[", ":", ",", ":", ",", "0", "]", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "if", "otherThreshIntur", "is", "None", ":", "\n", "            ", "confThreshMul", "=", "self", ".", "confThresh", "\n", "", "else", ":", "\n", "            ", "confThreshMul", "=", "self", ".", "confThresh", "*", "(", "1", "-", "otherThreshIntur", ")", "+", "otherThresh", "*", "otherThreshIntur", "\n", "", "threshConf", "=", "max", "(", "maxConf", "*", "confThreshMul", ",", "0.5", ")", "\n", "if", "self", ".", "rotation", ":", "\n", "            ", "bbPredictions", "=", "non_max_sup_dist", "(", "bbPredictions", ".", "cpu", "(", ")", ",", "threshConf", ",", "2.5", ",", "hard_detect_limit", ")", "\n", "", "else", ":", "\n", "            ", "bbPredictions", "=", "non_max_sup_iou", "(", "bbPredictions", ".", "cpu", "(", ")", ",", "threshConf", ",", "0.4", ",", "hard_detect_limit", ")", "\n", "#I'm assuming batch size of one", "\n", "", "assert", "(", "len", "(", "bbPredictions", ")", "==", "1", ")", "\n", "bbPredictions", "=", "bbPredictions", "[", "0", "]", "\n", "if", "self", ".", "no_grad_feats", ":", "\n", "            ", "bbPredictions", "=", "bbPredictions", ".", "detach", "(", ")", "\n", "##print('process boxes: {}'.format(timeit.default_timer()-tic))", "\n", "#bbPredictions should be switched for GT for training? Then we can easily use BCE loss. ", "\n", "#Otherwise we have to to alignment first", "\n", "", "if", "not", "useGTBBs", ":", "\n", "            ", "if", "bbPredictions", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "                ", "return", "bbPredictions", ",", "offsetPredictions", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "", "if", "self", ".", "include_bb_conf", ":", "\n", "                ", "useBBs", "=", "bbPredictions", "\n", "", "else", ":", "\n", "                ", "useBBs", "=", "bbPredictions", "[", ":", ",", "1", ":", "]", "#remove confidence score", "\n", "", "", "elif", "useGTBBs", "==", "'saved'", ":", "\n", "            ", "if", "self", ".", "include_bb_conf", ":", "\n", "                ", "useBBs", "=", "gtBBs", "\n", "", "else", ":", "\n", "                ", "useBBs", "=", "gtBBs", "[", ":", ",", "1", ":", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "gtBBs", "is", "None", ":", "\n", "                ", "return", "bbPredictions", ",", "offsetPredictions", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "", "useBBs", "=", "gtBBs", "[", "0", ",", ":", ",", "0", ":", "5", "]", "\n", "if", "self", ".", "useShapeFeats", "or", "self", ".", "relationshipProposal", "==", "'feature_nn'", ":", "\n", "                ", "classes", "=", "gtBBs", "[", "0", ",", ":", ",", "13", ":", "]", "\n", "#pos = random.uniform(0.51,0.99)", "\n", "#neg = random.uniform(0.01,0.49)", "\n", "#classes = torch.where(classes==0,torch.tensor(neg).to(classes.device),torch.tensor(pos).to(classes.device))", "\n", "pos", "=", "torch", ".", "rand_like", "(", "classes", ")", "/", "2", "+", "0.5", "\n", "neg", "=", "torch", ".", "rand_like", "(", "classes", ")", "/", "2", "\n", "classes", "=", "torch", ".", "where", "(", "classes", "==", "0", ",", "neg", ",", "pos", ")", "\n", "if", "self", ".", "detector", ".", "predNumNeighbors", ":", "\n", "                    ", "nns", "=", "gtNNs", ".", "float", "(", ")", "[", "0", ",", ":", ",", "None", "]", "\n", "#nns += torch.rand_like(nns)/1.5", "\n", "nns", "+=", "(", "2", "*", "torch", ".", "rand_like", "(", "nns", ")", "-", "1", ")", "\n", "useBBs", "=", "torch", ".", "cat", "(", "(", "useBBs", ",", "nns", ",", "classes", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "useBBs", "=", "torch", ".", "cat", "(", "(", "useBBs", ",", "classes", ")", ",", "dim", "=", "1", ")", "\n", "", "", "if", "self", ".", "include_bb_conf", ":", "\n", "#fake some confifence values", "\n", "                ", "conf", "=", "torch", ".", "rand", "(", "useBBs", ".", "size", "(", "0", ")", ",", "1", ")", "*", "0.33", "+", "0.66", "\n", "useBBs", "=", "torch", ".", "cat", "(", "(", "conf", ".", "to", "(", "useBBs", ".", "device", ")", ",", "useBBs", ")", ",", "dim", "=", "1", ")", "\n", "", "", "if", "useBBs", ".", "size", "(", "0", ")", ">", "1", ":", "\n", "            ", "embeddings", "=", "None", "\n", "if", "self", ".", "useMetaGraph", ":", "\n", "                ", "graph", ",", "relIndexes", ",", "rel_prop_scores", "=", "self", ".", "createGraph", "(", "useBBs", ",", "saved_features", ",", "saved_features2", ",", "image", ".", "size", "(", "-", "2", ")", ",", "image", ".", "size", "(", "-", "1", ")", ",", "text_emb", "=", "embeddings", ")", "\n", "if", "graph", "is", "None", ":", "\n", "                    ", "return", "bbPredictions", ",", "offsetPredictions", ",", "None", ",", "None", ",", "None", ",", "rel_prop_scores", "\n", "", "bbOuts", ",", "relOuts", "=", "self", ".", "pairer", "(", "graph", ")", "\n", "if", "self", ".", "fixBiDirection", "or", "not", "self", ".", "training", ":", "\n", "                    ", "relIndexes", "=", "relIndexes", "[", ":", "len", "(", "relIndexes", ")", "//", "2", "]", "\n", "", "if", "self", ".", "fixBiDirection", ":", "\n", "                    ", "relOuts", "=", "(", "relOuts", "[", ":", "relOuts", ".", "size", "(", "0", ")", "//", "2", "]", "+", "relOuts", "[", "relOuts", ".", "size", "(", "0", ")", "//", "2", ":", "]", ")", "/", "2", "#average two directions of edge", "\n", "", "", "else", ":", "\n", "#bb_features, adjacencyMatrix, rel_features = self.createGraph(useBBs,final_features)", "\n", "                ", "if", "self", ".", "training", ":", "#0.3987808480 0.398469038200 not a big difference, but it's \"the right\" thing to do", "\n", "                    ", "if", "debug", ":", "\n", "                        ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "bbAndRel_features", ",", "adjacencyMatrix", ",", "numBBs", ",", "numRel", ",", "relIndexes", ",", "rel_prop_scores", "=", "self", ".", "createGraph", "(", "useBBs", ",", "saved_features", ",", "saved_features2", ",", "image", ".", "size", "(", "-", "2", ")", ",", "image", ".", "size", "(", "-", "1", ")", ",", "text_emb", "=", "embeddings", ")", "# ,debug_image=image)", "\n", "if", "bbAndRel_features", "is", "None", ":", "\n", "                        ", "return", "bbPredictions", ",", "offsetPredictions", ",", "None", ",", "None", ",", "None", ",", "rel_prop_scores", "\n", "\n", "##tic=timeit.default_timer()", "\n", "#nodeOuts, relOuts = self.pairer(bb_features, adjacencyMatrix, rel_features)", "\n", "", "bbOuts", ",", "relOuts", "=", "self", ".", "pairer", "(", "bbAndRel_features", ",", "adjacencyMatrix", ",", "numBBs", ")", "\n", "", "else", ":", "\n", "#If evaluating, force the masks of relationships to be the two ways and average", "\n", "                    ", "bbAndRel_features", ",", "adjacencyMatrix", ",", "numBBs", ",", "numRel", ",", "relIndexes", ",", "rel_prop_scores", "=", "self", ".", "createGraph", "(", "useBBs", ",", "saved_features", ",", "saved_features2", ",", "image", ".", "size", "(", "-", "2", ")", ",", "image", ".", "size", "(", "-", "1", ")", ",", "text_emb", "=", "embeddings", ",", "flip", "=", "False", ")", "\n", "if", "bbAndRel_features", "is", "None", ":", "\n", "                        ", "return", "bbPredictions", ",", "offsetPredictions", ",", "None", ",", "None", ",", "None", ",", "rel_prop_scores", "\n", "\n", "", "bbAndRel_features_B", ",", "adjacencyMatrix_B", ",", "numBBs_B", ",", "numRel_B", ",", "relIndexes_B", ",", "rel_prop_scores_B", "=", "self", ".", "createGraph", "(", "useBBs", ",", "saved_features", ",", "saved_features2", ",", "image", ".", "size", "(", "-", "2", ")", ",", "image", ".", "size", "(", "-", "1", ")", ",", "text_emb", "=", "embeddings", ",", "flip", "=", "True", ")", "\n", "\n", "assert", "(", "numBBs", "==", "numBBs_B", "and", "numRel", "==", "numRel_B", ")", "\n", "for", "i", ",", "(", "n1", ",", "n2", ")", "in", "enumerate", "(", "relIndexes", ")", ":", "\n", "                        ", "assert", "(", "relIndexes_B", "[", "i", "]", "[", "0", "]", "==", "n1", "and", "relIndexes_B", "[", "i", "]", "[", "1", "]", "==", "n2", ")", "\n", "", "bbOuts", ",", "relOuts", "=", "self", ".", "pairer", "(", "bbAndRel_features", ",", "adjacencyMatrix", ",", "numBBs", ")", "\n", "bbOuts_B", ",", "relOuts_B", "=", "self", ".", "pairer", "(", "bbAndRel_features_B", ",", "adjacencyMatrix", ",", "numBBs", ")", "\n", "#Average results together", "\n", "if", "bbOuts", "is", "not", "None", ":", "\n", "                        ", "bbOuts", "=", "(", "bbOuts", "+", "bbOuts_B", ")", "/", "2", "\n", "", "relOuts", "=", "(", "relOuts", "+", "relOuts_B", ")", "/", "2", "\n", "", "if", "bbOuts", "is", "not", "None", ":", "\n", "                    ", "bbOuts", "=", "bbOuts", "[", ":", ",", "None", ",", ":", "]", "#introduce \"time/rep\" dimension", "\n", "", "relOuts", "=", "relOuts", "[", ":", ",", "None", ",", ":", "]", "#introduce \"time/rep\" dimension", "\n", "#bbOuts = graphOut[:numBBs]", "\n", "#relOuts = graphOut[numBBs:]", "\n", "##print('pairer: {}'.format(timeit.default_timer()-tic))", "\n", "\n", "#adjacencyMatrix = torch.zeros((bbPredictions.size(1),bbPredictions.size(1)))", "\n", "#for rel in relOuts:", "\n", "#    i,j,a=graphToDetectionsMap(", "\n", "", "if", "self", ".", "predNN", ":", "\n", "                ", "if", "bbOuts", ".", "size", "(", "2", ")", ">", "1", ":", "\n", "#bbOuts[:,0]+=1 #make pred range -1 (to pred o nieghbors)", "\n", "                    ", "bbOuts", "=", "torch", ".", "cat", "(", "(", "bbOuts", "[", ":", ",", ":", ",", "0", ":", "1", "]", "+", "1", ",", "bbOuts", "[", ":", ",", ":", ",", "1", ":", "]", ")", ",", "dim", "=", "2", ")", "#remove inplace operation?", "\n", "", "else", ":", "\n", "                    ", "bbOuts", "=", "bbOuts", "+", "1", "\n", "", "if", "not", "old_nn", "and", "self", ".", "detector", ".", "predNumNeighbors", "and", "not", "useGTBBs", ":", "\n", "                    ", "bbPredictions", "[", ":", ",", "6", "]", "=", "bbOuts", "[", ":", ",", "-", "1", ",", "0", "]", ".", "detach", "(", ")", "\n", "\n", "", "", "if", "self", ".", "predClass", ":", "\n", "                ", "startIndex", "=", "6", "+", "self", ".", "detector", ".", "predNumNeighbors", "\n", "if", "not", "useGTBBs", ":", "\n", "                    ", "bbPredictions", "[", ":", ",", "startIndex", ":", "startIndex", "+", "self", ".", "numBBTypes", "]", "=", "torch", ".", "sigmoid", "(", "bbOuts", "[", ":", ",", "-", "1", ",", "self", ".", "predNN", ":", "self", ".", "predNN", "+", "self", ".", "numBBTypes", "]", ".", "detach", "(", ")", ")", "\n", "", "", "return", "bbPredictions", ",", "offsetPredictions", ",", "relOuts", ",", "relIndexes", ",", "bbOuts", ",", "rel_prop_scores", "\n", "", "else", ":", "\n", "            ", "return", "bbPredictions", ",", "offsetPredictions", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.createGraph": [[474, 894], ["torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "tlX.cpu.cpu.cpu", "tlY.cpu.cpu.cpu", "trX.cpu.cpu.cpu", "trY.cpu.cpu.cpu", "blX.cpu.cpu.cpu", "blY.cpu.cpu.cpu", "brX.cpu.cpu.cpu", "brY.cpu.cpu.cpu", "enumerate", "bbs.size", "len", "NotImplemented", "pairing_graph.PairingGraph.selectLineOfSightEdges", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "pairing_graph.PairingGraph.roi_align", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "utils.waitKey", "pairing_graph.PairingGraph.relFeaturizerConv", "torch.cat.view", "torch.cat.view", "torch.cat.view", "pairing_graph.PairingGraph.relFeaturizerFC", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "edgeFeatures.repeat.repeat.repeat", "bbs.detach", "pairing_graph.PairingGraph.selectFeatureNNEdges", "max", "min", "max", "min", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "pairing_graph.PairingGraph.roi_align2", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.size", "torch.cat.size", "torch.cat.size", "len", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "skimage.draw.polygon", "skimage.draw.polygon", "utils.imshow", "utils.imshow", "utils.imshow", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pairing_graph.PairingGraph.relFeaturizerConv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "features.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "bbs.size", "round", "round", "round", "round", "utils.waitKey", "pairing_graph.PairingGraph.roi_alignBB", "pairing_graph.PairingGraph.bbFeaturizerConv", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "pairing_graph.PairingGraph.bbFeaturizerFC", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "range", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.LongTensor().t().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "numOfNeighbors.to.to.to", "bbs.detach", "len", "min", "max", "min", "max", "debug_image[].cpu", "crop.expand.expand.numpy().transpose", "debug_images.append", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "masks[].numpy().transpose", "debug_masks[].numpy", "bbs.size", "bbs.size", "bbs.size", "min", "max", "min", "max", "min", "max", "min", "max", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "round", "round", "round", "round", "round", "round", "round", "round", "skimage.draw.polygon", "debug_image[].cpu", "crop.expand.expand.numpy().transpose", "utils.imshow", "utils.imshow", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "pairing_graph.PairingGraph.roi_alignBB2", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "edges.append", "edges.append", "set", "list", "torch.cat.size", "torch.cat.size", "torch.cat.size", "edges.append", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "crop.expand.expand.size", "crop.expand.expand.expand", "bbs.size", "skimage.draw.polygon", "len", "ValueError", "torch.upsample", "torch.upsample", "torch.upsample", "debug_masks.append", "type", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "tlY[].item", "trY[].item", "blY[].item", "brY[].item", "tlY[].item", "trY[].item", "blY[].item", "brY[].item", "tlX[].item", "trX[].item", "blX[].item", "brX[].item", "tlX[].item", "trX[].item", "blX[].item", "brX[].item", "crop.expand.expand.size", "crop.expand.expand.expand", "torch.cat().numpy().transpose", "torch.cat().numpy().transpose", "torch.cat().numpy().transpose", "torch.cat().numpy().transpose", "torch.cat().numpy().transpose", "torch.cat().numpy().transpose", "torch.cat().numpy().transpose", "torch.cat().numpy().transpose", "torch.cat().numpy().transpose", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pairing_graph.PairingGraph.bbFeaturizerConv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bbs.size", "len", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.LongTensor().t", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "min.item", "max.item", "min.item", "max.item", "crop.expand.expand.size", "crop.expand.expand.size", "crop.expand.expand.numpy", "random.random", "type", "type", "masks[].numpy", "torch.upsample", "torch.upsample", "torch.upsample", "crop.expand.expand.size", "crop.expand.expand.size", "crop.expand.expand.numpy", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "int", "int", "int", "int", "round", "round", "round", "round", "int", "int", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "list.add", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "int", "int", "int", "int", "rois[].item", "round", "rois[].item", "round", "rois[].item", "round", "rois[].item", "round", "round", "round", "int", "int", "int", "int", "int", "tlY[].item", "tlX[].item", "tlY[].item", "tlX[].item", "rois[].item", "rois[].item", "rois[].item", "rois[].item", "rois[].item", "round", "rois[].item", "round", "int", "int", "int", "tlY[].item", "tlX[].item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "brY[].item", "brX[].item", "brY[].item", "brX[].item", "rois[].item", "rois[].item", "int", "brY[].item", "brX[].item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.selectLineOfSightEdges", "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.selectFeatureNNEdges", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow"], ["", "", "def", "createGraph", "(", "self", ",", "bbs", ",", "features", ",", "features2", ",", "imageHeight", ",", "imageWidth", ",", "text_emb", "=", "None", ",", "flip", "=", "None", ",", "debug_image", "=", "None", ")", ":", "\n", "        ", "if", "text_emb", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplemented", "(", "'having appened text emb yet'", ")", "\n", "##tic=timeit.default_timer()", "\n", "", "if", "self", ".", "relationshipProposal", "==", "'line_of_sight'", ":", "\n", "            ", "candidates", "=", "self", ".", "selectLineOfSightEdges", "(", "bbs", ".", "detach", "(", ")", ",", "imageHeight", ",", "imageWidth", ")", "\n", "rel_prop_scores", "=", "None", "\n", "", "elif", "self", ".", "relationshipProposal", "==", "'feature_nn'", ":", "\n", "            ", "candidates", ",", "rel_prop_scores", "=", "self", ".", "selectFeatureNNEdges", "(", "bbs", ".", "detach", "(", ")", ",", "imageHeight", ",", "imageWidth", ",", "features", ".", "device", ")", "\n", "bbs", "=", "bbs", "[", ":", ",", "1", ":", "]", "#discard confidence, we kept it so the proposer could see them", "\n", "##print('  candidate: {}'.format(timeit.default_timer()-tic))", "\n", "", "if", "len", "(", "candidates", ")", "==", "0", ":", "\n", "            ", "if", "self", ".", "useMetaGraph", ":", "\n", "                ", "return", "None", ",", "None", ",", "None", "\n", "", "else", ":", "\n", "                ", "return", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "##tic=timeit.default_timer()", "\n", "\n", "#stackedEdgeFeatWindows = torch.FloatTensor((len(candidates),features.size(1)+2,self.relWindowSize,self.relWindowSize)).to(features.device())", "\n", "\n", "#get corners from bb predictions", "\n", "", "", "x", "=", "bbs", "[", ":", ",", "0", "]", "\n", "y", "=", "bbs", "[", ":", ",", "1", "]", "\n", "r", "=", "bbs", "[", ":", ",", "2", "]", "\n", "h", "=", "bbs", "[", ":", ",", "3", "]", "\n", "w", "=", "bbs", "[", ":", ",", "4", "]", "\n", "cos_r", "=", "torch", ".", "cos", "(", "r", ")", "\n", "sin_r", "=", "torch", ".", "sin", "(", "r", ")", "\n", "tlX", "=", "-", "w", "*", "cos_r", "+", "-", "h", "*", "sin_r", "+", "x", "\n", "tlY", "=", "w", "*", "sin_r", "+", "-", "h", "*", "cos_r", "+", "y", "\n", "trX", "=", "w", "*", "cos_r", "+", "-", "h", "*", "sin_r", "+", "x", "\n", "trY", "=", "-", "w", "*", "sin_r", "+", "-", "h", "*", "cos_r", "+", "y", "\n", "brX", "=", "w", "*", "cos_r", "+", "h", "*", "sin_r", "+", "x", "\n", "brY", "=", "-", "w", "*", "sin_r", "+", "h", "*", "cos_r", "+", "y", "\n", "blX", "=", "-", "w", "*", "cos_r", "+", "h", "*", "sin_r", "+", "x", "\n", "blY", "=", "w", "*", "sin_r", "+", "h", "*", "cos_r", "+", "y", "\n", "\n", "tlX", "=", "tlX", ".", "cpu", "(", ")", "\n", "tlY", "=", "tlY", ".", "cpu", "(", ")", "\n", "trX", "=", "trX", ".", "cpu", "(", ")", "\n", "trY", "=", "trY", ".", "cpu", "(", ")", "\n", "blX", "=", "blX", ".", "cpu", "(", ")", "\n", "blY", "=", "blY", ".", "cpu", "(", ")", "\n", "brX", "=", "brX", ".", "cpu", "(", ")", "\n", "brY", "=", "brY", ".", "cpu", "(", ")", "\n", "\n", "if", "debug_image", "is", "not", "None", ":", "\n", "            ", "debug_images", "=", "[", "]", "\n", "debug_masks", "=", "[", "]", "\n", "\n", "", "if", "self", ".", "useShapeFeats", "!=", "'only'", ":", "\n", "#get axis aligned rectangle from corners", "\n", "            ", "rois", "=", "torch", ".", "zeros", "(", "(", "len", "(", "candidates", ")", ",", "5", ")", ")", "#(batchIndex,x1,y1,x2,y2) as expected by ROI Align", "\n", "for", "i", ",", "(", "index1", ",", "index2", ")", "in", "enumerate", "(", "candidates", ")", ":", "\n", "                ", "maxX", "=", "max", "(", "tlX", "[", "index1", "]", ",", "tlX", "[", "index2", "]", ",", "trX", "[", "index1", "]", ",", "trX", "[", "index2", "]", ",", "blX", "[", "index1", "]", ",", "blX", "[", "index2", "]", ",", "brX", "[", "index1", "]", ",", "brX", "[", "index2", "]", ")", "\n", "minX", "=", "min", "(", "tlX", "[", "index1", "]", ",", "tlX", "[", "index2", "]", ",", "trX", "[", "index1", "]", ",", "trX", "[", "index2", "]", ",", "blX", "[", "index1", "]", ",", "blX", "[", "index2", "]", ",", "brX", "[", "index1", "]", ",", "brX", "[", "index2", "]", ")", "\n", "maxY", "=", "max", "(", "tlY", "[", "index1", "]", ",", "tlY", "[", "index2", "]", ",", "trY", "[", "index1", "]", ",", "trY", "[", "index2", "]", ",", "blY", "[", "index1", "]", ",", "blY", "[", "index2", "]", ",", "brY", "[", "index1", "]", ",", "brY", "[", "index2", "]", ")", "\n", "minY", "=", "min", "(", "tlY", "[", "index1", "]", ",", "tlY", "[", "index2", "]", ",", "trY", "[", "index1", "]", ",", "trY", "[", "index2", "]", ",", "blY", "[", "index1", "]", ",", "blY", "[", "index2", "]", ",", "brY", "[", "index1", "]", ",", "brY", "[", "index2", "]", ")", "\n", "if", "self", ".", "expandedRelContext", "is", "not", "None", ":", "\n", "                    ", "maxX", "=", "min", "(", "maxX", ".", "item", "(", ")", "+", "self", ".", "expandedRelContext", ",", "imageWidth", "-", "1", ")", "\n", "minX", "=", "max", "(", "minX", ".", "item", "(", ")", "-", "self", ".", "expandedRelContext", ",", "0", ")", "\n", "maxY", "=", "min", "(", "maxY", ".", "item", "(", ")", "+", "self", ".", "expandedRelContext", ",", "imageHeight", "-", "1", ")", "\n", "minY", "=", "max", "(", "minY", ".", "item", "(", ")", "-", "self", ".", "expandedRelContext", ",", "0", ")", "\n", "", "rois", "[", "i", ",", "1", "]", "=", "minX", "\n", "rois", "[", "i", ",", "2", "]", "=", "minY", "\n", "rois", "[", "i", ",", "3", "]", "=", "maxX", "\n", "rois", "[", "i", ",", "4", "]", "=", "maxY", "\n", "\n", "\n", "\n", "\n", "###DEBUG", "\n", "if", "debug_image", "is", "not", "None", "and", "i", "<", "5", ":", "\n", "                    ", "assert", "(", "self", ".", "rotation", "==", "False", ")", "\n", "#print('crop {}: ({},{}), ({},{})'.format(i,minX.item(),maxX.item(),minY.item(),maxY.item()))", "\n", "#print(bbs[index1])", "\n", "#print(bbs[index2])", "\n", "crop", "=", "debug_image", "[", "0", ",", ":", ",", "int", "(", "minY", ")", ":", "int", "(", "maxY", ")", ",", "int", "(", "minX", ")", ":", "int", "(", "maxX", ")", "+", "1", "]", ".", "cpu", "(", ")", "\n", "crop", "=", "(", "2", "-", "crop", ")", "/", "2", "\n", "if", "crop", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "                        ", "crop", "=", "crop", ".", "expand", "(", "3", ",", "crop", ".", "size", "(", "1", ")", ",", "crop", ".", "size", "(", "2", ")", ")", "\n", "", "crop", "[", "0", ",", "int", "(", "tlY", "[", "index1", "]", ".", "item", "(", ")", "-", "minY", ")", ":", "int", "(", "brY", "[", "index1", "]", ".", "item", "(", ")", "-", "minY", ")", "+", "1", ",", "int", "(", "tlX", "[", "index1", "]", ".", "item", "(", ")", "-", "minX", ")", ":", "int", "(", "brX", "[", "index1", "]", ".", "item", "(", ")", "-", "minX", ")", "+", "1", "]", "*=", "0.5", "\n", "crop", "[", "1", ",", "int", "(", "tlY", "[", "index2", "]", ".", "item", "(", ")", "-", "minY", ")", ":", "int", "(", "brY", "[", "index2", "]", ".", "item", "(", ")", "-", "minY", ")", "+", "1", ",", "int", "(", "tlX", "[", "index2", "]", ".", "item", "(", ")", "-", "minX", ")", ":", "int", "(", "brX", "[", "index2", "]", ".", "item", "(", ")", "-", "minX", ")", "+", "1", "]", "*=", "0.5", "\n", "crop", "=", "crop", ".", "numpy", "(", ")", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "#img_f.imshow('crop {}'.format(i),crop)", "\n", "debug_images", ".", "append", "(", "crop", ")", "\n", "#import pdb;pdb.set_trace()", "\n", "###", "\n", "#if debug_image is not None:", "\n", "#    img_f.waitKey()", "\n", "\n", "#crop from feats, ROI pool", "\n", "", "", "stackedEdgeFeatWindows", "=", "self", ".", "roi_align", "(", "features", ",", "rois", ".", "to", "(", "features", ".", "device", ")", ")", "\n", "if", "features2", "is", "not", "None", ":", "\n", "                ", "stackedEdgeFeatWindows2", "=", "self", ".", "roi_align2", "(", "features2", ",", "rois", ".", "to", "(", "features", ".", "device", ")", ")", "\n", "if", "not", "self", ".", "splitFeatures", ":", "\n", "                    ", "stackedEdgeFeatWindows", "=", "torch", ".", "cat", "(", "(", "stackedEdgeFeatWindows", ",", "stackedEdgeFeatWindows2", ")", ",", "dim", "=", "1", ")", "\n", "stackedEdgeFeatWindows2", "=", "None", "\n", "\n", "#create and add masks", "\n", "", "", "if", "self", ".", "expandedRelContext", "is", "not", "None", ":", "\n", "#We're going to add a third mask for all bbs, which we'll precompute here", "\n", "                ", "numMasks", "=", "3", "\n", "allMasks", "=", "torch", ".", "zeros", "(", "imageHeight", ",", "imageWidth", ")", "\n", "if", "self", ".", "use_fixed_masks", ":", "\n", "                    ", "for", "bbIdx", "in", "range", "(", "bbs", ".", "size", "(", "0", ")", ")", ":", "\n", "                        ", "rr", ",", "cc", "=", "draw", ".", "polygon", "(", "[", "tlY", "[", "bbIdx", "]", ",", "trY", "[", "bbIdx", "]", ",", "brY", "[", "bbIdx", "]", ",", "blY", "[", "bbIdx", "]", "]", ",", "[", "tlX", "[", "bbIdx", "]", ",", "trX", "[", "bbIdx", "]", ",", "brX", "[", "bbIdx", "]", ",", "blX", "[", "bbIdx", "]", "]", ",", "[", "imageHeight", ",", "imageWidth", "]", ")", "\n", "allMasks", "[", "rr", ",", "cc", "]", "=", "1", "\n", "", "", "", "else", ":", "\n", "                ", "numMasks", "=", "2", "\n", "", "masks", "=", "torch", ".", "zeros", "(", "stackedEdgeFeatWindows", ".", "size", "(", "0", ")", ",", "numMasks", ",", "self", ".", "pool2_h", ",", "self", ".", "pool2_w", ")", "\n", "", "if", "self", ".", "useShapeFeats", ":", "\n", "            ", "shapeFeats", "=", "torch", ".", "FloatTensor", "(", "len", "(", "candidates", ")", ",", "self", ".", "numShapeFeats", ")", "\n", "", "if", "self", ".", "detector", ".", "predNumNeighbors", ":", "\n", "            ", "extraPred", "=", "1", "\n", "", "else", ":", "\n", "            ", "extraPred", "=", "0", "\n", "\n", "\n", "#make instance specific masks and make shape (spatial) features", "\n", "", "for", "i", ",", "(", "index1", ",", "index2", ")", "in", "enumerate", "(", "candidates", ")", ":", "\n", "            ", "if", "self", ".", "useShapeFeats", "!=", "'only'", ":", "\n", "#... or make it so index1 is always to top-left one", "\n", "#TODO, not random for eval", "\n", "                ", "if", "(", "random", ".", "random", "(", ")", "<", "0.5", "and", "flip", "is", "None", "and", "not", "self", ".", "debug", ")", "or", "flip", ":", "\n", "                    ", "temp", "=", "index1", "\n", "index1", "=", "index2", "\n", "index2", "=", "temp", "\n", "\n", "#warp to roi space", "\n", "", "feature_w", "=", "rois", "[", "i", ",", "3", "]", "-", "rois", "[", "i", ",", "1", "]", "+", "1", "\n", "feature_h", "=", "rois", "[", "i", ",", "4", "]", "-", "rois", "[", "i", ",", "2", "]", "+", "1", "\n", "w_m", "=", "self", ".", "pool2_w", "/", "feature_w", "\n", "h_m", "=", "self", ".", "pool2_h", "/", "feature_h", "\n", "\n", "tlX1", "=", "round", "(", "(", "(", "tlX", "[", "index1", "]", "-", "rois", "[", "i", ",", "1", "]", ")", "*", "w_m", ")", ".", "item", "(", ")", ")", "\n", "trX1", "=", "round", "(", "(", "(", "trX", "[", "index1", "]", "-", "rois", "[", "i", ",", "1", "]", ")", "*", "w_m", ")", ".", "item", "(", ")", ")", "\n", "brX1", "=", "round", "(", "(", "(", "brX", "[", "index1", "]", "-", "rois", "[", "i", ",", "1", "]", ")", "*", "w_m", ")", ".", "item", "(", ")", ")", "\n", "blX1", "=", "round", "(", "(", "(", "blX", "[", "index1", "]", "-", "rois", "[", "i", ",", "1", "]", ")", "*", "w_m", ")", ".", "item", "(", ")", ")", "\n", "tlY1", "=", "round", "(", "(", "(", "tlY", "[", "index1", "]", "-", "rois", "[", "i", ",", "2", "]", ")", "*", "h_m", ")", ".", "item", "(", ")", ")", "\n", "trY1", "=", "round", "(", "(", "(", "trY", "[", "index1", "]", "-", "rois", "[", "i", ",", "2", "]", ")", "*", "h_m", ")", ".", "item", "(", ")", ")", "\n", "brY1", "=", "round", "(", "(", "(", "brY", "[", "index1", "]", "-", "rois", "[", "i", ",", "2", "]", ")", "*", "h_m", ")", ".", "item", "(", ")", ")", "\n", "blY1", "=", "round", "(", "(", "(", "blY", "[", "index1", "]", "-", "rois", "[", "i", ",", "2", "]", ")", "*", "h_m", ")", ".", "item", "(", ")", ")", "\n", "tlX2", "=", "round", "(", "(", "(", "tlX", "[", "index2", "]", "-", "rois", "[", "i", ",", "1", "]", ")", "*", "w_m", ")", ".", "item", "(", ")", ")", "\n", "trX2", "=", "round", "(", "(", "(", "trX", "[", "index2", "]", "-", "rois", "[", "i", ",", "1", "]", ")", "*", "w_m", ")", ".", "item", "(", ")", ")", "\n", "brX2", "=", "round", "(", "(", "(", "brX", "[", "index2", "]", "-", "rois", "[", "i", ",", "1", "]", ")", "*", "w_m", ")", ".", "item", "(", ")", ")", "\n", "blX2", "=", "round", "(", "(", "(", "blX", "[", "index2", "]", "-", "rois", "[", "i", ",", "1", "]", ")", "*", "w_m", ")", ".", "item", "(", ")", ")", "\n", "tlY2", "=", "round", "(", "(", "(", "tlY", "[", "index2", "]", "-", "rois", "[", "i", ",", "2", "]", ")", "*", "h_m", ")", ".", "item", "(", ")", ")", "\n", "trY2", "=", "round", "(", "(", "(", "trY", "[", "index2", "]", "-", "rois", "[", "i", ",", "2", "]", ")", "*", "h_m", ")", ".", "item", "(", ")", ")", "\n", "brY2", "=", "round", "(", "(", "(", "brY", "[", "index2", "]", "-", "rois", "[", "i", ",", "2", "]", ")", "*", "h_m", ")", ".", "item", "(", ")", ")", "\n", "blY2", "=", "round", "(", "(", "(", "blY", "[", "index2", "]", "-", "rois", "[", "i", ",", "2", "]", ")", "*", "h_m", ")", ".", "item", "(", ")", ")", "\n", "\n", "rr", ",", "cc", "=", "draw", ".", "polygon", "(", "[", "tlY1", ",", "trY1", ",", "brY1", ",", "blY1", "]", ",", "[", "tlX1", ",", "trX1", ",", "brX1", ",", "blX1", "]", ",", "[", "self", ".", "pool2_h", ",", "self", ".", "pool2_w", "]", ")", "\n", "masks", "[", "i", ",", "0", ",", "rr", ",", "cc", "]", "=", "1", "\n", "rr", ",", "cc", "=", "draw", ".", "polygon", "(", "[", "tlY2", ",", "trY2", ",", "brY2", ",", "blY2", "]", ",", "[", "tlX2", ",", "trX2", ",", "brX2", ",", "blX2", "]", ",", "[", "self", ".", "pool2_h", ",", "self", ".", "pool2_w", "]", ")", "\n", "masks", "[", "i", ",", "1", ",", "rr", ",", "cc", "]", "=", "1", "\n", "if", "self", ".", "expandedRelContext", "is", "not", "None", ":", "\n", "                    ", "cropArea", "=", "allMasks", "[", "round", "(", "rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", ":", "round", "(", "rois", "[", "i", ",", "4", "]", ".", "item", "(", ")", ")", "+", "1", ",", "round", "(", "rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", ":", "round", "(", "rois", "[", "i", ",", "3", "]", ".", "item", "(", ")", ")", "+", "1", "]", "\n", "if", "len", "(", "cropArea", ".", "shape", ")", "==", "0", ":", "\n", "                        ", "raise", "ValueError", "(", "\"RoI is bad: {}:{},{}:{} for size {}\"", ".", "format", "(", "round", "(", "rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", ",", "round", "(", "rois", "[", "i", ",", "4", "]", ".", "item", "(", ")", ")", "+", "1", ",", "round", "(", "rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", ",", "round", "(", "rois", "[", "i", ",", "3", "]", ".", "item", "(", ")", ")", "+", "1", ",", "allMasks", ".", "shape", ")", ")", "\n", "", "masks", "[", "i", ",", "2", "]", "=", "F", ".", "upsample", "(", "cropArea", "[", "None", ",", "None", ",", "...", "]", ",", "size", "=", "(", "self", ".", "pool2_h", ",", "self", ".", "pool2_w", ")", ",", "mode", "=", "'bilinear'", ")", "[", "0", ",", "0", "]", "\n", "#masks[i,2] = img_f.resize(cropArea,(stackedEdgeFeatWindows.size(2),stackedEdgeFeatWindows.size(3)))", "\n", "if", "debug_image", "is", "not", "None", ":", "\n", "                        ", "debug_masks", ".", "append", "(", "cropArea", ")", "\n", "\n", "", "", "", "if", "self", ".", "useShapeFeats", ":", "\n", "                ", "if", "(", "type", "(", "self", ".", "pairer", ")", "is", "BinaryPairReal", "or", "type", "(", "self", ".", "pairer", ")", "is", "OldBinaryPairReal", ")", "and", "type", "(", "self", ".", "pairer", ".", "shape_layers", ")", "is", "not", "nn", ".", "Sequential", ":", "\n", "#The index specification is to allign with the format feat nets are trained with", "\n", "                    ", "ixs", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "3", "+", "self", ".", "numBBTypes", ",", "3", "+", "self", ".", "numBBTypes", ",", "4", "+", "self", ".", "numBBTypes", ",", "5", "+", "self", ".", "numBBTypes", ",", "6", "+", "self", ".", "numBBTypes", ",", "6", "+", "2", "*", "self", ".", "numBBTypes", ",", "6", "+", "2", "*", "self", ".", "numBBTypes", ",", "7", "+", "2", "*", "self", ".", "numBBTypes", "]", "\n", "", "else", ":", "\n", "                    ", "ixs", "=", "[", "4", ",", "6", ",", "2", ",", "8", ",", "8", "+", "self", ".", "numBBTypes", ",", "5", ",", "7", ",", "3", ",", "8", "+", "self", ".", "numBBTypes", ",", "8", "+", "self", ".", "numBBTypes", "+", "self", ".", "numBBTypes", ",", "0", ",", "1", "]", "\n", "\n", "", "shapeFeats", "[", "i", ",", "ixs", "[", "0", "]", "]", "=", "2", "*", "bbs", "[", "index1", ",", "3", "]", "/", "self", ".", "normalizeVert", "#bb preds half height/width", "\n", "shapeFeats", "[", "i", ",", "ixs", "[", "1", "]", "]", "=", "2", "*", "bbs", "[", "index1", ",", "4", "]", "/", "self", ".", "normalizeHorz", "\n", "shapeFeats", "[", "i", ",", "ixs", "[", "2", "]", "]", "=", "bbs", "[", "index1", ",", "2", "]", "/", "math", ".", "pi", "\n", "shapeFeats", "[", "i", ",", "ixs", "[", "3", "]", ":", "ixs", "[", "4", "]", "]", "=", "bbs", "[", "index1", ",", "extraPred", "+", "5", ":", "]", "# torch.sigmoid(bbs[index1,extraPred+5:])", "\n", "\n", "shapeFeats", "[", "i", ",", "ixs", "[", "5", "]", "]", "=", "2", "*", "bbs", "[", "index2", ",", "3", "]", "/", "self", ".", "normalizeVert", "\n", "shapeFeats", "[", "i", ",", "ixs", "[", "6", "]", "]", "=", "2", "*", "bbs", "[", "index2", ",", "4", "]", "/", "self", ".", "normalizeHorz", "\n", "shapeFeats", "[", "i", ",", "ixs", "[", "7", "]", "]", "=", "bbs", "[", "index2", ",", "2", "]", "/", "math", ".", "pi", "\n", "shapeFeats", "[", "i", ",", "ixs", "[", "8", "]", ":", "ixs", "[", "9", "]", "]", "=", "bbs", "[", "index2", ",", "extraPred", "+", "5", ":", "]", "#torch.sigmoid(bbs[index2,extraPred+5:])", "\n", "\n", "shapeFeats", "[", "i", ",", "ixs", "[", "10", "]", "]", "=", "(", "bbs", "[", "index1", ",", "0", "]", "-", "bbs", "[", "index2", ",", "0", "]", ")", "/", "self", ".", "normalizeHorz", "\n", "shapeFeats", "[", "i", ",", "ixs", "[", "11", "]", "]", "=", "(", "bbs", "[", "index1", ",", "1", "]", "-", "bbs", "[", "index2", ",", "1", "]", ")", "/", "self", ".", "normalizeVert", "\n", "if", "self", ".", "useShapeFeats", "!=", "'old'", ":", "\n", "                    ", "startCorners", "=", "8", "+", "self", ".", "numBBTypes", "+", "self", ".", "numBBTypes", "\n", "shapeFeats", "[", "i", ",", "startCorners", "+", "0", "]", "=", "math", ".", "sqrt", "(", "(", "tlX", "[", "index1", "]", "-", "tlX", "[", "index2", "]", ")", "**", "2", "+", "(", "tlY", "[", "index1", "]", "-", "tlY", "[", "index2", "]", ")", "**", "2", ")", "/", "self", ".", "normalizeDist", "\n", "shapeFeats", "[", "i", ",", "startCorners", "+", "1", "]", "=", "math", ".", "sqrt", "(", "(", "trX", "[", "index1", "]", "-", "trX", "[", "index2", "]", ")", "**", "2", "+", "(", "trY", "[", "index1", "]", "-", "trY", "[", "index2", "]", ")", "**", "2", ")", "/", "self", ".", "normalizeDist", "\n", "shapeFeats", "[", "i", ",", "startCorners", "+", "3", "]", "=", "math", ".", "sqrt", "(", "(", "brX", "[", "index1", "]", "-", "brX", "[", "index2", "]", ")", "**", "2", "+", "(", "brY", "[", "index1", "]", "-", "brY", "[", "index2", "]", ")", "**", "2", ")", "/", "self", ".", "normalizeDist", "\n", "shapeFeats", "[", "i", ",", "startCorners", "+", "2", "]", "=", "math", ".", "sqrt", "(", "(", "blX", "[", "index1", "]", "-", "blX", "[", "index2", "]", ")", "**", "2", "+", "(", "blY", "[", "index1", "]", "-", "blY", "[", "index2", "]", ")", "**", "2", ")", "/", "self", ".", "normalizeDist", "\n", "startNN", "=", "startCorners", "+", "4", "\n", "", "else", ":", "\n", "                    ", "startNN", "=", "8", "+", "self", ".", "numBBTypes", "+", "self", ".", "numBBTypes", "\n", "", "if", "self", ".", "detector", ".", "predNumNeighbors", ":", "\n", "                    ", "shapeFeats", "[", "i", ",", "startNN", "+", "0", "]", "=", "bbs", "[", "index1", ",", "5", "]", "\n", "shapeFeats", "[", "i", ",", "startNN", "+", "1", "]", "=", "bbs", "[", "index2", ",", "5", "]", "\n", "startPos", "=", "startNN", "+", "2", "\n", "", "else", ":", "\n", "                    ", "startPos", "=", "startNN", "\n", "", "if", "self", ".", "usePositionFeature", ":", "\n", "                    ", "if", "self", ".", "usePositionFeature", "==", "'absolute'", ":", "\n", "                        ", "shapeFeats", "[", "i", ",", "startPos", "+", "0", "]", "=", "(", "bbs", "[", "index1", ",", "0", "]", "-", "imageWidth", "/", "2", ")", "/", "(", "5", "*", "self", ".", "normalizeHorz", ")", "\n", "shapeFeats", "[", "i", ",", "startPos", "+", "1", "]", "=", "(", "bbs", "[", "index1", ",", "1", "]", "-", "imageHeight", "/", "2", ")", "/", "(", "10", "*", "self", ".", "normalizeVert", ")", "\n", "shapeFeats", "[", "i", ",", "startPos", "+", "2", "]", "=", "(", "bbs", "[", "index2", ",", "0", "]", "-", "imageWidth", "/", "2", ")", "/", "(", "5", "*", "self", ".", "normalizeHorz", ")", "\n", "shapeFeats", "[", "i", ",", "startPos", "+", "3", "]", "=", "(", "bbs", "[", "index2", ",", "1", "]", "-", "imageHeight", "/", "2", ")", "/", "(", "10", "*", "self", ".", "normalizeVert", ")", "\n", "", "else", ":", "\n", "                        ", "shapeFeats", "[", "i", ",", "startPos", "+", "0", "]", "=", "(", "bbs", "[", "index1", ",", "0", "]", "-", "imageWidth", "/", "2", ")", "/", "(", "imageWidth", "/", "2", ")", "\n", "shapeFeats", "[", "i", ",", "startPos", "+", "1", "]", "=", "(", "bbs", "[", "index1", ",", "1", "]", "-", "imageHeight", "/", "2", ")", "/", "(", "imageHeight", "/", "2", ")", "\n", "shapeFeats", "[", "i", ",", "startPos", "+", "2", "]", "=", "(", "bbs", "[", "index2", ",", "0", "]", "-", "imageWidth", "/", "2", ")", "/", "(", "imageWidth", "/", "2", ")", "\n", "shapeFeats", "[", "i", ",", "startPos", "+", "3", "]", "=", "(", "bbs", "[", "index2", ",", "1", "]", "-", "imageHeight", "/", "2", ")", "/", "(", "imageHeight", "/", "2", ")", "\n", "\n", "\n", "#if self.us", "\n", "\n", "###DEBUG", "\n", "", "", "", "", "if", "debug_image", "is", "not", "None", ":", "\n", "            ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "img_f", ".", "imshow", "(", "'crop rel {}'", ".", "format", "(", "i", ")", ",", "debug_images", "[", "i", "]", ")", "\n", "img_f", ".", "imshow", "(", "'masks rel {}'", ".", "format", "(", "i", ")", ",", "masks", "[", "i", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", ")", "\n", "img_f", ".", "imshow", "(", "'mask all rel {}'", ".", "format", "(", "i", ")", ",", "debug_masks", "[", "i", "]", ".", "numpy", "(", ")", ")", "\n", "", "img_f", ".", "waitKey", "(", ")", "\n", "debug_images", "=", "[", "]", "\n", "\n", "\n", "", "if", "self", ".", "useShapeFeats", "!=", "'only'", ":", "\n", "            ", "if", "self", ".", "splitFeatures", ":", "\n", "                ", "stackedEdgeFeatWindows2", "=", "torch", ".", "cat", "(", "(", "stackedEdgeFeatWindows2", ",", "masks", ".", "to", "(", "stackedEdgeFeatWindows2", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "relFeats", "=", "self", ".", "relFeaturizerConv2", "(", "stackedEdgeFeatWindows2", ")", "\n", "stackedEdgeFeatWindows", "=", "torch", ".", "cat", "(", "(", "stackedEdgeFeatWindows", ",", "relFeats", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "stackedEdgeFeatWindows", "=", "torch", ".", "cat", "(", "(", "stackedEdgeFeatWindows", ",", "masks", ".", "to", "(", "stackedEdgeFeatWindows", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "#import pdb; pdb.set_trace()", "\n", "", "relFeats", "=", "self", ".", "relFeaturizerConv", "(", "stackedEdgeFeatWindows", ")", "#preparing for graph feature size", "\n", "relFeats", "=", "relFeats", ".", "view", "(", "relFeats", ".", "size", "(", "0", ")", ",", "relFeats", ".", "size", "(", "1", ")", ")", "\n", "", "if", "self", ".", "useShapeFeats", ":", "\n", "            ", "if", "self", ".", "useShapeFeats", "==", "'only'", ":", "\n", "                ", "relFeats", "=", "shapeFeats", ".", "to", "(", "features", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "relFeats", "=", "torch", ".", "cat", "(", "(", "relFeats", ",", "shapeFeats", ".", "to", "(", "relFeats", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "", "if", "self", ".", "relFeaturizerFC", "is", "not", "None", ":", "\n", "            ", "relFeats", "=", "self", ".", "relFeaturizerFC", "(", "relFeats", ")", "\n", "#if self.useShapeFeats=='sp", "\n", "\n", "#compute features for the bounding boxes by themselves", "\n", "#This will be replaced with some type of word embedding", "\n", "", "if", "self", ".", "useBBVisualFeats", ":", "\n", "            ", "assert", "(", "features", ".", "size", "(", "0", ")", "==", "1", ")", "\n", "if", "self", ".", "useShapeFeats", ":", "\n", "                ", "bb_shapeFeats", "=", "torch", ".", "FloatTensor", "(", "bbs", ".", "size", "(", "0", ")", ",", "self", ".", "numShapeFeatsBB", ")", "\n", "", "if", "self", ".", "useShapeFeats", "!=", "\"only\"", "and", "self", ".", "expandedBBContext", ":", "\n", "                ", "masks", "=", "torch", ".", "zeros", "(", "bbs", ".", "size", "(", "0", ")", ",", "2", ",", "self", ".", "poolBB2_h", ",", "self", ".", "poolBB2_w", ")", "\n", "\n", "", "rois", "=", "torch", ".", "zeros", "(", "(", "bbs", ".", "size", "(", "0", ")", ",", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "bbs", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "minY", "=", "round", "(", "min", "(", "tlY", "[", "i", "]", ".", "item", "(", ")", ",", "trY", "[", "i", "]", ".", "item", "(", ")", ",", "blY", "[", "i", "]", ".", "item", "(", ")", ",", "brY", "[", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "maxY", "=", "round", "(", "max", "(", "tlY", "[", "i", "]", ".", "item", "(", ")", ",", "trY", "[", "i", "]", ".", "item", "(", ")", ",", "blY", "[", "i", "]", ".", "item", "(", ")", ",", "brY", "[", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "minX", "=", "round", "(", "min", "(", "tlX", "[", "i", "]", ".", "item", "(", ")", ",", "trX", "[", "i", "]", ".", "item", "(", ")", ",", "blX", "[", "i", "]", ".", "item", "(", ")", ",", "brX", "[", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "maxX", "=", "round", "(", "max", "(", "tlX", "[", "i", "]", ".", "item", "(", ")", ",", "trX", "[", "i", "]", ".", "item", "(", ")", ",", "blX", "[", "i", "]", ".", "item", "(", ")", ",", "brX", "[", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "if", "self", ".", "expandedBBContext", "is", "not", "None", ":", "\n", "                    ", "maxX", "=", "min", "(", "maxX", "+", "self", ".", "expandedBBContext", ",", "imageWidth", "-", "1", ")", "\n", "minX", "=", "max", "(", "minX", "-", "self", ".", "expandedBBContext", ",", "0", ")", "\n", "maxY", "=", "min", "(", "maxY", "+", "self", ".", "expandedBBContext", ",", "imageHeight", "-", "1", ")", "\n", "minY", "=", "max", "(", "minY", "-", "self", ".", "expandedBBContext", ",", "0", ")", "\n", "", "rois", "[", "i", ",", "1", "]", "=", "minX", "\n", "rois", "[", "i", ",", "2", "]", "=", "minY", "\n", "rois", "[", "i", ",", "3", "]", "=", "maxX", "\n", "rois", "[", "i", ",", "4", "]", "=", "maxY", "\n", "if", "self", ".", "useShapeFeats", ":", "\n", "                    ", "bb_shapeFeats", "[", "i", ",", "0", "]", "=", "(", "bbs", "[", "i", ",", "2", "]", "+", "math", ".", "pi", ")", "/", "(", "2", "*", "math", ".", "pi", ")", "\n", "bb_shapeFeats", "[", "i", ",", "1", "]", "=", "bbs", "[", "i", ",", "3", "]", "/", "self", ".", "normalizeVert", "\n", "bb_shapeFeats", "[", "i", ",", "2", "]", "=", "bbs", "[", "i", ",", "4", "]", "/", "self", ".", "normalizeHorz", "\n", "if", "self", ".", "detector", ".", "predNumNeighbors", ":", "\n", "                        ", "bb_shapeFeats", "[", "i", ",", "3", "]", "=", "bbs", "[", "i", ",", "5", "]", "\n", "", "bb_shapeFeats", "[", "i", ",", "3", "+", "extraPred", ":", "self", ".", "numBBTypes", "+", "3", "+", "extraPred", "]", "=", "torch", ".", "sigmoid", "(", "bbs", "[", "i", ",", "5", "+", "extraPred", ":", "self", ".", "numBBTypes", "+", "5", "+", "extraPred", "]", ")", "\n", "if", "self", ".", "usePositionFeature", ":", "\n", "                        ", "if", "self", ".", "usePositionFeature", "==", "'absolute'", ":", "\n", "                            ", "bb_shapeFeats", "[", "i", ",", "self", ".", "numBBTypes", "+", "3", "+", "extraPred", "]", "=", "(", "bbs", "[", "i", ",", "0", "]", "-", "imageWidth", "/", "2", ")", "/", "(", "5", "*", "self", ".", "normalizeHorz", ")", "\n", "bb_shapeFeats", "[", "i", ",", "self", ".", "numBBTypes", "+", "4", "+", "extraPred", "]", "=", "(", "bbs", "[", "i", ",", "1", "]", "-", "imageHeight", "/", "2", ")", "/", "(", "10", "*", "self", ".", "normalizeVert", ")", "\n", "", "else", ":", "\n", "                            ", "bb_shapeFeats", "[", "i", ",", "self", ".", "numBBTypes", "+", "3", "+", "extraPred", "]", "=", "(", "bbs", "[", "i", ",", "0", "]", "-", "imageWidth", "/", "2", ")", "/", "(", "imageWidth", "/", "2", ")", "\n", "bb_shapeFeats", "[", "i", ",", "self", ".", "numBBTypes", "+", "4", "+", "extraPred", "]", "=", "(", "bbs", "[", "i", ",", "1", "]", "-", "imageHeight", "/", "2", ")", "/", "(", "imageHeight", "/", "2", ")", "\n", "", "", "", "if", "self", ".", "useShapeFeats", "!=", "\"only\"", "and", "self", ".", "expandedBBContext", ":", "\n", "#Add detected BB masks", "\n", "#warp to roi space", "\n", "                    ", "feature_w", "=", "rois", "[", "i", ",", "3", "]", "-", "rois", "[", "i", ",", "1", "]", "+", "1", "\n", "feature_h", "=", "rois", "[", "i", ",", "4", "]", "-", "rois", "[", "i", ",", "2", "]", "+", "1", "\n", "w_m", "=", "self", ".", "poolBB2_w", "/", "feature_w", "\n", "h_m", "=", "self", ".", "poolBB2_h", "/", "feature_h", "\n", "\n", "tlX1", "=", "round", "(", "(", "(", "tlX", "[", "i", "]", "-", "rois", "[", "i", ",", "1", "]", ")", "*", "w_m", ")", ".", "item", "(", ")", ")", "\n", "trX1", "=", "round", "(", "(", "(", "trX", "[", "i", "]", "-", "rois", "[", "i", ",", "1", "]", ")", "*", "w_m", ")", ".", "item", "(", ")", ")", "\n", "brX1", "=", "round", "(", "(", "(", "brX", "[", "i", "]", "-", "rois", "[", "i", ",", "1", "]", ")", "*", "w_m", ")", ".", "item", "(", ")", ")", "\n", "blX1", "=", "round", "(", "(", "(", "blX", "[", "i", "]", "-", "rois", "[", "i", ",", "1", "]", ")", "*", "w_m", ")", ".", "item", "(", ")", ")", "\n", "tlY1", "=", "round", "(", "(", "(", "tlY", "[", "i", "]", "-", "rois", "[", "i", ",", "2", "]", ")", "*", "h_m", ")", ".", "item", "(", ")", ")", "\n", "trY1", "=", "round", "(", "(", "(", "trY", "[", "i", "]", "-", "rois", "[", "i", ",", "2", "]", ")", "*", "h_m", ")", ".", "item", "(", ")", ")", "\n", "brY1", "=", "round", "(", "(", "(", "brY", "[", "i", "]", "-", "rois", "[", "i", ",", "2", "]", ")", "*", "h_m", ")", ".", "item", "(", ")", ")", "\n", "blY1", "=", "round", "(", "(", "(", "blY", "[", "i", "]", "-", "rois", "[", "i", ",", "2", "]", ")", "*", "h_m", ")", ".", "item", "(", ")", ")", "\n", "\n", "rr", ",", "cc", "=", "draw", ".", "polygon", "(", "[", "tlY1", ",", "trY1", ",", "brY1", ",", "blY1", "]", ",", "[", "tlX1", ",", "trX1", ",", "brX1", ",", "blX1", "]", ",", "(", "self", ".", "poolBB2_h", ",", "self", ".", "poolBB2_w", ")", ")", "\n", "masks", "[", "i", ",", "0", ",", "rr", ",", "cc", "]", "=", "1", "\n", "if", "self", ".", "expandedBBContext", "is", "not", "None", ":", "\n", "                        ", "cropArea", "=", "allMasks", "[", "round", "(", "rois", "[", "i", ",", "2", "]", ".", "item", "(", ")", ")", ":", "round", "(", "rois", "[", "i", ",", "4", "]", ".", "item", "(", ")", ")", "+", "1", ",", "round", "(", "rois", "[", "i", ",", "1", "]", ".", "item", "(", ")", ")", ":", "round", "(", "rois", "[", "i", ",", "3", "]", ".", "item", "(", ")", ")", "+", "1", "]", "\n", "masks", "[", "i", ",", "1", "]", "=", "F", ".", "upsample", "(", "cropArea", "[", "None", ",", "None", ",", "...", "]", ",", "size", "=", "(", "self", ".", "poolBB2_h", ",", "self", ".", "poolBB2_w", ")", ",", "mode", "=", "'bilinear'", ")", "[", "0", ",", "0", "]", "\n", "#masks[i,2] = img_f.resize(cropArea,(stackedEdgeFeatWindows.size(2),stackedEdgeFeatWindows.size(3)))", "\n", "###DEBUG", "\n", "", "", "if", "debug_image", "is", "not", "None", "and", "i", "<", "5", ":", "\n", "                    ", "assert", "(", "self", ".", "rotation", "==", "False", ")", "\n", "crop", "=", "debug_image", "[", "0", ",", ":", ",", "int", "(", "minY", ")", ":", "int", "(", "maxY", ")", ",", "int", "(", "minX", ")", ":", "int", "(", "maxX", ")", "+", "1", "]", ".", "cpu", "(", ")", "\n", "crop", "=", "(", "2", "-", "crop", ")", "/", "2", "\n", "if", "crop", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "                        ", "crop", "=", "crop", ".", "expand", "(", "3", ",", "crop", ".", "size", "(", "1", ")", ",", "crop", ".", "size", "(", "2", ")", ")", "\n", "", "crop", "[", "0", ",", "int", "(", "tlY", "[", "i", "]", ".", "item", "(", ")", "-", "minY", ")", ":", "int", "(", "brY", "[", "i", "]", ".", "item", "(", ")", "-", "minY", ")", "+", "1", ",", "int", "(", "tlX", "[", "i", "]", ".", "item", "(", ")", "-", "minX", ")", ":", "int", "(", "brX", "[", "i", "]", ".", "item", "(", ")", "-", "minX", ")", "+", "1", "]", "*=", "0.5", "\n", "crop", "=", "crop", ".", "numpy", "(", ")", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "img_f", ".", "imshow", "(", "'crop bb {}'", ".", "format", "(", "i", ")", ",", "crop", ")", "\n", "img_f", ".", "imshow", "(", "'masks bb {}'", ".", "format", "(", "i", ")", ",", "torch", ".", "cat", "(", "(", "masks", "[", "i", "]", ",", "torch", ".", "zeros", "(", "1", ",", "self", ".", "poolBB2_h", ",", "self", ".", "poolBB2_w", ")", ")", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", ")", "\n", "#debug_images.append(crop)", "\n", "", "", "if", "debug_image", "is", "not", "None", ":", "\n", "                ", "img_f", ".", "waitKey", "(", ")", "\n", "", "if", "self", ".", "useShapeFeats", "!=", "\"only\"", ":", "\n", "#bb_features[i]= F.avg_pool2d(features[0,:,minY:maxY+1,minX:maxX+1], (1+maxY-minY,1+maxX-minX)).view(-1)", "\n", "                ", "bb_features", "=", "self", ".", "roi_alignBB", "(", "features", ",", "rois", ".", "to", "(", "features", ".", "device", ")", ")", "\n", "if", "features2", "is", "not", "None", ":", "\n", "                    ", "bb_features2", "=", "self", ".", "roi_alignBB2", "(", "features2", ",", "rois", ".", "to", "(", "features", ".", "device", ")", ")", "\n", "if", "not", "self", ".", "splitFeatures", ":", "\n", "                        ", "bb_features", "=", "torch", ".", "cat", "(", "(", "bb_features", ",", "bb_features2", ")", ",", "dim", "=", "1", ")", "\n", "", "", "if", "self", ".", "expandedBBContext", ":", "\n", "                    ", "if", "self", ".", "splitFeatures", ":", "\n", "                        ", "bb_features2", "=", "torch", ".", "cat", "(", "(", "bb_features2", ",", "masks", ".", "to", "(", "bb_features2", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "bb_features2", "=", "self", ".", "bbFeaturizerConv2", "(", "bb_features2", ")", "\n", "bb_features", "=", "torch", ".", "cat", "(", "(", "bb_features", ",", "bb_features2", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                        ", "bb_features", "=", "torch", ".", "cat", "(", "(", "bb_features", ",", "masks", ".", "to", "(", "bb_features", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "", "bb_features", "=", "self", ".", "bbFeaturizerConv", "(", "bb_features", ")", "\n", "bb_features", "=", "bb_features", ".", "view", "(", "bb_features", ".", "size", "(", "0", ")", ",", "bb_features", ".", "size", "(", "1", ")", ")", "\n", "if", "self", ".", "useShapeFeats", ":", "\n", "                    ", "bb_features", "=", "torch", ".", "cat", "(", "(", "bb_features", ",", "bb_shapeFeats", ".", "to", "(", "bb_features", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "assert", "(", "self", ".", "useShapeFeats", ")", "\n", "bb_features", "=", "bb_shapeFeats", ".", "to", "(", "features", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "bbFeaturizerFC", "is", "not", "None", ":", "\n", "                ", "bb_features", "=", "self", ".", "bbFeaturizerFC", "(", "bb_features", ")", "#if uncommented, change rot on bb_shapeFeats, maybe not", "\n", "", "", "else", ":", "\n", "            ", "bb_features", "=", "None", "\n", "\n", "#We're not adding diagonal (self-rels) here!", "\n", "#Expecting special handeling during graph conv", "\n", "#candidateLocs = torch.LongTensor(candidates).t().to(relFeats.device)", "\n", "#ones = torch.ones(len(candidates)).to(relFeats.device)", "\n", "#adjacencyMatrix = torch.sparse.FloatTensor(candidateLocs,ones,torch.Size([bbs.size(0),bbs.size(0)]))", "\n", "\n", "#assert(relFeats.requries_grad)", "\n", "#rel_features = torch.sparse.FloatTensor(candidateLocs,relFeats,torch.Size([bbs.size(0),bbs.size(0),relFeats.size(1)]))", "\n", "#assert(rel_features.requries_grad)", "\n", "", "relIndexes", "=", "candidates", "\n", "numBB", "=", "bbs", ".", "size", "(", "0", ")", "\n", "numRel", "=", "len", "(", "candidates", ")", "\n", "if", "self", ".", "useMetaGraph", ":", "\n", "            ", "nodeFeatures", "=", "bb_features", "\n", "edgeFeatures", "=", "relFeats", "\n", "\n", "edges", "=", "candidates", "\n", "edges", "+=", "[", "(", "y", ",", "x", ")", "for", "x", ",", "y", "in", "edges", "]", "#add backward edges for undirected graph", "\n", "edgeIndexes", "=", "torch", ".", "LongTensor", "(", "edges", ")", ".", "t", "(", ")", ".", "to", "(", "relFeats", ".", "device", ")", "\n", "#now we need to also replicate the edgeFeatures", "\n", "edgeFeatures", "=", "edgeFeatures", ".", "repeat", "(", "2", ",", "1", ")", "\n", "\n", "#features", "\n", "universalFeatures", "=", "None", "\n", "return", "(", "nodeFeatures", ",", "edgeIndexes", ",", "edgeFeatures", ",", "universalFeatures", ")", ",", "relIndexes", ",", "rel_prop_scores", "\n", "", "else", ":", "\n", "            ", "if", "bb_features", "is", "None", ":", "\n", "                ", "numBB", "=", "0", "\n", "bbAndRel_features", "=", "relFeats", "\n", "adjacencyMatrix", "=", "None", "\n", "numOfNeighbors", "=", "None", "\n", "", "else", ":", "\n", "                ", "bbAndRel_features", "=", "torch", ".", "cat", "(", "(", "bb_features", ",", "relFeats", ")", ",", "dim", "=", "0", ")", "\n", "numOfNeighbors", "=", "torch", ".", "ones", "(", "bbs", ".", "size", "(", "0", ")", "+", "len", "(", "candidates", ")", ")", "#starts at one for yourself", "\n", "edges", "=", "[", "]", "\n", "i", "=", "0", "\n", "for", "bb1", ",", "bb2", "in", "candidates", ":", "\n", "                    ", "edges", ".", "append", "(", "(", "bb1", ",", "numBB", "+", "i", ")", ")", "\n", "edges", ".", "append", "(", "(", "bb2", ",", "numBB", "+", "i", ")", ")", "\n", "numOfNeighbors", "[", "bb1", "]", "+=", "1", "\n", "numOfNeighbors", "[", "bb2", "]", "+=", "1", "\n", "numOfNeighbors", "[", "numBB", "+", "i", "]", "+=", "2", "\n", "i", "+=", "1", "\n", "", "if", "self", ".", "includeRelRelEdges", ":", "\n", "                    ", "relEdges", "=", "set", "(", ")", "\n", "i", "=", "0", "\n", "for", "bb1", ",", "bb2", "in", "candidates", ":", "\n", "                        ", "j", "=", "0", "\n", "for", "bbA", ",", "bbB", "in", "candidates", "[", "i", ":", "]", ":", "\n", "                            ", "if", "i", "!=", "j", "and", "bb1", "==", "bbA", "or", "bb1", "==", "bbB", "or", "bb2", "==", "bbA", "or", "bb2", "==", "bbB", ":", "\n", "                                ", "relEdges", ".", "add", "(", "(", "numBB", "+", "i", ",", "numBB", "+", "j", ")", ")", "#i<j always", "\n", "", "j", "+=", "1", "\n", "", "i", "+=", "1", "\n", "", "relEdges", "=", "list", "(", "relEdges", ")", "\n", "for", "r1", ",", "r2", "in", "relEdges", ":", "\n", "                        ", "numOfNeighbors", "[", "r1", "]", "+=", "1", "\n", "numOfNeighbors", "[", "r2", "]", "+=", "1", "\n", "", "edges", "+=", "relEdges", "\n", "#add reverse edges", "\n", "", "edges", "+=", "[", "(", "y", ",", "x", ")", "for", "x", ",", "y", "in", "edges", "]", "\n", "#add diagonal (self edges)", "\n", "for", "i", "in", "range", "(", "bbAndRel_features", ".", "size", "(", "0", ")", ")", ":", "\n", "                    ", "edges", ".", "append", "(", "(", "i", ",", "i", ")", ")", "\n", "\n", "", "edgeLocs", "=", "torch", ".", "LongTensor", "(", "edges", ")", ".", "t", "(", ")", ".", "to", "(", "relFeats", ".", "device", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "len", "(", "edges", ")", ")", ".", "to", "(", "relFeats", ".", "device", ")", "\n", "adjacencyMatrix", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "edgeLocs", ",", "ones", ",", "torch", ".", "Size", "(", "[", "bbAndRel_features", ".", "size", "(", "0", ")", ",", "bbAndRel_features", ".", "size", "(", "0", ")", "]", ")", ")", "\n", "#numOfNeighbors is for convienence in tracking the normalization term", "\n", "numOfNeighbors", "=", "numOfNeighbors", ".", "to", "(", "relFeats", ".", "device", ")", "\n", "\n", "#rel_features = (candidates,relFeats)", "\n", "#adjacencyMatrix = None", "\n", "##print('create graph: {}'.format(timeit.default_timer()-tic))", "\n", "#return bb_features, adjacencyMatrix, rel_features", "\n", "", "return", "bbAndRel_features", ",", "(", "adjacencyMatrix", ",", "numOfNeighbors", ")", ",", "numBB", ",", "numRel", ",", "relIndexes", ",", "rel_prop_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.selectFeatureNNEdges": [[898, 1012], ["classFeat.size", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "pairing_graph.PairingGraph.selectLineOfSightEdges", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "pairing_graph.PairingGraph.rel_prop_nn", "rels_ordered.sort", "math.ceil", "min", "bbs.size", "bbs.size", "range", "torch.FloatTensor.to", "torch.FloatTensor.to", "torch.FloatTensor.to", "len", "bbs.size", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "rels.append", "rel_pred[].item", "range", "len", "bbs.size", "len", "bbs.size", "bbs.size"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.selectLineOfSightEdges"], ["", "", "def", "selectFeatureNNEdges", "(", "self", ",", "bbs", ",", "imageHeight", ",", "imageWidth", ",", "device", ")", ":", "\n", "        ", "if", "bbs", ".", "size", "(", "0", ")", "<", "2", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "#features: tlXDiff,trXDiff,brXDiff,blXDiff,tlYDiff,trYDiff,brYDiff,blYDiff, centerXDiff, centerYDiff, absX, absY, h1, w1, h2, w2, classpred1, classpred2, line of sight (binary)", "\n", "\n", "#0: tlXDiff", "\n", "#1: trXDiff", "\n", "#2: brXDiff", "\n", "#3: blXDiff", "\n", "#4: centerXDiff", "\n", "#5: w1", "\n", "#6: w2", "\n", "#7: tlYDiff", "\n", "#8: trYDiff", "\n", "#9: brYDiff", "\n", "#10: blYDiff", "\n", "#11: centerYDiff", "\n", "#12: h1", "\n", "#13: h2", "\n", "#14: tlDist", "\n", "#15: trDist", "\n", "#16: brDist", "\n", "#17: blDist", "\n", "#18: centDist", "\n", "#19: rel pos X1", "\n", "#20: rel pos Y1", "\n", "#21: rel pos X2", "\n", "#22: rel pos Y2", "\n", "#23: line of sight", "\n", "#24: conf1", "\n", "#25: conf2", "\n", "#26-n: classpred1", "\n", "#n+1-m: classpred2", "\n", "\n", "", "conf", "=", "bbs", "[", ":", ",", "0", "]", "\n", "x", "=", "bbs", "[", ":", ",", "1", "]", "\n", "y", "=", "bbs", "[", ":", ",", "2", "]", "\n", "r", "=", "bbs", "[", ":", ",", "3", "]", "\n", "h", "=", "bbs", "[", ":", ",", "4", "]", "\n", "w", "=", "bbs", "[", ":", ",", "5", "]", "\n", "classFeat", "=", "bbs", "[", ":", ",", "6", ":", "]", "\n", "numClassFeat", "=", "classFeat", ".", "size", "(", "1", ")", "\n", "cos_r", "=", "torch", ".", "cos", "(", "r", ")", "\n", "sin_r", "=", "torch", ".", "sin", "(", "r", ")", "\n", "tlX", "=", "-", "w", "*", "cos_r", "+", "-", "h", "*", "sin_r", "+", "x", "\n", "tlY", "=", "w", "*", "sin_r", "+", "-", "h", "*", "cos_r", "+", "y", "\n", "trX", "=", "w", "*", "cos_r", "+", "-", "h", "*", "sin_r", "+", "x", "\n", "trY", "=", "-", "w", "*", "sin_r", "+", "-", "h", "*", "cos_r", "+", "y", "\n", "brX", "=", "w", "*", "cos_r", "+", "h", "*", "sin_r", "+", "x", "\n", "brY", "=", "-", "w", "*", "sin_r", "+", "h", "*", "cos_r", "+", "y", "\n", "blX", "=", "-", "w", "*", "cos_r", "+", "h", "*", "sin_r", "+", "x", "\n", "blY", "=", "w", "*", "sin_r", "+", "h", "*", "cos_r", "+", "y", "\n", "\n", "line_of_sight", "=", "self", ".", "selectLineOfSightEdges", "(", "bbs", ",", "imageHeight", ",", "imageWidth", ",", "return_all", "=", "True", ")", "\n", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "(", "bbs", ".", "size", "(", "0", ")", "*", "bbs", ".", "size", "(", "0", ")", "-", "bbs", ".", "size", "(", "0", ")", ")", "//", "2", ",", "26", "+", "numClassFeat", "*", "2", ")", "\n", "\n", "i", "=", "0", "\n", "rels", "=", "[", "]", "\n", "for", "index1", "in", "range", "(", "bbs", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "for", "index2", "in", "range", "(", "index1", "+", "1", ",", "bbs", ".", "size", "(", "0", ")", ")", ":", "\n", "\n", "                ", "features", "[", "i", ",", "0", "]", "=", "tlX", "[", "index1", "]", "-", "tlX", "[", "index2", "]", "\n", "features", "[", "i", ",", "1", "]", "=", "trX", "[", "index1", "]", "-", "trX", "[", "index2", "]", "\n", "features", "[", "i", ",", "2", "]", "=", "brX", "[", "index1", "]", "-", "brX", "[", "index2", "]", "\n", "features", "[", "i", ",", "3", "]", "=", "blX", "[", "index1", "]", "-", "blX", "[", "index2", "]", "\n", "features", "[", "i", ",", "4", "]", "=", "x", "[", "index1", "]", "-", "x", "[", "index2", "]", "\n", "features", "[", "i", ",", "5", "]", "=", "w", "[", "index1", "]", "\n", "features", "[", "i", ",", "6", "]", "=", "w", "[", "index2", "]", "\n", "features", "[", "i", ",", "7", "]", "=", "tlY", "[", "index1", "]", "-", "tlY", "[", "index2", "]", "\n", "features", "[", "i", ",", "8", "]", "=", "trY", "[", "index1", "]", "-", "trY", "[", "index2", "]", "\n", "features", "[", "i", ",", "9", "]", "=", "brY", "[", "index1", "]", "-", "brY", "[", "index2", "]", "\n", "features", "[", "i", ",", "10", "]", "=", "blY", "[", "index1", "]", "-", "blY", "[", "index2", "]", "\n", "features", "[", "i", ",", "11", "]", "=", "y", "[", "index1", "]", "-", "y", "[", "index2", "]", "\n", "features", "[", "i", ",", "12", "]", "=", "h", "[", "index1", "]", "\n", "features", "[", "i", ",", "13", "]", "=", "h", "[", "index2", "]", "\n", "features", "[", "i", ",", "14", "]", "=", "math", ".", "sqrt", "(", "(", "tlY", "[", "index1", "]", "-", "tlY", "[", "index2", "]", ")", "**", "2", "+", "(", "tlX", "[", "index1", "]", "-", "tlX", "[", "index2", "]", ")", "**", "2", ")", "\n", "features", "[", "i", ",", "15", "]", "=", "math", ".", "sqrt", "(", "(", "trY", "[", "index1", "]", "-", "trY", "[", "index2", "]", ")", "**", "2", "+", "(", "trX", "[", "index1", "]", "-", "trX", "[", "index2", "]", ")", "**", "2", ")", "\n", "features", "[", "i", ",", "16", "]", "=", "math", ".", "sqrt", "(", "(", "brY", "[", "index1", "]", "-", "brY", "[", "index2", "]", ")", "**", "2", "+", "(", "brX", "[", "index1", "]", "-", "brX", "[", "index2", "]", ")", "**", "2", ")", "\n", "features", "[", "i", ",", "17", "]", "=", "math", ".", "sqrt", "(", "(", "blY", "[", "index1", "]", "-", "blY", "[", "index2", "]", ")", "**", "2", "+", "(", "blX", "[", "index1", "]", "-", "blX", "[", "index2", "]", ")", "**", "2", ")", "\n", "features", "[", "i", ",", "18", "]", "=", "math", ".", "sqrt", "(", "(", "y", "[", "index1", "]", "-", "y", "[", "index2", "]", ")", "**", "2", "+", "(", "x", "[", "index1", "]", "-", "x", "[", "index2", "]", ")", "**", "2", ")", "\n", "features", "[", "i", ",", "19", "]", "=", "x", "[", "index1", "]", "/", "imageWidth", "\n", "features", "[", "i", ",", "20", "]", "=", "y", "[", "index1", "]", "/", "imageHeight", "\n", "features", "[", "i", ",", "21", "]", "=", "x", "[", "index2", "]", "/", "imageWidth", "\n", "features", "[", "i", ",", "22", "]", "=", "y", "[", "index2", "]", "/", "imageHeight", "\n", "features", "[", "i", ",", "23", "]", "=", "1", "if", "(", "index1", ",", "index2", ")", "in", "line_of_sight", "else", "0", "\n", "features", "[", "i", ",", "24", "]", "=", "conf", "[", "index1", "]", "\n", "features", "[", "i", ",", "25", "]", "=", "conf", "[", "index2", "]", "\n", "features", "[", "i", ",", "26", ":", "26", "+", "numClassFeat", "]", "=", "classFeat", "[", "index1", "]", "\n", "features", "[", "i", ",", "26", "+", "numClassFeat", ":", "]", "=", "classFeat", "[", "index2", "]", "\n", "i", "+=", "1", "\n", "rels", ".", "append", "(", "(", "index1", ",", "index2", ")", ")", "\n", "\n", "#rel_pred = self.rel_prop_nn(features,7,7,5) #7 x, 7 y, 5 xy, for normalizing", "\n", "", "", "features", "[", ":", ",", "0", ":", "7", "]", "/=", "self", ".", "normalizeHorz", "\n", "features", "[", ":", ",", "7", ":", "14", "]", "/=", "self", ".", "normalizeVert", "\n", "features", "[", ":", ",", "14", ":", "19", "]", "/=", "(", "self", ".", "normalizeVert", "+", "self", ".", "normalizeHorz", ")", "/", "2", "\n", "rel_pred", "=", "self", ".", "rel_prop_nn", "(", "features", ".", "to", "(", "device", ")", ")", "\n", "\n", "rels_ordered", "=", "[", "(", "rel_pred", "[", "i", "]", ".", "item", "(", ")", ",", "rels", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "rels", ")", ")", "]", "\n", "\n", "rels_ordered", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "keep", "=", "math", ".", "ceil", "(", "self", ".", "percent_rel_to_keep", "*", "len", "(", "rels_ordered", ")", ")", "\n", "keep", "=", "min", "(", "keep", ",", "self", ".", "max_rel_to_keep", ")", "\n", "#print('keeping {} of {}'.format(keep,len(rels_ordered)))", "\n", "keep_rels", "=", "[", "r", "[", "1", "]", "for", "r", "in", "rels_ordered", "[", ":", "keep", "]", "]", "\n", "if", "keep", "<", "len", "(", "rels_ordered", ")", ":", "\n", "            ", "implicit_threshold", "=", "rels_ordered", "[", "keep", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "implicit_threshold", "=", "rels_ordered", "[", "-", "1", "]", "[", "0", "]", "-", "0.1", "#We're taking everything", "\n", "\n", "", "return", "keep_rels", ",", "(", "rel_pred", ",", "rels", ",", "implicit_threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.selectLineOfSightEdges": [[1015, 1304], ["torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "min", "min", "max", "max", "min", "min", "min", "min", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "print", "bbs.size", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "max", "max", "max", "max", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.zeros", "bbs.size", "range", "set", "range", "list", "min.item", "min.item", "min.item", "min.item", "skimage.draw.polygon_perimeter", "set", "range", "numpy.zeros", "bbs.size", "range", "utils.imshow", "range", "range", "numpy.zeros", "range", "utils.imshow", "utils.waitKey", "set", "pairing_graph.PairingGraph.selectLineOfSightEdges.fan"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imshow"], ["", "def", "selectLineOfSightEdges", "(", "self", ",", "bbs", ",", "imageHeight", ",", "imageWidth", ",", "return_all", "=", "False", ")", ":", "\n", "        ", "if", "bbs", ".", "size", "(", "0", ")", "<", "2", ":", "\n", "            ", "return", "[", "]", "\n", "#return list of index pairs", "\n", "\n", "\n", "", "sin_r", "=", "torch", ".", "sin", "(", "bbs", "[", ":", ",", "2", "]", ")", "\n", "cos_r", "=", "torch", ".", "cos", "(", "bbs", "[", ":", ",", "2", "]", ")", "\n", "#lx = bbs[:,0] - cos_r*bbs[:,4] ", "\n", "#ly = bbs[:,1] + sin_r*bbs[:,3]", "\n", "#rx = bbs[:,0] + cos_r*bbs[:,4] ", "\n", "#ry = bbs[:,1] - sin_r*bbs[:,3]", "\n", "#tx = bbs[:,0] - cos_r*bbs[:,4] ", "\n", "#ty = bbs[:,1] - sin_r*bbs[:,3]", "\n", "#bx = bbs[:,0] + cos_r*bbs[:,4] ", "\n", "#by = bbs[:,1] + sin_r*bbs[:,3]", "\n", "brX", "=", "bbs", "[", ":", ",", "4", "]", "*", "cos_r", "-", "bbs", "[", ":", ",", "3", "]", "*", "sin_r", "+", "bbs", "[", ":", ",", "0", "]", "\n", "brY", "=", "bbs", "[", ":", ",", "4", "]", "*", "sin_r", "+", "bbs", "[", ":", ",", "3", "]", "*", "cos_r", "+", "bbs", "[", ":", ",", "1", "]", "\n", "blX", "=", "-", "bbs", "[", ":", ",", "4", "]", "*", "cos_r", "-", "bbs", "[", ":", ",", "3", "]", "*", "sin_r", "+", "bbs", "[", ":", ",", "0", "]", "\n", "blY", "=", "-", "bbs", "[", ":", ",", "4", "]", "*", "sin_r", "+", "bbs", "[", ":", ",", "3", "]", "*", "cos_r", "+", "bbs", "[", ":", ",", "1", "]", "\n", "trX", "=", "bbs", "[", ":", ",", "4", "]", "*", "cos_r", "+", "bbs", "[", ":", ",", "3", "]", "*", "sin_r", "+", "bbs", "[", ":", ",", "0", "]", "\n", "trY", "=", "bbs", "[", ":", ",", "4", "]", "*", "sin_r", "-", "bbs", "[", ":", ",", "3", "]", "*", "cos_r", "+", "bbs", "[", ":", ",", "1", "]", "\n", "tlX", "=", "-", "bbs", "[", ":", ",", "4", "]", "*", "cos_r", "+", "bbs", "[", ":", ",", "3", "]", "*", "sin_r", "+", "bbs", "[", ":", ",", "0", "]", "\n", "tlY", "=", "-", "bbs", "[", ":", ",", "4", "]", "*", "sin_r", "-", "bbs", "[", ":", ",", "3", "]", "*", "cos_r", "+", "bbs", "[", ":", ",", "1", "]", "\n", "\n", "minX", "=", "min", "(", "torch", ".", "min", "(", "trX", ")", ",", "torch", ".", "min", "(", "tlX", ")", ",", "torch", ".", "min", "(", "blX", ")", ",", "torch", ".", "min", "(", "brX", ")", ")", "\n", "minY", "=", "min", "(", "torch", ".", "min", "(", "trY", ")", ",", "torch", ".", "min", "(", "tlY", ")", ",", "torch", ".", "min", "(", "blY", ")", ",", "torch", ".", "min", "(", "brY", ")", ")", "\n", "maxX", "=", "max", "(", "torch", ".", "max", "(", "trX", ")", ",", "torch", ".", "max", "(", "tlX", ")", ",", "torch", ".", "max", "(", "blX", ")", ",", "torch", ".", "max", "(", "brX", ")", ")", "\n", "maxY", "=", "max", "(", "torch", ".", "max", "(", "trY", ")", ",", "torch", ".", "max", "(", "tlY", ")", ",", "torch", ".", "max", "(", "blY", ")", ",", "torch", ".", "max", "(", "brY", ")", ")", "\n", "#if (math.isinf(minX) or math.isinf(minY) or math.isinf(maxX) or math.isinf(maxY) ):", "\n", "#    import pdb;pdb.set_trace()", "\n", "\n", "minX", "=", "min", "(", "max", "(", "minX", ".", "item", "(", ")", ",", "0", ")", ",", "imageWidth", ")", "\n", "minY", "=", "min", "(", "max", "(", "minY", ".", "item", "(", ")", ",", "0", ")", ",", "imageHeight", ")", "\n", "maxX", "=", "min", "(", "max", "(", "maxX", ".", "item", "(", ")", ",", "0", ")", ",", "imageWidth", ")", "\n", "maxY", "=", "min", "(", "max", "(", "maxY", ".", "item", "(", ")", ",", "0", ")", ",", "imageHeight", ")", "\n", "if", "minX", ">=", "maxX", "or", "minY", ">=", "maxY", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "#lx-=minX ", "\n", "#ly-=minY ", "\n", "#rx-=minX ", "\n", "#ry-=minY ", "\n", "#tx-=minX ", "\n", "#ty-=minY ", "\n", "#bx-=minX ", "\n", "#by-=minY ", "\n", "", "zeros", "=", "torch", ".", "zeros_like", "(", "trX", ")", "\n", "tImageWidth", "=", "torch", ".", "ones_like", "(", "trX", ")", "*", "imageWidth", "\n", "tImageHeight", "=", "torch", ".", "ones_like", "(", "trX", ")", "*", "imageHeight", "\n", "trX", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "trX", ",", "zeros", ")", ",", "tImageWidth", ")", "\n", "trY", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "trY", ",", "zeros", ")", ",", "tImageHeight", ")", "\n", "tlX", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "tlX", ",", "zeros", ")", ",", "tImageWidth", ")", "\n", "tlY", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "tlY", ",", "zeros", ")", ",", "tImageHeight", ")", "\n", "brX", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "brX", ",", "zeros", ")", ",", "tImageWidth", ")", "\n", "brY", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "brY", ",", "zeros", ")", ",", "tImageHeight", ")", "\n", "blX", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "blX", ",", "zeros", ")", ",", "tImageWidth", ")", "\n", "blY", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "blY", ",", "zeros", ")", ",", "tImageHeight", ")", "\n", "trX", "-=", "minX", "\n", "trY", "-=", "minY", "\n", "tlX", "-=", "minX", "\n", "tlY", "-=", "minY", "\n", "brX", "-=", "minX", "\n", "brY", "-=", "minY", "\n", "blX", "-=", "minX", "\n", "blY", "-=", "minY", "\n", "\n", "\n", "\n", "\n", "scaleCand", "=", "0.5", "\n", "minX", "*=", "scaleCand", "\n", "minY", "*=", "scaleCand", "\n", "maxX", "*=", "scaleCand", "\n", "maxY", "*=", "scaleCand", "\n", "#lx  *=scaleCand", "\n", "#ly  *=scaleCand", "\n", "#rx  *=scaleCand", "\n", "#ry  *=scaleCand", "\n", "#tx  *=scaleCand", "\n", "#ty  *=scaleCand", "\n", "#bx  *=scaleCand", "\n", "#by  *=scaleCand", "\n", "trX", "*=", "scaleCand", "\n", "trY", "*=", "scaleCand", "\n", "tlX", "*=", "scaleCand", "\n", "tlY", "*=", "scaleCand", "\n", "brX", "*=", "scaleCand", "\n", "brY", "*=", "scaleCand", "\n", "blX", "*=", "scaleCand", "\n", "blY", "*=", "scaleCand", "\n", "h", "=", "bbs", "[", ":", ",", "3", "]", "*", "scaleCand", "\n", "w", "=", "bbs", "[", ":", ",", "4", "]", "*", "scaleCand", "\n", "r", "=", "bbs", "[", ":", ",", "2", "]", "\n", "\n", "distMul", "=", "1.0", "\n", "while", "distMul", ">", "0.03", ":", "\n", "\n", "            ", "boxesDrawn", "=", "np", ".", "zeros", "(", "(", "math", ".", "ceil", "(", "maxY", "-", "minY", ")", ",", "math", ".", "ceil", "(", "maxX", "-", "minX", ")", ")", ",", "dtype", "=", "int", ")", "#torch.IntTensor( (maxY-minY,maxX-minX) ).zero_()", "\n", "if", "boxesDrawn", ".", "shape", "[", "0", "]", "==", "0", "or", "boxesDrawn", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "                ", "return", "[", "]", "\n", "#import pdb;pdb.set_trace()", "\n", "", "numBoxes", "=", "bbs", ".", "size", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "numBoxes", ")", ":", "\n", "\n", "#img_f.line( boxesDrawn, (int(tlX[i]),int(tlY[i])),(int(trX[i]),int(trY[i])),i,1)", "\n", "#img_f.line( boxesDrawn, (int(trX[i]),int(trY[i])),(int(brX[i]),int(brY[i])),i,1)", "\n", "#img_f.line( boxesDrawn, (int(blX[i]),int(blY[i])),(int(brX[i]),int(brY[i])),i,1)", "\n", "#img_f.line( boxesDrawn, (int(blX[i]),int(blY[i])),(int(tlX[i]),int(tlY[i])),i,1)", "\n", "\n", "#These are to catch the wierd case of a (clipped) bb having 0 height or width", "\n", "#we just add a bit, this shouldn't greatly effect the heuristic pairing", "\n", "                ", "if", "int", "(", "tlY", "[", "i", "]", ")", "==", "int", "(", "trY", "[", "i", "]", ")", "and", "int", "(", "tlY", "[", "i", "]", ")", "==", "int", "(", "brY", "[", "i", "]", ")", "and", "int", "(", "tlY", "[", "i", "]", ")", "==", "int", "(", "blY", "[", "i", "]", ")", ":", "\n", "                    ", "if", "int", "(", "tlY", "[", "i", "]", ")", "<", "2", ":", "\n", "                        ", "blY", "[", "i", "]", "+=", "1.1", "\n", "brY", "[", "i", "]", "+=", "1.1", "\n", "", "else", ":", "\n", "                        ", "tlY", "[", "i", "]", "-=", "1.1", "\n", "trY", "[", "i", "]", "-=", "1.1", "\n", "", "", "if", "int", "(", "tlX", "[", "i", "]", ")", "==", "int", "(", "trX", "[", "i", "]", ")", "and", "int", "(", "tlX", "[", "i", "]", ")", "==", "int", "(", "brX", "[", "i", "]", ")", "and", "int", "(", "tlX", "[", "i", "]", ")", "==", "int", "(", "blX", "[", "i", "]", ")", ":", "\n", "                    ", "if", "int", "(", "tlX", "[", "i", "]", ")", "<", "2", ":", "\n", "                        ", "trX", "[", "i", "]", "+=", "1.1", "\n", "brX", "[", "i", "]", "+=", "1.1", "\n", "", "else", ":", "\n", "                        ", "tlX", "[", "i", "]", "-=", "1.1", "\n", "blX", "[", "i", "]", "-=", "1.1", "\n", "\n", "\n", "", "", "rr", ",", "cc", "=", "draw", ".", "polygon_perimeter", "(", "[", "int", "(", "tlY", "[", "i", "]", ")", ",", "int", "(", "trY", "[", "i", "]", ")", ",", "int", "(", "brY", "[", "i", "]", ")", ",", "int", "(", "blY", "[", "i", "]", ")", "]", ",", "[", "int", "(", "tlX", "[", "i", "]", ")", ",", "int", "(", "trX", "[", "i", "]", ")", ",", "int", "(", "brX", "[", "i", "]", ")", ",", "int", "(", "blX", "[", "i", "]", ")", "]", ",", "boxesDrawn", ".", "shape", ",", "True", ")", "\n", "boxesDrawn", "[", "rr", ",", "cc", "]", "=", "i", "+", "1", "\n", "\n", "#how to walk?", "\n", "#walk until number found.", "\n", "# if in list, end", "\n", "# else add to list, continue", "\n", "#list is candidates", "\n", "", "maxDist", "=", "600", "*", "scaleCand", "*", "distMul", "\n", "maxDistY", "=", "200", "*", "scaleCand", "*", "distMul", "\n", "minWidth", "=", "30", "\n", "minHeight", "=", "20", "\n", "numFan", "=", "5", "\n", "\n", "def", "pathWalk", "(", "myId", ",", "startX", ",", "startY", ",", "angle", ",", "distStart", "=", "0", ",", "splitDist", "=", "100", ")", ":", "\n", "                ", "hit", "=", "set", "(", ")", "\n", "lineId", "=", "myId", "+", "numBoxes", "\n", "if", "angle", "<", "-", "180", ":", "\n", "                    ", "angle", "+=", "360", "\n", "", "if", "angle", ">", "180", ":", "\n", "                    ", "angle", "-=", "360", "\n", "", "if", "(", "angle", ">", "45", "and", "angle", "<", "135", ")", "or", "(", "angle", ">", "-", "135", "and", "angle", "<", "-", "45", ")", ":", "\n", "#compute slope based on y stepa", "\n", "                    ", "yStep", "=", "-", "1", "\n", "#if angle==90 or angle==-90:", "\n", "\n", "xStep", "=", "1", "/", "math", ".", "tan", "(", "math", ".", "pi", "*", "angle", "/", "180.0", ")", "\n", "", "else", ":", "\n", "#compute slope based on x step", "\n", "                    ", "xStep", "=", "1", "\n", "yStep", "=", "-", "math", ".", "tan", "(", "math", ".", "pi", "*", "angle", "/", "180.0", ")", "\n", "", "if", "angle", ">=", "135", "or", "angle", "<", "-", "45", ":", "\n", "                    ", "xStep", "*=", "-", "1", "\n", "yStep", "*=", "-", "1", "\n", "", "distSoFar", "=", "distStart", "\n", "prev", "=", "0", "\n", "numSteps", "=", "0", "\n", "y", "=", "startY", "\n", "while", "distSoFar", "<", "maxDist", "and", "abs", "(", "y", "-", "startY", ")", "<", "maxDistY", ":", "\n", "                    ", "x", "=", "int", "(", "round", "(", "startX", "+", "numSteps", "*", "xStep", ")", ")", "\n", "y", "=", "int", "(", "round", "(", "startY", "+", "numSteps", "*", "yStep", ")", ")", "\n", "numSteps", "+=", "1", "\n", "if", "x", "<", "0", "or", "y", "<", "0", "or", "x", ">=", "boxesDrawn", ".", "shape", "[", "1", "]", "or", "y", ">=", "boxesDrawn", ".", "shape", "[", "0", "]", ":", "\n", "                        ", "break", "\n", "", "here", "=", "boxesDrawn", "[", "y", ",", "x", "]", "\n", "#print('{} {} {} : {}'.format(x,y,here,len(hit)))", "\n", "if", "here", ">", "0", "and", "here", "<=", "numBoxes", "and", "here", "!=", "myId", ":", "\n", "                        ", "if", "here", "in", "hit", "and", "prev", "!=", "here", ":", "\n", "                            ", "break", "\n", "", "else", ":", "\n", "                            ", "hit", ".", "add", "(", "here", ")", "\n", "#print('hit {} at {}, {}  ({})'.format(here,x,y,len(hit)))", "\n", "#elif here == lineId or here == myId:", "\n", "#break", "\n", "", "", "else", ":", "\n", "                        ", "boxesDrawn", "[", "y", ",", "x", "]", "=", "lineId", "\n", "", "prev", "=", "here", "\n", "distSoFar", "=", "distStart", "+", "math", ".", "sqrt", "(", "(", "x", "-", "startX", ")", "**", "2", "+", "(", "y", "-", "startY", ")", "**", "2", ")", "\n", "\n", "#if hitting and maxDist-distSoFar>splitMin and (distSoFar-distStart)>splitDist and len(toSplit)==0:", "\n", "#    #split", "\n", "#    toSplit.append((myId,x,y,angle+45,distSoFar,hit.copy(),splitDist*1.5))", "\n", "#    toSplit.append((myId,x,y,angle-45,distSoFar,hit.copy(),splitDist*1.5))", "\n", "\n", "", "return", "hit", "\n", "\n", "", "def", "fan", "(", "boxId", ",", "x", ",", "y", ",", "angle", ",", "num", ",", "hit", ")", ":", "\n", "                ", "deg", "=", "90", "/", "(", "num", "+", "1", ")", "\n", "curDeg", "=", "angle", "-", "45", "+", "deg", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                    ", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "x", ",", "y", ",", "curDeg", ")", ")", "\n", "curDeg", "+=", "deg", "\n", "\n", "", "", "def", "drawIt", "(", ")", ":", "\n", "                ", "x", "=", "bbs", "[", ":", ",", "0", "]", "*", "scaleCand", "-", "minX", "\n", "y", "=", "bbs", "[", ":", ",", "1", "]", "*", "scaleCand", "-", "minY", "\n", "drawn", "=", "np", ".", "zeros", "(", "(", "math", ".", "ceil", "(", "maxY", "-", "minY", ")", ",", "math", ".", "ceil", "(", "maxX", "-", "minX", ")", ",", "3", ")", ")", "#torch.IntTensor( (maxY-minY,maxX-minX) ).zero_()", "\n", "numBoxes", "=", "bbs", ".", "size", "(", "0", ")", "\n", "for", "a", ",", "b", "in", "candidates", ":", "\n", "                    ", "img_f", ".", "line", "(", "drawn", ",", "(", "int", "(", "x", "[", "a", "]", ")", ",", "int", "(", "y", "[", "a", "]", ")", ")", ",", "(", "int", "(", "x", "[", "b", "]", ")", ",", "int", "(", "y", "[", "b", "]", ")", ")", ",", "(", "random", ".", "random", "(", ")", "*", "0.5", ",", "random", ".", "random", "(", ")", "*", "0.5", ",", "random", ".", "random", "(", ")", "*", "0.5", ")", ",", "1", ")", "\n", "", "for", "i", "in", "range", "(", "numBoxes", ")", ":", "\n", "\n", "#img_f.line( boxesDrawn, (int(tlX[i]),int(tlY[i])),(int(trX[i]),int(trY[i])),i,1)", "\n", "#img_f.line( boxesDrawn, (int(trX[i]),int(trY[i])),(int(brX[i]),int(brY[i])),i,1)", "\n", "#img_f.line( boxesDrawn, (int(blX[i]),int(blY[i])),(int(brX[i]),int(brY[i])),i,1)", "\n", "#img_f.line( boxesDrawn, (int(blX[i]),int(blY[i])),(int(tlX[i]),int(tlY[i])),i,1)", "\n", "\n", "                    ", "rr", ",", "cc", "=", "draw", ".", "polygon_perimeter", "(", "[", "int", "(", "tlY", "[", "i", "]", ")", ",", "int", "(", "trY", "[", "i", "]", ")", ",", "int", "(", "brY", "[", "i", "]", ")", ",", "int", "(", "blY", "[", "i", "]", ")", "]", ",", "[", "int", "(", "tlX", "[", "i", "]", ")", ",", "int", "(", "trX", "[", "i", "]", ")", ",", "int", "(", "brX", "[", "i", "]", ")", ",", "int", "(", "blX", "[", "i", "]", ")", "]", ")", "\n", "drawn", "[", "rr", ",", "cc", "]", "=", "(", "random", ".", "random", "(", ")", "*", "0.8", "+", ".2", ",", "random", ".", "random", "(", ")", "*", "0.8", "+", ".2", ",", "random", ".", "random", "(", ")", "*", "0.8", "+", ".2", ")", "\n", "", "img_f", ".", "imshow", "(", "'res'", ",", "drawn", ")", "\n", "#img_f.waitKey()", "\n", "\n", "rows", ",", "cols", "=", "boxesDrawn", ".", "shape", "\n", "colorMap", "=", "[", "(", "0", ",", "0", ",", "0", ")", "]", "\n", "for", "i", "in", "range", "(", "numBoxes", ")", ":", "\n", "                    ", "colorMap", ".", "append", "(", "(", "random", ".", "random", "(", ")", "*", "0.8", "+", ".2", ",", "random", ".", "random", "(", ")", "*", "0.8", "+", ".2", ",", "random", ".", "random", "(", ")", "*", "0.8", "+", ".2", ")", ")", "\n", "", "for", "i", "in", "range", "(", "numBoxes", ")", ":", "\n", "                    ", "colorMap", ".", "append", "(", "(", "colorMap", "[", "i", "+", "1", "]", "[", "0", "]", "/", "3", ",", "colorMap", "[", "i", "+", "1", "]", "[", "1", "]", "/", "3", ",", "colorMap", "[", "i", "+", "1", "]", "[", "2", "]", "/", "3", ")", ")", "\n", "", "draw2", "=", "np", ".", "zeros", "(", "(", "rows", ",", "cols", ",", "3", ")", ")", "\n", "for", "r", "in", "range", "(", "rows", ")", ":", "\n", "                    ", "for", "c", "in", "range", "(", "cols", ")", ":", "\n", "                        ", "draw2", "[", "r", ",", "c", "]", "=", "colorMap", "[", "int", "(", "round", "(", "boxesDrawn", "[", "r", ",", "c", "]", ")", ")", "]", "\n", "#draw[r,c] = (255,255,255) if boxesDrawn[r,c]>0 else (0,0,0)", "\n", "\n", "", "", "img_f", ".", "imshow", "(", "'d'", ",", "draw2", ")", "\n", "img_f", ".", "waitKey", "(", ")", "\n", "\n", "\n", "", "candidates", "=", "set", "(", ")", "\n", "for", "i", "in", "range", "(", "numBoxes", ")", ":", "\n", "                ", "boxId", "=", "i", "+", "1", "\n", "toSplit", "=", "[", "]", "\n", "hit", "=", "set", "(", ")", "\n", "\n", "horzDiv", "=", "1", "+", "math", ".", "ceil", "(", "w", "[", "i", "]", "/", "minWidth", ")", "\n", "vertDiv", "=", "1", "+", "math", ".", "ceil", "(", "h", "[", "i", "]", "/", "minHeight", ")", "\n", "\n", "if", "horzDiv", "==", "1", ":", "\n", "                    ", "leftW", "=", "0.5", "\n", "rightW", "=", "0.5", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "tlX", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trX", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "tlY", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trY", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "90", ")", ")", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "tlX", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trX", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "tlY", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trY", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "r", "[", "i", "]", ".", "item", "(", ")", "-", "90", ")", ")", "\n", "", "else", ":", "\n", "                    ", "for", "j", "in", "range", "(", "horzDiv", ")", ":", "\n", "                        ", "leftW", "=", "1", "-", "j", "/", "(", "horzDiv", "-", "1", ")", "\n", "rightW", "=", "j", "/", "(", "horzDiv", "-", "1", ")", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "tlX", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trX", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "tlY", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trY", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "90", ")", ")", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "tlX", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trX", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "tlY", "[", "i", "]", ".", "item", "(", ")", "*", "leftW", "+", "trY", "[", "i", "]", ".", "item", "(", ")", "*", "rightW", ",", "r", "[", "i", "]", ".", "item", "(", ")", "-", "90", ")", ")", "\n", "\n", "", "", "if", "vertDiv", "==", "1", ":", "\n", "                    ", "topW", "=", "0.5", "\n", "botW", "=", "0.5", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "tlX", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "blX", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "tlY", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "blY", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "180", ")", ")", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "trX", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "brX", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "trY", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "brY", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "r", "[", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "for", "j", "in", "range", "(", "vertDiv", ")", ":", "\n", "                        ", "topW", "=", "1", "-", "j", "/", "(", "vertDiv", "-", "1", ")", "\n", "botW", "=", "j", "/", "(", "vertDiv", "-", "1", ")", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "tlX", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "blX", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "tlY", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "blY", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "180", ")", ")", "\n", "hit", ".", "update", "(", "pathWalk", "(", "boxId", ",", "trX", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "brX", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "trY", "[", "i", "]", ".", "item", "(", ")", "*", "topW", "+", "brY", "[", "i", "]", ".", "item", "(", ")", "*", "botW", ",", "r", "[", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "", "", "fan", "(", "boxId", ",", "tlX", "[", "i", "]", ".", "item", "(", ")", ",", "tlY", "[", "i", "]", ".", "item", "(", ")", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "135", ",", "numFan", ",", "hit", ")", "\n", "fan", "(", "boxId", ",", "trX", "[", "i", "]", ".", "item", "(", ")", ",", "trY", "[", "i", "]", ".", "item", "(", ")", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "45", ",", "numFan", ",", "hit", ")", "\n", "fan", "(", "boxId", ",", "blX", "[", "i", "]", ".", "item", "(", ")", ",", "blY", "[", "i", "]", ".", "item", "(", ")", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "225", ",", "numFan", ",", "hit", ")", "\n", "fan", "(", "boxId", ",", "brX", "[", "i", "]", ".", "item", "(", ")", ",", "brY", "[", "i", "]", ".", "item", "(", ")", ",", "r", "[", "i", "]", ".", "item", "(", ")", "+", "315", ",", "numFan", ",", "hit", ")", "\n", "\n", "for", "jId", "in", "hit", ":", "\n", "                    ", "candidates", ".", "add", "(", "(", "min", "(", "i", ",", "jId", "-", "1", ")", ",", "max", "(", "i", ",", "jId", "-", "1", ")", ")", ")", "\n", "\n", "#print('candidates:{} ({})'.format(len(candidates),distMul))", "\n", "#if len(candidates)>1:", "\n", "#    drawIt()", "\n", "", "", "if", "(", "len", "(", "candidates", ")", "+", "numBoxes", "<", "self", ".", "MAX_GRAPH_SIZE", "and", "len", "(", "candidates", ")", "<", "self", ".", "MAX_CANDIDATES", ")", "or", "return_all", ":", "\n", "                ", "return", "list", "(", "candidates", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "useOldDecay", ":", "\n", "                    ", "distMul", "*=", "0.75", "\n", "", "else", ":", "\n", "                    ", "distMul", "=", "distMul", "*", "0.8", "-", "0.05", "\n", "#This is a problem, we couldn't prune down enough", "\n", "", "", "", "print", "(", "\"ERROR: could not prune number of candidates down: {} (should be {})\"", ".", "format", "(", "len", "(", "candidates", ")", ",", "self", ".", "MAX_GRAPH_SIZE", "-", "numBoxes", ")", ")", "\n", "return", "list", "(", "candidates", ")", "[", ":", "self", ".", "MAX_GRAPH_SIZE", "-", "numBoxes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.setDEBUG": [[1308, 1316], ["pairing_graph.PairingGraph.relFeaturizerConv[].register_forward_hook", "pairing_graph.PairingGraph.relFeaturizerConv[].register_forward_hook", "output.cpu", "output.cpu"], "methods", ["None"], ["", "def", "setDEBUG", "(", "self", ")", ":", "\n", "        ", "self", ".", "debug", "=", "True", "\n", "def", "save_layerConv0", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "self", ".", "debug_conv0", "=", "output", ".", "cpu", "(", ")", "\n", "", "self", ".", "relFeaturizerConv", "[", "0", "]", ".", "register_forward_hook", "(", "save_layerConv0", ")", "\n", "def", "save_layerConv1", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "self", ".", "debug_conv1", "=", "output", ".", "cpu", "(", ")", "\n", "", "self", ".", "relFeaturizerConv", "[", "1", "]", ".", "register_forward_hook", "(", "save_layerConv1", ")", "\n", "#def save_layerFC(module,input,output):", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.optimize.optimizeRelationships": [[3, 41], ["cvxpy.Variable", "range", "range", "range", "cvxpy.Problem", "cvxpy.Problem.solve", "relPred.size", "relPred.size", "len", "len", "cvxpy.abs", "len", "cs.append", "cvxpy.Maximize", "relPred[].item"], "function", ["None"], ["def", "optimizeRelationships", "(", "relPred", ",", "relNodes", ",", "gtNodeNeighbors", ",", "penalty", "=", "490", ")", ":", "\n", "#if 'cvxpy' not in sys.modules:", "\n", "    ", "import", "cvxpy", "\n", "useRel", "=", "cvxpy", ".", "Variable", "(", "relPred", ".", "size", "(", "0", ")", ",", "boolean", "=", "True", ")", "\n", "\n", "obj", "=", "0", "\n", "huh", "=", "0", "\n", "for", "i", "in", "range", "(", "relPred", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "obj", "+=", "relPred", "[", "i", "]", ".", "item", "(", ")", "*", "useRel", "[", "i", "]", "\n", "huh", "+=", "useRel", "[", "i", "]", "\n", "\n", "\n", "", "constraint", "=", "[", "0", "]", "*", "len", "(", "gtNodeNeighbors", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gtNodeNeighbors", ")", ")", ":", "\n", "        ", "relI", "=", "0", "\n", "for", "a", ",", "b", "in", "relNodes", ":", "\n", "            ", "j", "=", "None", "\n", "if", "a", "==", "i", ":", "\n", "                ", "j", "=", "b", "\n", "", "elif", "b", "==", "i", ":", "\n", "                ", "j", "=", "a", "\n", "", "if", "j", "is", "not", "None", ":", "\n", "                ", "constraint", "[", "i", "]", "+=", "useRel", "[", "relI", "]", "\n", "", "relI", "+=", "1", "\n", "", "constraint", "[", "i", "]", "-=", "gtNodeNeighbors", "[", "i", "]", "\n", "#obj -= cvxpy.power(penalty,(cvxpy.abs(constraint[i]))) #this causes it to not miss on the same node more than once", "\n", "constraint", "[", "i", "]", "=", "cvxpy", ".", "abs", "(", "constraint", "[", "i", "]", ")", "\n", "obj", "-=", "penalty", "*", "constraint", "[", "i", "]", "\n", "\n", "\n", "", "cs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gtNodeNeighbors", ")", ")", ":", "\n", "        ", "cs", ".", "append", "(", "constraint", "[", "i", "]", "<=", "1", ")", "\n", "", "problem", "=", "cvxpy", ".", "Problem", "(", "cvxpy", ".", "Maximize", "(", "obj", ")", ",", "cs", ")", "\n", "#problem.solve(solver=cvxpy.GLPK_MI)", "\n", "problem", ".", "solve", "(", "solver", "=", "cvxpy", ".", "ECOS_BB", ")", "\n", "assert", "(", "useRel", ".", "value", "is", "not", "None", ")", "\n", "return", "useRel", ".", "value", "\n", "", "def", "optimizeRelationshipsSoft", "(", "relPred", ",", "relNodes", ",", "predNodeNeighbors", ",", "penalty", "=", "1.2", ",", "threshold", "=", "0.5", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.optimize.optimizeRelationshipsSoft": [[41, 80], ["cvxpy.Variable", "range", "range", "cvxpy.Problem", "cvxpy.Problem.solve", "relPred.size", "relPred.size", "len", "len", "cvxpy.Maximize", "cvxpy.power", "relPred[].item"], "function", ["None"], ["", "def", "optimizeRelationshipsSoft", "(", "relPred", ",", "relNodes", ",", "predNodeNeighbors", ",", "penalty", "=", "1.2", ",", "threshold", "=", "0.5", ")", ":", "\n", "#if 'cvxpy' not in sys.modules:", "\n", "    ", "import", "cvxpy", "\n", "useRel", "=", "cvxpy", ".", "Variable", "(", "relPred", ".", "size", "(", "0", ")", ",", "boolean", "=", "True", ")", "\n", "\n", "obj", "=", "0", "\n", "huh", "=", "0", "\n", "for", "i", "in", "range", "(", "relPred", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "obj", "+=", "(", "relPred", "[", "i", "]", ".", "item", "(", ")", "-", "threshold", ")", "*", "useRel", "[", "i", "]", "\n", "huh", "+=", "useRel", "[", "i", "]", "\n", "\n", "\n", "", "difference", "=", "[", "0", "]", "*", "len", "(", "predNodeNeighbors", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "predNodeNeighbors", ")", ")", ":", "\n", "        ", "relI", "=", "0", "\n", "for", "a", ",", "b", "in", "relNodes", ":", "\n", "            ", "j", "=", "None", "\n", "if", "a", "==", "i", ":", "\n", "                ", "j", "=", "b", "\n", "", "elif", "b", "==", "i", ":", "\n", "                ", "j", "=", "a", "\n", "", "if", "j", "is", "not", "None", ":", "\n", "                ", "difference", "[", "i", "]", "+=", "useRel", "[", "relI", "]", "\n", "", "relI", "+=", "1", "\n", "", "difference", "[", "i", "]", "-=", "predNodeNeighbors", "[", "i", "]", "\n", "#difference[i] = cvxpy.abs(difference[i])", "\n", "#obj -= cvxpy.power(penalty,difference[i]) #this causes it to not miss on the same node more than once", "\n", "obj", "-=", "penalty", "*", "cvxpy", ".", "power", "(", "difference", "[", "i", "]", ",", "2", ")", "\n", "#obj -= penalty*cvxpy.maximum(1,difference[i]) - penalty #double penalty if difference>1", "\n", "#obj -= penalty*cvxpy.maximum(2,difference[i]) - 2*penalty #triple penalty if difference>2", "\n", "\n", "\n", "", "cs", "=", "[", "]", "\n", "#for i in range(len(predNodeNeighbors)):", "\n", "#    cs.append(difference[i]<=4)", "\n", "problem", "=", "cvxpy", ".", "Problem", "(", "cvxpy", ".", "Maximize", "(", "obj", ")", ",", "cs", ")", "\n", "#problem.solve(solver=cvxpy.GLPK_MI)", "\n", "problem", ".", "solve", "(", "solver", "=", "cvxpy", ".", "ECOS_BB", ")", "\n", "return", "useRel", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.model.optimize.optimizeRelationshipsBlind": [[81, 122], ["cvxpy.Variable", "range", "range", "range", "cvxpy.Problem", "cvxpy.Problem.solve", "relPred.size", "relPred.size", "max", "cs.append", "cvxpy.Maximize", "relPred[].item", "cvxpy.maximum"], "function", ["None"], ["", "def", "optimizeRelationshipsBlind", "(", "relPred", ",", "relNodes", ",", "penalty", "=", "0.5", ")", ":", "\n", "#if 'cvxpy' not in sys.modules:", "\n", "    ", "import", "cvxpy", "\n", "useRel", "=", "cvxpy", ".", "Variable", "(", "relPred", ".", "size", "(", "0", ")", ",", "boolean", "=", "True", ")", "\n", "\n", "obj", "=", "0", "\n", "huh", "=", "0", "\n", "for", "i", "in", "range", "(", "relPred", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "obj", "+=", "relPred", "[", "i", "]", ".", "item", "(", ")", "*", "useRel", "[", "i", "]", "\n", "huh", "+=", "useRel", "[", "i", "]", "\n", "\n", "", "maxId", "=", "0", "\n", "for", "a", ",", "b", "in", "relNodes", ":", "\n", "        ", "maxId", "=", "max", "(", "maxId", ",", "a", ",", "b", ")", "\n", "", "numNodes", "=", "maxId", "+", "1", "\n", "\n", "constraint", "=", "[", "0", "]", "*", "numNodes", "\n", "for", "i", "in", "range", "(", "numNodes", ")", ":", "\n", "        ", "relI", "=", "0", "\n", "for", "a", ",", "b", "in", "relNodes", ":", "\n", "            ", "j", "=", "None", "\n", "if", "a", "==", "i", ":", "\n", "                ", "j", "=", "b", "\n", "", "elif", "b", "==", "i", ":", "\n", "                ", "j", "=", "a", "\n", "", "if", "j", "is", "not", "None", ":", "\n", "                ", "constraint", "[", "i", "]", "+=", "useRel", "[", "relI", "]", "\n", "", "relI", "+=", "1", "\n", "#constraint[i] -= gtNodeNeighbors[i]", "\n", "#obj -= cvxpy.power(penalty,(cvxpy.abs(constraint[i]))) #this causes it to not miss on the same node more than once", "\n", "#constraint[i] = cvxpy.abs(constraint[i])", "\n", "\n", "", "obj", "-=", "penalty", "*", "(", "cvxpy", ".", "maximum", "(", "constraint", "[", "i", "]", ",", "1", ")", "-", "1", ")", "\n", "\n", "\n", "", "cs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "numNodes", ")", ":", "\n", "        ", "cs", ".", "append", "(", "constraint", "[", "i", "]", "<=", "2", ")", "\n", "", "problem", "=", "cvxpy", ".", "Problem", "(", "cvxpy", ".", "Maximize", "(", "obj", ")", ",", "cs", ")", "\n", "problem", ".", "solve", "(", "solver", "=", "cvxpy", ".", "GLPK_MI", ")", "\n", "return", "useRel", ".", "value", "\n", "#from gurobipy import *", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.draw_graph.getCorners": [[11, 26], ["xyrhw[].item", "xyrhw[].item", "xyrhw[].item", "xyrhw[].item", "xyrhw[].item", "min", "min", "utils.forms_annotations.calcCorners", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.calcCorners"], ["def", "getCorners", "(", "xyrhw", ")", ":", "\n", "    ", "xc", "=", "xyrhw", "[", "0", "]", ".", "item", "(", ")", "\n", "yc", "=", "xyrhw", "[", "1", "]", ".", "item", "(", ")", "\n", "rot", "=", "xyrhw", "[", "2", "]", ".", "item", "(", ")", "\n", "h", "=", "xyrhw", "[", "3", "]", ".", "item", "(", ")", "\n", "w", "=", "xyrhw", "[", "4", "]", ".", "item", "(", ")", "\n", "h", "=", "min", "(", "30000", ",", "h", ")", "\n", "w", "=", "min", "(", "30000", ",", "w", ")", "\n", "#tr = ( int(w*math.cos(rot)-h*math.sin(rot) + xc),  int(w*math.sin(rot)+h*math.cos(rot) + yc) )", "\n", "#tl = ( int(-w*math.cos(rot)-h*math.sin(rot) + xc), int(-w*math.sin(rot)+h*math.cos(rot) + yc) )", "\n", "#br = ( int(w*math.cos(rot)+h*math.sin(rot) + xc),  int(w*math.sin(rot)-h*math.cos(rot) + yc) )", "\n", "#bl = ( int(-w*math.cos(rot)+h*math.sin(rot) + xc), int(-w*math.sin(rot)-h*math.cos(rot) + yc) )", "\n", "#return tr,tl,br,bl", "\n", "tl", ",", "tr", ",", "br", ",", "bl", "=", "calcCorners", "(", "xc", ",", "yc", ",", "rot", ",", "h", ",", "w", ")", "\n", "return", "[", "int", "(", "x", ")", "for", "x", "in", "tl", "]", ",", "[", "int", "(", "x", ")", "for", "x", "in", "tr", "]", ",", "[", "int", "(", "x", ")", "for", "x", "in", "br", "]", ",", "[", "int", "(", "x", ")", "for", "x", "in", "bl", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.draw_graph.plotRect": [[27, 34], ["draw_graph.getCorners", "utils.line", "utils.line", "utils.line", "utils.line", "skimage.color"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.getCorners", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line"], ["", "def", "plotRect", "(", "img", ",", "color", ",", "xyrhw", ",", "lineWidth", "=", "1", ")", ":", "\n", "    ", "tl", ",", "tr", ",", "br", ",", "bl", "=", "getCorners", "(", "xyrhw", ")", "\n", "\n", "img_f", ".", "line", "(", "img", ",", "tl", ",", "tr", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "img", ",", "tr", ",", "br", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "img", ",", "br", ",", "bl", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "img", ",", "bl", ",", "tl", ",", "color", ",", "lineWidth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.draw_graph.draw_graph": [[36, 364], ["img_f.gray2rgb.cpu().numpy", "utils.imwrite", "open", "outputBoxes.data.numpy.data.numpy", "utils.gray2rgb", "range", "open.close", "groupCenters.append", "enumerate", "enumerate", "img_f.gray2rgb.cpu", "targetBoxes.size", "draw_graph.plotRect", "groupCenters.append", "utils.line", "len", "PIL.Image.fromarray", "PIL.ImageDraw.Draw", "int", "int", "int", "int", "len", "utils.line", "utils.line", "utils.line", "utils.line", "int", "int", "bbAlignment[].item", "utils.line", "utils.line", "utils.line", "utils.line", "utils.line", "utils.line", "numpy.transpose", "draw_graph.getCorners", "max", "min", "max", "min", "utils.line", "utils.line", "utils.line", "utils.line", "PIL.ImageFont.truetype", "numpy.array().astype", "range", "range", "bbs[].getConf", "numpy.argmax", "numpy.argmax", "outputBoxes[].polyPoints", "max", "min", "max", "min", "draw_graph.getCorners", "max", "min", "max", "min", "all", "utils.line", "edgesToDraw.append", "len", "len", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_.size", "len", "utils.line", "utils.line", "bb.getCenterPoint", "round", "round", "utils.line", "utils.line", "utils.line", "draw_graph.getCorners", "targetBoxes[].argmax().item", "max", "min", "max", "min", "len", "round", "round", "ImageDraw.Draw.text", "len", "random.random", "bbs[].getCls", "len", "bbs[].polyPoints", "pts.reshape.reshape", "utils.polylines", "bbs[].getCenterPoint", "int", "int", "draw_graph.plotRect", "int", "int", "edgePred[].item", "boxColors.append", "enumerate", "targetBoxes[].item", "targetBoxes[].item", "draw_graph.plotRect", "PIL.ImageFont.truetype", "numpy.array", "len", "pts.reshape.astype", "outputBoxes[].polyXs", "outputBoxes[].polyXs", "outputBoxes[].polyYs", "outputBoxes[].polyYs", "torch.FloatTensor", "range", "torch.ones_like", "edgePred[].item", "targetBoxes[].argmax", "ImageDraw.Draw.text", "NotImplementedError", "bbAlignment[].item", "len", "len", "edgePred[].item", "edgePred[].item", "pred[].item", "len", "len", "NotImplementedError", "int", "int", "edgePred[].item", "print", "edgePred[].item", "edgePred[].item", "pred[].item", "int", "int", "pred[].item", "pred[].item", "pred[].item", "pred[].item", "pred[].item", "pred[].item"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imwrite", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.gray2rgb", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.plotRect", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.getCorners", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.getCorners", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getCenterPoint", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.getCorners", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.polylines", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.getCenterPoint", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.plotRect", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.plotRect"], ["", "def", "draw_graph", "(", "outputBoxes", ",", "nodePred", ",", "edgePred", ",", "edgeIndexes", ",", "predGroups", ",", "image", ",", "predTypes", ",", "missedRels", ",", "missedGroups", ",", "targetBoxes", ",", "path", ",", "verbosity", "=", "2", ",", "bbTrans", "=", "None", ",", "useTextLines", "=", "False", ",", "targetGroups", "=", "None", ",", "targetPairs", "=", "None", ",", "bbAlignment", "=", "None", ")", ":", "\n", "#for graphIteration,(outputBoxes,nodePred,edgePred,edgeIndexes,predGroups) in zip(allOutputBoxes,allNodePred,allEdgePred,allEdgeIndexes,allPredGroups):", "\n", "        ", "if", "bbTrans", "is", "not", "None", ":", "\n", "            ", "transPath", "=", "path", "[", ":", "-", "3", "]", "+", "'txt'", "\n", "transOut", "=", "open", "(", "transPath", ",", "'w'", ")", "\n", "", "if", "not", "useTextLines", "and", "outputBoxes", "is", "not", "None", "and", "not", "useTextLines", ":", "\n", "            ", "outputBoxes", "=", "outputBoxes", ".", "data", ".", "numpy", "(", ")", "\n", "", "image", "=", "image", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "b", "=", "0", "\n", "image", "=", "(", "1", "-", "(", "(", "1", "+", "np", ".", "transpose", "(", "image", "[", "b", "]", "[", ":", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "/", "2.0", ")", ")", "\n", "if", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "image", "=", "img_f", ".", "gray2rgb", "(", "image", ")", "\n", "#image = img_f.gray2rgb(image*255)/255", "\n", "#if name=='text_start_gt':", "\n", "\n", "", "if", "verbosity", ">", "2", "and", "targetBoxes", "is", "not", "None", ":", "\n", "#Draw GT bbs", "\n", "            ", "for", "j", "in", "range", "(", "targetBoxes", ".", "size", "(", "1", ")", ")", ":", "\n", "                ", "plotRect", "(", "image", ",", "(", "1", ",", "0.5", ",", "0", ")", ",", "targetBoxes", "[", "0", ",", "j", ",", "0", ":", "5", "]", ")", "\n", "", "", "if", "verbosity", ">", "0", "and", "targetGroups", "is", "not", "None", ":", "\n", "            ", "color", "=", "(", "0.99", ",", "0", ",", "0.3", ")", "\n", "lineWidth", "=", "1", "\n", "groupCenters", "=", "[", "]", "\n", "for", "group", "in", "targetGroups", ":", "\n", "                ", "xs", "=", "[", "]", "\n", "ys", "=", "[", "]", "\n", "for", "bbId", "in", "group", ":", "\n", "                    ", "corners", "=", "getCorners", "(", "targetBoxes", "[", "0", ",", "bbId", ",", "0", ":", "5", "]", ")", "\n", "xs", "+=", "[", "c", "[", "0", "]", "for", "c", "in", "corners", "]", "\n", "ys", "+=", "[", "c", "[", "1", "]", "for", "c", "in", "corners", "]", "\n", "", "maxX", "=", "max", "(", "xs", ")", "+", "1", "\n", "minX", "=", "min", "(", "xs", ")", "-", "1", "\n", "maxY", "=", "max", "(", "ys", ")", "+", "1", "\n", "minY", "=", "min", "(", "ys", ")", "-", "1", "\n", "if", "len", "(", "group", ")", ">", "1", "and", "missedGroups", "is", "None", ":", "\n", "                    ", "img_f", ".", "line", "(", "image", ",", "(", "minX", ",", "minY", ")", ",", "(", "maxX", ",", "minY", ")", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "image", ",", "(", "maxX", ",", "maxY", ")", ",", "(", "maxX", ",", "minY", ")", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "image", ",", "(", "minX", ",", "maxY", ")", ",", "(", "maxX", ",", "maxY", ")", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "image", ",", "(", "minX", ",", "minY", ")", ",", "(", "minX", ",", "maxY", ")", ",", "color", ",", "lineWidth", ")", "\n", "", "groupCenters", ".", "append", "(", "(", "round", "(", "(", "minX", "+", "maxX", ")", "/", "2", ")", ",", "round", "(", "(", "minY", "+", "maxY", ")", "/", "2", ")", ")", ")", "\n", "\n", "#now to pairs", "\n", "#for pair in targetPairs:", "\n", "#if len(predTypes)==1:", "\n", "#    print('num missing: {}'.format(len(missedRels)))", "\n", "", "", "if", "verbosity", ">", "0", "and", "missedRels", "is", "not", "None", ":", "\n", "            ", "for", "pair", "in", "missedRels", ":", "\n", "                ", "img_f", ".", "line", "(", "image", ",", "groupCenters", "[", "pair", "[", "0", "]", "]", ",", "groupCenters", "[", "pair", "[", "1", "]", "]", ",", "(", "1", ",", "0", ",", "0.1", ")", ",", "3", ",", "draw", "=", "'mult'", ")", "\n", "#if len(predTypes)==1:", "\n", "#    print('{} -- {}'.format(groupCenters[pair[0]],groupCenters[pair[1]]))", "\n", "\n", "", "", "to_write_text", "=", "[", "]", "\n", "bbs", "=", "outputBoxes", "\n", "if", "bbTrans", "is", "not", "None", ":", "\n", "            ", "transOut", ".", "close", "(", ")", "\n", "if", "len", "(", "to_write_text", ")", ">", "0", ":", "\n", "                ", "pil_image", "=", "Image", ".", "fromarray", "(", "(", "image", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "pil_draw", "=", "ImageDraw", ".", "Draw", "(", "pil_image", ")", "\n", "try", ":", "\n", "                    ", "font", "=", "ImageFont", ".", "truetype", "(", "\"UbuntuMono-R.ttf\"", ",", "9", ")", "\n", "for", "text", ",", "loc", ",", "color", "in", "to_write_text", ":", "\n", "                        ", "pil_draw", ".", "text", "(", "loc", ",", "text", ",", "color", ",", "font", "=", "font", ")", "\n", "", "", "except", "OSError", ":", "\n", "                    ", "try", ":", "\n", "                        ", "font", "=", "ImageFont", ".", "truetype", "(", "\"google-roboto\"", ",", "9", ")", "\n", "for", "text", ",", "loc", ",", "color", "in", "to_write_text", ":", "\n", "                            ", "pil_draw", ".", "text", "(", "loc", ",", "text", ",", "color", ",", "font", "=", "font", ")", "\n", "", "", "except", "OSError", ":", "\n", "                        ", "pass", "\n", "\n", "", "", "image", "=", "np", ".", "array", "(", "pil_image", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "\n", "\n", "\n", "#Draw pred groups (based on bb pred)", "\n", "", "", "groupCenters", "=", "[", "]", "\n", "if", "predGroups", "is", "None", "and", "bbs", "is", "not", "None", ":", "\n", "            ", "predGroups", "=", "[", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "bbs", ")", ")", "]", "\n", "", "elif", "predGroups", "is", "None", ":", "\n", "            ", "predGroups", "=", "[", "]", "\n", "\n", "", "for", "group", "in", "predGroups", ":", "\n", "            ", "maxX", "=", "maxY", "=", "0", "\n", "minY", "=", "minX", "=", "99999999", "\n", "idColor", "=", "[", "random", ".", "random", "(", ")", "/", "2", "+", "0.5", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "for", "j", "in", "group", ":", "\n", "                ", "if", "useTextLines", ":", "\n", "                    ", "conf", "=", "bbs", "[", "j", "]", ".", "getConf", "(", ")", "\n", "maxIndex", "=", "np", ".", "argmax", "(", "bbs", "[", "j", "]", ".", "getCls", "(", ")", ")", "\n", "if", "'gI0'", "in", "path", ":", "\n", "                        ", "assert", "(", "len", "(", "bbs", "[", "j", "]", ".", "all_primitive_rects", ")", "==", "1", ")", "\n", "", "", "else", ":", "\n", "                    ", "conf", "=", "bbs", "[", "j", ",", "0", "]", "\n", "maxIndex", "=", "np", ".", "argmax", "(", "bbs", "[", "j", ",", "6", ":", "]", ")", "\n", "", "shade", "=", "conf", "#(conf-bb_thresh)/(1-bb_thresh)", "\n", "if", "maxIndex", "==", "0", ":", "\n", "                    ", "color", "=", "(", "0", ",", "0", ",", "shade", ")", "#header", "\n", "", "elif", "maxIndex", "==", "1", ":", "\n", "                    ", "color", "=", "(", "0", ",", "shade", ",", "shade", ")", "#question", "\n", "", "elif", "maxIndex", "==", "2", ":", "\n", "                    ", "color", "=", "(", "shade", ",", "shade", ",", "0", ")", "#answer", "\n", "", "elif", "maxIndex", "==", "3", ":", "\n", "                    ", "color", "=", "(", "shade", ",", "0", ",", "shade", ")", "#other", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'Only 4 colors/classes implemented for drawing'", ")", "\n", "", "lineWidth", "=", "1", "\n", "\n", "if", "verbosity", ">", "1", "or", "len", "(", "group", ")", "==", "1", ":", "\n", "                    ", "if", "useTextLines", ":", "\n", "                        ", "pts", "=", "bbs", "[", "j", "]", ".", "polyPoints", "(", ")", "\n", "pts", "=", "pts", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "2", ")", ")", "\n", "if", "verbosity", "<", "3", "or", "bbAlignment", "[", "j", "]", ".", "item", "(", ")", "!=", "-", "1", ":", "\n", "                            ", "fill", "=", "'transparent'", "\n", "", "else", ":", "\n", "                            ", "fill", "=", "False", "\n", "", "img_f", ".", "polylines", "(", "image", ",", "pts", ".", "astype", "(", "np", ".", "int", ")", ",", "fill", ",", "color", ",", "lineWidth", ")", "\n", "x", ",", "y", "=", "bbs", "[", "j", "]", ".", "getCenterPoint", "(", ")", "\n", "x", "=", "int", "(", "x", ")", "\n", "y", "=", "int", "(", "y", ")", "\n", "", "else", ":", "\n", "                        ", "plotRect", "(", "image", ",", "color", ",", "bbs", "[", "j", ",", "1", ":", "6", "]", ",", "lineWidth", ")", "\n", "x", "=", "int", "(", "bbs", "[", "j", ",", "1", "]", ")", "\n", "y", "=", "int", "(", "bbs", "[", "j", ",", "2", "]", ")", "\n", "\n", "", "", "if", "useTextLines", ":", "\n", "                    ", "pts", "=", "outputBoxes", "[", "j", "]", ".", "polyPoints", "(", ")", "\n", "for", "pt", "in", "pts", ":", "\n", "                        ", "image", "[", "int", "(", "pt", "[", "1", "]", ")", ":", "int", "(", "pt", "[", "1", "]", ")", "+", "2", ",", "int", "(", "pt", "[", "0", "]", ")", ":", "int", "(", "pt", "[", "0", "]", ")", "+", "2", "]", "=", "idColor", "\n", "", "maxX", "=", "max", "(", "maxX", ",", "*", "outputBoxes", "[", "j", "]", ".", "polyXs", "(", ")", ")", "\n", "minX", "=", "min", "(", "minX", ",", "*", "outputBoxes", "[", "j", "]", ".", "polyXs", "(", ")", ")", "\n", "maxY", "=", "max", "(", "maxY", ",", "*", "outputBoxes", "[", "j", "]", ".", "polyYs", "(", ")", ")", "\n", "minY", "=", "min", "(", "minY", ",", "*", "outputBoxes", "[", "j", "]", ".", "polyYs", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "tr", ",", "tl", ",", "br", ",", "bl", "=", "getCorners", "(", "outputBoxes", "[", "j", ",", "1", ":", "6", "]", ")", "\n", "if", "verbosity", ">", "1", ":", "\n", "                        ", "image", "[", "tl", "[", "1", "]", ":", "tl", "[", "1", "]", "+", "2", ",", "tl", "[", "0", "]", ":", "tl", "[", "0", "]", "+", "2", "]", "=", "idColor", "\n", "image", "[", "tr", "[", "1", "]", ":", "tr", "[", "1", "]", "+", "1", ",", "tr", "[", "0", "]", ":", "tr", "[", "0", "]", "+", "1", "]", "=", "idColor", "\n", "image", "[", "bl", "[", "1", "]", ":", "bl", "[", "1", "]", "+", "1", ",", "bl", "[", "0", "]", ":", "bl", "[", "0", "]", "+", "1", "]", "=", "idColor", "\n", "image", "[", "br", "[", "1", "]", ":", "br", "[", "1", "]", "+", "1", ",", "br", "[", "0", "]", ":", "br", "[", "0", "]", "+", "1", "]", "=", "idColor", "\n", "", "maxX", "=", "max", "(", "maxX", ",", "tr", "[", "0", "]", ",", "tl", "[", "0", "]", ",", "br", "[", "0", "]", ",", "bl", "[", "0", "]", ")", "\n", "minX", "=", "min", "(", "minX", ",", "tr", "[", "0", "]", ",", "tl", "[", "0", "]", ",", "br", "[", "0", "]", ",", "bl", "[", "0", "]", ")", "\n", "maxY", "=", "max", "(", "maxY", ",", "tr", "[", "1", "]", ",", "tl", "[", "1", "]", ",", "br", "[", "1", "]", ",", "bl", "[", "1", "]", ")", "\n", "minY", "=", "min", "(", "minY", ",", "tr", "[", "1", "]", ",", "tl", "[", "1", "]", ",", "br", "[", "1", "]", ",", "bl", "[", "1", "]", ")", "\n", "", "", "if", "useTextLines", ":", "\n", "                ", "maxX", "=", "int", "(", "maxX", ")", "\n", "minX", "=", "int", "(", "minX", ")", "\n", "maxY", "=", "int", "(", "maxY", ")", "\n", "minY", "=", "int", "(", "minY", ")", "\n", "", "minX", "-=", "2", "\n", "minY", "-=", "2", "\n", "maxX", "+=", "2", "\n", "maxY", "+=", "2", "\n", "lineWidth", "=", "2", "\n", "#color=(0.5,0,1)", "\n", "if", "len", "(", "group", ")", ">", "1", ":", "\n", "                ", "img_f", ".", "line", "(", "image", ",", "(", "minX", ",", "minY", ")", ",", "(", "maxX", ",", "minY", ")", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "image", ",", "(", "maxX", ",", "minY", ")", ",", "(", "maxX", ",", "maxY", ")", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "image", ",", "(", "maxX", ",", "maxY", ")", ",", "(", "minX", ",", "maxY", ")", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "image", ",", "(", "minX", ",", "maxY", ")", ",", "(", "minX", ",", "minY", ")", ",", "color", ",", "lineWidth", ")", "\n", "if", "verbosity", ">", "1", ":", "\n", "                    ", "image", "[", "minY", ":", "minY", "+", "3", ",", "minX", ":", "minX", "+", "3", "]", "=", "idColor", "\n", "", "", "if", "verbosity", ">", "1", ":", "\n", "                ", "image", "[", "maxY", ":", "maxY", "+", "1", ",", "minX", ":", "minX", "+", "1", "]", "=", "idColor", "\n", "image", "[", "maxY", ":", "maxY", "+", "1", ",", "maxX", ":", "maxX", "+", "1", "]", "=", "idColor", "\n", "image", "[", "minY", ":", "minY", "+", "1", ",", "maxX", ":", "maxX", "+", "1", "]", "=", "idColor", "\n", "", "groupCenters", ".", "append", "(", "(", "(", "minX", "+", "maxX", ")", "//", "2", ",", "(", "minY", "+", "maxY", ")", "//", "2", ")", ")", "\n", "\n", "\n", "\n", "#Draw pred pairings", "\n", "#draw_rel_thresh = relPred.max() * draw_rel_thresh_over", "\n", "", "numrelpred", "=", "0", "\n", "#hits = [False]*len(adjacency)", "\n", "edgesToDraw", "=", "[", "]", "\n", "if", "edgeIndexes", "is", "not", "None", ":", "\n", "            ", "for", "i", ",", "(", "g1", ",", "g2", ")", "in", "enumerate", "(", "edgeIndexes", ")", ":", "\n", "\n", "#if score>draw_rel_thresh:", "\n", "                ", "x1", ",", "y1", "=", "groupCenters", "[", "g1", "]", "\n", "x2", ",", "y2", "=", "groupCenters", "[", "g2", "]", "\n", "if", "predTypes", "is", "not", "None", "and", "all", "(", "[", "predType", "[", "i", "]", "==", "'TN'", "or", "predType", "[", "i", "]", "==", "'UN'", "for", "predType", "in", "predTypes", "[", ":", "4", "]", "]", ")", ":", "\n", "                    ", "lineColor", "=", "(", "0", ",", "0", ",", "edgePred", "[", "i", ",", "-", "1", ",", "0", "]", ".", "item", "(", ")", ")", "#BLUE", "\n", "img_f", ".", "line", "(", "image", ",", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ",", "lineColor", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "edgesToDraw", ".", "append", "(", "(", "i", ",", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "", "", "if", "predTypes", "is", "not", "None", "and", "predTypes", "[", "0", "]", "is", "not", "None", "and", "len", "(", "predTypes", "[", "0", "]", ")", "==", "len", "(", "edgeIndexes", ")", ":", "\n", "                ", "if", "edgePred", "is", "None", ":", "\n", "                    ", "edgePred", "=", "torch", ".", "FloatTensor", "(", "len", "(", "predTypes", "[", "0", "]", ")", ",", "1", ",", "1", ")", ".", "fill_", "(", "1", ")", "\n", "", "if", "edgePred", ".", "size", "(", "2", ")", ">=", "len", "(", "predTypes", ")", ":", "\n", "                    ", "edgeClassification", "=", "[", "(", "predTypes", "[", "i", "]", ",", "edgePred", "[", ":", ",", "-", "1", ",", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "predTypes", ")", ")", "]", "\n", "", "else", ":", "\n", "                    ", "edgeClassification", "=", "[", "\n", "(", "predTypes", "[", "0", "]", ",", "torch", ".", "ones_like", "(", "edgePred", "[", ":", ",", "-", "1", ",", "0", "]", ")", ")", ",", "\n", "(", "predTypes", "[", "1", "]", ",", "edgePred", "[", ":", ",", "-", "1", ",", "0", "]", ")", ",", "\n", "(", "predTypes", "[", "2", "]", ",", "edgePred", "[", ":", ",", "-", "1", ",", "1", "]", ")", ",", "\n", "(", "predTypes", "[", "3", "]", ",", "edgePred", "[", ":", ",", "-", "1", ",", "2", "]", ")", "\n", "]", "\n", "\n", "", "for", "i", ",", "x1", ",", "y1", ",", "x2", ",", "y2", "in", "edgesToDraw", ":", "\n", "                        ", "if", "edgeClassification", "[", "0", "]", "[", "0", "]", "[", "i", "]", "==", "'TP'", ":", "\n", "                            ", "lineColor", "=", "(", "0", ",", "edgePred", "[", "i", ",", "-", "1", ",", "0", "]", ".", "item", "(", ")", ",", "0", ")", "\n", "", "elif", "edgeClassification", "[", "0", "]", "[", "0", "]", "[", "i", "]", "==", "'UP'", ":", "\n", "                            ", "lineColor", "=", "(", "edgePred", "[", "i", ",", "-", "1", ",", "0", "]", ".", "item", "(", ")", ",", "0", ",", "edgePred", "[", "i", ",", "-", "1", ",", "0", "]", ".", "item", "(", ")", ")", "\n", "", "elif", "edgeClassification", "[", "0", "]", "[", "0", "]", "[", "i", "]", "==", "'FN'", ":", "\n", "                            ", "lineColor", "=", "(", "edgePred", "[", "i", ",", "-", "1", ",", "0", "]", ".", "item", "(", ")", ",", "0", ",", "0", ")", "\n", "", "else", ":", "#is false positive", "\n", "#assert(edgeClassification[0][0][i]=='FP')", "\n", "                            ", "if", "edgeClassification", "[", "0", "]", "[", "0", "]", "[", "i", "]", "!=", "'FP'", ":", "\n", "                                ", "print", "(", "'ERROR, edge classsification is {}, but expected to be FP'", ".", "format", "(", "edgeClassification", "[", "0", "]", "[", "0", "]", "[", "i", "]", ")", ")", "\n", "#import pdb;pdb.set_trace()", "\n", "", "lineColor", "=", "(", "edgePred", "[", "i", ",", "-", "1", ",", "0", "]", ".", "item", "(", ")", ",", "edgePred", "[", "i", ",", "-", "1", ",", "0", "]", ".", "item", "(", ")", ",", "0", ")", "\n", "", "boxColors", "=", "[", "]", "\n", "for", "predType", ",", "pred", "in", "edgeClassification", ":", "\n", "                            ", "if", "predType", "[", "i", "]", "==", "'TP'", ":", "\n", "                                ", "color", "=", "(", "0", ",", "pred", "[", "i", "]", ".", "item", "(", ")", ",", "0", ")", "#Green", "\n", "", "elif", "predType", "[", "i", "]", "==", "'FP'", ":", "\n", "                                ", "color", "=", "(", "pred", "[", "i", "]", ".", "item", "(", ")", ",", "pred", "[", "i", "]", ".", "item", "(", ")", "*", "0.5", ",", "0", ")", "#Orange", "\n", "", "elif", "predType", "[", "i", "]", "==", "'TN'", ":", "\n", "                                ", "color", "=", "(", "0", ",", "0", ",", "1", "-", "pred", "[", "i", "]", ".", "item", "(", ")", ")", "#Blue", "\n", "", "elif", "predType", "[", "i", "]", "==", "'TN'", ":", "\n", "                                ", "color", "=", "(", "1", "-", "pred", "[", "i", "]", ".", "item", "(", ")", ",", "0", ",", "0", ")", "#Red", "\n", "", "else", ":", "#We don;t know the GT", "\n", "                                ", "color", "=", "(", "pred", "[", "i", "]", ".", "item", "(", ")", ",", "pred", "[", "i", "]", ".", "item", "(", ")", ",", "pred", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "", "boxColors", ".", "append", "(", "color", ")", "\n", "", "img_f", ".", "line", "(", "image", ",", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ",", "lineColor", ",", "2", ")", "\n", "cX", "=", "(", "x1", "+", "x2", ")", "//", "2", "\n", "cY", "=", "(", "y1", "+", "y2", ")", "//", "2", "\n", "\n", "if", "verbosity", ">", "1", ":", "\n", "#print('{} {},  {} {},  > {} {}'.format(x1,y1,x2,y2,cX,cY))", "\n", "                            ", "for", "i", ",", "(", "offsetX", ",", "offsetY", ",", "s", ")", "in", "enumerate", "(", "[", "(", "-", "2", ",", "-", "2", ",", "3", ")", ",", "(", "1", ",", "-", "2", ",", "3", ")", ",", "(", "1", ",", "1", ",", "3", ")", ",", "(", "-", "2", ",", "1", ",", "3", ")", "]", ")", ":", "\n", "                                ", "if", "i", ">=", "len", "(", "boxColors", ")", ":", "\n", "                                    ", "break", "\n", "", "tX", "=", "cX", "+", "offsetX", "\n", "tY", "=", "cY", "+", "offsetY", "\n", "image", "[", "tY", ":", "tY", "+", "s", ",", "tX", ":", "tX", "+", "s", "]", "=", "boxColors", "[", "i", "]", "\n", "#error", "\n", "", "if", "len", "(", "boxColors", ")", "==", "5", "and", "cY", "-", "3", ">=", "0", "and", "cY", "+", "4", "<", "image", ".", "shape", "[", "0", "]", "and", "cX", "-", "3", ">=", "0", "and", "cX", "+", "4", "<", "image", ".", "shape", "[", "1", "]", ":", "\n", "                                ", "image", "[", "cY", "-", "3", ",", "cX", "-", "2", ":", "cX", "+", "4", "]", "=", "boxColors", "[", "4", "]", "\n", "image", "[", "cY", "-", "2", ":", "cY", "+", "4", ",", "cX", "-", "3", "]", "=", "boxColors", "[", "4", "]", "\n", "", "", "", "", "else", ":", "\n", "                ", "lineColor", "=", "(", "0", ",", "0.8", ",", "0", ")", "\n", "for", "i", ",", "x1", ",", "y1", ",", "x2", ",", "y2", "in", "edgesToDraw", ":", "\n", "                    ", "img_f", ".", "line", "(", "image", ",", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ",", "lineColor", ",", "2", ")", "\n", "\n", "\n", "#Draw alginment between gt and pred bbs", "\n", "", "", "", "if", "verbosity", ">", "3", ":", "\n", "            ", "for", "bbI", ",", "bb", "in", "enumerate", "(", "outputBoxes", ")", ":", "\n", "                ", "if", "useTextLines", ":", "\n", "                    ", "x1", ",", "y1", "=", "bb", ".", "getCenterPoint", "(", ")", "\n", "", "else", ":", "\n", "                    ", "x1", "=", "bb", "[", "1", "]", "\n", "y1", "=", "bb", "[", "2", "]", "\n", "", "x1", "=", "int", "(", "x1", ")", "\n", "y1", "=", "int", "(", "y1", ")", "\n", "targI", "=", "bbAlignment", "[", "bbI", "]", ".", "item", "(", ")", "\n", "if", "targI", ">", "0", ":", "\n", "\n", "                    ", "x2", "=", "round", "(", "targetBoxes", "[", "0", ",", "targI", ",", "0", "]", ".", "item", "(", ")", ")", "\n", "y2", "=", "round", "(", "targetBoxes", "[", "0", ",", "targI", ",", "1", "]", ".", "item", "(", ")", ")", "\n", "img_f", ".", "line", "(", "image", ",", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ",", "(", "1", ",", "0", ",", "1", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "#draw 'x', indicating not match", "\n", "                    ", "img_f", ".", "line", "(", "image", ",", "(", "x1", "-", "5", ",", "y1", "-", "5", ")", ",", "(", "x1", "+", "5", ",", "y1", "+", "5", ")", ",", "(", ".1", ",", "0", ",", ".1", ")", ",", "1", ")", "\n", "img_f", ".", "line", "(", "image", ",", "(", "x1", "+", "5", ",", "y1", "-", "5", ")", ",", "(", "x1", "-", "5", ",", "y1", "+", "5", ")", ",", "(", ".1", ",", "0", ",", ".1", ")", ",", "1", ")", "\n", "#Draw GT pairings", "\n", "#TODO", "\n", "#if not pretty:", "\n", "#    gtcolor=(0.5,0,0.5)", "\n", "#    wth=3", "\n", "#else:", "\n", "#    #gtcolor=(1,0,0.6)", "\n", "#    gtcolor=(1,0.6,0)", "\n", "#    wth=3", "\n", "#for aId,(i,j) in enumerate(adjacency):", "\n", "#    if not pretty or not hits[aId]:", "\n", "#        x1 = round(targetBoxes[0,i,0].item())", "\n", "#        y1 = round(targetBoxes[0,i,1].item())", "\n", "#        x2 = round(targetBoxes[0,j,0].item())", "\n", "#        y2 = round(targetBoxes[0,j,1].item())", "\n", "#        img_f.line(image,(x1,y1),(x2,y2),gtcolor,wth)", "\n", "\n", "", "", "", "if", "verbosity", ">", "0", "and", "missedGroups", "is", "not", "None", ":", "\n", "            ", "for", "mgi", "in", "missedGroups", ":", "\n", "                ", "maxX", "=", "maxY", "=", "0", "\n", "minX", "=", "minY", "=", "9999999999", "\n", "for", "bbi", "in", "targetGroups", "[", "mgi", "]", ":", "\n", "                    ", "if", "verbosity", ">", "1", ":", "\n", "                        ", "plotRect", "(", "image", ",", "(", "1", ",", "0.5", ",", "0", ")", ",", "targetBoxes", "[", "0", ",", "bbi", ",", "0", ":", "5", "]", ")", "\n", "", "tr", ",", "tl", ",", "br", ",", "bl", "=", "getCorners", "(", "targetBoxes", "[", "0", ",", "bbi", ",", "0", ":", "5", "]", ")", "\n", "cls", "=", "targetBoxes", "[", "0", ",", "bbi", ",", "13", ":", "]", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "maxX", "=", "max", "(", "maxX", ",", "tr", "[", "0", "]", ",", "tl", "[", "0", "]", ",", "br", "[", "0", "]", ",", "bl", "[", "0", "]", ")", "\n", "minX", "=", "min", "(", "minX", ",", "tr", "[", "0", "]", ",", "tl", "[", "0", "]", ",", "br", "[", "0", "]", ",", "bl", "[", "0", "]", ")", "\n", "maxY", "=", "max", "(", "maxY", ",", "tr", "[", "1", "]", ",", "tl", "[", "1", "]", ",", "br", "[", "1", "]", ",", "bl", "[", "1", "]", ")", "\n", "minY", "=", "min", "(", "minY", ",", "tr", "[", "1", "]", ",", "tl", "[", "1", "]", ",", "br", "[", "1", "]", ",", "bl", "[", "1", "]", ")", "\n", "", "minX", "-=", "5", "\n", "minY", "-=", "5", "\n", "maxX", "+=", "5", "\n", "maxY", "+=", "5", "\n", "lineWidth", "=", "2", "\n", "color", "=", "(", "0.82", ",", "0", ",", "0", ")", "\n", "img_f", ".", "line", "(", "image", ",", "(", "minX", ",", "minY", ")", ",", "(", "maxX", ",", "minY", ")", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "image", ",", "(", "maxX", ",", "minY", ")", ",", "(", "maxX", ",", "maxY", ")", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "image", ",", "(", "maxX", ",", "maxY", ")", ",", "(", "minX", ",", "maxY", ")", ",", "color", ",", "lineWidth", ")", "\n", "img_f", ".", "line", "(", "image", ",", "(", "minX", ",", "maxY", ")", ",", "(", "minX", ",", "minY", ")", ",", "color", ",", "lineWidth", ")", "\n", "#image[minY:minY+3,minX:minX+3]=idColor", "\n", "shade", "=", "1", "\n", "if", "cls", "==", "0", ":", "\n", "                    ", "color", "=", "(", "0", ",", "0", ",", "shade", ")", "#header", "\n", "", "elif", "cls", "==", "1", ":", "\n", "                    ", "color", "=", "(", "0", ",", "shade", ",", "shade", ")", "#question", "\n", "", "elif", "cls", "==", "2", ":", "\n", "                    ", "color", "=", "(", "shade", ",", "shade", ",", "0", ")", "#answer", "\n", "", "elif", "cls", "==", "3", ":", "\n", "                    ", "color", "=", "(", "shade", ",", "0", ",", "shade", ")", "#other", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'Only 4 colors/classes implemented for drawing'", ")", "\n", "\n", "", "img_f", ".", "line", "(", "image", ",", "(", "maxX", ",", "maxY", "+", "1", ")", ",", "(", "minX", ",", "maxY", "+", "1", ")", ",", "color", ",", "2", ")", "\n", "img_f", ".", "line", "(", "image", ",", "(", "maxX", ",", "maxY", "+", "3", ")", ",", "(", "minX", ",", "maxY", "+", "3", ")", ",", "(", "0.82", ",", "0", ",", "0", ")", ",", "1", ")", "\n", "\n", "\n", "\n", "\n", "#io.imsave(path,image)", "\n", "", "", "image", "*=", "255", "\n", "img_f", ".", "imwrite", "(", "path", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdgraphpair_eval.FUNSDGraphPair_eval": [[20, 210], ["len", "losses.keys", "log.items", "numpy.zeros", "range", "trainer.saliency_model.saliency", "trainer.graph_check_model.check", "trainer.newRun", "targetBoxes.size", "any", "enumerate", "evaluators.draw_graph.draw_graph", "losses[].item", "enumerate", "toEval.append", "data.numpy.cuda().requires_grad_", "data.numpy.requires_grad_", "str", "data.numpy.cuda().requires_grad_", "data.numpy.requires_grad_", "type", "trainer.newRun", "trainer.run", "zip", "os.path.join", "os.path.join", "len", "metric", "os.path.join", "data.numpy.numpy", "outputBoxes.numpy", "enumerate", "os.path.join", "evaluators.draw_graph.draw_graph", "key.startswith", "type", "data.numpy.cuda", "data[].cpu", "data.numpy.cuda", "log.keys", "imageO.copy", "range", "skimage.io.imsave", "float", "float", "float", "float", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "utils.cvtColor", "len", "int", "int", "int", "int", "utils.line", "utils.line", "os.path.join", "bbPred.cpu().detach", "type", "range", "numpy.transpose", "round", "round", "round", "round", "a1[].item", "a1[].item", "a1[].item", "a2[].item", "a2[].item", "a2[].item", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "bbPred.cpu", "range", "torch.sigmoid", "torch.sigmoid"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.newRun", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.draw_graph.draw_graph", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.newRun", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.box_detect_trainer.BoxDetectTrainer.run", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.draw_graph.draw_graph", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line"], ["def", "FUNSDGraphPair_eval", "(", "config", ",", "instance", ",", "trainer", ",", "metrics", ",", "outDir", "=", "None", ",", "startIndex", "=", "None", ",", "lossFunc", "=", "None", ",", "toEval", "=", "None", ")", ":", "\n", "    ", "def", "__eval_metrics", "(", "data", ",", "target", ")", ":", "\n", "        ", "acc_metrics", "=", "np", ".", "zeros", "(", "(", "output", ".", "shape", "[", "0", "]", ",", "len", "(", "metrics", ")", ")", ")", "\n", "for", "ind", "in", "range", "(", "output", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "i", ",", "metric", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                ", "acc_metrics", "[", "ind", ",", "i", "]", "+=", "metric", "(", "output", "[", "ind", ":", "ind", "+", "1", "]", ",", "target", "[", "ind", ":", "ind", "+", "1", "]", ")", "\n", "", "", "return", "acc_metrics", "\n", "\n", "", "useGTGroups", "=", "config", "[", "'gtGroups'", "]", "if", "'gtGroups'", "in", "config", "else", "False", "\n", "if", "toEval", "is", "None", ":", "\n", "        ", "toEval", "=", "[", "'allEdgePred'", ",", "'allEdgeIndexes'", ",", "'allNodePred'", ",", "'allOutputBoxes'", ",", "'allPredGroups'", ",", "'allEdgePredTypes'", ",", "'allMissedRels'", ",", "'final'", ",", "'final_edgePredTypes'", ",", "'final_missedRels'", ",", "'allBBAlignment'", "]", "\n", "if", "useGTGroups", ":", "\n", "            ", "toEval", ".", "append", "(", "'DocStruct'", ")", "\n", "\n", "", "", "draw_verbosity", "=", "config", "[", "'draw_verbosity'", "]", "if", "'draw_verbosity'", "in", "config", "else", "1", "\n", "\n", "model", "=", "trainer", ".", "model", "\n", "data", "=", "instance", "[", "'img'", "]", "\n", "batchSize", "=", "data", ".", "shape", "[", "0", "]", "\n", "assert", "(", "batchSize", "==", "1", ")", "\n", "targetBoxes", "=", "instance", "[", "'bb_gt'", "]", "\n", "imageName", "=", "instance", "[", "'imgName'", "]", "\n", "scale", "=", "instance", "[", "'scale'", "]", "\n", "target_num_neighbors", "=", "instance", "[", "'num_neighbors'", "]", "\n", "if", "not", "trainer", ".", "model", ".", "detector_predNumNeighbors", ":", "\n", "        ", "instance", "[", "'num_neighbors'", "]", "=", "None", "\n", "\n", "\n", "", "trainer", ".", "train_hard_detect_limit", "=", "99999999999", "\n", "\n", "trackAtt", "=", "config", "[", "'showAtt'", "]", "if", "'showAtt'", "in", "config", "else", "False", "\n", "if", "trackAtt", ":", "\n", "        ", "if", "model", ".", "pairer", "is", "None", ":", "\n", "            ", "for", "gn", "in", "mode", ".", "graphnets", ":", "\n", "                ", "gn", ".", "trackAtt", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "trainer", ".", "model", ".", "pairer", ".", "trackAtt", "=", "True", "\n", "", "", "if", "'repetitions'", "in", "config", ":", "\n", "        ", "trainer", ".", "model", ".", "pairer", ".", "repetitions", "=", "config", "[", "'repetitions'", "]", "\n", "", "pretty", "=", "config", "[", "'pretty'", "]", "if", "'pretty'", "in", "config", "else", "False", "\n", "if", "'repetitions'", "in", "config", ":", "\n", "        ", "trainer", ".", "model", ".", "pairer", ".", "repetitions", "=", "config", "[", "'repetitions'", "]", "\n", "", "useDetections", "=", "config", "[", "'useDetections'", "]", "if", "'useDetections'", "in", "config", "else", "False", "\n", "if", "'useDetect'", "in", "config", ":", "\n", "        ", "useDetections", "=", "config", "[", "'useDetect'", "]", "\n", "", "confThresh", "=", "config", "[", "'conf_thresh'", "]", "if", "'conf_thresh'", "in", "config", "else", "None", "\n", "\n", "do_saliency_map", "=", "config", "[", "'saliency'", "]", "if", "'saliency'", "in", "config", "else", "False", "\n", "do_graph_check_map", "=", "config", "[", "'graph_check'", "]", "if", "'graph_check'", "in", "config", "else", "False", "\n", "\n", "\n", "numClasses", "=", "len", "(", "trainer", ".", "classMap", ")", "\n", "\n", "resultsDirName", "=", "'results'", "\n", "\n", "if", "do_saliency_map", "and", "outDir", "is", "not", "None", ":", "\n", "        ", "if", "config", "[", "'cuda'", "]", ":", "\n", "            ", "s_data", "=", "data", ".", "cuda", "(", ")", ".", "requires_grad_", "(", ")", "\n", "", "else", ":", "\n", "            ", "s_data", "=", "data", ".", "requires_grad_", "(", ")", "\n", "", "trainer", ".", "saliency_model", ".", "saliency", "(", "s_data", ",", "(", "1", "-", "data", "[", "0", "]", ".", "cpu", "(", ")", ")", "/", "2", ",", "str", "(", "os", ".", "path", ".", "join", "(", "outDir", ",", "'{}_saliency_'", ".", "format", "(", "imageName", ")", ")", ")", ")", "\n", "", "if", "do_graph_check_map", "and", "outDir", "is", "not", "None", ":", "\n", "        ", "if", "config", "[", "'cuda'", "]", ":", "\n", "            ", "s_data", "=", "data", ".", "cuda", "(", ")", ".", "requires_grad_", "(", ")", "\n", "", "else", ":", "\n", "            ", "s_data", "=", "data", ".", "requires_grad_", "(", ")", "\n", "", "trainer", ".", "graph_check_model", ".", "check", "(", "s_data", ")", "\n", "\n", "", "trainer", ".", "use_gt_trans", "=", "config", "[", "'useGTTrans'", "]", "if", "'useGTTrans'", "in", "config", "else", "(", "config", "[", "'useGTText'", "]", "if", "'useGTText'", "in", "config", "else", "False", ")", "\n", "if", "useDetections", ":", "\n", "        ", "useGT", "=", "'only_space'", "\n", "if", "type", "(", "useDetections", ")", "is", "str", ":", "#useDetections=='gt':", "\n", "            ", "useGT", "+=", "useDetections", "\n", "", "losses", ",", "log", ",", "out", "=", "trainer", ".", "newRun", "(", "instance", ",", "useGT", ",", "get", "=", "toEval", ")", "\n", "", "else", ":", "\n", "        ", "if", "trainer", ".", "mergeAndGroup", ":", "\n", "            ", "losses", ",", "log", ",", "out", "=", "trainer", ".", "newRun", "(", "instance", ",", "False", ",", "get", "=", "toEval", ")", "\n", "", "else", ":", "\n", "            ", "losses", ",", "log", ",", "out", "=", "trainer", ".", "run", "(", "instance", ",", "False", ")", "\n", "\n", "\n", "", "", "if", "trackAtt", ":", "\n", "        ", "if", "model", ".", "pairer", "is", "None", ":", "\n", "#liist of graph nets, get all the attention!", "\n", "            ", "allAttList", "=", "[", "gn", ".", "attn", "for", "gn", "in", "model", ".", "graphnets", "]", "\n", "", "else", ":", "\n", "            ", "attList", "=", "model", ".", "pairer", ".", "attn", "\n", "\n", "", "", "if", "'allEdgePred'", "in", "out", ":", "\n", "        ", "allEdgePred", "=", "out", "[", "'allEdgePred'", "]", "\n", "allEdgeIndexes", "=", "out", "[", "'allEdgeIndexes'", "]", "\n", "allNodePred", "=", "out", "[", "'allNodePred'", "]", "\n", "allOutputBoxes", "=", "out", "[", "'allOutputBoxes'", "]", "\n", "allPredGroups", "=", "out", "[", "'allPredGroups'", "]", "\n", "allEdgePredTypes", "=", "out", "[", "'allEdgePredTypes'", "]", "\n", "allMissedRels", "=", "out", "[", "'allMissedRels'", "]", "\n", "", "else", ":", "\n", "        ", "allEdgePred", "=", "None", "\n", "\n", "", "if", "targetBoxes", "is", "not", "None", ":", "\n", "        ", "targetSize", "=", "targetBoxes", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "targetSize", "=", "0", "\n", "\n", "", "toRet", "=", "{", "}", "#log", "\n", "missing_iter_0", "=", "not", "any", "(", "'_0'", "in", "k", "for", "k", "in", "log", ".", "keys", "(", ")", ")", "\n", "if", "allEdgePred", "is", "not", "None", ":", "\n", "        ", "for", "gIter", ",", "(", "edgePred", ",", "relIndexes", ",", "bbPred", ",", "outputBoxes", ",", "predGroups", ",", "edgePredTypes", ",", "missedRels", ")", "in", "enumerate", "(", "zip", "(", "allEdgePred", ",", "allEdgeIndexes", ",", "allNodePred", ",", "allOutputBoxes", ",", "allPredGroups", ",", "allEdgePredTypes", ",", "allMissedRels", ")", ")", ":", "\n", "            ", "if", "missing_iter_0", ":", "\n", "                ", "gIter", "+=", "1", "\n", "\n", "\n", "\n", "", "if", "trackAtt", "and", "(", "not", "model", ".", "merge_first", "or", "gIter", ">", "0", ")", ":", "\n", "                ", "attList", "=", "allAttList", "[", "gIter", "-", "1", "if", "model", ".", "merge_first", "else", "gIter", "]", "\n", "data", "=", "data", ".", "numpy", "(", ")", "\n", "imageO", "=", "(", "1", "-", "(", "(", "1", "+", "np", ".", "transpose", "(", "data", "[", "b", "]", "[", ":", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "/", "2.0", ")", ")", "\n", "bbs", "=", "outputBoxes", ".", "numpy", "(", ")", "\n", "for", "attL", ",", "attn", "in", "enumerate", "(", "attList", ")", ":", "\n", "                    ", "image", "=", "imageO", ".", "copy", "(", ")", "\n", "if", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "                        ", "image", "=", "img_f", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "relIndexes", ")", ")", ":", "\n", "\n", "                        ", "ind1", "=", "relIndexes", "[", "i", "]", "[", "0", "]", "\n", "ind2", "=", "relIndexes", "[", "i", "]", "[", "1", "]", "\n", "x1", "=", "int", "(", "round", "(", "bbs", "[", "ind1", ",", "1", "]", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "bbs", "[", "ind1", ",", "2", "]", ")", ")", "\n", "x2", "=", "int", "(", "round", "(", "bbs", "[", "ind2", ",", "1", "]", ")", ")", "\n", "y2", "=", "int", "(", "round", "(", "bbs", "[", "ind2", ",", "2", "]", ")", ")", "\n", "xh", "=", "(", "x1", "+", "x2", ")", "//", "2", "\n", "yh", "=", "(", "y1", "+", "y2", ")", "//", "2", "\n", "\n", "a1", "=", "attn", "[", "0", ",", ":", ",", "ind1", ",", "i", "]", "\n", "a2", "=", "attn", "[", "0", ",", ":", ",", "ind2", ",", "i", "]", "\n", "color1", "=", "(", "a1", "[", "0", "]", ".", "item", "(", ")", ",", "a1", "[", "1", "]", ".", "item", "(", ")", ",", "a1", "[", "2", "]", ".", "item", "(", ")", ")", "\n", "color2", "=", "(", "a2", "[", "0", "]", ".", "item", "(", ")", ",", "a2", "[", "1", "]", ".", "item", "(", ")", ",", "a2", "[", "2", "]", ".", "item", "(", ")", ")", "\n", "\n", "img_f", ".", "line", "(", "image", ",", "(", "x1", ",", "y1", ")", ",", "(", "xh", ",", "yh", ")", ",", "color1", ",", "1", ")", "\n", "img_f", ".", "line", "(", "image", ",", "(", "x2", ",", "y2", ")", ",", "(", "xh", ",", "yh", ")", ",", "color2", ",", "1", ")", "\n", "", "saveName", "=", "'{}_Att_gI:{}_L:{}.png'", ".", "format", "(", "imageName", ",", "gIter", ",", "attL", ")", "\n", "io", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "outDir", ",", "saveName", ")", ",", "image", ")", "\n", "\n", "\n", "\n", "\n", "", "", "if", "outDir", "is", "not", "None", ":", "\n", "                ", "saveName", "=", "'{}_gI{}_Fms_edge:{:.2f}_rel:{:.2f}_merge:{:.2f}_group:{:.2f}'", ".", "format", "(", "imageName", ",", "gIter", ",", "float", "(", "log", "[", "'FmEdge_{}'", ".", "format", "(", "gIter", ")", "]", ")", ",", "float", "(", "log", "[", "'FmRel_{}'", ".", "format", "(", "gIter", ")", "]", ")", ",", "float", "(", "log", "[", "'FmOverSeg_{}'", ".", "format", "(", "gIter", ")", "]", ")", ",", "float", "(", "log", "[", "'FmGroup_{}'", ".", "format", "(", "gIter", ")", "]", ")", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "outDir", ",", "saveName", "+", "'.png'", ")", "\n", "draw_graph", "(", "outputBoxes", ",", "bbPred", ".", "cpu", "(", ")", ".", "detach", "(", ")", "if", "bbPred", "is", "not", "None", "else", "None", ",", "torch", ".", "sigmoid", "(", "edgePred", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ",", "relIndexes", ",", "predGroups", ",", "data", ",", "edgePredTypes", ",", "missedRels", ",", "None", ",", "targetBoxes", ",", "path", ",", "useTextLines", "=", "False", ",", "targetGroups", "=", "instance", "[", "'gt_groups'", "]", ",", "targetPairs", "=", "instance", "[", "'gt_groups_adj'", "]", ",", "verbosity", "=", "draw_verbosity", ",", "bbAlignment", "=", "out", "[", "'allBBAlignment'", "]", "[", "gIter", "]", ")", "\n", "\n", "", "", "", "if", "outDir", "is", "not", "None", ":", "\n", "        ", "if", "'final_rel_Fm'", "in", "log", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "outDir", ",", "'{}_final_relFm:{:.2}_r+p:{:.2}+{:.2}_EDFm:{:.2}_r+p:{:.2}+{:.2}.png'", ".", "format", "(", "imageName", ",", "float", "(", "log", "[", "'final_rel_Fm'", "]", ")", ",", "float", "(", "log", "[", "'final_rel_recall'", "]", ")", ",", "float", "(", "log", "[", "'final_rel_prec'", "]", ")", ",", "float", "(", "log", "[", "'final_group_ED_F1'", "]", ")", ",", "float", "(", "log", "[", "'final_group_ED_recall'", "]", ")", ",", "float", "(", "log", "[", "'final_group_ED_precision'", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "outDir", ",", "'{}_relFm:{:.2}_r+p:{:.2}+{:.2}_EDFm:{:.2}_r+p:{:.2}+{:.2}.png'", ".", "format", "(", "imageName", ",", "float", "(", "log", "[", "'final_rel_BROS_F'", "]", ")", ",", "float", "(", "log", "[", "'final_rel_BROS_recall'", "]", ")", ",", "float", "(", "log", "[", "'final_rel_BROS_prec'", "]", ")", ",", "float", "(", "log", "[", "'ED_F1'", "]", ")", ",", "float", "(", "log", "[", "'ED_recall'", "]", ")", ",", "float", "(", "log", "[", "'ED_prec'", "]", ")", ")", ")", "\n", "\n", "", "finalOutputBoxes", ",", "finalPredGroups", ",", "finalEdgeIndexes", ",", "finalBBTrans", "=", "out", "[", "'final'", "]", "\n", "draw_graph", "(", "finalOutputBoxes", ",", "None", ",", "None", ",", "finalEdgeIndexes", ",", "finalPredGroups", ",", "data", ",", "out", "[", "'final_edgePredTypes'", "]", ",", "out", "[", "'final_missedRels'", "]", ",", "out", "[", "'final_missedGroups'", "]", ",", "targetBoxes", ",", "path", ",", "bbTrans", "=", "finalBBTrans", ",", "useTextLines", "=", "False", ",", "targetGroups", "=", "instance", "[", "'gt_groups'", "]", ",", "targetPairs", "=", "instance", "[", "'gt_groups_adj'", "]", ",", "verbosity", "=", "draw_verbosity", ")", "\n", "\n", "", "for", "key", "in", "losses", ".", "keys", "(", ")", ":", "\n", "        ", "losses", "[", "key", "]", "=", "losses", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "if", "False", ":", "\n", "        ", "retData", "=", "{", "\n", "**", "toRet", ",", "\n", "**", "losses", ",", "\n", "\n", "}", "\n", "", "else", ":", "\n", "        ", "retData", "=", "{", "}", "\n", "", "keep_prefixes", "=", "[", "'final_bb_all'", ",", "'final_group'", ",", "'final_rel'", ",", "'prop_rel'", ",", "'DocStruct'", ",", "'F-M'", ",", "'prec@'", ",", "'recall@'", ",", "'bb_Fm'", ",", "'bb_recall'", ",", "'bb_prec'", ",", "'ED_'", "]", "\n", "for", "key", ",", "value", "in", "log", ".", "items", "(", ")", ":", "\n", "        ", "if", "trainer", ".", "mergeAndGroup", ":", "\n", "            ", "for", "prefix", "in", "keep_prefixes", ":", "\n", "                ", "if", "key", ".", "startswith", "(", "prefix", ")", ":", "\n", "                    ", "if", "type", "(", "value", ")", "is", "np", ".", "ndarray", ":", "\n", "                        ", "retData", "[", "key", "]", "=", "{", "i", ":", "[", "value", "[", "i", "]", "]", "for", "i", "in", "range", "(", "value", ".", "shape", "[", "0", "]", ")", "}", "\n", "", "else", ":", "\n", "                        ", "retData", "[", "key", "]", "=", "[", "value", "]", "\n", "", "break", "\n", "", "", "", "else", ":", "\n", "            ", "if", "type", "(", "value", ")", "is", "np", ".", "ndarray", ":", "\n", "                ", "retData", "[", "key", "]", "=", "{", "i", ":", "[", "value", "[", "i", "]", "]", "for", "i", "in", "range", "(", "value", ".", "shape", "[", "0", "]", ")", "}", "\n", "", "else", ":", "\n", "                ", "retData", "[", "key", "]", "=", "[", "value", "]", "\n", "", "", "", "return", "(", "\n", "retData", ",", "\n", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.othergraphpair_eval.FormsGraphPair_eval": [[4, 6], ["evaluators.funsdgraphpair_eval.FUNSDGraphPair_eval"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdgraphpair_eval.FUNSDGraphPair_eval"], ["def", "FormsGraphPair_eval", "(", "config", ",", "instance", ",", "trainer", ",", "metrics", ",", "outDir", "=", "None", ",", "startIndex", "=", "None", ",", "lossFunc", "=", "None", ",", "toEval", "=", "None", ")", ":", "\n", "    ", "return", "FUNSDGraphPair_eval", "(", "config", ",", "instance", ",", "trainer", ",", "metrics", ",", "outDir", ",", "startIndex", ",", "lossFunc", ",", "toEval", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.getCorners": [[16, 31], ["xyrhw[].item", "xyrhw[].item", "xyrhw[].item", "xyrhw[].item", "xyrhw[].item", "min", "min", "utils.forms_annotations.calcCorners", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.forms_annotations.calcCorners"], ["def", "getCorners", "(", "xyrhw", ")", ":", "\n", "    ", "xc", "=", "xyrhw", "[", "0", "]", ".", "item", "(", ")", "\n", "yc", "=", "xyrhw", "[", "1", "]", ".", "item", "(", ")", "\n", "rot", "=", "xyrhw", "[", "2", "]", ".", "item", "(", ")", "\n", "h", "=", "xyrhw", "[", "3", "]", ".", "item", "(", ")", "\n", "w", "=", "xyrhw", "[", "4", "]", ".", "item", "(", ")", "\n", "h", "=", "min", "(", "30000", ",", "h", ")", "\n", "w", "=", "min", "(", "30000", ",", "w", ")", "\n", "#tr = ( int(w*math.cos(rot)-h*math.sin(rot) + xc),  int(w*math.sin(rot)+h*math.cos(rot) + yc) )", "\n", "#tl = ( int(-w*math.cos(rot)-h*math.sin(rot) + xc), int(-w*math.sin(rot)+h*math.cos(rot) + yc) )", "\n", "#br = ( int(w*math.cos(rot)+h*math.sin(rot) + xc),  int(w*math.sin(rot)-h*math.cos(rot) + yc) )", "\n", "#bl = ( int(-w*math.cos(rot)+h*math.sin(rot) + xc), int(-w*math.sin(rot)-h*math.cos(rot) + yc) )", "\n", "#return tl,tr,br,bl", "\n", "tl", ",", "tr", ",", "br", ",", "bl", "=", "calcCorners", "(", "xc", ",", "yc", ",", "rot", ",", "h", ",", "w", ")", "\n", "return", "[", "int", "(", "x", ")", "for", "x", "in", "tl", "]", ",", "[", "int", "(", "x", ")", "for", "x", "in", "tr", "]", ",", "[", "int", "(", "x", ")", "for", "x", "in", "br", "]", ",", "[", "int", "(", "x", ")", "for", "x", "in", "bl", "]", "\n", "", "def", "plotRect", "(", "img", ",", "color", ",", "xyrhw", ",", "lineW", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.plotRect": [[31, 38], ["funsdboxdetect_eval.getCorners", "utils.line", "utils.line", "utils.line", "utils.line", "skimage.color"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.getCorners", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line"], ["", "def", "plotRect", "(", "img", ",", "color", ",", "xyrhw", ",", "lineW", "=", "1", ")", ":", "\n", "    ", "tl", ",", "tr", ",", "br", ",", "bl", "=", "getCorners", "(", "xyrhw", ")", "\n", "\n", "img_f", ".", "line", "(", "img", ",", "tl", ",", "tr", ",", "color", ",", "lineW", ")", "\n", "img_f", ".", "line", "(", "img", ",", "tr", ",", "br", ",", "color", ",", "lineW", ")", "\n", "img_f", ".", "line", "(", "img", ",", "br", ",", "bl", ",", "color", ",", "lineW", ")", "\n", "img_f", ".", "line", "(", "img", ",", "bl", ",", "tl", ",", "color", ",", "lineW", ")", "\n", "", "def", "plotRectAndAngle", "(", "img", ",", "color", ",", "x1y1x2y2r", ",", "lineW", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.plotRectAndAngle": [[38, 61], ["x1y1x2y2r[].item", "x1y1x2y2r[].item", "x1y1x2y2r[].item", "x1y1x2y2r[].item", "x1y1x2y2r[].item", "utils.line", "utils.line", "utils.line", "utils.line", "utils.line", "round", "round", "round", "round", "round", "round", "round", "round", "min", "math.cos", "math.sin", "round", "round", "round", "round", "skimage.color"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.line"], ["", "def", "plotRectAndAngle", "(", "img", ",", "color", ",", "x1y1x2y2r", ",", "lineW", "=", "1", ")", ":", "\n", "    ", "x1", "=", "x1y1x2y2r", "[", "0", "]", ".", "item", "(", ")", "\n", "y1", "=", "x1y1x2y2r", "[", "1", "]", ".", "item", "(", ")", "\n", "x2", "=", "x1y1x2y2r", "[", "2", "]", ".", "item", "(", ")", "\n", "y2", "=", "x1y1x2y2r", "[", "3", "]", ".", "item", "(", ")", "\n", "rot", "=", "x1y1x2y2r", "[", "4", "]", ".", "item", "(", ")", "\n", "tl", "=", "(", "round", "(", "x1", ")", ",", "round", "(", "y1", ")", ")", "\n", "tr", "=", "(", "round", "(", "x2", ")", ",", "round", "(", "y1", ")", ")", "\n", "bl", "=", "(", "round", "(", "x1", ")", ",", "round", "(", "y2", ")", ")", "\n", "br", "=", "(", "round", "(", "x2", ")", ",", "round", "(", "y2", ")", ")", "\n", "img_f", ".", "line", "(", "img", ",", "tl", ",", "tr", ",", "color", ",", "lineW", ")", "\n", "img_f", ".", "line", "(", "img", ",", "tr", ",", "br", ",", "color", ",", "lineW", ")", "\n", "img_f", ".", "line", "(", "img", ",", "br", ",", "bl", ",", "color", ",", "lineW", ")", "\n", "img_f", ".", "line", "(", "img", ",", "bl", ",", "tl", ",", "color", ",", "lineW", ")", "\n", "\n", "xc", "=", "(", "x1", "+", "x2", ")", "/", "2", "\n", "yc", "=", "(", "y1", "+", "y2", ")", "/", "2", "\n", "m", "=", "min", "(", "x2", "-", "x1", ",", "y2", "-", "y1", ")", "/", "2", "\n", "xoff", "=", "math", ".", "cos", "(", "rot", ")", "*", "m", "\n", "yoff", "=", "-", "math", ".", "sin", "(", "rot", ")", "*", "m", "#neg because coord plane is flipped", "\n", "#xoffB = -math.cos(rot)*m", "\n", "#yoffB = math.cos(rot)*m ", "\n", "img_f", ".", "line", "(", "img", ",", "(", "round", "(", "xc", "+", "xoff", ")", ",", "round", "(", "yc", "+", "yoff", ")", ")", ",", "(", "round", "(", "xc", "-", "xoff", ")", ",", "round", "(", "yc", "-", "yoff", ")", ")", ",", "color", ",", "lineW", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.FormsBoxDetect_eval": [[62, 64], ["funsdboxdetect_eval.FUNSDBoxDetect_eval"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.FUNSDBoxDetect_eval"], ["", "def", "FormsBoxDetect_eval", "(", "config", ",", "instance", ",", "trainer", ",", "metrics", ",", "outDir", "=", "None", ",", "startIndex", "=", "None", ",", "lossFunc", "=", "None", ",", "toEval", "=", "None", ")", ":", "\n", "    ", "return", "FUNSDBoxDetect_eval", "(", "config", ",", "instance", ",", "trainer", ",", "metrics", ",", "outDir", ",", "startIndex", ",", "lossFunc", ",", "toEval", ")", "\n", "", "def", "FUNSDBoxDetect_eval", "(", "config", ",", "instance", ",", "trainer", ",", "metrics", ",", "outDir", "=", "None", ",", "startIndex", "=", "None", ",", "lossFunc", "=", "None", ",", "toEval", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.FUNSDBoxDetect_eval": [[64, 428], ["trainer.run", "data.cpu().data.numpy.cpu().data.numpy", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "numpy.zeros", "range", "targetPointsOld.items", "outputPixels.cpu().data.numpy.cpu().data.numpy", "range", "enumerate", "range", "outputPointsOld[].cpu().data.numpy", "outputBBs[].data.numpy", "len", "metric", "data.cpu().data.numpy.cpu", "outputBBs[].max().item", "print", "threshed_outputBBs.append", "utils.yolo_tools.non_max_sup_dist", "outputBBs[].max().item", "utils.yolo_tools.non_max_sup_iou", "targ.data.numpy", "range", "os.path.join", "range", "utils.imwrite", "print", "outputPoints.items", "outputBBs[].cpu", "utils.yolo_tools.non_max_sup_overseg", "utils.yolo_tools.non_max_sup_iou.cpu", "utils.yolo_tools.non_max_sup_iou.cpu", "outputPixels.cpu().data.numpy.cpu", "predNN.tolist", "targetBBs[].size", "funsdboxdetect_eval.getCorners", "targIndex[].item", "bbsData.append", "open", "json.dump", "print", "utils.gray2rgb", "range", "os.path.join", "range", "max", "range", "points.sort", "utils.imwrite", "range", "utils.imwrite", "outputBBs[].max", "outputBBs[].mean().item", "outputBBs[].max", "outputPointsOld[].cpu", "torch.ones", "float", "float", "float", "float", "funsdboxdetect_eval.plotRect", "numpy.argmax", "os.path.join", "utils.circle", "out[].max", "utils.circle", "os.path.join", "os.path.join", "utils.yolo_tools.getTargIndexForPreds_dist", "utils.yolo_tools.getTargIndexForPreds_iou", "funsdboxdetect_eval.plotRectAndAngle", "funsdboxdetect_eval.plotRect", "int", "int", "utils.putText", "points.append", "outputBBs[].mean", "torch.from_numpy", "torch.from_numpy", "float", "float", "float", "float", "float", "float", "float", "float", "numpy.transpose", "numpy.transpose", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.trainer.box_detect_trainer.BoxDetectTrainer.run", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.non_max_sup_dist", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.non_max_sup_iou", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imwrite", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.non_max_sup_overseg", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.getCorners", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.gray2rgb", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imwrite", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.imwrite", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.plotRect", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.getTargIndexForPreds_dist", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.getTargIndexForPreds_iou", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.plotRectAndAngle", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.funsdboxdetect_eval.plotRect"], ["", "def", "FUNSDBoxDetect_eval", "(", "config", ",", "instance", ",", "trainer", ",", "metrics", ",", "outDir", "=", "None", ",", "startIndex", "=", "None", ",", "lossFunc", "=", "None", ",", "toEval", "=", "None", ")", ":", "\n", "    ", "def", "__eval_metrics", "(", "data", ",", "target", ")", ":", "\n", "        ", "acc_metrics", "=", "np", ".", "zeros", "(", "(", "output", ".", "shape", "[", "0", "]", ",", "len", "(", "metrics", ")", ")", ")", "\n", "for", "ind", "in", "range", "(", "output", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "i", ",", "metric", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                ", "acc_metrics", "[", "ind", ",", "i", "]", "+=", "metric", "(", "output", "[", "ind", ":", "ind", "+", "1", "]", ",", "target", "[", "ind", ":", "ind", "+", "1", "]", ")", "\n", "", "", "return", "acc_metrics", "\n", "\n", "", "if", "toEval", "is", "None", ":", "\n", "        ", "toEval", "=", "[", "'bbs'", "]", "\n", "", "THRESH", "=", "config", "[", "'THRESH'", "]", "if", "'THRESH'", "in", "config", "else", "0.92", "\n", "axis_aligned_prediction", "=", "config", "[", "'arch'", "]", "==", "'OverSegBoxDetector'", "\n", "#print(type(instance['pixel_gt']))", "\n", "#if type(instance['pixel_gt']) == list:", "\n", "#    print(instance)", "\n", "#    print(startIndex)", "\n", "#data, targetBB, targetBBSizes = instance", "\n", "data", "=", "instance", "[", "'img'", "]", "\n", "batchSize", "=", "data", ".", "shape", "[", "0", "]", "\n", "targetBBs", "=", "instance", "[", "'bb_gt'", "]", "\n", "targetBBsSizes", "=", "instance", "[", "'bb_sizes'", "]", "\n", "targetPoints", "=", "instance", "[", "'point_gt'", "]", "\n", "targetPixels", "=", "instance", "[", "'pixel_gt'", "]", "\n", "imageName", "=", "instance", "[", "'imgName'", "]", "\n", "scale", "=", "instance", "[", "'scale'", "]", "\n", "target_num_neighbors", "=", "instance", "[", "'num_neighbors'", "]", "\n", "\n", "pretty", "=", "config", "[", "'pretty'", "]", "if", "'pretty'", "in", "config", "else", "False", "\n", "\n", "resultsDirName", "=", "'results'", "\n", "#if outDir is not None and resultsDirName is not None:", "\n", "#rPath = os.path.join(outDir,resultsDirName)", "\n", "#if not os.path.exists(rPath):", "\n", "#    os.mkdir(rPath)", "\n", "#for name in targetBBs:", "\n", "#    nPath = os.path.join(rPath,name)", "\n", "#    if not os.path.exists(nPath):", "\n", "#        os.mkdir(nPath)", "\n", "\n", "#dataT = __to_tensor(data,gpu)", "\n", "#print('{}: {} x {}'.format(imageName,data.shape[2],data.shape[3]))", "\n", "#outputBBs, outputOffsets, outputLines, outputOffsetLines, outputPoints, outputPixels = model(dataT)", "\n", "losses", ",", "log", ",", "out", "=", "trainer", ".", "run", "(", "instance", ",", "get", "=", "toEval", ",", "val", "=", "True", ")", "\n", "#if outputPixels is not None:", "\n", "#    outputPixels = torch.sigmoid(outputPixels)", "\n", "index", "=", "0", "\n", "loss", "=", "0", "\n", "index", "=", "0", "\n", "ttt_hit", "=", "True", "\n", "\n", "data", "=", "data", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "if", "'bbs'", "in", "out", ":", "\n", "        ", "outputBBs", "=", "out", "[", "'bbs'", "]", "\n", "#threshConf = maxConf*THRESH", "\n", "if", "axis_aligned_prediction", ":", "#overseg", "\n", "            ", "threshed_outputBBs", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "batchSize", ")", ":", "\n", "                ", "maxConf", "=", "outputBBs", "[", "b", ",", ":", ",", "0", "]", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "threshConf", "=", "maxConf", "*", "THRESH", "#max(maxConf*THRESH,0.5)", "\n", "print", "(", "'b:{}, maxConf: {}, meanConf: {}, thresh: {}'", ".", "format", "(", "b", ",", "maxConf", ",", "outputBBs", "[", "b", ",", ":", ",", "0", "]", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "threshConf", ")", ")", "\n", "\n", "threshed_outputBBs", ".", "append", "(", "outputBBs", "[", "b", ",", "outputBBs", "[", "b", ",", ":", ",", "0", "]", ">", "threshConf", "]", ".", "cpu", "(", ")", ")", "\n", "if", "'SUP'", "in", "config", ":", "\n", "                    ", "threshed_outputBBs", "[", "0", "]", "=", "non_max_sup_overseg", "(", "threshed_outputBBs", "[", "0", "]", ")", "\n", "", "", "outputBBs", "=", "threshed_outputBBs", "\n", "\n", "#Uhh, I don't know if there is an effiecient method to prune out reduntant predictions, as you have to recompute things every time you prune one. For now, I won't worry about it", "\n", "#outputBBs = non_max_sup_keep_overlap_iou(outputBBs.cpu(),threshConf,0.4)", "\n", "\n", "#outputBBs = non_max_sup_iou(outputBBs.cpu(),threshConf,2,hard_limit=999000)", "\n", "#iou threshed, but also need to optimize to maintain overlap...", "\n", "#precompute all iou, and thus intersections", "\n", "#order by conf,#", "\n", "#   examine offending (over iou thresh) boxes, reverse conf (lowest up)", "\n", "#       does this the only bridge between me and another box?", "\n", "", "elif", "trainer", ".", "model", ".", "rotation", ":", "\n", "            ", "outputBBs", "=", "non_max_sup_dist", "(", "outputBBs", ".", "cpu", "(", ")", ",", "threshConf", ",", "3", ")", "\n", "", "else", ":", "\n", "            ", "maxConf", "=", "outputBBs", "[", ":", ",", ":", ",", "0", "]", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "threshConf", "=", "maxConf", "*", "THRESH", "\n", "outputBBs", "=", "non_max_sup_iou", "(", "outputBBs", ".", "cpu", "(", ")", ",", "threshConf", ",", "0.4", ")", "\n", "\n", "", "", "numClasses", "=", "trainer", ".", "model", ".", "numBBTypes", "\n", "\n", "if", "'points'", "in", "out", ":", "\n", "        ", "outputPointsOld", "=", "outputPoints", "\n", "targetPointsOld", "=", "targetPoints", "\n", "outputPoints", "=", "{", "}", "\n", "targetPoints", "=", "{", "}", "\n", "i", "=", "0", "\n", "for", "name", ",", "targ", "in", "targetPointsOld", ".", "items", "(", ")", ":", "\n", "            ", "if", "targ", "is", "not", "None", ":", "\n", "                ", "targetPoints", "[", "name", "]", "=", "targ", ".", "data", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "targetPoints", "[", "name", "]", "=", "None", "\n", "", "outputPoints", "[", "name", "]", "=", "outputPointsOld", "[", "i", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "i", "+=", "1", "\n", "", "", "if", "'pixels'", "in", "out", "and", "outputPixels", "is", "not", "None", ":", "\n", "        ", "outputPixels", "=", "outputPixels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "#metricsOut = __eval_metrics(outputBBs,targetBBs)", "\n", "#metricsOut = 0", "\n", "#if outDir is None:", "\n", "#    return metricsOut", "\n", "\n", "", "dists", "=", "defaultdict", "(", "list", ")", "\n", "dists_x", "=", "defaultdict", "(", "list", ")", "\n", "dists_y", "=", "defaultdict", "(", "list", ")", "\n", "scaleDiffs", "=", "defaultdict", "(", "list", ")", "\n", "rotDiffs", "=", "defaultdict", "(", "list", ")", "\n", "\n", "if", "'bbs'", "in", "out", ":", "\n", "        ", "allPredNNs", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "batchSize", ")", ":", "\n", "#outputBBs[b] = outputBBs[b].data.numpy()", "\n", "#print('image {} has {} {}'.format(startIndex+b,targetBBsSizes[name][b],name))", "\n", "#bbImage = np.ones_like(image)", "\n", "            ", "bbs", "=", "outputBBs", "[", "b", "]", ".", "data", ".", "numpy", "(", ")", "\n", "if", "bbs", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "if", "trainer", ".", "model", ".", "predNumNeighbors", ":", "\n", "                    ", "predNN", "=", "bbs", "[", ":", ",", "6", "]", "\n", "allPredNNs", "+=", "predNN", ".", "tolist", "(", ")", "\n", "predClass", "=", "bbs", "[", ":", ",", "7", ":", "]", "\n", "", "else", ":", "\n", "                    ", "predClass", "=", "bbs", "[", ":", ",", "6", ":", "]", "\n", "", "", "else", ":", "\n", "                ", "predNN", "=", "bbs", "#i.e. a zero size tensor", "\n", "predClass", "=", "bbs", "\n", "\n", "", "if", "'save_json'", "in", "config", ":", "\n", "                ", "assert", "(", "batchSize", "==", "1", ")", "\n", "scale", "=", "scale", "[", "0", "]", "\n", "if", "targetBBs", "is", "not", "None", ":", "\n", "                    ", "if", "axis_aligned_prediction", ":", "\n", "                        ", "pass", "#?", "\n", "", "elif", "trainer", ".", "model", ".", "rotation", ":", "\n", "                        ", "targIndex", ",", "predWithNoIntersection", "=", "getTargIndexForPreds_dist", "(", "targetBBs", "[", "b", "]", ",", "torch", ".", "from_numpy", "(", "bbs", ")", ",", "1.1", ",", "numClasses", ",", "extraPreds", ")", "\n", "", "else", ":", "\n", "                        ", "targIndex", ",", "predWithNoIntersection", "=", "getTargIndexForPreds_iou", "(", "targetBBs", "[", "b", "]", ",", "torch", ".", "from_numpy", "(", "bbs", ")", ",", "0.4", ",", "numClasses", ",", "extraPreds", ")", "\n", "", "newId", "=", "targetBBs", "[", "b", "]", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "targIndex", "=", "-", "1", "*", "torch", ".", "ones", "(", "bbs", ".", "shape", "[", "0", "]", ")", "\n", "newId", "=", "1", "\n", "", "bbsData", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "bbs", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "tl", ",", "tr", ",", "br", ",", "bl", "=", "getCorners", "(", "bbs", "[", "j", ",", "1", ":", "]", ")", "\n", "id", "=", "targIndex", "[", "j", "]", ".", "item", "(", ")", "\n", "if", "id", "<", "0", ":", "\n", "                        ", "id", "=", "'u{}'", ".", "format", "(", "newId", ")", "\n", "newId", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "id", "=", "'m{}'", ".", "format", "(", "id", ")", "\n", "", "bb", "=", "{", "\n", "'id'", ":", "id", ",", "\n", "'poly_points'", ":", "[", "[", "float", "(", "tl", "[", "0", "]", "/", "scale", ")", ",", "float", "(", "tl", "[", "1", "]", "/", "scale", ")", "]", ",", "\n", "[", "float", "(", "tr", "[", "0", "]", "/", "scale", ")", ",", "float", "(", "tr", "[", "1", "]", "/", "scale", ")", "]", ",", "\n", "[", "float", "(", "br", "[", "0", "]", "/", "scale", ")", ",", "float", "(", "br", "[", "1", "]", "/", "scale", ")", "]", ",", "\n", "[", "float", "(", "bl", "[", "0", "]", "/", "scale", ")", ",", "float", "(", "bl", "[", "1", "]", "/", "scale", ")", "]", "]", ",", "\n", "'type'", ":", "'detectorPrediction'", ",", "\n", "'textPred'", ":", "float", "(", "predClass", "[", "j", ",", "0", "]", ")", ",", "\n", "'fieldPred'", ":", "float", "(", "predClass", "[", "j", ",", "1", "]", ")", "\n", "}", "\n", "if", "numClasses", "==", "2", "and", "trainer", ".", "model", ".", "numBBTypes", "==", "3", ":", "\n", "                        ", "bb", "[", "'blankPred'", "]", "=", "float", "(", "predClass", "[", "j", ",", "2", "]", ")", "\n", "", "if", "trainer", ".", "model", ".", "predNumNeighbors", ":", "\n", "                        ", "bb", "[", "'nnPred'", "]", "=", "float", "(", "predNN", "[", "j", "]", ")", "\n", "", "bbsData", ".", "append", "(", "bb", ")", "\n", "\n", "", "if", "instance", "[", "'pairs'", "]", "is", "None", ":", "\n", "#import pdb; pdb.set_trace()", "\n", "                    ", "instance", "[", "'pairs'", "]", "=", "[", "]", "\n", "", "pairsData", "=", "[", "(", "'m{}'", ".", "format", "(", "i1", ")", ",", "'m{}'", ".", "format", "(", "i2", ")", ")", "for", "i1", ",", "i2", "in", "instance", "[", "'pairs'", "]", "]", "\n", "\n", "saveJSON", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'save_json'", "]", ",", "imageName", "[", "b", "]", "+", "'.json'", ")", "\n", "allData", "=", "{", "\n", "'textBBs'", ":", "bbsData", ",", "\n", "'fieldBBs'", ":", "[", "]", ",", "\n", "'pairs'", ":", "pairsData", "\n", "}", "\n", "with", "open", "(", "saveJSON", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "json", ".", "dump", "(", "allData", ",", "f", ")", "\n", "print", "(", "'wrote {}'", ".", "format", "(", "saveJSON", ")", ")", "\n", "\n", "\n", "", "", "if", "outDir", "is", "not", "None", ":", "\n", "#Write the results so we can train LF with them", "\n", "#saveFile = os.path.join(outDir,resultsDirName,name,'{}'.format(imageName[b]))", "\n", "#we must rescale the output to be according to the original image", "\n", "#rescaled_outputBBs_xyrs = outputBBs_xyrs[name][b]", "\n", "#rescaled_outputBBs_xyrs[:,1] /= scale[b]", "\n", "#rescaled_outputBBs_xyrs[:,2] /= scale[b]", "\n", "#rescaled_outputBBs_xyrs[:,4] /= scale[b]", "\n", "\n", "#np.save(saveFile,rescaled_outputBBs_xyrs)", "\n", "                ", "image", "=", "(", "1", "-", "(", "(", "1", "+", "np", ".", "transpose", "(", "data", "[", "b", "]", "[", ":", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "/", "2.0", ")", ")", ".", "copy", "(", ")", "\n", "\n", "if", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "                    ", "image", "=", "img_f", ".", "gray2rgb", "(", "image", ")", "\n", "#if name=='text_start_gt':", "\n", "\n", "", "if", "not", "pretty", ":", "\n", "                    ", "for", "j", "in", "range", "(", "targetBBsSizes", "[", "b", "]", ")", ":", "\n", "                        ", "plotRect", "(", "image", ",", "(", "1", ",", "0.5", ",", "0", ")", ",", "targetBBs", "[", "b", ",", "j", ",", "0", ":", "5", "]", ")", "\n", "#if trainer.model.predNumNeighbors:", "\n", "#    x=int(targetBBs[b,j,0])", "\n", "#    y=int(targetBBs[b,j,1]+targetBBs[b,j,3])", "\n", "#    img_f.putText(image,'{:.2f}'.format(gtNumNeighbors[b,j]),(x,y), cv2.FONT_HERSHEY_SIMPLEX, 0.5,(0.6,0.3,0),2,cv2.LINE_AA)", "\n", "#if alignmentBBs[b] is not None:", "\n", "#    aj=alignmentBBs[b][j]", "\n", "#    xc_gt = targetBBs[b,j,0]", "\n", "#    yc_gt = targetBBs[b,j,1]", "\n", "#    xc=outputBBs[b,aj,1]", "\n", "#    yc=outputBBs[b,aj,2]", "\n", "#    img_f.line(image,(xc,yc),(xc_gt,yc_gt),(0,1,0),1)", "\n", "#    shade = 0.0+(outputBBs[b,aj,0]-threshConf)/(maxConf-threshConf)", "\n", "#    shade = max(0,shade)", "\n", "#    if outputBBs[b,aj,6] > outputBBs[b,aj,7]:", "\n", "#        color=(0,shade,shade) #text", "\n", "#    else:", "\n", "#        color=(shade,shade,0) #field", "\n", "#    plotRect(image,color,outputBBs[b,aj,1:6])", "\n", "\n", "#bbs=[]", "\n", "#pred_points=[]", "\n", "#maxConf = outputBBs[b,:,0].max()", "\n", "#threshConf = 0.5 ", "\n", "#threshConf = max(maxConf*0.9,0.5)", "\n", "#print(\"threshConf:{}\".format(threshConf))", "\n", "#for j in range(outputBBs.shape[1]):", "\n", "#    conf = outputBBs[b,j,0]", "\n", "#    if conf>threshConf:", "\n", "#        bbs.append((conf,j))", "\n", "#    #pred_points.append(", "\n", "#bbs.sort(key=lambda a: a[0]) #so most confident bbs are draw last (on top)", "\n", "#import pdb; pdb.set_trace()", "\n", "", "", "for", "j", "in", "range", "(", "bbs", ".", "shape", "[", "0", "]", ")", ":", "\n", "#circle aligned predictions", "\n", "                    ", "conf", "=", "bbs", "[", "j", ",", "0", "]", "\n", "if", "outDir", "is", "not", "None", ":", "\n", "                        ", "shade", "=", "conf", "#0.0+(conf-threshConf)/(maxConf-threshConf)", "\n", "assert", "(", "shade", ">=", "0", "and", "shade", "<=", "1", ")", "\n", "#print(shade)", "\n", "#if name=='text_start_gt' or name=='field_end_gt':", "\n", "#    img_f.bb(bbImage[:,:,1],p1,p2,shade,2)", "\n", "#if name=='text_end_gt':", "\n", "#    img_f.bb(bbImage[:,:,2],p1,p2,shade,2)", "\n", "#elif name=='field_end_gt' or name=='field_start_gt':", "\n", "#    img_f.bb(bbImage[:,:,0],p1,p2,shade,2)", "\n", "maxClassIndex", "=", "np", ".", "argmax", "(", "predClass", "[", "j", "]", ")", "\n", "if", "maxClassIndex", "==", "0", ":", "#header", "\n", "                            ", "color", "=", "(", "0", ",", "0", ",", "shade", ")", "\n", "", "elif", "maxClassIndex", "==", "1", ":", "#question", "\n", "                            ", "color", "=", "(", "0", ",", "shade", ",", "shade", ")", "\n", "", "elif", "maxClassIndex", "==", "2", ":", "#answer", "\n", "                            ", "color", "=", "(", "shade", ",", "shade", ",", "0", ")", "\n", "", "elif", "maxClassIndex", "==", "3", ":", "#other", "\n", "                            ", "color", "=", "(", "shade", ",", "0", ",", "shade", ")", "\n", "", "else", ":", "\n", "                            ", "assert", "(", "False", ")", "\n", "\n", "\n", "", "if", "pretty", ":", "\n", "                            ", "lineW", "=", "2", "\n", "", "else", ":", "\n", "                            ", "lineW", "=", "1", "\n", "", "if", "axis_aligned_prediction", ":", "\n", "                            ", "plotRectAndAngle", "(", "image", ",", "color", ",", "bbs", "[", "j", ",", "1", ":", "6", "]", ",", "lineW", ")", "\n", "", "else", ":", "\n", "                            ", "plotRect", "(", "image", ",", "color", ",", "bbs", "[", "j", ",", "1", ":", "6", "]", ",", "lineW", ")", "\n", "", "if", "trainer", ".", "model", ".", "predNumNeighbors", "and", "not", "pretty", ":", "\n", "                            ", "x", "=", "int", "(", "bbs", "[", "j", ",", "1", "]", ")", "\n", "y", "=", "int", "(", "bbs", "[", "j", ",", "2", "]", "-", "bbs", "[", "j", ",", "4", "]", ")", "\n", "#color = int(min(abs(predNN[j]-target_num_neighbors[j]),2)*127)", "\n", "#img_f.putText(image,'{}/{}'.format(predNN[j],target_num_neighbors[j]),(x,y), cv2.FONT_HERSHEY_SIMPLEX, 3,(color,0,0),2,cv2.LINE_AA)", "\n", "img_f", ".", "putText", "(", "image", ",", "'{:.2f}'", ".", "format", "(", "predNN", "[", "j", "]", ")", ",", "(", "x", ",", "y", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.5", ",", "color", ",", "2", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n", "\n", "#for j in alignmentBBsTarg[name][b]:", "\n", "#    p1 = (targetBBs[name][b,j,0], targetBBs[name][b,j,1])", "\n", "#    p2 = (targetBBs[name][b,j,0], targetBBs[name][b,j,1])", "\n", "#    mid = ( int(round((p1[0]+p2[0])/2.0)), int(round((p1[1]+p2[1])/2.0)) )", "\n", "#    rad = round(math.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)/2.0)", "\n", "#    #print(mid)", "\n", "#    #print(rad)", "\n", "#    img_f.circle(image,mid,rad,(1,0,1),1)", "\n", "\n", "#saveName = '{}_boxes_AP:{:.2f}'.format(imageName[b],aps_5all[b])", "\n", "", "", "", "saveName", "=", "'{}_boxes'", ".", "format", "(", "imageName", "[", "b", "]", ")", "\n", "\n", "\n", "#for j in range(metricsOut.shape[1]):", "\n", "#    saveName+='_m:{0:.3f}'.format(metricsOut[i,j])", "\n", "saveName", "+=", "'.png'", "\n", "img_f", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "outDir", ",", "saveName", ")", ",", "image", ")", "\n", "print", "(", "'saved: '", "+", "os", ".", "path", ".", "join", "(", "outDir", ",", "saveName", ")", ")", "\n", "", "if", "'points'", "in", "out", ":", "\n", "                ", "for", "name", ",", "out", "in", "outputPoints", ".", "items", "(", ")", ":", "\n", "                    ", "image", "=", "(", "1", "-", "(", "(", "1", "+", "np", ".", "transpose", "(", "data", "[", "b", "]", "[", ":", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "/", "2.0", ")", ")", ".", "copy", "(", ")", "\n", "#if name=='text_start_gt':", "\n", "for", "j", "in", "range", "(", "targetPointsSizes", "[", "name", "]", "[", "b", "]", ")", ":", "\n", "                        ", "p1", "=", "(", "targetPoints", "[", "name", "]", "[", "b", ",", "j", ",", "0", "]", ",", "targetPoints", "[", "name", "]", "[", "b", ",", "j", ",", "1", "]", ")", "\n", "img_f", ".", "circle", "(", "image", ",", "p1", ",", "2", ",", "(", "1", ",", "0.5", ",", "0", ")", ",", "-", "1", ")", "\n", "", "points", "=", "[", "]", "\n", "maxConf", "=", "max", "(", "out", "[", "b", ",", ":", ",", "0", "]", ".", "max", "(", ")", ",", "1.0", ")", "\n", "threshConf", "=", "maxConf", "*", "0.1", "\n", "for", "j", "in", "range", "(", "out", ".", "shape", "[", "1", "]", ")", ":", "\n", "                        ", "conf", "=", "out", "[", "b", ",", "j", ",", "0", "]", "\n", "if", "conf", ">", "threshConf", ":", "\n", "                            ", "p1", "=", "(", "out", "[", "b", ",", "j", ",", "1", "]", ",", "out", "[", "b", ",", "j", ",", "2", "]", ")", "\n", "points", ".", "append", "(", "(", "conf", ",", "p1", ",", "j", ")", ")", "\n", "", "", "points", ".", "sort", "(", "key", "=", "lambda", "a", ":", "a", "[", "0", "]", ")", "#so most confident bbs are draw last (on top)", "\n", "for", "conf", ",", "p1", ",", "j", "in", "points", ":", "\n", "                        ", "shade", "=", "0.0", "+", "conf", "/", "maxConf", "\n", "if", "name", "==", "'table_points'", ":", "\n", "                            ", "color", "=", "(", "0", ",", "0", ",", "shade", ")", "\n", "", "else", ":", "\n", "                            ", "color", "=", "(", "shade", ",", "0", ",", "0", ")", "\n", "", "img_f", ".", "circle", "(", "image", ",", "p1", ",", "2", ",", "color", ",", "-", "1", ")", "\n", "if", "alignmentPointsPred", "[", "name", "]", "is", "not", "None", "and", "j", "in", "alignmentPointsPred", "[", "name", "]", "[", "b", "]", ":", "\n", "                            ", "mid", "=", "p1", "#( int(round((p1[0]+p2[0])/2.0)), int(round((p1[1]+p2[1])/2.0)) )", "\n", "rad", "=", "4", "#round(math.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)/2.0)", "\n", "#print(mid)", "\n", "#print(rad)", "\n", "#img_f.circle(image,mid,rad,(0,1,1),1)", "\n", "#for j in alignmentBBsTarg[name][b]:", "\n", "#    p1 = (targetBBs[name][b,j,0], targetBBs[name][b,j,1])", "\n", "#    p2 = (targetBBs[name][b,j,0], targetBBs[name][b,j,1])", "\n", "#    mid = ( int(round((p1[0]+p2[0])/2.0)), int(round((p1[1]+p2[1])/2.0)) )", "\n", "#    rad = round(math.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)/2.0)", "\n", "#    #print(mid)", "\n", "#    #print(rad)", "\n", "#    img_f.circle(image,mid,rad,(1,0,1),1)", "\n", "\n", "", "", "saveName", "=", "'{:06}_{}'", ".", "format", "(", "startIndex", "+", "b", ",", "name", ")", "\n", "#for j in range(metricsOut.shape[1]):", "\n", "#    saveName+='_m:{0:.3f}'.format(metricsOut[i,j])", "\n", "saveName", "+=", "'.png'", "\n", "img_f", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "outDir", ",", "saveName", ")", ",", "image", ")", "\n", "\n", "", "", "if", "'pixels'", "in", "out", ":", "\n", "                ", "image", "=", "(", "1", "-", "(", "(", "1", "+", "np", ".", "transpose", "(", "data", "[", "b", "]", "[", ":", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "/", "2.0", ")", ")", ".", "copy", "(", ")", "\n", "if", "outputPixels", "is", "not", "None", ":", "\n", "                    ", "for", "ch", "in", "range", "(", "outputPixels", ".", "shape", "[", "1", "]", ")", ":", "\n", "                        ", "image", "[", ":", ",", ":", ",", "ch", "]", "=", "1", "-", "outputPixels", "[", "b", ",", "ch", ",", ":", ",", ":", "]", "\n", "", "saveName", "=", "'{:06}_pixels.png'", ".", "format", "(", "startIndex", "+", "b", ",", "name", ")", "\n", "img_f", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "outDir", ",", "saveName", ")", ",", "image", ")", "\n", "#print('finished writing {}'.format(startIndex+b))", "\n", "\n", "#return metricsOut", "\n", "", "", "", "", "toRet", "=", "log", "\n", "#toRet=   { 'ap_5':aps_5,", "\n", "#             #'class_aps': class_aps,", "\n", "#             #'ap_3':aps_3,", "\n", "#             #'ap_7':aps_7,", "\n", "#           'recall':recalls_5,", "\n", "#           'prec':precs_5,", "\n", "#           'nn_loss': nn_loss,", "\n", "#         }", "\n", "#for i in range(numClasses):", "\n", "#    toRet['class{}_ap'.format(i)]=class_aps[i]", "\n", "\n", "return", "(", "\n", "toRet", ",", "\n", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.data_loader.data_loaders.getDataLoader": [[14, 51], ["config[].items", "data_loaders.withCollate", "data_loaders.withCollate", "data_loaders.withCollate", "data_loaders.withCollate", "print", "exit"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.data_loader.data_loaders.withCollate", "home.repos.pwc.inspect_result.herobd_FUDGE.data_loader.data_loaders.withCollate", "home.repos.pwc.inspect_result.herobd_FUDGE.data_loader.data_loaders.withCollate", "home.repos.pwc.inspect_result.herobd_FUDGE.data_loader.data_loaders.withCollate"], ["def", "getDataLoader", "(", "config", ",", "split", ",", "rank", "=", "None", ",", "world_size", "=", "None", ")", ":", "\n", "        ", "data_set_name", "=", "config", "[", "'data_loader'", "]", "[", "'data_set_name'", "]", "\n", "data_dir", "=", "config", "[", "'data_loader'", "]", "[", "'data_dir'", "]", "\n", "batch_size", "=", "config", "[", "'data_loader'", "]", "[", "'batch_size'", "]", "\n", "valid_batch_size", "=", "config", "[", "'validation'", "]", "[", "'batch_size'", "]", "if", "'batch_size'", "in", "config", "[", "'validation'", "]", "else", "batch_size", "\n", "\n", "#copy info from main dataloader to validation (but don't overwrite)", "\n", "#helps insure same data", "\n", "for", "k", ",", "v", "in", "config", "[", "'data_loader'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "config", "[", "'validation'", "]", ":", "\n", "                ", "config", "[", "'validation'", "]", "[", "k", "]", "=", "v", "\n", "\n", "", "", "if", "'augmentation_params'", "in", "config", "[", "'data_loader'", "]", ":", "\n", "            ", "aug_param", "=", "config", "[", "'data_loader'", "]", "[", "'augmentation_params'", "]", "\n", "", "else", ":", "\n", "            ", "aug_param", "=", "None", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "shuffle", "=", "config", "[", "'data_loader'", "]", "[", "'shuffle'", "]", "\n", "", "else", ":", "\n", "            ", "shuffle", "=", "False", "\n", "", "if", "'num_workers'", "in", "config", "[", "'data_loader'", "]", ":", "\n", "            ", "numDataWorkers", "=", "config", "[", "'data_loader'", "]", "[", "'num_workers'", "]", "\n", "", "else", ":", "\n", "            ", "numDataWorkers", "=", "1", "\n", "", "shuffleValid", "=", "config", "[", "'validation'", "]", "[", "'shuffle'", "]", "\n", "\n", "if", "data_set_name", "==", "'FormsBoxDetect'", ":", "\n", "            ", "return", "withCollate", "(", "FormsBoxDetect", ",", "forms_box_detect", ".", "collate", ",", "batch_size", ",", "valid_batch_size", ",", "shuffle", ",", "shuffleValid", ",", "numDataWorkers", ",", "split", ",", "data_dir", ",", "config", ")", "\n", "", "elif", "data_set_name", "==", "'FormsGraphPair'", ":", "\n", "            ", "return", "withCollate", "(", "forms_graph_pair", ".", "FormsGraphPair", ",", "forms_graph_pair", ".", "collate", ",", "batch_size", ",", "valid_batch_size", ",", "shuffle", ",", "shuffleValid", ",", "numDataWorkers", ",", "split", ",", "data_dir", ",", "config", ")", "\n", "", "elif", "data_set_name", "==", "'FUNSDBoxDetect'", ":", "\n", "            ", "return", "withCollate", "(", "funsd_box_detect", ".", "FUNSDBoxDetect", ",", "funsd_box_detect", ".", "collate", ",", "batch_size", ",", "valid_batch_size", ",", "shuffle", ",", "shuffleValid", ",", "numDataWorkers", ",", "split", ",", "data_dir", ",", "config", ")", "\n", "", "elif", "data_set_name", "==", "'FUNSDGraphPair'", ":", "\n", "            ", "return", "withCollate", "(", "funsd_graph_pair", ".", "FUNSDGraphPair", ",", "funsd_graph_pair", ".", "collate", ",", "batch_size", ",", "valid_batch_size", ",", "shuffle", ",", "shuffleValid", ",", "numDataWorkers", ",", "split", ",", "data_dir", ",", "config", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Error, no dataloader has no set for {}'", ".", "format", "(", "data_set_name", ")", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.data_loader.data_loaders.basic": [[54, 70], ["setObj", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "setObj", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "setObj", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "setObj", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "setObj", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "basic", "(", "setObj", ",", "batch_size", ",", "valid_batch_size", ",", "shuffle", ",", "shuffleValid", ",", "numDataWorkers", ",", "split", ",", "data_dir", ",", "config", ")", ":", "\n", "    ", "if", "split", "==", "'train'", ":", "\n", "        ", "trainData", "=", "setObj", "(", "dirPath", "=", "data_dir", ",", "split", "=", "'train'", ",", "config", "=", "config", "[", "'data_loader'", "]", ")", "\n", "trainLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainData", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "numDataWorkers", ")", "\n", "validData", "=", "setObj", "(", "dirPath", "=", "data_dir", ",", "split", "=", "'valid'", ",", "config", "=", "config", "[", "'validation'", "]", ")", "\n", "validLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "validData", ",", "batch_size", "=", "valid_batch_size", ",", "shuffle", "=", "shuffleValid", ",", "num_workers", "=", "numDataWorkers", ")", "\n", "return", "trainLoader", ",", "validLoader", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "        ", "testData", "=", "setObj", "(", "dirPath", "=", "data_dir", ",", "split", "=", "'test'", ",", "config", "=", "config", "[", "'validation'", "]", ")", "\n", "testLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testData", ",", "batch_size", "=", "valid_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "numDataWorkers", ")", "\n", "", "elif", "split", "==", "'merge'", "or", "split", "==", "'merged'", "or", "split", "==", "'train-valid'", "or", "split", "==", "'train+valid'", ":", "\n", "        ", "trainData", "=", "setObj", "(", "dirPath", "=", "data_dir", ",", "split", "=", "[", "'train'", ",", "'valid'", "]", ",", "config", "=", "config", "[", "'data_loader'", "]", ")", "\n", "trainLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainData", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "numDataWorkers", ")", "\n", "validData", "=", "setObj", "(", "dirPath", "=", "data_dir", ",", "split", "=", "[", "'train'", ",", "'valid'", "]", ",", "config", "=", "config", "[", "'validation'", "]", ")", "\n", "validLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "validData", ",", "batch_size", "=", "valid_batch_size", ",", "shuffle", "=", "shuffleValid", ",", "num_workers", "=", "numDataWorkers", ")", "\n", "return", "trainLoader", ",", "validLoader", "\n", "", "", "def", "withCollate", "(", "setObj", ",", "collateFunc", ",", "batch_size", ",", "valid_batch_size", ",", "shuffle", ",", "shuffleValid", ",", "numDataWorkers", ",", "split", ",", "data_dir", ",", "config", ",", "rank", "=", "None", ",", "world_size", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.data_loader.data_loaders.withCollate": [[70, 98], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "datasets.forms_box_detect.FormsBoxDetect", "datasets.forms_box_detect.collate", "datasets.forms_graph_pair.FormsGraphPair", "datasets.forms_graph_pair.collate", "datasets.funsd_box_detect.FUNSDBoxDetect", "datasets.funsd_box_detect.collate", "datasets.funsd_graph_pair.FUNSDGraphPair", "datasets.funsd_graph_pair.collate"], "function", ["home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.collate", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.collate", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.collate", "home.repos.pwc.inspect_result.herobd_FUDGE.datasets.forms_graph_pair.collate"], ["", "", "def", "withCollate", "(", "setObj", ",", "collateFunc", ",", "batch_size", ",", "valid_batch_size", ",", "shuffle", ",", "shuffleValid", ",", "numDataWorkers", ",", "split", ",", "data_dir", ",", "config", ",", "rank", "=", "None", ",", "world_size", "=", "None", ")", ":", "\n", "    ", "if", "split", "==", "'train'", ":", "\n", "        ", "trainData", "=", "setObj", "(", "dirPath", "=", "data_dir", ",", "split", "=", "'train'", ",", "config", "=", "config", "[", "'data_loader'", "]", ")", "\n", "if", "rank", "is", "not", "None", ":", "\n", "            ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "trainData", ",", "\n", "num_replicas", "=", "world_size", ",", "\n", "rank", "=", "rank", ")", "\n", "", "else", ":", "\n", "            ", "train_sampler", "=", "None", "\n", "\n", "", "trainLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainData", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "numDataWorkers", ",", "collate_fn", "=", "collateFunc", ",", "sampler", "=", "train_sampler", ")", "\n", "if", "rank", "is", "None", "or", "rank", "==", "0", ":", "\n", "            ", "validData", "=", "setObj", "(", "dirPath", "=", "data_dir", ",", "split", "=", "'valid'", ",", "config", "=", "config", "[", "'validation'", "]", ")", "\n", "validLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "validData", ",", "batch_size", "=", "valid_batch_size", ",", "shuffle", "=", "shuffleValid", ",", "num_workers", "=", "numDataWorkers", ",", "collate_fn", "=", "collateFunc", ")", "\n", "", "else", ":", "\n", "            ", "validLoads", "=", "None", "#For now, just have the master do the validation loop", "\n", "", "return", "trainLoader", ",", "validLoader", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "        ", "testData", "=", "setObj", "(", "dirPath", "=", "data_dir", ",", "split", "=", "'test'", ",", "config", "=", "config", "[", "'validation'", "]", ")", "\n", "testLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testData", ",", "batch_size", "=", "valid_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "numDataWorkers", ",", "collate_fn", "=", "collateFunc", ")", "\n", "return", "testLoader", ",", "None", "\n", "", "elif", "split", "==", "'merge'", "or", "split", "==", "'merged'", "or", "split", "==", "'train-valid'", "or", "split", "==", "'train+valid'", ":", "\n", "        ", "trainData", "=", "setObj", "(", "dirPath", "=", "data_dir", ",", "split", "=", "[", "'train'", ",", "'valid'", "]", ",", "config", "=", "config", "[", "'data_loader'", "]", ")", "\n", "trainLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainData", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "numDataWorkers", ",", "collate_fn", "=", "collateFunc", ")", "\n", "validData", "=", "setObj", "(", "dirPath", "=", "data_dir", ",", "split", "=", "[", "'train'", ",", "'valid'", "]", ",", "config", "=", "config", "[", "'validation'", "]", ")", "\n", "validLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "validData", ",", "batch_size", "=", "valid_batch_size", ",", "shuffle", "=", "shuffleValid", ",", "num_workers", "=", "numDataWorkers", ",", "collate_fn", "=", "collateFunc", ")", "\n", "return", "trainLoader", ",", "validLoader", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.logger.logger.Logger.__init__": [[11, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "entries", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.logger.logger.Logger.add_entry": [[14, 16], ["len"], "methods", ["None"], ["", "def", "add_entry", "(", "self", ",", "entry", ")", ":", "\n", "        ", "self", ".", "entries", "[", "len", "(", "self", ".", "entries", ")", "+", "1", "]", "=", "entry", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.logger.logger.Logger.__str__": [[17, 19], ["json.dumps"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ".", "entries", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.box_detect_trainer.BoxDetectTrainer.__init__": [[19, 64], ["base.BaseTrainer.__init__", "iter"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "loss", ",", "metrics", ",", "resume", ",", "config", ",", "\n", "data_loader", ",", "valid_data_loader", "=", "None", ",", "train_logger", "=", "None", ")", ":", "\n", "        ", "super", "(", "BoxDetectTrainer", ",", "self", ")", ".", "__init__", "(", "model", ",", "loss", ",", "metrics", ",", "resume", ",", "config", ",", "train_logger", ")", "\n", "self", ".", "config", "=", "config", "\n", "if", "'loss_params'", "in", "config", ":", "\n", "            ", "self", ".", "loss_params", "=", "config", "[", "'loss_params'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_params", "=", "{", "}", "\n", "", "if", "'box'", "in", "self", ".", "loss", ":", "\n", "            ", "self", ".", "loss", "[", "'box'", "]", "=", "self", ".", "loss", "[", "'box'", "]", "(", "**", "self", ".", "loss_params", "[", "'box'", "]", ",", "\n", "num_classes", "=", "model", ".", "numBBTypes", ",", "\n", "rotation", "=", "model", ".", "rotation", ",", "\n", "scale", "=", "model", ".", "scale", ",", "\n", "anchors", "=", "model", ".", "anchors", ")", "\n", "", "elif", "'overseg'", "in", "self", ".", "loss", ":", "\n", "            ", "self", ".", "loss", "[", "'overseg'", "]", "=", "self", ".", "loss", "[", "'overseg'", "]", "(", "**", "self", ".", "loss_params", "[", "'overseg'", "]", ",", "\n", "num_classes", "=", "model", ".", "numBBTypes", ",", "\n", "rotation", "=", "model", ".", "rotation", ",", "\n", "scale", "=", "model", ".", "scale", ",", "\n", "anchors", "=", "model", ".", "anchors", ")", "\n", "", "if", "'line'", "in", "self", ".", "loss", "and", "self", ".", "loss", "[", "'line'", "]", "is", "not", "None", ":", "\n", "            ", "if", "'line'", "in", "self", ".", "loss_params", ":", "\n", "                ", "params", "=", "self", ".", "loss_params", "[", "'line'", "]", "\n", "", "else", ":", "\n", "                ", "params", "=", "{", "}", "\n", "", "self", ".", "loss", "[", "'line'", "]", "=", "self", ".", "loss", "[", "'line'", "]", "(", "**", "params", ",", "\n", "num_classes", "=", "model", ".", "numBBTypes", ",", "\n", "scale", "=", "model", ".", "scale", ",", "\n", "anchor_h", "=", "model", ".", "meanH", ")", "\n", "", "if", "'loss_weights'", "in", "config", ":", "\n", "            ", "self", ".", "lossWeights", "=", "config", "[", "'loss_weights'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "lossWeights", "=", "{", "'box'", ":", "0.6", ",", "'line'", ":", "0.4", ",", "'point'", ":", "0.4", ",", "'pixel'", ":", "8", "}", "\n", "", "self", ".", "batch_size", "=", "data_loader", ".", "batch_size", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "data_loader_iter", "=", "iter", "(", "data_loader", ")", "\n", "#for i in range(self.start_iteration,", "\n", "self", ".", "valid_data_loader", "=", "valid_data_loader", "\n", "self", ".", "valid", "=", "True", "if", "self", ".", "valid_data_loader", "is", "not", "None", "else", "False", "\n", "#self.log_step = int(np.sqrt(self.batch_size))", "\n", "#lr schedule from \"Attention is all you need\"", "\n", "#base_lr=config['optimizer']['lr']", "\n", "\n", "self", ".", "thresh_conf", "=", "config", "[", "'thresh_conf'", "]", "if", "'thresh_conf'", "in", "config", "else", "0.92", "\n", "self", ".", "thresh_intersect", "=", "config", "[", "'thresh_intersect'", "]", "if", "'thresh_intersect'", "in", "config", "else", "0.4", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.box_detect_trainer.BoxDetectTrainer._to_tensor": [[65, 118], ["type", "torch.FloatTensor", "targets.items", "data.type.type.to", "box_detect_trainer.BoxDetectTrainer._to_tensor.sendToGPU"], "methods", ["None"], ["", "def", "_to_tensor", "(", "self", ",", "instance", ")", ":", "\n", "        ", "data", "=", "instance", "[", "'img'", "]", "\n", "if", "'bb_gt'", "in", "instance", ":", "\n", "            ", "targetBoxes", "=", "instance", "[", "'bb_gt'", "]", "\n", "targetBoxes_sizes", "=", "instance", "[", "'bb_sizes'", "]", "\n", "", "else", ":", "\n", "            ", "targetBoxes", "=", "None", "\n", "targetBoxes_sizes", "=", "[", "]", "\n", "", "if", "'num_neighbors'", "in", "instance", ":", "\n", "            ", "target_num_neighbors", "=", "instance", "[", "'num_neighbors'", "]", "\n", "", "else", ":", "\n", "            ", "target_num_neighbors", "=", "None", "\n", "", "if", "'line_gt'", "in", "instance", ":", "\n", "            ", "targetLines", "=", "instance", "[", "'line_gt'", "]", "\n", "targetLines_sizes", "=", "instance", "[", "'line_label_sizes'", "]", "\n", "", "else", ":", "\n", "            ", "targetLines", "=", "{", "}", "\n", "targetLines_sizes", "=", "{", "}", "\n", "", "if", "'point_gt'", "in", "instance", ":", "\n", "            ", "targetPoints", "=", "instance", "[", "'point_gt'", "]", "\n", "targetPoints_sizes", "=", "instance", "[", "'point_label_sizes'", "]", "\n", "", "else", ":", "\n", "            ", "targetPoints", "=", "{", "}", "\n", "targetPoints_sizes", "=", "{", "}", "\n", "", "if", "'pixel_gt'", "in", "instance", ":", "\n", "            ", "targetPixels", "=", "instance", "[", "'pixel_gt'", "]", "\n", "", "else", ":", "\n", "            ", "targetPixels", "=", "None", "\n", "", "if", "type", "(", "data", ")", "is", "np", ".", "ndarray", ":", "\n", "            ", "data", "=", "torch", ".", "FloatTensor", "(", "data", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "type", "(", "data", ")", "is", "torch", ".", "Tensor", ":", "\n", "            ", "data", "=", "data", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "", "def", "sendToGPU", "(", "targets", ")", ":", "\n", "            ", "new_targets", "=", "{", "}", "\n", "for", "name", ",", "target", "in", "targets", ".", "items", "(", ")", ":", "\n", "                ", "if", "target", "is", "not", "None", ":", "\n", "                    ", "new_targets", "[", "name", "]", "=", "target", ".", "to", "(", "self", ".", "gpu", ")", "\n", "", "else", ":", "\n", "                    ", "new_targets", "[", "name", "]", "=", "None", "\n", "", "", "return", "new_targets", "\n", "\n", "", "if", "self", ".", "with_cuda", ":", "\n", "            ", "data", "=", "data", ".", "to", "(", "self", ".", "gpu", ")", "\n", "if", "targetBoxes", "is", "not", "None", ":", "\n", "                ", "targetBoxes", "=", "targetBoxes", ".", "to", "(", "self", ".", "gpu", ")", "\n", "", "targetLines", "=", "sendToGPU", "(", "targetLines", ")", "\n", "targetPoints", "=", "sendToGPU", "(", "targetPoints", ")", "\n", "if", "targetPixels", "is", "not", "None", ":", "\n", "                ", "targetPixels", "=", "targetPixels", ".", "to", "(", "self", ".", "gpu", ")", "\n", "", "if", "target_num_neighbors", "is", "not", "None", ":", "\n", "                ", "target_num_neighbors", "=", "target_num_neighbors", ".", "to", "(", "self", ".", "gpu", ")", "\n", "", "", "return", "data", ",", "targetBoxes", ",", "targetBoxes_sizes", ",", "targetLines", ",", "targetLines_sizes", ",", "targetPoints", ",", "targetPoints_sizes", ",", "targetPixels", ",", "target_num_neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.box_detect_trainer.BoxDetectTrainer._eval_metrics": [[119, 133], ["len", "target.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "enumerate", "cpu_output.append", "metric", "output.cpu().data.numpy", "target.cpu().data.numpy.cpu().data.numpy.cpu", "output.cpu"], "methods", ["None"], ["", "def", "_eval_metrics", "(", "self", ",", "typ", ",", "name", ",", "output", ",", "target", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "metrics", "[", "typ", "]", ")", ">", "0", ":", "\n", "#acc_metrics = np.zeros(len(self.metrics[typ]))", "\n", "            ", "met", "=", "{", "}", "\n", "cpu_output", "=", "[", "]", "\n", "for", "pred", "in", "output", ":", "\n", "                ", "cpu_output", ".", "append", "(", "output", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "", "target", "=", "target", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "for", "i", ",", "metric", "in", "enumerate", "(", "self", ".", "metrics", "[", "typ", "]", ")", ":", "\n", "                ", "met", "[", "name", "+", "metric", ".", "__name__", "]", "=", "metric", "(", "cpu_output", ",", "target", ")", "\n", "", "return", "acc_metrics", "\n", "", "else", ":", "\n", "#return np.zeros(0)", "\n", "            ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.box_detect_trainer.BoxDetectTrainer._train_iteration": [[134, 223], ["box_detect_trainer.BoxDetectTrainer.model.train", "box_detect_trainer.BoxDetectTrainer.optimizer.zero_grad", "box_detect_trainer.BoxDetectTrainer.run", "losses.keys", "torch.nn.utils.clip_grad_value_", "box_detect_trainer.BoxDetectTrainer.optimizer.step", "loss.item.item.item", "len", "box_detect_trainer.BoxDetectTrainer.data_loader_iter.next", "losses[].item", "len", "loss.item.item.backward", "box_detect_trainer.BoxDetectTrainer.model.parameters", "iter", "box_detect_trainer.BoxDetectTrainer.data_loader_iter.next"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.box_detect_trainer.BoxDetectTrainer.run"], ["", "", "def", "_train_iteration", "(", "self", ",", "iteration", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for an iteration\n\n        :param iteration: Current training iteration.\n        :return: A log that contains all information you want to save.\n\n        Note:\n            If you have additional information to record, for example:\n                > additional_log = {\"x\": x, \"y\": y}\n            merge it with log before return. i.e.\n                > log = {**log, **additional_log}\n                > return log\n\n            The metrics in log must have the key 'metrics'.\n        \"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "#self.model.eval()", "\n", "#print('WARNING EVAL')", "\n", "\n", "##tic=timeit.default_timer()", "\n", "batch_idx", "=", "(", "iteration", "-", "1", ")", "%", "len", "(", "self", ".", "data_loader", ")", "\n", "try", ":", "\n", "            ", "thisInstance", "=", "self", ".", "data_loader_iter", ".", "next", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "data_loader_iter", "=", "iter", "(", "self", ".", "data_loader", ")", "\n", "thisInstance", "=", "self", ".", "data_loader_iter", ".", "next", "(", ")", "\n", "", "if", "not", "self", ".", "model", ".", "predNumNeighbors", ":", "\n", "            ", "del", "thisInstance", "[", "'num_neighbors'", "]", "\n", "##toc=timeit.default_timer()", "\n", "##print('data: '+str(toc-tic))", "\n", "\n", "##tic=timeit.default_timer()", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "losses", ",", "run_log", ",", "out", "=", "self", ".", "run", "(", "thisInstance", ")", "\n", "\n", "loss", "=", "0", "\n", "for", "name", "in", "losses", ".", "keys", "(", ")", ":", "\n", "            ", "losses", "[", "name", "]", "*=", "self", ".", "lossWeights", "[", "name", "[", ":", "-", "4", "]", "]", "\n", "loss", "+=", "losses", "[", "name", "]", "\n", "losses", "[", "name", "]", "=", "losses", "[", "name", "]", ".", "item", "(", ")", "\n", "", "if", "len", "(", "losses", ")", ">", "0", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "##toc=timeit.default_timer()", "\n", "##print('for: '+str(toc-tic))", "\n", "#loss = self.loss(output, target)", "\n", "#what is grads?", "\n", "#minGrad=9999999999", "\n", "#maxGrad=-9999999999", "\n", "#for p in filter(lambda p: p.grad is not None, self.model.parameters()):", "\n", "#    minGrad = min(minGrad,p.min())", "\n", "#    maxGrad = max(maxGrad,p.max())", "\n", "", "torch", ".", "nn", ".", "utils", ".", "clip_grad_value_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "1", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "##toc=timeit.default_timer()", "\n", "##print('bac: '+str(toc-tic))", "\n", "\n", "#tic=timeit.default_timer()", "\n", "metrics", "=", "{", "}", "\n", "#index=0", "\n", "#for name, target in targetBoxes.items():", "\n", "#    metrics = {**metrics, **self._eval_metrics('box',name,output, target)}", "\n", "#for name, target in targetPoints.items():", "\n", "#    metrics = {**metrics, **self._eval_metrics('point',name,output, target)}", "\n", "#    metrics = self._eval_metrics(name,output, target)", "\n", "#toc=timeit.default_timer()", "\n", "#print('metric: '+str(toc-tic))", "\n", "\n", "##tic=timeit.default_timer()", "\n", "loss", "=", "loss", ".", "item", "(", ")", "\n", "##toc=timeit.default_timer()", "\n", "##print('item: '+str(toc-tic))", "\n", "#perAnchor={}", "\n", "#for i in range(avg_conf_per_anchor.size(0)):", "\n", "#    perAnchor['anchor{}'.format(i)]=avg_conf_per_anchor[i]", "\n", "\n", "log", "=", "{", "\n", "'loss'", ":", "loss", ",", "\n", "\n", "**", "metrics", ",", "\n", "**", "losses", ",", "\n", "**", "run_log", "\n", "}", "\n", "\n", "\n", "return", "log", "#", "\n", "", "def", "_minor_log", "(", "self", ",", "log", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.box_detect_trainer.BoxDetectTrainer._minor_log": [[223, 232], ["log.items", "box_detect_trainer.BoxDetectTrainer.logger.info", "type"], "methods", ["None"], ["", "def", "_minor_log", "(", "self", ",", "log", ")", ":", "\n", "        ", "ls", "=", "''", "\n", "for", "key", ",", "val", "in", "log", ".", "items", "(", ")", ":", "\n", "            ", "ls", "+=", "key", "\n", "if", "type", "(", "val", ")", "is", "float", ":", "\n", "                ", "ls", "+=", "': {:.6f},\\t'", ".", "format", "(", "val", ")", "\n", "", "else", ":", "\n", "                ", "ls", "+=", "': {},\\t'", ".", "format", "(", "val", ")", "\n", "", "", "self", ".", "logger", ".", "info", "(", "'Train '", "+", "ls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.box_detect_trainer.BoxDetectTrainer._valid_epoch": [[233, 275], ["box_detect_trainer.BoxDetectTrainer.model.eval", "collections.defaultdict", "torch.no_grad", "enumerate", "box_detect_trainer.BoxDetectTrainer._to_tensor", "box_detect_trainer.BoxDetectTrainer.run", "log_run.items", "losses.items", "value.item.item.item"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer._to_tensor", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.box_detect_trainer.BoxDetectTrainer.run"], ["", "def", "_valid_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Validate after training an epoch\n\n        :return: A log that contains information about validation\n\n        Note:\n            The validation metrics in log must have the key 'val_metrics'.\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "val_metrics", "=", "{", "}", "#defaultdict(lambda: 0.0)", "\n", "val_count", "=", "defaultdict", "(", "lambda", ":", "1", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#losses = defaultdict(lambda: 0)", "\n", "            ", "for", "batch_idx", ",", "instance", "in", "enumerate", "(", "self", ".", "valid_data_loader", ")", ":", "\n", "                ", "if", "not", "self", ".", "model", ".", "predNumNeighbors", ":", "\n", "                    ", "del", "instance", "[", "'num_neighbors'", "]", "\n", "", "data", ",", "targetBoxes", ",", "targetBoxes_sizes", ",", "targetLines", ",", "targetLines_sizes", ",", "targetPoints", ",", "targetPoints_sizes", ",", "targetPixels", ",", "target_num_neighbors", "=", "self", ".", "_to_tensor", "(", "instance", ")", "\n", "losses", ",", "log_run", ",", "got", "=", "self", ".", "run", "(", "instance", ",", "get", "=", "[", "'bbs'", "]", ",", "val", "=", "True", ")", "\n", "for", "name", ",", "value", "in", "log_run", ".", "items", "(", ")", ":", "\n", "                    ", "if", "value", "is", "not", "None", ":", "\n", "                        ", "val_name", "=", "'val_'", "+", "name", "\n", "if", "val_name", "in", "val_metrics", ":", "\n", "                            ", "val_metrics", "[", "val_name", "]", "+=", "value", "\n", "val_count", "[", "val_name", "]", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "val_metrics", "[", "val_name", "]", "=", "value", "\n", "", "", "", "for", "name", ",", "value", "in", "losses", ".", "items", "(", ")", ":", "\n", "                    ", "if", "value", "is", "not", "None", ":", "\n", "                        ", "value", "=", "value", ".", "item", "(", ")", "\n", "val_name", "=", "'val_'", "+", "name", "\n", "if", "val_name", "in", "val_metrics", ":", "\n", "                            ", "val_metrics", "[", "val_name", "]", "+=", "value", "\n", "val_count", "[", "val_name", "]", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "val_metrics", "[", "val_name", "]", "=", "value", "\n", "\n", "", "", "", "", "", "for", "val_name", "in", "val_metrics", ":", "\n", "            ", "if", "val_count", "[", "val_name", "]", ">", "0", ":", "\n", "                ", "val_metrics", "[", "val_name", "]", "/=", "val_count", "[", "val_name", "]", "\n", "", "", "return", "val_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.box_detect_trainer.BoxDetectTrainer.run": [[280, 368], ["box_detect_trainer.BoxDetectTrainer._to_tensor", "box_detect_trainer.BoxDetectTrainer.model", "targetLines.items", "targetPoints.items", "this_loss.item", "this_loss.item", "this_loss.item"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer._to_tensor"], ["", "def", "run", "(", "self", ",", "instance", ",", "get", "=", "[", "]", ",", "val", "=", "False", ")", ":", "\n", "#print('==forms: {}'.format(instance['imgName']))", "\n", "        ", "index", "=", "0", "\n", "losses", "=", "{", "}", "\n", "log", "=", "{", "}", "\n", "##tic=timeit.default_timer()", "\n", "data", ",", "targetBoxes", ",", "targetBoxes_sizes", ",", "targetLines", ",", "targetLines_sizes", ",", "targetPoints", ",", "targetPoints_sizes", ",", "targetPixels", ",", "target_num_neighbors", "=", "self", ".", "_to_tensor", "(", "instance", ")", "\n", "if", "not", "self", ".", "model", ".", "predNumNeighbors", ":", "\n", "            ", "target_num_neighbors", "=", "None", "\n", "", "outputBoxes", ",", "outputOffsets", ",", "outputLines", ",", "outputOffsetLines", ",", "outputPoints", ",", "outputPixels", "=", "self", ".", "model", "(", "data", ")", "\n", "\n", "if", "'box'", "in", "self", ".", "loss", ":", "\n", "            ", "this_loss", ",", "position_loss", ",", "conf_loss", ",", "class_loss", ",", "nn_loss", ",", "recall", ",", "precision", ",", "recall_noclass", ",", "precision_noclass", "=", "self", ".", "loss", "[", "'box'", "]", "(", "outputOffsets", ",", "targetBoxes", ",", "targetBoxes_sizes", ",", "target_num_neighbors", ")", "\n", "\n", "losses", "[", "'boxLoss'", "]", "=", "this_loss", "#.item()", "\n", "log", "[", "'position_loss'", "]", "=", "position_loss", "\n", "log", "[", "'conf_loss'", "]", "=", "conf_loss", "\n", "log", "[", "'class_loss'", "]", "=", "class_loss", "\n", "log", "[", "'recall'", "]", "=", "recall", "\n", "log", "[", "'precision'", "]", "=", "precision", "\n", "if", "recall", "+", "precision", ">", "0", ":", "\n", "                ", "log", "[", "'F1'", "]", "=", "2", "*", "recall", "*", "precision", "/", "(", "recall", "+", "precision", ")", "\n", "", "else", ":", "\n", "                ", "log", "[", "'F1'", "]", "=", "0", "\n", "", "log", "[", "'recall_noclass'", "]", "=", "recall_noclass", "\n", "log", "[", "'precision_noclass'", "]", "=", "precision_noclass", "\n", "if", "recall_noclass", "+", "precision_noclass", ">", "0", ":", "\n", "                ", "log", "[", "'F1_noclass'", "]", "=", "2", "*", "recall_noclass", "*", "precision_noclass", "/", "(", "recall_noclass", "+", "precision_noclass", ")", "\n", "", "else", ":", "\n", "                ", "log", "[", "'F1_noclass'", "]", "=", "0", "\n", "#print('boxLoss:{}'.format(this_loss))", "\n", "#display(instance)", "\n", "", "", "elif", "'overseg'", "in", "self", ".", "loss", ":", "\n", "            ", "if", "val", ":", "\n", "                ", "this_loss", ",", "position_loss", ",", "conf_loss", ",", "class_loss", ",", "rot_loss", ",", "recall", ",", "precision", ",", "gt_covered", ",", "pred_covered", ",", "recall_noclass", ",", "precision_noclass", ",", "gt_covered_noclass", ",", "pred_covered_noclass", "=", "self", ".", "loss", "[", "'overseg'", "]", "(", "outputOffsets", ",", "targetBoxes", ",", "targetBoxes_sizes", ",", "calc_stats", "=", "True", ")", "\n", "\n", "log", "[", "'recall'", "]", "=", "recall", "\n", "log", "[", "'precision'", "]", "=", "precision", "\n", "log", "[", "'gt_covered'", "]", "=", "gt_covered", "\n", "log", "[", "'pred_covered'", "]", "=", "pred_covered", "\n", "log", "[", "'recall_noclass'", "]", "=", "recall_noclass", "\n", "log", "[", "'precision_noclass'", "]", "=", "precision_noclass", "\n", "log", "[", "'gt_covered_noclass'", "]", "=", "gt_covered_noclass", "\n", "log", "[", "'pred_covered_noclass'", "]", "=", "pred_covered_noclass", "\n", "log", "[", "'F1_covered_noclass'", "]", "=", "2", "*", "gt_covered_noclass", "*", "pred_covered_noclass", "/", "(", "gt_covered_noclass", "+", "pred_covered_noclass", ")", "\n", "", "else", ":", "\n", "                ", "this_loss", ",", "position_loss", ",", "conf_loss", ",", "class_loss", ",", "rot_loss", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "loss", "[", "'overseg'", "]", "(", "outputOffsets", ",", "targetBoxes", ",", "targetBoxes_sizes", ")", "\n", "", "losses", "[", "'oversegLoss'", "]", "=", "this_loss", "#.item()", "\n", "log", "[", "'position_loss'", "]", "=", "position_loss", "\n", "log", "[", "'conf_loss'", "]", "=", "conf_loss", "\n", "log", "[", "'class_loss'", "]", "=", "class_loss", "\n", "log", "[", "'rot_loss'", "]", "=", "rot_loss", "\n", "", "else", ":", "\n", "            ", "position_loss", "=", "0", "\n", "conf_loss", "=", "0", "\n", "class_loss", "=", "0", "\n", "\n", "", "index", "=", "0", "\n", "for", "name", ",", "target", "in", "targetLines", ".", "items", "(", ")", ":", "\n", "#print('line')", "\n", "            ", "predictions", "=", "outputOffsetLines", "[", "index", "]", "\n", "this_loss", ",", "line_pos_loss", ",", "line_conf_loss", ",", "line_class_loss", "=", "self", ".", "loss", "[", "'line'", "]", "(", "predictions", ",", "target", ",", "targetLines_sizes", "[", "name", "]", ")", "\n", "losses", "[", "name", "+", "'Loss'", "]", "=", "this_loss", ".", "item", "(", ")", "\n", "losses", "[", "name", "+", "'_posLoss'", "]", "=", "line_pos_loss", "\n", "losses", "[", "name", "+", "'_confLoss'", "]", "=", "line_conf_loss", "\n", "losses", "[", "name", "+", "'_classLoss'", "]", "=", "line_class_loss", "\n", "index", "+=", "1", "\n", "", "index", "=", "0", "\n", "for", "name", ",", "target", "in", "targetPoints", ".", "items", "(", ")", ":", "\n", "#print('point')", "\n", "            ", "predictions", "=", "outputPoints", "[", "index", "]", "\n", "this_loss", ",", "this_position_loss", ",", "this_conf_loss", ",", "this_class_loss", "=", "self", ".", "loss", "[", "'point'", "]", "(", "predictions", ",", "target", ",", "targetPoints_sizes", "[", "name", "]", ",", "**", "self", ".", "loss_params", "[", "'point'", "]", ")", "\n", "losses", "[", "name", "+", "'Loss'", "]", "=", "this_loss", ".", "item", "(", ")", "\n", "index", "+=", "1", "\n", "", "if", "targetPixels", "is", "not", "None", ":", "\n", "#print('pixel')", "\n", "            ", "this_loss", "=", "self", ".", "loss", "[", "'pixel'", "]", "(", "outputPixels", ",", "targetPixels", ",", "**", "self", ".", "loss_params", "[", "'pixel'", "]", ")", "\n", "losses", "[", "'pixelLoss'", "]", "=", "this_loss", ".", "item", "(", ")", "\n", "##toc=timeit.default_timer()", "\n", "##print('loss: '+str(toc-tic))", "\n", "##tic=timeit.default_timer()", "\n", "\n", "", "got", "=", "{", "}", "\n", "for", "name", "in", "get", ":", "\n", "            ", "if", "name", "==", "'bbs'", ":", "\n", "                ", "got", "[", "name", "]", "=", "outputBoxes", "\n", "\n", "", "", "return", "losses", ",", "log", ",", "got", "\n", "", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.__init__": [[51, 155], ["base.BaseTrainer.__init__", "iter", "utils.util.ensure_dir", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "graph_pair_trainer.GraphPairTrainer.data_loader.dataset.classMap.items", "len", "len"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.ensure_dir"], ["def", "__init__", "(", "self", ",", "model", ",", "loss", ",", "metrics", ",", "resume", ",", "config", ",", "\n", "data_loader", ",", "valid_data_loader", "=", "None", ",", "train_logger", "=", "None", ")", ":", "\n", "        ", "super", "(", "GraphPairTrainer", ",", "self", ")", ".", "__init__", "(", "model", ",", "loss", ",", "metrics", ",", "resume", ",", "config", ",", "train_logger", ")", "\n", "self", ".", "config", "=", "config", "\n", "if", "'loss_params'", "in", "config", ":", "\n", "            ", "self", ".", "loss_params", "=", "config", "[", "'loss_params'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_params", "=", "{", "}", "\n", "", "self", ".", "lossWeights", "=", "config", "[", "'loss_weights'", "]", "if", "'loss_weights'", "in", "config", "else", "{", "\"box\"", ":", "1", ",", "\"rel\"", ":", "1", "}", "\n", "\n", "if", "'box'", "in", "self", ".", "loss", ":", "\n", "#special set up for YOLO loss", "\n", "            ", "self", ".", "loss", "[", "'box'", "]", "=", "self", ".", "loss", "[", "'box'", "]", "(", "**", "self", ".", "loss_params", "[", "'box'", "]", ",", "\n", "num_classes", "=", "self", ".", "model_ref", ".", "numBBTypes", ",", "\n", "rotation", "=", "self", ".", "model_ref", ".", "rotation", ",", "\n", "scale", "=", "self", ".", "model_ref", ".", "scale", ",", "\n", "anchors", "=", "self", ".", "model_ref", ".", "anchors", ")", "\n", "\n", "", "self", ".", "batch_size", "=", "data_loader", ".", "batch_size", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "data_loader_iter", "=", "iter", "(", "data_loader", ")", "\n", "self", ".", "valid_data_loader", "=", "valid_data_loader", "\n", "\n", "\n", "self", ".", "mergeAndGroup", "=", "config", "[", "'trainer'", "]", "[", "'mergeAndGroup'", "]", "#this is true for FUDGE", "\n", "self", ".", "classMap", "=", "self", ".", "data_loader", ".", "dataset", ".", "classMap", "\n", "self", ".", "scoreClassMap", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "data_loader", ".", "dataset", ".", "classMap", ".", "items", "(", ")", "if", "k", "!=", "'blank'", "}", "\n", "\n", "\n", "#default is unfrozen, can be frozen by setting 'start_froze' in the PairingGraph models params", "\n", "self", ".", "unfreeze_detector", "=", "config", "[", "'trainer'", "]", "[", "'unfreeze_detector'", "]", "if", "'unfreeze_detector'", "in", "config", "[", "'trainer'", "]", "else", "None", "#at which iteration", "\n", "\n", "self", ".", "thresh_rel", "=", "config", "[", "'trainer'", "]", "[", "'thresh_rel'", "]", "if", "'thresh_rel'", "in", "config", "[", "'trainer'", "]", "else", "0.5", "\n", "if", "self", ".", "mergeAndGroup", ":", "\n", "            ", "self", ".", "thresh_edge", "=", "self", ".", "model_ref", ".", "keepEdgeThresh", "\n", "self", ".", "thresh_overSeg", "=", "self", ".", "model_ref", ".", "mergeThresh", "\n", "self", ".", "thresh_group", "=", "self", ".", "model_ref", ".", "groupThresh", "\n", "self", ".", "thresh_rel", "=", "[", "self", ".", "thresh_rel", "]", "*", "len", "(", "self", ".", "thresh_group", ")", "\n", "self", ".", "thresh_error", "=", "config", "[", "'trainer'", "]", "[", "'thresh_error'", "]", "if", "'thresh_error'", "in", "config", "[", "'trainer'", "]", "else", "[", "0.5", "]", "*", "len", "(", "self", ".", "thresh_group", ")", "\n", "\n", "", "self", ".", "final_bb_iou_thresh", "=", "config", "[", "'trainer'", "]", "[", "'final_bb_iou_thresh'", "]", "if", "'final_bb_iou_thresh'", "in", "config", "[", "'trainer'", "]", "else", "(", "config", "[", "'final_bb_iou_thresh'", "]", "if", "'final_bb_iou_thresh'", "in", "config", "else", "0.5", ")", "#BB IOU threshold used in evaluation for positive hit (we use 0.5(", "\n", "\n", "#we iniailly train the pairing using GT BBs, but eventually need to fine-tune the pairing using the networks performance", "\n", "self", ".", "at_least_from_gt", "=", "config", "[", "'trainer'", "]", "[", "'stop_from_gt'", "]", "if", "'stop_from_gt'", "in", "config", "[", "'trainer'", "]", "else", "None", "#when it's at it's least GT use in training (set by max_use_pred)", "\n", "self", ".", "partial_from_gt", "=", "config", "[", "'trainer'", "]", "[", "'partial_from_gt'", "]", "if", "'partial_from_gt'", "in", "config", "[", "'trainer'", "]", "else", "None", "#when to start using mix of GT and predicted BBs (we started this at 0)", "\n", "self", ".", "max_use_pred", "=", "config", "[", "'trainer'", "]", "[", "'max_use_pred'", "]", "if", "'max_use_pred'", "in", "config", "[", "'trainer'", "]", "else", "0.9", "#the maximal amount to be using predicted detections, as opposed to GT BBs", "\n", "\n", "self", ".", "use_word_bbs_gt", "=", "config", "[", "'trainer'", "]", "[", "'use_word_bbs_gt'", "]", "if", "'use_word_bbs_gt'", "in", "config", "[", "'trainer'", "]", "else", "-", "1", "#For training Word-FUDGE", "\n", "self", ".", "valid_with_gt", "=", "config", "[", "'trainer'", "]", "[", "'valid_with_gt'", "]", "if", "'valid_with_gt'", "in", "config", "[", "'trainer'", "]", "else", "False", "#Also used in Word-FUDGE as we never eval with predicted BBs", "\n", "\n", "#these allow a fancy adjusting of the detection threshold during training", "\n", "#we, however, set conf_thresh_change_iters to 0, which means it does nothing.", "\n", "#alternatively you can set use_hard_conf_thresh in the model to prevent this", "\n", "self", ".", "conf_thresh_init", "=", "config", "[", "'trainer'", "]", "[", "'conf_thresh_init'", "]", "if", "'conf_thresh_init'", "in", "config", "[", "'trainer'", "]", "else", "0.9", "\n", "self", ".", "conf_thresh_change_iters", "=", "config", "[", "'trainer'", "]", "[", "'conf_thresh_change_iters'", "]", "if", "'conf_thresh_change_iters'", "in", "config", "[", "'trainer'", "]", "else", "5000", "\n", "\n", "#set limits on the max BBs that can be detected (for memory reasons)", "\n", "self", ".", "train_hard_detect_limit", "=", "config", "[", "'trainer'", "]", "[", "'train_hard_detect_limit'", "]", "if", "'train_hard_detect_limit'", "in", "config", "[", "'trainer'", "]", "else", "300", "\n", "self", ".", "val_hard_detect_limit", "=", "config", "[", "'trainer'", "]", "[", "'val_hard_detect_limit'", "]", "if", "'val_hard_detect_limit'", "in", "config", "[", "'trainer'", "]", "else", "400", "\n", "\n", "\n", "self", ".", "use_gt_trans", "=", "config", "[", "'trainer'", "]", "[", "'use_gt_trans'", "]", "if", "'use_gt_trans'", "in", "config", "[", "'trainer'", "]", "else", "False", "#we don't use any transcription", "\n", "\n", "\n", "#I considered making more specific error response", "\n", "self", ".", "num_node_error_class", "=", "0", "\n", "self", ".", "final_class_bad_alignment", "=", "False", "\n", "self", ".", "final_class_bad_alignment", "=", "False", "\n", "self", ".", "final_class_inpure_group", "=", "False", "\n", "\n", "self", ".", "debug", "=", "'DEBUG'", "in", "config", "[", "'trainer'", "]", "\n", "\n", "#will save the form image with the BBs and edges ploted on them", "\n", "self", ".", "save_images_every", "=", "config", "[", "'trainer'", "]", "[", "'save_images_every'", "]", "if", "'save_images_every'", "in", "config", "[", "'trainer'", "]", "else", "-", "1", "\n", "self", ".", "save_images_dir", "=", "'train_out'", "\n", "util", ".", "ensure_dir", "(", "self", ".", "save_images_dir", ")", "\n", "\n", "\n", "#ugh, I never got this to work. Kept NaNing. I don't use BatchNorm, so you don't have to worry about that", "\n", "self", ".", "amp", "=", "config", "[", "'trainer'", "]", "[", "'AMP'", "]", "if", "'AMP'", "in", "config", "[", "'trainer'", "]", "else", "False", "\n", "if", "self", ".", "amp", ":", "\n", "            ", "self", ".", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "\n", "#fake a batch size by accumulating the gradient", "\n", "", "self", ".", "accum_grad_steps", "=", "config", "[", "'trainer'", "]", "[", "'accum_grad_steps'", "]", "if", "'accum_grad_steps'", "in", "config", "[", "'trainer'", "]", "else", "1", "\n", "\n", "#Name change, originally called it 'rel', but 'edge' makes more sense", "\n", "if", "'edge'", "in", "self", ".", "lossWeights", ":", "\n", "            ", "self", ".", "lossWeights", "[", "'rel'", "]", "=", "self", ".", "lossWeights", "[", "'edge'", "]", "\n", "", "if", "'edge'", "in", "self", ".", "loss", ":", "\n", "            ", "self", ".", "loss", "[", "'rel'", "]", "=", "self", ".", "loss", "[", "'edge'", "]", "\n", "\n", "#error fixing, eval special stuff", "\n", "", "self", ".", "remove_same_pairs", "=", "False", "if", "'remove_same_pairs'", "not", "in", "config", "else", "config", "[", "'remove_same_pairs'", "]", "\n", "self", ".", "optimize", "=", "False", "if", "'optimize'", "not", "in", "config", "else", "config", "[", "'optimize'", "]", "\n", "\n", "#This is only designed for FUNSD, but gives a very detailed analysis of performance", "\n", "self", ".", "do_characterization", "=", "config", "[", "'characterization'", "]", "if", "'characterization'", "in", "config", "else", "False", "\n", "if", "self", ".", "do_characterization", ":", "\n", "            ", "self", ".", "characterization_sum", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "characterization_form", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "characterization_hist", "=", "defaultdict", "(", "list", ")", "\n", "\n", "", "self", ".", "model_ref", ".", "used_threshConf", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer._to_tensor": [[157, 171], ["image.to.to.to", "bbs.to.to.to", "num_neighbors.to.to.to"], "methods", ["None"], ["", "def", "_to_tensor", "(", "self", ",", "instance", ")", ":", "\n", "        ", "image", "=", "instance", "[", "'img'", "]", "\n", "bbs", "=", "instance", "[", "'bb_gt'", "]", "\n", "adjaceny", "=", "instance", "[", "'adj'", "]", "\n", "num_neighbors", "=", "instance", "[", "'num_neighbors'", "]", "\n", "\n", "if", "self", ".", "with_cuda", ":", "\n", "            ", "image", "=", "image", ".", "to", "(", "self", ".", "gpu", ")", "\n", "if", "bbs", "is", "not", "None", ":", "\n", "                ", "bbs", "=", "bbs", ".", "to", "(", "self", ".", "gpu", ")", "\n", "", "if", "num_neighbors", "is", "not", "None", ":", "\n", "                ", "num_neighbors", "=", "num_neighbors", ".", "to", "(", "self", ".", "gpu", ")", "\n", "#adjacenyMatrix = adjacenyMatrix.to(self.gpu)", "\n", "", "", "return", "image", ",", "bbs", ",", "adjaceny", ",", "num_neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.useGT": [[173, 190], ["random.random", "random.random", "random.random"], "methods", ["None"], ["", "def", "useGT", "(", "self", ",", "iteration", ",", "force", "=", "False", ")", ":", "\n", "        ", "if", "force", ":", "\n", "            ", "use", "=", "True", "\n", "", "elif", "self", ".", "at_least_from_gt", "is", "not", "None", "and", "iteration", ">=", "self", ".", "at_least_from_gt", ":", "\n", "            ", "use", "=", "random", ".", "random", "(", ")", ">", "self", ".", "max_use_pred", "#I think it's best to always have some GT examples", "\n", "", "elif", "self", ".", "partial_from_gt", "is", "not", "None", "and", "iteration", ">=", "self", ".", "partial_from_gt", ":", "\n", "            ", "use", "=", "random", ".", "random", "(", ")", ">", "self", ".", "max_use_pred", "*", "(", "iteration", "-", "self", ".", "partial_from_gt", ")", "/", "(", "self", ".", "at_least_from_gt", "-", "self", ".", "partial_from_gt", ")", "\n", "", "else", ":", "\n", "            ", "use", "=", "True", "\n", "\n", "", "if", "use", ":", "\n", "            ", "ret", "=", "'only_space'", "\n", "if", "random", ".", "random", "(", ")", "<=", "self", ".", "use_word_bbs_gt", ":", "\n", "                ", "ret", "+=", "' word_bbs'", "\n", "", "return", "ret", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer._train_iteration": [[192, 298], ["graph_pair_trainer.GraphPairTrainer.model.train", "graph_pair_trainer.GraphPairTrainer.useGT", "losses.keys", "graph_pair_trainer.GraphPairTrainer.model.parameters", "graph_pair_trainer.GraphPairTrainer.model_ref.unfreeze", "len", "graph_pair_trainer.GraphPairTrainer.data_loader_iter.next", "graph_pair_trainer.GraphPairTrainer.optimizer.zero_grad", "graph_pair_trainer.GraphPairTrainer.newRun", "losses[].item", "len", "m.grad.data.mean().cpu().item", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "len", "loss.item.item.item", "iter", "graph_pair_trainer.GraphPairTrainer.data_loader_iter.next", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "graph_pair_trainer.GraphPairTrainer.newRun", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "graph_pair_trainer.GraphPairTrainer.scaler.scale().backward", "loss.item.item.backward", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "graph_pair_trainer.GraphPairTrainer.model.parameters", "graph_pair_trainer.GraphPairTrainer.scaler.step", "graph_pair_trainer.GraphPairTrainer.scaler.update", "graph_pair_trainer.GraphPairTrainer.optimizer.step", "m.grad.data.mean().cpu", "graph_pair_trainer.GraphPairTrainer.scaler.scale", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "m.grad.data.mean"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.useGT", "home.repos.pwc.inspect_result.herobd_FUDGE.model.pairing_graph.PairingGraph.unfreeze", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.newRun", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.newRun"], ["", "", "def", "_train_iteration", "(", "self", ",", "iteration", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for an iteration\n\n        :param iteration: Current training iteration.\n        :return: A log that contains all information you want to save.\n\n        Note:\n            If you have additional information to record, for example:\n                > additional_log = {\"x\": x, \"y\": y}\n            merge it with log before return. i.e.\n                > log = {**log, **additional_log}\n                > return log\n\n            The metrics in log must have the key 'metrics'.\n        \"\"\"", "\n", "if", "self", ".", "unfreeze_detector", "is", "not", "None", "and", "iteration", ">=", "self", ".", "unfreeze_detector", ":", "\n", "            ", "self", ".", "model_ref", ".", "unfreeze", "(", ")", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "\n", "batch_idx", "=", "(", "iteration", "-", "1", ")", "%", "len", "(", "self", ".", "data_loader", ")", "\n", "try", ":", "\n", "            ", "thisInstance", "=", "self", ".", "data_loader_iter", ".", "next", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "#I do everything by iterations, not epoch. So it resets the dataloader whenever it runs out", "\n", "            ", "self", ".", "data_loader_iter", "=", "iter", "(", "self", ".", "data_loader", ")", "\n", "thisInstance", "=", "self", ".", "data_loader_iter", ".", "next", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "model_ref", ".", "detector_predNumNeighbors", ":", "\n", "            ", "thisInstance", "[", "'num_neighbors'", "]", "=", "None", "#we don't use num neighbors for FUDGE", "\n", "\n", "\n", "\n", "", "if", "self", ".", "accum_grad_steps", "<", "2", "or", "iteration", "%", "self", ".", "accum_grad_steps", "==", "1", ":", "\n", "#only zero if not accumulating or just did upate", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "index", "=", "0", "\n", "losses", "=", "{", "}", "\n", "\n", "\n", "if", "self", ".", "conf_thresh_change_iters", ">", "iteration", ":", "\n", "            ", "threshIntur", "=", "1", "-", "iteration", "/", "self", ".", "conf_thresh_change_iters", "\n", "", "else", ":", "\n", "            ", "threshIntur", "=", "None", "\n", "\n", "", "useGT", "=", "self", ".", "useGT", "(", "iteration", ")", "\n", "\n", "#run the model and calculate the loss", "\n", "if", "self", ".", "amp", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                ", "losses", ",", "run_log", ",", "out", "=", "self", ".", "newRun", "(", "thisInstance", ",", "useGT", ",", "threshIntur", ")", "\n", "", "", "else", ":", "\n", "            ", "losses", ",", "run_log", ",", "out", "=", "self", ".", "newRun", "(", "thisInstance", ",", "useGT", ",", "threshIntur", ")", "\n", "\n", "\n", "#weighted sum of losses", "\n", "", "loss", "=", "0", "\n", "for", "name", "in", "losses", ".", "keys", "(", ")", ":", "\n", "            ", "losses", "[", "name", "]", "*=", "self", ".", "lossWeights", "[", "name", "[", ":", "-", "4", "]", "]", "\n", "loss", "+=", "losses", "[", "name", "]", "\n", "losses", "[", "name", "]", "=", "losses", "[", "name", "]", ".", "item", "(", ")", "\n", "\n", "#backward step", "\n", "", "if", "len", "(", "losses", ")", ">", "0", ":", "\n", "            ", "assert", "not", "torch", ".", "isnan", "(", "loss", ")", "\n", "if", "self", ".", "accum_grad_steps", ">", "1", ":", "\n", "                ", "loss", "/=", "self", ".", "accum_grad_steps", "\n", "", "if", "self", ".", "amp", ":", "\n", "                ", "self", ".", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "\n", "", "", "meangrad", "=", "0", "\n", "count", "=", "0", "\n", "for", "m", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "m", ".", "grad", "is", "None", ":", "\n", "                ", "continue", "\n", "", "count", "+=", "1", "\n", "meangrad", "+=", "m", ".", "grad", ".", "data", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "assert", "not", "torch", ".", "isnan", "(", "m", ".", "grad", ".", "data", ")", ".", "any", "(", ")", "\n", "", "if", "count", "!=", "0", ":", "\n", "            ", "meangrad", "/=", "count", "\n", "\n", "#gradient clipping (only happens if not accumulating)", "\n", "", "if", "self", ".", "accum_grad_steps", "<", "2", "or", "iteration", "%", "self", ".", "accum_grad_steps", "==", "0", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_value_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "1", ")", "\n", "if", "self", ".", "amp", ":", "\n", "                ", "self", ".", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "if", "len", "(", "losses", ")", ">", "0", ":", "\n", "            ", "loss", "=", "loss", ".", "item", "(", ")", "\n", "\n", "", "log", "=", "{", "\n", "'mean grad'", ":", "meangrad", ",", "\n", "'loss'", ":", "loss", ",", "\n", "**", "losses", ",", "\n", "\n", "**", "run_log", "\n", "}", "\n", "\n", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer._minor_log": [[300, 316], ["enumerate", "graph_pair_trainer.GraphPairTrainer.logger.info", "log.items", "len", "type", "type"], "methods", ["None"], ["", "def", "_minor_log", "(", "self", ",", "log", ")", ":", "\n", "        ", "ls", "=", "''", "\n", "for", "i", ",", "(", "key", ",", "val", ")", "in", "enumerate", "(", "log", ".", "items", "(", ")", ")", ":", "\n", "            ", "ls", "+=", "key", "\n", "if", "type", "(", "val", ")", "is", "float", "or", "type", "(", "val", ")", "is", "np", ".", "float64", ":", "\n", "\n", "                ", "this_data", "=", "': {:.3f},'", ".", "format", "(", "val", ")", "\n", "", "else", ":", "\n", "                ", "this_data", "=", "': {},'", ".", "format", "(", "val", ")", "\n", "", "ls", "+=", "this_data", "\n", "this_len", "=", "len", "(", "this_data", ")", "\n", "if", "i", "%", "2", "==", "0", "and", "this_len", ">", "0", ":", "\n", "                ", "ls", "+=", "' '", "*", "(", "20", "-", "this_len", ")", "\n", "", "else", ":", "\n", "                ", "ls", "+=", "'\\n      '", "\n", "", "", "self", ".", "logger", ".", "info", "(", "'Train '", "+", "ls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer._valid_epoch": [[318, 367], ["graph_pair_trainer.GraphPairTrainer.model.eval", "collections.defaultdict", "graph_pair_trainer.GraphPairTrainer.useGT", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "graph_pair_trainer.GraphPairTrainer.newRun", "log_run.items", "losses.items", "print", "value.item.item.item", "len"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.useGT", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.newRun"], ["", "def", "_valid_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Validate entire valid set\n\n        :return: A log that contains information about validation\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "val_metrics", "=", "{", "}", "\n", "val_count", "=", "defaultdict", "(", "lambda", ":", "1", ")", "\n", "\n", "useGT", "=", "self", ".", "useGT", "(", "self", ".", "iteration", ",", "True", ")", "if", "self", ".", "valid_with_gt", "else", "False", "\n", "prefix", "=", "'valGT_'", "if", "self", ".", "valid_with_gt", "else", "'val_'", "#just so I don't get confused", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "instance", "in", "enumerate", "(", "self", ".", "valid_data_loader", ")", ":", "\n", "                ", "if", "not", "self", ".", "model_ref", ".", "detector_predNumNeighbors", ":", "\n", "                    ", "instance", "[", "'num_neighbors'", "]", "=", "None", "\n", "", "if", "not", "self", ".", "logged", ":", "\n", "                    ", "print", "(", "'iter:{} valid batch: {}/{}'", ".", "format", "(", "self", ".", "iteration", ",", "batch_idx", ",", "len", "(", "self", ".", "valid_data_loader", ")", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "#run model and compute losses", "\n", "", "losses", ",", "log_run", ",", "out", "=", "self", ".", "newRun", "(", "instance", ",", "useGT", ",", "get", "=", "[", "'bb_stats'", ",", "'nn_acc'", "]", ")", "\n", "\n", "for", "name", ",", "value", "in", "log_run", ".", "items", "(", ")", ":", "\n", "                    ", "if", "value", "is", "not", "None", ":", "\n", "                        ", "val_name", "=", "prefix", "+", "name", "\n", "if", "val_name", "in", "val_metrics", ":", "\n", "                            ", "val_metrics", "[", "val_name", "]", "+=", "value", "\n", "val_count", "[", "val_name", "]", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "val_metrics", "[", "val_name", "]", "=", "value", "\n", "", "", "", "for", "name", ",", "value", "in", "losses", ".", "items", "(", ")", ":", "\n", "                    ", "if", "value", "is", "not", "None", ":", "\n", "                        ", "value", "=", "value", ".", "item", "(", ")", "\n", "val_name", "=", "prefix", "+", "name", "\n", "if", "val_name", "in", "val_metrics", ":", "\n", "                            ", "val_metrics", "[", "val_name", "]", "+=", "value", "\n", "val_count", "[", "val_name", "]", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "val_metrics", "[", "val_name", "]", "=", "value", "\n", "\n", "\n", "\n", "", "", "", "", "", "for", "val_name", "in", "val_metrics", ":", "\n", "            ", "if", "val_count", "[", "val_name", "]", ">", "0", ":", "\n", "                ", "val_metrics", "[", "val_name", "]", "=", "val_metrics", "[", "val_name", "]", "/", "val_count", "[", "val_name", "]", "\n", "", "", "return", "val_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.simplerAlignEdgePred": [[370, 820], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "list", "zip", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.BoolTensor().to", "torch.BoolTensor().to", "torch.BoolTensor().to", "torch.BoolTensor().to", "set", "gtGroupAdj.difference", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "TP.sum().item", "FP.sum().item", "FN.sum().item", "TN.sum().item", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "TP.sum().item", "FP.sum().item", "FN.sum().item", "TN.sum().item", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "set", "set", "TP.sum().item", "FP.sum().item", "FN.sum().item", "TN.sum().item", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "TP.sum().item", "FP.sum().item", "FN.sum().item", "TN.sum().item", "TP.sum().item", "FN.sum().item", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "FP.sum().item", "TN.sum().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "set", "targetBoxes.cpu.cpu.cpu", "utils.yolo_tools.newGetTargIndexForPreds_iou.numpy", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "len", "set", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "set.add", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.ones().int", "torch.ones().int", "torch.ones().int", "torch.ones().int", "newGetTargIndexForPreds_dist", "utils.yolo_tools.newGetTargIndexForPreds_iou", "len", "enumerate", "len", "len", "utils.group_pairing.getGTGroup", "utils.group_pairing.purity", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "min", "max", "torch.BoolTensor", "torch.BoolTensor", "torch.BoolTensor", "torch.BoolTensor", "saveIndex.items", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "TP.sum", "FP.sum", "FN.sum", "TN.sum", "range", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "TP.sum", "FP.sum", "FN.sum", "TN.sum", "range", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "a.item", "a.item", "TP.sum", "FP.sum", "FN.sum", "TN.sum", "range", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "TP.sum", "FP.sum", "FN.sum", "TN.sum", "range", "TP.sum", "FN.sum", "FP.sum", "TN.sum", "range", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "len", "len", "saveRelPredMat[].item", "len", "len", "saveGroupPredMat[].item", "len", "len", "saveOverSegPredMat[].item", "len", "len", "saveErrorPredMat[].item", "len", "saveEdgePredMat[].item", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "ind.item", "len", "min", "max"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.newGetTargIndexForPreds_iou", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.group_pairing.getGTGroup", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.group_pairing.purity"], ["", "def", "simplerAlignEdgePred", "(", "self", ",", "\n", "targetBoxes", ",", "#GT BBs", "\n", "targetIndexToGroup", ",", "#dictionary from BB index to GT group index", "\n", "gtGroupAdj", ",", "#GT relationships (group index pairs)", "\n", "outputBoxes", ",", "#detector predictions (but the class is updated from node predictions)", "\n", "edgePred", ",", "#graph edge predictions", "\n", "edgePredIndexes", ",", "#node (group) indexes for edges", "\n", "predGroups", ",", "#outputBoxes indexes for each node", "\n", "rel_prop_pred", ",", "#the proposal prediction", "\n", "thresh_edge", ",", "#the thresholds to use", "\n", "thresh_rel", ",", "#\"", "\n", "thresh_overSeg", ",", "\n", "thresh_group", ",", "\n", "thresh_error", ",", "\n", ")", ":", "\n", "\n", "        ", "if", "edgePred", "is", "None", ":", "#no predicted graph", "\n", "            ", "if", "targetBoxes", "is", "None", ":", "\n", "                ", "prec", "=", "1", "\n", "ap", "=", "1", "\n", "recall", "=", "1", "\n", "targIndex", "=", "-", "torch", ".", "ones", "(", "len", "(", "outputBoxes", ")", ")", ".", "int", "(", ")", "\n", "missed_rels", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                ", "recall", "=", "0", "\n", "ap", "=", "0", "\n", "prec", "=", "1", "\n", "targIndex", "=", "None", "\n", "missed_rels", "=", "gtGroupAdj", "\n", "", "Fm", "=", "2", "*", "recall", "*", "prec", "/", "(", "recall", "+", "prec", ")", "if", "recall", "+", "prec", ">", "0", "else", "0", "\n", "log", "=", "{", "\n", "'recallRel'", ":", "recall", ",", "\n", "'precRel'", ":", "prec", ",", "\n", "'FmRel'", ":", "Fm", ",", "\n", "'recallOverSeg'", ":", "recall", ",", "\n", "'precOverSeg'", ":", "prec", ",", "\n", "'FmOverSeg'", ":", "Fm", ",", "\n", "'recallGroup'", ":", "recall", ",", "\n", "'precGroup'", ":", "prec", ",", "\n", "'FmGroup'", ":", "Fm", ",", "\n", "'recallError'", ":", "recall", ",", "\n", "'precError'", ":", "prec", ",", "\n", "'FmError'", ":", "Fm", "\n", "}", "\n", "\n", "predsGTYes", "=", "torch", ".", "tensor", "(", "[", "]", ")", "\n", "predsGTNo", "=", "torch", ".", "tensor", "(", "[", "]", ")", "\n", "matches", "=", "0", "\n", "predTypes", "=", "None", "\n", "missed_rels", "=", "gtGroupAdj", "\n", "", "else", ":", "\n", "\n", "#decide which predicted boxes belong to which target boxes", "\n", "            ", "numClasses", "=", "self", ".", "model_ref", ".", "numBBTypes", "\n", "\n", "\n", "\n", "if", "targetBoxes", "is", "not", "None", ":", "\n", "                ", "targetBoxes", "=", "targetBoxes", ".", "cpu", "(", ")", "\n", "if", "self", ".", "model_ref", ".", "rotation", ":", "\n", "                    ", "assert", "(", "False", "and", "'untested and should be changed to reflect new newGetTargIndexForPreds_s'", ")", "\n", "targIndex", ",", "fullHit", ",", "overSegmented", "=", "newGetTargIndexForPreds_dist", "(", "targetBoxes", "[", "0", "]", ",", "outputBoxes", ",", "1.1", ",", "numClasses", ",", "hard_thresh", "=", "False", ")", "\n", "", "else", ":", "\n", "#this performs the pred to target bounding box alignment", "\n", "#it does it with a special iou that allows the pedicition to be smaller horizontally", "\n", "                    ", "targIndex", "=", "newGetTargIndexForPreds_iou", "(", "targetBoxes", "[", "0", "]", ",", "outputBoxes", ",", "0.4", ",", "numClasses", ",", "True", ")", "\n", "", "targIndex", "=", "targIndex", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "targIndex", "=", "[", "-", "1", "]", "*", "len", "(", "outputBoxes", ")", "\n", "\n", "\n", "#Create gt vector to match edgePred", "\n", "#the MetaGraph was coded to allow in internal recursive loop like the Universal Transformer.", "\n", "", "predsEdge", "=", "edgePred", "[", "...", ",", "0", "]", "\n", "assert", "(", "not", "torch", ".", "isnan", "(", "predsEdge", ")", ".", "any", "(", ")", ")", "\n", "predsGTEdge", "=", "[", "]", "\n", "predsGTNoEdge", "=", "[", "]", "\n", "truePosEdge", "=", "falsePosEdge", "=", "trueNegEdge", "=", "falseNegEdge", "=", "0", "\n", "saveEdgePred", "=", "{", "}", "\n", "#get predictions into  names", "\n", "predsRel", "=", "edgePred", "[", "...", ",", "1", "]", "\n", "predsOverSeg", "=", "edgePred", "[", "...", ",", "2", "]", "\n", "predsGroup", "=", "edgePred", "[", "...", ",", "3", "]", "\n", "predsError", "=", "edgePred", "[", "...", ",", "4", "]", "\n", "\n", "predsGTRel", "=", "[", "]", "\n", "predsGTNoRel", "=", "[", "]", "\n", "predsGTOverSeg", "=", "[", "]", "\n", "predsGTNotOverSeg", "=", "[", "]", "\n", "predsGTGroup", "=", "[", "]", "\n", "predsGTNoGroup", "=", "[", "]", "\n", "predsGTNoError", "=", "[", "]", "\n", "predsGTError", "=", "[", "]", "\n", "\n", "truePosRel", "=", "falsePosRel", "=", "trueNegRel", "=", "falseNegRel", "=", "0", "\n", "truePosOverSeg", "=", "falsePosOverSeg", "=", "trueNegOverSeg", "=", "falseNegOverSeg", "=", "0", "\n", "truePosGroup", "=", "falsePosGroup", "=", "trueNegGroup", "=", "falseNegGroup", "=", "0", "\n", "truePosError", "=", "falsePosError", "=", "trueNegError", "=", "falseNegError", "=", "0", "\n", "\n", "saveRelPred", "=", "{", "}", "\n", "saveOverSegPred", "=", "{", "}", "\n", "saveGroupPred", "=", "{", "}", "\n", "saveErrorPred", "=", "{", "}", "\n", "\n", "#get groups with the target bb indexes instead of pred bb indexes", "\n", "predGroupsT", "=", "{", "}", "\n", "predGroupsTNear", "=", "{", "}", "\n", "for", "node", "in", "range", "(", "len", "(", "predGroups", ")", ")", ":", "\n", "                ", "predGroupsT", "[", "node", "]", "=", "[", "targIndex", "[", "bb", "]", "for", "bb", "in", "predGroups", "[", "node", "]", "if", "targIndex", "[", "bb", "]", ">=", "0", "]", "\n", "", "shouldBeEdge", "=", "{", "}", "\n", "\n", "\n", "\n", "\n", "\n", "#We only operate over the subset of nodes that have an edge", "\n", "nodeLs", "=", "[", "p", "[", "0", "]", "for", "p", "in", "edgePredIndexes", "]", "\n", "nodeRs", "=", "[", "p", "[", "1", "]", "for", "p", "in", "edgePredIndexes", "]", "\n", "nodes_with_edges", "=", "list", "(", "set", "(", "nodeLs", "+", "nodeRs", ")", ")", "\n", "node_to_nwe_index", "=", "{", "n", ":", "i", "for", "i", ",", "n", "in", "enumerate", "(", "nodes_with_edges", ")", "}", "\n", "nweLs", "=", "[", "node_to_nwe_index", "[", "n", "]", "for", "n", "in", "nodeLs", "]", "\n", "nweRs", "=", "[", "node_to_nwe_index", "[", "n", "]", "for", "n", "in", "nodeRs", "]", "\n", "\n", "#get information for that subset of nodes", "\n", "#were going to do a lot of vectorized logic for speed", "\n", "compute", "=", "[", "(", "\n", "len", "(", "predGroupsT", "[", "n0", "]", ")", ",", "#how many bbs", "\n", "len", "(", "predGroups", "[", "n0", "]", ")", ",", "\n", "getGTGroup", "(", "predGroupsT", "[", "n0", "]", ",", "targetIndexToGroup", ")", ",", "#align to GT group", "\n", "purity", "(", "predGroupsT", "[", "n0", "]", ",", "targetIndexToGroup", ")", ",", "#how many of the bbs are from the GT group", "\n", "predGroupsT", "[", "n0", "]", "[", "0", "]", "if", "len", "(", "predGroupsT", "[", "n0", "]", ")", ">", "0", "else", "-", "1", "#get the \"head\"", "\n", ")", "for", "n0", "in", "nodes_with_edges", "]", "\n", "\n", "\n", "edge_loss_device", "=", "predsEdge", ".", "device", "#is it best to have this on gpu?", "\n", "\n", "#expand information into row and column matrices to allow all-to-all node comparisons", "\n", "g_target_len", ",", "g_len", ",", "GTGroups", ",", "purities", ",", "ts_0", "=", "zip", "(", "*", "compute", ")", "\n", "\n", "#get the predicted edges with aligned GTGroup ids", "\n", "gtNE", "=", "[", "(", "GTGroups", "[", "node_to_nwe_index", "[", "n0", "]", "]", ",", "GTGroups", "[", "node_to_nwe_index", "[", "n1", "]", "]", ")", "for", "n0", ",", "n1", "in", "edgePredIndexes", "]", "\n", "\n", "g_target_len", "=", "torch", ".", "IntTensor", "(", "g_target_len", ")", ".", "to", "(", "edge_loss_device", ")", "\n", "g_len", "=", "torch", ".", "IntTensor", "(", "g_len", ")", ".", "to", "(", "edge_loss_device", ")", "\n", "purities", "=", "torch", ".", "FloatTensor", "(", "purities", ")", ".", "to", "(", "edge_loss_device", ")", "\n", "ts_0", "=", "torch", ".", "IntTensor", "(", "ts_0", ")", ".", "to", "(", "edge_loss_device", ")", "#head (first BB in group)", "\n", "GTGroups", "=", "torch", ".", "IntTensor", "(", "GTGroups", ")", ".", "to", "(", "edge_loss_device", ")", "\n", "\n", "#get the subset of information", "\n", "g_target_len_L", "=", "g_target_len", "[", "nweLs", "]", "\n", "g_target_len_R", "=", "g_target_len", "[", "nweRs", "]", "\n", "g_len_R", "=", "g_len", "[", "nweRs", "]", "\n", "g_len_L", "=", "g_len", "[", "nweLs", "]", "\n", "purity_R", "=", "purities", "[", "nweRs", "]", "\n", "purity_L", "=", "purities", "[", "nweLs", "]", "\n", "ts_0_R", "=", "ts_0", "[", "nweRs", "]", "\n", "ts_0_L", "=", "ts_0", "[", "nweLs", "]", "\n", "same_ts_0", "=", "(", "ts_0_R", "==", "ts_0_L", ")", "*", "(", "ts_0_R", ">=", "0", ")", "*", "(", "ts_0_L", ">=", "0", ")", "\n", "GTGroups_R", "=", "GTGroups", "[", "nweRs", "]", "\n", "GTGroups_L", "=", "GTGroups", "[", "nweLs", "]", "\n", "same_GTGroups", "=", "(", "GTGroups_R", "==", "GTGroups_L", ")", "*", "(", "GTGroups_R", ">=", "0", ")", "*", "(", "GTGroups_L", ">=", "0", ")", "#have to account for -1 being unaligned", "\n", "\n", "\n", "#which edges are GT ones", "\n", "gtNE", "=", "[", "(", "min", "(", "gtGroup0", ",", "gtGroup1", ")", ",", "max", "(", "gtGroup0", ",", "gtGroup1", ")", ")", "for", "gtGroup0", ",", "gtGroup1", "in", "gtNE", "]", "#order as the gt is", "\n", "gtGroupAdjMat", "=", "[", "pair", "in", "gtGroupAdj", "for", "pair", "in", "gtNE", "]", "#which are real relationships", "\n", "gtGroupAdjMat", "=", "torch", ".", "BoolTensor", "(", "gtGroupAdjMat", ")", ".", "to", "(", "edge_loss_device", ")", "\n", "\n", "hit_rels", "=", "set", "(", "gtNE", ")", "\n", "missed_rels", "=", "gtGroupAdj", ".", "difference", "(", "hit_rels", ")", "\n", "\n", "\n", "\n", "#common conditions", "\n", "bothTarged", "=", "(", "g_target_len_R", ">", "0", ")", "*", "(", "g_target_len_L", ">", "0", ")", "#The both each have atleast one aligned BB", "\n", "badTarged", "=", "(", "g_target_len_R", "==", "0", ")", "+", "(", "g_target_len_L", "==", "0", ")", "#neighter have any aligned BBs", "\n", "bothPure", "=", "(", "purity_R", ">", "0.8", ")", "*", "(", "purity_L", ">", "0.8", ")", "#both are mostly BBs belonging the GT group", "\n", "\n", "#Actually start determining GT/training scenarios", "\n", "#we compute True and False scenarios. If an edge doesn't fit either (e.g. it's impure) then it does not contribute to the loss", "\n", "#remember * is 'and' + is 'or' and ~ is 'not'", "\n", "\n", "#it is a relationship/link if both are aligned to GT bbs AND this isn't a merge AND they both are pure AND they don't belong to the same GT group AND there is a GT link between their aligned GT groups", "\n", "wasRel", "=", "bothTarged", "*", "(", "(", "g_len_L", ">", "1", ")", "+", "(", "g_len_R", ">", "1", ")", "+", "~", "same_ts_0", ")", "*", "bothPure", "*", "~", "same_GTGroups", "*", "gtGroupAdjMat", "\n", "\n", "#there is no relationship/link if neither are aligned OR (they are aligned AND this isn't a merge AND they are pure AND they are not the same GT group AND there is not GT link)", "\n", "wasNoRel", "=", "(", "badTarged", "+", "(", "bothTarged", "*", "(", "(", "g_len_L", ">", "1", ")", "+", "(", "g_len_R", ">", "1", ")", "+", "~", "same_ts_0", ")", "*", "bothPure", "*", "~", "same_GTGroups", "*", "~", "gtGroupAdjMat", ")", ")", "\n", "\n", "#this is not a merge if they aren't aligned OR (they are aligned And pure AND either one has multiple BBs or they aren't aligned to the same GT BB)", "\n", "wasNoOverSeg", "=", "(", "badTarged", "+", "(", "bothTarged", "*", "bothPure", "*", "~", "(", "(", "g_len_R", "==", "1", ")", "*", "(", "g_len_L", "==", "1", ")", "*", "same_ts_0", ")", ")", ")", "\n", "#This is a merge if they are both aligned, they both have only one BB and have the same GT BB", "\n", "wasOverSeg", "=", "bothTarged", "*", "(", "g_len_R", "==", "1", ")", "*", "(", "g_len_L", "==", "1", ")", "*", "same_ts_0", "\n", "\n", "#This is a group if they are aligned AND this isn't a merge AND they are pure AND are the same GT group", "\n", "wasGroup", "=", "bothTarged", "*", "(", "(", "g_len_L", ">", "1", ")", "+", "(", "g_len_R", ">", "1", ")", "+", "~", "same_ts_0", ")", "*", "bothPure", "*", "same_GTGroups", "\n", "#This is not a group if they arn't aligned OR (this isn't a merge AND they are pure but they belong to different GT groups)", "\n", "wasNoGroup", "=", "badTarged", "+", "(", "bothTarged", "*", "(", "(", "g_len_L", ">", "1", ")", "+", "(", "g_len_R", ">", "1", ")", "+", "~", "same_ts_0", ")", "*", "bothPure", "*", "~", "same_GTGroups", ")", "\n", "\n", "#The error occurs when something is impure (bad merge or group)", "\n", "wasError", "=", "bothTarged", "*", "(", "(", "purity_R", "<", "1", ")", "+", "(", "purity_L", "<", "1", ")", ")", "\n", "wasNoError", "=", "bothTarged", "*", "~", "(", "(", "purity_R", "<", "1", ")", "+", "(", "purity_L", "<", "1", ")", ")", "\n", "\n", "#build tensors for loss computation, score results, and indicate each edge's case (saveEdgePred)", "\n", "saveIndex", "=", "{", "'TP'", ":", "1", ",", "'TN'", ":", "2", ",", "'FP'", ":", "3", ",", "'FN'", ":", "4", ",", "'UP'", ":", "5", ",", "'UN'", ":", "6", "}", "\n", "revSaveIndex", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "saveIndex", ".", "items", "(", ")", "}", "\n", "\n", "predsEdgeAboveThresh", "=", "torch", ".", "sigmoid", "(", "predsEdge", "[", ":", ",", "-", "1", "]", ")", ">", "thresh_edge", "\n", "\n", "saveEdgePredMat", "=", "torch", ".", "IntTensor", "(", "len", "(", "edgePredIndexes", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "shouldBeEdge", "=", "wasRel", "+", "wasOverSeg", "+", "wasGroup", "\n", "\n", "#For relationships", "\n", "predsRelAboveThresh", "=", "torch", ".", "sigmoid", "(", "predsRel", "[", ":", ",", "-", "1", "]", ")", ">", "thresh_rel", "\n", "saveRelPredMat", "=", "torch", ".", "IntTensor", "(", "len", "(", "edgePredIndexes", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "predsGTRel", "=", "predsRel", "[", "wasRel", "]", "#this is the tensor of predictions which need a True GT applied", "\n", "predsGTNoRel", "=", "predsRel", "[", "wasNoRel", "]", "#this tensor needs a False GT applied", "\n", "TP", "=", "wasRel", "*", "predsRelAboveThresh", "\n", "truePosRel", "=", "TP", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveRelPredMat", "[", "TP", "]", "=", "saveIndex", "[", "'TP'", "]", "\n", "FP", "=", "wasNoRel", "*", "predsRelAboveThresh", "\n", "falsePosRel", "=", "FP", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveRelPredMat", "[", "FP", "]", "=", "saveIndex", "[", "'FP'", "]", "\n", "FN", "=", "wasRel", "*", "~", "predsRelAboveThresh", "\n", "falseNegRel", "=", "FN", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveRelPredMat", "[", "FN", "]", "=", "saveIndex", "[", "'FN'", "]", "\n", "TN", "=", "wasNoRel", "*", "~", "predsRelAboveThresh", "\n", "trueNegRel", "=", "TN", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveRelPredMat", "[", "TN", "]", "=", "saveIndex", "[", "'TN'", "]", "\n", "unk", "=", "~", "wasRel", "*", "~", "wasNoRel", "#unknown, we didn't calculate a GT", "\n", "UP", "=", "unk", "*", "predsRelAboveThresh", "\n", "saveRelPredMat", "[", "UP", "]", "=", "saveIndex", "[", "'UP'", "]", "\n", "UN", "=", "unk", "*", "~", "predsRelAboveThresh", "\n", "saveRelPredMat", "[", "UN", "]", "=", "saveIndex", "[", "'UN'", "]", "\n", "saveRelPred", "=", "{", "i", ":", "revSaveIndex", "[", "saveRelPredMat", "[", "i", "]", ".", "item", "(", ")", "]", "for", "i", "in", "range", "(", "len", "(", "edgePredIndexes", ")", ")", "if", "saveRelPredMat", "[", "i", "]", ">", "0", "}", "\n", "\n", "#For grouping", "\n", "predsGroupAboveThresh", "=", "torch", ".", "sigmoid", "(", "predsGroup", "[", ":", ",", "-", "1", "]", ")", ">", "thresh_group", "\n", "saveGroupPredMat", "=", "torch", ".", "IntTensor", "(", "len", "(", "edgePredIndexes", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "predsGTGroup", "=", "predsGroup", "[", "wasGroup", "]", "\n", "predsGTNoGroup", "=", "predsGroup", "[", "wasNoGroup", "]", "\n", "TP", "=", "wasGroup", "*", "predsGroupAboveThresh", "\n", "truePosGroup", "=", "TP", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveGroupPredMat", "[", "TP", "]", "=", "saveIndex", "[", "'TP'", "]", "\n", "FP", "=", "wasNoGroup", "*", "predsGroupAboveThresh", "\n", "falsePosGroup", "=", "FP", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveGroupPredMat", "[", "FP", "]", "=", "saveIndex", "[", "'FP'", "]", "\n", "FN", "=", "wasGroup", "*", "~", "predsGroupAboveThresh", "\n", "falseNegGroup", "=", "FN", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveGroupPredMat", "[", "FN", "]", "=", "saveIndex", "[", "'FN'", "]", "\n", "TN", "=", "wasNoGroup", "*", "~", "predsGroupAboveThresh", "\n", "trueNegGroup", "=", "TN", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveGroupPredMat", "[", "TN", "]", "=", "saveIndex", "[", "'TN'", "]", "\n", "unk", "=", "~", "wasGroup", "*", "~", "wasNoGroup", "\n", "UP", "=", "unk", "*", "predsGroupAboveThresh", "\n", "saveGroupPredMat", "[", "UP", "]", "=", "saveIndex", "[", "'UP'", "]", "\n", "UN", "=", "unk", "*", "~", "predsGroupAboveThresh", "\n", "saveGroupPredMat", "[", "UN", "]", "=", "saveIndex", "[", "'UN'", "]", "\n", "saveGroupPred", "=", "{", "i", ":", "revSaveIndex", "[", "saveGroupPredMat", "[", "i", "]", ".", "item", "(", ")", "]", "for", "i", "in", "range", "(", "len", "(", "edgePredIndexes", ")", ")", "if", "saveGroupPredMat", "[", "i", "]", ">", "0", "}", "\n", "\n", "#For overseg/merge", "\n", "predsOverSegAboveThresh", "=", "torch", ".", "sigmoid", "(", "predsOverSeg", "[", ":", ",", "-", "1", "]", ")", ">", "thresh_overSeg", "\n", "saveOverSegPredMat", "=", "torch", ".", "IntTensor", "(", "len", "(", "edgePredIndexes", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "d_indexesOverSeg", "=", "torch", ".", "nonzero", "(", "wasOverSeg", ")", "\n", "d_indexesNoOverSeg", "=", "torch", ".", "nonzero", "(", "wasNoOverSeg", ")", "\n", "d_indexesOverSeg", "=", "set", "(", "[", "a", ".", "item", "(", ")", "for", "a", "in", "d_indexesOverSeg", "]", ")", "\n", "d_indexesNoOverSeg", "=", "set", "(", "[", "a", ".", "item", "(", ")", "for", "a", "in", "d_indexesNoOverSeg", "]", ")", "\n", "predsGTOverSeg", "=", "predsOverSeg", "[", "wasOverSeg", "]", "\n", "predsGTNotOverSeg", "=", "predsOverSeg", "[", "wasNoOverSeg", "]", "\n", "TP", "=", "wasOverSeg", "*", "predsOverSegAboveThresh", "\n", "truePosOverSeg", "=", "TP", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveOverSegPredMat", "[", "TP", "]", "=", "saveIndex", "[", "'TP'", "]", "\n", "FP", "=", "wasNoOverSeg", "*", "predsOverSegAboveThresh", "\n", "falsePosOverSeg", "=", "FP", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveOverSegPredMat", "[", "FP", "]", "=", "saveIndex", "[", "'FP'", "]", "\n", "FN", "=", "wasOverSeg", "*", "~", "predsOverSegAboveThresh", "\n", "falseNegOverSeg", "=", "FN", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveOverSegPredMat", "[", "FN", "]", "=", "saveIndex", "[", "'FN'", "]", "\n", "TN", "=", "wasNoOverSeg", "*", "~", "predsOverSegAboveThresh", "\n", "trueNegOverSeg", "=", "TN", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveOverSegPredMat", "[", "TN", "]", "=", "saveIndex", "[", "'TN'", "]", "\n", "unk", "=", "~", "wasOverSeg", "*", "~", "wasNoOverSeg", "\n", "UP", "=", "unk", "*", "predsOverSegAboveThresh", "\n", "saveOverSegPredMat", "[", "UP", "]", "=", "saveIndex", "[", "'UP'", "]", "\n", "UN", "=", "unk", "*", "~", "predsOverSegAboveThresh", "\n", "saveOverSegPredMat", "[", "UN", "]", "=", "saveIndex", "[", "'UN'", "]", "\n", "saveOverSegPred", "=", "{", "i", ":", "revSaveIndex", "[", "saveOverSegPredMat", "[", "i", "]", ".", "item", "(", ")", "]", "for", "i", "in", "range", "(", "len", "(", "edgePredIndexes", ")", ")", "if", "saveOverSegPredMat", "[", "i", "]", ">", "0", "}", "\n", "\n", "#For error", "\n", "predsErrorAboveThresh", "=", "torch", ".", "sigmoid", "(", "predsError", "[", ":", ",", "-", "1", "]", ")", ">", "thresh_error", "\n", "saveErrorPredMat", "=", "torch", ".", "IntTensor", "(", "len", "(", "edgePredIndexes", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "predsGTError", "=", "predsError", "[", "wasError", "]", "\n", "predsGTNoError", "=", "predsError", "[", "wasNoError", "]", "\n", "TP", "=", "wasError", "*", "predsErrorAboveThresh", "\n", "truePosError", "=", "TP", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveErrorPredMat", "[", "TP", "]", "=", "saveIndex", "[", "'TP'", "]", "\n", "FP", "=", "wasNoError", "*", "predsErrorAboveThresh", "\n", "falsePosError", "=", "FP", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveErrorPredMat", "[", "FP", "]", "=", "saveIndex", "[", "'FP'", "]", "\n", "FN", "=", "wasError", "*", "~", "predsErrorAboveThresh", "\n", "falseNegError", "=", "FN", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveErrorPredMat", "[", "FN", "]", "=", "saveIndex", "[", "'FN'", "]", "\n", "TN", "=", "wasNoError", "*", "~", "predsErrorAboveThresh", "\n", "trueNegError", "=", "TN", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveErrorPredMat", "[", "TN", "]", "=", "saveIndex", "[", "'TN'", "]", "\n", "unk", "=", "~", "wasError", "*", "~", "wasNoError", "\n", "UP", "=", "unk", "*", "predsErrorAboveThresh", "\n", "saveErrorPredMat", "[", "UP", "]", "=", "saveIndex", "[", "'UP'", "]", "\n", "UN", "=", "unk", "*", "~", "predsErrorAboveThresh", "\n", "saveErrorPredMat", "[", "UN", "]", "=", "saveIndex", "[", "'UN'", "]", "\n", "saveErrorPred", "=", "{", "i", ":", "revSaveIndex", "[", "saveErrorPredMat", "[", "i", "]", ".", "item", "(", ")", "]", "for", "i", "in", "range", "(", "len", "(", "edgePredIndexes", ")", ")", "if", "saveErrorPredMat", "[", "i", "]", ">", "0", "}", "\n", "\n", "#For keep edge/prune", "\n", "predsGTEdge", "=", "predsEdge", "[", "shouldBeEdge", "]", "\n", "TP", "=", "shouldBeEdge", "*", "predsEdgeAboveThresh", "\n", "truePosEdge", "=", "TP", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveEdgePredMat", "[", "TP", "]", "=", "saveIndex", "[", "'TP'", "]", "\n", "FN", "=", "shouldBeEdge", "*", "~", "predsEdgeAboveThresh", "\n", "falseNegEdge", "=", "FN", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveEdgePredMat", "[", "FN", "]", "=", "saveIndex", "[", "'FN'", "]", "\n", "for", "ind", "in", "torch", ".", "nonzero", "(", "FN", ")", ":", "\n", "                ", "missed_rels", ".", "add", "(", "gtNE", "[", "ind", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "shouldNotBeEdge", "=", "~", "wasError", "*", "~", "shouldBeEdge", "\n", "predsGTNoEdge", "=", "predsEdge", "[", "shouldNotBeEdge", "]", "\n", "FP", "=", "shouldNotBeEdge", "*", "predsEdgeAboveThresh", "\n", "falsePosEdge", "=", "FP", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveEdgePredMat", "[", "FP", "]", "=", "saveIndex", "[", "'FP'", "]", "\n", "TN", "=", "shouldNotBeEdge", "*", "~", "predsEdgeAboveThresh", "\n", "trueNegEdge", "=", "TN", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "saveEdgePredMat", "[", "TN", "]", "=", "saveIndex", "[", "'TN'", "]", "\n", "unk", "=", "~", "shouldBeEdge", "*", "~", "shouldNotBeEdge", "\n", "UP", "=", "unk", "*", "predsEdgeAboveThresh", "\n", "saveEdgePredMat", "[", "UP", "]", "=", "saveIndex", "[", "'UP'", "]", "\n", "UN", "=", "unk", "*", "~", "predsEdgeAboveThresh", "\n", "saveEdgePredMat", "[", "UN", "]", "=", "saveIndex", "[", "'UN'", "]", "\n", "saveEdgePred", "=", "{", "i", ":", "revSaveIndex", "[", "saveEdgePredMat", "[", "i", "]", ".", "item", "(", ")", "]", "for", "i", "in", "range", "(", "len", "(", "edgePredIndexes", ")", ")", "if", "saveEdgePredMat", "[", "i", "]", ">", "0", "}", "\n", "\n", "\n", "\n", "\n", "\n", "#all predictions with True GT", "\n", "predsGTYes", "=", "torch", ".", "cat", "(", "(", "predsGTEdge", ",", "predsGTRel", ",", "predsGTOverSeg", ",", "predsGTGroup", ",", "predsGTError", ")", ",", "dim", "=", "0", ")", "\n", "\n", "#all predicitons with False GT", "\n", "predsGTNo", "=", "torch", ".", "cat", "(", "(", "predsGTNoEdge", ",", "predsGTNoRel", ",", "predsGTNotOverSeg", ",", "predsGTNoGroup", ",", "predsGTNoError", ")", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "#calcuate scores (for this GCN iteration)", "\n", "recallEdge", "=", "truePosEdge", "/", "(", "truePosEdge", "+", "falseNegEdge", ")", "if", "truePosEdge", "+", "falseNegEdge", ">", "0", "else", "1", "\n", "precEdge", "=", "truePosEdge", "/", "(", "truePosEdge", "+", "falsePosEdge", ")", "if", "truePosEdge", "+", "falsePosEdge", ">", "0", "else", "1", "\n", "\n", "\n", "\n", "recallRel", "=", "truePosRel", "/", "(", "truePosRel", "+", "falseNegRel", ")", "if", "truePosRel", "+", "falseNegRel", ">", "0", "else", "1", "\n", "precRel", "=", "truePosRel", "/", "(", "truePosRel", "+", "falsePosRel", ")", "if", "truePosRel", "+", "falsePosRel", ">", "0", "else", "1", "\n", "recallOverSeg", "=", "truePosOverSeg", "/", "(", "truePosOverSeg", "+", "falseNegOverSeg", ")", "if", "truePosOverSeg", "+", "falseNegOverSeg", ">", "0", "else", "1", "\n", "precOverSeg", "=", "truePosOverSeg", "/", "(", "truePosOverSeg", "+", "falsePosOverSeg", ")", "if", "truePosOverSeg", "+", "falsePosOverSeg", ">", "0", "else", "1", "\n", "recallGroup", "=", "truePosGroup", "/", "(", "truePosGroup", "+", "falseNegGroup", ")", "if", "truePosGroup", "+", "falseNegGroup", ">", "0", "else", "1", "\n", "assert", "(", "falsePosGroup", ">=", "0", "and", "truePosGroup", ">=", "0", ")", "\n", "precGroup", "=", "truePosGroup", "/", "(", "truePosGroup", "+", "falsePosGroup", ")", "if", "truePosGroup", "+", "falsePosGroup", ">", "0", "else", "1", "\n", "recallError", "=", "truePosError", "/", "(", "truePosError", "+", "falseNegError", ")", "if", "truePosError", "+", "falseNegError", ">", "0", "else", "1", "\n", "precError", "=", "truePosError", "/", "(", "truePosError", "+", "falsePosError", ")", "if", "truePosError", "+", "falsePosError", ">", "0", "else", "1", "\n", "\n", "\n", "log", "=", "{", "\n", "'recallEdge'", ":", "recallEdge", ",", "\n", "'precEdge'", ":", "precEdge", ",", "\n", "'FmEdge'", ":", "2", "*", "(", "precEdge", "*", "recallEdge", ")", "/", "(", "recallEdge", "+", "precEdge", ")", "if", "recallEdge", "+", "precEdge", ">", "0", "else", "0", ",", "\n", "'recallRel'", ":", "recallRel", ",", "\n", "'precRel'", ":", "precRel", ",", "\n", "'FmRel'", ":", "2", "*", "(", "precRel", "*", "recallRel", ")", "/", "(", "recallRel", "+", "precRel", ")", "if", "recallRel", "+", "precRel", ">", "0", "else", "0", ",", "\n", "'recallOverSeg'", ":", "recallOverSeg", ",", "\n", "'precOverSeg'", ":", "precOverSeg", ",", "\n", "'FmOverSeg'", ":", "2", "*", "(", "precOverSeg", "*", "recallOverSeg", ")", "/", "(", "recallOverSeg", "+", "precOverSeg", ")", "if", "recallOverSeg", "+", "precOverSeg", ">", "0", "else", "0", ",", "\n", "'recallGroup'", ":", "recallGroup", ",", "\n", "'precGroup'", ":", "precGroup", ",", "\n", "'FmGroup'", ":", "2", "*", "(", "precGroup", "*", "recallGroup", ")", "/", "(", "recallGroup", "+", "precGroup", ")", "if", "recallGroup", "+", "precGroup", ">", "0", "else", "0", ",", "\n", "'recallError'", ":", "recallError", ",", "\n", "'precError'", ":", "precError", ",", "\n", "'FmError'", ":", "2", "*", "(", "precError", "*", "recallError", ")", "/", "(", "recallError", "+", "precError", ")", "if", "recallError", "+", "precError", ">", "0", "else", "0", ",", "\n", "}", "\n", "predTypes", "=", "[", "saveEdgePred", ",", "saveRelPred", ",", "saveOverSegPred", ",", "saveGroupPred", ",", "saveErrorPred", "]", "\n", "\n", "\n", "\n", "\n", "", "if", "rel_prop_pred", "is", "not", "None", ":", "\n", "#Compute GT for the relationship proposal", "\n", "\n", "            ", "relPropScores", ",", "relPropIds", ",", "threshPropRel", "=", "rel_prop_pred", "\n", "\n", "#This is a little different as we have no predicted groups to worry about", "\n", "#something needs an edge it it is to be merged, grouped, or has a relationship", "\n", "truePropPred", "=", "falsePropPred", "=", "falseNegProp", "=", "0", "\n", "propPredsPos", "=", "[", "]", "\n", "propPredsNeg", "=", "[", "]", "\n", "for", "i", ",", "(", "n0", ",", "n1", ")", "in", "enumerate", "(", "relPropIds", ")", ":", "\n", "                ", "t0", "=", "targIndex", "[", "n0", "]", "\n", "t1", "=", "targIndex", "[", "n1", "]", "\n", "isEdge", "=", "False", "\n", "if", "t0", ">=", "0", "and", "t1", ">=", "0", ":", "\n", "                    ", "if", "t0", "==", "t1", ":", "\n", "                        ", "isEdge", "=", "True", "#merge", "\n", "", "else", ":", "\n", "                        ", "gtGroup0", "=", "targetIndexToGroup", "[", "t0", "]", "\n", "gtGroup1", "=", "targetIndexToGroup", "[", "t1", "]", "\n", "\n", "if", "gtGroup0", "==", "gtGroup1", ":", "\n", "                            ", "isEdge", "=", "True", "#group", "\n", "", "else", ":", "\n", "                            ", "if", "(", "min", "(", "gtGroup0", ",", "gtGroup1", ")", ",", "max", "(", "gtGroup0", ",", "gtGroup1", ")", ")", "in", "gtGroupAdj", ":", "\n", "                                ", "isEdge", "=", "True", "#relationship", "\n", "", "", "", "", "if", "isEdge", ":", "\n", "                    ", "propPredsPos", ".", "append", "(", "relPropScores", "[", "i", "]", ")", "\n", "if", "relPropScores", "[", "i", "]", ">", "threshPropRel", ":", "\n", "                        ", "truePropPred", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "falseNegProp", "+=", "1", "\n", "", "", "else", ":", "\n", "                    ", "propPredsNeg", ".", "append", "(", "relPropScores", "[", "i", "]", ")", "\n", "if", "relPropScores", "[", "i", "]", ">", "threshPropRel", ":", "\n", "                        ", "falsePropPred", "+=", "1", "\n", "", "", "", "if", "len", "(", "propPredsPos", ")", ">", "0", ":", "\n", "                ", "propPredsPos", "=", "torch", ".", "stack", "(", "propPredsPos", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "propPredsPos", "=", "None", "\n", "", "if", "len", "(", "propPredsNeg", ")", ">", "0", ":", "\n", "                ", "propPredsNeg", "=", "torch", ".", "stack", "(", "propPredsNeg", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "propPredsNeg", "=", "None", "\n", "\n", "\n", "\n", "\n", "", "propRecall", "=", "truePropPred", "/", "(", "truePropPred", "+", "falseNegProp", ")", "if", "truePropPred", "+", "falseNegProp", ">", "0", "else", "1", "\n", "propPrec", "=", "truePropPred", "/", "(", "truePropPred", "+", "falsePropPred", ")", "if", "truePropPred", "+", "falsePropPred", ">", "0", "else", "1", "\n", "log", "[", "'edgePropRecall'", "]", "=", "propRecall", "\n", "log", "[", "'edgePropPrec'", "]", "=", "propPrec", "\n", "\n", "proposedInfo", "=", "(", "propPredsPos", ",", "propPredsNeg", ",", "propRecall", ",", "propPrec", ")", "\n", "", "else", ":", "\n", "            ", "proposedInfo", "=", "None", "\n", "\n", "", "return", "predsGTYes", ",", "predsGTNo", ",", "targIndex", ",", "proposedInfo", ",", "log", ",", "predTypes", ",", "missed_rels", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.newRun": [[826, 1321], ["len", "graph_pair_trainer.GraphPairTrainer._to_tensor", "collections.defaultdict", "graph_pair_trainer.GraphPairTrainer.model", "graph_pair_trainer.GraphPairTrainer.model", "enumerate", "range", "len", "min", "nodePred[].argmax().tolist", "targetBoxes[].argmax().tolist", "collections.defaultdict", "predToGTGroup.items", "graph_pair_trainer.GraphPairTrainer.finalEval", "log.update", "len", "[].to", "zip", "graph_pair_trainer.GraphPairTrainer.simplerAlignEdgePred", "allEdgePredTypes.append", "allMissedRels.append", "allBBAlignment.append", "logIter.items", "targetBoxes.size", "len", "classMap.values", "gtGroupToPred[].append", "len", "graph_pair_trainer.GraphPairTrainer.removeSamePairs", "os.path.join", "evaluators.draw_graph.draw_graph", "graph_pair_trainer.GraphPairTrainer.characterization_eval", "edgePred.detach().cpu", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "targetBoxes.clone", "enumerate", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "predEdgeShouldBeTrue.mean().item", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "predEdgeShouldBeFalse.mean().item", "os.path.join", "evaluators.draw_graph.draw_graph", "print", "numpy.array", "numpy.array", "[].to", "len", "utils.group_pairing.getGTGroup", "classMap.items", "nodePred[].argmax", "targetBoxes[].argmax", "graph_pair_trainer.maxRelScoreIsHit", "len", "targetBoxes.cpu", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "collections.defaultdict", "collections.defaultdict.items", "len", "len", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "predEdgeShouldBeTrue.size", "predEdgeShouldBeTrue.size", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "predEdgeShouldBeFalse.size", "predEdgeShouldBeFalse.size", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "nodePredClass_use.size", "nodePredConf_use.size", "len", "len", "targetBoxes[].cpu", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "utils.yolo_tools.AP_dist", "utils.yolo_tools.AP_iou", "graph_pair_trainer.maxRelScoreIsHit", "graph_pair_trainer.maxRelScoreIsHit", "graph_pair_trainer.maxRelScoreIsHit", "edgePred.detach", "targetBoxes.cpu", "outputBoxes.detach().cpu", "outputOffsets.detach().cpu", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "type", "node_pred_use_index.append", "node_gt_use_class_indexes.append", "node_conf_use_index.append", "node_conf_gt.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "predEdgeShouldBeTrue.mean", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "predEdgeShouldBeFalse.mean", "propPredPairingShouldBeTrue.size", "propPredPairingShouldBeFalse.size", "torch.FloatTensor().to.size", "torch.FloatTensor().to.size", "nodePredConf_use.size", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "node_pred_use_index_sp.append", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.cat().to.append", "torch.cat().to.append", "node_conf_use_index.append", "node_conf_gt.append", "len", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "outputBoxes.detach", "outputOffsets.detach", "nodePred.detach().cpu", "len", "node_pred_use_index_sp.append", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.cat().to.append", "torch.cat().to.append", "torch.FloatTensor().zero_().to", "torch.FloatTensor().zero_().to", "torch.FloatTensor().zero_().to", "torch.FloatTensor().zero_().to", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nodePred.detach", "int", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "len", "len", "n.detach().cpu", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "n.detach().cpu", "torch.cat.size", "torch.cat.size", "n.detach", "n.detach", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer._to_tensor", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.finalEval", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.simplerAlignEdgePred", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.removeSamePairs", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.draw_graph.draw_graph", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.characterization_eval", "home.repos.pwc.inspect_result.herobd_FUDGE.evaluators.draw_graph.draw_graph", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.group_pairing.getGTGroup", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.maxRelScoreIsHit", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.AP_dist", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.AP_iou", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.maxRelScoreIsHit", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.maxRelScoreIsHit", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.maxRelScoreIsHit"], ["", "def", "newRun", "(", "self", ",", "\n", "instance", ",", "#dict returned by dataset", "\n", "useGT", ",", "#whether to use GT BBs", "\n", "threshIntur", "=", "None", ",", "#should always be None in FUDGE, but manipluates detection threshold", "\n", "get", "=", "[", "]", ",", "#extra data to return", "\n", "forward_only", "=", "False", ")", ":", "\n", "\n", "        ", "numClasses", "=", "len", "(", "self", ".", "classMap", ")", "\n", "\n", "#to GPU", "\n", "image", ",", "targetBoxes", ",", "adj", ",", "target_num_neighbors", "=", "self", ".", "_to_tensor", "(", "instance", ")", "\n", "\n", "gtGroups", "=", "instance", "[", "'gt_groups'", "]", "\n", "gtGroupAdj", "=", "instance", "[", "'gt_groups_adj'", "]", "\n", "targetIndexToGroup", "=", "instance", "[", "'targetIndexToGroup'", "]", "\n", "targetIndexToGroup", "=", "instance", "[", "'targetIndexToGroup'", "]", "\n", "\n", "#no trans used", "\n", "if", "self", ".", "use_gt_trans", ":", "\n", "            ", "if", "useGT", "and", "'word_bbs'", "in", "useGT", ":", "\n", "                ", "gtTrans", "=", "instance", "[", "'form_metadata'", "]", "[", "'word_trans'", "]", "\n", "", "else", ":", "\n", "                ", "gtTrans", "=", "instance", "[", "'transcription'", "]", "\n", "\n", "", "", "else", ":", "\n", "            ", "gtTrans", "=", "None", "\n", "\n", "#Format the gt BBs like the detection output. Also applies a small amount of noise", "\n", "", "if", "useGT", "and", "len", "(", "useGT", ")", ">", "0", ":", "\n", "            ", "numBBTypes", "=", "self", ".", "model_ref", ".", "numBBTypes", "\n", "if", "'word_bbs'", "in", "useGT", ":", "#useOnlyGTSpace and self.use_word_bbs_gt:", "\n", "                ", "word_boxes", "=", "instance", "[", "'form_metadata'", "]", "[", "'word_boxes'", "]", "[", "None", ",", ":", ",", ":", ",", "]", ".", "to", "(", "targetBoxes", ".", "device", ")", "#I can change this as it isn't used later", "\n", "targetBoxes_changed", "=", "word_boxes", "\n", "if", "self", ".", "model", ".", "training", ":", "\n", "#noise", "\n", "                    ", "targetBoxes_changed", "[", ":", ",", ":", ",", "0", "]", "+=", "torch", ".", "randn_like", "(", "targetBoxes_changed", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "targetBoxes_changed", "[", ":", ",", ":", ",", "1", "]", "+=", "torch", ".", "randn_like", "(", "targetBoxes_changed", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "if", "self", ".", "model_ref", ".", "rotation", ":", "\n", "                        ", "targetBoxes_changed", "[", ":", ",", ":", ",", "2", "]", "+=", "torch", ".", "randn_like", "(", "targetBoxes_changed", "[", ":", ",", ":", ",", "2", "]", ")", "*", "0.01", "\n", "", "targetBoxes_changed", "[", ":", ",", ":", ",", "3", "]", "+=", "torch", ".", "randn_like", "(", "targetBoxes_changed", "[", ":", ",", ":", ",", "3", "]", ")", "\n", "targetBoxes_changed", "[", ":", ",", ":", ",", "4", "]", "+=", "torch", ".", "randn_like", "(", "targetBoxes_changed", "[", ":", ",", ":", ",", "4", "]", ")", "\n", "targetBoxes_changed", "[", ":", ",", ":", ",", "3", "]", "[", "targetBoxes_changed", "[", ":", ",", ":", ",", "3", "]", "<", "1", "]", "=", "1", "\n", "targetBoxes_changed", "[", ":", ",", ":", ",", "4", "]", "[", "targetBoxes_changed", "[", ":", ",", ":", ",", "4", "]", "<", "1", "]", "=", "1", "\n", "\n", "\n", "", "", "elif", "targetBoxes", "is", "not", "None", ":", "\n", "                ", "targetBoxes_changed", "=", "targetBoxes", ".", "clone", "(", ")", "\n", "if", "self", ".", "model", ".", "training", ":", "\n", "#noise", "\n", "                    ", "targetBoxes_changed", "[", ":", ",", ":", ",", "0", "]", "+=", "torch", ".", "randn_like", "(", "targetBoxes_changed", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "targetBoxes_changed", "[", ":", ",", ":", ",", "1", "]", "+=", "torch", ".", "randn_like", "(", "targetBoxes_changed", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "if", "self", ".", "model_ref", ".", "rotation", ":", "\n", "                        ", "targetBoxes_changed", "[", ":", ",", ":", ",", "2", "]", "+=", "torch", ".", "randn_like", "(", "targetBoxes_changed", "[", ":", ",", ":", ",", "2", "]", ")", "*", "0.01", "\n", "", "targetBoxes_changed", "[", ":", ",", ":", ",", "3", "]", "+=", "torch", ".", "randn_like", "(", "targetBoxes_changed", "[", ":", ",", ":", ",", "3", "]", ")", "\n", "targetBoxes_changed", "[", ":", ",", ":", ",", "4", "]", "+=", "torch", ".", "randn_like", "(", "targetBoxes_changed", "[", ":", ",", ":", ",", "4", "]", ")", "\n", "targetBoxes_changed", "[", ":", ",", ":", ",", "3", "]", "[", "targetBoxes_changed", "[", ":", ",", ":", ",", "3", "]", "<", "1", "]", "=", "1", "\n", "targetBoxes_changed", "[", ":", ",", ":", ",", "4", "]", "[", "targetBoxes_changed", "[", ":", ",", ":", ",", "4", "]", "<", "1", "]", "=", "1", "\n", "", "", "else", ":", "\n", "                ", "targetBoxes_changed", "=", "None", "\n", "\n", "", "if", "'only_space'", "in", "useGT", "and", "targetBoxes_changed", "is", "not", "None", ":", "\n", "                ", "targetBoxes_changed", "[", ":", ",", ":", ",", "5", ":", "]", "=", "0", "#zero out class information to ensure results aren't contaminated", "\n", "\n", "\n", "#run the model with the GT", "\n", "", "allOutputBoxes", ",", "outputOffsets", ",", "allEdgePred", ",", "allEdgeIndexes", ",", "allNodePred", ",", "allPredGroups", ",", "rel_prop_pred", ",", "merge_prop_scores", ",", "final", "=", "self", ".", "model", "(", "\n", "image", ",", "\n", "targetBoxes_changed", ",", "\n", "target_num_neighbors", ",", "\n", "useGT", ",", "\n", "otherThresh", "=", "self", ".", "conf_thresh_init", ",", "\n", "otherThreshIntur", "=", "threshIntur", ",", "\n", "hard_detect_limit", "=", "self", ".", "train_hard_detect_limit", ",", "\n", "gtTrans", "=", "gtTrans", ",", "\n", "gtGroups", "=", "gtGroups", "if", "'groups'", "in", "useGT", "else", "None", ")", "\n", "", "else", ":", "\n", "#run the model (no GT)", "\n", "            ", "allOutputBoxes", ",", "outputOffsets", ",", "allEdgePred", ",", "allEdgeIndexes", ",", "allNodePred", ",", "allPredGroups", ",", "rel_prop_pred", ",", "merge_prop_scores", ",", "final", "=", "self", ".", "model", "(", "image", ",", "\n", "targetBoxes", "if", "gtTrans", "is", "not", "None", "else", "None", ",", "\n", "otherThresh", "=", "self", ".", "conf_thresh_init", ",", "\n", "otherThreshIntur", "=", "threshIntur", ",", "\n", "hard_detect_limit", "=", "self", ".", "train_hard_detect_limit", ",", "\n", "gtTrans", "=", "gtTrans", ")", "\n", "", "if", "forward_only", ":", "\n", "            ", "return", "\n", "\n", "\n", "", "losses", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "log", "=", "{", "}", "\n", "\n", "allEdgePredTypes", "=", "[", "]", "\n", "allMissedRels", "=", "[", "]", "\n", "allBBAlignment", "=", "[", "]", "\n", "proposedInfo", "=", "None", "\n", "mergeProposedInfo", "=", "None", "\n", "\n", "\n", "\n", "if", "allEdgePred", "is", "not", "None", ":", "\n", "#We'll go through and calculate the loss (and scores) for each GCN output", "\n", "            ", "for", "graphIteration", ",", "(", "outputBoxes", ",", "edgePred", ",", "nodePred", ",", "edgeIndexes", ",", "predGroups", ")", "in", "enumerate", "(", "zip", "(", "allOutputBoxes", ",", "allEdgePred", ",", "allNodePred", ",", "allEdgeIndexes", ",", "allPredGroups", ")", ")", ":", "\n", "\n", "\n", "#This sets up all the edges for loss caclulation", "\n", "# we also reuse bbAlignment later", "\n", "                ", "predEdgeShouldBeTrue", ",", "predEdgeShouldBeFalse", ",", "bbAlignment", ",", "proposedInfoI", ",", "logIter", ",", "edgePredTypes", ",", "missedRels", "=", "self", ".", "simplerAlignEdgePred", "(", "\n", "targetBoxes", ",", "\n", "targetIndexToGroup", ",", "\n", "gtGroupAdj", ",", "\n", "outputBoxes", ",", "\n", "edgePred", ",", "\n", "edgeIndexes", ",", "\n", "predGroups", ",", "\n", "rel_prop_pred", "if", "(", "graphIteration", "==", "0", ")", "else", "None", ",", "\n", "self", ".", "thresh_edge", "[", "graphIteration", "]", ",", "\n", "self", ".", "thresh_rel", "[", "graphIteration", "]", ",", "\n", "self", ".", "thresh_overSeg", "[", "graphIteration", "]", ",", "\n", "self", ".", "thresh_group", "[", "graphIteration", "]", ",", "\n", "self", ".", "thresh_error", "[", "graphIteration", "]", "\n", ")", "\n", "\n", "\n", "allEdgePredTypes", ".", "append", "(", "edgePredTypes", ")", "\n", "allMissedRels", ".", "append", "(", "missedRels", ")", "\n", "allBBAlignment", ".", "append", "(", "bbAlignment", ")", "\n", "if", "graphIteration", "==", "0", ":", "\n", "                    ", "proposedInfo", "=", "proposedInfoI", "\n", "\n", "#loss for node class predictions", "\n", "", "if", "self", ".", "model_ref", ".", "predClass", "and", "nodePred", "is", "not", "None", ":", "\n", "                    ", "node_pred_use_index", "=", "[", "]", "\n", "node_gt_use_class_indexes", "=", "[", "]", "\n", "node_pred_use_index_sp", "=", "[", "]", "\n", "alignedClass_use_sp", "=", "[", "]", "\n", "\n", "node_conf_use_index", "=", "[", "]", "\n", "node_conf_gt", "=", "[", "]", "\n", "\n", "for", "i", ",", "predGroup", "in", "enumerate", "(", "predGroups", ")", ":", "\n", "                        ", "ts", "=", "[", "bbAlignment", "[", "pId", "]", "for", "pId", "in", "predGroup", "]", "\n", "classes", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "classesIndexes", "=", "{", "-", "2", ":", "-", "2", "}", "\n", "hits", "=", "misses", "=", "0", "\n", "for", "tId", "in", "ts", ":", "\n", "                            ", "if", "tId", ">=", "0", ":", "\n", "#this is unfortunate. It's here since we use multiple classes", "\n", "                                ", "clsRep", "=", "','", ".", "join", "(", "[", "str", "(", "int", "(", "targetBoxes", "[", "0", "]", "[", "tId", ",", "13", "+", "clasI", "]", ")", ")", "for", "clasI", "in", "range", "(", "len", "(", "self", ".", "classMap", ")", ")", "]", ")", "\n", "classes", "[", "clsRep", "]", "+=", "1", "\n", "classesIndexes", "[", "clsRep", "]", "=", "tId", "\n", "hits", "+=", "1", "\n", "", "else", ":", "\n", "                                ", "classes", "[", "-", "1", "]", "+=", "1", "\n", "classesIndexes", "[", "-", "1", "]", "=", "-", "1", "\n", "misses", "+=", "1", "\n", "", "", "targetClass", "=", "-", "2", "\n", "for", "cls", ",", "count", "in", "classes", ".", "items", "(", ")", ":", "\n", "                            ", "if", "count", "/", "len", "(", "ts", ")", ">", "0.8", ":", "\n", "                                ", "targetClass", "=", "cls", "\n", "break", "\n", "\n", "", "", "if", "type", "(", "targetClass", ")", "is", "str", ":", "\n", "                            ", "node_pred_use_index", ".", "append", "(", "i", ")", "\n", "node_gt_use_class_indexes", ".", "append", "(", "classesIndexes", "[", "targetClass", "]", ")", "\n", "#we don't use the error stuff on nodes", "\n", "", "elif", "targetClass", "==", "-", "1", "and", "self", ".", "final_class_bad_alignment", ":", "\n", "                            ", "node_pred_use_index_sp", ".", "append", "(", "i", ")", "\n", "error_class", "=", "torch", ".", "FloatTensor", "(", "1", ",", "len", "(", "self", ".", "classMap", ")", "+", "self", ".", "num_node_error_class", ")", ".", "zero_", "(", ")", "\n", "error_class", "[", "0", ",", "self", ".", "final_class_bad_alignment_index", "]", "=", "1", "\n", "alignedClass_use_sp", ".", "append", "(", "error_class", ")", "\n", "", "elif", "targetClass", "==", "-", "2", "and", "self", ".", "final_class_inpure_group", ":", "\n", "                            ", "node_pred_use_index_sp", ".", "append", "(", "i", ")", "\n", "error_class", "=", "torch", ".", "FloatTensor", "(", "1", ",", "len", "(", "self", ".", "classMap", ")", "+", "self", ".", "num_node_error_class", ")", ".", "zero_", "(", ")", "\n", "error_class", "[", "0", ",", "self", ".", "final_class_inpure_group_index", "]", "=", "1", "\n", "alignedClass_use_sp", ".", "append", "(", "error_class", ")", "\n", "\n", "", "if", "hits", "==", "0", ":", "\n", "                            ", "node_conf_use_index", ".", "append", "(", "i", ")", "\n", "node_conf_gt", ".", "append", "(", "0", ")", "\n", "", "elif", "misses", "==", "0", "or", "hits", "/", "misses", ">", "0.5", ":", "\n", "                            ", "node_conf_use_index", ".", "append", "(", "i", ")", "\n", "node_conf_gt", ".", "append", "(", "1", ")", "\n", "\n", "", "", "node_pred_use_index", "+=", "node_pred_use_index_sp", "\n", "\n", "if", "len", "(", "node_pred_use_index", ")", ">", "0", ":", "\n", "                        ", "nodePredClass_use", "=", "nodePred", "[", "node_pred_use_index", "]", "[", ":", ",", ":", ",", "self", ".", "model_ref", ".", "nodeIdxClass", ":", "self", ".", "model_ref", ".", "nodeIdxClassEnd", "]", "\n", "alignedClass_use", "=", "targetBoxes", "[", "0", "]", "[", "node_gt_use_class_indexes", ",", "13", ":", "13", "+", "len", "(", "self", ".", "classMap", ")", "]", "\n", "if", "self", ".", "num_node_error_class", ">", "0", ":", "\n", "                            ", "alignedClass_use", "=", "torch", ".", "cat", "(", "(", "alignedClass_use", ",", "torch", ".", "FloatTensor", "(", "alignedClass_use", ".", "size", "(", "0", ")", ",", "self", ".", "num_bb_error_class", ")", ".", "zero_", "(", ")", ".", "to", "(", "alignedClass_use", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "if", "len", "(", "alignedClass_use_sp", ")", ">", "0", ":", "\n", "                                ", "alignedClass_use_sp", "=", "torch", ".", "cat", "(", "alignedClass_use_sp", ",", "dim", "=", "0", ")", ".", "to", "(", "alignedClass_use", ".", "device", ")", "\n", "alignedClass_use", "=", "torch", ".", "cat", "(", "(", "alignedClass_use", ",", "alignedClass_use_sp", ")", ",", "dim", "=", "0", ")", "\n", "", "", "", "else", ":", "\n", "                        ", "nodePredClass_use", "=", "None", "\n", "alignedClass_use", "=", "None", "\n", "\n", "", "if", "len", "(", "node_conf_use_index", ")", ">", "0", ":", "\n", "                        ", "nodePredConf_use", "=", "nodePred", "[", "node_conf_use_index", "]", "[", ":", ",", ":", ",", "self", ".", "model_ref", ".", "nodeIdxConf", "]", "\n", "nodeGTConf_use", "=", "torch", ".", "FloatTensor", "(", "node_conf_gt", ")", ".", "to", "(", "nodePred", ".", "device", ")", "\n", "", "", "else", ":", "\n", "                    ", "nodePredClass_use", "=", "None", "\n", "alignedClass_use", "=", "None", "\n", "nodePredConf_use", "=", "None", "\n", "nodeGTConf_use", "=", "None", "\n", "\n", "", "relLoss", "=", "None", "\n", "#separating the loss into true and false portions is not only convienint, it balances the loss between true/false examples", "\n", "\n", "#compute True edge losses", "\n", "if", "predEdgeShouldBeTrue", "is", "not", "None", "and", "predEdgeShouldBeTrue", ".", "size", "(", "0", ")", ">", "0", "and", "predEdgeShouldBeTrue", ".", "size", "(", "1", ")", ">", "0", ":", "\n", "                    ", "ones", "=", "torch", ".", "ones_like", "(", "predEdgeShouldBeTrue", ")", ".", "to", "(", "image", ".", "device", ")", "\n", "relLoss", "=", "self", ".", "loss", "[", "'rel'", "]", "(", "predEdgeShouldBeTrue", ",", "ones", ")", "\n", "assert", "(", "not", "torch", ".", "isnan", "(", "relLoss", ")", ")", "\n", "debug_avg_relTrue", "=", "predEdgeShouldBeTrue", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                    ", "debug_avg_relTrue", "=", "0", "\n", "\n", "#compute False edge losses", "\n", "", "if", "predEdgeShouldBeFalse", "is", "not", "None", "and", "predEdgeShouldBeFalse", ".", "size", "(", "0", ")", ">", "0", "and", "predEdgeShouldBeFalse", ".", "size", "(", "1", ")", ">", "0", ":", "\n", "                    ", "zeros", "=", "torch", ".", "zeros_like", "(", "predEdgeShouldBeFalse", ")", ".", "to", "(", "image", ".", "device", ")", "\n", "relLossFalse", "=", "self", ".", "loss", "[", "'rel'", "]", "(", "predEdgeShouldBeFalse", ",", "zeros", ")", "\n", "assert", "(", "not", "torch", ".", "isnan", "(", "relLossFalse", ")", ")", "\n", "if", "relLoss", "is", "None", ":", "\n", "                        ", "relLoss", "=", "relLossFalse", "\n", "", "else", ":", "\n", "                        ", "relLoss", "+=", "relLossFalse", "\n", "", "debug_avg_relFalse", "=", "predEdgeShouldBeFalse", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                    ", "debug_avg_relFalse", "=", "0", "\n", "\n", "#combine", "\n", "", "if", "relLoss", "is", "not", "None", ":", "\n", "                    ", "losses", "[", "'relLoss'", "]", "+=", "relLoss", "\n", "\n", "", "if", "proposedInfoI", "is", "not", "None", ":", "\n", "#same thing for edge proposal", "\n", "                    ", "propPredPairingShouldBeTrue", ",", "propPredPairingShouldBeFalse", "=", "proposedInfoI", "[", "0", ":", "2", "]", "\n", "propRelLoss", "=", "None", "\n", "#seperating the loss into true and false portions is not only convienint, it balances the loss between true/false examples", "\n", "if", "propPredPairingShouldBeTrue", "is", "not", "None", "and", "propPredPairingShouldBeTrue", ".", "size", "(", "0", ")", ">", "0", ":", "\n", "                        ", "ones", "=", "torch", ".", "ones_like", "(", "propPredPairingShouldBeTrue", ")", ".", "to", "(", "image", ".", "device", ")", "\n", "propRelLoss", "=", "self", ".", "loss", "[", "'propRel'", "]", "(", "propPredPairingShouldBeTrue", ",", "ones", ")", "\n", "", "if", "propPredPairingShouldBeFalse", "is", "not", "None", "and", "propPredPairingShouldBeFalse", ".", "size", "(", "0", ")", ">", "0", ":", "\n", "                        ", "zeros", "=", "torch", ".", "zeros_like", "(", "propPredPairingShouldBeFalse", ")", ".", "to", "(", "image", ".", "device", ")", "\n", "propRelLossFalse", "=", "self", ".", "loss", "[", "'propRel'", "]", "(", "propPredPairingShouldBeFalse", ",", "zeros", ")", "\n", "if", "propRelLoss", "is", "None", ":", "\n", "                            ", "propRelLoss", "=", "propRelLossFalse", "\n", "", "else", ":", "\n", "                            ", "propRelLoss", "+=", "propRelLossFalse", "\n", "", "", "if", "propRelLoss", "is", "not", "None", ":", "\n", "                        ", "losses", "[", "'propRelLoss'", "]", "+=", "propRelLoss", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "if", "self", ".", "model_ref", ".", "predClass", "and", "nodePredClass_use", "is", "not", "None", "and", "nodePredClass_use", ".", "size", "(", "0", ")", ">", "0", ":", "\n", "#loss for classes", "\n", "                    ", "alignedClass_use", "=", "alignedClass_use", "[", ":", ",", "None", "]", "#introduce \"time\" dimension to broadcast", "\n", "class_loss_final", "=", "self", ".", "loss", "[", "'classFinal'", "]", "(", "nodePredClass_use", ",", "alignedClass_use", ")", "\n", "losses", "[", "'classFinalLoss'", "]", "+=", "class_loss_final", "\n", "\n", "\n", "", "if", "nodePredConf_use", "is", "not", "None", "and", "nodePredConf_use", ".", "size", "(", "0", ")", ">", "0", ":", "\n", "#loss for node confidence (not really used)", "\n", "                    ", "if", "len", "(", "nodeGTConf_use", ".", "size", "(", ")", ")", "<", "len", "(", "nodePredConf_use", ".", "size", "(", ")", ")", ":", "\n", "                        ", "nodeGTConf_use", "=", "nodeGTConf_use", "[", ":", ",", "None", "]", "#introduce \"time\" dimension to broadcast", "\n", "", "conf_loss_final", "=", "self", ".", "loss", "[", "'classFinal'", "]", "(", "nodePredConf_use", ",", "nodeGTConf_use", ")", "\n", "losses", "[", "'confFinalLoss'", "]", "+=", "conf_loss_final", "\n", "\n", "", "for", "name", ",", "stat", "in", "logIter", ".", "items", "(", ")", ":", "\n", "                    ", "log", "[", "'{}_{}'", ".", "format", "(", "name", ",", "graphIteration", ")", "]", "=", "stat", "\n", "\n", "", "if", "self", ".", "save_images_every", ">", "0", "and", "self", ".", "iteration", "%", "self", ".", "save_images_every", "==", "0", ":", "\n", "#print the images", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_images_dir", ",", "'{}_{}.png'", ".", "format", "(", "'b'", ",", "graphIteration", ")", ")", "\n", "\n", "draw_graph", "(", "\n", "outputBoxes", ",", "\n", "torch", ".", "sigmoid", "(", "nodePred", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "if", "nodePred", "is", "not", "None", "else", "None", ",", "\n", "torch", ".", "sigmoid", "(", "edgePred", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "if", "edgePred", "is", "not", "None", "else", "None", ",", "\n", "edgeIndexes", ",", "\n", "predGroups", ",", "\n", "image", ",", "\n", "edgePredTypes", ",", "\n", "missedRels", ",", "\n", "None", ",", "\n", "targetBoxes", ",", "\n", "path", ",", "\n", "useTextLines", "=", "False", ",", "\n", "targetGroups", "=", "instance", "[", "'gt_groups'", "]", ",", "\n", "targetPairs", "=", "instance", "[", "'gt_groups_adj'", "]", ")", "\n", "print", "(", "'saved {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "", "if", "'bb_stats'", "in", "get", ":", "\n", "\n", "                    ", "if", "targetBoxes", "is", "not", "None", ":", "\n", "                        ", "target_for_b", "=", "targetBoxes", "[", "0", "]", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "                        ", "target_for_b", "=", "torch", ".", "empty", "(", "0", ")", "\n", "", "if", "self", ".", "model_ref", ".", "rotation", ":", "\n", "                        ", "ap_5", ",", "prec_5", ",", "recall_5", "=", "AP_dist", "(", "target_for_b", ",", "outputBoxes", ",", "0.9", ",", "numClasses", ")", "\n", "", "else", ":", "\n", "                        ", "ap_5", ",", "prec_5", ",", "recall_5", ",", "allPrec", ",", "allRecall", "=", "AP_iou", "(", "target_for_b", ",", "outputBoxes", ",", "0.5", ",", "numClasses", ")", "\n", "", "prec_5", "=", "np", ".", "array", "(", "prec_5", ")", "\n", "recall_5", "=", "np", ".", "array", "(", "recall_5", ")", "\n", "log", "[", "'bb_AP_{}'", ".", "format", "(", "graphIteration", ")", "]", "=", "ap_5", "\n", "log", "[", "'bb_prec_{}'", ".", "format", "(", "graphIteration", ")", "]", "=", "prec_5", "\n", "log", "[", "'bb_recall_{}'", ".", "format", "(", "graphIteration", ")", "]", "=", "recall_5", "\n", "log", "[", "'bb_allPrec_{}'", ".", "format", "(", "graphIteration", ")", "]", "=", "allPrec", "\n", "log", "[", "'bb_allRecall_{}'", ".", "format", "(", "graphIteration", ")", "]", "=", "allRecall", "\n", "log", "[", "'bb_allFm_{}'", ".", "format", "(", "graphIteration", ")", "]", "=", "2", "*", "allPrec", "*", "allRecall", "/", "(", "allPrec", "+", "allRecall", ")", "if", "allPrec", "+", "allRecall", ">", "0", "else", "0", "\n", "\n", "#Fine tuning detector.", "\n", "", "", "", "if", "not", "self", ".", "model_ref", ".", "detector_frozen", ":", "\n", "            ", "if", "targetBoxes", "is", "not", "None", ":", "\n", "                ", "targSize", "=", "targetBoxes", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "targSize", "=", "0", "\n", "\n", "#calculate YOLO loss", "\n", "", "if", "'box'", "in", "self", ".", "loss", ":", "\n", "                ", "boxLoss", ",", "position_loss", ",", "conf_loss", ",", "class_loss", ",", "nn_loss", ",", "recall", ",", "precision", ",", "recall_noclass", ",", "precision_noclass", "=", "self", ".", "loss", "[", "'box'", "]", "(", "outputOffsets", ",", "targetBoxes", ",", "[", "targSize", "]", ",", "target_num_neighbors", ")", "\n", "losses", "[", "'boxLoss'", "]", "+=", "boxLoss", "\n", "log", "[", "'bb_position_loss'", "]", "=", "position_loss", "\n", "log", "[", "'bb_conf_loss'", "]", "=", "conf_loss", "\n", "log", "[", "'bb_class_loss'", "]", "=", "class_loss", "\n", "log", "[", "'bb_nn_loss'", "]", "=", "nn_loss", "\n", "", "elif", "'init_class'", "in", "self", ".", "loss", ":", "\n", "                ", "assert", "'word_bbs'", "in", "useGT", "\n", "init_class_pred", "=", "outputOffsets", "\n", "targetClasses", "=", "instance", "[", "'form_metadata'", "]", "[", "'word_classes'", "]", ".", "to", "(", "init_class_pred", ".", "device", ")", "\n", "losses", "[", "'init_classLoss'", "]", "=", "self", ".", "loss", "[", "'init_class'", "]", "(", "init_class_pred", ",", "targetClasses", ")", "\n", "\n", "#We'll use information from the final prediction before the final pruning", "\n", "", "", "if", "'DocStruct'", "in", "get", ":", "\n", "#Compute hit@1", "\n", "            ", "predToGTGroup", "=", "{", "}", "\n", "for", "node", "in", "range", "(", "len", "(", "predGroups", ")", ")", ":", "\n", "                ", "predTargGroup", "=", "[", "bbAlignment", "[", "bb", "]", "for", "bb", "in", "predGroups", "[", "node", "]", "if", "bbAlignment", "[", "bb", "]", ">=", "0", "]", "\n", "if", "len", "(", "predTargGroup", ")", ">", "0", ":", "\n", "                    ", "gtGroup", "=", "getGTGroup", "(", "predTargGroup", ",", "targetIndexToGroup", ")", "\n", "predToGTGroup", "[", "node", "]", "=", "gtGroup", "\n", "\n", "", "", "classMap", "=", "self", ".", "scoreClassMap", "\n", "num_class", "=", "len", "(", "self", ".", "scoreClassMap", ")", "\n", "minI", "=", "min", "(", "classMap", ".", "values", "(", ")", ")", "\n", "classMap", "=", "{", "v", "-", "minI", ":", "k", "for", "k", ",", "v", "in", "classMap", ".", "items", "(", ")", "}", "\n", "classIs", "=", "nodePred", "[", ":", ",", "-", "1", ",", "1", ":", "1", "+", "num_class", "]", ".", "argmax", "(", "dim", "=", "1", ")", ".", "tolist", "(", ")", "\n", "gt_classIs", "=", "targetBoxes", "[", "0", ",", ":", ",", "13", ":", "13", "+", "num_class", "]", ".", "argmax", "(", "dim", "=", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "\n", "sum_hit", "=", "0", "\n", "gtGroupToPred", "=", "defaultdict", "(", "list", ")", "#list as we could have a gt group split between two pred groups", "\n", "for", "pG", ",", "gtG", "in", "predToGTGroup", ".", "items", "(", ")", ":", "\n", "                ", "gtGroupToPred", "[", "gtG", "]", ".", "append", "(", "pG", ")", "\n", "", "for", "gg0", ",", "gg1", "in", "gtGroupAdj", ":", "\n", "                ", "gtBB0", "=", "gtGroups", "[", "gg0", "]", "[", "0", "]", "\n", "gtBB1", "=", "gtGroups", "[", "gg1", "]", "[", "0", "]", "\n", "class0", "=", "classMap", "[", "gt_classIs", "[", "gtBB0", "]", "]", "\n", "class1", "=", "classMap", "[", "gt_classIs", "[", "gtBB1", "]", "]", "\n", "if", "(", "class0", "==", "'header'", "and", "class1", "==", "'question'", ")", "or", "(", "class0", "==", "'question'", "and", "class1", "==", "'answer'", ")", ":", "\n", "                    ", "parent", "=", "gg0", "\n", "child", "=", "gg1", "\n", "parent_groups", "=", "gtGroupToPred", "[", "parent", "]", "\n", "child_groups", "=", "gtGroupToPred", "[", "child", "]", "\n", "\n", "if", "maxRelScoreIsHit", "(", "child_groups", ",", "parent_groups", ",", "edgeIndexes", ",", "edgePred", ")", ":", "\n", "                        ", "sum_hit", "+=", "1", "\n", "", "", "elif", "(", "class1", "==", "'header'", "and", "class0", "==", "'question'", ")", "or", "(", "class1", "==", "'question'", "and", "class0", "==", "'answer'", ")", ":", "\n", "                    ", "parent", "=", "gg1", "\n", "child", "=", "gg0", "\n", "parent_groups", "=", "gtGroupToPred", "[", "parent", "]", "\n", "child_groups", "=", "gtGroupToPred", "[", "child", "]", "\n", "\n", "if", "maxRelScoreIsHit", "(", "child_groups", ",", "parent_groups", ",", "edgeIndexes", ",", "edgePred", ")", ":", "\n", "                        ", "sum_hit", "+=", "1", "\n", "", "", "else", ":", "#labeling annomally, check both", "\n", "                    ", "parent_groups", "=", "gtGroupToPred", "[", "gg0", "]", "\n", "child_groups", "=", "gtGroupToPred", "[", "gg1", "]", "\n", "if", "maxRelScoreIsHit", "(", "child_groups", ",", "parent_groups", ",", "edgeIndexes", ",", "edgePred", ")", ":", "\n", "                        ", "sum_hit", "+=", "0.5", "\n", "", "parent_groups", "=", "gtGroupToPred", "[", "gg1", "]", "\n", "child_groups", "=", "gtGroupToPred", "[", "gg0", "]", "\n", "if", "maxRelScoreIsHit", "(", "child_groups", ",", "parent_groups", ",", "edgeIndexes", ",", "edgePred", ")", ":", "\n", "                        ", "sum_hit", "+=", "0.5", "\n", "", "", "", "if", "len", "(", "gtGroupAdj", ")", ">", "0", ":", "\n", "                ", "log", "[", "'DocStruct redid hit@1'", "]", "=", "sum_hit", "/", "len", "(", "gtGroupAdj", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "gt_groups_adj", "=", "instance", "[", "'gt_groups_adj'", "]", "\n", "if", "final", "is", "not", "None", ":", "\n", "#We now to the final scoring on the final graph.", "\n", "            ", "if", "self", ".", "remove_same_pairs", ":", "\n", "                ", "final", "=", "self", ".", "removeSamePairs", "(", "final", ")", "#was used to eval against old model", "\n", "", "finalLog", ",", "finalRelTypes", ",", "finalMissedRels", ",", "finalMissedGroups", "=", "self", ".", "finalEval", "(", "targetBoxes", ".", "cpu", "(", ")", "if", "targetBoxes", "is", "not", "None", "else", "None", ",", "gtGroups", ",", "gt_groups_adj", ",", "targetIndexToGroup", ",", "*", "final", ",", "bb_iou_thresh", "=", "self", ".", "final_bb_iou_thresh", ")", "\n", "log", ".", "update", "(", "finalLog", ")", "\n", "\n", "if", "self", ".", "save_images_every", ">", "0", "and", "self", ".", "iteration", "%", "self", ".", "save_images_every", "==", "0", ":", "\n", "#also print the final graph image", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_images_dir", ",", "'{}_{}.png'", ".", "format", "(", "'b'", ",", "'final'", ")", ")", "\n", "finalOutputBoxes", ",", "finalPredGroups", ",", "finalEdgeIndexes", ",", "finalBBTrans", "=", "final", "\n", "draw_graph", "(", "\n", "finalOutputBoxes", ",", "\n", "None", ",", "\n", "None", ",", "\n", "finalEdgeIndexes", ",", "\n", "finalPredGroups", ",", "\n", "image", ",", "\n", "finalRelTypes", ",", "\n", "finalMissedRels", ",", "\n", "finalMissedGroups", ",", "\n", "targetBoxes", ",", "\n", "path", ",", "\n", "bbTrans", "=", "finalBBTrans", ",", "\n", "useTextLines", "=", "False", ",", "\n", "targetGroups", "=", "instance", "[", "'gt_groups'", "]", ",", "\n", "targetPairs", "=", "instance", "[", "'gt_groups_adj'", "]", ")", "\n", "", "finalOutputBoxes", ",", "finalPredGroups", ",", "finalEdgeIndexes", ",", "finalBBTrans", "=", "final", "\n", "if", "self", ".", "do_characterization", ":", "\n", "                ", "self", ".", "characterization_eval", "(", "\n", "allOutputBoxes", ",", "\n", "allEdgePred", ",", "\n", "allNodePred", ",", "\n", "allEdgeIndexes", ",", "\n", "allPredGroups", ",", "\n", "finalOutputBoxes", ",", "\n", "finalEdgeIndexes", ",", "\n", "finalPredGroups", ",", "\n", "targetBoxes", ",", "\n", "targetIndexToGroup", ",", "\n", "gtGroups", ",", "\n", "gtGroupAdj", ")", "\n", "\n", "", "", "if", "proposedInfo", "is", "not", "None", ":", "\n", "            ", "propRecall", ",", "propPrec", "=", "proposedInfo", "[", "2", ":", "4", "]", "\n", "log", "[", "'prop_rel_recall'", "]", "=", "propRecall", "\n", "log", "[", "'prop_rel_prec'", "]", "=", "propPrec", "\n", "", "if", "mergeProposedInfo", "is", "not", "None", ":", "\n", "            ", "propRecall", ",", "propPrec", "=", "mergeProposedInfo", "[", "2", ":", "4", "]", "\n", "log", "[", "'prop_merge_recall'", "]", "=", "propRecall", "\n", "log", "[", "'prop_merge_prec'", "]", "=", "propPrec", "\n", "\n", "\n", "\n", "\n", "#collect extra information to return. Used in various eval and debugging situations", "\n", "", "got", "=", "{", "}", "\n", "for", "name", "in", "get", ":", "\n", "            ", "if", "name", "==", "'edgePred'", ":", "\n", "                ", "got", "[", "'edgePred'", "]", "=", "edgePred", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "elif", "name", "==", "'outputBoxes'", ":", "\n", "                ", "if", "useGT", ":", "\n", "                    ", "got", "[", "'outputBoxes'", "]", "=", "targetBoxes", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "                    ", "got", "[", "'outputBoxes'", "]", "=", "outputBoxes", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "", "elif", "name", "==", "'outputOffsets'", ":", "\n", "                ", "got", "[", "'outputOffsets'", "]", "=", "outputOffsets", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "elif", "name", "==", "'edgeIndexes'", ":", "\n", "                ", "got", "[", "'edgeIndexes'", "]", "=", "edgeIndexes", "\n", "", "elif", "name", "==", "'nodePred'", ":", "\n", "                 ", "got", "[", "'nodePred'", "]", "=", "nodePred", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "elif", "name", "==", "'allNodePred'", ":", "\n", "                 ", "got", "[", "name", "]", "=", "[", "n", ".", "detach", "(", ")", ".", "cpu", "(", ")", "if", "n", "is", "not", "None", "else", "None", "for", "n", "in", "allNodePred", "]", "if", "allNodePred", "is", "not", "None", "else", "None", "\n", "", "elif", "name", "==", "'allEdgePred'", ":", "\n", "                 ", "got", "[", "name", "]", "=", "[", "n", ".", "detach", "(", ")", ".", "cpu", "(", ")", "if", "n", "is", "not", "None", "else", "None", "for", "n", "in", "allEdgePred", "]", "if", "allEdgePred", "is", "not", "None", "else", "None", "\n", "", "elif", "name", "==", "'allEdgeIndexes'", ":", "\n", "                 ", "got", "[", "name", "]", "=", "allEdgeIndexes", "\n", "", "elif", "name", "==", "'allPredGroups'", ":", "\n", "                 ", "got", "[", "name", "]", "=", "allPredGroups", "\n", "", "elif", "name", "==", "'allOutputBoxes'", ":", "\n", "                 ", "got", "[", "name", "]", "=", "allOutputBoxes", "\n", "", "elif", "name", "==", "'allEdgePredTypes'", ":", "\n", "                 ", "got", "[", "name", "]", "=", "allEdgePredTypes", "\n", "", "elif", "name", "==", "'allMissedRels'", ":", "\n", "                 ", "got", "[", "name", "]", "=", "allMissedRels", "\n", "", "elif", "name", "==", "'allBBAlignment'", ":", "\n", "                 ", "got", "[", "name", "]", "=", "allBBAlignment", "\n", "", "elif", "name", "==", "'final'", ":", "\n", "                 ", "got", "[", "name", "]", "=", "final", "\n", "", "elif", "name", "==", "'final_edgePredTypes'", ":", "\n", "                 ", "got", "[", "name", "]", "=", "finalRelTypes", "\n", "", "elif", "name", "==", "'final_missedRels'", ":", "\n", "                 ", "got", "[", "name", "]", "=", "finalMissedRels", "\n", "got", "[", "'final_missedGroups'", "]", "=", "finalMissedGroups", "\n", "", "elif", "name", "==", "'DocStruct'", ":", "\n", "                ", "if", "'DocStruct redid hit@1'", "in", "log", ":", "\n", "                    ", "got", "[", "name", "]", "=", "log", "[", "'DocStruct redid hit@1'", "]", "\n", "", "", "elif", "name", "!=", "'bb_stats'", "and", "name", "!=", "'nn_acc'", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Cannot get [{}], unknown'", ".", "format", "(", "name", ")", ")", "\n", "", "", "return", "losses", ",", "log", ",", "got", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.removeSamePairs": [[1324, 1339], ["len", "outputBoxes[].argmax().item", "outputBoxes[].argmax().item", "len", "len", "new_pairs.append", "outputBoxes[].argmax", "outputBoxes[].argmax"], "methods", ["None"], ["", "def", "removeSamePairs", "(", "self", ",", "final", ")", ":", "\n", "        ", "outputBoxes", ",", "predGroups", ",", "predPairs", ",", "predTrans", "=", "final", "\n", "new_pairs", "=", "[", "]", "\n", "for", "g0", ",", "g1", "in", "predPairs", ":", "\n", "            ", "assert", "len", "(", "predGroups", "[", "g0", "]", ")", "==", "1", "\n", "assert", "len", "(", "predGroups", "[", "g1", "]", ")", "==", "1", "\n", "#assert 'blank' not in self.classMap", "\n", "\n", "num_classes", "=", "len", "(", "self", ".", "scoreClassMap", ")", "\n", "class0", "=", "outputBoxes", "[", "predGroups", "[", "g0", "]", "[", "0", "]", ",", "6", ":", "6", "+", "num_classes", "]", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "class1", "=", "outputBoxes", "[", "predGroups", "[", "g1", "]", "[", "0", "]", ",", "6", ":", "6", "+", "num_classes", "]", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "class0", "!=", "class1", ":", "\n", "                ", "new_pairs", ".", "append", "(", "(", "g0", ",", "g1", ")", ")", "\n", "", "", "return", "outputBoxes", ",", "predGroups", ",", "new_pairs", ",", "predTrans", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.finalEval": [[1341, 1649], ["len", "numpy.array", "numpy.array", "predGroupsT.items", "len", "len", "list", "numpy.mean", "numpy.mean", "set", "set", "set", "enumerate", "len", "len", "set.difference", "targetBoxes.cpu.cpu.cpu", "targetBoxes[].cpu", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "utils.yolo_tools.AP_dist", "utils.yolo_tools.AP_iou", "range", "len", "len", "utils.group_pairing.getGTGroup", "len", "len", "groupCompleteness.values", "len", "len", "len", "len", "len", "set", "NotImplementedError", "newGetTargIndexForPreds_dist", "utils.yolo_tools.newGetTargIndexForPreds_iou", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "len", "range", "enumerate", "sum", "len", "len", "len", "list.append", "print", "print", "print", "print", "len", "len", "len", "len", "len", "len", "range", "gtNotBlanks.all", "enumerate", "set", "enumerate", "list", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "o.item", "enumerate", "len", "targIndex[].item", "len", "sum", "len", "sum", "len", "groupPurity.items", "min", "max", "set.add", "rel_types.append", "min", "max", "set.add", "len", "oi.item", "targetIndexToGroup.update", "range", "len", "enumerate", "len", "zip", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "rel_types.append", "len", "len", "set.add", "enumerate", "len", "len", "gtGroups.append", "gtOldToNewGroups.items", "len", "len", "newGroups.append", "newToOldGroups.append", "enumerate", "enumerate", "len", "len", "range", "len", "targIndex[].item", "min", "max", "min", "max", "len", "min", "max", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.AP_dist", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.AP_iou", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.group_pairing.getGTGroup", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.newGetTargIndexForPreds_iou"], ["", "def", "finalEval", "(", "self", ",", "targetBoxes", ",", "gtGroups", ",", "gt_groups_adj", ",", "targetIndexToGroup", ",", "outputBoxes", ",", "predGroups", ",", "predPairs", ",", "predTrans", "=", "None", ",", "bb_iou_thresh", "=", "0.5", ")", ":", "\n", "        ", "log", "=", "{", "}", "\n", "numClasses", "=", "len", "(", "self", ".", "scoreClassMap", ")", "\n", "\n", "#Remove blanks", "\n", "#  I at onepoint had the model predicint blank BBs, but it didn't help like we thought it should", "\n", "if", "'blank'", "in", "self", ".", "classMap", ":", "\n", "            ", "blank_index", "=", "self", ".", "classMap", "[", "'blank'", "]", "\n", "if", "targetBoxes", "is", "not", "None", ":", "\n", "                ", "gtNotBlanks", "=", "targetBoxes", "[", "0", ",", ":", ",", "blank_index", "]", "<", "0.5", "\n", "if", "not", "gtNotBlanks", ".", "all", "(", ")", ":", "\n", "#rewrite all the GT to not include blanks", "\n", "                    ", "targetBoxes", "=", "targetBoxes", "[", ":", ",", "gtNotBlanks", "]", "\n", "gtOldToNewBBs", "=", "{", "oi", ".", "item", "(", ")", ":", "ni", "for", "ni", ",", "oi", "in", "enumerate", "(", "torch", ".", "nonzero", "(", "gtNotBlanks", ")", "[", ":", ",", "0", "]", ")", "}", "\n", "newGTGroups", "=", "[", "[", "gtOldToNewBBs", "[", "bb", "]", "for", "bb", "in", "group", "if", "bb", "in", "gtOldToNewBBs", "]", "for", "group", "in", "gtGroups", "]", "\n", "gtOldToNewGroups", "=", "{", "}", "\n", "gtGroups", "=", "[", "]", "\n", "for", "i", ",", "group", "in", "enumerate", "(", "newGTGroups", ")", ":", "\n", "                        ", "if", "len", "(", "group", ")", ">", "0", ":", "\n", "                            ", "gtOldToNewGroups", "[", "i", "]", "=", "len", "(", "gtGroups", ")", "\n", "gtGroups", ".", "append", "(", "group", ")", "\n", "", "", "newToOldGTGroups", "=", "{", "n", ":", "o", "for", "o", ",", "n", "in", "gtOldToNewGroups", ".", "items", "(", ")", "}", "\n", "gt_groups_adj", "=", "set", "(", "(", "gtOldToNewGroups", "[", "g1", "]", ",", "gtOldToNewGroups", "[", "g2", "]", ")", "for", "g1", ",", "g2", "in", "gt_groups_adj", "if", "g1", "in", "gtOldToNewGroups", "and", "g2", "in", "gtOldToNewGroups", ")", "\n", "targetIndexToGroup", "=", "{", "}", "\n", "for", "groupId", ",", "bbIds", "in", "enumerate", "(", "gtGroups", ")", ":", "\n", "                        ", "targetIndexToGroup", ".", "update", "(", "{", "bbId", ":", "groupId", "for", "bbId", "in", "bbIds", "}", ")", "\n", "", "", "else", ":", "\n", "                    ", "newToOldGTGroups", "=", "list", "(", "range", "(", "len", "(", "gtGroups", ")", ")", ")", "\n", "\n", "", "", "if", "outputBoxes", "is", "not", "None", "and", "len", "(", "outputBoxes", ")", ">", "0", ":", "\n", "                ", "outputBoxesNotBlanks", "=", "outputBoxes", "[", ":", ",", "1", "+", "blank_index", "-", "8", "]", "<", "0.5", "\n", "outputBoxes", "=", "outputBoxes", "[", "outputBoxesNotBlanks", "]", "\n", "newToOldOutputBoxes", "=", "torch", ".", "arange", "(", "0", ",", "len", "(", "outputBoxesNotBlanks", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "[", "outputBoxesNotBlanks", "]", "\n", "oldToNewOutputBoxes", "=", "{", "o", ".", "item", "(", ")", ":", "n", "for", "n", ",", "o", "in", "enumerate", "(", "newToOldOutputBoxes", ")", "}", "\n", "if", "predGroups", "is", "not", "None", ":", "\n", "                    ", "predGroups", "=", "[", "[", "oldToNewOutputBoxes", "[", "bId", "]", "for", "bId", "in", "group", "if", "bId", "in", "oldToNewOutputBoxes", "]", "for", "group", "in", "predGroups", "]", "\n", "newToOldGroups", "=", "[", "]", "\n", "newGroups", "=", "[", "]", "\n", "for", "gId", ",", "group", "in", "enumerate", "(", "predGroups", ")", ":", "\n", "                        ", "if", "len", "(", "group", ")", ">", "0", ":", "\n", "                            ", "newGroups", ".", "append", "(", "group", ")", "\n", "newToOldGroups", ".", "append", "(", "gId", ")", "\n", "", "", "predGroups", "=", "newGroups", "\n", "oldToNewGroups", "=", "{", "o", ":", "n", "for", "n", ",", "o", "in", "enumerate", "(", "newToOldGroups", ")", "}", "\n", "num_pred_pairs_with_blanks", "=", "len", "(", "predPairs", ")", "\n", "predPairs", "=", "[", "(", "i", ",", "(", "oldToNewGroups", "[", "g1", "]", ",", "oldToNewGroups", "[", "g2", "]", ")", ")", "for", "i", ",", "(", "g1", ",", "g2", ")", "in", "enumerate", "(", "predPairs", ")", "if", "g1", "in", "oldToNewGroups", "and", "g2", "in", "oldToNewGroups", "]", "\n", "if", "len", "(", "predPairs", ")", ">", "0", ":", "\n", "                        ", "newToOldPredPairs", ",", "predPairs", "=", "zip", "(", "*", "predPairs", ")", "\n", "", "else", ":", "\n", "                        ", "newToOldPredPairs", "=", "[", "]", "\n", "", "for", "a", ",", "b", "in", "predPairs", ":", "\n", "                        ", "assert", "(", "a", "<", "len", "(", "predGroups", ")", ")", "\n", "assert", "(", "b", "<", "len", "(", "predGroups", ")", ")", "\n", "", "", "if", "predTrans", "is", "not", "None", ":", "\n", "                    ", "predTrans", "=", "[", "predTrans", "[", "newToOldOutputBoxes", "[", "n", "]", "]", "for", "n", "in", "range", "(", "len", "(", "newToOldOutputBoxes", ")", ")", "]", "\n", "\n", "", "", "", "if", "targetBoxes", "is", "not", "None", ":", "\n", "            ", "targetBoxes", "=", "targetBoxes", ".", "cpu", "(", ")", "\n", "if", "self", ".", "model_ref", ".", "rotation", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'newGetTargIndexForPreds_dist should be modified to reflect the behavoir or newGetTargIndexForPreds_textLines'", ")", "\n", "targIndex", ",", "fullHit", ",", "overSegmented", "=", "newGetTargIndexForPreds_dist", "(", "targetBoxes", "[", "0", "]", ",", "outputBoxes", ",", "1.1", ",", "numClasses", ",", "hard_thresh", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "targIndex", "=", "newGetTargIndexForPreds_iou", "(", "targetBoxes", "[", "0", "]", ",", "outputBoxes", ",", "bb_iou_thresh", ",", "numClasses", ",", "False", ")", "\n", "\n", "", "", "elif", "outputBoxes", "is", "not", "None", ":", "\n", "            ", "targIndex", "=", "torch", ".", "LongTensor", "(", "len", "(", "outputBoxes", ")", ")", ".", "fill_", "(", "-", "1", ")", "\n", "\n", "\n", "\n", "", "if", "targetBoxes", "is", "not", "None", ":", "\n", "            ", "target_for_b", "=", "targetBoxes", "[", "0", "]", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "            ", "target_for_b", "=", "torch", ".", "empty", "(", "0", ")", "\n", "\n", "#Detection scores", "\n", "", "if", "self", ".", "model_ref", ".", "rotation", ":", "\n", "            ", "ap_5", ",", "prec_5", ",", "recall_5", ",", "allPrec", ",", "allRecall", "=", "AP_dist", "(", "target_for_b", ",", "outputBoxes", ",", "0.9", ",", "numClasses", ")", "\n", "", "else", ":", "\n", "            ", "ap_5", ",", "prec_5", ",", "recall_5", ",", "allPrec", ",", "allRecall", "=", "AP_iou", "(", "target_for_b", ",", "outputBoxes", ",", "bb_iou_thresh", ",", "numClasses", ")", "\n", "", "prec_5", "=", "np", ".", "array", "(", "prec_5", ")", "\n", "recall_5", "=", "np", ".", "array", "(", "recall_5", ")", "\n", "log", "[", "'final_bb_AP'", "]", "=", "ap_5", "\n", "log", "[", "'final_bb_prec'", "]", "=", "prec_5", "\n", "log", "[", "'final_bb_recall'", "]", "=", "recall_5", "\n", "log", "[", "'final_bb_allPrec'", "]", "=", "allPrec", "\n", "log", "[", "'final_bb_allRecall'", "]", "=", "allRecall", "\n", "log", "[", "'final_bb_allFm'", "]", "=", "2", "*", "allPrec", "*", "allRecall", "/", "(", "allPrec", "+", "allRecall", ")", "if", "allPrec", "+", "allRecall", ">", "0", "else", "0", "\n", "\n", "\n", "predGroupsT", "=", "{", "}", "\n", "if", "predGroups", "is", "not", "None", "and", "targIndex", "is", "not", "None", ":", "\n", "            ", "for", "node", "in", "range", "(", "len", "(", "predGroups", ")", ")", ":", "\n", "                ", "predGroupsT", "[", "node", "]", "=", "[", "targIndex", "[", "bb", "]", ".", "item", "(", ")", "for", "bb", "in", "predGroups", "[", "node", "]", "if", "targIndex", "[", "bb", "]", ".", "item", "(", ")", ">=", "0", "]", "\n", "", "", "elif", "predGroups", "is", "not", "None", ":", "\n", "            ", "for", "node", "in", "range", "(", "len", "(", "predGroups", ")", ")", ":", "\n", "                ", "predGroupsT", "[", "node", "]", "=", "[", "]", "\n", "\n", "\n", "", "", "entity_detection_TP", "=", "0", "\n", "BROS_head_to_group", "=", "{", "group", "[", "0", "]", ":", "i", "for", "i", ",", "group", "in", "enumerate", "(", "gtGroups", ")", "}", "\n", "\n", "\n", "#while in the loss computation a node needed to be only mostly \"pure\"", "\n", "# here, it must contian all and only the BBs of the GT group (purity==1)", "\n", "gtGroupHit", "=", "[", "False", "]", "*", "len", "(", "gtGroups", ")", "\n", "gtGroupHit_pure", "=", "[", "False", "]", "*", "len", "(", "gtGroups", ")", "\n", "groupCompleteness", "=", "{", "}", "\n", "groupPurity", "=", "{", "}", "\n", "predToGTGroup", "=", "{", "}", "\n", "predToGTGroup_BROS", "=", "{", "}", "\n", "offId", "=", "-", "1", "\n", "for", "node", ",", "predGroupT", "in", "predGroupsT", ".", "items", "(", ")", ":", "\n", "            ", "gtGroupId", "=", "getGTGroup", "(", "predGroupT", ",", "targetIndexToGroup", ")", "\n", "predToGTGroup", "[", "node", "]", "=", "gtGroupId", "\n", "if", "gtGroupId", "<", "0", ":", "\n", "                ", "purity", "=", "0", "\n", "gtGroupId", "=", "offId", "\n", "offId", "-=", "1", "\n", "", "else", ":", "\n", "                ", "if", "gtGroupHit", "[", "gtGroupId", "]", ":", "\n", "                    ", "purity", "=", "sum", "(", "[", "tId", "in", "gtGroups", "[", "gtGroupId", "]", "for", "tId", "in", "predGroupT", "]", ")", "\n", "purity", "/=", "len", "(", "predGroups", "[", "node", "]", ")", "\n", "if", "purity", "<", "groupPurity", "[", "gtGroupId", "]", ":", "\n", "                        ", "gtGroupId", "=", "offId", "\n", "offId", "-=", "1", "\n", "purity", "=", "0", "\n", "", "else", ":", "\n", "                        ", "groupPurity", "[", "offId", "]", "=", "0", "\n", "offId", "-=", "1", "\n", "", "", "else", ":", "\n", "                    ", "purity", "=", "sum", "(", "[", "tId", "in", "gtGroups", "[", "gtGroupId", "]", "for", "tId", "in", "predGroupT", "]", ")", "\n", "purity", "/=", "len", "(", "predGroups", "[", "node", "]", ")", "\n", "gtGroupHit", "[", "gtGroupId", "]", "=", "True", "\n", "", "", "groupPurity", "[", "gtGroupId", "]", "=", "purity", "\n", "\n", "if", "gtGroupId", ">=", "0", ":", "\n", "                ", "completeness", "=", "sum", "(", "[", "gtId", "in", "predGroupT", "for", "gtId", "in", "gtGroups", "[", "gtGroupId", "]", "]", ")", "\n", "completeness", "/=", "len", "(", "gtGroups", "[", "gtGroupId", "]", ")", "\n", "groupCompleteness", "[", "node", "]", "=", "completeness", "\n", "\n", "if", "completeness", "==", "1", "and", "purity", "==", "1", ":", "\n", "                    ", "entity_detection_TP", "+=", "1", "\n", "gtGroupHit_pure", "[", "gtGroupId", "]", "=", "True", "\n", "\n", "#FOR BROS EVAL", "\n", "", "", "hit", "=", "False", "\n", "for", "predT", "in", "predGroupT", ":", "\n", "                ", "if", "predT", "in", "BROS_head_to_group", ":", "\n", "                    ", "if", "node", "not", "in", "predToGTGroup_BROS", ":", "\n", "                        ", "predToGTGroup_BROS", "[", "node", "]", "=", "BROS_head_to_group", "[", "predT", "]", "\n", "hit", "=", "True", "\n", "", "else", ":", "\n", "                        ", "predToGTGroup_BROS", "[", "node", "]", "=", "-", "1", "\n", "hit", "=", "False", "\n", "break", "\n", "", "", "", "if", "not", "hit", ":", "\n", "                ", "predToGTGroup_BROS", "[", "node", "]", "=", "-", "1", "\n", "\n", "", "", "log", "[", "'final_group_XX_TP'", "]", "=", "entity_detection_TP", "\n", "log", "[", "'final_group_XX_gtCount'", "]", "=", "len", "(", "gtGroups", ")", "\n", "log", "[", "'final_group_XX_predCount'", "]", "=", "len", "(", "predGroupsT", ")", "\n", "\n", "if", "len", "(", "gtGroups", ")", ">", "0", ":", "\n", "            ", "log", "[", "'final_group_ED_recall'", "]", "=", "entity_detection_TP", "/", "len", "(", "gtGroups", ")", "\n", "", "else", ":", "\n", "            ", "log", "[", "'final_group_ED_recall'", "]", "=", "1", "\n", "", "if", "len", "(", "predGroupsT", ")", ">", "0", ":", "\n", "            ", "log", "[", "'final_group_ED_precision'", "]", "=", "entity_detection_TP", "/", "len", "(", "predGroupsT", ")", "\n", "", "else", ":", "\n", "            ", "log", "[", "'final_group_ED_precision'", "]", "=", "1", "\n", "", "if", "log", "[", "'final_group_ED_recall'", "]", "+", "log", "[", "'final_group_ED_precision'", "]", ">", "0", ":", "\n", "            ", "log", "[", "'final_group_ED_F1'", "]", "=", "2", "*", "log", "[", "'final_group_ED_precision'", "]", "*", "log", "[", "'final_group_ED_recall'", "]", "/", "(", "log", "[", "'final_group_ED_recall'", "]", "+", "log", "[", "'final_group_ED_precision'", "]", ")", "\n", "", "else", ":", "\n", "            ", "log", "[", "'final_group_ED_F1'", "]", "=", "0", "\n", "\n", "", "groupCompleteness_list", "=", "list", "(", "groupCompleteness", ".", "values", "(", ")", ")", "\n", "for", "hit", "in", "gtGroupHit", ":", "\n", "            ", "if", "not", "hit", ":", "\n", "                ", "groupCompleteness_list", ".", "append", "(", "0", ")", "\n", "\n", "\n", "", "", "log", "[", "'final_groupCompleteness'", "]", "=", "np", ".", "mean", "(", "groupCompleteness_list", ")", "\n", "log", "[", "'final_groupPurity'", "]", "=", "np", ".", "mean", "(", "[", "v", "for", "k", ",", "v", "in", "groupPurity", ".", "items", "(", ")", "]", ")", "\n", "\n", "\n", "\n", "gtRelHit", "=", "set", "(", ")", "\n", "gtRelHit_BROS", "=", "set", "(", ")", "\n", "gtRelHit_strict", "=", "set", "(", ")", "\n", "relPrec", "=", "0", "\n", "relPrec_BROS", "=", "0", "\n", "relPrec_strict", "=", "0", "\n", "if", "predPairs", "is", "None", ":", "\n", "            ", "predPairs", "=", "[", "]", "\n", "", "if", "'blank'", "in", "self", ".", "classMap", "and", "predGroups", "is", "not", "None", ":", "\n", "            ", "rel_types", "=", "[", "'UP'", "]", "*", "num_pred_pairs_with_blanks", "\n", "", "else", ":", "\n", "            ", "rel_types", "=", "[", "]", "\n", "", "for", "pi", ",", "(", "n0", ",", "n1", ")", "in", "enumerate", "(", "predPairs", ")", ":", "\n", "            ", "BROS_gtG0", "=", "predToGTGroup_BROS", "[", "n0", "]", "\n", "BROS_gtG1", "=", "predToGTGroup_BROS", "[", "n1", "]", "\n", "hit", "=", "False", "\n", "if", "BROS_gtG0", ">=", "0", "and", "BROS_gtG1", ">=", "0", ":", "\n", "                ", "pair_id", "=", "(", "min", "(", "BROS_gtG0", ",", "BROS_gtG1", ")", ",", "max", "(", "BROS_gtG0", ",", "BROS_gtG1", ")", ")", "\n", "if", "pair_id", "in", "gt_groups_adj", ":", "\n", "                    ", "hit", "=", "True", "\n", "relPrec_BROS", "+=", "1", "\n", "gtRelHit_BROS", ".", "add", "(", "(", "min", "(", "BROS_gtG0", ",", "BROS_gtG1", ")", ",", "max", "(", "BROS_gtG0", ",", "BROS_gtG1", ")", ")", ")", "\n", "if", "'blank'", "in", "self", ".", "classMap", ":", "\n", "                        ", "old_pi", "=", "newToOldPredPairs", "[", "pi", "]", "\n", "rel_types", "[", "old_pi", "]", "=", "'TP'", "\n", "", "else", ":", "\n", "                        ", "rel_types", ".", "append", "(", "'TP'", ")", "\n", "", "", "", "if", "not", "hit", ":", "\n", "                ", "if", "'blank'", "in", "self", ".", "classMap", ":", "\n", "                    ", "old_pi", "=", "newToOldPredPairs", "[", "pi", "]", "\n", "rel_types", "[", "old_pi", "]", "=", "'FP'", "\n", "", "else", ":", "\n", "                    ", "rel_types", ".", "append", "(", "'FP'", ")", "\n", "", "", "if", "n0", "not", "in", "predToGTGroup", "or", "n1", "not", "in", "predToGTGroup", ":", "\n", "                ", "print", "(", "'ERROR, pair ({},{}) not foundi n predToGTGroup'", ".", "format", "(", "n0", ",", "n1", ")", ")", "\n", "print", "(", "'predToGTGroup {}: {}'", ".", "format", "(", "len", "(", "predToGTGroup", ")", ",", "predToGTGroup", ")", ")", "\n", "print", "(", "'predGroups {}: {}'", ".", "format", "(", "len", "(", "predGroups", ")", ",", "predGroups", ")", ")", "\n", "print", "(", "'outputBoxesNotBlanks: {}'", ".", "format", "(", "outputBoxesNotBlanks", ")", ")", "\n", "", "gtG0", "=", "predToGTGroup", "[", "n0", "]", "\n", "gtG1", "=", "predToGTGroup", "[", "n1", "]", "\n", "if", "gtG0", ">=", "0", "and", "gtG1", ">=", "0", ":", "\n", "                ", "pair_id", "=", "(", "min", "(", "gtG0", ",", "gtG1", ")", ",", "max", "(", "gtG0", ",", "gtG1", ")", ")", "\n", "if", "pair_id", "in", "gt_groups_adj", ":", "\n", "                    ", "relPrec", "+=", "1", "\n", "gtRelHit", ".", "add", "(", "(", "min", "(", "gtG0", ",", "gtG1", ")", ",", "max", "(", "gtG0", ",", "gtG1", ")", ")", ")", "\n", "if", "groupPurity", "[", "gtG0", "]", "==", "1", "and", "groupPurity", "[", "gtG1", "]", "==", "1", "and", "n0", "in", "groupCompleteness", "and", "groupCompleteness", "[", "n0", "]", "==", "1", "and", "n1", "in", "groupCompleteness", "and", "groupCompleteness", "[", "n1", "]", "==", "1", ":", "\n", "                        ", "relPrec_strict", "+=", "1", "\n", "gtRelHit_strict", ".", "add", "(", "(", "min", "(", "gtG0", ",", "gtG1", ")", ",", "max", "(", "gtG0", ",", "gtG1", ")", ")", ")", "\n", "#TODO failed in training", "\n", "#assert BROS_gtG0==gtG0", "\n", "#assert BROS_gtG1==gtG1", "\n", "#assert (min(gtG0,gtG1),max(gtG0,gtG1)) in gtRelHit_BROS", "\n", "#if 'blank' in self.classMap:", "\n", "#    old_pi = newToOldPredPairs[pi]", "\n", "#    rel_types[old_pi] = 'TP'", "\n", "#else:", "\n", "#    rel_types.append('TP')", "\n", "", "continue", "\n", "#if 'blank' in self.classMap:", "\n", "#    old_pi = newToOldPredPairs[pi]", "\n", "#    rel_types[old_pi] = 'FP'", "\n", "#else:", "\n", "#    rel_types.append('FP')", "\n", "\n", "#print('DEBUG true positives={}'.format(len(gtRelHit)))", "\n", "#print('DEBUG false positives={}'.format(len(predPairs)-len(gtRelHit)))", "\n", "#print('DEBUG false negatives={}'.format(len(gt_groups_adj)-len(gtRelHit)))", "\n", "#log['final_rel_TP']=relPrec", "\n", "\n", "#TODO, these failed in training", "\n", "#assert relPrec_strict==len(gtRelHit_strict)", "\n", "#assert relPrec_BROS==len(gtRelHit_BROS)", "\n", "", "", "", "log", "[", "'final_rel_XX_strict_TP'", "]", "=", "relPrec_strict", "\n", "log", "[", "'final_rel_XX_BROS_TP'", "]", "=", "relPrec_BROS", "\n", "log", "[", "'final_rel_XX_predCount'", "]", "=", "len", "(", "predPairs", ")", "\n", "log", "[", "'final_rel_XX_gtCount'", "]", "=", "len", "(", "gt_groups_adj", ")", "\n", "if", "len", "(", "predPairs", ")", ">", "0", ":", "\n", "            ", "relPrec", "/=", "len", "(", "predPairs", ")", "\n", "relPrec_strict", "/=", "len", "(", "predPairs", ")", "\n", "relPrec_BROS", "/=", "len", "(", "predPairs", ")", "\n", "", "else", ":", "\n", "            ", "relPrec", "=", "1", "\n", "relPrec_strict", "=", "1", "\n", "relPrec_BROS", "=", "1", "\n", "", "if", "len", "(", "gt_groups_adj", ")", ">", "0", ":", "\n", "            ", "relRecall", "=", "len", "(", "gtRelHit", ")", "/", "len", "(", "gt_groups_adj", ")", "\n", "relRecall_strict", "=", "len", "(", "gtRelHit_strict", ")", "/", "len", "(", "gt_groups_adj", ")", "\n", "relRecall_BROS", "=", "len", "(", "gtRelHit_BROS", ")", "/", "len", "(", "gt_groups_adj", ")", "\n", "", "else", ":", "\n", "            ", "relRecall", "=", "1", "\n", "relRecall_strict", "=", "1", "\n", "relRecall_BROS", "=", "1", "\n", "\n", "\n", "", "log", "[", "'final_rel_prec'", "]", "=", "relPrec", "\n", "log", "[", "'final_rel_recall'", "]", "=", "relRecall", "\n", "log", "[", "'final_rel_strict_prec'", "]", "=", "relPrec_strict", "\n", "log", "[", "'final_rel_strict_recall'", "]", "=", "relRecall_strict", "\n", "log", "[", "'final_rel_BROS_prec'", "]", "=", "relPrec_BROS", "\n", "log", "[", "'final_rel_BROS_recall'", "]", "=", "relRecall_BROS", "\n", "if", "relPrec", "+", "relRecall", ">", "0", ":", "\n", "            ", "log", "[", "'final_rel_Fm'", "]", "=", "(", "2", "*", "(", "relPrec", "*", "relRecall", ")", "/", "(", "relPrec", "+", "relRecall", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", "[", "'final_rel_Fm'", "]", "=", "0", "\n", "", "if", "relPrec_strict", "+", "relRecall_strict", ">", "0", ":", "\n", "            ", "log", "[", "'final_rel_strict_Fm'", "]", "=", "(", "2", "*", "(", "relPrec_strict", "*", "relRecall_strict", ")", "/", "(", "relPrec_strict", "+", "relRecall_strict", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", "[", "'final_rel_strict_Fm'", "]", "=", "0", "\n", "", "if", "relPrec_BROS", "+", "relRecall_BROS", ">", "0", ":", "\n", "            ", "log", "[", "'final_rel_BROS_Fm'", "]", "=", "(", "2", "*", "(", "relPrec_BROS", "*", "relRecall_BROS", ")", "/", "(", "relPrec_BROS", "+", "relRecall_BROS", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", "[", "'final_rel_BROS_Fm'", "]", "=", "0", "\n", "\n", "\n", "", "missed_rels", "=", "gt_groups_adj", ".", "difference", "(", "gtRelHit_BROS", ")", "\n", "if", "'blank'", "in", "self", ".", "classMap", ":", "\n", "            ", "missed_rels", "=", "set", "(", "(", "newToOldGTGroups", "[", "g1", "]", ",", "newToOldGTGroups", "[", "g2", "]", ")", "for", "g1", ",", "g2", "in", "missed_rels", ")", "\n", "\n", "", "missed_groups", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "gtGroups", ")", ")", "if", "not", "gtGroupHit_pure", "[", "i", "]", "]", "\n", "if", "'blank'", "in", "self", ".", "classMap", ":", "\n", "            ", "missed_groups", "=", "[", "newToOldGTGroups", "[", "gi", "]", "for", "gi", "in", "missed_groups", "]", "\n", "", "return", "log", ",", "[", "rel_types", "]", ",", "missed_rels", ",", "missed_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.characterization_eval": [[1650, 2376], ["len", "collections.defaultdict", "len", "enumerate", "utils.yolo_tools.newGetTargIndexForPreds_iou.numpy", "utils.yolo_tools.newGetTargIndexForPreds_iou.numpy", "bb_centers.clone", "bb_centers.clone", "numpy.power", "numpy.power", "numpy.power", "numpy.power", "numpy.power", "numpy.power", "range", "enumerate", "enumerate", "gtBBs2Pred.append", "collections.defaultdict", "predGroup2GT.items", "gtGroups2Pred.append", "allEdgeIndexes.append", "enumerate", "enumerate", "gtGroupAdj.difference", "gtEdge2Pred.keys", "len", "len", "len", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "collections.defaultdict.items", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "collections.defaultdict.items", "print", "print", "print", "print", "print", "print", "print", "print", "matplotlib.figure", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.figure", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.figure", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.figure", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.show", "zip", "utils.yolo_tools.newGetTargIndexForPreds_iou.numpy", "range", "enumerate", "gtBBs2Pred.append", "collections.defaultdict", "predGroup2GT.items", "gtGroups2Pred.append", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "allEdgeScores.append", "allRelScores.append", "allMergeScores.append", "allGroupScores.append", "newGetTargIndexForPreds_dist", "utils.yolo_tools.newGetTargIndexForPreds_iou", "utils.yolo_tools.newGetTargIndexForPreds_iou", "numpy.power().sum", "numpy.power().sum", "numpy.power().sum", "numpy.power().sum", "numpy.power().sum", "numpy.power().sum", "len", "finalPurity.append", "utils.group_pairing.getGTGroup", "finalNoClassPurity.append", "set", "final_density.append", "final_node_center.append", "len", "len", "len", "len", "len", "enumerate", "enumerate", "math.sqrt", "finalOutputBoxes[].argmax", "finalOutputBoxes[].argmax", "min", "max", "set", "set", "enumerate", "set", "targetBoxes[].argmax", "targetBoxes[].argmax", "min", "max", "targetBoxes[].argmax", "targetBoxes[].argmax", "min", "max", "any", "any", "graph_pair_trainer.GraphPairTrainer.characterization_form[].append", "print", "enumerate", "newGetTargIndexForPreds_dist", "utils.yolo_tools.newGetTargIndexForPreds_iou", "len", "utils.group_pairing.getGTGroup", "len", "utils.group_pairing.getGTGroup", "utils.group_pairing.purity", "utils.group_pairing.purity", "bb_close[].nonzero", "set.update", "len", "bb_centers[].mean", "gtGroup2Pred[].append", "unmatched_finals.append", "min", "max", "numpy.power().sum", "set", "len", "len", "gtEdge2Pred.keys", "range", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "o.item", "enumerate", "gtGroup2Pred[].append", "numpy.power", "numpy.power", "numpy.power", "numpy.power", "numpy.power", "numpy.power", "utils.group_pairing.purity", "type", "len", "len", "numpy.abs().max", "p.abs().sum", "true_pos_distances.append", "true_pos_all_densities.append", "false_pos_edges.append", "false_pos_distances.append", "false_pos_all_densities.append", "set.intersection", "set.intersection", "allEdgeIndexes[].index", "any", "any", "enumerate", "len", "len", "len", "range", "len", "newGroups.append", "newToOldGroups.append", "enumerate", "len", "enumerate", "bb_close[].nonzero", "bb_close[].nonzero", "numpy.power", "max", "max", "max", "max", "false_pos_keep_scores.append", "false_pos_rel_scores.append", "true_pos_keep_scores.append", "true_pos_rel_scores.append", "any", "any", "len", "len", "len", "len", "targetBoxes.size", "len", "newGroups.append", "newToOldGroups.append", "enumerate", "len", "len", "numpy.abs", "p.abs", "len", "len", "len", "len", "min", "max", "enumerate", "enumerate", "enumerate", "len", "enumerate", "len", "enumerate", "len", "len", "min", "max", "bb_close[].nonzero", "len", "len", "len", "len", "prevEdgePred.append"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.img_f.show", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.newGetTargIndexForPreds_iou", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.newGetTargIndexForPreds_iou", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.group_pairing.getGTGroup", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.yolo_tools.newGetTargIndexForPreds_iou", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.group_pairing.getGTGroup", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.group_pairing.getGTGroup", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.group_pairing.purity", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.group_pairing.purity", "home.repos.pwc.inspect_result.herobd_FUDGE.utils.group_pairing.purity"], ["", "def", "characterization_eval", "(", "self", ",", "\n", "allOutputBoxes", ",", "\n", "allEdgePred", ",", "\n", "allNodePred", ",", "\n", "allEdgeIndexes", ",", "\n", "allPredGroups", ",", "\n", "finalOutputBoxes", ",", "\n", "finalEdgeIndexes", ",", "\n", "finalPredGroups", ",", "\n", "targetBoxes", ",", "\n", "targetIndexToGroup", ",", "\n", "gtGroups", ",", "\n", "gtGroupAdj", ",", "\n", ")", ":", "\n", "\n", "        ", "numClassesFull", "=", "self", ".", "model_ref", ".", "numBBTypes", "\n", "numClasses", "=", "len", "(", "self", ".", "scoreClassMap", ")", "\n", "\n", "#Remove blanks", "\n", "if", "'blank'", "in", "self", ".", "classMap", ":", "\n", "            ", "blank_index", "=", "self", ".", "classMap", "[", "'blank'", "]", "\n", "if", "targetBoxes", "is", "not", "None", ":", "\n", "                ", "gtNotBlanks", "=", "targetBoxes", "[", "0", ",", ":", ",", "blank_index", "]", "<", "0.5", "\n", "newToOldBBs", "=", "[", "i", "for", "i", "in", "range", "(", "targetBoxes", ".", "size", "(", "1", ")", ")", "if", "gtNotBlanks", "[", "i", "]", "]", "\n", "oldToNewBBs", "=", "{", "o", ":", "n", "for", "n", ",", "o", "in", "newToOldBBs", "}", "\n", "targetBoxes", "=", "targetBoxes", "[", ":", ",", "gtNotBlanks", "]", "\n", "gtGroups", "=", "[", "[", "oldToNewBBs", "[", "bb", "]", "for", "bb", "in", "group", "]", "for", "group", "in", "gtGroups", "]", "\n", "newGroups", "=", "[", "]", "\n", "for", "gId", ",", "group", "in", "enumerate", "(", "gtGroups", ")", ":", "\n", "                    ", "if", "len", "(", "group", ")", ">", "0", ":", "\n", "                        ", "newGroups", ".", "append", "(", "group", ")", "\n", "newToOldGroups", ".", "append", "(", "gId", ")", "\n", "", "", "gtGroups", "=", "newGroups", "\n", "oldToNewGroups", "=", "{", "o", ":", "n", "for", "n", ",", "o", "in", "enumerate", "(", "newToOldGroups", ")", "}", "\n", "gtGroupAdj", "=", "[", "(", "oldToNewGroups", "[", "g1", "]", ",", "oldToNewGroups", "[", "g2", "]", ")", "for", "g1", ",", "g2", "in", "gtGroupAdj", "if", "g1", "in", "oldToNewGroups", "and", "g2", "in", "oldToNewGroups", "]", "\n", "", "if", "finalOutputBoxes", "is", "not", "None", "and", "len", "(", "finalOutputBoxes", ")", ">", "0", ":", "\n", "                ", "finalOutputBoxesNotBlanks", "=", "finalOutputBoxes", "[", ":", ",", "1", "+", "blank_index", "-", "8", "]", "<", "0.5", "\n", "finalOutputBoxes", "=", "finalOutputBoxes", "[", "finalOutputBoxesNotBlanks", "]", "\n", "newToOldOutputBoxes", "=", "torch", ".", "arange", "(", "0", ",", "len", "(", "finalOutputBoxesNotBlanks", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "[", "finalOutputBoxesNotBlanks", "]", "\n", "oldToNewOutputBoxes", "=", "{", "o", ".", "item", "(", ")", ":", "n", "for", "n", ",", "o", "in", "enumerate", "(", "newToOldOutputBoxes", ")", "}", "\n", "\n", "if", "finalPredGroups", "is", "not", "None", ":", "\n", "                    ", "finalPredGroups", "=", "[", "[", "oldToNewOutputBoxes", "[", "bId", "]", "for", "bId", "in", "group", "if", "bId", "in", "oldToNewOutputBoxes", "]", "for", "group", "in", "finalPredGroups", "]", "\n", "newToOldGroups", "=", "[", "]", "\n", "newGroups", "=", "[", "]", "\n", "for", "gId", ",", "group", "in", "enumerate", "(", "finalPredGroups", ")", ":", "\n", "                        ", "if", "len", "(", "group", ")", ">", "0", ":", "\n", "                            ", "newGroups", ".", "append", "(", "group", ")", "\n", "newToOldGroups", ".", "append", "(", "gId", ")", "\n", "", "", "oldToNewGroups", "=", "{", "o", ":", "n", "for", "n", ",", "o", "in", "enumerate", "(", "newToOldGroups", ")", "}", "\n", "finalEdgeIndexes", "=", "[", "(", "oldToNewGroups", "[", "g1", "]", ",", "oldToNewGroups", "[", "g2", "]", ")", "for", "g1", ",", "g2", "in", "finalEdgeIndexes", "if", "g1", "in", "oldToNewGroups", "and", "g2", "in", "oldToNewGroups", "]", "\n", "finalPredGroups", "=", "newGroups", "\n", "\n", "for", "a", ",", "b", "in", "finalEdgeIndexes", ":", "\n", "                        ", "assert", "(", "a", "<", "len", "(", "finalPredGroups", ")", ")", "\n", "assert", "(", "b", "<", "len", "(", "finalPredGroups", ")", ")", "\n", "", "", "", "", "targetBoxes", "=", "targetBoxes", "[", "0", "]", "\n", "\n", "#go to last", "\n", "#find alignment", "\n", "#if rel is missing, ", "\n", "false_pos_is_single", "=", "0", "\n", "false_pos_group_involved", "=", "0", "\n", "false_pos_inpure_group", "=", "0", "\n", "false_pos_from_bad_class", "=", "0", "\n", "false_pos_bad_node", "=", "0", "\n", "false_pos_with_good_nodes", "=", "0", "\n", "false_pos_with_misclassed_nodes", "=", "0", "\n", "inconsistent_edges", "=", "0", "\n", "false_pos_consistent_header_rels", "=", "0", "\n", "false_pos_consistent_question_rels", "=", "0", "\n", "\n", "double_rel_pred", "=", "0", "\n", "missed_rel_from_bad_detection", "=", "0", "\n", "missed_rel_from_bad_merge", "=", "0", "\n", "missed_rel_from_missed_prop", "=", "0", "\n", "missed_rel_from_bad_group", "=", "0", "\n", "missed_rel_from_poor_alignement", "=", "0", "\n", "missed_rel_from_misclass", "=", "0", "\n", "missed_rel_was_single", "=", "0", "\n", "missed_rel_from_pruned_edge", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "missed_header_rels", "=", "0", "\n", "missed_question_rels", "=", "0", "\n", "missed_misc_rels", "=", "0", "\n", "hit_header_rels", "=", "0", "\n", "hit_question_rels", "=", "0", "\n", "hit_misc_rels", "=", "0", "\n", "\n", "false_pos_keep_scores", "=", "[", "]", "\n", "true_pos_keep_scores", "=", "[", "]", "\n", "false_pos_rel_scores", "=", "[", "]", "\n", "true_pos_rel_scores", "=", "[", "]", "\n", "\n", "#for each gt node, look through history. Was it found? Incorrectly merged? Grouped?", "\n", "#   found: a partail detection", "\n", "#   merge: was there are merge which made it not a match?", "\n", "#   was it grouped incorrectly? was it supposed to be a group, but isn't?", "\n", "#for missing rel, was it every present? when did it disapear, were any nodes bad?", "\n", "#for false pos rel, are either nodes bad detection or group?", "\n", "gtBBs2Pred", "=", "[", "]", "\n", "gtGroups2Pred", "=", "[", "]", "\n", "allEdgeScores", "=", "[", "]", "\n", "allRelScores", "=", "[", "]", "\n", "allMergeScores", "=", "[", "]", "\n", "allGroupScores", "=", "[", "]", "\n", "num_giter", "=", "len", "(", "allOutputBoxes", ")", "\n", "for", "graphIteration", ",", "(", "outputBoxes", ",", "edgePred", ",", "nodePred", ",", "edgeIndexes", ",", "predGroups", ")", "in", "enumerate", "(", "zip", "(", "allOutputBoxes", ",", "allEdgePred", ",", "allNodePred", ",", "allEdgeIndexes", ",", "allPredGroups", ")", ")", ":", "\n", "            ", "if", "self", ".", "model_ref", ".", "rotation", ":", "\n", "                ", "assert", "(", "False", "and", "'untested and should be changed to reflect new newGetTargIndexForPreds_s'", ")", "\n", "targIndex", ",", "fullHit", ",", "overSegmented", "=", "newGetTargIndexForPreds_dist", "(", "targetBoxes", ",", "outputBoxes", ",", "1.1", ",", "numClasses", ",", "hard_thresh", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "targIndex", "=", "newGetTargIndexForPreds_iou", "(", "targetBoxes", ",", "outputBoxes", ",", "0.5", ",", "numClasses", ",", "True", ")", "\n", "", "targIndex", "=", "targIndex", ".", "numpy", "(", ")", "\n", "\n", "predGroup2GT", "=", "{", "}", "\n", "for", "node", "in", "range", "(", "len", "(", "predGroups", ")", ")", ":", "\n", "                ", "predGroupT", "=", "[", "targIndex", "[", "bb", "]", "for", "bb", "in", "predGroups", "[", "node", "]", "if", "targIndex", "[", "bb", "]", ">=", "0", "]", "\n", "predGroup2GT", "[", "node", "]", "=", "getGTGroup", "(", "predGroupT", ",", "targetIndexToGroup", ")", "\n", "#predGroups2GT.append(predGroup2GT)", "\n", "\n", "", "gtBB2Pred", "=", "[", "-", "1", "]", "*", "len", "(", "targetBoxes", ")", "\n", "for", "i", ",", "tInd", "in", "enumerate", "(", "targIndex", ")", ":", "\n", "                ", "if", "tInd", ">=", "0", ":", "\n", "                    ", "gtBB2Pred", "[", "tInd", "]", "=", "i", "\n", "", "", "gtBBs2Pred", ".", "append", "(", "gtBB2Pred", ")", "\n", "gtGroup2Pred", "=", "defaultdict", "(", "list", ")", "\n", "for", "predG", ",", "gtG", "in", "predGroup2GT", ".", "items", "(", ")", ":", "\n", "                ", "if", "gtG", "!=", "-", "1", ":", "\n", "                    ", "gtGroup2Pred", "[", "gtG", "]", ".", "append", "(", "predG", ")", "\n", "", "", "gtGroups2Pred", ".", "append", "(", "gtGroup2Pred", ")", "\n", "\n", "edgeScores", "=", "torch", ".", "sigmoid", "(", "edgePred", "[", ":", ",", "-", "1", ",", "0", "]", ")", "\n", "relScores", "=", "torch", ".", "sigmoid", "(", "edgePred", "[", ":", ",", "-", "1", ",", "1", "]", ")", "\n", "mergeScores", "=", "torch", ".", "sigmoid", "(", "edgePred", "[", ":", ",", "-", "1", ",", "2", "]", ")", "\n", "groupScores", "=", "torch", ".", "sigmoid", "(", "edgePred", "[", ":", ",", "-", "1", ",", "3", "]", ")", "\n", "\n", "allEdgeScores", ".", "append", "(", "edgeScores", ")", "\n", "allRelScores", ".", "append", "(", "relScores", ")", "\n", "allMergeScores", ".", "append", "(", "mergeScores", ")", "\n", "allGroupScores", ".", "append", "(", "groupScores", ")", "\n", "\n", "#final, we'll count it as additional graph iteration", "\n", "", "if", "self", ".", "model_ref", ".", "rotation", ":", "\n", "            ", "assert", "(", "False", "and", "'untested and should be changed to reflect new newGetTargIndexForPreds_s'", ")", "\n", "targIndex", ",", "fullHit", ",", "overSegmented", "=", "newGetTargIndexForPreds_dist", "(", "targetBoxes", ",", "outputBoxes", ",", "1.1", ",", "numClasses", ",", "hard_thresh", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "targIndex", "=", "newGetTargIndexForPreds_iou", "(", "targetBoxes", ",", "finalOutputBoxes", ",", "0.4", ",", "numClasses", ",", "False", ")", "\n", "noClassTargIndex", "=", "newGetTargIndexForPreds_iou", "(", "targetBoxes", ",", "finalOutputBoxes", ",", "0.4", ",", "0", ",", "False", ")", "\n", "", "targIndex", "=", "targIndex", ".", "numpy", "(", ")", "\n", "noClassTargIndex", "=", "noClassTargIndex", ".", "numpy", "(", ")", "\n", "\n", "#cacluate which pred bbs are close to eachother (for density measurement)", "\n", "bb_centers", "=", "finalOutputBoxes", "[", ":", ",", "1", ":", "3", "]", "\n", "assert", "(", "not", "self", ".", "model_ref", ".", "rotation", ")", "\n", "bb_lefts", "=", "bb_centers", ".", "clone", "(", ")", "\n", "bb_lefts", "[", ":", ",", "0", "]", "-=", "finalOutputBoxes", "[", ":", ",", "5", "]", "\n", "bb_rights", "=", "bb_centers", ".", "clone", "(", ")", "\n", "bb_rights", "[", ":", ",", "0", "]", "+=", "finalOutputBoxes", "[", ":", ",", "5", "]", "\n", "\n", "dist_center_center", "=", "np", ".", "power", "(", "np", ".", "power", "(", "bb_centers", "[", "None", ",", ":", ",", ":", "]", "-", "bb_centers", "[", ":", ",", "None", ",", ":", "]", ",", "2", ")", ".", "sum", "(", "axis", "=", "2", ")", ",", "0.5", ")", "\n", "dist_center_left", "=", "np", ".", "power", "(", "np", ".", "power", "(", "bb_centers", "[", "None", ",", ":", ",", ":", "]", "-", "bb_lefts", "[", ":", ",", "None", ",", ":", "]", ",", "2", ")", ".", "sum", "(", "axis", "=", "2", ")", ",", "0.5", ")", "\n", "dist_center_right", "=", "np", ".", "power", "(", "np", ".", "power", "(", "bb_centers", "[", "None", ",", ":", ",", ":", "]", "-", "bb_rights", "[", ":", ",", "None", ",", ":", "]", ",", "2", ")", ".", "sum", "(", "axis", "=", "2", ")", ",", "0.5", ")", "\n", "dist_left_right", "=", "np", ".", "power", "(", "np", ".", "power", "(", "bb_lefts", "[", "None", ",", ":", ",", ":", "]", "-", "bb_rights", "[", ":", ",", "None", ",", ":", "]", ",", "2", ")", ".", "sum", "(", "axis", "=", "2", ")", ",", "0.5", ")", "\n", "dist_right_right", "=", "np", ".", "power", "(", "np", ".", "power", "(", "bb_rights", "[", "None", ",", ":", ",", ":", "]", "-", "bb_rights", "[", ":", ",", "None", ",", ":", "]", ",", "2", ")", ".", "sum", "(", "axis", "=", "2", ")", ",", "0.5", ")", "\n", "dist_left_left", "=", "np", ".", "power", "(", "np", ".", "power", "(", "bb_lefts", "[", "None", ",", ":", ",", ":", "]", "-", "bb_lefts", "[", ":", ",", "None", ",", ":", "]", ",", "2", ")", ".", "sum", "(", "axis", "=", "2", ")", ",", "0.5", ")", "\n", "d_thresh", "=", "50", "\n", "bb_close", "=", "(", "dist_center_center", "<", "d_thresh", ")", "+", "(", "dist_center_left", "<", "d_thresh", ")", "+", "(", "dist_center_right", "<", "d_thresh", ")", "+", "(", "dist_left_right", "<", "d_thresh", ")", "+", "(", "dist_right_right", "<", "d_thresh", ")", "+", "(", "dist_left_left", "<", "d_thresh", ")", "\n", "\n", "predGroup2GT", "=", "{", "}", "\n", "noClassPredGroup2GT", "=", "{", "}", "\n", "finalPurity", "=", "[", "]", "\n", "finalNoClassPurity", "=", "[", "]", "\n", "final_density", "=", "[", "]", "\n", "final_node_center", "=", "[", "]", "\n", "for", "node", "in", "range", "(", "len", "(", "finalPredGroups", ")", ")", ":", "\n", "            ", "predGroupT", "=", "[", "targIndex", "[", "bb", "]", "for", "bb", "in", "finalPredGroups", "[", "node", "]", "if", "targIndex", "[", "bb", "]", ">=", "0", "]", "\n", "predGroup2GT", "[", "node", "]", "=", "getGTGroup", "(", "predGroupT", ",", "targetIndexToGroup", ")", "if", "purity", "(", "predGroupT", ",", "targetIndexToGroup", ")", ">", "0.25", "else", "-", "1", "\n", "finalPurity", ".", "append", "(", "purity", "(", "predGroupT", ",", "targetIndexToGroup", ")", ")", "\n", "\n", "noClassPredGroupT", "=", "[", "noClassTargIndex", "[", "bb", "]", "for", "bb", "in", "finalPredGroups", "[", "node", "]", "if", "noClassTargIndex", "[", "bb", "]", ">=", "0", "]", "\n", "noClassPredGroup2GT", "[", "node", "]", "=", "getGTGroup", "(", "noClassPredGroupT", ",", "targetIndexToGroup", ")", "\n", "finalNoClassPurity", ".", "append", "(", "purity", "(", "noClassPredGroupT", ",", "targetIndexToGroup", ")", ")", "\n", "\n", "all_close_bbs", "=", "set", "(", ")", "\n", "for", "bb", "in", "finalPredGroups", "[", "node", "]", ":", "\n", "                ", "nonzero", "=", "bb_close", "[", "bb", "]", ".", "nonzero", "(", ")", "\n", "if", "type", "(", "nonzero", ")", "is", "tuple", ":", "\n", "                    ", "close_bbs", "=", "bb_close", "[", "bb", "]", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "assert", "(", "bb_close", "[", "bb", "]", ".", "nonzero", "(", ")", ".", "shape", "[", "1", "]", "==", "1", ")", "\n", "close_bbs", "=", "bb_close", "[", "bb", "]", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "", "all_close_bbs", ".", "update", "(", "obb", "for", "obb", "in", "close_bbs", "if", "obb", "not", "in", "finalPredGroups", "[", "node", "]", ")", "\n", "", "final_density", ".", "append", "(", "len", "(", "all_close_bbs", ")", ")", "\n", "final_node_center", ".", "append", "(", "bb_centers", "[", "finalPredGroups", "[", "node", "]", "]", ".", "mean", "(", "axis", "=", "0", ")", ")", "\n", "\n", "", "gtBB2Pred", "=", "[", "-", "1", "]", "*", "len", "(", "targetBoxes", ")", "\n", "for", "i", ",", "tInd", "in", "enumerate", "(", "targIndex", ")", ":", "\n", "            ", "if", "tInd", ">=", "0", ":", "\n", "                ", "gtBB2Pred", "[", "tInd", "]", "=", "i", "\n", "", "", "finalNoClassGtBB2Pred", "=", "[", "-", "1", "]", "*", "len", "(", "targetBoxes", ")", "\n", "for", "i", ",", "tInd", "in", "enumerate", "(", "noClassTargIndex", ")", ":", "\n", "            ", "if", "tInd", ">=", "0", ":", "\n", "                ", "finalNoClassGtBB2Pred", "[", "tInd", "]", "=", "i", "\n", "", "", "gtBBs2Pred", ".", "append", "(", "gtBB2Pred", ")", "\n", "gtGroup2Pred", "=", "defaultdict", "(", "list", ")", "\n", "for", "predG", ",", "gtG", "in", "predGroup2GT", ".", "items", "(", ")", ":", "\n", "            ", "if", "gtG", "!=", "-", "1", ":", "\n", "                ", "gtGroup2Pred", "[", "gtG", "]", ".", "append", "(", "predG", ")", "\n", "", "", "gtGroups2Pred", ".", "append", "(", "gtGroup2Pred", ")", "\n", "\n", "allEdgeIndexes", ".", "append", "(", "finalEdgeIndexes", ")", "\n", "\n", "###", "\n", "num_final_merge", "=", "len", "(", "allOutputBoxes", "[", "-", "1", "]", ")", "-", "len", "(", "finalOutputBoxes", ")", "\n", "#map from final bbs to last bbs", "\n", "finalBB2LastBB", "=", "{", "}", "\n", "unmatched_finals", "=", "[", "]", "\n", "last_used", "=", "[", "False", "]", "*", "len", "(", "allOutputBoxes", "[", "-", "1", "]", ")", "\n", "for", "finalI", ",", "bbF", "in", "enumerate", "(", "finalOutputBoxes", ")", ":", "\n", "            ", "ppF", "=", "bbF", "[", "1", ":", "6", "]", "\n", "match_found", "=", "False", "\n", "for", "lastI", ",", "bbL", "in", "enumerate", "(", "allOutputBoxes", "[", "-", "1", "]", ")", ":", "\n", "\n", "                ", "ppL", "=", "bbL", "[", "1", ":", "6", "]", "\n", "if", "len", "(", "ppF", ")", "==", "len", "(", "ppL", ")", ":", "\n", "                    ", "max_diff", "=", "np", ".", "abs", "(", "ppF", "-", "ppL", ")", ".", "max", "(", ")", "\n", "if", "max_diff", "<", "0.01", ":", "\n", "                        ", "match_found", "=", "True", "\n", "#assert(not last_used[lastI]) #this actually occurs with gt (perfect overlap)", "\n", "last_used", "[", "lastI", "]", "=", "True", "\n", "finalBB2LastBB", "[", "finalI", "]", "=", "lastI", "\n", "break", "\n", "", "", "", "if", "not", "match_found", ":", "\n", "                ", "unmatched_finals", ".", "append", "(", "finalI", ")", "\n", "#if num_final_merge>0:", "\n", "", "", "for", "finalI", "in", "unmatched_finals", ":", "\n", "            ", "best_diff", "=", "99999999", "\n", "best_lastI", "=", "None", "\n", "bbF", "=", "finalOutputBoxes", "[", "finalI", "]", "\n", "ppF", "=", "bbF", "[", "1", ":", "6", "]", "\n", "match_found", "=", "False", "\n", "for", "lastI", ",", "bbL", "in", "enumerate", "(", "allOutputBoxes", "[", "-", "1", "]", ")", ":", "\n", "                ", "if", "not", "last_used", "[", "lastI", "]", ":", "\n", "\n", "                    ", "ppL", "=", "bbL", "[", "1", ":", "6", "]", "\n", "diff", "=", "p", ".", "abs", "(", "ppF", "-", "ppL", ")", ".", "sum", "(", ")", "\n", "\n", "if", "diff", "<", "best_diff", ":", "\n", "                        ", "best_diff", "=", "diff", "\n", "best_lastI", "=", "lastI", "\n", "\n", "", "", "", "finalBB2LastBB", "[", "finalI", "]", "=", "best_lastI", "\n", "\n", "\n", "", "gtEdge2Pred", "=", "{", "}", "\n", "badPredEdges", "=", "[", "]", "\n", "false_pos_edges", "=", "[", "]", "\n", "false_pos_distances", "=", "[", "]", "\n", "true_pos_distances", "=", "[", "]", "\n", "true_pos_all_densities", "=", "[", "]", "\n", "false_pos_all_densities", "=", "[", "]", "\n", "for", "ei", ",", "(", "n1", ",", "n2", ")", "in", "enumerate", "(", "finalEdgeIndexes", ")", ":", "\n", "            ", "gtGId1", "=", "predGroup2GT", "[", "n1", "]", "\n", "gtGId2", "=", "predGroup2GT", "[", "n2", "]", "\n", "edge", "=", "(", "min", "(", "gtGId1", ",", "gtGId2", ")", ",", "max", "(", "gtGId1", ",", "gtGId2", ")", ")", "\n", "distance", "=", "math", ".", "sqrt", "(", "np", ".", "power", "(", "final_node_center", "[", "n1", "]", "-", "final_node_center", "[", "n2", "]", ",", "2", ")", ".", "sum", "(", ")", ")", "\n", "is_false_pos", "=", "False", "\n", "if", "edge", "in", "gtEdge2Pred", ":", "\n", "#two predicted edges claiming the same gt edge", "\n", "#this can occur if one of both of the GT groups is still split", "\n", "                ", "double_rel_pred", "+=", "1", "\n", "", "elif", "edge", "in", "gtGroupAdj", ":", "\n", "                ", "gtEdge2Pred", "[", "edge", "]", "=", "ei", "\n", "true_pos_distances", ".", "append", "(", "distance", ")", "\n", "true_pos_all_densities", ".", "append", "(", "max", "(", "final_density", "[", "n1", "]", ",", "final_density", "[", "n2", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "false_pos_edges", ".", "append", "(", "(", "ei", ",", "n1", ",", "n2", ")", "+", "edge", ")", "\n", "false_pos_distances", ".", "append", "(", "distance", ")", "\n", "false_pos_all_densities", ".", "append", "(", "max", "(", "final_density", "[", "n1", "]", ",", "final_density", "[", "n2", "]", ")", ")", "\n", "is_false_pos", "=", "True", "\n", "\n", "#is this relationship consistent with classes", "\n", "", "classIdx1", "=", "finalOutputBoxes", "[", "finalPredGroups", "[", "n1", "]", "[", "0", "]", ",", "6", ":", "7", "+", "numClasses", "]", ".", "argmax", "(", ")", "\n", "classIdx2", "=", "finalOutputBoxes", "[", "finalPredGroups", "[", "n2", "]", "[", "0", "]", ",", "6", ":", "7", "+", "numClasses", "]", ".", "argmax", "(", ")", "\n", "tClass", "=", "min", "(", "classIdx1", ",", "classIdx2", ")", "\n", "bClass", "=", "max", "(", "classIdx1", ",", "classIdx2", ")", "\n", "is_consistent", "=", "True", "\n", "if", "not", "(", "classIdx1", "!=", "classIdx2", "and", "(", "(", "tClass", "==", "0", "and", "bClass", "==", "1", ")", "or", "(", "tClass", "==", "1", "and", "bClass", "==", "2", ")", ")", ")", ":", "\n", "                ", "inconsistent_edges", "+=", "1", "\n", "is_consistent", "=", "False", "\n", "#else:", "\n", "#    #check neighbor edges", "\n", "#    for aei,(an1,an2) in enumerate(finalEdgeIndexes):", "\n", "#        if aei!=ei and (an1==n1  or an2==n1 or an1==n2 or an2==n2):", "\n", "#            #this is a shared edge. Check each consistent scenario", "\n", "#            an1_class=finalOutputBoxes[finalPredGroups[an1][0]].getCls()[:numClasses].argmax()", "\n", "#            an2_class=finalOutputBoxes[finalPredGroups[an2][0]].getCls()[:numClasses].argmax()", "\n", "#            if an1_class==tClass and an1_class==1 and an2_class==0:", "\n", "#                continue", "\n", "#            elif an1_class==tClass and an1_class==0 and an2_class==1:", "\n", "#                continue", "\n", "#            elif an1_class==bClass and an1_class==1 and an2_class==2:", "\n", "#                continue", "\n", "#            elif an1_class==bClass and an1_class==0 and an2_class==1:", "\n", "#                continue", "\n", "#            elif an2_class==tClass and an2_class==1 and an1_class==0:", "\n", "#                continue", "\n", "#            elif an2_class==tClass and an2_class==0 and an1_class==1:", "\n", "#                continue", "\n", "#            elif an2_class==bClass and an2_class==1 and an1_class==2:", "\n", "#                continue", "\n", "#            elif an2_class==bClass and an2_class==0 and an1_class==1:", "\n", "#                continue", "\n", "\n", "#            inconsistent_edges+=1", "\n", "#            is_consistent=False", "\n", "#            break", "\n", "", "if", "is_false_pos", "and", "is_consistent", ":", "\n", "                ", "if", "tClass", "==", "0", "and", "bClass", "==", "1", ":", "\n", "                    ", "false_pos_consistent_header_rels", "+=", "1", "\n", "", "elif", "tClass", "==", "1", "and", "bClass", "==", "2", ":", "\n", "                    ", "false_pos_consistent_question_rels", "+=", "1", "\n", "\n", "\n", "#find the confidence value (keep or rel?)", "\n", "", "", "lastBBs1", "=", "set", "(", "finalBB2LastBB", "[", "bb", "]", "for", "bb", "in", "finalPredGroups", "[", "n1", "]", ")", "\n", "lastBBs2", "=", "set", "(", "finalBB2LastBB", "[", "bb", "]", "for", "bb", "in", "finalPredGroups", "[", "n2", "]", ")", "\n", "#find most consistent last group", "\n", "lastNode1", "=", "lastNode2", "=", "None", "\n", "for", "lgi", ",", "bbs", "in", "enumerate", "(", "allPredGroups", "[", "-", "1", "]", ")", ":", "\n", "                ", "bbs", "=", "set", "(", "bbs", ")", "\n", "same1", "=", "len", "(", "bbs", ".", "intersection", "(", "lastBBs1", ")", ")", "\n", "if", "same1", "/", "max", "(", "len", "(", "bbs", ")", ",", "len", "(", "lastBBs1", ")", ")", ">", "0.5", ":", "\n", "                    ", "lastNode1", "=", "lgi", "\n", "\n", "", "same2", "=", "len", "(", "bbs", ".", "intersection", "(", "lastBBs2", ")", ")", "\n", "if", "same2", "/", "max", "(", "len", "(", "bbs", ")", ",", "len", "(", "lastBBs2", ")", ")", ">", "0.5", ":", "\n", "                    ", "lastNode2", "=", "lgi", "\n", "\n", "", "", "if", "lastNode1", "is", "not", "None", "and", "lastNode2", "is", "not", "None", ":", "\n", "                ", "try", ":", "\n", "                    ", "ei", "=", "allEdgeIndexes", "[", "-", "1", "]", ".", "index", "(", "(", "min", "(", "lastNode1", ",", "lastNode2", ")", ",", "max", "(", "lastNode1", ",", "lastNode2", ")", ")", ")", "\n", "keep", "=", "allEdgeScores", "[", "-", "1", "]", "[", "ei", "]", "#allEdgePred[-1][ei,0]", "\n", "rel", "=", "allRelScores", "[", "-", "1", "]", "[", "ei", "]", "\n", "if", "is_false_pos", ":", "\n", "                        ", "false_pos_keep_scores", ".", "append", "(", "keep", ")", "\n", "false_pos_rel_scores", ".", "append", "(", "rel", ")", "\n", "", "else", ":", "\n", "                        ", "true_pos_keep_scores", ".", "append", "(", "keep", ")", "\n", "true_pos_rel_scores", ".", "append", "(", "rel", ")", "\n", "", "", "except", "ValueError", ":", "\n", "                    ", "pass", "\n", "\n", "\n", "\n", "", "", "", "missed_rels", "=", "gtGroupAdj", ".", "difference", "(", "set", "(", "gtEdge2Pred", ".", "keys", "(", ")", ")", ")", "\n", "\n", "\n", "for", "gtGId1", ",", "gtGId2", "in", "gtEdge2Pred", ".", "keys", "(", ")", ":", "\n", "            ", "classIdx1", "=", "targetBoxes", "[", "gtGroups", "[", "gtGId1", "]", "[", "0", "]", ",", "13", ":", "13", "+", "numClasses", "]", ".", "argmax", "(", ")", "\n", "classIdx2", "=", "targetBoxes", "[", "gtGroups", "[", "gtGId2", "]", "[", "0", "]", ",", "13", ":", "13", "+", "numClasses", "]", ".", "argmax", "(", ")", "\n", "#assert(classIdx1!=classIdx2)", "\n", "minIdx", "=", "min", "(", "classIdx1", ",", "classIdx2", ")", "\n", "maxIdx", "=", "max", "(", "classIdx1", ",", "classIdx2", ")", "\n", "if", "minIdx", "==", "0", "and", "maxIdx", "==", "1", ":", "\n", "                ", "hit_header_rels", "+=", "1", "\n", "", "elif", "minIdx", "==", "1", "and", "maxIdx", "==", "2", ":", "\n", "                ", "hit_question_rels", "+=", "1", "\n", "", "elif", "minIdx", "==", "maxIdx", ":", "\n", "                ", "hit_misc_rels", "+=", "1", "\n", "", "else", ":", "\n", "                ", "assert", "(", "False", ")", "\n", "\n", "\n", "\n", "", "", "for", "gtGId1", ",", "gtGId2", "in", "missed_rels", ":", "\n", "            ", "classIdx1", "=", "targetBoxes", "[", "gtGroups", "[", "gtGId1", "]", "[", "0", "]", ",", "13", ":", "13", "+", "numClasses", "]", ".", "argmax", "(", ")", "\n", "classIdx2", "=", "targetBoxes", "[", "gtGroups", "[", "gtGId2", "]", "[", "0", "]", ",", "13", ":", "13", "+", "numClasses", "]", ".", "argmax", "(", ")", "\n", "#assert(classIdx1!=classIdx2)", "\n", "minIdx", "=", "min", "(", "classIdx1", ",", "classIdx2", ")", "\n", "maxIdx", "=", "max", "(", "classIdx1", ",", "classIdx2", ")", "\n", "if", "minIdx", "==", "0", "and", "maxIdx", "==", "1", ":", "\n", "                ", "missed_header_rels", "+=", "1", "\n", "", "elif", "minIdx", "==", "1", "and", "maxIdx", "==", "2", ":", "\n", "                ", "missed_question_rels", "+=", "1", "\n", "", "elif", "minIdx", "==", "maxIdx", ":", "\n", "                ", "missed_misc_rels", "+=", "1", "\n", "", "else", ":", "\n", "                ", "assert", "(", "False", ")", "\n", "\n", "#is this a single/isolated relationship?", "\n", "", "is_single", "=", "True", "\n", "for", "(", "gn1", ",", "gn2", ")", "in", "gtGroupAdj", ":", "\n", "                ", "if", "(", "gn1", "==", "gtGId1", "and", "gn2", "!=", "gtGId2", ")", "or", "(", "gn1", "==", "gtGId2", "and", "gn2", "!=", "gtGId1", ")", "or", "(", "gn2", "==", "gtGId1", "and", "gn1", "!=", "gtGId2", ")", "or", "(", "gn2", "==", "gtGId2", "and", "gn1", "!=", "gtGId1", ")", ":", "\n", "                    ", "is_single", "=", "False", "\n", "break", "\n", "", "", "if", "is_single", ":", "\n", "                ", "missed_rel_was_single", "+=", "1", "\n", "\n", "\n", "", "found1", "=", "any", "(", "[", "gtBBs2Pred", "[", "0", "]", "[", "gtbb", "]", "!=", "-", "1", "for", "gtbb", "in", "gtGroups", "[", "gtGId1", "]", "]", ")", "\n", "found2", "=", "any", "(", "[", "gtBBs2Pred", "[", "0", "]", "[", "gtbb", "]", "!=", "-", "1", "for", "gtbb", "in", "gtGroups", "[", "gtGId2", "]", "]", ")", "\n", "if", "not", "found1", "or", "not", "found2", ":", "\n", "                ", "missed_rel_from_bad_detection", "+=", "1", "\n", "", "else", ":", "\n", "                ", "for", "giter", "in", "range", "(", "num_giter", "+", "1", ")", ":", "#+1 for final", "\n", "                    ", "found1", "=", "any", "(", "[", "gtBBs2Pred", "[", "giter", "]", "[", "gtbb", "]", "!=", "-", "1", "for", "gtbb", "in", "gtGroups", "[", "gtGId1", "]", "]", ")", "\n", "found2", "=", "any", "(", "[", "gtBBs2Pred", "[", "giter", "]", "[", "gtbb", "]", "!=", "-", "1", "for", "gtbb", "in", "gtGroups", "[", "gtGId2", "]", "]", ")", "\n", "if", "giter", "==", "num_giter", ":", "\n", "                        ", "noClassFound1", "=", "any", "(", "[", "finalNoClassGtBB2Pred", "[", "gtbb", "]", "!=", "-", "1", "for", "gtbb", "in", "gtGroups", "[", "gtGId1", "]", "]", ")", "\n", "noClassFound2", "=", "any", "(", "[", "finalNoClassGtBB2Pred", "[", "gtbb", "]", "!=", "-", "1", "for", "gtbb", "in", "gtGroups", "[", "gtGId2", "]", "]", ")", "\n", "", "if", "not", "found1", ":", "\n", "                        ", "was_merge", "=", "0", "\n", "prevPredNodeIds", "=", "gtGroups2Pred", "[", "giter", "-", "1", "]", "[", "gtGId1", "]", "\n", "for", "prevPredNodeId", "in", "prevPredNodeIds", ":", "\n", "#find all edges to see if it was merged", "\n", "                            ", "for", "ei", ",", "(", "n1", ",", "n2", ")", "in", "enumerate", "(", "allEdgeIndexes", "[", "giter", "-", "1", "]", ")", ":", "\n", "                                ", "if", "n1", "==", "prevPredNodeId", "or", "n2", "==", "prevPredNodeId", ":", "\n", "                                    ", "if", "allMergeScores", "[", "giter", "-", "1", "]", "[", "ei", "]", ">", "self", ".", "model", ".", "mergeThresh", "[", "giter", "-", "1", "]", ":", "\n", "                                        ", "was_merge", "+=", "1", "\n", "break", "\n", "", "", "", "", "if", "giter", "==", "num_giter", ":", "\n", "                            ", "if", "was_merge", ">", "len", "(", "prevPredNodeIds", ")", ":", "\n", "                                ", "missed_rel_from_bad_merge", "+=", "1", "\n", "", "else", ":", "\n", "#was it wrong class?", "\n", "                                ", "if", "noClassFound1", "and", "(", "found2", "or", "noClassFound2", ")", ":", "\n", "                                    ", "missed_rel_from_misclass", "+=", "1", "\n", "", "else", ":", "\n", "                                    ", "missed_rel_from_poor_alignement", "+=", "1", "\n", "", "", "", "else", ":", "\n", "                            ", "assert", "(", "was_merge", "==", "len", "(", "prevPredNodeIds", ")", ")", "\n", "missed_rel_from_bad_merge", "+=", "1", "\n", "", "break", "\n", "", "if", "not", "found2", ":", "\n", "                        ", "was_merge", "=", "0", "\n", "prevPredNodeIds", "=", "gtGroups2Pred", "[", "giter", "-", "1", "]", "[", "gtGId2", "]", "\n", "for", "prevPredNodeId", "in", "prevPredNodeIds", ":", "\n", "#find all edges to see if it was merged", "\n", "                            ", "for", "ei", ",", "(", "n1", ",", "n2", ")", "in", "enumerate", "(", "allEdgeIndexes", "[", "giter", "-", "1", "]", ")", ":", "\n", "                                ", "if", "n1", "==", "prevPredNodeId", "or", "n2", "==", "prevPredNodeId", ":", "\n", "                                    ", "if", "allMergeScores", "[", "giter", "-", "1", "]", "[", "ei", "]", ">", "self", ".", "model", ".", "mergeThresh", "[", "giter", "-", "1", "]", ":", "\n", "                                        ", "was_merge", "+=", "1", "\n", "break", "\n", "", "", "", "", "if", "giter", "==", "num_giter", ":", "\n", "                            ", "if", "was_merge", ">", "len", "(", "prevPredNodeIds", ")", ":", "\n", "                                ", "missed_rel_from_bad_merge", "+=", "1", "\n", "", "else", ":", "\n", "#was it wrong class?", "\n", "                                ", "if", "noClassFound2", "and", "(", "found1", "or", "noClassFound1", ")", ":", "\n", "                                    ", "missed_rel_from_misclass", "+=", "1", "\n", "", "else", ":", "\n", "                                    ", "missed_rel_from_poor_alignement", "+=", "1", "\n", "", "", "", "else", ":", "\n", "                            ", "assert", "(", "was_merge", "==", "len", "(", "prevPredNodeIds", ")", ")", "\n", "missed_rel_from_bad_merge", "+=", "1", "\n", "", "break", "\n", "\n", "", "predGroups1", "=", "gtGroups2Pred", "[", "giter", "]", "[", "gtGId1", "]", "\n", "predGroups2", "=", "gtGroups2Pred", "[", "giter", "]", "[", "gtGId2", "]", "\n", "\n", "if", "len", "(", "predGroups1", ")", "==", "0", ":", "\n", "#bad grouping on prev iter. Let's double check that", "\n", "                        ", "was_group", "=", "0", "\n", "prevPredNodeIds", "=", "gtGroups2Pred", "[", "giter", "-", "1", "]", "[", "gtGId1", "]", "\n", "for", "prevPredNodeId", "in", "prevPredNodeIds", ":", "\n", "#find all edges to see if it was groupd", "\n", "                            ", "for", "ei", ",", "(", "n1", ",", "n2", ")", "in", "enumerate", "(", "allEdgeIndexes", "[", "giter", "-", "1", "]", ")", ":", "\n", "                                ", "if", "n1", "==", "prevPredNodeId", "or", "n2", "==", "prevPredNodeId", ":", "\n", "                                    ", "if", "allGroupScores", "[", "giter", "-", "1", "]", "[", "ei", "]", ">", "self", ".", "model", ".", "groupThresh", "[", "giter", "-", "1", "]", ":", "\n", "                                        ", "was_group", "+=", "1", "\n", "break", "\n", "", "", "", "", "assert", "(", "was_group", "==", "len", "(", "prevPredNodeIds", ")", ")", "\n", "missed_rel_from_bad_group", "+=", "1", "\n", "break", "\n", "", "if", "len", "(", "predGroups2", ")", "==", "0", ":", "\n", "#bad grouping on prev iter. Let's double check that", "\n", "                        ", "was_group", "=", "0", "\n", "prevPredNodeIds", "=", "gtGroups2Pred", "[", "giter", "-", "1", "]", "[", "gtGId2", "]", "\n", "for", "prevPredNodeId", "in", "prevPredNodeIds", ":", "\n", "#find all edges to see if it was groupd", "\n", "                            ", "for", "ei", ",", "(", "n1", ",", "n2", ")", "in", "enumerate", "(", "allEdgeIndexes", "[", "giter", "-", "1", "]", ")", ":", "\n", "                                ", "if", "n1", "==", "prevPredNodeId", "or", "n2", "==", "prevPredNodeId", ":", "\n", "                                    ", "if", "allGroupScores", "[", "giter", "-", "1", "]", "[", "ei", "]", ">", "self", ".", "model", ".", "groupThresh", "[", "giter", "-", "1", "]", ":", "\n", "                                        ", "was_group", "+=", "1", "\n", "break", "\n", "", "", "", "", "assert", "(", "was_group", "==", "len", "(", "prevPredNodeIds", ")", ")", "\n", "missed_rel_from_bad_group", "+=", "1", "\n", "break", "\n", "\n", "\n", "", "edge_present", "=", "False", "\n", "for", "ei", ",", "(", "n1", ",", "n2", ")", "in", "enumerate", "(", "allEdgeIndexes", "[", "giter", "]", ")", ":", "\n", "                        ", "if", "(", "n1", "in", "predGroups1", "and", "n2", "in", "predGroups2", ")", "or", "(", "n2", "in", "predGroups1", "and", "n1", "in", "predGroups2", ")", ":", "\n", "                            ", "edge_present", "=", "True", "\n", "break", "\n", "", "", "if", "not", "edge_present", ":", "\n", "#we have it's nodes, so it must have been dropped as an edge", "\n", "                        ", "if", "giter", "==", "0", ":", "\n", "                            ", "missed_rel_from_missed_prop", "+=", "1", "\n", "", "else", ":", "\n", "#it must have been dropped in the previous iteration. Double check this is right", "\n", "                            ", "prevEdgePred", "=", "[", "]", "\n", "prevPredGroups1", "=", "gtGroups2Pred", "[", "giter", "-", "1", "]", "[", "gtGId1", "]", "\n", "prevPredGroups2", "=", "gtGroups2Pred", "[", "giter", "-", "1", "]", "[", "gtGId2", "]", "\n", "for", "ei", ",", "(", "n1", ",", "n2", ")", "in", "enumerate", "(", "allEdgeIndexes", "[", "giter", "-", "1", "]", ")", ":", "\n", "                                ", "if", "(", "n1", "in", "prevPredGroups1", "and", "n2", "in", "prevPredGroups2", ")", "or", "(", "n2", "in", "prevPredGroups1", "and", "n1", "in", "prevPredGroups2", ")", ":", "\n", "                                    ", "prevEdgePred", ".", "append", "(", "allEdgeScores", "[", "giter", "-", "1", "]", "[", "ei", "]", ">", "self", ".", "model", ".", "keepEdgeThresh", "[", "giter", "-", "1", "]", ")", "\n", "", "", "missed_rel_from_pruned_edge", "[", "giter", "-", "1", "]", "+=", "1", "\n", "\n", "", "break", "\n", "\n", "", "", "", "", "for", "pei", ",", "pn1", ",", "pn2", ",", "gtGId1", ",", "gtGId2", "in", "false_pos_edges", ":", "\n", "#is it single/isolated? (are there any connected predicted edges?)", "\n", "            ", "is_single", "=", "True", "\n", "for", "n1", ",", "n2", "in", "finalEdgeIndexes", ":", "\n", "                ", "if", "(", "pn1", "==", "n1", "and", "pn2", "!=", "n2", ")", "or", "(", "pn1", "==", "n2", "and", "pn2", "!=", "n1", ")", "or", "(", "pn2", "==", "n1", "and", "pn1", "!=", "n2", ")", "or", "(", "pn2", "==", "n2", "and", "pn1", "!=", "n1", ")", ":", "\n", "                    ", "is_single", "=", "False", "\n", "break", "\n", "", "", "if", "is_single", ":", "\n", "                ", "false_pos_is_single", "+=", "1", "\n", "\n", "\n", "", "impure_group", "=", "False", "\n", "if", "len", "(", "finalPredGroups", "[", "pn1", "]", ")", ">", "1", "or", "len", "(", "finalPredGroups", "[", "pn2", "]", ")", ">", "1", "or", "(", "gtGId1", "!=", "-", "1", "and", "len", "(", "gtGroups", "[", "gtGId1", "]", ")", ">", "1", ")", "or", "(", "gtGId2", "!=", "-", "1", "and", "len", "(", "gtGroups", "[", "gtGId2", "]", ")", ">", "1", ")", ":", "\n", "                ", "false_pos_group_involved", "+=", "1", "\n", "\n", "if", "(", "finalNoClassPurity", "[", "pn1", "]", "<", "0.99", "and", "len", "(", "finalPredGroups", "[", "pn1", "]", ")", ">", "1", ")", "or", "(", "finalNoClassPurity", "[", "pn2", "]", "<", "0.99", "and", "len", "(", "finalPredGroups", "[", "pn2", "]", ")", ">", "1", ")", ":", "\n", "                    ", "false_pos_inpure_group", "+=", "1", "\n", "impure_group", "=", "True", "\n", "#print('fp group {}({}) -- {}({})'.format(bb_centers[finalPredGroups[pn1][0]],finalNoClassPurity[pn1],bb_centers[finalPredGroups[pn2][0]],finalNoClassPurity[pn2]))", "\n", "#import pdb;pdb.set_trace()", "\n", "\n", "\n", "#is there a bad detection? or merge? These are hard to tell apart", "\n", "#It's a bad merge if it would fine without a given detection", "\n", "#it's a bad detection if there is no way to have combine detected elements to match", "\n", "", "", "if", "gtGId1", "==", "-", "1", "or", "gtGId2", "==", "-", "2", ":", "\n", "                ", "new_gt1", "=", "noClassPredGroup2GT", "[", "pn1", "]", "\n", "new_gt2", "=", "noClassPredGroup2GT", "[", "pn2", "]", "\n", "if", "new_gt1", "!=", "-", "1", "and", "new_gt2", "!=", "-", "1", "and", "(", "min", "(", "new_gt1", ",", "new_gt2", ")", ",", "max", "(", "new_gt1", ",", "new_gt2", ")", ")", "in", "gtGroupAdj", ":", "\n", "                    ", "false_pos_from_bad_class", "+=", "1", "\n", "", "elif", "not", "impure_group", "and", "(", "new_gt1", "==", "-", "1", "or", "new_gt2", "==", "-", "1", ")", ":", "\n", "                    ", "false_pos_bad_node", "+=", "1", "\n", "#print('fp group {} -- {}'.format(bb_centers[finalPredGroups[pn1][0]],bb_centers[finalPredGroups[pn2][0]]))", "\n", "", "elif", "not", "impure_group", ":", "\n", "                    ", "false_pos_with_misclassed_nodes", "+=", "1", "\n", "", "", "elif", "not", "impure_group", ":", "\n", "                ", "false_pos_with_good_nodes", "+=", "1", "\n", "\n", "#TODO, chickening out and just saying \"bad node\"", "\n", "\n", "", "", "num_true_pos", "=", "len", "(", "true_pos_distances", ")", "\n", "num_false_pos", "=", "len", "(", "false_pos_distances", ")", "\n", "num_false_neg", "=", "len", "(", "missed_rels", ")", "\n", "num_pos", "=", "num_true_pos", "+", "num_false_pos", "\n", "\n", "\n", "self", ".", "characterization_sum", "[", "'num_true_pos'", "]", "+=", "num_true_pos", "\n", "self", ".", "characterization_sum", "[", "'num_false_pos'", "]", "+=", "num_false_pos", "\n", "self", ".", "characterization_sum", "[", "'num_false_neg'", "]", "+=", "num_false_neg", "\n", "\n", "self", ".", "characterization_sum", "[", "'num_header_rel_true_pos'", "]", "+=", "hit_header_rels", "\n", "self", ".", "characterization_sum", "[", "'num_header_rel_false_pos'", "]", "+=", "false_pos_consistent_header_rels", "\n", "self", ".", "characterization_sum", "[", "'num_header_rel_false_neg'", "]", "+=", "missed_header_rels", "\n", "self", ".", "characterization_sum", "[", "'num_question_rel_true_pos'", "]", "+=", "hit_question_rels", "\n", "self", ".", "characterization_sum", "[", "'num_misc_rel_true_pos'", "]", "+=", "hit_question_rels", "\n", "self", ".", "characterization_sum", "[", "'num_question_rel_false_pos'", "]", "+=", "false_pos_consistent_question_rels", "\n", "self", ".", "characterization_sum", "[", "'num_question_rel_false_neg'", "]", "+=", "missed_question_rels", "\n", "self", ".", "characterization_sum", "[", "'num_misc_rel_false_neg'", "]", "+=", "missed_misc_rels", "\n", "\n", "self", ".", "characterization_sum", "[", "'false_pos_is_single'", "]", "+=", "false_pos_is_single", "\n", "self", ".", "characterization_sum", "[", "'false_pos_group_involved'", "]", "+=", "false_pos_group_involved", "\n", "self", ".", "characterization_sum", "[", "'false_pos_inpure_group'", "]", "+=", "false_pos_inpure_group", "\n", "self", ".", "characterization_sum", "[", "'false_pos_from_bad_class'", "]", "+=", "false_pos_from_bad_class", "\n", "self", ".", "characterization_sum", "[", "'false_pos_bad_node'", "]", "+=", "false_pos_bad_node", "\n", "self", ".", "characterization_sum", "[", "'false_pos_with_good_nodes'", "]", "+=", "false_pos_with_good_nodes", "\n", "self", ".", "characterization_sum", "[", "'false_pos_with_misclassed_nodes'", "]", "+=", "false_pos_with_misclassed_nodes", "\n", "\n", "self", ".", "characterization_sum", "[", "'inconsistent_edges'", "]", "+=", "inconsistent_edges", "\n", "self", ".", "characterization_sum", "[", "'false_pos_consistent_header_rels'", "]", "+=", "false_pos_consistent_header_rels", "\n", "self", ".", "characterization_sum", "[", "'false_pos_consistent_question_rels'", "]", "+=", "false_pos_consistent_question_rels", "\n", "#self.characterization_sum['missed_header_rels']+=missed_header_rels", "\n", "#self.characterization_sum['missed_question_rels']+=missed_question_rels", "\n", "#self.characterization_sum['hit_header_rels']+=hit_header_rels", "\n", "#self.characterization_sum['hit_question_rels']+=hit_question_rels", "\n", "\n", "self", ".", "characterization_sum", "[", "'double_rel_pred'", "]", "+=", "double_rel_pred", "\n", "self", ".", "characterization_sum", "[", "'missed_rel_was_single'", "]", "+=", "missed_rel_was_single", "\n", "\n", "\n", "self", ".", "characterization_sum", "[", "'missed_rel_from_bad_detection'", "]", "+=", "missed_rel_from_bad_detection", "\n", "self", ".", "characterization_sum", "[", "'missed_rel_from_bad_merge'", "]", "+=", "missed_rel_from_bad_merge", "\n", "self", ".", "characterization_sum", "[", "'missed_rel_from_missed_prop'", "]", "+=", "missed_rel_from_missed_prop", "\n", "self", ".", "characterization_sum", "[", "'missed_rel_from_bad_group'", "]", "+=", "missed_rel_from_bad_group", "\n", "self", ".", "characterization_sum", "[", "'missed_rel_from_poor_alignement'", "]", "+=", "missed_rel_from_poor_alignement", "\n", "self", ".", "characterization_sum", "[", "'missed_rel_from_misclass'", "]", "+=", "missed_rel_from_misclass", "\n", "\n", "self", ".", "characterization_sum", "[", "'total_merges'", "]", "+=", "self", ".", "model", ".", "merges_performed", "\n", "\n", "\n", "self", ".", "characterization_form", "[", "'false_pos_is_single'", "]", ".", "append", "(", "false_pos_is_single", "/", "num_false_pos", "if", "num_false_pos", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'false_pos_group_involved'", "]", ".", "append", "(", "false_pos_group_involved", "/", "num_false_pos", "if", "num_false_pos", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'false_pos_inpure_group'", "]", ".", "append", "(", "false_pos_inpure_group", "/", "num_false_pos", "if", "num_false_pos", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'false_pos_from_bad_class'", "]", ".", "append", "(", "false_pos_from_bad_class", "/", "num_false_pos", "if", "num_false_pos", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'false_pos_bad_node'", "]", ".", "append", "(", "false_pos_bad_node", "/", "num_false_pos", "if", "num_false_pos", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'false_pos_with_good_nodes'", "]", ".", "append", "(", "false_pos_with_good_nodes", "/", "num_false_pos", "if", "num_false_pos", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'false_pos_with_misclassed_nodes'", "]", ".", "append", "(", "false_pos_with_misclassed_nodes", "/", "num_false_pos", "if", "num_false_pos", ">", "0", "else", "0", ")", "\n", "assert", "(", "inconsistent_edges", "<=", "num_pos", ")", "\n", "self", ".", "characterization_form", "[", "'inconsistent_edges'", "]", ".", "append", "(", "inconsistent_edges", "/", "(", "num_pos", ")", "if", "(", "num_pos", ")", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'false_pos_consistent_header_rels'", "]", ".", "append", "(", "false_pos_consistent_header_rels", "/", "num_false_pos", "if", "num_false_pos", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'false_pos_consistent_question_rels'", "]", ".", "append", "(", "false_pos_consistent_question_rels", "/", "num_false_pos", "if", "num_false_pos", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'missed_header_rels'", "]", ".", "append", "(", "missed_header_rels", "/", "num_false_neg", "if", "num_false_neg", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'missed_question_rels'", "]", ".", "append", "(", "missed_question_rels", "/", "num_false_neg", "if", "num_false_neg", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'missed_misc_rels'", "]", ".", "append", "(", "missed_misc_rels", "/", "num_false_neg", "if", "num_false_neg", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'hit_header_rels'", "]", ".", "append", "(", "hit_header_rels", "/", "num_true_pos", "if", "num_true_pos", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'hit_question_rels'", "]", ".", "append", "(", "hit_question_rels", "/", "num_true_pos", "if", "num_true_pos", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'hit_misc_rels'", "]", ".", "append", "(", "hit_misc_rels", "/", "num_true_pos", "if", "num_true_pos", ">", "0", "else", "0", ")", "\n", "\n", "self", ".", "characterization_form", "[", "'double_rel_pred'", "]", ".", "append", "(", "double_rel_pred", "/", "num_pos", "if", "num_pos", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'missed_rel_was_single'", "]", ".", "append", "(", "missed_rel_was_single", "/", "num_false_neg", "if", "num_false_neg", ">", "0", "else", "0", ")", "\n", "\n", "\n", "self", ".", "characterization_form", "[", "'missed_rel_from_bad_detection'", "]", ".", "append", "(", "missed_rel_from_bad_detection", "/", "num_false_neg", "if", "num_false_neg", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'missed_rel_from_bad_merge'", "]", ".", "append", "(", "missed_rel_from_bad_merge", "/", "num_false_neg", "if", "num_false_neg", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'missed_rel_from_missed_prop'", "]", ".", "append", "(", "missed_rel_from_missed_prop", "/", "num_false_neg", "if", "num_false_neg", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'missed_rel_from_bad_group'", "]", ".", "append", "(", "missed_rel_from_bad_group", "/", "num_false_neg", "if", "num_false_neg", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'missed_rel_from_poor_alignement'", "]", ".", "append", "(", "missed_rel_from_poor_alignement", "/", "num_false_neg", "if", "num_false_neg", ">", "0", "else", "0", ")", "\n", "self", ".", "characterization_form", "[", "'missed_rel_from_misclass'", "]", ".", "append", "(", "missed_rel_from_misclass", "/", "num_false_neg", "if", "num_false_neg", ">", "0", "else", "0", ")", "\n", "\n", "all_sum", "=", "0", "\n", "for", "giter", ",", "missed", "in", "missed_rel_from_pruned_edge", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "characterization_sum", "[", "'missed_rel_from_pruned_edge_{}'", ".", "format", "(", "giter", ")", "]", "+=", "missed", "\n", "self", ".", "characterization_form", "[", "'missed_rel_from_pruned_edge_{}'", ".", "format", "(", "giter", ")", "]", ".", "append", "(", "missed", "/", "num_false_neg", ")", "\n", "all_sum", "+=", "missed", "\n", "", "self", ".", "characterization_sum", "[", "'missed_rel_from_pruned_edge_all'", "]", "+=", "all_sum", "\n", "self", ".", "characterization_form", "[", "'missed_rel_from_pruned_edge_all'", "]", ".", "append", "(", "all_sum", "/", "num_false_neg", "if", "num_false_neg", ">", "0", "else", "0", ")", "\n", "\n", "self", ".", "characterization_hist", "[", "'true_pos_distances'", "]", "+=", "true_pos_distances", "\n", "self", ".", "characterization_hist", "[", "'false_pos_distances'", "]", "+=", "false_pos_distances", "\n", "self", ".", "characterization_hist", "[", "'true_pos_all_densities'", "]", "+=", "true_pos_all_densities", "\n", "self", ".", "characterization_hist", "[", "'false_pos_all_densities'", "]", "+=", "false_pos_all_densities", "\n", "self", ".", "characterization_hist", "[", "'true_pos_keep_scores'", "]", "+=", "true_pos_keep_scores", "\n", "self", ".", "characterization_hist", "[", "'false_pos_keep_scores'", "]", "+=", "false_pos_keep_scores", "\n", "self", ".", "characterization_hist", "[", "'true_pos_rel_scores'", "]", "+=", "true_pos_rel_scores", "\n", "self", ".", "characterization_hist", "[", "'false_pos_rel_scores'", "]", "+=", "false_pos_rel_scores", "\n", "#@#####", "\n", "return", "\n", "#######", "\n", "\n", "print", "(", "'true positives = {}'", ".", "format", "(", "num_true_pos", ")", ")", "\n", "print", "(", "'false positives = {}'", ".", "format", "(", "num_false_pos", ")", ")", "\n", "print", "(", "'false negatives = {}'", ".", "format", "(", "num_false_neg", ")", ")", "\n", "\n", "print", "(", "'false_pos_is_single={}'", ".", "format", "(", "false_pos_is_single", ")", ")", "\n", "print", "(", "'false_pos_group_involved={}'", ".", "format", "(", "false_pos_group_involved", ")", ")", "\n", "print", "(", "'false_pos_inpure_group={}'", ".", "format", "(", "false_pos_inpure_group", ")", ")", "\n", "print", "(", "'false_pos_from_bad_class={}'", ".", "format", "(", "false_pos_from_bad_class", ")", ")", "\n", "print", "(", "'false_pos_bad_node={}'", ".", "format", "(", "false_pos_bad_node", ")", ")", "\n", "print", "(", "'false_pos_with_good_nodes={}'", ".", "format", "(", "false_pos_with_good_nodes", ")", ")", "\n", "print", "(", "'false_pos_with_misclassed_nodes={}'", ".", "format", "(", "false_pos_with_misclassed_nodes", ")", ")", "\n", "\n", "print", "(", "'inconsistent_edges={}'", ".", "format", "(", "inconsistent_edges", ")", ")", "\n", "print", "(", "'false_pos_consistent_header_rels={}'", ".", "format", "(", "false_pos_consistent_header_rels", ")", ")", "\n", "print", "(", "'false_pos_consistent_question_rels={}'", ".", "format", "(", "false_pos_consistent_question_rels", ")", ")", "\n", "print", "(", "'missed_header_rels={}'", ".", "format", "(", "missed_header_rels", ")", ")", "\n", "print", "(", "'missed_question_rels={}'", ".", "format", "(", "missed_question_rels", ")", ")", "\n", "print", "(", "'hit_header_rels={}'", ".", "format", "(", "hit_header_rels", ")", ")", "\n", "print", "(", "'hit_question_rels={}'", ".", "format", "(", "hit_question_rels", ")", ")", "\n", "\n", "print", "(", "'double_rel_pred={}'", ".", "format", "(", "double_rel_pred", ")", ")", "\n", "print", "(", "'missed_rel_was_single={}'", ".", "format", "(", "missed_rel_was_single", ")", ")", "\n", "\n", "all_sum", "=", "0", "\n", "for", "giter", ",", "missed", "in", "missed_rel_from_pruned_edge", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'missed_rel_from_pruned_edge[{}]={}'", ".", "format", "(", "giter", ",", "missed", ")", ")", "\n", "all_sum", "+=", "missed", "\n", "", "print", "(", "'missed_rel_from_pruned_edge[all]={}'", ".", "format", "(", "all_sum", ")", ")", "\n", "all_sum", "+=", "missed_rel_from_bad_detection", "+", "missed_rel_from_bad_merge", "+", "missed_rel_from_missed_prop", "+", "missed_rel_from_bad_group", "+", "missed_rel_from_poor_alignement", "+", "missed_rel_from_misclass", "\n", "#missed_rel_from_bad_detection/=len(missed_rels)", "\n", "print", "(", "'missed_rel_from_bad_detection={}'", ".", "format", "(", "missed_rel_from_bad_detection", ")", ")", "\n", "#missed_rel_from_bad_merge/=len(missed_rels)", "\n", "print", "(", "'missed_rel_from_bad_merge={}'", ".", "format", "(", "missed_rel_from_bad_merge", ")", ")", "\n", "#missed_rel_from_missed_prop/=len(missed_rels)", "\n", "print", "(", "'missed_rel_from_missed_prop={}'", ".", "format", "(", "missed_rel_from_missed_prop", ")", ")", "\n", "#missed_rel_from_bad_group/=len(missed_rels)", "\n", "print", "(", "'missed_rel_from_bad_group={}'", ".", "format", "(", "missed_rel_from_bad_group", ")", ")", "\n", "print", "(", "'missed_rel_from_poor_alignement={}'", ".", "format", "(", "missed_rel_from_poor_alignement", ")", ")", "\n", "print", "(", "'missed_rel_from_misclass={}'", ".", "format", "(", "missed_rel_from_misclass", ")", ")", "\n", "\n", "print", "(", "'accounted missed={}, unaccounted missed={}'", ".", "format", "(", "all_sum", ",", "len", "(", "missed_rels", ")", "-", "all_sum", ")", ")", "\n", "\n", "plt", ".", "figure", "(", "1", ")", "\n", "#max_distance = max(true_pos_distances+false_pos_distances)", "\n", "#bins = np.linspace(0, max_distance, 10)", "\n", "plt", ".", "hist", "(", "[", "true_pos_distances", ",", "false_pos_distances", "]", ",", "bins", "=", "10", ",", "label", "=", "[", "'true_pos'", ",", "'false_pos'", "]", ")", "\n", "plt", ".", "xlabel", "(", "'distance'", ")", "\n", "plt", ".", "ylabel", "(", "'count'", ")", "\n", "plt", ".", "title", "(", "'rel_distances'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "\n", "plt", ".", "figure", "(", "2", ")", "\n", "#max_den = max(true_pos_all_densities+false_pos_all_densities)", "\n", "#bins = np.linspace(0, max_den, 5)", "\n", "plt", ".", "hist", "(", "[", "true_pos_all_densities", ",", "false_pos_all_densities", "]", ",", "bins", "=", "5", ",", "label", "=", "[", "'true_pos'", ",", "'false_pos'", "]", ")", "\n", "plt", ".", "xlabel", "(", "'density'", ")", "\n", "plt", ".", "ylabel", "(", "'count'", ")", "\n", "plt", ".", "title", "(", "'densities'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "\n", "plt", ".", "figure", "(", "3", ")", "\n", "plt", ".", "hist", "(", "[", "true_pos_keep_scores", ",", "false_pos_keep_scores", "]", ",", "bins", "=", "5", ",", "label", "=", "[", "'true_pos'", ",", "'false_pos'", "]", ")", "\n", "plt", ".", "xlabel", "(", "'score'", ")", "\n", "plt", ".", "ylabel", "(", "'count'", ")", "\n", "plt", ".", "title", "(", "'keep edge'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "\n", "plt", ".", "figure", "(", "4", ")", "\n", "plt", ".", "hist", "(", "[", "true_pos_rel_scores", ",", "false_pos_rel_scores", "]", ",", "bins", "=", "5", ",", "label", "=", "[", "'true_pos'", ",", "'false_pos'", "]", ")", "\n", "plt", ".", "xlabel", "(", "'score'", ")", "\n", "plt", ".", "ylabel", "(", "'count'", ")", "\n", "plt", ".", "title", "(", "'rel edge'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer.displayCharacterization": [[2378, 2476], ["print", "print", "print", "graph_pair_trainer.GraphPairTrainer.characterization_form.items", "print", "print", "print", "graph_pair_trainer.GraphPairTrainer.characterization_sum.items", "print", "print", "print", "print", "print", "graph_pair_trainer.GraphPairTrainer.characterization_sum.items", "matplotlib.figure", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.savefig", "matplotlib.figure", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.savefig", "matplotlib.figure", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.savefig", "matplotlib.figure", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "graph_pair_trainer.GraphPairTrainer.characterization_form.items", "print", "print", "print", "print", "matplotlib.figure", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.savefig", "print", "print", "numpy.mean"], "methods", ["None"], ["", "def", "displayCharacterization", "(", "self", ")", ":", "\n", "        ", "print", "(", "'\\n=============='", ")", "\n", "print", "(", "'Avg by form'", ")", "\n", "print", "(", "'=============='", ")", "\n", "for", "name", ",", "values", "in", "self", ".", "characterization_form", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'{}:\\t{:.3f}'", ".", "format", "(", "name", ",", "np", ".", "mean", "(", "values", ")", ")", ")", "\n", "\n", "\n", "", "print", "(", "'\\n=============='", ")", "\n", "print", "(", "'Total count'", ")", "\n", "print", "(", "'=============='", ")", "\n", "for", "name", ",", "value", "in", "self", ".", "characterization_sum", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'{}:\\t{:.3f}'", ".", "format", "(", "name", ",", "value", ")", ")", "\n", "\n", "", "print", "(", "'\\n=============='", ")", "\n", "print", "(", "'Total portions'", ")", "\n", "print", "(", "'=============='", ")", "\n", "num_true_pos", "=", "self", ".", "characterization_sum", "[", "'num_true_pos'", "]", "\n", "num_false_pos", "=", "self", ".", "characterization_sum", "[", "'num_false_pos'", "]", "\n", "num_false_neg", "=", "self", ".", "characterization_sum", "[", "'num_false_neg'", "]", "\n", "num_pos", "=", "num_true_pos", "+", "num_false_pos", "\n", "print", "(", "'precision:\\t{:.3f}'", ".", "format", "(", "num_true_pos", "/", "num_pos", ")", ")", "\n", "print", "(", "'recall:\\t{:.3f}'", ".", "format", "(", "num_true_pos", "/", "(", "num_true_pos", "+", "num_false_neg", ")", ")", ")", "\n", "del", "self", ".", "characterization_sum", "[", "'num_true_pos'", "]", "\n", "del", "self", ".", "characterization_sum", "[", "'num_false_pos'", "]", "\n", "del", "self", ".", "characterization_sum", "[", "'num_false_neg'", "]", "\n", "for", "a", "in", "[", "'header'", ",", "'question'", "]", ":", "\n", "            ", "a_num_true_pos", "=", "self", ".", "characterization_sum", "[", "'num_{}_rel_true_pos'", ".", "format", "(", "a", ")", "]", "\n", "a_num_false_pos", "=", "self", ".", "characterization_sum", "[", "'num_{}_rel_false_pos'", ".", "format", "(", "a", ")", "]", "\n", "a_num_false_neg", "=", "self", ".", "characterization_sum", "[", "'num_{}_rel_false_neg'", ".", "format", "(", "a", ")", "]", "\n", "a_num_pos", "=", "a_num_true_pos", "+", "a_num_false_pos", "\n", "print", "(", "'{}_rel_precision:\\t{:.3f}'", ".", "format", "(", "a", ",", "a_num_true_pos", "/", "a_num_pos", ")", ")", "\n", "print", "(", "'{}_rel_recall:\\t{:.3f}'", ".", "format", "(", "a", ",", "a_num_true_pos", "/", "(", "a_num_true_pos", "+", "a_num_false_neg", ")", ")", ")", "\n", "del", "self", ".", "characterization_sum", "[", "'num_{}_rel_true_pos'", ".", "format", "(", "a", ")", "]", "\n", "del", "self", ".", "characterization_sum", "[", "'num_{}_rel_false_pos'", ".", "format", "(", "a", ")", "]", "\n", "del", "self", ".", "characterization_sum", "[", "'num_{}_rel_false_neg'", ".", "format", "(", "a", ")", "]", "\n", "", "for", "name", ",", "value", "in", "self", ".", "characterization_sum", ".", "items", "(", ")", ":", "\n", "            ", "if", "'false_neg'", "in", "name", "or", "'missed'", "in", "name", ":", "\n", "                ", "divide", "=", "num_false_neg", "\n", "", "elif", "'false_pos'", "in", "name", ":", "\n", "                ", "divide", "=", "num_false_pos", "\n", "", "elif", "'hit'", "in", "name", ":", "\n", "                ", "divide", "=", "num_true_pos", "\n", "", "else", ":", "\n", "                ", "divide", "=", "num_pos", "\n", "", "if", "divide", "!=", "0", ":", "\n", "                ", "print", "(", "'{}:\\t{:.3f}'", ".", "format", "(", "name", ",", "value", "/", "divide", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'{}:\\t{}/{}'", ".", "format", "(", "name", ",", "value", ",", "divide", ")", ")", "\n", "\n", "", "", "plt", ".", "figure", "(", "1", ")", "\n", "#max_distance = max(true_pos_distances+false_pos_distances)", "\n", "#bins = np.linspace(0, max_distance, 10)", "\n", "plt", ".", "hist", "(", "[", "self", ".", "characterization_hist", "[", "'true_pos_distances'", "]", ",", "self", ".", "characterization_hist", "[", "'false_pos_distances'", "]", "]", ",", "bins", "=", "15", ",", "label", "=", "[", "'true_pos'", ",", "'false_pos'", "]", ")", "\n", "plt", ".", "xlabel", "(", "'distance'", ")", "\n", "plt", ".", "ylabel", "(", "'count'", ")", "\n", "plt", ".", "title", "(", "'rel_distances'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "\n", "plt", ".", "savefig", "(", "'characterization_distance.png'", ")", "\n", "\n", "plt", ".", "figure", "(", "2", ")", "\n", "#max_den = max(true_pos_all_densities+false_pos_all_densities)", "\n", "#bins = np.linspace(0, max_den, 5)", "\n", "plt", ".", "hist", "(", "[", "self", ".", "characterization_hist", "[", "'true_pos_all_densities'", "]", ",", "self", ".", "characterization_hist", "[", "'false_pos_all_densities'", "]", "]", ",", "bins", "=", "10", ",", "label", "=", "[", "'true_pos'", ",", "'false_pos'", "]", ")", "\n", "plt", ".", "xlabel", "(", "'density'", ")", "\n", "plt", ".", "ylabel", "(", "'count'", ")", "\n", "plt", ".", "title", "(", "'densities'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "\n", "plt", ".", "savefig", "(", "'characterization_density.png'", ")", "\n", "\n", "plt", ".", "figure", "(", "3", ")", "\n", "plt", ".", "hist", "(", "[", "self", ".", "characterization_hist", "[", "'true_pos_keep_scores'", "]", ",", "self", ".", "characterization_hist", "[", "'false_pos_keep_scores'", "]", "]", ",", "bins", "=", "10", ",", "label", "=", "[", "'true_pos'", ",", "'false_pos'", "]", ")", "\n", "plt", ".", "xlabel", "(", "'score'", ")", "\n", "plt", ".", "ylabel", "(", "'count'", ")", "\n", "plt", ".", "title", "(", "'keep edge'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "\n", "plt", ".", "savefig", "(", "'characterization_keep_score.png'", ")", "\n", "\n", "plt", ".", "figure", "(", "4", ")", "\n", "plt", ".", "hist", "(", "[", "self", ".", "characterization_hist", "[", "'true_pos_rel_scores'", "]", ",", "self", ".", "characterization_hist", "[", "'false_pos_rel_scores'", "]", "]", ",", "bins", "=", "10", ",", "label", "=", "[", "'true_pos'", ",", "'false_pos'", "]", ")", "\n", "plt", ".", "xlabel", "(", "'score'", ")", "\n", "plt", ".", "ylabel", "(", "'count'", ")", "\n", "plt", ".", "title", "(", "'rel edge'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "\n", "fignum", "=", "5", "\n", "for", "name", ",", "values", "in", "self", ".", "characterization_form", ".", "items", "(", ")", ":", "\n", "            ", "plt", ".", "figure", "(", "fignum", ")", "\n", "fignum", "+=", "1", "\n", "plt", ".", "hist", "(", "values", ",", "bins", "=", "10", ")", "\n", "plt", ".", "xlabel", "(", "name", ")", "\n", "plt", ".", "ylabel", "(", "'count'", ")", "\n", "plt", ".", "title", "(", "name", ")", "\n", "\n", "plt", ".", "savefig", "(", "'characterization_{}.png'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.maxRelScoreIsHit": [[22, 41], ["enumerate"], "function", ["None"], ["def", "maxRelScoreIsHit", "(", "child_groups", ",", "parent_groups", ",", "edgeIndexes", ",", "edgePred", ")", ":", "\n", "    ", "max_score", "=", "-", "1", "\n", "max_score_is_hit", "=", "False", "\n", "for", "ei", ",", "(", "pG0", ",", "pG1", ")", "in", "enumerate", "(", "edgeIndexes", ")", ":", "\n", "        ", "score", "=", "edgePred", "[", "ei", ",", "-", "1", ",", "1", "]", "\n", "if", "score", ">", "max_score", ":", "\n", "            ", "if", "pG0", "in", "child_groups", ":", "\n", "                ", "max_score", "=", "score", "\n", "if", "pG1", "in", "parent_groups", ":", "\n", "                    ", "max_score_is_hit", "=", "True", "\n", "", "else", ":", "\n", "                    ", "max_score_is_hit", "=", "False", "\n", "", "", "elif", "pG1", "in", "child_groups", ":", "\n", "                ", "max_score", "=", "score", "\n", "if", "pG0", "in", "parent_groups", ":", "\n", "                    ", "max_score_is_hit", "=", "True", "\n", "", "else", ":", "\n", "                    ", "max_score_is_hit", "=", "False", "\n", "", "", "", "", "return", "max_score_is_hit", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.__init__": [[23, 293], ["logging.getLogger", "os.path.join", "utils.util.ensure_dir", "json.dump", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "base_trainer.BaseTrainer.logger.warning", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "model.named_parameters", "AveragedModel", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "open", "base_trainer.BaseTrainer._resume_checkpoint", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "torch.device", "base_trainer.BaseTrainer.model.to", "len", "to_opt.append", "len", "to_opt.append", "len", "getattr", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "os.path.join", "any", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "str", "len", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "not_as_slow_params.append", "len", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "slower_params.append", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "slow_params.append", "min", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "type", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "discriminator_params.append", "main_params.append", "type", "enumerate", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "type", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "enumerate", "type", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "enumerate", "type", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "enumerate", "base_trainer.BaseTrainer.__init__.trueCycle"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.ensure_dir", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer._resume_checkpoint"], ["def", "__init__", "(", "self", ",", "model", ",", "loss", ",", "metrics", ",", "resume", ",", "config", ",", "train_logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "#if type(model) is tuple:", "\n", "#    self.model,self.model_ref", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model_ref", "=", "model", "\n", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "metrics", "=", "metrics", "\n", "self", ".", "name", "=", "config", "[", "'name'", "]", "\n", "self", ".", "logged", "=", "config", "[", "'super_computer'", "]", "if", "'super_computer'", "in", "config", "else", "False", "\n", "self", ".", "iterations", "=", "config", "[", "'trainer'", "]", "[", "'iterations'", "]", "\n", "self", ".", "val_step", "=", "config", "[", "'trainer'", "]", "[", "'val_step'", "]", "\n", "self", ".", "save_step", "=", "config", "[", "'trainer'", "]", "[", "'save_step'", "]", "\n", "self", ".", "save_step_minor", "=", "config", "[", "'trainer'", "]", "[", "'save_step_minor'", "]", "if", "'save_step_minor'", "in", "config", "[", "'trainer'", "]", "else", "None", "\n", "self", ".", "log_step", "=", "config", "[", "'trainer'", "]", "[", "'log_step'", "]", "\n", "self", ".", "verbosity", "=", "config", "[", "'trainer'", "]", "[", "'verbosity'", "]", "\n", "self", ".", "with_cuda", "=", "config", "[", "'cuda'", "]", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "config", "[", "'cuda'", "]", "and", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "'Warning: There\\'s no CUDA support on this machine, '", "\n", "'training is performed on CPU.'", ")", "\n", "", "elif", "config", "[", "'cuda'", "]", ":", "\n", "            ", "self", ".", "gpu", "=", "torch", ".", "device", "(", "'cuda:'", "+", "str", "(", "config", "[", "'gpu'", "]", ")", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gpu", "=", "None", "\n", "", "if", "'multiprocess'", "in", "config", "or", "'distributed'", "in", "config", ":", "\n", "            ", "self", ".", "model", "=", "DistributedDataParallel", "(", "\n", "self", ".", "model", ",", "\n", "find_unused_parameters", "=", "True", ")", "\n", "\n", "", "self", ".", "train_logger", "=", "train_logger", "\n", "if", "config", "[", "'optimizer_type'", "]", "!=", "\"none\"", ":", "\n", "            ", "main_params", "=", "[", "]", "\n", "slow_params", "=", "[", "]", "\n", "slower_params", "=", "[", "]", "\n", "not_as_slow_params", "=", "[", "]", "\n", "slow_param_names", "=", "config", "[", "'trainer'", "]", "[", "'slow_param_names'", "]", "if", "'slow_param_names'", "in", "config", "[", "'trainer'", "]", "else", "[", "]", "\n", "slower_param_names", "=", "config", "[", "'trainer'", "]", "[", "'slower_param_names'", "]", "if", "'slower_param_names'", "in", "config", "[", "'trainer'", "]", "else", "[", "]", "\n", "not_as_slow_param_names", "=", "config", "[", "'trainer'", "]", "[", "'not_as_slow_param_names'", "]", "if", "'not_as_slow_param_names'", "in", "config", "[", "'trainer'", "]", "else", "[", "]", "\n", "freeze_param_names", "=", "config", "[", "'trainer'", "]", "[", "'freeze_param_names'", "]", "if", "'freeze_param_names'", "in", "config", "[", "'trainer'", "]", "else", "[", "]", "\n", "only_params", "=", "config", "[", "'trainer'", "]", "[", "'only_params'", "]", "if", "'only_params'", "in", "config", "[", "'trainer'", "]", "else", "None", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "only_params", "is", "None", "or", "any", "(", "[", "p", "in", "name", "for", "p", "in", "only_params", "]", ")", ":", "\n", "                    ", "goSlow", "=", "False", "\n", "goSlower", "=", "False", "\n", "goNotAsSlow", "=", "False", "\n", "freeze", "=", "False", "\n", "for", "sp", "in", "slower_param_names", ":", "\n", "                        ", "if", "sp", "in", "name", ":", "\n", "                            ", "goSlower", "=", "True", "\n", "break", "\n", "", "", "for", "sp", "in", "not_as_slow_param_names", ":", "\n", "                        ", "if", "sp", "in", "name", ":", "\n", "                            ", "goNotAsSlow", "=", "True", "\n", "break", "\n", "", "", "for", "sp", "in", "slow_param_names", ":", "\n", "                        ", "if", "sp", "in", "name", ":", "\n", "                            ", "goSlow", "=", "True", "\n", "break", "\n", "", "", "for", "fp", "in", "freeze_param_names", ":", "\n", "                        ", "if", "fp", "in", "name", ":", "\n", "                            ", "freeze", "=", "True", "\n", "break", "\n", "", "", "if", "freeze", ":", "\n", "                        ", "pass", "\n", "", "elif", "goNotAsSlow", ":", "\n", "                        ", "not_as_slow_params", ".", "append", "(", "param", ")", "\n", "", "elif", "goSlower", ":", "\n", "                        ", "slower_params", ".", "append", "(", "param", ")", "\n", "", "elif", "goSlow", ":", "\n", "                        ", "slow_params", ".", "append", "(", "param", ")", "\n", "", "elif", "(", "'hwr'", "in", "name", "and", "self", ".", "hwr_frozen", ")", "or", "(", "'style_extractor'", "in", "name", "and", "self", ".", "style_frozen", ")", ":", "\n", "                        ", "pass", "\n", "", "elif", "'style_extractor'", "in", "name", "and", "self", ".", "curriculum", ".", "need_style_in_disc", ":", "\n", "                        ", "discriminator_params", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "                        ", "main_params", ".", "append", "(", "param", ")", "\n", "", "", "", "to_opt", "=", "[", "\n", "{", "'params'", ":", "main_params", "}", ",", "\n", "{", "'params'", ":", "slow_params", ",", "'lr'", ":", "config", "[", "'optimizer'", "]", "[", "'lr'", "]", "*", "0.1", "}", "]", "\n", "if", "len", "(", "not_as_slow_params", ")", ">", "0", ":", "\n", "                ", "to_opt", ".", "append", "(", "{", "'params'", ":", "not_as_slow_params", ",", "'lr'", ":", "config", "[", "'optimizer'", "]", "[", "'lr'", "]", "*", "0.5", "}", ")", "\n", "", "if", "len", "(", "slower_params", ")", ">", "0", ":", "\n", "                ", "to_opt", ".", "append", "(", "{", "'params'", ":", "slower_params", ",", "'lr'", ":", "config", "[", "'optimizer'", "]", "[", "'lr'", "]", "*", "0.01", "}", ")", "\n", "", "should_be_in_to_opt", "=", "2", "+", "(", "1", "if", "len", "(", "slower_param_names", ")", ">", "0", "else", "0", ")", "+", "(", "1", "if", "len", "(", "not_as_slow_param_names", ")", ">", "0", "else", "0", ")", "\n", "assert", "should_be_in_to_opt", "+", "len", "(", "to_opt", ")", "#help catch errors in param names", "\n", "self", ".", "optimizer", "=", "getattr", "(", "optim", ",", "config", "[", "'optimizer_type'", "]", ")", "(", "to_opt", ",", "\n", "**", "config", "[", "'optimizer'", "]", ")", "\n", "#self.optimizer = getattr(optim, config['optimizer_type'])(model.parameters(),", "\n", "\n", "\n", "\n", "", "self", ".", "swa", "=", "config", "[", "'trainer'", "]", "[", "'swa'", "]", "if", "'swa'", "in", "config", "[", "'trainer'", "]", "else", "(", "config", "[", "'trainer'", "]", "[", "'weight_averaging'", "]", "if", "'weight_averaging'", "in", "config", "[", "'trainer'", "]", "else", "False", ")", "\n", "if", "self", ".", "swa", ":", "\n", "            ", "self", ".", "swa_model", "=", "AveragedModel", "(", "self", ".", "model", ")", "#type(self.model)(config['model'])", "\n", "#if config['cuda']:", "\n", "#    self.swa_model = self.swa_model.to(self.gpu)", "\n", "self", ".", "swa_start", "=", "config", "[", "'trainer'", "]", "[", "'swa_start'", "]", "if", "'swa_start'", "in", "config", "[", "'trainer'", "]", "else", "config", "[", "'trainer'", "]", "[", "'weight_averaging_start'", "]", "\n", "#self.swa_c_iters = config['trainer']['swa_c_iters'] if 'swa_c_iters' in config['trainer'] else config['trainer']['weight_averaging_c_iters']", "\n", "self", ".", "swa_avg_every", "=", "config", "[", "'trainer'", "]", "[", "'swa_avg_every'", "]", "if", "'swa_avg_every'", "in", "config", "[", "'trainer'", "]", "else", "0", "\n", "assert", "(", "self", ".", "val_step", ">=", "self", ".", "swa_avg_every", ")", "#otherwise we'll start evaluating more than the (swa)model is updated", "\n", "\n", "\n", "\n", "", "self", ".", "useLearningSchedule", "=", "config", "[", "'trainer'", "]", "[", "'use_learning_schedule'", "]", "if", "'use_learning_schedule'", "in", "config", "[", "'trainer'", "]", "else", "False", "\n", "if", "self", ".", "useLearningSchedule", "==", "'LR_test'", ":", "\n", "            ", "start_lr", "=", "0.000001", "\n", "slope", "=", "(", "1", "-", "start_lr", ")", "/", "self", ".", "iterations", "\n", "lr_lambda", "=", "lambda", "step_num", ":", "start_lr", "+", "slope", "*", "step_num", "\n", "self", ".", "lr_schedule", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "self", ".", "optimizer", ",", "lr_lambda", ")", "\n", "", "elif", "self", ".", "useLearningSchedule", "==", "'cyclic'", ":", "#only decreasing", "\n", "            ", "min_lr_mul", "=", "config", "[", "'trainer'", "]", "[", "'min_lr_mul'", "]", "if", "'min_lr_mul'", "in", "config", "[", "'trainer'", "]", "else", "0.001", "\n", "cycle_size", "=", "config", "[", "'trainer'", "]", "[", "'cycle_size'", "]", "if", "'cycle_size'", "in", "config", "[", "'trainer'", "]", "else", "500", "\n", "lr_lambda", "=", "lambda", "step_num", ":", "(", "1", "-", "(", "1", "-", "min_lr_mul", ")", "*", "(", "(", "step_num", "-", "1", ")", "%", "cycle_size", ")", "/", "(", "cycle_size", "-", "1", ")", ")", "\n", "self", ".", "lr_schedule", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "self", ".", "optimizer", ",", "lr_lambda", ")", "\n", "", "elif", "self", ".", "useLearningSchedule", "==", "'cyclic-full'", ":", "\n", "            ", "min_lr_mul", "=", "config", "[", "'trainer'", "]", "[", "'min_lr_mul'", "]", "if", "'min_lr_mul'", "in", "config", "[", "'trainer'", "]", "else", "0.25", "\n", "cycle_size", "=", "config", "[", "'trainer'", "]", "[", "'cycle_size'", "]", "if", "'cycle_size'", "in", "config", "[", "'trainer'", "]", "else", "500", "\n", "def", "trueCycle", "(", "step_num", ")", ":", "\n", "                ", "cycle_num", "=", "step_num", "//", "cycle_size", "\n", "if", "cycle_num", "%", "2", "==", "0", ":", "#even, rising", "\n", "                    ", "return", "(", "(", "1", "-", "min_lr_mul", ")", "*", "(", "(", "step_num", ")", "%", "cycle_size", ")", "/", "(", "cycle_size", "-", "1", ")", ")", "+", "min_lr_mul", "\n", "", "else", ":", "#odd", "\n", "                    ", "return", "(", "1", "-", "(", "1", "-", "min_lr_mul", ")", "*", "(", "(", "step_num", ")", "%", "cycle_size", ")", "/", "(", "cycle_size", "-", "1", ")", ")", "\n", "", "", "self", ".", "lr_schedule", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "self", ".", "optimizer", ",", "trueCycle", ")", "\n", "", "elif", "self", ".", "useLearningSchedule", "==", "'cyclic-decay'", ":", "\n", "            ", "min_lr_mul", "=", "config", "[", "'trainer'", "]", "[", "'min_lr_mul'", "]", "if", "'min_lr_mul'", "in", "config", "[", "'trainer'", "]", "else", "0.25", "\n", "cycle_size", "=", "config", "[", "'trainer'", "]", "[", "'cycle_size'", "]", "if", "'cycle_size'", "in", "config", "[", "'trainer'", "]", "else", "500", "\n", "decay_rate", "=", "config", "[", "'trainer'", "]", "[", "'decay_rate'", "]", "if", "'decay_rate'", "in", "config", "[", "'trainer'", "]", "else", "0.99994", "#saturates at about 50000 iterations", "\n", "def", "decayCycle", "(", "step_num", ")", ":", "\n", "                ", "cycle_num", "=", "step_num", "//", "cycle_size", "\n", "decay", "=", "decay_rate", "**", "step_num", "\n", "if", "cycle_num", "%", "2", "==", "0", ":", "#even, rising", "\n", "                    ", "return", "decay", "*", "(", "(", "1", "-", "min_lr_mul", ")", "*", "(", "(", "step_num", ")", "%", "cycle_size", ")", "/", "(", "cycle_size", "-", "1", ")", ")", "+", "min_lr_mul", "\n", "", "else", ":", "#odd", "\n", "                    ", "return", "-", "decay", "*", "(", "1", "-", "min_lr_mul", ")", "*", "(", "(", "step_num", ")", "%", "cycle_size", ")", "/", "(", "cycle_size", "-", "1", ")", "+", "1", "-", "(", "1", "-", "min_lr_mul", ")", "*", "(", "1", "-", "decay", ")", "\n", "", "", "self", ".", "lr_schedule", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "self", ".", "optimizer", ",", "decayCycle", ")", "\n", "", "elif", "self", ".", "useLearningSchedule", "==", "'1cycle'", ":", "\n", "            ", "low_lr_mul", "=", "config", "[", "'trainer'", "]", "[", "'low_lr_mul'", "]", "if", "'low_lr_mul'", "in", "config", "[", "'trainer'", "]", "else", "0.25", "\n", "min_lr_mul", "=", "config", "[", "'trainer'", "]", "[", "'min_lr_mul'", "]", "if", "'min_lr_mul'", "in", "config", "[", "'trainer'", "]", "else", "0.0001", "\n", "cycle_size", "=", "config", "[", "'trainer'", "]", "[", "'cycle_size'", "]", "if", "'cycle_size'", "in", "config", "[", "'trainer'", "]", "else", "1000", "\n", "iters_in_trailoff", "=", "self", ".", "iterations", "-", "(", "2", "*", "cycle_size", ")", "\n", "def", "oneCycle", "(", "step_num", ")", ":", "\n", "                ", "cycle_num", "=", "step_num", "//", "cycle_size", "\n", "if", "step_num", "<", "cycle_size", ":", "#rising", "\n", "                    ", "return", "(", "(", "1", "-", "low_lr_mul", ")", "*", "(", "(", "step_num", ")", "%", "cycle_size", ")", "/", "(", "cycle_size", "-", "1", ")", ")", "+", "low_lr_mul", "\n", "", "elif", "step_num", "<", "cycle_size", "*", "2", ":", "#falling", "\n", "                    ", "return", "(", "1", "-", "(", "1", "-", "low_lr_mul", ")", "*", "(", "(", "step_num", ")", "%", "cycle_size", ")", "/", "(", "cycle_size", "-", "1", ")", ")", "\n", "", "else", ":", "#trail off", "\n", "                    ", "t_step_num", "=", "step_num", "-", "(", "2", "*", "cycle_size", ")", "\n", "return", "low_lr_mul", "*", "(", "iters_in_trailoff", "-", "t_step_num", ")", "/", "iters_in_trailoff", "+", "min_lr_mul", "*", "t_step_num", "/", "iters_in_trailoff", "\n", "\n", "", "", "self", ".", "lr_schedule", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "self", ".", "optimizer", ",", "oneCycle", ")", "\n", "", "elif", "self", ".", "useLearningSchedule", "==", "'detector'", ":", "\n", "            ", "warmup_steps", "=", "config", "[", "'trainer'", "]", "[", "'warmup_steps'", "]", "if", "'warmup_steps'", "in", "config", "[", "'trainer'", "]", "else", "1000", "\n", "lr_lambda", "=", "lambda", "step_num", ":", "min", "(", "(", "step_num", "+", "1", ")", "**", "-", "0.3", ",", "(", "step_num", "+", "1", ")", "*", "warmup_steps", "**", "-", "1.3", ")", "\n", "self", ".", "lr_schedule", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "self", ".", "optimizer", ",", "lr_lambda", ")", "\n", "", "elif", "self", ".", "useLearningSchedule", "==", "'step'", ":", "\n", "            ", "steps", "=", "config", "[", "'trainer'", "]", "[", "'lr_steps'", "]", "\n", "assert", "(", "type", "(", "steps", ")", "is", "list", ")", "\n", "def", "stepLR", "(", "step_num", ")", ":", "\n", "                ", "mul", "=", "1", "\n", "for", "step", "in", "steps", ":", "\n", "                    ", "if", "step_num", ">=", "step", ":", "\n", "                        ", "mul", "*=", "0.1", "\n", "", "", "return", "mul", "\n", "", "self", ".", "lr_schedule", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "self", ".", "optimizer", ",", "stepLR", ")", "\n", "", "elif", "self", ".", "useLearningSchedule", "==", "'multi_rise'", ":", "\n", "            ", "steps", "=", "config", "[", "'trainer'", "]", "[", "'warmup_steps'", "]", "\n", "assert", "(", "type", "(", "steps", ")", "is", "list", ")", "\n", "steps", "=", "[", "0", "]", "+", "steps", "\n", "def", "riseLR", "(", "step_num", ")", ":", "\n", "                ", "for", "i", ",", "step", "in", "enumerate", "(", "steps", "[", "1", ":", "]", ")", ":", "\n", "                    ", "if", "step_num", "<", "step", ":", "\n", "                        ", "return", "(", "step_num", "-", "steps", "[", "i", "]", ")", "*", "(", "0.99", "/", "(", "step", "-", "steps", "[", "i", "]", ")", ")", "+", ".01", "\n", "", "", "return", "1.0", "\n", "", "self", ".", "lr_schedule", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "self", ".", "optimizer", ",", "riseLR", ")", "\n", "", "elif", "self", ".", "useLearningSchedule", "==", "'multi_rise then swa'", ":", "\n", "            ", "steps", "=", "config", "[", "'trainer'", "]", "[", "'warmup_steps'", "]", "\n", "warmup_cap", "=", "1.0", "\n", "swa_lr_mul", "=", "config", "[", "'trainer'", "]", "[", "'swa_lr_mul'", "]", "if", "'swa_lr_mul'", "in", "config", "[", "'trainer'", "]", "else", "0.001", "\n", "assert", "(", "type", "(", "steps", ")", "is", "list", ")", "\n", "steps", "=", "[", "0", "]", "+", "steps", "\n", "def", "riseLR", "(", "step_num", ")", ":", "\n", "                ", "if", "step_num", "<", "self", ".", "swa_start", ":", "\n", "                    ", "for", "i", ",", "step", "in", "enumerate", "(", "steps", "[", "1", ":", "]", ")", ":", "\n", "                        ", "if", "step_num", "<", "step", ":", "\n", "                            ", "return", "warmup_cap", "*", "(", "(", "step_num", "-", "steps", "[", "i", "]", ")", "*", "(", "0.99", "/", "(", "step", "-", "steps", "[", "i", "]", ")", ")", "+", ".01", ")", "\n", "", "", "return", "1.0", "\n", "", "else", ":", "\n", "                    ", "return", "swa_lr_mul", "\n", "", "", "self", ".", "lr_schedule", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "self", ".", "optimizer", ",", "riseLR", ")", "\n", "", "elif", "self", ".", "useLearningSchedule", "==", "'multi_rise then ramp_to_swa'", ":", "\n", "            ", "steps", "=", "config", "[", "'trainer'", "]", "[", "'warmup_steps'", "]", "\n", "down_steps", "=", "config", "[", "'trainer'", "]", "[", "'ramp_down_steps'", "]", "\n", "warmup_cap", "=", "1.0", "\n", "swa_lr_mul", "=", "config", "[", "'trainer'", "]", "[", "'swa_lr_mul'", "]", "if", "'swa_lr_mul'", "in", "config", "[", "'trainer'", "]", "else", "0.001", "\n", "assert", "(", "type", "(", "steps", ")", "is", "list", ")", "\n", "steps", "=", "[", "0", "]", "+", "steps", "\n", "def", "riseLR", "(", "step_num", ")", ":", "\n", "                ", "if", "step_num", "<", "self", ".", "swa_start", "-", "down_steps", ":", "\n", "                    ", "for", "i", ",", "step", "in", "enumerate", "(", "steps", "[", "1", ":", "]", ")", ":", "\n", "                        ", "if", "step_num", "<", "step", ":", "\n", "                            ", "return", "warmup_cap", "*", "(", "(", "step_num", "-", "steps", "[", "i", "]", ")", "*", "(", "0.99", "/", "(", "step", "-", "steps", "[", "i", "]", ")", ")", "+", ".01", ")", "\n", "", "", "return", "1.0", "\n", "", "elif", "step_num", "<", "self", ".", "swa_start", ":", "\n", "                    ", "return", "1", "-", "(", "1", "-", "swa_lr_mul", ")", "*", "(", "down_steps", "-", "(", "self", ".", "swa_start", "-", "step_num", ")", ")", "/", "down_steps", "\n", "", "else", ":", "\n", "                    ", "return", "swa_lr_mul", "\n", "", "", "self", ".", "lr_schedule", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "self", ".", "optimizer", ",", "riseLR", ")", "\n", "", "elif", "self", ".", "useLearningSchedule", "==", "'multi_rise with cyclic_full then swa'", ":", "\n", "            ", "steps", "=", "config", "[", "'trainer'", "]", "[", "'warmup_steps'", "]", "\n", "warmup_cap", "=", "config", "[", "'trainer'", "]", "[", "'warmup_cap'", "]", "\n", "min_lr_mul", "=", "config", "[", "'trainer'", "]", "[", "'min_lr_mul'", "]", "if", "'min_lr_mul'", "in", "config", "[", "'trainer'", "]", "else", "0.25", "\n", "cycle_size", "=", "config", "[", "'trainer'", "]", "[", "'cycle_size'", "]", "\n", "swa_lr_mul", "=", "config", "[", "'trainer'", "]", "[", "'swa_lr_mul'", "]", "if", "'swa_lr_mul'", "in", "config", "[", "'trainer'", "]", "else", "0.001", "\n", "def", "trueCycle", "(", "step_num", ")", ":", "\n", "                ", "cycle_num", "=", "step_num", "//", "cycle_size", "\n", "if", "cycle_num", "%", "2", "==", "0", ":", "#even, rising", "\n", "                    ", "return", "(", "(", "1", "-", "min_lr_mul", ")", "*", "(", "(", "step_num", ")", "%", "cycle_size", ")", "/", "(", "cycle_size", "-", "1", ")", ")", "+", "min_lr_mul", "\n", "", "else", ":", "#odd", "\n", "                    ", "return", "(", "1", "-", "(", "1", "-", "min_lr_mul", ")", "*", "(", "(", "step_num", ")", "%", "cycle_size", ")", "/", "(", "cycle_size", "-", "1", ")", ")", "\n", "", "", "assert", "(", "type", "(", "steps", ")", "is", "list", ")", "\n", "steps", "=", "[", "0", "]", "+", "steps", "\n", "def", "riseLR", "(", "step_num", ")", ":", "\n", "                ", "if", "step_num", "<", "self", ".", "swa_start", ":", "\n", "                    ", "for", "i", ",", "step", "in", "enumerate", "(", "steps", "[", "1", ":", "]", ")", ":", "\n", "                        ", "if", "step_num", "<", "step", ":", "\n", "                            ", "return", "warmup_cap", "*", "(", "(", "step_num", "-", "steps", "[", "i", "]", ")", "*", "(", "0.99", "/", "(", "step", "-", "steps", "[", "i", "]", ")", ")", "+", ".01", ")", "\n", "", "", "return", "trueCycle", "(", "step_num", ")", "\n", "", "else", ":", "\n", "                    ", "return", "swa_lr_mul", "\n", "", "", "self", ".", "lr_schedule", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "self", ".", "optimizer", ",", "riseLR", ")", "\n", "", "elif", "self", ".", "useLearningSchedule", "==", "'spike then swa'", ":", "\n", "            ", "warmup_steps", "=", "config", "[", "'trainer'", "]", "[", "'warmup_steps'", "]", "if", "'warmup_steps'", "in", "config", "[", "'trainer'", "]", "else", "1000", "\n", "swa_lr_mul", "=", "config", "[", "'trainer'", "]", "[", "'swa_lr_mul'", "]", "if", "'swa_lr_mul'", "in", "config", "[", "'trainer'", "]", "else", "0.1", "\n", "def", "spikeThenSWA", "(", "step_num", ")", ":", "\n", "                ", "if", "step_num", "<", "self", ".", "swa_start", ":", "\n", "                    ", "return", "min", "(", "(", "max", "(", "0.000001", ",", "step_num", "-", "(", "warmup_steps", "-", "3", ")", ")", "/", "100", ")", "**", "-", "0.1", ",", "step_num", "*", "(", "1.485", "/", "warmup_steps", ")", "+", ".01", ")", "\n", "", "else", ":", "\n", "                    ", "return", "swa_lr_mul", "\n", "", "", "self", ".", "lr_schedule", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "self", ".", "optimizer", ",", "spikeThenSWA", ")", "\n", "", "elif", "self", ".", "useLearningSchedule", "is", "True", ":", "\n", "            ", "warmup_steps", "=", "config", "[", "'trainer'", "]", "[", "'warmup_steps'", "]", "if", "'warmup_steps'", "in", "config", "[", "'trainer'", "]", "else", "1000", "\n", "#lr_lambda = lambda step_num: min((step_num+1)**-0.3, (step_num+1)*warmup_steps**-1.3)", "\n", "lr_lambda", "=", "lambda", "step_num", ":", "min", "(", "(", "max", "(", "0.000001", ",", "step_num", "-", "(", "warmup_steps", "-", "3", ")", ")", "/", "100", ")", "**", "-", "0.1", ",", "step_num", "*", "(", "1.485", "/", "warmup_steps", ")", "+", ".01", ")", "\n", "#y=((x-(2000-3))/100)^-0.1 and y=x*(1.485/2000)+0.01", "\n", "self", ".", "lr_schedule", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "self", ".", "optimizer", ",", "lr_lambda", ")", "\n", "", "elif", "self", ".", "useLearningSchedule", ":", "\n", "            ", "print", "(", "'Unrecognized learning schedule: {}'", ".", "format", "(", "self", ".", "useLearningSchedule", ")", ")", "\n", "exit", "(", ")", "\n", "\n", "", "self", ".", "monitor", "=", "config", "[", "'trainer'", "]", "[", "'monitor'", "]", "\n", "self", ".", "monitor_mode", "=", "config", "[", "'trainer'", "]", "[", "'monitor_mode'", "]", "\n", "#assert self.monitor_mode == 'min' or self.monitor_mode == 'max'", "\n", "self", ".", "monitor_best", "=", "math", ".", "inf", "if", "self", ".", "monitor_mode", "==", "'min'", "else", "-", "math", ".", "inf", "\n", "self", ".", "retry_count", "=", "config", "[", "'trainer'", "]", "[", "'retry_count'", "]", "if", "'retry_count'", "in", "config", "[", "'trainer'", "]", "else", "1", "\n", "self", ".", "start_iteration", "=", "1", "\n", "self", ".", "iteration", "=", "self", ".", "start_iteration", "\n", "self", ".", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'trainer'", "]", "[", "'save_dir'", "]", ",", "self", ".", "name", ")", "\n", "ensure_dir", "(", "self", ".", "checkpoint_dir", ")", "\n", "json", ".", "dump", "(", "config", ",", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "'config.json'", ")", ",", "'w'", ")", ",", "\n", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "self", ".", "iteration", "=", "999999999999999", "\n", "self", ".", "side_process", "=", "False", "\n", "self", ".", "reset_iteration", "=", "config", "[", "'trainer'", "]", "[", "'reset_resume_iteration'", "]", "if", "'reset_resume_iteration'", "in", "config", "[", "'trainer'", "]", "else", "False", "\n", "if", "resume", ":", "\n", "            ", "self", ".", "_resume_checkpoint", "(", "resume", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.finishSetup": [[294, 301], ["utils.util.ensure_dir", "json.dump", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.utils.util.ensure_dir"], ["", "", "def", "finishSetup", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        things that slave processes shouldn't do\n        \"\"\"", "\n", "ensure_dir", "(", "self", ".", "checkpoint_dir", ")", "\n", "json", ".", "dump", "(", "self", ".", "config", ",", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "'config.json'", ")", ",", "'w'", ")", ",", "\n", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.train": [[302, 438], ["collections.defaultdict", "range", "timeit.default_timer", "range", "base_trainer.BaseTrainer.items", "print", "base_trainer.BaseTrainer.lr_schedule.step", "base_trainer.BaseTrainer._train_iteration", "timeit.default_timer", "base_trainer.BaseTrainer.swa_model.update_parameters", "base_trainer.BaseTrainer.items", "print", "base_trainer.BaseTrainer._minor_log", "base_trainer.BaseTrainer._save_checkpoint", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer._train_iteration", "AveragedModel", "enumerate", "base_trainer.BaseTrainer.train_logger.add_entry", "base_trainer.BaseTrainer.model.cpu", "base_trainer.BaseTrainer.bn_update", "base_trainer.BaseTrainer._valid_epoch", "base_trainer.BaseTrainer.cuda", "base_trainer.BaseTrainer.items", "base_trainer.BaseTrainer._valid_epoch", "base_trainer.BaseTrainer.items", "base_trainer.BaseTrainer.train_logger.add_entry", "base_trainer.BaseTrainer._save_checkpoint", "print", "base_trainer.BaseTrainer._save_checkpoint", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "enumerate", "print", "log.items", "str", "print", "enumerate", "enumerate", "base_trainer.BaseTrainer.logger.info", "str"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer._train_iteration", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer._minor_log", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer._save_checkpoint", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer._train_iteration", "home.repos.pwc.inspect_result.herobd_FUDGE.logger.logger.Logger.add_entry", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer._valid_epoch", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.graph_pair_trainer.GraphPairTrainer._valid_epoch", "home.repos.pwc.inspect_result.herobd_FUDGE.logger.logger.Logger.add_entry", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer._save_checkpoint", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer._save_checkpoint"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Full training logic\n        \"\"\"", "\n", "sumLog", "=", "defaultdict", "(", "lambda", ":", "0.0", ")", "\n", "sumTime", "=", "0", "\n", "#for metric in self.metrics:", "\n", "#    sumLog['avg_'+metric.__name__]=0", "\n", "\n", "for", "self", ".", "iteration", "in", "range", "(", "self", ".", "start_iteration", ",", "self", ".", "iterations", "+", "1", ")", ":", "\n", "            ", "if", "not", "self", ".", "logged", ":", "\n", "                ", "print", "(", "'iteration: {}'", ".", "format", "(", "self", ".", "iteration", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "", "t", "=", "timeit", ".", "default_timer", "(", ")", "\n", "result", "=", "None", "\n", "lastErr", "=", "None", "\n", "if", "self", ".", "useLearningSchedule", ":", "\n", "                ", "self", ".", "lr_schedule", ".", "step", "(", ")", "\n", "", "for", "attempt", "in", "range", "(", "self", ".", "retry_count", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "result", "=", "self", ".", "_train_iteration", "(", "self", ".", "iteration", ")", "\n", "break", "\n", "", "except", "RuntimeError", "as", "err", ":", "\n", "                    ", "print", "(", "err", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "#this is primarily to catch rare CUDA out of memory errors", "\n", "lastErr", "=", "err", "\n", "\n", "", "", "if", "result", "is", "None", ":", "\n", "                ", "result", "=", "self", ".", "_train_iteration", "(", "self", ".", "iteration", ")", "\n", "#if self.retry_count>1:", "\n", "#    print('Failed all {} times!'.format(self.retry_count))", "\n", "#raise lastErr", "\n", "\n", "", "elapsed_time", "=", "timeit", ".", "default_timer", "(", ")", "-", "t", "\n", "sumLog", "[", "'sec_per_iter'", "]", "+=", "elapsed_time", "\n", "#print('iter: '+str(elapsed_time))", "\n", "\n", "#Stochastic Weight Averaging    https://github.com/timgaripov/swa/blob/master/train.py", "\n", "if", "self", ".", "swa", "and", "self", ".", "iteration", ">=", "self", ".", "swa_start", "and", "(", "self", ".", "swa_avg_every", "==", "0", "or", "(", "self", ".", "iteration", "-", "self", ".", "swa_start", ")", "%", "self", ".", "swa_avg_every", "==", "0", ")", ":", "\n", "#swa_n = (self.iterations-self.swa_start)//self.swa_c_iters", "\n", "#moving_average(self.swa_model, self.model, 1.0 / (swa_n + 1))", "\n", "#swa_n += 1", "\n", "                ", "if", "self", ".", "swa_model", "is", "None", ":", "\n", "                    ", "self", ".", "swa_model", "=", "AveragedModel", "(", "self", ".", "model", ")", "\n", "", "self", ".", "swa_model", ".", "update_parameters", "(", "self", ".", "model", ")", "\n", "\n", "", "if", "self", ".", "side_process", ":", "\n", "                ", "continue", "#when multithreading, current log, and validation, is only collected on master", "\n", "\n", "\n", "", "for", "key", ",", "value", "in", "result", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "==", "'metrics'", ":", "\n", "                    ", "for", "i", ",", "metric", "in", "enumerate", "(", "self", ".", "metrics", ")", ":", "\n", "                        ", "sumLog", "[", "'avg_'", "+", "metric", ".", "__name__", "]", "+=", "result", "[", "'metrics'", "]", "[", "i", "]", "\n", "", "", "else", ":", "\n", "                    ", "sumLog", "[", "'avg_'", "+", "key", "]", "+=", "value", "\n", "\n", "#log prep", "\n", "", "", "if", "(", "self", ".", "iteration", "%", "self", ".", "log_step", "==", "0", "or", "\n", "self", ".", "iteration", "%", "self", ".", "val_step", "==", "0", "or", "\n", "self", ".", "iteration", "%", "self", ".", "save_step", "==", "0", "or", "\n", "(", "self", ".", "save_step_minor", "is", "not", "None", "and", "self", ".", "iteration", "%", "self", ".", "save_step_minor", "==", "0", ")", "\n", ")", ":", "\n", "                ", "log", "=", "{", "'iteration'", ":", "self", ".", "iteration", "}", "\n", "\n", "for", "key", ",", "value", "in", "result", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", "==", "'metrics'", ":", "\n", "                        ", "for", "i", ",", "metric", "in", "enumerate", "(", "self", ".", "metrics", ")", ":", "\n", "                            ", "log", "[", "metric", ".", "__name__", "]", "=", "result", "[", "'metrics'", "]", "[", "i", "]", "\n", "", "", "else", ":", "\n", "                        ", "log", "[", "key", "]", "=", "value", "\n", "\n", "#LOG", "\n", "", "", "", "if", "self", ".", "iteration", "%", "self", ".", "log_step", "==", "0", ":", "\n", "#prinpt()#clear inplace text", "\n", "                ", "print", "(", "'                   '", ",", "end", "=", "'\\r'", ")", "\n", "if", "self", ".", "iteration", "-", "self", ".", "start_iteration", ">=", "self", ".", "log_step", ":", "#skip avg if started in odd spot", "\n", "                    ", "for", "key", "in", "sumLog", ":", "\n", "                        ", "sumLog", "[", "key", "]", "/=", "self", ".", "log_step", "\n", "#self._minor_log(sumLog)", "\n", "", "log", "=", "{", "**", "log", ",", "**", "sumLog", "}", "\n", "", "self", ".", "_minor_log", "(", "log", ")", "\n", "for", "key", "in", "sumLog", ":", "\n", "                    ", "sumLog", "[", "key", "]", "=", "0.0", "\n", "", "if", "self", ".", "iteration", "%", "self", ".", "val_step", "!=", "0", ":", "#we'll do it later if we have a validation pass", "\n", "                    ", "self", ".", "train_logger", ".", "add_entry", "(", "log", ")", "\n", "\n", "#VALIDATION", "\n", "", "", "if", "self", ".", "iteration", "%", "self", ".", "val_step", "==", "0", ":", "\n", "                ", "if", "self", ".", "swa", "and", "self", ".", "iteration", ">=", "self", ".", "swa_start", ":", "\n", "                    ", "temp_model", "=", "self", ".", "model", ".", "cpu", "(", ")", "\n", "self", ".", "model", "=", "self", ".", "swa_model", "\n", "self", ".", "bn_update", "(", ")", "\n", "val_result", "=", "self", ".", "_valid_epoch", "(", ")", "\n", "self", ".", "model", "=", "temp_model", ".", "cuda", "(", ")", "\n", "for", "key", ",", "value", "in", "val_result", ".", "items", "(", ")", ":", "\n", "                        ", "if", "'metrics'", "in", "key", ":", "\n", "                            ", "for", "i", ",", "metric", "in", "enumerate", "(", "self", ".", "metrics", ")", ":", "\n", "                                ", "log", "[", "'swa_val_'", "+", "metric", ".", "__name__", "]", "=", "val_result", "[", "key", "]", "[", "i", "]", "\n", "", "", "else", ":", "\n", "                            ", "log", "[", "'swa_'", "+", "key", "]", "=", "value", "\n", "", "", "", "else", ":", "\n", "                    ", "val_result", "=", "self", ".", "_valid_epoch", "(", ")", "\n", "for", "key", ",", "value", "in", "val_result", ".", "items", "(", ")", ":", "\n", "                        ", "if", "'metrics'", "in", "key", ":", "\n", "                            ", "for", "i", ",", "metric", "in", "enumerate", "(", "self", ".", "metrics", ")", ":", "\n", "                                ", "log", "[", "'val_'", "+", "metric", ".", "__name__", "]", "=", "val_result", "[", "key", "]", "[", "i", "]", "\n", "", "", "else", ":", "\n", "                            ", "log", "[", "key", "]", "=", "value", "\n", "#sumLog['avg_'+key] += value", "\n", "\n", "", "", "", "if", "self", ".", "train_logger", "is", "not", "None", ":", "\n", "                    ", "if", "self", ".", "iteration", "%", "self", ".", "log_step", "!=", "0", ":", "\n", "                        ", "print", "(", "'                   '", ",", "end", "=", "'\\r'", ")", "\n", "#    print()#clear inplace text", "\n", "", "self", ".", "train_logger", ".", "add_entry", "(", "log", ")", "\n", "if", "self", ".", "verbosity", ">=", "1", ":", "\n", "                        ", "for", "key", ",", "value", "in", "log", ".", "items", "(", ")", ":", "\n", "                            ", "if", "self", ".", "verbosity", ">=", "2", "or", "'avg'", "in", "key", "or", "'val'", "in", "key", ":", "\n", "                                ", "self", ".", "logger", ".", "info", "(", "'    {:15s}: {}'", ".", "format", "(", "str", "(", "key", ")", ",", "value", ")", ")", "\n", "", "", "", "", "if", "(", "self", ".", "monitor_mode", "==", "'min'", "and", "self", ".", "monitor", "in", "log", "and", "log", "[", "self", ".", "monitor", "]", "<", "self", ".", "monitor_best", ")", "or", "(", "self", ".", "monitor_mode", "==", "'max'", "and", "log", "[", "self", ".", "monitor", "]", ">", "self", ".", "monitor_best", ")", ":", "\n", "                    ", "self", ".", "monitor_best", "=", "log", "[", "self", ".", "monitor", "]", "\n", "self", ".", "_save_checkpoint", "(", "self", ".", "iteration", ",", "log", ",", "save_best", "=", "True", ")", "\n", "\n", "#SAVE", "\n", "", "", "if", "self", ".", "iteration", "%", "self", ".", "save_step", "==", "0", ":", "\n", "                ", "self", ".", "_save_checkpoint", "(", "self", ".", "iteration", ",", "log", ")", "\n", "if", "self", ".", "iteration", "%", "self", ".", "log_step", "!=", "0", ":", "\n", "                    ", "print", "(", "'                   '", ",", "end", "=", "'\\r'", ")", "\n", "#    print()#clear inplace text", "\n", "", "self", ".", "logger", ".", "info", "(", "'Checkpoint saved for iteration '", "+", "str", "(", "self", ".", "iteration", ")", ")", "\n", "", "elif", "self", ".", "iteration", "%", "self", ".", "save_step_minor", "==", "0", ":", "\n", "                ", "self", ".", "_save_checkpoint", "(", "self", ".", "iteration", ",", "log", ",", "minor", "=", "True", ")", "\n", "if", "self", ".", "iteration", "%", "self", ".", "log_step", "!=", "0", ":", "\n", "                    ", "print", "(", "'                   '", ",", "end", "=", "'\\r'", ")", "\n", "#    print()#clear inplace text", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer._train_iteration": [[443, 450], ["None"], "methods", ["None"], ["", "", "", "", "def", "_train_iteration", "(", "self", ",", "iteration", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for a single iteration\n\n        :param iteration: Current iteration number\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.save": [[451, 453], ["base_trainer.BaseTrainer._save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer._save_checkpoint"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "self", ".", "_save_checkpoint", "(", "self", ".", "iteration", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer._save_checkpoint": [[454, 513], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.save", "torch.save", "torch.save", "torch.save", "type", "base_trainer.BaseTrainer.optimizer.state_dict", "base_trainer.BaseTrainer.model.state_dict", "base_trainer.BaseTrainer.items", "base_trainer.BaseTrainer.model.cpu", "base_trainer.BaseTrainer.lr_schedule.state_dict", "os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.rename", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.logger.info", "v.cpu", "base_trainer.BaseTrainer.swa_model.state_dict", "base_trainer.BaseTrainer.items", "base_trainer.BaseTrainer.swa_model.cpu", "os.remove", "os.path.join", "v.cpu"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.save", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.save", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.save", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.save", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.save", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.save", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.save", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.save"], ["", "def", "_save_checkpoint", "(", "self", ",", "iteration", ",", "log", ",", "save_best", "=", "False", ",", "minor", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Saving checkpoints\n\n        :param iteration: current iteration number\n        :param log: logging information of the ipoch\n        :param save_best: if True, rename the saved checkpoint to 'model_best.pth'\n        \"\"\"", "\n", "arch", "=", "type", "(", "self", ".", "model", ")", ".", "__name__", "\n", "state", "=", "{", "\n", "'arch'", ":", "arch", ",", "\n", "'iteration'", ":", "iteration", ",", "\n", "'logger'", ":", "self", ".", "train_logger", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'monitor_best'", ":", "self", ".", "monitor_best", ",", "\n", "'config'", ":", "self", ".", "config", "\n", "}", "\n", "if", "'save_mode'", "not", "in", "self", ".", "config", "or", "self", ".", "config", "[", "'save_mode'", "]", "==", "'state_dict'", ":", "\n", "            ", "state_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "                ", "state_dict", "[", "k", "]", "=", "v", ".", "cpu", "(", ")", "\n", "", "state", "[", "'state_dict'", "]", "=", "state_dict", "\n", "if", "self", ".", "swa", "and", "self", ".", "swa_model", "is", "not", "None", ":", "\n", "                ", "swa_state_dict", "=", "self", ".", "swa_model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "swa_state_dict", ".", "items", "(", ")", ":", "\n", "                    ", "swa_state_dict", "[", "k", "]", "=", "v", ".", "cpu", "(", ")", "\n", "", "state", "[", "'swa_state_dict'", "]", "=", "swa_state_dict", "\n", "", "", "else", ":", "\n", "            ", "state", "[", "'model'", "]", "=", "self", ".", "model", ".", "cpu", "(", ")", "\n", "if", "self", ".", "swa", ":", "\n", "                ", "state", "[", "'swa_model'", "]", "=", "self", ".", "swa_model", ".", "cpu", "(", ")", "\n", "", "", "if", "self", ".", "useLearningSchedule", ":", "\n", "            ", "state", "[", "'lr_schedule'", "]", "=", "self", ".", "lr_schedule", ".", "state_dict", "(", ")", "\n", "#if self.swa:", "\n", "#    state['swa_n']=self.swa_n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "#weird gpu memory issue when calling torch.save()", "\n", "if", "not", "minor", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "'checkpoint-iteration{}.pth'", "\n", ".", "format", "(", "iteration", ")", ")", "\n", "", "else", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "'checkpoint-latest.pth'", ")", "\n", "\n", "#print(self.module.state_dict().keys())", "\n", "", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "not", "minor", ":", "\n", "#remove minor as this is the latest", "\n", "            ", "filename_late", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "'checkpoint-latest.pth'", ")", "\n", "try", ":", "\n", "                ", "os", ".", "remove", "(", "filename_late", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "                ", "pass", "\n", "#os.link(filename,filename_late) #this way checkpoint-latest always does have the latest", "\n", "", "torch", ".", "save", "(", "state", ",", "filename_late", ")", "#something is wrong with thel inkgin", "\n", "\n", "", "if", "save_best", ":", "\n", "            ", "os", ".", "rename", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "'model_best.pth'", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saved current best: {} ...\"", ".", "format", "(", "'model_best.pth'", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Saved checkpoint: {} ...\"", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer._resume_checkpoint": [[523, 585], ["base_trainer.BaseTrainer.logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "base_trainer.BaseTrainer.logger.info", "checkpoint[].keys", "base_trainer.BaseTrainer.model.state_dict", "base_trainer.BaseTrainer.model.load_state_dict", "print", "base_trainer.BaseTrainer.lr_schedule.load_state_dict", "AveragedModel", "checkpoint[].keys", "base_trainer.BaseTrainer.swa_model.state_dict", "base_trainer.BaseTrainer.swa_model.load_state_dict", "base_trainer.BaseTrainer.optimizer.load_state_dict", "[].size", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.optimizer.state.values", "print", "len", "init_state_dict[].size", "[].size", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "[].size", "base_trainer.BaseTrainer.logger.info", "state.items", "init_state_dict[].size", "len", "init_state_dict[].size", "[].size", "isinstance", "init_state_dict[].size", "v.cuda"], "methods", ["None"], ["", "", "def", "_resume_checkpoint", "(", "self", ",", "resume_path", ")", ":", "\n", "        ", "\"\"\"\n        Resume from saved checkpoints\n\n        :param resume_path: Checkpoint path to be resumed\n        \"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint: {} ...\"", ".", "format", "(", "resume_path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_path", ",", "map_location", "=", "lambda", "storage", ",", "location", ":", "storage", ")", "\n", "if", "'override'", "not", "in", "self", ".", "config", "or", "not", "self", ".", "config", "[", "'override'", "]", ":", "\n", "            ", "self", ".", "config", "=", "checkpoint", "[", "'config'", "]", "\n", "", "if", "not", "self", ".", "reset_iteration", ":", "\n", "            ", "self", ".", "start_iteration", "=", "checkpoint", "[", "'iteration'", "]", "+", "1", "\n", "self", ".", "iteration", "=", "self", ".", "start_iteration", "\n", "", "self", ".", "monitor_best", "=", "checkpoint", "[", "'monitor_best'", "]", "\n", "#print(checkpoint['state_dict'].keys())", "\n", "if", "(", "'save_mode'", "not", "in", "self", ".", "config", "or", "self", ".", "config", "[", "'save_mode'", "]", "==", "'state_dict'", ")", "and", "'state_dict'", "in", "checkpoint", ":", "\n", "#Brain surgery, allow restarting with modified model", "\n", "            ", "did_brain_surgery", "=", "False", "\n", "keys", "=", "checkpoint", "[", "'state_dict'", "]", ".", "keys", "(", ")", "\n", "init_state_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "keys", ":", "\n", "                ", "if", "len", "(", "init_state_dict", "[", "key", "]", ".", "size", "(", ")", ")", ">", "0", "and", "init_state_dict", "[", "key", "]", ".", "size", "(", "0", ")", ">", "checkpoint", "[", "'state_dict'", "]", "[", "key", "]", ".", "size", "(", "0", ")", ":", "\n", "                    ", "orig_size", "=", "checkpoint", "[", "'state_dict'", "]", "[", "key", "]", ".", "size", "(", "0", ")", "\n", "init_state_dict", "[", "key", "]", "[", ":", "orig_size", "]", "=", "checkpoint", "[", "'state_dict'", "]", "[", "key", "]", "\n", "checkpoint", "[", "'state_dict'", "]", "[", "key", "]", "=", "init_state_dict", "[", "key", "]", "\n", "self", ".", "logger", ".", "info", "(", "'BRAIN SURGERY PERFORMED on {}'", ".", "format", "(", "key", ")", ")", "\n", "did_brain_surgery", "=", "True", "\n", "", "", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "if", "self", ".", "swa", "and", "'swa_state_dict'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "swa_model", "=", "AveragedModel", "(", "self", ".", "model", ")", "\n", "keys", "=", "checkpoint", "[", "'swa_state_dict'", "]", ".", "keys", "(", ")", "\n", "init_state_dict", "=", "self", ".", "swa_model", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "keys", ":", "\n", "                    ", "if", "torch", ".", "is_tensor", "(", "init_state_dict", "[", "key", "]", ")", "and", "len", "(", "init_state_dict", "[", "key", "]", ".", "size", "(", ")", ")", ">", "0", "and", "init_state_dict", "[", "key", "]", ".", "size", "(", "0", ")", ">", "checkpoint", "[", "'swa_state_dict'", "]", "[", "key", "]", ".", "size", "(", "0", ")", ":", "\n", "                        ", "orig_size", "=", "checkpoint", "[", "'swa_state_dict'", "]", "[", "key", "]", ".", "size", "(", "0", ")", "\n", "init_state_dict", "[", "key", "]", "[", ":", "orig_size", "]", "=", "checkpoint", "[", "'swa_state_dict'", "]", "[", "key", "]", "\n", "checkpoint", "[", "'swa_state_dict'", "]", "[", "key", "]", "=", "init_state_dict", "[", "key", "]", "\n", "self", ".", "logger", ".", "info", "(", "'BRAIN SURGERY PERFORMED on {}'", ".", "format", "(", "key", ")", ")", "\n", "", "", "self", ".", "swa_model", ".", "load_state_dict", "(", "checkpoint", "[", "'swa_state_dict'", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "checkpoint", "[", "'model'", "]", "\n", "if", "self", ".", "swa", ":", "\n", "                ", "self", ".", "swa_model", "=", "checkpoint", "[", "'swa_model'", "]", "\n", "#if self.swa:", "\n", "#    self.swa_n = checkpoint['swa_n']", "\n", "", "", "dont_load_optimizer", "=", "self", ".", "config", "[", "'dont_load_optimizer'", "]", "if", "'dont_load_optimizer'", "in", "self", ".", "config", "else", "False", "\n", "if", "not", "did_brain_surgery", "and", "not", "dont_load_optimizer", "and", "'optimizer'", "in", "checkpoint", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "if", "self", ".", "with_cuda", ":", "\n", "                    ", "for", "state", "in", "self", ".", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "                        ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "                            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                                ", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", "self", ".", "gpu", ")", "\n", "", "", "", "", "", "except", "ValueError", "as", "e", ":", "\n", "                ", "print", "(", "'WARNING did not load optimizer state_dict. {}'", ".", "format", "(", "e", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Did not load optimizer'", ")", "\n", "", "if", "self", ".", "useLearningSchedule", ":", "\n", "            ", "self", ".", "lr_schedule", ".", "load_state_dict", "(", "checkpoint", "[", "'lr_schedule'", "]", ")", "\n", "", "self", ".", "train_logger", "=", "checkpoint", "[", "'logger'", "]", "\n", "self", ".", "logger", ".", "info", "(", "\"Checkpoint '{}' (iteration {}) loaded\"", ".", "format", "(", "resume_path", ",", "self", ".", "start_iteration", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.update_swa_batch_norm": [[586, 593], ["base_trainer.BaseTrainer.model.cpu", "base_trainer.BaseTrainer.swa_model.train", "base_trainer.BaseTrainer.run"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.herobd_FUDGE.trainer.box_detect_trainer.BoxDetectTrainer.run"], ["", "def", "update_swa_batch_norm", "(", "self", ")", ":", "\n", "#update_bn(self.data_loader,self.swa_model)", "\n", "        ", "tmp", "=", "self", ".", "model", ".", "cpu", "(", ")", "\n", "self", ".", "model", "=", "self", ".", "swa_model", ".", "train", "(", ")", "\n", "for", "instance", "in", "self", ".", "data_loader", ":", "\n", "            ", "self", ".", "run", "(", "instance", ")", "\n", "", "self", ".", "model", "=", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_trainer.moving_average": [[594, 598], ["zip", "net1.parameters", "net2.parameters"], "function", ["None"], ["", "", "def", "moving_average", "(", "net1", ",", "net2", ",", "alpha", "=", "1", ")", ":", "\n", "    ", "for", "param1", ",", "param2", "in", "zip", "(", "net1", ".", "parameters", "(", ")", ",", "net2", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "param1", ".", "data", "*=", "(", "1.0", "-", "alpha", ")", "\n", "param1", ".", "data", "+=", "param2", ".", "data", "*", "alpha", "\n", "", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader.__init__": [[9, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "batch_size", "=", "config", "[", "'data_loader'", "]", "[", "'batch_size'", "]", "\n", "self", ".", "shuffle", "=", "config", "[", "'data_loader'", "]", "[", "'shuffle'", "]", "\n", "self", ".", "batch_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader.__iter__": [[15, 24], ["base_data_loader.BaseDataLoader.__len__", "base_data_loader.BaseDataLoader._shuffle_data"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader.__len__", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._shuffle_data"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: Iterator\n        \"\"\"", "\n", "assert", "self", ".", "__len__", "(", ")", ">", "0", "\n", "self", ".", "batch_idx", "=", "0", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "self", ".", "_shuffle_data", "(", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader.__next__": [[25, 36], ["base_data_loader.BaseDataLoader._pack_data", "base_data_loader.BaseDataLoader.__len__", "base_data_loader.BaseDataLoader._unpack_data"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._pack_data", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader.__len__", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._unpack_data"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: Next batch\n        \"\"\"", "\n", "packed", "=", "self", ".", "_pack_data", "(", ")", "\n", "if", "self", ".", "batch_idx", "<", "self", ".", "__len__", "(", ")", ":", "\n", "            ", "batch", "=", "packed", "[", "self", ".", "batch_idx", "*", "self", ".", "batch_size", ":", "(", "self", ".", "batch_idx", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "self", ".", "batch_idx", "=", "self", ".", "batch_idx", "+", "1", "\n", "return", "self", ".", "_unpack_data", "(", "batch", ")", "\n", "", "else", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader.__len__": [[37, 42], ["base_data_loader.BaseDataLoader._n_samples"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._n_samples"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: Total number of batches\n        \"\"\"", "\n", "return", "self", ".", "_n_samples", "(", ")", "//", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._n_samples": [[43, 48], ["None"], "methods", ["None"], ["", "def", "_n_samples", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: Total number of samples\n        \"\"\"", "\n", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._pack_data": [[49, 56], ["None"], "methods", ["None"], ["", "def", "_pack_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Pack all data into a list/tuple/ndarray/...\n\n        :return: Packed data in the data loader\n        \"\"\"", "\n", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._unpack_data": [[57, 65], ["None"], "methods", ["None"], ["", "def", "_unpack_data", "(", "self", ",", "packed", ")", ":", "\n", "        ", "\"\"\"\n        Unpack packed data (from _pack_data())\n\n        :param packed: Packed data\n        :return: Unpacked data\n        \"\"\"", "\n", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._update_data": [[66, 73], ["None"], "methods", ["None"], ["", "def", "_update_data", "(", "self", ",", "unpacked", ")", ":", "\n", "        ", "\"\"\"\n        Update data member in the data loader\n\n        :param unpacked: Unpacked data (from _update_data())\n        \"\"\"", "\n", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._shuffle_data": [[74, 82], ["base_data_loader.BaseDataLoader._pack_data", "numpy.random.permutation", "base_data_loader.BaseDataLoader._update_data", "len", "base_data_loader.BaseDataLoader._unpack_data"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._pack_data", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._update_data", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._unpack_data"], ["", "def", "_shuffle_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Shuffle data members in the data loader\n        \"\"\"", "\n", "packed", "=", "self", ".", "_pack_data", "(", ")", "\n", "rand_idx", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "packed", ")", ")", "\n", "packed", "=", "[", "packed", "[", "i", "]", "for", "i", "in", "rand_idx", "]", "\n", "self", ".", "_update_data", "(", "self", ".", "_unpack_data", "(", "packed", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader.split_validation": [[83, 101], ["copy.copy.copy", "int", "base_data_loader.BaseDataLoader._pack_data", "base_data_loader.BaseDataLoader._unpack_data", "base_data_loader.BaseDataLoader._unpack_data", "copy.copy.copy._update_data", "base_data_loader.BaseDataLoader._update_data", "base_data_loader.BaseDataLoader._shuffle_data", "base_data_loader.BaseDataLoader._n_samples"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._pack_data", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._unpack_data", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._unpack_data", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._update_data", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._update_data", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._shuffle_data", "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_data_loader.BaseDataLoader._n_samples"], ["", "def", "split_validation", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Split validation data from data loader based on self.config['validation']\n        \"\"\"", "\n", "validation_split", "=", "self", ".", "config", "[", "'validation'", "]", "[", "'validation_split'", "]", "\n", "shuffle", "=", "self", ".", "config", "[", "'validation'", "]", "[", "'shuffle'", "]", "\n", "if", "validation_split", "==", "0.0", ":", "\n", "            ", "return", "None", "\n", "", "if", "shuffle", ":", "\n", "            ", "self", ".", "_shuffle_data", "(", ")", "\n", "", "valid_data_loader", "=", "copy", "(", "self", ")", "\n", "split", "=", "int", "(", "self", ".", "_n_samples", "(", ")", "*", "validation_split", ")", "\n", "packed", "=", "self", ".", "_pack_data", "(", ")", "\n", "train_data", "=", "self", ".", "_unpack_data", "(", "packed", "[", "split", ":", "]", ")", "\n", "val_data", "=", "self", ".", "_unpack_data", "(", "packed", "[", ":", "split", "]", ")", "\n", "valid_data_loader", ".", "_update_data", "(", "val_data", ")", "\n", "self", ".", "_update_data", "(", "train_data", ")", "\n", "return", "valid_data_loader", "\n", "", "", ""]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__": [[10, 14], ["torch.Module.__init__", "logging.getLogger"], "methods", ["home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.forward": [[15, 22], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass logic\n\n        :return: Model output\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.summary": [[23, 31], ["filter", "sum", "base_model.BaseModel.logger.info", "base_model.BaseModel.logger.info", "base_model.BaseModel.parameters", "numpy.prod", "p.size"], "methods", ["None"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Model summary\n        \"\"\"", "\n", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Trainable parameters: {}'", ".", "format", "(", "params", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "self", ")", "\n", "", "def", "num_params", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.herobd_FUDGE.base.base_model.BaseModel.num_params": [[31, 36], ["filter", "sum", "sum", "base_model.BaseModel.parameters", "numpy.prod", "numpy.prod", "p.size", "p.size", "base_model.BaseModel.parameters"], "methods", ["None"], ["", "def", "num_params", "(", "self", ")", ":", "\n", "        ", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "params2", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", "]", ")", "\n", "return", "params", ",", "params2", "\n", "", "", ""]]}