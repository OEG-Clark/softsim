{"home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.custom_dataset.TerraDataset.__init__": [[7, 19], ["custom_dataset.TerraDataset.read_data"], "methods", ["home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.custom_dataset.TerraDataset.read_data"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "clip_thres", ",", "test_flag", ")", ":", "\n", "        ", "self", ".", "samples", "=", "[", "]", "\n", "self", ".", "num_normal", "=", "0", "\n", "self", ".", "num_untvbl_obs", "=", "0", "\n", "self", ".", "num_tvbl_obs", "=", "0", "\n", "self", ".", "num_crash", "=", "0", "\n", "self", ".", "num_undefined", "=", "0", "\n", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "clip_thres", "=", "clip_thres", "\n", "self", ".", "test_flag", "=", "test_flag", "\n", "\n", "self", ".", "read_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.custom_dataset.TerraDataset.__len__": [[20, 22], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.custom_dataset.TerraDataset.__getitem__": [[23, 29], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "lidar_data", "=", "torch", ".", "from_numpy", "(", "self", ".", "samples", "[", "idx", "]", "[", "0", "]", ")", ".", "float", "(", ")", "\n", "obs_data", "=", "torch", ".", "from_numpy", "(", "self", ".", "samples", "[", "idx", "]", "[", "1", "]", ")", ".", "float", "(", ")", "\n", "system_data", "=", "torch", ".", "from_numpy", "(", "self", ".", "samples", "[", "idx", "]", "[", "2", "]", ")", ".", "float", "(", ")", "\n", "label_data", "=", "self", ".", "samples", "[", "idx", "]", "[", "3", "]", "\n", "return", "(", "lidar_data", ",", "obs_data", ",", "system_data", ",", "label_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.custom_dataset.TerraDataset.read_data": [[30, 125], ["numpy.random.seed", "os.path.join", "os.path.join", "zip", "numpy.array", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "custom_dataset.TerraDataset.file_len", "list", "open", "open", "range", "map", "file_lid.readline", "file_lid.readline.split", "custom_dataset.TerraDataset.detect_obstacles", "file_sys.readline", "file_sys.readline.split", "float", "float", "int", "numpy.array", "range", "map_float", "numpy.clip", "file_lid.readline", "custom_dataset.TerraDataset.samples.append", "custom_dataset.TerraDataset.samples.append", "custom_dataset.TerraDataset.samples.append", "range", "custom_dataset.TerraDataset.samples.append", "custom_dataset.TerraDataset.data_augmentation", "custom_dataset.TerraDataset.samples.append", "custom_dataset.TerraDataset.samples.append", "range", "custom_dataset.TerraDataset.samples.append", "custom_dataset.TerraDataset.data_augmentation", "custom_dataset.TerraDataset.samples.append", "custom_dataset.TerraDataset.samples.append", "range", "custom_dataset.TerraDataset.samples.append", "custom_dataset.TerraDataset.data_augmentation", "custom_dataset.TerraDataset.samples.append"], "methods", ["home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.custom_dataset.TerraDataset.file_len", "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.custom_dataset.TerraDataset.detect_obstacles", "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.custom_dataset.TerraDataset.data_augmentation", "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.custom_dataset.TerraDataset.data_augmentation", "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.custom_dataset.TerraDataset.data_augmentation"], ["", "def", "read_data", "(", "self", ")", ":", "\n", "        ", "'''\n        We construct a datapoint as (lidar_data, obs_data, system_data, label_data), where\n        lidar_data              - high dimensional input x_h\n        (obs_data, system_data) - low dimensional input x_l, defined by equation (6) in the paper\n        label_data              - ground truth label y\n        '''", "\n", "\n", "left_enc_v_index", "=", "40", "\n", "right_enc_v_index", "=", "41", "\n", "label_index", "=", "-", "1", "\n", "count", "=", "0", "\n", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "map_float", "=", "lambda", "x", ":", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "x", ")", ")", ")", "\n", "\n", "lidar", "=", "os", ".", "listdir", "(", "self", ".", "data_root", ")", "[", "0", "]", "\n", "system", "=", "os", ".", "listdir", "(", "self", ".", "data_root", ")", "[", "1", "]", "\n", "\n", "lidar_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "lidar", ")", "\n", "system_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "system", ")", "\n", "\n", "for", "flidar", ",", "fsystem", "in", "zip", "(", "os", ".", "listdir", "(", "lidar_folder", ")", ",", "os", ".", "listdir", "(", "system_folder", ")", ")", ":", "\n", "            ", "flidar_path", "=", "os", ".", "path", ".", "join", "(", "lidar_folder", ",", "flidar", ")", "\n", "fsystem_path", "=", "os", ".", "path", ".", "join", "(", "system_folder", ",", "fsystem", ")", "\n", "\n", "fsystem_len", "=", "self", ".", "file_len", "(", "fsystem_path", ")", "\n", "\n", "with", "open", "(", "flidar_path", ",", "'r'", ")", "as", "file_lid", ",", "open", "(", "fsystem_path", ",", "'r'", ")", "as", "file_sys", ":", "\n", "                ", "for", "i", "in", "range", "(", "fsystem_len", ")", ":", "\n", "                    ", "lid_line", "=", "file_lid", ".", "readline", "(", ")", "\n", "dist", "=", "lid_line", ".", "split", "(", "','", ")", "\n", "dist", "=", "map_float", "(", "dist", ")", "[", "1", ":", "-", "1", "]", "\n", "clip_dist", "=", "np", ".", "clip", "(", "dist", ",", "a_min", "=", "0", ",", "a_max", "=", "self", ".", "clip_thres", ")", "/", "self", ".", "clip_thres", "\n", "obs_flag", "=", "self", ".", "detect_obstacles", "(", "dist", ")", "\n", "\n", "sys_line", "=", "file_sys", ".", "readline", "(", ")", "\n", "sys_data", "=", "sys_line", ".", "split", "(", "','", ")", "\n", "enc_left", "=", "float", "(", "sys_data", "[", "left_enc_v_index", "]", ")", "\n", "enc_right", "=", "float", "(", "sys_data", "[", "right_enc_v_index", "]", ")", "\n", "label", "=", "int", "(", "sys_data", "[", "label_index", "]", ")", "\n", "encoders", "=", "np", ".", "array", "(", "[", "enc_left", ",", "enc_right", "]", ")", "\n", "\n", "# under-sampling normal cases and over-sampling anomalies by replicating", "\n", "if", "label", "==", "0", ":", "\n", "                        ", "if", "self", ".", "test_flag", "==", "0", ":", "\n", "                            ", "if", "count", "%", "7", "==", "0", ":", "\n", "                                ", "self", ".", "num_normal", "+=", "1", "\n", "self", ".", "samples", ".", "append", "(", "[", "clip_dist", ",", "obs_flag", ",", "encoders", ",", "label", "]", ")", "\n", "", "count", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "self", ".", "num_normal", "+=", "1", "\n", "self", ".", "samples", ".", "append", "(", "[", "clip_dist", ",", "obs_flag", ",", "encoders", ",", "label", "]", ")", "\n", "", "", "elif", "label", "==", "1", ":", "\n", "                        ", "if", "self", ".", "test_flag", "==", "0", ":", "\n", "                            ", "self", ".", "num_untvbl_obs", "+=", "1", "\n", "self", ".", "samples", ".", "append", "(", "[", "clip_dist", ",", "obs_flag", ",", "encoders", ",", "label", "]", ")", "\n", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "                                ", "self", ".", "num_untvbl_obs", "+=", "1", "\n", "clip_dist_new", ",", "obs_flag_new", ",", "encoders_new", "=", "self", ".", "data_augmentation", "(", "\n", "clip_dist", ",", "obs_flag", ",", "encoders", ")", "\n", "self", ".", "samples", ".", "append", "(", "[", "clip_dist_new", ",", "obs_flag_new", ",", "encoders_new", ",", "label", "]", ")", "\n", "", "", "else", ":", "\n", "                            ", "self", ".", "num_untvbl_obs", "+=", "1", "\n", "self", ".", "samples", ".", "append", "(", "[", "clip_dist", ",", "obs_flag", ",", "encoders", ",", "label", "]", ")", "\n", "", "", "elif", "label", "==", "2", ":", "\n", "                        ", "if", "self", ".", "test_flag", "==", "0", ":", "\n", "                            ", "self", ".", "num_tvbl_obs", "+=", "1", "\n", "self", ".", "samples", ".", "append", "(", "[", "clip_dist", ",", "obs_flag", ",", "encoders", ",", "label", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ")", ":", "\n", "                                ", "self", ".", "num_tvbl_obs", "+=", "1", "\n", "clip_dist_new", ",", "obs_flag_new", ",", "encoders_new", "=", "self", ".", "data_augmentation", "(", "\n", "clip_dist", ",", "obs_flag", ",", "encoders", ")", "\n", "self", ".", "samples", ".", "append", "(", "[", "clip_dist_new", ",", "obs_flag_new", ",", "encoders_new", ",", "label", "]", ")", "\n", "", "", "else", ":", "\n", "                            ", "self", ".", "num_tvbl_obs", "+=", "1", "\n", "self", ".", "samples", ".", "append", "(", "[", "clip_dist", ",", "obs_flag", ",", "encoders", ",", "label", "]", ")", "\n", "", "", "elif", "label", "==", "3", ":", "\n", "                        ", "if", "self", ".", "test_flag", "==", "0", ":", "\n", "                            ", "self", ".", "num_crash", "+=", "1", "\n", "self", ".", "samples", ".", "append", "(", "[", "clip_dist", ",", "obs_flag", ",", "encoders", ",", "label", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ")", ":", "\n", "                                ", "self", ".", "num_crash", "+=", "1", "\n", "clip_dist_new", ",", "obs_flag_new", ",", "encoders_new", "=", "self", ".", "data_augmentation", "(", "\n", "clip_dist", ",", "obs_flag", ",", "encoders", ")", "\n", "self", ".", "samples", ".", "append", "(", "[", "clip_dist_new", ",", "obs_flag_new", ",", "encoders_new", ",", "label", "]", ")", "\n", "", "", "else", ":", "\n", "                            ", "self", ".", "num_crash", "+=", "1", "\n", "self", ".", "samples", ".", "append", "(", "[", "clip_dist", ",", "obs_flag", ",", "encoders", ",", "label", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "pass", "\n", "\n", "", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "                        ", "lid_line", "=", "file_lid", ".", "readline", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.custom_dataset.TerraDataset.detect_obstacles": [[126, 136], ["numpy.array", "local_distance[].mean", "local_distance[].mean", "local_distance[].mean", "local_distance[].mean", "numpy.clip"], "methods", ["None"], ["", "", "", "", "", "def", "detect_obstacles", "(", "self", ",", "distance", ")", ":", "\n", "\n", "        ", "obs_flag", "=", "np", ".", "array", "(", "[", "0", "]", "*", "4", ")", "\n", "local_distance", "=", "np", ".", "clip", "(", "distance", ",", "a_min", "=", "0", ",", "a_max", "=", "250", ")", "/", "250", "\n", "obs_flag", "[", "0", "]", "=", "local_distance", "[", "420", ":", "480", "]", ".", "mean", "(", ")", "\n", "obs_flag", "[", "1", "]", "=", "local_distance", "[", "480", ":", "540", "]", ".", "mean", "(", ")", "\n", "obs_flag", "[", "2", "]", "=", "local_distance", "[", "540", ":", "600", "]", ".", "mean", "(", ")", "\n", "obs_flag", "[", "3", "]", "=", "local_distance", "[", "600", ":", "660", "]", ".", "mean", "(", ")", "\n", "\n", "return", "obs_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.custom_dataset.TerraDataset.data_augmentation": [[137, 151], ["numpy.clip", "numpy.clip", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn"], "methods", ["None"], ["", "def", "data_augmentation", "(", "self", ",", "clip_dist", ",", "obs_flag", ",", "encoders", ")", ":", "\n", "        ", "'''\n        augment training data with additive Gaussian noise\n        '''", "\n", "\n", "clip_dist_new", "=", "clip_dist", "+", "0.1", "*", "clip_dist", "*", "np", ".", "random", ".", "randn", "(", "1080", ")", "\n", "clip_dist_new", "=", "np", ".", "clip", "(", "clip_dist_new", ",", "a_min", "=", "0", ",", "a_max", "=", "1", ")", "\n", "\n", "obs_flag_new", "=", "obs_flag", "+", "0.4", "*", "obs_flag", "*", "np", ".", "random", ".", "randn", "(", "4", ")", "\n", "obs_flag_new", "=", "np", ".", "clip", "(", "obs_flag_new", ",", "a_min", "=", "0", ",", "a_max", "=", "1", ")", "\n", "\n", "encoders_new", "=", "encoders", "+", "0.0", "*", "encoders", "*", "np", ".", "random", ".", "randn", "(", "2", ")", "\n", "\n", "return", "clip_dist_new", ",", "obs_flag_new", ",", "encoders_new", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.custom_dataset.TerraDataset.get_labels_num": [[152, 158], ["print", "print", "print", "print", "print"], "methods", ["None"], ["", "def", "get_labels_num", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"The number of normal cases:            {:d}\"", ".", "format", "(", "self", ".", "num_normal", ")", ")", "\n", "print", "(", "\"The number of untraversable obstacles: {:d}\"", ".", "format", "(", "self", ".", "num_untvbl_obs", ")", ")", "\n", "print", "(", "\"The number of traversable obstacles:   {:d}\"", ".", "format", "(", "self", ".", "num_tvbl_obs", ")", ")", "\n", "print", "(", "\"The number of crashes:                 {:d}\"", ".", "format", "(", "self", ".", "num_crash", ")", ")", "\n", "print", "(", "\"The number of undefined points:        {:d}\"", ".", "format", "(", "self", ".", "num_undefined", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.custom_dataset.TerraDataset.file_len": [[159, 164], ["open", "enumerate"], "methods", ["None"], ["", "def", "file_len", "(", "self", ",", "fname", ")", ":", "\n", "        ", "with", "open", "(", "fname", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "l", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "pass", "\n", "", "", "return", "i", "+", "1", "", "", "", ""]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.train.main": [[10, 78], ["torch.manual_seed", "torch.cuda.is_available", "torch.device", "custom_dataset.TerraDataset", "torch.utils.data.DataLoader", "print", "models.SVAE.SVAE().to", "torch.optim.Adam", "range", "torch.save", "torch.cuda.manual_seed", "len", "SVAE().to.parameters", "enumerate", "SVAE().to.state_dict", "torch.cuda.is_available", "models.SVAE.SVAE", "SVAE().to.", "utils.loss_fn.loss_fn_SVAE", "torch.optim.Adam.zero_grad", "utils.loss_fn.loss_fn_SVAE.backward", "torch.optim.Adam.step", "x1.to", "x2.to", "x3.to", "y.to", "torch.cat", "print", "len", "utils.loss_fn.loss_fn_SVAE.item", "len"], "function", ["home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.utils.loss_fn.loss_fn_SVAE"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "'''\n    SVAE\n    --------------------------\n    \n    Inputs:  x_h - high-dimensional data (dimension of dim_x_h)\n             x_l - low-dimensional data (dimension of dim_x_l)\n\n    Outputs: pred_labels - inferred labels\n\n    Usage: svae(x_h, x_l)\n    '''", "\n", "\n", "# RNG is a sequential process", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "#-------------------------------------create dataset---------------------------------------", "\n", "# replace this part with your own dataset", "\n", "\n", "clip_thres", "=", "1850", "\n", "dataset", "=", "TerraDataset", "(", "data_root", "=", "'training_set/'", ",", "clip_thres", "=", "clip_thres", ",", "test_flag", "=", "0", ")", "\n", "#------------------------------------------------------------------------------------------", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "print", "(", "\"Dataset is ready\"", ")", "\n", "\n", "# relative weight between generative and purely discriminative learning", "\n", "alpha", "=", "0.01", "*", "len", "(", "data_loader", ")", "\n", "\n", "svae", "=", "SVAE", "(", "\n", "device", "=", "device", ",", "\n", "dim_x_l", "=", "6", ",", "\n", "dim_x_h", "=", "1080", ",", "\n", "encoder_layer_sizes", "=", "args", ".", "encoder_layer_sizes", ",", "\n", "latent_size", "=", "args", ".", "latent_size", ",", "\n", "decoder_layer_sizes", "=", "args", ".", "decoder_layer_sizes", ",", "\n", "classifier_layer_sizes", "=", "args", ".", "classifier_layer_sizes", ")", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "svae", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", ")", "\n", "\n", "# start training", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "\n", "        ", "for", "iteration", ",", "(", "x1", ",", "x2", ",", "x3", ",", "y", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "            ", "x1", ",", "x2", ",", "x3", ",", "y", "=", "x1", ".", "to", "(", "device", ")", ",", "x2", ".", "to", "(", "device", ")", ",", "x3", ".", "to", "(", "device", ")", ",", "y", ".", "to", "(", "device", ")", "\n", "\n", "# x1 is x_h, (x2, x3) is x_l", "\n", "recon_x1", ",", "mean", ",", "log_var", ",", "z", ",", "pred_labels_score", "=", "svae", "(", "x1", ",", "torch", ".", "cat", "(", "(", "x2", ",", "x3", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "loss", "=", "loss_fn_SVAE", "(", "recon_x1", ",", "x1", ",", "mean", ",", "log_var", ",", "pred_labels_score", ",", "y", ",", "alpha", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "iteration", "%", "args", ".", "print_every", "==", "0", "or", "iteration", "==", "len", "(", "data_loader", ")", "-", "1", ":", "\n", "                ", "print", "(", "\"Epoch {:02d}/{:02d} Batch {:04d}/{:d}, Loss {:9.4f}\"", ".", "format", "(", "\n", "epoch", ",", "args", ".", "epochs", ",", "iteration", ",", "len", "(", "data_loader", ")", "-", "1", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "", "PATH", "=", "'./net_weights/terra_net_svae.pth'", "\n", "torch", ".", "save", "(", "svae", ".", "state_dict", "(", ")", ",", "PATH", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.None.test.main": [[12, 124], ["torch.manual_seed", "custom_dataset.TerraDataset", "torch.utils.data.DataLoader", "print", "models.SVAE.SVAE", "models.SVAE.SVAE.load_state_dict", "print", "torch.load", "torch.no_grad", "models.SVAE.SVAE.", "torch.max", "y.size", "torch.cat"], "function", ["None"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "'''\n    SVAE\n    --------------------------\n    \n    Inputs:  x_h - high-dimensional data (dimension of dim_x_h)\n             x_l - low-dimensional data (dimension of dim_x_l)\n\n    Outputs: pred_labels - inferred labels\n\n    Usage: svae(x_h, x_l)\n    '''", "\n", "\n", "# RNG is a sequential process", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "#-------------------------------------create dataset---------------------------------------", "\n", "# replace this part with your own dataset", "\n", "\n", "clip_thres", "=", "1850", "\n", "dataset", "=", "TerraDataset", "(", "data_root", "=", "'test_set/'", ",", "clip_thres", "=", "clip_thres", ",", "test_flag", "=", "1", ")", "\n", "#------------------------------------------------------------------------------------------", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "print", "(", "\"Dataset is ready\"", ")", "\n", "\n", "svae", "=", "SVAE", "(", "\n", "device", "=", "'cpu'", ",", "\n", "dim_x_l", "=", "6", ",", "\n", "dim_x_h", "=", "1080", ",", "\n", "encoder_layer_sizes", "=", "args", ".", "encoder_layer_sizes", ",", "\n", "latent_size", "=", "args", ".", "latent_size", ",", "\n", "decoder_layer_sizes", "=", "args", ".", "decoder_layer_sizes", ",", "\n", "classifier_layer_sizes", "=", "args", ".", "classifier_layer_sizes", ")", "\n", "\n", "PATH", "=", "'./net_weights/terra_net_svae.pth'", "\n", "svae", ".", "load_state_dict", "(", "torch", ".", "load", "(", "PATH", ")", ")", "\n", "\n", "# start testing", "\n", "#---------------------------------simplified statistics------------------------------------", "\n", "# compute the overall accuracy of the classification on the test set", "\n", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", "in", "data_loader", ":", "\n", "            ", "x1", ",", "x2", ",", "x3", ",", "y", "=", "data", "\n", "_", ",", "_", ",", "_", ",", "_", ",", "pred_labels_score", "=", "svae", "(", "x1", ",", "torch", ".", "cat", "(", "(", "x2", ",", "x3", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "_", ",", "pred_labels", "=", "torch", ".", "max", "(", "pred_labels_score", ",", "1", ")", "\n", "total", "+=", "y", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "pred_labels", "==", "y", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "print", "(", "'Accuracy of the network over the test set: %f %%'", "%", "(", "100", "*", "correct", "/", "total", ")", ")", "\n", "\n", "#------------------------------------------------------------------------------------------", "\n", "\n", "'''\n    #----------------------------------detailed statistics-------------------------------------\n    # compute precisions for each label, Kappa coefficient, and confusion matrix on the test set\n    # Modifications for this segment and utils.print_statistics may needed if you have different\n    # labels in your problem.\n\n    correct     = [0] * 4\n    confusion_m = [[0]*4 for _ in range(4)]\n    total       = [0] * 4\n    with torch.no_grad():\n        for data in data_loader:\n            x1, x2, x3, y = data\n            _, _, _, _, pred_labels_score = svae(x1, torch.cat((x2, x3), dim=-1))\n            _, pred_labels = torch.max(pred_labels_score, 1)\n            for i in range(4):\n                total[i] += (y == i).sum().item()\n                correct[i] += ((pred_labels == y) * (y == i)).sum().item()\n                for j in range(4):\n                    confusion_m[j][i] += ((pred_labels == j) * (y == i)).sum().item()\n\n    print_statistics(\n        correct, confusion_m, total, args.confusion_matrix)\n\n    #-------------------------------------------------------------------------------------------\n    '''", "\n", "\n", "'''\n    #----------------------visualization of the latent space interpretability-------------------\n    # generate Figure 5(a) in the paper\n\n    seg_size = 10\n    x = svae.inference(n=seg_size)\n    theta = np.arange(-0.25*np.pi, 1.25*np.pi, np.pi/720)\n    plt.figure(figsize=(10, 10))\n    for p in range(seg_size * seg_size):\n        plt.subplot(seg_size, seg_size, p+1)\n        dist = x[p].data.numpy()\n        cur_x = dist * np.cos(theta)\n        cur_y = dist * np.sin(theta)\n        plt.plot(cur_x, cur_y, ls='None', marker='.', markersize=1)\n        plt.axis([-0.5, 0.5, -0.5, 0.5])\n        plt.grid(True)\n        ax = plt.gca()\n        ax.axes.xaxis.set_ticklabels([])\n        ax.axes.yaxis.set_ticklabels([])\n        for tic in ax.xaxis.get_major_ticks():\n            tic.tick1line.set_visible(False)\n        for tic in ax.yaxis.get_major_ticks():\n            tic.tick1line.set_visible(False)\n\n    plt.show()\n\n    #-------------------------------------------------------------------------------------------\n    '''", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.utils.loss_fn.loss_fn_SVAE": [[6, 35], ["torch.nn.functional.mse_loss", "torch.nn.functional.cross_entropy", "recon_x.view", "x.view", "torch.sum", "x.size", "log_var.exp", "mean.pow"], "function", ["None"], ["def", "loss_fn_SVAE", "(", "recon_x", ",", "x", ",", "mean", ",", "log_var", ",", "pred_labels_score", ",", "y", ",", "alpha", ")", ":", "\n", "\n", "    ", "'''\n    # ignore loss of remote lidar points\n    x = x.to('cpu')\n\n    assert len(x.size()) == 2 \n\n    num_rows, num_columns = x.size()\n    mask_tensor = torch.zeros(num_rows, num_columns)\n\n    for row_idx in range(num_rows):\n        for column_idx in range(num_columns):\n            if x[row_idx][column_idx] * clip_thres <= no_loss_thres:\n                mask_tensor[row_idx][column_idx] = 1.0\n\n    x = x.to(device)\n\n    mask_tensor = mask_tensor.to(device)\n    recon_x = recon_x * mask_tensor\n    x = x * mask_tensor\n    '''", "\n", "\n", "BCE", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "\n", "recon_x", ".", "view", "(", "-", "1", ",", "num_points", ")", ",", "x", ".", "view", "(", "-", "1", ",", "num_points", ")", ",", "reduction", "=", "'sum'", ")", "\n", "KLD", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "log_var", "-", "mean", ".", "pow", "(", "2", ")", "-", "log_var", ".", "exp", "(", ")", ")", "\n", "CLF", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "pred_labels_score", ",", "y", ",", "reduction", "=", "'sum'", ")", "\n", "\n", "return", "(", "BCE", "+", "KLD", "+", "alpha", "*", "CLF", ")", "/", "x", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.utils.loss_fn.loss_fn_generative": [[36, 43], ["torch.nn.functional.mse_loss", "recon_x.view", "x.view", "torch.sum", "x.size", "log_var.exp", "mean.pow"], "function", ["None"], ["", "def", "loss_fn_generative", "(", "recon_x", ",", "x", ",", "mean", ",", "log_var", ")", ":", "\n", "\n", "    ", "BCE", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "\n", "recon_x", ".", "view", "(", "-", "1", ",", "num_points", ")", ",", "x", ".", "view", "(", "-", "1", ",", "num_points", ")", ",", "reduction", "=", "'sum'", ")", "\n", "KLD", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "log_var", "-", "mean", ".", "pow", "(", "2", ")", "-", "log_var", ".", "exp", "(", ")", ")", "\n", "\n", "return", "(", "BCE", "+", "KLD", ")", "/", "x", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.utils.loss_fn.loss_fn_discriminative": [[44, 49], ["torch.nn.functional.cross_entropy", "y.size"], "function", ["None"], ["", "def", "loss_fn_discriminative", "(", "pred_labels_score", ",", "y", ")", ":", "\n", "\n", "    ", "CLF", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "pred_labels_score", ",", "y", ",", "reduction", "=", "'sum'", ")", "\n", "\n", "return", "CLF", "/", "y", ".", "size", "(", "0", ")", "", "", ""]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.utils.print_statistics.print_statistics": [[4, 27], ["print", "print", "numpy.sum", "numpy.sum", "sum", "print", "print", "print", "numpy.array", "pandas.DataFrame().round", "numpy.dot", "float", "numpy.trace", "float", "numpy.array", "pandas.DataFrame().round", "numpy.array", "numpy.array", "pandas.DataFrame", "pandas.DataFrame"], "function", ["None"], ["def", "print_statistics", "(", "correct", ",", "confusion_m", ",", "total", ",", "confusion_m_flag", ")", ":", "\n", "\n", "    ", "if", "confusion_m_flag", "==", "0", ":", "\n", "        ", "accuracy", "=", "100", "*", "np", ".", "array", "(", "correct", ")", "/", "np", ".", "array", "(", "total", ")", "\n", "index", "=", "[", "'normal'", ",", "'untvbl obs'", ",", "'tvbl obs'", ",", "'crash'", "]", "\n", "columns", "=", "[", "'accuracy'", "]", "\n", "print", "(", "'Accuracy of the network on the test set:'", ")", "\n", "print", "(", "pd", ".", "DataFrame", "(", "accuracy", ",", "index", ",", "columns", ")", ".", "round", "(", "2", ")", ")", "\n", "\n", "pe_rows", "=", "np", ".", "sum", "(", "confusion_m", ",", "axis", "=", "0", ")", "\n", "pe_cols", "=", "np", ".", "sum", "(", "confusion_m", ",", "axis", "=", "1", ")", "\n", "sum_total", "=", "sum", "(", "pe_cols", ")", "\n", "pe", "=", "np", ".", "dot", "(", "pe_rows", ",", "pe_cols", ")", "/", "float", "(", "sum_total", "**", "2", ")", "\n", "po", "=", "np", ".", "trace", "(", "confusion_m", ")", "/", "float", "(", "sum_total", ")", "\n", "kappa", "=", "(", "po", "-", "pe", ")", "/", "(", "1", "-", "pe", ")", "\n", "print", "(", "'Kappa coefficient on the test set: {:.2f}'", ".", "format", "(", "kappa", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "confusion_m", "=", "100", "*", "np", ".", "array", "(", "confusion_m", ")", "/", "np", ".", "array", "(", "total", ")", "\n", "index", "=", "[", "[", "''", ",", "'predicted'", ",", "'class'", ",", "''", "]", ",", "[", "'normal'", ",", "'untvbl obs'", ",", "'tvbl obs'", ",", "'crash'", "]", "]", "\n", "columns", "=", "[", "[", "''", ",", "'actual class'", ",", "''", ",", "''", "]", ",", "[", "'normal'", ",", "'untvbl obs'", ",", "'tvbl obs'", ",", "'crash'", "]", "]", "\n", "print", "(", "'Confusion matrix on the test set:'", ")", "\n", "print", "(", "pd", ".", "DataFrame", "(", "confusion_m", ",", "index", ",", "columns", ")", ".", "round", "(", "2", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.models.SVAE.SVAE.__init__": [[10, 33], ["torch.Module.__init__", "blocks.Encoder.Encoder", "blocks.Decoder.Decoder", "blocks.MLP.MLP"], "methods", ["home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.blocks.MLP.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "dim_x_l", ",", "dim_x_h", ",", "encoder_layer_sizes", ",", "latent_size", ",", "\n", "decoder_layer_sizes", ",", "classifier_layer_sizes", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim_x_l", "=", "dim_x_l", "\n", "self", ".", "dim_x_h", "=", "dim_x_h", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "latent_size", "=", "latent_size", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "encoder_layer_sizes", ",", "latent_size", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "\n", "decoder_layer_sizes", ",", "latent_size", ")", "\n", "\n", "latent_para_size", "=", "latent_size", "*", "2", "\n", "classifier_input_size", "=", "latent_para_size", "+", "self", ".", "dim_x_l", "\n", "\n", "classifier_layer_sizes", "=", "[", "classifier_input_size", "]", "+", "classifier_layer_sizes", "\n", "\n", "self", ".", "classifier", "=", "MLP", "(", "classifier_layer_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.models.SVAE.SVAE.forward": [[34, 55], ["x_h.view.view.size", "SVAE.SVAE.encoder", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SVAE.SVAE.classifier", "SVAE.SVAE.decoder", "x_h.view.view.dim", "x_h.view.view.view", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_h", ",", "x_l", ")", ":", "\n", "\n", "# flatten the image-like high-dimensional inputs x_h", "\n", "        ", "if", "x_h", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "x_h", "=", "x_h", ".", "view", "(", "-", "1", ",", "self", ".", "dim_x_h", ")", "\n", "\n", "", "batch_size", "=", "x_h", ".", "size", "(", "0", ")", "\n", "\n", "means", ",", "log_var", "=", "self", ".", "encoder", "(", "x_h", ")", "\n", "\n", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "log_var", ")", "\n", "eps", "=", "torch", ".", "randn", "(", "[", "batch_size", ",", "self", ".", "latent_size", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "z", "=", "eps", "*", "std", "+", "means", "\n", "\n", "classifier_inputs", "=", "torch", ".", "cat", "(", "(", "means", ",", "log_var", ",", "x_l", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "pred_labels_score", "=", "self", ".", "classifier", "(", "classifier_inputs", ")", "\n", "\n", "recon_x", "=", "self", ".", "decoder", "(", "z", ")", "\n", "\n", "return", "recon_x", ",", "means", ",", "log_var", ",", "z", ",", "pred_labels_score", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.models.SVAE.SVAE.inference": [[56, 76], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "SVAE.SVAE.decoder", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "n", "=", "1", ")", ":", "\n", "        ", "'''\n        Checking the generative model performance.\n        '''", "\n", "\n", "seg_size", "=", "n", "\n", "var_1_range", "=", "[", "-", "2", ",", "2", "]", "\n", "var_2_range", "=", "[", "-", "2", ",", "2", "]", "\n", "z", "=", "torch", ".", "empty", "(", "0", ")", "\n", "\n", "var_1", "=", "torch", ".", "linspace", "(", "var_1_range", "[", "0", "]", ",", "var_1_range", "[", "1", "]", ",", "seg_size", ")", ".", "view", "(", "seg_size", ",", "1", ")", "\n", "\n", "for", "value", "in", "torch", ".", "linspace", "(", "var_2_range", "[", "0", "]", ",", "var_2_range", "[", "1", "]", ",", "seg_size", ")", ":", "\n", "            ", "var_2", "=", "torch", ".", "tensor", "(", "[", "[", "value", "]", "]", "*", "seg_size", ")", ".", "float", "(", ")", "\n", "z_seg", "=", "torch", ".", "cat", "(", "(", "var_1", ",", "var_2", ")", ",", "-", "1", ")", "\n", "z", "=", "torch", ".", "cat", "(", "(", "z", ",", "z_seg", ")", ",", "0", ")", "\n", "\n", "", "recon_x", "=", "self", ".", "decoder", "(", "z", ")", "\n", "\n", "return", "recon_x", "", "", "", ""]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.blocks.Decoder.Decoder.__init__": [[5, 20], ["torch.Module.__init__", "torch.Sequential", "enumerate", "zip", "Decoder.Decoder.MLP.add_module", "len", "Decoder.Decoder.MLP.add_module", "Decoder.Decoder.MLP.add_module", "torch.Linear", "torch.ReLU", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.blocks.MLP.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layer_sizes", ",", "latent_size", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "MLP", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "input_size", "=", "latent_size", "\n", "\n", "for", "i", ",", "(", "in_size", ",", "out_size", ")", "in", "enumerate", "(", "zip", "(", "[", "input_size", "]", "+", "layer_sizes", "[", ":", "-", "1", "]", ",", "layer_sizes", ")", ")", ":", "\n", "            ", "self", ".", "MLP", ".", "add_module", "(", "\n", "name", "=", "\"L{:d}\"", ".", "format", "(", "i", ")", ",", "module", "=", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ")", ")", "\n", "if", "i", "+", "1", "<", "len", "(", "layer_sizes", ")", ":", "\n", "                ", "self", ".", "MLP", ".", "add_module", "(", "name", "=", "\"A{:d}\"", ".", "format", "(", "i", ")", ",", "module", "=", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "MLP", ".", "add_module", "(", "name", "=", "\"sigmoid\"", ",", "module", "=", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.blocks.Decoder.Decoder.forward": [[21, 26], ["Decoder.Decoder.MLP"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "MLP", "(", "z", ")", "\n", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.blocks.Encoder.Encoder.__init__": [[5, 18], ["torch.Module.__init__", "torch.Sequential", "enumerate", "torch.Linear", "torch.Linear", "zip", "Encoder.Encoder.MLP.add_module", "Encoder.Encoder.MLP.add_module", "torch.Linear", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.blocks.MLP.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layer_sizes", ",", "latent_size", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "MLP", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "i", ",", "(", "in_size", ",", "out_size", ")", "in", "enumerate", "(", "zip", "(", "layer_sizes", "[", ":", "-", "1", "]", ",", "layer_sizes", "[", "1", ":", "]", ")", ")", ":", "\n", "            ", "self", ".", "MLP", ".", "add_module", "(", "\n", "name", "=", "\"L{:d}\"", ".", "format", "(", "i", ")", ",", "module", "=", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ")", ")", "\n", "self", ".", "MLP", ".", "add_module", "(", "name", "=", "\"A{:d}\"", ".", "format", "(", "i", ")", ",", "module", "=", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "linear_means", "=", "nn", ".", "Linear", "(", "layer_sizes", "[", "-", "1", "]", ",", "latent_size", ")", "\n", "self", ".", "linear_log_var", "=", "nn", ".", "Linear", "(", "layer_sizes", "[", "-", "1", "]", ",", "latent_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.blocks.Encoder.Encoder.forward": [[19, 27], ["Encoder.Encoder.MLP", "Encoder.Encoder.linear_means", "Encoder.Encoder.linear_log_var"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "MLP", "(", "x", ")", "\n", "\n", "means", "=", "self", ".", "linear_means", "(", "x", ")", "\n", "log_vars", "=", "self", ".", "linear_log_var", "(", "x", ")", "\n", "\n", "return", "means", ",", "log_vars", "", "", "", ""]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.blocks.MLP.MLP.__init__": [[5, 16], ["torch.Module.__init__", "torch.Sequential", "enumerate", "zip", "MLP.MLP.MLP.add_module", "len", "MLP.MLP.MLP.add_module", "torch.Linear", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.blocks.MLP.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layer_sizes", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "MLP", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "i", ",", "(", "in_size", ",", "out_size", ")", "in", "enumerate", "(", "zip", "(", "layer_sizes", "[", ":", "-", "1", "]", ",", "layer_sizes", "[", "1", ":", "]", ")", ")", ":", "\n", "            ", "self", ".", "MLP", ".", "add_module", "(", "\n", "name", "=", "\"L{:d}\"", ".", "format", "(", "i", ")", ",", "module", "=", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ")", ")", "\n", "if", "i", "+", "2", "<", "len", "(", "layer_sizes", ")", ":", "\n", "                ", "self", ".", "MLP", ".", "add_module", "(", "name", "=", "\"A{:d}\"", ".", "format", "(", "i", ")", ",", "module", "=", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tianchenji_Multimodal-SVAE.blocks.MLP.MLP.forward": [[17, 23], ["MLP.MLP.MLP", "x.dim"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "# preprocess input size", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "<=", "2", "\n", "\n", "return", "self", ".", "MLP", "(", "x", ")", "", "", "", ""]]}