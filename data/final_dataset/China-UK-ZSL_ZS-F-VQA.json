{"home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.config.cfg.__init__": [[11, 108], ["os.dirname", "os.abspath", "os.dirname", "os.abspath", "easydict.EasyDict", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "easydict.EasyDict", "easydict.EasyDict", "os.join", "os.join", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "fusion_model_path", "=", "\"\"", "\n", "self", ".", "answer_net_path", "=", "\"\"", "\n", "\n", "self", ".", "joint_test_way", "=", "0", "\n", "\n", "self", ".", "this_dir", "=", "osp", ".", "dirname", "(", "__file__", ")", "\n", "self", ".", "data_root", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "self", ".", "this_dir", ",", "'..'", ",", "'..'", ",", "'data'", ",", "'KG_VQA'", ")", ")", "\n", "self", ".", "this_dir", "=", "osp", ".", "dirname", "(", "__file__", ")", "\n", "self", ".", "project_root", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "self", ".", "this_dir", ",", "'..'", ")", ")", "\n", "self", ".", "method_choice", "=", "\"KG\"", "\n", "self", ".", "ans_fusion", "=", "'RNN_concate'", "\n", "self", ".", "fusion_model", "=", "''", "\n", "self", ".", "requires_grad", "=", "1", "\n", "self", ".", "bert_dim", "=", "1024", "\n", "self", ".", "KGE", "=", "\"TransE\"", "\n", "self", ".", "KGE_init", "=", "None", "# none or w2v", "\n", "self", ".", "glimpse", "=", "4", "\n", "self", ".", "ans_feature_len", "=", "0", "\n", "self", ".", "patience", "=", "30", "\n", "self", ".", "v_dim", "=", "2048", "\n", "\n", "self", ".", "FVQA", "=", "edict", "(", ")", "\n", "\n", "# FVQA params", "\n", "\n", "self", ".", "FVQA", ".", "max_ans", "=", "500", "\n", "self", ".", "FVQA", ".", "data_choice", "=", "\"0\"", "\n", "\n", "self", ".", "FVQA", ".", "entity_num", "=", "\"all\"", "\n", "self", ".", "FVQA", ".", "data_path", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "\"fvqa\"", ")", "\n", "\n", "self", ".", "FVQA", ".", "exp_data_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "data_path", ",", "\"exp_data\"", ")", "\n", "self", ".", "FVQA", ".", "common_data_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "exp_data_path", ",", "\"common_data\"", ")", "\n", "self", ".", "FVQA", ".", "test_data_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "exp_data_path", ",", "\"test_data\"", ")", "\n", "self", ".", "FVQA", ".", "train_data_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "exp_data_path", ",", "\"train_data\"", ")", "\n", "self", ".", "FVQA", ".", "seen_train_data_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "exp_data_path", ",", "\"train_seen_data\"", ")", "\n", "self", ".", "FVQA", ".", "unseen_test_data_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "exp_data_path", ",", "\"test_unseen_data\"", ")", "\n", "self", ".", "FVQA", ".", "seen_test_data_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "exp_data_path", ",", "\"test_seen_data\"", ")", "\n", "self", ".", "FVQA", ".", "model_save_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "data_path", ",", "\"model_save\"", ")", "\n", "self", ".", "FVQA", ".", "runs_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "data_path", ",", "\"model_save\"", ")", "\n", "\n", "self", ".", "FVQA", ".", "qa_path", "=", "self", ".", "FVQA", ".", "exp_data_path", "\n", "self", ".", "FVQA", ".", "feature_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "common_data_path", ",", "'fvqa-resnet-14x14.h5'", ")", "\n", "self", ".", "FVQA", ".", "answer_vocab_path", "=", "osp", ".", "join", "(", "\n", "self", ".", "FVQA", ".", "common_data_path", ",", "'answer.vocab.fvqa.'", "+", "str", "(", "self", ".", "FVQA", ".", "max_ans", ")", "+", "'.json'", ")", "\n", "self", ".", "FVQA", ".", "fact_vocab_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "common_data_path", ",", "'answer.vocab.fvqa.fact.500.json'", ")", "\n", "self", ".", "FVQA", ".", "relation_vocab_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "common_data_path", ",", "'answer.vocab.fvqa.relation.500.json'", ")", "\n", "\n", "self", ".", "FVQA", ".", "fact_relation_to_ans_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "common_data_path", ",", "\"fact_relation_dict.data\"", ")", "\n", "self", ".", "FVQA", ".", "img_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "qa_path", ",", "'images'", ")", "\n", "\n", "self", ".", "FVQA", ".", "kg_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "common_data_path", ",", "\"KG_embedding\"", ")", "\n", "self", ".", "FVQA", ".", "gae_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "common_data_path", ",", "\"GAE_embedding\"", ")", "\n", "self", ".", "FVQA", ".", "bert_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "common_data_path", ",", "\"BERT_embedding\"", ")", "\n", "\n", "self", ".", "FVQA", ".", "gae_node_num", "=", "3463", "\n", "self", ".", "FVQA", ".", "gae_init", "=", "\"w2v\"", "# or w2v", "\n", "# \u6709\u95ee\u9898", "\n", "# self.FVQA.qa = 'train2014'", "\n", "# self.FVQA.task = 'OpenEnded'", "\n", "# self.FVQA.dataset = 'mscoco'", "\n", "\n", "# self.dataset = self.FVQA", "\n", "\n", "self", ".", "cache_path", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "'.cache'", ")", "\n", "self", ".", "output_path", "=", "self", ".", "FVQA", ".", "model_save_path", "\n", "self", ".", "embedding_size", "=", "1024", "# embedding dimensionality", "\n", "self", ".", "hidden_size", "=", "2", "*", "self", ".", "embedding_size", "# hidden embedding", "\n", "# a joint question vocab across all dataset", "\n", "self", ".", "question_vocab_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "common_data_path", ",", "'question.vocab.json'", ")", "# \u4fee\u6539\u8fd9\u91cc\u4e4b\u540e\u6240\u6709\u7684\u9884\u5b58\u6587\u4ef6\uff08pt\uff09\u90fd\u8981\u5220\u9664", "\n", "\n", "# preprocess config", "\n", "self", ".", "image_size", "=", "448", "\n", "self", ".", "output_size", "=", "self", ".", "image_size", "//", "32", "\n", "self", ".", "preprocess_batch_size", "=", "100", "# 64", "\n", "self", ".", "output_features", "=", "2048", "\n", "self", ".", "central_fraction", "=", "0.875", "\n", "\n", "# Train params", "\n", "self", ".", "TRAIN", "=", "edict", "(", ")", "\n", "self", ".", "TRAIN", ".", "epochs", "=", "600", "\n", "self", ".", "TRAIN", ".", "batch_size", "=", "128", "# 128", "\n", "self", ".", "TRAIN", ".", "lr", "=", "5e-4", "# default Adam lr 1e-3", "\n", "self", ".", "TRAIN", ".", "lr_decay_step", "=", "3", "\n", "self", ".", "TRAIN", ".", "lr_decay_rate", "=", ".70", "\n", "\n", "# self.TRAIN.data_workers = 20", "\n", "self", ".", "TRAIN", ".", "data_workers", "=", "8", "# 10", "\n", "self", ".", "TRAIN", ".", "answer_batch_size", "=", "self", ".", "FVQA", ".", "max_ans", "# batch size for answer network", "\n", "self", ".", "TRAIN", ".", "max_negative_answer", "=", "self", ".", "FVQA", ".", "max_ans", "# max negative answers to sample", "\n", "\n", "# Test params", "\n", "self", ".", "TEST", "=", "edict", "(", ")", "\n", "self", ".", "TEST", ".", "batch_size", "=", "128", "\n", "self", ".", "TEST", ".", "max_answer_index", "=", "self", ".", "FVQA", ".", "max_ans", "# max answer index for computing acc   853", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.config.cfg.get_args": [[109, 160], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "methods", ["None"], ["", "def", "get_args", "(", "self", ")", ":", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--finetune'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--max_ans'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "# 3000 300##", "\n", "parser", ".", "add_argument", "(", "'--loss_temperature'", ",", "default", "=", "0.01", ",", "type", "=", "float", ")", "\n", "# parser.add_argument('--pretrained_model', default=None, type=str)", "\n", "parser", ".", "add_argument", "(", "'--answer_embedding'", ",", "default", "=", "'MLP'", ",", "choices", "=", "[", "'RNN'", ",", "'MLP'", "]", ")", "# \u7b54\u6848\u7f16\u7801\uff1aMLP or RNN##", "\n", "# parser.add_argument('--context_embedding', default='BoW', choices=['SAN', 'BoW'])  # Q I \u5185\u5bb9\u7f16\u7801\uff1aSAN or MLP", "\n", "parser", ".", "add_argument", "(", "'--embedding_size'", ",", "default", "=", "1024", ",", "choices", "=", "[", "1024", ",", "300", ",", "512", "]", ",", "type", "=", "int", ")", "# \u7b54\u6848\u7f16\u7801\uff1aMLP or RNN##", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "default", "=", "800", ",", "type", "=", "int", ")", "# \u7b54\u6848\u7f16\u7801\uff1aMLP or RNN ##", "\n", "# choice model", "\n", "parser", ".", "add_argument", "(", "'--fusion_model'", ",", "default", "=", "'SAN'", ",", "choices", "=", "[", "'MLP'", ",", "'SAN'", ",", "'UD'", ",", "'MUTAN'", ",", "'BAN'", ",", "'ViLBERT'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--requires_grad'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "choices", "=", "[", "0", ",", "1", "]", ")", "\n", "# choice class", "\n", "parser", ".", "add_argument", "(", "'--method_choice'", ",", "default", "=", "'W2V'", ",", "\n", "choices", "=", "[", "'CLS'", ",", "'W2V'", ",", "'KG'", ",", "'GAE'", ",", "'KG_W2V'", ",", "'KG_GAE'", ",", "'GAE_W2V'", ",", "'KG_GAE_W2V'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--ans_fusion'", ",", "default", "=", "'Simple_concate'", ",", "\n", "choices", "=", "[", "'RNN_concate'", ",", "'GATE_attention'", ",", "'GATE'", ",", "'RNN_GATE_attention'", ",", "'Simple_concate'", "]", ")", "\n", "# KG situation", "\n", "parser", ".", "add_argument", "(", "'--KGE'", ",", "default", "=", "'TransE'", ",", "\n", "choices", "=", "[", "'TransE'", ",", "'ComplEx'", ",", "\"TransR\"", ",", "\"DistMult\"", "]", ")", "# \u7b54\u6848\u7f16\u7801\uff1aMLP or RNN ##", "\n", "parser", ".", "add_argument", "(", "'--KGE_init'", ",", "default", "=", "\"w2v\"", ")", "# None  # none or w2v ##", "\n", "parser", ".", "add_argument", "(", "'--GAE_init'", ",", "default", "=", "\"random\"", ")", "# None  # random or w2v ##", "\n", "parser", ".", "add_argument", "(", "'--ZSL'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "# None  # random or w2v ##", "\n", "parser", ".", "add_argument", "(", "'--entity_num'", ",", "default", "=", "\"all\"", ",", "choices", "=", "[", "'all'", ",", "'4302'", "]", ")", "# todo: \u5b8c\u6210\u4e0d\u540c\u5b50\u56fe\u60c5\u51b5\u7684... ##", "\n", "\n", "parser", ".", "add_argument", "(", "'--data_choice'", ",", "default", "=", "'0'", ",", "choices", "=", "[", "'0'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "default", "=", "None", ",", "type", "=", "str", ")", "# \u5b9a\u4e49\u540d\u5b57\u540e\u7f00", "\n", "\n", "parser", ".", "add_argument", "(", "\"--no-tensorboard\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--exp_name\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"Experiment name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dump_path\"", ",", "default", "=", "\"dump/\"", ",", "type", "=", "str", ",", "help", "=", "\"Experiment dump path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--exp_id\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "help", "=", "\"Experiment ID\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random_seed\"", ",", "default", "=", "4567", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--freeze_w2v\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "choices", "=", "[", "0", ",", "1", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--ans_net_lay\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "choices", "=", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--fact_map\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "choices", "=", "[", "0", ",", "1", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--relation_map\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "choices", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--now_test\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "choices", "=", "[", "0", ",", "1", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_model\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "choices", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--joint_test_way\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "choices", "=", "[", "0", ",", "1", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--top_rel\"", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--top_fact\"", ",", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--soft_score\"", ",", "default", "=", "10", ",", "type", "=", "int", ")", "# 10 or 10000", "\n", "parser", ".", "add_argument", "(", "\"--mrr\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.config.cfg.update_train_configs": [[161, 233], ["os.join", "print", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "str"], "methods", ["None"], ["", "def", "update_train_configs", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "gpu_id", "=", "args", ".", "gpu_id", "\n", "self", ".", "finetune", "=", "args", ".", "finetune", "\n", "self", ".", "answer_embedding", "=", "args", ".", "answer_embedding", "\n", "self", ".", "name", "=", "args", ".", "name", "\n", "self", ".", "no_tensorboard", "=", "args", ".", "no_tensorboard", "\n", "self", ".", "exp_name", "=", "args", ".", "exp_name", "\n", "self", ".", "dump_path", "=", "args", ".", "dump_path", "\n", "self", ".", "exp_id", "=", "args", ".", "exp_id", "\n", "self", ".", "random_seed", "=", "args", ".", "random_seed", "\n", "self", ".", "freeze_w2v", "=", "args", ".", "freeze_w2v", "\n", "self", ".", "loss_temperature", "=", "args", ".", "loss_temperature", "\n", "self", ".", "ZSL", "=", "args", ".", "ZSL", "\n", "self", ".", "ans_net_lay", "=", "args", ".", "ans_net_lay", "\n", "self", ".", "fact_map", "=", "args", ".", "fact_map", "\n", "self", ".", "relation_map", "=", "args", ".", "relation_map", "\n", "self", ".", "now_test", "=", "args", ".", "now_test", "\n", "self", ".", "save_model", "=", "args", ".", "save_model", "\n", "self", ".", "joint_test_way", "=", "args", ".", "joint_test_way", "\n", "self", ".", "top_rel", "=", "args", ".", "top_rel", "\n", "self", ".", "top_fact", "=", "args", ".", "top_fact", "\n", "self", ".", "soft_score", "=", "args", ".", "soft_score", "\n", "self", ".", "mrr", "=", "args", ".", "mrr", "\n", "\n", "if", "args", ".", "ZSL", "==", "1", ":", "\n", "            ", "print", "(", "\"ZSL setting...\"", ")", "\n", "self", ".", "FVQA", ".", "test_data_path", "=", "self", ".", "FVQA", ".", "unseen_test_data_path", "\n", "self", ".", "FVQA", ".", "train_data_path", "=", "self", ".", "FVQA", ".", "seen_train_data_path", "\n", "\n", "", "if", "args", ".", "fusion_model", "==", "'UD'", "or", "args", ".", "fusion_model", "==", "'BAN'", ":", "\n", "            ", "self", ".", "FVQA", ".", "feature_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "common_data_path", ",", "'fvqa_36.hdf5'", ")", "\n", "self", ".", "FVQA", ".", "img_id2idx", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "common_data_path", ",", "'fvqa36_imgid2idx.pkl'", ")", "\n", "", "self", ".", "requires_grad", "=", "True", "if", "args", ".", "requires_grad", "==", "1", "else", "False", "\n", "self", ".", "fusion_model", "=", "args", ".", "fusion_model", "\n", "self", ".", "TRAIN", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "# self.TRAIN.answer_batch_size = args.answer_batch_size", "\n", "self", ".", "method_choice", "=", "args", ".", "method_choice", "\n", "self", ".", "ans_fusion", "=", "args", ".", "ans_fusion", "\n", "self", ".", "embedding_size", "=", "args", ".", "embedding_size", "\n", "self", ".", "FVQA", ".", "data_choice", "=", "args", ".", "data_choice", "\n", "self", ".", "FVQA", ".", "max_ans", "=", "args", ".", "max_ans", "\n", "self", ".", "TRAIN", ".", "epochs", "=", "args", ".", "epoch", "\n", "self", ".", "FVQA", ".", "KGE", "=", "args", ".", "KGE", "\n", "self", ".", "FVQA", ".", "KGE_init", "=", "args", ".", "KGE_init", "\n", "self", ".", "FVQA", ".", "gae_init", "=", "args", ".", "GAE_init", "\n", "self", ".", "FVQA", ".", "entity_num", "=", "args", ".", "entity_num", "\n", "\n", "if", "self", ".", "fact_map", ":", "\n", "            ", "self", ".", "FVQA", ".", "max_ans", "=", "2791", "\n", "", "if", "self", ".", "relation_map", ":", "\n", "            ", "self", ".", "FVQA", ".", "max_ans", "=", "103", "\n", "\n", "", "self", ".", "TEST", ".", "max_answer_index", "=", "self", ".", "FVQA", ".", "max_ans", "\n", "self", ".", "TRAIN", ".", "answer_batch_size", "=", "self", ".", "FVQA", ".", "max_ans", "# batch size for answer network", "\n", "self", ".", "TRAIN", ".", "max_negative_answer", "=", "self", ".", "FVQA", ".", "max_ans", "\n", "\n", "self", ".", "FVQA", ".", "answer_vocab_path", "=", "osp", ".", "join", "(", "\n", "self", ".", "FVQA", ".", "common_data_path", ",", "'answer.vocab.fvqa.'", "+", "str", "(", "self", ".", "FVQA", ".", "max_ans", ")", "+", "'.json'", ")", "\n", "\n", "if", "\"KG\"", "in", "self", ".", "method_choice", ":", "\n", "            ", "self", ".", "FVQA", ".", "relation2id_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "kg_path", ",", "\"relations_\"", "+", "self", ".", "FVQA", ".", "entity_num", "+", "\".tsv\"", ")", "\n", "self", ".", "FVQA", ".", "entity2id_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "kg_path", ",", "\"entities_\"", "+", "self", ".", "FVQA", ".", "entity_num", "+", "\".tsv\"", ")", "\n", "if", "self", ".", "KGE_init", "!=", "\"w2v\"", ":", "\n", "                ", "self", ".", "FVQA", ".", "entity_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "kg_path", ",", "\"fvqa_\"", "+", "\n", "self", ".", "FVQA", ".", "entity_num", "+", "\"_\"", "+", "self", ".", "KGE", "+", "\"_entity.npy\"", ")", "\n", "self", ".", "FVQA", ".", "relation_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "kg_path", ",", "\"fvqa_\"", "+", "\n", "self", ".", "FVQA", ".", "entity_num", "+", "\"_\"", "+", "self", ".", "KGE", "+", "\"_relation.npy\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "FVQA", ".", "entity_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "kg_path", ",", "\"fvqa_\"", "+", "\n", "self", ".", "FVQA", ".", "entity_num", "+", "\"_w2v_\"", "+", "self", ".", "KGE", "+", "\"_entity.npy\"", ")", "\n", "self", ".", "FVQA", ".", "relation_path", "=", "osp", ".", "join", "(", "self", ".", "FVQA", ".", "kg_path", ",", "\"fvqa_\"", "+", "\n", "self", ".", "FVQA", ".", "entity_num", "+", "\"_w2v_\"", "+", "self", ".", "KGE", "+", "\"_relation.npy\"", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner.__init__": [[32, 83], ["torchlight.get_dump_path", "os.path.join", "model.Vector", "model.Vector", "data.fvqa.get_loader", "data.fvqa.get_loader", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "main.Runner.word2vec._prepare", "main.Runner._model_choice", "utils.unseen_mask", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.LogSoftmax().cuda", "torch.LogSoftmax().cuda", "torch.LogSoftmax().cuda", "torch.LogSoftmax().cuda", "print", "pprint.pprint.pprint", "print", "pprint.pprint.pprint", "list", "list", "list", "print", "print", "main.Runner._load_model", "main.Runner._load_model", "range", "main.Runner.fusion_model.parameters", "main.Runner.answer_net.parameters", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.logger.get_dump_path", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.get_loader", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.get_loader", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.vector.Vector._prepare", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._model_choice", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.unseen_mask", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._load_model", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._load_model"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "# prepare for: data , model, loss fuction, optimizer", "\n", "\n", "        ", "self", ".", "log_dir", "=", "get_dump_path", "(", "args", ")", "\n", "self", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "'model'", ")", "\n", "\n", "self", ".", "word2vec", "=", "Vector", "(", "args", ".", "FVQA", ".", "common_data_path", ")", "\n", "# data load", "\n", "self", ".", "train_loader", "=", "fvqa", ".", "get_loader", "(", "args", ",", "self", ".", "word2vec", ",", "train", "=", "True", ")", "\n", "self", ".", "val_loader", "=", "fvqa", ".", "get_loader", "(", "args", ",", "self", ".", "word2vec", ",", "val", "=", "True", ")", "\n", "\n", "self", ".", "avocab", "=", "default_collate", "(", "list", "(", "range", "(", "0", ",", "args", ".", "FVQA", ".", "max_ans", ")", ")", ")", "\n", "\n", "# question_word2vec: get the word vector (for each word in question )", "\n", "# the id of which could map to the vector of corresponding token", "\n", "self", ".", "question_word2vec", "=", "self", ".", "word2vec", ".", "_prepare", "(", "self", ".", "train_loader", ".", "dataset", ".", "token_to_index", ")", "\n", "\n", "# get the fusion_model and answer_net", "\n", "self", ".", "_model_choice", "(", "args", ")", "\n", "\n", "# get the mask from zsl", "\n", "self", ".", "negtive_mux", "=", "unseen_mask", "(", "args", ",", "self", ".", "val_loader", ")", "\n", "\n", "# optimizer", "\n", "params_for_optimization", "=", "list", "(", "self", ".", "fusion_model", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "answer_net", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "[", "p", "for", "p", "in", "params_for_optimization", "if", "p", ".", "requires_grad", "]", ",", "lr", "=", "args", ".", "TRAIN", ".", "lr", ")", "\n", "\n", "# loss fuction", "\n", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "# Recorder", "\n", "self", ".", "max_acc", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "self", ".", "max_zsl_acc", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "self", ".", "best_epoch", "=", "0", "\n", "self", ".", "correspond_loss", "=", "1e20", "\n", "\n", "self", ".", "early_stop", "=", "0", "\n", "\n", "print", "(", "\"fusion_model:\"", ")", "\n", "pprint", "(", "self", ".", "fusion_model", ")", "\n", "print", "(", "\"Answer Model:\"", ")", "\n", "pprint", "(", "self", ".", "answer_net", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "# test stage:", "\n", "if", "self", ".", "args", ".", "now_test", ":", "\n", "            ", "print", "(", "\"begin test! ...\"", ")", "\n", "print", "(", "\"loading model  ...\"", ")", "\n", "self", ".", "_load_model", "(", "self", ".", "fusion_model", ",", "\"fusion\"", ")", "\n", "self", ".", "_load_model", "(", "self", ".", "answer_net", ",", "\"embedding\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner.run": [[84, 182], ["range", "range", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "utils.Metrics", "utils.Metrics", "utils.Metrics", "main.Runner._save_model", "main.Runner._save_model", "main.Runner.train_loader.dataset._get_answer_vectors", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "len", "utils.Metrics", "utils.Metrics", "utils.Metrics", "main.Runner.train", "logger.info", "main.Runner.eval", "logger.info", "logger.info", "logger.info", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "logger.info", "main.Runner._updata_best_result", "copy.deepcopy", "copy.deepcopy", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.cat.float", "torch.cat.float", "torch.cat.float", "torch.cat.float", "main.Runner._updata_best_result"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner._save_model", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner._save_model", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite._get_answer_vectors", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner.train", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.eval", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner._updata_best_result", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner._updata_best_result"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "# 1. define the parameters which are out the epoch", "\n", "# 2. Update statistical indicator", "\n", "# 3. concate of answer embedding", "\n", "\n", "# Answer embedding :", "\n", "# choices belong to: ['CLS', 'W2V', 'KG', 'GAE', 'KG_W2V', 'KG_GAE', 'GAE_W2V', 'KG_GAE_W2V']", "\n", "# well, we recommend only use the parameter : 'CLS' or 'W2V'.", "\n", "# since that the resource of other choices need extra training.", "\n", "        ", "if", "args", ".", "method_choice", "!=", "'CLS'", ":", "\n", "            ", "previous_var", "=", "None", "\n", "for", "method_choice", "in", "self", ".", "method_list", ":", "\n", "# get the corresponding choice embedding", "\n", "                ", "answer_var", ",", "answer_len", "=", "self", ".", "train_loader", ".", "dataset", ".", "_get_answer_vectors", "(", "method_choice", ",", "self", ".", "avocab", ")", "\n", "\n", "# normalize in row and then concate then", "\n", "answer_var", "=", "F", ".", "normalize", "(", "answer_var", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "if", "previous_var", "is", "not", "None", ":", "\n", "                    ", "previous_var", "=", "torch", ".", "cat", "(", "[", "previous_var", ",", "answer_var", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "previous_var", "=", "answer_var", "\n", "", "", "self", ".", "answer_var", "=", "Variable", "(", "previous_var", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# warm up (ref: ramen)", "\n", "", "self", ".", "gradual_warmup_steps", "=", "[", "i", "*", "self", ".", "args", ".", "TRAIN", ".", "lr", "for", "i", "in", "torch", ".", "linspace", "(", "0.5", ",", "2.0", ",", "7", ")", "]", "\n", "self", ".", "lr_decay_epochs", "=", "range", "(", "14", ",", "47", ",", "self", ".", "args", ".", "TRAIN", ".", "lr_decay_step", ")", "\n", "\n", "# if test:", "\n", "if", "self", ".", "args", ".", "now_test", ":", "\n", "            ", "self", ".", "args", ".", "TRAIN", ".", "epochs", "=", "2", "\n", "\n", "", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "TRAIN", ".", "epochs", ")", ":", "\n", "\n", "            ", "self", ".", "early_stop", "+=", "1", "\n", "if", "self", ".", "args", ".", "patience", "<", "self", ".", "early_stop", ":", "\n", "# early stop", "\n", "                ", "break", "\n", "# warm up", "\n", "", "if", "epoch", "<", "len", "(", "self", ".", "gradual_warmup_steps", ")", ":", "\n", "                ", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "self", ".", "gradual_warmup_steps", "[", "epoch", "]", "\n", "", "elif", "epoch", "in", "self", ".", "lr_decay_epochs", ":", "\n", "                ", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "*=", "self", ".", "args", ".", "TRAIN", ".", "lr_decay_rate", "\n", "\n", "", "self", ".", "train_metrics", "=", "Metrics", "(", ")", "\n", "self", ".", "val_metrics", "=", "Metrics", "(", ")", "\n", "self", ".", "zsl_metrics", "=", "Metrics", "(", ")", "\n", "# use TOP50 metrics for fact mapping:", "\n", "if", "self", ".", "args", ".", "fact_map", "==", "1", ":", "\n", "                ", "self", ".", "train_metrics", "=", "Metrics", "(", "topnum", "=", "50", ")", "\n", "self", ".", "val_metrics", "=", "Metrics", "(", "topnum", "=", "50", ")", "\n", "self", ".", "zsl_metrics", "=", "Metrics", "(", "topnum", "=", "50", ")", "\n", "\n", "# train", "\n", "", "if", "not", "self", ".", "args", ".", "now_test", ":", "\n", "######## begin training!! #######", "\n", "                ", "self", ".", "train", "(", "epoch", ")", "\n", "#################################", "\n", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "# recode:", "\n", "logger", ".", "info", "(", "\n", "f'Train Epoch {epoch}: LOSS={self.train_metrics.total_loss: .5f}, lr={lr: .6f}, acc1={self.train_metrics.acc_1: .2f},acc3={self.train_metrics.acc_3: .2f},acc10={self.train_metrics.acc_10: .2f}'", ")", "\n", "# eval", "\n", "", "if", "epoch", "%", "1", "==", "0", "and", "epoch", ">", "0", ":", "\n", "######## begin evaling!! #######", "\n", "                ", "self", ".", "eval", "(", "epoch", ")", "\n", "#################################", "\n", "logger", ".", "info", "(", "'#################################################################################################################'", ")", "\n", "logger", ".", "info", "(", "f'Test Epoch {epoch}: LOSS={self.val_metrics.total_loss: .5f}, acc1={self.val_metrics.acc_1: .2f}, acc3={self.val_metrics.acc_3: .2f}, acc10={self.val_metrics.acc_10: .2f}'", ")", "\n", "if", "args", ".", "ZSL", "and", "not", "self", ".", "args", ".", "fact_map", "and", "not", "args", ".", "relation_map", ":", "\n", "                    ", "logger", ".", "info", "(", "f'Zsl Epoch {epoch}: LOSS={self.zsl_metrics.total_loss: .5f}, acc1={self.zsl_metrics.acc_1: .2f}, acc3={self.zsl_metrics.acc_3: .2f}, acc10={self.zsl_metrics.acc_10: .2f}'", ")", "\n", "", "logger", ".", "info", "(", "'#################################################################################################################'", ")", "\n", "\n", "# add 0.1 accuracy punishment, avoid for too much attention on hit@10 acc", "\n", "# \u6dfb\u52a00.1\u7684\u7cbe\u8bfb\u60e9\u7f5a, \u9632\u6b62\u6a21\u578b\u8fc7\u591a\u7684\u5173\u6ce8hit@10 acc", "\n", "if", "self", ".", "val_metrics", ".", "total_loss", "<", "(", "self", ".", "correspond_loss", "-", "1", ")", "or", "self", ".", "val_metrics", ".", "acc_all", ">", "(", "self", ".", "max_acc", "[", "3", "]", "+", "0.2", ")", ":", "\n", "# reset early_stop and updata", "\n", "                    ", "self", ".", "early_stop", "=", "0", "\n", "self", ".", "best_epoch", "=", "epoch", "\n", "self", ".", "correspond_loss", "=", "self", ".", "val_metrics", ".", "total_loss", "\n", "self", ".", "_updata_best_result", "(", "self", ".", "max_acc", ",", "self", ".", "val_metrics", ")", "\n", "\n", "self", ".", "best_fusion_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "fusion_model", ")", "\n", "self", ".", "best_answer_net", "=", "copy", ".", "deepcopy", "(", "self", ".", "answer_net", ")", "\n", "\n", "# ZSL result", "\n", "if", "args", ".", "ZSL", "and", "not", "self", ".", "args", ".", "fact_map", "and", "not", "args", ".", "relation_map", ":", "\n", "                        ", "self", ".", "_updata_best_result", "(", "self", ".", "max_zsl_acc", ",", "self", ".", "zsl_metrics", ")", "\n", "\n", "", "", "if", "not", "args", ".", "no_tensorboard", "and", "not", "self", ".", "args", ".", "now_test", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'loss'", ",", "self", ".", "val_metrics", ".", "total_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'acc1'", ",", "self", ".", "val_metrics", ".", "acc_1", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'acc3'", ",", "self", ".", "val_metrics", ".", "acc_3", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'acc10'", ",", "self", ".", "val_metrics", ".", "acc_10", ",", "epoch", ")", "\n", "\n", "# save the model", "\n", "", "", "", "if", "not", "self", ".", "args", ".", "now_test", "and", "self", ".", "args", ".", "save_model", ":", "\n", "            ", "self", ".", "fusion_model_path", "=", "self", ".", "_save_model", "(", "self", ".", "best_fusion_model", ",", "\"fusion\"", ")", "\n", "self", ".", "answer_net_path", "=", "self", ".", "_save_model", "(", "self", ".", "best_answer_net", ",", "\"embedding\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner.train": [[183, 217], ["main.Runner.fusion_model.train", "main.Runner.answer_net.train", "tqdm.tqdm.tqdm", "main.Runner.train_metrics.update_per_epoch", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "main.Runner.fusion_model", "main.Runner.optimizer.zero_grad", "utils.instance_bce_with_logits.backward", "main.Runner.optimizer.step", "main.Runner.train_metrics.update_per_batch", "main.Runner.answer_net", "utils.instance_bce_with_logits", "main.Runner.answer_net", "predicts.to.to.to", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "utils.cosine_sim", "main.Runner.log_softmax().to", "torch.autograd.Variable().cuda.float", "torch.autograd.Variable().cuda.float", "main.Runner.log_softmax", "torch.autograd.Variable().cuda.sum"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner.train", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner.train", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_epoch", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_batch", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.instance_bce_with_logits", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.cosine_sim"], ["", "", "def", "train", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "fusion_model", ".", "train", "(", ")", "\n", "self", ".", "answer_net", ".", "train", "(", ")", "\n", "prefix", "=", "\"train\"", "\n", "tq", "=", "tqdm", "(", "self", ".", "train_loader", ",", "desc", "=", "'{} E{:03d}'", ".", "format", "(", "prefix", ",", "epoch", ")", ",", "ncols", "=", "0", ")", "\n", "\n", "for", "visual_features", ",", "boxes", ",", "question_features", ",", "answers", ",", "idx", ",", "q_len", "in", "tq", ":", "\n", "            ", "visual_features", "=", "Variable", "(", "visual_features", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "\n", "boxes", "=", "Variable", "(", "boxes", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "\n", "question_features", "=", "Variable", "(", "question_features", ")", ".", "cuda", "(", ")", "\n", "answers", "=", "Variable", "(", "answers", ")", ".", "cuda", "(", ")", "\n", "q_len", "=", "Variable", "(", "q_len", ")", ".", "cuda", "(", ")", "\n", "fusion_embedading", "=", "self", ".", "fusion_model", "(", "visual_features", ",", "boxes", ",", "question_features", ",", "q_len", ")", "\n", "\n", "# Classifier-based methods", "\n", "if", "args", ".", "method_choice", "==", "'CLS'", ":", "\n", "# TODO: Normalization?", "\n", "                ", "predicts", "=", "self", ".", "answer_net", "(", "fusion_embedading", ")", "\n", "loss", "=", "instance_bce_with_logits", "(", "predicts", ",", "answers", "/", "10", ")", "\n", "# Mapping-based methods", "\n", "", "else", ":", "\n", "                ", "answer_embedding", "=", "self", ".", "answer_net", "(", "self", ".", "answer_var", ")", "\n", "# notice the temperature (correspoding to specific score)", "\n", "predicts", "=", "cosine_sim", "(", "fusion_embedading", ",", "answer_embedding", ")", "/", "self", ".", "args", ".", "loss_temperature", "\n", "predicts", "=", "predicts", ".", "to", "(", "torch", ".", "float64", ")", "\n", "nll", "=", "-", "self", ".", "log_softmax", "(", "predicts", ")", ".", "to", "(", "torch", ".", "float64", ")", "\n", "# loss = (nll * answers[0] / answers[0].sum(1, keepdim=True)).sum(dim=1).mean()", "\n", "loss", "=", "(", "nll", "*", "answers", "/", "answers", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "train_metrics", ".", "update_per_batch", "(", "loss", ",", "answers", ".", "data", ",", "predicts", ".", "data", ")", "\n", "", "self", ".", "train_metrics", ".", "update_per_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner.eval": [[218, 256], ["main.Runner.fusion_model.eval", "main.Runner.answer_net.eval", "tqdm.tqdm.tqdm", "main.Runner.val_metrics.update_per_epoch", "main.Runner.val_metrics.update_per_batch", "main.Runner.zsl_metrics.update_per_epoch", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "main.Runner.fusion_model", "main.Runner.zsl_metrics.update_per_batch", "main.Runner.answer_net", "utils.instance_bce_with_logits", "main.Runner.answer_net", "predicts.to.to.to", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "utils.cosine_sim", "main.Runner.log_softmax().to", "torch.autograd.Variable().cuda.float", "torch.autograd.Variable().cuda.float", "main.Runner.log_softmax", "torch.autograd.Variable().cuda.sum"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.eval", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.eval", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_epoch", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_batch", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_epoch", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_batch", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.instance_bce_with_logits", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.cosine_sim"], ["", "def", "eval", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "fusion_model", ".", "eval", "(", ")", "\n", "self", ".", "answer_net", ".", "eval", "(", ")", "\n", "prefix", "=", "\"eval\"", "\n", "tq", "=", "tqdm", "(", "self", ".", "val_loader", ",", "desc", "=", "'{} E{:03d}'", ".", "format", "(", "prefix", ",", "epoch", ")", ",", "ncols", "=", "0", ")", "\n", "\n", "for", "visual_features", ",", "boxes", ",", "question_features", ",", "answers", ",", "idx", ",", "q_len", "in", "tq", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "visual_features", "=", "Variable", "(", "visual_features", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "\n", "boxes", "=", "Variable", "(", "boxes", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "\n", "question_features", "=", "Variable", "(", "question_features", ")", ".", "cuda", "(", ")", "\n", "answers", "=", "Variable", "(", "answers", ")", ".", "cuda", "(", ")", "\n", "q_len", "=", "Variable", "(", "q_len", ")", ".", "cuda", "(", ")", "\n", "fusion_embedading", "=", "self", ".", "fusion_model", "(", "visual_features", ",", "boxes", ",", "question_features", ",", "q_len", ")", "\n", "\n", "if", "args", ".", "method_choice", "==", "'CLS'", ":", "\n", "                    ", "predicts", "=", "self", ".", "answer_net", "(", "fusion_embedading", ")", "\n", "loss", "=", "instance_bce_with_logits", "(", "predicts", ",", "answers", "/", "10", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "answer_embedding", "=", "self", ".", "answer_net", "(", "self", ".", "answer_var", ")", "\n", "predicts", "=", "cosine_sim", "(", "fusion_embedading", ",", "answer_embedding", ")", "/", "self", ".", "args", ".", "loss_temperature", "\n", "predicts", "=", "predicts", ".", "to", "(", "torch", ".", "float64", ")", "\n", "nll", "=", "-", "self", ".", "log_softmax", "(", "predicts", ")", ".", "to", "(", "torch", ".", "float64", ")", "\n", "loss", "=", "(", "nll", "*", "answers", "/", "answers", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "", "if", "args", ".", "ZSL", "==", "1", "and", "not", "self", ".", "args", ".", "fact_map", "and", "not", "args", ".", "relation_map", ":", "\n", "# if predicts.shape[0] != self.negtive_mux.shape[0]:", "\n", "#     pdb.set_trace()", "\n", "                    ", "zsl_predicts", "=", "predicts", "+", "self", ".", "negtive_mux", "[", ":", "predicts", ".", "shape", "[", "0", "]", ",", ":", "]", "\n", "\n", "", "", "self", ".", "val_metrics", ".", "update_per_batch", "(", "loss", ",", "answers", ".", "data", ",", "predicts", ".", "data", ")", "\n", "if", "args", ".", "ZSL", "==", "1", "and", "not", "self", ".", "args", ".", "fact_map", "and", "not", "args", ".", "relation_map", ":", "\n", "                ", "self", ".", "zsl_metrics", ".", "update_per_batch", "(", "loss", ",", "answers", ".", "data", ",", "zsl_predicts", ".", "data", ")", "\n", "\n", "", "", "self", ".", "val_metrics", ".", "update_per_epoch", "(", ")", "\n", "if", "args", ".", "ZSL", "==", "1", "and", "not", "self", ".", "args", ".", "fact_map", "and", "not", "args", ".", "relation_map", ":", "\n", "            ", "self", ".", "zsl_metrics", ".", "update_per_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner._model_choice": [[257, 280], ["args.method_choice.split", "main.Runner.method_list.sort", "utils.freeze_layer", "model.SimpleClassifier().cuda", "model.SimpleClassifier().cuda", "getattr", "model.SimpleClassifier", "model.SimpleClassifier", "getattr"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.freeze_layer"], ["", "", "def", "_model_choice", "(", "self", ",", "args", ")", ":", "\n", "        ", "assert", "args", ".", "fusion_model", "in", "[", "'SAN'", ",", "'MLP'", ",", "'BAN'", ",", "'UD'", "]", "\n", "# models api", "\n", "self", ".", "fusion_model", "=", "getattr", "(", "fusion_net", ",", "args", ".", "fusion_model", ")", "(", "args", ",", "self", ".", "train_loader", ".", "dataset", ",", "\n", "self", ".", "question_word2vec", ")", ".", "cuda", "(", ")", "\n", "# freeze word embedding", "\n", "if", "args", ".", "freeze_w2v", "and", "args", ".", "fusion_model", "!=", "'MLP'", ":", "\n", "            ", "freeze_layer", "(", "self", ".", "fusion_model", ".", "w_emb", ")", "\n", "\n", "# answer models", "\n", "", "assert", "args", ".", "method_choice", "in", "[", "'CLS'", ",", "'W2V'", ",", "'KG'", ",", "'GAE'", ",", "'KG_W2V'", ",", "'KG_GAE'", ",", "'GAE_W2V'", ",", "'KG_GAE_W2V'", "]", "\n", "ans_len_table", "=", "{", "'W2V'", ":", "300", ",", "'KG'", ":", "300", ",", "'GAE'", ":", "1024", ",", "'CLS'", ":", "0", "}", "\n", "self", ".", "method_list", "=", "args", ".", "method_choice", ".", "split", "(", "'_'", ")", "\n", "self", ".", "method_list", ".", "sort", "(", ")", "\n", "for", "i", "in", "self", ".", "method_list", ":", "\n", "            ", "args", ".", "ans_feature_len", "+=", "ans_len_table", "[", "i", "]", "\n", "# Mapping-based methods", "\n", "", "if", "args", ".", "method_choice", "!=", "'CLS'", ":", "\n", "            ", "assert", "args", ".", "answer_embedding", "in", "[", "'MLP'", "]", "\n", "self", ".", "answer_net", "=", "getattr", "(", "answer_net", ",", "args", ".", "answer_embedding", ")", "(", "args", ",", "self", ".", "train_loader", ".", "dataset", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "# Classifier-based methods", "\n", "            ", "self", ".", "answer_net", "=", "SimpleClassifier", "(", "args", ".", "embedding_size", ",", "2", "*", "args", ".", "hidden_size", ",", "args", ".", "FVQA", ".", "max_ans", ",", "0.5", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner._updata_best_result": [[281, 286], ["None"], "methods", ["None"], ["", "", "def", "_updata_best_result", "(", "self", ",", "max_acc", ",", "metrics", ")", ":", "\n", "        ", "max_acc", "[", "3", "]", "=", "metrics", ".", "acc_all", "\n", "max_acc", "[", "2", "]", "=", "metrics", ".", "acc_10", "\n", "max_acc", "[", "1", "]", "=", "metrics", ".", "acc_3", "\n", "max_acc", "[", "0", "]", "=", "metrics", ".", "acc_1", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner._load_model": [[287, 305], ["os.path.join", "os.path.join", "model.load_state_dict", "model.load_state_dict", "model.load_state_dict", "model.load_state_dict", "print", "type", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "_load_model", "(", "self", ",", "model", ",", "function", ")", ":", "\n", "        ", "assert", "function", "==", "\"fusion\"", "or", "function", "==", "\"embedding\"", "\n", "# support entity mapping", "\n", "if", "self", ".", "args", ".", "fact_map", ":", "\n", "            ", "target", "=", "\"fact\"", "\n", "# relation mapping", "\n", "", "elif", "self", ".", "args", ".", "relation_map", ":", "\n", "            ", "target", "=", "\"relation\"", "\n", "", "else", ":", "\n", "            ", "target", "=", "\"answer\"", "\n", "", "model_name", "=", "type", "(", "model", ")", ".", "__name__", "\n", "if", "not", "self", ".", "args", ".", "ZSL", ":", "\n", "            ", "target", "=", "\"general_\"", "+", "target", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "model_save_path", ",", "function", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'{target}_{model_name}_{self.args.FVQA.data_choice}.pkl'", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "print", "(", "f\"loading {function} model done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.main.Runner._save_model": [[306, 323], ["os.path.join", "os.makedirs", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "type", "model.state_dict", "model.state_dict", "model.state_dict", "model.state_dict"], "methods", ["None"], ["", "def", "_save_model", "(", "self", ",", "model", ",", "function", ")", ":", "\n", "        ", "assert", "function", "==", "\"fusion\"", "or", "function", "==", "\"embedding\"", "\n", "if", "self", ".", "args", ".", "fact_map", ":", "\n", "            ", "target", "=", "\"fact\"", "\n", "", "elif", "self", ".", "args", ".", "relation_map", ":", "\n", "            ", "target", "=", "\"relation\"", "\n", "", "else", ":", "\n", "            ", "target", "=", "\"answer\"", "\n", "", "model_name", "=", "type", "(", "model", ")", ".", "__name__", "\n", "if", "not", "self", ".", "args", ".", "ZSL", ":", "\n", "            ", "target", "=", "\"general_\"", "+", "target", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "model_save_path", ",", "function", ")", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'{target}_{model_name}_{self.args.FVQA.data_choice}.pkl'", ")", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "return", "save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.__init__": [[35, 77], ["torchlight.get_dump_path", "model.Vector", "model.Vector", "data.fvqa.get_loader", "data.fvqa.get_loader", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "joint_test.Runner.word2vec._prepare", "args.method_choice.split", "joint_test.Runner.method_list.sort", "joint_test.Runner._model_choice", "joint_test.Runner._model_choice", "joint_test.Runner._model_choice", "utils.unseen_mask", "print", "print", "joint_test.Runner._load_model", "joint_test.Runner._load_model", "joint_test.Runner._load_model", "joint_test.Runner._load_model", "joint_test.Runner._load_model", "joint_test.Runner._load_model", "list", "list", "list", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.logger.get_dump_path", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.get_loader", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.get_loader", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.vector.Vector._prepare", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._model_choice", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._model_choice", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._model_choice", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.unseen_mask", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._load_model", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._load_model", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._load_model", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._load_model", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._load_model", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._load_model"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "self", ".", "log_dir", "=", "get_dump_path", "(", "args", ")", "\n", "self", ".", "word2vec", "=", "Vector", "(", "args", ".", "FVQA", ".", "common_data_path", ")", "\n", "\n", "self", ".", "train_loader", "=", "fvqa", ".", "get_loader", "(", "args", ",", "self", ".", "word2vec", ",", "train", "=", "True", ")", "\n", "self", ".", "val_loader", "=", "fvqa", ".", "get_loader", "(", "args", ",", "self", ".", "word2vec", ",", "val", "=", "True", ")", "\n", "self", ".", "avocab", "=", "default_collate", "(", "list", "(", "range", "(", "0", ",", "args", ".", "FVQA", ".", "max_ans", ")", ")", ")", "\n", "self", ".", "avocab_fact", "=", "default_collate", "(", "list", "(", "range", "(", "0", ",", "2791", ")", ")", ")", "\n", "self", ".", "avocab_relation", "=", "default_collate", "(", "list", "(", "range", "(", "0", ",", "103", ")", ")", ")", "\n", "\n", "self", ".", "question_word2vec", "=", "self", ".", "word2vec", ".", "_prepare", "(", "self", ".", "train_loader", ".", "dataset", ".", "token_to_index", ")", "\n", "\n", "# answer choice", "\n", "assert", "args", ".", "method_choice", "in", "[", "'CLS'", ",", "'W2V'", ",", "'KG'", ",", "'GAE'", ",", "'KG_W2V'", ",", "'KG_GAE'", ",", "'GAE_W2V'", ",", "'KG_GAE_W2V'", "]", "\n", "ans_len_table", "=", "{", "'W2V'", ":", "300", ",", "'KG'", ":", "300", ",", "'GAE'", ":", "1024", ",", "'CLS'", ":", "0", "}", "\n", "\n", "self", ".", "method_list", "=", "args", ".", "method_choice", ".", "split", "(", "'_'", ")", "\n", "self", ".", "method_list", ".", "sort", "(", ")", "\n", "for", "i", "in", "self", ".", "method_list", ":", "\n", "            ", "args", ".", "ans_feature_len", "+=", "ans_len_table", "[", "i", "]", "\n", "\n", "# get fusion_model and answer_net", "\n", "", "self", ".", "fusion_model_ans", ",", "self", ".", "answer_net_ans", "=", "self", ".", "_model_choice", "(", "args", ")", "\n", "self", ".", "fusion_model_rel", ",", "self", ".", "answer_net_rel", "=", "self", ".", "_model_choice", "(", "args", ")", "\n", "self", ".", "fusion_model_fact", ",", "self", ".", "answer_net_fact", "=", "self", ".", "_model_choice", "(", "args", ")", "\n", "\n", "# get the mask from zsl", "\n", "self", ".", "negtive_mux", "=", "unseen_mask", "(", "args", ",", "self", ".", "val_loader", ")", "\n", "self", ".", "max_zsl_acc", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "self", ".", "max_acc", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "print", "(", "\"begin test! ...\"", ")", "\n", "print", "(", "\"loading model  ...\"", ")", "\n", "self", ".", "_load_model", "(", "self", ".", "fusion_model_ans", ",", "\"fusion\"", ",", "\"answer\"", ")", "\n", "self", ".", "_load_model", "(", "self", ".", "answer_net_ans", ",", "\"embedding\"", ",", "\"answer\"", ")", "\n", "self", ".", "_load_model", "(", "self", ".", "fusion_model_rel", ",", "\"fusion\"", ",", "\"relation\"", ")", "\n", "self", ".", "_load_model", "(", "self", ".", "answer_net_rel", ",", "\"embedding\"", ",", "\"relation\"", ")", "\n", "self", ".", "_load_model", "(", "self", ".", "fusion_model_fact", ",", "\"fusion\"", ",", "\"fact\"", ")", "\n", "self", ".", "_load_model", "(", "self", ".", "answer_net_fact", ",", "\"embedding\"", ",", "\"fact\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.run": [[78, 132], ["data.fvqa.get_loader", "data.fvqa.get_loader", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "utils.Metrics", "utils.Metrics", "utils.Metrics", "utils.Metrics", "joint_test.Runner.eval", "logger.info", "logger.info", "logger.info", "len", "joint_test.Runner.train_loader.dataset._get_answer_vectors", "joint_test.Runner.train_loader_fact.dataset._get_answer_vectors", "joint_test.Runner.train_loader_relation.dataset._get_answer_vectors", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "logger.info", "logger.info", "logger.info", "logger.info", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "logger.info", "torch.normalize.float", "torch.normalize.float", "torch.normalize.float"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.get_loader", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.get_loader", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.eval", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite._get_answer_vectors", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite._get_answer_vectors", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite._get_answer_vectors", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "tmp_args", "=", "self", ".", "args", "\n", "tmp_args", ".", "fact_map", "=", "1", "\n", "self", ".", "train_loader_fact", "=", "fvqa", ".", "get_loader", "(", "tmp_args", ",", "self", ".", "word2vec", ",", "train", "=", "True", ")", "\n", "tmp_args", ".", "fact_map", "=", "0", "\n", "tmp_args", ".", "relation_map", "=", "1", "\n", "self", ".", "train_loader_relation", "=", "fvqa", ".", "get_loader", "(", "tmp_args", ",", "self", ".", "word2vec", ",", "train", "=", "True", ")", "\n", "\n", "# well, we recommend only use the parameter : 'CLS' or 'W2V'.", "\n", "# if you wanna use 'KG_W2V', 'KG_GAE', 'GAE_W2V', 'KG_GAE_W2V'... you could modify the following concate code", "\n", "assert", "len", "(", "self", ".", "method_list", ")", "==", "1", "\n", "\n", "for", "method_choice", "in", "self", ".", "method_list", ":", "\n", "            ", "answer_var", ",", "_", "=", "self", ".", "train_loader", ".", "dataset", ".", "_get_answer_vectors", "(", "method_choice", ",", "self", ".", "avocab", ")", "\n", "answer_var_fact", ",", "_", "=", "self", ".", "train_loader_fact", ".", "dataset", ".", "_get_answer_vectors", "(", "method_choice", ",", "self", ".", "avocab_fact", ")", "\n", "answer_var_relation", ",", "_", "=", "self", ".", "train_loader_relation", ".", "dataset", ".", "_get_answer_vectors", "(", "method_choice", ",", "self", ".", "avocab_relation", ")", "\n", "answer_var", "=", "F", ".", "normalize", "(", "answer_var", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "answer_var_fact", "=", "F", ".", "normalize", "(", "answer_var_fact", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "answer_var_relation", "=", "F", ".", "normalize", "(", "answer_var_relation", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "# TODO: concate", "\n", "\n", "", "self", ".", "answer_var", "=", "Variable", "(", "answer_var", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "answer_var_fact", "=", "Variable", "(", "answer_var_fact", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "answer_var_relation", "=", "Variable", "(", "answer_var_relation", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "val_metrics_orig", "=", "Metrics", "(", ")", "\n", "self", ".", "zsl_metrics_orig", "=", "Metrics", "(", ")", "\n", "\n", "self", ".", "val_metrics", "=", "Metrics", "(", ")", "\n", "self", ".", "zsl_metrics", "=", "Metrics", "(", ")", "\n", "###################", "\n", "self", ".", "eval", "(", ")", "\n", "###################", "\n", "res", "=", "\"\"", "\n", "if", "args", ".", "ZSL", ":", "\n", "            ", "res", "=", "\"GZSL\"", "\n", "", "logger", ".", "info", "(", "'#################################################################################################################'", ")", "\n", "# logger.info(f'orig {res} acc1={self.val_metrics_orig.acc_1: .2f}, acc3={self.val_metrics_orig.acc_3: .2f}, acc10={self.val_metrics_orig.acc_10: .2f}')", "\n", "logger", ".", "info", "(", "f'#### {res} acc1={self.val_metrics.acc_1: .2f}, acc3={self.val_metrics.acc_3: .2f}, acc10={self.val_metrics.acc_10: .2f}'", ")", "\n", "\n", "if", "args", ".", "ZSL", ":", "\n", "# logger.info(f'orig ZSL acc1={self.zsl_metrics_orig.acc_1: .2f}, acc3={self.zsl_metrics_orig.acc_3: .2f}, acc10={self.zsl_metrics_orig.acc_10: .2f}')", "\n", "            ", "logger", ".", "info", "(", "f'#### ZSL acc1={self.zsl_metrics.acc_1: .2f}, acc3={self.zsl_metrics.acc_3: .2f}, acc10={self.zsl_metrics.acc_10: .2f}'", ")", "\n", "", "logger", ".", "info", "(", "'#################################################################################################################'", ")", "\n", "\n", "if", "self", ".", "args", ".", "mrr", ":", "\n", "            ", "logger", ".", "info", "(", "'#################################################################################################################'", ")", "\n", "# logger.info(f'orig {res} mrr={self.val_metrics_orig.mrr: .4f}, mr ={self.val_metrics_orig.mr: .2f}')", "\n", "logger", ".", "info", "(", "f'#### {res} mrr={self.val_metrics.mrr: .4f}, mr ={self.val_metrics.mr: .2f}'", ")", "\n", "if", "args", ".", "ZSL", ":", "\n", "# logger.info(f'orig ZSL mrr={self.zsl_metrics_orig.mrr: .4f}, mr={self.zsl_metrics_orig.mr: .2f}')", "\n", "                ", "logger", ".", "info", "(", "f'#### ZSL mrr={self.zsl_metrics.mrr: .4f}, mr={self.zsl_metrics.mr: .2f}'", ")", "\n", "", "logger", ".", "info", "(", "'#################################################################################################################'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.eval": [[133, 208], ["joint_test.Runner.fusion_model_ans.eval", "joint_test.Runner.answer_net_ans.eval", "joint_test.Runner.fusion_model_rel.eval", "joint_test.Runner.answer_net_rel.eval", "joint_test.Runner.fusion_model_fact.eval", "joint_test.Runner.answer_net_fact.eval", "tqdm.tqdm.tqdm", "joint_test.Runner._get_fact_relation_dict", "joint_test.Runner.val_metrics_orig.update_per_epoch", "joint_test.Runner.val_metrics.update_per_epoch", "joint_test.Runner.zsl_metrics.update_per_epoch", "joint_test.Runner.zsl_metrics_orig.update_per_epoch", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "joint_test.Runner.fusion_model_ans", "joint_test.Runner.answer_net_ans", "joint_test.Runner.fusion_model_rel", "joint_test.Runner.answer_net_rel", "joint_test.Runner.fusion_model_fact", "joint_test.Runner.answer_net_fact", "predicts_rel.to.to.to", "predicts_fact.to.to.to", "predicts_ans.to.to.to", "joint_test.Runner.get_min_and_max", "joint_test.Runner.val_metrics_orig.update_per_batch", "utils.cosine_sim", "utils.cosine_sim", "utils.cosine_sim", "joint_test.Runner.zsl_metrics_orig.update_per_batch", "joint_test.Runner._get_mask_on_ans", "joint_test.Runner.val_metrics.update_per_batch", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "joint_test.Runner.zsl_metrics.update_per_batch", "torch.autograd.Variable().cuda.float", "torch.autograd.Variable().cuda.float"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.eval", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.eval", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.eval", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.eval", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.eval", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.eval", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._get_fact_relation_dict", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_epoch", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_epoch", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_epoch", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_epoch", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.get_min_and_max", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_batch", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.cosine_sim", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.cosine_sim", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.cosine_sim", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_batch", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._get_mask_on_ans", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_batch", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_batch"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "get_min_and_max_flag", "=", "0", "\n", "\n", "self", ".", "fusion_model_ans", ".", "eval", "(", ")", "\n", "self", ".", "answer_net_ans", ".", "eval", "(", ")", "\n", "self", ".", "fusion_model_rel", ".", "eval", "(", ")", "\n", "self", ".", "answer_net_rel", ".", "eval", "(", ")", "\n", "self", ".", "fusion_model_fact", ".", "eval", "(", ")", "\n", "self", ".", "answer_net_fact", ".", "eval", "(", ")", "\n", "\n", "tq", "=", "tqdm", "(", "self", ".", "val_loader", ")", "\n", "fact_relation_to_ans", "=", "self", ".", "_get_fact_relation_dict", "(", ")", "\n", "\n", "self", ".", "min", "=", "1000", "\n", "self", ".", "max", "=", "0", "\n", "\n", "for", "visual_features", ",", "boxes", ",", "question_features", ",", "answers", ",", "idx", ",", "q_len", "in", "tq", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "visual_features", "=", "Variable", "(", "visual_features", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "\n", "boxes", "=", "Variable", "(", "boxes", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "\n", "question_features", "=", "Variable", "(", "question_features", ")", ".", "cuda", "(", ")", "\n", "answers", "=", "Variable", "(", "answers", ")", ".", "cuda", "(", ")", "\n", "q_len", "=", "Variable", "(", "q_len", ")", ".", "cuda", "(", ")", "\n", "\n", "fusion_embedading_ans", "=", "self", ".", "fusion_model_ans", "(", "visual_features", ",", "boxes", ",", "question_features", ",", "q_len", ")", "\n", "answer_embedding_ans", "=", "self", ".", "answer_net_ans", "(", "self", ".", "answer_var", ")", "\n", "\n", "fusion_embedading_rel", "=", "self", ".", "fusion_model_rel", "(", "visual_features", ",", "boxes", ",", "question_features", ",", "q_len", ")", "\n", "answer_embedding_rel", "=", "self", ".", "answer_net_rel", "(", "self", ".", "answer_var_relation", ")", "\n", "\n", "fusion_embedading_fact", "=", "self", ".", "fusion_model_fact", "(", "visual_features", ",", "boxes", ",", "question_features", ",", "q_len", ")", "\n", "answer_embedding_fact", "=", "self", ".", "answer_net_fact", "(", "self", ".", "answer_var_fact", ")", "\n", "\n", "predicts_rel", "=", "cosine_sim", "(", "fusion_embedading_rel", ",", "answer_embedding_rel", ")", "/", "self", ".", "args", ".", "loss_temperature", "# temperature \u4e0e\u6bcf\u4e00\u4e2a\u7b54\u6848\u90fd\u6709\u8ba1\u7b97\u76f8\u4f3c\u5ea6\uff0c", "\n", "predicts_rel", "=", "predicts_rel", ".", "to", "(", "torch", ".", "float64", ")", "\n", "\n", "predicts_fact", "=", "cosine_sim", "(", "fusion_embedading_fact", ",", "answer_embedding_fact", ")", "/", "self", ".", "args", ".", "loss_temperature", "# temperature \u4e0e\u6bcf\u4e00\u4e2a\u7b54\u6848\u90fd\u6709\u8ba1\u7b97\u76f8\u4f3c\u5ea6\uff0c", "\n", "predicts_fact", "=", "predicts_fact", ".", "to", "(", "torch", ".", "float64", ")", "\n", "\n", "predicts_ans", "=", "cosine_sim", "(", "fusion_embedading_ans", ",", "answer_embedding_ans", ")", "/", "self", ".", "args", ".", "loss_temperature", "# temperature \u4e0e\u6bcf\u4e00\u4e2a\u7b54\u6848\u90fd\u6709\u8ba1\u7b97\u76f8\u4f3c\u5ea6\uff0c", "\n", "predicts_ans", "=", "predicts_ans", ".", "to", "(", "torch", ".", "float64", ")", "\n", "\n", "self", ".", "get_min_and_max", "(", "predicts_ans", ".", "data", ")", "\n", "\n", "predicts_ans_orig", "=", "predicts_ans", "\n", "self", ".", "val_metrics_orig", ".", "update_per_batch", "(", "0", ",", "answers", ".", "data", ",", "predicts_ans", ".", "data", ")", "\n", "\n", "if", "self", ".", "args", ".", "ZSL", "==", "1", ":", "\n", "                    ", "zsl_predicts", "=", "predicts_ans", "+", "self", ".", "negtive_mux", "[", ":", "predicts_ans", ".", "shape", "[", "0", "]", ",", ":", "]", "\n", "self", ".", "zsl_metrics_orig", ".", "update_per_batch", "(", "0", ",", "answers", ".", "data", ",", "zsl_predicts", ".", "data", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "joint_test_way", "==", "0", ":", "# way 0", "\n", "                    ", "mask_matrix", "=", "self", ".", "_get_mask_on_ans", "(", "predicts_rel", ",", "predicts_fact", ",", "fact_relation_to_ans", ")", "\n", "\n", "# add mask", "\n", "predicts_ans", "=", "predicts_ans", "+", "mask_matrix", "\n", "self", ".", "val_metrics", ".", "update_per_batch", "(", "0", ",", "answers", ".", "data", ",", "predicts_ans", ".", "data", ")", "\n", "if", "args", ".", "ZSL", "==", "1", ":", "\n", "                        ", "zsl_predicts", "=", "predicts_ans", "+", "self", ".", "negtive_mux", "[", ":", "predicts_ans", ".", "shape", "[", "0", "]", ",", ":", "]", "\n", "self", ".", "zsl_metrics", ".", "update_per_batch", "(", "0", ",", "answers", ".", "data", ",", "zsl_predicts", ".", "data", ")", "\n", "\n", "# explain_experiments:", "\n", "# self.get_entity_id()", "\n", "# self.explain_experiments(predicts_rel,predicts_fact,predicts_ans,predicts_ans_orig,answers,fact_relation_to_ans,idx)", "\n", "\n", "", "", "", "", "self", ".", "val_metrics_orig", ".", "update_per_epoch", "(", ")", "\n", "self", ".", "val_metrics", ".", "update_per_epoch", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "ZSL", "==", "1", ":", "\n", "            ", "self", ".", "zsl_metrics", ".", "update_per_epoch", "(", ")", "\n", "self", ".", "zsl_metrics_orig", ".", "update_per_epoch", "(", ")", "\n", "\n", "", "if", "self", ".", "get_min_and_max_flag", ":", "\n", "            ", "print", "(", "\"self.min:\"", ",", "self", ".", "min", ")", "\n", "print", "(", "\"self.max:\"", ",", "self", ".", "max", ")", "\n", "# pdb.set_trace()", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.get_min_and_max": [[210, 220], ["predicted.topk", "ok[].reshape", "ok[].reshape", "min().item", "min().item", "min().item", "min().item", "min", "min", "min", "min"], "methods", ["None"], ["", "", "def", "get_min_and_max", "(", "self", ",", "predicted", ")", ":", "\n", "        ", "self", ".", "get_min_and_max_flag", "=", "1", "\n", "ok", ",", "_", "=", "predicted", ".", "topk", "(", "500", ",", "dim", "=", "1", ")", "\n", "min_tmp", "=", "ok", "[", ":", ",", "-", "1", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "max_tmp", "=", "ok", "[", ":", ",", "0", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "# pdb.set_trace()", "\n", "if", "min", "(", "min_tmp", "[", "0", "]", ")", ".", "item", "(", ")", "<", "self", ".", "min", ":", "\n", "            ", "self", ".", "min", "=", "min", "(", "min_tmp", "[", "0", "]", ")", ".", "item", "(", ")", "\n", "", "if", "min", "(", "max_tmp", "[", "0", "]", ")", ".", "item", "(", ")", ">", "self", ".", "max", ":", "\n", "            ", "self", ".", "max", "=", "min", "(", "max_tmp", "[", "0", "]", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.explain_experiments": [[221, 285], ["predicts_rel.topk", "predicts_fact.topk", "predicts_ans.data.topk", "predicts_ans_orig.data.topk", "answers.topk", "top_rel[].cpu().numpy().tolist", "top_fact[].cpu().numpy().tolist", "pre_ans[].cpu().numpy().tolist", "pre_ans_orig[].cpu().numpy().tolist", "idx[].item", "[].item", "range", "joint_test.Runner.get_correspond_name", "joint_test.Runner.get_correspond_name", "joint_test.Runner.get_correspond_name", "joint_test.Runner.get_correspond_name", "list", "list", "len", "range", "pdb.set_trace", "set", "set", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "top_rel[].cpu().numpy", "top_fact[].cpu().numpy", "pre_ans[].cpu().numpy", "pre_ans_orig[].cpu().numpy", "len", "str", "fact_relation_to_ans.keys", "str", "str", "str", "top_rel[].cpu", "top_fact[].cpu", "pre_ans[].cpu", "pre_ans_orig[].cpu", "str", "str", "list.append", "list.append"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.get_correspond_name", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.get_correspond_name", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.get_correspond_name", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.get_correspond_name"], ["", "", "def", "explain_experiments", "(", "self", ",", "predicts_rel", ",", "predicts_fact", ",", "predicts_ans", ",", "predicts_ans_orig", ",", "answers", ",", "fact_relation_to_ans", ",", "idx", ")", ":", "\n", "\n", "        ", "if", "self", ".", "val_metrics", ".", "correct_1", ">=", "self", ".", "val_metrics_orig", ".", "correct_1", "and", "self", ".", "val_metrics", ".", "correct_1", ">", "0", ":", "\n", "# get the top 10 ans", "\n", "# get the top 10 relation/fact", "\n", "            ", "pre_h_r", "=", "[", "]", "\n", "pre_t", "=", "[", "]", "\n", "_", ",", "top_rel", "=", "predicts_rel", ".", "topk", "(", "self", ".", "args", ".", "top_rel", ",", "dim", "=", "1", ")", "\n", "_", ",", "top_fact", "=", "predicts_fact", ".", "topk", "(", "self", ".", "args", ".", "top_fact", ",", "dim", "=", "1", ")", "\n", "_", ",", "pre_ans", "=", "predicts_ans", ".", "data", ".", "topk", "(", "10", ",", "dim", "=", "1", ")", "\n", "_", ",", "pre_ans_orig", "=", "predicts_ans_orig", ".", "data", ".", "topk", "(", "10", ",", "dim", "=", "1", ")", "\n", "if", "len", "(", "answers", ".", "data", ".", "shape", ")", "==", "3", ":", "\n", "                ", "answers", "=", "answers", ".", "data", "[", "0", "]", "\n", "", "_", ",", "real_ans", "=", "answers", ".", "topk", "(", "1", ",", "dim", "=", "1", ")", "\n", "\n", "top_rel", "=", "top_rel", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "top_fact", "=", "top_fact", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "pre_ans", "=", "pre_ans", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "pre_ans_orig", "=", "pre_ans_orig", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "idx", "=", "idx", "[", "0", "]", ".", "item", "(", ")", "\n", "real_ans", "=", "real_ans", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "top_rel", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "args", ".", "top_fact", ")", ":", "\n", "                    ", "name", "=", "str", "(", "top_fact", "[", "j", "]", ")", "+", "\"-\"", "+", "str", "(", "top_rel", "[", "i", "]", ")", "\n", "if", "name", "in", "fact_relation_to_ans", ".", "keys", "(", ")", ":", "\n", "                        ", "for", "k", "in", "fact_relation_to_ans", "[", "name", "]", ":", "\n", "                            ", "if", "k", "in", "pre_ans", ":", "\n", "                                ", "name_real", "=", "self", ".", "fact_id", "[", "top_fact", "[", "j", "]", "]", "+", "\"-\"", "+", "self", ".", "relation_id", "[", "top_rel", "[", "i", "]", "]", "\n", "pre_h_r", ".", "append", "(", "name_real", ")", "\n", "pre_t", ".", "append", "(", "self", ".", "answer_id", "[", "k", "]", ")", "\n", "\n", "", "", "", "", "", "top_rel_real", "=", "self", ".", "get_correspond_name", "(", "top_rel", ",", "self", ".", "relation_id", ")", "\n", "top_fact_real", "=", "self", ".", "get_correspond_name", "(", "top_fact", ",", "self", ".", "fact_id", ")", "\n", "pre_ans_real", "=", "self", ".", "get_correspond_name", "(", "pre_ans", ",", "self", ".", "answer_id", ")", "\n", "pre_ans_orig_real", "=", "self", ".", "get_correspond_name", "(", "pre_ans_orig", ",", "self", ".", "answer_id", ")", "\n", "real_ans", "=", "self", ".", "answer_id", "[", "real_ans", "]", "\n", "if", "real_ans", "!=", "self", ".", "test_order_data", "[", "str", "(", "idx", ")", "]", "[", "\"answer\"", "]", ":", "\n", "                ", "pdb", ".", "set_trace", "(", ")", "\n", "", "question", "=", "self", ".", "test_order_data", "[", "str", "(", "idx", ")", "]", "[", "\"question\"", "]", "\n", "question_id", "=", "idx", "\n", "real_fact_in_dataset", "=", "self", ".", "test_order_data", "[", "str", "(", "idx", ")", "]", "[", "\"fact\"", "]", "\n", "image", "=", "self", ".", "test_order_data", "[", "str", "(", "idx", ")", "]", "[", "\"img_file\"", "]", "\n", "pre_t", "=", "list", "(", "set", "(", "pre_t", ")", ")", "\n", "pre_h_r", "=", "list", "(", "set", "(", "pre_h_r", ")", ")", "\n", "# if real_fact_in_dataset[1] in top_rel_real and (real_fact_in_dataset[0] in top_fact_real or real_fact_in_dataset[1] in top_fact_real):", "\n", "if", "real_ans", "not", "in", "pre_t", "and", "len", "(", "pre_t", ")", ">=", "1", ":", "\n", "                ", "logger", ".", "info", "(", "'#################################################################################'", ")", "\n", "logger", ".", "info", "(", "f'test id = {question_id}, question = {question}, img = {image}'", ")", "\n", "logger", ".", "info", "(", "f'real suppord fact in dataset={real_fact_in_dataset}, real answer = {real_ans}'", ")", "\n", "logger", ".", "info", "(", "f'normal model predict = {pre_ans_orig_real}'", ")", "\n", "logger", ".", "info", "(", "f'our model predict = {pre_ans_real}'", ")", "\n", "logger", ".", "info", "(", "f'our model predict relation = {top_rel_real}'", ")", "\n", "logger", ".", "info", "(", "f'our model predict fact = {top_fact_real}'", ")", "\n", "logger", ".", "info", "(", "f'suppord fact predict = {pre_h_r}'", ")", "\n", "logger", ".", "info", "(", "f'correspond target = {pre_t}'", ")", "\n", "logger", ".", "info", "(", "'#################################################################################'", ")", "\n", "# else:", "\n", "#     logger.info(f'fail')", "\n", "\n", "", "", "self", ".", "val_metrics", ".", "correct_1", "=", "0", "\n", "self", ".", "val_metrics_orig", ".", "correct_1", "=", "0", "\n", "self", ".", "val_metrics", ".", "correct_3", "=", "0", "\n", "self", ".", "val_metrics_orig", ".", "correct_3", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.get_entity_id": [[286, 308], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "open", "json.load", "open", "json.load", "joint_test.Runner.invert_dict", "open", "json.load", "joint_test.Runner.invert_dict", "open", "json.load", "joint_test.Runner.invert_dict"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.invert_dict", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.invert_dict", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.invert_dict"], ["", "def", "get_entity_id", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", ".", "TEST", ".", "batch_size", "=", "1", "\n", "exp_data", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "data_root", ",", "\"fvqa\"", ",", "\"exp_data\"", ")", "\n", "num", "=", "\"3\"", "\n", "test_order_data", "=", "osp", ".", "join", "(", "exp_data", ",", "\"test_data\"", ",", "\"test\"", "+", "num", ",", "\"all_qs_dict_release_test_500_inorder.json\"", ")", "\n", "relation_id_path", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "common_data_path", ",", "\"answer.vocab.fvqa.relation.500.json\"", ")", "\n", "fact_id_path", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "common_data_path", ",", "\"answer.vocab.fvqa.fact.500.json\"", ")", "\n", "answer_id_path", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "common_data_path", ",", "\"answer.vocab.fvqa.500.json\"", ")", "\n", "with", "open", "(", "test_order_data", ",", "'r'", ")", "as", "fd", ":", "\n", "            ", "self", ".", "test_order_data", "=", "json", ".", "load", "(", "fd", ")", "\n", "", "with", "open", "(", "relation_id_path", ",", "'r'", ")", "as", "fd", ":", "\n", "            ", "self", ".", "relation_id", "=", "json", ".", "load", "(", "fd", ")", "\n", "self", ".", "relation_id", "=", "self", ".", "relation_id", "[", "'answer'", "]", "\n", "self", ".", "relation_id", "=", "self", ".", "invert_dict", "(", "self", ".", "relation_id", ")", "\n", "", "with", "open", "(", "fact_id_path", ",", "'r'", ")", "as", "fd", ":", "\n", "            ", "self", ".", "fact_id", "=", "json", ".", "load", "(", "fd", ")", "\n", "self", ".", "fact_id", "=", "self", ".", "fact_id", "[", "'answer'", "]", "\n", "self", ".", "fact_id", "=", "self", ".", "invert_dict", "(", "self", ".", "fact_id", ")", "\n", "", "with", "open", "(", "answer_id_path", ",", "'r'", ")", "as", "fd", ":", "\n", "            ", "self", ".", "answer_id", "=", "json", ".", "load", "(", "fd", ")", "\n", "self", ".", "answer_id", "=", "self", ".", "answer_id", "[", "'answer'", "]", "\n", "self", ".", "answer_id", "=", "self", ".", "invert_dict", "(", "self", ".", "answer_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.get_correspond_name": [[309, 314], ["target.append"], "methods", ["None"], ["", "", "def", "get_correspond_name", "(", "self", ",", "id_list", ",", "dict", ")", ":", "\n", "        ", "target", "=", "[", "]", "\n", "for", "i", "in", "id_list", ":", "\n", "            ", "target", ".", "append", "(", "dict", "[", "i", "]", ")", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner.invert_dict": [[315, 317], ["d.items"], "methods", ["None"], ["", "def", "invert_dict", "(", "self", ",", "d", ")", ":", "\n", "        ", "return", "{", "v", ":", "k", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._model_choice": [[318, 325], ["getattr", "getattr"], "methods", ["None"], ["", "def", "_model_choice", "(", "self", ",", "args", ")", ":", "\n", "# models api", "\n", "        ", "fusion_model", "=", "getattr", "(", "fusion_net", ",", "args", ".", "fusion_model", ")", "(", "args", ",", "self", ".", "train_loader", ".", "dataset", ",", "\n", "self", ".", "question_word2vec", ")", ".", "cuda", "(", ")", "\n", "assert", "args", ".", "answer_embedding", "in", "[", "'MLP'", "]", "\n", "answer_model", "=", "getattr", "(", "answer_net", ",", "args", ".", "answer_embedding", ")", "(", "args", ",", "self", ".", "train_loader", ".", "dataset", ")", ".", "cuda", "(", ")", "\n", "return", "fusion_model", ",", "answer_model", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._load_model": [[326, 339], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "model.load_state_dict", "model.load_state_dict", "model.load_state_dict", "model.load_state_dict", "print", "type", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "_load_model", "(", "self", ",", "model", ",", "function", ",", "type_name", ")", ":", "\n", "        ", "assert", "function", "in", "[", "\"fusion\"", ",", "\"embedding\"", "]", "\n", "assert", "type_name", "in", "[", "\"answer\"", ",", "\"relation\"", ",", "\"fact\"", "]", "\n", "target", "=", "type_name", "\n", "model_name", "=", "type", "(", "model", ")", ".", "__name__", "\n", "if", "not", "self", ".", "args", ".", "ZSL", ":", "\n", "            ", "target", "=", "\"general_\"", "+", "target", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "model_save_path", ",", "function", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'{target}_{model_name}_{self.args.FVQA.data_choice}.pkl'", ")", "\n", "\n", "# you can try: e.g. torch.load(save_path, map_location={'cuda:1': 'cuda:0'} )  if some error arise        ", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "print", "(", "f\"loading {save_path} model done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._get_fact_relation_dict": [[340, 344], ["open", "json.load"], "methods", ["None"], ["", "def", "_get_fact_relation_dict", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "args", ".", "FVQA", ".", "fact_relation_to_ans_path", ",", "'r'", ")", "as", "fd", ":", "\n", "            ", "fact_relation_to_ans", "=", "json", ".", "load", "(", "fd", ")", "\n", "", "return", "fact_relation_to_ans", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.joint_test.Runner._get_mask_on_ans": [[345, 374], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "predicts_rel.topk", "predicts_fact.topk", "range", "mask_ans.cuda.cuda.cuda", "range", "range", "str", "fact_relation_to_ans.keys", "str", "[].item", "[].item"], "methods", ["None"], ["", "def", "_get_mask_on_ans", "(", "self", ",", "predicts_rel", ",", "predicts_fact", ",", "fact_relation_to_ans", ")", ":", "\n", "# self.train_loader.dataset \u5fc5\u987b\u662frelation\u548cfact\uff0c\u8fd9\u6837\u624d\u80fd\u6620\u5c04\u5230relation\u548cfact\u4e0a\u3002\u4e0d\u7136\u90fd\u662f 128 * 500", "\n", "        ", "mask_ans", "=", "torch", ".", "ones", "(", "predicts_rel", ".", "shape", "[", "0", "]", ",", "self", ".", "args", ".", "FVQA", ".", "max_ans", ")", "\n", "\n", "# \u628a\u6bcf\u4e00\u884c\u7684 predicts_rel \u548c predicts_fact \u4e2d top \u62ff\u51fa\u6765\u51d1\u5bf9\u5e76\u4e14\u4ecefact_relation_to_ans\u7b5b\u9009\uff0c\u5c06\u5bf9\u5e94\u4f4d\u7f6e\u7f6e0\u3002rel top10\uff0cfact top30", "\n", "_", ",", "top_rel", "=", "predicts_rel", ".", "topk", "(", "self", ".", "args", ".", "top_rel", ",", "dim", "=", "1", ")", "\n", "_", ",", "top_fact", "=", "predicts_fact", ".", "topk", "(", "self", ".", "args", ".", "top_fact", ",", "dim", "=", "1", ")", "\n", "\n", "# tmp = 0", "\n", "##############################################################################", "\n", "# TODO: optimize this process via relation matric mapping rather than \u201c for-loop\u201d", "\n", "for", "item", "in", "range", "(", "predicts_rel", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "args", ".", "top_rel", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "args", ".", "top_fact", ")", ":", "\n", "                    ", "name", "=", "str", "(", "top_fact", "[", "item", "]", "[", "j", "]", ".", "item", "(", ")", ")", "+", "\"-\"", "+", "str", "(", "top_rel", "[", "item", "]", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "if", "name", "in", "fact_relation_to_ans", ".", "keys", "(", ")", ":", "\n", "                        ", "for", "k", "in", "fact_relation_to_ans", "[", "name", "]", ":", "\n", "# if mask_ans[item][k] > 0.1:", "\n", "#     tmp += 1", "\n", "# remove the mask from those ans ...", "\n", "                            ", "mask_ans", "[", "item", "]", "[", "k", "]", "=", "0", "\n", "\n", "# avg = tmp / self.args.TEST.batch_size", "\n", "# pdb.set_trace()", "\n", "# add mask", "\n", "", "", "", "", "", "mask_ans", "=", "mask_ans", "*", "-", "1", "*", "self", ".", "args", ".", "soft_score", "\n", "mask_ans", "=", "mask_ans", ".", "cuda", "(", ")", "\n", "##############################################################################", "\n", "return", "mask_ans", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.__init__": [[21, 35], ["os.join", "os.join", "os.join", "os.join", "collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "path", "=", "osp", ".", "join", "(", "args", ".", "data_root", ",", "\"data\"", ",", "\"FVQA/\"", ")", "\n", "self", ".", "data_path", "=", "osp", ".", "join", "(", "self", ".", "path", ",", "\"new_dataset_release\"", ")", "\n", "self", ".", "split_path", "=", "osp", ".", "join", "(", "self", ".", "path", ",", "\"Name_Lists\"", ")", "\n", "self", ".", "exp_data", "=", "osp", ".", "join", "(", "args", ".", "data_root", ",", "\"fvqa\"", ",", "\"exp_data\"", ")", "\n", "self", ".", "e1_list", "=", "[", "]", "\n", "self", ".", "r_list", "=", "[", "]", "\n", "self", ".", "e2_list", "=", "[", "]", "\n", "self", ".", "entity_list", "=", "[", "]", "\n", "# \u8fd9\u4e2aentity \u5728\u54ea\u4e9bVQA pair\u4e2d\u51fa\u73b0\u8fc7\u3002", "\n", "self", ".", "e1_show_key", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "e2_show_key", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "all_entity", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.get_new_all_json": [[37, 66], ["os.join", "os.exists", "open", "json.load", "json.load.keys", "open", "json.dump", "print", "os.join", "utils.deal_fact", "utils.deal_fact", "[].append", "[].append", "[].append", "fact[].split"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.deal_fact", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.deal_fact"], ["", "def", "get_new_all_json", "(", "self", ")", ":", "\n", "        ", "path", "=", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_combine_all.json\"", ")", "\n", "\n", "if", "not", "osp", ".", "exists", "(", "path", ")", ":", "\n", "            ", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_fact_triples_release.json\"", ")", ",", "\"r\"", ",", "encoding", "=", "'utf8'", ")", "as", "ffp", ":", "\n", "                ", "dic_all", "=", "json", ".", "load", "(", "ffp", ")", "\n", "# pdb.set_trace()", "\n", "for", "i", "in", "dic_all", ".", "keys", "(", ")", ":", "\n", "# fact_source = dic[i][\"fact\"][0]", "\n", "                    ", "fact", "=", "dic_all", "[", "i", "]", "\n", "fact", "[", "'e1'", "]", "=", "deal_fact", "(", "dic_all", "[", "i", "]", ",", "fact", "[", "'e1'", "]", ")", "\n", "fact", "[", "'e2'", "]", "=", "deal_fact", "(", "dic_all", "[", "i", "]", ",", "fact", "[", "'e2'", "]", ")", "\n", "dic_all", "[", "i", "]", "[", "\"fact\"", "]", "=", "[", "]", "\n", "dic_all", "[", "i", "]", "[", "\"fact\"", "]", ".", "append", "(", "fact", "[", "'e1'", "]", ")", "\n", "dic_all", "[", "i", "]", "[", "\"fact\"", "]", ".", "append", "(", "fact", "[", "'r'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "dic_all", "[", "i", "]", "[", "\"fact\"", "]", ".", "append", "(", "fact", "[", "'e2'", "]", ")", "\n", "# pdb.set_trace()", "\n", "del", "dic_all", "[", "i", "]", "[", "'KB'", "]", "\n", "del", "dic_all", "[", "i", "]", "[", "'e1_label'", "]", "\n", "# del dic_all[i]['uri']", "\n", "del", "dic_all", "[", "i", "]", "[", "'e2_label'", "]", "\n", "# del dic_all[i]['sources']", "\n", "# del dic_all[i]['context']", "\n", "del", "dic_all", "[", "i", "]", "[", "'score'", "]", "\n", "", "", "", "else", ":", "\n", "# \u9700\u8981\u4eba\u5de5\u53bb\u566a", "\n", "            ", "with", "open", "(", "path", ",", "'w'", ")", "as", "fd", ":", "\n", "                ", "json", ".", "dump", "(", "dic_all", ",", "fd", ")", "\n", "print", "(", "\"get_new_json_combile done!\uff08remember to do some human check !!!\uff09\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.get_new_json": [[68, 90], ["os.join", "os.exists", "open", "json.load", "open", "json.dump", "print", "os.join", "open", "json.load", "json.load.keys", "os.join", "utils.deal_fact", "utils.deal_fact", "[].append", "[].append", "fact[].split"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.deal_fact", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.deal_fact"], ["", "", "", "def", "get_new_json", "(", "self", ")", ":", "\n", "        ", "path", "=", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_combine.json\"", ")", "\n", "if", "not", "osp", ".", "exists", "(", "path", ")", ":", "\n", "            ", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_cp.json\"", ")", ",", "\"r\"", ")", "as", "fp", ":", "\n", "                ", "dic", "=", "json", ".", "load", "(", "fp", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_fact_triples_release.json\"", ")", ",", "\"r\"", ",", "encoding", "=", "'utf8'", ")", "as", "ffp", ":", "\n", "                    ", "dic_all", "=", "json", ".", "load", "(", "ffp", ")", "\n", "# pdb.set_trace()", "\n", "for", "i", "in", "dic_all", ".", "keys", "(", ")", ":", "\n", "                        ", "fact_source", "=", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "0", "]", "\n", "fact", "=", "dic_all", "[", "fact_source", "]", "\n", "fact", "[", "'e1'", "]", "=", "deal_fact", "(", "dic", "[", "i", "]", ",", "fact", "[", "'e1'", "]", ")", "\n", "fact", "[", "'e2'", "]", "=", "deal_fact", "(", "dic", "[", "i", "]", ",", "fact", "[", "'e2'", "]", ")", "\n", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "0", "]", "=", "fact", "[", "'e1'", "]", "\n", "dic", "[", "i", "]", "[", "\"fact\"", "]", ".", "append", "(", "fact", "[", "'r'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "dic", "[", "i", "]", "[", "\"fact\"", "]", ".", "append", "(", "fact", "[", "'e2'", "]", ")", "\n", "del", "dic", "[", "i", "]", "[", "'ans_source'", "]", "\n", "del", "dic", "[", "i", "]", "[", "'visual_concept'", "]", "\n", "# \u9700\u8981\u4eba\u5de5\u53bb\u566a", "\n", "", "", "", "with", "open", "(", "path", ",", "'w'", ")", "as", "fd", ":", "\n", "                ", "json", ".", "dump", "(", "dic", ",", "fd", ")", "\n", "print", "(", "\"get_new_json done!\uff08remember to do some human check !!!\uff09\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.get_entity_filter": [[91, 114], ["open", "json.load", "json.load.keys", "set", "list", "list", "print", "os.join", "deal_data.Runner.e1_list.append", "deal_data.Runner.r_list.append", "deal_data.Runner.e2_list.append", "deal_data.Runner.e1_show_key[].append", "deal_data.Runner.e2_show_key[].append", "set", "[].lower().replace", "[].lower", "len"], "methods", ["None"], ["", "", "", "def", "get_entity_filter", "(", "self", ")", ":", "\n", "# \u628a\u5934\u5c3e\u5b9e\u4f53\u7b5b\u9009\u4e00\u904d\uff0c\u5e76\u4e14\u50a8\u5b58", "\n", "\n", "        ", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_combine.json\"", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "dic", "=", "json", ".", "load", "(", "fp", ")", "\n", "for", "i", "in", "dic", ".", "keys", "(", ")", ":", "\n", "                ", "for", "j", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "                    ", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "j", "]", "=", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "j", "]", ".", "lower", "(", ")", ".", "replace", "(", "\"  \"", ",", "\" \"", ")", "\n", "if", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "j", "]", "[", "0", "]", "==", "\" \"", ":", "\n", "                        ", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "j", "]", "=", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "j", "]", "[", "1", ":", "]", "\n", "", "if", "len", "(", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "j", "]", ")", ">", "2", "and", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "j", "]", "[", "-", "2", "]", "==", "\"#\"", ":", "\n", "                        ", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "j", "]", "=", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "j", "]", "[", ":", "-", "2", "]", "\n", "\n", "", "", "self", ".", "e1_list", ".", "append", "(", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "0", "]", ")", "\n", "self", ".", "r_list", ".", "append", "(", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "1", "]", ")", "\n", "self", ".", "e2_list", ".", "append", "(", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "2", "]", ")", "\n", "self", ".", "e1_show_key", "[", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "0", "]", "]", ".", "append", "(", "i", ")", "\n", "self", ".", "e2_show_key", "[", "dic", "[", "i", "]", "[", "\"fact\"", "]", "[", "2", "]", "]", ".", "append", "(", "i", ")", "\n", "", "self", ".", "entity_list", "=", "set", "(", "self", ".", "e1_list", "+", "self", ".", "e2_list", ")", "\n", "self", ".", "entity_list", "=", "list", "(", "self", ".", "entity_list", ")", "\n", "self", ".", "r_list", "=", "list", "(", "set", "(", "self", ".", "r_list", ")", ")", "\n", "# pdb.set_trace()", "\n", "print", "(", "\"get_entity_filter done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.get_all_entity": [[115, 209], ["os.join", "pickle.load.remove", "pickle.load.remove", "pickle.load.remove", "pickle.load.remove", "os.join", "os.exists", "set", "list", "pickle.load.sort", "os.exists", "print", "print", "print", "print", "open", "list.count", "set", "open", "pickle.dump", "open", "print", "pickle.load", "open", "json.load", "tqdm.tqdm", "len", "len", "open", "json.dump", "os.join", "f.readline", "re.split", "list.append", "list.append", "os.join", "entity.replace().replace.replace().replace.replace().replace", "entity.replace().replace.replace().replace.replace().replace", "entity.replace().replace.replace().replace.replace().replace", "utils.dele_a", "list", "list", "Noin.append", "list", "line[].lower().replace", "line[].lower().replace", "utils.transfer", "utils.dele_a", "set", "list", "set", "set", "entity.replace().replace.replace().replace.replace", "entity.replace().replace.replace().replace.replace", "entity.replace().replace.replace().replace.replace", "utils.hand_remove", "set", "deal_data.Runner.all_entity.append", "line[].lower", "line[].lower", "utils.transfer"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.dele_a", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.transfer", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.dele_a", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.hand_remove", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.transfer"], ["", "", "def", "get_all_entity", "(", "self", ")", ":", "\n", "        ", "path", "=", "osp", ".", "join", "(", "self", ".", "data_path", ",", "'ids_new.data'", ")", "\n", "if", "not", "osp", ".", "exists", "(", "path", ")", ":", "\n", "\n", "# \u5f97\u5230\u6240\u6709\u7684\u5934\u5c3e\u5b9e\u4f53\uff0c\u5e76\u4e14\u6392\u5e8f", "\n", "            ", "entity_list", "=", "[", "]", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"FVQA_triple_new_2.txt\"", ")", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "# k = 0", "\n", "                ", "while", "1", ":", "\n", "                    ", "line", "=", "f", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                        ", "break", "\n", "", "if", "line", "[", ":", "3", "]", "==", "'***'", ":", "\n", "                        ", "continue", "\n", "# k += 1", "\n", "# if k % 1000 == 0:", "\n", "#     print(k, len(lis))", "\n", "", "line", "=", "re", ".", "split", "(", "'\\t|\\n'", ",", "line", ")", "\n", "entity_list", ".", "append", "(", "line", "[", "0", "]", ".", "lower", "(", ")", ".", "replace", "(", "\"-\"", ",", "\" \"", ")", ")", "\n", "entity_list", ".", "append", "(", "line", "[", "2", "]", ".", "lower", "(", ")", ".", "replace", "(", "\"-\"", ",", "\" \"", ")", ")", "\n", "", "", "entity_set", "=", "set", "(", "entity_list", ")", "\n", "\n", "def", "rule_4", "(", "a", ")", ":", "\n", "                ", "return", "entity_list", ".", "count", "(", "a", ")", "\n", "\n", "", "entity_sort", "=", "list", "(", "set", "(", "entity_list", ")", ")", "\n", "entity_sort", ".", "sort", "(", "key", "=", "rule_4", ",", "reverse", "=", "True", ")", "\n", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "entity_sort", ",", "f", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "# \u6309\u51fa\u73b0\u6570\u91cf\u6392\u5e8f\u8fc7\u4e86\u7684\u5b9e\u4f53", "\n", "                ", "print", "(", "\"load ids_new.data\"", ")", "\n", "entity_sort", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "", "entity_sort", ".", "remove", "(", "'y'", ")", "\n", "entity_sort", ".", "remove", "(", "'and'", ")", "\n", "entity_sort", ".", "remove", "(", "'yes'", ")", "\n", "entity_sort", ".", "remove", "(", "'no'", ")", "\n", "\n", "path", "=", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_combine_filter.json\"", ")", "\n", "\n", "if", "not", "osp", ".", "exists", "(", "path", ")", ":", "\n", "            ", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_combine.json\"", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "dic", "=", "json", ".", "load", "(", "fp", ")", "\n", "Noin", "=", "[", "]", "\n", "for", "entity", "in", "tqdm", ".", "tqdm", "(", "self", ".", "entity_list", ")", ":", "\n", "                    ", "entity_orig", "=", "entity", "\n", "entity", "=", "entity", ".", "replace", "(", "\"_\"", ",", "\" \"", ")", ".", "replace", "(", "\"-\"", ",", "\" \"", ")", "\n", "entity", "=", "entity", ".", "replace", "(", "\"Category:\"", ",", "\"\"", ")", ".", "replace", "(", "\"category:\"", ",", "\"\"", ")", "\n", "entity", "=", "entity", ".", "replace", "(", "\"(\"", ",", "\"\"", ")", ".", "replace", "(", "\")\"", ",", "\"\"", ")", "\n", "entity_list", "=", "[", "entity", "]", "\n", "\n", "dele_a_list", "=", "dele_a", "(", "entity", ")", "\n", "transfer_a", "=", "[", "transfer", "(", "entity", ")", "]", "\n", "# entity_list.append(no_)", "\n", "entity_list", "=", "entity_list", "+", "transfer_a", "# \u53d8\u5f62", "\n", "entity_list", "=", "entity_list", "+", "dele_a_list", "# \u53bb\u51a0\u8bcd", "\n", "entity_list", "=", "entity_list", "+", "dele_a", "(", "transfer_a", "[", "0", "]", ")", "# \u53d8\u5f62\u540e\u53bb\u51a0\u8bcd", "\n", "for", "i", "in", "dele_a_list", ":", "\n", "                        ", "entity_list", "=", "entity_list", "+", "[", "transfer", "(", "i", ")", "]", "# \u53bb\u51a0\u8bcd\u540e\u53d8\u5f62", "\n", "\n", "", "entity_list", "=", "list", "(", "set", "(", "entity_list", ")", ")", "\n", "hand_list", "=", "[", "]", "\n", "for", "k", "in", "entity_list", ":", "\n", "                        ", "hand_list", "=", "hand_list", "+", "hand_remove", "(", "k", ")", "# \u624b\u52a8\u53bb\u7279\u6b8a\u5f62\u5f0f", "\n", "", "entity_list", "=", "entity_list", "+", "list", "(", "set", "(", "hand_list", ")", ")", "\n", "entity_list", "=", "list", "(", "set", "(", "entity_list", ")", ")", "\n", "flag", "=", "0", "\n", "\n", "# print(\"change entity...\")", "\n", "for", "key", "in", "entity_sort", ":", "\n", "                        ", "if", "key", "in", "entity_list", ":", "\n", "                            ", "flag", "=", "1", "\n", "self", ".", "all_entity", ".", "append", "(", "key", ")", "\n", "for", "j", "in", "self", ".", "e1_show_key", "[", "entity_orig", "]", ":", "# \u7b54\u6848\u662f\u8fd9\u4e2a\u7684\u7f16\u53f7", "\n", "                                ", "dic", "[", "j", "]", "[", "'fact'", "]", "[", "0", "]", "=", "key", "\n", "", "for", "j", "in", "self", ".", "e2_show_key", "[", "entity_orig", "]", ":", "# \u7b54\u6848\u662f\u8fd9\u4e2a\u7684\u7f16\u53f7", "\n", "                                ", "dic", "[", "j", "]", "[", "'fact'", "]", "[", "2", "]", "=", "key", "\n", "", "break", "\n", "", "", "if", "flag", ":", "\n", "                        ", "continue", "\n", "\n", "", "Noin", ".", "append", "(", "entity_orig", ")", "\n", "", "", "print", "(", "\"all entity num:\"", ",", "len", "(", "list", "(", "set", "(", "self", ".", "all_entity", ")", ")", ")", ")", "\n", "print", "(", "\"no in :\"", ",", "Noin", ")", "\n", "print", "(", "\"no in num :\"", ",", "len", "(", "Noin", ")", ")", "\n", "\n", "# entity \u7b5b\u9009\u8fc7\u7684\u3002\u6b64\u65f6\u7b54\u6848\u548centity \u7edf\u4e00\u4e86", "\n", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "fp", ":", "\n", "                ", "json", ".", "dump", "(", "dic", ",", "fp", ")", "\n", "", "print", "(", "\"get_all_entity filter done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.fusion_answer_and_entity": [[210, 245], ["os.join", "os.exists", "open", "json.load", "os.join", "open", "json.load.keys", "print", "open", "json.dump", "os.join", "ffp.write", "os.join", "Levenshtein.ratio", "Levenshtein.ratio"], "methods", ["None"], ["", "", "def", "fusion_answer_and_entity", "(", "self", ")", ":", "\n", "# \u628a\u7b54\u6848\u91cc\u9762\u51fa\u73b0\u7684entity\u5bf9\u9f50\u5230entity\u4e2d\u3002", "\n", "# \u4f7f\u7528\u7f16\u8f91\u8ddd\u79bb", "\n", "        ", "path", "=", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_combine_filter_fusion.json\"", ")", "\n", "if", "not", "osp", ".", "exists", "(", "path", ")", ":", "\n", "            ", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_combine_filter.json\"", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "dic", "=", "json", ".", "load", "(", "fp", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"ans_entity_map.txt\"", ")", ",", "'w'", ")", "as", "ffp", ":", "\n", "                    ", "for", "key", "in", "dic", ".", "keys", "(", ")", ":", "\n", "                        ", "strout", "=", "\"not match: \"", "\n", "e1", "=", "dic", "[", "key", "]", "[", "\"fact\"", "]", "[", "0", "]", "\n", "e2", "=", "dic", "[", "key", "]", "[", "\"fact\"", "]", "[", "2", "]", "\n", "ans", "=", "dic", "[", "key", "]", "[", "\"answer\"", "]", "\n", "# \u548c\u5934\u5b9e\u4f53\u76f8\u4f3c\u5ea6\u5927\u4e8e\u5c3e\u5b9e\u4f53", "\n", "if", "Levenshtein", ".", "ratio", "(", "ans", ",", "e1", ")", ">", "Levenshtein", ".", "ratio", "(", "ans", ",", "e2", ")", ":", "\n", "                            ", "strout", "+=", "dic", "[", "key", "]", "[", "\"fact\"", "]", "[", "2", "]", "\n", "strout", "+=", "\"\\t\\t\\t\\t\\t  match: \"", "\n", "strout", "+=", "dic", "[", "key", "]", "[", "\"fact\"", "]", "[", "0", "]", "\n", "strout", "+=", "\" -> \"", "\n", "strout", "+=", "ans", "\n", "dic", "[", "key", "]", "[", "\"fact\"", "]", "[", "0", "]", "=", "ans", "\n", "\n", "", "else", ":", "\n", "                            ", "strout", "+=", "dic", "[", "key", "]", "[", "\"fact\"", "]", "[", "0", "]", "\n", "strout", "+=", "\"\\t\\t\\t\\t\\t  match: \"", "\n", "strout", "+=", "dic", "[", "key", "]", "[", "\"fact\"", "]", "[", "2", "]", "\n", "strout", "+=", "\" -> \"", "\n", "strout", "+=", "ans", "\n", "dic", "[", "key", "]", "[", "\"fact\"", "]", "[", "2", "]", "=", "ans", "\n", "", "ffp", ".", "write", "(", "strout", "+", "\"\\n\"", ")", "\n", "\n", "", "print", "(", "\"fusion_answer_and_entity done!\"", ")", "\n", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_combine_filter_fusion.json\"", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "                    ", "json", ".", "dump", "(", "dic", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.statistics_of_ans_and_entity": [[246, 276], ["os.join", "open", "json.load", "set", "set", "set", "json.load.keys", "print", "print", "print", "print", "print", "print", "set.add", "set.add", "set.add", "set.add", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "", "", "", "def", "statistics_of_ans_and_entity", "(", "self", ",", "name", "=", "None", ",", "path", "=", "None", ")", ":", "\n", "# \u6570\u636e\u7edf\u8ba1", "\n", "        ", "if", "path", "==", "None", ":", "\n", "            ", "path", "=", "osp", ".", "join", "(", "self", ".", "data_path", ",", "name", ")", "\n", "\n", "", "with", "open", "(", "path", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "dic", "=", "json", ".", "load", "(", "fp", ")", "\n", "ans_set", "=", "set", "(", ")", "\n", "entity_set", "=", "set", "(", ")", "\n", "relation_set", "=", "set", "(", ")", "\n", "dic_len", "=", "0", "\n", "for", "key", "in", "dic", ".", "keys", "(", ")", ":", "\n", "                ", "dic_len", "+=", "1", "\n", "e1", "=", "dic", "[", "key", "]", "[", "\"fact\"", "]", "[", "0", "]", "\n", "r", "=", "dic", "[", "key", "]", "[", "\"fact\"", "]", "[", "1", "]", "\n", "e2", "=", "dic", "[", "key", "]", "[", "\"fact\"", "]", "[", "2", "]", "\n", "ans", "=", "dic", "[", "key", "]", "[", "\"answer\"", "]", "\n", "ans_set", ".", "add", "(", "ans", ")", "\n", "entity_set", ".", "add", "(", "e1", ")", "\n", "entity_set", ".", "add", "(", "e2", ")", "\n", "relation_set", ".", "add", "(", "r", ")", "\n", "\n", "", "ans_or_entity", "=", "ans_set", "|", "entity_set", "\n", "ans_and_entity", "=", "ans_set", "&", "entity_set", "\n", "print", "(", "\"ans_set len:\"", ",", "len", "(", "ans_set", ")", ")", "\n", "print", "(", "\"entity_set len:\"", ",", "len", "(", "entity_set", ")", ")", "\n", "print", "(", "\"ans_or_entity len:\"", ",", "len", "(", "ans_or_entity", ")", ")", "\n", "print", "(", "\"ans_and_entity len:\"", ",", "len", "(", "ans_and_entity", ")", ")", "\n", "print", "(", "\"relation len:\"", ",", "len", "(", "relation_set", ")", ")", "\n", "print", "(", "\"dic len:\"", ",", "dic_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.filter_top500_IQA_pair": [[277, 300], ["os.join", "os.exists", "print", "open", "len", "open", "json.load", "open", "json.dump", "print", "os.join", "f.readline", "re.split", "int", "os.join", "json.load.items", "ans_2_id.keys"], "methods", ["None"], ["", "", "def", "filter_top500_IQA_pair", "(", "self", ")", ":", "\n", "# read ans file", "\n", "# store the map from id to ans (with dic)", "\n", "# TODO: optimize the code with matrix", "\n", "        ", "path", "=", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_combine_filter_fusion_500.json\"", ")", "\n", "if", "not", "osp", ".", "exists", "(", "path", ")", ":", "\n", "            ", "ans_2_id", "=", "{", "}", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"ans.txt\"", ")", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "                ", "while", "1", ":", "\n", "                    ", "line", "=", "f", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                        ", "break", "\n", "", "line", "=", "re", ".", "split", "(", "'-|\\n'", ",", "line", ")", "\n", "ans_2_id", "[", "line", "[", "1", "]", "]", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "", "", "print", "(", "len", "(", "ans_2_id", ")", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_combine_filter_fusion.json\"", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "dic", "=", "json", ".", "load", "(", "fp", ")", "\n", "dic_500", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "dic", ".", "items", "(", ")", "if", "\n", "dic", "[", "key", "]", "[", "\"answer\"", "]", "in", "ans_2_id", ".", "keys", "(", ")", "and", "ans_2_id", "[", "dic", "[", "key", "]", "[", "\"answer\"", "]", "]", "<=", "500", "}", "\n", "\n", "", "with", "open", "(", "path", ",", "'w'", ")", "as", "fp", ":", "\n", "                ", "json", ".", "dump", "(", "dic_500", ",", "fp", ")", "\n", "print", "(", "\"filter_top500_IQA_pair done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.deal_relation": [[301, 335], ["os.join", "os.exists", "set", "json.load.keys", "print", "list", "print", "json.load.keys", "open", "json.load", "set.add", "len", "wordninja.split", "range", "open", "json.dump", "print", "os.join", "len", "relation_split[].lower"], "methods", ["None"], ["", "", "", "def", "deal_relation", "(", "self", ")", ":", "\n", "        ", "path", "=", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_combine_filter_fusion_500.json\"", ")", "\n", "if", "not", "osp", ".", "exists", "(", "path", ")", ":", "\n", "            ", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_combine_filter_fusion_500.json\"", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "dic", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "relation_set", "=", "set", "(", ")", "\n", "for", "key", "in", "dic", ".", "keys", "(", ")", ":", "\n", "                ", "relation_set", ".", "add", "(", "dic", "[", "key", "]", "[", "\"fact\"", "]", "[", "1", "]", ")", "\n", "\n", "", "print", "(", "\"relation len:\"", ",", "len", "(", "relation_set", ")", ")", "\n", "relation_map", "=", "{", "}", "\n", "for", "relation", "in", "list", "(", "relation_set", ")", ":", "\n", "                ", "relation_orig", "=", "relation", "\n", "# \u662f\u5426\u9700\u8981\u628a\u5173\u7cfb\u53bb\u6389\uff1f", "\n", "if", "relation", "[", "-", "2", "]", "==", "\"#\"", ":", "\n", "                    ", "relation", "=", "relation", "[", ":", "-", "2", "]", "\n", "\n", "", "relation_split", "=", "wordninja", ".", "split", "(", "relation", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "relation_split", ")", ")", ":", "\n", "                    ", "relation_split", "[", "i", "]", "=", "relation_split", "[", "i", "]", ".", "lower", "(", ")", "\n", "\n", "", "if", "relation", "==", "\"transnbhd\"", ":", "\n", "                    ", "relation_map", "[", "relation_orig", "]", "=", "\"belong to\"", "\n", "", "else", ":", "\n", "                    ", "relation_map", "[", "relation_orig", "]", "=", "' '", ".", "join", "(", "relation_split", ")", "\n", "\n", "", "", "print", "(", "relation_map", ")", "\n", "for", "key", "in", "dic", ".", "keys", "(", ")", ":", "\n", "                ", "tmp", "=", "dic", "[", "key", "]", "[", "\"fact\"", "]", "[", "1", "]", "\n", "dic", "[", "key", "]", "[", "\"fact\"", "]", "[", "1", "]", "=", "relation_map", "[", "tmp", "]", "\n", "\n", "", "with", "open", "(", "path", ",", "'w'", ")", "as", "fp", ":", "\n", "                ", "json", ".", "dump", "(", "dic", ",", "fp", ")", "\n", "print", "(", "\"deal_relation done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.split_data": [[336, 414], ["range", "str", "os.join", "os.join", "dic_train.items", "dic_test.items", "set", "set", "set", "set", "print", "deal_data.Runner.statistics_of_ans_and_entity", "print", "deal_data.Runner.statistics_of_ans_and_entity", "print", "os.exists", "os.exists", "open", "open", "open", "json.load", "ans_train.append", "q_train.append", "ans_test.append", "q_test.append", "open", "json.dump", "print", "open", "json.dump", "print", "len", "len", "len", "len", "len", "len", "os.join", "f.readline", "re.split", "img_train.append", "os.join", "f.readline", "re.split", "img_test.append", "os.join", "json.load.items", "json.load.items"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.statistics_of_ans_and_entity", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.statistics_of_ans_and_entity"], ["", "", "", "def", "split_data", "(", "self", ")", ":", "\n", "# \u628a\u6570\u636e\u96c6\u5212\u5206\u51fa\u6765", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "5", ")", ":", "\n", "            ", "num", "=", "str", "(", "i", ")", "\n", "train_name", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "train_data_path", ",", "\"train\"", "+", "num", ",", "\"all_qs_dict_release_train_500.json\"", ")", "\n", "test_name", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "test_data_path", ",", "\"test\"", "+", "num", ",", "\"all_qs_dict_release_test_500.json\"", ")", "\n", "\n", "if", "osp", ".", "exists", "(", "train_name", ")", "and", "osp", ".", "exists", "(", "test_name", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "img_train", "=", "[", "]", "\n", "img_test", "=", "[", "]", "\n", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "split_path", ",", "\"train_list_\"", "+", "num", "+", "\".txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "while", "1", ":", "\n", "                    ", "line", "=", "f", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                        ", "break", "\n", "", "line", "=", "re", ".", "split", "(", "'\\n'", ",", "line", ")", "\n", "img_train", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "\n", "", "", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "split_path", ",", "\"test_list_\"", "+", "num", "+", "\".txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "while", "1", ":", "\n", "                    ", "line", "=", "f", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                        ", "break", "\n", "", "line", "=", "re", ".", "split", "(", "'\\n'", ",", "line", ")", "\n", "img_test", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "\n", "", "", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_combine_filter_fusion_500.json\"", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "dic", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "dic_train", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "dic", ".", "items", "(", ")", "if", "dic", "[", "key", "]", "[", "\"img_file\"", "]", "in", "img_train", "}", "\n", "dic_test", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "dic", ".", "items", "(", ")", "if", "dic", "[", "key", "]", "[", "\"img_file\"", "]", "in", "img_test", "}", "\n", "\n", "# train_name = osp.join(cfg.FVQA.train_data_path, \"train\" + num, \"all_qs_dict_release_train_500.json\")", "\n", "# test_name = osp.join(cfg.FVQA.test_data_path, \"test\" + num, \"all_qs_dict_release_test_500.json\")", "\n", "", "ans_train", "=", "[", "]", "\n", "ans_test", "=", "[", "]", "\n", "q_train", "=", "[", "]", "\n", "q_test", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "dic_train", ".", "items", "(", ")", ":", "\n", "                ", "ans_train", ".", "append", "(", "dic_train", "[", "key", "]", "[", "\"answer\"", "]", ")", "\n", "q_train", ".", "append", "(", "dic_train", "[", "key", "]", "[", "\"question\"", "]", ")", "\n", "", "for", "key", ",", "value", "in", "dic_test", ".", "items", "(", ")", ":", "\n", "                ", "ans_test", ".", "append", "(", "dic_test", "[", "key", "]", "[", "\"answer\"", "]", ")", "\n", "q_test", ".", "append", "(", "dic_test", "[", "key", "]", "[", "\"question\"", "]", ")", "\n", "\n", "", "ans_train_set", "=", "set", "(", "ans_train", ")", "\n", "q_train_set", "=", "set", "(", "q_train", ")", "\n", "ans_test_set", "=", "set", "(", "ans_test", ")", "\n", "q_test_set", "=", "set", "(", "q_test", ")", "\n", "\n", "with", "open", "(", "train_name", ",", "\"w\"", ")", "as", "ff", ":", "\n", "                ", "json", ".", "dump", "(", "dic_train", ",", "ff", ")", "\n", "print", "(", "\"save to:\"", ",", "train_name", ")", "\n", "\n", "", "with", "open", "(", "test_name", ",", "\"w\"", ")", "as", "ff", ":", "\n", "                ", "json", ".", "dump", "(", "dic_test", ",", "ff", ")", "\n", "print", "(", "\"save to:\"", ",", "test_name", ")", "\n", "# ans_set len: 387", "\n", "# entity_set len: 1842", "\n", "# ans_or_entity len: 1842", "\n", "# ans_and_entity len: 387", "\n", "# relation len: 71", "\n", "# dic len: 2669", "\n", "", "print", "(", "num", ",", "\" train :\"", ",", "len", "(", "dic_train", ")", ",", "len", "(", "ans_train_set", ")", ",", "len", "(", "q_train_set", ")", ")", "\n", "self", ".", "statistics_of_ans_and_entity", "(", "train_name", ")", "\n", "\n", "# ans_set len: 403", "\n", "# entity_set len: 1958", "\n", "# ans_or_entity len: 1958", "\n", "# ans_and_entity len: 403", "\n", "# relation len: 87", "\n", "# dic len: 2823", "\n", "print", "(", "num", ",", "\" test :\"", ",", "len", "(", "dic_test", ")", ",", "len", "(", "ans_test_set", ")", ",", "len", "(", "q_test_set", ")", ")", "\n", "self", ".", "statistics_of_ans_and_entity", "(", "test_name", ")", "\n", "print", "(", "\"dataset \"", "+", "num", "+", "\" done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.preprocess_answer": [[415, 417], ["None"], "methods", ["None"], ["", "", "def", "preprocess_answer", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.preprocess_fact": [[418, 438], ["os.join", "print", "os.exists", "os.join", "os.join", "data.fvqa.prepare_fact", "data.preprocess.extract_vocab", "print", "open", "json.load", "open", "json.load", "open", "json.dump", "str", "str"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.prepare_fact", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.extract_vocab"], ["", "def", "preprocess_fact", "(", "self", ")", ":", "\n", "        ", "output_format", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "common_data_path", ",", "\"answer.vocab.fvqa.fact.500.json\"", ")", "\n", "if", "not", "osp", ".", "exists", "(", "output_format", ")", ":", "\n", "            ", "num", "=", "2", "\n", "vqa_train_questions", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "train_data_path", ",", "\"train\"", "+", "str", "(", "num", ")", ",", "\"all_qs_dict_release_train_500.json\"", ")", "\n", "vqa_val_questions", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "test_data_path", ",", "\"test\"", "+", "str", "(", "num", ")", ",", "\"all_qs_dict_release_test_500.json\"", ")", "\n", "with", "open", "(", "vqa_train_questions", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "qaq1", "=", "json", ".", "load", "(", "fd", ")", "\n", "", "with", "open", "(", "vqa_val_questions", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "qaq2", "=", "json", ".", "load", "(", "fd", ")", "\n", "\n", "", "annotations", "=", "{", "**", "qaq1", ",", "**", "qaq2", "}", "\n", "# word2vec = Vector()", "\n", "facts", "=", "fvqa", ".", "prepare_fact", "(", "annotations", ")", "\n", "fact_vocab", "=", "preprocess", ".", "extract_vocab", "(", "facts", ",", "top_k", "=", "None", ")", "\n", "vocabs", "=", "{", "'answer'", ":", "fact_vocab", "}", "\n", "print", "(", "'* Dump output vocab to: {}'", ".", "format", "(", "output_format", ")", ")", "\n", "with", "open", "(", "output_format", ",", "'w'", ")", "as", "fd", ":", "\n", "                ", "json", ".", "dump", "(", "vocabs", ",", "fd", ")", "\n", "", "", "print", "(", "\"preprocess_fact done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.preprocess_relation": [[439, 459], ["os.join", "print", "os.exists", "os.join", "os.join", "data.fvqa.prepare_relation", "data.preprocess.extract_vocab", "print", "open", "json.load", "open", "json.load", "open", "json.dump", "str", "str"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.prepare_relation", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.extract_vocab"], ["", "def", "preprocess_relation", "(", "self", ")", ":", "\n", "        ", "output_format", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "common_data_path", ",", "\"answer.vocab.fvqa.relation.500.json\"", ")", "\n", "if", "not", "osp", ".", "exists", "(", "output_format", ")", ":", "\n", "            ", "num", "=", "2", "\n", "vqa_train_questions", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "train_data_path", ",", "\"train\"", "+", "str", "(", "num", ")", ",", "\"all_qs_dict_release_train_500.json\"", ")", "\n", "vqa_val_questions", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "test_data_path", ",", "\"test\"", "+", "str", "(", "num", ")", ",", "\"all_qs_dict_release_test_500.json\"", ")", "\n", "with", "open", "(", "vqa_train_questions", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "qaq1", "=", "json", ".", "load", "(", "fd", ")", "\n", "", "with", "open", "(", "vqa_val_questions", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "qaq2", "=", "json", ".", "load", "(", "fd", ")", "\n", "\n", "", "annotations", "=", "{", "**", "qaq1", ",", "**", "qaq2", "}", "\n", "# word2vec = Vector()", "\n", "relations", "=", "fvqa", ".", "prepare_relation", "(", "annotations", ")", "\n", "relation_vocab", "=", "preprocess", ".", "extract_vocab", "(", "relations", ",", "top_k", "=", "None", ")", "\n", "vocabs", "=", "{", "'answer'", ":", "relation_vocab", "}", "\n", "print", "(", "'* Dump output vocab to: {}'", ".", "format", "(", "output_format", ")", ")", "\n", "with", "open", "(", "output_format", ",", "'w'", ")", "as", "fd", ":", "\n", "                ", "json", ".", "dump", "(", "vocabs", ",", "fd", ")", "\n", "", "", "print", "(", "\"preprocess_relation done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.split_unseen_data": [[460, 518], ["print", "list", "range", "open", "len", "open", "open", "open", "json.load", "range", "str", "os.join", "os.join", "os.join", "f.readline", "re.split", "int", "os.join", "f.readline", "re.split", "img.append", "os.join", "f.readline", "re.split", "img.append", "os.join", "json.load.items", "random.sample", "list", "deal_data.Runner.statistics_of_ans_and_entity", "deal_data.Runner.statistics_of_ans_and_entity", "print", "os.exists", "os.exists", "open", "json.dump", "open", "json.dump", "set", "set", "dic_all.items", "dic_all.items"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.statistics_of_ans_and_entity", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.statistics_of_ans_and_entity"], ["", "def", "split_unseen_data", "(", "self", ")", ":", "\n", "        ", "ans_2_id", "=", "{", "}", "\n", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"ans.txt\"", ")", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "while", "1", ":", "\n", "                ", "line", "=", "f", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                    ", "break", "\n", "", "line", "=", "re", ".", "split", "(", "'-|\\n'", ",", "line", ")", "\n", "ans_2_id", "[", "line", "[", "1", "]", "]", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "", "", "print", "(", "len", "(", "ans_2_id", ")", ")", "\n", "num", "=", "\"0\"", "\n", "img", "=", "[", "]", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "split_path", ",", "\"train_list_\"", "+", "num", "+", "\".txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "while", "1", ":", "\n", "                ", "line", "=", "f", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                    ", "break", "\n", "", "line", "=", "re", ".", "split", "(", "'\\n'", ",", "line", ")", "\n", "img", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "\n", "", "", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "split_path", ",", "\"test_list_\"", "+", "num", "+", "\".txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "while", "1", ":", "\n", "                ", "line", "=", "f", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                    ", "break", "\n", "", "line", "=", "re", ".", "split", "(", "'\\n'", ",", "line", ")", "\n", "img", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "\n", "", "", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "\"all_qs_dict_release_combine_filter_fusion_500.json\"", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "dic", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "dic_all", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "dic", ".", "items", "(", ")", "if", "dic", "[", "key", "]", "[", "\"img_file\"", "]", "in", "img", "}", "\n", "ans_id", "=", "list", "(", "range", "(", "1", ",", "501", ")", ")", "\n", "\n", "# split_unseen_data", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "num", "=", "str", "(", "i", ")", "\n", "train_name", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "seen_train_data_path", ",", "\"train\"", "+", "num", ",", "\"all_qs_dict_release_train_500.json\"", ")", "\n", "test_name", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "unseen_test_data_path", ",", "\"test\"", "+", "num", ",", "\"all_qs_dict_release_test_500.json\"", ")", "\n", "\n", "if", "not", "(", "osp", ".", "exists", "(", "train_name", ")", "and", "osp", ".", "exists", "(", "train_name", ")", ")", ":", "\n", "                ", "ans_seen", "=", "random", ".", "sample", "(", "ans_id", ",", "250", ")", "\n", "ans_unseen", "=", "list", "(", "set", "(", "ans_id", ")", "-", "set", "(", "ans_seen", ")", ")", "\n", "\n", "dic_seen", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "dic_all", ".", "items", "(", ")", "if", "ans_2_id", "[", "dic", "[", "key", "]", "[", "\"answer\"", "]", "]", "in", "ans_seen", "}", "\n", "dic_unseen", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "dic_all", ".", "items", "(", ")", "if", "ans_2_id", "[", "dic", "[", "key", "]", "[", "\"answer\"", "]", "]", "in", "ans_unseen", "}", "\n", "\n", "with", "open", "(", "train_name", ",", "\"w\"", ")", "as", "ff", ":", "\n", "                    ", "json", ".", "dump", "(", "dic_seen", ",", "ff", ")", "\n", "", "with", "open", "(", "test_name", ",", "\"w\"", ")", "as", "ff", ":", "\n", "                    ", "json", ".", "dump", "(", "dic_unseen", ",", "ff", ")", "\n", "\n", "", "self", ".", "statistics_of_ans_and_entity", "(", "train_name", ")", "\n", "\n", "self", ".", "statistics_of_ans_and_entity", "(", "test_name", ")", "\n", "\n", "print", "(", "\"dataset \"", "+", "num", "+", "\" done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.get_fact_relation_matrix": [[519, 584], ["os.exists", "data.preprocess.invert_dict", "data.preprocess.invert_dict", "data.preprocess.invert_dict", "os.join", "os.join", "os.join", "len", "len", "len", "collections.defaultdict", "list", "open", "json.load", "open", "json.load", "open", "json.load", "open", "json.load", "open", "json.load", "open", "json.load", "annotations.keys", "data.preprocess.process_punctuation", "data.preprocess.process_punctuation", "fact_relation_to_ans[].append", "open", "json.dump", "print", "str", "str"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.invert_dict", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.invert_dict", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.invert_dict", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.process_punctuation", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.process_punctuation"], ["", "", "", "def", "get_fact_relation_matrix", "(", "self", ")", ":", "\n", "        ", "if", "not", "osp", ".", "exists", "(", "self", ".", "args", ".", "FVQA", ".", "fact_relation_to_ans_path", ")", ":", "\n", "\n", "            ", "answer_vocab_path", "=", "self", ".", "args", ".", "FVQA", ".", "answer_vocab_path", "\n", "fact_vocab_path", "=", "self", ".", "args", ".", "FVQA", ".", "fact_vocab_path", "\n", "relation_vocab_path", "=", "self", ".", "args", ".", "FVQA", ".", "relation_vocab_path", "\n", "\n", "with", "open", "(", "fact_vocab_path", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "fact_vocab", "=", "json", ".", "load", "(", "fd", ")", "\n", "\n", "", "with", "open", "(", "relation_vocab_path", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "relation_vocab", "=", "json", ".", "load", "(", "fd", ")", "\n", "\n", "", "with", "open", "(", "answer_vocab_path", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "answer_vocab", "=", "json", ".", "load", "(", "fd", ")", "\n", "\n", "", "self", ".", "answer_to_index", "=", "answer_vocab", "[", "'answer'", "]", "\n", "self", ".", "index_to_answer", "=", "preprocess", ".", "invert_dict", "(", "self", ".", "answer_to_index", ")", "\n", "self", ".", "fact_to_index", "=", "fact_vocab", "[", "'answer'", "]", "\n", "self", ".", "index_to_fact", "=", "preprocess", ".", "invert_dict", "(", "self", ".", "fact_to_index", ")", "\n", "self", ".", "relation_to_index", "=", "relation_vocab", "[", "'answer'", "]", "\n", "self", ".", "index_to_relation", "=", "preprocess", ".", "invert_dict", "(", "self", ".", "relation_to_index", ")", "\n", "\n", "output_format", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "common_data_path", ",", "\"fact_relation_dict.data\"", ")", "\n", "vqa_train_questions", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "train_data_path", ",", "\"train2\"", ",", "\"all_qs_dict_release_train_500.json\"", ")", "\n", "vqa_val_questions", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "test_data_path", ",", "\"test2\"", ",", "\"all_qs_dict_release_test_500.json\"", ")", "\n", "with", "open", "(", "vqa_train_questions", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "qaq1", "=", "json", ".", "load", "(", "fd", ")", "\n", "", "with", "open", "(", "vqa_val_questions", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "qaq2", "=", "json", ".", "load", "(", "fd", ")", "\n", "\n", "", "annotations", "=", "{", "**", "qaq1", ",", "**", "qaq2", "}", "\n", "\n", "fact_num", "=", "len", "(", "self", ".", "fact_to_index", ")", "\n", "ans_num", "=", "len", "(", "self", ".", "answer_to_index", ")", "\n", "rel_num", "=", "len", "(", "self", ".", "relation_to_index", ")", "\n", "\n", "# fact_relation_matrix = - np.ones([fact_num,rel_num ], dtype = int)", "\n", "fact_relation_to_ans", "=", "defaultdict", "(", "list", ")", "\n", "\n", "keys", "=", "list", "(", "annotations", ".", "keys", "(", ")", ")", "\n", "\n", "for", "a", "in", "keys", ":", "\n", "                ", "answer", "=", "annotations", "[", "a", "]", "[", "\"answer\"", "]", "\n", "facts", "=", "annotations", "[", "a", "]", "[", "\"fact\"", "]", "\n", "f1", "=", "facts", "[", "0", "]", "\n", "rel", "=", "facts", "[", "1", "]", "\n", "f2", "=", "facts", "[", "2", "]", "\n", "assert", "(", "answer", "==", "f1", "or", "answer", "==", "f2", ")", "\n", "if", "answer", "==", "f1", ":", "\n", "                    ", "fact", "=", "f2", "\n", "", "else", ":", "\n", "                    ", "fact", "=", "f1", "\n", "\n", "", "fact", "=", "preprocess", ".", "process_punctuation", "(", "fact", ")", "\n", "rel", "=", "preprocess", ".", "process_punctuation", "(", "rel", ")", "\n", "name", "=", "str", "(", "self", ".", "fact_to_index", "[", "fact", "]", ")", "+", "\"-\"", "+", "str", "(", "self", ".", "relation_to_index", "[", "rel", "]", ")", "\n", "fact_relation_to_ans", "[", "name", "]", ".", "append", "(", "self", ".", "answer_to_index", "[", "answer", "]", ")", "\n", "\n", "", "with", "open", "(", "output_format", ",", "'w'", ")", "as", "fd", ":", "\n", "                ", "json", ".", "dump", "(", "fact_relation_to_ans", ",", "fd", ")", "\n", "print", "(", "\"dump done!\"", ")", "\n", "\n", "", "", "with", "open", "(", "self", ".", "args", ".", "FVQA", ".", "fact_relation_to_ans_path", ",", "'r'", ")", "as", "fd", ":", "\n", "            ", "fact_relation_to_ans", "=", "json", ".", "load", "(", "fd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.preprocess_json_in_order": [[585, 604], ["os.join", "os.join", "os.exists", "list", "open", "json.load", "json.load.keys", "open", "json.dump", "print", "str"], "methods", ["None"], ["", "", "def", "preprocess_json_in_order", "(", "self", ")", ":", "\n", "        ", "num", "=", "\"3\"", "\n", "\n", "data_path", "=", "osp", ".", "join", "(", "self", ".", "exp_data", ",", "\"test_data\"", ",", "\"test\"", "+", "num", ",", "\"all_qs_dict_release_test_500.json\"", ")", "\n", "output_format", "=", "osp", ".", "join", "(", "self", ".", "exp_data", ",", "\"test_data\"", ",", "\"test\"", "+", "num", ",", "\"all_qs_dict_release_test_500_inorder.json\"", ")", "\n", "\n", "if", "not", "osp", ".", "exists", "(", "output_format", ")", ":", "\n", "            ", "with", "open", "(", "data_path", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "annotations", "=", "json", ".", "load", "(", "fd", ")", "\n", "", "keys", "=", "list", "(", "annotations", ".", "keys", "(", ")", ")", "\n", "tmp", "=", "0", "\n", "new_annotations", "=", "{", "}", "\n", "for", "a", "in", "keys", ":", "\n", "                ", "new_annotations", "[", "str", "(", "tmp", ")", "]", "=", "annotations", "[", "a", "]", "\n", "tmp", "+=", "1", "\n", "\n", "", "with", "open", "(", "output_format", ",", "'w'", ")", "as", "fd", ":", "\n", "                ", "json", ".", "dump", "(", "new_annotations", ",", "fd", ")", "\n", "print", "(", "\"dump done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.disjoint_judge": [[605, 621], ["os.join", "os.join", "print", "open", "json.load", "list", "open", "json.load", "list"], "methods", ["None"], ["", "", "", "def", "disjoint_judge", "(", "self", ")", ":", "\n", "        ", "fact_id_path", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "common_data_path", ",", "\"answer.vocab.fvqa.fact.500.json\"", ")", "\n", "answer_id_path", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "common_data_path", ",", "\"answer.vocab.fvqa.500.json\"", ")", "\n", "with", "open", "(", "fact_id_path", ",", "'r'", ")", "as", "fd", ":", "\n", "            ", "self", ".", "fact_id", "=", "json", ".", "load", "(", "fd", ")", "\n", "self", ".", "fact_id", "=", "self", ".", "fact_id", "[", "'answer'", "]", "\n", "list_fact", "=", "list", "(", "self", ".", "fact_id", ")", "\n", "", "with", "open", "(", "answer_id_path", ",", "'r'", ")", "as", "fd", ":", "\n", "            ", "self", ".", "answer_id", "=", "json", ".", "load", "(", "fd", ")", "\n", "self", ".", "answer_id", "=", "self", ".", "answer_id", "[", "'answer'", "]", "\n", "list_ans", "=", "list", "(", "self", ".", "answer_id", ")", "\n", "", "all", "=", "0", "\n", "for", "i", "in", "list_ans", ":", "\n", "            ", "if", "i", "in", "list_fact", ":", "\n", "                ", "all", "+=", "1", "\n", "", "", "print", "(", "all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.data_analysis": [[622, 763], ["range", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "str", "os.join", "os.join", "list", "list", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "open", "json.load", "open", "json.load", "json.load.keys", "json.load.keys", "test_question.append", "test_answer.append", "test_image.append", "train_question.append", "train_answer.append", "train_image.append", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "Levenshtein.ratio", "Levenshtein.ratio", "test_entity.append", "test_entity.append", "Levenshtein.ratio", "Levenshtein.ratio", "train_entity.append", "train_entity.append"], "methods", ["None"], ["", "def", "data_analysis", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "==", "\"zsl\"", ":", "\n", "            ", "testpath", "=", "\"test_unseen_data\"", "\n", "trainpath", "=", "\"train_seen_data\"", "\n", "", "else", ":", "\n", "            ", "testpath", "=", "\"test_data\"", "\n", "trainpath", "=", "\"train_data\"", "\n", "\n", "", "train_triplet_num", "=", "0", "\n", "test_triplet_num", "=", "0", "\n", "and_answer_num", "=", "0", "\n", "and_entity_num", "=", "0", "\n", "and_question_num", "=", "0", "\n", "and_image_num", "=", "0", "\n", "and_answer_class", "=", "0", "\n", "and_entity_class", "=", "0", "\n", "and_question_class", "=", "0", "\n", "and_image_class", "=", "0", "\n", "train_question_class", "=", "0", "\n", "test_question_class", "=", "0", "\n", "train_answer_class", "=", "0", "\n", "test_answer_class", "=", "0", "\n", "train_entity_class", "=", "0", "\n", "test_entity_class", "=", "0", "\n", "train_image_class", "=", "0", "\n", "test_image_class", "=", "0", "\n", "\n", "for", "num", "in", "range", "(", "5", ")", ":", "\n", "            ", "test_question", "=", "[", "]", "\n", "train_question", "=", "[", "]", "\n", "test_answer", "=", "[", "]", "\n", "test_image", "=", "[", "]", "\n", "train_answer", "=", "[", "]", "\n", "test_entity", "=", "[", "]", "\n", "train_entity", "=", "[", "]", "\n", "train_image", "=", "[", "]", "\n", "\n", "num", "=", "str", "(", "num", ")", "\n", "datapath_test", "=", "osp", ".", "join", "(", "self", ".", "exp_data", ",", "testpath", ",", "\"test\"", "+", "num", ",", "\"all_qs_dict_release_test_500.json\"", ")", "\n", "datapath_train", "=", "osp", ".", "join", "(", "self", ".", "exp_data", ",", "trainpath", ",", "\"train\"", "+", "num", ",", "\"all_qs_dict_release_train_500.json\"", ")", "\n", "\n", "with", "open", "(", "datapath_test", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "test_data", "=", "json", ".", "load", "(", "fd", ")", "\n", "", "with", "open", "(", "datapath_train", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "train_data", "=", "json", ".", "load", "(", "fd", ")", "\n", "\n", "", "test_data_keys", "=", "list", "(", "test_data", ".", "keys", "(", ")", ")", "\n", "train_data_keys", "=", "list", "(", "train_data", ".", "keys", "(", ")", ")", "\n", "\n", "for", "key", "in", "test_data_keys", ":", "\n", "                ", "test_question", ".", "append", "(", "test_data", "[", "key", "]", "[", "\"question\"", "]", ")", "\n", "test_answer", ".", "append", "(", "test_data", "[", "key", "]", "[", "\"answer\"", "]", ")", "\n", "test_image", ".", "append", "(", "test_data", "[", "key", "]", "[", "\"img_file\"", "]", ")", "\n", "e1", "=", "test_data", "[", "key", "]", "[", "\"fact\"", "]", "[", "0", "]", "\n", "e2", "=", "test_data", "[", "key", "]", "[", "\"fact\"", "]", "[", "2", "]", "\n", "ans", "=", "test_data", "[", "key", "]", "[", "\"answer\"", "]", "\n", "# \u548c\u5934\u5b9e\u4f53\u76f8\u4f3c\u5ea6\u5927\u4e8e\u5c3e\u5b9e\u4f53", "\n", "if", "Levenshtein", ".", "ratio", "(", "ans", ",", "e1", ")", ">", "Levenshtein", ".", "ratio", "(", "ans", ",", "e2", ")", ":", "\n", "                    ", "test_entity", ".", "append", "(", "e2", ")", "\n", "", "else", ":", "\n", "                    ", "test_entity", ".", "append", "(", "e1", ")", "\n", "\n", "", "", "for", "key", "in", "train_data_keys", ":", "\n", "                ", "train_question", ".", "append", "(", "train_data", "[", "key", "]", "[", "\"question\"", "]", ")", "\n", "train_answer", ".", "append", "(", "train_data", "[", "key", "]", "[", "\"answer\"", "]", ")", "\n", "train_image", ".", "append", "(", "train_data", "[", "key", "]", "[", "\"img_file\"", "]", ")", "\n", "e1", "=", "train_data", "[", "key", "]", "[", "\"fact\"", "]", "[", "0", "]", "\n", "e2", "=", "train_data", "[", "key", "]", "[", "\"fact\"", "]", "[", "2", "]", "\n", "ans", "=", "train_data", "[", "key", "]", "[", "\"answer\"", "]", "\n", "# \u548c\u5934\u5b9e\u4f53\u76f8\u4f3c\u5ea6\u5927\u4e8e\u5c3e\u5b9e\u4f53", "\n", "if", "Levenshtein", ".", "ratio", "(", "ans", ",", "e1", ")", ">", "Levenshtein", ".", "ratio", "(", "ans", ",", "e2", ")", ":", "\n", "                    ", "train_entity", ".", "append", "(", "e2", ")", "\n", "", "else", ":", "\n", "                    ", "train_entity", ".", "append", "(", "e1", ")", "\n", "\n", "# \u6c42question/answer/entity \u7684\u6570\u91cf", "\n", "", "", "train_triplet_num", "+=", "len", "(", "train_question", ")", "\n", "test_triplet_num", "+=", "len", "(", "test_question", ")", "\n", "\n", "# overlap of quetsion/ans/entity", "\n", "q_and", "=", "[", "val", "for", "val", "in", "train_question", "if", "val", "in", "test_question", "]", "\n", "e_and", "=", "[", "val", "for", "val", "in", "train_entity", "if", "val", "in", "test_entity", "]", "\n", "a_and", "=", "[", "val", "for", "val", "in", "train_answer", "if", "val", "in", "test_answer", "]", "\n", "i_and", "=", "[", "val", "for", "val", "in", "train_image", "if", "val", "in", "test_image", "]", "\n", "\n", "and_answer_num", "+=", "len", "(", "a_and", ")", "\n", "and_entity_num", "+=", "len", "(", "q_and", ")", "\n", "and_question_num", "+=", "len", "(", "e_and", ")", "\n", "and_image_num", "+=", "len", "(", "i_and", ")", "\n", "\n", "and_answer_class", "+=", "len", "(", "set", "(", "a_and", ")", ")", "\n", "and_entity_class", "+=", "len", "(", "set", "(", "q_and", ")", ")", "\n", "and_question_class", "+=", "len", "(", "set", "(", "e_and", ")", ")", "\n", "and_image_class", "+=", "len", "(", "set", "(", "i_and", ")", ")", "\n", "\n", "train_question_class", "+=", "len", "(", "set", "(", "train_question", ")", ")", "\n", "test_question_class", "+=", "len", "(", "set", "(", "test_question", ")", ")", "\n", "train_answer_class", "+=", "len", "(", "set", "(", "train_answer", ")", ")", "\n", "test_answer_class", "+=", "len", "(", "set", "(", "test_answer", ")", ")", "\n", "train_entity_class", "+=", "len", "(", "set", "(", "train_entity", ")", ")", "\n", "test_entity_class", "+=", "len", "(", "set", "(", "test_entity", ")", ")", "\n", "train_image_class", "+=", "len", "(", "set", "(", "train_image", ")", ")", "\n", "test_image_class", "+=", "len", "(", "set", "(", "test_image", ")", ")", "\n", "\n", "", "train_triplet_num", "=", "train_triplet_num", "/", "5.", "\n", "test_triplet_num", "=", "test_triplet_num", "/", "5.", "\n", "and_answer_num", "=", "and_answer_num", "/", "5.", "\n", "and_entity_num", "=", "and_entity_num", "/", "5.", "\n", "and_question_num", "=", "and_question_num", "/", "5.", "\n", "and_image_num", "=", "and_image_num", "/", "5.", "\n", "and_answer_class", "=", "and_answer_class", "/", "5.", "\n", "and_entity_class", "=", "and_entity_class", "/", "5.", "\n", "and_question_class", "=", "and_question_class", "/", "5.", "\n", "and_image_class", "=", "and_image_class", "/", "5.", "\n", "train_question_class", "=", "train_question_class", "/", "5.", "\n", "test_question_class", "=", "test_question_class", "/", "5.", "\n", "train_answer_class", "=", "train_answer_class", "/", "5.", "\n", "test_answer_class", "=", "test_answer_class", "/", "5.", "\n", "train_entity_class", "=", "train_entity_class", "/", "5.", "\n", "test_entity_class", "=", "test_entity_class", "/", "5.", "\n", "train_image_class", "=", "train_image_class", "/", "5.", "\n", "test_image_class", "=", "test_image_class", "/", "5.", "\n", "\n", "print", "(", "name", "+", "\"_train_triplet_num:\"", ",", "train_triplet_num", ")", "\n", "print", "(", "name", "+", "\"_test_triplet_num:\"", ",", "test_triplet_num", ")", "\n", "print", "(", "name", "+", "\"_and_answer_num:\"", ",", "and_answer_num", ")", "\n", "print", "(", "name", "+", "\"_and_entity_num:\"", ",", "and_entity_num", ")", "\n", "print", "(", "name", "+", "\"_and_question_num:\"", ",", "and_question_num", ")", "\n", "print", "(", "name", "+", "\"_and_image_num:\"", ",", "and_image_num", ")", "\n", "print", "(", "name", "+", "\"_and_answer_class:\"", ",", "and_answer_class", ")", "\n", "print", "(", "name", "+", "\"_and_entity_class:\"", ",", "and_entity_class", ")", "\n", "print", "(", "name", "+", "\"_and_question_class:\"", ",", "and_question_class", ")", "\n", "print", "(", "name", "+", "\"_and_image_class:\"", ",", "and_image_class", ")", "\n", "print", "(", "name", "+", "\"_train_question_class:\"", ",", "train_question_class", ")", "\n", "print", "(", "name", "+", "\"_test_question_class:\"", ",", "test_question_class", ")", "\n", "print", "(", "name", "+", "\"_train_answer_class:\"", ",", "train_answer_class", ")", "\n", "print", "(", "name", "+", "\"_test_answer_class:\"", ",", "test_answer_class", ")", "\n", "print", "(", "name", "+", "\"_train_entity_class:\"", ",", "train_entity_class", ")", "\n", "print", "(", "name", "+", "\"_test_entity_class:\"", ",", "test_entity_class", ")", "\n", "print", "(", "name", "+", "\"_train_image_class:\"", ",", "train_image_class", ")", "\n", "print", "(", "name", "+", "\"_test_image_class:\"", ",", "test_image_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.data_analysis_zsl_and_general": [[764, 767], ["deal_data.Runner.data_analysis"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.code.deal_data.Runner.data_analysis"], ["", "def", "data_analysis_zsl_and_general", "(", "self", ")", ":", "\n", "# self.data_analysis(\"zsl\")", "\n", "        ", "self", ".", "data_analysis", "(", "\"general\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.Tracker.__init__": [[99, 101], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "data", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.Tracker.track": [[102, 109], ["Tracker.ListStorage", "tool.Tracker.data.setdefault().append", "tool.Tracker.data.setdefault"], "methods", ["None"], ["", "def", "track", "(", "self", ",", "name", ",", "*", "monitors", ")", ":", "\n", "        ", "\"\"\" Track a set of results with given monitors under some name (e.g. 'val_acc').\n            When appending to the returned list storage, use the monitors to retrieve useful information.\n        \"\"\"", "\n", "l", "=", "Tracker", ".", "ListStorage", "(", "monitors", ")", "\n", "self", ".", "data", ".", "setdefault", "(", "name", ",", "[", "]", ")", ".", "append", "(", "l", ")", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.Tracker.to_dict": [[110, 113], ["list", "map", "tool.Tracker.data.items"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "# turn list storages into regular lists", "\n", "        ", "return", "{", "k", ":", "list", "(", "map", "(", "list", ",", "v", ")", ")", "for", "k", ",", "v", "in", "self", ".", "data", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.data_prefetcher.__init__": [[166, 170], ["iter", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "tool.data_prefetcher.preload"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.data_prefetcher.preload"], ["    ", "def", "__init__", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "loader", "=", "iter", "(", "loader", ")", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "self", ".", "preload", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.data_prefetcher.preload": [[171, 192], ["tool.data_prefetcher.next"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.data_prefetcher.next"], ["", "def", "preload", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "next_features", ",", "self", ".", "next_targets", ",", "_", "=", "next", "(", "self", ".", "loader", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "next_features", "=", "None", "\n", "self", ".", "next_targets", "=", "None", "\n", "return", "\n", "# self.next_features_gpu = []", "\n", "# self.next_targets_gpu = {}", "\n", "# for xaf in self.next_features:", "\n", "#     self.next_features_gpu.append(torch.empty_like(xaf, device='cuda'))", "\n", "# for key in self.next_targets.keys():", "\n", "#     self.next_targets_gpu[key] = torch.empty_like(self.next_targets[key], device='cuda')", "\n", "# self.stream.wait_stream(torch.cuda.current_stream())", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "self", ".", "next_features", "=", "[", "single_feature", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "single_feature", "in", "self", ".", "next_features", "]", "\n", "if", "isinstance", "(", "self", ".", "next_targets", ",", "dict", ")", ":", "\n", "                ", "for", "key", "in", "self", ".", "next_targets", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "next_targets", "[", "key", "]", "=", "self", ".", "next_targets", "[", "key", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "next_targets", "=", "[", "single_target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "single_target", "in", "self", ".", "next_targets", "]", "\n", "# for index in range(len(self.next_features_gpu)):", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.data_prefetcher.next": [[197, 209], ["torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "tool.data_prefetcher.preload", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "xaf.record_stream", "targets[].record_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "targets.keys"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.data_prefetcher.preload"], ["", "", "", "def", "next", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "# features = self.next_features_gpu", "\n", "# targets = self.next_targets_gpu", "\n", "features", "=", "self", ".", "next_features", "\n", "targets", "=", "self", ".", "next_targets", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "features", "=", "[", "xaf", ".", "record_stream", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ")", "for", "xaf", "in", "features", "]", "\n", "", "if", "targets", "is", "not", "None", ":", "\n", "            ", "targets", "=", "[", "targets", "[", "xaf", "]", ".", "record_stream", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ")", "for", "xaf", "in", "targets", ".", "keys", "(", ")", "]", "\n", "", "self", ".", "preload", "(", ")", "\n", "return", "features", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.instance_bce_with_logits": [[13, 19], ["torch.functional.binary_cross_entropy_with_logits", "labels.size", "logits.dim"], "function", ["None"], ["def", "instance_bce_with_logits", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "assert", "logits", ".", "dim", "(", ")", "==", "2", "\n", "\n", "loss", "=", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "logits", ",", "labels", ")", "\n", "loss", "*=", "labels", ".", "size", "(", "1", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.freeze_layer": [[21, 24], ["layer.parameters"], "function", ["None"], ["", "def", "freeze_layer", "(", "layer", ")", ":", "\n", "    ", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.unseen_mask": [[26, 42], ["torch.ones", "torch.ones", "set", "negtive_mux.cuda.cuda", "range"], "function", ["None"], ["", "", "def", "unseen_mask", "(", "args", ",", "val_loader", ")", ":", "\n", "    ", "negtive_mux", "=", "None", "\n", "# zsl", "\n", "if", "args", ".", "ZSL", "==", "1", ":", "\n", "        ", "negtive_mux", "=", "torch", ".", "ones", "(", "args", ".", "TEST", ".", "batch_size", ",", "args", ".", "FVQA", ".", "max_ans", ")", "\n", "indices", "=", "val_loader", ".", "dataset", ".", "answer_indices", "\n", "all_ans", "=", "set", "(", "aid", "for", "aids", "in", "indices", "for", "aid", "in", "aids", ")", "\n", "\n", "# unseen \u7c7b\u7f6e0", "\n", "for", "i", "in", "all_ans", ":", "\n", "            ", "for", "j", "in", "range", "(", "args", ".", "TRAIN", ".", "batch_size", ")", ":", "\n", "                ", "negtive_mux", "[", "j", ",", "i", "]", "=", "0", "\n", "", "", "negtive_mux", "=", "negtive_mux", "*", "(", "-", "1e13", ")", "\n", "negtive_mux", "=", "negtive_mux", ".", "cuda", "(", ")", "\n", "# pdb.set_trace()", "\n", "", "return", "negtive_mux", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.cosine_sim": [[44, 46], ["im.mm", "s.t"], "function", ["None"], ["", "def", "cosine_sim", "(", "im", ",", "s", ")", ":", "\n", "    ", "return", "im", ".", "mm", "(", "s", ".", "t", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.batch_mc_acc": [[48, 53], ["predicted.squeeze().size", "predicted.max", "predicted.squeeze"], "function", ["None"], ["", "def", "batch_mc_acc", "(", "predicted", ")", ":", "\n", "    ", "\"\"\" Compute the accuracies for a batch of predictions and answers \"\"\"", "\n", "N", ",", "C", "=", "predicted", ".", "squeeze", "(", ")", ".", "size", "(", ")", "\n", "_", ",", "predicted_index", "=", "predicted", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "(", "predicted_index", "==", "C", "-", "1", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.batch_top1": [[55, 59], ["predicted.max", "true.gather().clamp", "true.gather"], "function", ["None"], ["", "def", "batch_top1", "(", "predicted", ",", "true", ")", ":", "\n", "    ", "\"\"\" Compute the accuracies for a batch of predictions and answers \"\"\"", "\n", "_", ",", "predicted_index", "=", "predicted", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "true", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "predicted_index", ")", ".", "clamp", "(", "max", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.batch_accuracy": [[61, 86], ["predicted.topk", "torch.zeros().cuda", "torch.zeros().cuda", "range", "len", "ok[].reshape", "true.gather", "top1.sum().item", "top3.sum().item", "top10.sum().item", "torch.zeros", "torch.zeros", "top1.sum", "top3.sum", "top10.sum"], "function", ["None"], ["", "def", "batch_accuracy", "(", "predicted", ",", "true", ")", ":", "\n", "    ", "\"\"\" Compute the accuracies for a batch of predictions and answers \"\"\"", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "# _, predicted_index = predicted.max(dim=1, keepdim=True)", "\n", "# agreeing = true[0].gather(dim=1, index=predicted_index)", "\n", "# return (agreeing * 0.3).clamp(max=1)", "\n", "if", "len", "(", "true", ".", "shape", ")", "==", "3", ":", "\n", "        ", "true", "=", "true", "[", "0", "]", "\n", "", "_", ",", "ok", "=", "predicted", ".", "topk", "(", "10", ",", "dim", "=", "1", ")", "\n", "agreeing_all", "=", "torch", ".", "zeros", "(", "[", "predicted", ".", "shape", "[", "0", "]", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "tmp", "=", "ok", "[", ":", ",", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "agreeing_all", "+=", "true", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "tmp", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "top1", "=", "(", "agreeing_all", "*", "0.3", ")", ".", "clamp", "(", "max", "=", "1", ")", "\n", "", "if", "i", "==", "2", ":", "\n", "            ", "top3", "=", "(", "agreeing_all", "*", "0.3", ")", ".", "clamp", "(", "max", "=", "1", ")", "\n", "", "if", "i", "==", "9", ":", "\n", "            ", "top10", "=", "(", "agreeing_all", "*", "0.3", ")", ".", "clamp", "(", "max", "=", "1", ")", "\n", "\n", "", "", "top1", "=", "top1", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "top1", ".", "shape", "[", "0", "]", "\n", "top3", "=", "top3", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "top3", ".", "shape", "[", "0", "]", "\n", "top10", "=", "top10", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "top10", ".", "shape", "[", "0", "]", "\n", "return", "top1", ",", "top3", ",", "top10", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.get_transform": [[211, 218], ["torchvision.Compose", "torchvision.Scale", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "int"], "function", ["None"], ["", "", "def", "get_transform", "(", "target_size", ",", "central_fraction", "=", "1.0", ")", ":", "\n", "    ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Scale", "(", "int", "(", "target_size", "/", "central_fraction", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "target_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.dele_a": [[221, 230], ["answer.replace", "answer.replace.replace", "answer_t.replace.replace", "answer_tt.replace.replace", "answer_ttt.replace.replace", "list", "set"], "function", ["None"], ["", "def", "dele_a", "(", "answer", ")", ":", "# \u53bb\u51a0\u8bcd", "\n", "    ", "answer_t", "=", "answer", ".", "replace", "(", "'.'", ",", "''", ")", "\n", "answer_tt", "=", "answer_t", ".", "replace", "(", "','", ",", "''", ")", "\n", "answer_ttt", "=", "answer_tt", ".", "replace", "(", "\"the \"", ",", "\"\"", ")", "\n", "answer_tttt", "=", "answer_ttt", ".", "replace", "(", "\"an \"", ",", "\"\"", ")", "\n", "answer_ttttt", "=", "answer_tttt", ".", "replace", "(", "\"a \"", ",", "\"\"", ")", "\n", "ans_list", "=", "[", "answer_t", ",", "answer_tt", ",", "answer_ttt", ",", "answer_tttt", ",", "answer_ttttt", "]", "\n", "\n", "return", "list", "(", "set", "(", "ans_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.transfer": [[232, 260], ["nltk.word_tokenize", "nltk.pos_tag", "nltk.stem.WordNetLemmatizer", "string.join", "nltk.stem.WordNetLemmatizer.lemmatize", "new.append", "new.append", "tool.get_wordnet_pos", "new.append", "tag[].replace"], "function", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.get_wordnet_pos"], ["", "def", "transfer", "(", "answer", ")", ":", "# \u5355\u590d\u6570\u8f6c\u6362", "\n", "    ", "tokens", "=", "word_tokenize", "(", "answer", ")", "\n", "tagged_sent", "=", "pos_tag", "(", "tokens", ")", "\n", "wnl", "=", "WordNetLemmatizer", "(", ")", "\n", "\n", "new", "=", "[", "]", "\n", "for", "tag", "in", "tagged_sent", ":", "\n", "        ", "if", "tag", "[", "0", "]", "==", "\"as\"", ":", "\n", "            ", "new", ".", "append", "(", "\"as\"", ")", "\n", "continue", "\n", "", "elif", "tag", "[", "0", "]", "==", "\"grazing\"", "or", "tag", "[", "0", "]", "==", "\"timing\"", "or", "tag", "[", "0", "]", "==", "\"bicycling\"", ":", "\n", "            ", "kk", "=", "tag", "[", "0", "]", ".", "replace", "(", "\"ing\"", ",", "\"\"", ")", "+", "\"e\"", "\n", "new", ".", "append", "(", "kk", ")", "\n", "continue", "\n", "", "wordnet_pos", "=", "get_wordnet_pos", "(", "tag", "[", "1", "]", ")", "or", "wordnet", ".", "NOUN", "\n", "tmp", "=", "wnl", ".", "lemmatize", "(", "tag", "[", "0", "]", ",", "pos", "=", "wordnet_pos", ")", "\n", "if", "tmp", "==", "\"ax\"", ":", "\n", "            ", "tmp", "=", "\"axe\"", "\n", "", "elif", "tmp", "==", "\"people\"", ":", "\n", "            ", "tmp", "=", "\"person\"", "\n", "", "elif", "tmp", "==", "\"teeth\"", ":", "\n", "            ", "tmp", "=", "\"tooth\"", "\n", "", "elif", "tmp", "==", "\"worn\"", ":", "\n", "            ", "tmp", "=", "\"wear\"", "\n", "", "new", ".", "append", "(", "tmp", ")", "# \u8bcd\u5f62\u8fd8\u539f", "\n", "", "string", "=", "' '", "\n", "key", "=", "string", ".", "join", "(", "new", ")", "\n", "return", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.hand_remove": [[262, 272], ["answer.replace", "answer.replace", "answer.replace", "answer.replace", "answer.replace", "answer.replace", "answer.replace", "answer.replace", "list", "set"], "function", ["None"], ["", "def", "hand_remove", "(", "answer", ")", ":", "# \u624b\u52a8\u53bbing\uff0cs\uff0ces", "\n", "    ", "_ing", "=", "answer", ".", "replace", "(", "\"ing\"", ",", "\"\"", ")", "\n", "__ing", "=", "answer", ".", "replace", "(", "\"ing \"", ",", "\" \"", ")", "\n", "_s", "=", "answer", ".", "replace", "(", "\"s\"", ",", "\"\"", ")", "\n", "__s", "=", "answer", ".", "replace", "(", "\"s \"", ",", "\" \"", ")", "\n", "_es", "=", "answer", ".", "replace", "(", "\"es\"", ",", "\"\"", ")", "\n", "__es", "=", "answer", ".", "replace", "(", "\"es \"", ",", "\" \"", ")", "\n", "_er", "=", "answer", ".", "replace", "(", "\"er\"", ",", "\"\"", ")", "\n", "__er", "=", "answer", ".", "replace", "(", "\"er \"", ",", "\" \"", ")", "\n", "return", "list", "(", "set", "(", "[", "_ing", ",", "_s", ",", "_es", ",", "_er", ",", "__ing", ",", "__s", ",", "__es", ",", "__er", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.get_wordnet_pos": [[274, 285], ["tag.startswith", "tag.startswith", "tag.startswith", "tag.startswith"], "function", ["None"], ["", "def", "get_wordnet_pos", "(", "tag", ")", ":", "\n", "    ", "if", "tag", ".", "startswith", "(", "'J'", ")", ":", "\n", "        ", "return", "wordnet", ".", "ADJ", "\n", "", "elif", "tag", ".", "startswith", "(", "'V'", ")", ":", "\n", "        ", "return", "wordnet", ".", "VERB", "\n", "", "elif", "tag", ".", "startswith", "(", "'N'", ")", ":", "\n", "        ", "return", "wordnet", ".", "NOUN", "\n", "", "elif", "tag", ".", "startswith", "(", "'R'", ")", ":", "\n", "        ", "return", "wordnet", ".", "ADV", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.deal_fact": [[287, 305], ["fact.split.split", "ans.split.split"], "function", ["None"], ["", "", "def", "deal_fact", "(", "dic", ",", "fact", ")", ":", "\n", "    ", "fact", "=", "fact", ".", "split", "(", "'/'", ")", "\n", "if", "fact", "[", "-", "1", "]", "==", "\"n\"", "or", "fact", "[", "-", "1", "]", "==", "\"v\"", ":", "\n", "        ", "ans", "=", "fact", "[", "-", "2", "]", "\n", "", "else", ":", "\n", "        ", "ans", "=", "fact", "[", "-", "1", "]", "\n", "\n", "", "ans", "=", "ans", ".", "split", "(", "':'", ")", "\n", "if", "ans", "[", "0", "]", "==", "\"Category\"", ":", "\n", "        ", "ans", "=", "ans", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "ans", "=", "ans", "[", "0", "]", "\n", "\n", "# if ans[-1] == \")\":", "\n", "#     # ans = ans.split(\"(\")[0]", "\n", "#     pdb.set_trace()", "\n", "#     ans = dic[\"answer\"]", "\n", "", "return", "ans", "\n", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.__init__": [[15, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "topnum", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "topnum", "=", "topnum", "\n", "self", ".", "total_loss", "=", "0", "\n", "\n", "self", ".", "correct_1", "=", "0", "\n", "self", ".", "correct_3", "=", "0", "\n", "self", ".", "correct_10", "=", "0", "\n", "self", ".", "acc_all", "=", "0", "\n", "self", ".", "acc_1", "=", "0", "\n", "self", ".", "acc_3", "=", "0", "\n", "self", ".", "acc_10", "=", "0", "\n", "self", ".", "num_examples", "=", "0", "\n", "self", ".", "num_epoch", "=", "0", "\n", "\n", "self", ".", "mrr", "=", "0", "\n", "self", ".", "mr", "=", "0", "\n", "self", ".", "mrr_all", "=", "0", "\n", "self", ".", "mr_all", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_batch": [[35, 54], ["top1.sum().item", "top3.sum().item", "top10.sum().item", "metrics.Metrics.batch_mr_mrr", "mrr_tmp.sum().item", "mr_tmp.sum().item", "metrics.Metrics.batch_accuracy_10", "metrics.Metrics.batch_accuracy_50", "top1.sum", "top3.sum", "top10.sum", "mrr_tmp.sum", "mr_tmp.sum", "metrics.Metrics.batch_accuracy_200"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.batch_mr_mrr", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.batch_accuracy_10", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.batch_accuracy_50", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.batch_accuracy_200"], ["", "def", "update_per_batch", "(", "self", ",", "loss", ",", "answers", ",", "pred", ")", ":", "\n", "        ", "self", ".", "total_loss", "+=", "loss", "\n", "self", ".", "num_epoch", "+=", "1", "\n", "if", "self", ".", "topnum", "==", "10", ":", "\n", "            ", "top1", ",", "top3", ",", "top10", "=", "self", ".", "batch_accuracy_10", "(", "pred", ",", "answers", ")", "\n", "", "elif", "self", ".", "topnum", "==", "50", ":", "\n", "            ", "top1", ",", "top3", ",", "top10", "=", "self", ".", "batch_accuracy_50", "(", "pred", ",", "answers", ")", "\n", "", "elif", "self", ".", "topnum", "==", "200", ":", "\n", "            ", "top1", ",", "top3", ",", "top10", "=", "self", ".", "batch_accuracy_200", "(", "pred", ",", "answers", ")", "\n", "", "self", ".", "num_examples", "+=", "top1", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "correct_1", "+=", "top1", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "correct_3", "+=", "top3", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "correct_10", "+=", "top10", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "#", "\n", "mrr_tmp", ",", "mr_tmp", "=", "self", ".", "batch_mr_mrr", "(", "pred", ",", "answers", ")", "\n", "self", ".", "mrr_all", "+=", "mrr_tmp", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "mr_all", "+=", "mr_tmp", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.update_per_epoch": [[55, 65], ["None"], "methods", ["None"], ["", "def", "update_per_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "acc_1", "=", "100", "*", "(", "self", ".", "correct_1", "/", "self", ".", "num_examples", ")", "\n", "self", ".", "acc_3", "=", "100", "*", "(", "self", ".", "correct_3", "/", "self", ".", "num_examples", ")", "\n", "self", ".", "acc_10", "=", "100", "*", "(", "self", ".", "correct_10", "/", "self", ".", "num_examples", ")", "\n", "\n", "self", ".", "mr", "=", "self", ".", "mr_all", "/", "self", ".", "num_examples", "\n", "self", ".", "mrr", "=", "self", ".", "mrr_all", "/", "self", ".", "num_examples", "\n", "\n", "self", ".", "total_loss", "=", "self", ".", "total_loss", "/", "self", ".", "num_epoch", "\n", "self", ".", "acc_all", "=", "self", ".", "acc_1", "+", "self", ".", "acc_3", "+", "self", ".", "acc_10", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.batch_accuracy_10": [[66, 86], ["predicted.topk", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "len", "ok[].reshape", "true.gather", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "batch_accuracy_10", "(", "self", ",", "predicted", ",", "true", ")", ":", "\n", "        ", "\"\"\" Compute the accuracies for a batch of predictions and answers \"\"\"", "\n", "# (Pdb) predicted.shape", "\n", "# torch.Size([128, 500])", "\n", "# (Pdb) true.shape", "\n", "# torch.Size([128, 500])", "\n", "if", "len", "(", "true", ".", "shape", ")", "==", "3", ":", "\n", "            ", "true", "=", "true", "[", "0", "]", "\n", "", "_", ",", "ok", "=", "predicted", ".", "topk", "(", "10", ",", "dim", "=", "1", ")", "\n", "agreeing_all", "=", "torch", ".", "zeros", "(", "[", "predicted", ".", "shape", "[", "0", "]", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "tmp", "=", "ok", "[", ":", ",", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "agreeing_all", "+=", "true", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "tmp", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "top1", "=", "(", "agreeing_all", "*", "0.3", ")", ".", "clamp", "(", "max", "=", "1", ")", "\n", "", "if", "i", "==", "2", ":", "\n", "                ", "top3", "=", "(", "agreeing_all", "*", "0.3", ")", ".", "clamp", "(", "max", "=", "1", ")", "\n", "", "if", "i", "==", "9", ":", "\n", "                ", "top10", "=", "(", "agreeing_all", "*", "0.3", ")", ".", "clamp", "(", "max", "=", "1", ")", "\n", "", "", "return", "top1", ",", "top3", ",", "top10", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.batch_accuracy_50": [[87, 104], ["predicted.topk", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "len", "ok[].reshape", "true.gather", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "batch_accuracy_50", "(", "self", ",", "predicted", ",", "true", ")", ":", "\n", "        ", "\"\"\" Compute the accuracies for a batch of predictions and answers \"\"\"", "\n", "if", "len", "(", "true", ".", "shape", ")", "==", "3", ":", "\n", "            ", "true", "=", "true", "[", "0", "]", "\n", "", "_", ",", "ok", "=", "predicted", ".", "topk", "(", "50", ",", "dim", "=", "1", ")", "\n", "agreeing_all", "=", "torch", ".", "zeros", "(", "[", "predicted", ".", "shape", "[", "0", "]", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "            ", "tmp", "=", "ok", "[", ":", ",", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "agreeing_all", "+=", "true", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "tmp", ")", "\n", "if", "i", "==", "9", ":", "\n", "                ", "top10", "=", "(", "agreeing_all", "*", "0.3", ")", ".", "clamp", "(", "max", "=", "1", ")", "\n", "", "if", "i", "==", "29", ":", "\n", "                ", "top30", "=", "(", "agreeing_all", "*", "0.3", ")", ".", "clamp", "(", "max", "=", "1", ")", "\n", "", "if", "i", "==", "49", ":", "\n", "                ", "top50", "=", "(", "agreeing_all", "*", "0.3", ")", ".", "clamp", "(", "max", "=", "1", ")", "\n", "\n", "", "", "return", "top10", ",", "top30", ",", "top50", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.batch_accuracy_200": [[105, 122], ["predicted.topk", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "len", "ok[].reshape", "true.gather", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "batch_accuracy_200", "(", "self", ",", "predicted", ",", "true", ")", ":", "\n", "        ", "\"\"\" Compute the accuracies for a batch of predictions and answers \"\"\"", "\n", "if", "len", "(", "true", ".", "shape", ")", "==", "3", ":", "\n", "            ", "true", "=", "true", "[", "0", "]", "\n", "", "_", ",", "ok", "=", "predicted", ".", "topk", "(", "200", ",", "dim", "=", "1", ")", "\n", "agreeing_all", "=", "torch", ".", "zeros", "(", "[", "predicted", ".", "shape", "[", "0", "]", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "200", ")", ":", "\n", "            ", "tmp", "=", "ok", "[", ":", ",", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "agreeing_all", "+=", "true", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "tmp", ")", "\n", "if", "i", "==", "79", ":", "\n", "                ", "top10", "=", "(", "agreeing_all", "*", "0.3", ")", ".", "clamp", "(", "max", "=", "1", ")", "\n", "", "if", "i", "==", "149", ":", "\n", "                ", "top30", "=", "(", "agreeing_all", "*", "0.3", ")", ".", "clamp", "(", "max", "=", "1", ")", "\n", "", "if", "i", "==", "199", ":", "\n", "                ", "top50", "=", "(", "agreeing_all", "*", "0.3", ")", ".", "clamp", "(", "max", "=", "1", ")", "\n", "\n", "", "", "return", "top10", ",", "top30", ",", "top50", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.metrics.Metrics.batch_mr_mrr": [[123, 144], ["predicted.topk", "true.topk", "real_ans.expand.expand.expand", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs.topk", "torch.abs.topk", "real_ans_list[].reshape().to", "len", "real_ans_list[].reshape"], "methods", ["None"], ["", "def", "batch_mr_mrr", "(", "self", ",", "predicted", ",", "true", ")", ":", "\n", "        ", "if", "len", "(", "true", ".", "shape", ")", "==", "3", ":", "\n", "            ", "true", "=", "true", "[", "0", "]", "\n", "\n", "# \u8ba1\u7b97", "\n", "", "top_rank", "=", "predicted", ".", "shape", "[", "1", "]", "\n", "batch_size", "=", "predicted", ".", "shape", "[", "0", "]", "\n", "_", ",", "predict_ans_rank", "=", "predicted", ".", "topk", "(", "top_rank", ",", "dim", "=", "1", ")", "# \u7b54\u6848\u6392\u540d\u7684\u5750\u6807 batchsize * 500", "\n", "_", ",", "real_ans", "=", "true", ".", "topk", "(", "1", ",", "dim", "=", "1", ")", "# \u771f\u6b63\u7684\u7b54\u6848\uff1abatchsize * 1", "\n", "\n", "# \u6269\u5145\u7ef4\u5ea6", "\n", "real_ans", "=", "real_ans", ".", "expand", "(", "batch_size", ",", "top_rank", ")", "\n", "ans_different", "=", "torch", ".", "abs", "(", "predict_ans_rank", "-", "real_ans", ")", "\n", "# \u6b64\u65f6\u4e3a0\u7684\u4f4d\u7f6e\u5c31\u662f\u9884\u6d4b\u6b63\u786e\u7684\u4f4d\u7f6e", "\n", "_", ",", "real_ans_list", "=", "ans_different", ".", "topk", "(", "top_rank", ",", "dim", "=", "1", ")", "# \u6b64\u65f6\u6700\u540e\u4e00\u4f4d\u7684\u6570\u503c\u5c31\u662f\u6b63\u786e\u7b54\u6848\u5728\u9884\u6d4b\u7b54\u6848\u91cc\u9762\u7684\u4f4d\u7f6e,\u4e3a 0", "\n", "real_ans_list", "=", "real_ans_list", "+", "1.0", "\n", "mr", "=", "real_ans_list", "[", ":", ",", "-", "1", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "to", "(", "torch", ".", "float64", ")", "\n", "mrr", "=", "1.0", "/", "mr", "\n", "# pdb.set_trace()", "\n", "\n", "return", "mrr", ",", "mr", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fusion_updn.UD.__init__": [[10, 22], ["torch.Module.__init__", "language_model.WordEmbedding", "language_model.UpDnQuestionEmbedding", "attention.UpDnAttention", "fc.FCNet", "fc.FCNet", "question_word2vec.size", "fusion_updn.UD.w_emb.init_embedding", "utils.freeze_layer"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.WordEmbedding.init_embedding", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.freeze_layer"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ",", "question_word2vec", ")", ":", "\n", "        ", "super", "(", "UD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_emb", "=", "WordEmbedding", "(", "question_word2vec", ".", "size", "(", "0", ")", ",", "300", ",", "0.0", ")", "\n", "if", "args", ".", "freeze_w2v", ":", "\n", "            ", "self", ".", "w_emb", ".", "init_embedding", "(", "question_word2vec", ")", "\n", "freeze_layer", "(", "self", ".", "w_emb", ")", "\n", "# self.w_emb.weight.requires_grad = False", "\n", "\n", "", "self", ".", "q_emb", "=", "UpDnQuestionEmbedding", "(", "300", ",", "args", ".", "embedding_size", ",", "1", ",", "False", ",", "0.0", ")", "\n", "self", ".", "v_att", "=", "UpDnAttention", "(", "args", ".", "v_dim", ",", "self", ".", "q_emb", ".", "num_hid", ",", "args", ".", "embedding_size", ")", "\n", "self", ".", "q_net", "=", "FCNet", "(", "[", "self", ".", "q_emb", ".", "num_hid", ",", "args", ".", "embedding_size", "]", ")", "\n", "self", ".", "v_net", "=", "FCNet", "(", "[", "args", ".", "v_dim", ",", "args", ".", "embedding_size", "]", ")", "\n", "# self.classifier = SimpleClassifier(", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fusion_updn.UD.forward": [[25, 47], ["fusion_updn.UD.w_emb", "fusion_updn.UD.q_emb", "fusion_updn.UD.v_att", "fusion_updn.UD.q_net", "fusion_updn.UD.v_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "v", ",", "b", ",", "q", ",", "qlen", ")", ":", "\n", "        ", "\"\"\"Forward\n\n        v: [batch, num_objs, obj_dim]\n        b: [batch, num_objs, b_dim]\n        q: [batch_size, seq_length]\n\n        return: logits, not probs\n        \"\"\"", "\n", "# print(\"q = {}\".format(q))", "\n", "w_emb", "=", "self", ".", "w_emb", "(", "q", ")", "\n", "# print(\"w_emb = {}\".format(w_emb))", "\n", "q_emb", "=", "self", ".", "q_emb", "(", "w_emb", ")", "# [batch, q_dim]", "\n", "\n", "att", "=", "self", ".", "v_att", "(", "v", ",", "q_emb", ")", "# [spa, 1]", "\n", "v_emb", "=", "(", "att", "*", "v", ")", ".", "sum", "(", "1", ")", "# [batch, v_dim]", "\n", "\n", "q_repr", "=", "self", ".", "q_net", "(", "q_emb", ")", "\n", "v_repr", "=", "self", ".", "v_net", "(", "v_emb", ")", "\n", "joint_repr", "=", "q_repr", "*", "v_repr", "\n", "# logits = self.classifier(joint_repr)", "\n", "return", "joint_repr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fusion_san.SAN.__init__": [[15, 60], ["torch.Module.__init__", "language_model.WordEmbedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "language_model.Seq2SeqRNN", "attention.SanAttention", "fc.GroupMLP", "fusion_san.SAN.modules", "int", "int", "embedding_weights.size", "fusion_san.SAN.w_emb.init_embedding", "utils.freeze_layer", "embedding_weights.size", "int", "isinstance", "isinstance", "torch.xavier_uniform", "torch.xavier_uniform", "torch.xavier_uniform", "torch.xavier_uniform", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.WordEmbedding.init_embedding", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.freeze_layer"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ",", "embedding_weights", "=", "None", ",", "rnn_bidirectional", "=", "True", ")", ":", "\n", "        ", "super", "(", "SAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "embedding_requires_grad", "=", "not", "args", ".", "freeze_w2v", "\n", "question_features", "=", "1024", "\n", "rnn_features", "=", "int", "(", "question_features", "//", "2", ")", "if", "rnn_bidirectional", "else", "int", "(", "question_features", ")", "\n", "vision_features", "=", "args", ".", "output_features", "\n", "glimpses", "=", "2", "\n", "\n", "# vocab_size = embedding_weights.size(0)", "\n", "# vector_dim = embedding_weights.size(1)", "\n", "# self.embedding = nn.Embedding(vocab_size, vector_dim, padding_idx=0)", "\n", "# self.embedding.weight.data = embedding_weights", "\n", "# self.embedding.weight.requires_grad = embedding_requires_grad", "\n", "self", ".", "w_emb", "=", "WordEmbedding", "(", "embedding_weights", ".", "size", "(", "0", ")", ",", "300", ",", ".0", ")", "\n", "if", "args", ".", "freeze_w2v", ":", "\n", "            ", "self", ".", "w_emb", ".", "init_embedding", "(", "embedding_weights", ")", "\n", "freeze_layer", "(", "self", ".", "w_emb", ")", "\n", "\n", "", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "text", "=", "Seq2SeqRNN", "(", "\n", "input_features", "=", "embedding_weights", ".", "size", "(", "1", ")", ",", "\n", "rnn_features", "=", "int", "(", "rnn_features", ")", ",", "\n", "rnn_type", "=", "'LSTM'", ",", "\n", "rnn_bidirectional", "=", "rnn_bidirectional", ",", "\n", ")", "\n", "self", ".", "attention", "=", "SanAttention", "(", "\n", "v_features", "=", "vision_features", ",", "\n", "q_features", "=", "question_features", ",", "\n", "mid_features", "=", "512", ",", "\n", "glimpses", "=", "2", ",", "\n", "drop", "=", "0.5", ",", "\n", ")", "\n", "self", ".", "mlp", "=", "GroupMLP", "(", "\n", "in_features", "=", "glimpses", "*", "vision_features", "+", "question_features", ",", "\n", "mid_features", "=", "4", "*", "args", ".", "hidden_size", ",", "\n", "out_features", "=", "args", ".", "embedding_size", ",", "\n", "drop", "=", "0.5", ",", "\n", "groups", "=", "64", ",", "\n", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fusion_san.SAN.forward": [[63, 75], ["fusion_san.SAN.text", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "fusion_san.SAN.attention", "attention.apply_attention", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fusion_san.SAN.mlp", "fusion_san.SAN.drop", "list", "fusion_san.SAN.w_emb"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.apply_attention"], ["", "", "", "", "def", "forward", "(", "self", ",", "v", ",", "b", ",", "q", ",", "q_len", ")", ":", "\n", "# pdb.set_trace()", "\n", "        ", "q", "=", "self", ".", "text", "(", "self", ".", "drop", "(", "self", ".", "w_emb", "(", "q", ")", ")", ",", "list", "(", "q_len", ".", "data", ")", ")", "\n", "# q = self.text(self.embedding(q), list(q_len.data))", "\n", "\n", "v", "=", "F", ".", "normalize", "(", "v", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "a", "=", "self", ".", "attention", "(", "v", ",", "q", ")", "\n", "v", "=", "apply_attention", "(", "v", ",", "a", ")", "\n", "\n", "combined", "=", "torch", ".", "cat", "(", "[", "v", ",", "q", "]", ",", "dim", "=", "1", ")", "\n", "embedding", "=", "self", ".", "mlp", "(", "combined", ")", "\n", "return", "embedding", "", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fusion_mlp.MLP.__init__": [[14, 40], ["torch.Module.__init__", "fusion_mlp.BagOfWordsProcessor", "fc.GroupMLP", "fusion_mlp.MLP.modules", "isinstance", "isinstance", "torch.xavier_uniform", "torch.xavier_uniform", "torch.xavier_uniform", "torch.xavier_uniform", "embedding_weights.size", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ",", "embedding_weights", "=", "None", ",", "rnn_bidirectional", "=", "True", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "embedding_requires_grad", "=", "not", "args", ".", "freeze_w2v", "# freeze \u5219\u4e0d\u9700\u8981grad", "\n", "question_features", "=", "300", "\n", "vision_features", "=", "args", ".", "output_features", "# \u56fe\u7247\u7684", "\n", "\n", "# self.text = BagOfWordsMLPProcessor(", "\n", "self", ".", "text", "=", "BagOfWordsProcessor", "(", "\n", "embedding_tokens", "=", "embedding_weights", ".", "size", "(", "0", ")", "if", "embedding_weights", "is", "not", "None", "else", "dataset", ".", "num_tokens", ",", "\n", "embedding_weights", "=", "embedding_weights", ",", "\n", "embedding_features", "=", "300", ",", "\n", "embedding_requires_grad", "=", "embedding_requires_grad", ",", "\n", ")", "\n", "self", ".", "mlp", "=", "GroupMLP", "(", "\n", "in_features", "=", "vision_features", "+", "question_features", ",", "\n", "mid_features", "=", "4", "*", "args", ".", "hidden_size", ",", "\n", "out_features", "=", "args", ".", "embedding_size", ",", "\n", "drop", "=", "0.5", ",", "\n", "groups", "=", "64", ",", "\n", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fusion_mlp.MLP.forward": [[41, 48], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fusion_mlp.MLP.mlp", "fusion_mlp.MLP.text", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "list", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.normalize.size", "torch.normalize.size"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize"], ["", "", "", "", "def", "forward", "(", "self", ",", "v", ",", "b", ",", "q", ",", "q_len", ")", ":", "\n", "        ", "q", "=", "F", ".", "normalize", "(", "self", ".", "text", "(", "q", ",", "list", "(", "q_len", ".", "data", ")", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "# \u95ee\u9898\u5411\u91cf\u6c42\u5e73\u5747\u503c", "\n", "v", "=", "F", ".", "normalize", "(", "F", ".", "avg_pool2d", "(", "v", ",", "(", "v", ".", "size", "(", "2", ")", ",", "v", ".", "size", "(", "3", ")", ")", ")", ".", "squeeze", "(", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "combined", "=", "torch", ".", "cat", "(", "[", "v", ",", "q", "]", ",", "dim", "=", "1", ")", "\n", "embedding", "=", "self", ".", "mlp", "(", "combined", ")", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fusion_mlp.BagOfWordsProcessor.__init__": [[51, 57], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_tokens", ",", "embedding_features", ",", "\n", "embedding_weights", ",", "embedding_requires_grad", ")", ":", "\n", "        ", "super", "(", "BagOfWordsProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "embedding_tokens", ",", "embedding_features", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "data", "=", "embedding_weights", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "embedding_requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fusion_mlp.BagOfWordsProcessor.forward": [[58, 63], ["fusion_mlp.BagOfWordsProcessor.embedding", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "q_len", ")", ":", "\n", "        ", "embedded", "=", "self", ".", "embedding", "(", "q", ")", "\n", "q_len", "=", "Variable", "(", "torch", ".", "Tensor", "(", "q_len", ")", ".", "view", "(", "-", "1", ",", "1", ")", "+", "1e-12", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "torch", ".", "div", "(", "torch", ".", "sum", "(", "embedded", ",", "1", ")", ",", "q_len", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fc.FCNet.__init__": [[11, 30], ["torch.Module.__init__", "range", "layers.append", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "layers.append", "len", "layers.append", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "layers.append", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["def", "__init__", "(", "self", ",", "dims", ",", "act", "=", "'ReLU'", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "FCNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", "-", "2", ")", ":", "\n", "            ", "in_dim", "=", "dims", "[", "i", "]", "\n", "out_dim", "=", "dims", "[", "i", "+", "1", "]", "\n", "if", "0", "<", "dropout", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "", "layers", ".", "append", "(", "weight_norm", "(", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ",", "dim", "=", "None", ")", ")", "\n", "if", "''", "!=", "act", ":", "\n", "                ", "layers", ".", "append", "(", "getattr", "(", "nn", ",", "act", ")", "(", ")", ")", "\n", "", "", "if", "0", "<", "dropout", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "", "layers", ".", "append", "(", "weight_norm", "(", "nn", ".", "Linear", "(", "dims", "[", "-", "2", "]", ",", "dims", "[", "-", "1", "]", ")", ",", "dim", "=", "None", ")", ")", "\n", "if", "''", "!=", "act", ":", "\n", "            ", "layers", ".", "append", "(", "getattr", "(", "nn", ",", "act", ")", "(", ")", ")", "\n", "\n", "", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fc.FCNet.forward": [[31, 33], ["fc.FCNet.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fc.BCNet.__init__": [[39, 62], ["torch.Module.__init__", "fc.FCNet", "fc.FCNet", "torch.Dropout", "torch.Dropout", "torch.AvgPool1d", "torch.AvgPool1d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Linear", "torch.Linear", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["def", "__init__", "(", "self", ",", "v_dim", ",", "q_dim", ",", "h_dim", ",", "h_out", ",", "act", "=", "'ReLU'", ",", "dropout", "=", "[", ".2", ",", ".5", "]", ",", "k", "=", "3", ")", ":", "\n", "        ", "super", "(", "BCNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c", "=", "32", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "v_dim", "=", "v_dim", "\n", "self", ".", "q_dim", "=", "q_dim", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "h_out", "=", "h_out", "\n", "\n", "self", ".", "v_net", "=", "FCNet", "(", "[", "v_dim", ",", "h_dim", "*", "self", ".", "k", "]", ",", "act", "=", "act", ",", "dropout", "=", "dropout", "[", "0", "]", ")", "\n", "self", ".", "q_net", "=", "FCNet", "(", "[", "q_dim", ",", "h_dim", "*", "self", ".", "k", "]", ",", "act", "=", "act", ",", "dropout", "=", "dropout", "[", "0", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", "[", "1", "]", ")", "# attention", "\n", "if", "1", "<", "k", ":", "\n", "            ", "self", ".", "p_net", "=", "nn", ".", "AvgPool1d", "(", "self", ".", "k", ",", "stride", "=", "self", ".", "k", ")", "\n", "\n", "", "if", "None", "==", "h_out", ":", "\n", "            ", "pass", "\n", "", "elif", "h_out", "<=", "self", ".", "c", ":", "\n", "            ", "self", ".", "h_mat", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "h_out", ",", "1", ",", "h_dim", "*", "self", ".", "k", ")", ".", "normal_", "(", ")", ")", "\n", "self", ".", "h_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "h_out", ",", "1", ",", "1", ")", ".", "normal_", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "h_net", "=", "weight_norm", "(", "nn", ".", "Linear", "(", "h_dim", ",", "h_out", ")", ",", "dim", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fc.BCNet.forward": [[63, 91], ["fc.BCNet.v_net().transpose().unsqueeze", "fc.BCNet.q_net().transpose().unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.transpose().transpose", "torch.matmul.transpose().transpose", "fc.BCNet.dropout().unsqueeze", "fc.BCNet.q_net", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "fc.BCNet.dropout().transpose().unsqueeze", "fc.BCNet.q_net().transpose().unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "fc.BCNet.h_net", "fc.BCNet.transpose().transpose", "fc.BCNet.v_net().transpose", "fc.BCNet.q_net().transpose", "torch.matmul.transpose", "torch.matmul.transpose", "fc.BCNet.unsqueeze().transpose", "torch.matmul.transpose().transpose", "torch.matmul.transpose().transpose", "fc.BCNet.dropout", "fc.BCNet.dropout().transpose", "fc.BCNet.q_net().transpose", "fc.BCNet.transpose", "fc.BCNet.v_net", "fc.BCNet.q_net", "fc.BCNet.v_net", "fc.BCNet.unsqueeze", "torch.matmul.transpose", "torch.matmul.transpose", "fc.BCNet.dropout", "fc.BCNet.q_net", "fc.BCNet.v_net"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "v", ",", "q", ")", ":", "\n", "        ", "if", "None", "==", "self", ".", "h_out", ":", "\n", "            ", "v_", "=", "self", ".", "v_net", "(", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "q_", "=", "self", ".", "q_net", "(", "q", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "d_", "=", "torch", ".", "matmul", "(", "v_", ",", "q_", ")", "# b x h_dim x v x q", "\n", "logits", "=", "d_", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", "# b x v x q x h_dim", "\n", "return", "logits", "\n", "\n", "# broadcast Hadamard product, matrix-matrix production", "\n", "# fast computation but memory inefficient", "\n", "# epoch 1, time: 157.84", "\n", "", "elif", "self", ".", "h_out", "<=", "self", ".", "c", ":", "\n", "            ", "v_", "=", "self", ".", "dropout", "(", "self", ".", "v_net", "(", "v", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "q_", "=", "self", ".", "q_net", "(", "q", ")", "\n", "h_", "=", "v_", "*", "self", ".", "h_mat", "# broadcast, b x h_out x v x h_dim", "\n", "logits", "=", "torch", ".", "matmul", "(", "h_", ",", "q_", ".", "unsqueeze", "(", "1", ")", ".", "transpose", "(", "2", ",", "3", ")", ")", "# b x h_out x v x q", "\n", "logits", "=", "logits", "+", "self", ".", "h_bias", "\n", "return", "logits", "# b x h_out x v x q", "\n", "\n", "# batch outer product, linear projection", "\n", "# memory efficient but slow computation", "\n", "# epoch 1, time: 304.87", "\n", "", "else", ":", "\n", "            ", "v_", "=", "self", ".", "dropout", "(", "self", ".", "v_net", "(", "v", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "q_", "=", "self", ".", "q_net", "(", "q", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "d_", "=", "torch", ".", "matmul", "(", "v_", ",", "q_", ")", "# b x h_dim x v x q", "\n", "logits", "=", "self", ".", "h_net", "(", "d_", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ")", "# b x v x q x h_out", "\n", "return", "logits", ".", "transpose", "(", "2", ",", "3", ")", ".", "transpose", "(", "1", ",", "2", ")", "# b x h_out x v x q", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fc.BCNet.forward_with_weights": [[92, 101], ["fc.BCNet.v_net().transpose().unsqueeze", "fc.BCNet.q_net().transpose().unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "logits.unsqueeze.unsqueeze.squeeze().squeeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "logits.unsqueeze.unsqueeze.unsqueeze", "fc.BCNet.v_net().transpose", "fc.BCNet.q_net().transpose", "w.unsqueeze", "logits.unsqueeze.unsqueeze.squeeze", "fc.BCNet.p_net().squeeze", "fc.BCNet.v_net", "fc.BCNet.q_net", "fc.BCNet.p_net"], "methods", ["None"], ["", "", "def", "forward_with_weights", "(", "self", ",", "v", ",", "q", ",", "w", ")", ":", "\n", "        ", "v_", "=", "self", ".", "v_net", "(", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "# b x d x 1 x v", "\n", "q_", "=", "self", ".", "q_net", "(", "q", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "3", ")", "# b x d x q x 1", "\n", "logits", "=", "torch", ".", "matmul", "(", "torch", ".", "matmul", "(", "v_", ",", "w", ".", "unsqueeze", "(", "1", ")", ")", ",", "q_", ")", "# b x d x 1 x 1", "\n", "logits", "=", "logits", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "2", ")", "\n", "if", "1", "<", "self", ".", "k", ":", "\n", "            ", "logits", "=", "logits", ".", "unsqueeze", "(", "1", ")", "# b x 1 x d", "\n", "logits", "=", "self", ".", "p_net", "(", "logits", ")", ".", "squeeze", "(", "1", ")", "*", "self", ".", "k", "# sum-pooling", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fc.GroupMLP.__init__": [[104, 111], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "mid_features", ",", "out_features", ",", "drop", "=", "0.5", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "GroupMLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "in_features", ",", "mid_features", ",", "1", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "mid_features", ",", "out_features", ",", "1", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fc.GroupMLP.forward": [[112, 116], ["a.size", "fc.GroupMLP.relu", "fc.GroupMLP.conv2().view", "fc.GroupMLP.conv1", "a.view", "fc.GroupMLP.conv2", "fc.GroupMLP.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "a", ")", ":", "\n", "        ", "N", ",", "C", "=", "a", ".", "size", "(", ")", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "a", ".", "view", "(", "N", ",", "C", ",", "1", ")", ")", ")", "\n", "return", "self", ".", "conv2", "(", "self", ".", "drop", "(", "h", ")", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fc.GroupMLP_1lay.__init__": [[119, 127], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "mid_features", ",", "out_features", ",", "drop", "=", "0.5", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "GroupMLP_1lay", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "in_features", ",", "mid_features", ",", "1", ")", "\n", "self", ".", "batch_norm_fusion", "=", "nn", ".", "BatchNorm1d", "(", "mid_features", ",", "affine", "=", "False", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "mid_features", ",", "out_features", ",", "1", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fc.GroupMLP_1lay.forward": [[128, 134], ["a.size", "fc.GroupMLP_1lay.conv1", "fc.GroupMLP_1lay.batch_norm_fusion", "fc.GroupMLP_1lay.relu", "fc.GroupMLP_1lay.conv2().view", "a.view", "fc.GroupMLP_1lay.conv2", "fc.GroupMLP_1lay.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "a", ")", ":", "\n", "        ", "N", ",", "C", "=", "a", ".", "size", "(", ")", "\n", "h", "=", "self", ".", "conv1", "(", "a", ".", "view", "(", "N", ",", "C", ",", "1", ")", ")", "\n", "h", "=", "self", ".", "batch_norm_fusion", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "return", "self", ".", "conv2", "(", "self", ".", "drop", "(", "h", ")", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fc.GroupMLP_2lay.__init__": [[137, 146], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "mid_features", ",", "out_features", ",", "drop", "=", "0.5", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "GroupMLP_2lay", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "in_features", ",", "mid_features", ",", "1", ")", "\n", "self", ".", "batch_norm_fusion", "=", "nn", ".", "BatchNorm1d", "(", "mid_features", ",", "affine", "=", "False", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "mid_features", ",", "mid_features", ",", "1", ",", "groups", "=", "groups", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "mid_features", ",", "out_features", ",", "1", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fc.GroupMLP_2lay.forward": [[147, 155], ["a.size", "fc.GroupMLP_2lay.conv1", "fc.GroupMLP_2lay.relu", "fc.GroupMLP_2lay.conv2", "fc.GroupMLP_2lay.batch_norm_fusion", "fc.GroupMLP_2lay.relu", "fc.GroupMLP_2lay.conv3().view", "a.view", "fc.GroupMLP_2lay.conv3", "fc.GroupMLP_2lay.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "a", ")", ":", "\n", "        ", "N", ",", "C", "=", "a", ".", "size", "(", ")", "\n", "h", "=", "self", ".", "conv1", "(", "a", ".", "view", "(", "N", ",", "C", ",", "1", ")", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "conv2", "(", "h", ")", "\n", "h", "=", "self", ".", "batch_norm_fusion", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "return", "self", ".", "conv3", "(", "self", ".", "drop", "(", "h", ")", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.vector.Vector.__init__": [[34, 46], ["vector.Vector.cache", "urls.get", "os.splitext", "os.splitext", "os.basename", "os.basename"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.vector.Vector.cache"], ["    ", "def", "__init__", "(", "self", ",", "cache_path", ",", "\n", "vector_type", "=", "'glove.840B'", ",", "unk_init", "=", "torch", ".", "Tensor", ".", "zero_", ")", "->", "object", ":", "\n", "        ", "urls", "=", "{", "\n", "'glove.42B'", ":", "'http://nlp.stanford.edu/data/glove.42B.300d.zip'", ",", "\n", "'glove.840B'", ":", "'http://nlp.stanford.edu/data/glove.840B.300d.zip'", ",", "\n", "'glove.6B'", ":", "'http://nlp.stanford.edu/data/glove.6B.zip'", ",", "\n", "}", "\n", "url", "=", "urls", "[", "vector_type", "]", "if", "urls", ".", "get", "(", "vector_type", ",", "False", ")", "!=", "False", "else", "None", "\n", "name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "url", ")", ")", "[", "0", "]", "+", "'.txt'", "# glove.840B.300d.txt", "\n", "\n", "self", ".", "unk_init", "=", "unk_init", "\n", "self", ".", "cache", "(", "name", ",", "cache_path", ",", "url", "=", "url", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.vector.Vector.__getitem__": [[47, 52], ["vector.Vector.stoi.get", "vector.Vector.unk_init", "torch.Tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "self", ".", "stoi", ".", "get", "(", "token", ",", "-", "1", ")", "!=", "-", "1", ":", "\n", "            ", "return", "self", ".", "vectors", "[", "self", ".", "stoi", "[", "token", "]", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "unk_init", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.vector.Vector._prepare": [[53, 59], ["torch.Tensor", "vocab.items", "len"], "methods", ["None"], ["", "", "def", "_prepare", "(", "self", ",", "vocab", ")", ":", "\n", "        ", "word2vec", "=", "torch", ".", "Tensor", "(", "len", "(", "vocab", ")", ",", "self", ".", "dim", ")", "\n", "for", "token", ",", "idx", "in", "vocab", ".", "items", "(", ")", ":", "\n", "            ", "word2vec", "[", "idx", ",", ":", "]", "=", "self", "[", "token", "]", "\n", "\n", "", "return", "word2vec", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.vector.Vector.check": [[60, 65], ["vector.Vector.stoi.get"], "methods", ["None"], ["", "def", "check", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "self", ".", "stoi", ".", "get", "(", "token", ",", "-", "1", ")", "!=", "-", "1", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.vector.Vector.cache": [[66, 143], ["os.join", "os.join", "os.isfile", "os.isfile", "print", "tqdm.tqdm.tqdm", "torch.Tensor().view", "print", "torch.save", "print", "torch.load", "os.join", "os.join", "print", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "RuntimeError", "array.array", "line.rstrip().split", "vectors.extend", "itos.append", "os.exists", "os.exists", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.exists", "os.exists", "print", "str", "io.open", "print", "len", "len", "enumerate", "torch.Tensor", "os.exists", "os.exists", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "tqdm.tqdm.tqdm", "six.moves.urllib.request.urlretrieve", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext", "zipfile.ZipFile", "zf.extractall", "open", "line.rstrip", "len", "len", "print", "float", "len", "RuntimeError", "vector.reporthook", "len"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.vector.reporthook"], ["", "", "def", "cache", "(", "self", ",", "name", ",", "cache_path", ",", "url", "=", "None", ")", ":", "\n", "# cache_path='.vector_cache',", "\n", "#name= \"glove.840B.300d.txt\"", "\n", "#url = 'http://nlp.stanford.edu/data/glove.840B.300d.zip'", "\n", "\n", "        ", "path", "=", "osp", ".", "join", "(", "cache_path", ",", "name", ")", "\n", "path_pt", "=", "\"{}.pt\"", ".", "format", "(", "path", ")", "\n", "\n", "if", "not", "osp", ".", "isfile", "(", "path_pt", ")", ":", "\n", "# download vocab file if it does not exists", "\n", "            ", "if", "not", "osp", ".", "exists", "(", "path", ")", "and", "url", ":", "\n", "                ", "dest", "=", "osp", ".", "join", "(", "cache_path", ",", "os", ".", "path", ".", "basename", "(", "url", ")", ")", "\n", "if", "not", "osp", ".", "exists", "(", "dest", ")", ":", "# \u8fde\u8fd9\u4e2a\u538b\u7f29\u5305\u90fd\u4e0d\u5b58\u5728", "\n", "                    ", "print", "(", "'[-] Downloading vectors from {}'", ".", "format", "(", "url", ")", ")", "# \u4e0b\u8f7d", "\n", "if", "not", "osp", ".", "exists", "(", "cache_path", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "cache_path", ")", "# \u65b0\u5efa\u8fd9\u4e2acache\u6587\u4ef6\u5939", "\n", "\n", "", "with", "tqdm", "(", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ",", "miniters", "=", "1", ",", "desc", "=", "dest", ")", "as", "t", ":", "\n", "                        ", "urlretrieve", "(", "url", ",", "dest", ",", "reporthook", "=", "reporthook", "(", "t", ")", ")", "# \u4e0b\u8f7d", "\n", "\n", "", "", "print", "(", "'[-] Extracting vectors into {}'", ".", "format", "(", "path", ")", ")", "# \u63d0\u53d6vector\u5230txt\u4e2d", "\n", "ext", "=", "os", ".", "path", ".", "splitext", "(", "dest", ")", "[", "1", "]", "[", "1", ":", "]", "\n", "if", "ext", "==", "'zip'", ":", "\n", "                    ", "with", "zipfile", ".", "ZipFile", "(", "dest", ",", "\"r\"", ")", "as", "zf", ":", "\n", "                        ", "zf", ".", "extractall", "(", "cache_path", ")", "# \u89e3\u538b", "\n", "\n", "", "", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "'no vectors found at {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "# build vocab list", "\n", "", "itos", ",", "vectors", ",", "dim", "=", "[", "]", ",", "array", ".", "array", "(", "str", "(", "'d'", ")", ")", ",", "None", "\n", "\n", "# Try to read the whole file with utf-8 encoding.", "\n", "binary_lines", "=", "False", "\n", "try", ":", "\n", "                ", "with", "io", ".", "open", "(", "path", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "                    ", "lines", "=", "[", "line", "for", "line", "in", "f", "]", "\n", "# If there are malformed lines, read in binary mode", "\n", "# and manually decode each word from utf-8", "\n", "", "", "except", ":", "\n", "                ", "print", "(", "\"[!] Could not read {} as UTF8 file, \"", "\n", "\"reading file as bytes and skipping \"", "\n", "\"words with malformed UTF8.\"", ".", "format", "(", "path", ")", ")", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "lines", "=", "[", "line", "for", "line", "in", "f", "]", "\n", "", "binary_lines", "=", "True", "\n", "\n", "", "print", "(", "\"[-] Loading vectors from {}\"", ".", "format", "(", "path", ")", ")", "# \u8bfb\u53d6vector", "\n", "for", "line", "in", "tqdm", "(", "lines", ",", "total", "=", "len", "(", "lines", ")", ")", ":", "\n", "# Explicitly splitting on \" \" is important, so we don't", "\n", "# get rid of Unicode non-breaking spaces in the vectors.", "\n", "                ", "entries", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "word", ",", "entries", "=", "entries", "[", "0", "]", ",", "entries", "[", "1", ":", "]", "\n", "if", "dim", "is", "None", "and", "len", "(", "entries", ")", ">", "1", ":", "\n", "                    ", "dim", "=", "len", "(", "entries", ")", "# dim \u7531\u5411\u91cf\u957f\u5ea6\u51b3\u5b9a", "\n", "", "elif", "len", "(", "entries", ")", "==", "1", ":", "\n", "                    ", "print", "(", "\"Skipping token {} with 1-dimensional \"", "\n", "\"vector {}; likely a header\"", ".", "format", "(", "word", ",", "entries", ")", ")", "\n", "continue", "\n", "", "elif", "dim", "!=", "len", "(", "entries", ")", ":", "# \u5411\u91cf\u957f\u5ea6\u4e0d\u7b49", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "\"Vector for token {} has {} dimensions, but previously \"", "\n", "\"read vectors have {} dimensions. All vectors must have \"", "\n", "\"the same number of dimensions.\"", ".", "format", "(", "word", ",", "len", "(", "entries", ")", ",", "dim", ")", ")", "\n", "\n", "", "vectors", ".", "extend", "(", "float", "(", "x", ")", "for", "x", "in", "entries", ")", "# \u5411\u91cf\u8f6cfloat\uff0c\u5b58\u5230vector\u4e2d", "\n", "itos", ".", "append", "(", "word", ")", "# \u8bcd\u4e5f\u52a0\u5165 index to s", "\n", "\n", "", "self", ".", "itos", "=", "itos", "\n", "self", ".", "stoi", "=", "{", "word", ":", "i", "for", "i", ",", "word", "in", "enumerate", "(", "itos", ")", "}", "# s to index", "\n", "self", ".", "vectors", "=", "torch", ".", "Tensor", "(", "vectors", ")", ".", "view", "(", "-", "1", ",", "dim", ")", "# \u8f6ctensor", "\n", "self", ".", "dim", "=", "dim", "\n", "print", "(", "'* Caching vectors to {}'", ".", "format", "(", "path_pt", ")", ")", "# \u5b58\u5230 pt\u6587\u4ef6\u4e2d", "\n", "torch", ".", "save", "(", "(", "self", ".", "itos", ",", "self", ".", "stoi", ",", "self", ".", "vectors", ",", "self", ".", "dim", ")", ",", "path_pt", ")", "\n", "", "else", ":", "# \u5982\u679cpy\u6587\u4ef6\u5b58\u5728\uff0c\u5c31\u76f4\u63a5\u8bfb\u51fa", "\n", "            ", "print", "(", "'* Loading vectors to {}'", ".", "format", "(", "path_pt", ")", ")", "\n", "self", ".", "itos", ",", "self", ".", "stoi", ",", "self", ".", "vectors", ",", "self", ".", "dim", "=", "torch", ".", "load", "(", "path_pt", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.vector.reporthook": [[13, 31], ["t.update"], "function", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.metric.PRMetric.update"], ["def", "reporthook", "(", "t", ")", ":", "\n", "    ", "\"\"\"https://github.com/tqdm/tqdm\"\"\"", "\n", "last_b", "=", "[", "0", "]", "\n", "\n", "def", "inner", "(", "b", "=", "1", ",", "bsize", "=", "1", ",", "tsize", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        b: int, optionala\n        Number of blocks just transferred [default: 1].\n        bsize: int, optional\n        Size of each block (in tqdm units) [default: 1].\n        tsize: int, optional\n        Total size (in tqdm units). If [default: None] remains unchanged.\n        \"\"\"", "\n", "if", "tsize", "is", "not", "None", ":", "\n", "            ", "t", ".", "total", "=", "tsize", "\n", "", "t", ".", "update", "(", "(", "b", "-", "last_b", "[", "0", "]", ")", "*", "bsize", ")", "\n", "last_b", "[", "0", "]", "=", "b", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.BaseAttention.__init__": [[8, 12], ["torch.Module.__init__", "fc.FCNet", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["    ", "def", "__init__", "(", "self", ",", "v_dim", ",", "q_dim", ",", "num_hid", ")", ":", "\n", "        ", "super", "(", "BaseAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nonlinear", "=", "FCNet", "(", "[", "v_dim", "+", "q_dim", ",", "num_hid", "]", ")", "\n", "self", ".", "linear", "=", "weight_norm", "(", "nn", ".", "Linear", "(", "num_hid", ",", "1", ")", ",", "dim", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.BaseAttention.forward": [[13, 21], ["attention.BaseAttention.logits", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.UpDnAttention.logits"], ["", "def", "forward", "(", "self", ",", "v", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        v: [batch, k, vdim]\n        q: [batch, qdim]\n        \"\"\"", "\n", "logits", "=", "self", ".", "logits", "(", "v", ",", "q", ")", "\n", "w", "=", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "1", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.BaseAttention.logits": [[22, 29], ["v.size", "q.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention.BaseAttention.nonlinear", "attention.BaseAttention.linear", "q.unsqueeze().repeat.unsqueeze().repeat.unsqueeze"], "methods", ["None"], ["", "def", "logits", "(", "self", ",", "v", ",", "q", ")", ":", "\n", "        ", "num_objs", "=", "v", ".", "size", "(", "1", ")", "\n", "q", "=", "q", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_objs", ",", "1", ")", "\n", "vq", "=", "torch", ".", "cat", "(", "(", "v", ",", "q", ")", ",", "2", ")", "\n", "joint_repr", "=", "self", ".", "nonlinear", "(", "vq", ")", "\n", "logits", "=", "self", ".", "linear", "(", "joint_repr", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.UpDnAttention.__init__": [[32, 39], ["torch.Module.__init__", "fc.FCNet", "fc.FCNet", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["    ", "def", "__init__", "(", "self", ",", "v_dim", ",", "q_dim", ",", "num_hid", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "UpDnAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "v_proj", "=", "FCNet", "(", "[", "v_dim", ",", "num_hid", "]", ")", "\n", "self", ".", "q_proj", "=", "FCNet", "(", "[", "q_dim", ",", "num_hid", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear", "=", "weight_norm", "(", "nn", ".", "Linear", "(", "num_hid", ",", "1", ")", ",", "dim", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.UpDnAttention.forward": [[40, 48], ["attention.UpDnAttention.logits", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.UpDnAttention.logits"], ["", "def", "forward", "(", "self", ",", "v", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        v: [batch, k, vdim]\n        q: [batch, qdim]\n        \"\"\"", "\n", "logits", "=", "self", ".", "logits", "(", "v", ",", "q", ")", "\n", "w", "=", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "1", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.UpDnAttention.logits": [[49, 57], ["v.size", "attention.UpDnAttention.v_proj", "attention.UpDnAttention.q_proj().unsqueeze().repeat", "attention.UpDnAttention.dropout", "attention.UpDnAttention.linear", "attention.UpDnAttention.q_proj().unsqueeze", "attention.UpDnAttention.q_proj"], "methods", ["None"], ["", "def", "logits", "(", "self", ",", "v", ",", "q", ")", ":", "\n", "        ", "batch", ",", "k", ",", "_", "=", "v", ".", "size", "(", ")", "\n", "v_proj", "=", "self", ".", "v_proj", "(", "v", ")", "# [batch, k, qdim]", "\n", "q_proj", "=", "self", ".", "q_proj", "(", "q", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "k", ",", "1", ")", "\n", "joint_repr", "=", "v_proj", "*", "q_proj", "\n", "joint_repr", "=", "self", ".", "dropout", "(", "joint_repr", ")", "\n", "logits", "=", "self", ".", "linear", "(", "joint_repr", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.SanAttention.__init__": [[59, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["  ", "def", "__init__", "(", "self", ",", "v_features", ",", "q_features", ",", "mid_features", ",", "glimpses", ",", "drop", "=", "0.0", ")", ":", "\n", "    ", "super", "(", "SanAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "v_conv", "=", "nn", ".", "Conv2d", "(", "v_features", ",", "mid_features", ",", "1", ",", "bias", "=", "False", ")", "# let self.lin take care of bias", "\n", "self", ".", "q_lin", "=", "nn", ".", "Linear", "(", "q_features", ",", "mid_features", ")", "\n", "self", ".", "x_conv", "=", "nn", ".", "Conv2d", "(", "mid_features", ",", "glimpses", ",", "1", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.SanAttention.forward": [[68, 75], ["attention.SanAttention.v_conv", "attention.SanAttention.q_lin", "attention.tile_2d_over_nd", "attention.SanAttention.relu", "attention.SanAttention.x_conv", "attention.SanAttention.drop", "attention.SanAttention.drop", "attention.SanAttention.drop"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.tile_2d_over_nd"], ["", "def", "forward", "(", "self", ",", "v", ",", "q", ")", ":", "\n", "    ", "v", "=", "self", ".", "v_conv", "(", "self", ".", "drop", "(", "v", ")", ")", "\n", "q", "=", "self", ".", "q_lin", "(", "self", ".", "drop", "(", "q", ")", ")", "\n", "q", "=", "tile_2d_over_nd", "(", "q", ",", "v", ")", "\n", "x", "=", "self", ".", "relu", "(", "v", "+", "q", ")", "\n", "x", "=", "self", ".", "x_conv", "(", "self", ".", "drop", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.BiAttention.__init__": [[117, 123], ["torch.Module.__init__", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "fc.BCNet"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_dim", ",", "y_dim", ",", "z_dim", ",", "glimpse", ",", "dropout", "=", "[", ".2", ",", ".5", "]", ")", ":", "\n", "        ", "super", "(", "BiAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "glimpse", "=", "glimpse", "\n", "self", ".", "logits", "=", "weight_norm", "(", "BCNet", "(", "x_dim", ",", "y_dim", ",", "z_dim", ",", "glimpse", ",", "dropout", "=", "dropout", ",", "k", "=", "3", ")", ",", "\n", "name", "=", "'h_mat'", ",", "dim", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.BiAttention.forward": [[124, 131], ["attention.BiAttention.forward_all"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.UpDnQuestionEmbedding.forward_all"], ["", "def", "forward", "(", "self", ",", "v", ",", "q", ",", "v_mask", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        v: [batch, k, vdim]\n        q: [batch, qdim]\n        \"\"\"", "\n", "p", ",", "logits", "=", "self", ".", "forward_all", "(", "v", ",", "q", ",", "v_mask", ")", "\n", "return", "p", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.BiAttention.forward_all": [[132, 143], ["v.size", "q.size", "attention.BiAttention.logits", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "attention.BiAttention.data.masked_fill_", "attention.BiAttention.view", "torch.functional.softmax.view", "attention.BiAttention.size", "float", "v.abs().sum", "v.abs"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.UpDnAttention.logits"], ["", "def", "forward_all", "(", "self", ",", "v", ",", "q", ",", "v_mask", "=", "True", ")", ":", "\n", "        ", "v_num", "=", "v", ".", "size", "(", "1", ")", "\n", "q_num", "=", "q", ".", "size", "(", "1", ")", "\n", "logits", "=", "self", ".", "logits", "(", "v", ",", "q", ")", "# b x g x v x q", "\n", "\n", "if", "v_mask", ":", "\n", "            ", "mask", "=", "(", "0", "==", "v", ".", "abs", "(", ")", ".", "sum", "(", "2", ")", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "3", ")", ".", "expand", "(", "logits", ".", "size", "(", ")", ")", "\n", "logits", ".", "data", ".", "masked_fill_", "(", "mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "", "p", "=", "nn", ".", "functional", ".", "softmax", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "glimpse", ",", "v_num", "*", "q_num", ")", ",", "2", ")", "\n", "return", "p", ".", "view", "(", "-", "1", ",", "self", ".", "glimpse", ",", "v_num", ",", "q_num", ")", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.tile_2d_over_nd": [[76, 84], ["feature_vector.size", "feature_vector.view().expand_as", "feature_map.dim", "feature_vector.view"], "function", ["None"], ["", "", "def", "tile_2d_over_nd", "(", "feature_vector", ",", "feature_map", ")", ":", "\n", "  ", "\"\"\" Repeat the same feature vector over all spatial positions of a given feature map.\n    The feature vector should have the same batch size and number of features as the feature map.\n  \"\"\"", "\n", "n", ",", "c", "=", "feature_vector", ".", "size", "(", ")", "\n", "spatial_size", "=", "feature_map", ".", "dim", "(", ")", "-", "2", "\n", "tiled", "=", "feature_vector", ".", "view", "(", "n", ",", "c", ",", "*", "(", "[", "1", "]", "*", "spatial_size", ")", ")", ".", "expand_as", "(", "feature_map", ")", "\n", "return", "tiled", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.attention.apply_attention": [[85, 114], ["attention.view().expand.size", "input.view().expand.view", "attention.view().expand.view", "input.view().expand.size", "attention.view().expand.view", "torch.softmax", "input.view().expand.view().expand", "attention.view().expand.view().expand", "weighted.sum", "weighted.sum.view", "input.view().expand.size", "input.view().expand.view", "attention.view().expand.view"], "function", ["None"], ["", "def", "apply_attention", "(", "input", ",", "attention", ")", ":", "\n", "  ", "\"\"\" Apply any number of attention maps over the input.\n    The attention map has to have the same size in all dimensions except dim=1.\n  \"\"\"", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "n", ",", "c", "=", "input", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "glimpses", "=", "attention", ".", "size", "(", "1", ")", "\n", "\n", "# flatten the spatial dims into the third dim, since we don't need to care about how they are arranged", "\n", "input", "=", "input", ".", "view", "(", "n", ",", "c", ",", "-", "1", ")", "\n", "attention", "=", "attention", ".", "view", "(", "n", ",", "glimpses", ",", "-", "1", ")", "\n", "s", "=", "input", ".", "size", "(", "2", ")", "\n", "\n", "# apply a softmax to each attention map separately", "\n", "# since softmax only takes 2d inputs, we have to collapse the first two dimensions together", "\n", "# so that each glimpse is normalized separately", "\n", "attention", "=", "attention", ".", "view", "(", "n", "*", "glimpses", ",", "-", "1", ")", "\n", "attention", "=", "F", ".", "softmax", "(", "attention", ")", "\n", "\n", "# apply the weighting by creating a new dim to tile both tensors over", "\n", "target_size", "=", "[", "n", ",", "glimpses", ",", "c", ",", "s", "]", "\n", "input", "=", "input", ".", "view", "(", "n", ",", "1", ",", "c", ",", "s", ")", ".", "expand", "(", "*", "target_size", ")", "\n", "attention", "=", "attention", ".", "view", "(", "n", ",", "glimpses", ",", "1", ",", "s", ")", ".", "expand", "(", "*", "target_size", ")", "\n", "weighted", "=", "input", "*", "attention", "\n", "# sum over only the spatial dimension", "\n", "weighted_mean", "=", "weighted", ".", "sum", "(", "dim", "=", "3", ")", "\n", "# the shape at this point is (n, glimpses, c, 1)", "\n", "return", "weighted_mean", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.__init__": [[24, 29], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "counting.PiecewiseLin", "range"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["def", "__init__", "(", "self", ",", "objects", ",", "already_sigmoided", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "objects", "=", "objects", "\n", "self", ".", "already_sigmoided", "=", "already_sigmoided", "\n", "self", ".", "f", "=", "nn", ".", "ModuleList", "(", "[", "PiecewiseLin", "(", "16", ")", "for", "_", "in", "range", "(", "16", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.forward": [[30, 66], ["counting.Counter.filter_most_important", "counting.Counter.outer_product", "counting.Counter.deduplicate", "counting.Counter.to_one_hot", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "counting.Counter.iou", "score.sum().sum", "correction.sum", "att_conf.mean", "dist_conf.mean().mean", "score.sum", "dist_conf.mean"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.filter_most_important", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.outer_product", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.deduplicate", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.to_one_hot", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.iou"], ["", "def", "forward", "(", "self", ",", "boxes", ",", "attention", ")", ":", "\n", "        ", "\"\"\" Forward propagation of attention weights and bounding boxes to produce count features.\n        `boxes` has to be a tensor of shape (n, 4, m) with the 4 channels containing the x and y coordinates of the top left corner and the x and y coordinates of the bottom right corner in this order.\n        `attention` has to be a tensor of shape (n, m). Each value should be in [0, 1] if already_sigmoided is set to True, but there are no restrictions if already_sigmoided is set to False. This value should be close to 1 if the corresponding boundign box is relevant and close to 0 if it is not.\n        n is the batch size, m is the number of bounding boxes per image.\n        \"\"\"", "\n", "# only care about the highest scoring object proposals", "\n", "# the ones with low score will have a low impact on the count anyway", "\n", "boxes", ",", "attention", "=", "self", ".", "filter_most_important", "(", "self", ".", "objects", ",", "boxes", ",", "attention", ")", "\n", "# normalise the attention weights to be in [0, 1]", "\n", "if", "not", "self", ".", "already_sigmoided", ":", "\n", "            ", "attention", "=", "torch", ".", "sigmoid", "(", "attention", ")", "\n", "\n", "", "relevancy", "=", "self", ".", "outer_product", "(", "attention", ")", "\n", "distance", "=", "1", "-", "self", ".", "iou", "(", "boxes", ",", "boxes", ")", "\n", "\n", "# intra-object dedup", "\n", "score", "=", "self", ".", "f", "[", "0", "]", "(", "relevancy", ")", "*", "self", ".", "f", "[", "1", "]", "(", "distance", ")", "\n", "\n", "# inter-object dedup", "\n", "dedup_score", "=", "self", ".", "f", "[", "3", "]", "(", "relevancy", ")", "*", "self", ".", "f", "[", "4", "]", "(", "distance", ")", "\n", "dedup_per_entry", ",", "dedup_per_row", "=", "self", ".", "deduplicate", "(", "dedup_score", ",", "attention", ")", "\n", "score", "=", "score", "/", "dedup_per_entry", "\n", "\n", "# aggregate the score", "\n", "# can skip putting this on the diagonal since we're just summing over it anyway", "\n", "correction", "=", "self", ".", "f", "[", "0", "]", "(", "attention", "*", "attention", ")", "/", "dedup_per_row", "\n", "score", "=", "score", ".", "sum", "(", "dim", "=", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "correction", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "score", "=", "(", "score", "+", "1e-20", ")", ".", "sqrt", "(", ")", "\n", "one_hot", "=", "self", ".", "to_one_hot", "(", "score", ")", "\n", "\n", "att_conf", "=", "(", "self", ".", "f", "[", "5", "]", "(", "attention", ")", "-", "0.5", ")", ".", "abs", "(", ")", "\n", "dist_conf", "=", "(", "self", ".", "f", "[", "6", "]", "(", "distance", ")", "-", "0.5", ")", ".", "abs", "(", ")", "\n", "conf", "=", "self", ".", "f", "[", "7", "]", "(", "att_conf", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "dist_conf", ".", "mean", "(", "dim", "=", "2", ")", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "return", "one_hot", "*", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.deduplicate": [[67, 77], ["counting.Counter.outer_diff", "counting.Counter.outer_diff", "sim.sum", "counting.Counter.outer_product"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.outer_diff", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.outer_diff", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.outer_product"], ["", "def", "deduplicate", "(", "self", ",", "dedup_score", ",", "att", ")", ":", "\n", "# using outer-diffs", "\n", "        ", "att_diff", "=", "self", ".", "outer_diff", "(", "att", ")", "\n", "score_diff", "=", "self", ".", "outer_diff", "(", "dedup_score", ")", "\n", "sim", "=", "self", ".", "f", "[", "2", "]", "(", "1", "-", "score_diff", ")", ".", "prod", "(", "dim", "=", "1", ")", "*", "self", ".", "f", "[", "2", "]", "(", "1", "-", "att_diff", ")", "\n", "# similarity for each row", "\n", "row_sims", "=", "sim", ".", "sum", "(", "dim", "=", "2", ")", "\n", "# similarity for each entry", "\n", "all_sims", "=", "self", ".", "outer_product", "(", "row_sims", ")", "\n", "return", "all_sims", ",", "row_sims", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.to_one_hot": [[78, 96], ["scores.clamp.clamp.clamp", "scores.clamp.clamp.frac", "scores.clamp.clamp.data.new().fill_", "scores.clamp.clamp.data.new().fill_", "scores.clamp.data.new().fill_.scatter_", "scores.clamp.data.new().fill_.scatter_", "scores.clamp.clamp.long", "scores.clamp.clamp.data.new", "scores.clamp.clamp.data.new", "i.clamp", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "i.size", "i.size"], "methods", ["None"], ["", "def", "to_one_hot", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\" Turn a bunch of non-negative scalar values into a one-hot encoding.\n        E.g. with self.objects = 3, 0 -> [1 0 0 0], 2.75 -> [0 0 0.25 0.75].\n        \"\"\"", "\n", "# sanity check, I don't think this ever does anything (it certainly shouldn't)", "\n", "scores", "=", "scores", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "self", ".", "objects", ")", "\n", "# compute only on the support", "\n", "i", "=", "scores", ".", "long", "(", ")", ".", "data", "\n", "f", "=", "scores", ".", "frac", "(", ")", "\n", "# target_l is the one-hot if the score is rounded down", "\n", "# target_r is the one-hot if the score is rounded up", "\n", "target_l", "=", "scores", ".", "data", ".", "new", "(", "i", ".", "size", "(", "0", ")", ",", "self", ".", "objects", "+", "1", ")", ".", "fill_", "(", "0", ")", "\n", "target_r", "=", "scores", ".", "data", ".", "new", "(", "i", ".", "size", "(", "0", ")", ",", "self", ".", "objects", "+", "1", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "target_l", ".", "scatter_", "(", "dim", "=", "1", ",", "index", "=", "i", ".", "clamp", "(", "max", "=", "self", ".", "objects", ")", ",", "value", "=", "1", ")", "\n", "target_r", ".", "scatter_", "(", "dim", "=", "1", ",", "index", "=", "(", "i", "+", "1", ")", ".", "clamp", "(", "max", "=", "self", ".", "objects", ")", ",", "value", "=", "1", ")", "\n", "# interpolate between these with the fractional part of the score", "\n", "return", "(", "1", "-", "f", ")", "*", "Variable", "(", "target_l", ")", "+", "f", "*", "Variable", "(", "target_r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.filter_most_important": [[97, 103], ["attention.topk", "idx.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "boxes.gather.gather.gather", "boxes.gather.gather.size", "boxes.gather.gather.size", "idx.unsqueeze().expand.unsqueeze().expand.size", "idx.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["None"], ["", "def", "filter_most_important", "(", "self", ",", "n", ",", "boxes", ",", "attention", ")", ":", "\n", "        ", "\"\"\" Only keep top-n object proposals, scored by attention weight \"\"\"", "\n", "attention", ",", "idx", "=", "attention", ".", "topk", "(", "n", ",", "dim", "=", "1", ",", "sorted", "=", "False", ")", "\n", "idx", "=", "idx", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "expand", "(", "boxes", ".", "size", "(", "0", ")", ",", "boxes", ".", "size", "(", "1", ")", ",", "idx", ".", "size", "(", "1", ")", ")", "\n", "boxes", "=", "boxes", ".", "gather", "(", "2", ",", "idx", ")", "\n", "return", "boxes", ",", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.outer": [[104, 109], ["x.unsqueeze().expand", "x.unsqueeze().expand", "tuple", "x.size", "x.unsqueeze", "x.unsqueeze", "x.size"], "methods", ["None"], ["", "def", "outer", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "tuple", "(", "x", ".", "size", "(", ")", ")", "+", "(", "x", ".", "size", "(", ")", "[", "-", "1", "]", ",", ")", "\n", "a", "=", "x", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "expand", "(", "*", "size", ")", "\n", "b", "=", "x", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", ".", "expand", "(", "*", "size", ")", "\n", "return", "a", ",", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.outer_product": [[110, 114], ["counting.Counter.outer"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.outer"], ["", "def", "outer_product", "(", "self", ",", "x", ")", ":", "\n", "# Y_ij = x_i * x_j", "\n", "        ", "a", ",", "b", "=", "self", ".", "outer", "(", "x", ")", "\n", "return", "a", "*", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.outer_diff": [[115, 120], ["counting.Counter.outer"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.outer"], ["", "def", "outer_diff", "(", "self", ",", "x", ")", ":", "\n", "# like outer products, except taking the absolute difference instead", "\n", "# Y_ij = | x_i - x_j |", "\n", "        ", "a", ",", "b", "=", "self", ".", "outer", "(", "x", ")", "\n", "return", "(", "a", "-", "b", ")", ".", "abs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.iou": [[121, 127], ["counting.Counter.intersection", "counting.Counter.area().unsqueeze().expand_as", "counting.Counter.area().unsqueeze().expand_as", "counting.Counter.area().unsqueeze", "counting.Counter.area().unsqueeze", "counting.Counter.area", "counting.Counter.area"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.intersection", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.area", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.area"], ["", "def", "iou", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "# this is just the usual way to IoU from bounding boxes", "\n", "        ", "inter", "=", "self", ".", "intersection", "(", "a", ",", "b", ")", "\n", "area_a", "=", "self", ".", "area", "(", "a", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "inter", ")", "\n", "area_b", "=", "self", ".", "area", "(", "b", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "inter", ")", "\n", "return", "inter", "/", "(", "area_a", "+", "area_b", "-", "inter", "+", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.area": [[128, 132], ["None"], "methods", ["None"], ["", "def", "area", "(", "self", ",", "box", ")", ":", "\n", "        ", "x", "=", "(", "box", "[", ":", ",", "2", ",", ":", "]", "-", "box", "[", ":", ",", "0", ",", ":", "]", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "y", "=", "(", "box", "[", ":", ",", "3", ",", ":", "]", "-", "box", "[", ":", ",", "1", ",", ":", "]", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.Counter.intersection": [[133, 146], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "a.size", "a.size", "b.size", "a[].unsqueeze().expand", "b[].unsqueeze().expand", "a[].unsqueeze().expand", "b[].unsqueeze().expand", "a[].unsqueeze", "b[].unsqueeze", "a[].unsqueeze", "b[].unsqueeze"], "methods", ["None"], ["", "def", "intersection", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "size", "=", "(", "a", ".", "size", "(", "0", ")", ",", "2", ",", "a", ".", "size", "(", "2", ")", ",", "b", ".", "size", "(", "2", ")", ")", "\n", "min_point", "=", "torch", ".", "max", "(", "\n", "a", "[", ":", ",", ":", "2", ",", ":", "]", ".", "unsqueeze", "(", "dim", "=", "3", ")", ".", "expand", "(", "*", "size", ")", ",", "\n", "b", "[", ":", ",", ":", "2", ",", ":", "]", ".", "unsqueeze", "(", "dim", "=", "2", ")", ".", "expand", "(", "*", "size", ")", ",", "\n", ")", "\n", "max_point", "=", "torch", ".", "min", "(", "\n", "a", "[", ":", ",", "2", ":", ",", ":", "]", ".", "unsqueeze", "(", "dim", "=", "3", ")", ".", "expand", "(", "*", "size", ")", ",", "\n", "b", "[", ":", ",", "2", ":", ",", ":", "]", ".", "unsqueeze", "(", "dim", "=", "2", ")", ".", "expand", "(", "*", "size", ")", ",", "\n", ")", "\n", "inter", "=", "(", "max_point", "-", "min_point", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "area", "=", "inter", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "inter", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "return", "area", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.PiecewiseLin.__init__": [[149, 155], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "n", "+", "1", ")", ")", "\n", "# the first weight here is always 0 with a 0 gradient", "\n", "self", ".", "weight", ".", "data", "[", "0", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.counting.PiecewiseLin.forward": [[156, 177], ["counting.PiecewiseLin.weight.abs", "w.expand_as.expand_as.view", "w.expand_as.expand_as.cumsum", "csum.expand.expand.expand", "w.expand_as.expand_as.expand_as", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "y.frac", "csum.expand.expand.gather", "csum.expand.gather.squeeze", "w.expand_as.expand_as.sum", "csum.expand.gather.unsqueeze", "torch.autograd.Variable.clamp", "torch.autograd.Variable.clamp", "torch.autograd.Variable.clamp", "tuple", "y.long", "w.expand_as.expand_as.gather", "csum.expand.gather.dim", "csum.expand.gather.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# all weights are positive -> function is monotonically increasing", "\n", "        ", "w", "=", "self", ".", "weight", ".", "abs", "(", ")", "\n", "# make weights sum to one -> f(1) = 1", "\n", "w", "=", "w", "/", "w", ".", "sum", "(", ")", "\n", "w", "=", "w", ".", "view", "(", "[", "self", ".", "n", "+", "1", "]", "+", "[", "1", "]", "*", "x", ".", "dim", "(", ")", ")", "\n", "# keep cumulative sum for O(1) time complexity", "\n", "csum", "=", "w", ".", "cumsum", "(", "dim", "=", "0", ")", "\n", "csum", "=", "csum", ".", "expand", "(", "(", "self", ".", "n", "+", "1", ",", ")", "+", "tuple", "(", "x", ".", "size", "(", ")", ")", ")", "\n", "w", "=", "w", ".", "expand_as", "(", "csum", ")", "\n", "\n", "# figure out which part of the function the input lies on", "\n", "y", "=", "self", ".", "n", "*", "x", ".", "unsqueeze", "(", "0", ")", "\n", "idx", "=", "Variable", "(", "y", ".", "long", "(", ")", ".", "data", ")", "\n", "f", "=", "y", ".", "frac", "(", ")", "\n", "\n", "# contribution of the linear parts left of the input", "\n", "x", "=", "csum", ".", "gather", "(", "0", ",", "idx", ".", "clamp", "(", "max", "=", "self", ".", "n", ")", ")", "\n", "# contribution within the linear segment the input falls into", "\n", "x", "=", "x", "+", "f", "*", "w", ".", "gather", "(", "0", ",", "(", "idx", "+", "1", ")", ".", "clamp", "(", "max", "=", "self", ".", "n", ")", ")", "\n", "return", "x", ".", "squeeze", "(", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fusion_ban.BAN.__init__": [[21, 45], ["torch.Module.__init__", "language_model.WordEmbedding", "language_model.UpDnQuestionEmbedding", "attention.BiAttention", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "counting.Counter", "torch.Dropout", "torch.Tanh", "question_word2vec.size", "fusion_ban.BAN.w_emb.init_embedding", "utils.freeze_layer", "fusion_ban.BAN.b_net.append", "fusion_ban.BAN.q_prj.append", "fusion_ban.BAN.c_prj.append", "fc.BCNet", "fc.FCNet", "fc.FCNet"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.WordEmbedding.init_embedding", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.freeze_layer"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ",", "question_word2vec", ")", ":", "\n", "        ", "super", "(", "BAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "w_emb", "=", "WordEmbedding", "(", "question_word2vec", ".", "size", "(", "0", ")", ",", "300", ",", ".0", ")", "\n", "if", "args", ".", "freeze_w2v", ":", "\n", "            ", "self", ".", "w_emb", ".", "init_embedding", "(", "question_word2vec", ")", "\n", "freeze_layer", "(", "self", ".", "w_emb", ")", "\n", "", "self", ".", "q_emb", "=", "UpDnQuestionEmbedding", "(", "300", ",", "args", ".", "embedding_size", ",", "1", ",", "False", ",", ".0", ")", "\n", "self", ".", "v_att", "=", "BiAttention", "(", "args", ".", "v_dim", ",", "self", ".", "q_emb", ".", "num_hid", ",", "self", ".", "q_emb", ".", "num_hid", ",", "args", ".", "glimpse", ")", "\n", "self", ".", "b_net", "=", "[", "]", "\n", "self", ".", "q_prj", "=", "[", "]", "\n", "self", ".", "c_prj", "=", "[", "]", "\n", "self", ".", "objects", "=", "10", "# minimum number of boxes", "\n", "for", "i", "in", "range", "(", "args", ".", "glimpse", ")", ":", "\n", "            ", "self", ".", "b_net", ".", "append", "(", "BCNet", "(", "args", ".", "v_dim", ",", "self", ".", "q_emb", ".", "num_hid", ",", "self", ".", "q_emb", ".", "num_hid", ",", "None", ",", "k", "=", "1", ")", ")", "\n", "self", ".", "q_prj", ".", "append", "(", "FCNet", "(", "[", "self", ".", "q_emb", ".", "num_hid", ",", "self", ".", "q_emb", ".", "num_hid", "]", ",", "''", ",", ".2", ")", ")", "\n", "self", ".", "c_prj", ".", "append", "(", "FCNet", "(", "[", "self", ".", "objects", "+", "1", ",", "self", ".", "q_emb", ".", "num_hid", "]", ",", "'ReLU'", ",", ".0", ")", ")", "\n", "\n", "", "self", ".", "b_net", "=", "nn", ".", "ModuleList", "(", "self", ".", "b_net", ")", "\n", "self", ".", "q_prj", "=", "nn", ".", "ModuleList", "(", "self", ".", "q_prj", ")", "\n", "self", ".", "c_prj", "=", "nn", ".", "ModuleList", "(", "self", ".", "c_prj", ")", "\n", "self", ".", "counter", "=", "Counter", "(", "self", ".", "objects", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", ".5", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fusion_ban.BAN.forward": [[46, 72], ["fusion_ban.BAN.w_emb", "fusion_ban.BAN.q_emb.forward_all", "b[].transpose", "fusion_ban.BAN.v_att.forward_all", "range", "fusion_ban.BAN.sum", "fusion_ban.BAN.b_net[].forward_with_weights", "logits[].max", "fusion_ban.BAN.counter", "b_emb[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.UpDnQuestionEmbedding.forward_all", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.UpDnQuestionEmbedding.forward_all", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.fc.BCNet.forward_with_weights"], ["", "def", "forward", "(", "self", ",", "v", ",", "b", ",", "q", ",", "q_len", ")", ":", "\n", "        ", "\"\"\"Forward\n\n        v: [batch, num_objs, obj_dim]\n        b: [batch, num_objs, b_dim]\n        q: [batch_size, seq_length]\n\n        return: logits, not probs\n        \"\"\"", "\n", "w_emb", "=", "self", ".", "w_emb", "(", "q", ")", "\n", "q_emb", "=", "self", ".", "q_emb", ".", "forward_all", "(", "w_emb", ")", "# [batch, q_len, q_dim]", "\n", "boxes", "=", "b", "[", ":", ",", ":", ",", ":", "4", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "b_emb", "=", "[", "0", "]", "*", "self", ".", "args", ".", "glimpse", "\n", "att", ",", "logits", "=", "self", ".", "v_att", ".", "forward_all", "(", "v", ",", "q_emb", ")", "# b x g x v x q", "\n", "\n", "for", "g", "in", "range", "(", "self", ".", "args", ".", "glimpse", ")", ":", "\n", "            ", "b_emb", "[", "g", "]", "=", "self", ".", "b_net", "[", "g", "]", ".", "forward_with_weights", "(", "v", ",", "q_emb", ",", "att", "[", ":", ",", "g", ",", ":", ",", ":", "]", ")", "# b x l x h", "\n", "\n", "atten", ",", "_", "=", "logits", "[", ":", ",", "g", ",", ":", ",", ":", "]", ".", "max", "(", "2", ")", "\n", "embed", "=", "self", ".", "counter", "(", "boxes", ",", "atten", ")", "\n", "\n", "q_emb", "=", "self", ".", "q_prj", "[", "g", "]", "(", "b_emb", "[", "g", "]", ".", "unsqueeze", "(", "1", ")", ")", "+", "q_emb", "\n", "q_emb", "=", "q_emb", "+", "self", ".", "c_prj", "[", "g", "]", "(", "embed", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "return", "q_emb", ".", "sum", "(", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.WordEmbedding.__init__": [[17, 23], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["def", "__init__", "(", "self", ",", "ntoken", ",", "emb_dim", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "WordEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb", "=", "nn", ".", "Embedding", "(", "ntoken", "+", "1", ",", "emb_dim", ",", "padding_idx", "=", "ntoken", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "ntoken", "=", "ntoken", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.WordEmbedding.init_embedding": [[24, 29], ["None"], "methods", ["None"], ["", "def", "init_embedding", "(", "self", ",", "np_file", ")", ":", "\n", "# weight_init = torch.from_numpy(np.load(np_file))", "\n", "        ", "weight_init", "=", "np_file", "\n", "assert", "weight_init", ".", "shape", "==", "(", "self", ".", "ntoken", ",", "self", ".", "emb_dim", ")", "\n", "self", ".", "emb", ".", "weight", ".", "data", "[", ":", "self", ".", "ntoken", "]", "=", "weight_init", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.WordEmbedding.forward": [[30, 34], ["language_model.WordEmbedding.emb", "language_model.WordEmbedding.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "emb", "=", "self", ".", "emb", "(", "x", ")", "\n", "emb", "=", "self", ".", "dropout", "(", "emb", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.UpDnQuestionEmbedding.__init__": [[37, 55], ["torch.Module.__init__", "rnn_cls", "int"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "num_hid", ",", "nlayers", ",", "bidirect", ",", "dropout", "=", "0", ",", "rnn_type", "=", "'GRU'", ")", ":", "\n", "        ", "\"\"\"Module for question embedding\n        \"\"\"", "\n", "super", "(", "UpDnQuestionEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "rnn_type", "==", "'LSTM'", "or", "rnn_type", "==", "'GRU'", "\n", "rnn_cls", "=", "nn", ".", "LSTM", "if", "rnn_type", "==", "'LSTM'", "else", "nn", ".", "GRU", "\n", "\n", "self", ".", "rnn", "=", "rnn_cls", "(", "\n", "in_dim", ",", "num_hid", ",", "nlayers", ",", "\n", "bidirectional", "=", "bidirect", ",", "\n", "dropout", "=", "dropout", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "num_hid", "=", "num_hid", "\n", "self", ".", "nlayers", "=", "nlayers", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "ndirections", "=", "1", "+", "int", "(", "bidirect", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.UpDnQuestionEmbedding.init_hidden": [[56, 65], ["next", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "language_model.UpDnQuestionEmbedding.parameters", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "weight.new().zero_", "weight.new().zero_", "weight.new().zero_", "weight.new", "weight.new", "weight.new"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.data_prefetcher.next"], ["", "def", "init_hidden", "(", "self", ",", "batch", ")", ":", "\n", "# just to get the type of tensor", "\n", "        ", "weight", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "data", "\n", "hid_shape", "=", "(", "self", ".", "nlayers", "*", "self", ".", "ndirections", ",", "batch", ",", "self", ".", "num_hid", ")", "\n", "if", "self", ".", "rnn_type", "==", "'LSTM'", ":", "\n", "            ", "return", "(", "Variable", "(", "weight", ".", "new", "(", "*", "hid_shape", ")", ".", "zero_", "(", ")", ")", ",", "\n", "Variable", "(", "weight", ".", "new", "(", "*", "hid_shape", ")", ".", "zero_", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "Variable", "(", "weight", ".", "new", "(", "*", "hid_shape", ")", ".", "zero_", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.UpDnQuestionEmbedding.forward": [[66, 79], ["x.size", "language_model.UpDnQuestionEmbedding.init_hidden", "language_model.UpDnQuestionEmbedding.rnn.flatten_parameters", "language_model.UpDnQuestionEmbedding.rnn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.QuestionEmbedding.init_hidden"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: [batch, sequence, in_dim]", "\n", "        ", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "hidden", "=", "self", ".", "init_hidden", "(", "batch", ")", "\n", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "output", ",", "hidden", "=", "self", ".", "rnn", "(", "x", ",", "hidden", ")", "\n", "\n", "if", "self", ".", "ndirections", "==", "1", ":", "\n", "            ", "return", "output", "[", ":", ",", "-", "1", "]", "\n", "\n", "", "forward_", "=", "output", "[", ":", ",", "-", "1", ",", ":", "self", ".", "num_hid", "]", "\n", "backward", "=", "output", "[", ":", ",", "0", ",", "self", ".", "num_hid", ":", "]", "\n", "return", "torch", ".", "cat", "(", "(", "forward_", ",", "backward", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.UpDnQuestionEmbedding.forward_all": [[80, 87], ["x.size", "language_model.UpDnQuestionEmbedding.init_hidden", "language_model.UpDnQuestionEmbedding.rnn.flatten_parameters", "language_model.UpDnQuestionEmbedding.rnn"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.QuestionEmbedding.init_hidden"], ["", "def", "forward_all", "(", "self", ",", "x", ")", ":", "\n", "# x: [batch, sequence, in_dim]", "\n", "        ", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "hidden", "=", "self", ".", "init_hidden", "(", "batch", ")", "\n", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "output", ",", "hidden", "=", "self", ".", "rnn", "(", "x", ",", "hidden", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.QuestionEmbedding.__init__": [[90, 121], ["torch.Module.__init__", "rnn_cls", "int", "int", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "num_hid", ",", "nlayers", "=", "1", ",", "bidirect", "=", "True", ",", "dropout", "=", "0", ",", "rnn_type", "=", "'GRU'", ",", "words_dropout", "=", "None", ",", "\n", "dropout_before_rnn", "=", "None", ",", "\n", "dropout_after_rnn", "=", "None", ")", ":", "\n", "        ", "\"\"\"Module for question embedding\n        \"\"\"", "\n", "super", "(", "QuestionEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "rnn_type", "==", "'LSTM'", "or", "rnn_type", "==", "'GRU'", "\n", "rnn_cls", "=", "nn", ".", "LSTM", "if", "rnn_type", "==", "'LSTM'", "else", "nn", ".", "GRU", "\n", "self", ".", "bidirect", "=", "bidirect", "\n", "self", ".", "ndirections", "=", "1", "+", "int", "(", "bidirect", ")", "\n", "if", "bidirect", ":", "\n", "            ", "num_hid", "=", "int", "(", "num_hid", "/", "2", ")", "\n", "", "self", ".", "words_dropout", "=", "words_dropout", "\n", "if", "dropout_before_rnn", "is", "not", "None", ":", "\n", "            ", "self", ".", "dropout_before_rnn", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_before_rnn", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout_before_rnn", "=", "None", "\n", "", "self", ".", "rnn", "=", "rnn_cls", "(", "\n", "in_dim", ",", "num_hid", ",", "nlayers", ",", "\n", "bidirectional", "=", "bidirect", ",", "\n", "dropout", "=", "dropout", ",", "\n", "batch_first", "=", "True", ")", "\n", "if", "dropout_after_rnn", "is", "not", "None", ":", "\n", "            ", "self", ".", "dropout_after_rnn", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_after_rnn", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout_after_rnn", "=", "None", "\n", "\n", "", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "num_hid", "=", "num_hid", "\n", "self", ".", "nlayers", "=", "nlayers", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.QuestionEmbedding.init_hidden": [[122, 131], ["next", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "language_model.QuestionEmbedding.parameters", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "weight.new().zero_", "weight.new().zero_", "weight.new().zero_", "weight.new", "weight.new", "weight.new"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.utils.tool.data_prefetcher.next"], ["", "def", "init_hidden", "(", "self", ",", "batch", ")", ":", "\n", "# just to get the type of tensor", "\n", "        ", "weight", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "data", "\n", "hid_shape", "=", "(", "self", ".", "nlayers", "*", "self", ".", "ndirections", ",", "batch", ",", "self", ".", "num_hid", ")", "\n", "if", "self", ".", "rnn_type", "==", "'LSTM'", ":", "\n", "            ", "return", "(", "Variable", "(", "weight", ".", "new", "(", "*", "hid_shape", ")", ".", "zero_", "(", ")", ")", ",", "\n", "Variable", "(", "weight", ".", "new", "(", "*", "hid_shape", ")", ".", "zero_", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "Variable", "(", "weight", ".", "new", "(", "*", "hid_shape", ")", ".", "zero_", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.QuestionEmbedding.forward": [[132, 162], ["language_model.QuestionEmbedding.size", "language_model.QuestionEmbedding.size", "language_model.QuestionEmbedding.init_hidden", "language_model.QuestionEmbedding.rnn.flatten_parameters", "language_model.QuestionEmbedding.rnn", "int", "numpy.random.randint", "enumerate", "language_model.QuestionEmbedding.dropout_before_rnn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "language_model.QuestionEmbedding.dropout_after_rnn"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.QuestionEmbedding.init_hidden"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "qlen", "=", "None", ")", ":", "\n", "# x: [batch, sequence, in_dim]", "\n", "        ", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "num_tokens", "=", "x", ".", "size", "(", "1", ")", "\n", "if", "self", ".", "words_dropout", "is", "not", "None", "and", "self", ".", "words_dropout", ">", "0", ":", "\n", "            ", "num_dropout", "=", "int", "(", "self", ".", "words_dropout", "*", "num_tokens", ")", "\n", "rand_ixs", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_tokens", ",", "(", "batch", ",", "num_dropout", ")", ")", "\n", "for", "bix", ",", "token_ixs", "in", "enumerate", "(", "rand_ixs", ")", ":", "\n", "                ", "x", "[", "bix", ",", "token_ixs", "]", "*=", "0", "\n", "", "", "hidden", "=", "self", ".", "init_hidden", "(", "batch", ")", "\n", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "if", "self", ".", "dropout_before_rnn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dropout_before_rnn", "(", "x", ")", "\n", "\n", "", "q_words_emb", ",", "hidden", "=", "self", ".", "rnn", "(", "x", ",", "hidden", ")", "# q_words_emb: B x num_words x gru_dim, hidden: 1 x B x gru_dim", "\n", "\n", "out", "=", "None", "\n", "if", "self", ".", "bidirect", ":", "\n", "            ", "forward_", "=", "q_words_emb", "[", ":", ",", "-", "1", ",", ":", "self", ".", "num_hid", "]", "\n", "backward", "=", "q_words_emb", "[", ":", ",", "0", ",", "self", ".", "num_hid", ":", "]", "\n", "hid", "=", "torch", ".", "cat", "(", "(", "forward_", ",", "backward", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "hid", "\n", "# return q_words_emb, hid", "\n", "", "else", ":", "\n", "            ", "out", "=", "q_words_emb", "[", ":", ",", "-", "1", "]", "\n", "# return q_words_emb, q_words_emb[:, -1]", "\n", "\n", "", "if", "self", ".", "dropout_after_rnn", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "dropout_after_rnn", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.Seq2SeqRNN.__init__": [[164, 183], ["torch.Module.__init__", "language_model.Seq2SeqRNN.init_weight", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.GRU", "torch.GRU", "torch.GRU", "ValueError"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.Seq2SeqRNN.init_weight"], ["  ", "def", "__init__", "(", "self", ",", "input_features", ",", "rnn_features", ",", "num_layers", "=", "1", ",", "drop", "=", "0.0", ",", "\n", "rnn_type", "=", "'LSTM'", ",", "rnn_bidirectional", "=", "False", ")", ":", "\n", "    ", "super", "(", "Seq2SeqRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bidirectional", "=", "rnn_bidirectional", "\n", "\n", "if", "rnn_type", "==", "'LSTM'", ":", "\n", "      ", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "input_size", "=", "input_features", ",", "\n", "hidden_size", "=", "rnn_features", ",", "dropout", "=", "drop", ",", "\n", "num_layers", "=", "num_layers", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "rnn_bidirectional", ")", "\n", "", "elif", "rnn_type", "==", "'GRU'", ":", "\n", "      ", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "input_size", "=", "input_features", ",", "\n", "hidden_size", "=", "rnn_features", ",", "dropout", "=", "drop", ",", "\n", "num_layers", "=", "num_layers", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "rnn_bidirectional", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'Unsupported Type'", ")", "\n", "\n", "", "self", ".", "init_weight", "(", "rnn_bidirectional", ",", "rnn_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.Seq2SeqRNN.init_weight": [[184, 195], ["language_model.Seq2SeqRNN._init_rnn", "language_model.Seq2SeqRNN._init_rnn", "language_model.Seq2SeqRNN.rnn.bias_ih_l0.data.zero_", "language_model.Seq2SeqRNN.rnn.bias_hh_l0.data.zero_", "language_model.Seq2SeqRNN._init_rnn", "language_model.Seq2SeqRNN._init_rnn", "language_model.Seq2SeqRNN.rnn.bias_ih_l0_reverse.data.zero_", "language_model.Seq2SeqRNN.rnn.bias_hh_l0_reverse.data.zero_"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.Seq2SeqRNN._init_rnn", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.Seq2SeqRNN._init_rnn", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.Seq2SeqRNN._init_rnn", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.Seq2SeqRNN._init_rnn"], ["", "def", "init_weight", "(", "self", ",", "bidirectional", ",", "rnn_type", ")", ":", "\n", "    ", "self", ".", "_init_rnn", "(", "self", ".", "rnn", ".", "weight_ih_l0", ",", "rnn_type", ")", "\n", "self", ".", "_init_rnn", "(", "self", ".", "rnn", ".", "weight_hh_l0", ",", "rnn_type", ")", "\n", "self", ".", "rnn", ".", "bias_ih_l0", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "rnn", ".", "bias_hh_l0", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "if", "bidirectional", ":", "\n", "      ", "self", ".", "_init_rnn", "(", "self", ".", "rnn", ".", "weight_ih_l0_reverse", ",", "rnn_type", ")", "\n", "self", ".", "_init_rnn", "(", "self", ".", "rnn", ".", "weight_hh_l0_reverse", ",", "rnn_type", ")", "\n", "self", ".", "rnn", ".", "bias_ih_l0_reverse", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "rnn", ".", "bias_hh_l0_reverse", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.Seq2SeqRNN._init_rnn": [[196, 200], ["weight.chunk", "torch.xavier_uniform", "torch.xavier_uniform", "torch.xavier_uniform"], "methods", ["None"], ["", "", "def", "_init_rnn", "(", "self", ",", "weight", ",", "rnn_type", ")", ":", "\n", "    ", "chunk_size", "=", "4", "if", "rnn_type", "==", "'LSTM'", "else", "3", "\n", "for", "w", "in", "weight", ".", "chunk", "(", "chunk_size", ",", "0", ")", ":", "\n", "      ", "init", ".", "xavier_uniform", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.language_model.Seq2SeqRNN.forward": [[201, 221], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "isinstance", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "lens.tolist", "language_model.Seq2SeqRNN.rnn", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "outputs.squeeze.squeeze.squeeze", "language_model.Seq2SeqRNN.rnn", "_indices.cuda", "indices.cuda"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "q_emb", ",", "q_len", ")", ":", "\n", "    ", "lengths", "=", "torch", ".", "LongTensor", "(", "q_len", ")", "\n", "lens", ",", "indices", "=", "torch", ".", "sort", "(", "lengths", ",", "0", ",", "True", ")", "\n", "\n", "packed", "=", "pack_padded_sequence", "(", "q_emb", "[", "indices", ".", "cuda", "(", ")", "]", ",", "lens", ".", "tolist", "(", ")", ",", "batch_first", "=", "True", ")", "\n", "if", "isinstance", "(", "self", ".", "rnn", ",", "nn", ".", "LSTM", ")", ":", "\n", "# pdb.set_trace()", "\n", "        ", "_", ",", "(", "outputs", ",", "_", ")", "=", "self", ".", "rnn", "(", "packed", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "rnn", ",", "nn", ".", "GRU", ")", ":", "\n", "        ", "_", ",", "outputs", "=", "self", ".", "rnn", "(", "packed", ")", "\n", "\n", "", "if", "self", ".", "bidirectional", ":", "\n", "      ", "outputs", "=", "torch", ".", "cat", "(", "[", "outputs", "[", "0", ",", ":", ",", ":", "]", ",", "outputs", "[", "1", ",", ":", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "outputs", "=", "outputs", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "_", ",", "_indices", "=", "torch", ".", "sort", "(", "indices", ",", "0", ")", "\n", "outputs", "=", "outputs", "[", "_indices", ".", "cuda", "(", ")", "]", "\n", "\n", "return", "outputs", "", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.answer_mlp.MLP.__init__": [[11, 28], ["torch.Module.__init__", "answer_mlp.MLP.modules", "getattr", "isinstance", "isinstance", "torch.xavier_uniform", "torch.xavier_uniform", "torch.xavier_uniform", "torch.xavier_uniform", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "ans_net_list", "=", "[", "\"GroupMLP\"", ",", "\"GroupMLP_1lay\"", ",", "\"GroupMLP_2lay\"", "]", "\n", "ans_net", "=", "ans_net_list", "[", "args", ".", "ans_net_lay", "]", "\n", "self", ".", "mlp", "=", "getattr", "(", "FC", ",", "ans_net", ")", "(", "\n", "in_features", "=", "args", ".", "ans_feature_len", ",", "# fan", "\n", "mid_features", "=", "args", ".", "hidden_size", ",", "# 2048", "\n", "out_features", "=", "args", ".", "embedding_size", ",", "# fan", "\n", "drop", "=", "0.0", ",", "\n", "groups", "=", "64", ",", "# 64", "\n", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.answer_mlp.MLP.forward": [[29, 32], ["answer_mlp.MLP.mlp", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize"], ["", "", "", "", "def", "forward", "(", "self", ",", "a", ",", "a_len", "=", "None", ")", ":", "\n", "# pdb.set_trace()", "\n", "        ", "return", "self", ".", "mlp", "(", "F", ".", "normalize", "(", "a", ",", "p", "=", "2", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.classifier.SimpleClassifier.__init__": [[6, 15], ["torch.Module.__init__", "torch.Sequential", "torch.nn.utils.weight_norm.weight_norm", "torch.ReLU", "torch.Dropout", "torch.nn.utils.weight_norm.weight_norm", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "hid_dim", ",", "out_dim", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "SimpleClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "\n", "weight_norm", "(", "nn", ".", "Linear", "(", "in_dim", ",", "hid_dim", ")", ",", "dim", "=", "None", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ",", "inplace", "=", "True", ")", ",", "\n", "weight_norm", "(", "nn", ".", "Linear", "(", "hid_dim", ",", "out_dim", ")", ",", "dim", "=", "None", ")", "\n", "]", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.classifier.SimpleClassifier.forward": [[16, 19], ["classifier.SimpleClassifier.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "self", ".", "main", "(", "x", ")", "\n", "return", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.logger.LogFormatter.__init__": [[20, 22], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.logger.LogFormatter.format": [[23, 34], ["round", "record.getMessage", "message.replace.replace.replace", "time.strftime", "datetime.timedelta", "len"], "methods", ["None"], ["", "def", "format", "(", "self", ",", "record", ")", ":", "\n", "        ", "elapsed_seconds", "=", "round", "(", "record", ".", "created", "-", "self", ".", "start_time", ")", "\n", "\n", "prefix", "=", "\"%s - %s - %s\"", "%", "(", "\n", "record", ".", "levelname", ",", "\n", "time", ".", "strftime", "(", "'%x %X'", ")", ",", "\n", "timedelta", "(", "seconds", "=", "elapsed_seconds", ")", "\n", ")", "\n", "message", "=", "record", ".", "getMessage", "(", ")", "\n", "message", "=", "message", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "(", "len", "(", "prefix", ")", "+", "3", ")", ")", "\n", "return", "\"%s - %s\"", "%", "(", "prefix", ",", "message", ")", "if", "message", "else", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.logger.create_logger": [[36, 72], ["logger.LogFormatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "time.time"], "function", ["None"], ["", "", "def", "create_logger", "(", "filepath", ",", "rank", ")", ":", "\n", "    ", "\"\"\"\n    Create a logger.\n    Use a different log file for each process.\n    \"\"\"", "\n", "# create log formatter", "\n", "log_formatter", "=", "LogFormatter", "(", ")", "\n", "\n", "# create file handler and set level to debug", "\n", "if", "filepath", "is", "not", "None", ":", "\n", "        ", "if", "rank", ">", "0", ":", "\n", "            ", "filepath", "=", "'%s-%i'", "%", "(", "filepath", ",", "rank", ")", "\n", "", "file_handler", "=", "logging", ".", "FileHandler", "(", "filepath", ",", "\"a\"", ",", "encoding", "=", "'utf-8'", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "file_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "\n", "# create console handler and set level to info", "\n", "", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "\n", "# create logger and set level to debug", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "handlers", "=", "[", "]", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "if", "filepath", "is", "not", "None", ":", "\n", "        ", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "\n", "# reset logger elapsed time", "\n", "def", "reset_time", "(", ")", ":", "\n", "        ", "log_formatter", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "logger", ".", "reset_time", "=", "reset_time", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.logger.initialize_exp": [[74, 113], ["logger.get_dump_path", "json.dump", "logger.create_logger", "create_logger.info", "create_logger.info", "create_logger.info", "create_logger.info", "vars", "open", "x.startswith", "len", "os.path.join", "os.path.join", "command.append", "re.match", "params.exp_name.strip", "getattr", "command.append", "command.append"], "function", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.logger.get_dump_path", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.logger.create_logger"], ["", "def", "initialize_exp", "(", "params", ")", ":", "\n", "    ", "\"\"\"\n    Initialize the experiment:\n    - dump parameters\n    - create a logger\n    \"\"\"", "\n", "# dump parameters", "\n", "exp_folder", "=", "get_dump_path", "(", "params", ")", "\n", "json", ".", "dump", "(", "vars", "(", "params", ")", ",", "open", "(", "os", ".", "path", ".", "join", "(", "exp_folder", ",", "'params.pkl'", ")", ",", "'w'", ")", ",", "indent", "=", "4", ")", "\n", "\n", "# get running command", "\n", "command", "=", "[", "\"python\"", ",", "sys", ".", "argv", "[", "0", "]", "]", "\n", "for", "x", "in", "sys", ".", "argv", "[", "1", ":", "]", ":", "\n", "        ", "if", "x", ".", "startswith", "(", "'--'", ")", ":", "\n", "            ", "assert", "'\"'", "not", "in", "x", "and", "\"'\"", "not", "in", "x", "\n", "command", ".", "append", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "assert", "\"'\"", "not", "in", "x", "\n", "if", "re", ".", "match", "(", "'^[a-zA-Z0-9_]+$'", ",", "x", ")", ":", "\n", "                ", "command", ".", "append", "(", "\"%s\"", "%", "x", ")", "\n", "", "else", ":", "\n", "                ", "command", ".", "append", "(", "\"'%s'\"", "%", "x", ")", "\n", "", "", "", "command", "=", "' '", ".", "join", "(", "command", ")", "\n", "params", ".", "command", "=", "command", "+", "' --exp_id \"%s\"'", "%", "params", ".", "exp_id", "\n", "\n", "# check experiment name", "\n", "assert", "len", "(", "params", ".", "exp_name", ".", "strip", "(", ")", ")", ">", "0", "\n", "\n", "# create a logger", "\n", "logger", "=", "create_logger", "(", "os", ".", "path", ".", "join", "(", "exp_folder", ",", "'train.log'", ")", ",", "rank", "=", "getattr", "(", "params", ",", "'global_rank'", ",", "0", ")", ")", "\n", "logger", ".", "info", "(", "\"============ Initialized logger ============\"", ")", "\n", "# logger.info(\"\\n\".join(\"%s: %s\" % (k, str(v))", "\n", "#                       for k, v in sorted(dict(vars(params)).items())))", "\n", "# text = f'# Git Version: {get_code_version()} #'", "\n", "# logger.info(\"\\n\".join(['=' * 24, text, '=' * 24]))", "\n", "logger", ".", "info", "(", "\"The experiment will be stored in %s\\n\"", "%", "exp_folder", ")", "\n", "logger", ".", "info", "(", "\"Running command: %s\"", "%", "command", ")", "\n", "logger", ".", "info", "(", "\"\"", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.logger.get_dump_path": [[115, 144], ["datetime.date.today().strftime", "os.path.join", "os.path.join", "len", "os.path.exists", "subprocess.Popen().wait", "os.path.isdir", "subprocess.Popen().wait", "datetime.date.today", "subprocess.Popen", "os.path.isdir", "subprocess.Popen", "random.choice", "os.path.join", "range"], "function", ["None"], ["", "def", "get_dump_path", "(", "params", ")", ":", "\n", "    ", "\"\"\"\n    Create a directory to store the experiment.\n    \"\"\"", "\n", "assert", "len", "(", "params", ".", "exp_name", ")", ">", "0", "\n", "assert", "not", "params", ".", "dump_path", "in", "(", "''", ",", "None", ")", ",", "'Please choose your favorite destination for dump.'", "\n", "dump_path", "=", "params", ".", "dump_path", "\n", "\n", "# create the sweep path if it does not exist", "\n", "when", "=", "date", ".", "today", "(", ")", ".", "strftime", "(", "'%m%d-'", ")", "\n", "sweep_path", "=", "os", ".", "path", ".", "join", "(", "dump_path", ",", "when", "+", "params", ".", "exp_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sweep_path", ")", ":", "\n", "        ", "subprocess", ".", "Popen", "(", "\"mkdir -p %s\"", "%", "sweep_path", ",", "shell", "=", "True", ")", ".", "wait", "(", ")", "\n", "\n", "# create an random ID for the job if it is not given in the parameters.", "\n", "", "if", "params", ".", "exp_id", "==", "''", ":", "\n", "        ", "chars", "=", "'abcdefghijklmnopqrstuvwxyz0123456789'", "\n", "while", "True", ":", "\n", "            ", "exp_id", "=", "''", ".", "join", "(", "random", ".", "choice", "(", "chars", ")", "for", "_", "in", "range", "(", "10", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "sweep_path", ",", "exp_id", ")", ")", ":", "\n", "                ", "break", "\n", "", "", "params", ".", "exp_id", "=", "exp_id", "\n", "\n", "# create the dump folder / update parameters", "\n", "", "exp_folder", "=", "os", ".", "path", ".", "join", "(", "sweep_path", ",", "params", ".", "exp_id", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "exp_folder", ")", ":", "\n", "        ", "subprocess", ".", "Popen", "(", "\"mkdir -p %s\"", "%", "exp_folder", ",", "shell", "=", "True", ")", ".", "wait", "(", ")", "\n", "", "return", "exp_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.module.LSTM4VarLenSeq.__init__": [[15, 49], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "module.LSTM4VarLenSeq.init_parameters"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.module.LSTM4VarLenSeq.init_parameters"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "\n", "num_layers", "=", "1", ",", "bias", "=", "True", ",", "bidirectional", "=", "False", ",", "init", "=", "'orthogonal'", ",", "take_last", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        no dropout support\n        batch_first support deprecated, the input and output tensors are\n        provided as (batch, seq_len, feature).\n\n        Args:\n            input_size:\n            hidden_size:\n            num_layers:\n            bias:\n            bidirectional:\n            init: ways to init the torch.nn.LSTM parameters,\n                supports 'orthogonal' and 'uniform'\n            take_last: 'True' if you only want the final hidden state\n                otherwise 'False'\n        \"\"\"", "\n", "super", "(", "LSTM4VarLenSeq", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "bias", "=", "bias", ",", "\n", "bidirectional", "=", "bidirectional", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "init", "=", "init", "\n", "self", ".", "take_last", "=", "take_last", "\n", "self", ".", "batch_first", "=", "True", "# Please don't modify this", "\n", "\n", "self", ".", "init_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.module.LSTM4VarLenSeq.init_parameters": [[50, 72], ["range", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "math.sqrt", "range", "NotImplemented", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "init_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"orthogonal init yields generally good results than uniform init\"\"\"", "\n", "if", "self", ".", "init", "==", "'orthogonal'", ":", "\n", "            ", "gain", "=", "1", "# use default value", "\n", "for", "nth", "in", "range", "(", "self", ".", "num_layers", "*", "self", ".", "bidirectional", ")", ":", "\n", "# w_ih, (4 * hidden_size x input_size)", "\n", "                ", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "nth", "]", "[", "0", "]", ",", "gain", "=", "gain", ")", "\n", "# w_hh, (4 * hidden_size x hidden_size)", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "nth", "]", "[", "1", "]", ",", "gain", "=", "gain", ")", "\n", "# b_ih, (4 * hidden_size)", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "lstm", ".", "all_weights", "[", "nth", "]", "[", "2", "]", ")", "\n", "# b_hh, (4 * hidden_size)", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "lstm", ".", "all_weights", "[", "nth", "]", "[", "3", "]", ")", "\n", "", "", "elif", "self", ".", "init", "==", "'uniform'", ":", "\n", "            ", "k", "=", "math", ".", "sqrt", "(", "1", "/", "self", ".", "hidden_size", ")", "\n", "for", "nth", "in", "range", "(", "self", ".", "num_layers", "*", "self", ".", "bidirectional", ")", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "lstm", ".", "all_weights", "[", "nth", "]", "[", "0", "]", ",", "-", "k", ",", "k", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "lstm", ".", "all_weights", "[", "nth", "]", "[", "1", "]", ",", "-", "k", ",", "k", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "lstm", ".", "all_weights", "[", "nth", "]", "[", "2", "]", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "lstm", ".", "all_weights", "[", "nth", "]", "[", "3", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "(", "'Unsupported Initialization'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.module.LSTM4VarLenSeq.forward": [[73, 107], ["torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "module.LSTM4VarLenSeq.lstm", "hn.permute.permute.permute", "hn.permute.permute.permute", "hn.permute.permute.squeeze", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "cn.permute.permute.permute", "cn.permute.permute.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "x_len", ",", "hx", "=", "None", ")", ":", "\n", "# 1. Sort x and its corresponding length", "\n", "        ", "sorted_x_len", ",", "sorted_x_idx", "=", "torch", ".", "sort", "(", "x_len", ",", "descending", "=", "True", ")", "\n", "sorted_x", "=", "x", "[", "sorted_x_idx", "]", "\n", "# 2. Ready to unsort after LSTM forward pass", "\n", "# Note that PyTorch 0.4 has no argsort, but PyTorch 1.0 does.", "\n", "_", ",", "unsort_x_idx", "=", "torch", ".", "sort", "(", "sorted_x_idx", ",", "descending", "=", "False", ")", "\n", "\n", "# 3. Pack the sorted version of x and x_len, as required by the API.", "\n", "x_emb", "=", "pack_padded_sequence", "(", "sorted_x", ",", "sorted_x_len", ",", "\n", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "\n", "# 4. Forward lstm", "\n", "# output_packed.data.shape is (valid_seq, num_directions * hidden_dim).", "\n", "# See doc of torch.nn.LSTM for details.", "\n", "out_packed", ",", "(", "hn", ",", "cn", ")", "=", "self", ".", "lstm", "(", "x_emb", ")", "\n", "\n", "# 5. unsort h", "\n", "# (num_layers * num_directions, batch, hidden_size) -> (batch, ...)", "\n", "hn", "=", "hn", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "[", "unsort_x_idx", "]", "# swap the first two dim", "\n", "hn", "=", "hn", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# swap the first two again to recover", "\n", "if", "self", ".", "take_last", ":", "\n", "            ", "return", "hn", ".", "squeeze", "(", "0", ")", "\n", "", "else", ":", "\n", "# unpack: out", "\n", "# (batch, max_seq_len, num_directions * hidden_size)", "\n", "            ", "out", ",", "_", "=", "pad_packed_sequence", "(", "out_packed", ",", "\n", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "out", "=", "out", "[", "unsort_x_idx", "]", "\n", "# unpack: c", "\n", "# (num_layers * num_directions, batch, hidden_size) -> (batch, ...)", "\n", "cn", "=", "cn", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "[", "unsort_x_idx", "]", "# swap the first two dim", "\n", "cn", "=", "cn", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# swap the first two again to recover", "\n", "return", "out", ",", "(", "hn", ",", "cn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.metric.Metric.__init__": [[18, 21], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.metric.Metric.reset": [[22, 29], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Resets the metric to to it's initial state.\n        This is called at the start of each epoch.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.metric.Metric.update": [[30, 39], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "update", "(", "self", ",", "output", ")", ":", "\n", "        ", "\"\"\"\n        Updates the metric's state using the passed batch output.\n        This is called once for each batch.\n        Args:\n            output: the is the output from the engine's process function\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.metric.Metric.compute": [[40, 51], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "compute", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Computes the metric based on it's accumulated state.\n        This is called at the end of each epoch.\n        Returns:\n            Any: the actual quantity of interest\n        Raises:\n            NotComputableError: raised when the metric cannot be computed\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.metric.CategoricalAccuracy.__init__": [[61, 65], ["metric.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_num_examples", "=", "0", "\n", "self", ".", "_num_correct", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.metric.CategoricalAccuracy.reset": [[66, 69], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_num_examples", "=", "0", "\n", "self", ".", "_num_correct", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.metric.CategoricalAccuracy.update": [[70, 76], ["torch.max", "torch.eq().view", "torch.sum().item", "torch.eq", "torch.sum"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "output", ")", ":", "\n", "        ", "y_pred", ",", "y", "=", "output", "\n", "_", ",", "indices", "=", "torch", ".", "max", "(", "y_pred", ",", "1", ")", "\n", "correct", "=", "torch", ".", "eq", "(", "indices", ",", "y", ")", ".", "view", "(", "-", "1", ")", "\n", "self", ".", "_num_correct", "+=", "torch", ".", "sum", "(", "correct", ")", ".", "item", "(", ")", "\n", "self", ".", "_num_examples", "+=", "correct", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.metric.CategoricalAccuracy.compute": [[77, 82], ["ZeroDivisionError"], "methods", ["None"], ["", "def", "compute", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_num_examples", "==", "0", ":", "\n", "            ", "raise", "ZeroDivisionError", "(", "'CategoricalAccuracy must have at least'", "\n", "' one example before it can be computed'", ")", "\n", "", "return", "self", ".", "_num_correct", "/", "self", ".", "_num_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.metric.PRMetric.__init__": [[92, 101], ["metric.Metric.__init__", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["def", "__init__", "(", "self", ",", "num_class", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        precision = tp / tp + fp\n        recall = tp / tp + fn\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_class", ",", "self", ".", "num_class", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.metric.PRMetric.reset": [[102, 105], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_class", ",", "self", ".", "num_class", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.metric.PRMetric.update": [[106, 110], ["torch.max", "indices.cpu().numpy", "y.cpu().numpy", "indices.cpu", "y.cpu"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "output", ")", ":", "\n", "        ", "y_pred", ",", "y", "=", "output", "\n", "_", ",", "indices", "=", "torch", ".", "max", "(", "y_pred", ",", "1", ")", "\n", "self", ".", "confusion_matrix", "[", "indices", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.metric.PRMetric.compute": [[111, 119], ["numpy.diag", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "compute", "(", "self", ")", ":", "\n", "        ", "tp", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", "\n", "total_pred", "=", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "1", ")", "# (-1, 1)", "\n", "total_gold", "=", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "0", ")", "# (1, -1)", "\n", "# tn don't care", "\n", "p", "=", "tp", "/", "total_pred", "\n", "r", "=", "tp", "/", "total_gold", "\n", "return", "p", ",", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.personal_display_settings": [[14, 28], ["set_option", "set_option", "set_option", "set_option", "set_printoptions"], "function", ["None"], ["def", "personal_display_settings", "(", ")", ":", "\n", "    ", "\"\"\"\n    Pandas Doc\n    https://pandas.pydata.org/pandas-docs/stable/generated/pandas.set_option.html\n    NumPy Doc\n        -\n    \"\"\"", "\n", "from", "pandas", "import", "set_option", "\n", "set_option", "(", "'display.max_rows'", ",", "500", ")", "\n", "set_option", "(", "'display.max_columns'", ",", "500", ")", "\n", "set_option", "(", "'display.width'", ",", "2000", ")", "\n", "set_option", "(", "'display.max_colwidth'", ",", "1000", ")", "\n", "from", "numpy", "import", "set_printoptions", "\n", "set_printoptions", "(", "suppress", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.set_seed": [[30, 40], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "\"\"\"\n    Freeze every seed for reproducibility.\n    torch.cuda.manual_seed_all is useful when using random generation on GPUs.\n    e.g. torch.cuda.FloatTensor(100).uniform_()\n    \"\"\"", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.normalize": [[42, 60], ["unidecode.unidecode.strip().lower", "unidecode.unidecode", "unidecode.unidecode.strip"], "function", ["None"], ["", "def", "normalize", "(", "s", ")", ":", "\n", "    ", "\"\"\"\n    German and Frence have different vowels than English.\n    This utilization removes all the non-unicode characters.\n    Example:\n        \u0101\u00e1\u01ce\u00e0  -->  aaaa\n        \u014d\u00f3\u01d2\u00f2  -->  oooo\n        \u0113\u00e9\u011b\u00e8  -->  eeee\n        \u012b\u00ed\u01d0\u00ec  -->  iiii\n        \u016b\u00fa\u01d4\u00f9  -->  uuuu\n        \u01d6\u01d8\u01da\u01dc  -->  uuuu\n\n    :param s: unicode string\n    :return:  unicode string with regular English characters.\n    \"\"\"", "\n", "s", "=", "s", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "s", "=", "unidecode", "(", "s", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.snapshot": [[62, 76], ["os.makedirs", "os.path.join", "isinstance", "torch.save", "torch.save", "model.module.state_dict", "model.state_dict", "type"], "function", ["None"], ["", "def", "snapshot", "(", "model", ",", "epoch", ",", "save_path", ")", ":", "\n", "    ", "\"\"\"\n    Saving models w/ its params.\n        Get rid of the ONNX Protocal.\n    F-string feature new in Python 3.6+ is used.\n    \"\"\"", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "# timestamp = datetime.now().strftime('%m%d_%H%M')", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'{type(model).__name__}_{epoch}_epoch.pkl'", ")", "\n", "if", "isinstance", "(", "model", ",", "(", "DataParallel", ",", "DistributedDataParallel", ")", ")", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "return", "save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.save_checkpoint": [[78, 84], ["torch.save", "model.state_dict", "optimizer.state_dict"], "function", ["None"], ["", "def", "save_checkpoint", "(", "model", ",", "optimizer", ",", "epoch", ",", "path", ")", ":", "\n", "    ", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'models'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.load_checkpoint": [[86, 89], ["torch.load"], "function", ["None"], ["", "def", "load_checkpoint", "(", "path", ",", "map_location", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "map_location", ")", "\n", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.show_params": [[91, 97], ["model.named_parameters", "print", "param.size"], "function", ["None"], ["", "def", "show_params", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    Show models parameters for logging.\n    \"\"\"", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "print", "(", "'%-16s'", "%", "name", ",", "param", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.longest_substring": [[99, 109], ["difflib.SequenceMatcher", "difflib.SequenceMatcher.find_longest_match", "len", "len"], "function", ["None"], ["", "", "def", "longest_substring", "(", "str1", ",", "str2", ")", ":", "\n", "# initialize SequenceMatcher object with input string", "\n", "    ", "seqMatch", "=", "SequenceMatcher", "(", "None", ",", "str1", ",", "str2", ")", "\n", "\n", "# find match of longest sub-string", "\n", "# output will be like Match(a=0, b=0, size=5)", "\n", "match", "=", "seqMatch", ".", "find_longest_match", "(", "0", ",", "len", "(", "str1", ")", ",", "0", ",", "len", "(", "str2", ")", ")", "\n", "\n", "# print longest substring", "\n", "return", "str1", "[", "match", ".", "a", ":", "match", ".", "a", "+", "match", ".", "size", "]", "if", "match", ".", "size", "!=", "0", "else", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.pad": [[111, 119], ["len"], "function", ["None"], ["", "def", "pad", "(", "sent", ",", "max_len", ")", ":", "\n", "    ", "\"\"\"\n    syntax \"[0] * int\" only works properly for Python 3.5+\n    Note that in testing time, the length of a sentence\n    might exceed the pre-defined max_len (of training data).\n    \"\"\"", "\n", "length", "=", "len", "(", "sent", ")", "\n", "return", "(", "sent", "+", "[", "0", "]", "*", "(", "max_len", "-", "length", ")", ")", "[", ":", "max_len", "]", "if", "length", "<", "max_len", "else", "sent", "[", ":", "max_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.to_cuda": [[121, 131], ["all", "torch.device", "torch.is_tensor", "x.to"], "function", ["None"], ["", "def", "to_cuda", "(", "*", "args", ",", "device", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Move Tensors to CUDA. \n    If no device provided, default to the first card in CUDA_VISIBLE_DEVICES.\n    \"\"\"", "\n", "assert", "all", "(", "torch", ".", "is_tensor", "(", "t", ")", "for", "t", "in", "args", ")", ",", "'Only support for tensors, please check if any nn.Module exists.'", "\n", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "", "return", "[", "None", "if", "x", "is", "None", "else", "x", ".", "to", "(", "device", ")", "for", "x", "in", "args", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.get_code_version": [[133, 146], ["check_output", "check_output", "os.path.abspath().strip", "print", "os.path.abspath"], "function", ["None"], ["", "def", "get_code_version", "(", "short_sha", "=", "True", ")", ":", "\n", "    ", "from", "subprocess", "import", "check_output", ",", "STDOUT", ",", "CalledProcessError", "\n", "try", ":", "\n", "        ", "sha", "=", "check_output", "(", "'git rev-parse HEAD'", ",", "stderr", "=", "STDOUT", ",", "\n", "shell", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "\n", "if", "short_sha", ":", "\n", "            ", "sha", "=", "sha", "[", ":", "7", "]", "\n", "", "return", "sha", "\n", "", "except", "CalledProcessError", ":", "\n", "# There was an error - command exited with non-zero code", "\n", "        ", "pwd", "=", "check_output", "(", "'pwd'", ",", "stderr", "=", "STDOUT", ",", "shell", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "\n", "pwd", "=", "os", ".", "path", ".", "abspath", "(", "pwd", ")", ".", "strip", "(", ")", "\n", "print", "(", "f'Working dir {pwd} is not a git repo.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.cat_ragged_tensors": [[148, 171], ["left.size", "left.unbind", "right.unbind", "torch.zeros", "zip", "left.size", "right.size", "left.size", "right.size", "range", "l1.item.item", "l2.item.item", "torch.cat"], "function", ["None"], ["", "", "def", "cat_ragged_tensors", "(", "left", ",", "right", ")", ":", "\n", "    ", "assert", "left", ".", "size", "(", "0", ")", "==", "right", ".", "size", "(", "0", ")", "\n", "batch_size", "=", "left", ".", "size", "(", "0", ")", "\n", "max_len", "=", "left", ".", "size", "(", "1", ")", "+", "right", ".", "size", "(", "1", ")", "\n", "\n", "len_left", "=", "(", "left", "!=", "0", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "len_right", "=", "(", "right", "!=", "0", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "left_seq", "=", "left", ".", "unbind", "(", ")", "\n", "right_seq", "=", "right", ".", "unbind", "(", ")", "\n", "# handle zero padding", "\n", "output", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "max_len", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "left", ".", "device", ")", "\n", "for", "i", ",", "row_left", ",", "row_right", ",", "l1", ",", "l2", "in", "zip", "(", "range", "(", "batch_size", ")", ",", "\n", "left_seq", ",", "right_seq", ",", "\n", "len_left", ",", "len_right", ")", ":", "\n", "        ", "l1", "=", "l1", ".", "item", "(", ")", "\n", "l2", "=", "l2", ".", "item", "(", ")", "\n", "j", "=", "l1", "+", "l2", "\n", "# concatenate rows of ragged tensors", "\n", "row_cat", "=", "torch", ".", "cat", "(", "(", "row_left", "[", ":", "l1", "]", ",", "row_right", "[", ":", "l2", "]", ")", ")", "\n", "# copy to empty tensor", "\n", "output", "[", "i", ",", ":", "j", "]", "=", "row_cat", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.topk_accuracy": [[173, 182], ["inputs.topk", "inputs.size", "len", "len", "inputs.size", "labels.size", "result.size"], "function", ["None"], ["", "def", "topk_accuracy", "(", "inputs", ",", "labels", ",", "k", "=", "1", ",", "largest", "=", "True", ")", ":", "\n", "    ", "assert", "len", "(", "inputs", ".", "size", "(", ")", ")", "==", "2", "\n", "assert", "len", "(", "labels", ".", "size", "(", ")", ")", "==", "2", "\n", "_", ",", "indices", "=", "inputs", ".", "topk", "(", "k", "=", "k", ",", "largest", "=", "largest", ")", "\n", "result", "=", "indices", "-", "labels", "# boardcast", "\n", "nonzero_count", "=", "(", "result", "!=", "0", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "num_correct", "=", "(", "nonzero_count", "!=", "result", ".", "size", "(", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "num_example", "=", "inputs", ".", "size", "(", "0", ")", "\n", "return", "num_correct", ",", "num_example", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.utils.get_total_trainable_params": [[184, 186], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "get_total_trainable_params", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.vocab.DefaultLookupDict.__init__": [[19, 22], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__"], ["    ", "def", "__init__", "(", "self", ",", "default", ")", ":", "\n", "        ", "super", "(", "DefaultLookupDict", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_default", "=", "default", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.vocab.DefaultLookupDict.__getitem__": [[23, 25], ["vocab.DefaultLookupDict.get"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "get", "(", "item", ",", "self", ".", "_default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.vocab.Vocabulary.__init__": [[43, 88], ["max", "vocab.DefaultLookupDict", "vocab.Vocabulary.token2id.update", "sorted", "sorted.sort", "isinstance", "len", "len", "counter.items", "set", "len", "vocab.Vocabulary.id2token.append", "enumerate", "len", "len"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.metric.PRMetric.update"], ["def", "__init__", "(", "self", ",", "counter", ",", "max_size", "=", "None", ",", "min_freq", "=", "1", ",", "specials", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Create a Vocabulary given Counter.\n        Args:\n            counter: collections.Counter object holding the frequencies of\n                each value found in the data.\n            max_size: The maximum size of the vocabulary, or None for no\n                maximum. Default: None.\n            min_freq: The minimum frequency needed to include a token in the\n                vocabulary. Values less than 1 will be set to 1. Default: 1.\n            specials: The list of special tokens except ['<pad>', '<unk>'].\n                Possible choices: [CLS] [MASK] [SEP] in BERT or <bos> <eos>\n                in Machine Translation.\n        \"\"\"", "\n", "min_freq", "=", "max", "(", "min_freq", ",", "1", ")", "# must be positive", "\n", "\n", "if", "specials", "is", "None", ":", "\n", "            ", "self", ".", "specials", "=", "[", "PAD_TOKEN", ",", "UNK_TOKEN", "]", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "specials", ",", "list", ")", ",", "\"'specials' is of type list\"", "\n", "self", ".", "specials", "=", "[", "PAD_TOKEN", ",", "UNK_TOKEN", "]", "+", "specials", "\n", "\n", "", "assert", "len", "(", "set", "(", "self", ".", "specials", ")", ")", "==", "len", "(", "self", ".", "specials", ")", ",", "\"specials can not contain duplicates.\"", "\n", "\n", "if", "max_size", "is", "not", "None", ":", "\n", "            ", "max_size", "=", "len", "(", "self", ".", "specials", ")", "+", "max_size", "\n", "\n", "", "self", ".", "id2token", "=", "self", ".", "specials", "[", ":", "]", "\n", "self", ".", "token2id", "=", "DefaultLookupDict", "(", "UNK_IDX", ")", "\n", "self", ".", "token2id", ".", "update", "(", "{", "tok", ":", "i", "for", "i", ",", "tok", "in", "enumerate", "(", "self", ".", "id2token", ")", "}", ")", "\n", "\n", "# sort by frequency, then alphabetically", "\n", "token_freqs", "=", "sorted", "(", "counter", ".", "items", "(", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "0", "]", ")", "\n", "token_freqs", ".", "sort", "(", "key", "=", "lambda", "tup", ":", "tup", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "for", "token", ",", "freq", "in", "token_freqs", ":", "\n", "            ", "if", "freq", "<", "min_freq", "or", "len", "(", "self", ".", "id2token", ")", "==", "max_size", ":", "\n", "                ", "break", "\n", "", "if", "token", "not", "in", "self", ".", "specials", ":", "\n", "                ", "self", ".", "id2token", ".", "append", "(", "token", ")", "\n", "self", ".", "token2id", "[", "token", "]", "=", "len", "(", "self", ".", "id2token", ")", "-", "1", "\n", "\n", "# TODO", "\n", "", "", "self", ".", "embedding", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.vocab.Vocabulary.__len__": [[89, 91], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "id2token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.vocab.Vocabulary.__repr__": [[92, 94], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'Vocab(size={}, specials=\"{}\")'", ".", "format", "(", "len", "(", "self", ")", ",", "self", ".", "specials", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.vocab.Vocabulary.__getitem__": [[95, 113], ["isinstance"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"Looks up indices of text tokens according to the vocabulary.\n        If `unknown_token` of the vocabulary is None, looking up unknown tokens\n        results in KeyError.\n        Parameters\n        ----------\n        tokens : str or list of strs\n            A source token or tokens to be converted.\n        Returns\n        -------\n        int or list of ints\n            A token index or a list of token indices according to the vocabulary.\n        \"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "tokens", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "return", "self", ".", "token2id", "[", "tokens", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "token2id", "[", "token", "]", "for", "token", "in", "tokens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.vocab.Vocabulary.__call__": [[114, 128], ["None"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"Looks up indices of text tokens according to the vocabulary.\n        Parameters\n        ----------\n        tokens : str or list of strs\n            A source token or tokens to be converted.\n        Returns\n        -------\n        int or list of ints\n            A token index or a list of token indices according to the\n            vocabulary.\n        \"\"\"", "\n", "\n", "return", "self", "[", "tokens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.vocab.Vocabulary.from_json": [[129, 132], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_json", "(", "cls", ",", "json_str", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.vocab.Vocabulary.to_json": [[133, 135], ["None"], "methods", ["None"], ["", "def", "to_json", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.torchlight.vocab.Vocabulary.set_embedding": [[136, 138], ["None"], "methods", ["None"], ["", "def", "set_embedding", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA.__init__": [[20, 63], ["torch.Dataset.__init__", "preprocess.invert_dict", "preprocess.invert_dict", "open", "json.load", "base.VisualQA._map_kg", "base.VisualQA._map_bert", "open", "json.load", "open", "json.load", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.invert_dict", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.invert_dict", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._map_kg", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._map_bert"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "vector", ")", ":", "\n", "        ", "super", "(", "VisualQA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# vocab", "\n", "self", ".", "vector", "=", "vector", "\n", "self", ".", "args", "=", "args", "\n", "# process question", "\n", "# self.args.question_vocab_path = osp.join(project_root, 'data', 'question.vocab.json') # a joint question vocab across all dataset", "\n", "with", "open", "(", "self", ".", "args", ".", "question_vocab_path", ",", "'r'", ")", "as", "fd", ":", "\n", "            ", "question_vocab", "=", "json", ".", "load", "(", "fd", ")", "\n", "", "self", ".", "token_to_index", "=", "question_vocab", "[", "'question'", "]", "\n", "self", ".", "_max_question_length", "=", "question_vocab", "[", "'max_question_length'", "]", "\n", "self", ".", "image_features_path", "=", "args", ".", "FVQA", ".", "feature_path", "\n", "self", ".", "index_to_token", "=", "invert_dict", "(", "self", ".", "token_to_index", ")", "\n", "\n", "answer_vocab_path", "=", "self", ".", "args", ".", "FVQA", ".", "answer_vocab_path", "\n", "fact_vocab_path", "=", "self", ".", "args", ".", "FVQA", ".", "fact_vocab_path", "\n", "relation_vocab_path", "=", "self", ".", "args", ".", "FVQA", ".", "relation_vocab_path", "\n", "\n", "if", "self", ".", "args", ".", "fact_map", ":", "\n", "            ", "with", "open", "(", "fact_vocab_path", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "answer_vocab", "=", "json", ".", "load", "(", "fd", ")", "\n", "", "", "elif", "self", ".", "args", ".", "relation_map", ":", "\n", "            ", "with", "open", "(", "relation_vocab_path", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "answer_vocab", "=", "json", ".", "load", "(", "fd", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "answer_vocab_path", ",", "'r'", ")", "as", "fd", ":", "\n", "                ", "answer_vocab", "=", "json", ".", "load", "(", "fd", ")", "\n", "", "", "self", ".", "answer_to_index", "=", "answer_vocab", "[", "'answer'", "]", "\n", "self", ".", "index_to_answer", "=", "invert_dict", "(", "self", ".", "answer_to_index", ")", "\n", "\n", "self", ".", "cached_answers_g2v", "=", "{", "}", "# \u53ea\u7f16\u7801KGE", "\n", "self", ".", "cached_answers_w2v", "=", "{", "}", "# \u53ea\u7f16\u7801\u5e8f\u5217", "\n", "self", ".", "cached_answers_gae", "=", "{", "}", "\n", "self", ".", "cached_answers_bert", "=", "{", "}", "\n", "self", ".", "unk_vector", "=", "self", ".", "vector", "[", "'UNK'", "]", "\n", "if", "\"KG\"", "in", "self", ".", "args", ".", "method_choice", ":", "\n", "            ", "self", ".", "_map_kg", "(", ")", "\n", "", "if", "\"GAE\"", "in", "self", ".", "args", ".", "method_choice", ":", "\n", "# self._map_gae()", "\n", "            ", "self", ".", "_map_bert", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA.max_question_length": [[64, 67], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "max_question_length", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_max_question_length", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA.max_answer_length": [[68, 74], ["hasattr", "hasattr", "max", "map"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_answer_length", "(", "self", ")", ":", "\n", "        ", "assert", "hasattr", "(", "self", ",", "answers", ")", ",", "'Dataloader must have access to answers'", "\n", "if", "not", "hasattr", "(", "self", ",", "'_max_answer_length'", ")", ":", "\n", "            ", "self", ".", "_max_answer_length", "=", "max", "(", "map", "(", "len", ",", "self", ".", "answers", ")", ")", "\n", "", "return", "self", ".", "_max_answer_length", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA.num_tokens": [[75, 78], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_tokens", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "token_to_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA.num_answers": [[79, 82], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_answers", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "answer_to_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA.__len__": [[83, 85], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "questions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._load_image": [[88, 105], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "dataset[].astype", "spatials[].astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "_load_image", "(", "self", ",", "image_id", ")", ":", "\n", "        ", "\"\"\" Load an image \"\"\"", "\n", "# pdb.set_trace()", "\n", "index", "=", "self", ".", "image_id_to_index", "[", "image_id", "]", "\n", "spa", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", "]", ")", "# init", "\n", "\n", "if", "self", ".", "args", ".", "fusion_model", "==", "'UD'", "or", "self", ".", "args", ".", "fusion_model", "==", "'BAN'", ":", "\n", "            ", "spatials", "=", "self", ".", "features_file", "[", "'spatial_features'", "]", "\n", "dataset", "=", "self", ".", "features_file", "[", "'image_features'", "]", "# \u76f4\u63a5\u8bfb\u53d6\u7279\u5f81\u6587\u4ef6", "\n", "spa", "=", "spatials", "[", "index", "]", ".", "astype", "(", "'float32'", ")", "\n", "spa", "=", "torch", ".", "from_numpy", "(", "spa", ")", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "self", ".", "features_file", "[", "'features'", "]", "# \u76f4\u63a5\u8bfb\u53d6\u7279\u5f81\u6587\u4ef6", "\n", "\n", "", "img", "=", "dataset", "[", "index", "]", ".", "astype", "(", "'float32'", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "img", ")", ",", "spa", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._create_image_id_to_index": [[106, 126], ["hasattr", "h5py.File", "cPickle.load", "open", "h5py.File", "enumerate"], "methods", ["None"], ["", "def", "_create_image_id_to_index", "(", "self", ")", ":", "\n", "        ", "\"\"\" Create a mapping from a COCO image id into the corresponding index into the h5 file \"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "'features_file'", ")", ":", "\n", "# Loading the h5 file has to be done here and not in __init__ because when the DataLoader", "\n", "# forks for multiple works, every child would use the same file object and fail", "\n", "# Having multiple readers using different file objects is fine though, so we just init in here.", "\n", "            ", "self", ".", "features_file", "=", "h5py", ".", "File", "(", "self", ".", "image_features_path", ",", "'r'", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "fusion_model", "==", "'UD'", "or", "self", ".", "args", ".", "fusion_model", "==", "'BAN'", ":", "\n", "            ", "import", "_pickle", "as", "cPickle", "\n", "image_id_to_index", "=", "cPickle", ".", "load", "(", "open", "(", "self", ".", "args", ".", "FVQA", ".", "img_id2idx", ",", "\"rb\"", ")", ")", "\n", "# pdb.set_trace()", "\n", "self", ".", "s_dim", "=", "self", ".", "features_file", "[", "'spatial_features'", "]", ".", "shape", "[", "2", "]", "\n", "self", ".", "v_dim", "=", "self", ".", "features_file", "[", "'image_features'", "]", ".", "shape", "[", "2", "]", "# \u76f4\u63a5\u8bfb\u53d6\u7279\u5f81\u6587\u4ef6", "\n", "\n", "", "else", ":", "\n", "            ", "with", "h5py", ".", "File", "(", "self", ".", "image_features_path", ",", "'r'", ")", "as", "features_file", ":", "\n", "                ", "image_ids", "=", "features_file", "[", "'ids'", "]", "[", "(", ")", "]", "\n", "", "image_id_to_index", "=", "{", "id", ":", "i", "for", "i", ",", "id", "in", "enumerate", "(", "image_ids", ")", "}", "\n", "", "return", "image_id_to_index", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_question": [[127, 134], ["torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "enumerate", "base.VisualQA.token_to_index.get", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "_encode_question", "(", "self", ",", "question", ")", ":", "\n", "        ", "\"\"\" Turn a question into a vector of indices and a question length \"\"\"", "\n", "vec", "=", "torch", ".", "zeros", "(", "self", ".", "max_question_length", ")", ".", "long", "(", ")", "\n", "for", "i", ",", "token", "in", "enumerate", "(", "question", ")", ":", "\n", "            ", "index", "=", "self", ".", "token_to_index", ".", "get", "(", "token", ",", "0", ")", "\n", "vec", "[", "i", "]", "=", "index", "\n", "", "return", "vec", ",", "len", "(", "question", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._map_kg": [[135, 173], ["numpy.load", "numpy.load", "numpy.vstack", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "len", "open", "open", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "f.readline", "int", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "f.readline", "re.split", "re.split", "int"], "methods", ["None"], ["", "def", "_map_kg", "(", "self", ")", ":", "\n", "        ", "if", "\"KG\"", "not", "in", "self", ".", "args", ".", "method_choice", ":", "\n", "            ", "return", "\n", "# print(\"using kg embedding\")", "\n", "", "kg_path", "=", "self", ".", "args", ".", "FVQA", ".", "kg_path", "\n", "entity_path", "=", "self", ".", "args", ".", "FVQA", ".", "entity_path", "# \u6765\u6e90\u4e2d\u7684\u8bcd\u5bf9\u5e94\u7684\u5411\u91cf", "\n", "relation_path", "=", "self", ".", "args", ".", "FVQA", ".", "relation_path", "# \u540c\u4e0a", "\n", "relation2id_path", "=", "self", ".", "args", ".", "FVQA", ".", "relation2id_path", "# \u641c\u5bfb\u5019\u9009\u7b54\u6848\u7684\u6765\u6e90", "\n", "entity2id_path", "=", "self", ".", "args", ".", "FVQA", ".", "entity2id_path", "# \u641c\u5bfb\u5019\u9009\u7b54\u6848\u7684\u6765\u6e90", "\n", "\n", "a", "=", "np", ".", "load", "(", "entity_path", ")", "\n", "b", "=", "np", ".", "load", "(", "relation_path", ")", "\n", "self", ".", "map_kg", "=", "np", ".", "vstack", "(", "(", "a", ",", "b", ")", ")", "\n", "\n", "# \u968f\u673a\u5f97\u5230\u4e00\u4e2a\u77e9\u9635\uff0c\u4ee5\u6a21\u62df\u968f\u673a\u7684\u60c5\u51b5", "\n", "# self.map_ran=torch.zeros(self.map_kg.shape)", "\n", "# self.map_ran = torch.rand(self.map_kg.shape)", "\n", "# self.map_ran = torch.randn(self.map_kg.shape)", "\n", "# self.map_kg = self.map_ran", "\n", "\n", "self", ".", "map_kg", "=", "torch", ".", "Tensor", "(", "self", ".", "map_kg", ")", ".", "view", "(", "-", "1", ",", "300", ")", "\n", "\n", "self", ".", "stoi_kg", "=", "{", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "entity2id_path", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "while", "1", ":", "\n", "                ", "line", "=", "f", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                    ", "break", "\n", "", "line", "=", "re", ".", "split", "(", "'\\t|\\n'", ",", "line", ")", "[", ":", "2", "]", "\n", "self", ".", "stoi_kg", "[", "line", "[", "0", "]", "]", "=", "int", "(", "line", "[", "1", "]", ")", "\n", "", "", "sz", "=", "len", "(", "self", ".", "stoi_kg", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "relation2id_path", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "while", "1", ":", "\n", "                ", "line", "=", "f", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                    ", "break", "\n", "", "line", "=", "re", ".", "split", "(", "'\\t|\\n'", ",", "line", ")", "[", ":", "2", "]", "\n", "self", ".", "stoi_kg", "[", "line", "[", "0", "]", "]", "=", "int", "(", "line", "[", "1", "]", ")", "+", "sz", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._map_gae": [[174, 196], ["os.join", "os.join", "print", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "os.join", "os.join", "enumerate", "open", "open", "json.load", "pickle.load", "pickle.load", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.array", "str", "str"], "methods", ["None"], ["", "", "", "def", "_map_gae", "(", "self", ")", ":", "\n", "        ", "if", "\"GAE\"", "not", "in", "self", ".", "args", ".", "method_choice", ":", "\n", "            ", "return", "\n", "# print(\"using kg embedding\")", "\n", "\n", "", "_gae_path", "=", "self", ".", "args", ".", "FVQA", ".", "gae_path", "\n", "gae_path", "=", "osp", ".", "join", "(", "_gae_path", ",", "str", "(", "self", ".", "args", ".", "FVQA", ".", "gae_node_num", ")", "+", "\"_init_\"", "+", "self", ".", "args", ".", "FVQA", ".", "gae_init", "+", "\".pkl\"", ")", "\n", "print", "(", "\"gae file:\"", ",", "gae_path", ")", "\n", "with", "open", "(", "gae_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "                ", "features", "=", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "else", ":", "\n", "                ", "features", "=", "pkl", ".", "load", "(", "f", ")", "\n", "# \u4e0b\u6807\u5230gae\u5411\u91cf\u7684\u6620\u5c04", "\n", "", "", "self", ".", "map_gae", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ")", ")", ".", "view", "(", "-", "1", ",", "300", ")", "\n", "vertices_f", "=", "osp", ".", "join", "(", "_gae_path", ",", "\"g_nodes_\"", "+", "str", "(", "self", ".", "args", ".", "FVQA", ".", "gae_node_num", ")", "+", "\".json\"", ")", "\n", "self", ".", "stoi_gae", "=", "{", "}", "\n", "with", "open", "(", "vertices_f", ")", "as", "fp", ":", "\n", "            ", "vertices_list", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "for", "i", ",", "vertex", "in", "enumerate", "(", "vertices_list", ")", ":", "\n", "            ", "self", ".", "stoi_gae", "[", "vertex", "]", "=", "i", "\n", "# print(\"test map gae\")", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._map_bert": [[199, 251], ["os.join", "os.join", "os.exists", "os.exists", "os.join", "os.join", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "base.VisualQA.answer_to_index.items", "torch.save", "torch.save", "torch.save", "torch.save", "torch.load", "torch.load", "torch.load", "torch.load", "open", "TypeError", "os.join", "os.join", "f.readline", "re.split", "all.append", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "TypeError", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "all.index", "len", "len"], "methods", ["None"], ["", "", "def", "_map_bert", "(", "self", ")", ":", "\n", "        ", "if", "\"GAE\"", "not", "in", "self", ".", "args", ".", "method_choice", ":", "\n", "            ", "return", "\n", "# print(\"using kg embedding\")", "\n", "\n", "", "cache_path", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "FVQA", ".", "bert_path", ",", "\"map_bert.pt\"", ")", "\n", "if", "not", "osp", ".", "exists", "(", "cache_path", ")", ":", "\n", "            ", "_bert_path", "=", "self", ".", "args", ".", "FVQA", ".", "bert_path", "\n", "\n", "bert_path", "=", "osp", ".", "join", "(", "_bert_path", ",", "\"conceptnet_bert_embeddings.pt\"", ")", "\n", "print", "(", "\"bert file:\"", ",", "bert_path", ")", "\n", "_cache", "=", "torch", ".", "load", "(", "bert_path", ")", "# torch.Size([78334, 1024])", "\n", "\n", "self", ".", "map_bert", "=", "torch", ".", "FloatTensor", "(", "self", ".", "args", ".", "FVQA", ".", "max_ans", ",", "self", ".", "args", ".", "bert_dim", ")", "\n", "# \u4e0b\u6807\u5230gae\u5411\u91cf\u7684\u6620\u5c04", "\n", "all", "=", "[", "]", "\n", "\n", "with", "open", "(", "osp", ".", "join", "(", "_bert_path", ",", "\"cn_node_names_for_embeddings.txt\"", ")", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "                ", "while", "1", ":", "\n", "                    ", "line", "=", "f", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                        ", "break", "\n", "", "line", "=", "re", ".", "split", "(", "'\\n'", ",", "line", ")", "\n", "all", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "\n", "", "", "self", ".", "stoi_bert", "=", "{", "}", "# answer to vector\u6587\u4ef6\u7684 id \u4e0b\u6807", "\n", "for", "key", ",", "value", "in", "self", ".", "answer_to_index", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "stoi_bert", "[", "key", "]", "=", "value", "\n", "if", "key", "in", "all", ":", "\n", "                    ", "self", ".", "map_bert", "[", "value", "]", "=", "_cache", "[", "all", ".", "index", "(", "key", ")", ",", ":", "]", "\n", "", "else", ":", "\n", "                    ", "cnt", "=", "0.0", "\n", "tmp", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "args", ".", "bert_dim", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "all", ")", ":", "\n", "                        ", "if", "len", "(", "j", ")", ">=", "4", "and", "len", "(", "key", ")", ">=", "3", "and", "(", "key", "in", "j", "or", "j", "in", "key", ")", ":", "\n", "# pdb.set_trace()", "\n", "                            ", "tmp", "+=", "_cache", "[", "i", ",", ":", "]", "# \u53d6\u5e73\u5747", "\n", "cnt", "+=", "1", "\n", "", "if", "cnt", ">=", "3", ":", "\n", "                            ", "break", "\n", "", "", "if", "cnt", "==", "0", ":", "\n", "                        ", "raise", "TypeError", "(", "'cnt can not = 0 !!!'", ")", "\n", "", "self", ".", "map_bert", "[", "value", "]", "=", "tmp", "/", "(", "cnt", "+", "1e-12", ")", "\n", "\n", "", "", "if", "(", "self", ".", "map_bert", "!=", "self", ".", "map_bert", ")", ".", "any", "(", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'cnt can not = 0 !!!'", ")", "\n", "# pdb.set_trace()", "\n", "", "torch", ".", "save", "(", "{", "'map_bert'", ":", "self", ".", "map_bert", ",", "'stoi_bert'", ":", "self", ".", "stoi_bert", "}", ",", "cache_path", ")", "\n", "", "else", ":", "\n", "            ", "_cache", "=", "torch", ".", "load", "(", "cache_path", ")", "\n", "self", ".", "map_bert", "=", "_cache", "[", "'map_bert'", "]", "# \u8bcd\u5411\u91cf\u5217\u8868 + \u957f\u5ea6", "\n", "self", ".", "stoi_bert", "=", "_cache", "[", "'stoi_bert'", "]", "# \u7b54\u6848\u4e0b\u6807", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._get_answer_vectors": [[255, 265], ["base.VisualQA._encode_answer_vector", "base.VisualQA._encode_answer_vector", "base.VisualQA._encode_answer_vector"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_answer_vector", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_answer_vector", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_answer_vector"], ["", "", "def", "_get_answer_vectors", "(", "self", ",", "ways", ",", "answer_indices", ")", ":", "\n", "        ", "dim", "=", "self", ".", "vector", ".", "dim", "\n", "if", "ways", "==", "'GAE'", ":", "\n", "            ", "dim", "=", "self", ".", "args", ".", "bert_dim", "\n", "return", "self", ".", "_encode_answer_vector", "(", "self", ".", "_encode_answer_vector_bert", ",", "dim", ",", "answer_indices", ")", "\n", "# return self._encode_answer_vector(self._encode_answer_vector_gae, dim, answer_indices)", "\n", "", "elif", "ways", "==", "'KG'", ":", "\n", "            ", "return", "self", ".", "_encode_answer_vector", "(", "self", ".", "_encode_answer_vector_g2v", ",", "dim", ",", "answer_indices", ")", "\n", "", "elif", "ways", "==", "'W2V'", ":", "\n", "            ", "return", "self", ".", "_encode_answer_vector", "(", "self", ".", "_encode_answer_vector_w2v", ",", "dim", ",", "answer_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_answer_vector": [[266, 288], ["isinstance", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "len", "len", "enumerate", "len", "encode_model", "encode_model", "encode_model", "type", "answer_id.item"], "methods", ["None"], ["", "", "def", "_encode_answer_vector", "(", "self", ",", "encode_model", ",", "dim", ",", "answer_indices", ")", ":", "\n", "        ", "if", "isinstance", "(", "answer_indices", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "N", ",", "C", "=", "len", "(", "answer_indices", ")", ",", "len", "(", "answer_indices", "[", "0", "]", ")", "\n", "vector", "=", "torch", ".", "zeros", "(", "N", ",", "C", ",", "dim", ")", "\n", "for", "i", ",", "answer_ids", "in", "enumerate", "(", "answer_indices", ")", ":", "\n", "                ", "for", "j", ",", "answer_id", "in", "enumerate", "(", "answer_ids", ")", ":", "\n", "                    ", "if", "answer_id", "!=", "-", "1", ":", "\n", "                        ", "vector", "[", "i", ",", "j", ",", ":", "]", "=", "encode_model", "(", "self", ".", "index_to_answer", "[", "answer_id", "]", ")", "\n", "", "else", ":", "\n", "                        ", "vector", "[", "i", ",", "j", ",", ":", "]", "=", "self", ".", "unk_vector", "\n", "", "", "", "", "else", ":", "\n", "            ", "vector", "=", "torch", ".", "zeros", "(", "len", "(", "answer_indices", ")", ",", "dim", ")", "\n", "for", "idx", ",", "answer_id", "in", "enumerate", "(", "answer_indices", ")", ":", "\n", "\n", "                ", "if", "answer_id", "!=", "-", "1", ":", "\n", "                    ", "if", "type", "(", "answer_id", ")", ".", "__name__", "==", "'int'", ":", "\n", "                        ", "vector", "[", "idx", ",", ":", "]", "=", "encode_model", "(", "self", ".", "index_to_answer", "[", "answer_id", "]", ")", "\n", "", "else", ":", "\n", "                        ", "vector", "[", "idx", ",", ":", "]", "=", "encode_model", "(", "self", ".", "index_to_answer", "[", "answer_id", ".", "item", "(", ")", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "vector", "[", "idx", ",", ":", "]", "=", "self", ".", "unk_vector", "\n", "", "", "", "return", "vector", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._get_answer_sequences_w2v": [[289, 333], ["isinstance", "enumerate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "enumerate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "len", "len", "enumerate", "seqs.append", "enumerate", "len", "len", "len", "len", "lengths.append", "lengths.append", "seqs.append", "len", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "_seqs.append", "_seqs.append", "len", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "seqs.append", "seqs.append", "base.VisualQA._encode_answer_sequence_w2v", "type", "base.VisualQA._encode_answer_sequence_w2v", "base.VisualQA._encode_answer_sequence_w2v", "len", "len", "answer_id.item"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_answer_sequence_w2v", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_answer_sequence_w2v", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_answer_sequence_w2v"], ["", "def", "_get_answer_sequences_w2v", "(", "self", ",", "answer_indices", ")", ":", "\n", "        ", "seqs", ",", "lengths", "=", "[", "]", ",", "[", "]", "\n", "max_seq_length", "=", "0", "\n", "if", "isinstance", "(", "answer_indices", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "N", ",", "C", "=", "len", "(", "answer_indices", ")", ",", "len", "(", "answer_indices", "[", "0", "]", ")", "\n", "for", "i", ",", "answer_ids", "in", "enumerate", "(", "answer_indices", ")", ":", "\n", "                ", "_seqs", "=", "[", "]", "\n", "for", "j", ",", "answer_id", "in", "enumerate", "(", "answer_ids", ")", ":", "\n", "                    ", "if", "answer_id", "!=", "-", "1", ":", "\n", "                        ", "_seqs", ".", "append", "(", "self", ".", "_encode_answer_sequence_w2v", "(", "self", ".", "index_to_answer", "[", "answer_id", "]", ")", ")", "\n", "", "else", ":", "\n", "                        ", "_seqs", ".", "append", "(", "[", "self", ".", "unk_vector", "]", ")", "\n", "", "if", "max_seq_length", "<", "len", "(", "_seqs", "[", "-", "1", "]", ")", ":", "\n", "                        ", "max_seq_length", "=", "len", "(", "_seqs", "[", "-", "1", "]", ")", "# determing max length", "\n", "", "", "seqs", ".", "append", "(", "_seqs", ")", "\n", "\n", "", "vector", "=", "torch", ".", "zeros", "(", "N", ",", "C", ",", "max_seq_length", ",", "self", ".", "vector", ".", "dim", ")", "\n", "for", "i", ",", "_seqs", "in", "enumerate", "(", "seqs", ")", ":", "\n", "                ", "for", "j", ",", "seq", "in", "enumerate", "(", "_seqs", ")", ":", "\n", "                    ", "if", "len", "(", "seq", ")", "!=", "0", ":", "\n", "                        ", "vector", "[", "i", ",", "j", ",", ":", "len", "(", "seq", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "seq", ",", "dim", "=", "0", ")", "\n", "", "lengths", ".", "append", "(", "len", "(", "seq", ")", ")", "\n", "", "", "assert", "len", "(", "lengths", ")", "==", "N", "*", "C", ",", "'Wrong lengths - length: {} vs N: {}, C: {} vs seqs: {}'", ".", "format", "(", "len", "(", "lengths", ")", ",", "N", ",", "C", ",", "len", "(", "seqs", ")", ")", "\n", "", "else", ":", "\n", "            ", "for", "idx", ",", "answer_id", "in", "enumerate", "(", "answer_indices", ")", ":", "\n", "                ", "if", "answer_id", "!=", "-", "1", ":", "\n", "                    ", "if", "type", "(", "answer_id", ")", ".", "__name__", "==", "'int'", ":", "\n", "                        ", "seqs", ".", "append", "(", "self", ".", "_encode_answer_sequence_w2v", "(", "self", ".", "index_to_answer", "[", "answer_id", "]", ")", ")", "\n", "", "else", ":", "\n", "                        ", "seqs", ".", "append", "(", "self", ".", "_encode_answer_sequence_w2v", "(", "self", ".", "index_to_answer", "[", "answer_id", ".", "item", "(", ")", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "seqs", ".", "append", "(", "[", "self", ".", "unk_vector", "]", ")", "\n", "\n", "", "if", "max_seq_length", "<", "len", "(", "seqs", "[", "-", "1", "]", ")", ":", "\n", "                    ", "max_seq_length", "=", "len", "(", "seqs", "[", "-", "1", "]", ")", "# determing max length", "\n", "\n", "", "", "vector", "=", "torch", ".", "zeros", "(", "len", "(", "answer_indices", ")", ",", "max_seq_length", ",", "self", ".", "vector", ".", "dim", ")", "\n", "for", "idx", ",", "seq", "in", "enumerate", "(", "seqs", ")", ":", "\n", "                ", "if", "len", "(", "seq", ")", "!=", "0", ":", "\n", "                    ", "vector", "[", "idx", ",", ":", "len", "(", "seq", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "seq", ",", "dim", "=", "0", ")", "\n", "", "lengths", ".", "append", "(", "len", "(", "seq", ")", ")", "\n", "\n", "", "", "return", "vector", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_answer_vector_bert": [[334, 343], ["isinstance", "base.VisualQA.cached_answers_bert.get", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "base.VisualQA.stoi_bert.get"], "methods", ["None"], ["", "def", "_encode_answer_vector_bert", "(", "self", ",", "answer", ")", ":", "# \u5411\u91cf\u6c42\u5e73\u5747", "\n", "\n", "        ", "if", "isinstance", "(", "self", ".", "cached_answers_bert", ".", "get", "(", "answer", ",", "-", "1", ")", ",", "int", ")", ":", "\n", "            ", "answer_vec", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "args", ".", "bert_dim", ")", "\n", "idk", "=", "self", ".", "stoi_bert", ".", "get", "(", "answer", ",", "-", "1", ")", "\n", "if", "idk", ">=", "0", ":", "\n", "                ", "answer_vec", "=", "self", ".", "map_bert", "[", "idk", "]", "\n", "", "self", ".", "cached_answers_bert", "[", "answer", "]", "=", "answer_vec", "\n", "", "return", "self", ".", "cached_answers_bert", "[", "answer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_answer_vector_gae": [[344, 352], ["isinstance", "base.VisualQA.cached_answers_gae.get", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "base.VisualQA.stoi_gae.get", "base.VisualQA.map_gae[].reshape"], "methods", ["None"], ["", "def", "_encode_answer_vector_gae", "(", "self", ",", "answer", ")", ":", "# \u5411\u91cf\u6c42\u5e73\u5747", "\n", "        ", "if", "isinstance", "(", "self", ".", "cached_answers_gae", ".", "get", "(", "answer", ",", "-", "1", ")", ",", "int", ")", ":", "\n", "            ", "answer_vec", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "vector", ".", "dim", ")", "\n", "idk", "=", "self", ".", "stoi_gae", ".", "get", "(", "answer", ",", "-", "1", ")", "\n", "if", "idk", ">=", "0", ":", "\n", "                ", "answer_vec", "=", "self", ".", "map_gae", "[", "idk", "]", ".", "reshape", "(", "1", ",", "300", ")", "\n", "", "self", ".", "cached_answers_gae", "[", "answer", "]", "=", "answer_vec", "\n", "", "return", "self", ".", "cached_answers_gae", "[", "answer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_answer_vector_g2v": [[353, 362], ["isinstance", "base.VisualQA.cached_answers_g2v.get", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "base.VisualQA.stoi_kg.get", "base.VisualQA.map_kg[].reshape"], "methods", ["None"], ["", "def", "_encode_answer_vector_g2v", "(", "self", ",", "answer", ")", ":", "# \u5411\u91cf\u6c42\u5e73\u5747", "\n", "        ", "if", "isinstance", "(", "self", ".", "cached_answers_g2v", ".", "get", "(", "answer", ",", "-", "1", ")", ",", "int", ")", ":", "\n", "            ", "answer_vec", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "vector", ".", "dim", ")", "\n", "\n", "idk", "=", "self", ".", "stoi_kg", ".", "get", "(", "answer", ",", "-", "1", ")", "\n", "if", "idk", ">=", "0", ":", "\n", "                ", "answer_vec", "=", "self", ".", "map_kg", "[", "idk", "]", ".", "reshape", "(", "1", ",", "300", ")", "\n", "", "self", ".", "cached_answers_g2v", "[", "answer", "]", "=", "answer_vec", "\n", "", "return", "self", ".", "cached_answers_g2v", "[", "answer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_answer_vector_w2v": [[363, 375], ["isinstance", "base.VisualQA.cached_answers_w2v.get", "nltk.word_tokenize", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "base.VisualQA.vector.check"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.vector.Vector.check"], ["", "def", "_encode_answer_vector_w2v", "(", "self", ",", "answer", ")", ":", "# \u5411\u91cf\u6c42\u5e73\u5747", "\n", "        ", "if", "isinstance", "(", "self", ".", "cached_answers_w2v", ".", "get", "(", "answer", ",", "-", "1", ")", ",", "int", ")", ":", "\n", "            ", "tokens", "=", "nltk", ".", "word_tokenize", "(", "answer", ")", "\n", "answer_vec", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "vector", ".", "dim", ")", "\n", "cnt", "=", "0", "\n", "for", "i", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "                ", "if", "self", ".", "vector", ".", "check", "(", "token", ")", ":", "\n", "                    ", "answer_vec", "+=", "self", ".", "vector", "[", "token", "]", "\n", "cnt", "+=", "1", "\n", "", "", "self", ".", "cached_answers_w2v", "[", "answer", "]", "=", "answer_vec", "/", "(", "cnt", "+", "1e-12", ")", "\n", "# pdb.set_trace()", "\n", "", "return", "self", ".", "cached_answers_w2v", "[", "answer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_answer_sequence_w2v": [[376, 388], ["isinstance", "base.VisualQA.cached_answers_w2v.get", "nltk.word_tokenize", "enumerate", "base.VisualQA.vector.check", "answer_seq.append", "answer_seq.append", "base.VisualQA.vector[].view", "base.VisualQA.vector[].view"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.model.vector.Vector.check"], ["", "def", "_encode_answer_sequence_w2v", "(", "self", ",", "answer", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "cached_answers_w2v", ".", "get", "(", "answer", ",", "-", "1", ")", ",", "int", ")", ":", "\n", "            ", "tokens", "=", "nltk", ".", "word_tokenize", "(", "answer", ")", "\n", "answer_seq", "=", "[", "]", "\n", "for", "i", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "                ", "if", "self", ".", "vector", ".", "check", "(", "token", ")", ":", "\n", "                    ", "answer_seq", ".", "append", "(", "self", ".", "vector", "[", "token", "]", ".", "view", "(", "1", ",", "self", ".", "vector", ".", "dim", ")", ")", "\n", "", "else", ":", "\n", "                    ", "answer_seq", ".", "append", "(", "self", ".", "vector", "[", "'<unk>'", "]", ".", "view", "(", "1", ",", "self", ".", "vector", ".", "dim", ")", ")", "\n", "", "", "self", ".", "cached_answers_w2v", "[", "answer", "]", "=", "answer_seq", "\n", "\n", "", "return", "self", ".", "cached_answers_w2v", "[", "answer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_multihot_labels": [[389, 399], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "base.VisualQA.answer_to_index.get"], "methods", ["None"], ["", "def", "_encode_multihot_labels", "(", "self", ",", "answers", ")", ":", "\n", "        ", "\"\"\" Turn an answer into a vector \"\"\"", "\n", "max_answer_index", "=", "self", ".", "args", ".", "TEST", ".", "max_answer_index", "\n", "answer_vec", "=", "torch", ".", "zeros", "(", "max_answer_index", ")", "\n", "for", "answer", "in", "answers", ":", "\n", "            ", "index", "=", "self", ".", "answer_to_index", ".", "get", "(", "answer", ")", "\n", "if", "index", "is", "not", "None", ":", "\n", "                ", "if", "index", "<", "max_answer_index", ":", "\n", "                    ", "answer_vec", "[", "index", "]", "+=", "1", "\n", "", "", "", "return", "answer_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA.evaluate": [[400, 402], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.FVQA.__init__": [[50, 76], ["base.VisualQA.__init__", "fvqa.FVQA._get_cache_path", "fvqa.FVQA._qa_id_represent", "open", "json.load", "list", "fvqa.prepare_fact", "list", "list", "fvqa.prepare_relation", "fvqa.prepare_answers"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.FVQA._get_cache_path", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.FVQA._qa_id_represent", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.prepare_fact", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.prepare_relation", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.prepare_answers"], ["def", "__init__", "(", "self", ",", "args", ",", "qa_path", ",", "vector", ",", "file_path", "=", "None", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "answer_vocab_path", "=", "self", ".", "args", ".", "FVQA", ".", "answer_vocab_path", "\n", "super", "(", "FVQA", ",", "self", ")", ".", "__init__", "(", "args", ",", "vector", ")", "\n", "# load annotation", "\n", "with", "open", "(", "qa_path", ",", "'r'", ")", "as", "fd", ":", "\n", "            ", "self", ".", "qa_json", "=", "json", ".", "load", "(", "fd", ")", "\n", "\n", "# print('extracting answers...')", "\n", "\n", "# \u628a\u95ee\u9898\u53d8\u6210id\u5411\u91cf+\u957f\u5ea6\u7684\u8868\u793a, \u7b54\u6848\u53d8\u6210id\u5411\u91cf", "\n", "", "if", "args", ".", "fact_map", ":", "\n", "#  \u5f97\u5230\u5bf9\u5e94\u7684\u540d\u5b57", "\n", "            ", "name", "=", "\"fact\"", "\n", "self", ".", "answers", "=", "list", "(", "prepare_fact", "(", "self", ".", "qa_json", ")", ")", "# \u5019\u9009\u7b54\u6848\u5217\u8868\u7684\u5217\u8868 [[answer1,answer2,...][....]] \u6bcf\u4e2a\u95ee\u9898\u5bf9\u5e94\u7684\u7b54\u6848. \u5355\u8bcd\u8868\u793a", "\n", "", "elif", "args", ".", "relation_map", ":", "\n", "            ", "name", "=", "\"relation\"", "\n", "self", ".", "answers", "=", "list", "(", "prepare_relation", "(", "self", ".", "qa_json", ")", ")", "# \u5019\u9009\u7b54\u6848\u5217\u8868\u7684\u5217\u8868 [[answer1,answer2,...][....]] \u6bcf\u4e2a\u95ee\u9898\u5bf9\u5e94\u7684\u7b54\u6848. \u5355\u8bcd\u8868\u793a", "\n", "", "else", ":", "\n", "            ", "name", "=", "\"answer\"", "\n", "self", ".", "answers", "=", "list", "(", "prepare_answers", "(", "self", ".", "qa_json", ")", ")", "# \u5019\u9009\u7b54\u6848\u5217\u8868\u7684\u5217\u8868 [[answer1,answer2,...][....]] \u6bcf\u4e2a\u95ee\u9898\u5bf9\u5e94\u7684\u7b54\u6848. \u5355\u8bcd\u8868\u793a", "\n", "\n", "", "cache_filepath", "=", "self", ".", "_get_cache_path", "(", "qa_path", ",", "file_path", ",", "name", ")", "\n", "\n", "# self.support_relation = list(prepare_relation(self.qa_json))", "\n", "self", ".", "questions", ",", "self", ".", "answer_indices", "=", "self", ".", "_qa_id_represent", "(", "cache_filepath", ")", "\n", "# pdb.set_trace()", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.FVQA.open_hdf5": [[79, 84], ["fvqa.FVQA._create_image_id_to_index", "fvqa.FVQA._get_img_id"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._create_image_id_to_index", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.FVQA._get_img_id"], ["", "def", "open_hdf5", "(", "self", ")", ":", "\n", "        ", "self", ".", "image_features_path", "=", "self", ".", "args", ".", "FVQA", ".", "feature_path", "\n", "self", ".", "image_id_to_index", "=", "self", ".", "_create_image_id_to_index", "(", ")", "# \u5f97\u5230\u56fe\u7247\u7f16\u53f7\u5230\u4e0b\u6807\u7684\u8868\u793a", "\n", "# self.image_ids = [q['image_id'] for q in questions_json['questions']]", "\n", "self", ".", "image_ids", "=", "self", ".", "_get_img_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.FVQA.__getitem__": [[85, 107], ["fvqa.FVQA._encode_multihot_labels", "fvqa.FVQA._load_image", "hasattr", "fvqa.FVQA.open_hdf5"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_multihot_labels", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._load_image", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.FVQA.open_hdf5"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "# ok", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'image_ids'", ")", ":", "\n", "            ", "self", ".", "open_hdf5", "(", ")", "\n", "# if item > len(self.answers):", "\n", "#     pdb.set_trace()", "\n", "\n", "", "question", ",", "question_length", "=", "self", ".", "questions", "[", "item", "]", "# \u95ee\u9898\u5411\u91cf\u5217\u8868", "\n", "# sample answers", "\n", "# self.answer_indices[item]\uff1a[1,2,3] or [-1, -1 ...]", "\n", "# answer_cands = Counter(self.answer_indices[item])  # \u5355\u4e2a\u7b54\u6848 \u8fd4\u56de\u7c7b\u578b\uff1aCounter({1: 1, 2: 1, 3: 1})", "\n", "# answer_indices = list(answer_cands.keys())  # \u7b54\u6848\u6709\u54ea\u51e0\u4e2a\uff08\u4e0b\u6807\uff09[[1,2,3]]", "\n", "# counts = list(answer_cands.values())  # \u8fd9\u51e0\u4e2a\u7b54\u6848\u5206\u522b\u51fa\u73b0\u4e86\u591a\u5c11\u6b21[10]", "\n", "\n", "label", "=", "self", ".", "_encode_multihot_labels", "(", "self", ".", "answers", "[", "item", "]", ")", "# \u7b54\u6848\u7684multihot\u8868\u793a \u524d\u767e\u5206\u4e4b\u591a\u5c11\u7684\u7b54\u6848", "\n", "image_id", "=", "self", ".", "image_ids", "[", "item", "]", "\n", "image", ",", "spa", "=", "self", ".", "_load_image", "(", "image_id", ")", "# \u76f4\u63a5\u83b7\u5f97\u56fe\u7247\u7684\u7279\u5f81", "\n", "# unique_answers, answer_vectors = self._generate_batch_answer(answer_indices, counts)", "\n", "# answer_vectors == label", "\n", "# assert answer_vectors == label", "\n", "# return image, spa, question, unique_answers, answer_vectors, label, item, question_length", "\n", "# pdb.set_trace()", "\n", "return", "image", ",", "spa", ",", "question", ",", "label", ",", "item", ",", "question_length", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.FVQA._get_cache_path": [[108, 122], ["os.join", "os.join", "os.join", "os.join", "str", "str"], "methods", ["None"], ["", "def", "_get_cache_path", "(", "self", ",", "qa_path", ",", "file_path", ",", "name", ")", ":", "\n", "        ", "w2v", "=", "\"\"", "\n", "if", "\"KG\"", "in", "self", ".", "args", ".", "method_choice", ":", "\n", "            ", "if", "\"w2v\"", "in", "self", ".", "args", ".", "FVQA", ".", "entity_path", ":", "\n", "                ", "w2v", "=", "\"(w2vinit)_\"", "+", "self", ".", "args", ".", "FVQA", ".", "entity_num", "+", "\"_\"", "+", "self", ".", "args", ".", "FVQA", ".", "KGE", "\n", "", "else", ":", "\n", "                ", "w2v", "=", "\"_\"", "+", "self", ".", "args", ".", "FVQA", ".", "entity_num", "+", "\"_\"", "+", "self", ".", "args", ".", "FVQA", ".", "KGE", "\n", "", "", "if", "\"train\"", "in", "qa_path", ":", "\n", "            ", "cache_filepath", "=", "osp", ".", "join", "(", "file_path", ",", "\"fvqa_\"", "+", "name", "+", "\"_and_question_train_\"", "+", "\n", "self", ".", "args", ".", "method_choice", "+", "w2v", "+", "\"_\"", "+", "str", "(", "self", ".", "args", ".", "FVQA", ".", "max_ans", ")", "+", "\".pt\"", ")", "\n", "", "else", ":", "\n", "            ", "cache_filepath", "=", "osp", ".", "join", "(", "file_path", ",", "\"fvqa_\"", "+", "name", "+", "\"_and_question_test_\"", "+", "self", ".", "args", ".", "method_choice", "+", "w2v", "+", "\"_\"", "+", "str", "(", "\n", "self", ".", "args", ".", "FVQA", ".", "max_ans", ")", "+", "\".pt\"", ")", "\n", "", "return", "cache_filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.FVQA._qa_id_represent": [[123, 141], ["os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "list", "torch.save", "torch.save", "torch.save", "torch.save", "torch.load", "torch.load", "torch.load", "torch.load", "fvqa.prepare_questions", "fvqa.FVQA._encode_question", "fvqa.FVQA.answer_to_index.get"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.prepare_questions", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.base.VisualQA._encode_question"], ["", "def", "_qa_id_represent", "(", "self", ",", "cache_filepath", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_filepath", ")", ":", "\n", "# print('encoding questions...')", "\n", "            ", "questions", "=", "list", "(", "prepare_questions", "(", "self", ".", "qa_json", ")", ")", "# \u95ee\u9898\u8bcd\u5217\u8868\u7684\u5217\u8868", "\n", "questions", "=", "[", "self", ".", "_encode_question", "(", "q", ")", "for", "q", "in", "questions", "]", "# \u628a\u95ee\u9898\u53d8\u6210id\u5411\u91cf+\u957f\u5ea6\u7684\u8868\u793a", "\n", "\n", "# \u5bf9\u4e8e\u5019\u9009\u7b54\u6848\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u95ee\u9898\u5bf9\u5e94\u7684\u5019\u9009\u7b54\u6848\u5217\u8868\uff0c\u8f6c\u6362\u6210\u4e0b\u6807\u8868\u793a[[1,2,3],[2,3,4]......]  1\u2014\u2014>\u4e00\u4e2a\u7b54\u6848", "\n", "answer_indices", "=", "[", "[", "self", ".", "answer_to_index", ".", "get", "(", "_a", ",", "-", "1", ")", "for", "_a", "in", "a", "]", "for", "a", "in", "self", ".", "answers", "]", "# \u5982\u679c\u6ca1\u6709\u5339\u914d\u5c31\u662f -1", "\n", "torch", ".", "save", "(", "{", "'questions'", ":", "questions", ",", "'answer_indices'", ":", "answer_indices", "}", ",", "cache_filepath", ")", "\n", "\n", "", "else", ":", "\n", "# \u5df2\u7ecf\u6709\uff0c\u5bf9\u5e94\u8fd9\u4e2a\u8bad\u7ec3/\u6d4b\u8bd5\u96c6 \u7684\u95ee\u9898w2v\u8868\uff0c[train \u548c test\u662f\u4e0d\u4e00\u6837\u7684]", "\n", "            ", "_cache", "=", "torch", ".", "load", "(", "cache_filepath", ")", "\n", "questions", "=", "_cache", "[", "'questions'", "]", "# \u8bcd\u5411\u91cf\u5217\u8868 + \u957f\u5ea6", "\n", "answer_indices", "=", "_cache", "[", "'answer_indices'", "]", "# \u7b54\u6848\u4e0b\u6807", "\n", "# self.answer_vectors = _cache['answer_vectors']  # \u7b54\u6848\u7684\u5411\u91cf\u8868\u793a[\u5e73\u5747]", "\n", "\n", "", "return", "questions", ",", "answer_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.FVQA._get_img_id": [[142, 154], ["list", "fvqa.FVQA.qa_json.keys", "int", "image_ids.append", "filename.split", "filename.endswith", "id_and_extension.split"], "methods", ["None"], ["", "def", "_get_img_id", "(", "self", ")", ":", "\n", "        ", "image_ids", "=", "[", "]", "\n", "keys", "=", "list", "(", "self", ".", "qa_json", ".", "keys", "(", ")", ")", "\n", "for", "a", "in", "keys", ":", "\n", "            ", "filename", "=", "self", ".", "qa_json", "[", "a", "]", "[", "\"img_file\"", "]", "\n", "id_and_extension", "=", "filename", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "id", "=", "int", "(", "id_and_extension", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "if", "not", "filename", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "                ", "id", "+=", "1000000", "# \u628ajpg\u548cjpeg\u7684\u5206\u5f00", "\n", "# pdb.set_trace()", "\n", "", "image_ids", ".", "append", "(", "id", ")", "\n", "", "return", "image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.get_loader": [[15, 45], ["fvqa.FVQA", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "fvqa.path_for"], "function", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.path_for"], ["def", "get_loader", "(", "args", ",", "vector", ",", "train", "=", "False", ",", "val", "=", "False", ")", ":", "\n", "    ", "\"\"\" Returns a data loader for the desired split \"\"\"", "\n", "assert", "train", "+", "val", "==", "1", ",", "'need to set exactly one of {train, val, test} to True'", "# \u5fc5\u987b\u6709\u4e00\u4e2a\u4e3a\u771f", "\n", "id", "=", "args", ".", "FVQA", ".", "data_choice", "\n", "if", "train", ":", "\n", "        ", "filepath", "=", "\"train\"", "+", "id", "\n", "print", "(", "\"use train data:\"", ",", "id", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "args", ".", "FVQA", ".", "train_data_path", ",", "filepath", ")", "\n", "", "else", ":", "\n", "        ", "filepath", "=", "\"test\"", "+", "id", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "args", ".", "FVQA", ".", "test_data_path", ",", "filepath", ")", "\n", "\n", "", "split", "=", "FVQA", "(", "# \u5b9a\u4e49\u6bcf\u4e00\u6b21\u8bad\u7ec3\u7684VQA\u8f93\u5165 # ok", "\n", "args", ",", "\n", "path_for", "(", "args", ",", "train", "=", "train", ",", "val", "=", "val", ",", "filepath", "=", "filepath", ")", ",", "# train\u7684\u95ee\u9898", "\n", "vector", ",", "# \u5bf9\u5e94\u7684\u8bcd\u5411\u91cf", "\n", "file_path", "=", "filepath", "\n", ")", "\n", "batch_size", "=", "args", ".", "TRAIN", ".", "batch_size", "\n", "if", "val", ":", "\n", "        ", "batch_size", "=", "args", ".", "TEST", ".", "batch_size", "\n", "", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "# \u5b9a\u4e49\u4f20\u7edf\u7684DataLoader", "\n", "split", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "# only shuffle the data in training", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "TRAIN", ".", "data_workers", ",", "\n", ")", "\n", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.path_for": [[168, 177], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "def", "path_for", "(", "args", ",", "train", "=", "False", ",", "val", "=", "False", ",", "filepath", "=", "\"\"", ")", ":", "\n", "# tra = \"all_qs_dict_release_train_\" + str(args.FVQA.max_ans) + \".json\"", "\n", "# tes = \"all_qs_dict_release_test_\" + str(args.FVQA.max_ans) + \".json\"", "\n", "    ", "tra", "=", "\"all_qs_dict_release_train_500.json\"", "\n", "tes", "=", "\"all_qs_dict_release_test_500.json\"", "\n", "if", "train", "==", "True", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "args", ".", "FVQA", ".", "train_data_path", ",", "filepath", ",", "tra", ")", "\n", "", "else", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "args", ".", "FVQA", ".", "test_data_path", ",", "filepath", ",", "tes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.prepare_questions": [[179, 188], ["list", "questions_json.keys", "questions.append", "question.lower", "nltk.word_tokenize", "preprocess.process_punctuation"], "function", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.process_punctuation"], ["", "", "def", "prepare_questions", "(", "questions_json", ")", ":", "# ok", "\n", "    ", "\"\"\" Tokenize and normalize questions from a given question json in the usual VQA format. \"\"\"", "\n", "keys", "=", "list", "(", "questions_json", ".", "keys", "(", ")", ")", "\n", "questions", "=", "[", "]", "\n", "for", "a", "in", "keys", ":", "\n", "        ", "questions", ".", "append", "(", "questions_json", "[", "a", "]", "[", "'question'", "]", ")", "# question\u7684list", "\n", "", "for", "question", "in", "questions", ":", "\n", "        ", "question", "=", "question", ".", "lower", "(", ")", "[", ":", "-", "1", "]", "\n", "yield", "nltk", ".", "word_tokenize", "(", "process_punctuation", "(", "question", ")", ")", "# \u5f97\u5230\u4e00\u4e2a\u8bcd\u7684list\uff0c\u4f8b\u5982['I', 'LOVE', 'YOU']", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.prepare_answers": [[190, 201], ["list", "answers_json.keys", "answers.append", "list", "map"], "function", ["None"], ["", "", "def", "prepare_answers", "(", "answers_json", ")", ":", "# ok", "\n", "    ", "\"\"\" Normalize answers from a given answer json in the usual VQA format. \"\"\"", "\n", "keys", "=", "list", "(", "answers_json", ".", "keys", "(", ")", ")", "\n", "answers", "=", "[", "]", "\n", "\n", "for", "a", "in", "keys", ":", "\n", "        ", "answer", "=", "answers_json", "[", "a", "]", "[", "\"answer\"", "]", "\n", "answers", ".", "append", "(", "[", "answer", "]", "*", "10", ")", "# \u53cc\u5c42list\uff0c\u5185\u5c42\u7684list\u5bf9\u5e94\u4e00\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5e8f\u5217", "\n", "", "for", "answer_list", "in", "answers", ":", "\n", "        ", "ret", "=", "list", "(", "map", "(", "process_punctuation", ",", "answer_list", ")", ")", "# \u53bb\u9664\u6807\u70b9\u7b49\u64cd\u4f5c", "\n", "yield", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.prepare_fact": [[203, 223], ["list", "answers_json.keys", "support_facts.append", "list", "pdb.set_trace", "map"], "function", ["None"], ["", "", "def", "prepare_fact", "(", "answers_json", ")", ":", "# ok", "\n", "    ", "\"\"\" Normalize answers from a given answer json in the usual VQA format. \"\"\"", "\n", "keys", "=", "list", "(", "answers_json", ".", "keys", "(", ")", ")", "\n", "support_facts", "=", "[", "]", "\n", "for", "a", "in", "keys", ":", "\n", "        ", "answer", "=", "answers_json", "[", "a", "]", "[", "\"answer\"", "]", "\n", "facts", "=", "answers_json", "[", "a", "]", "[", "\"fact\"", "]", "\n", "f1", "=", "facts", "[", "0", "]", "\n", "f2", "=", "facts", "[", "2", "]", "\n", "if", "answer", "!=", "f1", "and", "answer", "!=", "f2", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "", "assert", "(", "answer", "==", "f1", "or", "answer", "==", "f2", ")", "\n", "if", "answer", "==", "f1", ":", "\n", "            ", "fact", "=", "f2", "\n", "", "else", ":", "\n", "            ", "fact", "=", "f1", "\n", "", "support_facts", ".", "append", "(", "[", "fact", "]", "*", "10", ")", "# \u53cc\u5c42list\uff0c\u5185\u5c42\u7684list\u5bf9\u5e94\u4e00\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5e8f\u5217", "\n", "", "for", "support_facts_list", "in", "support_facts", ":", "\n", "        ", "ret", "=", "list", "(", "map", "(", "process_punctuation", ",", "support_facts_list", ")", ")", "# \u53bb\u9664\u6807\u70b9\u7b49\u64cd\u4f5c", "\n", "yield", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.fvqa.prepare_relation": [[225, 237], ["list", "answers_json.keys", "relations.append", "list", "map"], "function", ["None"], ["", "", "def", "prepare_relation", "(", "answers_json", ")", ":", "# ok", "\n", "    ", "\"\"\" Normalize answers from a given answer json in the usual VQA format. \"\"\"", "\n", "keys", "=", "list", "(", "answers_json", ".", "keys", "(", ")", ")", "\n", "relations", "=", "[", "]", "\n", "for", "a", "in", "keys", ":", "\n", "        ", "facts", "=", "answers_json", "[", "a", "]", "[", "\"fact\"", "]", "\n", "relation", "=", "facts", "[", "1", "]", "\n", "\n", "relations", ".", "append", "(", "[", "relation", "]", "*", "10", ")", "# \u53cc\u5c42list\uff0c\u5185\u5c42\u7684list\u5bf9\u5e94\u4e00\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5e8f\u5217", "\n", "", "for", "relation_list", "in", "relations", ":", "\n", "        ", "ret", "=", "list", "(", "map", "(", "process_punctuation", ",", "relation_list", ")", ")", "# \u53bb\u9664\u6807\u70b9\u7b49\u64cd\u4f5c", "\n", "yield", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.CocoImages.__init__": [[63, 70], ["torch.Dataset.__init__", "preprocess.CocoImages._find_images", "sorted", "print", "preprocess.CocoImages.id_to_filename.keys", "len"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__", "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.CocoImages._find_images"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "CocoImages", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "id_to_filename", "=", "self", ".", "_find_images", "(", ")", "\n", "self", ".", "sorted_ids", "=", "sorted", "(", "self", ".", "id_to_filename", ".", "keys", "(", ")", ")", "# used for deterministic iteration order", "\n", "print", "(", "'found {} images in {}'", ".", "format", "(", "len", "(", "self", ")", ",", "self", ".", "path", ")", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.CocoImages._find_images": [[71, 80], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "int", "filename.endswith", "filename.split", "id_and_extension.split"], "methods", ["None"], ["", "def", "_find_images", "(", "self", ")", ":", "\n", "        ", "id_to_filename", "=", "{", "}", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "path", ")", ":", "\n", "            ", "if", "not", "filename", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "                ", "continue", "\n", "", "id_and_extension", "=", "filename", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "id", "=", "int", "(", "id_and_extension", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "id_to_filename", "[", "id", "]", "=", "filename", "\n", "", "return", "id_to_filename", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.CocoImages.__getitem__": [[81, 89], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open().convert", "preprocess.CocoImages.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "id", "=", "self", ".", "sorted_ids", "[", "item", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "self", ".", "id_to_filename", "[", "id", "]", ")", "\n", "img", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "id", ",", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.CocoImages.__len__": [[90, 92], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sorted_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__init__": [[97, 99], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "datasets", ")", ":", "\n", "        ", "self", ".", "datasets", "=", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__getitem__": [[100, 108], ["len", "IndexError", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "current", "=", "self", ".", "datasets", "[", "0", "]", "\n", "for", "d", "in", "self", ".", "datasets", ":", "\n", "            ", "if", "item", "<", "len", "(", "d", ")", ":", "\n", "                ", "return", "d", "[", "item", "]", "\n", "", "item", "-=", "len", "(", "d", ")", "\n", "", "else", ":", "\n", "            ", "raise", "IndexError", "(", "'Index too large for composite dataset'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.__len__": [[109, 111], ["sum", "map"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "map", "(", "len", ",", "self", ".", "datasets", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite._get_answer_vectors": [[112, 114], ["preprocess.Composite.datasets[]._get_answer_vectors"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite._get_answer_vectors"], ["", "def", "_get_answer_vectors", "(", "self", ",", "answer_indices", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "0", "]", ".", "_get_answer_vectors", "(", "answer_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite._get_answer_sequences": [[115, 117], ["preprocess.Composite.datasets[]._get_answer_sequences"], "methods", ["home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite._get_answer_sequences"], ["", "def", "_get_answer_sequences", "(", "self", ",", "answer_indices", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "0", "]", ".", "_get_answer_sequences", "(", "answer_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.vector": [[118, 121], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "vector", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "0", "]", ".", "vector", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.token_to_index": [[122, 125], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "token_to_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "0", "]", ".", "token_to_index", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.answer_to_index": [[126, 129], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "answer_to_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "0", "]", ".", "answer_to_index", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.index_to_answer": [[130, 133], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "index_to_answer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "0", "]", ".", "index_to_answer", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.num_tokens": [[134, 137], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_tokens", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "0", "]", ".", "num_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.num_answer_tokens": [[138, 141], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_answer_tokens", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "0", "]", ".", "num_answer_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.Composite.vocab": [[142, 145], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "0", "]", ".", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.invert_dict": [[24, 25], ["d.items"], "function", ["None"], ["def", "invert_dict", "(", "d", ")", ":", "return", "{", "v", ":", "k", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.process_punctuation": [[27, 42], ["_punctuation_with_a_space.sub", "_punctuation.sub", "_period_strip.sub", "_punctuation.search", "re.search", "s.replace.replace", "s.replace.strip", "original_s.strip", "s.replace.strip"], "function", ["None"], ["def", "process_punctuation", "(", "s", ")", ":", "\n", "# the original is somewhat broken, so things that look odd here might just be to mimic that behaviour", "\n", "# this version should be faster since we use re instead of repeated operations on str's", "\n", "    ", "original_s", "=", "s", "\n", "if", "_punctuation", ".", "search", "(", "s", ")", "is", "None", ":", "\n", "        ", "return", "s", "\n", "", "s", "=", "_punctuation_with_a_space", ".", "sub", "(", "''", ",", "s", ")", "\n", "if", "re", ".", "search", "(", "_comma_strip", ",", "s", ")", "is", "not", "None", ":", "\n", "        ", "s", "=", "s", ".", "replace", "(", "','", ",", "''", ")", "\n", "", "s", "=", "_punctuation", ".", "sub", "(", "' '", ",", "s", ")", "\n", "s", "=", "_period_strip", ".", "sub", "(", "''", ",", "s", ")", "\n", "if", "s", ".", "strip", "(", ")", "==", "''", ":", "\n", "        ", "return", "original_s", ".", "strip", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "s", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.extract_vocab": [[44, 60], ["itertools.chain.from_iterable", "collections.Counter", "sorted", "collections.Counter.most_common", "collections.Counter.keys", "enumerate"], "function", ["None"], ["", "", "def", "extract_vocab", "(", "iterable", ",", "top_k", "=", "None", ",", "start", "=", "0", ",", "input_vocab", "=", "None", ")", ":", "\n", "    ", "\"\"\" Turns an iterable of list of tokens into a vocabulary.\n        These tokens could be single answers or word tokens in questions.\n    \"\"\"", "\n", "all_tokens", "=", "itertools", ".", "chain", ".", "from_iterable", "(", "iterable", ")", "\n", "counter", "=", "Counter", "(", "all_tokens", ")", "\n", "if", "top_k", ":", "\n", "        ", "most_common", "=", "counter", ".", "most_common", "(", "top_k", ")", "\n", "most_common", "=", "(", "t", "for", "t", ",", "c", "in", "most_common", ")", "\n", "", "else", ":", "\n", "        ", "most_common", "=", "counter", ".", "keys", "(", ")", "\n", "# descending in count, then lexicographical order", "\n", "", "tokens", "=", "sorted", "(", "most_common", ",", "key", "=", "lambda", "x", ":", "(", "counter", "[", "x", "]", ",", "x", ")", ",", "reverse", "=", "True", ")", "\n", "\n", "vocab", "=", "{", "t", ":", "i", "for", "i", ",", "t", "in", "enumerate", "(", "tokens", ",", "start", "=", "start", ")", "}", "\n", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.China-UK-ZSL_ZS-F-VQA.data.preprocess.eval_collate_fn": [[147, 151], ["batch.sort", "torch.dataloader.default_collate"], "function", ["None"], ["", "", "def", "eval_collate_fn", "(", "batch", ")", ":", "\n", "# put question lengths in descending order so that we can use packed sequences later", "\n", "    ", "batch", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ",", "reverse", "=", "True", ")", "\n", "return", "data", ".", "dataloader", ".", "default_collate", "(", "batch", ")", "\n", "", ""]]}