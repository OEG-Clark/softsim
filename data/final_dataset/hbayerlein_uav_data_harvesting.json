{"home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.None.main_mc.eval_logs": [[13, 33], ["tensorboard.backend.event_processing.event_accumulator.EventAccumulator", "tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Reload", "zip", "zip", "zip", "zip", "print", "print", "print", "print", "tensorflow.make_ndarray", "tensorflow.make_ndarray", "tensorflow.make_ndarray", "tensorflow.make_ndarray", "tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Tensors", "tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Tensors", "tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Tensors", "tensorboard.backend.event_processing.event_accumulator.EventAccumulator.Tensors", "sum", "len", "sum", "len", "sum", "len", "sum", "len"], "function", ["None"], ["def", "eval_logs", "(", "event_path", ")", ":", "\n", "    ", "event_acc", "=", "EventAccumulator", "(", "event_path", ",", "size_guidance", "=", "{", "'tensors'", ":", "100000", "}", ")", "\n", "event_acc", ".", "Reload", "(", ")", "\n", "\n", "_", ",", "_", ",", "vals", "=", "zip", "(", "*", "event_acc", ".", "Tensors", "(", "'successful_landing'", ")", ")", "\n", "has_landed", "=", "[", "tf", ".", "make_ndarray", "(", "val", ")", "for", "val", "in", "vals", "]", "\n", "\n", "_", ",", "_", ",", "vals", "=", "zip", "(", "*", "event_acc", ".", "Tensors", "(", "'cr'", ")", ")", "\n", "cr", "=", "[", "tf", ".", "make_ndarray", "(", "val", ")", "for", "val", "in", "vals", "]", "\n", "\n", "_", ",", "_", ",", "vals", "=", "zip", "(", "*", "event_acc", ".", "Tensors", "(", "'cral'", ")", ")", "\n", "cral", "=", "[", "tf", ".", "make_ndarray", "(", "val", ")", "for", "val", "in", "vals", "]", "\n", "\n", "_", ",", "_", ",", "vals", "=", "zip", "(", "*", "event_acc", ".", "Tensors", "(", "'boundary_counter'", ")", ")", "\n", "boundary_counter", "=", "[", "tf", ".", "make_ndarray", "(", "val", ")", "for", "val", "in", "vals", "]", "\n", "\n", "print", "(", "\"Successful Landing:\"", ",", "sum", "(", "has_landed", ")", "/", "len", "(", "has_landed", ")", ")", "\n", "print", "(", "\"Collection ratio:\"", ",", "sum", "(", "cr", ")", "/", "len", "(", "cr", ")", ")", "\n", "print", "(", "\"Collection ratio and landed:\"", ",", "sum", "(", "cral", ")", "/", "len", "(", "cral", ")", ")", "\n", "print", "(", "\"Boundary counter:\"", ",", "sum", "(", "boundary_counter", ")", "/", "len", "(", "boundary_counter", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.None.main_mc.mc": [[35, 49], ["main_mc.eval_logs", "src.Environment.Environment", "src.Environment.Environment.agent.load_weights", "src.Environment.Environment.eval", "int", "int", "print"], "function", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.None.main_mc.eval_logs", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.load_weights", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.eval"], ["", "def", "mc", "(", "args", ",", "params", ":", "EnvironmentParams", ")", ":", "\n", "    ", "if", "args", ".", "num_agents", "is", "not", "None", ":", "\n", "        ", "num_range", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "num_agents", "]", "\n", "params", ".", "grid_params", ".", "num_agents_range", "=", "num_range", "\n", "\n", "", "try", ":", "\n", "        ", "env", "=", "Environment", "(", "params", ")", "\n", "env", ".", "agent", ".", "load_weights", "(", "args", ".", "weights", ")", "\n", "\n", "env", ".", "eval", "(", "int", "(", "args", ".", "samples", ")", ",", "show", "=", "args", ".", "show", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "print", "(", "\"Not overriding log dir, eval existing:\"", ")", "\n", "\n", "", "eval_logs", "(", "\"logs/training/\"", "+", "args", ".", "id", "+", "\"/test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.None.utils.getattr_recursive": [[7, 13], ["isinstance", "s.split", "utils.getattr_recursive", "getattr", "len", "getattr"], "function", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.None.utils.getattr_recursive"], ["def", "getattr_recursive", "(", "obj", ",", "s", ")", ":", "\n", "    ", "if", "isinstance", "(", "s", ",", "list", ")", ":", "\n", "        ", "split", "=", "s", "\n", "", "else", ":", "\n", "        ", "split", "=", "s", ".", "split", "(", "'/'", ")", "\n", "", "return", "getattr_recursive", "(", "getattr", "(", "obj", ",", "split", "[", "0", "]", ")", ",", "split", "[", "1", ":", "]", ")", "if", "len", "(", "split", ")", ">", "1", "else", "getattr", "(", "obj", ",", "split", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.None.utils.setattr_recursive": [[15, 21], ["isinstance", "s.split", "utils.setattr_recursive", "setattr", "len", "getattr"], "function", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.None.utils.setattr_recursive"], ["", "def", "setattr_recursive", "(", "obj", ",", "s", ",", "val", ")", ":", "\n", "    ", "if", "isinstance", "(", "s", ",", "list", ")", ":", "\n", "        ", "split", "=", "s", "\n", "", "else", ":", "\n", "        ", "split", "=", "s", ".", "split", "(", "'/'", ")", "\n", "", "return", "setattr_recursive", "(", "getattr", "(", "obj", ",", "split", "[", "0", "]", ")", ",", "split", "[", "1", ":", "]", ",", "val", ")", "if", "len", "(", "split", ")", ">", "1", "else", "setattr", "(", "obj", ",", "split", "[", "0", "]", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.None.utils.generate_config": [[23, 29], ["print", "open", "json.dumps", "open.write", "open.close"], "function", ["None"], ["", "def", "generate_config", "(", "params", ",", "file_path", ")", ":", "\n", "    ", "print", "(", "\"Saving Configs\"", ")", "\n", "f", "=", "open", "(", "file_path", ",", "\"w\"", ")", "\n", "json_data", "=", "json", ".", "dumps", "(", "params", ".", "__dict__", ",", "default", "=", "lambda", "o", ":", "o", ".", "__dict__", ",", "indent", "=", "4", ")", "\n", "f", ".", "write", "(", "json_data", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.None.utils.read_config": [[31, 35], ["print", "open().read", "json.loads", "open", "types.SimpleNamespace"], "function", ["None"], ["", "def", "read_config", "(", "config_path", ")", ":", "\n", "    ", "print", "(", "'Parse Params file here from '", ",", "config_path", ",", "' and pass into main'", ")", "\n", "json_data", "=", "open", "(", "config_path", ",", "\"r\"", ")", ".", "read", "(", ")", "\n", "return", "json", ".", "loads", "(", "json_data", ",", "object_hook", "=", "lambda", "d", ":", "Namespace", "(", "**", "d", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.__init__": [[8, 28], ["src.base.BaseState.BaseState.__init__"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "map_init", ":", "Map", ",", "num_agents", ":", "int", ",", "multi_agent", ":", "bool", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "map_init", ")", "\n", "self", ".", "device_list", "=", "None", "\n", "self", ".", "device_map", "=", "None", "# Floating point sparse matrix showing devices and their data to be collected", "\n", "\n", "# Multi-agent active agent decides on properties", "\n", "self", ".", "active_agent", "=", "0", "\n", "self", ".", "num_agents", "=", "num_agents", "\n", "self", ".", "multi_agent", "=", "multi_agent", "\n", "\n", "# Multi-agent is creating lists", "\n", "self", ".", "positions", "=", "[", "[", "0", ",", "0", "]", "]", "*", "num_agents", "\n", "self", ".", "movement_budgets", "=", "[", "0", "]", "*", "num_agents", "\n", "self", ".", "landeds", "=", "[", "False", "]", "*", "num_agents", "\n", "self", ".", "terminals", "=", "[", "False", "]", "*", "num_agents", "\n", "self", ".", "device_coms", "=", "[", "-", "1", "]", "*", "num_agents", "\n", "\n", "self", ".", "initial_movement_budgets", "=", "[", "0", "]", "*", "num_agents", "\n", "self", ".", "initial_total_data", "=", "0", "\n", "self", ".", "collected", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.position": [[29, 32], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "position", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "positions", "[", "self", ".", "active_agent", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.movement_budget": [[33, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "movement_budget", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "movement_budgets", "[", "self", ".", "active_agent", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.initial_movement_budget": [[37, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "initial_movement_budget", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "initial_movement_budgets", "[", "self", ".", "active_agent", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.landed": [[41, 44], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "landed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "landeds", "[", "self", ".", "active_agent", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.terminal": [[45, 48], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "terminal", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "terminals", "[", "self", ".", "active_agent", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.all_landed": [[49, 52], ["all"], "methods", ["None"], ["", "@", "property", "\n", "def", "all_landed", "(", "self", ")", ":", "\n", "        ", "return", "all", "(", "self", ".", "landeds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.all_terminal": [[53, 56], ["all"], "methods", ["None"], ["", "@", "property", "\n", "def", "all_terminal", "(", "self", ")", ":", "\n", "        ", "return", "all", "(", "self", ".", "terminals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.is_terminal": [[57, 59], ["None"], "methods", ["None"], ["", "def", "is_terminal", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "all_terminal", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.set_landed": [[60, 62], ["None"], "methods", ["None"], ["", "def", "set_landed", "(", "self", ",", "landed", ")", ":", "\n", "        ", "self", ".", "landeds", "[", "self", ".", "active_agent", "]", "=", "landed", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.set_position": [[63, 65], ["None"], "methods", ["None"], ["", "def", "set_position", "(", "self", ",", "position", ")", ":", "\n", "        ", "self", ".", "positions", "[", "self", ".", "active_agent", "]", "=", "position", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.decrement_movement_budget": [[66, 68], ["None"], "methods", ["None"], ["", "def", "decrement_movement_budget", "(", "self", ")", ":", "\n", "        ", "self", ".", "movement_budgets", "[", "self", ".", "active_agent", "]", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.set_terminal": [[69, 71], ["None"], "methods", ["None"], ["", "def", "set_terminal", "(", "self", ",", "terminal", ")", ":", "\n", "        ", "self", ".", "terminals", "[", "self", ".", "active_agent", "]", "=", "terminal", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.set_device_com": [[72, 74], ["None"], "methods", ["None"], ["", "def", "set_device_com", "(", "self", ",", "device_com", ")", ":", "\n", "        ", "self", ".", "device_coms", "[", "self", ".", "active_agent", "]", "=", "device_com", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_active_agent": [[75, 77], ["None"], "methods", ["None"], ["", "def", "get_active_agent", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "active_agent", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_remaining_data": [[78, 80], ["numpy.sum"], "methods", ["None"], ["", "def", "get_remaining_data", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "self", ".", "device_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_total_data": [[81, 83], ["None"], "methods", ["None"], ["", "def", "get_total_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "initial_total_data", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars": [[84, 92], ["numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "get_scalars", "(", "self", ",", "give_position", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Return the scalars without position, as it is treated individually\n        \"\"\"", "\n", "if", "give_position", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "self", ".", "movement_budget", ",", "self", ".", "position", "[", "0", "]", ",", "self", ".", "position", "[", "1", "]", "]", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "self", ".", "movement_budget", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_num_scalars": [[93, 95], ["len", "State.State.get_scalars"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars"], ["", "def", "get_num_scalars", "(", "self", ",", "give_position", "=", "False", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "get_scalars", "(", "give_position", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_boolean_map": [[96, 107], ["src.StateUtils.pad_centered", "numpy.concatenate", "numpy.concatenate", "src.StateUtils.pad_centered", "src.StateUtils.pad_centered", "numpy.concatenate", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "State.State.get_agent_bool_maps"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.StateUtils.pad_centered", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.StateUtils.pad_centered", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.StateUtils.pad_centered", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_agent_bool_maps"], ["", "def", "get_boolean_map", "(", "self", ")", ":", "\n", "        ", "padded_red", "=", "pad_centered", "(", "self", ",", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "self", ".", "no_fly_zone", ",", "-", "1", ")", ",", "\n", "np", ".", "expand_dims", "(", "self", ".", "obstacles", ",", "-", "1", ")", "]", ",", "axis", "=", "-", "1", ")", ",", "1", ")", "\n", "if", "self", ".", "multi_agent", ":", "\n", "            ", "padded_rest", "=", "pad_centered", "(", "self", ",", "\n", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "expand_dims", "(", "self", ".", "landing_zone", ",", "-", "1", ")", ",", "self", ".", "get_agent_bool_maps", "(", ")", "]", ",", "\n", "axis", "=", "-", "1", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "padded_rest", "=", "pad_centered", "(", "self", ",", "np", ".", "expand_dims", "(", "self", ".", "landing_zone", ",", "-", "1", ")", ",", "0", ")", "\n", "", "return", "np", ".", "concatenate", "(", "[", "padded_red", ",", "padded_rest", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_boolean_map_shape": [[108, 110], ["State.State.get_boolean_map"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_boolean_map"], ["", "def", "get_boolean_map_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_boolean_map", "(", ")", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_float_map": [[111, 117], ["src.StateUtils.pad_centered", "src.StateUtils.pad_centered", "numpy.concatenate", "numpy.expand_dims", "numpy.expand_dims", "State.State.get_agent_float_maps"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.StateUtils.pad_centered", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.StateUtils.pad_centered", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_agent_float_maps"], ["", "def", "get_float_map", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "multi_agent", ":", "\n", "            ", "return", "pad_centered", "(", "self", ",", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "self", ".", "device_map", ",", "-", "1", ")", ",", "\n", "self", ".", "get_agent_float_maps", "(", ")", "]", ",", "axis", "=", "-", "1", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "return", "pad_centered", "(", "self", ",", "np", ".", "expand_dims", "(", "self", ".", "device_map", ",", "-", "1", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_float_map_shape": [[118, 120], ["State.State.get_float_map"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_float_map"], ["", "", "def", "get_float_map_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_float_map", "(", ")", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.is_in_landing_zone": [[121, 123], ["None"], "methods", ["None"], ["", "def", "is_in_landing_zone", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "landing_zone", "[", "self", ".", "position", "[", "1", "]", "]", "[", "self", ".", "position", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.is_in_no_fly_zone": [[124, 130], ["State.State.is_occupied"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.is_occupied"], ["", "def", "is_in_no_fly_zone", "(", "self", ")", ":", "\n", "# Out of bounds is implicitly nfz", "\n", "        ", "if", "0", "<=", "self", ".", "position", "[", "1", "]", "<", "self", ".", "no_fly_zone", ".", "shape", "[", "0", "]", "and", "0", "<=", "self", ".", "position", "[", "0", "]", "<", "self", ".", "no_fly_zone", ".", "shape", "[", "1", "]", ":", "\n", "# NFZ or occupied", "\n", "            ", "return", "self", ".", "no_fly_zone", "[", "self", ".", "position", "[", "1", "]", ",", "self", ".", "position", "[", "0", "]", "]", "or", "self", ".", "is_occupied", "(", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.is_occupied": [[131, 142], ["enumerate"], "methods", ["None"], ["", "def", "is_occupied", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "multi_agent", ":", "\n", "            ", "return", "False", "\n", "", "for", "i", ",", "pos", "in", "enumerate", "(", "self", ".", "positions", ")", ":", "\n", "            ", "if", "self", ".", "terminals", "[", "i", "]", ":", "\n", "                ", "continue", "\n", "", "if", "i", "==", "self", ".", "active_agent", ":", "\n", "                ", "continue", "\n", "", "if", "pos", "==", "self", ".", "position", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_collection_ratio": [[143, 145], ["numpy.sum"], "methods", ["None"], ["", "def", "get_collection_ratio", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "self", ".", "collected", ")", "/", "self", ".", "initial_total_data", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_collected_data": [[146, 148], ["numpy.sum"], "methods", ["None"], ["", "def", "get_collected_data", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "self", ".", "collected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.reset_devices": [[149, 154], ["device_list.get_data_map", "numpy.zeros", "device_list.get_total_data"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_data_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_total_data"], ["", "def", "reset_devices", "(", "self", ",", "device_list", ")", ":", "\n", "        ", "self", ".", "device_map", "=", "device_list", ".", "get_data_map", "(", "self", ".", "no_fly_zone", ".", "shape", ")", "\n", "self", ".", "collected", "=", "np", ".", "zeros", "(", "self", ".", "no_fly_zone", ".", "shape", ",", "dtype", "=", "float", ")", "\n", "self", ".", "initial_total_data", "=", "device_list", ".", "get_total_data", "(", ")", "\n", "self", ".", "device_list", "=", "device_list", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_agent_bool_maps": [[155, 161], ["numpy.zeros", "range"], "methods", ["None"], ["", "def", "get_agent_bool_maps", "(", "self", ")", ":", "\n", "        ", "agent_map", "=", "np", ".", "zeros", "(", "self", ".", "no_fly_zone", ".", "shape", "+", "(", "1", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "for", "agent", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "# agent_map[self.positions[agent][1], self.positions[agent][0]][0] = self.landeds[agent]", "\n", "            ", "agent_map", "[", "self", ".", "positions", "[", "agent", "]", "[", "1", "]", ",", "self", ".", "positions", "[", "agent", "]", "[", "0", "]", "]", "[", "0", "]", "=", "not", "self", ".", "terminals", "[", "agent", "]", "\n", "", "return", "agent_map", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_agent_float_maps": [[162, 167], ["numpy.zeros", "range"], "methods", ["None"], ["", "def", "get_agent_float_maps", "(", "self", ")", ":", "\n", "        ", "agent_map", "=", "np", ".", "zeros", "(", "self", ".", "no_fly_zone", ".", "shape", "+", "(", "1", ",", ")", ",", "dtype", "=", "float", ")", "\n", "for", "agent", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "            ", "agent_map", "[", "self", ".", "positions", "[", "agent", "]", "[", "1", "]", ",", "self", ".", "positions", "[", "agent", "]", "[", "0", "]", "]", "[", "0", "]", "=", "self", ".", "movement_budgets", "[", "agent", "]", "\n", "", "return", "agent_map", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_device_scalars": [[168, 181], ["numpy.zeros", "enumerate", "enumerate"], "methods", ["None"], ["", "def", "get_device_scalars", "(", "self", ",", "max_num_devices", ",", "relative", ")", ":", "\n", "        ", "devices", "=", "np", ".", "zeros", "(", "3", "*", "max_num_devices", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "relative", ":", "\n", "            ", "for", "k", ",", "dev", "in", "enumerate", "(", "self", ".", "device_list", ".", "devices", ")", ":", "\n", "                ", "devices", "[", "k", "*", "3", "]", "=", "dev", ".", "position", "[", "0", "]", "-", "self", ".", "position", "[", "0", "]", "\n", "devices", "[", "k", "*", "3", "+", "1", "]", "=", "dev", ".", "position", "[", "1", "]", "-", "self", ".", "position", "[", "1", "]", "\n", "devices", "[", "k", "*", "3", "+", "2", "]", "=", "dev", ".", "data", "-", "dev", ".", "collected_data", "\n", "", "", "else", ":", "\n", "            ", "for", "k", ",", "dev", "in", "enumerate", "(", "self", ".", "device_list", ".", "devices", ")", ":", "\n", "                ", "devices", "[", "k", "*", "3", "]", "=", "dev", ".", "position", "[", "0", "]", "\n", "devices", "[", "k", "*", "3", "+", "1", "]", "=", "dev", ".", "position", "[", "1", "]", "\n", "devices", "[", "k", "*", "3", "+", "2", "]", "=", "dev", ".", "data", "-", "dev", ".", "collected_data", "\n", "", "", "return", "devices", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_uav_scalars": [[182, 201], ["numpy.zeros", "range", "range"], "methods", ["None"], ["", "def", "get_uav_scalars", "(", "self", ",", "max_num_uavs", ",", "relative", ")", ":", "\n", "        ", "uavs", "=", "np", ".", "zeros", "(", "4", "*", "max_num_uavs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "relative", ":", "\n", "            ", "for", "k", "in", "range", "(", "max_num_uavs", ")", ":", "\n", "                ", "if", "k", ">=", "self", ".", "num_agents", ":", "\n", "                    ", "break", "\n", "", "uavs", "[", "k", "*", "4", "]", "=", "self", ".", "positions", "[", "k", "]", "[", "0", "]", "-", "self", ".", "position", "[", "0", "]", "\n", "uavs", "[", "k", "*", "4", "+", "1", "]", "=", "self", ".", "positions", "[", "k", "]", "[", "1", "]", "-", "self", ".", "position", "[", "1", "]", "\n", "uavs", "[", "k", "*", "4", "+", "2", "]", "=", "self", ".", "movement_budgets", "[", "k", "]", "\n", "uavs", "[", "k", "*", "4", "+", "3", "]", "=", "not", "self", ".", "terminals", "[", "k", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "k", "in", "range", "(", "max_num_uavs", ")", ":", "\n", "                ", "if", "k", ">=", "self", ".", "num_agents", ":", "\n", "                    ", "break", "\n", "", "uavs", "[", "k", "*", "4", "]", "=", "self", ".", "positions", "[", "k", "]", "[", "0", "]", "\n", "uavs", "[", "k", "*", "4", "+", "1", "]", "=", "self", ".", "positions", "[", "k", "]", "[", "1", "]", "\n", "uavs", "[", "k", "*", "4", "+", "2", "]", "=", "self", ".", "movement_budgets", "[", "k", "]", "\n", "uavs", "[", "k", "*", "4", "+", "3", "]", "=", "not", "self", ".", "terminals", "[", "k", "]", "\n", "", "", "return", "uavs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Grid.GridParams.__init__": [[9, 16], ["src.base.BaseGrid.BaseGridParams.__init__", "src.DeviceManager.DeviceManagerParams"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_agents_range", "=", "[", "1", ",", "3", "]", "\n", "self", ".", "device_manager", "=", "DeviceManagerParams", "(", ")", "\n", "self", ".", "multi_agent", "=", "False", "\n", "self", ".", "fixed_starting_idcs", "=", "False", "\n", "self", ".", "starting_idcs", "=", "[", "1", ",", "2", ",", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Grid.Grid.__init__": [[20, 35], ["src.base.BaseGrid.BaseGrid.__init__", "src.DeviceManager.DeviceManager", "numpy.logical_not", "numpy.where", "list", "numpy.logical_or", "zip"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ":", "GridParams", ",", "stats", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "params", ",", "stats", ")", "\n", "self", ".", "params", "=", "params", "\n", "if", "params", ".", "multi_agent", ":", "\n", "            ", "self", ".", "num_agents", "=", "params", ".", "num_agents_range", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_agents", "=", "1", "\n", "\n", "", "self", ".", "device_list", "=", "None", "\n", "self", ".", "device_manager", "=", "DeviceManager", "(", "self", ".", "params", ".", "device_manager", ")", "\n", "\n", "free_space", "=", "np", ".", "logical_not", "(", "\n", "np", ".", "logical_or", "(", "self", ".", "map_image", ".", "obstacles", ",", "self", ".", "map_image", ".", "start_land_zone", ")", ")", "\n", "free_idcs", "=", "np", ".", "where", "(", "free_space", ")", "\n", "self", ".", "device_positions", "=", "list", "(", "zip", "(", "free_idcs", "[", "1", "]", ",", "free_idcs", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Grid.Grid.get_comm_obstacles": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get_comm_obstacles", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "map_image", ".", "obstacles", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Grid.Grid.get_data_map": [[39, 41], ["Grid.Grid.device_list.get_data_map"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_data_map"], ["", "def", "get_data_map", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "device_list", ".", "get_data_map", "(", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Grid.Grid.get_collected_map": [[42, 44], ["Grid.Grid.device_list.get_collected_map"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_collected_map"], ["", "def", "get_collected_map", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "device_list", ".", "get_collected_map", "(", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Grid.Grid.get_device_list": [[45, 47], ["None"], "methods", ["None"], ["", "def", "get_device_list", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "device_list", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Grid.Grid.get_grid_params": [[48, 50], ["None"], "methods", ["None"], ["", "def", "get_grid_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Grid.Grid.init_episode": [[51, 75], ["Grid.Grid.device_manager.generate_device_list", "src.State.State", "src.State.State.reset_devices", "numpy.random.randint", "src.State.State.movement_budgets.copy", "int", "numpy.random.choice", "numpy.random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.DeviceManager.DeviceManager.generate_device_list", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.reset_devices"], ["", "def", "init_episode", "(", "self", ")", ":", "\n", "        ", "self", ".", "device_list", "=", "self", ".", "device_manager", ".", "generate_device_list", "(", "self", ".", "device_positions", ")", "\n", "\n", "if", "self", ".", "params", ".", "multi_agent", ":", "\n", "            ", "self", ".", "num_agents", "=", "int", "(", "np", ".", "random", ".", "randint", "(", "low", "=", "self", ".", "params", ".", "num_agents_range", "[", "0", "]", ",", "\n", "high", "=", "self", ".", "params", ".", "num_agents_range", "[", "1", "]", "+", "1", ",", "size", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_agents", "=", "1", "\n", "", "state", "=", "State", "(", "self", ".", "map_image", ",", "self", ".", "num_agents", ",", "self", ".", "params", ".", "multi_agent", ")", "\n", "state", ".", "reset_devices", "(", "self", ".", "device_list", ")", "\n", "\n", "if", "self", ".", "params", ".", "fixed_starting_idcs", ":", "\n", "            ", "idx", "=", "self", ".", "params", ".", "starting_idcs", "\n", "", "else", ":", "\n", "# Replace False insures that starting positions of the agents are different", "\n", "            ", "idx", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "starting_vector", ")", ",", "size", "=", "self", ".", "num_agents", ",", "replace", "=", "False", ")", "\n", "", "state", ".", "positions", "=", "[", "self", ".", "starting_vector", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "\n", "state", ".", "movement_budgets", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "self", ".", "params", ".", "movement_range", "[", "0", "]", ",", "\n", "high", "=", "self", ".", "params", ".", "movement_range", "[", "1", "]", "+", "1", ",", "size", "=", "self", ".", "num_agents", ")", "\n", "\n", "state", ".", "initial_movement_budgets", "=", "state", ".", "movement_budgets", ".", "copy", "(", ")", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Grid.Grid.init_scenario": [[76, 81], ["None"], "methods", ["None"], ["", "def", "init_scenario", "(", "self", ",", "scenario", ")", ":", "\n", "        ", "self", ".", "device_list", "=", "scenario", ".", "device_list", "\n", "self", ".", "num_agents", "=", "scenario", ".", "init_state", ".", "num_agents", "\n", "\n", "return", "scenario", ".", "init_state", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Grid.Grid.get_example_state": [[82, 91], ["src.State.State", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "get_example_state", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "params", ".", "multi_agent", ":", "\n", "            ", "num_agents", "=", "self", ".", "params", ".", "num_agents_range", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "num_agents", "=", "1", "\n", "", "state", "=", "State", "(", "self", ".", "map_image", ",", "num_agents", ",", "self", ".", "params", ".", "multi_agent", ")", "\n", "state", ".", "device_map", "=", "np", ".", "zeros", "(", "self", ".", "shape", ",", "dtype", "=", "float", ")", "\n", "state", ".", "collected", "=", "np", ".", "zeros", "(", "self", ".", "shape", ",", "dtype", "=", "float", ")", "\n", "return", "state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStatsParams.__init__": [[12, 19], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "save_model", "=", "'models/save_model'", ",", "\n", "moving_average_length", "=", "50", ")", ":", "\n", "        ", "self", ".", "save_model", "=", "save_model", "\n", "self", ".", "moving_average_length", "=", "moving_average_length", "\n", "self", ".", "log_file_name", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "\n", "self", ".", "training_images", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.__init__": [[23, 55], ["tensorflow.keras.callbacks.TensorBoard", "os.path.isdir", "tensorflow.summary.create_file_writer", "tensorflow.summary.create_file_writer", "collections.deque", "float", "shutil.rmtree", "print", "input", "distutils.util.strtobool", "print", "shutil.rmtree", "AttributeError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ":", "ModelStatsParams", ",", "display", ",", "force_override", "=", "False", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "self", ".", "display", "=", "display", "\n", "\n", "self", ".", "evaluation_value_callback", "=", "None", "\n", "self", ".", "env_map_callback", "=", "None", "\n", "self", ".", "log_value_callbacks", "=", "[", "]", "\n", "self", ".", "trajectory", "=", "[", "]", "\n", "\n", "self", ".", "log_dir", "=", "\"logs/training/\"", "+", "params", ".", "log_file_name", "\n", "self", ".", "tensorboard_callback", "=", "tf", ".", "keras", ".", "callbacks", ".", "TensorBoard", "(", "log_dir", "=", "self", ".", "log_dir", ",", "\n", "histogram_freq", "=", "100", ")", "\n", "self", ".", "model", "=", "None", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "self", ".", "log_dir", ")", ":", "\n", "            ", "if", "force_override", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "self", ".", "log_dir", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "self", ".", "log_dir", ",", "'already exists.'", ")", "\n", "resp", "=", "input", "(", "'Override log file? [Y/n]\\n'", ")", "\n", "if", "resp", "==", "''", "or", "distutils", ".", "util", ".", "strtobool", "(", "resp", ")", ":", "\n", "                    ", "print", "(", "'Deleting old log dir'", ")", "\n", "shutil", ".", "rmtree", "(", "self", ".", "log_dir", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "AttributeError", "(", "'Okay bye'", ")", "\n", "\n", "", "", "", "self", ".", "training_log_writer", "=", "tf", ".", "summary", ".", "create_file_writer", "(", "self", ".", "log_dir", "+", "'/training'", ")", "\n", "self", ".", "testing_log_writer", "=", "tf", ".", "summary", ".", "create_file_writer", "(", "self", ".", "log_dir", "+", "'/test'", ")", "\n", "\n", "self", ".", "evaluation_deque", "=", "collections", ".", "deque", "(", "maxlen", "=", "params", ".", "moving_average_length", ")", "\n", "self", ".", "eval_best", "=", "-", "float", "(", "'inf'", ")", "\n", "self", ".", "bar", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.set_evaluation_value_callback": [[56, 58], ["None"], "methods", ["None"], ["", "def", "set_evaluation_value_callback", "(", "self", ",", "callback", ":", "callable", ")", ":", "\n", "        ", "self", ".", "evaluation_value_callback", "=", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.add_experience": [[59, 61], ["ModelStats.ModelStats.trajectory.append"], "methods", ["None"], ["", "def", "add_experience", "(", "self", ",", "experience", ")", ":", "\n", "        ", "self", ".", "trajectory", ".", "append", "(", "experience", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.set_model": [[62, 65], ["ModelStats.ModelStats.tensorboard_callback.set_model"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.set_model"], ["", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "tensorboard_callback", ".", "set_model", "(", "model", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.set_env_map_callback": [[66, 68], ["None"], "methods", ["None"], ["", "def", "set_env_map_callback", "(", "self", ",", "callback", ":", "callable", ")", ":", "\n", "        ", "self", ".", "env_map_callback", "=", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.add_log_data_callback": [[69, 71], ["ModelStats.ModelStats.log_value_callbacks.append"], "methods", ["None"], ["", "def", "add_log_data_callback", "(", "self", ",", "name", ":", "str", ",", "callback", ":", "callable", ")", ":", "\n", "        ", "self", ".", "log_value_callbacks", ".", "append", "(", "(", "name", ",", "callback", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.log_training_data": [[72, 76], ["ModelStats.ModelStats.training_log_writer.as_default", "ModelStats.ModelStats.log_data"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.log_data"], ["", "def", "log_training_data", "(", "self", ",", "step", ")", ":", "\n", "\n", "        ", "with", "self", ".", "training_log_writer", ".", "as_default", "(", ")", ":", "\n", "            ", "self", ".", "log_data", "(", "step", ",", "self", ".", "params", ".", "training_images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.log_testing_data": [[77, 83], ["ModelStats.ModelStats.testing_log_writer.as_default", "ModelStats.ModelStats.log_data", "ModelStats.ModelStats.evaluation_deque.append", "ModelStats.ModelStats.evaluation_value_callback"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.log_data"], ["", "", "def", "log_testing_data", "(", "self", ",", "step", ")", ":", "\n", "        ", "with", "self", ".", "testing_log_writer", ".", "as_default", "(", ")", ":", "\n", "            ", "self", ".", "log_data", "(", "step", ")", "\n", "\n", "", "if", "self", ".", "evaluation_value_callback", ":", "\n", "            ", "self", ".", "evaluation_deque", ".", "append", "(", "self", ".", "evaluation_value_callback", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.log_data": [[84, 92], ["tensorflow.summary.scalar", "ModelStats.ModelStats.display.display_episode", "tensorflow.summary.image", "ModelStats.ModelStats.env_map_callback"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Display.DHDisplay.display_episode"], ["", "", "def", "log_data", "(", "self", ",", "step", ",", "images", "=", "True", ")", ":", "\n", "\n", "        ", "for", "callback", "in", "self", ".", "log_value_callbacks", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "callback", "[", "0", "]", ",", "callback", "[", "1", "]", "(", ")", ",", "step", "=", "step", ")", "\n", "", "if", "images", ":", "\n", "            ", "trajectory", "=", "self", ".", "display", ".", "display_episode", "(", "self", ".", "env_map_callback", "(", ")", ",", "trajectory", "=", "self", ".", "trajectory", ")", "\n", "tf", ".", "summary", ".", "image", "(", "'trajectory'", ",", "trajectory", ",", "\n", "step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.save_if_best": [[93, 103], ["numpy.mean", "len", "print", "ModelStats.ModelStats.model.save_weights"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.save_weights"], ["", "", "def", "save_if_best", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "evaluation_deque", ")", "<", "self", ".", "params", ".", "moving_average_length", ":", "\n", "            ", "return", "\n", "\n", "", "eval_mean", "=", "np", ".", "mean", "(", "self", ".", "evaluation_deque", ")", "\n", "if", "eval_mean", ">", "self", ".", "eval_best", ":", "\n", "            ", "self", ".", "eval_best", "=", "eval_mean", "\n", "if", "self", ".", "params", ".", "save_model", "!=", "''", ":", "\n", "                ", "print", "(", "'Saving best with:'", ",", "eval_mean", ")", "\n", "self", ".", "model", ".", "save_weights", "(", "self", ".", "params", ".", "save_model", "+", "'_best'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.get_log_dir": [[104, 106], ["None"], "methods", ["None"], ["", "", "", "def", "get_log_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.training_ended": [[107, 112], ["ModelStats.ModelStats.model.save_weights", "print"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.save_weights"], ["", "def", "training_ended", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "params", ".", "save_model", "!=", "''", ":", "\n", "            ", "self", ".", "model", ".", "save_weights", "(", "self", ".", "params", ".", "save_model", "+", "'_unfinished'", ")", "\n", "print", "(", "'Model saved as'", ",", "self", ".", "params", ".", "save_model", "+", "'_unfinished'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.save_episode": [[113, 119], ["open", "open.close", "open.write", "str"], "methods", ["None"], ["", "", "def", "save_episode", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "f", "=", "open", "(", "save_path", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "\n", "for", "callback", "in", "self", ".", "log_value_callbacks", ":", "\n", "            ", "f", ".", "write", "(", "callback", "[", "0", "]", "+", "' '", "+", "str", "(", "callback", "[", "1", "]", "(", ")", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.on_episode_begin": [[120, 123], ["ModelStats.ModelStats.tensorboard_callback.on_epoch_begin"], "methods", ["None"], ["", "def", "on_episode_begin", "(", "self", ",", "episode_count", ")", ":", "\n", "        ", "self", ".", "tensorboard_callback", ".", "on_epoch_begin", "(", "episode_count", ")", "\n", "self", ".", "trajectory", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.on_episode_end": [[124, 126], ["ModelStats.ModelStats.tensorboard_callback.on_epoch_end"], "methods", ["None"], ["", "def", "on_episode_end", "(", "self", ",", "episode_count", ")", ":", "\n", "        ", "self", ".", "tensorboard_callback", ".", "on_epoch_end", "(", "episode_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.PhysicsParams.__init__": [[11, 14], ["src.Channel.ChannelParams"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "channel_params", "=", "ChannelParams", "(", ")", "\n", "self", ".", "comm_steps", "=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.__init__": [[18, 27], ["src.base.GridPhysics.GridPhysics.__init__", "src.Channel.Channel", "Physics.Physics.register_functions"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.register_functions"], ["    ", "def", "__init__", "(", "self", ",", "params", ":", "PhysicsParams", ",", "stats", ":", "ModelStats", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "channel", "=", "Channel", "(", "params", ".", "channel_params", ")", "\n", "\n", "self", ".", "params", "=", "params", "\n", "\n", "self", ".", "register_functions", "(", "stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.register_functions": [[28, 37], ["stats.set_evaluation_value_callback", "stats.add_log_data_callback", "stats.add_log_data_callback", "stats.add_log_data_callback", "stats.add_log_data_callback", "stats.add_log_data_callback", "stats.add_log_data_callback"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.set_evaluation_value_callback", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.add_log_data_callback", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.add_log_data_callback", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.add_log_data_callback", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.add_log_data_callback", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.add_log_data_callback", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.add_log_data_callback"], ["", "def", "register_functions", "(", "self", ",", "stats", ":", "ModelStats", ")", ":", "\n", "        ", "stats", ".", "set_evaluation_value_callback", "(", "self", ".", "get_cral", ")", "\n", "\n", "stats", ".", "add_log_data_callback", "(", "'cral'", ",", "self", ".", "get_cral", ")", "\n", "stats", ".", "add_log_data_callback", "(", "'cr'", ",", "self", ".", "get_collection_ratio", ")", "\n", "stats", ".", "add_log_data_callback", "(", "'successful_landing'", ",", "self", ".", "has_landed", ")", "\n", "stats", ".", "add_log_data_callback", "(", "'boundary_counter'", ",", "self", ".", "get_boundary_counter", ")", "\n", "stats", ".", "add_log_data_callback", "(", "'landing_attempts'", ",", "self", ".", "get_landing_attempts", ")", "\n", "stats", ".", "add_log_data_callback", "(", "'movement_ratio'", ",", "self", ".", "get_movement_ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.reset": [[38, 42], ["src.base.GridPhysics.GridPhysics.reset", "Physics.Physics.channel.reset"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridRewards.GridRewards.reset", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridRewards.GridRewards.reset"], ["", "def", "reset", "(", "self", ",", "state", ":", "State", ")", ":", "\n", "        ", "GridPhysics", ".", "reset", "(", "self", ",", "state", ")", "\n", "\n", "self", ".", "channel", ".", "reset", "(", "self", ".", "state", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.step": [[43, 50], ["Physics.Physics.movement_step", "Physics.Physics.comm_step"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridPhysics.GridPhysics.movement_step", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.comm_step"], ["", "def", "step", "(", "self", ",", "action", ":", "GridActions", ")", ":", "\n", "        ", "old_position", "=", "self", ".", "state", ".", "position", "\n", "self", ".", "movement_step", "(", "action", ")", "\n", "if", "not", "self", ".", "state", ".", "terminal", ":", "\n", "            ", "self", ".", "comm_step", "(", "old_position", ")", "\n", "\n", "", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.comm_step": [[51, 69], ["list", "device_list.get_collected_map", "device_list.get_data_map", "max", "Physics.Physics.state.set_device_com", "reversed", "device_list.get_best_data_rate", "device_list.collect_data", "indices.append", "set", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_collected_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_data_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.set_device_com", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_best_data_rate", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.collect_data"], ["", "def", "comm_step", "(", "self", ",", "old_position", ")", ":", "\n", "        ", "positions", "=", "list", "(", "\n", "reversed", "(", "np", ".", "linspace", "(", "self", ".", "state", ".", "position", ",", "old_position", ",", "num", "=", "self", ".", "params", ".", "comm_steps", ",", "endpoint", "=", "False", ")", ")", ")", "\n", "\n", "indices", "=", "[", "]", "\n", "device_list", "=", "self", ".", "state", ".", "device_list", "\n", "for", "position", "in", "positions", ":", "\n", "            ", "data_rate", ",", "idx", "=", "device_list", ".", "get_best_data_rate", "(", "position", ",", "self", ".", "channel", ")", "\n", "device_list", ".", "collect_data", "(", "data_rate", ",", "idx", ")", "\n", "indices", ".", "append", "(", "idx", ")", "\n", "\n", "", "self", ".", "state", ".", "collected", "=", "device_list", ".", "get_collected_map", "(", "self", ".", "state", ".", "shape", ")", "\n", "self", ".", "state", ".", "device_map", "=", "device_list", ".", "get_data_map", "(", "self", ".", "state", ".", "shape", ")", "\n", "\n", "idx", "=", "max", "(", "set", "(", "indices", ")", ",", "key", "=", "indices", ".", "count", ")", "\n", "self", ".", "state", ".", "set_device_com", "(", "idx", ")", "\n", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.get_example_action": [[70, 72], ["None"], "methods", ["None"], ["", "def", "get_example_action", "(", "self", ")", ":", "\n", "        ", "return", "GridActions", ".", "HOVER", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.is_in_landing_zone": [[73, 75], ["Physics.Physics.state.is_in_landing_zone"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.is_in_landing_zone"], ["", "def", "is_in_landing_zone", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", ".", "is_in_landing_zone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.get_collection_ratio": [[76, 78], ["Physics.Physics.state.get_collection_ratio"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.get_collection_ratio"], ["", "def", "get_collection_ratio", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", ".", "get_collection_ratio", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.get_movement_budget_used": [[79, 81], ["sum", "sum"], "methods", ["None"], ["", "def", "get_movement_budget_used", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "state", ".", "initial_movement_budgets", ")", "-", "sum", "(", "self", ".", "state", ".", "movement_budgets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.get_max_rate": [[82, 84], ["Physics.Physics.channel.get_max_rate"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Channel.Channel.get_max_rate"], ["", "def", "get_max_rate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "channel", ".", "get_max_rate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.get_average_data_rate": [[85, 87], ["Physics.Physics.state.get_collected_data", "Physics.Physics.get_movement_budget_used"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_collected_data", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.get_movement_budget_used"], ["", "def", "get_average_data_rate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", ".", "get_collected_data", "(", ")", "/", "self", ".", "get_movement_budget_used", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.get_cral": [[88, 90], ["Physics.Physics.get_collection_ratio"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.get_collection_ratio"], ["", "def", "get_cral", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_collection_ratio", "(", ")", "*", "self", ".", "state", ".", "all_landed", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.get_boundary_counter": [[91, 93], ["None"], "methods", ["None"], ["", "def", "get_boundary_counter", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "boundary_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.get_landing_attempts": [[94, 96], ["None"], "methods", ["None"], ["", "def", "get_landing_attempts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "landing_attempts", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.get_movement_ratio": [[97, 99], ["float", "float", "Physics.Physics.get_movement_budget_used", "sum"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.get_movement_budget_used"], ["", "def", "get_movement_ratio", "(", "self", ")", ":", "\n", "        ", "return", "float", "(", "self", ".", "get_movement_budget_used", "(", ")", ")", "/", "float", "(", "sum", "(", "self", ".", "state", ".", "initial_movement_budgets", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.has_landed": [[100, 102], ["None"], "methods", ["None"], ["", "def", "has_landed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", ".", "all_landed", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Channel.ChannelParams.__init__": [[6, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "cell_edge_snr", "=", "-", "25", "# in dB", "\n", "self", ".", "los_path_loss_exp", "=", "2.27", "\n", "self", ".", "nlos_path_loss_exp", "=", "3.64", "\n", "self", ".", "uav_altitude", "=", "10.0", "# in m", "\n", "self", ".", "cell_size", "=", "10.0", "# in m", "\n", "self", ".", "los_shadowing_variance", "=", "2.0", "\n", "self", ".", "nlos_shadowing_variance", "=", "5.0", "\n", "self", ".", "map_path", "=", "\"res/manhattan32.png\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Channel.Channel.__init__": [[18, 25], ["src.Map.Shadowing.load_or_create_shadowing"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Shadowing.load_or_create_shadowing"], ["    ", "def", "__init__", "(", "self", ",", "params", ":", "ChannelParams", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "self", ".", "_norm_distance", "=", "None", "\n", "self", ".", "los_norm_factor", "=", "None", "\n", "self", ".", "los_shadowing_sigma", "=", "None", "\n", "self", ".", "nlos_shadowing_sigma", "=", "None", "\n", "self", ".", "total_shadow_map", "=", "load_or_create_shadowing", "(", "self", ".", "params", ".", "map_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Channel.Channel.reset": [[26, 32], ["numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "area_size", ")", ":", "\n", "        ", "self", ".", "_norm_distance", "=", "np", ".", "sqrt", "(", "2", ")", "*", "0.5", "*", "area_size", "*", "self", ".", "params", ".", "cell_size", "\n", "self", ".", "los_norm_factor", "=", "10", "**", "(", "self", ".", "params", ".", "cell_edge_snr", "/", "10", ")", "/", "(", "\n", "self", ".", "_norm_distance", "**", "(", "-", "self", ".", "params", ".", "los_path_loss_exp", ")", ")", "\n", "self", ".", "los_shadowing_sigma", "=", "np", ".", "sqrt", "(", "self", ".", "params", ".", "los_shadowing_variance", ")", "\n", "self", ".", "nlos_shadowing_sigma", "=", "np", ".", "sqrt", "(", "self", ".", "params", ".", "nlos_shadowing_variance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Channel.Channel.get_max_rate": [[33, 41], ["numpy.log2"], "methods", ["None"], ["", "def", "get_max_rate", "(", "self", ")", ":", "\n", "        ", "dist", "=", "self", ".", "params", ".", "uav_altitude", "\n", "\n", "snr", "=", "self", ".", "los_norm_factor", "*", "dist", "**", "(", "-", "self", ".", "params", ".", "los_path_loss_exp", ")", "\n", "\n", "rate", "=", "np", ".", "log2", "(", "1", "+", "snr", ")", "\n", "\n", "return", "rate", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Channel.Channel.compute_rate": [[42, 59], ["numpy.sqrt", "numpy.log2", "int", "int", "int", "int", "round", "round", "round", "round", "numpy.random.normal", "numpy.random.normal"], "methods", ["None"], ["", "def", "compute_rate", "(", "self", ",", "uav_pos", ",", "device_pos", ")", ":", "\n", "        ", "dist", "=", "np", ".", "sqrt", "(", "\n", "(", "(", "device_pos", "[", "0", "]", "-", "uav_pos", "[", "0", "]", ")", "*", "self", ".", "params", ".", "cell_size", ")", "**", "2", "+", "\n", "(", "(", "device_pos", "[", "1", "]", "-", "uav_pos", "[", "1", "]", ")", "*", "self", ".", "params", ".", "cell_size", ")", "**", "2", "+", "\n", "self", ".", "params", ".", "uav_altitude", "**", "2", ")", "\n", "\n", "if", "self", ".", "total_shadow_map", "[", "int", "(", "round", "(", "device_pos", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "device_pos", "[", "0", "]", ")", ")", ",", "\n", "int", "(", "round", "(", "uav_pos", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "uav_pos", "[", "0", "]", ")", ")", "]", ":", "\n", "            ", "snr", "=", "self", ".", "los_norm_factor", "*", "dist", "**", "(", "\n", "-", "self", ".", "params", ".", "nlos_path_loss_exp", ")", "*", "10", "**", "(", "np", ".", "random", ".", "normal", "(", "0.", ",", "self", ".", "nlos_shadowing_sigma", ")", "/", "10", ")", "\n", "", "else", ":", "\n", "            ", "snr", "=", "self", ".", "los_norm_factor", "*", "dist", "**", "(", "\n", "-", "self", ".", "params", ".", "los_path_loss_exp", ")", "*", "10", "**", "(", "np", ".", "random", ".", "normal", "(", "0.", ",", "self", ".", "los_shadowing_sigma", ")", "/", "10", ")", "\n", "\n", "", "rate", "=", "np", ".", "log2", "(", "1", "+", "snr", ")", "\n", "\n", "return", "rate", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Display.DHDisplay.__init__": [[12, 15], ["src.base.BaseDisplay.BaseDisplay.__init__"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channel", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Display.DHDisplay.set_channel": [[16, 18], ["None"], "methods", ["None"], ["", "def", "set_channel", "(", "self", ",", "channel", ")", ":", "\n", "        ", "self", ".", "channel", "=", "channel", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Display.DHDisplay.display_episode": [[19, 93], ["matplotlib.subplots", "matplotlib.subplots", "numpy.ones", "first_state.device_list.get_devices", "Display.DHDisplay.create_grid_image", "first_state.device_list.get_devices", "Display.DHDisplay.draw_start_and_end", "device_list.get_devices", "numpy.arange", "matplotlib.sca", "matplotlib.sca", "ax_bar.barh", "ax_bar.barh", "ax_bar.set_yticks", "ax_bar.set_yticklabels", "ax_bar.invert_yaxis", "ax_bar.set_xlabel", "ax_bar.set_aspect", "io.BytesIO", "matplotlib.savefig", "matplotlib.savefig", "io.BytesIO.seek", "matplotlib.close", "matplotlib.close", "tensorflow.image.decode_png", "tensorflow.expand_dims", "env_map.get_size", "ax_traj.add_patch", "Display.DHDisplay.draw_movement", "len", "ax[].get_window_extent().transformed", "fig.savefig", "matplotlib.show", "matplotlib.show", "io.BytesIO.getvalue", "matplotlib.Circle", "matplotlib.Circle", "device_list.get_total_data", "device_list.get_collected_data", "fig.dpi_scale_trans.inverted", "numpy.diff", "ax[].get_window_extent", "numpy.array", "numpy.array", "numpy.diff", "ax_bar.get_ylim", "ax_bar.get_xlim"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_devices", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseDisplay.BaseDisplay.create_grid_image", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_devices", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseDisplay.BaseDisplay.draw_start_and_end", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_devices", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.Map.get_size", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseDisplay.BaseDisplay.draw_movement", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_total_data", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_collected_data"], ["", "def", "display_episode", "(", "self", ",", "env_map", ":", "Map", ",", "trajectory", ",", "plot", "=", "False", ",", "save_path", "=", "None", ")", ":", "\n", "\n", "        ", "first_state", "=", "trajectory", "[", "0", "]", "[", "0", "]", "\n", "final_state", "=", "trajectory", "[", "-", "1", "]", "[", "3", "]", "\n", "\n", "fig_size", "=", "5.5", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "2", ",", "figsize", "=", "[", "2", "*", "fig_size", ",", "fig_size", "]", ")", "\n", "ax_traj", "=", "ax", "[", "0", "]", "\n", "ax_bar", "=", "ax", "[", "1", "]", "\n", "\n", "value_step", "=", "0.4", "/", "first_state", ".", "device_list", ".", "num_devices", "\n", "# Start with value of 200", "\n", "value_map", "=", "np", ".", "ones", "(", "env_map", ".", "get_size", "(", ")", ",", "dtype", "=", "float", ")", "\n", "for", "device", "in", "first_state", ".", "device_list", ".", "get_devices", "(", ")", ":", "\n", "            ", "value_map", "-=", "value_step", "*", "self", ".", "channel", ".", "total_shadow_map", "[", "device", ".", "position", "[", "1", "]", ",", "device", ".", "position", "[", "0", "]", "]", "\n", "\n", "", "self", ".", "create_grid_image", "(", "ax", "=", "ax_traj", ",", "env_map", "=", "env_map", ",", "value_map", "=", "value_map", ")", "\n", "\n", "for", "device", "in", "first_state", ".", "device_list", ".", "get_devices", "(", ")", ":", "\n", "            ", "ax_traj", ".", "add_patch", "(", "\n", "patches", ".", "Circle", "(", "np", ".", "array", "(", "device", ".", "position", ")", "+", "np", ".", "array", "(", "(", "0.5", ",", "0.5", ")", ")", ",", "0.4", ",", "facecolor", "=", "device", ".", "color", ",", "\n", "edgecolor", "=", "\"black\"", ")", ")", "\n", "\n", "", "self", ".", "draw_start_and_end", "(", "trajectory", ")", "\n", "\n", "for", "exp", "in", "trajectory", ":", "\n", "            ", "idx", "=", "exp", "[", "3", "]", ".", "device_coms", "[", "exp", "[", "0", "]", ".", "active_agent", "]", "\n", "if", "idx", "==", "-", "1", ":", "\n", "                ", "color", "=", "\"black\"", "\n", "", "else", ":", "\n", "                ", "color", "=", "exp", "[", "0", "]", ".", "device_list", ".", "devices", "[", "idx", "]", ".", "color", "\n", "\n", "", "self", ".", "draw_movement", "(", "exp", "[", "0", "]", ".", "position", ",", "exp", "[", "3", "]", ".", "position", ",", "color", "=", "color", ")", "\n", "\n", "# Add bar plots", "\n", "", "device_list", "=", "final_state", ".", "device_list", "\n", "devices", "=", "device_list", ".", "get_devices", "(", ")", "\n", "colors", "=", "[", "device", ".", "color", "for", "device", "in", "devices", "]", "\n", "names", "=", "[", "\"total\"", "]", "+", "colors", "\n", "colors", "=", "[", "\"black\"", "]", "+", "colors", "\n", "datas", "=", "[", "device_list", ".", "get_total_data", "(", ")", "]", "+", "[", "device", ".", "data", "for", "device", "in", "devices", "]", "\n", "collected_datas", "=", "[", "device_list", ".", "get_collected_data", "(", ")", "]", "+", "[", "device", ".", "collected_data", "for", "device", "in", "devices", "]", "\n", "y_pos", "=", "np", ".", "arange", "(", "len", "(", "colors", ")", ")", "\n", "\n", "plt", ".", "sca", "(", "ax_bar", ")", "\n", "ax_bar", ".", "barh", "(", "y_pos", ",", "datas", ")", "\n", "ax_bar", ".", "barh", "(", "y_pos", ",", "collected_datas", ")", "\n", "ax_bar", ".", "set_yticks", "(", "y_pos", ")", "\n", "ax_bar", ".", "set_yticklabels", "(", "names", ")", "\n", "ax_bar", ".", "invert_yaxis", "(", ")", "\n", "ax_bar", ".", "set_xlabel", "(", "\"Data\"", ")", "\n", "ax_bar", ".", "set_aspect", "(", "-", "np", ".", "diff", "(", "ax_bar", ".", "get_xlim", "(", ")", ")", "[", "0", "]", "/", "np", ".", "diff", "(", "ax_bar", ".", "get_ylim", "(", ")", ")", "[", "0", "]", ")", "\n", "\n", "# save image and return", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "# save just the trajectory subplot 0", "\n", "            ", "extent", "=", "ax", "[", "0", "]", ".", "get_window_extent", "(", ")", ".", "transformed", "(", "fig", ".", "dpi_scale_trans", ".", "inverted", "(", ")", ")", "\n", "extent", ".", "x0", "-=", "0.3", "\n", "extent", ".", "y0", "-=", "0.1", "\n", "fig", ".", "savefig", "(", "save_path", ",", "bbox_inches", "=", "extent", ",", "\n", "format", "=", "'png'", ",", "dpi", "=", "300", ",", "pad_inches", "=", "1", ")", "\n", "", "if", "plot", ":", "\n", "            ", "plt", ".", "show", "(", ")", "\n", "\n", "# plt.show()", "\n", "", "buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "plt", ".", "savefig", "(", "buf", ",", "format", "=", "'png'", ",", "dpi", "=", "180", ",", "bbox_inches", "=", "'tight'", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "# plt.close(fig=fig)", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "combined_image", "=", "tf", ".", "image", ".", "decode_png", "(", "buf", ".", "getvalue", "(", ")", ",", "channels", "=", "3", ")", "\n", "combined_image", "=", "tf", ".", "expand_dims", "(", "combined_image", ",", "0", ")", "\n", "\n", "return", "combined_image", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.IoTDeviceParams.__init__": [[7, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "position", "=", "(", "0", ",", "0", ")", ",", "color", "=", "'blue'", ",", "data", "=", "15.0", ")", ":", "\n", "        ", "self", ".", "position", "=", "position", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "color", "=", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.IoTDevice.__init__": [[19, 29], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "params", ":", "IoTDeviceParams", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "\n", "self", ".", "position", "=", "params", ".", "position", "# fixed position can be later overwritten in reset", "\n", "self", ".", "color", "=", "params", ".", "color", "\n", "\n", "self", ".", "data", "=", "params", ".", "data", "\n", "# self.data_timeseries = [self.data]", "\n", "# self.data_rate_timeseries = [0]", "\n", "self", ".", "collected_data", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.IoTDevice.collect_data": [[30, 38], ["min"], "methods", ["None"], ["", "def", "collect_data", "(", "self", ",", "collect", ")", ":", "\n", "        ", "if", "collect", "==", "0", ":", "\n", "            ", "return", "1", "\n", "", "c", "=", "min", "(", "collect", ",", "self", ".", "data", "-", "self", ".", "collected_data", ")", "\n", "self", ".", "collected_data", "+=", "c", "\n", "\n", "# return collection ratio, i.e. the percentage of time used for comm", "\n", "return", "c", "/", "collect", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.IoTDevice.depleted": [[39, 42], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "depleted", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", "<=", "self", ".", "collected_data", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.IoTDevice.get_data_rate": [[43, 47], ["channel.compute_rate"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Channel.Channel.compute_rate"], ["", "def", "get_data_rate", "(", "self", ",", "pos", ",", "channel", ":", "Channel", ")", ":", "\n", "        ", "rate", "=", "channel", ".", "compute_rate", "(", "uav_pos", "=", "pos", ",", "device_pos", "=", "self", ".", "position", ")", "\n", "# self.data_rate_timeseries.append(rate)", "\n", "return", "rate", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.__init__": [[54, 56], ["IoTDevice.IoTDevice"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "devices", "=", "[", "IoTDevice", "(", "device", ")", "for", "device", "in", "params", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_data_map": [[57, 64], ["numpy.zeros"], "methods", ["None"], ["", "def", "get_data_map", "(", "self", ",", "shape", ")", ":", "\n", "        ", "data_map", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "float", ")", "\n", "\n", "for", "device", "in", "self", ".", "devices", ":", "\n", "            ", "data_map", "[", "device", ".", "position", "[", "1", "]", ",", "device", ".", "position", "[", "0", "]", "]", "=", "device", ".", "data", "-", "device", ".", "collected_data", "\n", "\n", "", "return", "data_map", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_collected_map": [[65, 72], ["numpy.zeros"], "methods", ["None"], ["", "def", "get_collected_map", "(", "self", ",", "shape", ")", ":", "\n", "        ", "data_map", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "float", ")", "\n", "\n", "for", "device", "in", "self", ".", "devices", ":", "\n", "            ", "data_map", "[", "device", ".", "position", "[", "1", "]", ",", "device", ".", "position", "[", "0", "]", "]", "=", "device", ".", "collected_data", "\n", "\n", "", "return", "data_map", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_best_data_rate": [[73, 81], ["numpy.array", "numpy.array.any", "numpy.argmax", "device.get_data_rate"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.IoTDevice.get_data_rate"], ["", "def", "get_best_data_rate", "(", "self", ",", "pos", ",", "channel", ":", "Channel", ")", ":", "\n", "        ", "\"\"\"\n        Get the best data rate and the corresponding device index\n        \"\"\"", "\n", "data_rates", "=", "np", ".", "array", "(", "\n", "[", "device", ".", "get_data_rate", "(", "pos", ",", "channel", ")", "if", "not", "device", ".", "depleted", "else", "0", "for", "device", "in", "self", ".", "devices", "]", ")", "\n", "idx", "=", "np", ".", "argmax", "(", "data_rates", ")", "if", "data_rates", ".", "any", "(", ")", "else", "-", "1", "\n", "return", "data_rates", "[", "idx", "]", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.collect_data": [[82, 91], ["IoTDevice.DeviceList.devices[].collect_data"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.collect_data"], ["", "def", "collect_data", "(", "self", ",", "collect", ",", "idx", ")", ":", "\n", "        ", "ratio", "=", "1", "\n", "if", "idx", "!=", "-", "1", ":", "\n", "            ", "ratio", "=", "self", ".", "devices", "[", "idx", "]", ".", "collect_data", "(", "collect", ")", "\n", "\n", "# for device in self.devices:", "\n", "#     device.log_data()", "\n", "\n", "", "return", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_devices": [[92, 94], ["None"], "methods", ["None"], ["", "def", "get_devices", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "devices", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_device": [[95, 97], ["None"], "methods", ["None"], ["", "def", "get_device", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "devices", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_total_data": [[98, 100], ["sum", "list"], "methods", ["None"], ["", "def", "get_total_data", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "list", "(", "[", "device", ".", "data", "for", "device", "in", "self", ".", "devices", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.get_collected_data": [[101, 103], ["sum", "list"], "methods", ["None"], ["", "def", "get_collected_data", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "list", "(", "[", "device", ".", "collected_data", "for", "device", "in", "self", ".", "devices", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.IoTDevice.DeviceList.num_devices": [[104, 107], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_devices", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "devices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.DeviceManager.DeviceManagerParams.__init__": [[11, 16], ["src.IoTDevice.IoTDeviceParams"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "device_count_range", "=", "(", "2", ",", "5", ")", "\n", "self", ".", "data_range", "=", "(", "5.0", ",", "20.0", ")", "\n", "self", ".", "fixed_devices", "=", "False", "\n", "self", ".", "devices", "=", "IoTDeviceParams", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.DeviceManager.DeviceManager.__init__": [[23, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "params", ":", "DeviceManagerParams", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.DeviceManager.DeviceManager.generate_device_list": [[26, 41], ["numpy.random.randint", "numpy.random.choice", "numpy.random.uniform", "DeviceManager.DeviceManager.generate_device_list_from_args", "src.IoTDevice.DeviceList", "range", "len"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.DeviceManager.DeviceManager.generate_device_list_from_args"], ["", "def", "generate_device_list", "(", "self", ",", "positions_vector", ")", ":", "\n", "        ", "if", "self", ".", "params", ".", "fixed_devices", ":", "\n", "            ", "return", "DeviceList", "(", "self", ".", "params", ".", "devices", ")", "\n", "\n", "# Roll number of devices", "\n", "", "device_count", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "params", ".", "device_count_range", "[", "0", "]", ",", "self", ".", "params", ".", "device_count_range", "[", "1", "]", "+", "1", ")", "\n", "\n", "# Roll Positions", "\n", "position_idcs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "positions_vector", ")", ")", ",", "device_count", ",", "replace", "=", "False", ")", "\n", "positions", "=", "[", "positions_vector", "[", "idx", "]", "for", "idx", "in", "position_idcs", "]", "\n", "\n", "# Roll Data", "\n", "datas", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "params", ".", "data_range", "[", "0", "]", ",", "self", ".", "params", ".", "data_range", "[", "1", "]", ",", "device_count", ")", "\n", "\n", "return", "self", ".", "generate_device_list_from_args", "(", "device_count", ",", "positions", ",", "datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.DeviceManager.DeviceManager.generate_device_list_from_args": [[42, 53], ["src.IoTDevice.DeviceList", "src.IoTDevice.IoTDeviceParams", "max", "range", "len", "len"], "methods", ["None"], ["", "def", "generate_device_list_from_args", "(", "self", ",", "device_count", ",", "positions", ",", "datas", ")", ":", "\n", "\n", "# get colors", "\n", "        ", "colors", "=", "ColorMap", "[", "0", ":", "max", "(", "device_count", ",", "len", "(", "ColorMap", ")", ")", "]", "\n", "\n", "params", "=", "[", "IoTDeviceParams", "(", "position", "=", "positions", "[", "k", "]", ",", "\n", "data", "=", "datas", "[", "k", "]", ",", "\n", "color", "=", "colors", "[", "k", "%", "len", "(", "ColorMap", ")", "]", ")", "\n", "for", "k", "in", "range", "(", "device_count", ")", "]", "\n", "\n", "return", "DeviceList", "(", "params", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.StateUtils.pad_centered": [[5, 17], ["math.ceil", "math.ceil", "numpy.pad"], "function", ["None"], ["def", "pad_centered", "(", "state", ",", "map_in", ",", "pad_value", ")", ":", "\n", "    ", "padding_rows", "=", "math", ".", "ceil", "(", "state", ".", "no_fly_zone", ".", "shape", "[", "0", "]", "/", "2.0", ")", "\n", "padding_cols", "=", "math", ".", "ceil", "(", "state", ".", "no_fly_zone", ".", "shape", "[", "1", "]", "/", "2.0", ")", "\n", "position_x", ",", "position_y", "=", "state", ".", "position", "\n", "position_row_offset", "=", "padding_rows", "-", "position_y", "\n", "position_col_offset", "=", "padding_cols", "-", "position_x", "\n", "return", "np", ".", "pad", "(", "map_in", ",", "\n", "pad_width", "=", "[", "[", "padding_rows", "+", "position_row_offset", "-", "1", ",", "padding_rows", "-", "position_row_offset", "]", ",", "\n", "[", "padding_cols", "+", "position_col_offset", "-", "1", ",", "padding_cols", "-", "position_col_offset", "]", ",", "\n", "[", "0", ",", "0", "]", "]", ",", "\n", "mode", "=", "'constant'", ",", "\n", "constant_values", "=", "pad_value", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Environment.EnvironmentParams.__init__": [[18, 25], ["src.base.Environment.BaseEnvironmentParams.__init__", "src.Grid.GridParams", "src.Rewards.RewardParams", "src.DDQN.Trainer.DDQNTrainerParams", "src.DDQN.Agent.DDQNAgentParams", "src.Physics.PhysicsParams"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "grid_params", "=", "GridParams", "(", ")", "\n", "self", ".", "reward_params", "=", "RewardParams", "(", ")", "\n", "self", ".", "trainer_params", "=", "DDQNTrainerParams", "(", ")", "\n", "self", ".", "agent_params", "=", "DDQNAgentParams", "(", ")", "\n", "self", ".", "physics_params", "=", "PhysicsParams", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Environment.Environment.__init__": [[28, 45], ["src.Display.DHDisplay", "src.base.Environment.BaseEnvironment.__init__", "src.Grid.Grid", "src.Rewards.Rewards", "src.Physics.Physics", "src.DDQN.Agent.DDQNAgent", "src.DDQN.Trainer.DDQNTrainer", "Environment.Environment.display.set_channel", "Environment.Environment.grid.get_example_state", "Environment.Environment.physics.get_example_action"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Display.DHDisplay.set_channel", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Grid.Grid.get_example_state", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.get_example_action"], ["    ", "def", "__init__", "(", "self", ",", "params", ":", "EnvironmentParams", ")", ":", "\n", "        ", "self", ".", "display", "=", "DHDisplay", "(", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "self", ".", "display", ")", "\n", "\n", "self", ".", "grid", "=", "Grid", "(", "params", ".", "grid_params", ",", "stats", "=", "self", ".", "stats", ")", "\n", "self", ".", "rewards", "=", "Rewards", "(", "params", ".", "reward_params", ",", "stats", "=", "self", ".", "stats", ")", "\n", "self", ".", "physics", "=", "Physics", "(", "params", "=", "params", ".", "physics_params", ",", "stats", "=", "self", ".", "stats", ")", "\n", "self", ".", "agent", "=", "DDQNAgent", "(", "params", ".", "agent_params", ",", "self", ".", "grid", ".", "get_example_state", "(", ")", ",", "self", ".", "physics", ".", "get_example_action", "(", ")", ",", "\n", "stats", "=", "self", ".", "stats", ")", "\n", "self", ".", "trainer", "=", "DDQNTrainer", "(", "params", ".", "trainer_params", ",", "agent", "=", "self", ".", "agent", ")", "\n", "\n", "self", ".", "display", ".", "set_channel", "(", "self", ".", "physics", ".", "channel", ")", "\n", "\n", "self", ".", "first_action", "=", "True", "\n", "self", ".", "last_actions", "=", "[", "]", "\n", "self", ".", "last_rewards", "=", "[", "]", "\n", "self", ".", "last_states", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Environment.Environment.test_episode": [[46, 76], ["copy.deepcopy", "Environment.Environment.stats.on_episode_begin", "Environment.Environment.stats.on_episode_end", "Environment.Environment.stats.log_testing_data", "Environment.Environment.init_episode", "range", "Environment.Environment.agent.get_exploitation_action_target", "copy.deepcopy", "Environment.Environment.physics.step", "Environment.Environment.rewards.calculate_reward", "Environment.Environment.stats.add_experience", "src.base.GridActions.GridActions", "Environment.Environment.rewards.calculate_reward", "Environment.Environment.stats.add_experience", "src.base.GridActions.GridActions", "src.base.GridActions.GridActions", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.on_episode_begin", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.on_episode_end", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.log_testing_data", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.init_episode", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.get_exploitation_action_target", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.step", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Rewards.Rewards.calculate_reward", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Trainer.DDQNTrainer.add_experience", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Rewards.Rewards.calculate_reward", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Trainer.DDQNTrainer.add_experience"], ["", "def", "test_episode", "(", "self", ")", ":", "\n", "        ", "state", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_episode", "(", ")", ")", "\n", "self", ".", "stats", ".", "on_episode_begin", "(", "self", ".", "episode_count", ")", "\n", "first_action", "=", "True", "\n", "while", "not", "state", ".", "all_terminal", ":", "\n", "            ", "for", "state", ".", "active_agent", "in", "range", "(", "state", ".", "num_agents", ")", ":", "\n", "                ", "if", "state", ".", "terminal", ":", "\n", "                    ", "continue", "\n", "", "action", "=", "self", ".", "agent", ".", "get_exploitation_action_target", "(", "state", ")", "\n", "if", "not", "first_action", ":", "\n", "                    ", "reward", "=", "self", ".", "rewards", ".", "calculate_reward", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "\n", "GridActions", "(", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ")", ",", "state", ")", "\n", "self", ".", "stats", ".", "add_experience", "(", "\n", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ",", "reward", ",", "\n", "copy", ".", "deepcopy", "(", "state", ")", ")", ")", "\n", "\n", "", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", "=", "copy", ".", "deepcopy", "(", "state", ")", "\n", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", "=", "action", "\n", "state", "=", "self", ".", "physics", ".", "step", "(", "GridActions", "(", "action", ")", ")", "\n", "if", "state", ".", "terminal", ":", "\n", "                    ", "reward", "=", "self", ".", "rewards", ".", "calculate_reward", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "\n", "GridActions", "(", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ")", ",", "state", ")", "\n", "self", ".", "stats", ".", "add_experience", "(", "\n", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ",", "reward", ",", "\n", "copy", ".", "deepcopy", "(", "state", ")", ")", ")", "\n", "\n", "", "", "first_action", "=", "False", "\n", "\n", "", "self", ".", "stats", ".", "on_episode_end", "(", "self", ".", "episode_count", ")", "\n", "self", ".", "stats", ".", "log_testing_data", "(", "step", "=", "self", ".", "step_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Environment.Environment.test_scenario": [[77, 85], ["copy.deepcopy", "Environment.Environment.init_episode", "range", "Environment.Environment.agent.get_exploitation_action_target", "Environment.Environment.physics.step", "src.base.GridActions.GridActions"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.init_episode", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.get_exploitation_action_target", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.step"], ["", "def", "test_scenario", "(", "self", ",", "scenario", ")", ":", "\n", "        ", "state", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_episode", "(", "scenario", ")", ")", "\n", "while", "not", "state", ".", "all_terminal", ":", "\n", "            ", "for", "state", ".", "active_agent", "in", "range", "(", "state", ".", "num_agents", ")", ":", "\n", "                ", "if", "state", ".", "terminal", ":", "\n", "                    ", "continue", "\n", "", "action", "=", "self", ".", "agent", ".", "get_exploitation_action_target", "(", "state", ")", "\n", "state", "=", "self", ".", "physics", ".", "step", "(", "GridActions", "(", "action", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Environment.Environment.step": [[86, 118], ["range", "copy.deepcopy", "Environment.Environment.physics.step", "Environment.Environment.agent.get_random_action", "Environment.Environment.agent.act", "Environment.Environment.rewards.calculate_reward", "Environment.Environment.trainer.add_experience", "Environment.Environment.stats.add_experience", "src.base.GridActions.GridActions", "Environment.Environment.rewards.calculate_reward", "Environment.Environment.trainer.add_experience", "Environment.Environment.stats.add_experience", "src.base.GridActions.GridActions", "src.base.GridActions.GridActions", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.step", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.get_random_action", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.act", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Rewards.Rewards.calculate_reward", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Trainer.DDQNTrainer.add_experience", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Trainer.DDQNTrainer.add_experience", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Rewards.Rewards.calculate_reward", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Trainer.DDQNTrainer.add_experience", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Trainer.DDQNTrainer.add_experience"], ["", "", "", "def", "step", "(", "self", ",", "state", ":", "State", ",", "random", "=", "False", ")", ":", "\n", "        ", "for", "state", ".", "active_agent", "in", "range", "(", "state", ".", "num_agents", ")", ":", "\n", "            ", "if", "state", ".", "terminal", ":", "\n", "                ", "continue", "\n", "", "if", "random", ":", "\n", "                ", "action", "=", "self", ".", "agent", ".", "get_random_action", "(", ")", "\n", "", "else", ":", "\n", "                ", "action", "=", "self", ".", "agent", ".", "act", "(", "state", ")", "\n", "", "if", "not", "self", ".", "first_action", ":", "\n", "                ", "reward", "=", "self", ".", "rewards", ".", "calculate_reward", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "\n", "GridActions", "(", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ")", ",", "state", ")", "\n", "self", ".", "trainer", ".", "add_experience", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ",", "\n", "reward", ",", "state", ")", "\n", "self", ".", "stats", ".", "add_experience", "(", "\n", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ",", "reward", ",", "\n", "copy", ".", "deepcopy", "(", "state", ")", ")", ")", "\n", "\n", "", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", "=", "copy", ".", "deepcopy", "(", "state", ")", "\n", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", "=", "action", "\n", "state", "=", "self", ".", "physics", ".", "step", "(", "GridActions", "(", "action", ")", ")", "\n", "if", "state", ".", "terminal", ":", "\n", "                ", "reward", "=", "self", ".", "rewards", ".", "calculate_reward", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "\n", "GridActions", "(", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ")", ",", "state", ")", "\n", "self", ".", "trainer", ".", "add_experience", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ",", "\n", "reward", ",", "state", ")", "\n", "self", ".", "stats", ".", "add_experience", "(", "\n", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ",", "reward", ",", "\n", "copy", ".", "deepcopy", "(", "state", ")", ")", ")", "\n", "\n", "", "", "self", ".", "step_count", "+=", "1", "\n", "self", ".", "first_action", "=", "False", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Environment.Environment.init_episode": [[119, 125], ["super().init_episode"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.init_episode"], ["", "def", "init_episode", "(", "self", ",", "init_state", "=", "None", ")", ":", "\n", "        ", "state", "=", "super", "(", ")", ".", "init_episode", "(", "init_state", ")", "\n", "self", ".", "last_states", "=", "[", "None", "]", "*", "state", ".", "num_agents", "\n", "self", ".", "last_actions", "=", "[", "None", "]", "*", "state", ".", "num_agents", "\n", "self", ".", "first_action", "=", "True", "\n", "return", "state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Rewards.RewardParams.__init__": [[7, 10], ["src.base.GridRewards.GridRewardParams.__init__"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_multiplier", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Rewards.Rewards.__init__": [[16, 20], ["src.base.GridRewards.GridRewards.__init__", "Rewards.Rewards.reset"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.__init__", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridRewards.GridRewards.reset"], ["def", "__init__", "(", "self", ",", "reward_params", ":", "RewardParams", ",", "stats", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "stats", ")", "\n", "self", ".", "params", "=", "reward_params", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Rewards.Rewards.calculate_reward": [[21, 31], ["Rewards.Rewards.calculate_motion_rewards", "state.get_remaining_data", "next_state.get_remaining_data"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridRewards.GridRewards.calculate_motion_rewards", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_remaining_data", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_remaining_data"], ["", "def", "calculate_reward", "(", "self", ",", "state", ":", "State", ",", "action", ":", "GridActions", ",", "next_state", ":", "State", ")", ":", "\n", "        ", "reward", "=", "self", ".", "calculate_motion_rewards", "(", "state", ",", "action", ",", "next_state", ")", "\n", "\n", "# Reward the collected data", "\n", "reward", "+=", "self", ".", "params", ".", "data_multiplier", "*", "(", "state", ".", "get_remaining_data", "(", ")", "-", "next_state", ".", "get_remaining_data", "(", ")", ")", "\n", "\n", "# Cumulative reward", "\n", "self", ".", "cumulative_reward", "+=", "reward", "\n", "\n", "return", "reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Trainer.DDQNTrainerParams.__init__": [[7, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "128", "\n", "self", ".", "num_steps", "=", "1e6", "\n", "self", ".", "rm_pre_fill_ratio", "=", "0.5", "\n", "self", ".", "rm_pre_fill_random", "=", "True", "\n", "self", ".", "eval_period", "=", "5", "\n", "self", ".", "rm_size", "=", "50000", "\n", "self", ".", "load_model", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Trainer.DDQNTrainer.__init__": [[18, 29], ["src.DDQN.ReplayMemory.ReplayMemory", "print", "Trainer.DDQNTrainer.agent.load_weights"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.load_weights"], ["    ", "def", "__init__", "(", "self", ",", "params", ":", "DDQNTrainerParams", ",", "agent", ":", "DDQNAgent", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "self", ".", "replay_memory", "=", "ReplayMemory", "(", "size", "=", "params", ".", "rm_size", ")", "\n", "self", ".", "agent", "=", "agent", "\n", "self", ".", "use_scalar_input", "=", "self", ".", "agent", ".", "params", ".", "use_scalar_input", "\n", "\n", "if", "self", ".", "params", ".", "load_model", "!=", "\"\"", ":", "\n", "            ", "print", "(", "\"Loading model\"", ",", "self", ".", "params", ".", "load_model", ",", "\"for agent\"", ")", "\n", "self", ".", "agent", ".", "load_weights", "(", "self", ".", "params", ".", "load_model", ")", "\n", "\n", "", "self", ".", "prefill_bar", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Trainer.DDQNTrainer.add_experience": [[30, 51], ["Trainer.DDQNTrainer.replay_memory.store", "Trainer.DDQNTrainer.replay_memory.store", "state.get_device_scalars", "state.get_uav_scalars", "state.get_scalars", "next_state.get_device_scalars", "next_state.get_uav_scalars", "next_state.get_scalars", "state.get_boolean_map", "state.get_float_map", "state.get_scalars", "next_state.get_boolean_map", "next_state.get_float_map", "next_state.get_scalars"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.store", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.store", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_device_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_uav_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_device_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_uav_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_boolean_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_float_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_boolean_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_float_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars"], ["", "def", "add_experience", "(", "self", ",", "state", ",", "action", ",", "reward", ",", "next_state", ")", ":", "\n", "        ", "if", "self", ".", "use_scalar_input", ":", "\n", "            ", "self", ".", "replay_memory", ".", "store", "(", "(", "state", ".", "get_device_scalars", "(", "self", ".", "agent", ".", "params", ".", "max_devices", ",", "self", ".", "agent", ".", "params", ".", "relative_scalars", ")", ",", "\n", "state", ".", "get_uav_scalars", "(", "self", ".", "agent", ".", "params", ".", "max_uavs", ",", "self", ".", "agent", ".", "params", ".", "relative_scalars", ")", ",", "\n", "state", ".", "get_scalars", "(", "give_position", "=", "True", ")", ",", "\n", "action", ",", "\n", "reward", ",", "\n", "next_state", ".", "get_device_scalars", "(", "self", ".", "agent", ".", "params", ".", "max_devices", ",", "self", ".", "agent", ".", "params", ".", "relative_scalars", ")", ",", "\n", "next_state", ".", "get_uav_scalars", "(", "self", ".", "agent", ".", "params", ".", "max_uavs", ",", "self", ".", "agent", ".", "params", ".", "relative_scalars", ")", ",", "\n", "next_state", ".", "get_scalars", "(", "give_position", "=", "True", ")", ",", "\n", "next_state", ".", "terminal", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "replay_memory", ".", "store", "(", "(", "state", ".", "get_boolean_map", "(", ")", ",", "\n", "state", ".", "get_float_map", "(", ")", ",", "\n", "state", ".", "get_scalars", "(", ")", ",", "\n", "action", ",", "\n", "reward", ",", "\n", "next_state", ".", "get_boolean_map", "(", ")", ",", "\n", "next_state", ".", "get_float_map", "(", ")", ",", "\n", "next_state", ".", "get_scalars", "(", ")", ",", "\n", "next_state", ".", "terminal", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Trainer.DDQNTrainer.train_agent": [[52, 58], ["Trainer.DDQNTrainer.replay_memory.sample", "Trainer.DDQNTrainer.agent.train", "Trainer.DDQNTrainer.replay_memory.get_size"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.sample", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.train", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.Map.get_size"], ["", "", "def", "train_agent", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "params", ".", "batch_size", ">", "self", ".", "replay_memory", ".", "get_size", "(", ")", ":", "\n", "            ", "return", "\n", "", "mini_batch", "=", "self", ".", "replay_memory", ".", "sample", "(", "self", ".", "params", ".", "batch_size", ")", "\n", "\n", "self", ".", "agent", ".", "train", "(", "mini_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Trainer.DDQNTrainer.should_fill_replay_memory": [[59, 73], ["Trainer.DDQNTrainer.prefill_bar.update", "Trainer.DDQNTrainer.replay_memory.get_max_size", "print", "tqdm.tqdm", "Trainer.DDQNTrainer.replay_memory.get_size", "Trainer.DDQNTrainer.prefill_bar.close", "Trainer.DDQNTrainer.replay_memory.get_size"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.get_max_size", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.Map.get_size", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.Map.get_size"], ["", "def", "should_fill_replay_memory", "(", "self", ")", ":", "\n", "        ", "target_size", "=", "self", ".", "replay_memory", ".", "get_max_size", "(", ")", "*", "self", ".", "params", ".", "rm_pre_fill_ratio", "\n", "if", "self", ".", "replay_memory", ".", "get_size", "(", ")", ">=", "target_size", "or", "self", ".", "replay_memory", ".", "full", ":", "\n", "            ", "if", "self", ".", "prefill_bar", ":", "\n", "                ", "self", ".", "prefill_bar", ".", "close", "(", ")", "\n", "", "return", "False", "\n", "\n", "", "if", "self", ".", "prefill_bar", "is", "None", ":", "\n", "            ", "print", "(", "\"Filling replay memory\"", ")", "\n", "self", ".", "prefill_bar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "target_size", ")", "\n", "\n", "", "self", ".", "prefill_bar", ".", "update", "(", "self", ".", "replay_memory", ".", "get_size", "(", ")", "-", "self", ".", "prefill_bar", ".", "n", ")", "\n", "\n", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.__init__": [[23, 29], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "k", "=", "0", "\n", "self", ".", "head", "=", "-", "1", "\n", "self", ".", "full", "=", "False", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "memory", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.initialize": [[30, 32], ["numpy.zeros", "ReplayMemory.type_of", "ReplayMemory.shape"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.type_of", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseState.BaseState.shape"], ["", "def", "initialize", "(", "self", ",", "experience", ")", ":", "\n", "        ", "self", ".", "memory", "=", "[", "np", ".", "zeros", "(", "shape", "=", "[", "self", ".", "size", "]", "+", "shape", "(", "exp", ")", ",", "dtype", "=", "type_of", "(", "exp", ")", ")", "for", "exp", "in", "experience", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.store": [[33, 47], ["zip", "ReplayMemory.ReplayMemory.initialize", "len", "len", "Exception", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.initialize"], ["", "def", "store", "(", "self", ",", "experience", ")", ":", "\n", "        ", "if", "self", ".", "memory", "is", "None", ":", "\n", "            ", "self", ".", "initialize", "(", "experience", ")", "\n", "", "if", "len", "(", "experience", ")", "!=", "len", "(", "self", ".", "memory", ")", ":", "\n", "            ", "raise", "Exception", "(", "'Experience not the same size as memory'", ",", "len", "(", "experience", ")", ",", "'!='", ",", "len", "(", "self", ".", "memory", ")", ")", "\n", "\n", "", "for", "e", ",", "mem", "in", "zip", "(", "experience", ",", "self", ".", "memory", ")", ":", "\n", "            ", "mem", "[", "self", ".", "k", "]", "=", "e", "\n", "\n", "", "self", ".", "head", "=", "self", ".", "k", "\n", "self", ".", "k", "+=", "1", "\n", "if", "self", ".", "k", ">=", "self", ".", "size", ":", "\n", "            ", "self", ".", "k", "=", "0", "\n", "self", ".", "full", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.sample": [[48, 56], ["numpy.random.choice"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "r", "=", "self", ".", "size", "\n", "if", "not", "self", ".", "full", ":", "\n", "            ", "r", "=", "self", ".", "k", "\n", "", "random_idx", "=", "np", ".", "random", ".", "choice", "(", "r", ",", "size", "=", "batch_size", ",", "replace", "=", "False", ")", "\n", "random_idx", "[", "0", "]", "=", "self", ".", "head", "# Always add the latest one", "\n", "\n", "return", "[", "mem", "[", "random_idx", "]", "for", "mem", "in", "self", ".", "memory", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.get": [[57, 59], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "start", ",", "length", ")", ":", "\n", "        ", "return", "[", "mem", "[", "start", ":", "start", "+", "length", "]", "for", "mem", "in", "self", ".", "memory", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.get_size": [[60, 64], ["None"], "methods", ["None"], ["", "def", "get_size", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "full", ":", "\n", "            ", "return", "self", ".", "size", "\n", "", "return", "self", ".", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.get_max_size": [[65, 67], ["None"], "methods", ["None"], ["", "def", "get_max_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.reset": [[68, 72], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "k", "=", "0", "\n", "self", ".", "head", "=", "-", "1", "\n", "self", ".", "full", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.shuffle": [[73, 75], ["ReplayMemory.ReplayMemory.sample", "ReplayMemory.ReplayMemory.get_size"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.ReplayMemory.sample", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.Map.get_size"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "self", ".", "memory", "=", "self", ".", "sample", "(", "self", ".", "get_size", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.shape": [[4, 9], ["type", "list"], "function", ["None"], ["def", "shape", "(", "exp", ")", ":", "\n", "    ", "if", "type", "(", "exp", ")", "is", "np", ".", "ndarray", ":", "\n", "        ", "return", "list", "(", "exp", ".", "shape", ")", "\n", "", "else", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.ReplayMemory.type_of": [[11, 16], ["type", "type"], "function", ["None"], ["", "", "def", "type_of", "(", "exp", ")", ":", "\n", "    ", "if", "type", "(", "exp", ")", "is", "np", ".", "ndarray", ":", "\n", "        ", "return", "exp", ".", "dtype", "\n", "", "else", ":", "\n", "        ", "return", "type", "(", "exp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgentParams.__init__": [[15, 46], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# Convolutional part config", "\n", "        ", "self", ".", "conv_layers", "=", "2", "\n", "self", ".", "conv_kernel_size", "=", "5", "\n", "self", ".", "conv_kernels", "=", "16", "\n", "\n", "# Fully Connected config", "\n", "self", ".", "hidden_layer_size", "=", "256", "\n", "self", ".", "hidden_layer_num", "=", "3", "\n", "\n", "# Training Params", "\n", "self", ".", "learning_rate", "=", "3e-5", "\n", "self", ".", "alpha", "=", "0.005", "\n", "self", ".", "gamma", "=", "0.95", "\n", "\n", "# Exploration strategy", "\n", "self", ".", "soft_max_scaling", "=", "0.1", "\n", "\n", "# Global-Local Map", "\n", "self", ".", "global_map_scaling", "=", "3", "\n", "self", ".", "local_map_size", "=", "17", "\n", "\n", "# Scalar inputs instead of map", "\n", "self", ".", "use_scalar_input", "=", "False", "\n", "self", ".", "relative_scalars", "=", "False", "\n", "self", ".", "blind_agent", "=", "False", "\n", "self", ".", "max_uavs", "=", "3", "\n", "self", ".", "max_devices", "=", "10", "\n", "\n", "# Printing", "\n", "self", ".", "print_summary", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.__init__": [[50, 149], ["tensorflow.constant", "example_state.get_boolean_map_shape", "example_state.get_float_map_shape", "example_state.get_num_scalars", "len", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.one_hot", "tensorflow.reduce_sum", "tensorflow.keras.Model", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.stop_gradient", "tensorflow.multiply", "tensorflow.expand_dims", "tensorflow.multiply", "tensorflow.add", "tensorflow.keras.Model", "tensorflow.keras.Model", "tensorflow.keras.Model", "tensorflow.divide", "tensorflow.math.softmax", "tensorflow.keras.Model", "tensorflow.optimizers.Adam", "type", "tensorflow.keras.layers.Input", "Agent.DDQNAgent.build_blind_model", "Agent.DDQNAgent.build_blind_model", "Agent.DDQNAgent.hard_update", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.cast", "tensorflow.add", "tensorflow.losses.MeanSquaredError", "tensorflow.constant", "Agent.DDQNAgent.q_loss_model.summary", "stats.set_model", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "Agent.DDQNAgent.build_scalars_model", "Agent.DDQNAgent.build_scalars_model", "Agent.DDQNAgent.hard_update", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.cast", "tensorflow.concat", "Agent.DDQNAgent.build_model", "Agent.DDQNAgent.build_model", "Agent.DDQNAgent.hard_update", "tensorflow.keras.Model", "tensorflow.keras.Model", "tensorflow.keras.Model", "tensorflow.math.logical_not", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_boolean_map_shape", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_float_map_shape", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_num_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.build_blind_model", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.build_blind_model", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.hard_update", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.set_model", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.build_scalars_model", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.build_scalars_model", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.hard_update", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.build_model", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.build_model", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.hard_update"], ["    ", "def", "__init__", "(", "self", ",", "params", ":", "DDQNAgentParams", ",", "example_state", ",", "example_action", ",", "stats", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "params", "=", "params", "\n", "gamma", "=", "tf", ".", "constant", "(", "self", ".", "params", ".", "gamma", ",", "dtype", "=", "float", ")", "\n", "self", ".", "align_counter", "=", "0", "\n", "\n", "self", ".", "boolean_map_shape", "=", "example_state", ".", "get_boolean_map_shape", "(", ")", "\n", "self", ".", "float_map_shape", "=", "example_state", ".", "get_float_map_shape", "(", ")", "\n", "self", ".", "scalars", "=", "example_state", ".", "get_num_scalars", "(", "give_position", "=", "self", ".", "params", ".", "use_scalar_input", ")", "\n", "self", ".", "num_actions", "=", "len", "(", "type", "(", "example_action", ")", ")", "\n", "self", ".", "num_map_channels", "=", "self", ".", "boolean_map_shape", "[", "2", "]", "+", "self", ".", "float_map_shape", "[", "2", "]", "\n", "\n", "# Create shared inputs", "\n", "action_input", "=", "Input", "(", "shape", "=", "(", ")", ",", "name", "=", "'action_input'", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "reward_input", "=", "Input", "(", "shape", "=", "(", ")", ",", "name", "=", "'reward_input'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "termination_input", "=", "Input", "(", "shape", "=", "(", ")", ",", "name", "=", "'termination_input'", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "q_star_input", "=", "Input", "(", "shape", "=", "(", ")", ",", "name", "=", "'q_star_input'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "if", "self", ".", "params", ".", "blind_agent", ":", "\n", "            ", "scalars_input", "=", "Input", "(", "shape", "=", "(", "self", ".", "scalars", ",", ")", ",", "name", "=", "'scalars_input'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "states", "=", "[", "scalars_input", "]", "\n", "self", ".", "q_network", "=", "self", ".", "build_blind_model", "(", "scalars_input", ")", "\n", "self", ".", "target_network", "=", "self", ".", "build_blind_model", "(", "scalars_input", ",", "'target_'", ")", "\n", "self", ".", "hard_update", "(", ")", "\n", "\n", "", "elif", "self", ".", "params", ".", "use_scalar_input", ":", "\n", "            ", "devices_input", "=", "Input", "(", "shape", "=", "(", "3", "*", "self", ".", "params", ".", "max_devices", ",", ")", ",", "name", "=", "'devices_input'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "uavs_input", "=", "Input", "(", "shape", "=", "(", "4", "*", "self", ".", "params", ".", "max_uavs", ",", ")", ",", "name", "=", "'uavs_input'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "scalars_input", "=", "Input", "(", "shape", "=", "(", "self", ".", "scalars", ",", ")", ",", "name", "=", "'scalars_input'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "states", "=", "[", "devices_input", ",", "\n", "uavs_input", ",", "\n", "scalars_input", "]", "\n", "\n", "self", ".", "q_network", "=", "self", ".", "build_scalars_model", "(", "states", ")", "\n", "self", ".", "target_network", "=", "self", ".", "build_scalars_model", "(", "states", ",", "'target_'", ")", "\n", "self", ".", "hard_update", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "boolean_map_input", "=", "Input", "(", "shape", "=", "self", ".", "boolean_map_shape", ",", "name", "=", "'boolean_map_input'", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "float_map_input", "=", "Input", "(", "shape", "=", "self", ".", "float_map_shape", ",", "name", "=", "'float_map_input'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "scalars_input", "=", "Input", "(", "shape", "=", "(", "self", ".", "scalars", ",", ")", ",", "name", "=", "'scalars_input'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "states", "=", "[", "boolean_map_input", ",", "\n", "float_map_input", ",", "\n", "scalars_input", "]", "\n", "\n", "map_cast", "=", "tf", ".", "cast", "(", "boolean_map_input", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "padded_map", "=", "tf", ".", "concat", "(", "[", "map_cast", ",", "float_map_input", "]", ",", "axis", "=", "3", ")", "\n", "\n", "self", ".", "q_network", "=", "self", ".", "build_model", "(", "padded_map", ",", "scalars_input", ",", "states", ")", "\n", "self", ".", "target_network", "=", "self", ".", "build_model", "(", "padded_map", ",", "scalars_input", ",", "states", ",", "'target_'", ")", "\n", "self", ".", "hard_update", "(", ")", "\n", "\n", "self", ".", "global_map_model", "=", "Model", "(", "inputs", "=", "[", "boolean_map_input", ",", "float_map_input", "]", ",", "\n", "outputs", "=", "self", ".", "global_map", ")", "\n", "self", ".", "local_map_model", "=", "Model", "(", "inputs", "=", "[", "boolean_map_input", ",", "float_map_input", "]", ",", "\n", "outputs", "=", "self", ".", "local_map", ")", "\n", "self", ".", "total_map_model", "=", "Model", "(", "inputs", "=", "[", "boolean_map_input", ",", "float_map_input", "]", ",", "\n", "outputs", "=", "self", ".", "total_map", ")", "\n", "\n", "", "q_values", "=", "self", ".", "q_network", ".", "output", "\n", "q_target_values", "=", "self", ".", "target_network", ".", "output", "\n", "\n", "# Define Q* in min(Q - (r + gamma_terminated * Q*))^2", "\n", "max_action", "=", "tf", ".", "argmax", "(", "q_values", ",", "axis", "=", "1", ",", "name", "=", "'max_action'", ",", "output_type", "=", "tf", ".", "int64", ")", "\n", "max_action_target", "=", "tf", ".", "argmax", "(", "q_target_values", ",", "axis", "=", "1", ",", "name", "=", "'max_action'", ",", "output_type", "=", "tf", ".", "int64", ")", "\n", "one_hot_max_action", "=", "tf", ".", "one_hot", "(", "max_action", ",", "depth", "=", "self", ".", "num_actions", ",", "dtype", "=", "float", ")", "\n", "q_star", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "one_hot_max_action", ",", "q_target_values", ",", "name", "=", "'mul_hot_target'", ")", ",", "axis", "=", "1", ",", "\n", "name", "=", "'q_star'", ")", "\n", "self", ".", "q_star_model", "=", "Model", "(", "inputs", "=", "states", ",", "outputs", "=", "q_star", ")", "\n", "\n", "# Define Bellman loss", "\n", "one_hot_rm_action", "=", "tf", ".", "one_hot", "(", "action_input", ",", "depth", "=", "self", ".", "num_actions", ",", "on_value", "=", "1.0", ",", "off_value", "=", "0.0", ",", "dtype", "=", "float", ")", "\n", "one_cold_rm_action", "=", "tf", ".", "one_hot", "(", "action_input", ",", "depth", "=", "self", ".", "num_actions", ",", "on_value", "=", "0.0", ",", "off_value", "=", "1.0", ",", "dtype", "=", "float", ")", "\n", "q_old", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "multiply", "(", "q_values", ",", "one_cold_rm_action", ")", ")", "\n", "gamma_terminated", "=", "tf", ".", "multiply", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_not", "(", "termination_input", ")", ",", "tf", ".", "float32", ")", ",", "gamma", ")", "\n", "q_update", "=", "tf", ".", "expand_dims", "(", "tf", ".", "add", "(", "reward_input", ",", "tf", ".", "multiply", "(", "q_star_input", ",", "gamma_terminated", ")", ")", ",", "1", ")", "\n", "q_update_hot", "=", "tf", ".", "multiply", "(", "q_update", ",", "one_hot_rm_action", ")", "\n", "q_new", "=", "tf", ".", "add", "(", "q_update_hot", ",", "q_old", ")", "\n", "q_loss", "=", "tf", ".", "losses", ".", "MeanSquaredError", "(", ")", "(", "q_new", ",", "q_values", ")", "\n", "self", ".", "q_loss_model", "=", "Model", "(", "\n", "inputs", "=", "states", "+", "[", "action_input", ",", "reward_input", ",", "termination_input", ",", "q_star_input", "]", ",", "\n", "outputs", "=", "q_loss", ")", "\n", "\n", "# Exploit act model", "\n", "self", ".", "exploit_model", "=", "Model", "(", "inputs", "=", "states", ",", "outputs", "=", "max_action", ")", "\n", "self", ".", "exploit_model_target", "=", "Model", "(", "inputs", "=", "states", ",", "outputs", "=", "max_action_target", ")", "\n", "\n", "# Softmax explore model", "\n", "softmax_scaling", "=", "tf", ".", "divide", "(", "q_values", ",", "tf", ".", "constant", "(", "self", ".", "params", ".", "soft_max_scaling", ",", "dtype", "=", "float", ")", ")", "\n", "softmax_action", "=", "tf", ".", "math", ".", "softmax", "(", "softmax_scaling", ",", "name", "=", "'softmax_action'", ")", "\n", "self", ".", "soft_explore_model", "=", "Model", "(", "inputs", "=", "states", ",", "outputs", "=", "softmax_action", ")", "\n", "\n", "self", ".", "q_optimizer", "=", "tf", ".", "optimizers", ".", "Adam", "(", "learning_rate", "=", "params", ".", "learning_rate", ",", "amsgrad", "=", "True", ")", "\n", "\n", "if", "self", ".", "params", ".", "print_summary", ":", "\n", "            ", "self", ".", "q_loss_model", ".", "summary", "(", ")", "\n", "\n", "", "if", "stats", ":", "\n", "            ", "stats", ".", "set_model", "(", "self", ".", "target_network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.build_model": [[150, 163], ["Agent.DDQNAgent.create_map_proc", "range", "tensorflow.keras.Model", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "str"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.create_map_proc"], ["", "", "def", "build_model", "(", "self", ",", "map_proc", ",", "states_proc", ",", "inputs", ",", "name", "=", "''", ")", ":", "\n", "\n", "        ", "flatten_map", "=", "self", ".", "create_map_proc", "(", "map_proc", ",", "name", ")", "\n", "\n", "layer", "=", "Concatenate", "(", "name", "=", "name", "+", "'concat'", ")", "(", "[", "flatten_map", ",", "states_proc", "]", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "params", ".", "hidden_layer_num", ")", ":", "\n", "            ", "layer", "=", "Dense", "(", "self", ".", "params", ".", "hidden_layer_size", ",", "activation", "=", "'relu'", ",", "name", "=", "name", "+", "'hidden_layer_all_'", "+", "str", "(", "k", ")", ")", "(", "\n", "layer", ")", "\n", "", "output", "=", "Dense", "(", "self", ".", "num_actions", ",", "activation", "=", "'linear'", ",", "name", "=", "name", "+", "'output_layer'", ")", "(", "layer", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "output", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.build_scalars_model": [[164, 175], ["range", "tensorflow.keras.Model", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "str"], "methods", ["None"], ["", "def", "build_scalars_model", "(", "self", ",", "inputs", ",", "name", "=", "''", ")", ":", "\n", "\n", "        ", "layer", "=", "Concatenate", "(", "name", "=", "name", "+", "'concat'", ")", "(", "inputs", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "params", ".", "hidden_layer_num", ")", ":", "\n", "            ", "layer", "=", "Dense", "(", "self", ".", "params", ".", "hidden_layer_size", ",", "activation", "=", "'relu'", ",", "name", "=", "name", "+", "'hidden_layer_all_'", "+", "str", "(", "k", ")", ")", "(", "\n", "layer", ")", "\n", "", "output", "=", "Dense", "(", "self", ".", "num_actions", ",", "activation", "=", "'linear'", ",", "name", "=", "name", "+", "'output_layer'", ")", "(", "layer", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "output", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.build_blind_model": [[176, 187], ["range", "tensorflow.keras.Model", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "str"], "methods", ["None"], ["", "def", "build_blind_model", "(", "self", ",", "inputs", ",", "name", "=", "''", ")", ":", "\n", "\n", "        ", "layer", "=", "inputs", "\n", "for", "k", "in", "range", "(", "self", ".", "params", ".", "hidden_layer_num", ")", ":", "\n", "            ", "layer", "=", "Dense", "(", "self", ".", "params", ".", "hidden_layer_size", ",", "activation", "=", "'relu'", ",", "name", "=", "name", "+", "'hidden_layer_all_'", "+", "str", "(", "k", ")", ")", "(", "\n", "layer", ")", "\n", "", "output", "=", "Dense", "(", "self", ".", "num_actions", ",", "activation", "=", "'linear'", ",", "name", "=", "name", "+", "'output_layer'", ")", "(", "layer", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "output", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.create_map_proc": [[188, 218], ["tensorflow.stop_gradient", "range", "tensorflow.stop_gradient", "range", "tensorflow.keras.layers.Flatten", "float", "float", "tensorflow.image.central_crop", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.AvgPool2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "str", "str"], "methods", ["None"], ["", "def", "create_map_proc", "(", "self", ",", "conv_in", ",", "name", ")", ":", "\n", "\n", "# Forking for global and local map", "\n", "# Global Map", "\n", "        ", "global_map", "=", "tf", ".", "stop_gradient", "(", "\n", "AvgPool2D", "(", "(", "self", ".", "params", ".", "global_map_scaling", ",", "self", ".", "params", ".", "global_map_scaling", ")", ")", "(", "conv_in", ")", ")", "\n", "\n", "self", ".", "global_map", "=", "global_map", "\n", "self", ".", "total_map", "=", "conv_in", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "params", ".", "conv_layers", ")", ":", "\n", "            ", "global_map", "=", "Conv2D", "(", "self", ".", "params", ".", "conv_kernels", ",", "self", ".", "params", ".", "conv_kernel_size", ",", "activation", "=", "'relu'", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "name", "=", "name", "+", "'global_conv_'", "+", "str", "(", "k", "+", "1", ")", ")", "(", "global_map", ")", "\n", "\n", "", "flatten_global", "=", "Flatten", "(", "name", "=", "name", "+", "'global_flatten'", ")", "(", "global_map", ")", "\n", "\n", "# Local Map", "\n", "crop_frac", "=", "float", "(", "self", ".", "params", ".", "local_map_size", ")", "/", "float", "(", "self", ".", "boolean_map_shape", "[", "0", "]", ")", "\n", "local_map", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "image", ".", "central_crop", "(", "conv_in", ",", "crop_frac", ")", ")", "\n", "self", ".", "local_map", "=", "local_map", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "params", ".", "conv_layers", ")", ":", "\n", "            ", "local_map", "=", "Conv2D", "(", "self", ".", "params", ".", "conv_kernels", ",", "self", ".", "params", ".", "conv_kernel_size", ",", "activation", "=", "'relu'", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "name", "=", "name", "+", "'local_conv_'", "+", "str", "(", "k", "+", "1", ")", ")", "(", "local_map", ")", "\n", "\n", "", "flatten_local", "=", "Flatten", "(", "name", "=", "name", "+", "'local_flatten'", ")", "(", "local_map", ")", "\n", "\n", "return", "Concatenate", "(", "name", "=", "name", "+", "'concat_flatten'", ")", "(", "[", "flatten_global", ",", "flatten_local", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.act": [[219, 221], ["Agent.DDQNAgent.get_soft_max_exploration"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.get_soft_max_exploration"], ["", "def", "act", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "self", ".", "get_soft_max_exploration", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.get_random_action": [[222, 224], ["numpy.random.randint"], "methods", ["None"], ["", "def", "get_random_action", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "num_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.get_exploitation_action": [[225, 242], ["state.get_boolean_map", "state.get_float_map", "numpy.array", "Agent.DDQNAgent.exploit_model().numpy", "numpy.array", "Agent.DDQNAgent.exploit_model().numpy", "state.get_device_scalars", "state.get_uav_scalars", "numpy.array", "Agent.DDQNAgent.exploit_model().numpy", "state.get_scalars", "state.get_scalars", "state.get_scalars", "Agent.DDQNAgent.exploit_model", "Agent.DDQNAgent.exploit_model", "Agent.DDQNAgent.exploit_model"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_boolean_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_float_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_device_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_uav_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars"], ["", "def", "get_exploitation_action", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "if", "self", ".", "params", ".", "blind_agent", ":", "\n", "            ", "scalars", "=", "np", ".", "array", "(", "state", ".", "get_scalars", "(", "give_position", "=", "True", ")", ",", "dtype", "=", "np", ".", "single", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "return", "self", ".", "exploit_model", "(", "scalars", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n", "", "if", "self", ".", "params", ".", "use_scalar_input", ":", "\n", "            ", "devices_in", "=", "state", ".", "get_device_scalars", "(", "self", ".", "params", ".", "max_devices", ",", "relative", "=", "self", ".", "params", ".", "relative_scalars", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "uavs_in", "=", "state", ".", "get_uav_scalars", "(", "self", ".", "params", ".", "max_uavs", ",", "relative", "=", "self", ".", "params", ".", "relative_scalars", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "scalars", "=", "np", ".", "array", "(", "state", ".", "get_scalars", "(", "give_position", "=", "True", ")", ",", "dtype", "=", "np", ".", "single", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "return", "self", ".", "exploit_model", "(", "[", "devices_in", ",", "uavs_in", ",", "scalars", "]", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n", "", "boolean_map_in", "=", "state", ".", "get_boolean_map", "(", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "float_map_in", "=", "state", ".", "get_float_map", "(", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "scalars", "=", "np", ".", "array", "(", "state", ".", "get_scalars", "(", ")", ",", "dtype", "=", "np", ".", "single", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "\n", "return", "self", ".", "exploit_model", "(", "[", "boolean_map_in", ",", "float_map_in", ",", "scalars", "]", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.get_soft_max_exploration": [[243, 260], ["numpy.random.choice", "range", "numpy.array", "Agent.DDQNAgent.soft_explore_model().numpy", "state.get_scalars", "state.get_device_scalars", "state.get_uav_scalars", "numpy.array", "Agent.DDQNAgent.soft_explore_model().numpy", "state.get_boolean_map", "state.get_float_map", "numpy.array", "Agent.DDQNAgent.soft_explore_model().numpy", "Agent.DDQNAgent.soft_explore_model", "state.get_scalars", "state.get_scalars", "Agent.DDQNAgent.soft_explore_model", "Agent.DDQNAgent.soft_explore_model"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_device_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_uav_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_boolean_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_float_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars"], ["", "def", "get_soft_max_exploration", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "if", "self", ".", "params", ".", "blind_agent", ":", "\n", "            ", "scalars", "=", "np", ".", "array", "(", "state", ".", "get_scalars", "(", "give_position", "=", "True", ")", ",", "dtype", "=", "np", ".", "single", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "p", "=", "self", ".", "soft_explore_model", "(", "scalars", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "params", ".", "use_scalar_input", ":", "\n", "            ", "devices_in", "=", "state", ".", "get_device_scalars", "(", "self", ".", "params", ".", "max_devices", ",", "relative", "=", "self", ".", "params", ".", "relative_scalars", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "uavs_in", "=", "state", ".", "get_uav_scalars", "(", "self", ".", "params", ".", "max_uavs", ",", "relative", "=", "self", ".", "params", ".", "relative_scalars", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "scalars", "=", "np", ".", "array", "(", "state", ".", "get_scalars", "(", "give_position", "=", "True", ")", ",", "dtype", "=", "np", ".", "single", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "p", "=", "self", ".", "soft_explore_model", "(", "[", "devices_in", ",", "uavs_in", ",", "scalars", "]", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "boolean_map_in", "=", "state", ".", "get_boolean_map", "(", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "float_map_in", "=", "state", ".", "get_float_map", "(", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "scalars", "=", "np", ".", "array", "(", "state", ".", "get_scalars", "(", ")", ",", "dtype", "=", "np", ".", "single", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "p", "=", "self", ".", "soft_explore_model", "(", "[", "boolean_map_in", ",", "float_map_in", ",", "scalars", "]", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n", "", "return", "np", ".", "random", ".", "choice", "(", "range", "(", "self", ".", "num_actions", ")", ",", "size", "=", "1", ",", "p", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.get_exploitation_action_target": [[261, 279], ["state.get_boolean_map", "state.get_float_map", "numpy.array", "Agent.DDQNAgent.exploit_model_target().numpy", "numpy.array", "Agent.DDQNAgent.exploit_model_target().numpy", "state.get_device_scalars", "state.get_uav_scalars", "numpy.array", "Agent.DDQNAgent.exploit_model_target().numpy", "state.get_scalars", "state.get_scalars", "state.get_scalars", "Agent.DDQNAgent.exploit_model_target", "Agent.DDQNAgent.exploit_model_target", "Agent.DDQNAgent.exploit_model_target"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_boolean_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_float_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_device_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_uav_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_scalars"], ["", "def", "get_exploitation_action_target", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "if", "self", ".", "params", ".", "blind_agent", ":", "\n", "            ", "scalars", "=", "np", ".", "array", "(", "state", ".", "get_scalars", "(", "give_position", "=", "True", ")", ",", "dtype", "=", "np", ".", "single", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "return", "self", ".", "exploit_model_target", "(", "scalars", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n", "", "if", "self", ".", "params", ".", "use_scalar_input", ":", "\n", "            ", "devices_in", "=", "state", ".", "get_device_scalars", "(", "self", ".", "params", ".", "max_devices", ",", "relative", "=", "self", ".", "params", ".", "relative_scalars", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "uavs_in", "=", "state", ".", "get_uav_scalars", "(", "self", ".", "params", ".", "max_uavs", ",", "relative", "=", "self", ".", "params", ".", "relative_scalars", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "scalars", "=", "np", ".", "array", "(", "state", ".", "get_scalars", "(", "give_position", "=", "True", ")", ",", "dtype", "=", "np", ".", "single", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "\n", "return", "self", ".", "exploit_model_target", "(", "[", "devices_in", ",", "uavs_in", ",", "scalars", "]", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n", "", "boolean_map_in", "=", "state", ".", "get_boolean_map", "(", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "float_map_in", "=", "state", ".", "get_float_map", "(", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "scalars", "=", "np", ".", "array", "(", "state", ".", "get_scalars", "(", ")", ",", "dtype", "=", "np", ".", "single", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "\n", "return", "self", ".", "exploit_model_target", "(", "[", "boolean_map_in", ",", "float_map_in", ",", "scalars", "]", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.hard_update": [[280, 282], ["Agent.DDQNAgent.target_network.set_weights", "Agent.DDQNAgent.q_network.get_weights"], "methods", ["None"], ["", "def", "hard_update", "(", "self", ")", ":", "\n", "        ", "self", ".", "target_network", ".", "set_weights", "(", "self", ".", "q_network", ".", "get_weights", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.soft_update": [[283, 288], ["Agent.DDQNAgent.q_network.get_weights", "Agent.DDQNAgent.target_network.get_weights", "Agent.DDQNAgent.target_network.set_weights", "zip"], "methods", ["None"], ["", "def", "soft_update", "(", "self", ",", "alpha", ")", ":", "\n", "        ", "weights", "=", "self", ".", "q_network", ".", "get_weights", "(", ")", "\n", "target_weights", "=", "self", ".", "target_network", ".", "get_weights", "(", ")", "\n", "self", ".", "target_network", ".", "set_weights", "(", "\n", "[", "w_new", "*", "alpha", "+", "w_old", "*", "(", "1.", "-", "alpha", ")", "for", "w_new", ",", "w_old", "in", "zip", "(", "weights", ",", "target_weights", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.train": [[289, 322], ["tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tape.gradient", "Agent.DDQNAgent.q_optimizer.apply_gradients", "Agent.DDQNAgent.soft_update", "Agent.DDQNAgent.q_star_model", "Agent.DDQNAgent.q_star_model", "tensorflow.GradientTape", "zip", "Agent.DDQNAgent.q_loss_model", "Agent.DDQNAgent.q_loss_model"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.soft_update"], ["", "def", "train", "(", "self", ",", "experiences", ")", ":", "\n", "        ", "boolean_map", "=", "experiences", "[", "0", "]", "\n", "float_map", "=", "experiences", "[", "1", "]", "\n", "scalars", "=", "tf", ".", "convert_to_tensor", "(", "experiences", "[", "2", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "action", "=", "tf", ".", "convert_to_tensor", "(", "experiences", "[", "3", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "reward", "=", "experiences", "[", "4", "]", "\n", "next_boolean_map", "=", "experiences", "[", "5", "]", "\n", "next_float_map", "=", "experiences", "[", "6", "]", "\n", "next_scalars", "=", "tf", ".", "convert_to_tensor", "(", "experiences", "[", "7", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "terminated", "=", "experiences", "[", "8", "]", "\n", "\n", "if", "self", ".", "params", ".", "blind_agent", ":", "\n", "            ", "q_star", "=", "self", ".", "q_star_model", "(", "\n", "[", "next_scalars", "]", ")", "\n", "", "else", ":", "\n", "            ", "q_star", "=", "self", ".", "q_star_model", "(", "\n", "[", "next_boolean_map", ",", "next_float_map", ",", "next_scalars", "]", ")", "\n", "\n", "# Train Value network", "\n", "", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "\n", "            ", "if", "self", ".", "params", ".", "blind_agent", ":", "\n", "                ", "q_loss", "=", "self", ".", "q_loss_model", "(", "\n", "[", "scalars", ",", "action", ",", "reward", ",", "\n", "terminated", ",", "q_star", "]", ")", "\n", "", "else", ":", "\n", "                ", "q_loss", "=", "self", ".", "q_loss_model", "(", "\n", "[", "boolean_map", ",", "float_map", ",", "scalars", ",", "action", ",", "reward", ",", "\n", "terminated", ",", "q_star", "]", ")", "\n", "", "", "q_grads", "=", "tape", ".", "gradient", "(", "q_loss", ",", "self", ".", "q_network", ".", "trainable_variables", ")", "\n", "self", ".", "q_optimizer", ".", "apply_gradients", "(", "zip", "(", "q_grads", ",", "self", ".", "q_network", ".", "trainable_variables", ")", ")", "\n", "\n", "self", ".", "soft_update", "(", "self", ".", "params", ".", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.save_weights": [[323, 325], ["Agent.DDQNAgent.target_network.save_weights"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.save_weights"], ["", "def", "save_weights", "(", "self", ",", "path_to_weights", ")", ":", "\n", "        ", "self", ".", "target_network", ".", "save_weights", "(", "path_to_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.save_model": [[326, 328], ["Agent.DDQNAgent.target_network.save"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "path_to_model", ")", ":", "\n", "        ", "self", ".", "target_network", ".", "save", "(", "path_to_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.load_weights": [[329, 332], ["Agent.DDQNAgent.q_network.load_weights", "Agent.DDQNAgent.hard_update"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.load_weights", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.hard_update"], ["", "def", "load_weights", "(", "self", ",", "path_to_weights", ")", ":", "\n", "        ", "self", ".", "q_network", ".", "load_weights", "(", "path_to_weights", ")", "\n", "self", ".", "hard_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.get_global_map": [[333, 337], ["Agent.DDQNAgent.global_map_model().numpy", "state.get_boolean_map", "state.get_float_map", "Agent.DDQNAgent.global_map_model"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_boolean_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_float_map"], ["", "def", "get_global_map", "(", "self", ",", "state", ")", ":", "\n", "        ", "boolean_map_in", "=", "state", ".", "get_boolean_map", "(", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "float_map_in", "=", "state", ".", "get_float_map", "(", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "return", "self", ".", "global_map_model", "(", "[", "boolean_map_in", ",", "float_map_in", "]", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.get_local_map": [[338, 342], ["Agent.DDQNAgent.local_map_model().numpy", "state.get_boolean_map", "state.get_float_map", "Agent.DDQNAgent.local_map_model"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_boolean_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_float_map"], ["", "def", "get_local_map", "(", "self", ",", "state", ")", ":", "\n", "        ", "boolean_map_in", "=", "state", ".", "get_boolean_map", "(", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "float_map_in", "=", "state", ".", "get_float_map", "(", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "return", "self", ".", "local_map_model", "(", "[", "boolean_map_in", ",", "float_map_in", "]", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.DDQNAgent.get_total_map": [[343, 347], ["Agent.DDQNAgent.total_map_model().numpy", "state.get_boolean_map", "state.get_float_map", "Agent.DDQNAgent.total_map_model"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_boolean_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.get_float_map"], ["", "def", "get_total_map", "(", "self", ",", "state", ")", ":", "\n", "        ", "boolean_map_in", "=", "state", ".", "get_boolean_map", "(", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "float_map_in", "=", "state", ".", "get_float_map", "(", ")", "[", "tf", ".", "newaxis", ",", "...", "]", "\n", "return", "self", ".", "total_map_model", "(", "[", "boolean_map_in", ",", "float_map_in", "]", ")", ".", "numpy", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Agent.print_node": [[9, 12], ["print"], "function", ["None"], ["def", "print_node", "(", "x", ")", ":", "\n", "    ", "print", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Shadowing.bresenham": [[7, 36], ["abs", "abs"], "function", ["None"], ["def", "bresenham", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "obstacles", ",", "shadow_map", ")", ":", "\n", "    ", "if", "obstacles", "[", "y0", ",", "x0", "]", ":", "\n", "        ", "return", "\n", "", "x_dist", "=", "abs", "(", "x0", "-", "x1", ")", "\n", "y_dist", "=", "-", "abs", "(", "y0", "-", "y1", ")", "\n", "x_step", "=", "1", "if", "x1", ">", "x0", "else", "-", "1", "\n", "y_step", "=", "1", "if", "y1", ">", "y0", "else", "-", "1", "\n", "\n", "error", "=", "x_dist", "+", "y_dist", "\n", "\n", "# shadowed = False", "\n", "shadow_map", "[", "y0", ",", "x0", "]", "=", "False", "\n", "\n", "while", "x0", "!=", "x1", "or", "y0", "!=", "y1", ":", "\n", "        ", "if", "2", "*", "error", "-", "y_dist", ">", "x_dist", "-", "2", "*", "error", ":", "\n", "# horizontal step", "\n", "            ", "error", "+=", "y_dist", "\n", "x0", "+=", "x_step", "\n", "", "else", ":", "\n", "# vertical step", "\n", "            ", "error", "+=", "x_dist", "\n", "y0", "+=", "y_step", "\n", "\n", "", "if", "obstacles", "[", "y0", ",", "x0", "]", ":", "\n", "# shadowed = True", "\n", "            ", "return", "\n", "\n", "# if shadowed:", "\n", "", "shadow_map", "[", "y0", ",", "x0", "]", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Shadowing.calculate_shadowing": [[38, 60], ["src.Map.Map.load_map", "numpy.ones", "numpy.save", "tqdm.tqdm", "numpy.ndindex", "numpy.ones", "range", "pbar.update", "Shadowing.bresenham", "Shadowing.bresenham", "Shadowing.bresenham", "Shadowing.bresenham"], "function", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.load_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Shadowing.bresenham", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Shadowing.bresenham", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Shadowing.bresenham", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Shadowing.bresenham"], ["", "", "def", "calculate_shadowing", "(", "map_path", ",", "save_as", ")", ":", "\n", "    ", "total_map", "=", "load_map", "(", "map_path", ")", "\n", "obstacles", "=", "total_map", ".", "obstacles", "\n", "size", "=", "total_map", ".", "obstacles", ".", "shape", "[", "0", "]", "\n", "total", "=", "size", "*", "size", "\n", "\n", "total_shadow_map", "=", "np", ".", "ones", "(", "(", "size", ",", "size", ",", "size", ",", "size", ")", ",", "dtype", "=", "bool", ")", "\n", "with", "tqdm", ".", "tqdm", "(", "total", "=", "total", ")", "as", "pbar", ":", "\n", "        ", "for", "i", ",", "j", "in", "np", ".", "ndindex", "(", "total_map", ".", "obstacles", ".", "shape", ")", ":", "\n", "            ", "shadow_map", "=", "np", ".", "ones", "(", "(", "size", ",", "size", ")", ",", "dtype", "=", "bool", ")", "\n", "\n", "for", "x", "in", "range", "(", "size", ")", ":", "\n", "                ", "bresenham", "(", "i", ",", "j", ",", "x", ",", "0", ",", "obstacles", ",", "shadow_map", ")", "\n", "bresenham", "(", "i", ",", "j", ",", "x", ",", "size", "-", "1", ",", "obstacles", ",", "shadow_map", ")", "\n", "bresenham", "(", "i", ",", "j", ",", "0", ",", "x", ",", "obstacles", ",", "shadow_map", ")", "\n", "bresenham", "(", "i", ",", "j", ",", "size", "-", "1", ",", "x", ",", "obstacles", ",", "shadow_map", ")", "\n", "\n", "", "total_shadow_map", "[", "j", ",", "i", "]", "=", "shadow_map", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "", "", "np", ".", "save", "(", "save_as", ",", "total_shadow_map", ")", "\n", "return", "total_shadow_map", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Shadowing.load_or_create_shadowing": [[62, 68], ["os.path.exists", "numpy.load", "Shadowing.calculate_shadowing", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Shadowing.calculate_shadowing"], ["", "def", "load_or_create_shadowing", "(", "map_path", ")", ":", "\n", "    ", "shadow_file_name", "=", "os", ".", "path", ".", "splitext", "(", "map_path", ")", "[", "0", "]", "+", "\"_shadowing.npy\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "shadow_file_name", ")", ":", "\n", "        ", "return", "np", ".", "load", "(", "shadow_file_name", ")", "\n", "", "else", ":", "\n", "        ", "return", "calculate_shadowing", "(", "map_path", ",", "shadow_file_name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.Map.__init__": [[6, 10], ["map_data[].astype", "map_data[].astype", "map_data[].astype"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "map_data", ")", ":", "\n", "        ", "self", ".", "start_land_zone", "=", "map_data", "[", ":", ",", ":", ",", "2", "]", ".", "astype", "(", "bool", ")", "\n", "self", ".", "nfz", "=", "map_data", "[", ":", ",", ":", ",", "0", "]", ".", "astype", "(", "bool", ")", "\n", "self", ".", "obstacles", "=", "map_data", "[", ":", ",", ":", ",", "1", "]", ".", "astype", "(", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.Map.get_starting_vector": [[11, 14], ["numpy.where", "list", "zip"], "methods", ["None"], ["", "def", "get_starting_vector", "(", "self", ")", ":", "\n", "        ", "similar", "=", "np", ".", "where", "(", "self", ".", "start_land_zone", ")", "\n", "return", "list", "(", "zip", "(", "similar", "[", "1", "]", ",", "similar", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.Map.get_free_space_vector": [[15, 20], ["numpy.logical_not", "numpy.where", "list", "numpy.logical_or", "zip"], "methods", ["None"], ["", "def", "get_free_space_vector", "(", "self", ")", ":", "\n", "        ", "free_space", "=", "np", ".", "logical_not", "(", "\n", "np", ".", "logical_or", "(", "self", ".", "obstacles", ",", "self", ".", "start_land_zone", ")", ")", "\n", "free_idcs", "=", "np", ".", "where", "(", "free_space", ")", "\n", "return", "list", "(", "zip", "(", "free_idcs", "[", "1", "]", ",", "free_idcs", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.Map.get_size": [[21, 23], ["None"], "methods", ["None"], ["", "def", "get_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "start_land_zone", ".", "shape", "[", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.load_image": [[25, 30], ["skimage.io.imread", "numpy.array", "type", "TypeError"], "function", ["None"], ["", "", "def", "load_image", "(", "path", ")", ":", "\n", "    ", "if", "type", "(", "path", ")", "is", "not", "str", ":", "\n", "        ", "raise", "TypeError", "(", "'path needs to be a string'", ")", "\n", "", "data", "=", "io", ".", "imread", "(", "path", ",", "as_gray", "=", "True", ")", "\n", "return", "np", ".", "array", "(", "data", ",", "dtype", "=", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.save_image": [[32, 39], ["type", "TypeError", "skimage.io.imsave", "skimage.io.imsave", "numpy.uint8"], "function", ["None"], ["", "def", "save_image", "(", "path", ",", "image", ")", ":", "\n", "    ", "if", "type", "(", "path", ")", "is", "not", "str", ":", "\n", "        ", "raise", "TypeError", "(", "'path needs to be a string'", ")", "\n", "", "if", "image", ".", "dtype", "==", "bool", ":", "\n", "        ", "io", ".", "imsave", "(", "path", ",", "image", "*", "np", ".", "uint8", "(", "255", ")", ")", "\n", "", "else", ":", "\n", "        ", "io", ".", "imsave", "(", "path", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.load_map": [[41, 46], ["skimage.io.imread", "Map.Map", "type", "TypeError"], "function", ["None"], ["", "", "def", "load_map", "(", "path", ")", ":", "\n", "    ", "if", "type", "(", "path", ")", "is", "not", "str", ":", "\n", "        ", "raise", "TypeError", "(", "'path needs to be a string'", ")", "\n", "", "data", "=", "io", ".", "imread", "(", "path", ",", "as_gray", "=", "False", ")", "\n", "return", "Map", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.load_target": [[48, 53], ["skimage.io.imread", "numpy.array", "type", "TypeError"], "function", ["None"], ["", "def", "load_target", "(", "path", ")", ":", "\n", "    ", "if", "type", "(", "path", ")", "is", "not", "str", ":", "\n", "        ", "raise", "TypeError", "(", "'path needs to be a string'", ")", "\n", "", "data", "=", "io", ".", "imread", "(", "path", ",", "as_gray", "=", "True", ")", "\n", "return", "np", ".", "array", "(", "data", ",", "dtype", "=", "bool", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridPhysics.GridPhysics.__init__": [[5, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "landing_attempts", "=", "0", "\n", "self", ".", "boundary_counter", "=", "0", "\n", "self", ".", "state", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridPhysics.GridPhysics.movement_step": [[10, 38], ["GridPhysics.GridPhysics.state.set_position", "GridPhysics.GridPhysics.state.is_in_no_fly_zone", "GridPhysics.GridPhysics.state.decrement_movement_budget", "GridPhysics.GridPhysics.state.set_terminal", "GridPhysics.GridPhysics.state.set_position", "GridPhysics.GridPhysics.state.is_in_landing_zone", "GridPhysics.GridPhysics.state.set_landed"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.set_position", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.is_in_no_fly_zone", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.decrement_movement_budget", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.set_terminal", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.set_position", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Physics.Physics.is_in_landing_zone", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.set_landed"], ["", "def", "movement_step", "(", "self", ",", "action", ":", "GridActions", ")", ":", "\n", "        ", "old_position", "=", "self", ".", "state", ".", "position", "\n", "x", ",", "y", "=", "old_position", "\n", "\n", "if", "action", "==", "GridActions", ".", "NORTH", ":", "\n", "            ", "y", "+=", "1", "\n", "", "elif", "action", "==", "GridActions", ".", "SOUTH", ":", "\n", "            ", "y", "-=", "1", "\n", "", "elif", "action", "==", "GridActions", ".", "WEST", ":", "\n", "            ", "x", "-=", "1", "\n", "", "elif", "action", "==", "GridActions", ".", "EAST", ":", "\n", "            ", "x", "+=", "1", "\n", "", "elif", "action", "==", "GridActions", ".", "LAND", ":", "\n", "            ", "self", ".", "landing_attempts", "+=", "1", "\n", "if", "self", ".", "state", ".", "is_in_landing_zone", "(", ")", ":", "\n", "                ", "self", ".", "state", ".", "set_landed", "(", "True", ")", "\n", "\n", "", "", "self", ".", "state", ".", "set_position", "(", "[", "x", ",", "y", "]", ")", "\n", "if", "self", ".", "state", ".", "is_in_no_fly_zone", "(", ")", ":", "\n", "# Reset state", "\n", "            ", "self", ".", "boundary_counter", "+=", "1", "\n", "x", ",", "y", "=", "old_position", "\n", "self", ".", "state", ".", "set_position", "(", "[", "x", ",", "y", "]", ")", "\n", "\n", "", "self", ".", "state", ".", "decrement_movement_budget", "(", ")", "\n", "self", ".", "state", ".", "set_terminal", "(", "self", ".", "state", ".", "landed", "or", "(", "self", ".", "state", ".", "movement_budget", "==", "0", ")", ")", "\n", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridPhysics.GridPhysics.reset": [[39, 43], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "landing_attempts", "=", "0", "\n", "self", ".", "boundary_counter", "=", "0", "\n", "self", ".", "state", "=", "state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseGrid.BaseGridParams.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "movement_range", "=", "(", "100", ",", "200", ")", "\n", "self", ".", "map_path", "=", "'res/manhattan32.png'", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseGrid.BaseGrid.__init__": [[12, 17], ["src.load_map", "BaseGrid.BaseGrid.map_image.get_starting_vector", "stats.set_env_map_callback"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.load_map", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.Map.get_starting_vector", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.set_env_map_callback"], ["    ", "def", "__init__", "(", "self", ",", "params", ":", "BaseGridParams", ",", "stats", ":", "ModelStats", ")", ":", "\n", "        ", "self", ".", "map_image", "=", "Map", ".", "load_map", "(", "params", ".", "map_path", ")", "\n", "self", ".", "shape", "=", "self", ".", "map_image", ".", "start_land_zone", ".", "shape", "\n", "self", ".", "starting_vector", "=", "self", ".", "map_image", ".", "get_starting_vector", "(", ")", "\n", "stats", ".", "set_env_map_callback", "(", "self", ".", "get_map_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseGrid.BaseGrid.get_map_image": [[18, 20], ["None"], "methods", ["None"], ["", "def", "get_map_image", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "map_image", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseGrid.BaseGrid.get_grid_size": [[21, 23], ["None"], "methods", ["None"], ["", "def", "get_grid_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseGrid.BaseGrid.get_no_fly": [[24, 26], ["None"], "methods", ["None"], ["", "def", "get_no_fly", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "map_image", ".", "nfz", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseGrid.BaseGrid.get_landing_zone": [[27, 29], ["None"], "methods", ["None"], ["", "def", "get_landing_zone", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "map_image", ".", "start_land_zone", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseDisplay.BaseDisplay.__init__": [[9, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "arrow_scale", "=", "14", "\n", "self", ".", "marker_size", "=", "15", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseDisplay.BaseDisplay.create_grid_image": [[13, 90], ["env_map.get_size", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.logical_not", "numpy.zeros", "numpy.zeros.copy", "numpy.zeros.copy", "numpy.zeros.copy", "numpy.ones", "skimage.color.rgb2hsv", "value_map.astype", "skimage.color.hsv2rgb", "matplotlib.sca", "matplotlib.gca().set_aspect", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.axis", "ax.imshow", "range", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.yticks", "numpy.zeros", "numpy.logical_or", "numpy.arange", "numpy.arange", "skimage.color.hsv2rgb.astype", "range", "numpy.logical_or", "numpy.arange", "numpy.arange", "matplotlib.gca", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "matplotlib.patches.Rectangle", "ax.add_patch"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.Map.Map.Map.get_size"], ["", "def", "create_grid_image", "(", "self", ",", "ax", ",", "env_map", ":", "Map", ",", "value_map", ",", "green", "=", "None", ")", ":", "\n", "        ", "area_y_max", ",", "area_x_max", "=", "env_map", ".", "get_size", "(", ")", "\n", "\n", "if", "green", "is", "None", ":", "\n", "            ", "green", "=", "np", ".", "zeros", "(", "(", "area_y_max", ",", "area_x_max", ")", ")", "\n", "\n", "", "nfz", "=", "np", ".", "expand_dims", "(", "env_map", ".", "nfz", ",", "-", "1", ")", "\n", "lz", "=", "np", ".", "expand_dims", "(", "env_map", ".", "start_land_zone", ",", "-", "1", ")", "\n", "green", "=", "np", ".", "expand_dims", "(", "green", ",", "-", "1", ")", "\n", "\n", "neither", "=", "np", ".", "logical_not", "(", "np", ".", "logical_or", "(", "np", ".", "logical_or", "(", "nfz", ",", "lz", ")", ",", "green", ")", ")", "\n", "\n", "base", "=", "np", ".", "zeros", "(", "(", "area_y_max", ",", "area_x_max", ",", "3", ")", ")", "\n", "\n", "nfz_color", "=", "base", ".", "copy", "(", ")", "\n", "nfz_color", "[", "...", ",", "0", "]", "=", "0.8", "\n", "\n", "lz_color", "=", "base", ".", "copy", "(", ")", "\n", "lz_color", "[", "...", ",", "2", "]", "=", "0.8", "\n", "\n", "green_color", "=", "base", ".", "copy", "(", ")", "\n", "green_color", "[", "...", ",", "1", "]", "=", "0.8", "\n", "\n", "neither_color", "=", "np", ".", "ones", "(", "(", "area_y_max", ",", "area_x_max", ",", "3", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "grid_image", "=", "green_color", "*", "green", "+", "nfz_color", "*", "nfz", "+", "lz_color", "*", "lz", "+", "neither_color", "*", "neither", "\n", "\n", "# value_map = final_state.coverage * 1.0 + (~final_state.coverage) * 0.75", "\n", "\n", "hsv_image", "=", "rgb2hsv", "(", "grid_image", ")", "\n", "hsv_image", "[", "...", ",", "2", "]", "*=", "value_map", ".", "astype", "(", "'float32'", ")", "\n", "\n", "grid_image", "=", "hsv2rgb", "(", "hsv_image", ")", "\n", "\n", "if", "(", "area_x_max", ",", "area_y_max", ")", "==", "(", "64", ",", "64", ")", ":", "\n", "            ", "tick_labels_x", "=", "np", ".", "arange", "(", "0", ",", "area_x_max", ",", "4", ")", "\n", "tick_labels_y", "=", "np", ".", "arange", "(", "0", ",", "area_y_max", ",", "4", ")", "\n", "self", ".", "arrow_scale", "=", "14", "\n", "self", ".", "marker_size", "=", "6", "\n", "", "elif", "(", "area_x_max", ",", "area_y_max", ")", "==", "(", "32", ",", "32", ")", ":", "\n", "            ", "tick_labels_x", "=", "np", ".", "arange", "(", "0", ",", "area_x_max", ",", "2", ")", "\n", "tick_labels_y", "=", "np", ".", "arange", "(", "0", ",", "area_y_max", ",", "2", ")", "\n", "self", ".", "arrow_scale", "=", "8", "\n", "self", ".", "marker_size", "=", "15", "\n", "", "elif", "(", "area_x_max", ",", "area_y_max", ")", "==", "(", "50", ",", "50", ")", ":", "\n", "            ", "tick_labels_x", "=", "np", ".", "arange", "(", "0", ",", "area_x_max", ",", "4", ")", "\n", "tick_labels_y", "=", "np", ".", "arange", "(", "0", ",", "area_y_max", ",", "4", ")", "\n", "self", ".", "arrow_scale", "=", "12", "\n", "self", ".", "marker_size", "=", "8", "\n", "", "else", ":", "\n", "            ", "tick_labels_x", "=", "np", ".", "arange", "(", "0", ",", "area_x_max", ",", "1", ")", "\n", "tick_labels_y", "=", "np", ".", "arange", "(", "0", ",", "area_y_max", ",", "1", ")", "\n", "self", ".", "arrow_scale", "=", "5", "\n", "self", ".", "marker_size", "=", "15", "\n", "\n", "", "plt", ".", "sca", "(", "ax", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_aspect", "(", "'equal'", ",", "adjustable", "=", "'box'", ")", "\n", "plt", ".", "xticks", "(", "tick_labels_x", ")", "\n", "plt", ".", "yticks", "(", "tick_labels_y", ")", "\n", "plt", ".", "axis", "(", "[", "0", ",", "area_x_max", ",", "area_y_max", ",", "0", "]", ")", "\n", "ax", ".", "imshow", "(", "grid_image", ".", "astype", "(", "float", ")", ",", "extent", "=", "[", "0", ",", "area_x_max", ",", "area_y_max", ",", "0", "]", ")", "\n", "# plt.axis('off')", "\n", "\n", "obst", "=", "env_map", ".", "obstacles", "\n", "for", "i", "in", "range", "(", "area_x_max", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "area_y_max", ")", ":", "\n", "                ", "if", "obst", "[", "j", ",", "i", "]", ":", "\n", "                    ", "rect", "=", "patches", ".", "Rectangle", "(", "(", "i", ",", "j", ")", ",", "1", ",", "1", ",", "fill", "=", "None", ",", "hatch", "=", "'////'", ",", "edgecolor", "=", "\"Black\"", ")", "\n", "ax", ".", "add_patch", "(", "rect", ")", "\n", "\n", "# offset to shift tick labels", "\n", "", "", "", "locs", ",", "labels", "=", "plt", ".", "xticks", "(", ")", "\n", "locs_new", "=", "[", "x", "+", "0.5", "for", "x", "in", "locs", "]", "\n", "plt", ".", "xticks", "(", "locs_new", ",", "tick_labels_x", ")", "\n", "\n", "locs", ",", "labels", "=", "plt", ".", "yticks", "(", ")", "\n", "locs_new", "=", "[", "x", "+", "0.5", "for", "x", "in", "locs", "]", "\n", "plt", ".", "yticks", "(", "locs_new", ",", "tick_labels_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseDisplay.BaseDisplay.draw_start_and_end": [[91, 107], ["matplotlib.scatter", "matplotlib.scatter", "matplotlib.scatter"], "methods", ["None"], ["", "def", "draw_start_and_end", "(", "self", ",", "trajectory", ")", ":", "\n", "        ", "for", "exp", "in", "trajectory", ":", "\n", "            ", "state", ",", "action", ",", "reward", ",", "next_state", "=", "exp", "\n", "\n", "# Identify first moves", "\n", "if", "state", ".", "movement_budget", "==", "state", ".", "initial_movement_budget", ":", "\n", "                ", "plt", ".", "scatter", "(", "state", ".", "position", "[", "0", "]", "+", "0.5", ",", "state", ".", "position", "[", "1", "]", "+", "0.5", ",", "s", "=", "self", ".", "marker_size", ",", "marker", "=", "\"D\"", ",", "color", "=", "\"w\"", ")", "\n", "\n", "# Identify last moves", "\n", "", "if", "next_state", ".", "terminal", ":", "\n", "                ", "if", "next_state", ".", "landed", ":", "\n", "                    ", "plt", ".", "scatter", "(", "next_state", ".", "position", "[", "0", "]", "+", "0.5", ",", "next_state", ".", "position", "[", "1", "]", "+", "0.5", ",", "\n", "s", "=", "self", ".", "marker_size", ",", "marker", "=", "\"D\"", ",", "color", "=", "\"green\"", ")", "\n", "", "else", ":", "\n", "                    ", "plt", ".", "scatter", "(", "next_state", ".", "position", "[", "0", "]", "+", "0.5", ",", "next_state", ".", "position", "[", "1", "]", "+", "0.5", ",", "\n", "s", "=", "self", ".", "marker_size", ",", "marker", "=", "\"D\"", ",", "color", "=", "\"r\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseDisplay.BaseDisplay.draw_movement": [[108, 122], ["matplotlib.scatter", "matplotlib.quiver", "matplotlib.quiver", "abs", "abs"], "methods", ["None"], ["", "", "", "", "def", "draw_movement", "(", "self", ",", "from_position", ",", "to_position", ",", "color", ")", ":", "\n", "        ", "y", "=", "from_position", "[", "1", "]", "\n", "x", "=", "from_position", "[", "0", "]", "\n", "dir_y", "=", "to_position", "[", "1", "]", "-", "y", "\n", "dir_x", "=", "to_position", "[", "0", "]", "-", "x", "\n", "if", "dir_x", "==", "0", "and", "dir_y", "==", "0", ":", "\n", "            ", "plt", ".", "scatter", "(", "x", "+", "0.5", ",", "y", "+", "0.5", ",", "marker", "=", "\"X\"", ",", "color", "=", "color", ")", "\n", "", "else", ":", "\n", "            ", "if", "abs", "(", "dir_x", ")", ">=", "1", "or", "abs", "(", "dir_y", ")", ">=", "1", ":", "\n", "                ", "plt", ".", "quiver", "(", "x", "+", "0.5", ",", "y", "+", "0.5", ",", "dir_x", ",", "-", "dir_y", ",", "color", "=", "color", ",", "\n", "scale", "=", "self", ".", "arrow_scale", ",", "scale_units", "=", "'inches'", ")", "\n", "", "else", ":", "\n", "                ", "plt", ".", "quiver", "(", "x", "+", "0.5", ",", "y", "+", "0.5", ",", "dir_x", ",", "-", "dir_y", ",", "color", "=", "color", ",", "\n", "scale", "=", "self", ".", "arrow_scale", ",", "scale_units", "=", "'inches'", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridRewards.GridRewardParams.__init__": [[5, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "boundary_penalty", "=", "1.0", "\n", "self", ".", "empty_battery_penalty", "=", "150.0", "\n", "self", ".", "movement_penalty", "=", "0.2", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridRewards.GridRewards.__init__": [[12, 17], ["GridRewards.GridRewardParams", "stats.add_log_data_callback"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.add_log_data_callback"], ["    ", "def", "__init__", "(", "self", ",", "stats", ")", ":", "\n", "        ", "self", ".", "params", "=", "GridRewardParams", "(", ")", "\n", "self", ".", "cumulative_reward", ":", "float", "=", "0.0", "\n", "\n", "stats", ".", "add_log_data_callback", "(", "'cumulative_reward'", ",", "self", ".", "get_cumulative_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridRewards.GridRewards.get_cumulative_reward": [[18, 20], ["None"], "methods", ["None"], ["", "def", "get_cumulative_reward", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cumulative_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridRewards.GridRewards.calculate_motion_rewards": [[21, 37], ["None"], "methods", ["None"], ["", "def", "calculate_motion_rewards", "(", "self", ",", "state", ",", "action", ":", "GridActions", ",", "next_state", ")", ":", "\n", "        ", "reward", "=", "0.0", "\n", "if", "not", "next_state", ".", "landed", ":", "\n", "# Penalize battery Consumption", "\n", "            ", "reward", "-=", "self", ".", "params", ".", "movement_penalty", "\n", "\n", "# Penalize not moving (This happens when it either tries to land or fly into a boundary or hovers or fly into", "\n", "# a cell occupied by another agent)", "\n", "", "if", "state", ".", "position", "==", "next_state", ".", "position", "and", "not", "next_state", ".", "landed", "and", "not", "action", "==", "GridActions", ".", "HOVER", ":", "\n", "            ", "reward", "-=", "self", ".", "params", ".", "boundary_penalty", "\n", "\n", "# Penalize battery dead", "\n", "", "if", "next_state", ".", "movement_budget", "==", "0", "and", "not", "next_state", ".", "landed", ":", "\n", "            ", "reward", "-=", "self", ".", "params", ".", "empty_battery_penalty", "\n", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridRewards.GridRewards.reset": [[38, 40], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "cumulative_reward", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseState.BaseState.__init__": [[5, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "map_init", ":", "Map", ")", ":", "\n", "        ", "self", ".", "no_fly_zone", "=", "map_init", ".", "nfz", "\n", "self", ".", "obstacles", "=", "map_init", ".", "obstacles", "\n", "self", ".", "landing_zone", "=", "map_init", ".", "start_land_zone", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.BaseState.BaseState.shape": [[10, 13], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "landing_zone", ".", "shape", "[", ":", "2", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironmentParams.__init__": [[10, 12], ["src.ModelStats.ModelStatsParams"], "methods", ["None"], ["from", "src", ".", "Physics", "import", "PhysicsParams", ",", "Physics", "\n", "from", "src", ".", "Rewards", "import", "RewardParams", ",", "Rewards", "\n", "from", "src", ".", "State", "import", "State", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.__init__": [[15, 24], ["src.ModelStats.ModelStats"], "methods", ["None"], ["\n", "\n", "class", "EnvironmentParams", "(", "BaseEnvironmentParams", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "grid_params", "=", "GridParams", "(", ")", "\n", "self", ".", "reward_params", "=", "RewardParams", "(", ")", "\n", "self", ".", "trainer_params", "=", "DDQNTrainerParams", "(", ")", "\n", "self", ".", "agent_params", "=", "DDQNAgentParams", "(", ")", "\n", "self", ".", "physics_params", "=", "PhysicsParams", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.fill_replay_memory": [[25, 33], ["Environment.BaseEnvironment.trainer.should_fill_replay_memory", "copy.deepcopy", "Environment.BaseEnvironment.init_episode", "Environment.BaseEnvironment.step", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Trainer.DDQNTrainer.should_fill_replay_memory", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.init_episode", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.step"], ["\n", "\n", "", "", "class", "Environment", "(", "BaseEnvironment", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "params", ":", "EnvironmentParams", ")", ":", "\n", "        ", "self", ".", "display", "=", "DHDisplay", "(", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "self", ".", "display", ")", "\n", "\n", "self", ".", "grid", "=", "Grid", "(", "params", ".", "grid_params", ",", "stats", "=", "self", ".", "stats", ")", "\n", "self", ".", "rewards", "=", "Rewards", "(", "params", ".", "reward_params", ",", "stats", "=", "self", ".", "stats", ")", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.train_episode": [[34, 45], ["copy.deepcopy", "Environment.BaseEnvironment.stats.on_episode_begin", "Environment.BaseEnvironment.stats.on_episode_end", "Environment.BaseEnvironment.stats.log_training_data", "Environment.BaseEnvironment.init_episode", "Environment.BaseEnvironment.is_terminal", "Environment.BaseEnvironment.step", "Environment.BaseEnvironment.trainer.train_agent"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.on_episode_begin", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.on_episode_end", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.log_training_data", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.init_episode", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.State.State.is_terminal", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.step", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.DDQN.Trainer.DDQNTrainer.train_agent"], ["self", ".", "physics", "=", "Physics", "(", "params", "=", "params", ".", "physics_params", ",", "stats", "=", "self", ".", "stats", ")", "\n", "self", ".", "agent", "=", "DDQNAgent", "(", "params", ".", "agent_params", ",", "self", ".", "grid", ".", "get_example_state", "(", ")", ",", "self", ".", "physics", ".", "get_example_action", "(", ")", ",", "\n", "stats", "=", "self", ".", "stats", ")", "\n", "self", ".", "trainer", "=", "DDQNTrainer", "(", "params", ".", "trainer_params", ",", "agent", "=", "self", ".", "agent", ")", "\n", "\n", "self", ".", "display", ".", "set_channel", "(", "self", ".", "physics", ".", "channel", ")", "\n", "\n", "self", ".", "first_action", "=", "True", "\n", "self", ".", "last_actions", "=", "[", "]", "\n", "self", ".", "last_rewards", "=", "[", "]", "\n", "self", ".", "last_states", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.run": [[46, 65], ["Environment.BaseEnvironment.fill_replay_memory", "print", "tqdm.tqdm", "Environment.BaseEnvironment.stats.training_ended", "tqdm.tqdm.update", "Environment.BaseEnvironment.train_episode", "Environment.BaseEnvironment.stats.save_if_best", "int", "Environment.BaseEnvironment.test_episode"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.fill_replay_memory", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.training_ended", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.train_episode", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.save_if_best", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.test_episode"], ["", "def", "test_episode", "(", "self", ")", ":", "\n", "        ", "state", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_episode", "(", ")", ")", "\n", "self", ".", "stats", ".", "on_episode_begin", "(", "self", ".", "episode_count", ")", "\n", "first_action", "=", "True", "\n", "while", "not", "state", ".", "all_terminal", ":", "\n", "            ", "for", "state", ".", "active_agent", "in", "range", "(", "state", ".", "num_agents", ")", ":", "\n", "                ", "if", "state", ".", "terminal", ":", "\n", "                    ", "continue", "\n", "", "action", "=", "self", ".", "agent", ".", "get_exploitation_action_target", "(", "state", ")", "\n", "if", "not", "first_action", ":", "\n", "                    ", "reward", "=", "self", ".", "rewards", ".", "calculate_reward", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "\n", "GridActions", "(", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ")", ",", "state", ")", "\n", "self", ".", "stats", ".", "add_experience", "(", "\n", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ",", "reward", ",", "\n", "copy", ".", "deepcopy", "(", "state", ")", ")", ")", "\n", "\n", "", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", "=", "copy", ".", "deepcopy", "(", "state", ")", "\n", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", "=", "action", "\n", "state", "=", "self", ".", "physics", ".", "step", "(", "GridActions", "(", "action", ")", ")", "\n", "if", "state", ".", "terminal", ":", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.step": [[66, 68], ["None"], "methods", ["None"], ["                    ", "reward", "=", "self", ".", "rewards", ".", "calculate_reward", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "\n", "GridActions", "(", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ")", ",", "state", ")", "\n", "self", ".", "stats", ".", "add_experience", "(", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.init_episode": [[69, 78], ["Environment.BaseEnvironment.rewards.reset", "Environment.BaseEnvironment.physics.reset", "copy.deepcopy", "copy.deepcopy", "Environment.BaseEnvironment.grid.init_scenario", "Environment.BaseEnvironment.grid.init_episode"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridRewards.GridRewards.reset", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.GridRewards.GridRewards.reset", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Grid.Grid.init_scenario", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.init_episode"], ["(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ",", "reward", ",", "\n", "copy", ".", "deepcopy", "(", "state", ")", ")", ")", "\n", "\n", "", "", "first_action", "=", "False", "\n", "\n", "", "self", ".", "stats", ".", "on_episode_end", "(", "self", ".", "episode_count", ")", "\n", "self", ".", "stats", ".", "log_testing_data", "(", "step", "=", "self", ".", "step_count", ")", "\n", "\n", "", "def", "test_scenario", "(", "self", ",", "scenario", ")", ":", "\n", "        ", "state", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_episode", "(", "scenario", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.test_episode": [[79, 81], ["None"], "methods", ["None"], ["while", "not", "state", ".", "all_terminal", ":", "\n", "            ", "for", "state", ".", "active_agent", "in", "range", "(", "state", ".", "num_agents", ")", ":", "\n", "                ", "if", "state", ".", "terminal", ":", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.test_scenario": [[82, 84], ["None"], "methods", ["None"], ["                    ", "continue", "\n", "", "action", "=", "self", ".", "agent", ".", "get_exploitation_action_target", "(", "state", ")", "\n", "state", "=", "self", ".", "physics", ".", "step", "(", "GridActions", "(", "action", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.eval": [[85, 106], ["tqdm.tqdm", "range", "Environment.BaseEnvironment.test_episode", "Environment.BaseEnvironment.display.display_episode", "input", "print", "distutils.util.strtobool", "input", "Environment.BaseEnvironment.display.display_episode", "Environment.BaseEnvironment.stats.save_episode", "print", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.test_episode", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Display.DHDisplay.display_episode", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Display.DHDisplay.display_episode", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.save_episode"], ["\n", "", "", "", "def", "step", "(", "self", ",", "state", ":", "State", ",", "random", "=", "False", ")", ":", "\n", "        ", "for", "state", ".", "active_agent", "in", "range", "(", "state", ".", "num_agents", ")", ":", "\n", "            ", "if", "state", ".", "terminal", ":", "\n", "                ", "continue", "\n", "", "if", "random", ":", "\n", "                ", "action", "=", "self", ".", "agent", ".", "get_random_action", "(", ")", "\n", "", "else", ":", "\n", "                ", "action", "=", "self", ".", "agent", ".", "act", "(", "state", ")", "\n", "", "if", "not", "self", ".", "first_action", ":", "\n", "                ", "reward", "=", "self", ".", "rewards", ".", "calculate_reward", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "\n", "GridActions", "(", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ")", ",", "state", ")", "\n", "self", ".", "trainer", ".", "add_experience", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ",", "\n", "reward", ",", "state", ")", "\n", "self", ".", "stats", ".", "add_experience", "(", "\n", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ",", "reward", ",", "\n", "copy", ".", "deepcopy", "(", "state", ")", ")", ")", "\n", "\n", "", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", "=", "copy", ".", "deepcopy", "(", "state", ")", "\n", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", "=", "action", "\n", "state", "=", "self", ".", "physics", ".", "step", "(", "GridActions", "(", "action", ")", ")", "\n", "if", "state", ".", "terminal", ":", "\n"]], "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.eval_scenario": [[107, 124], ["Environment.BaseEnvironment.test_scenario", "Environment.BaseEnvironment.display.display_episode", "input", "distutils.util.strtobool", "input", "Environment.BaseEnvironment.display.display_episode", "Environment.BaseEnvironment.stats.save_episode", "print"], "methods", ["home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.base.Environment.BaseEnvironment.test_scenario", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Display.DHDisplay.display_episode", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.Display.DHDisplay.display_episode", "home.repos.pwc.inspect_result.hbayerlein_uav_data_harvesting.src.ModelStats.ModelStats.save_episode"], ["                ", "reward", "=", "self", ".", "rewards", ".", "calculate_reward", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "\n", "GridActions", "(", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ")", ",", "state", ")", "\n", "self", ".", "trainer", ".", "add_experience", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ",", "\n", "reward", ",", "state", ")", "\n", "self", ".", "stats", ".", "add_experience", "(", "\n", "(", "self", ".", "last_states", "[", "state", ".", "active_agent", "]", ",", "self", ".", "last_actions", "[", "state", ".", "active_agent", "]", ",", "reward", ",", "\n", "copy", ".", "deepcopy", "(", "state", ")", ")", ")", "\n", "\n", "", "", "self", ".", "step_count", "+=", "1", "\n", "self", ".", "first_action", "=", "False", "\n", "return", "state", "\n", "\n", "", "def", "init_episode", "(", "self", ",", "init_state", "=", "None", ")", ":", "\n", "        ", "state", "=", "super", "(", ")", ".", "init_episode", "(", "init_state", ")", "\n", "self", ".", "last_states", "=", "[", "None", "]", "*", "state", ".", "num_agents", "\n", "self", ".", "last_actions", "=", "[", "None", "]", "*", "state", ".", "num_agents", "\n", "self", ".", "first_action", "=", "True", "\n", "return", "state", "\n"]]}