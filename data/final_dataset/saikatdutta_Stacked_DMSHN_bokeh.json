{"home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.None.stacked_DMSHN.stacked_DMSHN.__init__": [[8, 12], ["torch.Module.__init__", "DMSHN.DMSHN.DMSHN", "DMSHN.DMSHN.DMSHN"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "stacked_DMSHN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net1", "=", "DMSHN", "(", ")", "\n", "self", ".", "net2", "=", "DMSHN", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.None.stacked_DMSHN.stacked_DMSHN.forward": [[13, 18], ["stacked_DMSHN.stacked_DMSHN.net1", "stacked_DMSHN.stacked_DMSHN.net2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out1", "=", "self", ".", "net1", "(", "x", ")", "\n", "out2", "=", "self", ".", "net2", "(", "out1", ")", "\n", "\n", "return", "out2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.None.DMSHN.Encoder.__init__": [[6, 43], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#Conv1", "\n", "self", ".", "layer1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "layer3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n", "#Conv2", "\n", "self", ".", "layer5", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "layer7", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n", "#Conv3", "\n", "self", ".", "layer9", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer10", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "layer11", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.None.DMSHN.Encoder.forward": [[45, 59], ["DMSHN.Encoder.layer1", "DMSHN.Encoder.layer5", "DMSHN.Encoder.layer9", "DMSHN.Encoder.layer2", "DMSHN.Encoder.layer3", "DMSHN.Encoder.layer6", "DMSHN.Encoder.layer7", "DMSHN.Encoder.layer10", "DMSHN.Encoder.layer11"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#Conv1", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "+", "x", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "+", "x", "\n", "#Conv2", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "x", "=", "self", ".", "layer6", "(", "x", ")", "+", "x", "\n", "x", "=", "self", ".", "layer7", "(", "x", ")", "+", "x", "\n", "#Conv3", "\n", "x", "=", "self", ".", "layer9", "(", "x", ")", "\n", "x", "=", "self", ".", "layer10", "(", "x", ")", "+", "x", "\n", "x", "=", "self", ".", "layer11", "(", "x", ")", "+", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.None.DMSHN.Decoder.__init__": [[61, 99], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Deconv3", "\n", "self", ".", "layer13", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "layer14", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "layer16", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "#Deconv2", "\n", "self", ".", "layer17", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "layer18", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "layer20", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "#Deconv1", "\n", "self", ".", "layer21", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "layer22", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "layer24", "=", "nn", ".", "Conv2d", "(", "32", ",", "3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.None.DMSHN.Decoder.forward": [[100, 114], ["DMSHN.Decoder.layer16", "DMSHN.Decoder.layer20", "DMSHN.Decoder.layer24", "DMSHN.Decoder.layer13", "DMSHN.Decoder.layer14", "DMSHN.Decoder.layer17", "DMSHN.Decoder.layer18", "DMSHN.Decoder.layer21", "DMSHN.Decoder.layer22"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#Deconv3", "\n", "        ", "x", "=", "self", ".", "layer13", "(", "x", ")", "+", "x", "\n", "x", "=", "self", ".", "layer14", "(", "x", ")", "+", "x", "\n", "x", "=", "self", ".", "layer16", "(", "x", ")", "\n", "#Deconv2", "\n", "x", "=", "self", ".", "layer17", "(", "x", ")", "+", "x", "\n", "x", "=", "self", ".", "layer18", "(", "x", ")", "+", "x", "\n", "x", "=", "self", ".", "layer20", "(", "x", ")", "\n", "#Deconv1", "\n", "x", "=", "self", ".", "layer21", "(", "x", ")", "+", "x", "\n", "x", "=", "self", ".", "layer22", "(", "x", ")", "+", "x", "\n", "x", "=", "self", ".", "layer24", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.None.DMSHN.DMSHN.__init__": [[116, 125], ["torch.Module.__init__", "DMSHN.Encoder", "DMSHN.Encoder", "DMSHN.Encoder", "DMSHN.Decoder", "DMSHN.Decoder", "DMSHN.Decoder"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DMSHN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder_lv1", "=", "Encoder", "(", ")", "\n", "self", ".", "encoder_lv2", "=", "Encoder", "(", ")", "\n", "self", ".", "encoder_lv3", "=", "Encoder", "(", ")", "\n", "\n", "self", ".", "decoder_lv1", "=", "Decoder", "(", ")", "\n", "self", ".", "decoder_lv2", "=", "Decoder", "(", ")", "\n", "self", ".", "decoder_lv3", "=", "Decoder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.None.DMSHN.DMSHN.forward": [[126, 150], ["images_lv1.size", "images_lv1.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DMSHN.DMSHN.encoder_lv3", "DMSHN.DMSHN.decoder_lv3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DMSHN.DMSHN.encoder_lv2", "DMSHN.DMSHN.decoder_lv2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DMSHN.DMSHN.encoder_lv1", "DMSHN.DMSHN.decoder_lv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images_lv1", ")", ":", "\n", "        ", "H", "=", "images_lv1", ".", "size", "(", "2", ")", "\n", "W", "=", "images_lv1", ".", "size", "(", "3", ")", "\n", "\n", "images_lv2", "=", "F", ".", "interpolate", "(", "images_lv1", ",", "scale_factor", "=", "0.5", ",", "mode", "=", "'bilinear'", ")", "\n", "images_lv3", "=", "F", ".", "interpolate", "(", "images_lv2", ",", "scale_factor", "=", "0.5", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "feature_lv3", "=", "self", ".", "encoder_lv3", "(", "images_lv3", ")", "\n", "residual_lv3", "=", "self", ".", "decoder_lv3", "(", "feature_lv3", ")", "\n", "out_lv3", "=", "images_lv3", "+", "residual_lv3", "\n", "\n", "residual_lv3", "=", "F", ".", "interpolate", "(", "residual_lv3", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "\n", "feature_lv3", "=", "F", ".", "interpolate", "(", "feature_lv3", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "\n", "feature_lv2", "=", "self", ".", "encoder_lv2", "(", "images_lv2", "+", "residual_lv3", ")", "\n", "residual_lv2", "=", "self", ".", "decoder_lv2", "(", "feature_lv2", "+", "feature_lv3", ")", "\n", "out_lv2", "=", "images_lv2", "+", "residual_lv2", "\n", "\n", "residual_lv2", "=", "F", ".", "interpolate", "(", "residual_lv2", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "\n", "feature_lv2", "=", "F", ".", "interpolate", "(", "feature_lv2", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "\n", "feature_lv1", "=", "self", ".", "encoder_lv1", "(", "images_lv1", "+", "residual_lv2", ")", "\n", "bokeh_image", "=", "self", ".", "decoder_lv1", "(", "feature_lv1", "+", "feature_lv2", ")", "\n", "\n", "\n", "return", "bokeh_image", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.None.stacked_DMSHN_test.count_parameters": [[41, 43], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.html.HTML.__init__": [[7, 23], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "meta", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "image_subdir", "=", "''", ",", "reflesh", "=", "0", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "# self.img_dir = os.path.join(self.web_dir, )", "\n", "self", ".", "img_subdir", "=", "image_subdir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "image_subdir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "# print(self.img_dir)", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "reflesh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"reflesh\"", ",", "content", "=", "str", "(", "reflesh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.html.HTML.get_image_dir": [[24, 26], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.html.HTML.add_header": [[27, 30], ["h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.html.HTML.add_table": [[31, 34], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.html.HTML.add_images": [[35, 46], ["html.HTML.add_table", "tr", "zip", "td", "p", "br", "p", "a", "img", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "400", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "width", ",", "src", "=", "os", ".", "path", ".", "join", "(", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.html.HTML.save": [[47, 52], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ",", "file", "=", "'index'", ")", ":", "\n", "        ", "html_file", "=", "'%s/%s.html'", "%", "(", "self", ".", "web_dir", ",", "file", ")", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.visualizer.Visualizer.__init__": [[21, 41], ["os.path.join", "util.mkdirs", "visdom.Visdom", "os.path.join", "print", "util.mkdirs"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.util.mkdirs", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "# self.opt = opt", "\n", "        ", "self", ".", "display_id", "=", "opt", ".", "display_id", "\n", "# self.use_html = opt.is_train and not opt.no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "self", ".", "display_cnt", "=", "0", "# display_current_results counter", "\n", "self", ".", "display_cnt_high", "=", "0", "\n", "self", ".", "use_html", "=", "opt", ".", "use_html", "\n", "\n", "if", "self", ".", "display_id", ">", "0", ":", "\n", "            ", "import", "visdom", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "port", "=", "opt", ".", "display_port", ")", "\n", "\n", "", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "]", ")", "\n", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "img_dir", ",", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.visualizer.Visualizer.display_current_results": [[43, 92], ["visuals.items", "visualizer.Visualizer.vis.images", "visuals.items", "numpy.maximum", "html.HTML", "range", "html.HTML.save", "int", "image_numpy.transpose", "visualizer.zoom_to_res", "images.append", "visualizer.zoom_to_res", "images.append", "os.path.join", "util.save_image", "html.HTML.add_header", "range", "math.ceil", "len", "numpy.ones_like", "dict", "visualizer.zoom_to_res", "visuals.items", "html.HTML.add_images", "visuals.items", "image_numpy.transpose", "ims.append", "txts.append", "links.append", "len", "os.path.join", "os.path.join", "visuals.items"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.visualizer.zoom_to_res", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.visualizer.zoom_to_res", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.util.save_image", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.html.HTML.add_header", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.visualizer.zoom_to_res", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.html.HTML.add_images"], ["", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "nrows", "=", "None", ",", "res", "=", "256", ")", ":", "\n", "        ", "if", "self", ".", "display_id", ">", "0", ":", "# show images in the browser", "\n", "            ", "title", "=", "self", ".", "name", "\n", "if", "(", "nrows", "is", "None", ")", ":", "\n", "                ", "nrows", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "visuals", ".", "items", "(", ")", ")", "/", "2.0", ")", ")", "\n", "", "images", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "title", "+=", "\" | \"", "if", "idx", "%", "nrows", "==", "0", "else", "\", \"", "\n", "title", "+=", "label", "\n", "img", "=", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "img", "=", "zoom_to_res", "(", "img", ",", "res", "=", "res", ",", "order", "=", "0", ")", "\n", "images", ".", "append", "(", "img", ")", "\n", "idx", "+=", "1", "\n", "", "if", "len", "(", "visuals", ".", "items", "(", ")", ")", "%", "2", "!=", "0", ":", "\n", "                ", "white_image", "=", "np", ".", "ones_like", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "*", "255", "\n", "white_image", "=", "zoom_to_res", "(", "white_image", ",", "res", "=", "res", ",", "order", "=", "0", ")", "\n", "images", ".", "append", "(", "white_image", ")", "\n", "", "self", ".", "vis", ".", "images", "(", "images", ",", "nrow", "=", "nrows", ",", "win", "=", "self", ".", "display_id", "+", "1", ",", "\n", "opts", "=", "dict", "(", "title", "=", "title", ")", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "# save images to a html file", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_cnt%.6d_%s.png'", "%", "(", "epoch", ",", "self", ".", "display_cnt", ",", "label", ")", ")", "\n", "util", ".", "save_image", "(", "zoom_to_res", "(", "image_numpy", ",", "res", "=", "res", ",", "axis", "=", "2", ")", ",", "img_path", ")", "\n", "\n", "", "self", ".", "display_cnt", "+=", "1", "\n", "self", ".", "display_cnt_high", "=", "np", ".", "maximum", "(", "self", ".", "display_cnt_high", ",", "self", ".", "display_cnt", ")", "\n", "\n", "# update website", "\n", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "reflesh", "=", "1", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "if", "(", "n", "==", "epoch", ")", ":", "\n", "                    ", "high", "=", "self", ".", "display_cnt", "\n", "", "else", ":", "\n", "                    ", "high", "=", "self", ".", "display_cnt_high", "\n", "", "for", "c", "in", "range", "(", "high", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                    ", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                        ", "img_path", "=", "'epoch%.3d_cnt%.6d_%s.png'", "%", "(", "n", ",", "c", ",", "label", ")", "\n", "ims", ".", "append", "(", "os", ".", "path", ".", "join", "(", "'images'", ",", "img_path", ")", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "os", ".", "path", ".", "join", "(", "'images'", ",", "img_path", ")", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.visualizer.Visualizer.plot_current_errors_save": [[94, 124], ["visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.plot_data[].append", "enumerate", "hasattr", "matplotlib.subplots", "numpy.save", "numpy.save", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "f.savefig", "f.clf", "matplotlib.close", "list", "numpy.array", "ax.plot", "os.path.join", "errors.keys", "numpy.where", "os.path.join", "os.path.join", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.save"], ["", "", "def", "plot_current_errors_save", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "opt", ",", "errors", ",", "keys", "=", "'+ALL'", ",", "name", "=", "'loss'", ",", "to_plot", "=", "False", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "errors", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "\n", "# embed()", "\n", "if", "(", "keys", "==", "'+ALL'", ")", ":", "\n", "            ", "plot_keys", "=", "self", ".", "plot_data", "[", "'legend'", "]", "\n", "", "else", ":", "\n", "            ", "plot_keys", "=", "keys", "\n", "\n", "", "if", "(", "to_plot", ")", ":", "\n", "            ", "(", "f", ",", "ax", ")", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "", "for", "(", "k", ",", "kname", ")", "in", "enumerate", "(", "plot_keys", ")", ":", "\n", "            ", "kk", "=", "np", ".", "where", "(", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", "==", "kname", ")", "[", "0", "]", "[", "0", "]", "\n", "x", "=", "self", ".", "plot_data", "[", "'X'", "]", "\n", "y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", "[", ":", ",", "kk", "]", "\n", "if", "(", "to_plot", ")", ":", "\n", "                ", "ax", ".", "plot", "(", "x", ",", "y", ",", "'o-'", ",", "label", "=", "kname", ")", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'%s_x'", ")", "%", "kname", ",", "x", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'%s_y'", ")", "%", "kname", ",", "y", ")", "\n", "\n", "", "if", "(", "to_plot", ")", ":", "\n", "            ", "plt", ".", "legend", "(", "loc", "=", "0", ",", "fontsize", "=", "'small'", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'Value'", ")", "\n", "f", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'%s.png'", "%", "name", ")", ")", "\n", "f", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.visualizer.Visualizer.plot_current_errors": [[126, 140], ["visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.vis.line", "hasattr", "list", "numpy.stack", "numpy.array", "errors.keys", "len", "numpy.array"], "methods", ["None"], ["", "", "def", "plot_current_errors", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "opt", ",", "errors", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "errors", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'X'", "]", ")", "]", "*", "len", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", ",", "1", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", ",", "\n", "opts", "=", "{", "\n", "'title'", ":", "self", ".", "name", "+", "' loss over time'", ",", "\n", "'legend'", ":", "self", ".", "plot_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'loss'", "}", ",", "\n", "win", "=", "self", ".", "display_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.visualizer.Visualizer.print_current_errors": [[142, 149], ["print", "fid.write", "errors.items"], "methods", ["None"], ["", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ",", "t2", "=", "-", "1", ",", "t2o", "=", "-", "1", ",", "fid", "=", "None", ")", ":", "\n", "        ", "message", "=", "'(ep: %d, it: %d, t: %.3f[s], ept: %.2f/%.2f[h]) '", "%", "(", "epoch", ",", "i", ",", "t", ",", "t2o", ",", "t2", ")", "\n", "message", "+=", "(", "', '", ")", ".", "join", "(", "[", "'%s: %.3f'", "%", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", "]", ")", "\n", "\n", "print", "(", "message", ")", "\n", "if", "(", "fid", "is", "not", "None", ")", ":", "\n", "            ", "fid", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.visualizer.Visualizer.save_images_simple": [[152, 172], ["webpage.get_image_dir", "zip", "webpage.add_images", "os.path.join", "ims.append", "txts.append", "links.append", "util.save_image", "util.save_image", "os.path.join", "os.path.join", "visualizer.zoom_to_res"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.html.HTML.add_images", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.util.save_image", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.util.save_image", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.visualizer.zoom_to_res"], ["", "", "def", "save_images_simple", "(", "self", ",", "webpage", ",", "images", ",", "names", ",", "in_txts", ",", "prefix", "=", "''", ",", "res", "=", "256", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "name", ",", "image_numpy", ",", "txt", "in", "zip", "(", "names", ",", "images", ",", "in_txts", ")", ":", "\n", "            ", "image_name", "=", "'%s_%s.png'", "%", "(", "prefix", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "if", "(", "res", "is", "not", "None", ")", ":", "\n", "                ", "util", ".", "save_image", "(", "zoom_to_res", "(", "image_numpy", ",", "res", "=", "res", ",", "axis", "=", "2", ")", ",", "save_path", ")", "\n", "", "else", ":", "\n", "                ", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "", "ims", ".", "append", "(", "os", ".", "path", ".", "join", "(", "webpage", ".", "img_subdir", ",", "image_name", ")", ")", "\n", "# txts.append(name)", "\n", "txts", ".", "append", "(", "txt", ")", "\n", "links", ".", "append", "(", "os", ".", "path", ".", "join", "(", "webpage", ".", "img_subdir", ",", "image_name", ")", ")", "\n", "# embed()", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.visualizer.Visualizer.save_images": [[174, 193], ["webpage.get_image_dir", "zip", "webpage.add_images", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.html.HTML.add_images", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.util.save_image"], ["", "def", "save_images", "(", "self", ",", "webpage", ",", "images", ",", "names", ",", "image_path", ",", "title", "=", "''", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "# short_path = ntpath.basename(image_path)", "\n", "# name = os.path.splitext(short_path)[0]", "\n", "# name = short_path", "\n", "# webpage.add_header('%s, %s' % (name, title))", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "zip", "(", "names", ",", "images", ")", ":", "\n", "            ", "image_name", "=", "'%s.jpg'", "%", "(", "label", ",", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.visualizer.zoom_to_res": [[11, 19], ["zoom", "zoom"], "function", ["None"], ["def", "zoom_to_res", "(", "img", ",", "res", "=", "256", ",", "order", "=", "0", ",", "axis", "=", "0", ")", ":", "\n", "# img   3xXxX", "\n", "    ", "from", "scipy", ".", "ndimage", "import", "zoom", "\n", "zoom_factor", "=", "res", "/", "img", ".", "shape", "[", "1", "]", "\n", "if", "(", "axis", "==", "0", ")", ":", "\n", "        ", "return", "zoom", "(", "img", ",", "[", "1", ",", "zoom_factor", ",", "zoom_factor", "]", ",", "order", "=", "order", ")", "\n", "", "elif", "(", "axis", "==", "2", ")", ":", "\n", "        ", "return", "zoom", "(", "img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.util.load_image": [[10, 22], ["rawpy.imread", "raw.postprocess", "cv2.imread", "matplotlib.imread"], "function", ["None"], ["def", "load_image", "(", "path", ")", ":", "\n", "    ", "if", "(", "path", "[", "-", "3", ":", "]", "==", "'dng'", ")", ":", "\n", "        ", "import", "rawpy", "\n", "with", "rawpy", ".", "imread", "(", "path", ")", "as", "raw", ":", "\n", "            ", "img", "=", "raw", ".", "postprocess", "(", ")", "\n", "", "", "elif", "(", "path", "[", "-", "3", ":", "]", "==", "'bmp'", "or", "path", "[", "-", "3", ":", "]", "==", "'jpg'", "or", "path", "[", "-", "3", ":", "]", "==", "'png'", ")", ":", "\n", "        ", "import", "cv2", "\n", "return", "cv2", ".", "imread", "(", "path", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "img", "=", "(", "255", "*", "plt", ".", "imread", "(", "path", ")", "[", ":", ",", ":", ",", ":", "3", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.util.save_image": [[23, 26], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ",", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.util.mkdirs": [[27, 33], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.util.mkdir", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.util.mkdir"], ["", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.util.mkdir": [[34, 37], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.util.tensor2im": [[39, 44], ["image_tensor[].cpu().float().numpy", "image_tensor[].cpu().float().numpy.astype", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["", "", "def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "# def tensor2im(image_tensor, imtype=np.uint8, cent=1., factor=1.):", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "cent", ")", "*", "factor", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.util.util.im2tensor": [[45, 49], ["torch.Tensor", "[].transpose"], "function", ["None"], ["", "def", "im2tensor", "(", "image", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "# def im2tensor(image, imtype=np.uint8, cent=1., factor=1.):", "\n", "    ", "return", "torch", ".", "Tensor", "(", "(", "image", "/", "factor", "-", "cent", ")", "\n", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.PNetLin.__init__": [[28, 63], ["torch.Module.__init__", "networks_basic.ScalingLayer", "len", "net_type", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pnet_type", "=", "'vgg'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "use_dropout", "=", "True", ",", "spatial", "=", "False", ",", "version", "=", "'0.1'", ",", "lpips", "=", "True", ")", ":", "\n", "        ", "super", "(", "PNetLin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pnet_type", "=", "pnet_type", "\n", "self", ".", "pnet_tune", "=", "pnet_tune", "\n", "self", ".", "pnet_rand", "=", "pnet_rand", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "lpips", "=", "lpips", "\n", "self", ".", "version", "=", "version", "\n", "self", ".", "scaling_layer", "=", "ScalingLayer", "(", ")", "\n", "\n", "if", "(", "self", ".", "pnet_type", "in", "[", "'vgg'", ",", "'vgg16'", "]", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "vgg16", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'alex'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "alexnet", "\n", "self", ".", "chns", "=", "[", "64", ",", "192", ",", "384", ",", "256", ",", "256", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "squeezenet", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "384", ",", "384", ",", "512", ",", "512", "]", "\n", "", "self", ".", "L", "=", "len", "(", "self", ".", "chns", ")", "\n", "\n", "self", ".", "net", "=", "net_type", "(", "pretrained", "=", "not", "self", ".", "pnet_rand", ",", "requires_grad", "=", "self", ".", "pnet_tune", ")", "\n", "\n", "if", "(", "lpips", ")", ":", "\n", "            ", "self", ".", "lin0", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "0", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin1", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "1", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin2", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "2", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin3", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "3", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin4", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "4", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "=", "[", "self", ".", "lin0", ",", "self", ".", "lin1", ",", "self", ".", "lin2", ",", "self", ".", "lin3", ",", "self", ".", "lin4", "]", "\n", "if", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "# 7 layers for squeezenet", "\n", "                ", "self", ".", "lin5", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "5", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin6", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "6", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "+=", "[", "self", ".", "lin5", ",", "self", ".", "lin6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.PNetLin.forward": [[64, 93], ["range", "range", "networks_basic.PNetLin.net.forward", "networks_basic.PNetLin.net.forward", "networks_basic.PNetLin.scaling_layer", "networks_basic.PNetLin.scaling_layer", "models.normalize_tensor", "models.normalize_tensor", "networks_basic.upsample", "networks_basic.spatial_average", "networks_basic.upsample", "networks_basic.spatial_average", "networks_basic.PNetLin.lins[].model", "range", "networks_basic.PNetLin.lins[].model", "range", "diffs[].sum", "range", "diffs[].sum", "range"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.normalize_tensor", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.normalize_tensor", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.upsample", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.spatial_average", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.upsample", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.spatial_average"], ["", "", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "# v0.0 - original release had a bug, where input was not scaled", "\n", "        ", "in0_input", ",", "in1_input", "=", "(", "self", ".", "scaling_layer", "(", "in0", ")", ",", "self", ".", "scaling_layer", "(", "in1", ")", ")", "if", "self", ".", "version", "==", "'0.1'", "else", "(", "in0", ",", "in1", ")", "\n", "outs0", ",", "outs1", "=", "self", ".", "net", ".", "forward", "(", "in0_input", ")", ",", "self", ".", "net", ".", "forward", "(", "in1_input", ")", "\n", "feats0", ",", "feats1", ",", "diffs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "for", "kk", "in", "range", "(", "self", ".", "L", ")", ":", "\n", "            ", "feats0", "[", "kk", "]", ",", "feats1", "[", "kk", "]", "=", "util", ".", "normalize_tensor", "(", "outs0", "[", "kk", "]", ")", ",", "util", ".", "normalize_tensor", "(", "outs1", "[", "kk", "]", ")", "\n", "diffs", "[", "kk", "]", "=", "(", "feats0", "[", "kk", "]", "-", "feats1", "[", "kk", "]", ")", "**", "2", "\n", "\n", "", "if", "(", "self", ".", "lpips", ")", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "self", ".", "lins", "[", "kk", "]", ".", "model", "(", "diffs", "[", "kk", "]", ")", ",", "out_H", "=", "in0", ".", "shape", "[", "2", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "self", ".", "lins", "[", "kk", "]", ".", "model", "(", "diffs", "[", "kk", "]", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "out_H", "=", "in0", ".", "shape", "[", "2", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "\n", "", "", "val", "=", "res", "[", "0", "]", "\n", "for", "l", "in", "range", "(", "1", ",", "self", ".", "L", ")", ":", "\n", "            ", "val", "+=", "res", "[", "l", "]", "\n", "\n", "", "if", "(", "retPerLayer", ")", ":", "\n", "            ", "return", "(", "val", ",", "res", ")", "\n", "", "else", ":", "\n", "            ", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.ScalingLayer.__init__": [[95, 99], ["torch.Module.__init__", "networks_basic.ScalingLayer.register_buffer", "networks_basic.ScalingLayer.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ScalingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'shift'", ",", "torch", ".", "Tensor", "(", "[", "-", ".030", ",", "-", ".088", ",", "-", ".188", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "self", ".", "register_buffer", "(", "'scale'", ",", "torch", ".", "Tensor", "(", "[", ".458", ",", ".448", ",", ".450", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.ScalingLayer.forward": [[100, 102], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "return", "(", "inp", "-", "self", ".", "shift", ")", "/", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.NetLinLayer.__init__": [[106, 112], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "chn_in", ",", "chn_out", "=", "1", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetLinLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Dropout", "(", ")", ",", "]", "if", "(", "use_dropout", ")", "else", "[", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_in", ",", "chn_out", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.Dist2LogitLayer.__init__": [[116, 127], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ",", "use_sigmoid", "=", "True", ")", ":", "\n", "        ", "super", "(", "Dist2LogitLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Conv2d", "(", "5", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "1", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "if", "(", "use_sigmoid", ")", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "Sigmoid", "(", ")", ",", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.Dist2LogitLayer.forward": [[128, 130], ["networks_basic.Dist2LogitLayer.model.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "eps", "=", "0.1", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "forward", "(", "torch", ".", "cat", "(", "(", "d0", ",", "d1", ",", "d0", "-", "d1", ",", "d0", "/", "(", "d1", "+", "eps", ")", ",", "d1", "/", "(", "d0", "+", "eps", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.BCERankingLoss.__init__": [[132, 137], ["torch.Module.__init__", "networks_basic.Dist2LogitLayer", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ")", ":", "\n", "        ", "super", "(", "BCERankingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "Dist2LogitLayer", "(", "chn_mid", "=", "chn_mid", ")", "\n", "# self.parameters = list(self.net.parameters())", "\n", "self", ".", "loss", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.BCERankingLoss.forward": [[138, 142], ["networks_basic.BCERankingLoss.net.forward", "networks_basic.BCERankingLoss.loss"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "per", "=", "(", "judge", "+", "1.", ")", "/", "2.", "\n", "self", ".", "logit", "=", "self", ".", "net", ".", "forward", "(", "d0", ",", "d1", ")", "\n", "return", "self", ".", "loss", "(", "self", ".", "logit", ",", "per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.FakeNet.__init__": [[145, 149], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_gpu", "=", "True", ",", "colorspace", "=", "'Lab'", ")", ":", "\n", "        ", "super", "(", "FakeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "colorspace", "=", "colorspace", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.L2.forward": [[152, 166], ["in0.size", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "in0.size", "models.l2().astype", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "models.l2", "models.tensor2np", "models.tensor2np", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "models.tensor2tensorlab", "models.tensor2tensorlab", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.l2", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2np", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2np", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2tensorlab", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "(", "N", ",", "C", ",", "X", ",", "Y", ")", "=", "in0", ".", "size", "(", ")", "\n", "value", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "(", "in0", "-", "in1", ")", "**", "2", ",", "dim", "=", "1", ")", ".", "view", "(", "N", ",", "1", ",", "X", ",", "Y", ")", ",", "dim", "=", "2", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "Y", ")", ",", "dim", "=", "3", ")", ".", "view", "(", "N", ")", "\n", "return", "value", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "util", ".", "l2", "(", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "'float'", ")", "\n", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "                ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.DSSIM.forward": [[169, 181], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "models.dssim().astype", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "in0.size", "models.dssim().astype", "models.dssim", "models.dssim", "models.tensor2im", "models.tensor2im", "models.tensor2np", "models.tensor2np", "models.tensor2tensorlab", "models.tensor2tensorlab"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.dssim", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.dssim", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2im", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2im", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2np", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2np", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2tensorlab", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "value", "=", "util", ".", "dssim", "(", "1.", "*", "util", ".", "tensor2im", "(", "in0", ".", "data", ")", ",", "1.", "*", "util", ".", "tensor2im", "(", "in1", ".", "data", ")", ",", "range", "=", "255.", ")", ".", "astype", "(", "'float'", ")", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "util", ".", "dssim", "(", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "'float'", ")", "\n", "", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.spatial_average": [[17, 19], ["in_tens.mean"], "function", ["None"], ["def", "spatial_average", "(", "in_tens", ",", "keepdim", "=", "True", ")", ":", "\n", "    ", "return", "in_tens", ".", "mean", "(", "[", "2", ",", "3", "]", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.upsample": [[20, 25], ["torch.Upsample"], "function", ["None"], ["", "def", "upsample", "(", "in_tens", ",", "out_H", "=", "64", ")", ":", "# assumes scale factor is same for H and W", "\n", "    ", "in_H", "=", "in_tens", ".", "shape", "[", "2", "]", "\n", "scale_factor", "=", "1.", "*", "out_H", "/", "in_H", "\n", "\n", "return", "nn", ".", "Upsample", "(", "scale_factor", "=", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "(", "in_tens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.print_network": [[182, 188], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "'Network'", ",", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.name": [[25, 27], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.initialize": [[28, 108], ["base_model.BaseModel.initialize", "list", "networks_basic.PNetLin", "dist_model.DistModel.net.parameters", "networks_basic.BCERankingLoss", "list", "torch.optim.Adam", "dist_model.DistModel.net.eval", "dist_model.DistModel.net.to", "torch.nn.DataParallel", "print", "networks_basic.print_network", "print", "os.path.abspath", "print", "dist_model.DistModel.net.load_state_dict", "networks_basic.PNetLin", "dist_model.DistModel.rankLoss.net.parameters", "dist_model.DistModel.rankLoss.to", "os.path.join", "torch.load", "networks_basic.L2", "inspect.getfile", "networks_basic.DSSIM", "ValueError"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.jnd_dataset.JNDDataset.initialize", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.networks_basic.print_network"], ["", "def", "initialize", "(", "self", ",", "model", "=", "'net-lin'", ",", "net", "=", "'alex'", ",", "colorspace", "=", "'Lab'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "model_path", "=", "None", ",", "\n", "use_gpu", "=", "True", ",", "printNet", "=", "False", ",", "spatial", "=", "False", ",", "\n", "is_train", "=", "False", ",", "lr", "=", ".0001", ",", "beta1", "=", "0.5", ",", "version", "=", "'0.1'", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "        ", "'''\n        INPUTS\n            model - ['net-lin'] for linearly calibrated network\n                    ['net'] for off-the-shelf network\n                    ['L2'] for L2 distance in Lab colorspace\n                    ['SSIM'] for ssim in RGB colorspace\n            net - ['squeeze','alex','vgg']\n            model_path - if None, will look in weights/[NET_NAME].pth\n            colorspace - ['Lab','RGB'] colorspace to use for L2 and SSIM\n            use_gpu - bool - whether or not to use a GPU\n            printNet - bool - whether or not to print network architecture out\n            spatial - bool - whether to output an array containing varying distances across spatial dimensions\n            spatial_shape - if given, output spatial shape. if None then spatial shape is determined automatically via spatial_factor (see below).\n            spatial_factor - if given, specifies upsampling factor relative to the largest spatial extent of a convolutional layer. if None then resized to size of input images.\n            spatial_order - spline order of filter for upsampling in spatial mode, by default 1 (bilinear).\n            is_train - bool - [True] for training mode\n            lr - float - initial learning rate\n            beta1 - float - initial momentum term for adam\n            version - 0.1 for latest, 0.0 was original (with a bug)\n            gpu_ids - int array - [0] by default, gpus to use\n        '''", "\n", "BaseModel", ".", "initialize", "(", "self", ",", "use_gpu", "=", "use_gpu", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "model_name", "=", "'%s [%s]'", "%", "(", "model", ",", "net", ")", "\n", "\n", "if", "(", "self", ".", "model", "==", "'net-lin'", ")", ":", "# pretrained net + linear layer", "\n", "            ", "self", ".", "net", "=", "networks", ".", "PNetLin", "(", "pnet_rand", "=", "pnet_rand", ",", "pnet_tune", "=", "pnet_tune", ",", "pnet_type", "=", "net", ",", "\n", "use_dropout", "=", "True", ",", "spatial", "=", "spatial", ",", "version", "=", "version", ",", "lpips", "=", "True", ")", "\n", "kw", "=", "{", "}", "\n", "if", "not", "use_gpu", ":", "\n", "                ", "kw", "[", "'map_location'", "]", "=", "'cpu'", "\n", "", "if", "(", "model_path", "is", "None", ")", ":", "\n", "                ", "import", "inspect", "\n", "model_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "inspect", ".", "getfile", "(", "self", ".", "initialize", ")", ",", "'..'", ",", "'weights/v%s/%s.pth'", "%", "(", "version", ",", "net", ")", ")", ")", "\n", "\n", "", "if", "(", "not", "is_train", ")", ":", "\n", "                ", "print", "(", "'Loading model from: %s'", "%", "model_path", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "**", "kw", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "", "elif", "(", "self", ".", "model", "==", "'net'", ")", ":", "# pretrained network", "\n", "            ", "self", ".", "net", "=", "networks", ".", "PNetLin", "(", "pnet_rand", "=", "pnet_rand", ",", "pnet_type", "=", "net", ",", "lpips", "=", "False", ")", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'L2'", ",", "'l2'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "networks", ".", "L2", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "# not really a network, only for testing", "\n", "self", ".", "model_name", "=", "'L2'", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'DSSIM'", ",", "'dssim'", ",", "'SSIM'", ",", "'ssim'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "networks", ".", "DSSIM", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "\n", "self", ".", "model_name", "=", "'SSIM'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model [%s] not recognized.\"", "%", "self", ".", "model", ")", "\n", "\n", "", "self", ".", "parameters", "=", "list", "(", "self", ".", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "# training mode", "\n", "# extra network on top to go from distances (d0,d1) => predicted human judgment (h*)", "\n", "            ", "self", ".", "rankLoss", "=", "networks", ".", "BCERankingLoss", "(", ")", "\n", "self", ".", "parameters", "+=", "list", "(", "self", ".", "rankLoss", ".", "net", ".", "parameters", "(", ")", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "old_lr", "=", "lr", "\n", "self", ".", "optimizer_net", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", ",", "lr", "=", "lr", ",", "betas", "=", "(", "beta1", ",", "0.999", ")", ")", "\n", "", "else", ":", "# test mode", "\n", "            ", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "", "if", "(", "use_gpu", ")", ":", "\n", "            ", "self", ".", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "net", ",", "device_ids", "=", "gpu_ids", ")", "\n", "if", "(", "self", ".", "is_train", ")", ":", "\n", "                ", "self", ".", "rankLoss", "=", "self", ".", "rankLoss", ".", "to", "(", "device", "=", "gpu_ids", "[", "0", "]", ")", "# just put this on GPU0", "\n", "\n", "", "", "if", "(", "printNet", ")", ":", "\n", "            ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "net", ")", "\n", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.forward": [[109, 118], ["dist_model.DistModel.net.forward"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.forward"], ["", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "        ", "''' Function computes the distance between image patches in0 and in1\n        INPUTS\n            in0, in1 - torch.Tensor object of shape Nx3xXxY - image patch scaled to [-1,1]\n        OUTPUT\n            computed distances between in0 and in1\n        '''", "\n", "\n", "return", "self", ".", "net", ".", "forward", "(", "in0", ",", "in1", ",", "retPerLayer", "=", "retPerLayer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.optimize_parameters": [[120, 126], ["dist_model.DistModel.forward_train", "dist_model.DistModel.optimizer_net.zero_grad", "dist_model.DistModel.backward_train", "dist_model.DistModel.optimizer_net.step", "dist_model.DistModel.clamp_weights"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.forward_train", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.backward_train", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.clamp_weights"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "step", "(", ")", "\n", "self", ".", "clamp_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.clamp_weights": [[127, 131], ["dist_model.DistModel.net.modules", "hasattr", "torch.clamp"], "methods", ["None"], ["", "def", "clamp_weights", "(", "self", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "(", "hasattr", "(", "module", ",", "'weight'", ")", "and", "module", ".", "kernel_size", "==", "(", "1", ",", "1", ")", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", "=", "torch", ".", "clamp", "(", "module", ".", "weight", ".", "data", ",", "min", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.set_input": [[132, 147], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "dist_model.DistModel.input_ref.to", "dist_model.DistModel.input_p0.to", "dist_model.DistModel.input_p1.to", "dist_model.DistModel.input_judge.to"], "methods", ["None"], ["", "", "", "def", "set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "input_ref", "=", "data", "[", "'ref'", "]", "\n", "self", ".", "input_p0", "=", "data", "[", "'p0'", "]", "\n", "self", ".", "input_p1", "=", "data", "[", "'p1'", "]", "\n", "self", ".", "input_judge", "=", "data", "[", "'judge'", "]", "\n", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "input_ref", "=", "self", ".", "input_ref", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p0", "=", "self", ".", "input_p0", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p1", "=", "self", ".", "input_p1", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_judge", "=", "self", ".", "input_judge", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "var_ref", "=", "Variable", "(", "self", ".", "input_ref", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p0", "=", "Variable", "(", "self", ".", "input_p0", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p1", "=", "Variable", "(", "self", ".", "input_p1", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.forward_train": [[148, 161], ["dist_model.DistModel.forward", "dist_model.DistModel.forward", "dist_model.DistModel.compute_accuracy", "torch.autograd.Variable().view", "dist_model.DistModel.rankLoss.forward", "dist_model.DistModel.d0.size", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.compute_accuracy", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.forward"], ["", "def", "forward_train", "(", "self", ")", ":", "# run forward pass", "\n", "# print(self.net.module.scaling_layer.shift)", "\n", "# print(torch.norm(self.net.module.net.slice1[0].weight).item(), torch.norm(self.net.module.lin0.model[1].weight).item())", "\n", "\n", "        ", "self", ".", "d0", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p0", ")", "\n", "self", ".", "d1", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p1", ")", "\n", "self", ".", "acc_r", "=", "self", ".", "compute_accuracy", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "input_judge", ")", "\n", "\n", "self", ".", "var_judge", "=", "Variable", "(", "1.", "*", "self", ".", "input_judge", ")", ".", "view", "(", "self", ".", "d0", ".", "size", "(", ")", ")", "\n", "\n", "self", ".", "loss_total", "=", "self", ".", "rankLoss", ".", "forward", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "var_judge", "*", "2.", "-", "1.", ")", "\n", "\n", "return", "self", ".", "loss_total", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.backward_train": [[162, 164], ["torch.mean().backward", "torch.mean"], "methods", ["None"], ["", "def", "backward_train", "(", "self", ")", ":", "\n", "        ", "torch", ".", "mean", "(", "self", ".", "loss_total", ")", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.compute_accuracy": [[165, 170], ["judge.cpu().numpy().flatten", "judge.cpu().numpy", "judge.cpu"], "methods", ["None"], ["", "def", "compute_accuracy", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "''' d0, d1 are Variables, judge is a Tensor '''", "\n", "d1_lt_d0", "=", "(", "d1", "<", "d0", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "judge_per", "=", "judge", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "return", "d1_lt_d0", "*", "judge_per", "+", "(", "1", "-", "d1_lt_d0", ")", "*", "(", "1", "-", "judge_per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.get_current_errors": [[171, 179], ["collections.OrderedDict", "collections.OrderedDict.keys", "numpy.mean", "dist_model.DistModel.loss_total.data.cpu().numpy", "dist_model.DistModel.loss_total.data.cpu"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "retDict", "=", "OrderedDict", "(", "[", "(", "'loss_total'", ",", "self", ".", "loss_total", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "(", "'acc_r'", ",", "self", ".", "acc_r", ")", "]", ")", "\n", "\n", "for", "key", "in", "retDict", ".", "keys", "(", ")", ":", "\n", "            ", "retDict", "[", "key", "]", "=", "np", ".", "mean", "(", "retDict", "[", "key", "]", ")", "\n", "\n", "", "return", "retDict", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.get_current_visuals": [[180, 194], ["models.tensor2im", "models.tensor2im", "models.tensor2im", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "collections.OrderedDict", "dist_model.DistModel.var_ref.data.size"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2im", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2im", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "zoom_factor", "=", "256", "/", "self", ".", "var_ref", ".", "data", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "ref_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_ref", ".", "data", ")", "\n", "p0_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_p0", ".", "data", ")", "\n", "p1_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_p1", ".", "data", ")", "\n", "\n", "ref_img_vis", "=", "zoom", "(", "ref_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p0_img_vis", "=", "zoom", "(", "p0_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p1_img_vis", "=", "zoom", "(", "p1_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "\n", "return", "OrderedDict", "(", "[", "(", "'ref'", ",", "ref_img_vis", ")", ",", "\n", "(", "'p0'", ",", "p0_img_vis", ")", ",", "\n", "(", "'p1'", ",", "p1_img_vis", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.save": [[195, 201], ["dist_model.DistModel.save_network", "dist_model.DistModel.save_network", "dist_model.DistModel.save_network"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "path", ",", "label", ")", ":", "\n", "        ", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ".", "module", ",", "path", ",", "''", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ",", "path", ",", "''", ",", "label", ")", "\n", "", "self", ".", "save_network", "(", "self", ".", "rankLoss", ".", "net", ",", "path", ",", "'rank'", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.DistModel.update_learning_rate": [[202, 211], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "nepoch_decay", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "lr", "/", "nepoch_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "\n", "for", "param_group", "in", "self", ".", "optimizer_net", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "print", "(", "'update lr [%s] decay: %f -> %f'", "%", "(", "type", ",", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.score_2afc_dataset": [[212, 246], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.array", "data_loader.load_data", "func().data.cpu().numpy().flatten().tolist", "func().data.cpu().numpy().flatten().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.mean", "dict", "func().data.cpu().numpy().flatten", "func().data.cpu().numpy().flatten", "data[].cpu().numpy().flatten", "func().data.cpu().numpy", "func().data.cpu().numpy", "data[].cpu().numpy", "func().data.cpu", "func().data.cpu", "data[].cpu", "func", "func"], "function", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.base_data_loader.BaseDataLoader.load_data"], ["", "", "def", "score_2afc_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes Two Alternative Forced Choice (2AFC) score using\n        distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a TwoAFCDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return numpy array of length N\n    OUTPUTS\n        [0] - 2AFC score in [0,1], fraction of time func agrees with human evaluators\n        [1] - dictionary with following elements\n            d0s,d1s - N arrays containing distances between reference patch to perturbed patches \n            gts - N array in [0,1], preferred patch selected by human evaluators\n                (closer to \"0\" for left patch p0, \"1\" for right patch p1,\n                \"0.6\" means 60pct people preferred right patch, 40pct preferred left)\n            scores - N array in [0,1], corresponding to what percentage function agreed with humans\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "d0s", "=", "[", "]", "\n", "d1s", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "d0s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p0'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "d1s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'judge'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "d0s", "=", "np", ".", "array", "(", "d0s", ")", "\n", "d1s", "=", "np", ".", "array", "(", "d1s", ")", "\n", "gts", "=", "np", ".", "array", "(", "gts", ")", "\n", "scores", "=", "(", "d0s", "<", "d1s", ")", "*", "(", "1.", "-", "gts", ")", "+", "(", "d1s", "<", "d0s", ")", "*", "gts", "+", "(", "d1s", "==", "d0s", ")", "*", ".5", "\n", "\n", "return", "(", "np", ".", "mean", "(", "scores", ")", ",", "dict", "(", "d0s", "=", "d0s", ",", "d1s", "=", "d1s", ",", "gts", "=", "gts", ",", "scores", "=", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.dist_model.score_jnd_dataset": [[247, 285], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "models.voc_ap", "data_loader.load_data", "func().data.cpu().numpy().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.sum", "dict", "func().data.cpu().numpy", "data[].cpu().numpy().flatten", "func().data.cpu", "data[].cpu().numpy", "data[].cpu", "func"], "function", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.voc_ap", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.base_data_loader.BaseDataLoader.load_data"], ["", "def", "score_jnd_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes JND score using distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a JNDDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return pytorch array of length N\n    OUTPUTS\n        [0] - JND score in [0,1], mAP score (area under precision-recall curve)\n        [1] - dictionary with following elements\n            ds - N array containing distances between two patches shown to human evaluator\n            sames - N array containing fraction of people who thought the two patches were identical\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "ds", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "ds", "+=", "func", "(", "data", "[", "'p0'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'same'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "sames", "=", "np", ".", "array", "(", "gts", ")", "\n", "ds", "=", "np", ".", "array", "(", "ds", ")", "\n", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "ds", ")", "\n", "ds_sorted", "=", "ds", "[", "sorted_inds", "]", "\n", "sames_sorted", "=", "sames", "[", "sorted_inds", "]", "\n", "\n", "TPs", "=", "np", ".", "cumsum", "(", "sames_sorted", ")", "\n", "FPs", "=", "np", ".", "cumsum", "(", "1", "-", "sames_sorted", ")", "\n", "FNs", "=", "np", ".", "sum", "(", "sames_sorted", ")", "-", "TPs", "\n", "\n", "precs", "=", "TPs", "/", "(", "TPs", "+", "FPs", ")", "\n", "recs", "=", "TPs", "/", "(", "TPs", "+", "FNs", ")", "\n", "score", "=", "util", ".", "voc_ap", "(", "recs", ",", "precs", ")", "\n", "\n", "return", "(", "score", ",", "dict", "(", "ds", "=", "ds", ",", "sames", "=", "sames", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.pretrained_networks.squeezenet.__init__": [[7, 35], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "torchvision.models.squeezenet1_1", "pretrained_networks.squeezenet.slice1.add_module", "pretrained_networks.squeezenet.slice2.add_module", "pretrained_networks.squeezenet.slice3.add_module", "pretrained_networks.squeezenet.slice4.add_module", "pretrained_networks.squeezenet.slice5.add_module", "pretrained_networks.squeezenet.slice6.add_module", "pretrained_networks.squeezenet.slice7.add_module", "pretrained_networks.squeezenet.parameters", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "squeezenet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pretrained_features", "=", "tv", ".", "squeezenet1_1", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice6", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice7", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "7", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "11", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "11", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice6", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "13", ")", ":", "\n", "            ", "self", ".", "slice7", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.pretrained_networks.squeezenet.forward": [[36, 55], ["pretrained_networks.squeezenet.slice1", "pretrained_networks.squeezenet.slice2", "pretrained_networks.squeezenet.slice3", "pretrained_networks.squeezenet.slice4", "pretrained_networks.squeezenet.slice5", "pretrained_networks.squeezenet.slice6", "pretrained_networks.squeezenet.slice7", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "h", "=", "self", ".", "slice6", "(", "h", ")", "\n", "h_relu6", "=", "h", "\n", "h", "=", "self", ".", "slice7", "(", "h", ")", "\n", "h_relu7", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"SqueezeOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", ",", "'relu6'", ",", "'relu7'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ",", "h_relu6", ",", "h_relu7", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.pretrained_networks.alexnet.__init__": [[58, 80], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.alexnet", "pretrained_networks.alexnet.slice1.add_module", "pretrained_networks.alexnet.slice2.add_module", "pretrained_networks.alexnet.slice3.add_module", "pretrained_networks.alexnet.slice4.add_module", "pretrained_networks.alexnet.slice5.add_module", "pretrained_networks.alexnet.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "alexnet_pretrained_features", "=", "tv", ".", "alexnet", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.pretrained_networks.alexnet.forward": [[81, 96], ["pretrained_networks.alexnet.slice1", "pretrained_networks.alexnet.slice2", "pretrained_networks.alexnet.slice3", "pretrained_networks.alexnet.slice4", "pretrained_networks.alexnet.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "alexnet_outputs", "=", "namedtuple", "(", "\"AlexnetOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", "]", ")", "\n", "out", "=", "alexnet_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.pretrained_networks.vgg16.__init__": [[98, 120], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg16", "pretrained_networks.vgg16.slice1.add_module", "pretrained_networks.vgg16.slice2.add_module", "pretrained_networks.vgg16.slice3.add_module", "pretrained_networks.vgg16.slice4.add_module", "pretrained_networks.vgg16.slice5.add_module", "pretrained_networks.vgg16.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "vgg16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "tv", ".", "vgg16", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "16", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "23", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "23", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.pretrained_networks.vgg16.forward": [[121, 136], ["pretrained_networks.vgg16.slice1", "pretrained_networks.vgg16.slice2", "pretrained_networks.vgg16.slice3", "pretrained_networks.vgg16.slice4", "pretrained_networks.vgg16.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1_2", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2_2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3_3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4_3", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5_3", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"VggOutputs\"", ",", "[", "'relu1_2'", ",", "'relu2_2'", ",", "'relu3_3'", ",", "'relu4_3'", ",", "'relu5_3'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1_2", ",", "h_relu2_2", ",", "h_relu3_3", ",", "h_relu4_3", ",", "h_relu5_3", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.pretrained_networks.resnet.__init__": [[140, 162], ["super().__init__", "torchvision.models.resnet18", "torchvision.models.resnet34", "torchvision.models.resnet50", "torchvision.models.resnet101", "torchvision.models.resnet152"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ",", "num", "=", "18", ")", ":", "\n", "        ", "super", "(", "resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "(", "num", "==", "18", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "34", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet34", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "50", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "101", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet101", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "152", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet152", "(", "pretrained", "=", "pretrained", ")", "\n", "", "self", ".", "N_slices", "=", "5", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "net", ".", "conv1", "\n", "self", ".", "bn1", "=", "self", ".", "net", ".", "bn1", "\n", "self", ".", "relu", "=", "self", ".", "net", ".", "relu", "\n", "self", ".", "maxpool", "=", "self", ".", "net", ".", "maxpool", "\n", "self", ".", "layer1", "=", "self", ".", "net", ".", "layer1", "\n", "self", ".", "layer2", "=", "self", ".", "net", ".", "layer2", "\n", "self", ".", "layer3", "=", "self", ".", "net", ".", "layer3", "\n", "self", ".", "layer4", "=", "self", ".", "net", ".", "layer4", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.pretrained_networks.resnet.forward": [[163, 182], ["pretrained_networks.resnet.conv1", "pretrained_networks.resnet.bn1", "pretrained_networks.resnet.relu", "pretrained_networks.resnet.maxpool", "pretrained_networks.resnet.layer1", "pretrained_networks.resnet.layer2", "pretrained_networks.resnet.layer3", "pretrained_networks.resnet.layer4", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "conv1", "(", "X", ")", "\n", "h", "=", "self", ".", "bn1", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "maxpool", "(", "h", ")", "\n", "h", "=", "self", ".", "layer1", "(", "h", ")", "\n", "h_conv2", "=", "h", "\n", "h", "=", "self", ".", "layer2", "(", "h", ")", "\n", "h_conv3", "=", "h", "\n", "h", "=", "self", ".", "layer3", "(", "h", ")", "\n", "h_conv4", "=", "h", "\n", "h", "=", "self", ".", "layer4", "(", "h", ")", "\n", "h_conv5", "=", "h", "\n", "\n", "outputs", "=", "namedtuple", "(", "\"Outputs\"", ",", "[", "'relu1'", ",", "'conv2'", ",", "'conv3'", ",", "'conv4'", ",", "'conv5'", "]", ")", "\n", "out", "=", "outputs", "(", "h_relu1", ",", "h_conv2", ",", "h_conv3", ",", "h_conv4", ",", "h_conv5", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.PerceptualLoss.__init__": [[15, 26], ["super().__init__", "print", "models.dist_model.DistModel", "__init__.PerceptualLoss.model.initialize", "print", "print", "__init__.PerceptualLoss.model.name"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.jnd_dataset.JNDDataset.initialize", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.name"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.PerceptualLoss.forward": [[27, 42], ["__init__.PerceptualLoss.model.forward"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.forward"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.normalize_tensor": [[43, 46], ["torch.sqrt", "torch.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.l2": [[47, 49], ["numpy.mean"], "function", ["None"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.psnr": [[50, 52], ["numpy.log10", "numpy.mean"], "function", ["None"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.dssim": [[53, 55], ["skimage.measure.compare_ssim"], "function", ["None"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.rgb2lab": [[103, 106], ["color.rgb2lab"], "function", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.rgb2lab"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2np": [[63, 66], ["tensor_obj[].cpu().float().numpy().transpose", "tensor_obj[].cpu().float().numpy", "tensor_obj[].cpu().float", "tensor_obj[].cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.np2tensor": [[67, 70], ["torch.Tensor", "np_obj[].transpose"], "function", ["None"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2tensorlab": [[71, 84], ["__init__.tensor2im", "color.rgb2lab", "__init__.np2tensor"], "function", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2im", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.rgb2lab", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.np2tensor"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensorlab2tensor": [[85, 102], ["warnings.filterwarnings", "__init__.tensor2np", "numpy.clip", "color.rgb2lab", "__init__.np2tensor", "__init__.im2tensor", "color.lab2rgb", "rgb_back.astype", "numpy.isclose", "__init__.im2tensor", "lab.astype", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2np", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.rgb2lab", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.np2tensor", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.im2tensor", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.im2tensor"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2im": [[152, 157], ["image_tensor[].cpu().float().numpy", "image_tensor[].cpu().float().numpy.astype", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.im2tensor": [[158, 162], ["torch.Tensor", "[].transpose"], "function", ["None"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.tensor2vec": [[116, 118], ["vector_tensor.data.cpu().numpy", "vector_tensor.data.cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.__init__.voc_ap": [[119, 151], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], []], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.name": [[11, 13], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.initialize": [[14, 17], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "use_gpu", "=", "True", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "        ", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.forward": [[18, 20], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.get_image_paths": [[52, 54], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.optimize_parameters": [[24, 26], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.get_current_visuals": [[27, 29], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.get_current_errors": [[30, 32], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.save": [[33, 35], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.save_network": [[37, 41], ["os.path.join", "torch.save", "network.state_dict"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "path", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.load_network": [[43, 48], ["os.path.join", "print", "network.load_state_dict", "torch.load"], "methods", ["None"], ["", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "print", "(", "'Loading network from %s'", "%", "save_path", ")", "\n", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.update_learning_rate": [[49, 51], ["None"], "methods", ["None"], ["", "def", "update_learning_rate", "(", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.save_done": [[55, 58], ["np.save", "np.savetxt", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.models.base_model.BaseModel.save"], ["", "def", "save_done", "(", "self", ",", "flag", "=", "False", ")", ":", "\n", "        ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'done_flag'", ")", ",", "flag", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'done_flag'", ")", ",", "[", "flag", ",", "]", ",", "fmt", "=", "'%i'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.data_loader.CreateDataLoader": [[1, 7], ["CustomDatasetDataLoader", "CustomDatasetDataLoader.initialize"], "function", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.jnd_dataset.JNDDataset.initialize"], ["def", "CreateDataLoader", "(", "datafolder", ",", "dataroot", "=", "'./dataset'", ",", "dataset_mode", "=", "'2afc'", ",", "load_size", "=", "64", ",", "batch_size", "=", "1", ",", "serial_batches", "=", "True", ",", "nThreads", "=", "4", ")", ":", "\n", "    ", "from", "data", ".", "custom_dataset_data_loader", "import", "CustomDatasetDataLoader", "\n", "data_loader", "=", "CustomDatasetDataLoader", "(", ")", "\n", "# print(data_loader.name())", "\n", "data_loader", ".", "initialize", "(", "datafolder", ",", "dataroot", "=", "dataroot", "+", "'/'", "+", "dataset_mode", ",", "dataset_mode", "=", "dataset_mode", ",", "load_size", "=", "load_size", ",", "batch_size", "=", "batch_size", ",", "serial_batches", "=", "serial_batches", ",", "nThreads", "=", "nThreads", ")", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.custom_dataset_data_loader.CustomDatasetDataLoader.name": [[20, 22], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'CustomDatasetDataLoader'", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.custom_dataset_data_loader.CustomDatasetDataLoader.initialize": [[23, 34], ["data.base_data_loader.BaseDataLoader.initialize", "custom_dataset_data_loader.CreateDataset", "torch.utils.data.DataLoader", "isinstance", "os.path.join", "int"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.jnd_dataset.JNDDataset.initialize", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.custom_dataset_data_loader.CreateDataset"], ["", "def", "initialize", "(", "self", ",", "datafolders", ",", "dataroot", "=", "'./dataset'", ",", "dataset_mode", "=", "'2afc'", ",", "load_size", "=", "64", ",", "batch_size", "=", "1", ",", "serial_batches", "=", "True", ",", "nThreads", "=", "1", ")", ":", "\n", "        ", "BaseDataLoader", ".", "initialize", "(", "self", ")", "\n", "if", "(", "not", "isinstance", "(", "datafolders", ",", "list", ")", ")", ":", "\n", "            ", "datafolders", "=", "[", "datafolders", ",", "]", "\n", "", "data_root_folders", "=", "[", "os", ".", "path", ".", "join", "(", "dataroot", ",", "datafolder", ")", "for", "datafolder", "in", "datafolders", "]", "\n", "self", ".", "dataset", "=", "CreateDataset", "(", "data_root_folders", ",", "dataset_mode", "=", "dataset_mode", ",", "load_size", "=", "load_size", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "not", "serial_batches", ",", "\n", "num_workers", "=", "int", "(", "nThreads", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.custom_dataset_data_loader.CustomDatasetDataLoader.load_data": [[35, 37], ["None"], "methods", ["None"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.custom_dataset_data_loader.CustomDatasetDataLoader.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.custom_dataset_data_loader.CreateDataset": [[5, 18], ["JNDDataset.initialize", "TwoAFCDataset", "JNDDataset", "ValueError"], "function", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.jnd_dataset.JNDDataset.initialize"], ["def", "CreateDataset", "(", "dataroots", ",", "dataset_mode", "=", "'2afc'", ",", "load_size", "=", "64", ",", ")", ":", "\n", "    ", "dataset", "=", "None", "\n", "if", "dataset_mode", "==", "'2afc'", ":", "# human judgements", "\n", "        ", "from", "dataset", ".", "twoafc_dataset", "import", "TwoAFCDataset", "\n", "dataset", "=", "TwoAFCDataset", "(", ")", "\n", "", "elif", "dataset_mode", "==", "'jnd'", ":", "# human judgements", "\n", "        ", "from", "dataset", ".", "jnd_dataset", "import", "JNDDataset", "\n", "dataset", "=", "JNDDataset", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Dataset Mode [%s] not recognized.\"", "%", "self", ".", "dataset_mode", ")", "\n", "\n", "", "dataset", ".", "initialize", "(", "dataroots", ",", "load_size", "=", "load_size", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.ImageFolder.__init__": [[47, 59], ["image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "root", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.ImageFolder.__getitem__": [[60, 69], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.ImageFolder.__len__": [[70, 72], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.is_image_file": [[21, 26], ["any", "any", "filename.endswith", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ",", "mode", "=", "'img'", ")", ":", "\n", "    ", "if", "(", "mode", "==", "'img'", ")", ":", "\n", "        ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "", "elif", "(", "mode", "==", "'np'", ")", ":", "\n", "        ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "NP_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.make_dataset": [[27, 42], ["isinstance", "os.path.isdir", "os.path.isdir", "sorted", "os.walk", "os.walk", "image_folder.is_image_file", "os.path.join", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.is_image_file"], ["", "", "def", "make_dataset", "(", "dirs", ",", "mode", "=", "'img'", ")", ":", "\n", "    ", "if", "(", "not", "isinstance", "(", "dirs", ",", "list", ")", ")", ":", "\n", "        ", "dirs", "=", "[", "dirs", ",", "]", "\n", "\n", "", "images", "=", "[", "]", "\n", "for", "dir", "in", "dirs", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "            ", "for", "fname", "in", "fnames", ":", "\n", "                ", "if", "is_image_file", "(", "fname", ",", "mode", "=", "mode", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n", "# print(\"Found %i images in %s\"%(len(images),root))", "\n", "", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.default_loader": [[43, 45], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.base_data_loader.BaseDataLoader.__init__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.base_data_loader.BaseDataLoader.initialize": [[6, 8], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.base_data_loader.BaseDataLoader.load_data": [[9, 11], ["None"], "methods", ["None"], ["", "def", "load_data", "(", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.twoafc_dataset.TwoAFCDataset.initialize": [[11, 41], ["data.image_folder.make_dataset", "sorted", "data.image_folder.make_dataset", "sorted", "data.image_folder.make_dataset", "sorted", "transform_list.append", "torchvision.Compose", "data.image_folder.make_dataset", "sorted", "isinstance", "os.path.join", "os.path.join", "os.path.join", "torchvision.Scale", "torchvision.ToTensor", "torchvision.Normalize", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.make_dataset"], ["    ", "def", "initialize", "(", "self", ",", "dataroots", ",", "load_size", "=", "64", ")", ":", "\n", "        ", "if", "(", "not", "isinstance", "(", "dataroots", ",", "list", ")", ")", ":", "\n", "            ", "dataroots", "=", "[", "dataroots", ",", "]", "\n", "", "self", ".", "roots", "=", "dataroots", "\n", "self", ".", "load_size", "=", "load_size", "\n", "\n", "# image directory", "\n", "self", ".", "dir_ref", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "'ref'", ")", "for", "root", "in", "self", ".", "roots", "]", "\n", "self", ".", "ref_paths", "=", "make_dataset", "(", "self", ".", "dir_ref", ")", "\n", "self", ".", "ref_paths", "=", "sorted", "(", "self", ".", "ref_paths", ")", "\n", "\n", "self", ".", "dir_p0", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "'p0'", ")", "for", "root", "in", "self", ".", "roots", "]", "\n", "self", ".", "p0_paths", "=", "make_dataset", "(", "self", ".", "dir_p0", ")", "\n", "self", ".", "p0_paths", "=", "sorted", "(", "self", ".", "p0_paths", ")", "\n", "\n", "self", ".", "dir_p1", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "'p1'", ")", "for", "root", "in", "self", ".", "roots", "]", "\n", "self", ".", "p1_paths", "=", "make_dataset", "(", "self", ".", "dir_p1", ")", "\n", "self", ".", "p1_paths", "=", "sorted", "(", "self", ".", "p1_paths", ")", "\n", "\n", "transform_list", "=", "[", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Scale", "(", "load_size", ")", ")", "\n", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "# judgement directory", "\n", "self", ".", "dir_J", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "'judge'", ")", "for", "root", "in", "self", ".", "roots", "]", "\n", "self", ".", "judge_paths", "=", "make_dataset", "(", "self", ".", "dir_J", ",", "mode", "=", "'np'", ")", "\n", "self", ".", "judge_paths", "=", "sorted", "(", "self", ".", "judge_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.twoafc_dataset.TwoAFCDataset.__getitem__": [[42, 63], ["PIL.Image.open().convert", "twoafc_dataset.TwoAFCDataset.transform", "PIL.Image.open().convert", "twoafc_dataset.TwoAFCDataset.transform", "PIL.Image.open().convert", "twoafc_dataset.TwoAFCDataset.transform", "numpy.load().reshape", "torch.FloatTensor", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "numpy.load"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "p0_path", "=", "self", ".", "p0_paths", "[", "index", "]", "\n", "p0_img_", "=", "Image", ".", "open", "(", "p0_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "p0_img", "=", "self", ".", "transform", "(", "p0_img_", ")", "\n", "\n", "p1_path", "=", "self", ".", "p1_paths", "[", "index", "]", "\n", "p1_img_", "=", "Image", ".", "open", "(", "p1_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "p1_img", "=", "self", ".", "transform", "(", "p1_img_", ")", "\n", "\n", "ref_path", "=", "self", ".", "ref_paths", "[", "index", "]", "\n", "ref_img_", "=", "Image", ".", "open", "(", "ref_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "ref_img", "=", "self", ".", "transform", "(", "ref_img_", ")", "\n", "\n", "judge_path", "=", "self", ".", "judge_paths", "[", "index", "]", "\n", "# judge_img = (np.load(judge_path)*2.-1.).reshape((1,1,1,)) # [-1,1]", "\n", "judge_img", "=", "np", ".", "load", "(", "judge_path", ")", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", ")", ")", "# [0,1]", "\n", "\n", "judge_img", "=", "torch", ".", "FloatTensor", "(", "judge_img", ")", "\n", "\n", "return", "{", "'p0'", ":", "p0_img", ",", "'p1'", ":", "p1_img", ",", "'ref'", ":", "ref_img", ",", "'judge'", ":", "judge_img", ",", "\n", "'p0_path'", ":", "p0_path", ",", "'p1_path'", ":", "p1_path", ",", "'ref_path'", ":", "ref_path", ",", "'judge_path'", ":", "judge_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.twoafc_dataset.TwoAFCDataset.__len__": [[64, 66], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "p0_paths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__": [[4, 6], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.name": [[7, 9], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseDataset'", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.base_dataset.BaseDataset.initialize": [[10, 12], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.jnd_dataset.JNDDataset.initialize": [[11, 34], ["os.path.join", "data.image_folder.make_dataset", "sorted", "os.path.join", "data.image_folder.make_dataset", "sorted", "transform_list.append", "torchvision.Compose", "os.path.join", "data.image_folder.make_dataset", "sorted", "torchvision.Scale", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.data.image_folder.make_dataset"], ["    ", "def", "initialize", "(", "self", ",", "dataroot", ",", "load_size", "=", "64", ")", ":", "\n", "        ", "self", ".", "root", "=", "dataroot", "\n", "self", ".", "load_size", "=", "load_size", "\n", "\n", "self", ".", "dir_p0", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'p0'", ")", "\n", "self", ".", "p0_paths", "=", "make_dataset", "(", "self", ".", "dir_p0", ")", "\n", "self", ".", "p0_paths", "=", "sorted", "(", "self", ".", "p0_paths", ")", "\n", "\n", "self", ".", "dir_p1", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'p1'", ")", "\n", "self", ".", "p1_paths", "=", "make_dataset", "(", "self", ".", "dir_p1", ")", "\n", "self", ".", "p1_paths", "=", "sorted", "(", "self", ".", "p1_paths", ")", "\n", "\n", "transform_list", "=", "[", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Scale", "(", "load_size", ")", ")", "\n", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "# judgement directory", "\n", "self", ".", "dir_S", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'same'", ")", "\n", "self", ".", "same_paths", "=", "make_dataset", "(", "self", ".", "dir_S", ",", "mode", "=", "'np'", ")", "\n", "self", ".", "same_paths", "=", "sorted", "(", "self", ".", "same_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.jnd_dataset.JNDDataset.__getitem__": [[35, 51], ["PIL.Image.open().convert", "jnd_dataset.JNDDataset.transform", "PIL.Image.open().convert", "jnd_dataset.JNDDataset.transform", "numpy.load().reshape", "torch.FloatTensor", "PIL.Image.open", "PIL.Image.open", "numpy.load"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "p0_path", "=", "self", ".", "p0_paths", "[", "index", "]", "\n", "p0_img_", "=", "Image", ".", "open", "(", "p0_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "p0_img", "=", "self", ".", "transform", "(", "p0_img_", ")", "\n", "\n", "p1_path", "=", "self", ".", "p1_paths", "[", "index", "]", "\n", "p1_img_", "=", "Image", ".", "open", "(", "p1_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "p1_img", "=", "self", ".", "transform", "(", "p1_img_", ")", "\n", "\n", "same_path", "=", "self", ".", "same_paths", "[", "index", "]", "\n", "same_img", "=", "np", ".", "load", "(", "same_path", ")", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", ")", ")", "# [0,1]", "\n", "\n", "same_img", "=", "torch", ".", "FloatTensor", "(", "same_img", ")", "\n", "\n", "return", "{", "'p0'", ":", "p0_img", ",", "'p1'", ":", "p1_img", ",", "'same'", ":", "same_img", ",", "\n", "'p0_path'", ":", "p0_path", ",", "'p1_path'", ":", "p1_path", ",", "'same_path'", ":", "same_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.saikatdutta_Stacked_DMSHN_bokeh.dataset.jnd_dataset.JNDDataset.__len__": [[52, 54], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "p0_paths", ")", "\n", "", "", ""]]}