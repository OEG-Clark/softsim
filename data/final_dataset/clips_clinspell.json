{"home.repos.pwc.inspect_result.clips_clinspell.demo.doublemetaphone.dm": [[15, 425], ["st.upper.upper", "len", "st.upper.find", "st.upper.find", "st.upper.find", "st.upper.find", "len", "unicodedata.normalize", "len", "unicodedata.category"], "function", ["home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.normalize"], ["def", "dm", "(", "st", ")", ":", "\n", "    ", "\"\"\"dm(string) -> (string, string or '')\n    returns the double metaphone codes for given string - always a tuple\n    there are no checks done on the input string, but it should be a single word or name.\"\"\"", "\n", "vowels", "=", "[", "'A'", ",", "'E'", ",", "'I'", ",", "'O'", ",", "'U'", ",", "'Y'", "]", "\n", "st", "=", "''", ".", "join", "(", "(", "c", "for", "c", "in", "unicodedata", ".", "normalize", "(", "'NFD'", ",", "st", ")", "if", "unicodedata", ".", "category", "(", "c", ")", "!=", "'Mn'", ")", ")", "\n", "st", "=", "st", ".", "upper", "(", ")", "# st is short for string. I usually prefer descriptive over short, but this var is used a lot!", "\n", "is_slavo_germanic", "=", "(", "st", ".", "find", "(", "'W'", ")", ">", "-", "1", "or", "st", ".", "find", "(", "'K'", ")", ">", "-", "1", "or", "st", ".", "find", "(", "'CZ'", ")", ">", "-", "1", "or", "st", ".", "find", "(", "'WITZ'", ")", ">", "-", "1", ")", "\n", "length", "=", "len", "(", "st", ")", "\n", "first", "=", "2", "\n", "st", "=", "'-'", "*", "first", "+", "st", "+", "'------'", "# so we can index beyond the begining and end of the input string", "\n", "last", "=", "first", "+", "length", "-", "1", "\n", "pos", "=", "first", "# pos is short for position", "\n", "pri", "=", "sec", "=", "''", "# primary and secondary metaphone codes", "\n", "# skip these silent letters when at start of word", "\n", "if", "st", "[", "first", ":", "first", "+", "2", "]", "in", "[", "\"GN\"", ",", "\"KN\"", ",", "\"PN\"", ",", "\"WR\"", ",", "\"PS\"", "]", ":", "\n", "        ", "pos", "+=", "1", "\n", "# Initial 'X' is pronounced 'Z' e.g. 'Xavier'", "\n", "", "if", "st", "[", "first", "]", "==", "'X'", ":", "\n", "        ", "pri", "=", "sec", "=", "'S'", "# 'Z' maps to 'S'", "\n", "pos", "+=", "1", "\n", "# main loop through chars in st", "\n", "", "while", "pos", "<=", "last", ":", "\n", "#print str(pos) + '\\t' + st[pos]", "\n", "        ", "ch", "=", "st", "[", "pos", "]", "# ch is short for character", "\n", "# nxt (short for next characters in metaphone code) is set to  a tuple of the next characters in", "\n", "# the primary and secondary codes and how many characters to move forward in the string.", "\n", "# the secondary code letter is given only when it is different than the primary.", "\n", "# This is just a trick to make the code easier to write and read.", "\n", "nxt", "=", "(", "None", ",", "1", ")", "# default action is to add nothing and move to next char", "\n", "if", "ch", "in", "vowels", ":", "\n", "            ", "nxt", "=", "(", "None", ",", "1", ")", "\n", "if", "pos", "==", "first", ":", "# all init vowels now map to 'A'", "\n", "                ", "nxt", "=", "(", "'A'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'B'", ":", "\n", "#\"-mb\", e.g\", \"dumb\", already skipped over... see 'M' below", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'B'", ":", "\n", "                ", "nxt", "=", "(", "'P'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'P'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'C'", ":", "\n", "# various germanic", "\n", "            ", "if", "pos", ">", "first", "+", "1", "and", "st", "[", "pos", "-", "2", "]", "not", "in", "vowels", "and", "st", "[", "pos", "-", "1", ":", "pos", "+", "2", "]", "==", "'ACH'", "and", "st", "[", "pos", "+", "2", "]", "not", "in", "[", "'I'", "]", "and", "(", "st", "[", "pos", "+", "2", "]", "not", "in", "[", "'E'", "]", "or", "st", "[", "pos", "-", "2", ":", "pos", "+", "4", "]", "in", "[", "'BACHER'", ",", "'MACHER'", "]", ")", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "# special case 'CAESAR'", "\n", "", "elif", "pos", "==", "first", "and", "st", "[", "first", ":", "first", "+", "6", "]", "==", "'CAESAR'", ":", "\n", "                ", "nxt", "=", "(", "'S'", ",", "2", ")", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "4", "]", "==", "'CHIA'", ":", "# italian 'chianti'", "\n", "                ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'CH'", ":", "\n", "# find 'michael'", "\n", "                ", "if", "pos", ">", "first", "and", "st", "[", "pos", ":", "pos", "+", "4", "]", "==", "'CHAE'", ":", "\n", "                    ", "nxt", "=", "(", "'K'", ",", "'X'", ",", "2", ")", "\n", "", "elif", "pos", "==", "first", "and", "(", "st", "[", "pos", "+", "1", ":", "pos", "+", "6", "]", "in", "[", "'HARAC'", ",", "'HARIS'", "]", "or", "st", "[", "pos", "+", "1", ":", "pos", "+", "4", "]", "in", "[", "\"HOR\"", ",", "\"HYM\"", ",", "\"HIA\"", ",", "\"HEM\"", "]", ")", "and", "st", "[", "first", ":", "first", "+", "5", "]", "!=", "'CHORE'", ":", "\n", "                    ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "#germanic, greek, or otherwise 'ch' for 'kh' sound", "\n", "", "elif", "st", "[", "first", ":", "first", "+", "4", "]", "in", "[", "'VAN '", ",", "'VON '", "]", "or", "st", "[", "first", ":", "first", "+", "3", "]", "==", "'SCH'", "or", "st", "[", "pos", "-", "2", ":", "pos", "+", "4", "]", "in", "[", "\"ORCHES\"", ",", "\"ARCHIT\"", ",", "\"ORCHID\"", "]", "or", "st", "[", "pos", "+", "2", "]", "in", "[", "'T'", ",", "'S'", "]", "or", "(", "(", "st", "[", "pos", "-", "1", "]", "in", "[", "\"A\"", ",", "\"O\"", ",", "\"U\"", ",", "\"E\"", "]", "or", "pos", "==", "first", ")", "and", "st", "[", "pos", "+", "2", "]", "in", "[", "\"L\"", ",", "\"R\"", ",", "\"N\"", ",", "\"M\"", ",", "\"B\"", ",", "\"H\"", ",", "\"F\"", ",", "\"V\"", ",", "\"W\"", "]", ")", ":", "\n", "                    ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "else", ":", "\n", "                    ", "if", "pos", ">", "first", ":", "\n", "                        ", "if", "st", "[", "first", ":", "first", "+", "2", "]", "==", "'MC'", ":", "\n", "                            ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "else", ":", "\n", "                            ", "nxt", "=", "(", "'X'", ",", "'K'", ",", "2", ")", "\n", "", "", "else", ":", "\n", "                        ", "nxt", "=", "(", "'X'", ",", "2", ")", "\n", "# e.g, 'czerny'", "\n", "", "", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'CZ'", "and", "st", "[", "pos", "-", "2", ":", "pos", "+", "2", "]", "!=", "'WICZ'", ":", "\n", "                ", "nxt", "=", "(", "'S'", ",", "'X'", ",", "2", ")", "\n", "# e.g., 'focaccia'", "\n", "", "elif", "st", "[", "pos", "+", "1", ":", "pos", "+", "4", "]", "==", "'CIA'", ":", "\n", "                ", "nxt", "=", "(", "'X'", ",", "3", ")", "\n", "# double 'C', but not if e.g. 'McClellan'", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'CC'", "and", "not", "(", "pos", "==", "(", "first", "+", "1", ")", "and", "st", "[", "first", "]", "==", "'M'", ")", ":", "\n", "#'bellocchio' but not 'bacchus'", "\n", "                ", "if", "st", "[", "pos", "+", "2", "]", "in", "[", "\"I\"", ",", "\"E\"", ",", "\"H\"", "]", "and", "st", "[", "pos", "+", "2", ":", "pos", "+", "4", "]", "!=", "'HU'", ":", "\n", "# 'accident', 'accede' 'succeed'", "\n", "                    ", "if", "(", "pos", "==", "(", "first", "+", "1", ")", "and", "st", "[", "first", "]", "==", "'A'", ")", "or", "st", "[", "pos", "-", "1", ":", "pos", "+", "4", "]", "in", "[", "'UCCEE'", ",", "'UCCES'", "]", ":", "\n", "                        ", "nxt", "=", "(", "'KS'", ",", "3", ")", "\n", "# 'bacci', 'bertucci', other italian", "\n", "", "else", ":", "\n", "                        ", "nxt", "=", "(", "'X'", ",", "3", ")", "\n", "", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "in", "[", "\"CK\"", ",", "\"CG\"", ",", "\"CQ\"", "]", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "in", "[", "\"CI\"", ",", "\"CE\"", ",", "\"CY\"", "]", ":", "\n", "# italian vs. english", "\n", "                ", "if", "st", "[", "pos", ":", "pos", "+", "3", "]", "in", "[", "\"CIO\"", ",", "\"CIE\"", ",", "\"CIA\"", "]", ":", "\n", "                    ", "nxt", "=", "(", "'S'", ",", "'X'", ",", "2", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'S'", ",", "2", ")", "\n", "", "", "else", ":", "\n", "# name sent in 'mac caffrey', 'mac gregor", "\n", "                ", "if", "st", "[", "pos", "+", "1", ":", "pos", "+", "3", "]", "in", "[", "\" C\"", ",", "\" Q\"", ",", "\" G\"", "]", ":", "\n", "                    ", "nxt", "=", "(", "'K'", ",", "3", ")", "\n", "", "else", ":", "\n", "                    ", "if", "st", "[", "pos", "+", "1", "]", "in", "[", "\"C\"", ",", "\"K\"", ",", "\"Q\"", "]", "and", "st", "[", "pos", "+", "1", ":", "pos", "+", "3", "]", "not", "in", "[", "\"CE\"", ",", "\"CI\"", "]", ":", "\n", "                        ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "else", ":", "# default for 'C'", "\n", "                        ", "nxt", "=", "(", "'K'", ",", "1", ")", "\n", "", "", "", "", "elif", "ch", "==", "u'\\xc7'", ":", "# will never get here with st.encode('ascii', 'replace') above", "\n", "# \\xc7 is UTF-8 encoding of \u00c7", "\n", "            ", "nxt", "=", "(", "'S'", ",", "1", ")", "\n", "", "elif", "ch", "==", "'D'", ":", "\n", "            ", "if", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'DG'", ":", "\n", "                ", "if", "st", "[", "pos", "+", "2", "]", "in", "[", "'I'", ",", "'E'", ",", "'Y'", "]", ":", "# e.g. 'edge'", "\n", "                    ", "nxt", "=", "(", "'J'", ",", "3", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'TK'", ",", "2", ")", "\n", "", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "in", "[", "'DT'", ",", "'DD'", "]", ":", "\n", "                ", "nxt", "=", "(", "'T'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'T'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'F'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'F'", ":", "\n", "                ", "nxt", "=", "(", "'F'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'F'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'G'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'H'", ":", "\n", "                ", "if", "pos", ">", "first", "and", "st", "[", "pos", "-", "1", "]", "not", "in", "vowels", ":", "\n", "                    ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "elif", "pos", "<", "(", "first", "+", "3", ")", ":", "\n", "                    ", "if", "pos", "==", "first", ":", "# 'ghislane', ghiradelli", "\n", "                        ", "if", "st", "[", "pos", "+", "2", "]", "==", "'I'", ":", "\n", "                            ", "nxt", "=", "(", "'J'", ",", "2", ")", "\n", "", "else", ":", "\n", "                            ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "# Parker's rule (with some further refinements) - e.g., 'hugh'", "\n", "", "", "", "elif", "(", "pos", ">", "(", "first", "+", "1", ")", "and", "st", "[", "pos", "-", "2", "]", "in", "[", "'B'", ",", "'H'", ",", "'D'", "]", ")", "or", "(", "pos", ">", "(", "first", "+", "2", ")", "and", "st", "[", "pos", "-", "3", "]", "in", "[", "'B'", ",", "'H'", ",", "'D'", "]", ")", "or", "(", "pos", ">", "(", "first", "+", "3", ")", "and", "st", "[", "pos", "-", "3", "]", "in", "[", "'B'", ",", "'H'", "]", ")", ":", "\n", "                    ", "nxt", "=", "(", "None", ",", "2", ")", "\n", "", "else", ":", "\n", "# e.g., 'laugh', 'McLaughlin', 'cough', 'gough', 'rough', 'tough'", "\n", "                    ", "if", "pos", ">", "(", "first", "+", "2", ")", "and", "st", "[", "pos", "-", "1", "]", "==", "'U'", "and", "st", "[", "pos", "-", "3", "]", "in", "[", "\"C\"", ",", "\"G\"", ",", "\"L\"", ",", "\"R\"", ",", "\"T\"", "]", ":", "\n", "                        ", "nxt", "=", "(", "'F'", ",", "2", ")", "\n", "", "else", ":", "\n", "                        ", "if", "pos", ">", "first", "and", "st", "[", "pos", "-", "1", "]", "!=", "'I'", ":", "\n", "                            ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "", "", "", "elif", "st", "[", "pos", "+", "1", "]", "==", "'N'", ":", "\n", "                ", "if", "pos", "==", "(", "first", "+", "1", ")", "and", "st", "[", "first", "]", "in", "vowels", "and", "not", "is_slavo_germanic", ":", "\n", "                    ", "nxt", "=", "(", "'KN'", ",", "'N'", ",", "2", ")", "\n", "", "else", ":", "\n", "# not e.g. 'cagney'", "\n", "                    ", "if", "st", "[", "pos", "+", "2", ":", "pos", "+", "4", "]", "!=", "'EY'", "and", "st", "[", "pos", "+", "1", "]", "!=", "'Y'", "and", "not", "is_slavo_germanic", ":", "\n", "                        ", "nxt", "=", "(", "'N'", ",", "'KN'", ",", "2", ")", "\n", "", "else", ":", "\n", "                        ", "nxt", "=", "(", "'KN'", ",", "2", ")", "\n", "# 'tagliaro'", "\n", "", "", "", "elif", "st", "[", "pos", "+", "1", ":", "pos", "+", "3", "]", "==", "'LI'", "and", "not", "is_slavo_germanic", ":", "\n", "                ", "nxt", "=", "(", "'KL'", ",", "'L'", ",", "2", ")", "\n", "# -ges-,-gep-,-gel-, -gie- at beginning", "\n", "", "elif", "pos", "==", "first", "and", "(", "st", "[", "pos", "+", "1", "]", "==", "'Y'", "or", "st", "[", "pos", "+", "1", ":", "pos", "+", "3", "]", "in", "[", "\"ES\"", ",", "\"EP\"", ",", "\"EB\"", ",", "\"EL\"", ",", "\"EY\"", ",", "\"IB\"", ",", "\"IL\"", ",", "\"IN\"", ",", "\"IE\"", ",", "\"EI\"", ",", "\"ER\"", "]", ")", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "'J'", ",", "2", ")", "\n", "# -ger-,  -gy-", "\n", "", "elif", "(", "st", "[", "pos", "+", "1", ":", "pos", "+", "3", "]", "==", "'ER'", "or", "st", "[", "pos", "+", "1", "]", "==", "'Y'", ")", "and", "st", "[", "first", ":", "first", "+", "6", "]", "not", "in", "[", "\"DANGER\"", ",", "\"RANGER\"", ",", "\"MANGER\"", "]", "and", "st", "[", "pos", "-", "1", "]", "not", "in", "[", "'E'", ",", "'I'", "]", "and", "st", "[", "pos", "-", "1", ":", "pos", "+", "2", "]", "not", "in", "[", "'RGY'", ",", "'OGY'", "]", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "'J'", ",", "2", ")", "\n", "# italian e.g, 'biaggi'", "\n", "", "elif", "st", "[", "pos", "+", "1", "]", "in", "[", "'E'", ",", "'I'", ",", "'Y'", "]", "or", "st", "[", "pos", "-", "1", ":", "pos", "+", "3", "]", "in", "[", "\"AGGI\"", ",", "\"OGGI\"", "]", ":", "\n", "# obvious germanic", "\n", "                ", "if", "st", "[", "first", ":", "first", "+", "4", "]", "in", "[", "'VON '", ",", "'VAN '", "]", "or", "st", "[", "first", ":", "first", "+", "3", "]", "==", "'SCH'", "or", "st", "[", "pos", "+", "1", ":", "pos", "+", "3", "]", "==", "'ET'", ":", "\n", "                    ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "else", ":", "\n", "# always soft if french ending", "\n", "                    ", "if", "st", "[", "pos", "+", "1", ":", "pos", "+", "5", "]", "==", "'IER '", ":", "\n", "                        ", "nxt", "=", "(", "'J'", ",", "2", ")", "\n", "", "else", ":", "\n", "                        ", "nxt", "=", "(", "'J'", ",", "'K'", ",", "2", ")", "\n", "", "", "", "elif", "st", "[", "pos", "+", "1", "]", "==", "'G'", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'H'", ":", "\n", "# only keep if first & before vowel or btw. 2 vowels", "\n", "            ", "if", "(", "pos", "==", "first", "or", "st", "[", "pos", "-", "1", "]", "in", "vowels", ")", "and", "st", "[", "pos", "+", "1", "]", "in", "vowels", ":", "\n", "                ", "nxt", "=", "(", "'H'", ",", "2", ")", "\n", "", "else", ":", "# (also takes care of 'HH')", "\n", "                ", "nxt", "=", "(", "None", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'J'", ":", "\n", "# obvious spanish, 'jose', 'san jacinto'", "\n", "            ", "if", "st", "[", "pos", ":", "pos", "+", "4", "]", "==", "'JOSE'", "or", "st", "[", "first", ":", "first", "+", "4", "]", "==", "'SAN '", ":", "\n", "                ", "if", "(", "pos", "==", "first", "and", "st", "[", "pos", "+", "4", "]", "==", "' '", ")", "or", "st", "[", "first", ":", "first", "+", "4", "]", "==", "'SAN '", ":", "\n", "                    ", "nxt", "=", "(", "'H'", ",", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'J'", ",", "'H'", ")", "\n", "", "", "elif", "pos", "==", "first", "and", "st", "[", "pos", ":", "pos", "+", "4", "]", "!=", "'JOSE'", ":", "\n", "                ", "nxt", "=", "(", "'J'", ",", "'A'", ")", "# Yankelovich/Jankelowicz", "\n", "", "else", ":", "\n", "# spanish pron. of e.g. 'bajador'", "\n", "                ", "if", "st", "[", "pos", "-", "1", "]", "in", "vowels", "and", "not", "is_slavo_germanic", "and", "st", "[", "pos", "+", "1", "]", "in", "[", "'A'", ",", "'O'", "]", ":", "\n", "                    ", "nxt", "=", "(", "'J'", ",", "'H'", ")", "\n", "", "else", ":", "\n", "                    ", "if", "pos", "==", "last", ":", "\n", "                        ", "nxt", "=", "(", "'J'", ",", "' '", ")", "\n", "", "else", ":", "\n", "                        ", "if", "st", "[", "pos", "+", "1", "]", "not", "in", "[", "\"L\"", ",", "\"T\"", ",", "\"K\"", ",", "\"S\"", ",", "\"N\"", ",", "\"M\"", ",", "\"B\"", ",", "\"Z\"", "]", "and", "st", "[", "pos", "-", "1", "]", "not", "in", "[", "\"S\"", ",", "\"K\"", ",", "\"L\"", "]", ":", "\n", "                            ", "nxt", "=", "(", "'J'", ",", ")", "\n", "", "else", ":", "\n", "                            ", "nxt", "=", "(", "None", ",", ")", "\n", "", "", "", "", "if", "st", "[", "pos", "+", "1", "]", "==", "'J'", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "2", ",", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "1", ",", ")", "\n", "", "", "elif", "ch", "==", "'K'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'K'", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'L'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'L'", ":", "\n", "# spanish e.g. 'cabrillo', 'gallegos'", "\n", "                ", "if", "(", "pos", "==", "(", "last", "-", "2", ")", "and", "st", "[", "pos", "-", "1", ":", "pos", "+", "3", "]", "in", "[", "\"ILLO\"", ",", "\"ILLA\"", ",", "\"ALLE\"", "]", ")", "or", "(", "(", "st", "[", "last", "-", "1", ":", "last", "+", "1", "]", "in", "[", "\"AS\"", ",", "\"OS\"", "]", "or", "st", "[", "last", "]", "in", "[", "\"A\"", ",", "\"O\"", "]", ")", "and", "st", "[", "pos", "-", "1", ":", "pos", "+", "3", "]", "==", "'ALLE'", ")", ":", "\n", "                    ", "nxt", "=", "(", "'L'", ",", "' '", ",", "2", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'L'", ",", "2", ")", "\n", "", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'L'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'M'", ":", "\n", "            ", "if", "(", "st", "[", "pos", "+", "1", ":", "pos", "+", "4", "]", "==", "'UMB'", "and", "(", "pos", "+", "1", "==", "last", "or", "st", "[", "pos", "+", "2", ":", "pos", "+", "4", "]", "==", "'ER'", ")", ")", "or", "st", "[", "pos", "+", "1", "]", "==", "'M'", ":", "\n", "                ", "nxt", "=", "(", "'M'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'M'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'N'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'N'", ":", "\n", "                ", "nxt", "=", "(", "'N'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'N'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "u'\\xd1'", ":", "# UTF-8 encoding of \uff84", "\n", "            ", "nxt", "=", "(", "'N'", ",", "1", ")", "\n", "", "elif", "ch", "==", "'P'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'H'", ":", "\n", "                ", "nxt", "=", "(", "'F'", ",", "2", ")", "\n", "", "elif", "st", "[", "pos", "+", "1", "]", "in", "[", "'P'", ",", "'B'", "]", ":", "# also account for \"campbell\", \"raspberry\"", "\n", "                ", "nxt", "=", "(", "'P'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'P'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'Q'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'Q'", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'R'", ":", "\n", "# french e.g. 'rogier', but exclude 'hochmeier'", "\n", "            ", "if", "pos", "==", "last", "and", "not", "is_slavo_germanic", "and", "st", "[", "pos", "-", "2", ":", "pos", "]", "==", "'IE'", "and", "st", "[", "pos", "-", "4", ":", "pos", "-", "2", "]", "not", "in", "[", "'ME'", ",", "'MA'", "]", ":", "\n", "                ", "nxt", "=", "(", "''", ",", "'R'", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'R'", ",", ")", "\n", "", "if", "st", "[", "pos", "+", "1", "]", "==", "'R'", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "2", ",", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "1", ",", ")", "\n", "", "", "elif", "ch", "==", "'S'", ":", "\n", "# special cases 'island', 'isle', 'carlisle', 'carlysle'", "\n", "            ", "if", "st", "[", "pos", "-", "1", ":", "pos", "+", "2", "]", "in", "[", "'ISL'", ",", "'YSL'", "]", ":", "\n", "                ", "nxt", "=", "(", "None", ",", "1", ")", "\n", "# special case 'sugar-'", "\n", "", "elif", "pos", "==", "first", "and", "st", "[", "first", ":", "first", "+", "5", "]", "==", "'SUGAR'", ":", "\n", "                ", "nxt", "=", "(", "'X'", ",", "'S'", ",", "1", ")", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'SH'", ":", "\n", "# germanic", "\n", "                ", "if", "st", "[", "pos", "+", "1", ":", "pos", "+", "5", "]", "in", "[", "\"HEIM\"", ",", "\"HOEK\"", ",", "\"HOLM\"", ",", "\"HOLZ\"", "]", ":", "\n", "                    ", "nxt", "=", "(", "'S'", ",", "2", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'X'", ",", "2", ")", "\n", "# italian & armenian", "\n", "", "", "elif", "st", "[", "pos", ":", "pos", "+", "3", "]", "in", "[", "\"SIO\"", ",", "\"SIA\"", "]", "or", "st", "[", "pos", ":", "pos", "+", "4", "]", "==", "'SIAN'", ":", "\n", "                ", "if", "not", "is_slavo_germanic", ":", "\n", "                    ", "nxt", "=", "(", "'S'", ",", "'X'", ",", "3", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'S'", ",", "3", ")", "\n", "# german & anglicisations, e.g. 'smith' match 'schmidt', 'snider' match 'schneider'", "\n", "# also, -sz- in slavic language altho in hungarian it is pronounced 's'", "\n", "", "", "elif", "(", "pos", "==", "first", "and", "st", "[", "pos", "+", "1", "]", "in", "[", "\"M\"", ",", "\"N\"", ",", "\"L\"", ",", "\"W\"", "]", ")", "or", "st", "[", "pos", "+", "1", "]", "==", "'Z'", ":", "\n", "                ", "nxt", "=", "(", "'S'", ",", "'X'", ")", "\n", "if", "st", "[", "pos", "+", "1", "]", "==", "'Z'", ":", "\n", "                    ", "nxt", "=", "nxt", "+", "(", "2", ",", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "nxt", "+", "(", "1", ",", ")", "\n", "", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'SC'", ":", "\n", "# Schlesinger's rule", "\n", "                ", "if", "st", "[", "pos", "+", "2", "]", "==", "'H'", ":", "\n", "# dutch origin, e.g. 'school', 'schooner'", "\n", "                    ", "if", "st", "[", "pos", "+", "3", ":", "pos", "+", "5", "]", "in", "[", "\"OO\"", ",", "\"ER\"", ",", "\"EN\"", ",", "\"UY\"", ",", "\"ED\"", ",", "\"EM\"", "]", ":", "\n", "# 'schermerhorn', 'schenker'", "\n", "                        ", "if", "st", "[", "pos", "+", "3", ":", "pos", "+", "5", "]", "in", "[", "'ER'", ",", "'EN'", "]", ":", "\n", "                            ", "nxt", "=", "(", "'X'", ",", "'SK'", ",", "3", ")", "\n", "", "else", ":", "\n", "                            ", "nxt", "=", "(", "'SK'", ",", "3", ")", "\n", "", "", "else", ":", "\n", "                        ", "if", "pos", "==", "first", "and", "st", "[", "first", "+", "3", "]", "not", "in", "vowels", "and", "st", "[", "first", "+", "3", "]", "!=", "'W'", ":", "\n", "                            ", "nxt", "=", "(", "'X'", ",", "'S'", ",", "3", ")", "\n", "", "else", ":", "\n", "                            ", "nxt", "=", "(", "'X'", ",", "3", ")", "\n", "", "", "", "elif", "st", "[", "pos", "+", "2", "]", "in", "[", "'I'", ",", "'E'", ",", "'Y'", "]", ":", "\n", "                    ", "nxt", "=", "(", "'S'", ",", "3", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'SK'", ",", "3", ")", "\n", "# french e.g. 'resnais', 'artois'", "\n", "", "", "elif", "pos", "==", "last", "and", "st", "[", "pos", "-", "2", ":", "pos", "]", "in", "[", "'AI'", ",", "'OI'", "]", ":", "\n", "                ", "nxt", "=", "(", "''", ",", "'S'", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'S'", ",", ")", "\n", "if", "st", "[", "pos", "+", "1", "]", "in", "[", "'S'", ",", "'Z'", "]", ":", "\n", "                    ", "nxt", "=", "nxt", "+", "(", "2", ",", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "nxt", "+", "(", "1", ",", ")", "\n", "", "", "", "elif", "ch", "==", "'T'", ":", "\n", "            ", "if", "st", "[", "pos", ":", "pos", "+", "4", "]", "==", "'TION'", ":", "\n", "                ", "nxt", "=", "(", "'X'", ",", "3", ")", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "3", "]", "in", "[", "'TIA'", ",", "'TCH'", "]", ":", "\n", "                ", "nxt", "=", "(", "'X'", ",", "3", ")", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'TH'", "or", "st", "[", "pos", ":", "pos", "+", "3", "]", "==", "'TTH'", ":", "\n", "# special case 'thomas', 'thames' or germanic", "\n", "                ", "if", "st", "[", "pos", "+", "2", ":", "pos", "+", "4", "]", "in", "[", "'OM'", ",", "'AM'", "]", "or", "st", "[", "first", ":", "first", "+", "4", "]", "in", "[", "'VON '", ",", "'VAN '", "]", "or", "st", "[", "first", ":", "first", "+", "3", "]", "==", "'SCH'", ":", "\n", "                    ", "nxt", "=", "(", "'T'", ",", "2", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'0'", ",", "'T'", ",", "2", ")", "\n", "", "", "elif", "st", "[", "pos", "+", "1", "]", "in", "[", "'T'", ",", "'D'", "]", ":", "\n", "                ", "nxt", "=", "(", "'T'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'T'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'V'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'V'", ":", "\n", "                ", "nxt", "=", "(", "'F'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'F'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'W'", ":", "\n", "# can also be in middle of word", "\n", "            ", "if", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'WR'", ":", "\n", "                ", "nxt", "=", "(", "'R'", ",", "2", ")", "\n", "", "elif", "pos", "==", "first", "and", "(", "st", "[", "pos", "+", "1", "]", "in", "vowels", "or", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'WH'", ")", ":", "\n", "# Wasserman should match Vasserman", "\n", "                ", "if", "st", "[", "pos", "+", "1", "]", "in", "vowels", ":", "\n", "                    ", "nxt", "=", "(", "'A'", ",", "'F'", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'A'", ",", "1", ")", "\n", "# Arnow should match Arnoff", "\n", "", "", "elif", "(", "pos", "==", "last", "and", "st", "[", "pos", "-", "1", "]", "in", "vowels", ")", "or", "st", "[", "pos", "-", "1", ":", "pos", "+", "4", "]", "in", "[", "\"EWSKI\"", ",", "\"EWSKY\"", ",", "\"OWSKI\"", ",", "\"OWSKY\"", "]", "or", "st", "[", "first", ":", "first", "+", "3", "]", "==", "'SCH'", ":", "\n", "                ", "nxt", "=", "(", "''", ",", "'F'", ",", "1", ")", "\n", "# polish e.g. 'filipowicz'", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "4", "]", "in", "[", "\"WICZ\"", ",", "\"WITZ\"", "]", ":", "\n", "                ", "nxt", "=", "(", "'TS'", ",", "'FX'", ",", "4", ")", "\n", "", "else", ":", "# default is to skip it", "\n", "                ", "nxt", "=", "(", "None", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'X'", ":", "\n", "# french e.g. breaux", "\n", "            ", "nxt", "=", "(", "None", ",", ")", "\n", "if", "not", "(", "pos", "==", "last", "and", "(", "st", "[", "pos", "-", "3", ":", "pos", "]", "in", "[", "\"IAU\"", ",", "\"EAU\"", "]", "or", "st", "[", "pos", "-", "2", ":", "pos", "]", "in", "[", "'AU'", ",", "'OU'", "]", ")", ")", ":", "\n", "                ", "nxt", "=", "(", "'KS'", ",", ")", "\n", "", "if", "st", "[", "pos", "+", "1", "]", "in", "[", "'C'", ",", "'X'", "]", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "2", ",", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "1", ",", ")", "\n", "", "", "elif", "ch", "==", "'Z'", ":", "\n", "# chinese pinyin e.g. 'zhao'", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'H'", ":", "\n", "                ", "nxt", "=", "(", "'J'", ",", ")", "\n", "", "elif", "st", "[", "pos", "+", "1", ":", "pos", "+", "3", "]", "in", "[", "\"ZO\"", ",", "\"ZI\"", ",", "\"ZA\"", "]", "or", "(", "is_slavo_germanic", "and", "pos", ">", "first", "and", "st", "[", "pos", "-", "1", "]", "!=", "'T'", ")", ":", "\n", "                ", "nxt", "=", "(", "'S'", ",", "'TS'", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'S'", ",", ")", "\n", "", "if", "st", "[", "pos", "+", "1", "]", "==", "'Z'", "or", "st", "[", "pos", "+", "1", "]", "==", "'H'", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "2", ",", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "1", ",", ")", "\n", "# ----------------------------------", "\n", "# --- end checking letters------", "\n", "# ----------------------------------", "\n", "#print str(nxt)", "\n", "", "", "if", "len", "(", "nxt", ")", "==", "2", ":", "\n", "            ", "if", "nxt", "[", "0", "]", ":", "\n", "                ", "pri", "+=", "nxt", "[", "0", "]", "\n", "sec", "+=", "nxt", "[", "0", "]", "\n", "", "pos", "+=", "nxt", "[", "1", "]", "\n", "", "elif", "len", "(", "nxt", ")", "==", "3", ":", "\n", "            ", "if", "nxt", "[", "0", "]", ":", "\n", "                ", "pri", "+=", "nxt", "[", "0", "]", "\n", "", "if", "nxt", "[", "1", "]", ":", "\n", "                ", "sec", "+=", "nxt", "[", "1", "]", "\n", "", "pos", "+=", "nxt", "[", "2", "]", "\n", "", "", "if", "pri", "==", "sec", ":", "\n", "        ", "return", "(", "pri", ",", "''", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "pri", ",", "sec", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clips_clinspell.demo.spelling_correction.SpellingCorrection.__init__": [[16, 54], ["print", "zip", "print", "fasttext.load_model", "print", "len", "len", "len", "len", "len", "range", "open", "json.load", "ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "detection_list", ",", "language", ",", "model", ",", "k", ",", "backoff", ",", "pathtofrequencies", ",", "pathtomodel", ")", ":", "\n", "        ", "\"\"\"\n        :param detection_list: list with tuples containing (misspelling, list of 10 left context tokens, list of 10 right context tokens)\n        :param language: 1 if English, 0 if Dutch\n        :param model: 1 if context-sensitive, 0 if noisy channel\n        :param k: number of ranked corrections returned\n        \"\"\"", "\n", "# prepare model", "\n", "print", "(", "'Initializing spelling correction model...'", ")", "\n", "assert", "len", "(", "detection_list", "[", "0", "]", ")", "==", "3", ",", "'Wrong input format'", "\n", "self", ".", "misspellings", ",", "self", ".", "left_contexts", ",", "self", ".", "right_contexts", "=", "zip", "(", "*", "detection_list", ")", "\n", "assert", "len", "(", "self", ".", "misspellings", ")", "==", "len", "(", "self", ".", "left_contexts", ")", "==", "len", "(", "self", ".", "right_contexts", ")", ",", "'Input data not properly synchronized'", "\n", "print", "(", "len", "(", "self", ".", "misspellings", ")", ",", "'misspellings to correct'", ")", "\n", "self", ".", "ranking_model", "=", "model", "\n", "assert", "self", ".", "ranking_model", "in", "range", "(", "2", ")", ",", "'No valid correction model specified'", "\n", "assert", "k", ">=", "1", ",", "'No valid k specified'", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "backoff", "=", "backoff", "\n", "if", "language", "==", "1", ":", "\n", "            ", "self", ".", "language", "=", "'en'", "\n", "", "elif", "language", "==", "0", ":", "\n", "            ", "self", ".", "language", "=", "'nl'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'No valid language input specified'", ")", "\n", "\n", "# load embedding model and corpus frequencies", "\n", "", "with", "open", "(", "pathtofrequencies", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "frequency_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "model", "=", "fasttext", ".", "load_model", "(", "pathtomodel", ")", "\n", "\n", "# set parameters for correction", "\n", "if", "self", ".", "language", "==", "\"en\"", ":", "\n", "            ", "self", ".", "window_size", "=", "9", "\n", "self", ".", "oov_penalty", "=", "1.7", "\n", "", "elif", "self", ".", "language", "==", "\"nl\"", ":", "\n", "            ", "self", ".", "window_size", "=", "10", "\n", "self", ".", "oov_penalty", "=", "2.4", "\n", "", "print", "(", "'Model initialized'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.demo.spelling_correction.SpellingCorrection.comp_sum": [[55, 69], ["numpy.reciprocal", "enumerate", "numpy.sum", "numpy.arange", "weighted_vectors.append", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "comp_sum", "(", "vectors", ")", ":", "\n", "        ", "\"\"\"\n        Composes a single vector representation out of several vectors using summing with reciprocal weighting.\n        :param vectors: vectors to be composed\n        :return: composed vector representation\n        \"\"\"", "\n", "weight_vector", "=", "np", ".", "reciprocal", "(", "np", ".", "arange", "(", "1.", ",", "len", "(", "vectors", ")", "+", "1", ")", ")", "\n", "weighted_vectors", "=", "[", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "weight_vector", ")", ":", "\n", "            ", "weighted_vectors", ".", "append", "(", "vectors", "[", "i", "]", "*", "weight", ")", "\n", "", "composed_vector", "=", "np", ".", "sum", "(", "weighted_vectors", ",", "axis", "=", "0", ")", "\n", "\n", "return", "composed_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.demo.spelling_correction.SpellingCorrection.normalize": [[70, 81], ["vector.any", "numpy.linalg.norm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "normalize", "(", "vector", ")", ":", "\n", "        ", "\"\"\"\n        Normalizes a vector.\n        :param vector: a numpy array or list to normalize.\n        :return: a normalized vector.\n        \"\"\"", "\n", "if", "not", "vector", ".", "any", "(", ")", ":", "\n", "            ", "return", "vector", "\n", "\n", "", "return", "vector", "/", "np", ".", "linalg", ".", "norm", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.demo.spelling_correction.SpellingCorrection.vectorize": [[82, 92], ["numpy.array"], "methods", ["None"], ["", "def", "vectorize", "(", "self", ",", "sequence", ",", "remove_oov", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param sequence: sequence to be vectorized\n        :param remove_oov: whether to vectorize oov tokens\n        :return: vectorized sequence\n        \"\"\"", "\n", "if", "remove_oov", ":", "\n", "            ", "sequence", "=", "[", "x", "for", "x", "in", "sequence", "if", "x", "in", "self", ".", "model", ".", "words", "]", "\n", "\n", "", "return", "[", "np", ".", "array", "(", "self", ".", "model", "[", "x", "]", ")", "for", "x", "in", "sequence", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.demo.spelling_correction.SpellingCorrection.context_ranking": [[93, 156], ["zip", "spelling_correction.SpellingCorrection.vectorize", "spelling_correction.SpellingCorrection.vectorize", "spelling_correction.SpellingCorrection.normalize", "enumerate", "enumerate", "correction_list.append", "spelling_correction.SpellingCorrection.comp_sum", "numpy.zeros", "spelling_correction.SpellingCorrection.comp_sum", "numpy.zeros", "numpy.zeros.any", "correction_list.append", "numpy.sum", "candidate_vectors.append", "numpy.dot", "pyxdameraulevenshtein.damerau_levenshtein_distance", "correction_list.append", "len", "len", "numpy.zeros.any", "spelling_correction.SpellingCorrection.normalize", "oov_idxs.append", "zip", "correction_list.append", "numpy.array", "correction_list.append", "numpy.argmax", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.vectorize", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.vectorize", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.normalize", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.comp_sum", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.comp_sum", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.normalize"], ["", "def", "context_ranking", "(", "self", ",", "candidates_list", ")", ":", "\n", "        ", "\"\"\"\n        Context-sensitive ranking model\n        :param candidates_list: list of candidate list per misspelling\n        :return: list with corrections or k-best corrections\n        \"\"\"", "\n", "correction_list", "=", "[", "]", "\n", "\n", "for", "misspelling", ",", "left_context", ",", "right_context", ",", "candidates", "in", "zip", "(", "\n", "self", ".", "misspellings", ",", "self", ".", "left_contexts", ",", "self", ".", "right_contexts", ",", "candidates_list", ")", ":", "\n", "\n", "            ", "if", "not", "candidates", ":", "\n", "                ", "correction_list", ".", "append", "(", "''", ")", "\n", "continue", "\n", "\n", "", "left_context", ",", "right_context", "=", "left_context", "[", ":", ":", "-", "1", "]", "[", ":", "self", ".", "window_size", "]", ",", "right_context", "[", ":", "self", ".", "window_size", "]", "\n", "left_window", "=", "self", ".", "vectorize", "(", "left_context", ",", "remove_oov", "=", "True", ")", "# take only in-voc tokens for context", "\n", "right_window", "=", "self", ".", "vectorize", "(", "right_context", ",", "remove_oov", "=", "True", ")", "# take only in-voc tokens for context", "\n", "\n", "if", "left_window", ":", "\n", "                ", "vectorized_left_window", "=", "self", ".", "comp_sum", "(", "left_window", ")", "\n", "", "else", ":", "\n", "                ", "vectorized_left_window", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "model", ".", "dim", ")", ")", "\n", "\n", "", "if", "right_window", ":", "\n", "                ", "vectorized_right_window", "=", "self", ".", "comp_sum", "(", "right_window", ")", "\n", "", "else", ":", "\n", "                ", "vectorized_right_window", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "model", ".", "dim", ")", ")", "\n", "\n", "", "if", "not", "vectorized_left_window", ".", "any", "(", ")", "or", "vectorized_right_window", ".", "any", "(", ")", ":", "\n", "                ", "correction_list", ".", "append", "(", "''", ")", "# no context to correct the misspelling", "\n", "continue", "\n", "\n", "", "vectorized_context", "=", "self", ".", "normalize", "(", "np", ".", "sum", "(", "(", "vectorized_left_window", ",", "vectorized_right_window", ")", ",", "axis", "=", "0", ")", ")", "\n", "\n", "candidate_vectors", "=", "[", "]", "\n", "oov_idxs", "=", "[", "]", "\n", "\n", "# make vector representations of candidates", "\n", "for", "i", ",", "candidate", "in", "enumerate", "(", "candidates", ")", ":", "\n", "                ", "candidate_vectors", ".", "append", "(", "self", ".", "normalize", "(", "np", ".", "array", "(", "self", ".", "model", "[", "candidate", "]", ")", ")", ")", "\n", "if", "candidate", "not", "in", "self", ".", "model", ".", "words", ":", "\n", "                    ", "oov_idxs", ".", "append", "(", "i", ")", "\n", "\n", "# calculate cosine similarities", "\n", "", "", "distances", "=", "[", "np", ".", "dot", "(", "vectorized_context", ",", "candidate", ")", "for", "candidate", "in", "candidate_vectors", "]", "\n", "spell_scores", "=", "[", "damerau_levenshtein_distance", "(", "misspelling", ",", "candidate", ")", "\n", "for", "candidate", "in", "candidates", "]", "\n", "distances", "=", "[", "a", "/", "b", "for", "a", ",", "b", "in", "zip", "(", "distances", ",", "spell_scores", ")", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "distances", ")", ":", "\n", "                ", "if", "i", "in", "oov_idxs", ":", "\n", "                    ", "distances", "[", "i", "]", "/=", "self", ".", "oov_penalty", "\n", "\n", "# output", "\n", "", "", "if", "self", ".", "k", "==", "1", ":", "\n", "                ", "try", ":", "\n", "                    ", "correction_list", ".", "append", "(", "candidates", "[", "np", ".", "argmax", "(", "distances", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "correction_list", ".", "append", "(", "''", ")", "\n", "", "", "else", ":", "\n", "                ", "correction_list", ".", "append", "(", "[", "candidates", "[", "i", "]", "for", "i", "in", "np", ".", "argsort", "(", "distances", ")", "[", ":", ":", "-", "1", "]", "[", ":", "self", ".", "k", "]", "]", ")", "\n", "\n", "", "", "return", "correction_list", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.demo.spelling_correction.SpellingCorrection.noisychannel_ranking": [[157, 195], ["zip", "numpy.array", "correction_list.append", "pyxdameraulevenshtein.damerau_levenshtein_distance", "pyxdameraulevenshtein.damerau_levenshtein_distance", "numpy.array.append", "correction_list.append", "correction_list.append", "doublemetaphone.dm", "doublemetaphone.dm", "math.log", "correction_list.append", "numpy.argmin", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.clips_clinspell.code.doublemetaphone.dm", "home.repos.pwc.inspect_result.clips_clinspell.code.doublemetaphone.dm"], ["", "def", "noisychannel_ranking", "(", "self", ",", "candidates_list", ")", ":", "\n", "        ", "\"\"\"\n        An approximate implementation of the ranking method described in\n        Lai et al. (2015), 'Automated Misspelling Detection and Correction in Clinical Free-Text Records'\n        :param candidates_list: list of candidate list per misspelling\n        :return: list with corrections or k-best corrections\n        \"\"\"", "\n", "correction_list", "=", "[", "]", "\n", "\n", "for", "misspelling", ",", "candidates", "in", "zip", "(", "self", ".", "misspellings", ",", "candidates_list", ")", ":", "\n", "\n", "            ", "if", "not", "candidates", ":", "\n", "                ", "correction_list", ".", "append", "(", "''", ")", "\n", "continue", "\n", "\n", "", "score_list", "=", "[", "]", "\n", "for", "candidate", "in", "candidates", ":", "\n", "                ", "orthographic_edit_distance", "=", "damerau_levenshtein_distance", "(", "misspelling", ",", "candidate", ")", "\n", "phonetic_edit_distance", "=", "damerau_levenshtein_distance", "(", "dm", "(", "misspelling", ")", "[", "0", "]", ",", "dm", "(", "candidate", ")", "[", "0", "]", ")", "\n", "spell_score", "=", "(", "2", "*", "orthographic_edit_distance", "+", "phonetic_edit_distance", ")", "**", "2", "# P(m|c)", "\n", "try", ":", "\n", "                    ", "frequency", "=", "self", ".", "frequency_dict", "[", "candidate", "]", "\n", "", "except", "KeyError", ":", "\n", "                    ", "frequency", "=", "1", "\n", "", "frequency_score", "=", "1", "/", "(", "1", "+", "log", "(", "frequency", ")", ")", "# P(c)", "\n", "score", "=", "spell_score", "*", "frequency_score", "# P(c|m) = P(m|c)*P(c)", "\n", "score_list", ".", "append", "(", "score", ")", "\n", "\n", "", "score_list", "=", "np", ".", "array", "(", "score_list", ")", "\n", "if", "self", ".", "k", "==", "1", ":", "\n", "                ", "try", ":", "\n", "                    ", "correction_list", ".", "append", "(", "candidates", "[", "np", ".", "argmin", "(", "score_list", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "correction_list", ".", "append", "(", "''", ")", "\n", "", "", "else", ":", "\n", "                ", "correction_list", ".", "append", "(", "[", "candidates", "[", "i", "]", "for", "i", "in", "np", ".", "argsort", "(", "score_list", ")", "[", ":", "self", ".", "k", "]", "]", ")", "\n", "\n", "", "", "return", "correction_list", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.demo.spelling_correction.SpellingCorrection.__call__": [[196, 210], ["candidates.candidates.candidates", "spelling_correction.SpellingCorrection.context_ranking", "spelling_correction.SpellingCorrection.noisychannel_ranking", "spelling_correction.SpellingCorrection.noisychannel_ranking", "enumerate", "zip"], "methods", ["home.repos.pwc.inspect_result.clips_clinspell.demo.candidates.candidates", "home.repos.pwc.inspect_result.clips_clinspell.demo.spelling_correction.SpellingCorrection.context_ranking", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.noisychannel_ranking", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.noisychannel_ranking"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "\n", "        ", "candidates_list", "=", "candidates", "(", "self", ".", "misspellings", ",", "self", ".", "language", ")", "\n", "if", "self", ".", "ranking_model", ":", "\n", "            ", "correction_list", "=", "self", ".", "context_ranking", "(", "candidates_list", ")", "\n", "if", "self", ".", "backoff", ":", "\n", "                ", "backoff_correction_list", "=", "self", ".", "noisychannel_ranking", "(", "candidates_list", ")", "\n", "for", "i", ",", "(", "correction", ",", "backoff_correction", ")", "in", "enumerate", "(", "zip", "(", "correction_list", ",", "backoff_correction_list", ")", ")", ":", "\n", "                    ", "if", "not", "correction", ":", "\n", "                        ", "correction_list", "[", "i", "]", "=", "backoff_correction", "\n", "", "", "", "", "else", ":", "\n", "            ", "correction_list", "=", "self", ".", "noisychannel_ranking", "(", "candidates_list", ")", "\n", "\n", "", "return", "correction_list", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.demo.candidates.load_vocab": [[11, 38], ["len", "len", "range", "min", "max", "range", "[].add", "set", "len", "len", "set"], "function", ["None"], ["def", "load_vocab", "(", "vocab", ")", ":", "\n", "    ", "\"\"\"\n    Transforms a vocabulary to the dictionary format required for the candidate generation.\n    :param vocab: a list containing the vocabulary\n    :return: vocab_dict\n    \"\"\"", "\n", "\n", "# TRANSFORM VOCABULARY TO DICTIONARY", "\n", "\n", "# initialize vocab word length keys and character set length keys", "\n", "\n", "vocab_dict", "=", "{", "}", "\n", "min_len", "=", "len", "(", "min", "(", "vocab", ",", "key", "=", "len", ")", ")", "\n", "max_len", "=", "len", "(", "max", "(", "vocab", ",", "key", "=", "len", ")", ")", "\n", "item_lens", "=", "range", "(", "min_len", ",", "max_len", "+", "1", ")", "\n", "\n", "for", "item", "in", "item_lens", ":", "\n", "        ", "vocab_dict", "[", "item", "]", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "max_len", "+", "1", ")", ":", "\n", "            ", "vocab_dict", "[", "item", "]", "[", "i", "]", "=", "set", "(", ")", "\n", "\n", "# fill vocab according to word length and character set length", "\n", "\n", "", "", "for", "word", "in", "vocab", ":", "\n", "        ", "vocab_dict", "[", "len", "(", "word", ")", "]", "[", "len", "(", "set", "(", "word", ")", ")", "]", ".", "add", "(", "word", ")", "\n", "\n", "", "return", "vocab_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.demo.candidates.levenshtein_candidates": [[39, 77], ["len", "len", "set", "list", "set", "range", "range", "range", "range", "set", "pyxdameraulevenshtein.damerau_levenshtein_distance", "candidates.append"], "function", ["None"], ["", "def", "levenshtein_candidates", "(", "word", ",", "vocab_dict", ",", "editdistance", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Generates candidates\n    :param word: the misspelling for which to generate replacement candidates\n    :param vocab_dict: the output of load_vocab()\n    :param editdistance: the maximum Damerau-Levenshtein edit distance\n    :return:\n    \"\"\"", "\n", "\n", "candidates", "=", "[", "]", "\n", "\n", "word_len", "=", "len", "(", "word", ")", "\n", "set_len", "=", "len", "(", "set", "(", "word", ")", ")", "\n", "\n", "if", "word_len", "<=", "2", ":", "\n", "        ", "word_lengths", "=", "range", "(", "word_len", ",", "word_len", "+", "1", "+", "editdistance", ")", "\n", "", "else", ":", "\n", "        ", "word_lengths", "=", "range", "(", "word_len", "-", "editdistance", ",", "word_len", "+", "1", "+", "editdistance", ")", "\n", "\n", "", "if", "set_len", "-", "editdistance", ">", "0", ":", "\n", "        ", "set_lengths", "=", "range", "(", "set_len", "-", "editdistance", ",", "set_len", "+", "1", "+", "editdistance", ")", "\n", "", "else", ":", "\n", "        ", "set_lengths", "=", "range", "(", "set_len", ",", "set_len", "+", "1", "+", "editdistance", ")", "\n", "\n", "", "selection", "=", "[", "]", "\n", "\n", "for", "i", "in", "word_lengths", ":", "\n", "        ", "key", "=", "vocab_dict", "[", "i", "]", "\n", "for", "j", "in", "set_lengths", ":", "\n", "            ", "selection", "+=", "key", "[", "j", "]", "\n", "\n", "", "", "for", "item", "in", "set", "(", "selection", ")", ":", "\n", "        ", "if", "damerau_levenshtein_distance", "(", "word", ",", "item", ")", "<=", "editdistance", ":", "\n", "            ", "candidates", ".", "append", "(", "item", ")", "\n", "\n", "", "", "full_candidates", "=", "list", "(", "set", "(", "candidates", ")", ")", "\n", "\n", "return", "full_candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.demo.candidates.load_metaphones": [[83, 103], ["doublemetaphone.dm", "metaphone_dict[].append", "metaphone_dict[].append"], "function", ["home.repos.pwc.inspect_result.clips_clinspell.code.doublemetaphone.dm"], ["", "def", "load_metaphones", "(", "vocab", ")", ":", "\n", "    ", "\"\"\"\n    :param vocab_file: either a list containing the vocabulary, or a text file which contains one lexical item per line\n    :return: dictionary with mappings between Double Metaphone representations and corresponding lexical items\n    \"\"\"", "\n", "\n", "# MAKE METAPHONE-LEXICAL MAPPING", "\n", "\n", "metaphone_dict", "=", "{", "}", "\n", "for", "item", "in", "vocab", ":", "\n", "        ", "metaphones", "=", "dm", "(", "item", ")", "\n", "for", "metaphone", "in", "metaphones", ":", "\n", "            ", "if", "metaphone", ":", "\n", "                ", "try", ":", "\n", "                    ", "metaphone_dict", "[", "metaphone", "]", ".", "append", "(", "item", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "metaphone_dict", "[", "metaphone", "]", "=", "[", "]", "\n", "metaphone_dict", "[", "metaphone", "]", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "", "return", "metaphone_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.demo.candidates.convert_candidates": [[104, 121], ["enumerate", "len", "set().intersection", "pyxdameraulevenshtein.damerau_levenshtein_distance", "converted_candidates.append", "set", "set", "candidates.candidates"], "function", ["home.repos.pwc.inspect_result.clips_clinspell.demo.candidates.candidates"], ["", "def", "convert_candidates", "(", "metaphone_candidates", ",", "detection", ",", "metaphone_dict", ")", ":", "\n", "\n", "    ", "\"\"\"\n    :param candidates: replacement candidates\n    :param detection: misspelling\n    :param metaphone_dict: output of load_metaphones()\n    :return: candidates converted from Double Metaphone representation to normal lexical representation\n    \"\"\"", "\n", "\n", "converted_candidates", "=", "[", "]", "\n", "for", "i", ",", "candidate", "in", "enumerate", "(", "metaphone_candidates", ")", ":", "\n", "        ", "for", "item", "in", "metaphone_dict", "[", "candidate", "]", ":", "\n", "            ", "if", "len", "(", "set", "(", "item", ")", ".", "intersection", "(", "set", "(", "candidate", ")", ")", ")", ">=", "1", ":", "# have at least one character in common", "\n", "                ", "if", "damerau_levenshtein_distance", "(", "item", ",", "detection", ")", "<=", "3", ":", "# enough overlap", "\n", "                    ", "converted_candidates", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "", "return", "converted_candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.demo.candidates.candidates": [[128, 152], ["json.load", "candidates.load_vocab", "print", "print", "enumerate", "print", "candidates.load_metaphones", "candidates.load_vocab", "open", "candidates_list.append", "list", "candidates.levenshtein_candidates", "candidates.convert_candidates", "list", "str", "candidates.levenshtein_candidates", "load_metaphones.keys", "zip", "set", "zip", "len", "doublemetaphone.dm"], "function", ["home.repos.pwc.inspect_result.clips_clinspell.code.candidates.load_vocab", "home.repos.pwc.inspect_result.clips_clinspell.code.candidates.load_metaphones", "home.repos.pwc.inspect_result.clips_clinspell.code.candidates.load_vocab", "home.repos.pwc.inspect_result.clips_clinspell.code.candidates.levenshtein_candidates", "home.repos.pwc.inspect_result.clips_clinspell.code.candidates.convert_candidates", "home.repos.pwc.inspect_result.clips_clinspell.code.candidates.levenshtein_candidates", "home.repos.pwc.inspect_result.clips_clinspell.code.doublemetaphone.dm"], ["", "def", "candidates", "(", "misspellings", ",", "language", "=", "'en'", ")", ":", "\n", "\n", "    ", "vocab", "=", "json", ".", "load", "(", "open", "(", "\"lexicon_\"", "+", "language", "+", "\".json\"", ",", "'r'", ")", ")", "\n", "vocab_dict", "=", "load_vocab", "(", "vocab", ")", "\n", "\n", "print", "(", "str", "(", "len", "(", "misspellings", ")", ")", "+", "' misspellings to generate candidates for'", ")", "\n", "\n", "candidates_list", "=", "[", "]", "\n", "\n", "print", "(", "\"Generating Damerau-Levenshtein candidates\"", ")", "\n", "for", "i", ",", "misspelling", "in", "enumerate", "(", "misspellings", ")", ":", "\n", "        ", "candidates_list", ".", "append", "(", "levenshtein_candidates", "(", "misspelling", ",", "vocab_dict", ",", "editdistance", "=", "2", ")", ")", "\n", "\n", "", "print", "(", "\"Generating Double Metaphone candidates edit distance 1\"", ")", "\n", "metaphone_dict", "=", "load_metaphones", "(", "vocab", ")", "\n", "vocab_dict", "=", "load_vocab", "(", "list", "(", "metaphone_dict", ".", "keys", "(", ")", ")", ")", "\n", "metaphone_candidates", "=", "[", "levenshtein_candidates", "(", "dm", "(", "misspelling", ")", "[", "0", "]", ",", "vocab_dict", ",", "editdistance", "=", "1", ")", "\n", "for", "misspelling", "in", "misspellings", "]", "\n", "soundslike_candidates", "=", "[", "convert_candidates", "(", "candidates", ",", "detection", ",", "metaphone_dict", ")", "for", "\n", "candidates", ",", "detection", "in", "zip", "(", "metaphone_candidates", ",", "misspellings", ")", "]", "\n", "candidates_list", "=", "[", "list", "(", "set", "(", "candidates1", "+", "candidates2", ")", ")", "for", "candidates1", ",", "candidates2", "in", "\n", "zip", "(", "candidates_list", ",", "soundslike_candidates", ")", "]", "\n", "\n", "return", "candidates_list", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.doublemetaphone.dm": [[15, 425], ["st.upper.upper", "len", "st.upper.find", "st.upper.find", "st.upper.find", "st.upper.find", "len", "unicodedata.normalize", "len", "unicodedata.category"], "function", ["home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.normalize"], ["def", "dm", "(", "st", ")", ":", "\n", "    ", "\"\"\"dm(string) -> (string, string or '')\n    returns the double metaphone codes for given string - always a tuple\n    there are no checks done on the input string, but it should be a single word or name.\"\"\"", "\n", "vowels", "=", "[", "'A'", ",", "'E'", ",", "'I'", ",", "'O'", ",", "'U'", ",", "'Y'", "]", "\n", "st", "=", "''", ".", "join", "(", "(", "c", "for", "c", "in", "unicodedata", ".", "normalize", "(", "'NFD'", ",", "st", ")", "if", "unicodedata", ".", "category", "(", "c", ")", "!=", "'Mn'", ")", ")", "\n", "st", "=", "st", ".", "upper", "(", ")", "# st is short for string. I usually prefer descriptive over short, but this var is used a lot!", "\n", "is_slavo_germanic", "=", "(", "st", ".", "find", "(", "'W'", ")", ">", "-", "1", "or", "st", ".", "find", "(", "'K'", ")", ">", "-", "1", "or", "st", ".", "find", "(", "'CZ'", ")", ">", "-", "1", "or", "st", ".", "find", "(", "'WITZ'", ")", ">", "-", "1", ")", "\n", "length", "=", "len", "(", "st", ")", "\n", "first", "=", "2", "\n", "st", "=", "'-'", "*", "first", "+", "st", "+", "'------'", "# so we can index beyond the begining and end of the input string", "\n", "last", "=", "first", "+", "length", "-", "1", "\n", "pos", "=", "first", "# pos is short for position", "\n", "pri", "=", "sec", "=", "''", "# primary and secondary metaphone codes", "\n", "# skip these silent letters when at start of word", "\n", "if", "st", "[", "first", ":", "first", "+", "2", "]", "in", "[", "\"GN\"", ",", "\"KN\"", ",", "\"PN\"", ",", "\"WR\"", ",", "\"PS\"", "]", ":", "\n", "        ", "pos", "+=", "1", "\n", "# Initial 'X' is pronounced 'Z' e.g. 'Xavier'", "\n", "", "if", "st", "[", "first", "]", "==", "'X'", ":", "\n", "        ", "pri", "=", "sec", "=", "'S'", "# 'Z' maps to 'S'", "\n", "pos", "+=", "1", "\n", "# main loop through chars in st", "\n", "", "while", "pos", "<=", "last", ":", "\n", "#print str(pos) + '\\t' + st[pos]", "\n", "        ", "ch", "=", "st", "[", "pos", "]", "# ch is short for character", "\n", "# nxt (short for next characters in metaphone code) is set to  a tuple of the next characters in", "\n", "# the primary and secondary codes and how many characters to move forward in the string.", "\n", "# the secondary code letter is given only when it is different than the primary.", "\n", "# This is just a trick to make the code easier to write and read.", "\n", "nxt", "=", "(", "None", ",", "1", ")", "# default action is to add nothing and move to next char", "\n", "if", "ch", "in", "vowels", ":", "\n", "            ", "nxt", "=", "(", "None", ",", "1", ")", "\n", "if", "pos", "==", "first", ":", "# all init vowels now map to 'A'", "\n", "                ", "nxt", "=", "(", "'A'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'B'", ":", "\n", "#\"-mb\", e.g\", \"dumb\", already skipped over... see 'M' below", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'B'", ":", "\n", "                ", "nxt", "=", "(", "'P'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'P'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'C'", ":", "\n", "# various germanic", "\n", "            ", "if", "pos", ">", "first", "+", "1", "and", "st", "[", "pos", "-", "2", "]", "not", "in", "vowels", "and", "st", "[", "pos", "-", "1", ":", "pos", "+", "2", "]", "==", "'ACH'", "and", "st", "[", "pos", "+", "2", "]", "not", "in", "[", "'I'", "]", "and", "(", "st", "[", "pos", "+", "2", "]", "not", "in", "[", "'E'", "]", "or", "st", "[", "pos", "-", "2", ":", "pos", "+", "4", "]", "in", "[", "'BACHER'", ",", "'MACHER'", "]", ")", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "# special case 'CAESAR'", "\n", "", "elif", "pos", "==", "first", "and", "st", "[", "first", ":", "first", "+", "6", "]", "==", "'CAESAR'", ":", "\n", "                ", "nxt", "=", "(", "'S'", ",", "2", ")", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "4", "]", "==", "'CHIA'", ":", "# italian 'chianti'", "\n", "                ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'CH'", ":", "\n", "# find 'michael'", "\n", "                ", "if", "pos", ">", "first", "and", "st", "[", "pos", ":", "pos", "+", "4", "]", "==", "'CHAE'", ":", "\n", "                    ", "nxt", "=", "(", "'K'", ",", "'X'", ",", "2", ")", "\n", "", "elif", "pos", "==", "first", "and", "(", "st", "[", "pos", "+", "1", ":", "pos", "+", "6", "]", "in", "[", "'HARAC'", ",", "'HARIS'", "]", "or", "st", "[", "pos", "+", "1", ":", "pos", "+", "4", "]", "in", "[", "\"HOR\"", ",", "\"HYM\"", ",", "\"HIA\"", ",", "\"HEM\"", "]", ")", "and", "st", "[", "first", ":", "first", "+", "5", "]", "!=", "'CHORE'", ":", "\n", "                    ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "#germanic, greek, or otherwise 'ch' for 'kh' sound", "\n", "", "elif", "st", "[", "first", ":", "first", "+", "4", "]", "in", "[", "'VAN '", ",", "'VON '", "]", "or", "st", "[", "first", ":", "first", "+", "3", "]", "==", "'SCH'", "or", "st", "[", "pos", "-", "2", ":", "pos", "+", "4", "]", "in", "[", "\"ORCHES\"", ",", "\"ARCHIT\"", ",", "\"ORCHID\"", "]", "or", "st", "[", "pos", "+", "2", "]", "in", "[", "'T'", ",", "'S'", "]", "or", "(", "(", "st", "[", "pos", "-", "1", "]", "in", "[", "\"A\"", ",", "\"O\"", ",", "\"U\"", ",", "\"E\"", "]", "or", "pos", "==", "first", ")", "and", "st", "[", "pos", "+", "2", "]", "in", "[", "\"L\"", ",", "\"R\"", ",", "\"N\"", ",", "\"M\"", ",", "\"B\"", ",", "\"H\"", ",", "\"F\"", ",", "\"V\"", ",", "\"W\"", "]", ")", ":", "\n", "                    ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "else", ":", "\n", "                    ", "if", "pos", ">", "first", ":", "\n", "                        ", "if", "st", "[", "first", ":", "first", "+", "2", "]", "==", "'MC'", ":", "\n", "                            ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "else", ":", "\n", "                            ", "nxt", "=", "(", "'X'", ",", "'K'", ",", "2", ")", "\n", "", "", "else", ":", "\n", "                        ", "nxt", "=", "(", "'X'", ",", "2", ")", "\n", "# e.g, 'czerny'", "\n", "", "", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'CZ'", "and", "st", "[", "pos", "-", "2", ":", "pos", "+", "2", "]", "!=", "'WICZ'", ":", "\n", "                ", "nxt", "=", "(", "'S'", ",", "'X'", ",", "2", ")", "\n", "# e.g., 'focaccia'", "\n", "", "elif", "st", "[", "pos", "+", "1", ":", "pos", "+", "4", "]", "==", "'CIA'", ":", "\n", "                ", "nxt", "=", "(", "'X'", ",", "3", ")", "\n", "# double 'C', but not if e.g. 'McClellan'", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'CC'", "and", "not", "(", "pos", "==", "(", "first", "+", "1", ")", "and", "st", "[", "first", "]", "==", "'M'", ")", ":", "\n", "#'bellocchio' but not 'bacchus'", "\n", "                ", "if", "st", "[", "pos", "+", "2", "]", "in", "[", "\"I\"", ",", "\"E\"", ",", "\"H\"", "]", "and", "st", "[", "pos", "+", "2", ":", "pos", "+", "4", "]", "!=", "'HU'", ":", "\n", "# 'accident', 'accede' 'succeed'", "\n", "                    ", "if", "(", "pos", "==", "(", "first", "+", "1", ")", "and", "st", "[", "first", "]", "==", "'A'", ")", "or", "st", "[", "pos", "-", "1", ":", "pos", "+", "4", "]", "in", "[", "'UCCEE'", ",", "'UCCES'", "]", ":", "\n", "                        ", "nxt", "=", "(", "'KS'", ",", "3", ")", "\n", "# 'bacci', 'bertucci', other italian", "\n", "", "else", ":", "\n", "                        ", "nxt", "=", "(", "'X'", ",", "3", ")", "\n", "", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "in", "[", "\"CK\"", ",", "\"CG\"", ",", "\"CQ\"", "]", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "in", "[", "\"CI\"", ",", "\"CE\"", ",", "\"CY\"", "]", ":", "\n", "# italian vs. english", "\n", "                ", "if", "st", "[", "pos", ":", "pos", "+", "3", "]", "in", "[", "\"CIO\"", ",", "\"CIE\"", ",", "\"CIA\"", "]", ":", "\n", "                    ", "nxt", "=", "(", "'S'", ",", "'X'", ",", "2", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'S'", ",", "2", ")", "\n", "", "", "else", ":", "\n", "# name sent in 'mac caffrey', 'mac gregor", "\n", "                ", "if", "st", "[", "pos", "+", "1", ":", "pos", "+", "3", "]", "in", "[", "\" C\"", ",", "\" Q\"", ",", "\" G\"", "]", ":", "\n", "                    ", "nxt", "=", "(", "'K'", ",", "3", ")", "\n", "", "else", ":", "\n", "                    ", "if", "st", "[", "pos", "+", "1", "]", "in", "[", "\"C\"", ",", "\"K\"", ",", "\"Q\"", "]", "and", "st", "[", "pos", "+", "1", ":", "pos", "+", "3", "]", "not", "in", "[", "\"CE\"", ",", "\"CI\"", "]", ":", "\n", "                        ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "else", ":", "# default for 'C'", "\n", "                        ", "nxt", "=", "(", "'K'", ",", "1", ")", "\n", "", "", "", "", "elif", "ch", "==", "u'\\xc7'", ":", "# will never get here with st.encode('ascii', 'replace') above", "\n", "# \\xc7 is UTF-8 encoding of \u00c7", "\n", "            ", "nxt", "=", "(", "'S'", ",", "1", ")", "\n", "", "elif", "ch", "==", "'D'", ":", "\n", "            ", "if", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'DG'", ":", "\n", "                ", "if", "st", "[", "pos", "+", "2", "]", "in", "[", "'I'", ",", "'E'", ",", "'Y'", "]", ":", "# e.g. 'edge'", "\n", "                    ", "nxt", "=", "(", "'J'", ",", "3", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'TK'", ",", "2", ")", "\n", "", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "in", "[", "'DT'", ",", "'DD'", "]", ":", "\n", "                ", "nxt", "=", "(", "'T'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'T'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'F'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'F'", ":", "\n", "                ", "nxt", "=", "(", "'F'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'F'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'G'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'H'", ":", "\n", "                ", "if", "pos", ">", "first", "and", "st", "[", "pos", "-", "1", "]", "not", "in", "vowels", ":", "\n", "                    ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "elif", "pos", "<", "(", "first", "+", "3", ")", ":", "\n", "                    ", "if", "pos", "==", "first", ":", "# 'ghislane', ghiradelli", "\n", "                        ", "if", "st", "[", "pos", "+", "2", "]", "==", "'I'", ":", "\n", "                            ", "nxt", "=", "(", "'J'", ",", "2", ")", "\n", "", "else", ":", "\n", "                            ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "# Parker's rule (with some further refinements) - e.g., 'hugh'", "\n", "", "", "", "elif", "(", "pos", ">", "(", "first", "+", "1", ")", "and", "st", "[", "pos", "-", "2", "]", "in", "[", "'B'", ",", "'H'", ",", "'D'", "]", ")", "or", "(", "pos", ">", "(", "first", "+", "2", ")", "and", "st", "[", "pos", "-", "3", "]", "in", "[", "'B'", ",", "'H'", ",", "'D'", "]", ")", "or", "(", "pos", ">", "(", "first", "+", "3", ")", "and", "st", "[", "pos", "-", "3", "]", "in", "[", "'B'", ",", "'H'", "]", ")", ":", "\n", "                    ", "nxt", "=", "(", "None", ",", "2", ")", "\n", "", "else", ":", "\n", "# e.g., 'laugh', 'McLaughlin', 'cough', 'gough', 'rough', 'tough'", "\n", "                    ", "if", "pos", ">", "(", "first", "+", "2", ")", "and", "st", "[", "pos", "-", "1", "]", "==", "'U'", "and", "st", "[", "pos", "-", "3", "]", "in", "[", "\"C\"", ",", "\"G\"", ",", "\"L\"", ",", "\"R\"", ",", "\"T\"", "]", ":", "\n", "                        ", "nxt", "=", "(", "'F'", ",", "2", ")", "\n", "", "else", ":", "\n", "                        ", "if", "pos", ">", "first", "and", "st", "[", "pos", "-", "1", "]", "!=", "'I'", ":", "\n", "                            ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "", "", "", "elif", "st", "[", "pos", "+", "1", "]", "==", "'N'", ":", "\n", "                ", "if", "pos", "==", "(", "first", "+", "1", ")", "and", "st", "[", "first", "]", "in", "vowels", "and", "not", "is_slavo_germanic", ":", "\n", "                    ", "nxt", "=", "(", "'KN'", ",", "'N'", ",", "2", ")", "\n", "", "else", ":", "\n", "# not e.g. 'cagney'", "\n", "                    ", "if", "st", "[", "pos", "+", "2", ":", "pos", "+", "4", "]", "!=", "'EY'", "and", "st", "[", "pos", "+", "1", "]", "!=", "'Y'", "and", "not", "is_slavo_germanic", ":", "\n", "                        ", "nxt", "=", "(", "'N'", ",", "'KN'", ",", "2", ")", "\n", "", "else", ":", "\n", "                        ", "nxt", "=", "(", "'KN'", ",", "2", ")", "\n", "# 'tagliaro'", "\n", "", "", "", "elif", "st", "[", "pos", "+", "1", ":", "pos", "+", "3", "]", "==", "'LI'", "and", "not", "is_slavo_germanic", ":", "\n", "                ", "nxt", "=", "(", "'KL'", ",", "'L'", ",", "2", ")", "\n", "# -ges-,-gep-,-gel-, -gie- at beginning", "\n", "", "elif", "pos", "==", "first", "and", "(", "st", "[", "pos", "+", "1", "]", "==", "'Y'", "or", "st", "[", "pos", "+", "1", ":", "pos", "+", "3", "]", "in", "[", "\"ES\"", ",", "\"EP\"", ",", "\"EB\"", ",", "\"EL\"", ",", "\"EY\"", ",", "\"IB\"", ",", "\"IL\"", ",", "\"IN\"", ",", "\"IE\"", ",", "\"EI\"", ",", "\"ER\"", "]", ")", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "'J'", ",", "2", ")", "\n", "# -ger-,  -gy-", "\n", "", "elif", "(", "st", "[", "pos", "+", "1", ":", "pos", "+", "3", "]", "==", "'ER'", "or", "st", "[", "pos", "+", "1", "]", "==", "'Y'", ")", "and", "st", "[", "first", ":", "first", "+", "6", "]", "not", "in", "[", "\"DANGER\"", ",", "\"RANGER\"", ",", "\"MANGER\"", "]", "and", "st", "[", "pos", "-", "1", "]", "not", "in", "[", "'E'", ",", "'I'", "]", "and", "st", "[", "pos", "-", "1", ":", "pos", "+", "2", "]", "not", "in", "[", "'RGY'", ",", "'OGY'", "]", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "'J'", ",", "2", ")", "\n", "# italian e.g, 'biaggi'", "\n", "", "elif", "st", "[", "pos", "+", "1", "]", "in", "[", "'E'", ",", "'I'", ",", "'Y'", "]", "or", "st", "[", "pos", "-", "1", ":", "pos", "+", "3", "]", "in", "[", "\"AGGI\"", ",", "\"OGGI\"", "]", ":", "\n", "# obvious germanic", "\n", "                ", "if", "st", "[", "first", ":", "first", "+", "4", "]", "in", "[", "'VON '", ",", "'VAN '", "]", "or", "st", "[", "first", ":", "first", "+", "3", "]", "==", "'SCH'", "or", "st", "[", "pos", "+", "1", ":", "pos", "+", "3", "]", "==", "'ET'", ":", "\n", "                    ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "else", ":", "\n", "# always soft if french ending", "\n", "                    ", "if", "st", "[", "pos", "+", "1", ":", "pos", "+", "5", "]", "==", "'IER '", ":", "\n", "                        ", "nxt", "=", "(", "'J'", ",", "2", ")", "\n", "", "else", ":", "\n", "                        ", "nxt", "=", "(", "'J'", ",", "'K'", ",", "2", ")", "\n", "", "", "", "elif", "st", "[", "pos", "+", "1", "]", "==", "'G'", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'H'", ":", "\n", "# only keep if first & before vowel or btw. 2 vowels", "\n", "            ", "if", "(", "pos", "==", "first", "or", "st", "[", "pos", "-", "1", "]", "in", "vowels", ")", "and", "st", "[", "pos", "+", "1", "]", "in", "vowels", ":", "\n", "                ", "nxt", "=", "(", "'H'", ",", "2", ")", "\n", "", "else", ":", "# (also takes care of 'HH')", "\n", "                ", "nxt", "=", "(", "None", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'J'", ":", "\n", "# obvious spanish, 'jose', 'san jacinto'", "\n", "            ", "if", "st", "[", "pos", ":", "pos", "+", "4", "]", "==", "'JOSE'", "or", "st", "[", "first", ":", "first", "+", "4", "]", "==", "'SAN '", ":", "\n", "                ", "if", "(", "pos", "==", "first", "and", "st", "[", "pos", "+", "4", "]", "==", "' '", ")", "or", "st", "[", "first", ":", "first", "+", "4", "]", "==", "'SAN '", ":", "\n", "                    ", "nxt", "=", "(", "'H'", ",", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'J'", ",", "'H'", ")", "\n", "", "", "elif", "pos", "==", "first", "and", "st", "[", "pos", ":", "pos", "+", "4", "]", "!=", "'JOSE'", ":", "\n", "                ", "nxt", "=", "(", "'J'", ",", "'A'", ")", "# Yankelovich/Jankelowicz", "\n", "", "else", ":", "\n", "# spanish pron. of e.g. 'bajador'", "\n", "                ", "if", "st", "[", "pos", "-", "1", "]", "in", "vowels", "and", "not", "is_slavo_germanic", "and", "st", "[", "pos", "+", "1", "]", "in", "[", "'A'", ",", "'O'", "]", ":", "\n", "                    ", "nxt", "=", "(", "'J'", ",", "'H'", ")", "\n", "", "else", ":", "\n", "                    ", "if", "pos", "==", "last", ":", "\n", "                        ", "nxt", "=", "(", "'J'", ",", "' '", ")", "\n", "", "else", ":", "\n", "                        ", "if", "st", "[", "pos", "+", "1", "]", "not", "in", "[", "\"L\"", ",", "\"T\"", ",", "\"K\"", ",", "\"S\"", ",", "\"N\"", ",", "\"M\"", ",", "\"B\"", ",", "\"Z\"", "]", "and", "st", "[", "pos", "-", "1", "]", "not", "in", "[", "\"S\"", ",", "\"K\"", ",", "\"L\"", "]", ":", "\n", "                            ", "nxt", "=", "(", "'J'", ",", ")", "\n", "", "else", ":", "\n", "                            ", "nxt", "=", "(", "None", ",", ")", "\n", "", "", "", "", "if", "st", "[", "pos", "+", "1", "]", "==", "'J'", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "2", ",", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "1", ",", ")", "\n", "", "", "elif", "ch", "==", "'K'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'K'", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'L'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'L'", ":", "\n", "# spanish e.g. 'cabrillo', 'gallegos'", "\n", "                ", "if", "(", "pos", "==", "(", "last", "-", "2", ")", "and", "st", "[", "pos", "-", "1", ":", "pos", "+", "3", "]", "in", "[", "\"ILLO\"", ",", "\"ILLA\"", ",", "\"ALLE\"", "]", ")", "or", "(", "(", "st", "[", "last", "-", "1", ":", "last", "+", "1", "]", "in", "[", "\"AS\"", ",", "\"OS\"", "]", "or", "st", "[", "last", "]", "in", "[", "\"A\"", ",", "\"O\"", "]", ")", "and", "st", "[", "pos", "-", "1", ":", "pos", "+", "3", "]", "==", "'ALLE'", ")", ":", "\n", "                    ", "nxt", "=", "(", "'L'", ",", "' '", ",", "2", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'L'", ",", "2", ")", "\n", "", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'L'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'M'", ":", "\n", "            ", "if", "(", "st", "[", "pos", "+", "1", ":", "pos", "+", "4", "]", "==", "'UMB'", "and", "(", "pos", "+", "1", "==", "last", "or", "st", "[", "pos", "+", "2", ":", "pos", "+", "4", "]", "==", "'ER'", ")", ")", "or", "st", "[", "pos", "+", "1", "]", "==", "'M'", ":", "\n", "                ", "nxt", "=", "(", "'M'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'M'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'N'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'N'", ":", "\n", "                ", "nxt", "=", "(", "'N'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'N'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "u'\\xd1'", ":", "# UTF-8 encoding of \uff84", "\n", "            ", "nxt", "=", "(", "'N'", ",", "1", ")", "\n", "", "elif", "ch", "==", "'P'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'H'", ":", "\n", "                ", "nxt", "=", "(", "'F'", ",", "2", ")", "\n", "", "elif", "st", "[", "pos", "+", "1", "]", "in", "[", "'P'", ",", "'B'", "]", ":", "# also account for \"campbell\", \"raspberry\"", "\n", "                ", "nxt", "=", "(", "'P'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'P'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'Q'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'Q'", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'K'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'R'", ":", "\n", "# french e.g. 'rogier', but exclude 'hochmeier'", "\n", "            ", "if", "pos", "==", "last", "and", "not", "is_slavo_germanic", "and", "st", "[", "pos", "-", "2", ":", "pos", "]", "==", "'IE'", "and", "st", "[", "pos", "-", "4", ":", "pos", "-", "2", "]", "not", "in", "[", "'ME'", ",", "'MA'", "]", ":", "\n", "                ", "nxt", "=", "(", "''", ",", "'R'", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'R'", ",", ")", "\n", "", "if", "st", "[", "pos", "+", "1", "]", "==", "'R'", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "2", ",", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "1", ",", ")", "\n", "", "", "elif", "ch", "==", "'S'", ":", "\n", "# special cases 'island', 'isle', 'carlisle', 'carlysle'", "\n", "            ", "if", "st", "[", "pos", "-", "1", ":", "pos", "+", "2", "]", "in", "[", "'ISL'", ",", "'YSL'", "]", ":", "\n", "                ", "nxt", "=", "(", "None", ",", "1", ")", "\n", "# special case 'sugar-'", "\n", "", "elif", "pos", "==", "first", "and", "st", "[", "first", ":", "first", "+", "5", "]", "==", "'SUGAR'", ":", "\n", "                ", "nxt", "=", "(", "'X'", ",", "'S'", ",", "1", ")", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'SH'", ":", "\n", "# germanic", "\n", "                ", "if", "st", "[", "pos", "+", "1", ":", "pos", "+", "5", "]", "in", "[", "\"HEIM\"", ",", "\"HOEK\"", ",", "\"HOLM\"", ",", "\"HOLZ\"", "]", ":", "\n", "                    ", "nxt", "=", "(", "'S'", ",", "2", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'X'", ",", "2", ")", "\n", "# italian & armenian", "\n", "", "", "elif", "st", "[", "pos", ":", "pos", "+", "3", "]", "in", "[", "\"SIO\"", ",", "\"SIA\"", "]", "or", "st", "[", "pos", ":", "pos", "+", "4", "]", "==", "'SIAN'", ":", "\n", "                ", "if", "not", "is_slavo_germanic", ":", "\n", "                    ", "nxt", "=", "(", "'S'", ",", "'X'", ",", "3", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'S'", ",", "3", ")", "\n", "# german & anglicisations, e.g. 'smith' match 'schmidt', 'snider' match 'schneider'", "\n", "# also, -sz- in slavic language altho in hungarian it is pronounced 's'", "\n", "", "", "elif", "(", "pos", "==", "first", "and", "st", "[", "pos", "+", "1", "]", "in", "[", "\"M\"", ",", "\"N\"", ",", "\"L\"", ",", "\"W\"", "]", ")", "or", "st", "[", "pos", "+", "1", "]", "==", "'Z'", ":", "\n", "                ", "nxt", "=", "(", "'S'", ",", "'X'", ")", "\n", "if", "st", "[", "pos", "+", "1", "]", "==", "'Z'", ":", "\n", "                    ", "nxt", "=", "nxt", "+", "(", "2", ",", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "nxt", "+", "(", "1", ",", ")", "\n", "", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'SC'", ":", "\n", "# Schlesinger's rule", "\n", "                ", "if", "st", "[", "pos", "+", "2", "]", "==", "'H'", ":", "\n", "# dutch origin, e.g. 'school', 'schooner'", "\n", "                    ", "if", "st", "[", "pos", "+", "3", ":", "pos", "+", "5", "]", "in", "[", "\"OO\"", ",", "\"ER\"", ",", "\"EN\"", ",", "\"UY\"", ",", "\"ED\"", ",", "\"EM\"", "]", ":", "\n", "# 'schermerhorn', 'schenker'", "\n", "                        ", "if", "st", "[", "pos", "+", "3", ":", "pos", "+", "5", "]", "in", "[", "'ER'", ",", "'EN'", "]", ":", "\n", "                            ", "nxt", "=", "(", "'X'", ",", "'SK'", ",", "3", ")", "\n", "", "else", ":", "\n", "                            ", "nxt", "=", "(", "'SK'", ",", "3", ")", "\n", "", "", "else", ":", "\n", "                        ", "if", "pos", "==", "first", "and", "st", "[", "first", "+", "3", "]", "not", "in", "vowels", "and", "st", "[", "first", "+", "3", "]", "!=", "'W'", ":", "\n", "                            ", "nxt", "=", "(", "'X'", ",", "'S'", ",", "3", ")", "\n", "", "else", ":", "\n", "                            ", "nxt", "=", "(", "'X'", ",", "3", ")", "\n", "", "", "", "elif", "st", "[", "pos", "+", "2", "]", "in", "[", "'I'", ",", "'E'", ",", "'Y'", "]", ":", "\n", "                    ", "nxt", "=", "(", "'S'", ",", "3", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'SK'", ",", "3", ")", "\n", "# french e.g. 'resnais', 'artois'", "\n", "", "", "elif", "pos", "==", "last", "and", "st", "[", "pos", "-", "2", ":", "pos", "]", "in", "[", "'AI'", ",", "'OI'", "]", ":", "\n", "                ", "nxt", "=", "(", "''", ",", "'S'", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'S'", ",", ")", "\n", "if", "st", "[", "pos", "+", "1", "]", "in", "[", "'S'", ",", "'Z'", "]", ":", "\n", "                    ", "nxt", "=", "nxt", "+", "(", "2", ",", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "nxt", "+", "(", "1", ",", ")", "\n", "", "", "", "elif", "ch", "==", "'T'", ":", "\n", "            ", "if", "st", "[", "pos", ":", "pos", "+", "4", "]", "==", "'TION'", ":", "\n", "                ", "nxt", "=", "(", "'X'", ",", "3", ")", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "3", "]", "in", "[", "'TIA'", ",", "'TCH'", "]", ":", "\n", "                ", "nxt", "=", "(", "'X'", ",", "3", ")", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'TH'", "or", "st", "[", "pos", ":", "pos", "+", "3", "]", "==", "'TTH'", ":", "\n", "# special case 'thomas', 'thames' or germanic", "\n", "                ", "if", "st", "[", "pos", "+", "2", ":", "pos", "+", "4", "]", "in", "[", "'OM'", ",", "'AM'", "]", "or", "st", "[", "first", ":", "first", "+", "4", "]", "in", "[", "'VON '", ",", "'VAN '", "]", "or", "st", "[", "first", ":", "first", "+", "3", "]", "==", "'SCH'", ":", "\n", "                    ", "nxt", "=", "(", "'T'", ",", "2", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'0'", ",", "'T'", ",", "2", ")", "\n", "", "", "elif", "st", "[", "pos", "+", "1", "]", "in", "[", "'T'", ",", "'D'", "]", ":", "\n", "                ", "nxt", "=", "(", "'T'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'T'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'V'", ":", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'V'", ":", "\n", "                ", "nxt", "=", "(", "'F'", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'F'", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'W'", ":", "\n", "# can also be in middle of word", "\n", "            ", "if", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'WR'", ":", "\n", "                ", "nxt", "=", "(", "'R'", ",", "2", ")", "\n", "", "elif", "pos", "==", "first", "and", "(", "st", "[", "pos", "+", "1", "]", "in", "vowels", "or", "st", "[", "pos", ":", "pos", "+", "2", "]", "==", "'WH'", ")", ":", "\n", "# Wasserman should match Vasserman", "\n", "                ", "if", "st", "[", "pos", "+", "1", "]", "in", "vowels", ":", "\n", "                    ", "nxt", "=", "(", "'A'", ",", "'F'", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "nxt", "=", "(", "'A'", ",", "1", ")", "\n", "# Arnow should match Arnoff", "\n", "", "", "elif", "(", "pos", "==", "last", "and", "st", "[", "pos", "-", "1", "]", "in", "vowels", ")", "or", "st", "[", "pos", "-", "1", ":", "pos", "+", "4", "]", "in", "[", "\"EWSKI\"", ",", "\"EWSKY\"", ",", "\"OWSKI\"", ",", "\"OWSKY\"", "]", "or", "st", "[", "first", ":", "first", "+", "3", "]", "==", "'SCH'", ":", "\n", "                ", "nxt", "=", "(", "''", ",", "'F'", ",", "1", ")", "\n", "# polish e.g. 'filipowicz'", "\n", "", "elif", "st", "[", "pos", ":", "pos", "+", "4", "]", "in", "[", "\"WICZ\"", ",", "\"WITZ\"", "]", ":", "\n", "                ", "nxt", "=", "(", "'TS'", ",", "'FX'", ",", "4", ")", "\n", "", "else", ":", "# default is to skip it", "\n", "                ", "nxt", "=", "(", "None", ",", "1", ")", "\n", "", "", "elif", "ch", "==", "'X'", ":", "\n", "# french e.g. breaux", "\n", "            ", "nxt", "=", "(", "None", ",", ")", "\n", "if", "not", "(", "pos", "==", "last", "and", "(", "st", "[", "pos", "-", "3", ":", "pos", "]", "in", "[", "\"IAU\"", ",", "\"EAU\"", "]", "or", "st", "[", "pos", "-", "2", ":", "pos", "]", "in", "[", "'AU'", ",", "'OU'", "]", ")", ")", ":", "\n", "                ", "nxt", "=", "(", "'KS'", ",", ")", "\n", "", "if", "st", "[", "pos", "+", "1", "]", "in", "[", "'C'", ",", "'X'", "]", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "2", ",", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "1", ",", ")", "\n", "", "", "elif", "ch", "==", "'Z'", ":", "\n", "# chinese pinyin e.g. 'zhao'", "\n", "            ", "if", "st", "[", "pos", "+", "1", "]", "==", "'H'", ":", "\n", "                ", "nxt", "=", "(", "'J'", ",", ")", "\n", "", "elif", "st", "[", "pos", "+", "1", ":", "pos", "+", "3", "]", "in", "[", "\"ZO\"", ",", "\"ZI\"", ",", "\"ZA\"", "]", "or", "(", "is_slavo_germanic", "and", "pos", ">", "first", "and", "st", "[", "pos", "-", "1", "]", "!=", "'T'", ")", ":", "\n", "                ", "nxt", "=", "(", "'S'", ",", "'TS'", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "(", "'S'", ",", ")", "\n", "", "if", "st", "[", "pos", "+", "1", "]", "==", "'Z'", "or", "st", "[", "pos", "+", "1", "]", "==", "'H'", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "2", ",", ")", "\n", "", "else", ":", "\n", "                ", "nxt", "=", "nxt", "+", "(", "1", ",", ")", "\n", "# ----------------------------------", "\n", "# --- end checking letters------", "\n", "# ----------------------------------", "\n", "#print str(nxt)", "\n", "", "", "if", "len", "(", "nxt", ")", "==", "2", ":", "\n", "            ", "if", "nxt", "[", "0", "]", ":", "\n", "                ", "pri", "+=", "nxt", "[", "0", "]", "\n", "sec", "+=", "nxt", "[", "0", "]", "\n", "", "pos", "+=", "nxt", "[", "1", "]", "\n", "", "elif", "len", "(", "nxt", ")", "==", "3", ":", "\n", "            ", "if", "nxt", "[", "0", "]", ":", "\n", "                ", "pri", "+=", "nxt", "[", "0", "]", "\n", "", "if", "nxt", "[", "1", "]", ":", "\n", "                ", "sec", "+=", "nxt", "[", "1", "]", "\n", "", "pos", "+=", "nxt", "[", "2", "]", "\n", "", "", "if", "pri", "==", "sec", ":", "\n", "        ", "return", "(", "pri", ",", "''", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "pri", ",", "sec", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.clips_clinspell.code.preproc.preproc": [[7, 20], ["open", "open", "enumerate", "tokenise.tokenize", "g.write", "preproc_lines.append", "preproc_lines.append", "sentence.lower().split", "valid_checker.match", "sentence.lower"], "function", ["home.repos.pwc.inspect_result.clips_clinspell.code.tokenise.tokenize"], ["def", "preproc", "(", "infile", ",", "outfile", ")", ":", "\n", "\n", "    ", "with", "open", "(", "infile", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "with", "open", "(", "outfile", ",", "'w'", ")", "as", "g", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "line", ":", "\n", "                    ", "sentences", "=", "tokenize", "(", "line", ")", "\n", "preproc_lines", "=", "[", "]", "\n", "for", "sentence", "in", "sentences", ":", "\n", "                        ", "preproc_line", "=", "\" \"", ".", "join", "(", "[", "t", "for", "t", "in", "sentence", ".", "lower", "(", ")", ".", "split", "(", ")", "if", "valid_checker", ".", "match", "(", "t", ")", "]", ")", "\n", "preproc_lines", ".", "append", "(", "preproc_line", ")", "\n", "preproc_lines", ".", "append", "(", "\"\\t\"", ")", "\n", "", "g", ".", "write", "(", "\" \"", ".", "join", "(", "preproc_lines", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.frequencies.extract_frequencylist": [[5, 13], ["collections.Counter", "open", "open", "json.dump", "collections.Counter.update", "line.split"], "function", ["None"], ["def", "extract_frequencylist", "(", "infile", ",", "language", ")", ":", "\n", "    ", "c", "=", "Counter", "(", ")", "\n", "with", "open", "(", "infile", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "c", ".", "update", "(", "line", ".", "split", "(", ")", ")", "\n", "\n", "", "", "with", "open", "(", "'../data/frequencies_'", "+", "language", "+", "'.json'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "c", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.tokenise.tokenize": [[124, 206], ["tuple", "replace.items", "isinstance", "re.sub", "re.sub", "re.sub", "TOKEN.findall", "isinstance", "sentences[].extend", "re.sub", "string.replace.replace", "string.replace.replace", "string.replace.replace", "string.replace.replace", "len", "RE_SARCASM.sub", "RE_EMOTICONS.sub", "RE_EMOJI.sub", "s.replace().strip", "len", "tokens.extend", "sentences[].extend", "sentences.append", "RE_MENTION.match", "tokens.append", "reversed", "len", "s.replace", "t[].rstrip.startswith", "t[].rstrip.startswith", "t[].rstrip.endswith", "t[].rstrip.endswith", "t[].rstrip.endswith", "len", "m.group().replace", "m.group", "tokens.append", "t[].rstrip.endswith", "tail.append", "tail.append", "t[].rstrip", "m.group", "m.group", "t[].rstrip.endswith", "tail.append", "sentences[].count", "m.group", "m.group", "RE_ABBR1.match", "RE_ABBR2.match", "RE_ABBR3.match"], "function", ["None"], ["def", "tokenize", "(", "string", ",", "punctuation", "=", "PUNCTUATION", ",", "abbreviations", "=", "ABBREVIATIONS", ",", "\n", "replace", "=", "replacements", ",", "linebreak", "=", "r\"\\n{2,}\"", ")", ":", "\n", "    ", "\"\"\" Returns a list of sentences. Each sentence is a space-separated string of tokens (words).\n        Handles common cases of abbreviations (e.g., etc., ...).\n        Punctuation marks are split from other words. Periods (or ?!) mark the end of a sentence.\n        Headings without an ending period are inferred by line breaks.\n    \"\"\"", "\n", "# Handle punctuation.", "\n", "punctuation", "=", "tuple", "(", "punctuation", ")", "\n", "# Handle replacements (contractions).", "\n", "for", "a", ",", "b", "in", "replace", ".", "items", "(", ")", ":", "\n", "        ", "string", "=", "re", ".", "sub", "(", "a", ",", "b", ",", "string", ")", "\n", "# Handle Unicode quotes.", "\n", "", "if", "isinstance", "(", "string", ",", "str", ")", ":", "\n", "        ", "string", "=", "string", ".", "replace", "(", "u\"\u201c\"", ",", "u\" \u201c \"", ")", "\n", "string", "=", "string", ".", "replace", "(", "u\"\u201d\"", ",", "u\" \u201d \"", ")", "\n", "string", "=", "string", ".", "replace", "(", "u\"\u2018\"", ",", "u\" \u2018 \"", ")", "\n", "string", "=", "string", ".", "replace", "(", "u\"\u2019\"", ",", "u\" \u2019 \"", ")", "\n", "# Collapse whitespace.", "\n", "", "string", "=", "re", ".", "sub", "(", "\"\\r\\n\"", ",", "\"\\n\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "linebreak", ",", "\" %s \"", "%", "EOS", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s+\"", ",", "\" \"", ",", "string", ")", "\n", "tokens", "=", "[", "]", "\n", "# Handle punctuation marks.", "\n", "for", "t", "in", "TOKEN", ".", "findall", "(", "string", "+", "\" \"", ")", ":", "\n", "        ", "if", "len", "(", "t", ")", ">", "0", ":", "\n", "            ", "tail", "=", "[", "]", "\n", "if", "not", "RE_MENTION", ".", "match", "(", "t", ")", ":", "\n", "                ", "while", "t", ".", "startswith", "(", "punctuation", ")", "and", "not", "t", "in", "replace", ":", "\n", "# Split leading punctuation.", "\n", "                    ", "if", "t", ".", "startswith", "(", "punctuation", ")", ":", "\n", "                        ", "tokens", ".", "append", "(", "t", "[", "0", "]", ")", ";", "t", "=", "t", "[", "1", ":", "]", "\n", "", "", "", "if", "not", "False", ":", "\n", "                ", "while", "t", ".", "endswith", "(", "punctuation", ")", "and", "not", "t", "in", "replace", ":", "\n", "# Split trailing punctuation.", "\n", "                    ", "if", "t", ".", "endswith", "(", "punctuation", ")", "and", "not", "t", ".", "endswith", "(", "\".\"", ")", ":", "\n", "                        ", "tail", ".", "append", "(", "t", "[", "-", "1", "]", ")", ";", "t", "=", "t", "[", ":", "-", "1", "]", "\n", "# Split ellipsis (...) before splitting period.", "\n", "", "if", "t", ".", "endswith", "(", "\"...\"", ")", ":", "\n", "                        ", "tail", ".", "append", "(", "\"...\"", ")", ";", "t", "=", "t", "[", ":", "-", "3", "]", ".", "rstrip", "(", "\".\"", ")", "\n", "# Split period (if not an abbreviation).", "\n", "", "if", "t", ".", "endswith", "(", "\".\"", ")", ":", "\n", "                        ", "if", "t", "in", "abbreviations", "or", "RE_ABBR1", ".", "match", "(", "t", ")", "is", "not", "None", "or", "RE_ABBR2", ".", "match", "(", "t", ")", "is", "not", "None", "or", "RE_ABBR3", ".", "match", "(", "t", ")", "is", "not", "None", ":", "\n", "                            ", "break", "\n", "", "else", ":", "\n", "                            ", "tail", ".", "append", "(", "t", "[", "-", "1", "]", ")", ";", "t", "=", "t", "[", ":", "-", "1", "]", "\n", "", "", "", "", "if", "t", "!=", "\"\"", ":", "\n", "                ", "tokens", ".", "append", "(", "t", ")", "\n", "", "tokens", ".", "extend", "(", "reversed", "(", "tail", ")", ")", "\n", "# Handle citations (periods + quotes).", "\n", "", "", "if", "isinstance", "(", "string", ",", "str", ")", ":", "\n", "        ", "quotes", "=", "(", "\"'\"", ",", "\"\\\"\"", ",", "u\"\u201d\"", ",", "u\"\u2019\"", ")", "\n", "", "else", ":", "\n", "        ", "quotes", "=", "(", "\"'\"", ",", "\"\\\"\"", ")", "\n", "# Handle sentence breaks (periods, quotes, parenthesis).", "\n", "", "sentences", ",", "i", ",", "j", "=", "[", "[", "]", "]", ",", "0", ",", "0", "\n", "while", "j", "<", "len", "(", "tokens", ")", ":", "\n", "        ", "if", "tokens", "[", "j", "]", "in", "(", "\"...\"", ",", "\".\"", ",", "\"!\"", ",", "\"?\"", ",", "EOS", ")", ":", "\n", "            ", "while", "j", "<", "len", "(", "tokens", ")", "and", "(", "tokens", "[", "j", "]", "in", "(", "\"...\"", ",", "\".\"", ",", "\"!\"", ",", "\"?\"", ",", "EOS", ")", "or", "tokens", "[", "j", "]", "in", "quotes", ")", ":", "\n", "                ", "if", "tokens", "[", "j", "]", "in", "quotes", "and", "sentences", "[", "-", "1", "]", ".", "count", "(", "tokens", "[", "j", "]", ")", "%", "2", "==", "0", ":", "\n", "                    ", "break", "# Balanced quotes.", "\n", "", "j", "+=", "1", "\n", "", "sentences", "[", "-", "1", "]", ".", "extend", "(", "t", "for", "t", "in", "tokens", "[", "i", ":", "j", "]", "if", "t", "!=", "EOS", ")", "\n", "sentences", ".", "append", "(", "[", "]", ")", "\n", "i", "=", "j", "\n", "", "j", "+=", "1", "\n", "# Handle emoticons.", "\n", "", "sentences", "[", "-", "1", "]", ".", "extend", "(", "tokens", "[", "i", ":", "j", "]", ")", "\n", "sentences", "=", "(", "\" \"", ".", "join", "(", "s", ")", "for", "s", "in", "sentences", "if", "len", "(", "s", ")", ">", "0", ")", "\n", "sentences", "=", "(", "RE_SARCASM", ".", "sub", "(", "\"(!)\"", ",", "s", ")", "for", "s", "in", "sentences", ")", "\n", "sentences", "=", "[", "RE_EMOTICONS", ".", "sub", "(", "\n", "lambda", "m", ":", "m", ".", "group", "(", "1", ")", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "+", "m", ".", "group", "(", "2", ")", ",", "s", ")", "for", "s", "in", "sentences", "]", "\n", "sentences", "=", "[", "RE_EMOJI", ".", "sub", "(", "\n", "lambda", "m", ":", "(", "m", ".", "group", "(", "1", ")", "or", "\" \"", ")", "+", "m", ".", "group", "(", "2", ")", "+", "(", "m", ".", "group", "(", "3", ")", "or", "\" \"", ")", ",", "s", ")", "for", "s", "in", "sentences", "]", "\n", "sentences", "=", "[", "s", ".", "replace", "(", "\"  \"", ",", "\" \"", ")", ".", "strip", "(", ")", "for", "s", "in", "sentences", "]", "\n", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.__init__": [[20, 53], ["fasttext.load_model", "frozenset", "json.load", "json.load", "open", "open", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parameters", ",", "language", ")", ":", "\n", "\n", "        ", "assert", "language", "in", "[", "\"en\"", ",", "\"nl\"", "]", "\n", "self", ".", "language", "=", "language", "\n", "\n", "# load frequency list", "\n", "pathtofrequencies", "=", "'frequencies_'", "+", "language", "+", "'.json'", "\n", "# load trained fasttext model", "\n", "pathtomodel", "=", "'embeddings_'", "+", "language", "+", "'.bin'", "\n", "\n", "# PHASE 1", "\n", "self", ".", "comp_function", "=", "parameters", "[", "'comp_function'", "]", "# item from [\"sum\", \"mult\", \"max\"]", "\n", "self", ".", "include_misspelling", "=", "parameters", "[", "'include_misspelling'", "]", "# boolean", "\n", "self", ".", "include_oov_candidates", "=", "parameters", "[", "'include_oov_candidates'", "]", "# boolean", "\n", "self", ".", "model", "=", "fasttext", ".", "load_model", "(", "pathtomodel", ")", "# path to fasttext model", "\n", "\n", "# PHASE 2", "\n", "self", ".", "window_size", "=", "parameters", "[", "'window_size'", "]", "# number in range(0,11)", "\n", "self", ".", "reciprocal", "=", "parameters", "[", "'reciprocal'", "]", "# boolean", "\n", "self", ".", "remove_stopwords", "=", "parameters", "[", "'remove_stopwords'", "]", "# boolean", "\n", "self", ".", "stopwords", "=", "frozenset", "(", "json", ".", "load", "(", "open", "(", "'stopwords_'", "+", "str", "(", "self", ".", "language", ")", "+", "'.json'", ",", "'r'", ")", ")", ")", "\n", "\n", "# PHASE 3", "\n", "self", ".", "edit_distance", "=", "parameters", "[", "'edit_distance'", "]", "# item from [1, 2, 3, 4]", "\n", "\n", "# PHASE 4", "\n", "self", ".", "oov_penalty", "=", "parameters", "[", "'oov_penalty'", "]", "# oov penalty tuned with self.tune_oov()", "\n", "\n", "# OUTPUT", "\n", "self", ".", "ranking_method", "=", "parameters", "[", "'ranking_method'", "]", "# item from [\"context\", \"noisy_channel\", \"frequency\",", "\n", "# \"ensemble\"]", "\n", "self", ".", "frequency_dict", "=", "json", ".", "load", "(", "open", "(", "pathtofrequencies", ",", "'r'", ")", ")", "# path to frequency list", "\n", "self", ".", "k", "=", "parameters", "[", "'k-best'", "]", "# positive natural number", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.comp_sum": [[54, 71], ["numpy.sum", "numpy.reciprocal", "enumerate", "numpy.sum", "numpy.arange", "weighted_vectors.append", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "comp_sum", "(", "vectors", ",", "reciprocal", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param vectors: vectors to be composed\n        :param reciprocal: if True, apply reciprocal weighting\n        :return: composed vector representation\n        \"\"\"", "\n", "if", "not", "reciprocal", ":", "\n", "            ", "composed_vector", "=", "np", ".", "sum", "(", "vectors", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "weight_vector", "=", "np", ".", "reciprocal", "(", "np", ".", "arange", "(", "1.", ",", "len", "(", "vectors", ")", "+", "1", ")", ")", "\n", "weighted_vectors", "=", "[", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "weight_vector", ")", ":", "\n", "                ", "weighted_vectors", ".", "append", "(", "vectors", "[", "i", "]", "*", "weight", ")", "\n", "", "composed_vector", "=", "np", ".", "sum", "(", "weighted_vectors", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "composed_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.comp_mult": [[72, 89], ["functools.reduce", "numpy.reciprocal", "enumerate", "functools.reduce", "numpy.arange", "weighted_vectors.append", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "comp_mult", "(", "vectors", ",", "reciprocal", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param vectors: vectors to be composed\n        :param reciprocal: if True, apply reciprocal weighting\n        :return: composed vector representation\n        \"\"\"", "\n", "if", "not", "reciprocal", ":", "\n", "            ", "composed_vector", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "y", ",", "vectors", ")", "\n", "", "else", ":", "\n", "            ", "weight_vector", "=", "np", ".", "reciprocal", "(", "np", ".", "arange", "(", "1.", ",", "len", "(", "vectors", ")", "+", "1", ")", ")", "\n", "weighted_vectors", "=", "[", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "weight_vector", ")", ":", "\n", "                ", "weighted_vectors", ".", "append", "(", "vectors", "[", "i", "]", "*", "weight", ")", "\n", "", "composed_vector", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "y", ",", "weighted_vectors", ")", "\n", "\n", "", "return", "composed_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.comp_max": [[90, 107], ["numpy.amax", "numpy.reciprocal", "enumerate", "numpy.amax", "numpy.arange", "weighted_vectors.append", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "comp_max", "(", "vectors", ",", "reciprocal", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param vectors: vectors to be composed\n        :param reciprocal: if True, apply reciprocal weighting\n        :return: composed vector representation\n        \"\"\"", "\n", "if", "not", "reciprocal", ":", "\n", "            ", "composed_vector", "=", "np", ".", "amax", "(", "vectors", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "weight_vector", "=", "np", ".", "reciprocal", "(", "np", ".", "arange", "(", "1.", ",", "len", "(", "vectors", ")", "+", "1", ")", ")", "\n", "weighted_vectors", "=", "[", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "weight_vector", ")", ":", "\n", "                ", "weighted_vectors", ".", "append", "(", "vectors", "[", "i", "]", "*", "weight", ")", "\n", "", "composed_vector", "=", "np", ".", "amax", "(", "weighted_vectors", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "composed_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.normalize": [[108, 119], ["vector.any", "numpy.linalg.norm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "normalize", "(", "vector", ")", ":", "\n", "        ", "\"\"\"\n        Normalizes a vector.\n        :param vector: a numpy array or list to normalize.\n        :return a normalized vector.\n        \"\"\"", "\n", "if", "not", "vector", ".", "any", "(", ")", ":", "\n", "            ", "return", "vector", "\n", "\n", "", "return", "vector", "/", "np", ".", "linalg", ".", "norm", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.vectorize": [[120, 130], ["numpy.array"], "methods", ["None"], ["", "def", "vectorize", "(", "self", ",", "sequence", ",", "remove_oov", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param sequence: sequence to be vectorized\n        :param remove_oov: whether to vectorize oov tokens\n        :return: vectorized sequence\n        \"\"\"", "\n", "if", "remove_oov", ":", "\n", "            ", "sequence", "=", "[", "x", "for", "x", "in", "sequence", "if", "x", "in", "self", ".", "model", ".", "words", "]", "\n", "\n", "", "return", "[", "np", ".", "array", "(", "self", ".", "model", "[", "x", "]", ")", "for", "x", "in", "sequence", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.spell_score": [[131, 157], ["pyxdameraulevenshtein.damerau_levenshtein_distance", "pyxdameraulevenshtein.damerau_levenshtein_distance", "ValueError", "doublemetaphone.dm", "doublemetaphone.dm", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.clips_clinspell.code.doublemetaphone.dm", "home.repos.pwc.inspect_result.clips_clinspell.code.doublemetaphone.dm"], ["", "@", "staticmethod", "\n", "def", "spell_score", "(", "misspelling", ",", "candidates", ",", "method", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Calculates the edit distance between a misspelling and each candidate according to the chosen method\n        :param misspelling: misspelling\n        :param candidates: list of candidates\n        :param method: chosen method from [1, 2, 3, 4]\n        :return: list of edit distances between misspelling and each candidate\n        \"\"\"", "\n", "lexical_scores", "=", "[", "damerau_levenshtein_distance", "(", "misspelling", ",", "candidate", ")", "\n", "for", "candidate", "in", "candidates", "]", "\n", "\n", "if", "method", "==", "1", ":", "\n", "            ", "return", "lexical_scores", "\n", "", "else", ":", "\n", "            ", "phonetic_scores", "=", "[", "damerau_levenshtein_distance", "(", "dm", "(", "misspelling", ")", "[", "0", "]", ",", "dm", "(", "candidate", ")", "[", "0", "]", ")", "\n", "for", "candidate", "in", "candidates", "]", "\n", "\n", "", "if", "method", "==", "2", ":", "\n", "            ", "return", "[", "phonetic_score", "if", "phonetic_score", "!=", "0", "else", "1", "for", "phonetic_score", "in", "phonetic_scores", "]", "\n", "", "elif", "method", "==", "3", ":", "\n", "            ", "return", "[", "0.5", "*", "(", "a", "+", "b", ")", "for", "a", ",", "b", "in", "zip", "(", "lexical_scores", ",", "phonetic_scores", ")", "]", "\n", "", "elif", "method", "==", "4", ":", "\n", "            ", "return", "[", "(", "2", "*", "a", "+", "b", ")", "**", "2", "for", "a", ",", "b", "in", "zip", "(", "lexical_scores", ",", "phonetic_scores", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Method must be element from [1, 2, 3, 4]'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.ranking_experiment": [[158, 256], ["zip", "ranking_experiments.Development.normalize", "ranking_experiments.Development.vectorize", "ranking_experiments.Development.vectorize", "ranking_experiments.Development.normalize", "enumerate", "numpy.array", "comp_function", "numpy.zeros", "comp_function", "numpy.zeros", "comp_function", "comp_function", "numpy.dot", "ranking_experiments.Development.spell_score", "enumerate", "context[].split", "len", "len", "candidate_vectors.append", "enumerate", "correction_list.append", "correction_list.append", "ValueError", "context[].split", "ranking_experiments.Development.normalize", "candidate_vectors.append", "oov_idxs.append", "remove_idxs.append", "zip", "correction_list.append", "numpy.array", "ranking_experiments.Development.normalize", "numpy.array", "numpy.argmax", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.normalize", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.vectorize", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.vectorize", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.normalize", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.spell_score", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.normalize", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.normalize"], ["", "", "def", "ranking_experiment", "(", "self", ",", "detection_list", ",", "detection_contexts", ",", "candidates_list", ")", ":", "\n", "        ", "\"\"\"\n        Experimental implementation of our context-sensitive ranking model.\n        :param detection_list: list of misspellings\n        :param detection_contexts: list of misspelling context tuples ('left context', 'right context')\n        :param candidates_list: list of candidate list per misspelling\n        :param r: loaded vector representations\n        :return: list with corrections or k-best corrections\n        \"\"\"", "\n", "correction_list", "=", "[", "]", "\n", "\n", "for", "misspelling", ",", "context", ",", "candidates", "in", "zip", "(", "detection_list", ",", "detection_contexts", ",", "candidates_list", ")", ":", "\n", "\n", "# PHASE 1 AND 2: composition method and context weighting", "\n", "\n", "            ", "processed_context", "=", "[", "''", ",", "''", "]", "\n", "processed_context", "[", "0", "]", "=", "\" \"", ".", "join", "(", "context", "[", "0", "]", ".", "split", "(", ")", "[", ":", ":", "-", "1", "]", "[", ":", "self", ".", "window_size", "]", ")", "\n", "processed_context", "[", "1", "]", "=", "\" \"", ".", "join", "(", "context", "[", "1", "]", ".", "split", "(", ")", "[", ":", "self", ".", "window_size", "]", ")", "\n", "\n", "comp", "=", "self", ".", "comp_function", "\n", "\n", "if", "comp", "==", "\"sum\"", ":", "\n", "                ", "comp_function", "=", "self", ".", "comp_sum", "\n", "", "elif", "comp", "==", "\"mult\"", ":", "\n", "                ", "comp_function", "=", "self", ".", "comp_mult", "\n", "", "else", ":", "\n", "                ", "comp_function", "=", "self", ".", "comp_max", "\n", "\n", "", "if", "self", ".", "remove_stopwords", ":", "\n", "                ", "processed_context", "[", "0", "]", "=", "[", "t", "for", "t", "in", "processed_context", "[", "0", "]", "if", "t", "not", "in", "self", ".", "stopwords", "]", "\n", "processed_context", "[", "1", "]", "=", "[", "t", "for", "t", "in", "processed_context", "[", "1", "]", "if", "t", "not", "in", "self", ".", "stopwords", "]", "\n", "\n", "", "center", "=", "self", ".", "normalize", "(", "np", ".", "array", "(", "self", ".", "model", "[", "misspelling", "]", ")", ")", "# create or call vector representation for misspelling", "\n", "left_window", "=", "self", ".", "vectorize", "(", "processed_context", "[", "0", "]", ",", "remove_oov", "=", "True", ")", "# take only in-voc tokens", "\n", "right_window", "=", "self", ".", "vectorize", "(", "processed_context", "[", "1", "]", ",", "remove_oov", "=", "True", ")", "# take only in-voc tokens", "\n", "\n", "if", "left_window", ":", "\n", "                ", "vectorized_left_window", "=", "comp_function", "(", "left_window", ",", "reciprocal", "=", "self", ".", "reciprocal", ")", "\n", "", "else", ":", "\n", "                ", "vectorized_left_window", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "model", ".", "dim", ")", ")", "\n", "\n", "", "if", "right_window", ":", "\n", "                ", "vectorized_right_window", "=", "comp_function", "(", "right_window", ",", "reciprocal", "=", "self", ".", "reciprocal", ")", "\n", "", "else", ":", "\n", "                ", "vectorized_right_window", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "model", ".", "dim", ")", ")", "\n", "\n", "", "if", "self", ".", "include_misspelling", ":", "\n", "                ", "vectorized_context", "=", "comp_function", "(", "(", "vectorized_left_window", ",", "center", ",", "vectorized_right_window", ")", ")", "\n", "", "else", ":", "\n", "                ", "vectorized_context", "=", "comp_function", "(", "(", "vectorized_left_window", ",", "vectorized_right_window", ")", ")", "\n", "", "vectorized_context", "=", "self", ".", "normalize", "(", "vectorized_context", ")", "\n", "\n", "candidate_vectors", "=", "[", "]", "\n", "remove_idxs", "=", "[", "]", "\n", "oov_idxs", "=", "[", "]", "\n", "\n", "# make vector representations of candidates", "\n", "for", "i", ",", "candidate", "in", "enumerate", "(", "candidates", ")", ":", "\n", "                ", "if", "candidate", "in", "self", ".", "model", ".", "words", ":", "\n", "                    ", "candidate_vectors", ".", "append", "(", "self", ".", "normalize", "(", "np", ".", "array", "(", "self", ".", "model", "[", "candidate", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "include_oov_candidates", ":", "\n", "                        ", "candidate_vectors", ".", "append", "(", "self", ".", "normalize", "(", "np", ".", "array", "(", "self", ".", "model", "[", "candidate", "]", ")", ")", ")", "\n", "oov_idxs", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                        ", "remove_idxs", ".", "append", "(", "i", ")", "\n", "\n", "# update candidate list", "\n", "", "", "", "candidates", "=", "[", "candidate", "for", "i", ",", "candidate", "in", "enumerate", "(", "candidates", ")", "if", "i", "not", "in", "remove_idxs", "]", "\n", "\n", "# calculate cosine similarities", "\n", "distances", "=", "[", "np", ".", "dot", "(", "vectorized_context", ",", "candidate", ")", "for", "candidate", "in", "candidate_vectors", "]", "\n", "\n", "# PHASE 3: edit distance penalty", "\n", "\n", "method", "=", "self", ".", "edit_distance", "\n", "if", "method", ":", "\n", "                ", "spell_scores", "=", "self", ".", "spell_score", "(", "misspelling", ",", "candidates", ",", "method", "=", "method", ")", "\n", "distances", "=", "[", "a", "/", "b", "for", "a", ",", "b", "in", "zip", "(", "distances", ",", "spell_scores", ")", "]", "\n", "\n", "# PHASE 4: oov criteria", "\n", "", "if", "self", ".", "include_oov_candidates", ":", "\n", "                ", "for", "i", ",", "d", "in", "enumerate", "(", "distances", ")", ":", "\n", "                    ", "if", "i", "in", "oov_idxs", ":", "\n", "                        ", "distances", "[", "i", "]", "/=", "self", ".", "oov_penalty", "\n", "\n", "# OUTPUT", "\n", "", "", "", "if", "self", ".", "k", "==", "1", ":", "\n", "                ", "try", ":", "\n", "                    ", "correction_list", ".", "append", "(", "candidates", "[", "np", ".", "argmax", "(", "distances", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "correction_list", ".", "append", "(", "''", ")", "\n", "", "", "elif", "self", ".", "k", ">", "1", ":", "\n", "                ", "correction_list", ".", "append", "(", "[", "candidates", "[", "i", "]", "for", "i", "in", "np", ".", "argsort", "(", "distances", ")", "[", ":", ":", "-", "1", "]", "[", ":", "self", ".", "k", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'k must be positive natural number'", ")", "\n", "\n", "", "", "return", "correction_list", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.noisychannel_ranking": [[257, 312], ["zip", "numpy.array", "pyxdameraulevenshtein.damerau_levenshtein_distance", "pyxdameraulevenshtein.damerau_levenshtein_distance", "numpy.array.append", "len", "confidences.append", "confidences.append", "abs", "correction_list.append", "correction_list.append", "ValueError", "doublemetaphone.dm", "doublemetaphone.dm", "math.log", "numpy.argsort", "correction_list.append", "numpy.argmin", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.clips_clinspell.code.doublemetaphone.dm", "home.repos.pwc.inspect_result.clips_clinspell.code.doublemetaphone.dm"], ["", "def", "noisychannel_ranking", "(", "self", ",", "detection_list", ",", "candidates_list", ")", ":", "\n", "        ", "\"\"\"\n        An approximate implementation of the ranking method described in (Lai et al. 2015)\n        :param detection_list: list of misspellings\n        :param candidates_list: list of candidate list per misspelling\n        :param frequency_dict: corpus frequencies from training data\n        :param k_best: if True, return k highest ranked candidates instead of single one\n        :return: list with corrections or k-best corrections\n        \"\"\"", "\n", "\n", "correction_list", "=", "[", "]", "\n", "confidences", "=", "[", "]", "\n", "\n", "for", "misspelling", ",", "candidates", "in", "zip", "(", "detection_list", ",", "candidates_list", ")", ":", "\n", "            ", "score_list", "=", "[", "]", "\n", "for", "candidate", "in", "candidates", ":", "\n", "                ", "orthographic_edit_distance", "=", "damerau_levenshtein_distance", "(", "misspelling", ",", "candidate", ")", "\n", "phonetic_edit_distance", "=", "damerau_levenshtein_distance", "(", "dm", "(", "misspelling", ")", "[", "0", "]", ",", "dm", "(", "candidate", ")", "[", "0", "]", ")", "\n", "\n", "spell_score", "=", "(", "2", "*", "orthographic_edit_distance", "+", "phonetic_edit_distance", ")", "**", "2", "# P(m|c)", "\n", "\n", "try", ":", "\n", "                    ", "frequency", "=", "self", ".", "frequency_dict", "[", "candidate", "]", "\n", "", "except", "KeyError", ":", "\n", "                    ", "frequency", "=", "1", "\n", "\n", "", "frequency_score", "=", "1", "/", "(", "1", "+", "log", "(", "frequency", ")", ")", "# P(c)", "\n", "\n", "score", "=", "spell_score", "*", "frequency_score", "# P(c|m) = P(m|c)*P(c)", "\n", "score_list", ".", "append", "(", "score", ")", "\n", "\n", "", "score_list", "=", "np", ".", "array", "(", "score_list", ")", "\n", "\n", "if", "len", "(", "score_list", ")", ">", "1", ":", "\n", "                ", "sorted_distances", "=", "[", "score_list", "[", "i", "]", "for", "i", "in", "np", ".", "argsort", "(", "score_list", ")", "]", "\n", "top1", "=", "sorted_distances", "[", "0", "]", "\n", "top2", "=", "sorted_distances", "[", "1", "]", "\n", "confidence", "=", "abs", "(", "top1", "-", "top2", ")", "/", "top1", "\n", "confidences", ".", "append", "(", "confidence", ")", "\n", "", "else", ":", "\n", "                ", "confidences", ".", "append", "(", "0", ")", "\n", "\n", "", "if", "self", ".", "k", "==", "1", ":", "\n", "                ", "try", ":", "\n", "                    ", "correction_list", ".", "append", "(", "candidates", "[", "np", ".", "argmin", "(", "score_list", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "correction_list", ".", "append", "(", "''", ")", "\n", "", "", "elif", "self", ".", "k", ">", "1", ":", "\n", "                ", "correction_list", ".", "append", "(", "[", "candidates", "[", "i", "]", "for", "i", "in", "np", ".", "argsort", "(", "score_list", ")", "[", ":", "self", ".", "k", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'k must be positive natural number'", ")", "\n", "\n", "", "", "self", ".", "confidences", "=", "confidences", "\n", "\n", "return", "correction_list", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.frequency_baseline": [[313, 339], ["zip", "correction_list.append", "correction_list.append", "ValueError", "ranking_experiments.Development.frequency_dict.keys", "correction_list.append", "numpy.argmax", "numpy.argsort"], "methods", ["None"], ["", "def", "frequency_baseline", "(", "self", ",", "detection_list", ",", "candidates_list", ")", ":", "\n", "        ", "\"\"\"\n        Majority frequency baseline\n        :param detection_list: list of misspellings\n        :param candidates_list: list of candidate list per misspelling\n        :return: list with corrections or k-best corrections\n        \"\"\"", "\n", "correction_list", "=", "[", "]", "\n", "\n", "for", "misspelling", ",", "candidates", "in", "zip", "(", "detection_list", ",", "candidates_list", ")", ":", "\n", "\n", "            ", "candidates", "=", "[", "candidate", "for", "candidate", "in", "candidates", "if", "candidate", "in", "self", ".", "frequency_dict", ".", "keys", "(", ")", "]", "\n", "\n", "frequencies", "=", "[", "self", ".", "frequency_dict", "[", "candidate", "]", "for", "candidate", "in", "candidates", "]", "\n", "\n", "if", "self", ".", "k", "==", "1", ":", "\n", "                ", "try", ":", "\n", "                    ", "correction_list", ".", "append", "(", "candidates", "[", "np", ".", "argmax", "(", "frequencies", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "correction_list", ".", "append", "(", "''", ")", "\n", "", "", "elif", "self", ".", "k", ">", "1", ":", "\n", "                ", "correction_list", ".", "append", "(", "[", "candidates", "[", "i", "]", "for", "i", "in", "np", ".", "argsort", "(", "frequencies", ")", "[", ":", ":", "-", "1", "]", "[", ":", "self", ".", "k", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'k must be positive natural number'", ")", "\n", "\n", "", "", "return", "correction_list", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.sub_sampling": [[340, 373], ["len", "list", "random.seed", "random.shuffle", "statistics.mean", "range", "scores.append", "range", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sub_sampling", "(", "correction_list", ",", "corrected_list", ",", "k", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        Calculates the correction accuracy averaged over k subsampled folds\n        :param correction_list: list of corrections\n        :param corrected_list: list of gold standard corrections\n        :param k: number of folds\n        :return: correction accuracy averaged over k subsampled folds\n        \"\"\"", "\n", "length", "=", "len", "(", "correction_list", ")", "\n", "all_idxs", "=", "list", "(", "range", "(", "length", ")", ")", "\n", "random", ".", "seed", "(", "0.56", ")", "\n", "random", ".", "shuffle", "(", "all_idxs", ")", "\n", "\n", "folds_length", "=", "length", "//", "k", "\n", "\n", "heldout_parts", "=", "[", "all_idxs", "[", "folds_length", "*", "i", ":", "folds_length", "*", "(", "i", "+", "1", ")", "]", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "\n", "scores", "=", "[", "]", "\n", "\n", "for", "heldout_part", "in", "heldout_parts", ":", "\n", "\n", "            ", "test_idxs", "=", "[", "i", "for", "i", "in", "all_idxs", "if", "i", "not", "in", "heldout_part", "]", "\n", "\n", "corrects", "=", "0", "\n", "for", "i", "in", "test_idxs", ":", "\n", "                ", "if", "correction_list", "[", "i", "]", "==", "corrected_list", "[", "i", "]", ":", "\n", "                    ", "corrects", "+=", "1", "\n", "\n", "", "", "score", "=", "corrects", "/", "len", "(", "test_idxs", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "\n", "", "return", "mean", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.conduct_experiment": [[374, 411], ["ranking_experiments.Development.sub_sampling", "ranking_experiments.Development.ranking_experiment", "ranking_experiments.Development.noisychannel_ranking", "ranking_experiments.Development.frequency_baseline", "ranking_experiments.Development.ranking_experiment", "ranking_experiments.Development.noisychannel_ranking", "enumerate", "ValueError"], "methods", ["home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.sub_sampling", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.ranking_experiment", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.noisychannel_ranking", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.frequency_baseline", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.ranking_experiment", "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.noisychannel_ranking"], ["", "def", "conduct_experiment", "(", "self", ",", "devcorpus", ",", "candidates_list", ")", ":", "\n", "        ", "\"\"\"\n        Streamlines experiments with the various ranking modules\n        :param devcorpus: devcorpus generated with make_devcorpus.py\n        :param candidates_list: list of candidate list per misspelling\n        :return: correction accuracy, list of corrections\n        \"\"\"", "\n", "corrected_list", "=", "devcorpus", "[", "0", "]", "\n", "detection_list", "=", "devcorpus", "[", "1", "]", "\n", "detection_contexts", "=", "devcorpus", "[", "2", "]", "\n", "\n", "self", ".", "corrected_list", "=", "corrected_list", "\n", "self", ".", "detection_list", "=", "detection_list", "\n", "self", ".", "detection_contexts", "=", "detection_contexts", "\n", "self", ".", "candidates_list", "=", "candidates_list", "\n", "\n", "if", "self", ".", "ranking_method", "==", "'context'", ":", "\n", "            ", "correction_list", "=", "self", ".", "ranking_experiment", "(", "detection_list", ",", "detection_contexts", ",", "candidates_list", ")", "\n", "", "elif", "self", ".", "ranking_method", "==", "'noisy_channel'", ":", "\n", "            ", "correction_list", "=", "self", ".", "noisychannel_ranking", "(", "detection_list", ",", "candidates_list", ")", "\n", "", "elif", "self", ".", "ranking_method", "==", "'frequency'", ":", "\n", "            ", "correction_list", "=", "self", ".", "frequency_baseline", "(", "detection_list", ",", "candidates_list", ")", "\n", "", "elif", "self", ".", "ranking_method", "==", "'ensemble'", ":", "\n", "            ", "correction_list", "=", "self", ".", "ranking_experiment", "(", "detection_list", ",", "detection_contexts", ",", "candidates_list", ")", "\n", "correction_list_2", "=", "self", ".", "noisychannel_ranking", "(", "detection_list", ",", "candidates_list", ")", "\n", "for", "i", ",", "confidence", "in", "enumerate", "(", "self", ".", "confidences", ")", ":", "\n", "                ", "if", "confidence", ">", "1.3", ":", "\n", "                    ", "correction_list", "[", "i", "]", "=", "correction_list_2", "[", "i", "]", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'No valid ranking method given'", ")", "\n", "\n", "", "score", "=", "self", ".", "sub_sampling", "(", "correction_list", ",", "corrected_list", ")", "\n", "\n", "self", ".", "correction_list", "=", "correction_list", "\n", "self", ".", "score", "=", "score", "\n", "\n", "return", "score", ",", "correction_list", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.grid_search": [[412, 470], ["ranking_experiments.Development", "print", "print", "time.time", "time.time", "range", "str", "range", "ranking_experiments.Development.ranking_experiment", "len", "len", "enumerate"], "methods", ["home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.ranking_experiment"], ["", "@", "staticmethod", "\n", "def", "grid_search", "(", "devcorpus", ",", "candidates_list", ",", "language", ")", ":", "\n", "        ", "\"\"\"\n        Conduct grid search to find best parameters for a corpus containing only in-vector-vocabulary corrections\n        :param devcorpus: devcorpus generated with make_devcorpus.py\n        :param candidates_list: list of candidate list per misspelling\n        :param language: language from [\"en\", \"nl\"]\n        :return: dictionary with parameter settings as keys and their correction accuracy as values\n        \"\"\"", "\n", "# default parameters", "\n", "parameters", "=", "{", "'comp_function'", ":", "'sum'", ",", "\n", "'include_misspelling'", ":", "False", ",", "\n", "'include_oov_candidates'", ":", "False", ",", "\n", "'window_size'", ":", "6", ",", "\n", "'reciprocal'", ":", "False", ",", "\n", "'remove_stopwords'", ":", "False", ",", "\n", "'edit_distance'", ":", "1", ",", "\n", "'oov_penalty'", ":", "1.5", ",", "\n", "'ranking_method'", ":", "'context'", ",", "\n", "'k-best'", ":", "1", "}", "\n", "\n", "dev", "=", "Development", "(", "parameters", ",", "language", ")", "\n", "\n", "corrected_list", "=", "devcorpus", "[", "0", "]", "\n", "detection_list", "=", "devcorpus", "[", "1", "]", "\n", "detection_contexts", "=", "devcorpus", "[", "2", "]", "\n", "\n", "scores_dict", "=", "{", "}", "\n", "\n", "start_time", "=", "0", "\n", "end_time", "=", "0", "\n", "for", "comp_function", "in", "[", "\"sum\"", ",", "\"mult\"", ",", "\"max\"", "]", ":", "\n", "            ", "print", "(", "\"New run\"", ")", "\n", "run_time", "=", "end_time", "-", "start_time", "\n", "print", "(", "\"Last run took \"", "+", "str", "(", "run_time", ")", "+", "\" seconds\"", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "dev", ".", "comp_function", "=", "comp_function", "\n", "for", "include_misspelling", "in", "[", "True", ",", "False", "]", ":", "\n", "                ", "dev", ".", "include_misspelling", "=", "include_misspelling", "\n", "for", "window_size", "in", "range", "(", "11", ")", ":", "\n", "                    ", "dev", ".", "window_size", "=", "window_size", "\n", "for", "reciprocal", "in", "[", "True", ",", "False", "]", ":", "\n", "                        ", "dev", ".", "reciprocal", "=", "reciprocal", "\n", "for", "remove_stopwords", "in", "[", "True", ",", "False", "]", ":", "\n", "                            ", "dev", ".", "remove_stopwords", "=", "remove_stopwords", "\n", "for", "edit_distance", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "                                ", "dev", ".", "edit_distance", "=", "edit_distance", "\n", "correction_list", "=", "dev", ".", "ranking_experiment", "(", "detection_list", ",", "detection_contexts", ",", "\n", "candidates_list", ")", "\n", "accuracy", "=", "len", "(", "[", "c", "for", "i", ",", "c", "in", "enumerate", "(", "correction_list", ")", "\n", "if", "c", "==", "corrected_list", "[", "i", "]", "]", ")", "/", "len", "(", "correction_list", ")", "\n", "parameters", "=", "(", "comp_function", ",", "include_misspelling", ",", "window_size", ",", "reciprocal", ",", "\n", "remove_stopwords", ",", "edit_distance", ")", "\n", "scores_dict", "[", "parameters", "]", "=", "accuracy", "\n", "\n", "", "", "", "", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "return", "scores_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.tune_oov": [[471, 500], ["ranking_experiments.Development", "list", "range", "ranking_experiments.Development.ranking_experiment", "len", "len", "enumerate"], "methods", ["home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.ranking_experiment"], ["", "@", "staticmethod", "\n", "def", "tune_oov", "(", "devcorpus", ",", "candidates_list", ",", "best_parameters", ",", "language", ")", ":", "\n", "        ", "\"\"\"\n        Conduct search for best oov penalty for corpus\n        :param devcorpus: devcorpus generated with make_devcorpus.py\n        :param candidates_list: list of candidate list per misspelling\n        :param best_parameters: best parameters for the devcorpus\n        :param language: language from [\"en\", \"nl\"]\n        :return: dictionary with oov penalties as keys and their correction accuracy as values\n        \"\"\"", "\n", "dev", "=", "Development", "(", "best_parameters", ",", "language", ")", "\n", "\n", "corrected_list", "=", "devcorpus", "[", "0", "]", "\n", "detection_list", "=", "devcorpus", "[", "1", "]", "\n", "detection_contexts", "=", "devcorpus", "[", "2", "]", "\n", "\n", "scores_dict", "=", "{", "}", "\n", "\n", "values", "=", "list", "(", "range", "(", "30", ")", ")", "\n", "values", "=", "[", "value", "/", "10", "for", "value", "in", "values", "]", "\n", "\n", "for", "value", "in", "values", ":", "\n", "            ", "dev", ".", "oov_penalty", "=", "value", "\n", "correction_list", "=", "dev", ".", "ranking_experiment", "(", "detection_list", ",", "detection_contexts", ",", "candidates_list", ")", "\n", "accuracy", "=", "len", "(", "[", "c", "for", "i", ",", "c", "in", "enumerate", "(", "correction_list", ")", "\n", "if", "c", "==", "corrected_list", "[", "i", "]", "]", ")", "/", "len", "(", "correction_list", ")", "\n", "scores_dict", "[", "value", "]", "=", "accuracy", "\n", "\n", "", "return", "scores_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.define_best_parameters": [[501, 555], ["kwargs.keys", "statistics.mean", "statistics.mean", "averaged_scores_dict.items", "max", "averaged_scores_dict.items", "max", "averaged_scores_dict[].append", "inverse_dict.keys", "averaged_scores_dict[].append", "inverse_dict.keys"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "define_best_parameters", "(", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Calculates the best parameters or oov penalty averaged over several corpora\n        :param kwargs: dictionary with obligatory 'iv' key, with as value a list of scores_dicts calculated with\n        Development.grid_search()\n        if also 'oov' key, it calculates the optimal oov penalty for all 'iv' and 'oov' scores_dicts calculated with\n        Development.tune_oov()\n        :return: best parameters or oov penalty averaged over several corpora\n        \"\"\"", "\n", "if", "\"oov\"", "not", "in", "kwargs", ".", "keys", "(", ")", ":", "# grid search", "\n", "            ", "averaged_scores_dict", "=", "{", "}", "\n", "for", "scores_dict", "in", "kwargs", "[", "'iv'", "]", ":", "\n", "                ", "for", "key", "in", "scores_dict", ":", "\n", "                    ", "try", ":", "\n", "                        ", "averaged_scores_dict", "[", "key", "]", ".", "append", "(", "scores_dict", "[", "key", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                        ", "averaged_scores_dict", "[", "key", "]", "=", "[", "scores_dict", "[", "key", "]", "]", "\n", "\n", "", "", "", "for", "key", "in", "averaged_scores_dict", ":", "\n", "                ", "averaged_scores_dict", "[", "key", "]", "=", "mean", "(", "averaged_scores_dict", "[", "key", "]", ")", "\n", "\n", "", "inverse_dict", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "averaged_scores_dict", ".", "items", "(", ")", "}", "\n", "best_parameters", "=", "inverse_dict", "[", "max", "(", "inverse_dict", ".", "keys", "(", ")", ")", "]", "\n", "parameters_dict", "=", "{", "}", "\n", "\n", "parameters_dict", "[", "\"comp_function\"", "]", "=", "best_parameters", "[", "0", "]", "\n", "parameters_dict", "[", "\"include_misspelling\"", "]", "=", "best_parameters", "[", "1", "]", "\n", "parameters_dict", "[", "\"window_size\"", "]", "=", "best_parameters", "[", "2", "]", "\n", "parameters_dict", "[", "\"reciprocal\"", "]", "=", "best_parameters", "[", "3", "]", "\n", "parameters_dict", "[", "\"remove_stopwords\"", "]", "=", "best_parameters", "[", "4", "]", "\n", "parameters_dict", "[", "\"edit_distance\"", "]", "=", "best_parameters", "[", "5", "]", "\n", "\n", "return", "parameters_dict", "\n", "\n", "", "else", ":", "# tune oov penalty", "\n", "            ", "averaged_scores_dict", "=", "{", "}", "\n", "for", "scores_dict", "in", "kwargs", "[", "'iv'", "]", ":", "\n", "                ", "for", "key", "in", "scores_dict", ":", "\n", "                    ", "try", ":", "\n", "                        ", "averaged_scores_dict", "[", "key", "]", ".", "append", "(", "scores_dict", "[", "key", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                        ", "averaged_scores_dict", "[", "key", "]", "=", "[", "scores_dict", "[", "key", "]", "]", "\n", "\n", "", "", "", "for", "key", "in", "averaged_scores_dict", ":", "\n", "                ", "averaged_scores_dict", "[", "key", "]", "=", "mean", "(", "averaged_scores_dict", "[", "key", "]", ")", "\n", "\n", "", "for", "key", "in", "kwargs", "[", "'oov'", "]", ":", "\n", "                ", "averaged_scores_dict", "[", "key", "]", "=", "(", "averaged_scores_dict", "[", "key", "]", "*", "9", "+", "kwargs", "[", "'oov'", "]", "[", "'key'", "]", ")", "/", "10", "# weighted avg", "\n", "\n", "", "inverse_dict", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "averaged_scores_dict", ".", "items", "(", ")", "}", "\n", "best_parameter", "=", "inverse_dict", "[", "max", "(", "inverse_dict", ".", "keys", "(", ")", ")", "]", "\n", "\n", "return", "best_parameter", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.ranking_experiments.Development.frequency_analysis": [[556, 602], ["print", "enumerate", "print", "print", "print", "print", "print", "print", "numpy.array", "len", "len", "len", "enumerate", "enumerate", "idxs.append", "idxs.append", "ranking_experiments.Development.frequency_dict.keys", "numpy.argsort", "enumerate"], "methods", ["None"], ["", "", "def", "frequency_analysis", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Calculates the correction accuracies for 3 scenarios: correct replacement has highest frequency (0), second\n        highest frequency (1), or lower relative frequency (2) of all candidates\n        :return: dictionary with correction accuracy per scenario\n        \"\"\"", "\n", "scores_dict", "=", "{", "}", "\n", "\n", "for", "j", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "            ", "idxs", "=", "[", "]", "\n", "for", "i", ",", "candidates", "in", "enumerate", "(", "self", ".", "candidates_list", ")", ":", "\n", "\n", "                ", "frequencies", "=", "[", "self", ".", "frequency_dict", "[", "c", "]", "if", "c", "in", "self", ".", "frequency_dict", ".", "keys", "(", ")", "else", "1", "for", "c", "in", "candidates", "]", "\n", "frequencies", "=", "np", ".", "array", "(", "frequencies", ")", "\n", "sorted_candidates", "=", "[", "candidates", "[", "i", "]", "for", "i", "in", "np", ".", "argsort", "(", "frequencies", ")", "[", ":", ":", "-", "1", "]", "]", "\n", "if", "j", "in", "[", "0", ",", "1", "]", ":", "\n", "                    ", "try", ":", "\n", "                        ", "eligible_candidates", "=", "sorted_candidates", "[", "j", "]", "\n", "", "except", "IndexError", ":", "\n", "                        ", "eligible_candidates", "=", "[", "]", "\n", "", "if", "self", ".", "corrected_list", "[", "i", "]", "in", "eligible_candidates", ":", "\n", "                        ", "idxs", ".", "append", "(", "i", ")", "\n", "", "", "else", ":", "\n", "                    ", "try", ":", "\n", "                        ", "eligible_candidates", "=", "sorted_candidates", "[", "2", ":", "]", "\n", "", "except", "IndexError", ":", "\n", "                        ", "eligible_candidates", "=", "[", "]", "\n", "", "if", "self", ".", "corrected_list", "[", "i", "]", "in", "eligible_candidates", ":", "\n", "                        ", "idxs", ".", "append", "(", "i", ")", "\n", "\n", "", "", "", "correction_list", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "correction_list", ")", "if", "i", "in", "idxs", "]", "\n", "corrected_list", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "corrected_list", ")", "if", "i", "in", "idxs", "]", "\n", "\n", "accuracy", "=", "len", "(", "[", "c", "for", "i", ",", "c", "in", "enumerate", "(", "correction_list", ")", "if", "c", "==", "corrected_list", "[", "i", "]", "]", ")", "/", "len", "(", "correction_list", ")", "\n", "scores_dict", "[", "j", "]", "=", "accuracy", "\n", "\n", "print", "(", "'Top k'", ")", "\n", "print", "(", "j", ")", "\n", "print", "(", "'Amount of instances'", ")", "\n", "print", "(", "len", "(", "idxs", ")", ")", "\n", "print", "(", "'Accuracy'", ")", "\n", "print", "(", "accuracy", ")", "\n", "\n", "", "print", "(", "scores_dict", ")", "\n", "\n", "return", "scores_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.clips_clinspell.code.make_devcorpus.letterswitch": [[13, 24], ["list", "len", "random.randint", "len", "ValueError", "len"], "function", ["None"], ["def", "letterswitch", "(", "word", ")", ":", "\n", "    ", "if", "len", "(", "word", ")", ">", "2", ":", "\n", "        ", "i", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "word", ")", "-", "2", ")", "\n", "", "elif", "len", "(", "word", ")", "==", "2", ":", "\n", "        ", "i", "=", "0", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Word input must be longer than 1 character\"", ")", "\n", "", "letterlist", "=", "list", "(", "word", ")", "\n", "letterlist", "[", "i", "]", ",", "letterlist", "[", "i", "+", "1", "]", "=", "letterlist", "[", "i", "+", "1", "]", ",", "letterlist", "[", "i", "]", "\n", "\n", "return", "\"\"", ".", "join", "(", "letterlist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.make_devcorpus.letterdelete": [[25, 30], ["random.randint", "list", "list.pop", "len"], "function", ["None"], ["", "def", "letterdelete", "(", "word", ")", ":", "\n", "    ", "i", "=", "random", ".", "randint", "(", "1", ",", "len", "(", "word", ")", "-", "1", ")", "# avoid omitting first letter, rarely happens", "\n", "letterlist", "=", "list", "(", "word", ")", "\n", "letterlist", ".", "pop", "(", "i", ")", "\n", "return", "\"\"", ".", "join", "(", "letterlist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.make_devcorpus.letterinsert": [[31, 36], ["random.randint", "list", "list.insert", "len", "random.choice"], "function", ["None"], ["", "def", "letterinsert", "(", "word", ")", ":", "\n", "    ", "i", "=", "random", ".", "randint", "(", "1", ",", "len", "(", "word", ")", ")", "\n", "letterlist", "=", "list", "(", "word", ")", "\n", "letterlist", ".", "insert", "(", "i", ",", "random", ".", "choice", "(", "string", ".", "ascii_lowercase", ")", ")", "\n", "return", "\"\"", ".", "join", "(", "letterlist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.make_devcorpus.lettersub": [[37, 42], ["random.randint", "list", "random.choice", "string.ascii_lowercase.replace", "len"], "function", ["None"], ["", "def", "lettersub", "(", "word", ")", ":", "\n", "    ", "i", "=", "random", ".", "randint", "(", "1", ",", "len", "(", "word", ")", "-", "1", ")", "\n", "letterlist", "=", "list", "(", "word", ")", "\n", "letterlist", "[", "i", "]", "=", "random", ".", "choice", "(", "string", ".", "ascii_lowercase", ".", "replace", "(", "letterlist", "[", "i", "]", ",", "\"\"", ")", ")", "\n", "return", "\"\"", ".", "join", "(", "letterlist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.make_devcorpus.corpus_sample": [[45, 74], ["print", "open", "set", "open", "enumerate", "open", "json.dump", "random.sample", "range", "print", "sample_lines.append", "sorted", "list"], "function", ["None"], ["", "def", "corpus_sample", "(", "corpus", ",", "samplename", ",", "samplesize", ")", ":", "\n", "    ", "\"\"\"\n    :param corpus: preprocessed corpus text file to sample from\n    :param samplename: name of the output sample\n    :param samplesize: number of lines to sample from the corpus\n    :return: list of sampled lines from corpus\n    \"\"\"", "\n", "\n", "with", "open", "(", "corpus", ",", "'r'", ")", "as", "f", ":", "\n", "\n", "        ", "sample_lines", "=", "[", "]", "\n", "\n", "# random sample of defined samplesize", "\n", "len_lines", "=", "0", "\n", "for", "line", "in", "f", ":", "\n", "            ", "len_lines", "+=", "1", "\n", "", "sample", "=", "set", "(", "random", ".", "sample", "(", "range", "(", "len_lines", ")", ",", "samplesize", ")", ")", "\n", "\n", "", "with", "open", "(", "corpus", ",", "'r'", ")", "as", "f", ":", "\n", "\n", "        ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "if", "i", "in", "sample", ":", "\n", "                ", "print", "(", "\"Yes!\"", ")", "\n", "sample_lines", ".", "append", "(", "line", ")", "\n", "\n", "", "", "", "with", "open", "(", "samplename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "(", "sample_lines", ",", "sorted", "(", "list", "(", "sample", ")", ")", "[", ":", ":", "-", "1", "]", ")", ",", "f", ")", "\n", "\n", "", "print", "(", "\"Done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.make_devcorpus.make_devcorpus": [[78, 198], ["fasttext.load_model", "enumerate", "print", "print", "open", "set", "make_devcorpus.corpus_sample", "print", "print", "enumerate", "correct_spellings.append", "misspelling_contexts.append", "used_samplelines.append", "print", "print", "open", "json.dump", "json.load", "open", "open", "len", "print", "line.split", "random.choice", "print", "print", "json.load", "json.load", "line.split", "line.split", "len", "len", "random.choice", "misspellings.append", "distance_idxs.append", "len", "idxs.append", "len", "idxs.append", "random.choice", "misspellings.append", "distance_idxs.append", "line.split", "line.split", "len", "len", "random.choice", "pyxdameraulevenshtein.damerau_levenshtein_distance", "line.split", "line.split", "random.choice", "misspellings.append", "distance_idxs.append", "random.choice", "misspellings.append", "distance_idxs.append", "random.choice", "pyxdameraulevenshtein.damerau_levenshtein_distance"], "function", ["home.repos.pwc.inspect_result.clips_clinspell.code.make_devcorpus.corpus_sample"], ["", "def", "make_devcorpus", "(", "corpusfile", ",", "language", ",", "outfile", ",", "window_size", "=", "10", ",", "oov", "=", "False", ",", "samplesize", "=", "0", ",", "editdistance", "=", "12", ")", ":", "\n", "    ", "\"\"\"\n    :param corpusfile: file containing the corpus to sample from\n    :param language: language from ['en', 'nl']\n    :param outfile: name of devcorpus file\n    :param window_size: minimal amount of tokens on each side of a generated misspelling\n    :param oov: True if the generated misspellings need to be absent from the vector vocabulary\n    :param samplesize: number of lines to sample\n    :param editdistance: the type of edit distances generated: 1, 2 or 1 and 2 (80-20 proportion)\n    \"\"\"", "\n", "# load lexicon", "\n", "assert", "language", "in", "[", "'en'", ",", "'nl'", "]", "\n", "with", "open", "(", "'lexicon_{}.json'", ".", "format", "(", "language", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "vocab", "=", "set", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "\n", "# load vector vocab", "\n", "", "model", "=", "fasttext", ".", "load_model", "(", "'../data/embeddings_{}.bin'", ".", "format", "(", "language", ")", ")", "\n", "vector_vocab", "=", "model", ".", "words", "\n", "\n", "# load sample", "\n", "if", "samplesize", ":", "\n", "        ", "corpus_sample", "(", "corpusfile", ",", "'devsample.json'", ",", "samplesize", ")", "\n", "with", "open", "(", "'devsample.json'", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "corpus", "=", "json", ".", "load", "(", "f", ")", "[", "0", "]", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "corpusfile", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "corpus", "=", "json", ".", "load", "(", "f", ")", "[", "0", "]", "\n", "\n", "# generate misspellings corpus with corrections and detection contexts", "\n", "", "", "functionlist", "=", "[", "letterswitch", ",", "letterdelete", ",", "letterinsert", ",", "lettersub", "]", "\n", "correct_spellings", "=", "[", "]", "\n", "misspellings", "=", "[", "]", "\n", "misspelling_contexts", "=", "[", "]", "\n", "used_samplelines", "=", "[", "]", "# to be able to backtrack", "\n", "distance_idxs", "=", "[", "]", "# keep track which element has which edit distance", "\n", "\n", "for", "j", ",", "line", "in", "enumerate", "(", "corpus", ")", ":", "\n", "        ", "print", "(", "'Line {}:'", ".", "format", "(", "j", ")", ")", "\n", "if", "len", "(", "line", ".", "split", "(", ")", ")", "<", "1", "+", "window_size", "*", "2", ":", "\n", "# check whether a context frame of min_window_size tokens on each side can be extracted for at least 1 token", "\n", "            ", "print", "(", "'Line too short, skipping to next line.'", ")", "\n", "continue", "\n", "", "print", "(", "'Collecting candidate words...'", ")", "\n", "idxs", "=", "[", "]", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "line", ".", "split", "(", ")", ")", ":", "\n", "            ", "if", "not", "oov", ":", "\n", "                ", "if", "(", "word", "in", "vocab", ")", "and", "(", "len", "(", "word", ")", ">", "3", ")", "and", "(", "word", "in", "vector_vocab", ")", ":", "\n", "                    ", "if", "(", "i", "-", "window_size", ">=", "0", ")", "and", "(", "i", "+", "window_size", "<", "len", "(", "line", ".", "split", "(", ")", ")", ")", ":", "\n", "# check whether a context frame of min_window_size tokens on each side can be extracted", "\n", "                        ", "idxs", ".", "append", "(", "i", ")", "\n", "", "", "", "else", ":", "\n", "                ", "if", "(", "word", "in", "vocab", ")", "and", "(", "len", "(", "word", ")", ">", "3", ")", "and", "(", "word", "not", "in", "vector_vocab", ")", ":", "\n", "                    ", "if", "(", "i", "-", "window_size", ">=", "0", ")", "and", "(", "i", "+", "window_size", "<", "len", "(", "line", ".", "split", "(", ")", ")", ")", ":", "\n", "                        ", "idxs", ".", "append", "(", "i", ")", "\n", "", "", "", "", "if", "idxs", ":", "\n", "            ", "i", "=", "random", ".", "choice", "(", "idxs", ")", "\n", "word", "=", "line", ".", "split", "(", ")", "[", "i", "]", "\n", "print", "(", "\"{} candidates, sampled '{}' \"", ".", "format", "(", "len", "(", "idxs", ")", ",", "word", ")", ")", "\n", "", "else", ":", "# skip to next line if no eligible words", "\n", "            ", "print", "(", "'No eligible words found, skipping to next line.'", ")", "\n", "continue", "\n", "\n", "", "correct_spellings", ".", "append", "(", "word", ")", "\n", "misspelling", "=", "''", "\n", "\n", "if", "editdistance", "==", "1", ":", "\n", "            ", "REDLIGHT", "=", "1", "\n", "while", "REDLIGHT", ":", "\n", "                ", "misspelling", "=", "random", ".", "choice", "(", "functionlist", ")", "(", "word", ")", "\n", "if", "misspelling", "not", "in", "vocab", ":", "\n", "                    ", "misspellings", ".", "append", "(", "misspelling", ")", "\n", "distance_idxs", ".", "append", "(", "1", ")", "\n", "REDLIGHT", "=", "0", "\n", "\n", "", "", "", "elif", "editdistance", "==", "2", ":", "\n", "            ", "REDLIGHT", "=", "1", "\n", "while", "REDLIGHT", ":", "\n", "                ", "misspelling", "=", "random", ".", "choice", "(", "functionlist", ")", "(", "random", ".", "choice", "(", "functionlist", ")", "(", "word", ")", ")", "\n", "if", "(", "misspelling", "not", "in", "vocab", ")", "and", "(", "damerau_levenshtein_distance", "(", "misspelling", ",", "word", ")", "==", "2", ")", ":", "\n", "                    ", "misspellings", ".", "append", "(", "misspelling", ")", "\n", "distance_idxs", ".", "append", "(", "2", ")", "\n", "REDLIGHT", "=", "0", "\n", "\n", "", "", "", "elif", "editdistance", "==", "12", ":", "# 80% edit distance 1, 20% edit distance 2", "\n", "            ", "if", "j", "%", "5", "==", "0", ":", "\n", "                ", "REDLIGHT", "=", "1", "\n", "while", "REDLIGHT", ":", "\n", "                    ", "misspelling", "=", "random", ".", "choice", "(", "functionlist", ")", "(", "random", ".", "choice", "(", "functionlist", ")", "(", "word", ")", ")", "\n", "if", "(", "misspelling", "not", "in", "vocab", ")", "and", "(", "damerau_levenshtein_distance", "(", "misspelling", ",", "word", ")", "==", "2", ")", ":", "\n", "                        ", "misspellings", ".", "append", "(", "misspelling", ")", "\n", "distance_idxs", ".", "append", "(", "2", ")", "\n", "REDLIGHT", "=", "0", "\n", "", "", "", "else", ":", "\n", "                ", "REDLIGHT", "=", "1", "\n", "while", "REDLIGHT", ":", "\n", "                    ", "misspelling", "=", "random", ".", "choice", "(", "functionlist", ")", "(", "word", ")", "\n", "if", "misspelling", "not", "in", "vocab", ":", "\n", "                        ", "misspellings", ".", "append", "(", "misspelling", ")", "\n", "distance_idxs", ".", "append", "(", "1", ")", "\n", "REDLIGHT", "=", "0", "\n", "\n", "# append corresponding context window", "\n", "", "", "", "", "misspelling_contexts", ".", "append", "(", "(", "(", "\" \"", ".", "join", "(", "line", ".", "split", "(", ")", "[", "i", "-", "window_size", ":", "i", "]", ")", ")", ",", "\n", "(", "\" \"", ".", "join", "(", "line", ".", "split", "(", ")", "[", "i", "+", "1", ":", "i", "+", "window_size", "+", "1", "]", ")", ")", ")", ")", "\n", "\n", "# append index of used line in sample", "\n", "used_samplelines", ".", "append", "(", "j", ")", "\n", "\n", "# keeping track", "\n", "print", "(", "'Resulting misspelling: {}'", ".", "format", "(", "misspelling", ")", ")", "\n", "print", "(", "\"{} instances collected\"", ".", "format", "(", "len", "(", "misspellings", ")", ")", ")", "\n", "\n", "", "print", "(", "'Finished corpus generation. Saving...'", ")", "\n", "# save corpus", "\n", "with", "open", "(", "outfile", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "(", "correct_spellings", ",", "misspellings", ",", "misspelling_contexts", ",", "used_samplelines", ",", "distance_idxs", ")", ",", "f", ")", "\n", "", "print", "(", "'Done.'", ")", "\n", "\n", "# return corpus", "\n", "return", "correct_spellings", ",", "misspellings", ",", "misspelling_contexts", ",", "used_samplelines", ",", "distance_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.make_devcorpus.sample_80_20": [[202, 255], ["print", "print", "print", "print", "open", "json.load", "len", "random.sample", "random.sample", "sorted", "sorted", "len", "open", "json.dump", "list", "len", "idxs_1_distance.pop", "list", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "set", "enumerate", "enumerate", "len", "random.choice", "set", "range", "len"], "function", ["None"], ["", "def", "sample_80_20", "(", "devcorpusfile", ",", "amount", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    :param devcorpusfile: generated devcorpus\n    :param amount: amount of instances to retain, if not specified it retains the maximum possible amount\n    :return: balanced devcorpus\n    \"\"\"", "\n", "\n", "with", "open", "(", "devcorpusfile", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "devcorpus", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "correct_spellings", "=", "devcorpus", "[", "0", "]", "\n", "misspellings", "=", "devcorpus", "[", "1", "]", "\n", "detection_contexts", "=", "devcorpus", "[", "2", "]", "\n", "used_samplelines", "=", "devcorpus", "[", "3", "]", "\n", "distance_idxs", "=", "devcorpus", "[", "4", "]", "\n", "\n", "print", "(", "'Original amount of instances:'", ")", "\n", "print", "(", "len", "(", "correct_spellings", ")", ")", "\n", "\n", "if", "amount", ":", "\n", "\n", "        ", "idxs_1_distance", "=", "[", "i", "for", "i", ",", "id", "in", "enumerate", "(", "distance_idxs", ")", "if", "id", "==", "1", "]", "\n", "idxs_2_distance", "=", "[", "i", "for", "i", ",", "id", "in", "enumerate", "(", "distance_idxs", ")", "if", "id", "==", "2", "]", "\n", "\n", "proportions", "=", "[", "(", "amount", "*", "4", ")", "//", "5", ",", "amount", "//", "5", "]", "\n", "\n", "filtered_1_idxs", "=", "random", ".", "sample", "(", "idxs_1_distance", ",", "proportions", "[", "0", "]", ")", "\n", "filtered_2_idxs", "=", "random", ".", "sample", "(", "idxs_2_distance", ",", "proportions", "[", "1", "]", ")", "\n", "all_idxs", "=", "sorted", "(", "list", "(", "set", "(", "filtered_1_idxs", "+", "filtered_2_idxs", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "idxs_1_distance", "=", "[", "i", "for", "i", ",", "id", "in", "enumerate", "(", "distance_idxs", ")", "if", "id", "==", "1", "]", "\n", "idxs_2_distance", "=", "[", "i", "for", "i", ",", "id", "in", "enumerate", "(", "distance_idxs", ")", "if", "id", "==", "2", "]", "\n", "\n", "while", "len", "(", "idxs_1_distance", ")", "<", "len", "(", "idxs_2_distance", ")", "*", "4", ":", "\n", "            ", "idxs_1_distance", ".", "pop", "(", "random", ".", "choice", "(", "range", "(", "len", "(", "idxs_1_distance", ")", ")", ")", ")", "\n", "\n", "", "all_idxs", "=", "sorted", "(", "list", "(", "set", "(", "idxs_1_distance", "+", "idxs_2_distance", ")", ")", ")", "\n", "\n", "", "print", "(", "'Amount of instances after balancing:'", ")", "\n", "print", "(", "len", "(", "all_idxs", ")", ")", "\n", "\n", "correct_spellings", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "correct_spellings", ")", "if", "i", "in", "all_idxs", "]", "\n", "misspellings", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "misspellings", ")", "if", "i", "in", "all_idxs", "]", "\n", "detection_contexts", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "detection_contexts", ")", "if", "i", "in", "all_idxs", "]", "\n", "used_samplelines", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "used_samplelines", ")", "if", "i", "in", "all_idxs", "]", "\n", "distance_idxs", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "distance_idxs", ")", "if", "i", "in", "all_idxs", "]", "\n", "\n", "devcorpus", "=", "[", "correct_spellings", ",", "misspellings", ",", "detection_contexts", ",", "used_samplelines", ",", "distance_idxs", "]", "\n", "\n", "with", "open", "(", "devcorpusfile", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "devcorpus", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.candidates.load_vocab": [[11, 38], ["len", "len", "range", "min", "max", "range", "[].add", "set", "len", "len", "set"], "function", ["None"], ["def", "load_vocab", "(", "vocab", ")", ":", "\n", "    ", "\"\"\"\n    Transforms a vocabulary to the dictionary format required for the candidate generation.\n    :param vocab: a list containing the vocabulary\n    :return: vocab_dict\n    \"\"\"", "\n", "\n", "# TRANSFORM VOCABULARY TO DICTIONARY", "\n", "\n", "# initialize vocab word length keys and character set length keys", "\n", "\n", "vocab_dict", "=", "{", "}", "\n", "min_len", "=", "len", "(", "min", "(", "vocab", ",", "key", "=", "len", ")", ")", "\n", "max_len", "=", "len", "(", "max", "(", "vocab", ",", "key", "=", "len", ")", ")", "\n", "item_lens", "=", "range", "(", "min_len", ",", "max_len", "+", "1", ")", "\n", "\n", "for", "item", "in", "item_lens", ":", "\n", "        ", "vocab_dict", "[", "item", "]", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "max_len", "+", "1", ")", ":", "\n", "            ", "vocab_dict", "[", "item", "]", "[", "i", "]", "=", "set", "(", ")", "\n", "\n", "# fill vocab according to word length and character set length", "\n", "\n", "", "", "for", "word", "in", "vocab", ":", "\n", "        ", "vocab_dict", "[", "len", "(", "word", ")", "]", "[", "len", "(", "set", "(", "word", ")", ")", "]", ".", "add", "(", "word", ")", "\n", "\n", "", "return", "vocab_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.candidates.levenshtein_candidates": [[39, 77], ["len", "len", "set", "list", "set", "range", "range", "range", "range", "set", "pyxdameraulevenshtein.damerau_levenshtein_distance", "candidates.append"], "function", ["None"], ["", "def", "levenshtein_candidates", "(", "word", ",", "vocab_dict", ",", "editdistance", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Generates candidates\n    :param word: the misspelling for which to generate replacement candidates\n    :param vocab_dict: the output of load_vocab()\n    :param editdistance: the maximum Damerau-Levenshtein edit distance\n    :return:\n    \"\"\"", "\n", "\n", "candidates", "=", "[", "]", "\n", "\n", "word_len", "=", "len", "(", "word", ")", "\n", "set_len", "=", "len", "(", "set", "(", "word", ")", ")", "\n", "\n", "if", "word_len", "<=", "2", ":", "\n", "        ", "word_lengths", "=", "range", "(", "word_len", ",", "word_len", "+", "1", "+", "editdistance", ")", "\n", "", "else", ":", "\n", "        ", "word_lengths", "=", "range", "(", "word_len", "-", "editdistance", ",", "word_len", "+", "1", "+", "editdistance", ")", "\n", "\n", "", "if", "set_len", "-", "editdistance", ">", "0", ":", "\n", "        ", "set_lengths", "=", "range", "(", "set_len", "-", "editdistance", ",", "set_len", "+", "1", "+", "editdistance", ")", "\n", "", "else", ":", "\n", "        ", "set_lengths", "=", "range", "(", "set_len", ",", "set_len", "+", "1", "+", "editdistance", ")", "\n", "\n", "", "selection", "=", "[", "]", "\n", "\n", "for", "i", "in", "word_lengths", ":", "\n", "        ", "key", "=", "vocab_dict", "[", "i", "]", "\n", "for", "j", "in", "set_lengths", ":", "\n", "            ", "selection", "+=", "key", "[", "j", "]", "\n", "\n", "", "", "for", "item", "in", "set", "(", "selection", ")", ":", "\n", "        ", "if", "damerau_levenshtein_distance", "(", "word", ",", "item", ")", "<=", "editdistance", ":", "\n", "            ", "candidates", ".", "append", "(", "item", ")", "\n", "\n", "", "", "full_candidates", "=", "list", "(", "set", "(", "candidates", ")", ")", "\n", "\n", "return", "full_candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.candidates.load_metaphones": [[83, 103], ["doublemetaphone.dm", "metaphone_dict[].append", "metaphone_dict[].append"], "function", ["home.repos.pwc.inspect_result.clips_clinspell.code.doublemetaphone.dm"], ["", "def", "load_metaphones", "(", "vocab", ")", ":", "\n", "    ", "\"\"\"\n    :param vocab_file: either a list containing the vocabulary, or a text file which contains one lexical item per line\n    :return: dictionary with mappings between Double Metaphone representations and corresponding lexical items\n    \"\"\"", "\n", "\n", "# MAKE METAPHONE-LEXICAL MAPPING", "\n", "\n", "metaphone_dict", "=", "{", "}", "\n", "for", "item", "in", "vocab", ":", "\n", "        ", "metaphones", "=", "dm", "(", "item", ")", "\n", "for", "metaphone", "in", "metaphones", ":", "\n", "            ", "if", "metaphone", ":", "\n", "                ", "try", ":", "\n", "                    ", "metaphone_dict", "[", "metaphone", "]", ".", "append", "(", "item", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "metaphone_dict", "[", "metaphone", "]", "=", "[", "]", "\n", "metaphone_dict", "[", "metaphone", "]", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "", "return", "metaphone_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.clips_clinspell.code.candidates.convert_candidates": [[104, 121], ["enumerate", "len", "set().intersection", "pyxdameraulevenshtein.damerau_levenshtein_distance", "converted_candidates.append", "set", "set"], "function", ["None"], ["", "def", "convert_candidates", "(", "metaphone_candidates", ",", "detection", ",", "metaphone_dict", ")", ":", "\n", "\n", "    ", "\"\"\"\n    :param candidates: replacement candidates\n    :param detection: misspelling\n    :param metaphone_dict: output of load_metaphones()\n    :return: candidates converted from Double Metaphone representation to normal lexical representation\n    \"\"\"", "\n", "\n", "converted_candidates", "=", "[", "]", "\n", "for", "i", ",", "candidate", "in", "enumerate", "(", "metaphone_candidates", ")", ":", "\n", "        ", "for", "item", "in", "metaphone_dict", "[", "candidate", "]", ":", "\n", "            ", "if", "len", "(", "set", "(", "item", ")", ".", "intersection", "(", "set", "(", "candidate", ")", ")", ")", ">=", "1", ":", "# have at least one character in common", "\n", "                ", "if", "damerau_levenshtein_distance", "(", "item", ",", "detection", ")", "<=", "3", ":", "# enough overlap", "\n", "                    ", "converted_candidates", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "", "return", "converted_candidates", "\n", "\n"]]}