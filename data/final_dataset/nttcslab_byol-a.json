{"home.repos.pwc.inspect_result.nttcslab_byol-a.None.evaluate.calc_norm_stats": [[46, 72], ["evaluate.calc_norm_stats.data_for_stats"], "function", ["None"], ["def", "calc_norm_stats", "(", "cfg", ",", "data_src", ",", "n_stats", "=", "10000", ")", ":", "\n", "    ", "\"\"\"Calculates statistics of log-mel spectrogram features in a data source for normalization.\n\n    Args:\n        cfg: Configuration settings.\n        data_src: Data source class object.\n        n_stats: Maximum number of files to calculate statistics.\n    \"\"\"", "\n", "\n", "def", "data_for_stats", "(", "data_src", ")", ":", "\n", "# use all files for LOO-CV (Leave One Out CV)", "\n", "        ", "if", "data_src", ".", "loocv", ":", "\n", "            ", "return", "data_src", "\n", "# use training samples only for non-LOOCV (train/eval/test) split.", "\n", "", "return", "data_src", ".", "subset", "(", "[", "0", "]", ")", "\n", "\n", "", "stats_data", "=", "data_for_stats", "(", "data_src", ")", "\n", "n_stats", "=", "min", "(", "n_stats", ",", "len", "(", "stats_data", ")", ")", "\n", "logging", ".", "info", "(", "f'Calculating mean/std using random {n_stats} samples from training population {len(stats_data)} samples...'", ")", "\n", "sample_idxes", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "stats_data", ")", ")", ",", "size", "=", "n_stats", ",", "replace", "=", "False", ")", "\n", "ds", "=", "WaveInLMSOutDataset", "(", "cfg", ",", "stats_data", ".", "files", ",", "labels", "=", "None", ",", "tfms", "=", "None", ")", "\n", "X", "=", "[", "ds", "[", "i", "]", "for", "i", "in", "tqdm", "(", "sample_idxes", ")", "]", "\n", "X", "=", "np", ".", "hstack", "(", "X", ")", "\n", "norm_stats", "=", "np", ".", "array", "(", "[", "X", ".", "mean", "(", ")", ",", "X", ".", "std", "(", ")", "]", ")", "\n", "logging", ".", "info", "(", "f'  ==> mean/std: {norm_stats}, {norm_stats.shape} <- {X.shape}'", ")", "\n", "return", "norm_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.evaluate.get_model_feature_d": [[74, 84], ["re.search", "print", "int", "pathlib.Path", "re.search.group"], "function", ["None"], ["", "def", "get_model_feature_d", "(", "model_filename", ")", ":", "\n", "    ", "\"\"\"Read number of fature_d in the filename.\"\"\"", "\n", "\n", "r", "=", "re", ".", "search", "(", "'d\\d+'", ",", "Path", "(", "model_filename", ")", ".", "stem", ")", "\n", "if", "r", "is", "None", ":", "\n", "        ", "print", "(", "f'WARNING: feature dimension not found, falling back to 512-d: {model_filename}'", ")", "\n", "d", "=", "512", "\n", "", "else", ":", "\n", "        ", "d", "=", "int", "(", "r", ".", "group", "(", "0", ")", "[", "1", ":", "]", ")", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.evaluate.get_embeddings": [[86, 105], ["byol_a.dataset.WaveInLMSOutDataset", "torch.utils.data.DataLoader", "numpy.array", "torch.no_grad", "tqdm.tqdm", "byol_a.augmentations.PrecomputedNorm", "model().cpu().detach", "embs.extend", "model().cpu().detach.numpy", "model().cpu", "model", "X.to"], "function", ["None"], ["", "def", "get_embeddings", "(", "cfg", ",", "files", ",", "model", ",", "norm_stats", ")", ":", "\n", "    ", "\"\"\"Get representation embeddings of audio files, converted by the model.\n\n    Args:\n        cfg: Configuration settings.\n        files: Audio files (.wav) to convert.\n        model: Trained model that converts audio to embeddings.\n        norm_stats: Mean & standard deviation calcurlated by calc_norm_stats().\n    \"\"\"", "\n", "\n", "ds", "=", "WaveInLMSOutDataset", "(", "cfg", ",", "files", ",", "labels", "=", "None", ",", "tfms", "=", "PrecomputedNorm", "(", "norm_stats", ")", ")", "\n", "dl", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "ds", ",", "batch_size", "=", "cfg", ".", "bs", ",", "num_workers", "=", "cfg", ".", "num_workers", ",", "\n", "pin_memory", "=", "False", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "embs", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "X", "in", "tqdm", "(", "dl", ")", ":", "\n", "            ", "Y", "=", "model", "(", "X", ".", "to", "(", "device", ")", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "embs", ".", "extend", "(", "Y", ".", "numpy", "(", ")", ")", "\n", "", "", "return", "np", ".", "array", "(", "embs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.evaluate._one_linear_eval": [[107, 127], ["sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit", "sklearn.preprocessing.StandardScaler.transform", "clf_cls", "clf_cls.fit", "sklearn.preprocessing.StandardScaler.transform", "clf_cls.score", "len", "X.mean.mean", "X_test.mean.mean", "sklearn.preprocessing.StandardScaler.transform"], "function", ["None"], ["", "def", "_one_linear_eval", "(", "X", ",", "y", ",", "X_val", ",", "y_val", ",", "X_test", ",", "y_test", ",", "hidden_sizes", ",", "epochs", ",", "early_stopping", ",", "debug", ")", ":", "\n", "    ", "\"\"\"Perform a single run of linear evaluation.\"\"\"", "\n", "\n", "if", "len", "(", "X_test", ".", "shape", ")", ">", "2", ":", "\n", "        ", "X", "=", "X", ".", "mean", "(", "axis", "=", "1", ")", "\n", "X_test", "=", "X_test", ".", "mean", "(", "axis", "=", "1", ")", "\n", "", "scaler", "=", "StandardScaler", "(", ")", "\n", "scaler", ".", "fit", "(", "X", ")", "\n", "X", "=", "scaler", ".", "transform", "(", "X", ")", "\n", "if", "X_val", "is", "not", "None", ":", "\n", "        ", "X_val", "=", "scaler", ".", "transform", "(", "X_val", ")", "\n", "\n", "", "clf_cls", "=", "TorchMLPClassifier", "\n", "clf", "=", "clf_cls", "(", "hidden_layer_sizes", "=", "hidden_sizes", ",", "max_iter", "=", "epochs", ",", "\n", "early_stopping", "=", "early_stopping", ",", "debug", "=", "debug", ")", "\n", "clf", ".", "fit", "(", "X", ",", "y", ",", "X_val", "=", "X_val", ",", "y_val", "=", "y_val", ")", "\n", "\n", "X_test", "=", "scaler", ".", "transform", "(", "X_test", ")", "\n", "score", "=", "clf", ".", "score", "(", "X_test", ",", "y_test", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.evaluate.linear_eval_multi": [[129, 159], ["enumerate", "print", "numpy.mean", "evaluate.linear_eval_multi.return_other_fold_indexes"], "function", ["None"], ["", "def", "linear_eval_multi", "(", "folds", ",", "hidden_sizes", "=", "(", ")", ",", "epochs", "=", "200", ",", "early_stopping", "=", "True", ",", "debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"Evaluate multiple folds with MLPClassifier for leave-one-out CV.\n\n    Args:\n        folds: Holds dataset X, y.\n        hidden_sizes: MLP's hidden layer sizes.\n        epochs: Training epochs.\n        early_stopping: Enables early stopping or not.\n    \"\"\"", "\n", "\n", "def", "return_other_fold_indexes", "(", "test_fold_idx", ")", ":", "\n", "        ", "return", "[", "i", "for", "i", "in", "range", "(", "len", "(", "folds", ")", ")", "if", "i", "!=", "test_fold_idx", "]", "\n", "\n", "", "scores", "=", "[", "]", "\n", "\n", "for", "fold_idx", ",", "test_fold", "in", "enumerate", "(", "folds", ")", ":", "\n", "        ", "other_fold_indexes", "=", "return_other_fold_indexes", "(", "fold_idx", ")", "\n", "X", "=", "np", ".", "array", "(", "list", "(", "chain", "(", "*", "[", "folds", "[", "idx", "]", "[", "'X'", "]", "for", "idx", "in", "other_fold_indexes", "]", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "y", "=", "np", ".", "array", "(", "list", "(", "chain", "(", "*", "[", "folds", "[", "idx", "]", "[", "'y'", "]", "for", "idx", "in", "other_fold_indexes", "]", ")", ")", ")", "\n", "X_test", "=", "np", ".", "array", "(", "test_fold", "[", "'X'", "]", ")", ".", "squeeze", "(", ")", "\n", "y_test", "=", "np", ".", "array", "(", "test_fold", "[", "'y'", "]", ")", "\n", "\n", "score", "=", "_one_linear_eval", "(", "X", ",", "y", ",", "None", ",", "None", ",", "X_test", ",", "y_test", ",", "hidden_sizes", ",", "epochs", ",", "early_stopping", ",", "debug", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "print", "(", "f' {score:.6f}'", ",", "end", "=", "''", ")", "\n", "debug", "=", "False", "# disable debug option for further iterations", "\n", "\n", "", "print", "(", "f' -> mean: {np.mean(scores)}'", ")", "\n", "\n", "return", "np", ".", "mean", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.evaluate.linear_eval_single": [[161, 183], ["print", "evaluate._one_linear_eval", "print", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.None.evaluate._one_linear_eval"], ["", "def", "linear_eval_single", "(", "folds", ",", "hidden_sizes", "=", "(", ")", ",", "epochs", "=", "200", ",", "early_stopping", "=", "True", ",", "debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"Evaluate a single train/test split with MLPClassifier.\n\n    Args:\n        folds: Holds dataset X, y as follows:\n            0 = training set\n            1 = validation set\n            2 = test set\n        hidden_sizes: MLP's hidden layer sizes\n        epochs: Training epochs.\n        early_stopping: Enables early stopping or not.\n    \"\"\"", "\n", "\n", "X", ",", "y", "=", "folds", "[", "0", "]", "[", "'X'", "]", ",", "folds", "[", "0", "]", "[", "'y'", "]", "\n", "X_val", ",", "y_val", "=", "folds", "[", "1", "]", "[", "'X'", "]", ",", "folds", "[", "1", "]", "[", "'y'", "]", "\n", "X_test", ",", "y_test", "=", "folds", "[", "2", "]", "[", "'X'", "]", ",", "folds", "[", "2", "]", "[", "'y'", "]", "\n", "print", "(", "f'Training:{len(X)}, validation:{len(X_val)}, test:{len(X_test)} samples.'", ")", "\n", "\n", "score", "=", "_one_linear_eval", "(", "X", ",", "y", ",", "X_val", ",", "y_val", ",", "X_test", ",", "y_test", ",", "hidden_sizes", ",", "epochs", ",", "early_stopping", ",", "debug", ")", "\n", "print", "(", "f' {score:.6f}'", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.evaluate.prepare_linear_evaluation": [[185, 220], ["byol_a.common.load_yaml_config", "evaluate.get_model_feature_d", "print", "byol_a.models.AudioNTT2020", "model.to.load_weight", "utils.downstream_tasks.create_data_source", "evaluate.calc_norm_stats", "model.to.to", "model.to.eval", "range", "collections.defaultdict", "utils.downstream_tasks.create_data_source.subset", "print", "evaluate.get_embeddings", "range", "len"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.load_yaml_config", "home.repos.pwc.inspect_result.nttcslab_byol-a.None.evaluate.get_model_feature_d", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.models.NetworkCommonMixIn.load_weight", "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.create_data_source", "home.repos.pwc.inspect_result.nttcslab_byol-a.v2.train_v2.BYOLALearner.calc_norm_stats", "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.BaseDataSource.subset", "home.repos.pwc.inspect_result.nttcslab_byol-a.None.evaluate.get_embeddings"], ["", "def", "prepare_linear_evaluation", "(", "weight_file", ",", "ds_task", ",", "unit_sec", ",", "n_stats", "=", "10000", ")", ":", "\n", "    ", "\"\"\"Prepare for linear evaluation.\n    - Loads configuration settings, model, and downstream task data source.\n    - Converts audio to representation embeddings.\n    - Build folds for MLP classification.\n\n    Returns:\n        cfg: Configuration settings\n        folds: Folds that hold X, y for all folds.\n        loocv: True if the task is 10-folds LOO-CV, or False if it is a single fold (train/valid/test).\n    \"\"\"", "\n", "\n", "cfg", "=", "load_yaml_config", "(", "'config.yaml'", ")", "\n", "cfg", ".", "unit_sec", "=", "unit_sec", "\n", "cfg", ".", "feature_d", "=", "get_model_feature_d", "(", "weight_file", ")", "\n", "print", "(", "cfg", ")", "\n", "\n", "model", "=", "AudioNTT2020", "(", "n_mels", "=", "cfg", ".", "n_mels", ",", "d", "=", "cfg", ".", "feature_d", ")", "\n", "model", ".", "load_weight", "(", "weight_file", ",", "device", ")", "\n", "data", "=", "create_data_source", "(", "ds_task", ")", "\n", "\n", "# norm_stats", "\n", "norm_stats", "=", "calc_norm_stats", "(", "cfg", ",", "data", ",", "n_stats", "=", "n_stats", ")", "\n", "\n", "# embeddings", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "folds", "=", "[", "defaultdict", "(", "list", ")", "for", "_", "in", "range", "(", "data", ".", "n_folds", ")", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "n_folds", ")", ":", "\n", "        ", "fold_data", "=", "data", ".", "subset", "(", "[", "i", "]", ")", "\n", "print", "(", "f'getting embeddings for fold #{i} ({len(fold_data)} samples)...'", ")", "\n", "folds", "[", "i", "]", "[", "'X'", "]", "=", "get_embeddings", "(", "cfg", ",", "fold_data", ".", "files", ",", "model", ",", "norm_stats", ")", "\n", "folds", "[", "i", "]", "[", "'y'", "]", "=", "fold_data", ".", "labels", "\n", "\n", "", "return", "cfg", ",", "folds", ",", "data", ".", "loocv", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.evaluate.do_eval": [[222, 252], ["byol_a.common.seed_everything", "evaluate.prepare_linear_evaluation", "range", "numpy.array", "results.update", "logging.info", "utils.append_to_csv", "print", "list", "np.array.mean", "np.array.std", "pathlib.Path", "evaluate.linear_eval_multi", "evaluate.linear_eval_single", "results.values"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.seed_everything", "home.repos.pwc.inspect_result.nttcslab_byol-a.None.evaluate.prepare_linear_evaluation", "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.__init__.append_to_csv", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.std", "home.repos.pwc.inspect_result.nttcslab_byol-a.None.evaluate.linear_eval_multi", "home.repos.pwc.inspect_result.nttcslab_byol-a.None.evaluate.linear_eval_single"], ["", "def", "do_eval", "(", "weight", ",", "task", "=", "'spcv2'", ",", "unit_sec", "=", "1.0", ",", "repeat", "=", "1", ",", "epochs", "=", "200", ",", "early_stopping", "=", "True", ",", "seed", "=", "42", ")", ":", "\n", "    ", "\"\"\"Main program of linear evaluation.\"\"\"", "\n", "\n", "# run deterministically", "\n", "seed_everything", "(", "seed", ")", "\n", "\n", "# load labels and corresponding pre-computed embeddings, Leave-One-Out CV flag, hidden layer sizes", "\n", "cfg", ",", "folds", ",", "loocv", "=", "prepare_linear_evaluation", "(", "weight", ",", "task", ",", "unit_sec", ")", "\n", "\n", "# run evaluation cycle", "\n", "results", "=", "{", "}", "\n", "for", "run_idx", "in", "range", "(", "repeat", ")", ":", "\n", "        ", "if", "loocv", ":", "\n", "            ", "score", "=", "linear_eval_multi", "(", "folds", ",", "hidden_sizes", "=", "(", ")", ",", "epochs", "=", "epochs", ",", "\n", "early_stopping", "=", "early_stopping", ",", "debug", "=", "(", "run_idx", "==", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "linear_eval_single", "(", "folds", ",", "hidden_sizes", "=", "(", ")", ",", "epochs", "=", "epochs", ",", "\n", "early_stopping", "=", "early_stopping", ",", "debug", "=", "(", "run_idx", "==", "0", ")", ")", "\n", "", "results", "[", "f'run{run_idx}'", "]", "=", "score", "\n", "\n", "# calculate stats of scores", "\n", "", "scores", "=", "np", ".", "array", "(", "list", "(", "results", ".", "values", "(", ")", ")", ")", "\n", "m", ",", "s", "=", "scores", ".", "mean", "(", ")", ",", "scores", ".", "std", "(", ")", "\n", "model_name", "=", "Path", "(", "weight", ")", ".", "stem", "\n", "results", ".", "update", "(", "{", "'1_model'", ":", "model_name", ",", "'2_mean'", ":", "m", ",", "'3_std'", ":", "s", "}", ")", "\n", "logging", ".", "info", "(", "f' mean={m}, std={s}\\n\\n'", ")", "\n", "\n", "# record score", "\n", "append_to_csv", "(", "f'results/{task}-scores.csv'", ",", "results", ")", "\n", "print", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.train.AugmentationModule.__init__": [[38, 45], ["byol_a.common.nn.Sequential", "byol_a.augmentations.RunningNorm", "print", "byol_a.augmentations.MixupBYOLA", "byol_a.augmentations.RandomResizeCrop"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "epoch_samples", ",", "log_mixup_exp", "=", "True", ",", "mixup_ratio", "=", "0.4", ")", ":", "\n", "        ", "self", ".", "train_transform", "=", "nn", ".", "Sequential", "(", "\n", "MixupBYOLA", "(", "ratio", "=", "mixup_ratio", ",", "log_mixup_exp", "=", "log_mixup_exp", ")", ",", "\n", "RandomResizeCrop", "(", "virtual_crop_scale", "=", "(", "1.0", ",", "1.5", ")", ",", "freq_scale", "=", "(", "0.6", ",", "1.5", ")", ",", "time_scale", "=", "(", "0.6", ",", "1.5", ")", ")", ",", "\n", ")", "\n", "self", ".", "pre_norm", "=", "RunningNorm", "(", "epoch_samples", "=", "epoch_samples", ")", "\n", "print", "(", "'Augmentatoions:'", ",", "self", ".", "train_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.train.AugmentationModule.__call__": [[46, 49], ["train.AugmentationModule.pre_norm", "train.AugmentationModule.train_transform", "train.AugmentationModule.train_transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pre_norm", "(", "x", ")", "\n", "return", "self", ".", "train_transform", "(", "x", ")", ",", "self", ".", "train_transform", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.train.BYOLALearner.__init__": [[54, 59], ["pytorch_lightning.LightningModule.__init__", "byol_a.byol_pytorch.BYOL", "byol_a.augmentations.NormalizeBatch"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "lr", ",", "shape", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "learner", "=", "BYOL", "(", "model", ",", "image_size", "=", "shape", ",", "**", "kwargs", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "post_norm", "=", "NormalizeBatch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.train.BYOLALearner.forward": [[60, 62], ["train.BYOLALearner.learner"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images1", ",", "images2", ")", ":", "\n", "        ", "return", "self", ".", "learner", "(", "images1", ",", "images2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.train.BYOLALearner.training_step": [[63, 76], ["byol_a.common.torch.cat", "train.BYOLALearner.training_step.to_np"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "paired_inputs", ",", "batch_idx", ")", ":", "\n", "        ", "def", "to_np", "(", "A", ")", ":", "return", "[", "a", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "a", "in", "A", "]", "\n", "\n", "bs", "=", "paired_inputs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "paired_inputs", "=", "torch", ".", "cat", "(", "paired_inputs", ")", "# [(B,1,F,T), (B,1,F,T)] -> (2*B,1,F,T)", "\n", "mb", ",", "sb", "=", "to_np", "(", "(", "paired_inputs", ".", "mean", "(", ")", ",", "paired_inputs", ".", "std", "(", ")", ")", ")", "\n", "paired_inputs", "=", "self", ".", "post_norm", "(", "paired_inputs", ")", "\n", "ma", ",", "sa", "=", "to_np", "(", "(", "paired_inputs", ".", "mean", "(", ")", ",", "paired_inputs", ".", "std", "(", ")", ")", ")", "\n", "\n", "loss", "=", "self", ".", "forward", "(", "paired_inputs", "[", ":", "bs", "]", ",", "paired_inputs", "[", "bs", ":", "]", ")", "\n", "for", "k", ",", "v", "in", "{", "'mb'", ":", "mb", ",", "'sb'", ":", "sb", ",", "'ma'", ":", "ma", ",", "'sa'", ":", "sa", "}", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "log", "(", "k", ",", "float", "(", "v", ")", ",", "prog_bar", "=", "True", ",", "on_step", "=", "False", ",", "on_epoch", "=", "True", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.train.BYOLALearner.configure_optimizers": [[77, 79], ["byol_a.common.torch.optim.Adam", "train.BYOLALearner.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.train.BYOLALearner.on_before_zero_grad": [[80, 82], ["train.BYOLALearner.learner.update_moving_average"], "methods", ["None"], ["", "def", "on_before_zero_grad", "(", "self", ",", "_", ")", ":", "\n", "        ", "self", ".", "learner", ".", "update_moving_average", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.None.train.main": [[84, 128], ["byol_a.common.load_yaml_config", "byol_a.common.get_logger", "byol_a.common.get_logger.info", "byol_a.common.seed_everything", "sorted", "train.AugmentationModule", "byol_a.dataset.WaveInLMSOutDataset", "byol_a.common.DataLoader", "byol_a.common.get_logger.info", "byol_a.common.get_logger.info", "byol_a.models.AudioNTT2020", "train.BYOLALearner", "pytorch_lightning.Trainer", "pl.Trainer.fit", "to_file.parent.mkdir", "byol_a.common.torch.save", "byol_a.common.get_logger.info", "byol_a.common.Path().glob", "byol_a.models.AudioNTT2020.load_weight", "byol_a.common.get_logger.info", "exit", "byol_a.common.Path", "byol_a.models.AudioNTT2020.state_dict", "len", "multiprocessing.cpu_count", "byol_a.common.get_timestamp", "byol_a.common.Path", "len", "str"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.load_yaml_config", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.get_logger", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.seed_everything", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.models.NetworkCommonMixIn.load_weight", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.get_timestamp"], ["", "", "def", "main", "(", "audio_dir", ",", "config_path", "=", "'config.yaml'", ",", "d", "=", "None", ",", "epochs", "=", "None", ",", "resume", "=", "None", ")", "->", "None", ":", "\n", "    ", "cfg", "=", "load_yaml_config", "(", "config_path", ")", "\n", "# Override configs", "\n", "cfg", ".", "feature_d", "=", "d", "or", "cfg", ".", "feature_d", "\n", "cfg", ".", "epochs", "=", "epochs", "or", "cfg", ".", "epochs", "\n", "cfg", ".", "resume", "=", "resume", "or", "cfg", ".", "resume", "\n", "# Essentials", "\n", "logger", "=", "get_logger", "(", "__name__", ")", "\n", "logger", ".", "info", "(", "cfg", ")", "\n", "seed_everything", "(", "cfg", ".", "seed", ")", "\n", "# Data preparation", "\n", "files", "=", "sorted", "(", "Path", "(", "audio_dir", ")", ".", "glob", "(", "'*.wav'", ")", ")", "\n", "tfms", "=", "AugmentationModule", "(", "(", "64", ",", "96", ")", ",", "2", "*", "len", "(", "files", ")", ")", "\n", "ds", "=", "WaveInLMSOutDataset", "(", "cfg", ",", "files", ",", "labels", "=", "None", ",", "tfms", "=", "tfms", ")", "\n", "dl", "=", "DataLoader", "(", "ds", ",", "batch_size", "=", "cfg", ".", "bs", ",", "\n", "num_workers", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", "pin_memory", "=", "True", ",", "shuffle", "=", "True", ",", ")", "\n", "logger", ".", "info", "(", "f'Dataset: {len(files)} .wav files from {audio_dir}'", ")", "\n", "# Training preparation", "\n", "name", "=", "(", "f'BYOLA-NTT2020d{cfg.feature_d}s{cfg.shape[0]}x{cfg.shape[1]}-{get_timestamp()}'", "\n", "f'-e{cfg.epochs}-bs{cfg.bs}-lr{str(cfg.lr)[2:]}'", "\n", "f'-rs{cfg.seed}'", ")", "\n", "logger", ".", "info", "(", "f'Training {name}...'", ")", "\n", "# Model", "\n", "model", "=", "AudioNTT2020", "(", "n_mels", "=", "cfg", ".", "n_mels", ",", "d", "=", "cfg", ".", "feature_d", ")", "\n", "if", "cfg", ".", "resume", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_weight", "(", "cfg", ".", "resume", ")", "\n", "# Training", "\n", "", "learner", "=", "BYOLALearner", "(", "model", ",", "cfg", ".", "lr", ",", "cfg", ".", "shape", ",", "\n", "hidden_layer", "=", "-", "1", ",", "\n", "projection_size", "=", "cfg", ".", "proj_size", ",", "\n", "projection_hidden_size", "=", "cfg", ".", "proj_dim", ",", "\n", "moving_average_decay", "=", "cfg", ".", "ema_decay", ",", "\n", ")", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "gpus", "=", "1", ",", "max_epochs", "=", "cfg", ".", "epochs", ",", "weights_summary", "=", "None", ")", "\n", "trainer", ".", "fit", "(", "learner", ",", "dl", ")", "\n", "if", "trainer", ".", "interrupted", ":", "\n", "        ", "logger", ".", "info", "(", "'Terminated.'", ")", "\n", "exit", "(", "0", ")", "\n", "# Saving trained weight.", "\n", "", "to_file", "=", "Path", "(", "cfg", ".", "checkpoint_folder", ")", "/", "(", "name", "+", "'.pth'", ")", "\n", "to_file", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "to_file", ")", "\n", "logger", ".", "info", "(", "f'Saved weight as {to_file}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.convert_wav._converter_worker": [[20, 45], ["byol_a.common.torchaudio.load", "wav.mean.mean", "to_name.parent.mkdir", "byol_a.common.torchaudio.save", "byol_a.common.Path", "byol_a.common.Path", "print", "byol_a.common.AT.Resample"], "function", ["None"], ["def", "_converter_worker", "(", "args", ")", ":", "\n", "    ", "subpathname", ",", "from_dir", ",", "to_dir", ",", "sample_rate", ",", "verbose", "=", "args", "\n", "from_dir", ",", "to_dir", "=", "Path", "(", "from_dir", ")", ",", "Path", "(", "to_dir", ")", "\n", "to_name", "=", "to_dir", "/", "subpathname", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "from_dir", ",", "'->'", ",", "to_name", ")", "\n", "\n", "# load wav", "\n", "", "wav", ",", "org_sr", "=", "torchaudio", ".", "load", "(", "from_dir", "/", "subpathname", ")", "\n", "\n", "# stereo to mono (compatible with librosa)", "\n", "# ref: https://librosa.org/doc/main/generated/librosa.to_mono.html#librosa.to_mono", "\n", "wav", "=", "wav", ".", "mean", "(", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "# resample", "\n", "wav", "=", "AT", ".", "Resample", "(", "org_sr", ",", "sample_rate", ")", "(", "wav", ")", "\n", "\n", "# to int16", "\n", "wav", "=", "(", "wav", "*", "32767.0", ")", ".", "to", "(", "torch", ".", "int16", ")", "\n", "\n", "# save wav", "\n", "to_name", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "torchaudio", ".", "save", "(", "to_name", ",", "wav", ",", "sample_rate", ")", "\n", "\n", "return", "to_name", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.convert_wav.convert_wav": [[47, 59], ["byol_a.common.load_yaml_config", "print", "print", "str().replace", "len", "multiprocessing.Pool", "list", "byol_a.common.Path().glob", "tqdm.tqdm", "str", "len", "p.imap", "byol_a.common.Path", "len"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.load_yaml_config"], ["", "def", "convert_wav", "(", "from_dir", ",", "to_dir", ",", "config_path", "=", "'config.yaml'", ",", "verbose", "=", "True", ")", "->", "None", ":", "\n", "    ", "cfg", "=", "load_yaml_config", "(", "config_path", ")", "\n", "files", "=", "[", "str", "(", "f", ")", ".", "replace", "(", "from_dir", ",", "''", ")", "for", "f", "in", "Path", "(", "from_dir", ")", ".", "glob", "(", "'**/*.wav'", ")", "]", "\n", "files", "=", "[", "f", "[", "1", ":", "]", "if", "f", "[", "0", "]", "==", "'/'", "else", "f", "for", "f", "in", "files", "]", "\n", "print", "(", "f'Processing {len(files)} files...'", ")", "\n", "assert", "len", "(", "files", ")", ">", "0", "\n", "\n", "with", "Pool", "(", ")", "as", "p", ":", "\n", "        ", "args", "=", "[", "[", "f", ",", "from_dir", ",", "to_dir", ",", "cfg", ".", "sample_rate", ",", "verbose", "]", "for", "f", "in", "files", "]", "\n", "shapes", "=", "list", "(", "tqdm", "(", "p", ".", "imap", "(", "_converter_worker", ",", "args", ")", ",", "total", "=", "len", "(", "args", ")", ")", ")", "\n", "\n", "", "print", "(", "'finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.preprocess_ds.convert_us8k_metadata": [[32, 47], ["pathlib.Path", "pandas.read_csv", "pandas.DataFrame", "pd.DataFrame.to_csv", "pandas.read_csv().set_index", "sorted", "print", "pd.read_csv().set_index.fold.map", "set", "len", "len", "pandas.read_csv", "list"], "function", ["None"], ["def", "convert_us8k_metadata", "(", "root", ")", ":", "\n", "    ", "US8K", "=", "Path", "(", "root", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "US8K", "/", "f'metadata/UrbanSound8K.csv'", ")", "\n", "df", "[", "'file_name'", "]", "=", "df", ".", "fold", ".", "map", "(", "lambda", "x", ":", "f'audio/fold{x}/'", ")", "+", "df", ".", "slice_file_name", "\n", "\n", "re_df", "=", "pd", ".", "DataFrame", "(", "df", "[", "'class'", "]", ".", "values", ",", "index", "=", "df", ".", "file_name", ",", "columns", "=", "[", "'label'", "]", ")", "\n", "re_df", ".", "to_csv", "(", "f'work/metadata/us8k.csv'", ")", "\n", "\n", "# test", "\n", "df", "=", "pd", ".", "read_csv", "(", "f'work/metadata/us8k.csv'", ")", ".", "set_index", "(", "'file_name'", ")", "\n", "labels", "=", "df", ".", "label", ".", "values", "\n", "classes", "=", "sorted", "(", "set", "(", "list", "(", "labels", ")", ")", ")", "\n", "assert", "len", "(", "classes", ")", "==", "10", "\n", "assert", "len", "(", "df", ")", "==", "8732", "\n", "print", "(", "f'Created work/metadata/us8k.csv - test passed'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.preprocess_ds.us8k": [[49, 52], ["preprocess_ds.convert_us8k_metadata", "convert_wav.convert_wav"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.utils.preprocess_ds.convert_us8k_metadata", "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.convert_wav.convert_wav"], ["", "def", "us8k", "(", "root", ")", ":", "\n", "    ", "convert_us8k_metadata", "(", "root", ")", "\n", "convert_wav", "(", "root", ",", "'work/16k/us8k'", ",", "verbose", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.preprocess_ds.convert_nsynth_metadata": [[56, 71], ["pandas.concat", "pd.read_csv.to_csv", "pandas.read_csv", "print", "json.load", "pandas.DataFrame", "len", "open", "preprocess_ds.convert_nsynth_metadata.read_meta"], "function", ["None"], ["", "def", "convert_nsynth_metadata", "(", "root", ",", "nsynth", "=", "'nsynth'", ",", "n_samples", "=", "305979", ",", "files", "=", "None", ")", ":", "\n", "\n", "    ", "def", "read_meta", "(", "root", ",", "mode", ")", ":", "\n", "        ", "j", "=", "json", ".", "load", "(", "open", "(", "f'{root}/nsynth-{mode}/examples.json'", ")", ")", "\n", "loop_indexes", "=", "files", "if", "files", "and", "mode", "==", "'train'", "else", "j", "\n", "file_names", "=", "[", "f'nsynth-{mode}/audio/{file_id}.wav'", "for", "file_id", "in", "loop_indexes", "]", "\n", "labels", "=", "[", "j", "[", "x", "]", "[", "'instrument_family_str'", "]", "for", "x", "in", "loop_indexes", "]", "\n", "return", "pd", ".", "DataFrame", "(", "{", "'file_name'", ":", "file_names", ",", "'label'", ":", "labels", ",", "'split'", ":", "mode", "}", ")", "\n", "\n", "", "df", "=", "pd", ".", "concat", "(", "[", "read_meta", "(", "root", ",", "mode", ")", "for", "mode", "in", "[", "'train'", ",", "'valid'", ",", "'test'", "]", "]", ",", "ignore_index", "=", "True", ")", "\n", "df", ".", "to_csv", "(", "f'work/metadata/{nsynth}.csv'", ")", "\n", "\n", "df", "=", "pd", ".", "read_csv", "(", "f'work/metadata/{nsynth}.csv'", ")", "\n", "assert", "len", "(", "df", ")", "==", "n_samples", ",", "f'{len(df)}'", "\n", "print", "(", "f'Created work/metadata/{nsynth}.csv - test passed'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.preprocess_ds.nsynth": [[73, 76], ["preprocess_ds.convert_nsynth_metadata", "convert_wav.convert_wav"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.utils.preprocess_ds.convert_nsynth_metadata", "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.convert_wav.convert_wav"], ["", "def", "nsynth", "(", "root", ")", ":", "\n", "    ", "convert_nsynth_metadata", "(", "root", ")", "\n", "convert_wav", "(", "root", ",", "'work/16k/nsynth'", ",", "verbose", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.preprocess_ds.convert_fsdnoisy18k_metadata": [[80, 103], ["pathlib.Path", "pandas.read_csv", "pandas.read_csv", "numpy.random.choice", "pandas.concat", "pd.read_csv.to_csv", "len", "pandas.read_csv", "print", "int", "len", "len", "len"], "function", ["None"], ["", "def", "convert_fsdnoisy18k_metadata", "(", "root", ")", ":", "\n", "    ", "FSD", "=", "Path", "(", "root", ")", "\n", "train_df", "=", "pd", ".", "read_csv", "(", "FSD", "/", "f'FSDnoisy18k.meta/train.csv'", ")", "\n", "# train_df = train_df[train_df.manually_verified != 0]", "\n", "# train_df = train_df[train_df.noisy_small == 0]", "\n", "test_df", "=", "pd", ".", "read_csv", "(", "FSD", "/", "f'FSDnoisy18k.meta/test.csv'", ")", "\n", "# fname := split/fname", "\n", "train_df", "[", "'fname'", "]", "=", "'FSDnoisy18k.audio_train/'", "+", "train_df", ".", "fname", "\n", "test_df", "[", "'fname'", "]", "=", "'FSDnoisy18k.audio_test/'", "+", "test_df", ".", "fname", "\n", "# split. train -> train + val", "\n", "train_df", "[", "'split'", "]", "=", "'train'", "\n", "valid_index", "=", "np", ".", "random", ".", "choice", "(", "train_df", ".", "index", ".", "values", ",", "int", "(", "len", "(", "train_df", ")", "*", "0.1", ")", ",", "replace", "=", "False", ")", "\n", "train_df", ".", "loc", "[", "valid_index", ",", "'split'", "]", "=", "'valid'", "\n", "test_df", "[", "'split'", "]", "=", "'test'", "\n", "df", "=", "pd", ".", "concat", "(", "[", "train_df", ",", "test_df", "]", ",", "ignore_index", "=", "True", ")", "\n", "# filename -> file_name", "\n", "df", ".", "columns", "=", "[", "c", "if", "c", "!=", "'fname'", "else", "'file_name'", "for", "c", "in", "df", ".", "columns", "]", "\n", "df", ".", "to_csv", "(", "f'work/metadata/fsdnoisy18k.csv'", ",", "index", "=", "False", ")", "\n", "n_samples", "=", "len", "(", "df", ")", "\n", "\n", "df", "=", "pd", ".", "read_csv", "(", "f'work/metadata/fsdnoisy18k.csv'", ")", "\n", "assert", "len", "(", "df", ")", "==", "n_samples", ",", "f'{len(df)}'", "\n", "print", "(", "f'Created work/metadata/fsdnoisy18k.csv - test passed'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.preprocess_ds.fsdnoisy18k": [[105, 108], ["preprocess_ds.convert_fsdnoisy18k_metadata", "convert_wav.convert_wav"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.utils.preprocess_ds.convert_fsdnoisy18k_metadata", "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.convert_wav.convert_wav"], ["", "def", "fsdnoisy18k", "(", "root", ")", ":", "\n", "    ", "convert_fsdnoisy18k_metadata", "(", "root", ")", "\n", "convert_wav", "(", "root", ",", "'work/16k/fsdnoisy18k'", ",", "verbose", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.preprocess_ds.convert_spc_metadata": [[112, 140], ["pathlib.Path", "sorted", "pandas.DataFrame", "pd.read_csv().set_index.to_csv", "pandas.read_csv().set_index", "print", "pathlib.Path.glob", "len", "len", "open", "open", "len", "len", "len", "len", "len", "set", "l.strip", "l.strip", "pandas.read_csv", "f.readlines", "f.readlines", "pd.read_csv().set_index.file_name.isin", "pd.read_csv().set_index.file_name.isin"], "function", ["None"], ["", "def", "convert_spc_metadata", "(", "root", ",", "version", "=", "2", ")", ":", "\n", "    ", "ROOT", "=", "Path", "(", "root", ")", "\n", "files", "=", "sorted", "(", "ROOT", ".", "glob", "(", "'[a-z]*/*.wav'", ")", ")", "\n", "\n", "labels", "=", "[", "f", ".", "parent", ".", "name", "for", "f", "in", "files", "]", "\n", "file_names", "=", "[", "f'{f.parent.name}/{f.name}'", "for", "f", "in", "files", "]", "\n", "df", "=", "pd", ".", "DataFrame", "(", "{", "'file_name'", ":", "file_names", ",", "'label'", ":", "labels", "}", ")", "\n", "assert", "len", "(", "df", ")", "==", "[", "64721", ",", "105829", "]", "[", "version", "-", "1", "]", "# v1, v2", "\n", "assert", "len", "(", "set", "(", "labels", ")", ")", "==", "[", "30", ",", "35", "]", "[", "version", "-", "1", "]", "# v1, v2", "\n", "\n", "with", "open", "(", "ROOT", "/", "'validation_list.txt'", ")", "as", "f", ":", "\n", "        ", "vals", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "with", "open", "(", "ROOT", "/", "'testing_list.txt'", ")", "as", "f", ":", "\n", "        ", "tests", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "assert", "len", "(", "vals", ")", "==", "[", "6798", ",", "9981", "]", "[", "version", "-", "1", "]", "# v1, v2", "\n", "assert", "len", "(", "tests", ")", "==", "[", "6835", ",", "11005", "]", "[", "version", "-", "1", "]", "# v1, v2", "\n", "\n", "df", "[", "'split'", "]", "=", "'train'", "\n", "df", ".", "loc", "[", "df", ".", "file_name", ".", "isin", "(", "vals", ")", ",", "'split'", "]", "=", "'val'", "\n", "df", ".", "loc", "[", "df", ".", "file_name", ".", "isin", "(", "tests", ")", ",", "'split'", "]", "=", "'test'", "\n", "assert", "len", "(", "df", "[", "df", ".", "split", "==", "'val'", "]", ")", "==", "[", "6798", ",", "9981", "]", "[", "version", "-", "1", "]", "# v1, v2", "\n", "assert", "len", "(", "df", "[", "df", ".", "split", "==", "'test'", "]", ")", "==", "[", "6835", ",", "11005", "]", "[", "version", "-", "1", "]", "# v1, v2", "\n", "df", ".", "to_csv", "(", "f'work/metadata/spcv{version}.csv'", ",", "index", "=", "False", ")", "\n", "\n", "# test", "\n", "df", "=", "pd", ".", "read_csv", "(", "f'work/metadata/spcv{version}.csv'", ")", ".", "set_index", "(", "'file_name'", ")", "\n", "assert", "len", "(", "df", ")", "==", "[", "64721", ",", "105829", "]", "[", "version", "-", "1", "]", "# v1, v2", "\n", "print", "(", "f'Created work/metadata/spcv{version}.csv - test passed'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.preprocess_ds.spcv1": [[142, 145], ["preprocess_ds.convert_spc_metadata", "convert_wav.convert_wav"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.utils.preprocess_ds.convert_spc_metadata", "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.convert_wav.convert_wav"], ["", "def", "spcv1", "(", "root", ")", ":", "\n", "    ", "convert_spc_metadata", "(", "root", ",", "version", "=", "1", ")", "\n", "convert_wav", "(", "root", ",", "'work/16k/spcv1'", ",", "verbose", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.preprocess_ds.spcv2": [[147, 150], ["preprocess_ds.convert_spc_metadata", "convert_wav.convert_wav"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.utils.preprocess_ds.convert_spc_metadata", "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.convert_wav.convert_wav"], ["", "def", "spcv2", "(", "root", ")", ":", "\n", "    ", "convert_spc_metadata", "(", "root", ",", "version", "=", "2", ")", "\n", "convert_wav", "(", "root", ",", "'work/16k/spcv2'", ",", "verbose", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.__init__.flatten_list": [[8, 10], ["list", "itertools.chain.from_iterable"], "function", ["None"], ["def", "flatten_list", "(", "lists", ")", ":", "\n", "    ", "return", "list", "(", "chain", ".", "from_iterable", "(", "lists", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.__init__.append_to_csv": [[12, 17], ["pathlib.Path", "pathlib.Path.parent.mkdir", "df.append().to_csv", "pathlib.Path.exists", "pandas.read_csv", "pandas.DataFrame", "df.append"], "function", ["None"], ["", "def", "append_to_csv", "(", "csv_filename", ",", "data", ")", ":", "\n", "    ", "filename", "=", "Path", "(", "csv_filename", ")", "\n", "filename", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "filename", ")", "if", "filename", ".", "exists", "(", ")", "else", "pd", ".", "DataFrame", "(", ")", "\n", "df", ".", "append", "(", "data", ",", "ignore_index", "=", "True", ")", ".", "to_csv", "(", "filename", ",", "index", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.BaseDataSource.__init__": [[95, 98], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "df", ",", "fold_idxes", ",", "loocv", ")", ":", "\n", "        ", "self", ".", "df", ",", "self", ".", "fold_idxes", ",", "self", ".", "loocv", "=", "df", ",", "fold_idxes", ",", "loocv", "\n", "self", ".", "get_idxes", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.BaseDataSource.labels": [[99, 104], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "labels", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "get_idxes", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "df", ".", "label", ".", "values", "[", "self", ".", "get_idxes", "]", "\n", "", "return", "self", ".", "df", ".", "label", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.BaseDataSource.__len__": [[105, 109], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "get_idxes", "is", "None", ":", "\n", "            ", "return", "len", "(", "self", ".", "df", ")", "\n", "", "return", "len", "(", "self", ".", "get_idxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.BaseDataSource.index_of_folds": [[110, 115], ["idxes.extend"], "methods", ["None"], ["", "def", "index_of_folds", "(", "self", ",", "folds", ")", ":", "\n", "        ", "idxes", "=", "[", "]", "\n", "for", "fold", "in", "folds", ":", "\n", "            ", "idxes", ".", "extend", "(", "self", ".", "fold_idxes", "[", "fold", "]", ")", "\n", "", "return", "idxes", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.BaseDataSource.subset_by_idxes": [[116, 120], ["copy.copy"], "methods", ["None"], ["", "def", "subset_by_idxes", "(", "self", ",", "idxes", ")", ":", "\n", "        ", "dup", "=", "copy", ".", "copy", "(", "self", ")", "\n", "dup", ".", "get_idxes", "=", "idxes", "\n", "return", "dup", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.BaseDataSource.subset": [[121, 126], ["downstream_tasks.BaseDataSource.subset_by_idxes", "downstream_tasks.BaseDataSource.index_of_folds"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.BaseDataSource.subset_by_idxes", "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.BaseDataSource.index_of_folds"], ["", "def", "subset", "(", "self", ",", "folds", ")", ":", "\n", "        ", "\"\"\"Returns a subset data source for the fold indexes.\n        folds: List of fold indexes.\n        \"\"\"", "\n", "return", "self", ".", "subset_by_idxes", "(", "self", ".", "index_of_folds", "(", "folds", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.BaseDataSource.n_folds": [[127, 130], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_folds", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "fold_idxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.BaseDataSource.n_classes": [[131, 134], ["len", "set"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "set", "(", "self", ".", "df", ".", "label", ".", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.BaseDataSource.real_index": [[135, 139], ["None"], "methods", ["None"], ["", "def", "real_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "get_idxes", "is", "not", "None", ":", "\n", "            ", "index", "=", "self", ".", "get_idxes", "[", "index", "]", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.TaskDataSource.__init__": [[158, 161], ["downstream_tasks.BaseDataSource.__init__", "pathlib.Path", "downstream_tasks.load_metadata"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__", "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.load_metadata"], ["def", "__init__", "(", "self", ",", "mode", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "load_metadata", "(", "mode", ",", "'.'", ")", ")", "\n", "self", ".", "audio_folder", "=", "Path", "(", "'work/16k/'", "+", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.TaskDataSource.file_name": [[162, 165], ["downstream_tasks.TaskDataSource.real_index"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.BaseDataSource.real_index"], ["", "def", "file_name", "(", "self", ",", "index", ")", ":", "\n", "        ", "index", "=", "self", ".", "real_index", "(", "index", ")", "\n", "return", "self", ".", "audio_folder", "/", "self", ".", "df", ".", "file_name", ".", "values", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.TaskDataSource.files": [[166, 169], ["downstream_tasks.TaskDataSource.file_name", "range", "len"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.TaskDataSource.file_name"], ["", "@", "property", "\n", "def", "files", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "file_name", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.read_task_df": [[26, 31], ["pandas.read_csv", "pd.read_csv.label.map", "pathlib.Path", "enumerate", "pd.read_csv.label.unique"], "function", ["None"], ["def", "read_task_df", "(", "task", ",", "base_folder", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "Path", "(", "base_folder", ")", "/", "f'work/metadata/{task}.csv'", ")", "\n", "# replace all str label with int label", "\n", "df", ".", "label", "=", "df", ".", "label", ".", "map", "(", "{", "l", ":", "i", "for", "i", ",", "l", "in", "enumerate", "(", "df", ".", "label", ".", "unique", "(", ")", ")", "}", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.get_us8k": [[33, 43], ["downstream_tasks.read_task_df", "read_task_df.file_name.map", "read_task_df.groupby", "print", "print", "int", "range", "len", "s.split"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.read_task_df"], ["", "def", "get_us8k", "(", "base_folder", ")", ":", "\n", "    ", "df", "=", "read_task_df", "(", "'us8k'", ",", "base_folder", ")", "\n", "# add fold column", "\n", "df", "[", "'fold'", "]", "=", "df", ".", "file_name", ".", "map", "(", "lambda", "s", ":", "int", "(", "s", ".", "split", "(", "'/'", ")", "[", "1", "]", "[", "4", ":", "]", ")", ")", "# 'audio/foldXX/*.wav'", "\n", "idxs", "=", "[", "None", "for", "_", "in", "range", "(", "10", ")", "]", "\n", "for", "i", ",", "sdf", "in", "df", ".", "groupby", "(", "'fold'", ")", ":", "\n", "        ", "idxs", "[", "i", "-", "1", "]", "=", "sdf", ".", "index", ".", "values", "\n", "print", "(", "f' {i}:{len(sdf)}'", ",", "end", "=", "''", ")", "\n", "", "print", "(", "' samples.'", ")", "\n", "return", "df", ",", "idxs", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.get_spc": [[45, 54], ["downstream_tasks.read_task_df", "numpy.all", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.read_task_df"], ["", "def", "get_spc", "(", "base_folder", ",", "ver", ")", ":", "\n", "    ", "df", "=", "read_task_df", "(", "f'spcv{ver}'", ",", "base_folder", ")", "\n", "# make split index", "\n", "idxs", "=", "[", "None", ",", "None", ",", "None", "]", "\n", "idxs", "[", "0", "]", "=", "df", "[", "df", ".", "split", "==", "'train'", "]", ".", "index", ".", "values", "\n", "idxs", "[", "1", "]", "=", "df", "[", "df", ".", "split", "==", "'val'", "]", ".", "index", ".", "values", "\n", "idxs", "[", "2", "]", "=", "df", "[", "df", ".", "split", "==", "'test'", "]", ".", "index", ".", "values", "\n", "assert", "np", ".", "all", "(", "np", ".", "array", "(", "[", "len", "(", "idx", ")", "for", "idx", "in", "idxs", "]", ")", ">", "0", ")", "\n", "return", "df", ",", "idxs", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.get_spcv1": [[56, 58], ["downstream_tasks.get_spc"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.get_spc"], ["", "def", "get_spcv1", "(", "base_folder", ")", ":", "\n", "    ", "return", "get_spc", "(", "base_folder", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.get_spcv2": [[60, 62], ["downstream_tasks.get_spc"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.get_spc"], ["", "def", "get_spcv2", "(", "base_folder", ")", ":", "\n", "    ", "return", "get_spc", "(", "base_folder", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.get_nsynth": [[64, 73], ["downstream_tasks.read_task_df", "numpy.all", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.read_task_df"], ["", "def", "get_nsynth", "(", "base_folder", ")", ":", "\n", "    ", "df", "=", "read_task_df", "(", "'nsynth'", ",", "base_folder", ")", "\n", "# make split index", "\n", "idxs", "=", "[", "None", ",", "None", ",", "None", "]", "\n", "idxs", "[", "0", "]", "=", "df", "[", "df", ".", "split", "==", "'train'", "]", ".", "index", ".", "values", "\n", "idxs", "[", "1", "]", "=", "df", "[", "df", ".", "split", "==", "'valid'", "]", ".", "index", ".", "values", "\n", "idxs", "[", "2", "]", "=", "df", "[", "df", ".", "split", "==", "'test'", "]", ".", "index", ".", "values", "\n", "assert", "np", ".", "all", "(", "np", ".", "array", "(", "[", "len", "(", "idx", ")", "for", "idx", "in", "idxs", "]", ")", ">", "0", ")", "\n", "return", "df", ",", "idxs", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.get_fsdnoisy18k": [[75, 84], ["downstream_tasks.read_task_df", "numpy.all", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.read_task_df"], ["", "def", "get_fsdnoisy18k", "(", "base_folder", ")", ":", "\n", "    ", "df", "=", "read_task_df", "(", "'fsdnoisy18k'", ",", "base_folder", ")", "\n", "# make split index", "\n", "idxs", "=", "[", "None", ",", "None", ",", "None", "]", "\n", "idxs", "[", "0", "]", "=", "df", "[", "df", ".", "split", "==", "'train'", "]", ".", "index", ".", "values", "\n", "idxs", "[", "1", "]", "=", "df", "[", "df", ".", "split", "==", "'valid'", "]", ".", "index", ".", "values", "\n", "idxs", "[", "2", "]", "=", "df", "[", "df", ".", "split", "==", "'test'", "]", ".", "index", ".", "values", "\n", "assert", "np", ".", "all", "(", "np", ".", "array", "(", "[", "len", "(", "idx", ")", "for", "idx", "in", "idxs", "]", ")", ">", "0", ")", "\n", "return", "df", ",", "idxs", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.load_metadata": [[86, 90], ["eval", "eval."], "function", ["None"], ["", "def", "load_metadata", "(", "mode", ",", "base", ")", ":", "\n", "    ", "getter", "=", "eval", "(", "'get_'", "+", "mode", ")", "\n", "df", ",", "fold_idxs", ",", "loocv", "=", "getter", "(", "base", ")", "\n", "return", "df", ",", "fold_idxs", ",", "loocv", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.create_data_source": [[171, 176], ["downstream_tasks.TaskDataSource"], "function", ["None"], ["", "", "def", "create_data_source", "(", "mode", ")", ":", "\n", "    ", "\"\"\"Creates data source object for downstream task you want.\"\"\"", "\n", "\n", "assert", "mode", "in", "[", "'us8k'", ",", "'spcv1'", ",", "'spcv2'", ",", "'nsynth'", ",", "'fsdnoisy18k'", "]", "\n", "return", "TaskDataSource", "(", "mode", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nttcslab_byol-a.test.test_dataset.TestUtils.setUp": [[10, 14], ["load_yaml_config", "utils.downstream_tasks.create_data_source().subset", "utils.downstream_tasks.create_data_source"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.load_yaml_config", "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.BaseDataSource.subset", "home.repos.pwc.inspect_result.nttcslab_byol-a.utils.downstream_tasks.create_data_source"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "load_yaml_config", "(", "'config.yaml'", ")", "\n", "self", ".", "files", "=", "create_data_source", "(", "'us8k'", ")", ".", "subset", "(", "[", "0", "]", ")", ".", "files", "\n", "self", ".", "cfg", ".", "unit_sec", "=", "4.0", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.test.test_dataset.TestUtils.tearDown": [[15, 17], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.test.test_dataset.TestUtils.test_WaveInLMSOutDataset": [[18, 42], ["WaveInLMSOutDataset", "ds[].mean().numpy", "WaveInLMSOutDataset", "range", "test_dataset.TestUtils.assertAlmostEqual", "np.isclose", "ds[].mean", "ds[].mean().numpy", "ds[].mean"], "methods", ["None"], ["", "def", "test_WaveInLMSOutDataset", "(", "self", ")", ":", "\n", "# Preparation: Check the length, and get the entire average of the first file.", "\n", "        ", "self", ".", "cfg", ".", "unit_sec", "=", "4.0", "\n", "ds", "=", "WaveInLMSOutDataset", "(", "self", ".", "cfg", ",", "self", ".", "files", ",", "labels", "=", "None", ",", "tfms", "=", "None", ")", "\n", "org_time_frames", "=", "ds", "[", "0", "]", ".", "shape", "[", "-", "1", "]", "# last dim is the time.", "\n", "assert", "org_time_frames", "==", "401", "\n", "base_mean", "=", "ds", "[", "0", "]", ".", "mean", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# https://github.com/nttcslab/byol-a/issues/9", "\n", "# Test with 1.0 s audio segments.", "\n", "# We expect the average of the random 1s sample of the same audio file will", "\n", "# converges to the average of entire audio file. We use the first file.", "\n", "# Procedure:", "\n", "# 1. We repeat getting 1s random sample to calculate moving average.", "\n", "# 2. Test if the moving average reaches to the average of entire audio sample.", "\n", "self", ".", "cfg", ".", "unit_sec", "=", "1.0", "\n", "ds", "=", "WaveInLMSOutDataset", "(", "self", ".", "cfg", ",", "self", ".", "files", ",", "labels", "=", "None", ",", "tfms", "=", "None", ")", "\n", "assert", "ds", "[", "0", "]", ".", "shape", "[", "-", "1", "]", "is", "101", "\n", "cur_mean", "=", "0.0", "\n", "for", "_", "in", "range", "(", "10000", ")", ":", "\n", "            ", "cur_mean", "=", "0.99", "*", "cur_mean", "+", "0.01", "*", "ds", "[", "0", "]", ".", "mean", "(", ")", ".", "numpy", "(", ")", "# moving average", "\n", "if", "np", ".", "isclose", "(", "cur_mean", ",", "base_mean", ",", "atol", "=", "1e-3", ")", ":", "\n", "                ", "break", "\n", "", "", "self", ".", "assertAlmostEqual", "(", "cur_mean", ",", "base_mean", ",", "places", "=", "2", ")", "\n", "# Possible failures:", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.v2.train_v2.AugmentationModule.__init__": [[40, 47], ["byol_a2.common.torch.nn.Sequential", "logging.info", "byol_a2.augmentations.MixupBYOLA", "byol_a2.augmentations.RandomResizeCrop", "byol_a2.augmentations.RandomLinearFader"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "epoch_samples", ",", "log_mixup_exp", "=", "True", ",", "mixup_ratio", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "train_transform", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "MixupBYOLA", "(", "ratio", "=", "mixup_ratio", ",", "log_mixup_exp", "=", "log_mixup_exp", ")", ",", "\n", "RandomResizeCrop", "(", "virtual_crop_scale", "=", "(", "1.0", ",", "1.5", ")", ",", "freq_scale", "=", "(", "0.6", ",", "1.5", ")", ",", "time_scale", "=", "(", "0.6", ",", "1.5", ")", ")", ",", "\n", "RandomLinearFader", "(", ")", ",", "\n", ")", "\n", "logging", ".", "info", "(", "f'Augmentatoions: {self.train_transform}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.v2.train_v2.AugmentationModule.__call__": [[48, 50], ["train_v2.AugmentationModule.train_transform", "train_v2.AugmentationModule.train_transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "train_transform", "(", "x", ")", ",", "self", ".", "train_transform", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.v2.train_v2.BYOLALearner.__init__": [[55, 72], ["pytorch_lightning.LightningModule.__init__", "byol_a2.byol_pytorch.BYOL", "byol_a2.augmentations.NormalizeBatch", "nnAudio.features.MelSpectrogram"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "model", ",", "tfms", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "learner", "=", "BYOL", "(", "model", ",", "image_size", "=", "cfg", ".", "shape", ",", "**", "kwargs", ")", "\n", "self", ".", "lr", "=", "cfg", ".", "lr", "\n", "self", ".", "tfms", "=", "tfms", "\n", "self", ".", "post_norm", "=", "NormalizeBatch", "(", ")", "\n", "self", ".", "to_spec", "=", "nnAudio", ".", "features", ".", "MelSpectrogram", "(", "\n", "sr", "=", "cfg", ".", "sample_rate", ",", "\n", "n_fft", "=", "cfg", ".", "n_fft", ",", "\n", "win_length", "=", "cfg", ".", "win_length", ",", "\n", "hop_length", "=", "cfg", ".", "hop_length", ",", "\n", "n_mels", "=", "cfg", ".", "n_mels", ",", "\n", "fmin", "=", "cfg", ".", "f_min", ",", "\n", "fmax", "=", "cfg", ".", "f_max", ",", "\n", "center", "=", "True", ",", "\n", "power", "=", "2", ",", "\n", "verbose", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.v2.train_v2.BYOLALearner.forward": [[74, 76], ["train_v2.BYOLALearner.learner"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images1", ",", "images2", ")", ":", "\n", "        ", "return", "self", ".", "learner", "(", "images1", ",", "images2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.v2.train_v2.BYOLALearner.training_step": [[77, 103], ["train_v2.BYOLALearner.to_spec.to", "train_v2.BYOLALearner.learner.to", "train_v2.BYOLALearner.pre_norm", "byol_a2.common.torch.stack", "byol_a2.common.torch.stack", "byol_a2.common.torch.cat", "train_v2.BYOLALearner.training_step.to_np"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "wavs", ",", "batch_idx", ")", ":", "\n", "        ", "def", "to_np", "(", "A", ")", ":", "return", "[", "a", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "a", "in", "A", "]", "\n", "# Convert raw audio into a log-mel spectrogram and pre-normalize it.", "\n", "self", ".", "to_spec", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "self", ".", "learner", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "lms_batch", "=", "(", "self", ".", "to_spec", "(", "wavs", ")", "+", "torch", ".", "finfo", "(", ")", ".", "eps", ")", ".", "log", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "lms_batch", "=", "self", ".", "pre_norm", "(", "lms_batch", ")", "\n", "# Create two augmented views.", "\n", "images1", ",", "images2", "=", "[", "]", ",", "[", "]", "\n", "for", "lms", "in", "lms_batch", ":", "\n", "            ", "img1", ",", "img2", "=", "self", ".", "tfms", "(", "lms", ")", "\n", "images1", ".", "append", "(", "img1", ")", ",", "images2", ".", "append", "(", "img2", ")", "\n", "", "images1", "=", "torch", ".", "stack", "(", "images1", ")", "\n", "images2", "=", "torch", ".", "stack", "(", "images2", ")", "\n", "paired_inputs", "=", "(", "images1", ",", "images2", ")", "\n", "# Form a batch and post-normalize it.", "\n", "bs", "=", "paired_inputs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "paired_inputs", "=", "torch", ".", "cat", "(", "paired_inputs", ")", "# [(B,1,T,F), (B,1,T,F)] -> (2*B,1,T,F)", "\n", "mb", ",", "sb", "=", "to_np", "(", "(", "paired_inputs", ".", "mean", "(", ")", ",", "paired_inputs", ".", "std", "(", ")", ")", ")", "\n", "paired_inputs", "=", "self", ".", "post_norm", "(", "paired_inputs", ")", "\n", "ma", ",", "sa", "=", "to_np", "(", "(", "paired_inputs", ".", "mean", "(", ")", ",", "paired_inputs", ".", "std", "(", ")", ")", ")", "\n", "# Forward to get a loss.", "\n", "loss", "=", "self", ".", "forward", "(", "paired_inputs", "[", ":", "bs", "]", ",", "paired_inputs", "[", "bs", ":", "]", ")", "\n", "for", "k", ",", "v", "in", "{", "'mb'", ":", "mb", ",", "'sb'", ":", "sb", ",", "'ma'", ":", "ma", ",", "'sa'", ":", "sa", "}", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "log", "(", "k", ",", "float", "(", "v", ")", ",", "prog_bar", "=", "True", ",", "on_step", "=", "False", ",", "on_epoch", "=", "True", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.v2.train_v2.BYOLALearner.configure_optimizers": [[104, 106], ["byol_a2.common.torch.optim.Adam", "train_v2.BYOLALearner.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.v2.train_v2.BYOLALearner.on_before_zero_grad": [[107, 109], ["train_v2.BYOLALearner.learner.update_moving_average"], "methods", ["None"], ["", "def", "on_before_zero_grad", "(", "self", ",", "_", ")", ":", "\n", "        ", "self", ".", "learner", ".", "update_moving_average", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.v2.train_v2.BYOLALearner.calc_norm_stats": [[110, 125], ["min", "logging.info", "train_v2.BYOLALearner.to_spec.to", "byol_a2.common.np.stack", "byol_a2.common.np.array", "logging.info", "byol_a2.augmentations.PrecomputedNorm", "len", "byol_a2.common.np.stack.extend", "len", "byol_a2.common.np.stack.mean", "byol_a2.common.np.stack.std", "len", "lms_batch.detach().cpu().numpy", "train_v2.BYOLALearner.to_spec", "lms_batch.detach().cpu", "wavs.to", "byol_a2.common.torch.finfo", "lms_batch.detach"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.std"], ["", "def", "calc_norm_stats", "(", "self", ",", "data_loader", ",", "n_stats", "=", "10000", ",", "device", "=", "'cuda'", ")", ":", "\n", "# Calculate normalization statistics from the training dataset.", "\n", "        ", "n_stats", "=", "min", "(", "n_stats", ",", "len", "(", "data_loader", ".", "dataset", ")", ")", "\n", "logging", ".", "info", "(", "f'Calculating mean/std using random {n_stats} samples from population {len(data_loader.dataset)} samples...'", ")", "\n", "self", ".", "to_spec", ".", "to", "(", "device", ")", "\n", "X", "=", "[", "]", "\n", "for", "wavs", "in", "data_loader", ":", "\n", "            ", "lms_batch", "=", "(", "self", ".", "to_spec", "(", "wavs", ".", "to", "(", "device", ")", ")", "+", "torch", ".", "finfo", "(", ")", ".", "eps", ")", ".", "log", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "X", ".", "extend", "(", "[", "x", "for", "x", "in", "lms_batch", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "\n", "if", "len", "(", "X", ")", ">=", "n_stats", ":", "break", "\n", "", "X", "=", "np", ".", "stack", "(", "X", ")", "\n", "norm_stats", "=", "np", ".", "array", "(", "[", "X", ".", "mean", "(", ")", ",", "X", ".", "std", "(", ")", "]", ")", "\n", "logging", ".", "info", "(", "f'  ==> mean/std: {norm_stats}, {norm_stats.shape} <- {X.shape}'", ")", "\n", "self", ".", "pre_norm", "=", "PrecomputedNorm", "(", "norm_stats", ")", "\n", "return", "norm_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.v2.train_v2.complete_cfg": [[127, 132], ["byol_a2.common.get_timestamp", "byol_a2.common.hash_text", "str", "str"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.get_timestamp", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.common.hash_text"], ["", "", "def", "complete_cfg", "(", "cfg", ")", ":", "\n", "# Set ID.", "\n", "    ", "cfg", ".", "id", "=", "(", "f'AudioNTT2022-BYOLA-{cfg.shape[0]}x{cfg.shape[1]}d{cfg.feature_d}-{get_timestamp()}'", "\n", "f'-e{cfg.epochs}b{cfg.bs}l{str(cfg.lr)[2:]}r{cfg.seed}-{hash_text(str(cfg), L=8)}'", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.v2.train_v2.main": [[134, 178], ["byol_a2.common.load_yaml_config", "int", "train_v2.complete_cfg", "byol_a2.common.get_logger", "logging.info", "byol_a2.common.seed_everything", "sorted", "train_v2.AugmentationModule", "byol_a2.dataset.WavDataset", "byol_a2.common.torch.utils.data.DataLoader", "logging.info", "logging.info", "byol_a2.models.AudioNTT2022", "train_v2.BYOLALearner", "train_v2.BYOLALearner.calc_norm_stats", "pytorch_lightning.Trainer", "pl.Trainer.fit", "to_file.parent.mkdir", "byol_a2.common.torch.save", "logging.info", "byol_a2.common.Path().glob", "byol_a2.models.load_pretrained_weights", "logging.info", "exit", "byol_a2.common.Path", "byol_a2.models.AudioNTT2022.state_dict", "multiprocessing.cpu_count", "byol_a2.common.Path", "len", "len"], "function", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.load_yaml_config", "home.repos.pwc.inspect_result.nttcslab_byol-a.v2.train_v2.complete_cfg", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.get_logger", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.seed_everything", "home.repos.pwc.inspect_result.nttcslab_byol-a.v2.train_v2.BYOLALearner.calc_norm_stats", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.models.load_pretrained_weights"], ["", "def", "main", "(", "audio_dir", ",", "config_path", "=", "'config_v2.yaml'", ",", "d", "=", "None", ",", "epochs", "=", "None", ",", "resume", "=", "None", ")", "->", "None", ":", "\n", "    ", "cfg", "=", "load_yaml_config", "(", "config_path", ")", "\n", "# Override configs", "\n", "cfg", ".", "feature_d", "=", "d", "or", "cfg", ".", "feature_d", "\n", "cfg", ".", "epochs", "=", "epochs", "or", "cfg", ".", "epochs", "\n", "cfg", ".", "resume", "=", "resume", "or", "cfg", ".", "resume", "\n", "cfg", ".", "unit_samples", "=", "int", "(", "cfg", ".", "sample_rate", "*", "cfg", ".", "unit_sec", ")", "\n", "complete_cfg", "(", "cfg", ")", "\n", "# Essentials", "\n", "get_logger", "(", "__name__", ")", "\n", "logging", ".", "info", "(", "cfg", ")", "\n", "seed_everything", "(", "cfg", ".", "seed", ")", "\n", "# Data preparation", "\n", "files", "=", "sorted", "(", "Path", "(", "audio_dir", ")", ".", "glob", "(", "'*.wav'", ")", ")", "\n", "tfms", "=", "AugmentationModule", "(", "epoch_samples", "=", "2", "*", "len", "(", "files", ")", ")", "\n", "ds", "=", "WavDataset", "(", "cfg", ",", "files", ",", "labels", "=", "None", ",", "tfms", "=", "None", ",", "random_crop", "=", "True", ")", "\n", "dl", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "ds", ",", "batch_size", "=", "cfg", ".", "bs", ",", "\n", "num_workers", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", "pin_memory", "=", "True", ",", "shuffle", "=", "True", ",", ")", "\n", "logging", ".", "info", "(", "f'Dataset: {len(files)} .wav files from {audio_dir}'", ")", "\n", "# Training preparation", "\n", "logging", ".", "info", "(", "f'Training {cfg.id}...'", ")", "\n", "# Model", "\n", "model", "=", "AudioNTT2022", "(", "n_mels", "=", "cfg", ".", "n_mels", ",", "d", "=", "cfg", ".", "feature_d", ")", "\n", "if", "cfg", ".", "resume", "is", "not", "None", ":", "\n", "        ", "load_pretrained_weights", "(", "model", ",", "cfg", ".", "resume", ")", "\n", "# Training", "\n", "", "learner", "=", "BYOLALearner", "(", "cfg", ",", "model", ",", "tfms", "=", "tfms", ",", "\n", "hidden_layer", "=", "-", "1", ",", "\n", "projection_size", "=", "cfg", ".", "proj_size", ",", "\n", "projection_hidden_size", "=", "cfg", ".", "proj_dim", ",", "\n", "moving_average_decay", "=", "cfg", ".", "ema_decay", ",", "\n", ")", "\n", "learner", ".", "calc_norm_stats", "(", "dl", ")", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "gpus", "=", "cfg", ".", "gpus", ",", "max_epochs", "=", "cfg", ".", "epochs", ",", "weights_summary", "=", "None", ",", "accelerator", "=", "\"ddp\"", ")", "\n", "trainer", ".", "fit", "(", "learner", ",", "dl", ")", "\n", "if", "trainer", ".", "interrupted", ":", "\n", "        ", "logging", ".", "info", "(", "'Terminated.'", ")", "\n", "exit", "(", "0", ")", "\n", "# Saving trained weight.", "\n", "", "to_file", "=", "Path", "(", "cfg", ".", "checkpoint_folder", ")", "/", "(", "cfg", ".", "id", "+", "'.pth'", ")", "\n", "to_file", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "to_file", ")", "\n", "logging", ".", "info", "(", "f'Saved weight as {to_file}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.to_evar.ar_byola2.AR_BYOLA2.__init__": [[16, 23], ["evar.ar_base.BaseAudioRepr.__init__", "evar.ar_base.ToLogMelSpec", "external.byol_a2.models.AudioNTT2022Encoder", "evar.model_utils.load_pretrained_weights"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.models.load_pretrained_weights"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", "=", "cfg", ")", "\n", "self", ".", "to_feature", "=", "ToLogMelSpec", "(", "cfg", ")", "\n", "\n", "self", ".", "body", "=", "AudioNTT2022Encoder", "(", "n_mels", "=", "cfg", ".", "n_mels", ",", "d", "=", "cfg", ".", "feature_d", ")", "\n", "if", "cfg", ".", "weight_file", "is", "not", "None", ":", "\n", "            ", "load_pretrained_weights", "(", "self", ".", "body", ",", "cfg", ".", "weight_file", ",", "model_key", "=", "'body'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.to_evar.ar_byola2.AR_BYOLA2.precompute": [[24, 26], ["evar.ar_base.calculate_norm_stats"], "methods", ["None"], ["", "", "def", "precompute", "(", "self", ",", "device", ",", "data_loader", ")", ":", "\n", "        ", "self", ".", "norm_stats", "=", "calculate_norm_stats", "(", "device", ",", "data_loader", ",", "self", ".", "to_feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.to_evar.ar_byola2.AR_BYOLA2.encode_frames": [[27, 34], ["ar_byola2.AR_BYOLA2.to_feature", "evar.ar_base.normalize_spectrogram", "x.transpose.transpose.unsqueeze", "ar_byola2.AR_BYOLA2.body", "x.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "encode_frames", "(", "self", ",", "batch_audio", ")", ":", "\n", "        ", "x", "=", "self", ".", "to_feature", "(", "batch_audio", ")", "\n", "x", "=", "normalize_spectrogram", "(", "self", ".", "norm_stats", ",", "x", ")", "# B,F,T", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "# -> B,1,F,T", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "# -> B,T,D=C*F", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "# -> B,D,T", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.to_evar.ar_byola2.AR_BYOLA2.forward": [[35, 39], ["ar_byola2.AR_BYOLA2.encode_frames", "evar.ar_base.temporal_pooling"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.to_evar.ar_byola2.AR_BYOLA2.encode_frames"], ["", "def", "forward", "(", "self", ",", "batch_audio", ")", ":", "\n", "        ", "x", "=", "self", ".", "encode_frames", "(", "batch_audio", ")", "\n", "x", "=", "temporal_pooling", "(", "self", ",", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.models.AudioNTT2022Encoder.__init__": [[61, 86], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "convs.extend", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["def", "__init__", "(", "self", ",", "n_mels", ",", "d", "=", "3072", ",", "base_d", "=", "64", ",", "mlp_hidden_d", "=", "2048", ",", "conv_layers", "=", "2", ",", "stack", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "convs", "=", "[", "\n", "nn", ".", "Conv2d", "(", "1", ",", "base_d", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "base_d", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", "]", "\n", "for", "c", "in", "range", "(", "1", ",", "conv_layers", ")", ":", "\n", "            ", "convs", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "base_d", ",", "base_d", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "base_d", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", "]", ")", "\n", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "self", ".", "conv_d", "=", "base_d", "*", "(", "n_mels", "//", "(", "2", "**", "conv_layers", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "conv_d", ",", "mlp_hidden_d", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.3", ")", ",", "\n", "nn", ".", "Linear", "(", "mlp_hidden_d", ",", "d", "-", "self", ".", "conv_d", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "stack", "=", "stack", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.models.AudioNTT2022Encoder.forward": [[87, 95], ["models.AudioNTT2022Encoder.features", "x.reshape.reshape.permute", "x.reshape.reshape.reshape", "models.AudioNTT2022Encoder.fc", "torch.hstack().transpose", "torch.hstack", "x.reshape.reshape.transpose", "models.AudioNTT2022Encoder.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "# (batch, ch, mel, time)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "# (batch, time, mel, ch)", "\n", "B", ",", "T", ",", "D", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "(", "B", ",", "T", ",", "C", "*", "D", ")", ")", "# (batch, time, mel*ch)", "\n", "x_fc", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "torch", ".", "hstack", "(", "[", "x", ".", "transpose", "(", "1", ",", "2", ")", ",", "x_fc", ".", "transpose", "(", "1", ",", "2", ")", "]", ")", ".", "transpose", "(", "1", ",", "2", ")", "if", "self", ".", "stack", "else", "x_fc", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.models.AudioNTT2022.__init__": [[98, 100], ["models.AudioNTT2022Encoder.__init__"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_mels", ",", "d", "=", "3072", ",", "mlp_hidden_d", "=", "2048", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_mels", "=", "n_mels", ",", "d", "=", "d", ",", "mlp_hidden_d", "=", "mlp_hidden_d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.models.AudioNTT2022.forward": [[101, 105], ["models.AudioNTT2022Encoder.forward", "models.mean_max_pooling"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.forward", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.models.mean_max_pooling"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "x", "=", "mean_max_pooling", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.models.load_pretrained_weights": [[18, 48], ["torch.load", "sorted", "logging.info", "print", "logging.info", "sorted", "list", "str", "list", "models.load_pretrained_weights.find_model_prm"], "function", ["None"], ["def", "load_pretrained_weights", "(", "model", ",", "pathname", ",", "model_key", "=", "'model'", ",", "strict", "=", "True", ")", ":", "\n", "    ", "state_dict", "=", "torch", ".", "load", "(", "pathname", ")", "\n", "if", "'state_dict'", "in", "state_dict", ":", "\n", "        ", "state_dict", "=", "state_dict", "[", "'state_dict'", "]", "\n", "", "if", "'model'", "in", "state_dict", ":", "\n", "        ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "", "children", "=", "sorted", "(", "[", "n", "+", "'.'", "for", "n", ",", "_", "in", "model", ".", "named_children", "(", ")", "]", ")", "\n", "\n", "# 'model.xxx' -> 'xxx\"", "\n", "weights", "=", "{", "}", "\n", "for", "k", "in", "state_dict", ":", "\n", "        ", "weights", "[", "k", "[", "len", "(", "model_key", ")", "+", "1", ":", "]", "if", "k", ".", "startswith", "(", "model_key", "+", "'.'", ")", "else", "k", "]", "=", "state_dict", "[", "k", "]", "\n", "", "state_dict", "=", "weights", "\n", "\n", "# model's parameter only", "\n", "def", "find_model_prm", "(", "k", ")", ":", "\n", "        ", "for", "name", "in", "children", ":", "\n", "            ", "if", "name", "in", "k", ":", "# ex) \"conv_block1\" in \"model.conv_block1.conv1.weight\"", "\n", "                ", "return", "k", "\n", "", "", "return", "None", "\n", "\n", "", "weights", "=", "{", "}", "\n", "for", "k", "in", "state_dict", ":", "\n", "        ", "if", "find_model_prm", "(", "k", ")", "is", "None", ":", "continue", "\n", "weights", "[", "k", "]", "=", "state_dict", "[", "k", "]", "\n", "\n", "", "logging", ".", "info", "(", "f' using network pretrained weight: {Path(pathname).name}'", ")", "\n", "print", "(", "list", "(", "weights", ".", "keys", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "str", "(", "model", ".", "load_state_dict", "(", "weights", ",", "strict", "=", "strict", ")", ")", ")", "\n", "return", "sorted", "(", "list", "(", "weights", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.models.mean_max_pooling": [[50, 56], ["torch.max", "torch.mean", "len"], "function", ["None"], ["", "def", "mean_max_pooling", "(", "frame_embeddings", ")", ":", "\n", "    ", "assert", "len", "(", "frame_embeddings", ".", "shape", ")", "==", "3", "# Batch,Time,Dimension", "\n", "(", "x1", ",", "_", ")", "=", "torch", ".", "max", "(", "frame_embeddings", ",", "dim", "=", "1", ")", "\n", "x2", "=", "torch", ".", "mean", "(", "frame_embeddings", ",", "dim", "=", "1", ")", "\n", "x", "=", "x1", "+", "x2", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.common.seed_everything": [[34, 41], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed"], "function", ["None"], ["def", "seed_everything", "(", "seed", "=", "42", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.common.get_timestamp": [[43, 46], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_timestamp", "(", ")", ":", "\n", "    ", "\"\"\"ex) Outputs 202104220830\"\"\"", "\n", "return", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d%H%M'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.common.load_yaml_config": [[48, 56], ["pathlib.Path", "pathlib.Path.is_file", "easydict.EasyDict", "open", "yaml.safe_load"], "function", ["None"], ["", "def", "load_yaml_config", "(", "path_to_config", ")", ":", "\n", "    ", "\"\"\"Loads yaml configuration settings as an EasyDict object.\"\"\"", "\n", "path_to_config", "=", "Path", "(", "path_to_config", ")", "\n", "assert", "path_to_config", ".", "is_file", "(", ")", "\n", "with", "open", "(", "path_to_config", ")", "as", "f", ":", "\n", "        ", "yaml_contents", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "", "cfg", "=", "EasyDict", "(", "yaml_contents", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.common.get_logger": [[58, 63], ["logging.basicConfig", "logging.getLogger"], "function", ["None"], ["", "def", "get_logger", "(", "name", ")", ":", "\n", "    ", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s %(levelname)s %(message)s'", ",", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M'", ",", "level", "=", "logging", ".", "DEBUG", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.common.hash_text": [[65, 69], ["hashlib.shake_128().hexdigest", "hashlib.shake_128", "text.encode"], "function", ["None"], ["", "def", "hash_text", "(", "text", ",", "L", "=", "128", ")", ":", "\n", "# not used -- hashed = base64.urlsafe_b64encode(hashlib.md5(text.encode()).digest()).decode('ascii')", "\n", "    ", "hashed", "=", "hashlib", ".", "shake_128", "(", "text", ".", "encode", "(", ")", ")", ".", "hexdigest", "(", "L", "//", "2", "+", "1", ")", "\n", "return", "hashed", "[", ":", "L", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.dataset.BaseRawAudioDataset.__init__": [[7, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "tfms", "=", "None", ",", "random_crop", "=", "False", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "tfms", "=", "tfms", "\n", "self", ".", "random_crop", "=", "random_crop", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.dataset.BaseRawAudioDataset.__len__": [[12, 14], ["NotImplementedError"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'implement me'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.dataset.BaseRawAudioDataset.get_audio": [[15, 17], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_audio", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'implement me'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.dataset.BaseRawAudioDataset.get_label": [[18, 20], ["None"], "methods", ["None"], ["", "def", "get_label", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "None", "# implement me", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.dataset.BaseRawAudioDataset.__getitem__": [[21, 41], ["dataset.BaseRawAudioDataset.get_audio", "len", "common.F.pad.to", "dataset.BaseRawAudioDataset.get_label", "dataset.BaseRawAudioDataset.tfms", "common.np.random.randint", "common.F.pad"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.dataset.WavDataset.get_audio", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.dataset.WavDataset.get_label"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "wav", "=", "self", ".", "get_audio", "(", "index", ")", "# shape is expected to be (cfg.unit_samples,)", "\n", "\n", "# Trim or stuff padding", "\n", "l", "=", "len", "(", "wav", ")", "\n", "unit_samples", "=", "self", ".", "cfg", ".", "unit_samples", "\n", "if", "l", ">", "unit_samples", ":", "\n", "            ", "start", "=", "np", ".", "random", ".", "randint", "(", "l", "-", "unit_samples", ")", "if", "self", ".", "random_crop", "else", "0", "\n", "wav", "=", "wav", "[", "start", ":", "start", "+", "unit_samples", "]", "\n", "", "elif", "l", "<", "unit_samples", ":", "\n", "            ", "wav", "=", "F", ".", "pad", "(", "wav", ",", "(", "0", ",", "unit_samples", "-", "l", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "", "wav", "=", "wav", ".", "to", "(", "torch", ".", "float", ")", "\n", "\n", "# Apply transforms", "\n", "if", "self", ".", "tfms", "is", "not", "None", ":", "\n", "            ", "wav", "=", "self", ".", "tfms", "(", "wav", ")", "\n", "\n", "# Return item", "\n", "", "label", "=", "self", ".", "get_label", "(", "index", ")", "\n", "return", "wav", "if", "label", "is", "None", "else", "(", "wav", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.dataset.WavDataset.__init__": [[44, 48], ["dataset.BaseRawAudioDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "audio_files", ",", "labels", ",", "tfms", "=", "None", ",", "random_crop", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", ",", "tfms", "=", "tfms", ",", "random_crop", "=", "random_crop", ")", "\n", "self", ".", "files", "=", "audio_files", "\n", "self", ".", "labels", "=", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.dataset.WavDataset.__len__": [[49, 51], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.dataset.WavDataset.get_audio": [[52, 57], ["common.torchaudio.load"], "methods", ["None"], ["", "def", "get_audio", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "files", "[", "index", "]", "\n", "wav", ",", "sr", "=", "torchaudio", ".", "load", "(", "filename", ")", "\n", "assert", "sr", "==", "self", ".", "cfg", ".", "sample_rate", ",", "f'Convert .wav files to {self.cfg.sample_rate} Hz. {filename} has {sr} Hz.'", "\n", "return", "wav", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.dataset.WavDataset.get_label": [[58, 60], ["common.torch.tensor"], "methods", ["None"], ["", "def", "get_label", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "None", "if", "self", ".", "labels", "is", "None", "else", "torch", ".", "tensor", "(", "self", ".", "labels", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RandomResizeCrop.__init__": [[20, 27], ["common.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["def", "__init__", "(", "self", ",", "virtual_crop_scale", "=", "(", "1.0", ",", "1.5", ")", ",", "freq_scale", "=", "(", "0.6", ",", "1.5", ")", ",", "time_scale", "=", "(", "0.6", ",", "1.5", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "virtual_crop_scale", "=", "virtual_crop_scale", "\n", "self", ".", "freq_scale", "=", "freq_scale", "\n", "self", ".", "time_scale", "=", "time_scale", "\n", "self", ".", "interpolation", "=", "'bicubic'", "\n", "assert", "time_scale", "[", "1", "]", ">=", "1.0", "and", "freq_scale", "[", "1", "]", ">=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RandomResizeCrop.get_params": [[28, 37], ["common.np.clip", "common.np.clip", "int", "int", "common.random.randint", "common.random.randint", "common.np.random.uniform", "common.np.random.uniform"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "virtual_crop_size", ",", "in_size", ",", "time_scale", ",", "freq_scale", ")", ":", "\n", "        ", "canvas_h", ",", "canvas_w", "=", "virtual_crop_size", "\n", "src_h", ",", "src_w", "=", "in_size", "\n", "h", "=", "np", ".", "clip", "(", "int", "(", "np", ".", "random", ".", "uniform", "(", "*", "freq_scale", ")", "*", "src_h", ")", ",", "1", ",", "canvas_h", ")", "\n", "w", "=", "np", ".", "clip", "(", "int", "(", "np", ".", "random", ".", "uniform", "(", "*", "time_scale", ")", "*", "src_w", ")", ",", "1", ",", "canvas_w", ")", "\n", "i", "=", "random", ".", "randint", "(", "0", ",", "canvas_h", "-", "h", ")", "if", "canvas_h", ">", "h", "else", "0", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "canvas_w", "-", "w", ")", "if", "canvas_w", ">", "w", "else", "0", "\n", "return", "i", ",", "j", ",", "h", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RandomResizeCrop.forward": [[38, 54], ["common.torch.zeros().to().to", "augmentations.RandomResizeCrop.get_params", "common.F.interpolate().squeeze", "common.F.interpolate().squeeze.to", "int", "zip", "common.torch.zeros().to", "common.F.interpolate", "crop.unsqueeze", "common.torch.zeros"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RandomResizeCrop.get_params"], ["", "def", "forward", "(", "self", ",", "lms", ")", ":", "\n", "# make virtual_crop_arear empty space (virtual crop area) and copy the input log mel spectrogram to th the center", "\n", "        ", "virtual_crop_size", "=", "[", "int", "(", "s", "*", "c", ")", "for", "s", ",", "c", "in", "zip", "(", "lms", ".", "shape", "[", "-", "2", ":", "]", ",", "self", ".", "virtual_crop_scale", ")", "]", "\n", "virtual_crop_area", "=", "(", "torch", ".", "zeros", "(", "(", "lms", ".", "shape", "[", "0", "]", ",", "virtual_crop_size", "[", "0", "]", ",", "virtual_crop_size", "[", "1", "]", ")", ")", "\n", ".", "to", "(", "torch", ".", "float", ")", ".", "to", "(", "lms", ".", "device", ")", ")", "\n", "_", ",", "lh", ",", "lw", "=", "virtual_crop_area", ".", "shape", "\n", "c", ",", "h", ",", "w", "=", "lms", ".", "shape", "\n", "x", ",", "y", "=", "(", "lw", "-", "w", ")", "//", "2", ",", "(", "lh", "-", "h", ")", "//", "2", "\n", "virtual_crop_area", "[", ":", ",", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "=", "lms", "\n", "# get random area", "\n", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "virtual_crop_area", ".", "shape", "[", "-", "2", ":", "]", ",", "lms", ".", "shape", "[", "-", "2", ":", "]", ",", "self", ".", "time_scale", ",", "self", ".", "freq_scale", ")", "\n", "crop", "=", "virtual_crop_area", "[", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", "\n", "# print(f'shapes {virtual_crop_area.shape} {crop.shape} -> {lms.shape}')", "\n", "lms", "=", "F", ".", "interpolate", "(", "crop", ".", "unsqueeze", "(", "0", ")", ",", "size", "=", "lms", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "mode", "=", "self", ".", "interpolation", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "0", ")", "\n", "return", "lms", ".", "to", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RandomResizeCrop.__repr__": [[55, 60], ["tuple", "tuple", "round", "round"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "f'(virtual_crop_size={self.virtual_crop_scale}'", "\n", "format_string", "+=", "', time_scale={0}'", ".", "format", "(", "tuple", "(", "round", "(", "s", ",", "4", ")", "for", "s", "in", "self", ".", "time_scale", ")", ")", "\n", "format_string", "+=", "', freq_scale={0})'", ".", "format", "(", "tuple", "(", "round", "(", "r", ",", "4", ")", "for", "r", "in", "self", ".", "freq_scale", ")", ")", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RandomLinearFader.__init__": [[63, 66], ["common.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gain", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gain", "=", "gain", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RandomLinearFader.forward": [[67, 73], ["common.torch.linspace().reshape().to", "common.torch.linspace().reshape", "common.np.random.rand", "common.torch.linspace"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "lms", ")", ":", "\n", "        ", "head", ",", "tail", "=", "self", ".", "gain", "*", "(", "(", "2.0", "*", "np", ".", "random", ".", "rand", "(", "2", ")", ")", "-", "1.0", ")", "# gain * U(-1., 1) for two ends", "\n", "T", "=", "lms", ".", "shape", "[", "2", "]", "\n", "slope", "=", "torch", ".", "linspace", "(", "head", ",", "tail", ",", "T", ",", "dtype", "=", "lms", ".", "dtype", ")", ".", "reshape", "(", "1", ",", "1", ",", "T", ")", ".", "to", "(", "lms", ".", "device", ")", "\n", "y", "=", "lms", "+", "slope", "# add liniear slope to log-scale input", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RandomLinearFader.__repr__": [[74, 77], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "f'(gain={self.gain})'", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.MixupBYOLA.__init__": [[95, 101], ["common.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["def", "__init__", "(", "self", ",", "ratio", "=", "0.2", ",", "n_memory", "=", "2048", ",", "log_mixup_exp", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "n", "=", "n_memory", "\n", "self", ".", "log_mixup_exp", "=", "log_mixup_exp", "\n", "self", ".", "memory_bank", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.MixupBYOLA.forward": [[102, 117], ["mixed.to", "common.np.random.random", "augmentations.log_mixup_exp", "common.np.random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.log_mixup_exp"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# mix random", "\n", "        ", "alpha", "=", "self", ".", "ratio", "*", "np", ".", "random", ".", "random", "(", ")", "\n", "if", "self", ".", "memory_bank", ":", "\n", "# get z as a mixing background sound", "\n", "            ", "z", "=", "self", ".", "memory_bank", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "memory_bank", ")", ")", "]", "\n", "# mix them", "\n", "mixed", "=", "log_mixup_exp", "(", "x", ",", "z", ",", "1.", "-", "alpha", ")", "if", "self", ".", "log_mixup_exp", "else", "alpha", "*", "z", "+", "(", "1.", "-", "alpha", ")", "*", "x", "\n", "", "else", ":", "\n", "            ", "mixed", "=", "x", "\n", "# update memory bank", "\n", "", "self", ".", "memory_bank", "=", "(", "self", ".", "memory_bank", "+", "[", "x", "]", ")", "[", "-", "self", ".", "n", ":", "]", "\n", "\n", "return", "mixed", ".", "to", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.MixupBYOLA.__repr__": [[118, 122], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "f'(ratio={self.ratio},n={self.n}'", "\n", "format_string", "+=", "f',log_mixup_exp={self.log_mixup_exp})'", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.MixGaussianNoise.__init__": [[129, 132], ["common.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["def", "__init__", "(", "self", ",", "ratio", "=", "0.2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.MixGaussianNoise.forward": [[133, 141], ["lms.exp", "common.torch.normal().exp().to", "mixed.log", "common.np.random.rand", "common.torch.normal().exp", "common.torch.finfo", "common.torch.normal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "lms", ")", ":", "\n", "        ", "x", "=", "lms", ".", "exp", "(", ")", "\n", "\n", "lambd", "=", "self", ".", "ratio", "*", "np", ".", "random", ".", "rand", "(", ")", "\n", "z", "=", "torch", ".", "normal", "(", "0", ",", "lambd", ",", "x", ".", "shape", ")", ".", "exp", "(", ")", ".", "to", "(", "lms", ".", "device", ")", "\n", "mixed", "=", "(", "1", "-", "lambd", ")", "*", "x", "+", "z", "+", "torch", ".", "finfo", "(", "x", ".", "dtype", ")", ".", "eps", "\n", "\n", "return", "mixed", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.MixGaussianNoise.__repr__": [[142, 145], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "f'(ratio={self.ratio})'", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RunningMean.__init__": [[150, 153], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "axis", ")", ":", "\n", "        ", "self", ".", "n", "=", "0", "\n", "self", ".", "axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RunningMean.put": [[154, 161], ["x.mean", "x.mean"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "x", ")", ":", "\n", "# https://math.stackexchange.com/questions/106700/incremental-averageing", "\n", "        ", "if", "self", ".", "n", "==", "0", ":", "\n", "            ", "self", ".", "mu", "=", "x", ".", "mean", "(", "self", ".", "axis", ",", "keepdims", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mu", "+=", "(", "x", ".", "mean", "(", "self", ".", "axis", ",", "keepdims", "=", "True", ")", "-", "self", ".", "mu", ")", "/", "self", ".", "n", "\n", "", "self", ".", "n", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RunningMean.__call__": [[162, 164], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RunningMean.__len__": [[165, 167], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RunningVariance.__init__": [[174, 177], ["augmentations.RunningVariance.update_mean", "augmentations.RunningMean"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.update_mean"], ["def", "__init__", "(", "self", ",", "axis", ",", "mean", ")", ":", "\n", "        ", "self", ".", "update_mean", "(", "mean", ")", "\n", "self", ".", "s2", "=", "RunningMean", "(", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RunningVariance.update_mean": [[178, 180], ["None"], "methods", ["None"], ["", "def", "update_mean", "(", "self", ",", "mean", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RunningVariance.put": [[181, 183], ["augmentations.RunningVariance.s2.put"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.put"], ["", "def", "put", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "s2", ".", "put", "(", "(", "x", "-", "self", ".", "mean", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RunningVariance.__call__": [[184, 186], ["augmentations.RunningVariance.s2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "s2", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RunningVariance.std": [[187, 189], ["common.np.sqrt", "augmentations.RunningVariance."], "methods", ["None"], ["", "def", "std", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sqrt", "(", "self", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RunningNorm.__init__": [[203, 208], ["common.nn.Module.__init__", "augmentations.RunningMean", "augmentations.RunningVariance"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["def", "__init__", "(", "self", ",", "epoch_samples", ",", "max_update_epochs", "=", "10", ",", "axis", "=", "[", "1", ",", "2", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_update", "=", "epoch_samples", "*", "max_update_epochs", "\n", "self", ".", "ema_mean", "=", "RunningMean", "(", "axis", ")", "\n", "self", ".", "ema_var", "=", "RunningVariance", "(", "axis", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RunningNorm.forward": [[209, 217], ["len", "augmentations.RunningNorm.ema_mean.put", "augmentations.RunningNorm.ema_var.update_mean", "augmentations.RunningNorm.ema_var.put", "augmentations.RunningNorm.ema_mean", "common.torch.clamp", "augmentations.RunningNorm.ema_mean", "augmentations.RunningNorm.ema_var.std", "common.torch.finfo", "common.torch.finfo"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.put", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.update_mean", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.put", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.std"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "ema_mean", ")", "<", "self", ".", "max_update", ":", "\n", "            ", "self", ".", "ema_mean", ".", "put", "(", "image", ")", "\n", "self", ".", "ema_var", ".", "update_mean", "(", "self", ".", "ema_mean", "(", ")", ")", "\n", "self", ".", "ema_var", ".", "put", "(", "image", ")", "\n", "self", ".", "mean", "=", "self", ".", "ema_mean", "(", ")", "\n", "self", ".", "std", "=", "torch", ".", "clamp", "(", "self", ".", "ema_var", ".", "std", "(", ")", ",", "torch", ".", "finfo", "(", ")", ".", "eps", ",", "torch", ".", "finfo", "(", ")", ".", "max", ")", "\n", "", "return", "(", "(", "image", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.RunningNorm.__repr__": [[218, 221], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "f'(max_update={self.max_update},axis={self.ema_mean.axis})'", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.PrecomputedNorm.__init__": [[231, 234], ["common.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["def", "__init__", "(", "self", ",", "stats", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", ",", "self", ".", "std", "=", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.PrecomputedNorm.forward": [[235, 237], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "(", "(", "X", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.PrecomputedNorm.__repr__": [[238, 241], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "f'(mean={self.mean}, std={self.std})'", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.NormalizeBatch.__init__": [[253, 256], ["common.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["def", "__init__", "(", "self", ",", "axis", "=", "[", "0", ",", "2", ",", "3", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.NormalizeBatch.forward": [[257, 261], ["X.mean", "common.torch.clamp", "X.std", "common.torch.finfo", "common.torch.finfo"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.std"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "_mean", "=", "X", ".", "mean", "(", "dim", "=", "self", ".", "axis", ",", "keepdims", "=", "True", ")", "\n", "_std", "=", "torch", ".", "clamp", "(", "X", ".", "std", "(", "dim", "=", "self", ".", "axis", ",", "keepdims", "=", "True", ")", ",", "torch", ".", "finfo", "(", ")", ".", "eps", ",", "torch", ".", "finfo", "(", ")", ".", "max", ")", "\n", "return", "(", "(", "X", "-", "_mean", ")", "/", "_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.NormalizeBatch.__repr__": [[262, 265], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "f'(axis={self.axis})'", "\n", "return", "format_string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a2.augmentations.log_mixup_exp": [[79, 84], ["xa.exp.exp", "xb.exp.exp", "common.torch.log", "common.torch.finfo"], "function", ["None"], ["", "", "def", "log_mixup_exp", "(", "xa", ",", "xb", ",", "alpha", ")", ":", "\n", "    ", "xa", "=", "xa", ".", "exp", "(", ")", "\n", "xb", "=", "xb", ".", "exp", "(", ")", "\n", "x", "=", "alpha", "*", "xa", "+", "(", "1.", "-", "alpha", ")", "*", "xb", "\n", "return", "torch", ".", "log", "(", "x", "+", "torch", ".", "finfo", "(", "x", ".", "dtype", ")", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.models.NetworkCommonMixIn.load_weight": [[20, 39], ["torch.load", "torch.load", "torch.load", "torch.load", "models.NetworkCommonMixIn.load_state_dict", "models.NetworkCommonMixIn.eval", "logging.info", "re.search", "re.search.start", "pathlib.Path"], "methods", ["None"], ["if", "'state_dict'", "in", "state_dict", ":", "\n", "        ", "state_dict", "=", "state_dict", "[", "'state_dict'", "]", "\n", "", "if", "'model'", "in", "state_dict", ":", "\n", "        ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "", "children", "=", "sorted", "(", "[", "n", "+", "'.'", "for", "n", ",", "_", "in", "model", ".", "named_children", "(", ")", "]", ")", "\n", "\n", "# 'model.xxx' -> 'xxx\"", "\n", "weights", "=", "{", "}", "\n", "for", "k", "in", "state_dict", ":", "\n", "        ", "weights", "[", "k", "[", "len", "(", "model_key", ")", "+", "1", ":", "]", "if", "k", ".", "startswith", "(", "model_key", "+", "'.'", ")", "else", "k", "]", "=", "state_dict", "[", "k", "]", "\n", "", "state_dict", "=", "weights", "\n", "\n", "# model's parameter only", "\n", "def", "find_model_prm", "(", "k", ")", ":", "\n", "        ", "for", "name", "in", "children", ":", "\n", "            ", "if", "name", "in", "k", ":", "# ex) \"conv_block1\" in \"model.conv_block1.conv1.weight\"", "\n", "                ", "return", "k", "\n", "", "", "return", "None", "\n", "\n", "", "weights", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.models.NetworkCommonMixIn.set_trainable": [[40, 43], ["models.NetworkCommonMixIn.parameters"], "methods", ["None"], ["for", "k", "in", "state_dict", ":", "\n", "        ", "if", "find_model_prm", "(", "k", ")", "is", "None", ":", "continue", "\n", "weights", "[", "k", "]", "=", "state_dict", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.models.AudioNTT2020Task6.__init__": [[49, 76], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["\n", "", "def", "mean_max_pooling", "(", "frame_embeddings", ")", ":", "\n", "    ", "assert", "len", "(", "frame_embeddings", ".", "shape", ")", "==", "3", "# Batch,Time,Dimension", "\n", "(", "x1", ",", "_", ")", "=", "torch", ".", "max", "(", "frame_embeddings", ",", "dim", "=", "1", ")", "\n", "x2", "=", "torch", ".", "mean", "(", "frame_embeddings", ",", "dim", "=", "1", ")", "\n", "x", "=", "x1", "+", "x2", "\n", "return", "x", "\n", "\n", "\n", "", "class", "AudioNTT2022Encoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"General Audio Feature Encoder Network\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "n_mels", ",", "d", "=", "3072", ",", "base_d", "=", "64", ",", "mlp_hidden_d", "=", "2048", ",", "conv_layers", "=", "2", ",", "stack", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "convs", "=", "[", "\n", "nn", ".", "Conv2d", "(", "1", ",", "base_d", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "base_d", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", "]", "\n", "for", "c", "in", "range", "(", "1", ",", "conv_layers", ")", ":", "\n", "            ", "convs", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "base_d", ",", "base_d", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "base_d", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", "]", ")", "\n", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.models.AudioNTT2020Task6.forward": [[77, 84], ["models.AudioNTT2020Task6.features", "models.AudioNTT2020Task6.permute", "models.AudioNTT2020Task6.reshape", "models.AudioNTT2020Task6.fc"], "methods", ["None"], ["self", ".", "conv_d", "=", "base_d", "*", "(", "n_mels", "//", "(", "2", "**", "conv_layers", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "conv_d", ",", "mlp_hidden_d", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.3", ")", ",", "\n", "nn", ".", "Linear", "(", "mlp_hidden_d", ",", "d", "-", "self", ".", "conv_d", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.models.AudioNTT2020.__init__": [[91, 93], ["models.AudioNTT2020Task6.__init__"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["x", "=", "x", ".", "reshape", "(", "(", "B", ",", "T", ",", "C", "*", "D", ")", ")", "# (batch, time, mel*ch)", "\n", "x_fc", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "torch", ".", "hstack", "(", "[", "x", ".", "transpose", "(", "1", ",", "2", ")", ",", "x_fc", ".", "transpose", "(", "1", ",", "2", ")", "]", ")", ".", "transpose", "(", "1", ",", "2", ")", "if", "self", ".", "stack", "else", "x_fc", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.models.AudioNTT2020.forward": [[94, 101], ["models.AudioNTT2020Task6.forward", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.forward"], ["return", "x", "\n", "\n", "\n", "", "", "class", "AudioNTT2022", "(", "AudioNTT2022Encoder", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_mels", ",", "d", "=", "3072", ",", "mlp_hidden_d", "=", "2048", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_mels", "=", "n_mels", ",", "d", "=", "d", ",", "mlp_hidden_d", "=", "mlp_hidden_d", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.seed_everything": [[34, 41], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed"], "function", ["None"], ["def", "seed_everything", "(", "seed", "=", "42", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.get_timestamp": [[43, 46], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_timestamp", "(", ")", ":", "\n", "    ", "\"\"\"ex) Outputs 202104220830\"\"\"", "\n", "return", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d%H%M'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.load_yaml_config": [[48, 56], ["pathlib.Path", "pathlib.Path.is_file", "easydict.EasyDict", "open", "yaml.safe_load"], "function", ["None"], ["", "def", "load_yaml_config", "(", "path_to_config", ")", ":", "\n", "    ", "\"\"\"Loads yaml configuration settings as an EasyDict object.\"\"\"", "\n", "path_to_config", "=", "Path", "(", "path_to_config", ")", "\n", "assert", "path_to_config", ".", "is_file", "(", ")", "\n", "with", "open", "(", "path_to_config", ")", "as", "f", ":", "\n", "        ", "yaml_contents", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "", "cfg", "=", "EasyDict", "(", "yaml_contents", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.common.get_logger": [[58, 63], ["logging.basicConfig", "logging.getLogger"], "function", ["None"], ["", "def", "get_logger", "(", "name", ")", ":", "\n", "    ", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s %(levelname)s %(message)s'", ",", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M'", ",", "level", "=", "logging", ".", "DEBUG", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.dataset.MelSpectrogramLibrosa.__init__": [[9, 12], ["librosa.filters.mel"], "methods", ["None"], ["self", ".", "tfms", "=", "tfms", "\n", "self", ".", "random_crop", "=", "random_crop", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.dataset.MelSpectrogramLibrosa.__call__": [[13, 16], ["librosa.stft", "common.torch.tensor", "common.np.array", "common.np.matmul", "common.np.abs", "common.np.finfo"], "methods", ["None"], ["        ", "raise", "NotImplementedError", "(", "'implement me'", ")", "\n", "\n", "", "def", "get_audio", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'implement me'", ")", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.dataset.WaveInLMSOutDataset.__init__": [[34, 61], ["common.Dataset.__init__", "int", "dataset.MelSpectrogramLibrosa", "common.AT.MelSpectrogram", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["# Apply transforms", "\n", "if", "self", ".", "tfms", "is", "not", "None", ":", "\n", "            ", "wav", "=", "self", ".", "tfms", "(", "wav", ")", "\n", "\n", "# Return item", "\n", "", "label", "=", "self", ".", "get_label", "(", "index", ")", "\n", "return", "wav", "if", "label", "is", "None", "else", "(", "wav", ",", "label", ")", "\n", "\n", "\n", "", "", "class", "WavDataset", "(", "BaseRawAudioDataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ",", "audio_files", ",", "labels", ",", "tfms", "=", "None", ",", "random_crop", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", ",", "tfms", "=", "tfms", ",", "random_crop", "=", "random_crop", ")", "\n", "self", ".", "files", "=", "audio_files", "\n", "self", ".", "labels", "=", "labels", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n", "", "def", "get_audio", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "files", "[", "index", "]", "\n", "wav", ",", "sr", "=", "torchaudio", ".", "load", "(", "filename", ")", "\n", "assert", "sr", "==", "self", ".", "cfg", ".", "sample_rate", ",", "f'Convert .wav files to {self.cfg.sample_rate} Hz. {filename} has {sr} Hz.'", "\n", "return", "wav", "[", "0", "]", "\n", "\n", "", "def", "get_label", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "None", "if", "self", ".", "labels", "is", "None", "else", "torch", ".", "tensor", "(", "self", ".", "labels", "[", "index", "]", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.dataset.WaveInLMSOutDataset.__len__": [[63, 65], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.dataset.WaveInLMSOutDataset.__getitem__": [[66, 94], ["common.torchaudio.load", "len", "common.F.pad", "len", "common.random.randint", "dataset.WaveInLMSOutDataset.tfms", "common.torch.tensor", "dataset.WaveInLMSOutDataset.to_melspecgram", "common.torch.finfo"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RandomResizeCrop.__init__": [[20, 27], ["common.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["def", "__init__", "(", "self", ",", "virtual_crop_scale", "=", "(", "1.0", ",", "1.5", ")", ",", "freq_scale", "=", "(", "0.6", ",", "1.5", ")", ",", "time_scale", "=", "(", "0.6", ",", "1.5", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "virtual_crop_scale", "=", "virtual_crop_scale", "\n", "self", ".", "freq_scale", "=", "freq_scale", "\n", "self", ".", "time_scale", "=", "time_scale", "\n", "self", ".", "interpolation", "=", "'bicubic'", "\n", "assert", "time_scale", "[", "1", "]", ">=", "1.0", "and", "freq_scale", "[", "1", "]", ">=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RandomResizeCrop.get_params": [[28, 37], ["common.np.clip", "common.np.clip", "int", "int", "common.random.randint", "common.random.randint", "common.np.random.uniform", "common.np.random.uniform"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "virtual_crop_size", ",", "in_size", ",", "time_scale", ",", "freq_scale", ")", ":", "\n", "        ", "canvas_h", ",", "canvas_w", "=", "virtual_crop_size", "\n", "src_h", ",", "src_w", "=", "in_size", "\n", "h", "=", "np", ".", "clip", "(", "int", "(", "np", ".", "random", ".", "uniform", "(", "*", "freq_scale", ")", "*", "src_h", ")", ",", "1", ",", "canvas_h", ")", "\n", "w", "=", "np", ".", "clip", "(", "int", "(", "np", ".", "random", ".", "uniform", "(", "*", "time_scale", ")", "*", "src_w", ")", ",", "1", ",", "canvas_w", ")", "\n", "i", "=", "random", ".", "randint", "(", "0", ",", "canvas_h", "-", "h", ")", "if", "canvas_h", ">", "h", "else", "0", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "canvas_w", "-", "w", ")", "if", "canvas_w", ">", "w", "else", "0", "\n", "return", "i", ",", "j", ",", "h", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RandomResizeCrop.forward": [[38, 54], ["common.torch.zeros().to().to", "augmentations.RandomResizeCrop.get_params", "common.F.interpolate().squeeze", "common.F.interpolate().squeeze.to", "int", "zip", "common.torch.zeros().to", "common.F.interpolate", "crop.unsqueeze", "common.torch.zeros"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RandomResizeCrop.get_params"], ["", "def", "forward", "(", "self", ",", "lms", ")", ":", "\n", "# make virtual_crop_arear empty space (virtual crop area) and copy the input log mel spectrogram to th the center", "\n", "        ", "virtual_crop_size", "=", "[", "int", "(", "s", "*", "c", ")", "for", "s", ",", "c", "in", "zip", "(", "lms", ".", "shape", "[", "-", "2", ":", "]", ",", "self", ".", "virtual_crop_scale", ")", "]", "\n", "virtual_crop_area", "=", "(", "torch", ".", "zeros", "(", "(", "lms", ".", "shape", "[", "0", "]", ",", "virtual_crop_size", "[", "0", "]", ",", "virtual_crop_size", "[", "1", "]", ")", ")", "\n", ".", "to", "(", "torch", ".", "float", ")", ".", "to", "(", "lms", ".", "device", ")", ")", "\n", "_", ",", "lh", ",", "lw", "=", "virtual_crop_area", ".", "shape", "\n", "c", ",", "h", ",", "w", "=", "lms", ".", "shape", "\n", "x", ",", "y", "=", "(", "lw", "-", "w", ")", "//", "2", ",", "(", "lh", "-", "h", ")", "//", "2", "\n", "virtual_crop_area", "[", ":", ",", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "=", "lms", "\n", "# get random area", "\n", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "virtual_crop_area", ".", "shape", "[", "-", "2", ":", "]", ",", "lms", ".", "shape", "[", "-", "2", ":", "]", ",", "self", ".", "time_scale", ",", "self", ".", "freq_scale", ")", "\n", "crop", "=", "virtual_crop_area", "[", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", "\n", "# print(f'shapes {virtual_crop_area.shape} {crop.shape} -> {lms.shape}')", "\n", "lms", "=", "F", ".", "interpolate", "(", "crop", ".", "unsqueeze", "(", "0", ")", ",", "size", "=", "lms", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "mode", "=", "self", ".", "interpolation", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "0", ")", "\n", "return", "lms", ".", "to", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RandomResizeCrop.__repr__": [[55, 60], ["tuple", "tuple", "round", "round"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "f'(virtual_crop_size={self.virtual_crop_scale}'", "\n", "format_string", "+=", "', time_scale={0}'", ".", "format", "(", "tuple", "(", "round", "(", "s", ",", "4", ")", "for", "s", "in", "self", ".", "time_scale", ")", ")", "\n", "format_string", "+=", "', freq_scale={0})'", ".", "format", "(", "tuple", "(", "round", "(", "r", ",", "4", ")", "for", "r", "in", "self", ".", "freq_scale", ")", ")", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.MixupBYOLA.__init__": [[78, 84], ["common.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["\n", "", "", "def", "log_mixup_exp", "(", "xa", ",", "xb", ",", "alpha", ")", ":", "\n", "    ", "xa", "=", "xa", ".", "exp", "(", ")", "\n", "xb", "=", "xb", ".", "exp", "(", ")", "\n", "x", "=", "alpha", "*", "xa", "+", "(", "1.", "-", "alpha", ")", "*", "xb", "\n", "return", "torch", ".", "log", "(", "x", "+", "torch", ".", "finfo", "(", "x", ".", "dtype", ")", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.MixupBYOLA.forward": [[85, 100], ["mixed.to", "common.np.random.random", "augmentations.log_mixup_exp", "common.np.random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.log_mixup_exp"], ["\n", "", "class", "MixupBYOLA", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Mixup for BYOL-A.\n\n    Args:\n        ratio: Alpha in the paper.\n        n_memory: Size of memory bank FIFO.\n        log_mixup_exp: Use log-mixup-exp to mix if this is True, or mix without notion of log-scale.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "ratio", "=", "0.2", ",", "n_memory", "=", "2048", ",", "log_mixup_exp", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "n", "=", "n_memory", "\n", "self", ".", "log_mixup_exp", "=", "log_mixup_exp", "\n", "self", ".", "memory_bank", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.MixupBYOLA.__repr__": [[101, 105], ["None"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# mix random", "\n", "        ", "alpha", "=", "self", ".", "ratio", "*", "np", ".", "random", ".", "random", "(", ")", "\n", "if", "self", ".", "memory_bank", ":", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.MixGaussianNoise.__init__": [[112, 114], ["None"], "methods", ["None"], ["            ", "mixed", "=", "x", "\n", "# update memory bank", "\n", "", "self", ".", "memory_bank", "=", "(", "self", ".", "memory_bank", "+", "[", "x", "]", ")", "[", "-", "self", ".", "n", ":", "]", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.MixGaussianNoise.forward": [[115, 123], ["lms.exp", "common.torch.normal().exp", "mixed.log", "common.np.random.rand", "common.torch.normal", "common.torch.finfo"], "methods", ["None"], ["\n", "return", "mixed", ".", "to", "(", "torch", ".", "float", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "f'(ratio={self.ratio},n={self.n}'", "\n", "format_string", "+=", "f',log_mixup_exp={self.log_mixup_exp})'", "\n", "return", "format_string", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.MixGaussianNoise.__repr__": [[124, 127], ["None"], "methods", ["None"], ["", "", "class", "MixGaussianNoise", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Gaussian Noise Mixer.\n    This interpolates with random sample, unlike Mixup.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningMean.__init__": [[132, 135], ["None"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "lms", ")", ":", "\n", "        ", "x", "=", "lms", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningMean.put": [[136, 143], ["x.mean", "x.mean"], "methods", ["None"], ["lambd", "=", "self", ".", "ratio", "*", "np", ".", "random", ".", "rand", "(", ")", "\n", "z", "=", "torch", ".", "normal", "(", "0", ",", "lambd", ",", "x", ".", "shape", ")", ".", "exp", "(", ")", ".", "to", "(", "lms", ".", "device", ")", "\n", "mixed", "=", "(", "1", "-", "lambd", ")", "*", "x", "+", "z", "+", "torch", ".", "finfo", "(", "x", ".", "dtype", ")", ".", "eps", "\n", "\n", "return", "mixed", ".", "log", "(", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "f'(ratio={self.ratio})'", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningMean.__call__": [[144, 146], ["None"], "methods", ["None"], ["return", "format_string", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningMean.__len__": [[147, 149], ["None"], "methods", ["None"], ["", "", "class", "RunningMean", ":", "\n", "    ", "\"\"\"Running mean calculator for arbitrary axis configuration.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.__init__": [[156, 159], ["augmentations.RunningVariance.update_mean", "augmentations.RunningMean"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.update_mean"], ["        ", "if", "self", ".", "n", "==", "0", ":", "\n", "            ", "self", ".", "mu", "=", "x", ".", "mean", "(", "self", ".", "axis", ",", "keepdims", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mu", "+=", "(", "x", ".", "mean", "(", "self", ".", "axis", ",", "keepdims", "=", "True", ")", "-", "self", ".", "mu", ")", "/", "self", ".", "n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.update_mean": [[160, 162], ["None"], "methods", ["None"], ["", "self", ".", "n", "+=", "1", "\n", "\n", "", "def", "__call__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.put": [[163, 165], ["augmentations.RunningVariance.s2.put"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.put"], ["        ", "return", "self", ".", "mu", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.__call__": [[166, 168], ["augmentations.RunningVariance.s2"], "methods", ["None"], ["        ", "return", "self", ".", "n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.std": [[169, 171], ["common.np.sqrt", "augmentations.RunningVariance."], "methods", ["None"], ["", "", "class", "RunningVariance", ":", "\n", "    "]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningNorm.__init__": [[185, 190], ["common.nn.Module.__init__", "augmentations.RunningMean", "augmentations.RunningVariance"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["        ", "return", "self", ".", "s2", "(", ")", "\n", "\n", "", "def", "std", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sqrt", "(", "self", "(", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningNorm.forward": [[191, 199], ["len", "augmentations.RunningNorm.ema_mean.put", "augmentations.RunningNorm.ema_var.update_mean", "augmentations.RunningNorm.ema_var.put", "augmentations.RunningNorm.ema_mean", "common.torch.clamp", "augmentations.RunningNorm.ema_mean", "augmentations.RunningNorm.ema_var.std", "common.torch.finfo", "common.torch.finfo"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.put", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.update_mean", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.put", "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.std"], ["", "", "class", "RunningNorm", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningNorm.__repr__": [[200, 203], ["None"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "epoch_samples", ",", "max_update_epochs", "=", "10", ",", "axis", "=", "[", "1", ",", "2", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.PrecomputedNorm.__init__": [[213, 217], ["common.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["self", ".", "ema_var", ".", "put", "(", "image", ")", "\n", "self", ".", "mean", "=", "self", ".", "ema_mean", "(", ")", "\n", "self", ".", "std", "=", "torch", ".", "clamp", "(", "self", ".", "ema_var", ".", "std", "(", ")", ",", "torch", ".", "finfo", "(", ")", ".", "eps", ",", "torch", ".", "finfo", "(", ")", ".", "max", ")", "\n", "", "return", "(", "(", "image", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.PrecomputedNorm.forward": [[218, 220], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "f'(max_update={self.max_update},axis={self.ema_mean.axis})'", "\n", "return", "format_string", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.PrecomputedNorm.__repr__": [[221, 224], ["None"], "methods", ["None"], ["\n", "\n", "", "", "class", "PrecomputedNorm", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__": [[236, 239], ["common.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__init__"], ["        ", "return", "(", "(", "X", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "f'(mean={self.mean}, std={self.std})'", "\n"]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.forward": [[240, 244], ["X.mean", "common.torch.clamp", "X.std", "common.torch.finfo", "common.torch.finfo"], "methods", ["home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.RunningVariance.std"], ["return", "format_string", "\n", "\n", "\n", "", "", "class", "NormalizeBatch", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.NormalizeBatch.__repr__": [[245, 248], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nttcslab_byol-a.byol_a.augmentations.log_mixup_exp": [[62, 67], ["xa.exp.exp", "xb.exp.exp", "common.torch.log", "common.torch.finfo"], "function", ["None"], ["", "", "class", "RandomLinearFader", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "gain", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gain", "=", "gain", "\n", "\n", "", "def", "forward", "(", "self", ",", "lms", ")", ":", "\n"]]}