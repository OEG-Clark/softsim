{"home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.None.minimization.f": [[3, 7], ["None"], "function", ["None"], ["def", "f", "(", "z", ")", ":", "\n", "    ", "Egreedy", "=", "(", "z", "[", "0", "]", "+", "z", "[", "1", "]", ")", "*", "1", "+", "(", "z", "[", "2", "]", "+", "z", "[", "4", "]", "+", "z", "[", "5", "]", ")", "*", "2", "+", "(", "z", "[", "3", "]", "+", "z", "[", "6", "]", ")", "*", "3", "\n", "Esmart", "=", "(", "z", "[", "0", "]", "+", "z", "[", "3", "]", ")", "*", "1", "+", "(", "z", "[", "1", "]", "+", "z", "[", "2", "]", "+", "z", "[", "4", "]", "+", "z", "[", "5", "]", "+", "z", "[", "6", "]", ")", "*", "2", "\n", "return", "Esmart", "-", "Egreedy", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.None.minimization.tsts": [[31, 36], ["print", "print", "print", "print", "sum"], "function", ["None"], ["def", "tsts", "(", "z", ")", ":", "\n", "    ", "print", "(", "(", "(", "z", "[", "0", "]", "+", "z", "[", "1", "]", ")", "*", "1", "+", "(", "z", "[", "2", "]", "+", "z", "[", "4", "]", "+", "z", "[", "5", "]", "+", "z", "[", "6", "]", ")", "*", "2", "+", "z", "[", "3", "]", "*", "3", ")", ")", "\n", "print", "(", "(", "(", "z", "[", "0", "]", "+", "z", "[", "3", "]", "+", "z", "[", "6", "]", ")", "*", "1", "+", "(", "z", "[", "1", "]", "+", "z", "[", "2", "]", "+", "z", "[", "4", "]", "+", "z", "[", "5", "]", ")", "*", "2", ")", ")", "\n", "print", "(", "(", "(", "z", "[", "2", "]", "+", "z", "[", "5", "]", ")", "*", "1", "+", "(", "z", "[", "0", "]", "+", "z", "[", "1", "]", "+", "z", "[", "4", "]", "+", "z", "[", "6", "]", ")", "*", "2", "+", "z", "[", "3", "]", "*", "3", ")", ")", "\n", "print", "(", "sum", "(", "z", ")", ")", "\n", "", "tsts", "(", "z0", ")", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.None.calculations.f": [[3, 5], ["None"], "function", ["None"], ["def", "f", "(", "z", ")", ":", "\n", "    ", "return", "z", "[", "0", "]", "-", "z", "[", "1", "]", "-", "z", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.__init__": [[12, 51], ["numpy.random.RandomState", "antibioticsdatabase.AntibioticsDatabase.random.seed", "antibioticsdatabase.AntibioticsDatabase.init_database", "Database.treatment_to_test.treatment_to_test.items", "print", "antibioticsdatabase.AntibioticsDatabase.allowed_organisms.keys", "antibioticsdatabase.AntibioticsDatabase.add_organism_too_dict", "antibioticsdatabase.AntibioticsDatabase.add_treatment_to_dict"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.init_database", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.add_organism_too_dict", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.add_treatment_to_dict"], ["    ", "def", "__init__", "(", "self", ",", "n_x", "=", "6", ",", "antibiotic_limit", "=", "50", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "random", "=", "np", ".", "random", ".", "RandomState", "(", ")", "\n", "self", ".", "random", ".", "seed", "(", "seed", ")", "\n", "self", ".", "antibiotic_to_treatment_dict", "=", "{", "}", "\n", "self", ".", "antibiotic_counter", "=", "0", "\n", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "antibiotic_limit", "=", "antibiotic_limit", "\n", "self", ".", "organism_counter", "=", "0", "\n", "self", ".", "organism_to_x_dict", "=", "{", "}", "\n", "self", ".", "n_training_samples", "=", "None", "\n", "self", ".", "antibiotics_training_data", "=", "None", "\n", "self", ".", "antibiotics_test_data", "=", "None", "\n", "self", ".", "name", "=", "'Antibiotics'", "\n", "self", ".", "n_a", "=", "None", "\n", "self", ".", "n_y", "=", "3", "\n", "self", ".", "max_outcome", "=", "self", ".", "n_y", "-", "1", "\n", "\n", "self", ".", "init_database", "(", ")", "\n", "\n", "self", ".", "treatment_to_test", "=", "treatment_to_test", "\n", "count_working", "=", "0", "\n", "count_not_working", "=", "0", "\n", "for", "key", ",", "item", "in", "treatment_to_test", ".", "items", "(", ")", ":", "\n", "            ", "if", "item", "==", "None", ":", "\n", "                ", "count_not_working", "+=", "1", "\n", "", "else", ":", "\n", "                ", "count_working", "+=", "1", "\n", "", "", "print", "(", "'Antibiotics found as both treatment and test:'", ",", "count_working", ",", "', not found:'", ",", "count_not_working", ")", "\n", "self", ".", "allowed_tests", "=", "{", "'CEFTAZIDIME'", ":", "True", ",", "'PIPERACILLIN/TAZO'", ":", "True", ",", "'CEFEPIME'", ":", "True", ",", "\n", "'TOBRAMYCIN'", ":", "True", ",", "'GENTAMICIN'", ":", "True", ",", "'MEROPENEM'", ":", "True", "}", "\n", "self", ".", "allowed_organisms", "=", "{", "'ESCHERICHIA COLI'", ":", "True", ",", "'PSEUDOMONAS AERUGINOSA'", ":", "True", ",", "'KLEBSIELLA PNEUMONIAE'", ":", "True", ",", "'PROTEUS MIRABILIS'", ":", "True", "}", "\n", "#self.allowed_organisms = almost_all_organisms", "\n", "for", "organism", "in", "self", ".", "allowed_organisms", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "add_organism_too_dict", "(", "organism", ")", "\n", "\n", "", "for", "test", "in", "self", ".", "allowed_tests", ":", "\n", "            ", "self", ".", "add_treatment_to_dict", "(", "test", ")", "\n", "\n", "", "self", ".", "doctor_data", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.init_database": [[52, 57], ["base64.b64decode().decode", "psycopg2.connect", "antibioticsdatabase.AntibioticsDatabase.conn.cursor", "antibioticsdatabase.AntibioticsDatabase.cur.execute", "base64.b64decode"], "methods", ["None"], ["", "def", "init_database", "(", "self", ")", ":", "\n", "        ", "pw", "=", "base64", ".", "b64decode", "(", "b'aGVhbHRoeUFJ'", ")", ".", "decode", "(", "\"utf-8\"", ")", "# Local password to postgres mimic DB", "\n", "self", ".", "conn", "=", "psycopg2", ".", "connect", "(", "database", "=", "\"mimic\"", ",", "user", "=", "\"postgres\"", ",", "password", "=", "pw", ")", "\n", "self", ".", "cur", "=", "self", ".", "conn", ".", "cursor", "(", ")", "\n", "self", ".", "cur", ".", "execute", "(", "'set search_path=mimiciii'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_n_a": [[58, 60], ["min"], "methods", ["None"], ["", "def", "get_n_a", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "self", ".", "antibiotic_counter", ",", "self", ".", "antibiotic_limit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_data": [[61, 163], ["antibioticsdatabase.AntibioticsDatabase.cur.execute", "antibioticsdatabase.AntibioticsDatabase.cur.fetchall", "antibioticsdatabase.AntibioticsDatabase.random.shuffle", "antibioticsdatabase.AntibioticsDatabase.remove_patients", "antibioticsdatabase.AntibioticsDatabase.cur.execute", "antibioticsdatabase.AntibioticsDatabase.cur.fetchall", "antibioticsdatabase.AntibioticsDatabase.remove_input_patients", "antibioticsdatabase.AntibioticsDatabase.split_training_to_test", "len", "antibioticsdatabase.AntibioticsDatabase.load_comorbidities", "patients.items", "antibioticsdatabase.AntibioticsDatabase.items", "print", "print", "print", "print", "antibioticsdatabase.interpretation_to_outcome", "antibioticsdatabase.AntibioticsDatabase.get_age_group_2x", "antibioticsdatabase.AntibioticsDatabase.antibiotic_to_treatment", "antibioticsdatabase.AntibioticsDatabase.allowed_tests.keys", "antibioticsdatabase.AntibioticsDatabase.items", "organism_and_history.items", "numpy.array", "antibioticsdatabase.AntibioticsDatabase.antibiotic_to_treatment", "patients[].keys", "antibioticsdatabase.AntibioticsDatabase.get_comorbidites_x", "antibioticsdatabase.AntibioticsDatabase.create_x", "test_data.append", "antibioticsdatabase.AntibioticsDatabase.get_comorbidites_x", "antibioticsdatabase.AntibioticsDatabase.create_x", "antibiotics_data[].append", "antibiotics_data[].append", "antibiotics_data[].append", "len", "len", "list", "antibioticsdatabase.AntibioticsDatabase.get_test_data", "antibioticsdatabase.AntibioticsDatabase.organism_to_x_dict.keys", "numpy.array", "[].append", "[].append"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.remove_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.remove_input_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.split_training_to_test", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.load_comorbidities", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.interpretation_to_outcome", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_age_group_2x", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.antibiotic_to_treatment", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.antibiotic_to_treatment", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_comorbidites_x", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.create_x", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_comorbidites_x", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.create_x", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_test_data"], ["", "def", "get_data", "(", "self", ")", ":", "\n", "#self.cur.execute('SELECT hadm_id, org_name, ab_name, interpretation FROM microbiologyevents WHERE ab_name IS NOT NULL;')", "\n", "        ", "self", ".", "cur", ".", "execute", "(", "get_microbiologyevents", ")", "\n", "microbiology_test_data", "=", "self", ".", "cur", ".", "fetchall", "(", ")", "\n", "\n", "patients", "=", "{", "}", "\n", "patient_age_groups", "=", "{", "}", "\n", "\n", "self", ".", "random", ".", "shuffle", "(", "microbiology_test_data", ")", "\n", "for", "chartevent", "in", "microbiology_test_data", ":", "\n", "            ", "hadm_id", "=", "chartevent", "[", "0", "]", "\n", "organism", "=", "chartevent", "[", "1", "]", "\n", "treatment_name", "=", "chartevent", "[", "2", "]", "\n", "outcome", "=", "interpretation_to_outcome", "(", "chartevent", "[", "3", "]", ")", "\n", "age", "=", "chartevent", "[", "4", "]", "\n", "#age_group = chartevent[5]", "\n", "age_group", "=", "self", ".", "get_age_group_2x", "(", "age", ")", "\n", "treatment", "=", "self", ".", "antibiotic_to_treatment", "(", "treatment_name", ")", "\n", "if", "organism", "in", "self", ".", "allowed_organisms", "and", "treatment_name", "in", "self", ".", "allowed_tests", "and", "outcome", "is", "not", "None", ":", "\n", "                ", "intervention", "=", "np", ".", "array", "(", "[", "treatment", ",", "outcome", "]", ")", "\n", "if", "hadm_id", "in", "patients", ":", "\n", "                    ", "if", "organism", "in", "patients", "[", "hadm_id", "]", ":", "\n", "                        ", "if", "treatment", "not", "in", "[", "intervention", "[", "0", "]", "for", "intervention", "in", "patients", "[", "hadm_id", "]", "[", "organism", "]", "]", ":", "\n", "                            ", "patients", "[", "hadm_id", "]", "[", "organism", "]", ".", "append", "(", "intervention", ")", "\n", "", "", "else", ":", "\n", "                        ", "patients", "[", "hadm_id", "]", "[", "organism", "]", "=", "[", "intervention", "]", "\n", "", "", "else", ":", "\n", "                    ", "patients", "[", "hadm_id", "]", "=", "{", "organism", ":", "[", "intervention", "]", "}", "\n", "patient_age_groups", "[", "hadm_id", "]", "=", "age_group", "\n", "\n", "", "", "", "self", ".", "remove_patients", "(", "patients", ")", "\n", "\n", "#self.cur.execute(get_inputevents)", "\n", "#self.cur.execute(\"SELECT DISTINCT(label), hadm_id FROM inputevents_mv JOIN d_items ON inputevents_mv.itemid = d_items.itemid WHERE d_items.category like 'Antibiotics'\")", "\n", "self", ".", "cur", ".", "execute", "(", "\"SELECT label, hadm_id FROM inputevents_mv JOIN d_items ON inputevents_mv.itemid = d_items.itemid \"", "\n", "\"WHERE d_items.category like 'Antibiotics' order by hadm_id, starttime\"", ")", "\n", "\n", "used_antibiotics", "=", "self", ".", "cur", ".", "fetchall", "(", ")", "\n", "input_patients", "=", "{", "}", "\n", "for", "chartevent", "in", "used_antibiotics", ":", "\n", "            ", "hadm_id", "=", "chartevent", "[", "1", "]", "\n", "\n", "if", "hadm_id", "in", "patients", ":", "\n", "                ", "treatment_name", "=", "self", ".", "treatment_to_test", "[", "chartevent", "[", "0", "]", "]", "\n", "treatment", "=", "self", ".", "antibiotic_to_treatment", "(", "treatment_name", ")", "\n", "for", "organism", "in", "patients", "[", "hadm_id", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "outcome", "=", "None", "\n", "for", "inter", "in", "patients", "[", "hadm_id", "]", "[", "organism", "]", ":", "\n", "                        ", "if", "inter", "[", "0", "]", "==", "treatment", ":", "\n", "                            ", "outcome", "=", "inter", "[", "1", "]", "\n", "", "", "if", "outcome", "is", "not", "None", ":", "\n", "                        ", "intervention", "=", "np", ".", "array", "(", "[", "treatment", ",", "outcome", "]", ")", "\n", "if", "hadm_id", "in", "input_patients", ":", "\n", "                            ", "if", "organism", "in", "input_patients", "[", "hadm_id", "]", ":", "\n", "                                ", "treatments", "=", "[", "intervention", "[", "0", "]", "for", "intervention", "in", "input_patients", "[", "hadm_id", "]", "[", "organism", "]", "]", "\n", "if", "treatment", "not", "in", "treatments", ":", "\n", "                                    ", "input_patients", "[", "hadm_id", "]", "[", "organism", "]", ".", "append", "(", "intervention", ")", "\n", "", "", "else", ":", "\n", "                                ", "input_patients", "[", "hadm_id", "]", "[", "organism", "]", "=", "[", "intervention", "]", "\n", "", "", "else", ":", "\n", "                            ", "input_patients", "[", "hadm_id", "]", "=", "{", "organism", ":", "[", "intervention", "]", "}", "\n", "\n", "", "", "", "", "", "input_patients", "=", "self", ".", "remove_input_patients", "(", "input_patients", ")", "\n", "#self.remove_training_data_from_test(input_patients, patients)", "\n", "input_patients", ",", "patients", "=", "self", ".", "split_training_to_test", "(", "input_patients", ",", "patients", ")", "\n", "\n", "self", ".", "n_a", "=", "len", "(", "self", ".", "allowed_tests", ".", "keys", "(", ")", ")", "\n", "\n", "#self.plot_outcome_histogram(microbiology_test_data)", "\n", "#self.plot_matrix(microbiology_test_data)", "\n", "\n", "self", ".", "comorbidites", "=", "self", ".", "load_comorbidities", "(", ")", "\n", "\n", "\n", "antibiotics_data", "=", "{", "'z'", ":", "[", "]", ",", "'x'", ":", "[", "]", ",", "'h'", ":", "[", "]", "}", "\n", "test_data", "=", "[", "]", "\n", "\n", "for", "hadm_id", ",", "microbiology_test_data", "in", "patients", ".", "items", "(", ")", ":", "\n", "            ", "for", "organism", ",", "history", "in", "microbiology_test_data", ".", "items", "(", ")", ":", "\n", "                ", "organism_x", "=", "self", ".", "organism_to_x_dict", "[", "organism", "]", "\n", "age_group", "=", "patient_age_groups", "[", "hadm_id", "]", "\n", "comorbities", "=", "self", ".", "get_comorbidites_x", "(", "hadm_id", ")", "\n", "x", "=", "self", ".", "create_x", "(", "(", "organism_x", ",", "age_group", ",", "comorbities", ")", ")", "\n", "test_data", ".", "append", "(", "self", ".", "get_test_data", "(", "x", ",", "history", ")", ")", "\n", "\n", "", "", "for", "hadm_id", ",", "organism_and_history", "in", "input_patients", ".", "items", "(", ")", ":", "\n", "            ", "for", "organism", ",", "history", "in", "organism_and_history", ".", "items", "(", ")", ":", "\n", "                ", "organism_x", "=", "self", ".", "organism_to_x_dict", "[", "organism", "]", "\n", "age_group", "=", "patient_age_groups", "[", "hadm_id", "]", "\n", "comorbities", "=", "self", ".", "get_comorbidites_x", "(", "hadm_id", ")", "\n", "x", "=", "self", ".", "create_x", "(", "(", "organism_x", ",", "age_group", ",", "comorbities", ")", ")", "\n", "antibiotics_data", "[", "'z'", "]", ".", "append", "(", "hadm_id", ")", "\n", "antibiotics_data", "[", "'x'", "]", ".", "append", "(", "x", ")", "\n", "antibiotics_data", "[", "'h'", "]", ".", "append", "(", "history", ")", "\n", "\n", "\n", "", "", "print", "(", "\"{} different antibiotics\"", ".", "format", "(", "self", ".", "n_a", ")", ")", "\n", "self", ".", "antibiotics_training_data", "=", "antibiotics_data", "\n", "print", "(", "\"{} patients in training data, {} in test data\"", ".", "format", "(", "len", "(", "antibiotics_data", "[", "'x'", "]", ")", ",", "len", "(", "test_data", ")", ")", ")", "\n", "print", "(", "\"{} organisms\"", ".", "format", "(", "self", ".", "organism_counter", ")", ")", "\n", "print", "(", "\"Organisms: {}\"", ".", "format", "(", "list", "(", "self", ".", "organism_to_x_dict", ".", "keys", "(", ")", ")", ")", ")", "\n", "return", "antibiotics_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_age_group_2x": [[164, 173], ["antibioticsdatabase.AntibioticsDatabase.int_to_binary", "antibioticsdatabase.AntibioticsDatabase.int_to_binary", "antibioticsdatabase.AntibioticsDatabase.int_to_binary", "antibioticsdatabase.AntibioticsDatabase.int_to_binary"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.int_to_binary", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.int_to_binary", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.int_to_binary", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.int_to_binary"], ["", "def", "get_age_group_2x", "(", "self", ",", "age", ")", ":", "\n", "        ", "if", "age", ">", "60", ":", "\n", "            ", "return", "self", ".", "int_to_binary", "(", "3", ",", "2", ")", "\n", "", "elif", "60", ">=", "age", ">", "31", ":", "\n", "            ", "return", "self", ".", "int_to_binary", "(", "2", ",", "2", ")", "\n", "", "elif", "31", ">=", "age", ">", "15", ":", "\n", "            ", "return", "self", ".", "int_to_binary", "(", "1", ",", "2", ")", "\n", "", "elif", "15", ">=", "age", ">=", "0", ":", "\n", "            ", "return", "self", ".", "int_to_binary", "(", "0", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.load_comorbidities": [[174, 186], ["antibioticsdatabase.AntibioticsDatabase.cur.execute", "antibioticsdatabase.AntibioticsDatabase.cur.fetchall", "comorbidities[].append"], "methods", ["None"], ["", "", "def", "load_comorbidities", "(", "self", ")", ":", "\n", "        ", "comorbidities", "=", "{", "}", "\n", "self", ".", "cur", ".", "execute", "(", "\"SELECT hadm_id, icd9_code FROM diagnoses_icd\"", ")", "\n", "diagnoses", "=", "self", ".", "cur", ".", "fetchall", "(", ")", "\n", "for", "chartevent", "in", "diagnoses", ":", "\n", "            ", "hadm_id", "=", "chartevent", "[", "0", "]", "\n", "icd9", "=", "chartevent", "[", "1", "]", "\n", "if", "hadm_id", "in", "comorbidities", ":", "\n", "                ", "comorbidities", "[", "hadm_id", "]", ".", "append", "(", "icd9", ")", "\n", "", "else", ":", "\n", "                ", "comorbidities", "[", "hadm_id", "]", "=", "[", "icd9", "]", "\n", "", "", "return", "comorbidities", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_comorbidites_x": [[187, 203], ["icd9cms.search"], "methods", ["None"], ["", "def", "get_comorbidites_x", "(", "self", ",", "hadm_id", ")", ":", "\n", "        ", "comorbidities", "=", "self", ".", "comorbidites", "[", "hadm_id", "]", "\n", "comorbidities_x", "=", "[", "0", ",", "0", "]", "\n", "for", "comorbidity_code", "in", "comorbidities", ":", "\n", "            ", "info", "=", "icd", ".", "search", "(", "comorbidity_code", ")", "\n", "while", "info", "is", "not", "None", ":", "\n", "                ", "description", "=", "info", ".", "short_desc", "\n", "if", "description", "==", "'Infectious And Parasitic Diseases'", ":", "\n", "                    ", "comorbidities_x", "[", "0", "]", "=", "1", "\n", "break", "\n", "", "elif", "description", "==", "'Diseases Of The Skin And Subcutaneous Tissue'", ":", "\n", "                    ", "comorbidities_x", "[", "1", "]", "=", "1", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "info", "=", "info", ".", "parent", "\n", "", "", "", "return", "comorbidities_x", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.create_x": [[204, 207], ["numpy.concatenate"], "methods", ["None"], ["", "def", "create_x", "(", "self", ",", "args", ")", ":", "\n", "        ", "x", "=", "np", ".", "concatenate", "(", "args", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.split_training_to_test": [[208, 240], ["numpy.array", "int", "int", "print", "antibioticsdatabase.AntibioticsDatabase.random.shuffle", "training.items", "test_set.items", "numpy.ma.masked_array", "list", "numpy.ceil", "numpy.floor", "len", "len", "organism_and_history.items", "training.keys", "doctor_data[].append", "len", "len"], "methods", ["None"], ["", "def", "split_training_to_test", "(", "self", ",", "training", ",", "test", ",", "split", "=", "0.7", ")", ":", "\n", "        ", "hadm_ids", "=", "np", ".", "array", "(", "list", "(", "training", ".", "keys", "(", ")", ")", ")", "\n", "training_samples", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "hadm_ids", ")", "*", "split", ")", ")", "\n", "test_samples", "=", "int", "(", "np", ".", "floor", "(", "len", "(", "hadm_ids", ")", "*", "(", "1", "-", "split", ")", ")", ")", "\n", "tr_s", "=", "[", "True", "]", "*", "training_samples", "\n", "te_s", "=", "[", "False", "]", "*", "test_samples", "\n", "is_training_sample", "=", "tr_s", "+", "te_s", "\n", "print", "(", "len", "(", "is_training_sample", ")", ",", "len", "(", "training", ")", ")", "\n", "self", ".", "random", ".", "shuffle", "(", "is_training_sample", ")", "\n", "test_set", "=", "{", "}", "\n", "training_set", "=", "{", "}", "\n", "i", "=", "0", "\n", "for", "hadm_id", ",", "organism_and_history", "in", "training", ".", "items", "(", ")", ":", "\n", "#print(i, len(training))", "\n", "            ", "if", "is_training_sample", "[", "i", "]", ":", "\n", "                ", "training_set", "[", "hadm_id", "]", "=", "organism_and_history", "\n", "", "else", ":", "\n", "                ", "test_set", "[", "hadm_id", "]", "=", "organism_and_history", "\n", "", "i", "+=", "1", "\n", "\n", "", "doctor_data", "=", "{", "'z'", ":", "[", "]", ",", "'x'", ":", "[", "]", ",", "'h'", ":", "[", "]", "}", "\n", "for", "hadm_id", ",", "organism_and_history", "in", "test_set", ".", "items", "(", ")", ":", "\n", "            ", "for", "organism", ",", "history", "in", "organism_and_history", ".", "items", "(", ")", ":", "\n", "                ", "doctor_data", "[", "'h'", "]", ".", "append", "(", "history", ")", "\n", "", "", "self", ".", "doctor_data", "=", "doctor_data", "\n", "\n", "new_test_set", "=", "{", "}", "\n", "test_hadm_ids", "=", "np", ".", "ma", ".", "masked_array", "(", "hadm_ids", ",", "mask", "=", "is_training_sample", ")", "\n", "test_hadm_ids", "=", "test_hadm_ids", "[", "test_hadm_ids", ".", "mask", "==", "False", "]", "\n", "for", "hadm_id", "in", "test_hadm_ids", ":", "\n", "            ", "new_test_set", "[", "hadm_id", "]", "=", "test", "[", "hadm_id", "]", "\n", "", "return", "training_set", ",", "new_test_set", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.remove_training_data_from_test": [[241, 245], ["training.keys"], "methods", ["None"], ["", "def", "remove_training_data_from_test", "(", "self", ",", "training", ",", "test", ")", ":", "\n", "        ", "for", "hadm_id", "in", "training", ".", "keys", "(", ")", ":", "\n", "            ", "if", "hadm_id", "in", "test", ":", "\n", "                ", "del", "test", "[", "hadm_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.remove_patients": [[246, 262], ["list", "patients.items", "print", "antibioticsdatabase.AntibioticsDatabase.allowed_tests.keys", "organism.items", "len", "patients_to_delete.append"], "methods", ["None"], ["", "", "", "def", "remove_patients", "(", "self", ",", "patients", ")", ":", "\n", "        ", "allowed_treatments_list", "=", "list", "(", "self", ".", "allowed_tests", ".", "keys", "(", ")", ")", "\n", "patients_to_delete", "=", "[", "]", "\n", "for", "hadm_id", ",", "organism", "in", "patients", ".", "items", "(", ")", ":", "\n", "            ", "for", "organism", ",", "history", "in", "organism", ".", "items", "(", ")", ":", "\n", "                ", "for", "treatment", "in", "allowed_treatments_list", ":", "\n", "                    ", "if", "self", ".", "antibiotic_to_treatment_dict", "[", "treatment", "]", "not", "in", "[", "intervention", "[", "0", "]", "for", "intervention", "in", "history", "]", ":", "\n", "                        ", "patients_to_delete", ".", "append", "(", "[", "hadm_id", ",", "organism", "]", ")", "\n", "break", "\n", "", "", "", "", "print", "(", "len", "(", "patients_to_delete", ")", ",", "'patients to delete'", ")", "\n", "for", "patient", "in", "patients_to_delete", ":", "\n", "            ", "hadm_id", "=", "patient", "[", "0", "]", "\n", "organism", "=", "patient", "[", "1", "]", "\n", "if", "hadm_id", "in", "patients", ":", "\n", "                ", "if", "organism", "in", "patients", "[", "hadm_id", "]", ":", "\n", "                    ", "del", "patients", "[", "hadm_id", "]", "[", "organism", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.remove_input_patients": [[263, 277], ["list", "patients.items", "antibioticsdatabase.AntibioticsDatabase.allowed_tests.keys", "organism.items", "patients_to_delete.append"], "methods", ["None"], ["", "", "", "", "def", "remove_input_patients", "(", "self", ",", "patients", ")", ":", "\n", "        ", "allowed_treatments_list", "=", "list", "(", "self", ".", "allowed_tests", ".", "keys", "(", ")", ")", "\n", "patients_to_delete", "=", "[", "]", "\n", "for", "hadm_id", ",", "organism", "in", "patients", ".", "items", "(", ")", ":", "\n", "            ", "for", "org", ",", "history", "in", "organism", ".", "items", "(", ")", ":", "\n", "                ", "used_treatments", "=", "[", "intervention", "[", "0", "]", "for", "intervention", "in", "history", "]", "\n", "for", "used_treatment", "in", "used_treatments", ":", "\n", "                    ", "if", "used_treatment", "not", "in", "[", "self", ".", "antibiotic_to_treatment_dict", "[", "t", "]", "for", "t", "in", "allowed_treatments_list", "]", ":", "\n", "                        ", "patients_to_delete", ".", "append", "(", "hadm_id", ")", "\n", "break", "\n", "\n", "", "", "", "", "for", "hadm_id", "in", "patients_to_delete", ":", "\n", "            ", "del", "patients", "[", "hadm_id", "]", "\n", "", "return", "patients", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_organisms_and_outcomes": [[278, 295], ["antibioticsdatabase.AntibioticsDatabase.antibiotic_to_treatment", "antibioticsdatabase.interpretation_to_outcome", "[].append"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.antibiotic_to_treatment", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.interpretation_to_outcome"], ["", "def", "get_organisms_and_outcomes", "(", "self", ",", "data", ")", ":", "\n", "        ", "organisms_and_outcome", "=", "{", "}", "\n", "for", "chartevent", "in", "data", ":", "\n", "            ", "hadm_id", "=", "chartevent", "[", "0", "]", "\n", "organism", "=", "chartevent", "[", "1", "]", "\n", "treatment_name", "=", "chartevent", "[", "2", "]", "\n", "treatment", "=", "self", ".", "antibiotic_to_treatment", "(", "treatment_name", ")", "\n", "outcome", "=", "interpretation_to_outcome", "(", "chartevent", "[", "3", "]", ")", "\n", "if", "outcome", "is", "not", "None", ":", "\n", "                ", "if", "treatment", "in", "organisms_and_outcome", ":", "\n", "                    ", "if", "organism", "in", "organisms_and_outcome", "[", "treatment", "]", ":", "\n", "                        ", "organisms_and_outcome", "[", "treatment", "]", "[", "organism", "]", ".", "append", "(", "outcome", ")", "\n", "", "else", ":", "\n", "                        ", "organisms_and_outcome", "[", "treatment", "]", "[", "organism", "]", "=", "[", "outcome", "]", "\n", "", "", "else", ":", "\n", "                    ", "organisms_and_outcome", "[", "treatment", "]", "=", "{", "}", "\n", "", "", "", "return", "organisms_and_outcome", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.plot_outcome_histogram": [[296, 313], ["antibioticsdatabase.AntibioticsDatabase.get_organisms_and_outcomes", "antibioticsdatabase.AntibioticsDatabase.get_valid_treatments", "antibioticsdatabase.AntibioticsDatabase.get_x_colors", "antibioticsdatabase.AntibioticsDatabase.items", "matplotlib.pyplot.xticks", "matplotlib.pyplot.show", "organism_outcome.items", "matplotlib.pyplot.hist", "numpy.arange", "outcomes.append", "organism_colors.append", "organisms_labels.append", "len", "numpy.array", "antibioticsdatabase.AntibioticsDatabase.binary_to_int"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_organisms_and_outcomes", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_valid_treatments", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_x_colors", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.binary_to_int"], ["", "def", "plot_outcome_histogram", "(", "self", ",", "data", ")", ":", "\n", "        ", "organisms_and_outcome", "=", "self", ".", "get_organisms_and_outcomes", "(", "data", ")", "\n", "valid_treatments", "=", "self", ".", "get_valid_treatments", "(", ")", "\n", "colors", "=", "self", ".", "get_x_colors", "(", ")", "\n", "\n", "for", "treatment", ",", "organism_outcome", "in", "organisms_and_outcome", ".", "items", "(", ")", ":", "\n", "            ", "outcomes", "=", "[", "]", "\n", "organism_colors", "=", "[", "]", "\n", "organisms_labels", "=", "[", "]", "\n", "for", "organism", ",", "outcome", "in", "organism_outcome", ".", "items", "(", ")", ":", "\n", "                ", "outcome", "=", "[", "(", "o", "*", "0.3", ")", "+", "treatment", "for", "o", "in", "outcome", "]", "\n", "outcomes", ".", "append", "(", "np", ".", "array", "(", "outcome", ")", ")", "\n", "organism_colors", ".", "append", "(", "colors", "[", "self", ".", "binary_to_int", "(", "self", ".", "organism_to_x_dict", "[", "organism", "]", ")", "]", ")", "\n", "organisms_labels", ".", "append", "(", "organism", ")", "\n", "", "plt", ".", "hist", "(", "outcomes", ",", "bins", "=", "3", ",", "stacked", "=", "True", ",", "color", "=", "organism_colors", ")", "\n", "", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "len", "(", "valid_treatments", ")", ")", ",", "valid_treatments", ",", "rotation", "=", "'vertical'", ",", "fontsize", "=", "7", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.plot_matrix": [[314, 337], ["numpy.zeros", "matplotlib.pyplot.figure", "matplotlib.pyplot.figure.add_subplot", "plt.figure.add_subplot.matshow", "matplotlib.pyplot.figure.colorbar", "plt.figure.add_subplot.set_xlabel", "plt.figure.add_subplot.set_ylabel", "matplotlib.pyplot.show", "antibioticsdatabase.AntibioticsDatabase.antibiotic_to_treatment", "antibioticsdatabase.AntibioticsDatabase.binary_to_int", "antibioticsdatabase.AntibioticsDatabase.add_organism_too_dict", "matplotlib.pyplot.get_cmap"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.antibiotic_to_treatment", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.binary_to_int", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.add_organism_too_dict"], ["", "def", "plot_matrix", "(", "self", ",", "data", ")", ":", "\n", "        ", "organisms_and_treatments", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_a", ",", "self", ".", "n_a", ")", ")", "\n", "\n", "for", "chartevent", "in", "data", ":", "\n", "#hadm_id = chartevent[0]", "\n", "            ", "organism", "=", "chartevent", "[", "1", "]", "\n", "treatment_name", "=", "chartevent", "[", "2", "]", "\n", "treatment", "=", "self", ".", "antibiotic_to_treatment", "(", "treatment_name", ")", "\n", "#outcome = interpretation_to_outcome(chartevent[3])", "\n", "if", "organism", "not", "in", "self", ".", "organism_to_x_dict", ":", "\n", "                ", "self", ".", "add_organism_too_dict", "(", "organism", ")", "\n", "", "organism_id", "=", "self", ".", "binary_to_int", "(", "self", ".", "organism_to_x_dict", "[", "organism", "]", ")", "\n", "if", "organism_id", "<", "self", ".", "n_a", ":", "\n", "                ", "organisms_and_treatments", "[", "treatment", ",", "organism_id", "]", "+=", "1", "\n", "\n", "", "", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "cax", "=", "ax", ".", "matshow", "(", "organisms_and_treatments", ",", "cmap", "=", "plt", ".", "get_cmap", "(", "'jet'", ")", ")", "\n", "fig", ".", "colorbar", "(", "cax", ")", "\n", "ax", ".", "set_xlabel", "(", "'Organisms'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Treatments'", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_x_colors": [[338, 345], ["matplotlib.pyplot.get_cmap", "numpy.linspace", "colors.append", "matplotlib.pyplot.get_cmap."], "methods", ["None"], ["", "def", "get_x_colors", "(", "self", ")", ":", "\n", "        ", "colors", "=", "[", "]", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "'gist_ncar'", ")", "\n", "color_steps", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "self", ".", "organism_counter", ")", "\n", "for", "i", "in", "color_steps", ":", "\n", "            ", "colors", ".", "append", "(", "cmap", "(", "i", ")", ")", "\n", "", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_valid_treatments": [[346, 352], ["antibioticsdatabase.AntibioticsDatabase.treatment_to_test.items", "valid_treatments.append"], "methods", ["None"], ["", "def", "get_valid_treatments", "(", "self", ")", ":", "\n", "        ", "valid_treatments", "=", "[", "]", "\n", "for", "treatment", ",", "test", "in", "self", ".", "treatment_to_test", ".", "items", "(", ")", ":", "\n", "            ", "if", "test", "is", "not", "None", ":", "\n", "                ", "valid_treatments", ".", "append", "(", "treatment", ")", "\n", "", "", "return", "valid_treatments", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.binary_to_int": [[353, 355], ["int", "str"], "methods", ["None"], ["", "def", "binary_to_int", "(", "self", ",", "binary", ")", ":", "\n", "        ", "return", "int", "(", "\"\"", ".", "join", "(", "str", "(", "i", ")", "for", "i", "in", "binary", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.antibiotic_to_treatment": [[356, 364], ["None"], "methods", ["None"], ["", "def", "antibiotic_to_treatment", "(", "self", ",", "antibiotic", ")", ":", "\n", "        ", "if", "antibiotic", "in", "self", ".", "antibiotic_to_treatment_dict", ":", "\n", "            ", "index", "=", "self", ".", "antibiotic_to_treatment_dict", "[", "antibiotic", "]", "\n", "", "else", ":", "\n", "            ", "index", "=", "self", ".", "antibiotic_counter", "\n", "self", ".", "antibiotic_to_treatment_dict", "[", "antibiotic", "]", "=", "index", "\n", "self", ".", "antibiotic_counter", "+=", "1", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.add_treatment_to_dict": [[365, 370], ["None"], "methods", ["None"], ["", "def", "add_treatment_to_dict", "(", "self", ",", "treatment", ")", ":", "\n", "        ", "if", "treatment", "not", "in", "self", ".", "antibiotic_to_treatment_dict", ":", "\n", "            ", "index", "=", "self", ".", "antibiotic_counter", "\n", "self", ".", "antibiotic_to_treatment_dict", "[", "treatment", "]", "=", "index", "\n", "self", ".", "antibiotic_counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.add_organism_too_dict": [[371, 377], ["int", "antibioticsdatabase.AntibioticsDatabase.int_to_binary", "numpy.ceil", "numpy.sqrt", "len"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.int_to_binary"], ["", "", "def", "add_organism_too_dict", "(", "self", ",", "organism", ")", ":", "\n", "        ", "if", "organism", "not", "in", "self", ".", "organism_to_x_dict", ":", "\n", "            ", "length", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "len", "(", "self", ".", "allowed_organisms", ")", ")", ")", ")", "\n", "binary", "=", "self", ".", "int_to_binary", "(", "self", ".", "organism_counter", ",", "length", ")", "\n", "self", ".", "organism_to_x_dict", "[", "organism", "]", "=", "binary", "\n", "self", ".", "organism_counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.int_to_binary": [[378, 383], ["numpy.array", "str", "int", "list", "conversion.format"], "methods", ["None"], ["", "", "def", "int_to_binary", "(", "self", ",", "integer", ",", "length", ")", ":", "\n", "        ", "conversion", "=", "'{}0:0{}b{}'", ".", "format", "(", "'{'", ",", "str", "(", "length", ")", ",", "'}'", ")", "\n", "binary", "=", "np", ".", "array", "(", "\n", "[", "int", "(", "s", ")", "for", "s", "in", "list", "(", "(", "conversion", ".", "format", "(", "integer", ")", ")", ")", "]", ")", "# Convert to list of binary", "\n", "return", "binary", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_test_data": [[384, 393], ["numpy.ones"], "methods", ["None"], ["", "def", "get_test_data", "(", "self", ",", "x", ",", "history", ")", ":", "\n", "        ", "z", "=", "-", "1", "\n", "subject", "=", "[", "z", ",", "x", ",", "np", ".", "ones", "(", "self", ".", "n_a", ")", "*", "-", "1", "]", "\n", "\n", "for", "intervention", "in", "history", ":", "\n", "            ", "treatment", ",", "outcome", "=", "intervention", "\n", "\n", "subject", "[", "2", "]", "[", "treatment", "]", "=", "outcome", "\n", "", "return", "subject", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.shuffle_histories": [[394, 399], ["list", "antibioticsdatabase.AntibioticsDatabase.random.shuffle", "zip", "zip"], "methods", ["None"], ["", "def", "shuffle_histories", "(", "self", ",", "xs", ",", "histories", ")", ":", "\n", "        ", "patients", "=", "list", "(", "zip", "(", "xs", ",", "histories", ")", ")", "\n", "self", ".", "random", ".", "shuffle", "(", "patients", ")", "\n", "xs", ",", "histories", "=", "zip", "(", "*", "patients", ")", "\n", "return", "xs", ",", "histories", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.interpretation_to_outcome": [[401, 410], ["None"], "function", ["None"], ["", "", "def", "interpretation_to_outcome", "(", "interpretation", ")", ":", "\n", "    ", "if", "interpretation", "==", "'S'", ":", "\n", "        ", "return", "2", "\n", "", "elif", "interpretation", "==", "'I'", ":", "\n", "        ", "return", "1", "\n", "", "elif", "interpretation", "==", "'R'", ":", "\n", "        ", "return", "0", "\n", "", "elif", "interpretation", "==", "'P'", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Main.Test_Boids.calc_score": [[18, 33], ["np.sum", "np.abs", "np.abs", "np.sign", "np.sign", "np.min", "np.min", "np.min", "np.max", "np.max", "np.max", "np.sum", "np.sum", "np.sum", "np.sum", "np.sum", "np.sum", "np.sum", "np.sum"], "function", ["None"], ["def", "calc_score", "(", "pos", ")", ":", "\n", "    ", "a00", "=", "pos", "[", "0", "]", "\n", "a12", "=", "pos", "[", "1", "]", "\n", "a22", "=", "pos", "[", "2", "]", "\n", "pa00", "=", "np", ".", "sum", "(", "z", "*", "a00", ")", "\n", "pzh", "=", "z", "*", "a00", "/", "pa00", "\n", "\n", "score", "=", "np", ".", "abs", "(", "np", ".", "sum", "(", "z", "*", "a12", ")", "-", "np", ".", "sum", "(", "z", "*", "a22", ")", ")", "+", "np", ".", "abs", "(", "np", ".", "sum", "(", "pzh", "*", "a12", ")", "-", "np", ".", "sum", "(", "pzh", "*", "a22", ")", ")", "\n", "if", "np", ".", "sign", "(", "np", ".", "sum", "(", "z", "*", "a12", ")", "-", "np", ".", "sum", "(", "z", "*", "a22", ")", ")", "==", "np", ".", "sign", "(", "np", ".", "sum", "(", "pzh", "*", "a12", ")", "-", "np", ".", "sum", "(", "pzh", "*", "a22", ")", ")", ":", "\n", "        ", "score", "=", "0", "\n", "", "if", "np", ".", "min", "(", "a00", ")", "<", "0", "or", "np", ".", "min", "(", "a12", ")", "<", "0", "or", "np", ".", "min", "(", "a22", ")", "<", "0", ":", "\n", "        ", "score", "=", "0", "\n", "", "if", "np", ".", "max", "(", "a00", ")", ">", "1", "or", "np", ".", "max", "(", "a12", ")", ">", "1", "or", "np", ".", "max", "(", "a22", ")", ">", "1", ":", "\n", "        ", "score", "=", "0", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.SingleEvaluations.SweepDataSizes.get_settings": [[10, 12], ["None"], "function", ["None"], ["def", "get_settings", "(", ")", ":", "\n", "    ", "return", "DataAmountSettings", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.SingleEvaluations.SweepDataSizes.do_work": [[13, 57], ["SweepDataSizes.get_settings", "get_settings.load_settings", "numpy.zeros", "numpy.geomspace().astype", "print", "get_settings.setup_data_sets", "range", "print", "Algorithms.constrained_dynamic_programming.split_patients", "get_settings.setup_algorithms", "range", "range", "numpy.geomspace", "numpy.copy", "numpy.copy", "numpy.copy", "time.time", "print", "print", "print", "range", "alg.learn", "len", "algorithms[].evaluate", "len", "max", "alg.learn", "numpy.max", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotSweepData.get_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.load_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_data_sets", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_algorithms", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.learn", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.evaluate", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.learn"], ["", "def", "do_work", "(", "i_data_set", ",", "n_algorithms", ")", ":", "\n", "    ", "settings", "=", "get_settings", "(", ")", "\n", "starting_seed", ",", "n_data_sets", ",", "delta", ",", "n_data_set_sizes", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples_max", ",", "n_test_samples", ",", "file_name_prefix", "=", "settings", ".", "load_settings", "(", ")", "\n", "res", "=", "np", ".", "zeros", "(", "(", "2", ",", "n_data_set_sizes", ",", "n_algorithms", ")", ")", "\n", "seeds", "=", "[", "x", "for", "x", "in", "range", "(", "starting_seed", ",", "starting_seed", "+", "n_data_sets", ")", "]", "\n", "n_training_samples_array", "=", "np", ".", "geomspace", "(", "10", ",", "n_training_samples_max", ",", "n_data_set_sizes", ")", ".", "astype", "(", "int", ")", "\n", "\n", "print", "(", "\"Starting set {}\"", ".", "format", "(", "i_data_set", ")", ")", "\n", "dist", ",", "unsplit_training_data", ",", "test_data", "=", "settings", ".", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples_max", ",", "n_test_samples", ",", "\n", "seeds", "[", "i_data_set", "]", ")", "\n", "saved_table", "=", "None", "\n", "for", "i_size", "in", "range", "(", "n_data_set_sizes", ")", ":", "\n", "        ", "print", "(", "\"Evaluating data set size = {}\"", ".", "format", "(", "n_training_samples_array", "[", "i_size", "]", ")", ")", "\n", "d_tmp", "=", "{", "'x'", ":", "np", ".", "copy", "(", "unsplit_training_data", "[", "'x'", "]", "[", "0", ":", "n_training_samples_array", "[", "i_size", "]", "]", ")", ",", "\n", "'h'", ":", "np", ".", "copy", "(", "unsplit_training_data", "[", "'h'", "]", "[", "0", ":", "n_training_samples_array", "[", "i_size", "]", "]", ")", ",", "\n", "'z'", ":", "np", ".", "copy", "(", "unsplit_training_data", "[", "'z'", "]", "[", "0", ":", "n_training_samples_array", "[", "i_size", "]", "]", ")", "}", "\n", "training_data", "=", "split_patients", "(", "d_tmp", ")", "\n", "\n", "algorithms", "=", "settings", ".", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ")", "\n", "for", "alg", "in", "algorithms", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Training {}\"", ".", "format", "(", "alg", ".", "name", ")", ")", "\n", "if", "alg", ".", "name", "==", "\"Dynamic Programming True\"", ":", "\n", "                ", "if", "saved_table", "is", "None", ":", "\n", "                    ", "alg", ".", "learn", "(", ")", "\n", "saved_table", "=", "alg", ".", "q_table", "\n", "", "else", ":", "\n", "                    ", "alg", ".", "q_table", "=", "saved_table", "\n", "", "", "else", ":", "\n", "                ", "alg", ".", "learn", "(", ")", "\n", "", "print", "(", "\"Training {} took {:.3f} seconds\"", ".", "format", "(", "alg", ".", "name", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "            ", "print", "(", "\"Evaluating algorithm {}\"", ".", "format", "(", "algorithms", "[", "i_alg", "]", ".", "name", ")", ")", "\n", "total_time", "=", "0", "\n", "n_at_max", "=", "0", "\n", "for", "i_sample", "in", "range", "(", "len", "(", "test_data", ")", ")", ":", "\n", "                ", "interventions", "=", "algorithms", "[", "i_alg", "]", ".", "evaluate", "(", "test_data", "[", "i_sample", "]", ")", "\n", "total_time", "+=", "len", "(", "interventions", ")", "\n", "best_outcome", "=", "max", "(", "[", "treatment", "[", "1", "]", "for", "treatment", "in", "interventions", "]", ")", "\n", "if", "best_outcome", "==", "np", ".", "max", "(", "test_data", "[", "i_sample", "]", "[", "2", "]", ")", ":", "\n", "                    ", "n_at_max", "+=", "1", "\n", "", "", "res", "[", "0", "]", "[", "i_size", "]", "[", "i_alg", "]", "=", "n_at_max", "/", "n_test_samples", "\n", "res", "[", "1", "]", "[", "i_size", "]", "[", "i_alg", "]", "=", "total_time", "/", "n_test_samples", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.SingleEvaluations.AntibioticsSweepDelta.get_settings": [[9, 11], ["None"], "function", ["None"], ["def", "get_settings", "(", ")", ":", "\n", "    ", "return", "NDPAntibioticsDeltaSweepSettings", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.SingleEvaluations.AntibioticsSweepDelta.do_work": [[12, 44], ["AntibioticsSweepDelta.get_settings", "get_settings.load_settings", "numpy.zeros", "numpy.linspace", "print", "get_settings.setup_data_sets", "len", "range", "print", "get_settings.setup_algorithms", "range", "range", "time.time", "print", "alg.learn", "print", "print", "range", "len", "algorithms[].evaluate", "len", "max", "numpy.max", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotSweepData.get_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.load_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_data_sets", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_algorithms", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.learn", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.evaluate"], ["", "def", "do_work", "(", "i_data_set", ",", "n_algorithms", ")", ":", "\n", "    ", "settings", "=", "get_settings", "(", ")", "\n", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "file_name_prefix", "=", "settings", ".", "load_settings", "(", ")", "\n", "res", "=", "np", ".", "zeros", "(", "(", "2", ",", "n_deltas", ",", "n_algorithms", ")", ")", "\n", "# Setup", "\n", "seeds", "=", "[", "x", "for", "x", "in", "range", "(", "starting_seed", ",", "starting_seed", "+", "n_data_sets", ")", "]", "\n", "deltas", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "n_deltas", ")", "\n", "\n", "print", "(", "\"Starting set {}\"", ".", "format", "(", "i_data_set", ")", ")", "\n", "dist", ",", "training_data", ",", "test_data", "=", "settings", ".", "setup_data_sets", "(", "seeds", "[", "i_data_set", "]", ")", "\n", "n_test_samples", "=", "len", "(", "test_data", ")", "\n", "for", "i_delta", "in", "range", "(", "n_deltas", ")", ":", "\n", "        ", "print", "(", "\"Evaluating delta = {:.3f}\"", ".", "format", "(", "deltas", "[", "i_delta", "]", ")", ")", "\n", "algorithms", "=", "settings", ".", "setup_algorithms", "(", "training_data", ",", "dist", ",", "deltas", "[", "i_delta", "]", ")", "\n", "for", "alg", "in", "algorithms", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Training {}\"", ".", "format", "(", "alg", ".", "name", ")", ")", "\n", "alg", ".", "learn", "(", ")", "\n", "print", "(", "\"Training {} took {:.3f} seconds\"", ".", "format", "(", "alg", ".", "name", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "            ", "print", "(", "\"Evaluating algorithm {}\"", ".", "format", "(", "algorithms", "[", "i_alg", "]", ".", "name", ")", ")", "\n", "total_time", "=", "0", "\n", "n_at_max", "=", "0", "\n", "for", "i_sample", "in", "range", "(", "len", "(", "test_data", ")", ")", ":", "\n", "                ", "interventions", "=", "algorithms", "[", "i_alg", "]", ".", "evaluate", "(", "test_data", "[", "i_sample", "]", ")", "\n", "total_time", "+=", "len", "(", "interventions", ")", "\n", "best_outcome", "=", "max", "(", "[", "treatment", "[", "1", "]", "for", "treatment", "in", "interventions", "]", ")", "\n", "if", "best_outcome", "==", "np", ".", "max", "(", "test_data", "[", "i_sample", "]", "[", "2", "]", ")", ":", "\n", "                    ", "n_at_max", "+=", "1", "\n", "", "", "res", "[", "0", "]", "[", "i_delta", "]", "[", "i_alg", "]", "=", "n_at_max", "/", "n_test_samples", "\n", "res", "[", "1", "]", "[", "i_delta", "]", "[", "i_alg", "]", "=", "total_time", "/", "n_test_samples", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.SingleEvaluations.SweepDelta.get_settings": [[11, 13], ["None"], "function", ["None"], ["def", "get_settings", "(", ")", ":", "\n", "    ", "return", "TestDeltaSweepSettings", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.SingleEvaluations.SweepDelta.do_work": [[14, 45], ["SweepDelta.get_settings", "get_settings.load_settings", "numpy.zeros", "numpy.linspace", "print", "get_settings.setup_data_sets", "range", "print", "get_settings.setup_algorithms", "range", "range", "time.time", "print", "alg.learn", "print", "print", "range", "len", "algorithms[].evaluate", "len", "max", "numpy.max", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotSweepData.get_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.load_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_data_sets", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_algorithms", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.learn", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.evaluate"], ["", "def", "do_work", "(", "i_data_set", ",", "n_algorithms", ")", ":", "\n", "    ", "settings", "=", "get_settings", "(", ")", "\n", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "=", "settings", ".", "load_settings", "(", ")", "\n", "res", "=", "np", ".", "zeros", "(", "(", "2", ",", "n_deltas", ",", "n_algorithms", ")", ")", "\n", "# Setup", "\n", "seeds", "=", "[", "x", "for", "x", "in", "range", "(", "starting_seed", ",", "starting_seed", "+", "n_data_sets", ")", "]", "\n", "deltas", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "n_deltas", ")", "\n", "\n", "print", "(", "\"Starting set {}\"", ".", "format", "(", "i_data_set", ")", ")", "\n", "dist", ",", "training_data", ",", "test_data", "=", "settings", ".", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seeds", "[", "i_data_set", "]", ")", "\n", "for", "i_delta", "in", "range", "(", "n_deltas", ")", ":", "\n", "        ", "print", "(", "\"Evaluating delta = {:.3f}\"", ".", "format", "(", "deltas", "[", "i_delta", "]", ")", ")", "\n", "algorithms", "=", "settings", ".", "setup_algorithms", "(", "training_data", ",", "dist", ",", "deltas", "[", "i_delta", "]", ")", "\n", "for", "alg", "in", "algorithms", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Training {}\"", ".", "format", "(", "alg", ".", "name", ")", ")", "\n", "alg", ".", "learn", "(", ")", "\n", "print", "(", "\"Training {} took {:.3f} seconds\"", ".", "format", "(", "alg", ".", "name", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "            ", "print", "(", "\"Evaluating algorithm {}\"", ".", "format", "(", "algorithms", "[", "i_alg", "]", ".", "name", ")", ")", "\n", "total_time", "=", "0", "\n", "n_at_max", "=", "0", "\n", "for", "i_sample", "in", "range", "(", "len", "(", "test_data", ")", ")", ":", "\n", "                ", "interventions", "=", "algorithms", "[", "i_alg", "]", ".", "evaluate", "(", "test_data", "[", "i_sample", "]", ")", "\n", "total_time", "+=", "len", "(", "interventions", ")", "\n", "best_outcome", "=", "max", "(", "[", "treatment", "[", "1", "]", "for", "treatment", "in", "interventions", "]", ")", "\n", "if", "best_outcome", "==", "np", ".", "max", "(", "test_data", "[", "i_sample", "]", "[", "2", "]", ")", ":", "\n", "                    ", "n_at_max", "+=", "1", "\n", "", "", "res", "[", "0", "]", "[", "i_delta", "]", "[", "i_alg", "]", "=", "n_at_max", "/", "n_test_samples", "\n", "res", "[", "1", "]", "[", "i_delta", "]", "[", "i_alg", "]", "=", "total_time", "/", "n_test_samples", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.SingleEvaluations.Antibiotics.get_settings": [[8, 10], ["None"], "function", ["None"], ["def", "get_settings", "(", ")", ":", "\n", "    ", "return", "AntibioticsSettings", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.SingleEvaluations.Antibiotics.do_work": [[12, 64], ["Antibiotics.get_settings", "get_settings.load_settings", "print", "get_settings.setup_data_sets", "len", "get_settings.setup_algorithms", "len", "numpy.zeros", "numpy.zeros", "enumerate", "res.append", "res.append", "time.time", "print", "alg.learn", "print", "print", "range", "range", "range", "type", "alg.set_data", "alg_evals.append", "range", "len", "alg.evaluate", "len", "len", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotSweepData.get_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.load_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_data_sets", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_algorithms", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.learn", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.doctor.Doctor.set_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.evaluate"], ["", "def", "do_work", "(", "i_data_set", ",", "n_algorithms", ")", ":", "\n", "    ", "settings", "=", "get_settings", "(", ")", "\n", "starting_seed", ",", "n_data_sets", ",", "delta", ",", "file_name_prefix", "=", "settings", ".", "load_settings", "(", ")", "\n", "# Setup", "\n", "seeds", "=", "[", "x", "for", "x", "in", "range", "(", "starting_seed", ",", "starting_seed", "+", "n_data_sets", ")", "]", "\n", "print", "(", "\"Starting set {}\"", ".", "format", "(", "i_data_set", ")", ")", "\n", "dist", ",", "training_data", ",", "test_data", "=", "settings", ".", "setup_data_sets", "(", "seeds", "[", "i_data_set", "]", ")", "\n", "n_test_samples", "=", "len", "(", "test_data", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "res", "=", "[", "]", "\n", "algorithms", "=", "settings", ".", "setup_algorithms", "(", "dist", ",", "training_data", ",", "n_x", ",", "n_a", ",", "n_y", ",", "delta", ")", "\n", "for", "alg", "in", "algorithms", ":", "\n", "        ", "if", "type", "(", "alg", ")", "==", "Doctor", ":", "\n", "            ", "alg", ".", "set_data", "(", "dist", ".", "doctor_data", ")", "\n", "", "", "n_algorithms", "=", "len", "(", "algorithms", ")", "\n", "for", "alg", "in", "algorithms", ":", "\n", "# Train the algorithms", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"\\tTraining %s...\"", "%", "alg", ".", "name", ")", "\n", "alg", ".", "learn", "(", ")", "\n", "print", "(", "\"\\tTraining the %s algorithm took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", "%", "alg", ".", "name", ")", "\n", "\n", "# Evaluate the algorithms", "\n", "", "evaluations", "=", "{", "}", "\n", "for", "alg", "in", "algorithms", ":", "\n", "        ", "alg_evals", "=", "[", "]", "\n", "print", "(", "\"Evaluating {}\"", ".", "format", "(", "alg", ".", "name", ")", ")", "\n", "for", "i", "in", "range", "(", "n_test_samples", ")", ":", "\n", "            ", "alg_evals", ".", "append", "(", "alg", ".", "evaluate", "(", "test_data", "[", "i", "]", ")", ")", "\n", "", "evaluations", "[", "alg", ".", "name", "]", "=", "alg_evals", "\n", "\n", "# Calculate max mean treatment effect over population", "\n", "", "max_mean_treatment_effects", "=", "np", ".", "zeros", "(", "(", "n_algorithms", ",", "n_a", ")", ")", "\n", "mean_times", "=", "np", ".", "zeros", "(", "n_algorithms", ")", "\n", "for", "i_alg", ",", "alg", "in", "enumerate", "(", "algorithms", ")", ":", "\n", "        ", "for", "i_sample", "in", "range", "(", "n_test_samples", ")", ":", "\n", "            ", "treatments", "=", "evaluations", "[", "alg", ".", "name", "]", "[", "i_sample", "]", "\n", "best_found", "=", "0", "\n", "for", "i_treatment", "in", "range", "(", "len", "(", "max_mean_treatment_effects", "[", "i_alg", "]", ")", ")", ":", "\n", "                ", "if", "i_treatment", "<", "len", "(", "treatments", ")", ":", "\n", "                    ", "effect", "=", "treatments", "[", "i_treatment", "]", "[", "1", "]", "\n", "if", "effect", ">", "best_found", ":", "\n", "                        ", "best_found", "=", "effect", "\n", "", "", "max_mean_treatment_effects", "[", "i_alg", "]", "[", "i_treatment", "]", "+=", "best_found", "\n", "", "mean_times", "[", "i_alg", "]", "+=", "len", "(", "treatments", ")", "\n", "\n", "", "", "res", ".", "append", "(", "max_mean_treatment_effects", "/", "n_test_samples", ")", "\n", "res", ".", "append", "(", "mean_times", "/", "n_test_samples", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotSweepDataSplit.get_settings": [[8, 10], ["None"], "function", ["None"], ["def", "get_settings", "(", ")", ":", "\n", "    ", "return", "DataAmountSettings3", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotSweepDataSplit.plot_sweep_data": [[11, 77], ["load_settings", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "setup_algorithms", "len", "numpy.geomspace().astype", "numpy.zeros", "numpy.zeros", "range", "matplotlib.subplots", "ax1.set_title", "ax1.set_xlabel", "ax1.set_ylabel", "range", "ax1.grid", "ax1.get_legend_handles_labels", "ax1.legend", "ax1.set_xscale", "matplotlib.savefig", "matplotlib.subplots", "ax2.set_title", "ax2.set_xlabel", "ax2.set_ylabel", "range", "ax2.grid", "ax2.get_legend_handles_labels", "ax2.legend", "ax2.set_xscale", "matplotlib.savefig", "DataGenerator.data_generator.split_patients", "numpy.sum", "numpy.sum", "range", "ax1.plot", "lns.append", "ax2.plot", "lns.append", "DataGenerator.data_generator.generate_data", "numpy.geomspace", "range", "ax1.fill_between", "lns.append", "ax2.fill_between", "lns.append"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.load_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_algorithms", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["", "def", "plot_sweep_data", "(", "values", ",", "times", ",", "settings", ",", "plot_var", "=", "False", ",", "split_plot", "=", "True", ")", ":", "\n", "    ", "plot_colors", "=", "[", "'k'", ",", "'r'", ",", "'b'", ",", "'g'", ",", "'m'", ",", "'c'", ",", "'y'", "]", "\n", "plot_markers", "=", "[", "'s'", ",", "'v'", ",", "'P'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", "]", "\n", "plot_lines", "=", "[", "'-'", ",", "'--'", ",", "':'", ",", "'-.'", ",", "'-'", ",", "'--'", "]", "\n", "\n", "load_settings", "=", "settings", ".", "load_settings", "\n", "setup_algorithms", "=", "settings", ".", "setup_algorithms", "\n", "starting_seed", ",", "n_data_sets", ",", "delta", ",", "n_data_set_sizes", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples_max", ",", "n_test_samples", ",", "file_name_prefix", "=", "load_settings", "(", ")", "\n", "tmp_dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "3", ",", "1", ",", "5", ",", "3", ")", "\n", "algs", "=", "setup_algorithms", "(", "split_patients", "(", "generate_data", "(", "tmp_dist", ",", "10", ")", ")", ",", "tmp_dist", ",", "0.1", ")", "\n", "file_name_prefix", "=", "file_name_prefix", "\n", "n_algorithms", "=", "len", "(", "algs", ")", "\n", "n_training_samples_array", "=", "np", ".", "geomspace", "(", "10", ",", "n_training_samples_max", ",", "n_data_set_sizes", ")", ".", "astype", "(", "int", ")", "\n", "\n", "values_mean", "=", "np", ".", "sum", "(", "values", ",", "0", ")", "/", "n_data_sets", "\n", "times_mean", "=", "np", ".", "sum", "(", "times", ",", "0", ")", "/", "n_data_sets", "\n", "values_var", "=", "np", ".", "zeros", "(", "(", "n_data_set_sizes", ",", "n_algorithms", ")", ")", "\n", "times_var", "=", "np", ".", "zeros", "(", "(", "n_data_set_sizes", ",", "n_algorithms", ")", ")", "\n", "for", "i_size", "in", "range", "(", "n_data_set_sizes", ")", ":", "\n", "        ", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "            ", "v_var", "=", "0", "\n", "t_var", "=", "0", "\n", "for", "i_data_set", "in", "range", "(", "n_data_sets", ")", ":", "\n", "                ", "v_var", "+=", "(", "values_mean", "[", "i_size", "]", "[", "i_alg", "]", "-", "values", "[", "i_data_set", "]", "[", "i_size", "]", "[", "i_alg", "]", ")", "**", "2", "\n", "t_var", "+=", "(", "times_mean", "[", "i_size", "]", "[", "i_alg", "]", "-", "times", "[", "i_data_set", "]", "[", "i_size", "]", "[", "i_alg", "]", ")", "**", "2", "\n", "", "values_var", "[", "i_size", "]", "[", "i_alg", "]", "=", "v_var", "/", "(", "n_data_sets", "-", "1", ")", "\n", "times_var", "[", "i_size", "]", "[", "i_alg", "]", "=", "t_var", "/", "(", "n_data_sets", "-", "1", ")", "\n", "# Plot mean treatment effect vs delta", "\n", "", "", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "6", ",", "5", ")", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"serif\"", "\n", "\n", "ax1", ".", "set_title", "(", "'Mean treatment value vs data set size (delta: {})'", ".", "format", "(", "delta", ")", ")", "\n", "ax1", ".", "set_xlabel", "(", "'Data set size'", ")", "\n", "ax1", ".", "set_ylabel", "(", "'Mean treatment value'", ")", "\n", "lns", "=", "[", "]", "\n", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "        ", "ln1", "=", "ax1", ".", "plot", "(", "n_training_samples_array", ",", "values_mean", "[", ":", ",", "i_alg", "]", ",", "plot_colors", "[", "i_alg", "]", "+", "plot_markers", "[", "i_alg", "]", "+", "plot_lines", "[", "i_alg", "]", ",", "\n", "label", "=", "'{} {}'", ".", "format", "(", "algs", "[", "i_alg", "]", ".", "label", ",", "'effect'", ")", ",", "markevery", "=", "3", ")", "\n", "lns", ".", "append", "(", "ln1", ")", "\n", "if", "plot_var", ":", "\n", "            ", "ln1v", "=", "ax1", ".", "fill_between", "(", "n_training_samples_array", ",", "values_mean", "[", ":", ",", "i_alg", "]", "-", "values_var", "[", ":", ",", "i_alg", "]", ",", "values_mean", "[", ":", ",", "i_alg", "]", "+", "values_var", "[", ":", ",", "i_alg", "]", ",", "\n", "facecolor", "=", "plot_colors", "[", "i_alg", "]", ",", "alpha", "=", "0.3", ")", "\n", "lns", ".", "append", "(", "ln1v", ")", "\n", "", "", "ax1", ".", "grid", "(", "True", ")", "\n", "lines1", ",", "labels1", "=", "ax1", ".", "get_legend_handles_labels", "(", ")", "\n", "ax1", ".", "legend", "(", "lines1", ",", "labels1", ",", "loc", "=", "'lower right'", ")", "\n", "ax1", ".", "set_xscale", "(", "'log'", ")", "\n", "plt", ".", "savefig", "(", "\"saved_values/\"", "+", "file_name_prefix", "+", "\"_effect_plot.pdf\"", ")", "\n", "\n", "fig", ",", "ax2", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "6", ",", "5", ")", ")", "\n", "ax2", ".", "set_title", "(", "'Mean search time vs data set size (delta: {})'", ".", "format", "(", "delta", ")", ")", "\n", "ax2", ".", "set_xlabel", "(", "'Data set size'", ")", "\n", "ax2", ".", "set_ylabel", "(", "'Mean search time'", ")", "\n", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "        ", "ln2", "=", "ax2", ".", "plot", "(", "n_training_samples_array", ",", "times_mean", "[", ":", ",", "i_alg", "]", ",", "plot_colors", "[", "i_alg", "]", "+", "plot_markers", "[", "i_alg", "]", "+", "plot_lines", "[", "i_alg", "]", ",", "\n", "label", "=", "'{} {}'", ".", "format", "(", "algs", "[", "i_alg", "]", ".", "label", ",", "'time'", ")", ",", "markevery", "=", "3", ")", "\n", "lns", ".", "append", "(", "ln2", ")", "\n", "if", "plot_var", ":", "\n", "            ", "ln2v", "=", "ax2", ".", "fill_between", "(", "n_training_samples_array", ",", "times_mean", "[", ":", ",", "i_alg", "]", "-", "times_var", "[", ":", ",", "i_alg", "]", ",", "times_mean", "[", ":", ",", "i_alg", "]", "+", "times_var", "[", ":", ",", "i_alg", "]", ",", "\n", "facecolor", "=", "plot_colors", "[", "i_alg", "]", ",", "alpha", "=", "0.3", ")", "\n", "lns", ".", "append", "(", "ln2v", ")", "\n", "", "", "ax2", ".", "grid", "(", "True", ")", "\n", "lines2", ",", "labels2", "=", "ax2", ".", "get_legend_handles_labels", "(", ")", "\n", "ax2", ".", "legend", "(", "lines2", ",", "labels2", ",", "loc", "=", "'upper right'", ")", "\n", "ax2", ".", "set_xscale", "(", "'log'", ")", "\n", "plt", ".", "savefig", "(", "\"saved_values/\"", "+", "file_name_prefix", "+", "\"_time_plot.pdf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotTimeVsEffect.get_settings": [[8, 10], ["None"], "function", ["None"], ["def", "get_settings", "(", ")", ":", "\n", "    ", "return", "CDPApproximatorsSettings", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotTimeVsEffect.plot_time_vs_effect": [[11, 40], ["settings.load_settings", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "settings.setup_algorithms", "len", "numpy.zeros", "range", "matplotlib.subplots", "range", "ax1.invert_xaxis", "ax1.legend", "matplotlib.xlabel", "matplotlib.ylabel", "ax1.grid", "matplotlib.savefig", "DataGenerator.data_generator.split_patients", "numpy.sum", "numpy.sum", "ax1.plot", "DataGenerator.data_generator.generate_data"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.load_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_algorithms", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["", "def", "plot_time_vs_effect", "(", "values", ",", "times", ",", "settings", ")", ":", "\n", "    ", "plot_colors", "=", "[", "'k'", ",", "'r'", ",", "'b'", ",", "'g'", ",", "'m'", ",", "'c'", ",", "'y'", "]", "\n", "plot_markers", "=", "[", "'s'", ",", "'v'", ",", "'P'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", "]", "\n", "plot_lines", "=", "[", "'-'", ",", "'--'", ",", "':'", ",", "'-.'", "]", "\n", "\n", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "=", "settings", ".", "load_settings", "(", ")", "\n", "tmp_dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "3", ",", "1", ",", "5", ",", "3", ")", "\n", "algs", "=", "settings", ".", "setup_algorithms", "(", "split_patients", "(", "generate_data", "(", "tmp_dist", ",", "10", ")", ")", ",", "tmp_dist", ",", "0.1", ")", "\n", "n_algorithms", "=", "len", "(", "algs", ")", "\n", "\n", "values_mean", "=", "np", ".", "sum", "(", "values", ",", "0", ")", "/", "n_data_sets", "\n", "times_mean", "=", "np", ".", "sum", "(", "times", ",", "0", ")", "/", "n_data_sets", "\n", "\n", "zipped_mean", "=", "np", ".", "zeros", "(", "(", "n_algorithms", ",", "2", ",", "n_deltas", ")", ")", "\n", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "        ", "zipped_mean", "[", "i_alg", "]", "[", "0", "]", "=", "times_mean", "[", ":", ",", "i_alg", "]", "\n", "zipped_mean", "[", "i_alg", "]", "[", "1", "]", "=", "values_mean", "[", ":", ",", "i_alg", "]", "\n", "\n", "", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"serif\"", "\n", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "        ", "ax1", ".", "plot", "(", "zipped_mean", "[", "i_alg", ",", "0", "]", ",", "zipped_mean", "[", "i_alg", ",", "1", "]", ",", "plot_colors", "[", "i_alg", "]", "+", "plot_markers", "[", "i_alg", "]", "+", "plot_lines", "[", "i_alg", "]", ",", "\n", "label", "=", "'{}'", ".", "format", "(", "algs", "[", "i_alg", "]", ".", "label", ")", ",", "markevery", "=", "3", ")", "\n", "", "ax1", ".", "invert_xaxis", "(", ")", "\n", "ax1", ".", "legend", "(", ")", "\n", "plt", ".", "xlabel", "(", "\"Mean time\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Efficacy\"", ")", "\n", "ax1", ".", "grid", "(", "True", ")", "\n", "plt", ".", "savefig", "(", "\"saved_values/\"", "+", "file_name_prefix", "+", "\"_time_vs_effect.pdf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotAntibiotics.get_settings": [[6, 8], ["None"], "function", ["None"], ["def", "get_settings", "(", ")", ":", "\n", "    ", "return", "AntibioticsSettings", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotAntibiotics.plot_data": [[9, 105], ["load_settings", "Database.antibioticsdatabase.AntibioticsDatabase", "Database.antibioticsdatabase.AntibioticsDatabase.get_data", "split_patients", "setup_algorithms", "len", "values_mean[].copy", "times_mean[].copy", "np.arange", "list", "matplotlib.figure", "matplotlib.title", "matplotlib.ylabel", "matplotlib.xlabel", "np.linspace", "range", "matplotlib.grid", "matplotlib.xticks", "matplotlib.plot", "matplotlib.legend", "matplotlib.savefig", "matplotlib.figure", "matplotlib.title", "matplotlib.ylabel", "matplotlib.xlabel", "enumerate", "matplotlib.bar", "matplotlib.show", "np.sum", "np.sum", "np.arange", "sum", "len", "x_bars.append", "label.replace", "rect.get_height", "matplotlib.text", "matplotlib.plot", "matplotlib.axvline", "matplotlib.axvline", "matplotlib.plot", "np.ones", "range", "max", "len", "rect.get_x", "rect.get_width", "len", "len"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.load_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_algorithms"], ["", "def", "plot_data", "(", "values", ",", "times", ",", "settings", ",", "plot_var", "=", "False", ")", ":", "\n", "\n", "    ", "plot_colors", "=", "[", "'k'", ",", "'r'", ",", "'b'", ",", "'g'", ",", "'m'", ",", "'c'", ",", "'y'", "]", "\n", "plot_markers", "=", "[", "'s'", ",", "'v'", ",", "'P'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", "]", "\n", "plot_lines", "=", "[", "'-'", ",", "'--'", ",", "':'", ",", "'-.'", "]", "+", "[", "(", "i", ",", "(", "1", ",", "4", ",", "i", ",", "i", "^", "2", ")", ")", "for", "i", "in", "range", "(", "0", ",", "4", ")", "]", "\n", "\n", "# Extract settings", "\n", "load_settings", "=", "settings", ".", "load_settings", "\n", "setup_algorithms", "=", "settings", ".", "setup_algorithms", "\n", "starting_seed", ",", "n_data_sets", ",", "delta", ",", "file_name_prefix", "=", "load_settings", "(", ")", "\n", "dist", "=", "AntibioticsDatabase", "(", "AntibioticsSettings", ".", "n_x", ",", "50", ",", "seed", "=", "10342", ")", "\n", "training_data", ",", "test_data", "=", "dist", ".", "get_data", "(", ")", "\n", "training_data", "=", "split_patients", "(", "training_data", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "algs", "=", "setup_algorithms", "(", "dist", ",", "training_data", ",", "n_x", ",", "n_a", ",", "n_y", ",", "delta", ")", "\n", "\n", "n_algorithms", "=", "len", "(", "algs", ")", "\n", "\n", "values_mean", "=", "np", ".", "sum", "(", "values", ",", "0", ")", "/", "n_data_sets", "\n", "times_mean", "=", "np", ".", "sum", "(", "times", ",", "0", ")", "/", "n_data_sets", "\n", "\n", "tmp", "=", "algs", "[", "-", "1", "]", "\n", "algs", "[", "-", "1", "]", "=", "algs", "[", "-", "2", "]", "\n", "algs", "[", "-", "2", "]", "=", "tmp", "\n", "\n", "tmp", "=", "values_mean", "[", "-", "1", "]", ".", "copy", "(", ")", "\n", "values_mean", "[", "-", "1", "]", "=", "values_mean", "[", "-", "2", "]", "\n", "values_mean", "[", "-", "2", "]", "=", "tmp", "\n", "\n", "tmp", "=", "times_mean", "[", "-", "1", "]", ".", "copy", "(", ")", "\n", "times_mean", "[", "-", "1", "]", "=", "times_mean", "[", "-", "2", "]", "\n", "times_mean", "[", "-", "2", "]", "=", "tmp", "\n", "'''\n    values_var = np.zeros(n_algorithms)\n    times_var = np.zeros(n_algorithms)\n    for i_alg in range(n_algorithms):\n        v_var = 0\n        t_var = 0\n        for i_data_set in range(n_data_sets):\n            v_var += (values_mean[i_alg] - values[i_data_set][i_alg])**2\n            t_var += (times_mean[i_alg] - times[i_data_set][i_alg])**2\n        values_var[i_alg] = v_var / (n_data_sets - 1)\n        times_var[i_alg] = t_var / (n_data_sets - 1)\n    '''", "\n", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "n_a", ")", "\n", "x_ticks", "=", "list", "(", "np", ".", "arange", "(", "1", ",", "n_a", "+", "1", ")", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "r'Treatment effect. $\\delta$: {}'", ".", "format", "(", "delta", ")", ")", "\n", "plt", ".", "ylabel", "(", "'Mean treatment effect'", ")", "\n", "plt", ".", "xlabel", "(", "'Number of tried treatments'", ")", "\n", "average_max_treatment_effect", "=", "sum", "(", "[", "max", "(", "data", "[", "-", "1", "]", ")", "for", "data", "in", "test_data", "]", ")", "/", "len", "(", "test_data", ")", "\n", "mean_lines", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "n_algorithms", ")", "\n", "algs", "[", "-", "3", "]", ".", "label", "=", "\"NDP_F\"", "\n", "algs", "[", "-", "2", "]", ".", "label", "=", "\"Emulated doctor\"", "\n", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "        ", "if", "algs", "[", "i_alg", "]", ".", "name", "!=", "\"Doctor\"", ":", "\n", "            ", "plt", ".", "plot", "(", "x", ",", "values_mean", "[", "i_alg", "]", ",", "\n", "plot_markers", "[", "i_alg", "]", "+", "plot_colors", "[", "i_alg", "]", ",", "linestyle", "=", "plot_lines", "[", "i_alg", "%", "len", "(", "plot_lines", ")", "]", ",", "label", "=", "algs", "[", "i_alg", "]", ".", "label", ")", "\n", "#plt.plot(x, values_mean[i_alg], plot_colors[i_alg], linestyle='-',", "\n", "#         alpha=0.3)", "\n", "# plt.plot(x, mean_treatment_effects[i_plot], plot_markers[i_plot] + plot_colors[i_plot] + plot_lines[1])", "\n", "# plt.fill_between(x, mean_treatment_effects[i_plot], max_mean_treatment_effects[i_plot], color=plot_colors[i_plot], alpha=0.1)", "\n", "plt", ".", "axvline", "(", "times_mean", "[", "i_alg", "]", "-", "1", ",", "ymin", "=", "mean_lines", "[", "i_alg", "]", ",", "ymax", "=", "mean_lines", "[", "i_alg", "+", "1", "]", ",", "\n", "color", "=", "plot_colors", "[", "i_alg", "]", ")", "\n", "plt", ".", "axvline", "(", "times_mean", "[", "i_alg", "]", "-", "1", ",", "ymin", "=", "0", ",", "ymax", "=", "1", ",", "\n", "color", "=", "plot_colors", "[", "i_alg", "]", ",", "alpha", "=", "0.1", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "plot", "(", "0", ",", "values_mean", "[", "i_alg", "]", "[", "0", "]", ",", "\n", "plot_markers", "[", "i_alg", "]", "+", "plot_colors", "[", "i_alg", "]", ",", "markersize", "=", "20", ",", "linestyle", "=", "plot_lines", "[", "i_alg", "%", "len", "(", "plot_lines", ")", "]", ",", "\n", "linewidth", "=", "4", ",", "label", "=", "algs", "[", "i_alg", "]", ".", "label", ")", "\n", "#plt.rcParams[\"text.usetex\"] = True", "\n", "", "", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"serif\"", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xticks", "(", "x", ",", "x_ticks", ")", "\n", "plt", ".", "plot", "(", "x", ",", "np", ".", "ones", "(", "len", "(", "x", ")", ")", "*", "average_max_treatment_effect", ",", "linestyle", "=", "plot_lines", "[", "-", "1", "]", ",", "label", "=", "'MAX_POSS_AVG'", ")", "\n", "\n", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "savefig", "(", "\"saved_values/\"", "+", "file_name_prefix", "+", "\"_plotNew.pdf\"", ")", "\n", "\n", "# Plot mean number of treatments tried", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'Search time'", ")", "\n", "plt", ".", "ylabel", "(", "'Mean number of treatments tried'", ")", "\n", "plt", ".", "xlabel", "(", "'Policy'", ")", "\n", "x_bars", "=", "[", "]", "\n", "for", "i_alg", ",", "alg", "in", "enumerate", "(", "algs", ")", ":", "\n", "        ", "x_bars", ".", "append", "(", "alg", ".", "name", ")", "\n", "", "x_bars", "=", "[", "label", ".", "replace", "(", "\" \"", ",", "'\\n'", ")", "for", "label", "in", "x_bars", "]", "\n", "rects", "=", "plt", ".", "bar", "(", "x_bars", ",", "times_mean", ")", "\n", "for", "rect", "in", "rects", ":", "\n", "        ", "h", "=", "rect", ".", "get_height", "(", ")", "\n", "plt", ".", "text", "(", "rect", ".", "get_x", "(", ")", "+", "rect", ".", "get_width", "(", ")", "/", "2.", ",", "0.90", "*", "h", ",", "\"%f\"", "%", "h", ",", "ha", "=", "\"center\"", ",", "va", "=", "\"bottom\"", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotTimeVsEffectAntibiotics.get_settings": [[8, 10], ["None"], "function", ["None"], ["def", "get_settings", "(", ")", ":", "\n", "    ", "return", "AntibioticsDeltaSweepSettings", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotTimeVsEffectAntibiotics.plot_time_vs_effect": [[11, 43], ["settings.load_settings", "Database.antibioticsdatabase.AntibioticsDatabase", "Database.antibioticsdatabase.AntibioticsDatabase.get_data", "DataGenerator.data_generator.split_patients", "setup_algorithms", "len", "numpy.zeros", "range", "matplotlib.subplots", "range", "ax1.invert_xaxis", "ax1.legend", "matplotlib.xlabel", "matplotlib.ylabel", "ax1.grid", "matplotlib.savefig", "numpy.sum", "numpy.sum", "ax1.plot"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.load_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_algorithms"], ["", "def", "plot_time_vs_effect", "(", "values", ",", "times", ",", "settings", ")", ":", "\n", "    ", "plot_colors", "=", "[", "'k'", ",", "'r'", ",", "'b'", ",", "'g'", ",", "'m'", ",", "'c'", ",", "'y'", "]", "\n", "plot_markers", "=", "[", "'s'", ",", "'v'", ",", "'P'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", "]", "\n", "plot_lines", "=", "[", "'-'", ",", "'--'", ",", "':'", ",", "'-.'", "]", "\n", "\n", "setup_algorithms", "=", "settings", ".", "setup_algorithms", "\n", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "file_name_prefix", "=", "settings", ".", "load_settings", "(", ")", "\n", "dist", "=", "AntibioticsDatabase", "(", "AntibioticsDeltaSweepSettings", ".", "n_x", ",", "50", ",", "seed", "=", "10342", ")", "\n", "training_data", ",", "test_data", "=", "dist", ".", "get_data", "(", ")", "\n", "training_data", "=", "split_patients", "(", "training_data", ")", "\n", "algs", "=", "setup_algorithms", "(", "training_data", ",", "dist", ",", "0", ")", "\n", "n_algorithms", "=", "len", "(", "algs", ")", "\n", "\n", "values_mean", "=", "np", ".", "sum", "(", "values", ",", "0", ")", "/", "n_data_sets", "\n", "times_mean", "=", "np", ".", "sum", "(", "times", ",", "0", ")", "/", "n_data_sets", "\n", "\n", "zipped_mean", "=", "np", ".", "zeros", "(", "(", "n_algorithms", ",", "2", ",", "n_deltas", ")", ")", "\n", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "        ", "zipped_mean", "[", "i_alg", "]", "[", "0", "]", "=", "times_mean", "[", ":", ",", "i_alg", "]", "\n", "zipped_mean", "[", "i_alg", "]", "[", "1", "]", "=", "values_mean", "[", ":", ",", "i_alg", "]", "\n", "\n", "", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"serif\"", "\n", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "        ", "ax1", ".", "plot", "(", "zipped_mean", "[", "i_alg", ",", "0", "]", ",", "zipped_mean", "[", "i_alg", ",", "1", "]", ",", "plot_colors", "[", "i_alg", "]", "+", "plot_markers", "[", "i_alg", "]", "+", "plot_lines", "[", "0", "]", ",", "\n", "label", "=", "'{}'", ".", "format", "(", "algs", "[", "i_alg", "]", ".", "label", ")", ")", "\n", "", "ax1", ".", "invert_xaxis", "(", ")", "\n", "ax1", ".", "legend", "(", ")", "\n", "plt", ".", "xlabel", "(", "\"Mean time\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Efficacy\"", ")", "\n", "ax1", ".", "grid", "(", "True", ")", "\n", "plt", ".", "savefig", "(", "\"saved_values/\"", "+", "file_name_prefix", "+", "\"_time_vs_effect4.pdf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotSweepDeltaSplit.get_settings": [[8, 10], ["None"], "function", ["None"], ["def", "get_settings", "(", ")", ":", "\n", "    ", "return", "NaiveVsConstrainedSettings", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotSweepDeltaSplit.plot_sweep_delta": [[11, 75], ["load_settings", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "setup_algorithms", "len", "numpy.linspace", "numpy.zeros", "numpy.zeros", "range", "matplotlib.subplots", "ax1.set_title", "ax1.set_xlabel", "ax1.set_ylabel", "range", "ax1.grid", "ax1.get_legend_handles_labels", "ax1.legend", "matplotlib.savefig", "matplotlib.subplots", "ax2.set_xlabel", "ax2.set_ylabel", "range", "ax2.grid", "ax2.get_legend_handles_labels", "ax2.legend", "matplotlib.savefig", "DataGenerator.data_generator.split_patients", "numpy.sum", "numpy.sum", "range", "ax1.plot", "lns.append", "ax2.plot", "lns.append", "DataGenerator.data_generator.generate_data", "range", "ax1.fill_between", "lns.append", "ax2.fill_between", "lns.append"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.load_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_algorithms", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["", "def", "plot_sweep_delta", "(", "values", ",", "times", ",", "settings", ",", "plot_var", "=", "False", ",", "split_plot", "=", "True", ")", ":", "\n", "    ", "plot_colors", "=", "[", "'k'", ",", "'r'", ",", "'b'", ",", "'g'", ",", "'m'", ",", "'c'", ",", "'y'", "]", "\n", "plot_markers", "=", "[", "'s'", ",", "'v'", ",", "'P'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", "]", "\n", "plot_lines", "=", "[", "'-'", ",", "'--'", ",", "':'", ",", "'-.'", ",", "'-'", ",", "'--'", ",", "':'", "]", "\n", "\n", "# Extract settings", "\n", "load_settings", "=", "settings", ".", "load_settings", "\n", "setup_algorithms", "=", "settings", ".", "setup_algorithms", "\n", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "=", "load_settings", "(", ")", "\n", "tmp_dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "3", ",", "5", ",", "5", ",", "3", ")", "\n", "algs", "=", "setup_algorithms", "(", "split_patients", "(", "generate_data", "(", "tmp_dist", ",", "10", ")", ")", ",", "tmp_dist", ",", "0.1", ")", "\n", "n_algorithms", "=", "len", "(", "algs", ")", "\n", "deltas", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "n_deltas", ")", "\n", "\n", "values_mean", "=", "np", ".", "sum", "(", "values", ",", "0", ")", "/", "n_data_sets", "\n", "times_mean", "=", "np", ".", "sum", "(", "times", ",", "0", ")", "/", "n_data_sets", "\n", "values_var", "=", "np", ".", "zeros", "(", "(", "n_deltas", ",", "n_algorithms", ")", ")", "\n", "times_var", "=", "np", ".", "zeros", "(", "(", "n_deltas", ",", "n_algorithms", ")", ")", "\n", "for", "i_delta", "in", "range", "(", "n_deltas", ")", ":", "\n", "        ", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "            ", "v_var", "=", "0", "\n", "t_var", "=", "0", "\n", "for", "i_data_set", "in", "range", "(", "n_data_sets", ")", ":", "\n", "                ", "v_var", "+=", "(", "values_mean", "[", "i_delta", "]", "[", "i_alg", "]", "-", "values", "[", "i_data_set", "]", "[", "i_delta", "]", "[", "i_alg", "]", ")", "**", "2", "\n", "t_var", "+=", "(", "times_mean", "[", "i_delta", "]", "[", "i_alg", "]", "-", "times", "[", "i_data_set", "]", "[", "i_delta", "]", "[", "i_alg", "]", ")", "**", "2", "\n", "", "values_var", "[", "i_delta", "]", "[", "i_alg", "]", "=", "v_var", "/", "(", "n_data_sets", "-", "1", ")", "\n", "times_var", "[", "i_delta", "]", "[", "i_alg", "]", "=", "t_var", "/", "(", "n_data_sets", "-", "1", ")", "\n", "\n", "# Plot mean treatment effect vs delta", "\n", "", "", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "6", ",", "5", ")", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"serif\"", "\n", "ax1", ".", "set_title", "(", "r'Mean treatment effect/mean search time vs $\\delta$'", ")", "\n", "ax1", ".", "set_xlabel", "(", "r'$\\delta$'", ")", "\n", "ax1", ".", "set_ylabel", "(", "'Efficacy'", ")", "\n", "lns", "=", "[", "]", "\n", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "        ", "ln1", "=", "ax1", ".", "plot", "(", "deltas", ",", "values_mean", "[", ":", ",", "i_alg", "]", ",", "plot_colors", "[", "i_alg", "]", "+", "plot_markers", "[", "i_alg", "]", "+", "plot_lines", "[", "i_alg", "]", ",", "\n", "label", "=", "'{} {}'", ".", "format", "(", "algs", "[", "i_alg", "]", ".", "label", ",", "'effect'", ")", ",", "markevery", "=", "3", ")", "\n", "lns", ".", "append", "(", "ln1", ")", "\n", "if", "plot_var", ":", "\n", "            ", "ln1v", "=", "ax1", ".", "fill_between", "(", "deltas", ",", "values_mean", "[", ":", ",", "i_alg", "]", "-", "values_var", "[", ":", ",", "i_alg", "]", ",", "values_mean", "[", ":", ",", "i_alg", "]", "+", "values_var", "[", ":", ",", "i_alg", "]", ",", "\n", "facecolor", "=", "plot_colors", "[", "i_alg", "]", ",", "alpha", "=", "0.3", ")", "\n", "lns", ".", "append", "(", "ln1v", ")", "\n", "", "", "ax1", ".", "grid", "(", "True", ")", "\n", "lines1", ",", "labels1", "=", "ax1", ".", "get_legend_handles_labels", "(", ")", "\n", "ax1", ".", "legend", "(", "lines1", ",", "labels1", ",", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "savefig", "(", "\"saved_values/\"", "+", "file_name_prefix", "+", "\"_effect_plot.pdf\"", ")", "\n", "\n", "fig", ",", "ax2", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "6", ",", "5", ")", ")", "\n", "ax2", ".", "set_xlabel", "(", "r'$\\delta$'", ")", "\n", "ax2", ".", "set_ylabel", "(", "'Mean search time'", ")", "\n", "lns", "=", "[", "]", "\n", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "        ", "ln2", "=", "ax2", ".", "plot", "(", "deltas", ",", "times_mean", "[", ":", ",", "i_alg", "]", ",", "plot_colors", "[", "i_alg", "]", "+", "plot_markers", "[", "i_alg", "]", "+", "plot_lines", "[", "i_alg", "]", ",", "\n", "label", "=", "'{} {}'", ".", "format", "(", "algs", "[", "i_alg", "]", ".", "label", ",", "'time'", ")", ",", "markevery", "=", "3", ")", "\n", "lns", ".", "append", "(", "ln2", ")", "\n", "if", "plot_var", ":", "\n", "            ", "ln2v", "=", "ax2", ".", "fill_between", "(", "deltas", ",", "times_mean", "[", ":", ",", "i_alg", "]", "-", "times_var", "[", ":", ",", "i_alg", "]", ",", "times_mean", "[", ":", ",", "i_alg", "]", "+", "times_var", "[", ":", ",", "i_alg", "]", ",", "\n", "facecolor", "=", "plot_colors", "[", "i_alg", "]", ",", "alpha", "=", "0.3", ")", "\n", "lns", ".", "append", "(", "ln2v", ")", "\n", "", "", "ax2", ".", "grid", "(", "True", ")", "\n", "lines2", ",", "labels2", "=", "ax2", ".", "get_legend_handles_labels", "(", ")", "\n", "ax2", ".", "legend", "(", "lines2", ",", "labels2", ",", "loc", "=", "'lower left'", ")", "\n", "plt", ".", "savefig", "(", "\"saved_values/\"", "+", "file_name_prefix", "+", "\"_time_plot.pdf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotAntibioticsSweepDelta.get_settings": [[7, 9], ["None"], "function", ["None"], ["def", "get_settings", "(", ")", ":", "\n", "    ", "return", "AntibioticsDeltaSweepSettings", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotAntibioticsSweepDelta.plot_sweep_delta": [[10, 74], ["load_settings", "Database.antibioticsdatabase.AntibioticsDatabase", "Database.antibioticsdatabase.AntibioticsDatabase.get_data", "DataGenerator.data_generator.split_patients", "setup_algorithms", "len", "numpy.linspace", "numpy.zeros", "numpy.zeros", "range", "ax1.set_title", "ax1.set_xlabel", "ax1.twinx.set_xlabel", "ax1.set_ylabel", "ax1.twinx.set_ylabel", "range", "ax1.grid", "ax1.twinx.grid", "ax1.get_legend_handles_labels", "ax1.twinx.get_legend_handles_labels", "ax1.legend", "ax1.twinx.legend", "matplotlib.savefig", "numpy.sum", "numpy.sum", "range", "matplotlib.subplots", "ax1.twinx", "matplotlib.subplots", "ax1.plot", "ax1.twinx.plot", "lns.append", "lns.append", "range", "ax1.fill_between", "ax1.twinx.fill_between", "lns.append", "lns.append"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.load_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_algorithms"], ["", "def", "plot_sweep_delta", "(", "values", ",", "times", ",", "settings", ",", "plot_var", "=", "False", ",", "split_plot", "=", "True", ")", ":", "\n", "    ", "plot_colors", "=", "[", "'k'", ",", "'r'", ",", "'b'", ",", "'g'", ",", "'m'", ",", "'c'", ",", "'y'", "]", "\n", "plot_markers", "=", "[", "'s'", ",", "'v'", ",", "'P'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", "]", "\n", "plot_lines", "=", "[", "'-'", ",", "'--'", ",", "':'", ",", "'-.'", ",", "'-'", ",", "'--'", ",", "':'", "]", "\n", "\n", "# Extract settings", "\n", "load_settings", "=", "settings", ".", "load_settings", "\n", "setup_algorithms", "=", "settings", ".", "setup_algorithms", "\n", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "file_name_prefix", "=", "load_settings", "(", ")", "\n", "dist", "=", "AntibioticsDatabase", "(", "AntibioticsDeltaSweepSettings", ".", "n_x", ",", "50", ",", "seed", "=", "10342", ")", "\n", "training_data", ",", "test_data", "=", "dist", ".", "get_data", "(", ")", "\n", "training_data", "=", "split_patients", "(", "training_data", ")", "\n", "algs", "=", "setup_algorithms", "(", "training_data", ",", "dist", ",", "0", ")", "\n", "n_algorithms", "=", "len", "(", "algs", ")", "\n", "deltas", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "n_deltas", ")", "\n", "\n", "values_mean", "=", "np", ".", "sum", "(", "values", ",", "0", ")", "/", "n_data_sets", "\n", "times_mean", "=", "np", ".", "sum", "(", "times", ",", "0", ")", "/", "n_data_sets", "\n", "values_var", "=", "np", ".", "zeros", "(", "(", "n_deltas", ",", "n_algorithms", ")", ")", "\n", "times_var", "=", "np", ".", "zeros", "(", "(", "n_deltas", ",", "n_algorithms", ")", ")", "\n", "for", "i_delta", "in", "range", "(", "n_deltas", ")", ":", "\n", "        ", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "            ", "v_var", "=", "0", "\n", "t_var", "=", "0", "\n", "for", "i_data_set", "in", "range", "(", "n_data_sets", ")", ":", "\n", "                ", "v_var", "+=", "(", "values_mean", "[", "i_delta", "]", "[", "i_alg", "]", "-", "values", "[", "i_data_set", "]", "[", "i_delta", "]", "[", "i_alg", "]", ")", "**", "2", "\n", "t_var", "+=", "(", "times_mean", "[", "i_delta", "]", "[", "i_alg", "]", "-", "times", "[", "i_data_set", "]", "[", "i_delta", "]", "[", "i_alg", "]", ")", "**", "2", "\n", "", "values_var", "[", "i_delta", "]", "[", "i_alg", "]", "=", "v_var", "/", "(", "n_data_sets", "-", "1", ")", "\n", "times_var", "[", "i_delta", "]", "[", "i_alg", "]", "=", "t_var", "/", "(", "n_data_sets", "-", "1", ")", "\n", "\n", "# Plot mean treatment effect vs delta", "\n", "", "", "if", "not", "split_plot", ":", "\n", "        ", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "ax2", "=", "ax1", ".", "twinx", "(", ")", "\n", "", "else", ":", "\n", "        ", "fig", ",", "(", "ax1", ",", "ax2", ")", "=", "plt", ".", "subplots", "(", "2", ",", "1", ",", "figsize", "=", "(", "6", ",", "10", ")", ")", "\n", "", "ax1", ".", "set_title", "(", "r'Mean treatment effect/mean search time vs $\\delta$'", ")", "\n", "ax1", ".", "set_xlabel", "(", "r'$\\delta$'", ")", "\n", "ax2", ".", "set_xlabel", "(", "r'$\\delta$'", ")", "\n", "ax1", ".", "set_ylabel", "(", "'Efficacy'", ")", "\n", "ax2", ".", "set_ylabel", "(", "'Mean search time'", ")", "\n", "lns", "=", "[", "]", "\n", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "        ", "ln1", "=", "ax1", ".", "plot", "(", "deltas", ",", "values_mean", "[", ":", ",", "i_alg", "]", ",", "plot_colors", "[", "i_alg", "]", "+", "plot_markers", "[", "i_alg", "]", "+", "plot_lines", "[", "0", "]", ",", "\n", "label", "=", "'{} {}'", ".", "format", "(", "algs", "[", "i_alg", "]", ".", "label", ",", "'effect'", ")", ",", "markevery", "=", "3", ")", "\n", "ln2", "=", "ax2", ".", "plot", "(", "deltas", ",", "times_mean", "[", ":", ",", "i_alg", "]", ",", "plot_colors", "[", "i_alg", "]", "+", "plot_markers", "[", "i_alg", "]", "+", "plot_lines", "[", "1", "]", ",", "\n", "label", "=", "'{} {}'", ".", "format", "(", "algs", "[", "i_alg", "]", ".", "label", ",", "'time'", ")", ",", "markevery", "=", "3", ")", "\n", "lns", ".", "append", "(", "ln1", ")", "\n", "lns", ".", "append", "(", "ln2", ")", "\n", "if", "plot_var", ":", "\n", "            ", "ln1v", "=", "ax1", ".", "fill_between", "(", "deltas", ",", "values_mean", "[", ":", ",", "i_alg", "]", "-", "values_var", "[", ":", ",", "i_alg", "]", ",", "values_mean", "[", ":", ",", "i_alg", "]", "+", "values_var", "[", ":", ",", "i_alg", "]", ",", "\n", "facecolor", "=", "plot_colors", "[", "i_alg", "]", ",", "alpha", "=", "0.3", ")", "\n", "ln2v", "=", "ax2", ".", "fill_between", "(", "deltas", ",", "times_mean", "[", ":", ",", "i_alg", "]", "-", "times_var", "[", ":", ",", "i_alg", "]", ",", "times_mean", "[", ":", ",", "i_alg", "]", "+", "times_var", "[", ":", ",", "i_alg", "]", ",", "\n", "facecolor", "=", "plot_colors", "[", "i_alg", "]", ",", "alpha", "=", "0.3", ")", "\n", "lns", ".", "append", "(", "ln1v", ")", "\n", "lns", ".", "append", "(", "ln2v", ")", "\n", "", "", "ax1", ".", "grid", "(", "True", ")", "\n", "ax2", ".", "grid", "(", "True", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"serif\"", "\n", "lines1", ",", "labels1", "=", "ax1", ".", "get_legend_handles_labels", "(", ")", "\n", "lines2", ",", "labels2", "=", "ax2", ".", "get_legend_handles_labels", "(", ")", "\n", "ax1", ".", "legend", "(", "lines1", ",", "labels1", ",", "loc", "=", "'upper right'", ")", "\n", "ax2", ".", "legend", "(", "lines2", ",", "labels2", ",", "loc", "=", "'lower left'", ")", "\n", "plt", ".", "savefig", "(", "\"saved_values/\"", "+", "file_name_prefix", "+", "\"_plot2.png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotSweepDelta.get_settings": [[7, 9], ["None"], "function", ["None"], ["def", "get_settings", "(", ")", ":", "\n", "    ", "return", "GeneralDeltaSweepSettings", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotSweepDelta.plot_sweep_delta": [[10, 72], ["load_settings", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "setup_algorithms", "len", "numpy.linspace", "numpy.zeros", "numpy.zeros", "range", "ax1.set_title", "ax1.set_xlabel", "ax1.twinx.set_xlabel", "ax1.set_ylabel", "ax1.twinx.set_ylabel", "range", "ax1.grid", "ax1.twinx.grid", "ax1.get_legend_handles_labels", "ax1.twinx.get_legend_handles_labels", "ax1.legend", "ax1.twinx.legend", "matplotlib.savefig", "DataGenerator.data_generator.split_patients", "numpy.sum", "numpy.sum", "range", "matplotlib.subplots", "ax1.twinx", "matplotlib.subplots", "ax1.plot", "ax1.twinx.plot", "lns.append", "lns.append", "DataGenerator.data_generator.generate_data", "range", "ax1.fill_between", "ax1.twinx.fill_between", "lns.append", "lns.append"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.load_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_algorithms", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["", "def", "plot_sweep_delta", "(", "values", ",", "times", ",", "settings", ",", "plot_var", "=", "False", ",", "split_plot", "=", "True", ")", ":", "\n", "    ", "plot_colors", "=", "[", "'k'", ",", "'r'", ",", "'b'", ",", "'g'", ",", "'m'", ",", "'c'", ",", "'y'", "]", "\n", "plot_markers", "=", "[", "'s'", ",", "'v'", ",", "'P'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", "]", "\n", "plot_lines", "=", "[", "'-'", ",", "'--'", ",", "':'", ",", "'-.'", ",", "'-'", ",", "'--'", ",", "':'", "]", "\n", "\n", "# Extract settings", "\n", "load_settings", "=", "settings", ".", "load_settings", "\n", "setup_algorithms", "=", "settings", ".", "setup_algorithms", "\n", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "=", "load_settings", "(", ")", "\n", "tmp_dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "3", ",", "5", ",", "5", ",", "3", ")", "\n", "algs", "=", "setup_algorithms", "(", "split_patients", "(", "generate_data", "(", "tmp_dist", ",", "10", ")", ")", ",", "tmp_dist", ",", "0.1", ")", "\n", "n_algorithms", "=", "len", "(", "algs", ")", "\n", "deltas", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "n_deltas", ")", "\n", "\n", "values_mean", "=", "np", ".", "sum", "(", "values", ",", "0", ")", "/", "n_data_sets", "\n", "times_mean", "=", "np", ".", "sum", "(", "times", ",", "0", ")", "/", "n_data_sets", "\n", "values_var", "=", "np", ".", "zeros", "(", "(", "n_deltas", ",", "n_algorithms", ")", ")", "\n", "times_var", "=", "np", ".", "zeros", "(", "(", "n_deltas", ",", "n_algorithms", ")", ")", "\n", "for", "i_delta", "in", "range", "(", "n_deltas", ")", ":", "\n", "        ", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "            ", "v_var", "=", "0", "\n", "t_var", "=", "0", "\n", "for", "i_data_set", "in", "range", "(", "n_data_sets", ")", ":", "\n", "                ", "v_var", "+=", "(", "values_mean", "[", "i_delta", "]", "[", "i_alg", "]", "-", "values", "[", "i_data_set", "]", "[", "i_delta", "]", "[", "i_alg", "]", ")", "**", "2", "\n", "t_var", "+=", "(", "times_mean", "[", "i_delta", "]", "[", "i_alg", "]", "-", "times", "[", "i_data_set", "]", "[", "i_delta", "]", "[", "i_alg", "]", ")", "**", "2", "\n", "", "values_var", "[", "i_delta", "]", "[", "i_alg", "]", "=", "v_var", "/", "(", "n_data_sets", "-", "1", ")", "\n", "times_var", "[", "i_delta", "]", "[", "i_alg", "]", "=", "t_var", "/", "(", "n_data_sets", "-", "1", ")", "\n", "\n", "# Plot mean treatment effect vs delta", "\n", "", "", "if", "not", "split_plot", ":", "\n", "        ", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "ax2", "=", "ax1", ".", "twinx", "(", ")", "\n", "", "else", ":", "\n", "        ", "fig", ",", "(", "ax1", ",", "ax2", ")", "=", "plt", ".", "subplots", "(", "2", ",", "1", ",", "figsize", "=", "(", "6", ",", "10", ")", ")", "\n", "", "ax1", ".", "set_title", "(", "r'Mean treatment effect/mean search time vs $\\delta$'", ")", "\n", "ax1", ".", "set_xlabel", "(", "r'$\\delta$'", ")", "\n", "ax2", ".", "set_xlabel", "(", "r'$\\delta$'", ")", "\n", "ax1", ".", "set_ylabel", "(", "'Efficacy'", ")", "\n", "ax2", ".", "set_ylabel", "(", "'Mean search time'", ")", "\n", "lns", "=", "[", "]", "\n", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "        ", "ln1", "=", "ax1", ".", "plot", "(", "deltas", ",", "values_mean", "[", ":", ",", "i_alg", "]", ",", "plot_colors", "[", "i_alg", "]", "+", "plot_markers", "[", "i_alg", "]", "+", "plot_lines", "[", "i_alg", "]", ",", "\n", "label", "=", "'{} {}'", ".", "format", "(", "algs", "[", "i_alg", "]", ".", "label", ",", "'effect'", ")", ",", "markevery", "=", "3", ")", "\n", "ln2", "=", "ax2", ".", "plot", "(", "deltas", ",", "times_mean", "[", ":", ",", "i_alg", "]", ",", "plot_colors", "[", "i_alg", "]", "+", "plot_markers", "[", "i_alg", "]", "+", "plot_lines", "[", "i_alg", "]", ",", "\n", "label", "=", "'{} {}'", ".", "format", "(", "algs", "[", "i_alg", "]", ".", "label", ",", "'time'", ")", ",", "markevery", "=", "3", ")", "\n", "lns", ".", "append", "(", "ln1", ")", "\n", "lns", ".", "append", "(", "ln2", ")", "\n", "if", "plot_var", ":", "\n", "            ", "ln1v", "=", "ax1", ".", "fill_between", "(", "deltas", ",", "values_mean", "[", ":", ",", "i_alg", "]", "-", "values_var", "[", ":", ",", "i_alg", "]", ",", "values_mean", "[", ":", ",", "i_alg", "]", "+", "values_var", "[", ":", ",", "i_alg", "]", ",", "\n", "facecolor", "=", "plot_colors", "[", "i_alg", "]", ",", "alpha", "=", "0.3", ")", "\n", "ln2v", "=", "ax2", ".", "fill_between", "(", "deltas", ",", "times_mean", "[", ":", ",", "i_alg", "]", "-", "times_var", "[", ":", ",", "i_alg", "]", ",", "times_mean", "[", ":", ",", "i_alg", "]", "+", "times_var", "[", ":", ",", "i_alg", "]", ",", "\n", "facecolor", "=", "plot_colors", "[", "i_alg", "]", ",", "alpha", "=", "0.3", ")", "\n", "lns", ".", "append", "(", "ln1v", ")", "\n", "lns", ".", "append", "(", "ln2v", ")", "\n", "", "", "ax1", ".", "grid", "(", "True", ")", "\n", "ax2", ".", "grid", "(", "True", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"serif\"", "\n", "lines1", ",", "labels1", "=", "ax1", ".", "get_legend_handles_labels", "(", ")", "\n", "lines2", ",", "labels2", "=", "ax2", ".", "get_legend_handles_labels", "(", ")", "\n", "ax1", ".", "legend", "(", "lines1", ",", "labels1", ",", "loc", "=", "'upper right'", ")", "\n", "ax2", ".", "legend", "(", "lines2", ",", "labels2", ",", "loc", "=", "'lower left'", ")", "\n", "plt", ".", "savefig", "(", "\"saved_values/\"", "+", "file_name_prefix", "+", "\"_plot.pdf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotSweepData.get_settings": [[8, 10], ["None"], "function", ["None"], ["def", "get_settings", "(", ")", ":", "\n", "    ", "return", "DataAmountSettings", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Plotters.PlotSweepData.plot_sweep_data": [[11, 75], ["load_settings", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "setup_algorithms", "len", "numpy.geomspace().astype", "numpy.zeros", "numpy.zeros", "range", "ax1.set_title", "ax1.set_xlabel", "ax1.twinx.set_xlabel", "ax1.set_ylabel", "ax1.twinx.set_ylabel", "range", "ax1.grid", "ax1.twinx.grid", "ax1.get_legend_handles_labels", "ax1.twinx.get_legend_handles_labels", "ax1.legend", "ax1.twinx.legend", "ax1.set_xscale", "ax1.twinx.set_xscale", "matplotlib.savefig", "DataGenerator.data_generator.split_patients", "numpy.sum", "numpy.sum", "range", "matplotlib.subplots", "ax1.twinx", "matplotlib.subplots", "ax1.plot", "ax1.twinx.plot", "lns.append", "lns.append", "DataGenerator.data_generator.generate_data", "numpy.geomspace", "range", "ax1.fill_between", "ax1.twinx.fill_between", "lns.append", "lns.append"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.load_settings", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_algorithms", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["", "def", "plot_sweep_data", "(", "values", ",", "times", ",", "settings", ",", "plot_var", "=", "False", ",", "split_plot", "=", "True", ")", ":", "\n", "    ", "plot_colors", "=", "[", "'k'", ",", "'r'", ",", "'b'", ",", "'g'", ",", "'m'", ",", "'c'", ",", "'y'", "]", "\n", "plot_markers", "=", "[", "'s'", ",", "'v'", ",", "'P'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", "]", "\n", "plot_lines", "=", "[", "'-'", ",", "'--'", ",", "':'", ",", "'-.'", ",", "'-'", ",", "'--'", "]", "\n", "\n", "load_settings", "=", "settings", ".", "load_settings", "\n", "setup_algorithms", "=", "settings", ".", "setup_algorithms", "\n", "starting_seed", ",", "n_data_sets", ",", "delta", ",", "n_data_set_sizes", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples_max", ",", "n_test_samples", ",", "file_name_prefix", "=", "load_settings", "(", ")", "\n", "tmp_dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "3", ",", "1", ",", "5", ",", "3", ")", "\n", "algs", "=", "setup_algorithms", "(", "split_patients", "(", "generate_data", "(", "tmp_dist", ",", "10", ")", ")", ",", "tmp_dist", ",", "0.1", ")", "\n", "file_name_prefix", "=", "file_name_prefix", "\n", "n_algorithms", "=", "len", "(", "algs", ")", "\n", "n_training_samples_array", "=", "np", ".", "geomspace", "(", "10", ",", "n_training_samples_max", ",", "n_data_set_sizes", ")", ".", "astype", "(", "int", ")", "\n", "\n", "values_mean", "=", "np", ".", "sum", "(", "values", ",", "0", ")", "/", "n_data_sets", "\n", "times_mean", "=", "np", ".", "sum", "(", "times", ",", "0", ")", "/", "n_data_sets", "\n", "values_var", "=", "np", ".", "zeros", "(", "(", "n_data_set_sizes", ",", "n_algorithms", ")", ")", "\n", "times_var", "=", "np", ".", "zeros", "(", "(", "n_data_set_sizes", ",", "n_algorithms", ")", ")", "\n", "for", "i_size", "in", "range", "(", "n_data_set_sizes", ")", ":", "\n", "        ", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "            ", "v_var", "=", "0", "\n", "t_var", "=", "0", "\n", "for", "i_data_set", "in", "range", "(", "n_data_sets", ")", ":", "\n", "                ", "v_var", "+=", "(", "values_mean", "[", "i_size", "]", "[", "i_alg", "]", "-", "values", "[", "i_data_set", "]", "[", "i_size", "]", "[", "i_alg", "]", ")", "**", "2", "\n", "t_var", "+=", "(", "times_mean", "[", "i_size", "]", "[", "i_alg", "]", "-", "times", "[", "i_data_set", "]", "[", "i_size", "]", "[", "i_alg", "]", ")", "**", "2", "\n", "", "values_var", "[", "i_size", "]", "[", "i_alg", "]", "=", "v_var", "/", "(", "n_data_sets", "-", "1", ")", "\n", "times_var", "[", "i_size", "]", "[", "i_alg", "]", "=", "t_var", "/", "(", "n_data_sets", "-", "1", ")", "\n", "# Plot mean treatment effect vs delta", "\n", "", "", "if", "not", "split_plot", ":", "\n", "        ", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "ax2", "=", "ax1", ".", "twinx", "(", ")", "\n", "", "else", ":", "\n", "        ", "fig", ",", "(", "ax1", ",", "ax2", ")", "=", "plt", ".", "subplots", "(", "2", ",", "1", ",", "figsize", "=", "(", "6", ",", "10", ")", ")", "\n", "\n", "", "ax1", ".", "set_title", "(", "'Mean treatment value/Mean search time vs data set size (delta: {})'", ".", "format", "(", "delta", ")", ")", "\n", "ax1", ".", "set_xlabel", "(", "'Data set size'", ")", "\n", "ax2", ".", "set_xlabel", "(", "'Data set size'", ")", "\n", "ax1", ".", "set_ylabel", "(", "'Mean treatment value'", ")", "\n", "ax2", ".", "set_ylabel", "(", "'Mean search time'", ")", "\n", "lns", "=", "[", "]", "\n", "for", "i_alg", "in", "range", "(", "n_algorithms", ")", ":", "\n", "        ", "ln1", "=", "ax1", ".", "plot", "(", "n_training_samples_array", ",", "values_mean", "[", ":", ",", "i_alg", "]", ",", "plot_colors", "[", "i_alg", "]", "+", "plot_markers", "[", "i_alg", "]", "+", "plot_lines", "[", "i_alg", "]", ",", "\n", "label", "=", "'{} {}'", ".", "format", "(", "algs", "[", "i_alg", "]", ".", "label", ",", "'effect'", ")", ",", "markevery", "=", "3", ")", "\n", "ln2", "=", "ax2", ".", "plot", "(", "n_training_samples_array", ",", "times_mean", "[", ":", ",", "i_alg", "]", ",", "plot_colors", "[", "i_alg", "]", "+", "plot_markers", "[", "i_alg", "]", "+", "plot_lines", "[", "i_alg", "]", ",", "\n", "label", "=", "'{} {}'", ".", "format", "(", "algs", "[", "i_alg", "]", ".", "label", ",", "'time'", ")", ",", "markevery", "=", "3", ")", "\n", "lns", ".", "append", "(", "ln1", ")", "\n", "lns", ".", "append", "(", "ln2", ")", "\n", "if", "plot_var", ":", "\n", "            ", "ln1v", "=", "ax1", ".", "fill_between", "(", "n_training_samples_array", ",", "values_mean", "[", ":", ",", "i_alg", "]", "-", "values_var", "[", ":", ",", "i_alg", "]", ",", "values_mean", "[", ":", ",", "i_alg", "]", "+", "values_var", "[", ":", ",", "i_alg", "]", ",", "\n", "facecolor", "=", "plot_colors", "[", "i_alg", "]", ",", "alpha", "=", "0.3", ")", "\n", "ln2v", "=", "ax2", ".", "fill_between", "(", "n_training_samples_array", ",", "times_mean", "[", ":", ",", "i_alg", "]", "-", "times_var", "[", ":", ",", "i_alg", "]", ",", "times_mean", "[", ":", ",", "i_alg", "]", "+", "times_var", "[", ":", ",", "i_alg", "]", ",", "\n", "facecolor", "=", "plot_colors", "[", "i_alg", "]", ",", "alpha", "=", "0.3", ")", "\n", "lns", ".", "append", "(", "ln1v", ")", "\n", "lns", ".", "append", "(", "ln2v", ")", "\n", "", "", "ax1", ".", "grid", "(", "True", ")", "\n", "ax2", ".", "grid", "(", "True", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"serif\"", "\n", "lines1", ",", "labels1", "=", "ax1", ".", "get_legend_handles_labels", "(", ")", "\n", "lines2", ",", "labels2", "=", "ax2", ".", "get_legend_handles_labels", "(", ")", "\n", "ax1", ".", "legend", "(", "lines1", ",", "labels1", ",", "loc", "=", "'lower right'", ")", "\n", "ax2", ".", "legend", "(", "lines2", ",", "labels2", ",", "loc", "=", "'upper right'", ")", "\n", "ax1", ".", "set_xscale", "(", "'log'", ")", "\n", "ax2", ".", "set_xscale", "(", "'log'", ")", "\n", "plt", ".", "savefig", "(", "\"saved_values/\"", "+", "file_name_prefix", "+", "\"_plot.pdf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.NaiveVsConstrainedSettings.setup_data_sets": [[15, 23], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.NaiveVsConstrainedSettings.setup_algorithms": [[25, 49], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.function_approximation.FunctionApproximation", "Algorithms.Approximators.exact_approximator.ExactApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "print", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_greedy.ConstrainedGreedy", "Algorithms.naive_dynamic_programming.NaiveDynamicProgramming", "Algorithms.naive_greedy.NaiveGreedy", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_none", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'none'", ")", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "function_approximation", "=", "FunctionApproximation", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ")", "\n", "true_approximation", "=", "ExactApproximator", "(", "dist", ")", "\n", "\n", "constraint_none", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_none", ",", "delta", "=", "delta", ")", "\n", "constraint_prior", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "constraint_func", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "function_approximation", ",", "delta", "=", "delta", ")", "\n", "constraint_true", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "true_approximation", ",", "delta", "=", "delta", ")", "\n", "\n", "algorithms", "=", "[", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Dynamic Programming Historical Prior\"", ",", "label", "=", "\"CDP_H\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_func", ",", "function_approximation", ",", "name", "=", "\"Constrained Greedy Historical Prior\"", ",", "label", "=", "\"CG_H\"", ")", ",", "\n", "NaiveDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "statistical_approximation_prior", ",", "reward", "=", "-", "(", "delta", "+", "0.0001", ")", ",", "name", "=", "'Naive Dynamic Programming Historical Prior'", ",", "label", "=", "'NDP_H'", ")", ",", "\n", "NaiveGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "max_steps", "=", "4", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.NaiveVsConstrainedSettings.load_settings": [[51, 64], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "80941", "\n", "n_data_sets", "=", "10", "\n", "n_deltas", "=", "40", "\n", "n_z", "=", "3", "\n", "n_x", "=", "1", "\n", "n_a", "=", "5", "\n", "n_y", "=", "3", "\n", "n_training_samples", "=", "7000", "\n", "n_test_samples", "=", "2000", "\n", "file_name_prefix", "=", "\"Naive_Vs_Constrained_\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.TestDeltaSweepSettings.setup_data_sets": [[12, 20], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.TestDeltaSweepSettings.setup_algorithms": [[22, 41], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.exact_approximator.ExactApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "print", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_greedy.ConstrainedGreedy", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ",", "train", "=", "True", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "true_approximation", "=", "ExactApproximator", "(", "dist", ")", "\n", "\n", "constraint_prior", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "constraint_true", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "true_approximation", ",", "delta", "=", "delta", ")", "\n", "\n", "algorithms", "=", "[", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Dynamic Programming Historical Prior\"", ",", "label", "=", "\"CDP_H\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_true", ",", "true_approximation", ",", "name", "=", "\"Dynamic Programming True\"", ",", "label", "=", "\"CDP_T\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Greedy Historical Prior\"", ",", "label", "=", "\"CG_H\"", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.TestDeltaSweepSettings.load_settings": [[43, 56], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "10342", "\n", "n_data_sets", "=", "2", "\n", "n_deltas", "=", "10", "\n", "n_z", "=", "3", "\n", "n_x", "=", "1", "\n", "n_a", "=", "5", "\n", "n_y", "=", "3", "\n", "n_training_samples", "=", "7000", "\n", "n_test_samples", "=", "2000", "\n", "file_name_prefix", "=", "\"test_delta_sweep\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.AntibioticsSettingsGreedyTest.setup_data_sets": [[12, 21], ["time.time", "print", "Database.antibioticsdatabase.AntibioticsDatabase", "Database.antibioticsdatabase.AntibioticsDatabase.get_data", "split_patients", "print", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients"], ["def", "setup_data_sets", "(", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "AntibioticsDatabase", "(", "n_x", "=", "n_x", ",", "antibiotic_limit", "=", "50", ",", "seed", "=", "seed", ")", "\n", "training_data", ",", "test_data", "=", "dist", ".", "get_data", "(", ")", "\n", "training_data", "=", "split_patients", "(", "training_data", ")", "\n", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.AntibioticsSettingsGreedyTest.setup_algorithms": [[23, 50], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.function_approximation.FunctionApproximation", "Algorithms.Approximators.doctor_approximator.DoctorApproximator", "print", "time.time", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.true_constraint.TrueConstraint", "print", "print", "Algorithms.constrained_greedy.ConstrainedGreedy", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "dist", ",", "training_data", ",", "n_x", ",", "n_a", ",", "n_y", ",", "delta", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "statistical_approximation", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "function_approximation", "=", "FunctionApproximation", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ")", "\n", "doctor_approximation", "=", "DoctorApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ")", "\n", "\n", "print", "(", "\"Initializing Constraint\"", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "constraintStatUpper", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation", ",", "delta", "=", "delta", ",", "bound", "=", "'upper'", ")", "\n", "constraintFuncApprox", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "function_approximation", ",", "delta", "=", "delta", ")", "\n", "constraint_exact_func", "=", "TrueConstraint", "(", "dist", ",", "approximator", "=", "function_approximation", ",", "delta", "=", "delta", ")", "\n", "\n", "print", "(", "\"Initializing the constraint took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "print", "(", "\"Initializing algorithms\"", ")", "\n", "algorithms", "=", "[", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraintStatUpper", ",", "statistical_approximation", ",", "\n", "name", "=", "'Constrained Greedy'", ",", "label", "=", "'CG'", ")", ",", "\n", "# ConstrainedGreedy(n_x, n_a, n_y, split_training_data, constraintStatLower, statistical_approximation,", "\n", "#                   name='Constrained Greedy Lower', label='CG_L'),", "\n", "#ConstrainedGreedy(n_x, n_a, n_y, training_data, constraintFuncApprox, function_approximation,", "\n", "#                 name=\"Constrained Greedy FuncApprox\", label=\"CG_F\"),", "\n", "#ConstrainedDynamicProgramming(n_x, n_a, n_y, training_data, constraintStatUpper,", "\n", "#                              statistical_approximation),", "\n", "\n", "]", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.AntibioticsSettingsGreedyTest.load_settings": [[52, 58], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "90821", "# Used for both synthetic and real data", "\n", "delta", "=", "0.5", "\n", "n_data_sets", "=", "1", "\n", "file_name_prefix", "=", "'antibioticsGreedyTest'", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "delta", ",", "file_name_prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GBoundsSettings.setup_data_sets": [[11, 19], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GBoundsSettings.setup_algorithms": [[21, 43], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.true_constraint.TrueConstraint", "print", "Algorithms.constrained_greedy.ConstrainedGreedy", "Algorithms.constrained_greedy.ConstrainedGreedy", "Algorithms.constrained_greedy.ConstrainedGreedy", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "\n", "constraint_upper", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ",", "bound", "=", "'upper'", ")", "\n", "constraint_lower", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ",", "bound", "=", "'lower'", ")", "\n", "constraint_exact", "=", "TrueConstraint", "(", "dist", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "\n", "algorithms", "=", "[", "\n", "#ConstrainedDynamicProgramming(n_x, n_a, n_y, training_data, constraint_upper, statistical_approximation_prior, name=\"Dynamic Programming Upper Bound\", label=\"CDP_U\"),", "\n", "#ConstrainedDynamicProgramming(n_x, n_a, n_y, training_data, constraint_lower, statistical_approximation_prior, name=\"Dynamic Programming Lower bound\", label=\"CDP_L\"),", "\n", "#ConstrainedDynamicProgramming(n_x, n_a, n_y, training_data, constraint_exact, statistical_approximation_prior, name=\"Dynamic Programming Exact Bound\", label=\"CDP_E\"),", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_upper", ",", "statistical_approximation_prior", ",", "name", "=", "\"Greedy Upper Bound\"", ",", "label", "=", "\"CG_U\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_lower", ",", "statistical_approximation_prior", ",", "name", "=", "\"Greedy Lower Bound\"", ",", "label", "=", "\"CG_L\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_exact", ",", "statistical_approximation_prior", ",", "name", "=", "\"Greedy Exact Bound\"", ",", "label", "=", "\"CG_E\"", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GBoundsSettings.load_settings": [[45, 58], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "90821", "\n", "n_data_sets", "=", "10", "\n", "n_deltas", "=", "40", "\n", "n_z", "=", "2", "\n", "n_x", "=", "1", "\n", "n_a", "=", "5", "\n", "n_y", "=", "3", "\n", "n_training_samples", "=", "15000", "\n", "n_test_samples", "=", "3000", "\n", "file_name_prefix", "=", "\"GBounds_15ksamples_\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.NDPAntibioticsDeltaSweepSettings.setup_data_sets": [[9, 18], ["time.time", "print", "Database.antibioticsdatabase.AntibioticsDatabase", "Database.antibioticsdatabase.AntibioticsDatabase.get_data", "DataGenerator.data_generator.split_patients", "print", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients"], ["def", "setup_data_sets", "(", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "AntibioticsDatabase", "(", "n_x", "=", "n_x", ",", "antibiotic_limit", "=", "50", ",", "seed", "=", "seed", ")", "\n", "training_data", ",", "test_data", "=", "dist", ".", "get_data", "(", ")", "\n", "training_data", "=", "split_patients", "(", "training_data", ")", "\n", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.NDPAntibioticsDeltaSweepSettings.setup_algorithms": [[20, 33], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "print", "Algorithms.naive_dynamic_programming.NaiveDynamicProgramming", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ",", "train", "=", "True", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "\n", "algorithms", "=", "[", "\n", "NaiveDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "statistical_approximation_prior", ",", "reward", "=", "-", "(", "delta", "/", "2", "+", "0.0001", ")", ",", "name", "=", "'Naive Dynamic Programming'", ",", "label", "=", "'NDP'", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.NDPAntibioticsDeltaSweepSettings.load_settings": [[35, 42], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "10342", "\n", "n_data_sets", "=", "4", "\n", "n_deltas", "=", "10", "\n", "file_name_prefix", "=", "\"AntibioticsNDP\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "file_name_prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GeneralDeltaSweepSettings2.setup_data_sets": [[14, 22], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GeneralDeltaSweepSettings2.setup_algorithms": [[24, 43], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.true_constraint.TrueConstraint", "print", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_greedy.ConstrainedGreedy", "Algorithms.naive_greedy.NaiveGreedy", "Algorithms.naive_dynamic_programming.NaiveDynamicProgramming", "round", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ",", "train", "=", "True", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "\n", "constraint_prior", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "constraint_prior", "=", "TrueConstraint", "(", "dist", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "\n", "algorithms", "=", "[", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Constrained Dynamic Programming\"", ",", "label", "=", "\"CDP\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Constrained Greedy\"", ",", "label", "=", "\"CG\"", ")", ",", "\n", "NaiveGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "statistical_approximation_prior", ",", "round", "(", "delta", "*", "(", "n_a", "-", "1", ")", ")", "+", "1", ",", "name", "=", "'Naive Greedy'", ",", "label", "=", "'NG'", ")", ",", "\n", "NaiveDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "statistical_approximation_prior", ",", "reward", "=", "-", "(", "delta", "+", "0.0001", ")", ",", "name", "=", "'Naive Dynamic Programming'", ",", "label", "=", "'NDP'", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GeneralDeltaSweepSettings2.load_settings": [[45, 58], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "10342", "\n", "n_data_sets", "=", "10", "\n", "n_deltas", "=", "40", "\n", "n_z", "=", "3", "\n", "n_x", "=", "1", "\n", "n_a", "=", "5", "\n", "n_y", "=", "3", "\n", "n_training_samples", "=", "15000", "\n", "n_test_samples", "=", "3000", "\n", "file_name_prefix", "=", "\"GeneralComparisonDeltaSweep_15ksamples_\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.TrueApproxSettings.setup_data_sets": [[12, 20], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.TrueApproxSettings.setup_algorithms": [[22, 44], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.exact_approximator.ExactApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.true_constraint.TrueConstraint", "Algorithms.Constraints.true_constraint.TrueConstraint", "print", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ",", "train", "=", "True", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "true_approximation", "=", "ExactApproximator", "(", "dist", ")", "\n", "\n", "constraint_upper_stat", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "constraint_upper_true", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "true_approximation", ",", "delta", "=", "delta", ")", "\n", "constraint_exact_true", "=", "TrueConstraint", "(", "dist", ",", "approximator", "=", "true_approximation", ",", "delta", "=", "delta", ")", "\n", "constraint_exat_stat", "=", "TrueConstraint", "(", "dist", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "\n", "algorithms", "=", "[", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_upper_stat", ",", "statistical_approximation_prior", ",", "name", "=", "\"Dynamic Programming Upper Stat\"", ",", "label", "=", "\"CDP_US\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_upper_true", ",", "true_approximation", ",", "name", "=", "\"Dynamic Programming Upper True\"", ",", "label", "=", "\"CDP_UT\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_exact_true", ",", "true_approximation", ",", "name", "=", "\"Dynamic Programming Exact True\"", ",", "label", "=", "\"CDP_ET\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_exat_stat", ",", "statistical_approximation_prior", ",", "name", "=", "\"Dynamic Programming Exact Stat\"", ",", "label", "=", "\"CDP_ES\"", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.TrueApproxSettings.load_settings": [[46, 59], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "456102", "\n", "n_data_sets", "=", "10", "\n", "n_deltas", "=", "40", "\n", "n_z", "=", "3", "\n", "n_x", "=", "1", "\n", "n_a", "=", "5", "\n", "n_y", "=", "3", "\n", "n_training_samples", "=", "7000", "\n", "n_test_samples", "=", "2000", "\n", "file_name_prefix", "=", "\"True_Approx_Sweep\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.CDPApproximatorsSettings.setup_data_sets": [[12, 20], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.CDPApproximatorsSettings.setup_algorithms": [[22, 46], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.function_approximation.FunctionApproximation", "Algorithms.Approximators.exact_approximator.ExactApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "print", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_none", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'none'", ")", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "function_approximation", "=", "FunctionApproximation", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ")", "\n", "true_approximation", "=", "ExactApproximator", "(", "dist", ")", "\n", "\n", "constraint_none", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_none", ",", "delta", "=", "delta", ")", "\n", "constraint_prior", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "constraint_func", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "function_approximation", ",", "delta", "=", "delta", ")", "\n", "constraint_true", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "true_approximation", ",", "delta", "=", "delta", ")", "\n", "\n", "algorithms", "=", "[", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_none", ",", "statistical_approximation_none", ",", "name", "=", "\"Dynamic Programming Uniform Prior\"", ",", "label", "=", "\"CDP_U\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Dynamic Programming Historical Prior\"", ",", "label", "=", "\"CDP_H\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_func", ",", "function_approximation", ",", "name", "=", "\"Dynamic Programming Function Approximation\"", ",", "label", "=", "\"CDP_F\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_true", ",", "true_approximation", ",", "name", "=", "\"Dynamic Programming True\"", ",", "label", "=", "\"CDP_T\"", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.CDPApproximatorsSettings.load_settings": [[48, 61], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "3162", "\n", "n_data_sets", "=", "10", "\n", "n_deltas", "=", "40", "\n", "n_z", "=", "3", "\n", "n_x", "=", "1", "\n", "n_a", "=", "5", "\n", "n_y", "=", "3", "\n", "n_training_samples", "=", "7000", "\n", "n_test_samples", "=", "2000", "\n", "file_name_prefix", "=", "\"CDPApproximators_7ksamples_\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DeltaSweepSettings_small.setup_data_sets": [[12, 20], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DeltaSweepSettings_small.setup_algorithms": [[22, 41], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.exact_approximator.ExactApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "print", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_greedy.ConstrainedGreedy", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ",", "train", "=", "True", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "true_approximation", "=", "ExactApproximator", "(", "dist", ")", "\n", "\n", "constraint_prior", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "constraint_true", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "true_approximation", ",", "delta", "=", "delta", ")", "\n", "\n", "algorithms", "=", "[", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Dynamic Programming Historical Prior\"", ",", "label", "=", "\"CDP_H\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_true", ",", "true_approximation", ",", "name", "=", "\"Dynamic Programming True\"", ",", "label", "=", "\"CDP_T\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Greedy Historical Prior\"", ",", "label", "=", "\"CG_H\"", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DeltaSweepSettings_small.load_settings": [[43, 56], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "10342", "\n", "n_data_sets", "=", "3", "\n", "n_deltas", "=", "10", "\n", "n_z", "=", "3", "\n", "n_x", "=", "1", "\n", "n_a", "=", "3", "\n", "n_y", "=", "2", "\n", "n_training_samples", "=", "3000", "\n", "n_test_samples", "=", "500", "\n", "file_name_prefix", "=", "\"DeltaSweep_small_\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DataAmountSettings3.setup_data_sets": [[12, 20], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DataAmountSettings3.setup_algorithms": [[22, 44], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.exact_approximator.ExactApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "print", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_greedy.ConstrainedGreedy", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "statistical_approximation_none", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'none'", ")", "\n", "true_approximation", "=", "ExactApproximator", "(", "dist", ")", "\n", "constraint_prior", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "constraint_none", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_none", ",", "delta", "=", "delta", ")", "\n", "constraint_true", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "true_approximation", ",", "delta", "=", "delta", ")", "\n", "algorithms", "=", "[", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_true", ",", "true_approximation", ",", "name", "=", "\"Dynamic Programming True\"", ",", "label", "=", "\"CDP_T\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Constrained Dynamic Programming\"", ",", "label", "=", "\"CDP_H\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_none", ",", "statistical_approximation_none", ",", "name", "=", "\"Constrained Dynamic Programming Uninformed\"", ",", "label", "=", "\"CDP_U\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Constrained Greedy\"", ",", "label", "=", "\"CG\"", ")", ",", "\n", "#NaiveGreedy(n_x, n_a, n_y, statistical_approximation_prior, round(delta * (n_a-1))+1, name='Naive Greedy', label='NG'),", "\n", "#NaiveDynamicProgramming(n_x, n_a, n_y, training_data, statistical_approximation_prior, reward=-(delta+0.0001), name='Naive Dynamic Programming', label='NDP'),", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algosrithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DataAmountSettings3.load_settings": [[46, 60], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "476891", "\n", "n_data_sets", "=", "10", "\n", "n_data_set_sizes", "=", "30", "\n", "delta", "=", "0.3", "\n", "n_z", "=", "3", "\n", "n_x", "=", "1", "\n", "n_a", "=", "5", "\n", "n_y", "=", "3", "\n", "n_training_samples_max", "=", "100000", "\n", "n_test_samples", "=", "3000", "\n", "file_name_prefix", "=", "\"DataSweep_50k2_\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "delta", ",", "n_data_set_sizes", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples_max", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DataAmountSettings.setup_data_sets": [[14, 22], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DataAmountSettings.setup_algorithms": [[24, 46], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.exact_approximator.ExactApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "print", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_greedy.ConstrainedGreedy", "Algorithms.naive_greedy.NaiveGreedy", "Algorithms.naive_dynamic_programming.NaiveDynamicProgramming", "round", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "statistical_approximation_none", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'none'", ")", "\n", "true_approximation", "=", "ExactApproximator", "(", "dist", ")", "\n", "constraint_prior", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "constraint_none", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_none", ",", "delta", "=", "delta", ")", "\n", "constraint_true", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "true_approximation", ",", "delta", "=", "delta", ")", "\n", "algorithms", "=", "[", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_true", ",", "true_approximation", ",", "name", "=", "\"Dynamic Programming True\"", ",", "label", "=", "\"CDP_T\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Constrained Dynamic Programming\"", ",", "label", "=", "\"CDP_H\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_none", ",", "statistical_approximation_none", ",", "name", "=", "\"Constrained Dynamic Programming Uninformed\"", ",", "label", "=", "\"CDP_U\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Constrained Greedy\"", ",", "label", "=", "\"CG\"", ")", ",", "\n", "NaiveGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "statistical_approximation_prior", ",", "round", "(", "delta", "*", "(", "n_a", "-", "1", ")", ")", "+", "1", ",", "name", "=", "'Naive Greedy'", ",", "label", "=", "'NG'", ")", ",", "\n", "NaiveDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "statistical_approximation_prior", ",", "reward", "=", "-", "(", "delta", "+", "0.0001", ")", ",", "name", "=", "'Naive Dynamic Programming'", ",", "label", "=", "'NDP'", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algosrithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DataAmountSettings.load_settings": [[48, 62], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "476891", "\n", "n_data_sets", "=", "10", "\n", "n_data_set_sizes", "=", "40", "\n", "delta", "=", "0.3", "\n", "n_z", "=", "3", "\n", "n_x", "=", "1", "\n", "n_a", "=", "5", "\n", "n_y", "=", "3", "\n", "n_training_samples_max", "=", "100000", "\n", "n_test_samples", "=", "3000", "\n", "file_name_prefix", "=", "\"DataSweep_100k10set_\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "delta", ",", "n_data_set_sizes", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples_max", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.AntibioticsSettings.setup_data_sets": [[16, 25], ["time.time", "print", "Database.antibioticsdatabase.AntibioticsDatabase", "Database.antibioticsdatabase.AntibioticsDatabase.get_data", "split_patients", "print", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients"], ["def", "setup_data_sets", "(", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "AntibioticsDatabase", "(", "n_x", "=", "n_x", ",", "antibiotic_limit", "=", "50", ",", "seed", "=", "seed", ")", "\n", "training_data", ",", "test_data", "=", "dist", ".", "get_data", "(", ")", "\n", "training_data", "=", "split_patients", "(", "training_data", ")", "\n", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.AntibioticsSettings.setup_algorithms": [[27, 61], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.function_approximation.FunctionApproximation", "Algorithms.Approximators.doctor_approximator.DoctorApproximator", "print", "time.time", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.true_constraint.TrueConstraint", "print", "print", "Algorithms.constrained_greedy.ConstrainedGreedy", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.naive_dynamic_programming.NaiveDynamicProgramming", "Algorithms.doctor.Doctor", "Algorithms.emulated_doctor.EmulatedDoctor", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "dist", ",", "training_data", ",", "n_x", ",", "n_a", ",", "n_y", ",", "delta", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "statistical_approximation", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "function_approximation", "=", "FunctionApproximation", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ")", "\n", "doctor_approximation", "=", "DoctorApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ")", "\n", "\n", "print", "(", "\"Initializing Constraint\"", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "constraintStatUpper", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation", ",", "delta", "=", "delta", ",", "bound", "=", "'upper'", ")", "\n", "constraintFuncApprox", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "function_approximation", ",", "delta", "=", "delta", ")", "\n", "constraint_exact_func", "=", "TrueConstraint", "(", "dist", ",", "approximator", "=", "function_approximation", ",", "delta", "=", "delta", ")", "\n", "\n", "print", "(", "\"Initializing the constraint took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "print", "(", "\"Initializing algorithms\"", ")", "\n", "algorithms", "=", "[", "\n", "#ConstrainedGreedy(n_x, n_a, n_y, training_data, constraintStatUpper, statistical_approximation,", "\n", "#                  name='Constrained Greedy', label='CG'),", "\n", "# ConstrainedGreedy(n_x, n_a, n_y, split_training_data, constraintStatLower, statistical_approximation,", "\n", "#                   name='Constrained Greedy Lower', label='CG_L'),", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraintFuncApprox", ",", "function_approximation", ",", "\n", "name", "=", "\"Constrained Greedy FuncApprox\"", ",", "label", "=", "\"CG_F\"", ")", ",", "\n", "#ConstrainedDynamicProgramming(n_x, n_a, n_y, training_data, constraintStatUpper,", "\n", "#                              statistical_approximation),", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraintFuncApprox", ",", "\n", "function_approximation", ",", "name", "=", "\"Constrained Dynamic Programming FuncApprox\"", ",", "label", "=", "\"CDP_F\"", ")", ",", "\n", "\n", "#NaiveGreedy(n_x, n_a, n_y, function_approximation, max_steps=n_a),", "\n", "#NaiveGreedy(n_x, n_a, n_y, function_approximation, max_steps=n_a),", "\n", "NaiveDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraintStatUpper", ",", "reward", "=", "-", "0.35", ")", ",", "\n", "Doctor", "(", ")", ",", "\n", "EmulatedDoctor", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "approximator", "=", "doctor_approximation", ")", "\n", "]", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.AntibioticsSettings.load_settings": [[63, 69], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "10342", "# Used for both synthetic and real data", "\n", "delta", "=", "0.0", "\n", "n_data_sets", "=", "4", "\n", "file_name_prefix", "=", "'antibioticsFAdelta0'", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "delta", ",", "file_name_prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.BoundsSettings.setup_data_sets": [[12, 20], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.BoundsSettings.setup_algorithms": [[22, 44], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.true_constraint.TrueConstraint", "print", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_greedy.ConstrainedGreedy", "Algorithms.constrained_greedy.ConstrainedGreedy", "Algorithms.constrained_greedy.ConstrainedGreedy", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "\n", "constraint_upper", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ",", "bound", "=", "'upper'", ")", "\n", "constraint_lower", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ",", "bound", "=", "'lower'", ")", "\n", "constraint_exact", "=", "TrueConstraint", "(", "dist", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "\n", "algorithms", "=", "[", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_upper", ",", "statistical_approximation_prior", ",", "name", "=", "\"Dynamic Programming Upper Bound\"", ",", "label", "=", "\"CDP_U\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_lower", ",", "statistical_approximation_prior", ",", "name", "=", "\"Dynamic Programming Lower bound\"", ",", "label", "=", "\"CDP_L\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_exact", ",", "statistical_approximation_prior", ",", "name", "=", "\"Dynamic Programming Exact Bound\"", ",", "label", "=", "\"CDP_E\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_upper", ",", "statistical_approximation_prior", ",", "name", "=", "\"Greedy Upper Bound\"", ",", "label", "=", "\"CG_U\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_lower", ",", "statistical_approximation_prior", ",", "name", "=", "\"Greedy Lower Bound\"", ",", "label", "=", "\"CG_L\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_exact", ",", "statistical_approximation_prior", ",", "name", "=", "\"Greedy Exact Bound\"", ",", "label", "=", "\"CG_E\"", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.BoundsSettings.load_settings": [[46, 59], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "90821", "\n", "n_data_sets", "=", "10", "\n", "n_deltas", "=", "40", "\n", "n_z", "=", "2", "\n", "n_x", "=", "1", "\n", "n_a", "=", "5", "\n", "n_y", "=", "3", "\n", "n_training_samples", "=", "7000", "\n", "n_test_samples", "=", "2000", "\n", "file_name_prefix", "=", "\"Bounds_7ksamples_\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DataAmountSettings2.setup_data_sets": [[12, 20], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DataAmountSettings2.setup_algorithms": [[22, 42], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.exact_approximator.ExactApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "print", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_greedy.ConstrainedGreedy", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "statistical_approximation_none", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'none'", ")", "\n", "true_approximation", "=", "ExactApproximator", "(", "dist", ")", "\n", "constraint_prior", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "constraint_none", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_none", ",", "delta", "=", "delta", ")", "\n", "constraint_true", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "true_approximation", ",", "delta", "=", "delta", ")", "\n", "algorithms", "=", "[", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Dynamic Programming Historical Prior\"", ",", "label", "=", "\"CDP_H\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_none", ",", "statistical_approximation_none", ",", "name", "=", "\"Dynamic Programming Uniform Prior\"", ",", "label", "=", "\"CDP_U\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_true", ",", "true_approximation", ",", "name", "=", "\"Dynamic Programming True\"", ",", "label", "=", "\"CDP_T\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Greedy Historical Prior\"", ",", "label", "=", "\"CG_H\"", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DataAmountSettings2.load_settings": [[44, 58], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "9901", "\n", "n_data_sets", "=", "20", "\n", "n_data_set_sizes", "=", "60", "\n", "delta", "=", "0.4", "\n", "n_z", "=", "3", "\n", "n_x", "=", "1", "\n", "n_a", "=", "5", "\n", "n_y", "=", "3", "\n", "n_training_samples_max", "=", "75000", "\n", "n_test_samples", "=", "3000", "\n", "file_name_prefix", "=", "\"Sweep_data_large\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "delta", ",", "n_data_set_sizes", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples_max", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DeltaSweepSettings.setup_data_sets": [[12, 20], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DeltaSweepSettings.setup_algorithms": [[22, 41], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.exact_approximator.ExactApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "print", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_greedy.ConstrainedGreedy", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ",", "train", "=", "True", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "true_approximation", "=", "ExactApproximator", "(", "dist", ")", "\n", "\n", "constraint_prior", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "constraint_true", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "true_approximation", ",", "delta", "=", "delta", ")", "\n", "\n", "algorithms", "=", "[", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Dynamic Programming Historical Prior\"", ",", "label", "=", "\"CDP_H\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_true", ",", "true_approximation", ",", "name", "=", "\"Dynamic Programming True\"", ",", "label", "=", "\"CDP_T\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Greedy Historical Prior\"", ",", "label", "=", "\"CG_H\"", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.DeltaSweepSettings.load_settings": [[43, 56], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "10342", "\n", "n_data_sets", "=", "10", "\n", "n_deltas", "=", "40", "\n", "n_z", "=", "3", "\n", "n_x", "=", "1", "\n", "n_a", "=", "5", "\n", "n_y", "=", "3", "\n", "n_training_samples", "=", "7000", "\n", "n_test_samples", "=", "2000", "\n", "file_name_prefix", "=", "\"DeltaSweep_7ksamples_\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.AntibioticsDeltaSweepSettings.setup_data_sets": [[13, 22], ["time.time", "print", "Database.antibioticsdatabase.AntibioticsDatabase", "Database.antibioticsdatabase.AntibioticsDatabase.get_data", "DataGenerator.data_generator.split_patients", "print", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients"], ["def", "setup_data_sets", "(", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "AntibioticsDatabase", "(", "n_x", "=", "n_x", ",", "antibiotic_limit", "=", "50", ",", "seed", "=", "seed", ")", "\n", "training_data", ",", "test_data", "=", "dist", ".", "get_data", "(", ")", "\n", "training_data", "=", "split_patients", "(", "training_data", ")", "\n", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.AntibioticsDeltaSweepSettings.setup_algorithms": [[24, 51], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.function_approximation.FunctionApproximation", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "print", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_greedy.ConstrainedGreedy", "Algorithms.constrained_greedy.ConstrainedGreedy", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.naive_dynamic_programming.NaiveDynamicProgramming", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ",", "train", "=", "True", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "function_approximation", "=", "FunctionApproximation", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ")", "\n", "constraint_prior", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "\n", "constraintFuncApprox", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "function_approximation", ",", "delta", "=", "delta", ")", "\n", "\n", "algorithms", "=", "[", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Constrained Dynamic Programming\"", ",", "label", "=", "\"CDP\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Constrained Greedy\"", ",", "label", "=", "\"CG\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraintFuncApprox", ",", "function_approximation", ",", "\n", "name", "=", "\"Constrained Greedy FuncApprox\"", ",", "label", "=", "\"CG_F\"", ")", ",", "\n", "# ConstrainedDynamicProgramming(n_x, n_a, n_y, training_data, constraintStatUpper,", "\n", "#                              statistical_approximation),", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraintFuncApprox", ",", "\n", "function_approximation", ",", "name", "=", "\"Constrained Dynamic Programming FuncApprox\"", ",", "\n", "label", "=", "\"CDP_F\"", ")", ",", "\n", "\n", "NaiveDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "statistical_approximation_prior", ",", "reward", "=", "-", "(", "delta", "/", "2", "+", "0.0001", ")", ",", "name", "=", "'Naive Dynamic Programming'", ",", "label", "=", "'NDP'", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.AntibioticsDeltaSweepSettings.load_settings": [[53, 60], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "10342", "\n", "n_data_sets", "=", "4", "\n", "n_deltas", "=", "10", "\n", "file_name_prefix", "=", "\"AntibioticsComparisonDeltaSweep_20deltasFixedSeedFA\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "file_name_prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.CDPBoundsSettings.setup_data_sets": [[11, 19], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.CDPBoundsSettings.setup_algorithms": [[21, 43], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.true_constraint.TrueConstraint", "print", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "\n", "constraint_upper", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ",", "bound", "=", "'upper'", ")", "\n", "constraint_lower", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ",", "bound", "=", "'lower'", ")", "\n", "constraint_exact", "=", "TrueConstraint", "(", "dist", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "\n", "algorithms", "=", "[", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_upper", ",", "statistical_approximation_prior", ",", "name", "=", "\"Dynamic Programming Upper Bound\"", ",", "label", "=", "\"CDP_U\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_lower", ",", "statistical_approximation_prior", ",", "name", "=", "\"Dynamic Programming Lower bound\"", ",", "label", "=", "\"CDP_L\"", ")", ",", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_exact", ",", "statistical_approximation_prior", ",", "name", "=", "\"Dynamic Programming Exact Bound\"", ",", "label", "=", "\"CDP_E\"", ")", ",", "\n", "#ConstrainedGreedy(n_x, n_a, n_y, training_data, constraint_upper, statistical_approximation_prior, name=\"Greedy Upper Bound\", label=\"CG_U\"),", "\n", "#ConstrainedGreedy(n_x, n_a, n_y, training_data, constraint_lower, statistical_approximation_prior, name=\"Greedy Lower Bound\", label=\"CG_L\"),", "\n", "#ConstrainedGreedy(n_x, n_a, n_y, training_data, constraint_exact, statistical_approximation_prior, name=\"Greedy Exact Bound\", label=\"CG_E\"),", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.CDPBoundsSettings.load_settings": [[45, 58], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "90821", "\n", "n_data_sets", "=", "10", "\n", "n_deltas", "=", "40", "\n", "n_z", "=", "2", "\n", "n_x", "=", "1", "\n", "n_a", "=", "5", "\n", "n_y", "=", "3", "\n", "n_training_samples", "=", "15000", "\n", "n_test_samples", "=", "3000", "\n", "file_name_prefix", "=", "\"CDPBounds_15ksamples_\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GeneralDeltaSweepSettings.setup_data_sets": [[13, 21], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GeneralDeltaSweepSettings.setup_algorithms": [[23, 41], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "print", "Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming", "Algorithms.constrained_greedy.ConstrainedGreedy", "Algorithms.naive_greedy.NaiveGreedy", "Algorithms.naive_dynamic_programming.NaiveDynamicProgramming", "round", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ",", "train", "=", "True", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "\n", "constraint_prior", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "\n", "algorithms", "=", "[", "\n", "ConstrainedDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Constrained Dynamic Programming\"", ",", "label", "=", "\"CDP\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Constrained Greedy\"", ",", "label", "=", "\"CG\"", ")", ",", "\n", "NaiveGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "statistical_approximation_prior", ",", "round", "(", "delta", "*", "(", "n_a", "-", "1", ")", ")", "+", "1", ",", "name", "=", "'Naive Greedy'", ",", "label", "=", "'NG'", ")", ",", "\n", "NaiveDynamicProgramming", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "statistical_approximation_prior", ",", "reward", "=", "-", "(", "delta", "+", "0.0001", ")", ",", "name", "=", "'Naive Dynamic Programming'", ",", "label", "=", "'NDP'", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GeneralDeltaSweepSettings.load_settings": [[43, 56], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "10342", "\n", "n_data_sets", "=", "2", "\n", "n_deltas", "=", "4", "\n", "n_z", "=", "3", "\n", "n_x", "=", "1", "\n", "n_a", "=", "5", "\n", "n_y", "=", "3", "\n", "n_training_samples", "=", "15000", "\n", "n_test_samples", "=", "3000", "\n", "file_name_prefix", "=", "\"GeneralComparisonDeltaSweep_15ksamples_\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_data_sets": [[12, 20], ["time.time", "print", "DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes", "DataGenerator.data_generator.split_patients", "DataGenerator.data_generator.generate_test_data", "print", "DataGenerator.data_generator.generate_data", "time.time"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data"], ["def", "setup_data_sets", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "seed", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Generating training and test data\"", ")", "\n", "dist", "=", "DiscreteDistributionWithSmoothOutcomes", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "training_data", "=", "split_patients", "(", "generate_data", "(", "dist", ",", "n_training_samples", ")", ")", "\n", "test_data", "=", "generate_test_data", "(", "dist", ",", "n_test_samples", ")", "\n", "print", "(", "\"Generating data took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "dist", ",", "training_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.setup_algorithms": [[22, 46], ["time.time", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.statistical_approximator.StatisticalApproximator", "Algorithms.Approximators.function_approximation.FunctionApproximation", "Algorithms.Approximators.exact_approximator.ExactApproximator", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "Algorithms.Constraints.better_treatment_constraint.Constraint", "print", "Algorithms.constrained_greedy.ConstrainedGreedy", "Algorithms.constrained_greedy.ConstrainedGreedy", "Algorithms.constrained_greedy.ConstrainedGreedy", "Algorithms.constrained_greedy.ConstrainedGreedy", "time.time"], "function", ["None"], ["", "def", "setup_algorithms", "(", "training_data", ",", "dist", ",", "delta", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "statistical_approximation_none", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'none'", ")", "\n", "statistical_approximation_prior", "=", "StatisticalApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "smoothing_mode", "=", "'gaussian'", ")", "\n", "function_approximation", "=", "FunctionApproximation", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ")", "\n", "true_approximation", "=", "ExactApproximator", "(", "dist", ")", "\n", "\n", "constraint_none", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_none", ",", "delta", "=", "delta", ")", "\n", "constraint_prior", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "statistical_approximation_prior", ",", "delta", "=", "delta", ")", "\n", "constraint_func", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "function_approximation", ",", "delta", "=", "delta", ")", "\n", "constraint_true", "=", "Constraint", "(", "training_data", ",", "n_a", ",", "n_y", ",", "approximator", "=", "true_approximation", ",", "delta", "=", "delta", ")", "\n", "\n", "algorithms", "=", "[", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_none", ",", "statistical_approximation_none", ",", "name", "=", "\"Greedy Uniform Prior\"", ",", "label", "=", "\"CG_U\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_prior", ",", "statistical_approximation_prior", ",", "name", "=", "\"Greedy Historical Prior\"", ",", "label", "=", "\"CG_H\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_func", ",", "function_approximation", ",", "name", "=", "\"Greedy Function Approximation\"", ",", "label", "=", "\"CG_F\"", ")", ",", "\n", "ConstrainedGreedy", "(", "n_x", ",", "n_a", ",", "n_y", ",", "training_data", ",", "constraint_true", ",", "true_approximation", ",", "name", "=", "\"Greedy True Approximation\"", ",", "label", "=", "\"CG_T\"", ")", ",", "\n", "]", "\n", "\n", "print", "(", "\"Setting up algorithms took {:.3f} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "algorithms", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Settings.GApproximatorsSettings.load_settings": [[48, 61], ["None"], "function", ["None"], ["", "def", "load_settings", "(", ")", ":", "\n", "    ", "starting_seed", "=", "3162", "\n", "n_data_sets", "=", "10", "\n", "n_deltas", "=", "40", "\n", "n_z", "=", "3", "\n", "n_x", "=", "5", "\n", "n_a", "=", "5", "\n", "n_y", "=", "3", "\n", "n_training_samples", "=", "7000", "\n", "n_test_samples", "=", "2000", "\n", "file_name_prefix", "=", "\"GApproximators_7ksamples_\"", "\n", "\n", "return", "starting_seed", ",", "n_data_sets", ",", "n_deltas", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "n_training_samples", ",", "n_test_samples", ",", "file_name_prefix", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_visualizer.DataVisualizer.__init__": [[5, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ")", ":", "\n", "        ", "self", ".", "n_z", "=", "n_z", "\n", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "n_y", "=", "n_y", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_visualizer.DataVisualizer.plot_x": [[11, 29], ["np.zeros", "np.ndenumerate", "np.arange", "matplotlib.bar", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.xticks", "matplotlib.show", "labels.append", "values.append", "str", "tuple"], "methods", ["None"], ["", "def", "plot_x", "(", "self", ",", "data", ")", ":", "\n", "        ", "counts", "=", "np", ".", "zeros", "(", "(", "(", "2", ",", ")", "*", "self", ".", "n_x", ")", ")", "\n", "for", "q", "in", "data", "[", "'x'", "]", ":", "\n", "            ", "counts", "[", "tuple", "(", "q", ")", "]", "+=", "1", "\n", "\n", "# Plot stuff", "\n", "", "n", "=", "2", "**", "self", ".", "n_x", "\n", "labels", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "for", "idx", ",", "val", "in", "np", ".", "ndenumerate", "(", "counts", ")", ":", "\n", "            ", "labels", ".", "append", "(", "str", "(", "idx", ")", ")", "\n", "values", ".", "append", "(", "val", ")", "\n", "", "ind", "=", "np", ".", "arange", "(", "n", ")", "\n", "plt", ".", "bar", "(", "ind", ",", "values", ")", "\n", "plt", ".", "ylabel", "(", "'Samples'", ")", "\n", "plt", ".", "xlabel", "(", "'X-values'", ")", "\n", "plt", ".", "xticks", "(", "ind", ",", "labels", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_visualizer.DataVisualizer.print_y": [[30, 67], ["np.zeros", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "print", "range", "np.divide", "np.divide", "print", "np.ndenumerate", "np.divide", "print", "range", "print", "len", "np.array_equal", "np.sum", "print", "str", "[].astype", "print", "print", "range", "print", "len", "print", "tuple", "str", "tuple", "tuple"], "methods", ["None"], ["", "def", "print_y", "(", "self", ",", "data", ",", "x", ")", ":", "\n", "        ", "counts", "=", "np", ".", "zeros", "(", "(", "(", "2", ",", ")", "*", "self", ".", "n_z", ")", "+", "(", "self", ".", "n_a", ",", ")", ")", "\n", "mean", "=", "np", ".", "zeros", "(", "(", "(", "2", ",", ")", "*", "self", ".", "n_z", ")", "+", "(", "self", ".", "n_a", ",", ")", ")", "\n", "zeds", "=", "np", ".", "zeros", "(", "(", "(", "2", ",", ")", "*", "self", ".", "n_z", ")", ")", "\n", "totals", "=", "np", ".", "zeros", "(", "self", ".", "n_a", ")", "\n", "treat_counts", "=", "np", ".", "zeros", "(", "self", ".", "n_a", ")", "\n", "print", "(", "\"For X = {}\"", ".", "format", "(", "str", "(", "x", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "data", "[", "'x'", "]", ")", ")", ":", "\n", "            ", "if", "np", ".", "array_equal", "(", "data", "[", "'x'", "]", "[", "i", "]", ",", "x", ")", ":", "\n", "                ", "history", "=", "data", "[", "'h'", "]", "[", "i", "]", "\n", "z", "=", "data", "[", "'z'", "]", "[", "i", "]", ".", "astype", "(", "int", ")", "\n", "zeds", "[", "tuple", "(", "z", ")", "]", "+=", "1", "\n", "for", "h", "in", "history", ":", "\n", "                    ", "a", "=", "h", "[", "0", "]", "\n", "counts", "[", "tuple", "(", "z", ")", "+", "(", "a", ",", ")", "]", "+=", "1", "\n", "mean", "[", "tuple", "(", "z", ")", "+", "(", "a", ",", ")", "]", "+=", "h", "[", "1", "]", "\n", "totals", "[", "a", "]", "+=", "h", "[", "1", "]", "\n", "treat_counts", "[", "a", "]", "+=", "1", "\n", "\n", "", "", "", "mean", "=", "np", ".", "divide", "(", "mean", ",", "counts", ")", "\n", "zeds", "=", "np", ".", "divide", "(", "zeds", ",", "np", ".", "sum", "(", "zeds", ")", ")", "\n", "i", "=", "1", "\n", "print", "(", "\"{:10} {:4}\"", ".", "format", "(", "\"Z\"", ",", "\"P(Z)\"", ")", ")", "\n", "for", "idx", ",", "_", "in", "np", ".", "ndenumerate", "(", "mean", ")", ":", "\n", "            ", "z_idx", "=", "idx", "[", ":", "-", "1", "]", "\n", "if", "idx", "[", "-", "1", "]", "%", "i", "==", "0", ":", "\n", "                ", "print", "(", "\"{:10}\"", ".", "format", "(", "str", "(", "z_idx", ")", ")", ",", "end", "=", "' '", ")", "\n", "print", "(", "\"{:.2f}\"", ".", "format", "(", "zeds", "[", "z_idx", "]", ")", ",", "end", "=", "' '", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "mean", "[", "z_idx", "]", ")", ")", ":", "\n", "                    ", "print", "(", "\"{:.2f}\"", ".", "format", "(", "mean", "[", "z_idx", "]", "[", "j", "]", ")", ",", "end", "=", "' '", ")", "\n", "", "print", "(", ")", "\n", "", "i", "+=", "1", "\n", "", "totals", "=", "np", ".", "divide", "(", "totals", ",", "treat_counts", ")", "\n", "print", "(", "\"{:10} {:.2f}\"", ".", "format", "(", "\"Total\"", ",", "1.00", ")", ",", "end", "=", "' '", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "n_a", ")", ":", "\n", "            ", "print", "(", "\"{:.2f}\"", ".", "format", "(", "totals", "[", "j", "]", ")", ",", "end", "=", "' '", ")", "\n", "", "print", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.Distribution.__init__": [[13, 16], ["numpy.random.RandomState", "distributions.Distribution.random.seed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "random", "=", "np", ".", "random", ".", "RandomState", "(", ")", "\n", "self", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.Distribution.draw_z": [[17, 19], ["None"], "methods", ["None"], ["", "def", "draw_z", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "# Return a representation of Z, this can be any format", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.Distribution.draw_x": [[21, 23], ["None"], "methods", ["None"], ["", "def", "draw_x", "(", "self", ",", "z", ")", ":", "\n", "        ", "pass", "\n", "# Return a list of X values", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.Distribution.draw_a": [[25, 27], ["None"], "methods", ["None"], ["", "def", "draw_a", "(", "self", ",", "h", ",", "x", ",", "z", ")", ":", "\n", "        ", "pass", "\n", "# Return a single integer representing the index of a treatment A", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.Distribution.draw_y": [[29, 31], ["None"], "methods", ["None"], ["", "def", "draw_y", "(", "self", ",", "a", ",", "h", ",", "x", ",", "z", ")", ":", "\n", "        ", "pass", "\n", "# Return a tuple, (int, bool), representing the outcome of treatment a and if this is the last treatment that", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyExampleDistribution.__init__": [[35, 38], ["distributions.Distribution.__init__"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'ToyExample'", "\n", "", "n_a", "=", "3", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyExampleDistribution.draw_z": [[45, 47], ["distributions.ToyExampleDistribution.random.choice"], "methods", ["None"], ["def", "draw_z", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "random", ".", "choice", "(", "4", ",", "p", "=", "self", ".", "z_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyExampleDistribution.draw_x": [[48, 50], ["None"], "methods", ["None"], ["", "def", "draw_x", "(", "self", ",", "z", ")", ":", "\n", "        ", "return", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyExampleDistribution.draw_a": [[51, 69], ["numpy.sum", "distributions.ToyExampleDistribution.random.choice", "len", "numpy.max", "numpy.array", "distributions.ToyExampleDistribution.results_array.copy", "numpy.sum", "numpy.maximum", "sum"], "methods", ["None"], ["", "def", "draw_a", "(", "self", ",", "h", ",", "x", ",", "z", ")", ":", "\n", "        ", "weights", "=", "np", ".", "sum", "(", "self", ".", "z_weights", "*", "self", ".", "results_array", ",", "1", ")", "\n", "if", "len", "(", "h", ")", ">", "0", ":", "\n", "            ", "treatment_found", "=", "np", ".", "max", "(", "h", ",", "0", ")", "[", "1", "]", "\n", "used_a", "=", "[", "u", "[", "0", "]", "for", "u", "in", "h", "]", "\n", "if", "treatment_found", ":", "\n", "                ", "weights", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "for", "u", "in", "used_a", ":", "\n", "                    ", "weights", "[", "u", "]", "=", "0", "\n", "", "", "else", ":", "\n", "                ", "a_weights", "=", "self", ".", "results_array", ".", "copy", "(", ")", "\n", "for", "u", "in", "used_a", ":", "\n", "                    ", "a_weights", "=", "a_weights", "-", "a_weights", "[", "u", "]", "\n", "a_weights", "=", "np", ".", "maximum", "(", "a_weights", ",", "0", ")", "\n", "", "a_weights", "=", "self", ".", "z_weights", "*", "a_weights", "\n", "weights", "=", "np", ".", "sum", "(", "a_weights", ",", "1", ")", "\n", "\n", "", "", "return", "self", ".", "random", ".", "choice", "(", "3", ",", "p", "=", "weights", "/", "sum", "(", "weights", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyExampleDistribution.draw_y": [[70, 77], ["len", "numpy.max", "max", "distributions.ToyExampleDistribution.random.random"], "methods", ["None"], ["", "def", "draw_y", "(", "self", ",", "a", ",", "h", ",", "x", ",", "z", ")", ":", "\n", "        ", "result", "=", "self", ".", "results_array", "[", "a", "]", "[", "z", "]", "\n", "if", "len", "(", "h", ")", ">", "0", ":", "\n", "            ", "best_result", "=", "np", ".", "max", "(", "h", ",", "0", ")", "[", "1", "]", "\n", "if", "max", "(", "result", ",", "best_result", ")", "==", "1", "and", "self", ".", "random", ".", "random", "(", ")", "<", "0.85", ":", "\n", "                ", "return", "result", ",", "True", "\n", "", "", "return", "result", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.__init__": [[80, 96], ["distributions.Distribution.__init__", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "distributions.DiscreteDistribution.random.random", "distributions.DiscreteDistribution.random.random", "distributions.DiscreteDistribution.random.normal", "distributions.DiscreteDistribution.random.normal", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_z", ",", "n_x", ",", "n_a", ",", "steps_y", ",", "outcome_sensitivity_x_z", "=", "1", ",", "seed", "=", "None", ")", ":", "\n", "        ", "Distribution", ".", "__init__", "(", "self", ",", "seed", ")", "\n", "self", ".", "name", "=", "'Discrete'", "\n", "self", ".", "n_z", "=", "n_z", "\n", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "n_y", "=", "steps_y", "\n", "self", ".", "x_weight", "=", "outcome_sensitivity_x_z", "\n", "\n", "self", ".", "Pz", "=", "np", ".", "array", "(", "self", ".", "random", ".", "random", "(", "self", ".", "n_z", ")", ")", "\n", "self", ".", "Px", "=", "np", ".", "array", "(", "self", ".", "random", ".", "random", "(", "(", "self", ".", "n_x", ",", "self", ".", "n_z", ")", ")", ")", "\n", "self", ".", "Px", "=", "(", "self", ".", "Px", ".", "T", "/", "np", ".", "sum", "(", "self", ".", "Px", ",", "1", ")", ")", ".", "T", "\n", "self", ".", "Pa", "=", "np", ".", "array", "(", "self", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "1", "+", "self", ".", "n_x", "+", "self", ".", "n_a", ",", "self", ".", "n_a", ")", ")", ")", "\n", "self", ".", "Py", "=", "np", ".", "array", "(", "self", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "self", ".", "n_a", ",", "1", "+", "self", ".", "n_x", "+", "self", ".", "n_z", ",", "self", ".", "n_y", ")", ")", ")", "\n", "for", "coeffs", "in", "self", ".", "Py", ":", "\n", "            ", "coeffs", "[", "1", ":", "self", ".", "n_x", "+", "1", "]", "*=", "self", ".", "x_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.draw_z": [[98, 101], ["distributions.DiscreteDistribution.random.binomial"], "methods", ["None"], ["", "", "def", "draw_z", "(", "self", ")", ":", "\n", "        ", "z", "=", "self", ".", "random", ".", "binomial", "(", "1", ",", "p", "=", "self", ".", "Pz", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.calc_x_weights": [[102, 106], ["numpy.maximum", "numpy.minimum", "numpy.sum"], "methods", ["None"], ["", "def", "calc_x_weights", "(", "self", ",", "z", ")", ":", "\n", "        ", "weights_z", "=", "self", ".", "Px", "*", "z", "\n", "weights_x", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "np", ".", "sum", "(", "weights_z", ",", "1", ")", ",", "0.98", ")", ",", "0.02", ")", "\n", "return", "weights_x", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.draw_x": [[107, 110], ["distributions.DiscreteDistribution.random.binomial", "distributions.DiscreteDistribution.astype", "distributions.DiscreteDistribution.calc_x_weights"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.calc_x_weights"], ["", "def", "draw_x", "(", "self", ",", "z", ")", ":", "\n", "        ", "x", "=", "self", ".", "random", ".", "binomial", "(", "1", ",", "p", "=", "self", ".", "calc_x_weights", "(", "z", ")", ")", "\n", "return", "x", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.draw_a": [[111, 127], ["numpy.zeros", "numpy.zeros", "numpy.concatenate", "range", "numpy.sum", "distributions.DiscreteDistribution.random.choice", "range", "numpy.exp", "distributions.DiscreteDistribution.calc_a_closeness", "distributions.DiscreteDistribution.Pa.T.dot"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistributionWithInformation.calc_a_closeness"], ["", "def", "draw_a", "(", "self", ",", "h", ",", "x", ",", "z", ")", ":", "\n", "        ", "tried_a", "=", "np", ".", "zeros", "(", "self", ".", "n_a", ")", "\n", "probs", "=", "np", ".", "zeros", "(", "self", ".", "n_a", ")", "\n", "for", "treatment", "in", "h", ":", "\n", "            ", "tried_a", "[", "treatment", "[", "0", "]", "]", "=", "treatment", "[", "1", "]", "\n", "", "v", "=", "np", ".", "concatenate", "(", "(", "[", "1", "]", ",", "x", ",", "tried_a", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_a", ")", ":", "\n", "            ", "probs", "[", "i", "]", "=", "np", ".", "exp", "(", "self", ".", "Pa", ".", "T", ".", "dot", "(", "v", ")", ")", "[", "i", "]", "\n", "# Decrease the likelihood of testing \"similar\" treatments,", "\n", "# defined as the L2 norm of their x-dependant feature vector", "\n", "", "for", "treatment", "in", "h", ":", "\n", "            ", "for", "a", "in", "range", "(", "self", ".", "n_a", ")", ":", "\n", "                ", "probs", "[", "a", "]", "*=", "self", ".", "calc_a_closeness", "(", "treatment", "[", "0", "]", ",", "a", ",", "x", ")", "\n", "", "", "den", "=", "np", ".", "sum", "(", "probs", ")", "\n", "probs", "=", "probs", "/", "den", "\n", "return", "self", ".", "random", ".", "choice", "(", "self", ".", "n_a", ",", "p", "=", "probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.evaluate": [[128, 144], ["y_fac.copy().astype", "numpy.append", "distributions.DiscreteDistribution.draw_a", "history.append", "distributions.DiscreteDistribution.draw_a", "y_fac.copy", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.SimulatedAntibiotics.draw_a", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.SimulatedAntibiotics.draw_a"], ["", "def", "evaluate", "(", "self", ",", "subject", ")", ":", "\n", "        ", "z", ",", "x", ",", "y_fac", "=", "subject", "\n", "mask_unknown_actions", "=", "y_fac", ".", "copy", "(", ")", ".", "astype", "(", "float", ")", "\n", "mask_unknown_actions", "[", "mask_unknown_actions", "!=", "-", "1", "]", "=", "0", "\n", "mask_unknown_actions", "[", "mask_unknown_actions", "==", "-", "1", "]", "=", "-", "np", ".", "inf", "\n", "mask_unknown_actions", "=", "np", ".", "append", "(", "mask_unknown_actions", ",", "0", ")", "\n", "history", "=", "[", "]", "\n", "action", "=", "self", ".", "draw_a", "(", "history", ",", "x", ",", "None", ")", "\n", "\n", "while", "action", "!=", "self", ".", "n_a", "and", "len", "(", "history", ")", "<", "self", ".", "n_a", ":", "\n", "            ", "outcome", "=", "y_fac", "[", "action", "]", "\n", "history", ".", "append", "(", "[", "action", ",", "outcome", "]", ")", "\n", "if", "outcome", ">=", "self", ".", "n_y", "-", "1", "or", "len", "(", "history", ")", ">=", "self", ".", "n_a", ":", "\n", "                ", "break", "\n", "", "action", "=", "self", ".", "draw_a", "(", "history", ",", "x", ",", "None", ")", "\n", "", "return", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.calc_a_closeness": [[145, 149], ["numpy.linalg.norm", "numpy.exp", "sum", "numpy.exp", "sum", "[].T.dot", "numpy.exp", "[].T.dot", "numpy.exp", "numpy.concatenate", "[].T.dot", "numpy.concatenate", "[].T.dot", "numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["", "def", "calc_a_closeness", "(", "self", ",", "a0", ",", "a1", ",", "x", ")", ":", "\n", "        ", "cc", "=", "np", ".", "exp", "(", "self", ".", "Py", "[", "a0", "]", "[", "0", ":", "self", ".", "n_x", "+", "1", "]", ".", "T", ".", "dot", "(", "np", ".", "concatenate", "(", "(", "[", "1", "]", ",", "x", ")", ")", ")", ")", "/", "sum", "(", "np", ".", "exp", "(", "self", ".", "Py", "[", "a0", "]", "[", "0", ":", "self", ".", "n_x", "+", "1", "]", ".", "T", ".", "dot", "(", "np", ".", "concatenate", "(", "(", "[", "1", "]", ",", "x", ")", ")", ")", ")", ")", "\n", "dd", "=", "np", ".", "exp", "(", "self", ".", "Py", "[", "a1", "]", "[", "0", ":", "self", ".", "n_x", "+", "1", "]", ".", "T", ".", "dot", "(", "np", ".", "concatenate", "(", "(", "[", "1", "]", ",", "x", ")", ")", ")", ")", "/", "sum", "(", "np", ".", "exp", "(", "self", ".", "Py", "[", "a1", "]", "[", "0", ":", "self", ".", "n_x", "+", "1", "]", ".", "T", ".", "dot", "(", "np", ".", "concatenate", "(", "(", "[", "1", "]", ",", "x", ")", ")", ")", ")", ")", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "cc", "-", "dd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.calc_y_weights": [[150, 158], ["numpy.concatenate", "numpy.zeros", "range", "numpy.sum", "numpy.exp", "distributions.DiscreteDistribution.Py[].T.dot"], "methods", ["None"], ["", "def", "calc_y_weights", "(", "self", ",", "a", ",", "x", ",", "z", ")", ":", "\n", "        ", "v", "=", "np", ".", "concatenate", "(", "(", "[", "1", "]", ",", "x", ",", "z", ")", ")", "\n", "probs", "=", "np", ".", "zeros", "(", "self", ".", "n_y", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_y", ")", ":", "\n", "            ", "probs", "[", "i", "]", "=", "np", ".", "exp", "(", "self", ".", "Py", "[", "a", "]", ".", "T", ".", "dot", "(", "v", ")", ")", ".", "T", "[", "i", "]", "\n", "", "den", "=", "np", ".", "sum", "(", "probs", ")", "\n", "probs", "=", "probs", "/", "den", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.draw_y": [[159, 166], ["distributions.DiscreteDistribution.calc_y_weights", "distributions.DiscreteDistribution.random.choice", "distributions.DiscreteDistribution.random.random", "distributions.DiscreteDistribution.random.random"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2SlightlyRandom.calc_y_weights"], ["", "def", "draw_y", "(", "self", ",", "a", ",", "h", ",", "x", ",", "z", ")", ":", "\n", "        ", "probs", "=", "self", ".", "calc_y_weights", "(", "a", ",", "x", ",", "z", ")", "\n", "y", "=", "self", ".", "random", ".", "choice", "(", "self", ".", "n_y", ",", "p", "=", "probs", ")", "\n", "done", "=", "False", "\n", "if", "(", "y", ">=", "self", ".", "n_y", "-", "1", "and", "self", ".", "random", ".", "random", "(", ")", "<", "0.9", ")", "or", "self", ".", "random", ".", "random", "(", ")", "<", "0.1", ":", "\n", "            ", "done", "=", "True", "\n", "", "return", "y", ",", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.get_z_probability": [[167, 172], ["range"], "methods", ["None"], ["", "def", "get_z_probability", "(", "self", ",", "z", ")", ":", "\n", "        ", "pz", "=", "1", "\n", "for", "i", "in", "range", "(", "self", ".", "n_z", ")", ":", "\n", "            ", "pz", "*=", "self", ".", "Pz", "[", "i", "]", "**", "z", "[", "i", "]", "*", "(", "1", "-", "self", ".", "Pz", "[", "i", "]", ")", "**", "(", "1", "-", "z", "[", "i", "]", ")", "\n", "", "return", "pz", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.calc_x_given_z_probability": [[173, 179], ["distributions.DiscreteDistribution.calc_x_weights", "range"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.calc_x_weights"], ["", "def", "calc_x_given_z_probability", "(", "self", ",", "z", ",", "x", ")", ":", "\n", "        ", "x_weights", "=", "self", ".", "calc_x_weights", "(", "z", ")", "\n", "px", "=", "1", "\n", "for", "i", "in", "range", "(", "self", ".", "n_x", ")", ":", "\n", "            ", "px", "*=", "x_weights", "[", "i", "]", "**", "x", "[", "i", "]", "*", "(", "1", "-", "x_weights", "[", "i", "]", ")", "**", "(", "1", "-", "x", "[", "i", "]", ")", "\n", "", "return", "px", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.calc_x_probability": [[180, 185], ["itertools.product", "range", "distributions.DiscreteDistribution.calc_x_given_z_probability", "distributions.DiscreteDistribution.get_z_probability"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.calc_x_given_z_probability", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.get_z_probability"], ["", "def", "calc_x_probability", "(", "self", ",", "x", ")", ":", "\n", "        ", "px", "=", "0", "\n", "for", "z", "in", "itertools", ".", "product", "(", "range", "(", "2", ")", ",", "repeat", "=", "self", ".", "n_z", ")", ":", "\n", "            ", "px", "+=", "self", ".", "calc_x_given_z_probability", "(", "z", ",", "x", ")", "*", "self", ".", "get_z_probability", "(", "z", ")", "\n", "", "return", "px", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.calc_z_given_x_probability": [[186, 191], ["distributions.DiscreteDistribution.get_z_probability", "distributions.DiscreteDistribution.calc_x_probability", "distributions.DiscreteDistribution.calc_x_given_z_probability"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.get_z_probability", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.calc_x_probability", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.calc_x_given_z_probability"], ["", "def", "calc_z_given_x_probability", "(", "self", ",", "z", ",", "x", ")", ":", "\n", "        ", "pz", "=", "self", ".", "get_z_probability", "(", "z", ")", "\n", "px", "=", "self", ".", "calc_x_probability", "(", "x", ")", "\n", "pxz", "=", "self", ".", "calc_x_given_z_probability", "(", "z", ",", "x", ")", "\n", "return", "pxz", "*", "pz", "/", "px", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.print_moderator_statistics": [[192, 201], ["print", "itertools.product", "numpy.isclose", "print", "range", "distributions.DiscreteDistribution.get_z_probability", "print"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.get_z_probability"], ["", "def", "print_moderator_statistics", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Probabilities for Z:\"", ")", "\n", "total", "=", "0", "\n", "for", "z", "in", "itertools", ".", "product", "(", "range", "(", "2", ")", ",", "repeat", "=", "self", ".", "n_z", ")", ":", "\n", "            ", "pz", "=", "self", ".", "get_z_probability", "(", "z", ")", "\n", "print", "(", "\"{} : {:05.3f}\"", ".", "format", "(", "z", ",", "pz", ")", ")", "\n", "total", "+=", "pz", "\n", "", "assert", "np", ".", "isclose", "(", "total", ",", "1", ",", "atol", "=", "0.000001", ")", ",", "\"Probabilities of moderators don't add up to 1. Something is wrong!\"", "\n", "print", "(", "\"---------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.print_covariate_statistics": [[202, 212], ["print", "itertools.product", "numpy.isclose", "print", "range", "distributions.DiscreteDistribution.calc_x_probability", "print"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.calc_x_probability"], ["", "def", "print_covariate_statistics", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Probabilities for X:\"", ")", "\n", "total", "=", "0", "\n", "for", "x", "in", "itertools", ".", "product", "(", "range", "(", "2", ")", ",", "repeat", "=", "self", ".", "n_x", ")", ":", "\n", "            ", "tot_px", "=", "self", ".", "calc_x_probability", "(", "x", ")", "\n", "total", "+=", "tot_px", "\n", "print", "(", "\"{} : {:05.3f}\"", ".", "format", "(", "x", ",", "tot_px", ")", ")", "\n", "\n", "", "assert", "np", ".", "isclose", "(", "total", ",", "1", ",", "atol", "=", "0.000001", ")", ",", "\"Probabilities of covariates don't add up to 1. Something is wrong!\"", "\n", "print", "(", "\"---------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.print_treatment_statistics": [[213, 233], ["range", "print", "print", "range", "print", "itertools.product", "print", "print", "range", "numpy.zeros", "itertools.product", "print", "range", "print", "range", "numpy.copy", "numpy.isclose", "distributions.DiscreteDistribution.calc_z_given_x_probability", "print", "distributions.DiscreteDistribution.calc_y_weights", "numpy.sum", "numpy.sum", "str", "int", "str", "int"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.calc_z_given_x_probability", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2SlightlyRandom.calc_y_weights"], ["", "def", "print_treatment_statistics", "(", "self", ")", ":", "\n", "        ", "for", "a", "in", "range", "(", "self", ".", "n_a", ")", ":", "\n", "            ", "print", "(", "\"Outcome probabilities for treatment A{}\"", ".", "format", "(", "a", ")", ")", "\n", "print", "(", "\"{:{width}}\"", ".", "format", "(", "''", ",", "width", "=", "self", ".", "n_x", "*", "3", "+", "int", "(", "self", ".", "n_x", "==", "1", ")", ")", ",", "end", "=", "''", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_y", ")", ":", "\n", "                ", "print", "(", "\"|{:^5}\"", ".", "format", "(", "\"Y=\"", "+", "str", "(", "i", ")", ")", ",", "end", "=", "''", ")", "\n", "", "print", "(", "\"|\"", ")", "\n", "for", "x", "in", "itertools", ".", "product", "(", "range", "(", "2", ")", ",", "repeat", "=", "self", ".", "n_x", ")", ":", "\n", "                ", "tot_py", "=", "np", ".", "zeros", "(", "self", ".", "n_y", ")", "\n", "for", "z", "in", "itertools", ".", "product", "(", "range", "(", "2", ")", ",", "repeat", "=", "self", ".", "n_z", ")", ":", "\n", "                    ", "py", "=", "np", ".", "copy", "(", "self", ".", "calc_y_weights", "(", "a", ",", "x", ",", "z", ")", ")", "\n", "assert", "np", ".", "isclose", "(", "np", ".", "sum", "(", "py", ")", ",", "1", ",", "atol", "=", "0.000001", ")", ",", "\"Probabilities of treatment {} don't add up to 1 for x: {}, z: {}, is {}\"", ".", "format", "(", "a", ",", "x", ",", "z", ",", "np", ".", "sum", "(", "py", ")", ")", "\n", "py", "*=", "self", ".", "calc_z_given_x_probability", "(", "z", ",", "x", ")", "\n", "tot_py", "+=", "py", "\n", "", "print", "(", "\"{:{width}}\"", ".", "format", "(", "str", "(", "x", ")", ",", "width", "=", "self", ".", "n_x", "*", "3", "+", "int", "(", "self", ".", "n_x", "==", "1", ")", ")", ",", "end", "=", "''", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_y", ")", ":", "\n", "                    ", "print", "(", "\"|{:05.3f}\"", ".", "format", "(", "tot_py", "[", "i", "]", ")", ",", "end", "=", "''", ")", "\n", "", "print", "(", "\"|\"", ")", "\n", "", "print", "(", "\"---------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.print_detailed_treatment_statistics": [[234, 255], ["range", "print", "print", "range", "print", "itertools.product", "print", "print", "range", "print", "itertools.product", "range", "print", "numpy.copy", "numpy.isclose", "range", "print", "str", "distributions.DiscreteDistribution.calc_y_weights", "numpy.sum", "numpy.sum", "print", "numpy.min", "print", "str", "str", "int", "int"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2SlightlyRandom.calc_y_weights"], ["", "", "def", "print_detailed_treatment_statistics", "(", "self", ")", ":", "\n", "        ", "for", "a", "in", "range", "(", "self", ".", "n_a", ")", ":", "\n", "            ", "print", "(", "\"Outcome probabilities for treatment A{}\"", ".", "format", "(", "a", ")", ")", "\n", "print", "(", "\"{:{width}}\"", ".", "format", "(", "''", ",", "width", "=", "self", ".", "n_x", "*", "3", "+", "int", "(", "self", ".", "n_x", "==", "1", ")", "+", "1", "+", "self", ".", "n_z", "*", "3", ")", ",", "end", "=", "''", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_y", ")", ":", "\n", "                ", "print", "(", "\"|{:^5}\"", ".", "format", "(", "\"Y=\"", "+", "str", "(", "i", ")", ")", ",", "end", "=", "''", ")", "\n", "", "print", "(", "\"|\"", ")", "\n", "for", "x", "in", "itertools", ".", "product", "(", "range", "(", "2", ")", ",", "repeat", "=", "self", ".", "n_x", ")", ":", "\n", "                ", "print", "(", "\"{:{width}}\"", ".", "format", "(", "str", "(", "x", ")", ",", "width", "=", "self", ".", "n_x", "*", "3", ")", ",", "end", "=", "' '", ")", "\n", "for", "z", "in", "itertools", ".", "product", "(", "range", "(", "2", ")", ",", "repeat", "=", "self", ".", "n_z", ")", ":", "\n", "                    ", "print", "(", "\"{:{width}}\"", ".", "format", "(", "str", "(", "z", ")", ",", "width", "=", "self", ".", "n_z", "*", "3", ")", ",", "end", "=", "''", ")", "\n", "py", "=", "np", ".", "copy", "(", "self", ".", "calc_y_weights", "(", "a", ",", "x", ",", "z", ")", ")", "\n", "assert", "np", ".", "isclose", "(", "np", ".", "sum", "(", "py", ")", ",", "1", ",", "atol", "=", "0.000001", ")", ",", "\"Probabilities of treatment {} don't add up to 1 for x: {}, z: {}, is {}\"", ".", "format", "(", "a", ",", "x", ",", "z", ",", "\n", "np", ".", "sum", "(", "py", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_y", ")", ":", "\n", "                        ", "print", "(", "\"|{:05.3f}\"", ".", "format", "(", "py", "[", "i", "]", ")", ",", "end", "=", "''", ")", "\n", "", "print", "(", "\"|\"", ")", "\n", "if", "np", ".", "min", "(", "z", ")", "==", "0", ":", "\n", "                        ", "print", "(", "\"{:{width}}\"", ".", "format", "(", "\"\"", ",", "width", "=", "self", ".", "n_x", "*", "3", "+", "int", "(", "self", ".", "n_x", "==", "1", ")", "+", "1", ")", ",", "end", "=", "''", ")", "\n", "", "", "", "print", "(", "\"---------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistributionWithStaticOutcomes.__init__": [[257, 260], ["distributions.DiscreteDistribution.__init__"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_z", ",", "n_x", ",", "n_a", ",", "steps_y", ",", "outcome_sensitivity_x_z", "=", "1", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_z", ",", "n_x", ",", "n_a", ",", "steps_y", ",", "outcome_sensitivity_x_z", ",", "seed", ")", "\n", "self", ".", "name", "=", "\"Discrete with static outcomes\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistributionWithStaticOutcomes.draw_y": [[261, 268], ["distributions.DiscreteDistributionWithStaticOutcomes.calc_y_weights", "numpy.argmax", "distributions.DiscreteDistributionWithStaticOutcomes.random.random"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2SlightlyRandom.calc_y_weights"], ["", "def", "draw_y", "(", "self", ",", "a", ",", "h", ",", "x", ",", "z", ")", ":", "\n", "        ", "probs", "=", "self", ".", "calc_y_weights", "(", "a", ",", "x", ",", "z", ")", "\n", "y", "=", "np", ".", "argmax", "(", "probs", ")", "\n", "done", "=", "False", "\n", "if", "y", ">=", "self", ".", "n_y", "-", "1", "and", "self", ".", "random", ".", "random", "(", ")", "<", "0.9", ":", "\n", "            ", "done", "=", "True", "\n", "", "return", "y", ",", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes.__init__": [[271, 288], ["distributions.DiscreteDistribution.__init__", "dict", "numpy.array", "numpy.array", "numpy.abs", "distributions.DiscreteDistributionWithSmoothOutcomes.random.normal", "distributions.DiscreteDistributionWithSmoothOutcomes.random.normal"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_z", ",", "n_x", ",", "n_a", ",", "steps_y", ",", "outcome_sensitivity_x_z", "=", "1", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_z", ",", "n_x", ",", "n_a", ",", "steps_y", ",", "outcome_sensitivity_x_z", ",", "seed", ")", "\n", "self", ".", "name", "=", "\"Discrete_with_smooth_outcomes\"", "\n", "\n", "self", ".", "dists", "=", "dict", "(", ")", "\n", "\n", "self", ".", "Py1", "=", "np", ".", "array", "(", "self", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "self", ".", "n_a", ",", "1", "+", "self", ".", "n_x", "+", "self", ".", "n_z", ")", ")", ")", "\n", "self", ".", "Py2", "=", "np", ".", "array", "(", "self", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "self", ".", "n_a", ",", "1", "+", "self", ".", "n_x", "+", "self", ".", "n_z", ")", ")", ")", "\n", "self", ".", "Py2", "[", ":", ",", "0", "]", "=", "np", ".", "abs", "(", "self", ".", "Py2", "[", ":", ",", "0", "]", ")", "\n", "for", "coeffs", "in", "self", ".", "Py1", ":", "\n", "            ", "coeffs", "[", "1", ":", "self", ".", "n_x", "+", "1", "]", "*=", "self", ".", "x_weight", "\n", "", "for", "coeffs", "in", "self", ".", "Py2", ":", "\n", "            ", "coeffs", "[", "1", ":", "self", ".", "n_x", "+", "1", "]", "*=", "self", ".", "x_weight", "\n", "", "self", ".", "neg_Py1", "=", "(", "(", "self", ".", "Py1", "<", "0", ")", "*", "self", ".", "Py1", ")", ".", "sum", "(", "1", ")", "\n", "self", ".", "pos_Py1", "=", "(", "(", "self", ".", "Py1", ">", "0", ")", "*", "self", ".", "Py1", ")", ".", "sum", "(", "1", ")", "\n", "self", ".", "neg_Py2", "=", "(", "(", "self", ".", "Py2", "<", "0", ")", "*", "self", ".", "Py2", ")", ".", "sum", "(", "1", ")", "\n", "self", ".", "pos_Py2", "=", "(", "(", "self", ".", "Py2", ">", "0", ")", "*", "self", ".", "Py2", ")", ".", "sum", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes.calc_a_closeness": [[289, 294], ["numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "calc_a_closeness", "(", "self", ",", "a0", ",", "a1", ",", "x", ")", ":", "\n", "        ", "d1", "=", "self", ".", "Py1", "[", "a0", "]", "-", "self", ".", "Py1", "[", "a1", "]", "\n", "d2", "=", "self", ".", "Py2", "[", "a0", "]", "-", "self", ".", "Py2", "[", "a1", "]", "\n", "\n", "return", "np", ".", "sum", "(", "d1", "**", "2", ")", "+", "np", ".", "sum", "(", "d2", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistributionWithSmoothOutcomes.calc_y_weights": [[295, 312], ["numpy.concatenate", "tuple", "distributions.DiscreteDistributionWithSmoothOutcomes.Py1[].dot", "distributions.DiscreteDistributionWithSmoothOutcomes.Py2[].dot", "numpy.zeros", "range", "numpy.concatenate", "scipy.stats.cauchy", "scipy.stats.cauchy.pdf", "sum"], "methods", ["None"], ["", "def", "calc_y_weights", "(", "self", ",", "a", ",", "x", ",", "z", ")", ":", "\n", "        ", "v", "=", "np", ".", "concatenate", "(", "(", "[", "1", "]", ",", "x", ",", "z", ")", ")", "\n", "dist_index", "=", "tuple", "(", "np", ".", "concatenate", "(", "(", "[", "a", "]", ",", "x", ",", "z", ")", ")", ")", "\n", "y0", "=", "self", ".", "Py1", "[", "a", "]", ".", "dot", "(", "v", ")", "\n", "y0", "=", "(", "self", ".", "n_y", "-", "1", ")", "*", "(", "y0", "-", "self", ".", "neg_Py1", "[", "a", "]", ")", "/", "(", "self", ".", "pos_Py1", "[", "a", "]", "-", "self", ".", "neg_Py1", "[", "a", "]", ")", "\n", "gamma", "=", "self", ".", "Py2", "[", "a", "]", ".", "dot", "(", "v", ")", "\n", "gamma", "=", "(", "gamma", "-", "self", ".", "neg_Py2", "[", "a", "]", ")", "/", "(", "self", ".", "pos_Py2", "[", "a", "]", "-", "self", ".", "neg_Py2", "[", "a", "]", ")", "\n", "probs", "=", "np", ".", "zeros", "(", "self", ".", "n_y", ")", "\n", "if", "dist_index", "in", "self", ".", "dists", ":", "\n", "            ", "dist", "=", "self", ".", "dists", "[", "dist_index", "]", "\n", "", "else", ":", "\n", "            ", "dist", "=", "scipy", ".", "stats", ".", "cauchy", "(", "y0", ",", "gamma", ")", "\n", "self", ".", "dists", "[", "dist_index", "]", "=", "dist", "\n", "", "for", "i", "in", "range", "(", "self", ".", "n_y", ")", ":", "\n", "            ", "probs", "[", "i", "]", "=", "dist", ".", "pdf", "(", "i", ")", "\n", "", "probs", "=", "probs", "/", "sum", "(", "probs", ")", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistributionWithInformation.__init__": [[314, 359], ["distributions.DiscreteDistribution.__init__", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.ndenumerate", "numpy.abs", "numpy.max", "numpy.ndenumerate", "tuple", "numpy.ndenumerate", "distributions.DiscreteDistributionWithInformation.random.uniform", "numpy.zeros", "numpy.ndenumerate", "numpy.min", "numpy.zeros", "numpy.ndenumerate", "distributions.DiscreteDistributionWithInformation.random.binomial", "numpy.zeros", "range", "numpy.zeros", "range", "numpy.zeros", "range", "numpy.dot", "scipy.stats.cauchy", "range", "numpy.sum", "numpy.isclose", "numpy.array", "distributions.DiscreteDistributionWithInformation.random.uniform", "scipy.stats.cauchy.pdf", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_z", ",", "n_x", ",", "n_a", ",", "n_y", ",", "seed", "=", "seed", ")", "\n", "self", ".", "name", "=", "\"Discrete_with_information\"", "\n", "\n", "self", ".", "Pz", "=", "np", ".", "array", "(", "(", "0.5", ",", ")", "*", "self", ".", "n_z", ")", "\n", "self", ".", "y_coefficients", "=", "np", ".", "array", "(", "self", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "(", "self", ".", "n_a", ",", "1", "+", "self", ".", "n_x", "+", "self", ".", "n_z", ")", ")", ")", "\n", "self", ".", "y_coefficients", "[", ":", ",", "1", ":", "1", "+", "n_z", "]", "*=", "5000", "\n", "\n", "self", ".", "outcome_probabilities", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "n_z", "+", "(", "2", ",", ")", "*", "self", ".", "n_x", "+", "(", "n_a", ",", ")", "+", "(", "n_y", ",", ")", ")", "\n", "\n", "mean_outcomes", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "n_z", "+", "(", "2", ",", ")", "*", "self", ".", "n_x", "+", "(", "n_a", ",", ")", ")", "\n", "for", "z", ",", "_", "in", "np", ".", "ndenumerate", "(", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "n_z", ")", ")", ":", "\n", "            ", "for", "x", ",", "_", "in", "np", ".", "ndenumerate", "(", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "n_x", ")", ")", ":", "\n", "                ", "for", "a", "in", "range", "(", "self", ".", "n_a", ")", ":", "\n", "                    ", "coeffs", "=", "self", ".", "y_coefficients", "[", "a", "]", "\n", "mean_outcomes", "[", "z", "+", "x", "+", "(", "a", ",", ")", "]", "=", "np", ".", "dot", "(", "coeffs", ",", "np", ".", "array", "(", "(", "1", ",", ")", "+", "z", "+", "x", ")", ")", "\n", "", "", "", "mean_outcomes", "+=", "np", ".", "abs", "(", "np", ".", "min", "(", "mean_outcomes", ")", ")", "\n", "mean_outcomes", "/=", "np", ".", "max", "(", "mean_outcomes", ")", "\n", "mean_outcomes", "*=", "(", "self", ".", "n_y", "-", "0.7", ")", "\n", "for", "z", ",", "_", "in", "np", ".", "ndenumerate", "(", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "n_z", ")", ")", ":", "\n", "            ", "for", "x", ",", "_", "in", "np", ".", "ndenumerate", "(", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "n_x", ")", ")", ":", "\n", "                ", "for", "a", "in", "range", "(", "self", ".", "n_a", ")", ":", "\n", "                    ", "dist", "=", "scipy", ".", "stats", ".", "cauchy", "(", "mean_outcomes", "[", "z", "+", "x", "+", "(", "a", ",", ")", "]", ",", "self", ".", "random", ".", "uniform", "(", "0.2", ",", "0.6", ")", ")", "\n", "for", "y", "in", "range", "(", "self", ".", "n_y", ")", ":", "\n", "                        ", "self", ".", "outcome_probabilities", "[", "z", "+", "x", "+", "(", "a", ",", ")", "+", "(", "y", ",", ")", "]", "=", "dist", ".", "pdf", "(", "y", ")", "\n", "", "self", ".", "outcome_probabilities", "[", "z", "+", "x", "+", "(", "a", ",", ")", "]", "/=", "np", ".", "sum", "(", "self", ".", "outcome_probabilities", "[", "z", "+", "x", "+", "(", "a", ",", ")", "]", ")", "\n", "assert", "np", ".", "isclose", "(", "np", ".", "sum", "(", "self", ".", "outcome_probabilities", "[", "z", "+", "x", "+", "(", "a", ",", ")", "]", ")", ",", "1", ",", "0.00001", ")", ",", "\"z{}, x{}, a{}, sum{}\"", ".", "format", "(", "z", ",", "x", ",", "a", ",", "np", ".", "sum", "(", "self", ".", "outcome_probabilities", "[", "z", "+", "x", "+", "(", "a", ",", ")", "]", ")", ")", "\n", "", "", "", "'''\n        for z, _ in np.ndenumerate(np.zeros((2,)*self.n_z)):\n            if self.random.random() < 1:\n                x = tuple(np.random.binomial(1, 0.5, size=n_x))\n                a0 = self.random.choice(self.n_a)\n                a1 = self.random.choice(self.n_a)\n                if a0 != a1:\n                    for y in range(self.n_y):\n                        self.outcome_probabilities[z+x+(a0,)+(y,)] = self.outcome_probabilities[z+x+(a1,)+(-(y+1),)]\n                    print(\"Mirrored treatments {} and {} for x: {}, z: {}\".format(a0, a1, x, z))\n        '''", "\n", "# Reverse a treatment", "\n", "x", "=", "tuple", "(", "self", ".", "random", ".", "binomial", "(", "1", ",", "0.5", ",", "size", "=", "self", ".", "n_x", ")", ")", "\n", "for", "z", ",", "_", "in", "np", ".", "ndenumerate", "(", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "n_z", ")", ")", ":", "\n", "            ", "a0", "=", "0", "\n", "a1", "=", "self", ".", "n_a", "-", "1", "\n", "for", "y", "in", "range", "(", "self", ".", "n_y", ")", ":", "\n", "                ", "self", ".", "outcome_probabilities", "[", "z", "+", "x", "+", "(", "a0", ",", ")", "+", "(", "y", ",", ")", "]", "=", "self", ".", "outcome_probabilities", "[", "z", "+", "x", "+", "(", "a1", ",", ")", "+", "(", "-", "(", "y", "+", "1", ")", ",", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistributionWithInformation.calc_a_closeness": [[360, 362], ["numpy.sum"], "methods", ["None"], ["", "", "", "def", "calc_a_closeness", "(", "self", ",", "a0", ",", "a1", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "(", "self", ".", "y_coefficients", "[", "a0", "]", "-", "self", ".", "y_coefficients", "[", "a1", "]", ")", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistributionWithInformation.calc_y_weights": [[363, 366], ["tuple", "numpy.concatenate"], "methods", ["None"], ["", "def", "calc_y_weights", "(", "self", ",", "a", ",", "x", ",", "z", ")", ":", "\n", "        ", "dist_index", "=", "tuple", "(", "np", ".", "concatenate", "(", "(", "z", ",", "x", ",", "[", "a", "]", ")", ")", ")", "\n", "return", "self", ".", "outcome_probabilities", "[", "dist_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.__init__": [[369, 372], ["distributions.Distribution.__init__"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "seed", ")", "\n", "self", ".", "name", "=", "'New'", "\n", "", "n_x", "=", "1", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.draw_z": [[381, 383], ["distributions.ToyDistribution2.random.choice"], "methods", ["None"], ["def", "draw_z", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "random", ".", "choice", "(", "8", ",", "p", "=", "self", ".", "pz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.draw_x": [[384, 386], ["None"], "methods", ["None"], ["", "def", "draw_x", "(", "self", ",", "z", ")", ":", "\n", "        ", "return", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.draw_a": [[387, 395], ["numpy.sum", "distributions.ToyDistribution2.random.choice", "len", "sum"], "methods", ["None"], ["", "def", "draw_a", "(", "self", ",", "h", ",", "x", ",", "z", ")", ":", "\n", "        ", "ev", "=", "np", ".", "sum", "(", "self", ".", "pz", "*", "(", "self", ".", "results_array", "==", "2", ")", ",", "1", ")", "\n", "if", "len", "(", "h", ")", ">", "0", ":", "\n", "            ", "used_a", "=", "[", "u", "[", "0", "]", "for", "u", "in", "h", "]", "\n", "for", "u", "in", "used_a", ":", "\n", "                ", "ev", "[", "u", "]", "=", "0", "\n", "\n", "", "", "return", "self", ".", "random", ".", "choice", "(", "3", ",", "p", "=", "ev", "/", "sum", "(", "ev", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.draw_y": [[396, 404], ["len", "numpy.max", "distributions.ToyDistribution2.random.random", "distributions.ToyDistribution2.random.random"], "methods", ["None"], ["", "def", "draw_y", "(", "self", ",", "a", ",", "h", ",", "x", ",", "z", ")", ":", "\n", "        ", "y", "=", "self", ".", "results_array", "[", "a", "]", "[", "z", "]", "\n", "max_y", "=", "0", "\n", "if", "len", "(", "h", ")", ">", "0", ":", "\n", "            ", "max_y", "=", "np", ".", "max", "(", "h", ",", "0", ")", "[", "1", "]", "\n", "", "if", "(", "(", "max_y", "==", "2", "or", "y", "==", "2", ")", "and", "self", ".", "random", ".", "random", "(", ")", "<", "0.90", ")", "or", "self", ".", "random", ".", "random", "(", ")", "<", "0.1", ":", "\n", "            ", "return", "y", ",", "True", "\n", "", "return", "y", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.calc_x_weights": [[405, 407], ["numpy.array"], "methods", ["None"], ["", "def", "calc_x_weights", "(", "self", ",", "z", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "1", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.convert_binary_to_decimal": [[408, 415], ["range", "len"], "methods", ["None"], ["", "def", "convert_binary_to_decimal", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", "is", "int", ":", "\n", "            ", "return", "t", "\n", "", "t_val", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "t", ")", ")", ":", "\n", "            ", "t_val", "+=", "2", "**", "i", "*", "t", "[", "-", "(", "i", "+", "1", ")", "]", "\n", "", "return", "t_val", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.get_z_probability": [[416, 419], ["distributions.ToyDistribution2.convert_binary_to_decimal"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.convert_binary_to_decimal"], ["", "def", "get_z_probability", "(", "self", ",", "z", ")", ":", "\n", "        ", "z_val", "=", "self", ".", "convert_binary_to_decimal", "(", "z", ")", "\n", "return", "self", ".", "pz", "[", "z_val", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.calc_y_weights": [[420, 426], ["distributions.ToyDistribution2.convert_binary_to_decimal", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.convert_binary_to_decimal"], ["", "def", "calc_y_weights", "(", "self", ",", "a", ",", "x", ",", "z", ")", ":", "\n", "        ", "z_val", "=", "self", ".", "convert_binary_to_decimal", "(", "z", ")", "\n", "result", "=", "self", ".", "results_array", "[", "a", "]", "[", "z_val", "]", "\n", "probs", "=", "np", ".", "zeros", "(", "3", ")", "\n", "probs", "[", "result", "]", "=", "1", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2SlightlyRandom.draw_y": [[429, 439], ["distributions.ToyDistribution2SlightlyRandom.random.random", "distributions.ToyDistribution2SlightlyRandom.random.choice", "len", "numpy.max", "distributions.ToyDistribution2SlightlyRandom.random.random", "distributions.ToyDistribution2SlightlyRandom.random.random"], "methods", ["None"], ["    ", "def", "draw_y", "(", "self", ",", "a", ",", "h", ",", "x", ",", "z", ")", ":", "\n", "        ", "y", "=", "self", ".", "results_array", "[", "a", "]", "[", "z", "]", "\n", "if", "self", ".", "random", ".", "random", "(", ")", "<", "0.15", ":", "\n", "            ", "y", "=", "self", ".", "random", ".", "choice", "(", "3", ")", "\n", "", "max_y", "=", "0", "\n", "if", "len", "(", "h", ")", ">", "0", ":", "\n", "            ", "max_y", "=", "np", ".", "max", "(", "h", ",", "0", ")", "[", "1", "]", "\n", "", "if", "(", "(", "max_y", "==", "2", "or", "y", "==", "2", ")", "and", "self", ".", "random", ".", "random", "(", ")", "<", "0.90", ")", "or", "self", ".", "random", ".", "random", "(", ")", "<", "0.1", ":", "\n", "            ", "return", "y", ",", "True", "\n", "", "return", "y", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2SlightlyRandom.calc_y_weights": [[440, 446], ["distributions.ToyDistribution2SlightlyRandom.convert_binary_to_decimal", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2.convert_binary_to_decimal"], ["", "def", "calc_y_weights", "(", "self", ",", "a", ",", "x", ",", "z", ")", ":", "\n", "        ", "z_val", "=", "self", ".", "convert_binary_to_decimal", "(", "z", ")", "\n", "result", "=", "self", ".", "results_array", "[", "a", "]", "[", "z_val", "]", "\n", "probs", "=", "np", ".", "ones", "(", "3", ")", "*", "0.05", "\n", "probs", "[", "result", "]", "=", "0.9", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.SimulatedAntibiotics.__init__": [[449, 459], ["distributions.Distribution.__init__", "Database.antibioticsdatabase.AntibioticsDatabase", "Database.antibioticsdatabase.AntibioticsDatabase.get_data", "DataGenerator.data_generator.split_patients", "Algorithms.Approximators.doctor_approximator.DoctorApproximator", "distributions.SimulatedAntibiotics.doctor_approximator.get_patient_statistics"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.__init__", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Database.antibioticsdatabase.AntibioticsDatabase.get_data", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.get_patient_statistics"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ")", "\n", "dist", "=", "AntibioticsDatabase", "(", "n_x", "=", "6", ",", "antibiotic_limit", "=", "50", ",", "seed", "=", "seed", ")", "\n", "training_data", ",", "test_data", "=", "dist", ".", "get_data", "(", ")", "\n", "data", "=", "split_patients", "(", "training_data", ")", "\n", "n_x", "=", "dist", ".", "n_x", "\n", "n_a", "=", "dist", ".", "n_a", "\n", "n_y", "=", "dist", ".", "n_y", "\n", "self", ".", "doctor_approximator", "=", "DoctorApproximator", "(", "n_x", ",", "n_a", ",", "n_y", ",", "data", ")", "\n", "self", ".", "statistics", "=", "self", ".", "doctor_approximator", ".", "get_patient_statistics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.SimulatedAntibiotics.draw_x": [[460, 462], ["None"], "methods", ["None"], ["", "def", "draw_x", "(", "self", ",", "z", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.SimulatedAntibiotics.draw_a": [[463, 465], ["None"], "methods", ["None"], ["", "def", "draw_a", "(", "self", ",", "h", ",", "x", ",", "z", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.SimulatedAntibiotics.draw_z": [[466, 468], ["None"], "methods", ["None"], ["", "def", "draw_z", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_sample": [[7, 20], ["generator.draw_z", "generator.draw_x", "range", "generator.draw_a", "generator.draw_y", "h.append", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.SimulatedAntibiotics.draw_z", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.SimulatedAntibiotics.draw_x", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.SimulatedAntibiotics.draw_a", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2SlightlyRandom.draw_y"], ["def", "generate_sample", "(", "generator", ")", ":", "\n", "    ", "z", "=", "generator", ".", "draw_z", "(", ")", "\n", "x", "=", "generator", ".", "draw_x", "(", "z", ")", "\n", "\n", "h", "=", "[", "]", "\n", "\n", "for", "t", "in", "range", "(", "generator", ".", "n_a", ")", ":", "\n", "        ", "a_t", "=", "generator", ".", "draw_a", "(", "h", ",", "x", ",", "z", ")", "\n", "y_t", ",", "done", "=", "generator", ".", "draw_y", "(", "a_t", ",", "h", ",", "x", ",", "z", ")", "\n", "h", ".", "append", "(", "np", ".", "array", "(", "[", "a_t", ",", "y_t", "]", ")", ")", "\n", "if", "done", ":", "\n", "            ", "break", "\n", "", "", "return", "z", ",", "x", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_data": [[22, 36], ["range", "range", "results.append", "data[].append", "data[].append", "data[].append", "data_generator.generate_sample"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_sample"], ["", "def", "generate_data", "(", "generator", ",", "n_samples", ")", ":", "\n", "    ", "data", "=", "{", "'z'", ":", "[", "]", ",", "'x'", ":", "[", "]", ",", "'h'", ":", "[", "]", "}", "\n", "\n", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "        ", "results", ".", "append", "(", "generate_sample", "(", "generator", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "        ", "z", ",", "x", ",", "h", "=", "results", "[", "i", "]", "\n", "data", "[", "'z'", "]", ".", "append", "(", "z", ")", "\n", "data", "[", "'x'", "]", ".", "append", "(", "x", ")", "\n", "data", "[", "'h'", "]", ".", "append", "(", "h", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.generate_test_data": [[39, 55], ["range", "numpy.array", "generator.draw_z", "generator.draw_x", "subject.append", "subject.append", "subject.append", "range", "data.append", "numpy.zeros", "generator.draw_y", "h.append", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.SimulatedAntibiotics.draw_z", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.SimulatedAntibiotics.draw_x", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2SlightlyRandom.draw_y"], ["", "def", "generate_test_data", "(", "generator", ",", "n_samples", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "        ", "z", "=", "generator", ".", "draw_z", "(", ")", "\n", "x", "=", "generator", ".", "draw_x", "(", "z", ")", "\n", "subject", "=", "[", "]", "\n", "subject", ".", "append", "(", "z", ")", "\n", "subject", ".", "append", "(", "x", ")", "\n", "subject", ".", "append", "(", "np", ".", "zeros", "(", "generator", ".", "n_a", ")", ")", "\n", "h", "=", "[", "]", "\n", "for", "a", "in", "range", "(", "generator", ".", "n_a", ")", ":", "\n", "            ", "y", ",", "_", "=", "generator", ".", "draw_y", "(", "a", ",", "h", ",", "x", ",", "z", ")", "\n", "subject", "[", "2", "]", "[", "a", "]", "=", "y", "\n", "h", ".", "append", "(", "np", ".", "array", "(", "[", "a", ",", "y", "]", ")", ")", "\n", "", "data", ".", "append", "(", "np", ".", "array", "(", "subject", ")", ")", "\n", "", "return", "np", ".", "array", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.trim_data": [[57, 67], ["data.copy", "range", "len", "range", "len"], "function", ["None"], ["", "def", "trim_data", "(", "data", ",", "threshold", ")", ":", "\n", "    ", "trimmed_data", "=", "data", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "trimmed_data", "[", "'z'", "]", ")", ")", ":", "\n", "        ", "tmp_h", "=", "trimmed_data", "[", "'h'", "]", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "tmp_h", ")", ")", ":", "\n", "            ", "if", "tmp_h", "[", "j", "]", "[", "1", "]", ">=", "threshold", ":", "\n", "                ", "trimmed_data", "[", "'h'", "]", "[", "i", "]", "=", "tmp_h", "[", "0", ":", "j", "+", "1", "]", "\n", "break", "\n", "\n", "", "", "", "return", "trimmed_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.write_json": [[69, 72], ["open", "json.dump"], "function", ["None"], ["", "def", "write_json", "(", "data", ",", "name", ")", ":", "\n", "    ", "with", "open", "(", "name", "+", "'.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "f", ",", "default", "=", "convert", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.read_json": [[74, 78], ["open", "json.load"], "function", ["None"], ["", "", "def", "read_json", "(", "name", ")", ":", "\n", "    ", "with", "open", "(", "name", "+", "'.json'", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.convert": [[80, 83], ["isinstance", "int"], "function", ["None"], ["", "def", "convert", "(", "o", ")", ":", "\n", "    ", "if", "isinstance", "(", "o", ",", "np", ".", "int64", ")", ":", "\n", "        ", "return", "int", "(", "o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.data_generator.split_patients": [[85, 102], ["enumerate", "range", "len", "new_x.append", "new_z.append", "new_h.append", "len"], "function", ["None"], ["", "", "def", "split_patients", "(", "data", ")", ":", "\n", "    ", "x", "=", "data", "[", "'x'", "]", "\n", "h", "=", "data", "[", "'h'", "]", "\n", "z", "=", "data", "[", "'z'", "]", "\n", "new_x", "=", "[", "]", "\n", "new_h", "=", "[", "]", "\n", "new_z", "=", "[", "]", "\n", "for", "i", ",", "history", "in", "enumerate", "(", "h", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "len", "(", "history", ")", ")", ":", "\n", "            ", "new_x", ".", "append", "(", "x", "[", "i", "]", ")", "\n", "new_z", ".", "append", "(", "z", "[", "i", "]", ")", "\n", "new_h", ".", "append", "(", "h", "[", "i", "]", "[", "0", ":", "len", "(", "h", "[", "i", "]", ")", "-", "j", "]", ")", "\n", "\n", "", "", "data", "[", "'x'", "]", "=", "new_x", "\n", "data", "[", "'h'", "]", "=", "new_h", "\n", "data", "[", "'z'", "]", "=", "new_z", "\n", "return", "data", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.OldAlgorithms.q_learning_with_constraint.QLearnerConstrained.__init__": [[6, 23], ["q_learning_with_constraint.QLearnerConstrained.convert_to_sars"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.OldAlgorithms.q_learning.QLearner.convert_to_sars"], ["    ", "def", "__init__", "(", "self", ",", "n_x", ",", "n_a", ",", "n_y", ",", "data", ",", "constraint", ",", "reward", "=", "-", "1", ",", "learning_time", "=", "10000", ",", "learning_rate", "=", "0.01", ",", "discount_factor", "=", "1", ")", ":", "\n", "        ", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_y", "=", "n_y", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "max_possible_outcome", "=", "self", ".", "n_y", "-", "1", "\n", "self", ".", "stop_action", "=", "self", ".", "n_a", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "step_reward", "=", "reward", "\n", "self", ".", "learning_time", "=", "learning_time", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "discount_factor", "=", "discount_factor", "\n", "self", ".", "q_table", "=", "None", "\n", "self", ".", "name", "=", "'Constrained Q-learning'", "\n", "self", ".", "label", "=", "'CQL'", "\n", "self", ".", "statistics", "=", "None", "\n", "self", ".", "sars_data", "=", "self", ".", "convert_to_sars", "(", ")", "\n", "self", ".", "constraint", "=", "constraint", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.OldAlgorithms.q_learning_with_constraint.QLearnerConstrained.to_index": [[24, 26], ["tuple", "np.hstack"], "methods", ["None"], ["", "def", "to_index", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "tuple", "(", "np", ".", "hstack", "(", "state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.OldAlgorithms.q_learning_with_constraint.QLearnerConstrained.learn": [[27, 55], ["np.zeros", "q_learning_with_constraint.QLearnerConstrained.q_table.copy().astype", "np.ndenumerate", "range", "np.zeros", "np.ndenumerate", "q_learning_with_constraint.QLearnerConstrained.q_table.copy", "q_learning_with_constraint.QLearnerConstrained.constraint.no_better_treatment_exist", "np.random.randint", "q_learning_with_constraint.QLearnerConstrained.to_index", "len", "q_learning_with_constraint.QLearnerConstrained.to_index", "q_learning_with_constraint.QLearnerConstrained.to_index", "q_learning_with_constraint.QLearnerConstrained.to_index", "q_learning_with_constraint.QLearnerConstrained.to_index", "q_learning_with_constraint.QLearnerConstrained.to_index", "max", "q_learning_with_constraint.QLearnerConstrained.to_index", "q_learning_with_constraint.QLearnerConstrained.to_index"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.better_treatment_constraint.Constraint.no_better_treatment_exist", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index"], ["", "def", "learn", "(", "self", ")", ":", "\n", "# Q-table indexed with x, y_0, y_1, y_2, y_3 and a", "\n", "        ", "self", ".", "q_table", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "n_x", "+", "(", "self", ".", "n_y", "+", "1", ",", ")", "*", "self", ".", "n_a", "+", "(", "self", ".", "n_a", "+", "1", ",", ")", ")", "\n", "modified", "=", "self", ".", "q_table", ".", "copy", "(", ")", ".", "astype", "(", "bool", ")", "\n", "history", "=", "self", ".", "sars_data", "\n", "\n", "# Initialize all final states with the rewards for picking that state", "\n", "for", "x", ",", "_", "in", "np", ".", "ndenumerate", "(", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "n_x", ")", ")", ":", "\n", "            ", "for", "y", ",", "_", "in", "np", ".", "ndenumerate", "(", "self", ".", "q_table", "[", "x", "]", ")", ":", "\n", "                ", "y_t", "=", "[", "-", "1", "if", "e", "==", "self", ".", "n_y", "else", "e", "for", "e", "in", "y", "[", "0", ":", "self", ".", "n_a", "]", "]", "\n", "if", "self", ".", "constraint", ".", "no_better_treatment_exist", "(", "y_t", ",", "x", ")", ":", "\n", "                    ", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "[", "x", ",", "y_t", ",", "-", "1", "]", ")", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "[", "x", ",", "y_t", ",", "-", "1", "]", ")", "]", "=", "-", "np", ".", "inf", "\n", "", "modified", "[", "self", ".", "to_index", "(", "(", "[", "x", ",", "y_t", ",", "-", "1", "]", ")", ")", "]", "=", "True", "\n", "\n", "", "", "for", "k", "in", "range", "(", "self", ".", "learning_time", ")", ":", "\n", "            ", "state", ",", "action", ",", "reward", ",", "next_state", "=", "history", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "history", ")", ")", "]", "\n", "\n", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "+", "(", "action", ",", ")", "]", "=", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "+", "(", "action", ",", ")", "]", "+", "self", ".", "learning_rate", "*", "(", "reward", "+", "self", ".", "discount_factor", "\n", "*", "max", "(", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "next_state", ")", "]", ")", "\n", "-", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "+", "(", "action", ",", ")", "]", ")", "\n", "modified", "[", "self", ".", "to_index", "(", "state", ")", "+", "(", "action", ",", ")", "]", "=", "True", "\n", "\n", "# Hack to make all unmodified cells a bad action", "\n", "", "self", ".", "q_table", "+=", "(", "modified", "-", "1", ")", "*", "self", ".", "n_a", "*", "self", ".", "n_y", "*", "10.0", "\n", "return", "self", ".", "q_table", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.OldAlgorithms.q_learning_with_constraint.QLearnerConstrained.evaluate": [[56, 101], ["np.array", "np.array", "y_fac.copy().astype", "np.append", "np.argmax", "print", "history.append", "np.array", "np.argwhere().flatten", "y_fac.copy", "len", "len", "np.argwhere", "print", "q_learning_with_constraint.QLearnerConstrained.to_index", "np.sum", "np.max", "tuple", "tuple", "tuple", "np.arange", "q_learning_with_constraint.QLearnerConstrained.to_index", "history_to_state", "q_learning_with_constraint.QLearnerConstrained.to_index"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.history_to_state", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index"], ["", "def", "evaluate", "(", "self", ",", "subject", ")", ":", "\n", "        ", "if", "self", ".", "q_table", "is", "None", ":", "\n", "            ", "print", "(", "\"Run learn first!\"", ")", "\n", "return", "\n", "", "z", ",", "x", ",", "y_fac", "=", "subject", "\n", "y", "=", "np", ".", "array", "(", "[", "-", "1", "]", "*", "self", ".", "n_a", ")", "\n", "history", "=", "[", "]", "\n", "state", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "\n", "mask_unknown_actions", "=", "y_fac", ".", "copy", "(", ")", ".", "astype", "(", "float", ")", "\n", "mask_unknown_actions", "[", "mask_unknown_actions", "!=", "-", "1", "]", "=", "0", "\n", "mask_unknown_actions", "[", "mask_unknown_actions", "==", "-", "1", "]", "=", "-", "np", ".", "inf", "\n", "mask_unknown_actions", "=", "np", ".", "append", "(", "mask_unknown_actions", ",", "0", ")", "\n", "\n", "action", "=", "np", ".", "argmax", "(", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "]", "+", "mask_unknown_actions", ")", "\n", "while", "action", "!=", "self", ".", "n_a", "and", "len", "(", "history", ")", "<", "self", ".", "n_a", ":", "\n", "            ", "y", "[", "action", "]", "=", "y_fac", "[", "action", "]", "\n", "history", ".", "append", "(", "[", "action", ",", "y", "[", "action", "]", "]", ")", "\n", "state", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "\n", "action_candidates", "=", "np", ".", "argwhere", "(", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "]", "==", "\n", "np", ".", "max", "(", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "]", "+", "mask_unknown_actions", ")", ")", ".", "flatten", "(", ")", "\n", "if", "len", "(", "action_candidates", ")", "==", "1", ":", "\n", "                ", "action", "=", "action_candidates", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "statistics", "is", "not", "None", ":", "\n", "                    ", "highest_expected_outcome", "=", "-", "1", "\n", "action", "=", "None", "\n", "for", "a", "in", "action_candidates", ":", "\n", "                        ", "index", "=", "tuple", "(", "x", ")", "+", "tuple", "(", "history_to_state", "(", "history", "[", ":", "-", "1", "]", ",", "self", ".", "n_a", ")", ")", "+", "tuple", "(", "[", "a", "]", ")", "\n", "expected_outcome", "=", "np", ".", "sum", "(", "self", ".", "statistics", "[", "index", "]", "*", "np", ".", "arange", "(", "0", ",", "self", ".", "n_y", ")", ")", "\n", "if", "expected_outcome", ">", "highest_expected_outcome", ":", "\n", "                            ", "highest_expected_outcome", "=", "expected_outcome", "\n", "action", "=", "a", "\n", "", "", "", "else", ":", "\n", "                    ", "print", "(", "\"Choosing action arbitrarily\"", ")", "\n", "for", "a", "in", "action_candidates", ":", "\n", "                        ", "try", ":", "\n", "                            ", "if", "y", "[", "a", "]", "==", "-", "1", ":", "\n", "                                ", "action", "=", "a", "\n", "break", "\n", "", "", "except", "IndexError", ":", "\n", "                            ", "action", "=", "self", ".", "stop_action", "\n", "break", "\n", "", "", "", "", "", "return", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.OldAlgorithms.q_learning_with_constraint.QLearnerConstrained.convert_to_sars": [[102, 125], ["enumerate", "np.array", "range", "len", "np.array.copy", "np.array", "np.array.copy.copy", "np.array", "all_sars.append"], "methods", ["None"], ["", "def", "convert_to_sars", "(", "self", ")", ":", "\n", "        ", "x", "=", "self", ".", "data", "[", "'x'", "]", "\n", "h", "=", "self", ".", "data", "[", "'h'", "]", "\n", "all_sars", "=", "[", "]", "\n", "for", "i", ",", "patient", "in", "enumerate", "(", "x", ")", ":", "\n", "            ", "actions", "=", "np", ".", "array", "(", "[", "-", "1", "]", "*", "self", ".", "n_a", ")", "\n", "for", "treatment", "in", "h", "[", "i", "]", ":", "\n", "                ", "action", ",", "outcome", "=", "treatment", "\n", "actions", "[", "action", "]", "=", "outcome", "\n", "\n", "", "for", "j", "in", "range", "(", "len", "(", "h", "[", "i", "]", ")", ")", ":", "\n", "                ", "temp_actions", "=", "actions", ".", "copy", "(", ")", "\n", "new_action", "=", "h", "[", "i", "]", "[", "j", "]", "[", "0", "]", "\n", "temp_actions", "[", "new_action", "]", "=", "-", "1", "\n", "s", "=", "np", ".", "array", "(", "[", "patient", ",", "temp_actions", "]", ")", "\n", "a", "=", "new_action", "\n", "r", "=", "self", ".", "step_reward", "\n", "new_actions", "=", "temp_actions", ".", "copy", "(", ")", "\n", "new_actions", "[", "new_action", "]", "=", "h", "[", "i", "]", "[", "j", "]", "[", "1", "]", "\n", "s_prime", "=", "np", ".", "array", "(", "[", "patient", ",", "new_actions", "]", ")", "\n", "sars", "=", "(", "s", ",", "a", ",", "r", ",", "s_prime", ")", "\n", "all_sars", ".", "append", "(", "sars", ")", "\n", "", "", "return", "all_sars", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.OldAlgorithms.q_learning.QLearner.__init__": [[7, 23], ["q_learning.QLearner.convert_to_sars"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.OldAlgorithms.q_learning.QLearner.convert_to_sars"], ["    ", "def", "__init__", "(", "self", ",", "n_x", ",", "n_a", ",", "n_y", ",", "data", ",", "reward", "=", "-", "0.1", ",", "learning_time", "=", "10000", ",", "learning_rate", "=", "0.01", ",", "discount_factor", "=", "1", ")", ":", "\n", "        ", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_y", "=", "n_y", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "max_possible_outcome", "=", "self", ".", "n_y", "-", "1", "\n", "self", ".", "stop_action", "=", "self", ".", "n_a", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "step_reward", "=", "reward", "\n", "self", ".", "learning_time", "=", "learning_time", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "discount_factor", "=", "discount_factor", "\n", "self", ".", "q_table", "=", "None", "\n", "self", ".", "name", "=", "'Q-learning'", "\n", "self", ".", "label", "=", "'QL'", "\n", "self", ".", "statistics", "=", "None", "\n", "self", ".", "sars_data", "=", "self", ".", "convert_to_sars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.OldAlgorithms.q_learning.QLearner.to_index": [[24, 26], ["tuple", "np.hstack"], "methods", ["None"], ["", "def", "to_index", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "tuple", "(", "np", ".", "hstack", "(", "state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.OldAlgorithms.q_learning.QLearner.learn": [[27, 55], ["np.zeros", "q_learning.QLearner.q_table.copy", "np.ndenumerate", "range", "np.zeros", "np.ndenumerate", "max", "np.random.randint", "q_learning.QLearner.to_index", "q_learning.QLearner.to_index", "len", "q_learning.QLearner.to_index", "q_learning.QLearner.to_index", "q_learning.QLearner.to_index", "q_learning.QLearner.to_index", "q_learning.QLearner.to_index", "max", "q_learning.QLearner.to_index", "q_learning.QLearner.to_index"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index"], ["", "def", "learn", "(", "self", ")", ":", "\n", "# Q-table indexed with x, y_0, y_1, y_2, y_3 and a", "\n", "        ", "self", ".", "q_table", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "n_x", "+", "(", "self", ".", "n_y", "+", "1", ",", ")", "*", "self", ".", "n_a", "+", "(", "self", ".", "n_a", "+", "1", ",", ")", ")", "\n", "modified", "=", "self", ".", "q_table", ".", "copy", "(", ")", "\n", "history", "=", "self", ".", "sars_data", "\n", "\n", "# Initialize all final states with the rewards for picking that state", "\n", "for", "x", ",", "_", "in", "np", ".", "ndenumerate", "(", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "n_x", ")", ")", ":", "\n", "            ", "for", "y", ",", "_", "in", "np", ".", "ndenumerate", "(", "self", ".", "q_table", "[", "x", "]", ")", ":", "\n", "                ", "y_t", "=", "[", "-", "1", "if", "e", "==", "self", ".", "n_y", "else", "e", "for", "e", "in", "y", "[", "0", ":", "self", ".", "n_a", "]", "]", "\n", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "[", "x", ",", "y_t", ",", "-", "1", "]", ")", "]", "=", "max", "(", "y_t", ")", "\n", "if", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "[", "x", ",", "y_t", ",", "-", "1", "]", ")", "]", "<", "1", ":", "\n", "                    ", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "[", "x", ",", "y_t", ",", "-", "1", "]", ")", "]", "=", "-", "np", ".", "infty", "\n", "", "modified", "[", "self", ".", "to_index", "(", "(", "[", "x", ",", "y_t", ",", "-", "1", "]", ")", ")", "]", "=", "True", "\n", "\n", "", "", "for", "k", "in", "range", "(", "self", ".", "learning_time", ")", ":", "\n", "            ", "state", ",", "action", ",", "reward", ",", "next_state", "=", "history", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "history", ")", ")", "]", "\n", "\n", "\n", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "+", "(", "action", ",", ")", "]", "=", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "+", "(", "action", ",", ")", "]", "+", "self", ".", "learning_rate", "*", "(", "reward", "+", "self", ".", "discount_factor", "\n", "*", "max", "(", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "next_state", ")", "]", ")", "\n", "-", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "+", "(", "action", ",", ")", "]", ")", "\n", "modified", "[", "self", ".", "to_index", "(", "state", ")", "+", "(", "action", ",", ")", "]", "=", "True", "\n", "\n", "# Hack to make all unmodified cells a bad action", "\n", "", "self", ".", "q_table", "+=", "(", "modified", "-", "1", ")", "*", "self", ".", "n_a", "*", "self", ".", "n_y", "*", "10.0", "\n", "return", "self", ".", "q_table", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.OldAlgorithms.q_learning.QLearner.evaluate": [[56, 89], ["np.array", "np.array", "y_fac.copy().astype", "np.append", "np.argmax", "print", "history.append", "np.array", "np.argwhere().flatten", "enumerate", "np.delete", "y_fac.copy", "len", "len", "print", "np.random.choice", "np.argwhere", "to_remove.append", "q_learning.QLearner.to_index", "np.max", "q_learning.QLearner.to_index", "q_learning.QLearner.to_index"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index"], ["", "def", "evaluate", "(", "self", ",", "subject", ")", ":", "\n", "        ", "if", "self", ".", "q_table", "is", "None", ":", "\n", "            ", "print", "(", "\"Run learn first!\"", ")", "\n", "return", "\n", "", "z", ",", "x", ",", "y_fac", "=", "subject", "\n", "y", "=", "np", ".", "array", "(", "[", "-", "1", "]", "*", "self", ".", "n_a", ")", "\n", "history", "=", "[", "]", "\n", "state", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "mask_unknown_actions", "=", "y_fac", ".", "copy", "(", ")", ".", "astype", "(", "float", ")", "\n", "mask_unknown_actions", "[", "mask_unknown_actions", "!=", "-", "1", "]", "=", "0", "\n", "mask_unknown_actions", "[", "mask_unknown_actions", "==", "-", "1", "]", "=", "-", "np", ".", "inf", "\n", "mask_unknown_actions", "=", "np", ".", "append", "(", "mask_unknown_actions", ",", "0", ")", "\n", "action", "=", "np", ".", "argmax", "(", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "]", "+", "mask_unknown_actions", ")", "\n", "\n", "while", "action", "!=", "self", ".", "n_a", "and", "len", "(", "history", ")", "<", "self", ".", "n_a", ":", "\n", "            ", "y", "[", "action", "]", "=", "y_fac", "[", "action", "]", "\n", "history", ".", "append", "(", "[", "action", ",", "y", "[", "action", "]", "]", ")", "\n", "state", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "\n", "action_candidates", "=", "np", ".", "argwhere", "(", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "]", "==", "\n", "np", ".", "max", "(", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "]", "+", "mask_unknown_actions", ")", ")", ".", "flatten", "(", ")", "\n", "\n", "to_remove", "=", "[", "]", "\n", "for", "i", ",", "a", "in", "enumerate", "(", "action_candidates", ")", ":", "\n", "                ", "if", "a", "!=", "self", ".", "stop_action", "and", "y", "[", "a", "]", "!=", "-", "1", ":", "\n", "                    ", "to_remove", ".", "append", "(", "i", ")", "\n", "", "", "action_candidates", "=", "np", ".", "delete", "(", "action_candidates", ",", "to_remove", ")", "\n", "if", "len", "(", "action_candidates", ")", "==", "1", ":", "\n", "                ", "action", "=", "action_candidates", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Choosing action arbitrarily\"", ")", "\n", "action", "=", "np", ".", "random", ".", "choice", "(", "action_candidates", ")", "\n", "", "", "return", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.OldAlgorithms.q_learning.QLearner.convert_to_sars": [[90, 113], ["enumerate", "np.array", "range", "len", "np.array.copy", "np.array", "np.array.copy.copy", "np.array", "all_sars.append"], "methods", ["None"], ["", "def", "convert_to_sars", "(", "self", ")", ":", "\n", "        ", "x", "=", "self", ".", "data", "[", "'x'", "]", "\n", "h", "=", "self", ".", "data", "[", "'h'", "]", "\n", "all_sars", "=", "[", "]", "\n", "for", "i", ",", "patient", "in", "enumerate", "(", "x", ")", ":", "\n", "            ", "actions", "=", "np", ".", "array", "(", "[", "-", "1", "]", "*", "self", ".", "n_a", ")", "\n", "for", "treatment", "in", "h", "[", "i", "]", ":", "\n", "                ", "action", ",", "outcome", "=", "treatment", "\n", "actions", "[", "action", "]", "=", "outcome", "\n", "\n", "", "for", "j", "in", "range", "(", "len", "(", "h", "[", "i", "]", ")", ")", ":", "\n", "                ", "temp_actions", "=", "actions", ".", "copy", "(", ")", "\n", "new_action", "=", "h", "[", "i", "]", "[", "j", "]", "[", "0", "]", "\n", "temp_actions", "[", "new_action", "]", "=", "-", "1", "\n", "s", "=", "np", ".", "array", "(", "[", "patient", ",", "temp_actions", "]", ")", "\n", "a", "=", "new_action", "\n", "r", "=", "self", ".", "step_reward", "\n", "new_actions", "=", "temp_actions", ".", "copy", "(", ")", "\n", "new_actions", "[", "new_action", "]", "=", "h", "[", "i", "]", "[", "j", "]", "[", "1", "]", "\n", "s_prime", "=", "np", ".", "array", "(", "[", "patient", ",", "new_actions", "]", ")", "\n", "sars", "=", "(", "s", ",", "a", ",", "r", ",", "s_prime", ")", "\n", "all_sars", ".", "append", "(", "sars", ")", "\n", "", "", "return", "all_sars", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.__init__": [[5, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_x", ",", "n_a", ",", "n_y", ",", "distribution", ",", "constraint", ",", "reward", "=", "-", "1", ",", "learning_time", "=", "10000", ",", "learning_rate", "=", "0.1", ",", "discount_factor", "=", "1", ")", ":", "\n", "        ", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_y", "=", "n_y", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "stop_action", "=", "self", ".", "n_a", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "step_reward", "=", "reward", "\n", "self", ".", "constraint", "=", "constraint", "\n", "self", ".", "name", "=", "\"Online Q-learning\"", "\n", "self", ".", "label", "=", "\"OQL\"", "\n", "self", ".", "learning_time", "=", "learning_time", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "discount_factor", "=", "discount_factor", "\n", "self", ".", "q_table", "=", "None", "\n", "self", ".", "q_table2", "=", "None", "\n", "\n", "# Online stuff", "\n", "self", ".", "epsilon", "=", "0.99", "\n", "self", ".", "max_epsilon", "=", "self", ".", "epsilon", "\n", "self", ".", "min_epsilon", "=", "0.03", "\n", "self", ".", "current_patient", "=", "{", "'z'", ":", "None", ",", "'x'", ":", "None", ",", "'h'", ":", "[", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.to_index": [[28, 30], ["tuple", "np.hstack"], "methods", ["None"], ["", "def", "to_index", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "tuple", "(", "np", ".", "hstack", "(", "state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.learn": [[31, 66], ["np.zeros", "np.zeros", "range", "online_q_learning.OnlineQLearner.get_new_sample", "max", "online_q_learning.OnlineQLearner.select_action", "online_q_learning.OnlineQLearner.observe", "print", "np.random.random", "online_q_learning.OnlineQLearner.choose_best_action", "online_q_learning.OnlineQLearner.to_index", "online_q_learning.OnlineQLearner.to_index", "online_q_learning.OnlineQLearner.to_index", "online_q_learning.OnlineQLearner.to_index", "online_q_learning.OnlineQLearner.to_index", "online_q_learning.OnlineQLearner.to_index", "online_q_learning.OnlineQLearner.to_index"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.get_new_sample", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.select_action", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.observe", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.choose_best_action", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index"], ["", "def", "learn", "(", "self", ")", ":", "\n", "# Q-table indexed with x, y_0, y_1, y_2, y_3 and a", "\n", "        ", "self", ".", "q_table", "=", "np", ".", "zeros", "(", "(", "(", "2", ",", ")", "*", "self", ".", "n_x", "+", "(", "self", ".", "n_y", "+", "1", ",", ")", "*", "self", ".", "n_a", "+", "(", "self", ".", "n_a", "+", "1", ",", ")", ")", ")", "\n", "self", ".", "q_table2", "=", "np", ".", "zeros", "(", "(", "(", "2", ",", ")", "*", "self", ".", "n_x", "+", "(", "self", ".", "n_y", "+", "1", ",", ")", "*", "self", ".", "n_a", "+", "(", "self", ".", "n_a", "+", "1", ",", ")", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "learning_time", ")", ":", "\n", "            ", "state", "=", "self", ".", "get_new_sample", "(", ")", "\n", "done", "=", "False", "\n", "while", "not", "done", ":", "\n", "                ", "action", "=", "self", ".", "select_action", "(", "state", ")", "\n", "reward", ",", "next_state", "=", "self", ".", "observe", "(", "state", ",", "action", ")", "\n", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                    ", "t1", "=", "self", ".", "q_table", "\n", "t2", "=", "self", ".", "q_table2", "\n", "", "else", ":", "\n", "                    ", "t2", "=", "self", ".", "q_table", "\n", "t1", "=", "self", ".", "q_table2", "\n", "", "if", "action", "==", "self", ".", "stop_action", "or", "state", "[", "1", "]", "[", "action", "]", "!=", "-", "1", ":", "\n", "                    ", "done", "=", "True", "\n", "t1", "[", "self", ".", "to_index", "(", "state", ")", "+", "(", "action", ",", ")", "]", "=", "t1", "[", "self", ".", "to_index", "(", "state", ")", "+", "(", "action", ",", ")", "]", "+", "self", ".", "learning_rate", "*", "reward", "\n", "", "else", ":", "\n", "                    ", "max_action", "=", "self", ".", "choose_best_action", "(", "t1", ",", "next_state", ")", "\n", "if", "t2", "[", "self", ".", "to_index", "(", "next_state", ")", "+", "(", "max_action", ",", ")", "]", "!=", "-", "np", ".", "inf", ":", "\n", "                        ", "t1", "[", "self", ".", "to_index", "(", "state", ")", "+", "(", "action", ",", ")", "]", "=", "t1", "[", "self", ".", "to_index", "(", "state", ")", "+", "(", "action", ",", ")", "]", "+", "self", ".", "learning_rate", "*", "(", "reward", "+", "self", ".", "discount_factor", "\n", "*", "t2", "[", "self", ".", "to_index", "(", "next_state", ")", "+", "(", "max_action", ",", ")", "]", "\n", "-", "t1", "[", "self", ".", "to_index", "(", "state", ")", "+", "(", "action", ",", ")", "]", ")", "\n", "", "state", "=", "next_state", "\n", "\n", "", "", "self", ".", "epsilon", "=", "max", "(", "self", ".", "min_epsilon", ",", "self", ".", "epsilon", "-", "self", ".", "max_epsilon", "/", "self", ".", "learning_time", ")", "\n", "if", "k", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "\"Episode {}\"", ".", "format", "(", "k", ")", ")", "\n", "", "", "return", "self", ".", "q_table", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.observe": [[67, 83], ["np.array", "online_q_learning.OnlineQLearner.constraint.no_better_treatment_exist", "state[].copy", "online_q_learning.OnlineQLearner.distribution.draw_y", "online_q_learning.OnlineQLearner.current_patient[].append"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.better_treatment_constraint.Constraint.no_better_treatment_exist", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2SlightlyRandom.draw_y"], ["", "def", "observe", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "next_state", "=", "np", ".", "array", "(", "(", "state", "[", "0", "]", ",", "state", "[", "1", "]", ".", "copy", "(", ")", ")", ")", "\n", "if", "action", "==", "self", ".", "stop_action", ":", "\n", "            ", "if", "self", ".", "constraint", ".", "no_better_treatment_exist", "(", "state", "[", "1", "]", ",", "state", "[", "0", "]", ")", ":", "\n", "                ", "reward", "=", "0", "\n", "", "else", ":", "\n", "                ", "reward", "=", "-", "np", ".", "inf", "\n", "", "", "elif", "not", "state", "[", "1", "]", "[", "action", "]", "==", "-", "1", ":", "\n", "            ", "reward", "=", "-", "np", ".", "inf", "\n", "", "else", ":", "\n", "            ", "y", ",", "done", "=", "self", ".", "distribution", ".", "draw_y", "(", "action", ",", "self", ".", "current_patient", "[", "'h'", "]", ",", "self", ".", "current_patient", "[", "'x'", "]", ",", "\n", "self", ".", "current_patient", "[", "'z'", "]", ")", "\n", "self", ".", "current_patient", "[", "'h'", "]", ".", "append", "(", "[", "action", ",", "y", "]", ")", "\n", "next_state", "[", "1", "]", "[", "action", "]", "=", "y", "\n", "reward", "=", "self", ".", "step_reward", "\n", "", "return", "reward", ",", "next_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.select_action": [[84, 93], ["np.argwhere().flatten", "len", "np.random.random", "np.random.choice", "online_q_learning.OnlineQLearner.choose_best_action", "np.argwhere", "online_q_learning.OnlineQLearner.to_index"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.choose_best_action", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index"], ["", "def", "select_action", "(", "self", ",", "state", ")", ":", "\n", "        ", "possible_actions", "=", "np", ".", "argwhere", "(", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "]", "!=", "-", "np", ".", "inf", ")", ".", "flatten", "(", ")", "\n", "if", "len", "(", "possible_actions", ")", "==", "0", ":", "\n", "            ", "return", "self", ".", "stop_action", "\n", "", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "epsilon", ":", "\n", "            ", "a", "=", "np", ".", "random", ".", "choice", "(", "possible_actions", ")", "\n", "", "else", ":", "\n", "            ", "a", "=", "self", ".", "choose_best_action", "(", "None", ",", "state", ")", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.choose_best_action": [[94, 108], ["np.argwhere().flatten", "np.append", "np.argwhere().flatten", "np.random.choice", "np.max", "np.argwhere", "np.argwhere", "online_q_learning.OnlineQLearner.to_index", "np.max", "online_q_learning.OnlineQLearner.to_index", "online_q_learning.OnlineQLearner.to_index"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index"], ["", "def", "choose_best_action", "(", "self", ",", "table", ",", "state", ")", ":", "\n", "        ", "if", "np", ".", "max", "(", "state", "[", "1", "]", ")", ">=", "self", ".", "n_y", "-", "1", ":", "\n", "            ", "return", "self", ".", "stop_action", "\n", "", "available_actions", "=", "np", ".", "argwhere", "(", "state", "[", "1", "]", "==", "-", "1", ")", ".", "flatten", "(", ")", "\n", "available_actions", "=", "np", ".", "append", "(", "available_actions", ",", "self", ".", "n_a", ")", "# Add stop action to available", "\n", "if", "table", "is", "None", ":", "\n", "            ", "available_values", "=", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "]", "[", "available_actions", "]", "+", "self", ".", "q_table2", "[", "self", ".", "to_index", "(", "state", ")", "]", "[", "available_actions", "]", "\n", "", "else", ":", "\n", "            ", "available_values", "=", "table", "[", "self", ".", "to_index", "(", "state", ")", "]", "[", "available_actions", "]", "\n", "\n", "", "action_indexes", "=", "np", ".", "argwhere", "(", "available_values", "==", "np", ".", "max", "(", "available_values", ")", ")", ".", "flatten", "(", ")", "\n", "chosen_action_index", "=", "np", ".", "random", ".", "choice", "(", "action_indexes", ")", "\n", "action", "=", "available_actions", "[", "chosen_action_index", "]", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.argmax_possible": [[109, 118], ["min", "np.argmin", "range", "len"], "methods", ["None"], ["", "def", "argmax_possible", "(", "self", ",", "values", ",", "possible_actions", ")", ":", "\n", "        ", "c_max", "=", "min", "(", "values", ")", "\n", "action", "=", "np", ".", "argmin", "(", "values", ")", "\n", "for", "v", "in", "range", "(", "len", "(", "values", ")", ")", ":", "\n", "            ", "if", "v", "in", "possible_actions", ":", "\n", "                ", "if", "values", "[", "v", "]", ">=", "c_max", ":", "\n", "                    ", "c_max", "=", "values", "[", "v", "]", "\n", "action", "=", "v", "\n", "", "", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.get_new_sample": [[119, 125], ["online_q_learning.OnlineQLearner.distribution.draw_z", "online_q_learning.OnlineQLearner.distribution.draw_x", "np.array", "np.array"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.SimulatedAntibiotics.draw_z", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.SimulatedAntibiotics.draw_x"], ["", "def", "get_new_sample", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_patient", "[", "'z'", "]", "=", "self", ".", "distribution", ".", "draw_z", "(", ")", "\n", "self", ".", "current_patient", "[", "'x'", "]", "=", "self", ".", "distribution", ".", "draw_x", "(", "self", ".", "current_patient", "[", "'z'", "]", ")", "\n", "self", ".", "current_patient", "[", "'h'", "]", "=", "[", "]", "\n", "\n", "return", "np", ".", "array", "(", "[", "self", ".", "current_patient", "[", "'x'", "]", ",", "np", ".", "array", "(", "[", "-", "1", "]", "*", "self", ".", "n_a", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.evaluate": [[126, 141], ["np.array", "np.array", "online_q_learning.OnlineQLearner.choose_best_action", "print", "history.append", "np.array", "online_q_learning.OnlineQLearner.choose_best_action", "len"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.choose_best_action", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.online_q_learning.OnlineQLearner.choose_best_action"], ["", "def", "evaluate", "(", "self", ",", "subject", ")", ":", "\n", "        ", "if", "self", ".", "q_table", "is", "None", ":", "\n", "            ", "print", "(", "\"Run learn first!\"", ")", "\n", "return", "\n", "", "z", ",", "x", ",", "y_fac", "=", "subject", "\n", "y", "=", "np", ".", "array", "(", "[", "-", "1", "]", "*", "self", ".", "n_a", ")", "\n", "history", "=", "[", "]", "\n", "state", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "action", "=", "self", ".", "choose_best_action", "(", "None", ",", "state", ")", "\n", "while", "action", "!=", "self", ".", "n_a", "and", "len", "(", "history", ")", "<", "self", ".", "n_a", ":", "\n", "            ", "y", "[", "action", "]", "=", "y_fac", "[", "action", "]", "\n", "history", ".", "append", "(", "[", "action", ",", "y", "[", "action", "]", "]", ")", "\n", "state", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "action", "=", "self", ".", "choose_best_action", "(", "None", ",", "state", ")", "\n", "", "return", "history", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.doctor.Doctor.__init__": [[4, 10], ["list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "'Doctor'", "\n", "self", ".", "label", "=", "'Doctor'", "\n", "if", "data", "is", "not", "None", ":", "\n", "            ", "self", ".", "evaluations", "=", "list", "(", "data", "[", "'h'", "]", ")", "\n", "", "self", ".", "patientindex", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.doctor.Doctor.learn": [[11, 13], ["None"], "methods", ["None"], ["", "def", "learn", "(", "self", ")", ":", "\n", "        ", "self", ".", "patientindex", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.doctor.Doctor.evaluate": [[14, 18], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "patient", ")", ":", "\n", "        ", "eval", "=", "self", ".", "evaluations", "[", "self", ".", "patientindex", "]", "\n", "self", ".", "patientindex", "+=", "1", "\n", "return", "eval", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.doctor.Doctor.set_data": [[19, 21], ["list"], "methods", ["None"], ["", "def", "set_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "evaluations", "=", "list", "(", "data", "[", "'h'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.greedy.Greedy.__init__": [[6, 12], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_x", ",", "n_a", ",", "n_y", ")", ":", "\n", "        ", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "n_y", "=", "n_y", "\n", "self", ".", "size", "=", "(", "n_a", "+", "1", ",", "n_y", ",", "n_a", "+", "1", ",", "n_y", ",", "n_a", ")", "\n", "self", ".", "probabilities", "=", "np", ".", "zeros", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.greedy.Greedy.find_probabilities": [[13, 29], ["numpy.zeros", "numpy.zeros", "numpy.divide", "history.pop", "greedy.Greedy._find_index_in_history"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.greedy.Greedy._find_index_in_history"], ["", "def", "find_probabilities", "(", "self", ",", "data", ")", ":", "\n", "        ", "h", "=", "data", "[", "'h'", "]", "\n", "treatments_effective", "=", "np", ".", "zeros", "(", "self", ".", "size", ")", "\n", "treatments_total", "=", "np", ".", "zeros", "(", "self", ".", "size", ")", "\n", "\n", "for", "history", "in", "h", ":", "\n", "            ", "intervention", "=", "history", ".", "pop", "(", "-", "1", ")", "\n", "action", ",", "effectiveness", "=", "intervention", "\n", "index", "=", "self", ".", "_find_index_in_history", "(", "history", ",", "action", ")", "\n", "treatments_effective", "[", "index", "]", "+=", "effectiveness", "\n", "treatments_total", "[", "index", "]", "+=", "self", ".", "n_x", "\n", "\n", "", "no_history_found", "=", "(", "treatments_total", "==", "0", ")", ".", "astype", "(", "int", ")", "\n", "treatments_total", "+=", "no_history_found", "# to avoid division by zero", "\n", "\n", "self", ".", "probabilities", "=", "np", ".", "divide", "(", "treatments_effective", ",", "treatments_total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.greedy.Greedy._find_index_in_history": [[30, 37], ["enumerate", "tuple"], "methods", ["None"], ["", "def", "_find_index_in_history", "(", "self", ",", "history", ",", "action", ")", ":", "\n", "        ", "index", "=", "[", "-", "1", "]", "*", "(", "2", "*", "self", ".", "n_a", "-", "1", ")", "\n", "for", "i", ",", "h", "in", "enumerate", "(", "history", ")", ":", "\n", "            ", "index", "[", "2", "*", "i", "]", "=", "h", "[", "0", "]", "\n", "index", "[", "2", "*", "i", "+", "1", "]", "=", "h", "[", "1", "]", "\n", "", "index", "[", "-", "1", "]", "=", "action", "\n", "return", "tuple", "(", "index", ")", "\n", "# First index is first treatment, second index is outcome of first treatment", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_greedy.ConstrainedGreedy.__init__": [[6, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_x", ",", "n_a", ",", "n_y", ",", "data", ",", "constraint", ",", "approximator", ",", "name", "=", "'Constrained Greedy'", ",", "label", "=", "\"CG\"", ")", ":", "\n", "        ", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "n_y", "=", "n_y", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "constraint", "=", "constraint", "\n", "self", ".", "approximator", "=", "approximator", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_greedy.ConstrainedGreedy.learn": [[16, 18], ["None"], "methods", ["None"], ["", "def", "learn", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_greedy.ConstrainedGreedy.evaluate": [[19, 47], ["numpy.array", "numpy.array", "constrained_greedy.ConstrainedGreedy.approximator.calculate_probability_greedy", "history_to_state", "enumerate", "constrained_greedy.get_mask", "numpy.argmax", "int", "history.append", "constrained_greedy.ConstrainedGreedy.constraint.no_better_treatment_exist", "numpy.max", "history_to_state"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.calculate_probability_greedy", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.history_to_state", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.naive_greedy.get_mask", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.better_treatment_constraint.Constraint.no_better_treatment_exist", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.history_to_state"], ["", "def", "evaluate", "(", "self", ",", "patient", ")", ":", "\n", "        ", "best_outcome", "=", "0", "\n", "x", "=", "patient", "[", "1", "]", "\n", "y_fac", "=", "patient", "[", "2", "]", "\n", "y", "=", "np", ".", "array", "(", "[", "-", "1", "]", "*", "self", ".", "n_a", ")", "\n", "stop", "=", "False", "\n", "history", "=", "[", "]", "\n", "while", "not", "stop", ":", "\n", "            ", "state", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "ev_vec", "=", "self", ".", "approximator", ".", "calculate_probability_greedy", "(", "state", ",", "best_outcome", ")", "\n", "hstate", "=", "history_to_state", "(", "history", ",", "self", ".", "n_a", ")", "\n", "for", "i", ",", "hs", "in", "enumerate", "(", "hstate", ")", ":", "\n", "                ", "if", "hs", "!=", "-", "1", ":", "\n", "                    ", "ev_vec", "[", "i", "]", "=", "-", "np", ".", "inf", "\n", "", "", "mask_unknown_actions", "=", "get_mask", "(", "y_fac", ")", "\n", "decision_probabilities", "=", "ev_vec", "+", "mask_unknown_actions", "\n", "new_treatment", "=", "np", ".", "argmax", "(", "decision_probabilities", ")", "\n", "if", "np", ".", "max", "(", "decision_probabilities", ")", "==", "-", "np", ".", "inf", ":", "\n", "                ", "break", "\n", "", "outcome", "=", "int", "(", "y_fac", "[", "new_treatment", "]", ")", "\n", "if", "outcome", ">", "best_outcome", ":", "\n", "                ", "best_outcome", "=", "outcome", "\n", "", "y", "[", "new_treatment", "]", "=", "outcome", "\n", "history", ".", "append", "(", "[", "new_treatment", ",", "outcome", "]", ")", "\n", "no_better_treatment_exist", "=", "self", ".", "constraint", ".", "no_better_treatment_exist", "(", "history_to_state", "(", "history", ",", "self", ".", "n_a", ")", ",", "x", ")", "\n", "if", "no_better_treatment_exist", "==", "1", ":", "\n", "                ", "stop", "=", "True", "\n", "", "", "return", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_greedy.ConstrainedGreedy.set_constraint": [[48, 50], ["None"], "methods", ["None"], ["", "def", "set_constraint", "(", "self", ",", "constraint", ")", ":", "\n", "        ", "self", ".", "constraint", "=", "constraint", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_greedy.get_mask": [[52, 57], ["y_fac.copy().astype", "y_fac.copy"], "function", ["None"], ["", "", "def", "get_mask", "(", "y_fac", ")", ":", "\n", "    ", "mask_unknown_actions", "=", "y_fac", ".", "copy", "(", ")", ".", "astype", "(", "float", ")", "\n", "mask_unknown_actions", "[", "mask_unknown_actions", "!=", "-", "1", "]", "=", "0", "\n", "mask_unknown_actions", "[", "mask_unknown_actions", "==", "-", "1", "]", "=", "-", "np", ".", "inf", "\n", "return", "mask_unknown_actions", "\n", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.naive_greedy.NaiveGreedy.__init__": [[5, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_x", ",", "n_a", ",", "n_y", ",", "approximator", ",", "max_steps", ",", "name", "=", "'Naive Greedy'", ",", "label", "=", "'NG'", ")", ":", "\n", "        ", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "n_y", "=", "n_y", "\n", "self", ".", "max_outcome", "=", "self", ".", "n_y", "-", "1", "\n", "self", ".", "approximator", "=", "approximator", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.naive_greedy.NaiveGreedy.learn": [[16, 18], ["None"], "methods", ["None"], ["", "def", "learn", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.naive_greedy.NaiveGreedy.evaluate": [[19, 39], ["numpy.array", "numpy.argwhere().flatten", "naive_greedy.get_mask", "numpy.array", "numpy.argmax", "h.append", "len", "naive_greedy.NaiveGreedy.approximator.calculate_probability", "numpy.max", "numpy.argwhere"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.naive_greedy.get_mask", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.calculate_probability"], ["", "def", "evaluate", "(", "self", ",", "patient", ")", ":", "\n", "        ", "z", ",", "x", ",", "y_fac", "=", "patient", "\n", "h", "=", "[", "]", "\n", "y", "=", "np", ".", "array", "(", "(", "-", "1", ",", ")", "*", "self", ".", "n_a", ")", "\n", "best_outcome", "=", "0", "\n", "while", "best_outcome", "<", "self", ".", "max_outcome", "and", "len", "(", "h", ")", "<", "self", ".", "max_steps", ":", "\n", "            ", "available_actions", "=", "np", ".", "argwhere", "(", "y", "==", "-", "1", ")", ".", "flatten", "(", ")", "\n", "mask_unknown_actions", "=", "get_mask", "(", "y_fac", ")", "\n", "base_probabilities", "=", "np", ".", "array", "(", "(", "-", "np", ".", "inf", ",", ")", "*", "self", ".", "n_a", ")", "\n", "for", "a", "in", "available_actions", ":", "\n", "                ", "base_probabilities", "[", "a", "]", "=", "self", ".", "approximator", ".", "calculate_probability", "(", "x", ",", "y", ",", "a", ",", "self", ".", "max_outcome", ")", "\n", "", "base_probabilities", "+=", "mask_unknown_actions", "\n", "if", "np", ".", "max", "(", "base_probabilities", ")", "==", "-", "np", ".", "inf", ":", "\n", "                ", "break", "\n", "", "a", "=", "np", ".", "argmax", "(", "base_probabilities", ")", "\n", "y", "[", "a", "]", "=", "y_fac", "[", "a", "]", "\n", "h", ".", "append", "(", "[", "a", ",", "y_fac", "[", "a", "]", "]", ")", "\n", "if", "y_fac", "[", "a", "]", ">", "best_outcome", ":", "\n", "                ", "best_outcome", "=", "y_fac", "[", "a", "]", "\n", "", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.naive_greedy.get_mask": [[41, 46], ["y_fac.copy().astype", "y_fac.copy"], "function", ["None"], ["", "", "def", "get_mask", "(", "y_fac", ")", ":", "\n", "    ", "mask_unknown_actions", "=", "y_fac", ".", "copy", "(", ")", ".", "astype", "(", "float", ")", "\n", "mask_unknown_actions", "[", "mask_unknown_actions", "!=", "-", "1", "]", "=", "0", "\n", "mask_unknown_actions", "[", "mask_unknown_actions", "==", "-", "1", "]", "=", "-", "np", ".", "inf", "\n", "return", "mask_unknown_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.naive_dynamic_programming.NaiveDynamicProgramming.__init__": [[7, 16], ["OldAlgorithms.q_learning.QLearner.__init__", "numpy.zeros", "naive_dynamic_programming.NaiveDynamicProgramming.q_table.copy().astype", "naive_dynamic_programming.NaiveDynamicProgramming.q_table.copy"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_x", ",", "n_a", ",", "n_y", ",", "data", ",", "approximator", ",", "reward", "=", "-", "0.25", ",", "name", "=", "'Naive Dynamic Programming'", ",", "label", "=", "'NDP'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_x", ",", "n_a", ",", "n_y", ",", "data", ")", "\n", "self", ".", "table_size", "=", "(", "2", ",", ")", "*", "self", ".", "n_x", "+", "(", "self", ".", "n_y", "+", "1", ",", ")", "*", "self", ".", "n_a", "+", "(", "self", ".", "n_a", "+", "1", ",", ")", "\n", "self", ".", "q_table", "=", "np", ".", "zeros", "(", "self", ".", "table_size", ")", "\n", "self", ".", "q_table_done", "=", "self", ".", "q_table", ".", "copy", "(", ")", ".", "astype", "(", "bool", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "approximator", "=", "approximator", "\n", "self", ".", "reward", "=", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.naive_dynamic_programming.NaiveDynamicProgramming.learn": [[17, 26], ["naive_dynamic_programming.NaiveDynamicProgramming.reset", "list", "list", "itertools.product", "itertools.product", "range", "range", "range", "naive_dynamic_programming.NaiveDynamicProgramming.populate_q_value", "naive_dynamic_programming.NaiveDynamicProgramming.to_index"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming.reset", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming.populate_q_value", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index"], ["", "def", "learn", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "possible_x", "=", "list", "(", "itertools", ".", "product", "(", "range", "(", "0", ",", "2", ")", ",", "repeat", "=", "self", ".", "n_x", ")", ")", "\n", "possible_histories", "=", "list", "(", "itertools", ".", "product", "(", "range", "(", "-", "1", ",", "self", ".", "n_y", ")", ",", "repeat", "=", "self", ".", "n_a", ")", ")", "\n", "for", "x", "in", "possible_x", ":", "\n", "            ", "for", "history", "in", "possible_histories", ":", "\n", "                ", "for", "action", "in", "range", "(", "self", ".", "n_a", "+", "1", ")", ":", "\n", "                    ", "if", "not", "self", ".", "q_table_done", "[", "self", ".", "to_index", "(", "[", "x", ",", "history", ",", "action", "]", ")", "]", ":", "\n", "                        ", "self", ".", "populate_q_value", "(", "history", ",", "action", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.naive_dynamic_programming.NaiveDynamicProgramming.populate_q_value": [[27, 54], ["naive_dynamic_programming.NaiveDynamicProgramming.to_index", "naive_dynamic_programming.NaiveDynamicProgramming.get_reward", "naive_dynamic_programming.NaiveDynamicProgramming.get_reward", "range", "naive_dynamic_programming.NaiveDynamicProgramming.approximator.calculate_probability", "numpy.add", "list", "range", "numpy.max", "numpy.multiply", "naive_dynamic_programming.NaiveDynamicProgramming.populate_q_value", "tuple", "naive_dynamic_programming.NaiveDynamicProgramming.to_index", "naive_dynamic_programming.NaiveDynamicProgramming.to_index"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.get_reward", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.get_reward", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.calculate_probability", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Memory.add", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming.populate_q_value", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index"], ["", "", "", "", "", "def", "populate_q_value", "(", "self", ",", "history", ",", "action", ",", "x", ")", ":", "\n", "        ", "index", "=", "self", ".", "to_index", "(", "[", "x", ",", "history", "]", ")", "+", "(", "action", ",", ")", "\n", "future_reward", "=", "0", "\n", "# if action is stop action, calculate the reward", "\n", "if", "action", "==", "self", ".", "stop_action", ":", "\n", "            ", "reward", "=", "self", ".", "get_reward", "(", "self", ".", "stop_action", ",", "history", ")", "\n", "# if action is already used, set reward to -inf", "\n", "", "elif", "history", "[", "action", "]", "!=", "-", "1", ":", "\n", "            ", "reward", "=", "-", "np", ".", "inf", "\n", "# else, calculate the sum of the reward for each outcome times its probability", "\n", "", "else", ":", "\n", "            ", "reward", "=", "self", ".", "get_reward", "(", "action", ",", "history", ")", "\n", "for", "outcome", "in", "range", "(", "self", ".", "n_y", ")", ":", "\n", "                ", "probability_of_outcome", "=", "self", ".", "approximator", ".", "calculate_probability", "(", "x", ",", "history", ",", "action", ",", "outcome", ")", "\n", "if", "probability_of_outcome", ">", "0", ":", "\n", "                    ", "future_history", "=", "list", "(", "history", ")", "\n", "future_history", "[", "action", "]", "=", "outcome", "\n", "# Find the action with the greatest reward", "\n", "for", "new_action", "in", "range", "(", "self", ".", "n_a", "+", "1", ")", ":", "\n", "                        ", "if", "not", "self", ".", "q_table_done", "[", "self", ".", "to_index", "(", "[", "x", ",", "future_history", "]", ")", "+", "(", "new_action", ",", ")", "]", ":", "\n", "                            ", "self", ".", "populate_q_value", "(", "tuple", "(", "future_history", ")", ",", "new_action", ",", "x", ")", "\n", "", "", "max_future_q", "=", "np", ".", "max", "(", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "[", "x", ",", "future_history", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "max_future_q", "=", "0", "\n", "", "future_reward", "=", "np", ".", "add", "(", "future_reward", ",", "np", ".", "multiply", "(", "probability_of_outcome", ",", "max_future_q", ")", ")", "\n", "", "", "self", ".", "q_table", "[", "index", "]", "=", "reward", "+", "future_reward", "\n", "self", ".", "q_table_done", "[", "index", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.naive_dynamic_programming.NaiveDynamicProgramming.get_reward": [[55, 61], ["Exception", "numpy.max"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "action", ",", "history", ")", ":", "\n", "        ", "if", "action", "==", "self", ".", "stop_action", ":", "\n", "            ", "return", "np", ".", "max", "(", "history", ")", "\n", "", "elif", "self", ".", "stop_action", ">", "action", ">=", "0", ":", "\n", "            ", "return", "self", ".", "reward", "\n", "", "Exception", "(", "\"Error, invalid action {} at {}\"", ".", "format", "(", "action", ",", "history", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.naive_dynamic_programming.NaiveDynamicProgramming.reset": [[62, 65], ["numpy.zeros", "naive_dynamic_programming.NaiveDynamicProgramming.q_table.copy().astype", "naive_dynamic_programming.NaiveDynamicProgramming.q_table.copy"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "q_table", "=", "np", ".", "zeros", "(", "self", ".", "table_size", ")", "\n", "self", ".", "q_table_done", "=", "self", ".", "q_table", ".", "copy", "(", ")", ".", "astype", "(", "bool", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.greedyShuffledHistory.GreedyShuffled.__init__": [[5, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_x", ",", "n_a", ",", "n_y", ",", "data", ",", "delta", ",", "eps", ")", ":", "\n", "        ", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "n_y", "=", "n_y", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "probabilities", "=", "None", "\n", "self", ".", "name", "=", "'Greedy'", "\n", "self", ".", "label", "=", "'G'", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.greedyShuffledHistory.GreedyShuffled.learn": [[16, 36], ["numpy.zeros", "range", "len", "numpy.hstack", "numpy.zeros", "tuple", "numpy.ones"], "methods", ["None"], ["", "def", "learn", "(", "self", ")", ":", "\n", "        ", "histories", "=", "self", ".", "data", "[", "'h'", "]", "\n", "covariates", "=", "self", ".", "data", "[", "'x'", "]", "\n", "\n", "patient_statistics", "=", "np", ".", "zeros", "(", "(", "(", "2", ",", ")", "*", "self", ".", "n_x", "+", "(", "self", ".", "n_y", "+", "1", ",", ")", "*", "self", ".", "n_a", "+", "(", "self", ".", "n_a", ",", ")", "+", "(", "self", ".", "n_y", ",", ")", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "covariates", ")", ")", ":", "\n", "            ", "history", "=", "histories", "[", "i", "]", "\n", "covariate", "=", "covariates", "[", "i", "]", "\n", "treatment", ",", "outcome", "=", "history", "[", "-", "1", "]", "\n", "history", "=", "history", "[", ":", "-", "1", "]", "\n", "index", "=", "np", ".", "hstack", "(", "(", "covariate", ",", "np", ".", "ones", "(", "self", ".", "n_a", ",", "dtype", "=", "int", ")", "*", "-", "1", ")", ")", "\n", "new", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_a", ",", "self", ".", "n_y", ")", ",", "dtype", "=", "int", ")", "\n", "for", "h", "in", "history", ":", "\n", "                ", "index", "[", "h", "[", "0", "]", "+", "self", ".", "n_x", "]", "=", "h", "[", "1", "]", "\n", "", "new", "[", "treatment", ",", "outcome", "]", "=", "1", "\n", "ind", "=", "tuple", "(", "index", ")", "\n", "patient_statistics", "[", "ind", "]", "+=", "new", "\n", "", "self", ".", "probabilities", "=", "patient_statistics", "\n", "\n", "return", "patient_statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.greedyShuffledHistory.GreedyShuffled.evaluate": [[37, 68], ["numpy.array", "numpy.array", "numpy.sum", "numpy.zeros", "range", "numpy.divide", "numpy.max", "numpy.zeros", "range", "numpy.divide", "numpy.argmax", "int", "history.append", "tuple", "numpy.hstack"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "patient", ")", ":", "\n", "        ", "best_outcome", "=", "0", "\n", "x", "=", "patient", "[", "1", "]", "\n", "y_fac", "=", "patient", "[", "2", "]", "\n", "y", "=", "np", ".", "array", "(", "[", "-", "1", "]", "*", "self", ".", "n_a", ")", "\n", "stop", "=", "False", "\n", "history", "=", "[", "]", "\n", "while", "not", "stop", ":", "\n", "            ", "state", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "prob_matrix", "=", "self", ".", "probabilities", "[", "tuple", "(", "np", ".", "hstack", "(", "state", ")", ")", "]", "\n", "tot", "=", "np", ".", "sum", "(", "prob_matrix", ",", "axis", "=", "1", ")", "\n", "tot", "[", "tot", "==", "0", "]", "=", "1", "\n", "prob_vec", "=", "np", ".", "zeros", "(", "self", ".", "n_a", ")", "\n", "for", "i", "in", "range", "(", "best_outcome", "+", "1", "+", "self", ".", "eps", ",", "self", ".", "n_y", ")", ":", "\n", "                ", "prob_vec", "+=", "prob_matrix", "[", ":", ",", "i", "]", "\n", "", "prob_better_vec", "=", "np", ".", "divide", "(", "prob_vec", ",", "tot", ")", "\n", "prob_of_finding_better", "=", "np", ".", "max", "(", "prob_better_vec", ")", "\n", "if", "prob_of_finding_better", ">", "self", ".", "delta", ":", "\n", "                ", "ev_vec", "=", "np", ".", "zeros", "(", "self", ".", "n_a", ")", "\n", "for", "i", "in", "range", "(", "best_outcome", "+", "1", "+", "self", ".", "eps", ",", "self", ".", "n_y", ")", ":", "\n", "                    ", "ev_vec", "+=", "prob_matrix", "[", ":", ",", "i", "]", "*", "i", "\n", "", "ev_vec", "=", "np", ".", "divide", "(", "ev_vec", ",", "tot", ")", "\n", "new_treatment", "=", "np", ".", "argmax", "(", "ev_vec", ")", "\n", "outcome", "=", "int", "(", "y_fac", "[", "new_treatment", "]", ")", "\n", "if", "outcome", ">", "best_outcome", ":", "\n", "                    ", "best_outcome", "=", "outcome", "\n", "", "y", "[", "new_treatment", "]", "=", "outcome", "\n", "history", ".", "append", "(", "[", "new_treatment", ",", "outcome", "]", ")", "\n", "", "else", ":", "\n", "                ", "stop", "=", "True", "\n", "", "", "return", "history", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming.__init__": [[6, 17], ["QLearner.__init__", "np.zeros", "constrained_dynamic_programming.ConstrainedDynamicProgramming.q_table.copy().astype", "constrained_dynamic_programming.ConstrainedDynamicProgramming.q_table.copy"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_x", ",", "n_a", ",", "n_y", ",", "data", ",", "constraint", ",", "approximator", ",", "name", "=", "'Constrained Dynamic Programming'", ",", "label", "=", "'CDP'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_x", ",", "n_a", ",", "n_y", ",", "data", ")", "\n", "self", ".", "constraint", "=", "constraint", "\n", "# Q-table indexed with x, y_0, y_1, y_2, y_3 and a", "\n", "self", ".", "table_size", "=", "(", "2", ",", ")", "*", "self", ".", "n_x", "+", "(", "self", ".", "n_y", "+", "1", ",", ")", "*", "self", ".", "n_a", "+", "(", "self", ".", "n_a", "+", "1", ",", ")", "\n", "self", ".", "q_table", "=", "np", ".", "zeros", "(", "self", ".", "table_size", ")", "\n", "self", ".", "q_table_done", "=", "self", ".", "q_table", ".", "copy", "(", ")", ".", "astype", "(", "bool", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "approximator", "=", "approximator", "\n", "self", ".", "calc_prob_of_outcome", "=", "self", ".", "approximator", ".", "calculate_probability", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming.learn": [[18, 27], ["constrained_dynamic_programming.ConstrainedDynamicProgramming.reset", "list", "list", "itertools.product", "itertools.product", "range", "range", "range", "constrained_dynamic_programming.ConstrainedDynamicProgramming.populate_q_value", "constrained_dynamic_programming.ConstrainedDynamicProgramming.to_index"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming.reset", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming.populate_q_value", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index"], ["", "def", "learn", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "possible_x", "=", "list", "(", "itertools", ".", "product", "(", "range", "(", "0", ",", "2", ")", ",", "repeat", "=", "self", ".", "n_x", ")", ")", "\n", "possible_histories", "=", "list", "(", "itertools", ".", "product", "(", "range", "(", "-", "1", ",", "self", ".", "n_y", ")", ",", "repeat", "=", "self", ".", "n_a", ")", ")", "\n", "for", "x", "in", "possible_x", ":", "\n", "            ", "for", "history", "in", "possible_histories", ":", "\n", "                ", "for", "action", "in", "range", "(", "self", ".", "n_a", "+", "1", ")", ":", "\n", "                    ", "if", "not", "self", ".", "q_table_done", "[", "self", ".", "to_index", "(", "[", "x", ",", "history", ",", "action", "]", ")", "]", ":", "\n", "                        ", "self", ".", "populate_q_value", "(", "history", ",", "action", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming.populate_q_value": [[28, 55], ["constrained_dynamic_programming.ConstrainedDynamicProgramming.to_index", "constrained_dynamic_programming.ConstrainedDynamicProgramming.get_reward", "constrained_dynamic_programming.ConstrainedDynamicProgramming.get_reward", "range", "constrained_dynamic_programming.ConstrainedDynamicProgramming.calc_prob_of_outcome", "np.add", "list", "range", "np.max", "np.multiply", "constrained_dynamic_programming.ConstrainedDynamicProgramming.populate_q_value", "tuple", "constrained_dynamic_programming.ConstrainedDynamicProgramming.to_index", "constrained_dynamic_programming.ConstrainedDynamicProgramming.to_index"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.get_reward", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.get_reward", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Memory.add", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming.populate_q_value", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index"], ["", "", "", "", "", "def", "populate_q_value", "(", "self", ",", "history", ",", "action", ",", "x", ")", ":", "\n", "        ", "index", "=", "self", ".", "to_index", "(", "[", "x", ",", "history", "]", ")", "+", "(", "action", ",", ")", "\n", "future_reward", "=", "0", "\n", "# if action is stop action, calculate the reward", "\n", "if", "action", "==", "self", ".", "stop_action", ":", "\n", "            ", "reward", "=", "self", ".", "get_reward", "(", "self", ".", "stop_action", ",", "history", ",", "x", ")", "\n", "# if action is already used, set reward to -inf", "\n", "", "elif", "history", "[", "action", "]", "!=", "-", "1", ":", "\n", "            ", "reward", "=", "-", "np", ".", "inf", "\n", "# else, calculate the sum of the reward for each outcome times its probability", "\n", "", "else", ":", "\n", "            ", "reward", "=", "self", ".", "get_reward", "(", "action", ",", "history", ",", "x", ")", "\n", "for", "outcome", "in", "range", "(", "self", ".", "n_y", ")", ":", "\n", "                ", "probability_of_outcome", "=", "self", ".", "calc_prob_of_outcome", "(", "x", ",", "history", ",", "action", ",", "outcome", ")", "\n", "if", "probability_of_outcome", ">", "0", ":", "\n", "                    ", "future_history", "=", "list", "(", "history", ")", "\n", "future_history", "[", "action", "]", "=", "outcome", "\n", "# Find the action with the greatest reward", "\n", "for", "new_action", "in", "range", "(", "self", ".", "n_a", "+", "1", ")", ":", "\n", "                        ", "if", "not", "self", ".", "q_table_done", "[", "self", ".", "to_index", "(", "[", "x", ",", "future_history", "]", ")", "+", "(", "new_action", ",", ")", "]", ":", "\n", "                            ", "self", ".", "populate_q_value", "(", "tuple", "(", "future_history", ")", ",", "new_action", ",", "x", ")", "\n", "", "", "max_future_q", "=", "np", ".", "max", "(", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "[", "x", ",", "future_history", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "max_future_q", "=", "0", "\n", "", "future_reward", "=", "np", ".", "add", "(", "future_reward", ",", "np", ".", "multiply", "(", "probability_of_outcome", ",", "max_future_q", ")", ")", "\n", "", "", "self", ".", "q_table", "[", "index", "]", "=", "reward", "+", "future_reward", "\n", "self", ".", "q_table_done", "[", "index", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming.get_reward": [[56, 68], ["constrained_dynamic_programming.ConstrainedDynamicProgramming.constraint.no_better_treatment_exist", "print", "sys.exit"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.better_treatment_constraint.Constraint.no_better_treatment_exist"], ["", "def", "get_reward", "(", "self", ",", "action", ",", "history", ",", "x", ")", ":", "\n", "        ", "gamma", "=", "self", ".", "constraint", ".", "no_better_treatment_exist", "(", "history", ",", "x", ")", "\n", "if", "action", "==", "self", ".", "stop_action", "and", "gamma", "==", "0", ":", "\n", "            ", "return", "-", "np", ".", "infty", "\n", "", "elif", "action", "==", "self", ".", "stop_action", "and", "gamma", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "elif", "self", ".", "stop_action", ">", "action", ">=", "0", ":", "\n", "            ", "return", "-", "1", "\n", "", "else", ":", "\n", "            ", "import", "sys", "\n", "print", "(", "gamma", ",", "action", ",", "history", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming.reset": [[69, 72], ["np.zeros", "constrained_dynamic_programming.ConstrainedDynamicProgramming.q_table.copy().astype", "constrained_dynamic_programming.ConstrainedDynamicProgramming.q_table.copy"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "q_table", "=", "np", ".", "zeros", "(", "self", ".", "table_size", ")", "\n", "self", ".", "q_table_done", "=", "self", ".", "q_table", ".", "copy", "(", ")", ".", "astype", "(", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming.set_constraint": [[73, 75], ["None"], "methods", ["None"], ["", "def", "set_constraint", "(", "self", ",", "constraint", ")", ":", "\n", "        ", "self", ".", "constraint", "=", "constraint", ".", "no_better_treatment_exist", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.constrained_dynamic_programming.ConstrainedDynamicProgramming.evaluate": [[76, 114], ["np.array", "np.array", "y_fac.copy().astype", "np.append", "np.argmax", "print", "history.append", "np.array", "np.argwhere().flatten", "enumerate", "np.delete", "y_fac.copy", "len", "len", "np.zeros", "np.argwhere", "to_remove.append", "np.argmax", "constrained_dynamic_programming.ConstrainedDynamicProgramming.to_index", "range", "np.max", "constrained_dynamic_programming.ConstrainedDynamicProgramming.approximator.calculate_probability", "np.max", "constrained_dynamic_programming.ConstrainedDynamicProgramming.to_index", "constrained_dynamic_programming.ConstrainedDynamicProgramming.to_index"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.calculate_probability", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index"], ["", "def", "evaluate", "(", "self", ",", "subject", ")", ":", "\n", "        ", "if", "self", ".", "q_table", "is", "None", ":", "\n", "            ", "print", "(", "\"Run learn first!\"", ")", "\n", "return", "\n", "", "z", ",", "x", ",", "y_fac", "=", "subject", "\n", "y", "=", "np", ".", "array", "(", "[", "-", "1", "]", "*", "self", ".", "n_a", ")", "\n", "history", "=", "[", "]", "\n", "state", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "mask_unknown_actions", "=", "y_fac", ".", "copy", "(", ")", ".", "astype", "(", "float", ")", "\n", "mask_unknown_actions", "[", "mask_unknown_actions", "!=", "-", "1", "]", "=", "0", "\n", "mask_unknown_actions", "[", "mask_unknown_actions", "==", "-", "1", "]", "=", "-", "np", ".", "inf", "\n", "mask_unknown_actions", "=", "np", ".", "append", "(", "mask_unknown_actions", ",", "0", ")", "\n", "action", "=", "np", ".", "argmax", "(", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "]", "+", "mask_unknown_actions", ")", "\n", "while", "action", "!=", "self", ".", "n_a", "and", "len", "(", "history", ")", "<", "self", ".", "n_a", ":", "\n", "            ", "y", "[", "action", "]", "=", "y_fac", "[", "action", "]", "\n", "history", ".", "append", "(", "[", "action", ",", "y", "[", "action", "]", "]", ")", "\n", "state", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "\n", "action_candidates", "=", "np", ".", "argwhere", "(", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "]", "==", "\n", "np", ".", "max", "(", "self", ".", "q_table", "[", "self", ".", "to_index", "(", "state", ")", "]", "+", "mask_unknown_actions", ")", ")", ".", "flatten", "(", ")", "\n", "\n", "to_remove", "=", "[", "]", "\n", "for", "i", ",", "a", "in", "enumerate", "(", "action_candidates", ")", ":", "\n", "                ", "if", "a", "!=", "self", ".", "stop_action", "and", "y", "[", "a", "]", "!=", "-", "1", ":", "\n", "                    ", "to_remove", ".", "append", "(", "i", ")", "\n", "", "", "action_candidates", "=", "np", ".", "delete", "(", "action_candidates", ",", "to_remove", ")", "\n", "if", "len", "(", "action_candidates", ")", "==", "1", ":", "\n", "                ", "action", "=", "action_candidates", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "probs", "=", "np", ".", "zeros", "(", "self", ".", "n_a", ")", "\n", "if", "self", ".", "stop_action", "in", "action_candidates", ":", "\n", "                    ", "action", "=", "self", ".", "stop_action", "\n", "", "else", ":", "\n", "                    ", "for", "a", "in", "action_candidates", ":", "\n", "                        ", "for", "outcome", "in", "range", "(", "np", ".", "max", "(", "y", ")", "+", "1", ",", "self", ".", "n_y", ")", ":", "\n", "                            ", "probs", "[", "a", "]", "+=", "self", ".", "approximator", ".", "calculate_probability", "(", "x", ",", "y", ",", "a", ",", "outcome", ")", "\n", "", "", "action", "=", "np", ".", "argmax", "(", "probs", ")", "\n", "", "", "", "return", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.emulated_doctor.EmulatedDoctor.__init__": [[6, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_x", ",", "n_a", ",", "n_y", ",", "data", ",", "approximator", ")", ":", "\n", "        ", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_y", "=", "n_y", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "max_outcome", "=", "self", ".", "n_y", "-", "1", "\n", "self", ".", "name", "=", "\"Emulated doctor\"", "\n", "self", ".", "label", "=", "\"EmDoc\"", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "approximator", "=", "approximator", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.emulated_doctor.EmulatedDoctor.learn": [[16, 18], ["None"], "methods", ["None"], ["", "def", "learn", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.emulated_doctor.EmulatedDoctor.evaluate": [[19, 44], ["numpy.array", "emulated_doctor.EmulatedDoctor.approximator.calculate_probability", "history_to_state", "enumerate", "numpy.argmax", "int", "history.append", "len", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.calculate_probability", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.history_to_state"], ["", "def", "evaluate", "(", "self", ",", "patient", ")", ":", "\n", "        ", "best_outcome", "=", "0", "\n", "x", "=", "patient", "[", "1", "]", "\n", "y_fac", "=", "patient", "[", "2", "]", "\n", "y", "=", "np", ".", "array", "(", "[", "-", "1", "]", "*", "self", ".", "n_a", ")", "\n", "stop", "=", "False", "\n", "history", "=", "[", "]", "\n", "while", "not", "stop", "or", "len", "(", "history", ")", ">=", "self", ".", "n_a", ":", "\n", "            ", "probabilities", "=", "self", ".", "approximator", ".", "calculate_probability", "(", "x", ",", "y", ")", "\n", "hstate", "=", "history_to_state", "(", "history", ",", "self", ".", "n_a", ")", "\n", "for", "i", ",", "hs", "in", "enumerate", "(", "hstate", ")", ":", "\n", "                ", "if", "hs", "!=", "-", "1", ":", "\n", "                    ", "probabilities", "[", "i", "]", "=", "-", "np", ".", "inf", "\n", "", "", "decision_probabilities", "=", "probabilities", "\n", "new_treatment", "=", "np", ".", "argmax", "(", "decision_probabilities", ")", "\n", "if", "np", ".", "max", "(", "decision_probabilities", ")", "==", "-", "np", ".", "inf", ":", "\n", "                ", "break", "\n", "", "outcome", "=", "int", "(", "y_fac", "[", "new_treatment", "]", ")", "\n", "if", "outcome", ">", "best_outcome", ":", "\n", "                ", "best_outcome", "=", "outcome", "\n", "", "y", "[", "new_treatment", "]", "=", "outcome", "\n", "history", ".", "append", "(", "[", "new_treatment", ",", "outcome", "]", ")", "\n", "if", "outcome", "==", "self", ".", "max_outcome", ":", "\n", "                ", "stop", "=", "True", "\n", "", "", "return", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.distribution_algorithm_wrapper.DistAlgWrapper.__init__": [[4, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dist", ",", "name", "=", "\"Distribution\"", ",", "label", "=", "\"dist\"", ")", ":", "\n", "        ", "self", ".", "dist", "=", "dist", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.distribution_algorithm_wrapper.DistAlgWrapper.learn": [[9, 11], ["None"], "methods", ["None"], ["", "def", "learn", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.distribution_algorithm_wrapper.DistAlgWrapper.evaluate": [[12, 14], ["distribution_algorithm_wrapper.DistAlgWrapper.dist.evaluate"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.evaluate"], ["", "def", "evaluate", "(", "self", ",", "patient", ")", ":", "\n", "        ", "return", "self", ".", "dist", ".", "evaluate", "(", "patient", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.history_to_state": [[1, 7], ["None"], "function", ["None"], ["def", "history_to_state", "(", "history", ",", "n_actions", ")", ":", "\n", "    ", "state", "=", "[", "-", "1", "]", "*", "n_actions", "\n", "for", "intervention", "in", "history", ":", "\n", "        ", "treatment", ",", "outcome", "=", "intervention", "\n", "state", "[", "treatment", "]", "=", "outcome", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.state_to_history": [[9, 16], ["enumerate", "history.append"], "function", ["None"], ["", "def", "state_to_history", "(", "state", ")", ":", "\n", "# Creates history from [0, 1, 2] to [[0, 0], [1, 1], [2, 2]]", "\n", "    ", "history", "=", "[", "]", "\n", "for", "i", ",", "entry", "in", "enumerate", "(", "state", ")", ":", "\n", "        ", "if", "entry", "!=", "-", "1", ":", "\n", "            ", "history", ".", "append", "(", "[", "i", ",", "entry", "]", ")", "\n", "", "", "return", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.hash_history": [[18, 22], ["help_functions.history_to_state", "help_functions.hash_state"], "function", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.history_to_state", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.hash_state"], ["", "def", "hash_history", "(", "x", ",", "history", ",", "n_actions", ")", ":", "\n", "    ", "state", "=", "history_to_state", "(", "history", ",", "n_actions", ")", "\n", "string", "=", "hash_state", "(", "x", ",", "state", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.hash_state": [[24, 29], ["str", "str"], "function", ["None"], ["", "def", "hash_state", "(", "x", ",", "state", ")", ":", "\n", "    ", "xstring", "=", "''", ".", "join", "(", "str", "(", "a", ")", "for", "a", "in", "x", ")", "\n", "statestring", "=", "''", ".", "join", "(", "str", "(", "a", ")", "for", "a", "in", "state", ")", "\n", "string", "=", "xstring", "+", "statestring", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.hash_array": [[31, 34], ["str"], "function", ["None"], ["", "def", "hash_array", "(", "x", ")", ":", "\n", "    ", "xstring", "=", "''", ".", "join", "(", "str", "(", "a", ")", "for", "a", "in", "x", ")", "\n", "return", "xstring", "\n", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Network.__init__": [[28, 46], ["tensorflow.initializers.glorot_uniform", "tensorflow.initializers.zeros", "numpy.random.seed", "tensorflow.random.set_seed", "deep_q_learning.Network.initialize_weights", "optimizer"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Network.initialize_weights"], ["def", "__init__", "(", "self", ",", "\n", "input_size", ",", "\n", "output_size", ",", "\n", "hidden_size", "=", "[", "16", ",", "8", "]", ",", "\n", "weights_initializer", "=", "tf", ".", "initializers", ".", "glorot_uniform", "(", ")", ",", "\n", "bias_initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ",", "\n", "optimizer", "=", "tf", ".", "optimizers", ".", "Adam", ",", "\n", "**", "optimizer_kwargs", ")", ":", "\n", "        ", "\"\"\"Initialize weights and hyperparameters.\"\"\"", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "np", ".", "random", ".", "seed", "(", "41", ")", "\n", "tf", ".", "random", ".", "set_seed", "(", "42", ")", "\n", "\n", "self", ".", "initialize_weights", "(", "weights_initializer", ",", "bias_initializer", ")", "\n", "self", ".", "optimizer", "=", "optimizer", "(", "**", "optimizer_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Network.initialize_weights": [[47, 65], ["numpy.arange", "wshapes.append", "numpy.arange", "bshapes.append", "len", "wshapes.append", "len", "bshapes.append", "deep_q_learning.init_weights", "deep_q_learning.init_weights"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.init_weights", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.init_weights"], ["", "def", "initialize_weights", "(", "self", ",", "weights_initializer", ",", "bias_initializer", ")", ":", "\n", "        ", "\"\"\"Initialize and store weights.\"\"\"", "\n", "wshapes", "=", "[", "[", "self", ".", "input_size", ",", "self", ".", "hidden_size", "[", "0", "]", "]", "]", "\n", "layer_indices", "=", "np", ".", "arange", "(", "1", ",", "len", "(", "self", ".", "hidden_size", ")", ")", "\n", "for", "i", "in", "layer_indices", ":", "\n", "            ", "wshapes", ".", "append", "(", "[", "self", ".", "hidden_size", "[", "i", "-", "1", "]", ",", "self", ".", "hidden_size", "[", "i", "]", "]", ")", "\n", "", "wshapes", ".", "append", "(", "[", "self", ".", "hidden_size", "[", "-", "1", "]", ",", "self", ".", "output_size", "]", ")", "\n", "\n", "bshapes", "=", "[", "]", "\n", "bias_indices", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "self", ".", "hidden_size", ")", ")", "\n", "for", "i", "in", "bias_indices", ":", "\n", "            ", "bshapes", ".", "append", "(", "[", "1", ",", "self", ".", "hidden_size", "[", "i", "]", "]", ")", "\n", "", "bshapes", ".", "append", "(", "[", "1", ",", "self", ".", "output_size", "]", ")", "\n", "\n", "self", ".", "weights", "=", "[", "init_weights", "(", "s", ",", "weights_initializer", ")", "for", "s", "in", "wshapes", "]", "\n", "self", ".", "biases", "=", "[", "init_weights", "(", "s", ",", "bias_initializer", ")", "for", "s", "in", "bshapes", "]", "\n", "\n", "self", ".", "trainable_variables", "=", "self", ".", "weights", "+", "self", ".", "biases", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Network.model": [[66, 77], ["numpy.arange", "deep_q_learning.dense", "deep_q_learning.dense", "len", "deep_q_learning.dense", "h_s.append"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.dense", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.dense", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.dense"], ["", "def", "model", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Given a state vector, return the Q values of actions.\"\"\"", "\n", "\n", "h_s", "=", "[", "dense", "(", "inputs", ",", "self", ".", "weights", "[", "0", "]", ",", "self", ".", "biases", "[", "0", "]", ",", "tf", ".", "nn", ".", "relu", ")", "]", "\n", "h_indices", "=", "np", ".", "arange", "(", "1", ",", "len", "(", "self", ".", "hidden_size", ")", ")", "\n", "for", "i", "in", "h_indices", ":", "\n", "            ", "h", "=", "dense", "(", "h_s", "[", "i", "-", "1", "]", ",", "self", ".", "weights", "[", "i", "]", ",", "self", ".", "biases", "[", "i", "]", ",", "tf", ".", "nn", ".", "relu", ")", "\n", "h_s", ".", "append", "(", "h", ")", "\n", "", "out", "=", "dense", "(", "h_s", "[", "-", "1", "]", ",", "self", ".", "weights", "[", "-", "1", "]", ",", "self", ".", "biases", "[", "-", "1", "]", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Network.train_step": [[78, 87], ["tape.gradient", "deep_q_learning.Network.optimizer.apply_gradients", "tensorflow.GradientTape", "tensorflow.squeeze", "tensorflow.reduce_sum", "tensorflow.losses.mean_squared_error", "zip", "deep_q_learning.Network.model"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Network.model"], ["", "def", "train_step", "(", "self", ",", "inputs", ",", "targets", ",", "actions_one_hot", ")", ":", "\n", "        ", "\"\"\"Update weights.\"\"\"", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "            ", "qvalues", "=", "tf", ".", "squeeze", "(", "self", ".", "model", "(", "inputs", ")", ")", "\n", "preds", "=", "tf", ".", "reduce_sum", "(", "qvalues", "*", "actions_one_hot", ",", "axis", "=", "1", ")", "\n", "loss", "=", "tf", ".", "losses", ".", "mean_squared_error", "(", "targets", ",", "preds", ")", "\n", "\n", "", "grads", "=", "tape", ".", "gradient", "(", "loss", ",", "self", ".", "trainable_variables", ")", "\n", "self", ".", "optimizer", ".", "apply_gradients", "(", "zip", "(", "grads", ",", "self", ".", "trainable_variables", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Memory.__init__": [[92, 95], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize buffer.\"\"\"", "\n", "self", ".", "buffer", "=", "deque", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Memory.add": [[96, 99], ["deep_q_learning.Memory.buffer.append"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "experience", ")", ":", "\n", "        ", "\"\"\"Add an experience to the buffer.\"\"\"", "\n", "self", ".", "buffer", ".", "append", "(", "experience", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Memory.sample": [[100, 110], ["len", "numpy.random.choice", "numpy.arange"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Sample a batch of experiences from the buffer.\"\"\"", "\n", "buffer_size", "=", "len", "(", "self", ".", "buffer", ")", "\n", "index", "=", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "buffer_size", ")", ",", "\n", "size", "=", "batch_size", ",", "\n", "replace", "=", "False", "\n", ")", "\n", "\n", "return", "[", "self", ".", "buffer", "[", "i", "]", "for", "i", "in", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Memory.__len__": [[111, 114], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Interface to access buffer length.\"\"\"", "\n", "return", "len", "(", "self", ".", "buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.__init__": [[119, 165], ["deep_q_learning.Network", "deep_q_learning.Network", "deep_q_learning.DeepQLearning.update_target_network", "int", "deep_q_learning.Memory", "deep_q_learning.DeepQLearning.training_to_validation_data", "len"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.update_target_network", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.training_to_validation_data"], ["def", "__init__", "(", "self", ",", "\n", "n_x", ",", "\n", "n_a", ",", "\n", "n_y", ",", "\n", "data", ",", "\n", "constraint", ",", "\n", "approximator", ",", "\n", "target_update_freq", "=", "1000", ",", "\n", "discount", "=", "1", ",", "\n", "batch_size", "=", "16", ",", "\n", "n_batch_trainings", "=", "3000", ")", ":", "\n", "        ", "\"\"\"Set parameters, initialize network.\"\"\"", "\n", "action_space_size", "=", "n_a", "+", "1", "\n", "state_space_size", "=", "n_x", "+", "n_a", "\n", "self", ".", "action_space_size", "=", "action_space_size", "\n", "\n", "self", ".", "online_network", "=", "Network", "(", "state_space_size", ",", "action_space_size", ")", "\n", "self", ".", "target_network", "=", "Network", "(", "state_space_size", ",", "action_space_size", ")", "\n", "\n", "self", ".", "update_target_network", "(", ")", "\n", "\n", "# training parameters", "\n", "self", ".", "target_update_freq", "=", "target_update_freq", "\n", "self", ".", "discount", "=", "discount", "\n", "\n", "self", ".", "name", "=", "'Constrained Deep Q-learning'", "\n", "self", ".", "label", "=", "'CDQL'", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "stop_action", "=", "n_a", "\n", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_y", "=", "n_y", "\n", "self", ".", "max_outcome", "=", "n_y", "-", "1", "\n", "data_split_len", "=", "int", "(", "len", "(", "data", "[", "'x'", "]", ")", "*", "0.8", ")", "\n", "self", ".", "approximator", "=", "approximator", "\n", "self", ".", "data", "=", "{", "'x'", ":", "data", "[", "'x'", "]", "[", ":", "data_split_len", "]", ",", "'h'", ":", "data", "[", "'h'", "]", "[", ":", "data_split_len", "]", "}", "\n", "self", ".", "validation_data", "=", "data", "\n", "self", ".", "validation_data", "[", "'x'", "]", "=", "data", "[", "'x'", "]", "[", "data_split_len", ":", "]", "\n", "self", ".", "validation_data", "[", "'h'", "]", "=", "data", "[", "'h'", "]", "[", "data_split_len", ":", "]", "\n", "self", ".", "constraint", "=", "constraint", "\n", "self", ".", "n_batch_trainings", "=", "n_batch_trainings", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "# replay memory", "\n", "self", ".", "memory", "=", "Memory", "(", ")", "\n", "\n", "self", ".", "validation_data", "=", "self", ".", "training_to_validation_data", "(", "self", ".", "validation_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.add_to_memory": [[166, 181], ["deep_q_learning.DeepQLearning.memory.add"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Memory.add"], ["", "def", "add_to_memory", "(", "self", ",", "state", ",", "last_reward", ",", "last_state", ",", "last_action", ")", ":", "\n", "        ", "\"\"\"Observe state and rewards, select action.\n\n        It is assumed that `observation` will be an object with\n        a `state` vector and a `reward` float or integer. The reward\n        corresponds to the action taken in the previous step.\n        \"\"\"", "\n", "\n", "experience", "=", "{", "\n", "\"state\"", ":", "last_state", ",", "\n", "\"action\"", ":", "last_action", ",", "\n", "\"reward\"", ":", "last_reward", ",", "\n", "\"next_state\"", ":", "state", "\n", "}", "\n", "self", ".", "memory", ".", "add", "(", "experience", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.policy": [[182, 196], ["numpy.expand_dims", "deep_q_learning.DeepQLearning.target_network.model", "list", "range", "enumerate", "numpy.squeeze", "numpy.squeeze", "len", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Network.model"], ["", "def", "policy", "(", "self", ",", "state", ",", "forbidden_actions", "=", "(", ")", ")", ":", "\n", "\n", "        ", "inputs", "=", "np", ".", "expand_dims", "(", "state", ",", "0", ")", "\n", "qvalues", "=", "self", ".", "target_network", ".", "model", "(", "inputs", ")", "\n", "temp_qvalues", "=", "list", "(", "np", ".", "squeeze", "(", "qvalues", ")", ")", "\n", "temp_h_state", "=", "state", "[", "self", ".", "n_x", ":", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "temp_h_state", ")", ")", ":", "\n", "            ", "if", "temp_h_state", "[", "i", "]", "!=", "-", "1", ":", "\n", "                ", "temp_qvalues", "[", "i", "]", "=", "-", "np", ".", "inf", "\n", "", "", "for", "i", ",", "is_forbidden", "in", "enumerate", "(", "forbidden_actions", ")", ":", "\n", "            ", "if", "is_forbidden", ":", "\n", "                ", "temp_qvalues", "[", "i", "]", "=", "-", "np", ".", "inf", "\n", "", "", "action", "=", "np", ".", "squeeze", "(", "np", ".", "argmax", "(", "temp_qvalues", ")", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.update_target_network": [[197, 203], ["deep_q_learning.DeepQLearning.set_target_variables", "tensorflow.Variable"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.set_target_variables"], ["", "def", "update_target_network", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update target network weights with current online network values.\"\"\"", "\n", "variables", "=", "self", ".", "online_network", ".", "trainable_variables", "\n", "variables_copy", "=", "[", "tf", ".", "Variable", "(", "v", ")", "for", "v", "in", "variables", "]", "\n", "self", ".", "target_network", ".", "trainable_variables", "=", "variables_copy", "\n", "self", ".", "set_target_variables", "(", "variables_copy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.set_target_variables": [[204, 208], ["int", "len"], "methods", ["None"], ["", "def", "set_target_variables", "(", "self", ",", "variables", ")", ":", "\n", "        ", "split_index", "=", "int", "(", "len", "(", "variables", ")", "/", "2", ")", "\n", "self", ".", "target_network", ".", "weights", "=", "variables", "[", ":", "split_index", "]", "\n", "self", ".", "target_network", ".", "biases", "=", "variables", "[", "split_index", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.train_network": [[209, 226], ["deep_q_learning.DeepQLearning.memory.sample", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.squeeze", "numpy.argmax", "numpy.squeeze", "deep_q_learning.DeepQLearning.online_network.train_step", "numpy.eye", "deep_q_learning.DeepQLearning.target_network.model", "numpy.eye", "deep_q_learning.DeepQLearning.online_network.model", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Memory.sample", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Network.train_step", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Network.model", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.Network.model"], ["", "def", "train_network", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update online network weights.\"\"\"", "\n", "batch", "=", "self", ".", "memory", ".", "sample", "(", "self", ".", "batch_size", ")", "\n", "inputs", "=", "np", ".", "array", "(", "[", "b", "[", "\"state\"", "]", "for", "b", "in", "batch", "]", ")", "\n", "actions", "=", "np", ".", "array", "(", "[", "b", "[", "\"action\"", "]", "for", "b", "in", "batch", "]", ")", "\n", "rewards", "=", "np", ".", "array", "(", "[", "b", "[", "\"reward\"", "]", "for", "b", "in", "batch", "]", ")", "\n", "next_inputs", "=", "np", ".", "array", "(", "[", "b", "[", "\"next_state\"", "]", "for", "b", "in", "batch", "]", ")", "\n", "\n", "actions_one_hot", "=", "np", ".", "eye", "(", "self", ".", "action_space_size", ")", "[", "actions", "]", "\n", "\n", "next_qvalues", "=", "np", ".", "squeeze", "(", "self", ".", "target_network", ".", "model", "(", "next_inputs", ")", ")", "\n", "target_actions", "=", "np", ".", "argmax", "(", "next_qvalues", ",", "axis", "=", "-", "1", ")", "\n", "target_actions_one_hot", "=", "np", ".", "eye", "(", "self", ".", "action_space_size", ")", "[", "target_actions", "]", "\n", "online_q_values", "=", "np", ".", "squeeze", "(", "self", ".", "online_network", ".", "model", "(", "next_inputs", ")", ")", "\n", "targets", "=", "rewards", "+", "self", ".", "discount", "*", "tf", ".", "reduce_sum", "(", "online_q_values", "*", "target_actions_one_hot", ",", "axis", "=", "1", ")", "#np.amax(next_qvalues, axis=-1)", "\n", "\n", "self", ".", "online_network", ".", "train_step", "(", "inputs", ",", "targets", ",", "actions_one_hot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.learn": [[227, 269], ["len", "print", "range", "print", "range", "deep_q_learning.DeepQLearning.set_target_variables", "print", "history_to_state", "deep_q_learning.DeepQLearning.get_reward", "deep_q_learning.DeepQLearning.create_state", "deep_q_learning.DeepQLearning.copy", "deep_q_learning.DeepQLearning.add_to_memory", "history_to_state", "deep_q_learning.DeepQLearning.get_reward", "deep_q_learning.DeepQLearning.add_to_memory", "deep_q_learning.DeepQLearning.train_network", "deep_q_learning.DeepQLearning.update_target_network", "deep_q_learning.DeepQLearning.evaluate_validation", "print", "deep_q_learning.DeepQLearning.action_index", "tensorflow.Variable"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.set_target_variables", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.history_to_state", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.get_reward", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.create_state", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.add_to_memory", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.history_to_state", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.get_reward", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.add_to_memory", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.train_network", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.update_target_network", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.evaluate_validation", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.action_index"], ["", "def", "learn", "(", "self", ")", ":", "\n", "        ", "x_s", "=", "self", ".", "data", "[", "'x'", "]", "\n", "histories", "=", "self", ".", "data", "[", "'h'", "]", "\n", "n_interventions", "=", "len", "(", "x_s", ")", "\n", "print", "(", "\"Adding {} interventions to memory\"", ".", "format", "(", "n_interventions", "*", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "n_interventions", ")", ":", "\n", "            ", "x", "=", "x_s", "[", "i", "]", "\n", "history", "=", "histories", "[", "i", "]", "\n", "\n", "last_action", ",", "outcome", "=", "history", "[", "-", "1", "]", "\n", "h_state", "=", "history_to_state", "(", "history", "[", ":", "-", "1", "]", ",", "self", ".", "n_a", ")", "\n", "last_reward", "=", "self", ".", "get_reward", "(", "last_action", ",", "h_state", ",", "x", ")", "\n", "last_state", "=", "self", ".", "create_state", "(", "x", ",", "h_state", ")", "\n", "state", "=", "last_state", ".", "copy", "(", ")", "\n", "state", "[", "self", ".", "action_index", "(", "last_action", ")", "]", "=", "outcome", "\n", "self", ".", "add_to_memory", "(", "state", ",", "last_reward", ",", "last_state", ",", "last_action", ")", "\n", "\n", "last_action", "=", "self", ".", "stop_action", "\n", "h_state", "=", "history_to_state", "(", "history", ",", "self", ".", "n_a", ")", "\n", "last_reward", "=", "self", ".", "get_reward", "(", "last_action", ",", "h_state", ",", "x", ")", "\n", "last_state", "=", "state", "\n", "self", ".", "add_to_memory", "(", "state", ",", "last_reward", ",", "last_state", ",", "last_action", ")", "\n", "\n", "", "print", "(", "'Performing training'", ")", "\n", "max_treatment_effect", "=", "0", "\n", "min_search_time", "=", "self", ".", "n_a", "\n", "best_variables_copy", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "n_batch_trainings", "+", "1", ")", ":", "\n", "            ", "self", ".", "train_network", "(", ")", "\n", "if", "i", "%", "self", ".", "target_update_freq", "==", "0", ":", "\n", "                ", "self", ".", "update_target_network", "(", ")", "\n", "mean_treatment_effect", ",", "mean_num_tests", "=", "self", ".", "evaluate_validation", "(", ")", "\n", "if", "mean_treatment_effect", ">=", "max_treatment_effect", ":", "\n", "                    ", "if", "mean_num_tests", "<", "min_search_time", "or", "mean_treatment_effect", ">", "max_treatment_effect", ":", "\n", "                        ", "max_treatment_effect", "=", "mean_treatment_effect", "\n", "min_search_time", "=", "mean_num_tests", "\n", "best_variables", "=", "self", ".", "target_network", ".", "trainable_variables", "\n", "best_variables_copy", "=", "[", "tf", ".", "Variable", "(", "v", ")", "for", "v", "in", "best_variables", "]", "\n", "", "", "print", "(", "'DQN performance: mean treatment effect {}, mean search time {}'", ".", "format", "(", "mean_treatment_effect", ",", "mean_num_tests", ")", ")", "\n", "", "", "self", ".", "target_network", ".", "trainable_variables", "=", "best_variables_copy", "\n", "self", ".", "set_target_variables", "(", "best_variables_copy", ")", "\n", "print", "(", "'Best time:'", ",", "min_search_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.evaluate": [[270, 286], ["numpy.array", "deep_q_learning.DeepQLearning.create_state", "numpy.concatenate", "deep_q_learning.DeepQLearning.policy", "history.append", "deep_q_learning.DeepQLearning.create_state", "deep_q_learning.DeepQLearning.policy", "len"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.create_state", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.policy", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.create_state", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.policy"], ["", "def", "evaluate", "(", "self", ",", "patient", ")", ":", "\n", "        ", "z", ",", "x", ",", "y_fac", "=", "patient", "\n", "y", "=", "np", ".", "array", "(", "[", "-", "1", "]", "*", "self", ".", "n_a", ")", "\n", "history", "=", "[", "]", "\n", "state", "=", "self", ".", "create_state", "(", "x", ",", "y", ")", "\n", "forbidden_actions", "=", "(", "y_fac", "==", "-", "1", ")", "\n", "forbidden_actions_init", "=", "np", ".", "concatenate", "(", "(", "forbidden_actions", ",", "[", "True", "]", ")", ")", "\n", "action", "=", "self", ".", "policy", "(", "state", ",", "forbidden_actions", "=", "forbidden_actions_init", ")", "\n", "while", "action", "!=", "self", ".", "stop_action", "and", "len", "(", "history", ")", "<", "self", ".", "n_a", ":", "\n", "            ", "y", "[", "action", "]", "=", "y_fac", "[", "action", "]", "\n", "history", ".", "append", "(", "[", "action", ",", "y", "[", "action", "]", "]", ")", "\n", "if", "y", "[", "action", "]", "==", "self", ".", "max_outcome", ":", "\n", "                ", "break", "\n", "", "state", "=", "self", ".", "create_state", "(", "x", ",", "y", ")", "\n", "action", "=", "self", ".", "policy", "(", "state", ",", "forbidden_actions", "=", "forbidden_actions", ")", "\n", "", "return", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.evaluate_validation": [[287, 299], ["len", "deep_q_learning.DeepQLearning.evaluate", "len", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.evaluate"], ["", "def", "evaluate_validation", "(", "self", ")", ":", "\n", "        ", "mean_num_tests", "=", "0", "\n", "max_treatment_effect", "=", "0", "\n", "n_test_samples", "=", "len", "(", "self", ".", "validation_data", ")", "\n", "for", "patient", "in", "self", ".", "validation_data", ":", "\n", "            ", "history", "=", "self", ".", "evaluate", "(", "patient", ")", "\n", "mean_num_tests", "+=", "len", "(", "history", ")", "\n", "best_found", "=", "np", ".", "max", "(", "[", "intervention", "[", "1", "]", "for", "intervention", "in", "history", "]", ")", "\n", "max_treatment_effect", "+=", "best_found", "\n", "", "max_treatment_effect", "/=", "n_test_samples", "\n", "mean_num_tests", "/=", "n_test_samples", "\n", "return", "max_treatment_effect", ",", "mean_num_tests", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.training_to_validation_data": [[300, 322], ["range", "len", "range", "patients.append", "numpy.ones", "len", "history_to_state", "deep_q_learning.DeepQLearning.approximator.calculate_probabilities", "numpy.squeeze", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.history_to_state", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.calculate_probabilities"], ["", "def", "training_to_validation_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "x_s", "=", "data", "[", "'x'", "]", "\n", "histories", "=", "data", "[", "'h'", "]", "\n", "patients", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "x_s", ")", ")", ":", "\n", "            ", "x", "=", "x_s", "[", "i", "]", "\n", "history", "=", "histories", "[", "i", "]", "\n", "y_fac", "=", "np", ".", "ones", "(", "self", ".", "n_a", ")", "*", "-", "1", "\n", "for", "intervention", "in", "history", ":", "\n", "                ", "treatment", ",", "outcome", "=", "intervention", "\n", "y_fac", "[", "treatment", "]", "=", "outcome", "\n", "", "for", "treatment", "in", "range", "(", "len", "(", "y_fac", ")", ")", ":", "\n", "                ", "if", "y_fac", "[", "treatment", "]", "==", "-", "1", ":", "\n", "                    ", "state", "=", "history_to_state", "(", "history", ",", "self", ".", "n_a", ")", "\n", "# estimate outcome", "\n", "probs", "=", "self", ".", "approximator", ".", "calculate_probabilities", "(", "x", ",", "state", ",", "treatment", ")", "\n", "estimated_outcome", "=", "np", ".", "squeeze", "(", "np", ".", "random", ".", "choice", "(", "self", ".", "n_y", ",", "1", ",", "p", "=", "probs", ")", ")", "\n", "y_fac", "[", "treatment", "]", "=", "estimated_outcome", "\n", "", "", "z", "=", "-", "1", "\n", "patient", "=", "(", "z", ",", "x", ",", "y_fac", ")", "\n", "patients", ".", "append", "(", "patient", ")", "\n", "", "return", "patients", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.get_reward": [[323, 335], ["deep_q_learning.DeepQLearning.constraint.no_better_treatment_exist", "print", "sys.exit"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.better_treatment_constraint.Constraint.no_better_treatment_exist"], ["", "def", "get_reward", "(", "self", ",", "action", ",", "history", ",", "x", ")", ":", "\n", "        ", "gamma", "=", "self", ".", "constraint", ".", "no_better_treatment_exist", "(", "history", ",", "x", ")", "\n", "if", "action", "==", "self", ".", "stop_action", "and", "gamma", "==", "0", ":", "\n", "            ", "return", "-", "100000000000", "\n", "", "elif", "action", "==", "self", ".", "stop_action", "and", "gamma", "==", "1", ":", "\n", "            ", "return", "0", "\n", "", "elif", "self", ".", "stop_action", ">", "action", ">=", "0", ":", "\n", "            ", "return", "-", "1", "\n", "", "else", ":", "\n", "            ", "import", "sys", "\n", "print", "(", "gamma", ",", "action", ",", "history", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.normalize_data": [[336, 340], ["None"], "methods", ["None"], ["", "", "def", "normalize_data", "(", "self", ",", "input", ")", ":", "\n", "#Normalization seem to suck for this input", "\n", "#input = (input - -1)/(self.n_y - -1)", "\n", "        ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.create_state": [[341, 344], ["numpy.concatenate().astype", "numpy.concatenate"], "methods", ["None"], ["", "def", "create_state", "(", "self", ",", "x", ",", "h_state", ")", ":", "\n", "        ", "state", "=", "np", ".", "concatenate", "(", "(", "x", ",", "h_state", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.DeepQLearning.action_index": [[345, 347], ["None"], "methods", ["None"], ["", "def", "action_index", "(", "self", ",", "action_index", ")", ":", "\n", "        ", "return", "self", ".", "n_x", "+", "action_index", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.dense": [[9, 13], ["tensorflow.matmul", "tensorflow.tf.nn.relu", "tensorflow.tf.nn.relu"], "function", ["None"], ["def", "dense", "(", "x", ",", "weights", ",", "bias", ",", "activation", "=", "tf", ".", "identity", ",", "**", "activation_kwargs", ")", ":", "\n", "    ", "\"\"\"Dense layer.\"\"\"", "\n", "z", "=", "tf", ".", "matmul", "(", "x", ",", "weights", ")", "+", "bias", "\n", "return", "activation", "(", "z", ",", "**", "activation_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.deep_q_learning.init_weights": [[15, 23], ["tensorflow.Variable", "initializer"], "function", ["None"], ["", "def", "init_weights", "(", "shape", ",", "initializer", ")", ":", "\n", "    ", "\"\"\"Initialize weights for tensorflow layer.\"\"\"", "\n", "weights", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "shape", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", "\n", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.true_constraint.TrueConstraint.__init__": [[5, 11], ["Algorithms.Constraints.better_treatment_constraint.Constraint.__init__", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dist", ",", "approximator", ",", "delta", "=", "0.0", ",", "epsilon", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "None", ",", "dist", ".", "n_a", ",", "dist", ".", "n_y", ",", "None", ",", "delta", ",", "epsilon", ")", "\n", "self", ".", "dist", "=", "dist", "\n", "self", ".", "approximator", "=", "approximator", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "probability_matrix", "=", "np", ".", "ones", "(", "(", "2", ",", ")", "*", "self", ".", "dist", ".", "n_x", "+", "(", "self", ".", "dist", ".", "n_y", "+", "1", ",", ")", "*", "self", ".", "dist", ".", "n_a", ")", "*", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.true_constraint.TrueConstraint.no_better_treatment_exist": [[12, 17], ["true_constraint.TrueConstraint.calculate_total_probability_of_better"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.true_constraint.TrueConstraint.calculate_total_probability_of_better"], ["", "def", "no_better_treatment_exist", "(", "self", ",", "current_outcomes", ",", "x", ")", ":", "\n", "        ", "prob", "=", "self", ".", "calculate_total_probability_of_better", "(", "x", ",", "current_outcomes", ")", "\n", "if", "prob", "<=", "self", ".", "delta", ":", "\n", "            ", "return", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.true_constraint.TrueConstraint.calculate_total_probability_of_better": [[18, 35], ["tuple", "numpy.hstack", "numpy.max", "numpy.min", "numpy.argwhere().flatten", "numpy.zeros", "numpy.mean", "true_constraint.TrueConstraint.calculate_probability_of_better", "numpy.argwhere", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.true_constraint.TrueConstraint.calculate_probability_of_better"], ["", "def", "calculate_total_probability_of_better", "(", "self", ",", "x", ",", "current_outcomes", ")", ":", "\n", "        ", "state", "=", "tuple", "(", "np", ".", "hstack", "(", "(", "x", ",", "current_outcomes", ")", ")", ")", "\n", "if", "np", ".", "max", "(", "current_outcomes", ")", "==", "-", "1", ":", "\n", "            ", "prob", "=", "np", ".", "inf", "\n", "", "elif", "np", ".", "min", "(", "current_outcomes", ")", "!=", "-", "1", ":", "\n", "            ", "prob", "=", "0", "\n", "", "elif", "self", ".", "probability_matrix", "[", "state", "]", "!=", "-", "1", ":", "\n", "            ", "prob", "=", "self", ".", "probability_matrix", "[", "state", "]", "\n", "", "else", ":", "\n", "            ", "possible_actions", "=", "np", ".", "argwhere", "(", "np", ".", "array", "(", "current_outcomes", ")", "==", "-", "1", ")", ".", "flatten", "(", ")", "\n", "next_step_probs", "=", "np", ".", "zeros", "(", "self", ".", "dist", ".", "n_a", ")", "\n", "for", "a_next", "in", "possible_actions", ":", "\n", "                ", "next_step_probs", "[", "a_next", "]", "=", "self", ".", "calculate_probability_of_better", "(", "x", ",", "current_outcomes", ",", "a_next", ")", "\n", "\n", "", "self", ".", "probability_matrix", "[", "state", "]", "=", "np", ".", "mean", "(", "next_step_probs", "[", "possible_actions", "]", ")", "\n", "prob", "=", "self", ".", "probability_matrix", "[", "state", "]", "\n", "", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.true_constraint.TrueConstraint.calculate_probability_of_better": [[36, 53], ["numpy.max", "numpy.zeros", "range", "range", "true_constraint.TrueConstraint.approximator.calculate_probability", "numpy.copy", "true_constraint.TrueConstraint.calculate_total_probability_of_better"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.calculate_probability", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.true_constraint.TrueConstraint.calculate_total_probability_of_better"], ["", "def", "calculate_probability_of_better", "(", "self", ",", "x", ",", "current_outcomes", ",", "a", ")", ":", "\n", "        ", "best_outcome", "=", "np", ".", "max", "(", "current_outcomes", ")", "\n", "if", "best_outcome", ">=", "self", ".", "dist", ".", "n_y", "-", "1", ":", "\n", "            ", "return", "0", "\n", "", "probs", "=", "np", ".", "zeros", "(", "self", ".", "dist", ".", "n_y", ")", "\n", "prob", "=", "0", "\n", "for", "y", "in", "range", "(", "self", ".", "dist", ".", "n_y", ")", ":", "\n", "            ", "probs", "[", "y", "]", "=", "self", ".", "approximator", ".", "calculate_probability", "(", "x", ",", "current_outcomes", ",", "a", ",", "y", ")", "\n", "", "for", "y", "in", "range", "(", "self", ".", "dist", ".", "n_y", ")", ":", "\n", "            ", "if", "y", "<=", "best_outcome", ":", "\n", "                ", "future_outcomes", "=", "np", ".", "copy", "(", "current_outcomes", ")", "\n", "future_outcomes", "[", "a", "]", "=", "y", "\n", "prob", "+=", "probs", "[", "y", "]", "*", "self", ".", "calculate_total_probability_of_better", "(", "x", ",", "future_outcomes", ")", "\n", "", "else", ":", "\n", "                ", "prob", "+=", "probs", "[", "y", "]", "\n", "\n", "", "", "return", "prob", "", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.better_treatment_constraint.Constraint.__init__": [[6, 22], ["str.lower", "str.lower"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "n_actions", ",", "steps_y", ",", "approximator", ",", "prior_weight", "=", "2", ",", "z_value", "=", "1.96", ",", "delta", "=", "0", ",", "epsilon", "=", "0", ",", "bound", "=", "'upper'", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "n_actions", "=", "n_actions", "\n", "self", ".", "better_treatment_constraint_dict", "=", "{", "}", "\n", "self", ".", "accuracy", "=", "prior_weight", "\n", "self", ".", "optimism", "=", "z_value", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "max_possible_outcome", "=", "steps_y", "-", "1", "\n", "self", ".", "init_similar_patients", "=", "{", "}", "\n", "self", ".", "n_outcomes", "=", "steps_y", "\n", "self", ".", "approximator", "=", "approximator", "\n", "if", "str", ".", "lower", "(", "bound", ")", "==", "'upper'", ":", "\n", "            ", "self", ".", "bound", "=", "self", ".", "upper_bound_constraint", "\n", "", "elif", "str", ".", "lower", "(", "bound", ")", "==", "'lower'", ":", "\n", "            ", "self", ".", "bound", "=", "self", ".", "lower_bound_constraint", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.better_treatment_constraint.Constraint.no_better_treatment_exist": [[23, 47], ["hash_state", "better_treatment_constraint.Constraint.better_treatment_constraint_dict.keys", "max", "numpy.count_nonzero", "numpy.count_nonzero", "better_treatment_constraint.Constraint.approximator.calculate_probability_constraint", "better_treatment_constraint.Constraint.bound", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.hash_state", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.calculate_probability_constraint"], ["", "", "def", "no_better_treatment_exist", "(", "self", ",", "outcomes_state", ",", "x", ")", ":", "\n", "        ", "dict_index", "=", "hash_state", "(", "x", ",", "outcomes_state", ")", "\n", "gamma", "=", "0", "\n", "if", "dict_index", "in", "self", ".", "better_treatment_constraint_dict", ".", "keys", "(", ")", ":", "\n", "            ", "gamma", "=", "self", ".", "better_treatment_constraint_dict", "[", "dict_index", "]", "\n", "", "else", ":", "\n", "            ", "max_outcome", "=", "max", "(", "outcomes_state", ")", "# double-check input here", "\n", "if", "max_outcome", "==", "self", ".", "max_possible_outcome", ":", "\n", "# If we already found max, stop", "\n", "                ", "gamma", "=", "1", "\n", "", "elif", "np", ".", "count_nonzero", "(", "np", ".", "array", "(", "outcomes_state", ")", "==", "-", "1", ")", "==", "0", ":", "\n", "# If we have tried all treatments, stop", "\n", "                ", "gamma", "=", "1", "\n", "", "elif", "np", ".", "count_nonzero", "(", "np", ".", "array", "(", "outcomes_state", ")", "==", "-", "1", ")", "==", "self", ".", "n_actions", ":", "\n", "# If we tried nothing, we can't stop yet", "\n", "                ", "gamma", "=", "0", "\n", "", "else", ":", "\n", "                ", "estimated_probability", "=", "self", ".", "approximator", ".", "calculate_probability_constraint", "(", "x", ",", "outcomes_state", ")", "\n", "probability_limit", "=", "self", ".", "bound", "(", "estimated_probability", ")", "\n", "\n", "if", "probability_limit", "<", "self", ".", "delta", ":", "\n", "                    ", "gamma", "=", "1", "\n", "", "", "self", ".", "better_treatment_constraint_dict", "[", "dict_index", "]", "=", "gamma", "\n", "", "return", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.better_treatment_constraint.Constraint.upper_bound_constraint": [[48, 51], ["numpy.sum"], "methods", ["None"], ["", "def", "upper_bound_constraint", "(", "self", ",", "estimated_probabilities", ")", ":", "\n", "        ", "sum_probability", "=", "np", ".", "sum", "(", "estimated_probabilities", ")", "\n", "return", "sum_probability", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Constraints.better_treatment_constraint.Constraint.lower_bound_constraint": [[52, 55], ["numpy.max"], "methods", ["None"], ["", "def", "lower_bound_constraint", "(", "self", ",", "estimated_probabilities", ")", ":", "\n", "        ", "max_probability", "=", "np", ".", "max", "(", "estimated_probabilities", ")", "\n", "return", "max_probability", "", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.__init__": [[5, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_x", ",", "n_a", ",", "n_y", ",", "data", ",", "epsilon", "=", "0", ")", ":", "\n", "        ", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_y", "=", "n_y", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "max_possible_outcome", "=", "self", ".", "n_y", "-", "1", "\n", "self", ".", "stop_action", "=", "self", ".", "n_a", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.calculate_probability": [[14, 16], ["None"], "methods", ["None"], ["", "def", "calculate_probability", "(", "self", ",", "x", ",", "history", ",", "action", ",", "outcome", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.calculate_probabilities": [[17, 19], ["None"], "methods", ["None"], ["", "def", "calculate_probabilities", "(", "self", ",", "x", ",", "history", ",", "action", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.to_index": [[20, 22], ["tuple", "numpy.hstack"], "methods", ["None"], ["", "def", "to_index", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "tuple", "(", "np", ".", "hstack", "(", "state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.calculate_probability_greedy": [[23, 34], ["numpy.sum", "numpy.zeros", "range", "numpy.divide"], "methods", ["None"], ["", "def", "calculate_probability_greedy", "(", "self", ",", "prob_matrix", ",", "best_outcome", ",", "use_expected_value", "=", "True", ")", ":", "\n", "        ", "tot", "=", "np", ".", "sum", "(", "prob_matrix", ",", "axis", "=", "1", ")", "\n", "tot", "[", "tot", "==", "0", "]", "=", "1", "\n", "ev_vec", "=", "np", ".", "zeros", "(", "self", ".", "n_a", ")", "\n", "for", "i", "in", "range", "(", "best_outcome", "+", "1", "+", "self", ".", "epsilon", ",", "self", ".", "n_y", ")", ":", "\n", "            ", "if", "use_expected_value", ":", "\n", "                ", "ev_vec", "+=", "prob_matrix", "[", ":", ",", "i", "]", "*", "i", "\n", "", "else", ":", "\n", "                ", "ev_vec", "+=", "prob_matrix", "[", ":", ",", "i", "]", "\n", "", "", "ev_vec", "=", "np", ".", "divide", "(", "ev_vec", ",", "tot", ")", "\n", "return", "ev_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.probability_approximator.ProbabilityApproximator.calculate_probability_constraint": [[35, 37], ["None"], "methods", ["None"], ["", "def", "calculate_probability_constraint", "(", "self", ",", "x", ",", "state", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.__init__": [[7, 20], ["Algorithms.Approximators.probability_approximator.ProbabilityApproximator.__init__", "statistical_approximator.StatisticalApproximator.get_patient_statistics", "statistical_approximator.StatisticalApproximator.history_to_compare_dict"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.__init__", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.get_patient_statistics", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.history_to_compare_dict"], ["    ", "def", "__init__", "(", "self", ",", "n_x", ",", "n_a", ",", "n_y", ",", "data", ",", "epsilon", "=", "0", ",", "smoothing_mode", "=", "'gaussian'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_x", ",", "n_a", ",", "n_y", ",", "data", ")", "\n", "self", ".", "statistics", "=", "self", ".", "get_patient_statistics", "(", ")", "\n", "self", ".", "histories_to_compare", "=", "self", ".", "history_to_compare_dict", "(", "self", ".", "data", "[", "'h'", "]", ",", "self", ".", "data", "[", "'x'", "]", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "name", "=", "'statistics approximator'", "\n", "if", "smoothing_mode", "==", "'gaussian'", ":", "\n", "            ", "self", ".", "default_kernel", "=", "self", ".", "kernel_gaussian", "\n", "", "elif", "smoothing_mode", "==", "'none'", ":", "\n", "            ", "self", ".", "default_kernel", "=", "self", ".", "kernel_no_history", "\n", "", "else", ":", "\n", "            ", "self", ".", "default_kernel", "=", "self", ".", "kernel_laplace", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.calculate_probability": [[21, 24], ["statistical_approximator.StatisticalApproximator.full_history_prior"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.full_history_prior"], ["", "", "def", "calculate_probability", "(", "self", ",", "x", ",", "history", ",", "action", ",", "outcome", ")", ":", "\n", "        ", "probs", "=", "self", ".", "full_history_prior", "(", "x", ",", "history", ",", "action", ",", "kernel", "=", "self", ".", "default_kernel", ")", "\n", "return", "probs", "[", "outcome", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.calculate_probabilities": [[25, 28], ["statistical_approximator.StatisticalApproximator.full_history_prior"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.full_history_prior"], ["", "def", "calculate_probabilities", "(", "self", ",", "x", ",", "history", ",", "action", ")", ":", "\n", "        ", "probs", "=", "self", ".", "full_history_prior", "(", "x", ",", "history", ",", "action", ",", "kernel", "=", "self", ".", "default_kernel", ")", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.get_patient_statistics": [[29, 47], ["numpy.zeros", "enumerate", "numpy.zeros", "numpy.ones", "tuple", "tuple"], "methods", ["None"], ["", "def", "get_patient_statistics", "(", "self", ")", ":", "\n", "        ", "histories", "=", "self", ".", "data", "[", "'h'", "]", "\n", "x_s", "=", "self", ".", "data", "[", "'x'", "]", "\n", "\n", "patient_statistics", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "n_x", "+", "(", "self", ".", "n_y", "+", "1", ",", ")", "*", "self", ".", "n_a", "+", "(", "self", ".", "n_a", ",", ")", "+", "(", "self", ".", "n_y", ",", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", ",", "history", "in", "enumerate", "(", "histories", ")", ":", "\n", "            ", "x", "=", "x_s", "[", "i", "]", "\n", "treatment", ",", "outcome", "=", "history", "[", "-", "1", "]", "\n", "chopped_history", "=", "history", "[", ":", "-", "1", "]", "\n", "index", "=", "np", ".", "ones", "(", "self", ".", "n_a", ",", "dtype", "=", "int", ")", "*", "-", "1", "\n", "new", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_a", ",", "self", ".", "n_y", ")", ",", "dtype", "=", "int", ")", "\n", "for", "h", "in", "chopped_history", ":", "\n", "                ", "index", "[", "h", "[", "0", "]", "]", "=", "h", "[", "1", "]", "\n", "", "new", "[", "treatment", ",", "outcome", "]", "=", "1", "\n", "ind", "=", "tuple", "(", "x", ")", "+", "tuple", "(", "index", ")", "\n", "patient_statistics", "[", "ind", "]", "+=", "new", "\n", "\n", "", "return", "patient_statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.calculate_probability_greedy": [[48, 57], ["numpy.zeros", "range", "statistical_approximator.StatisticalApproximator.full_history_prior", "range"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.full_history_prior"], ["", "def", "calculate_probability_greedy", "(", "self", ",", "state", ",", "best_outcome", ",", "use_expected_value", "=", "True", ")", ":", "\n", "        ", "x", ",", "history", "=", "state", "\n", "ev_vec", "=", "np", ".", "zeros", "(", "self", ".", "n_a", ")", "\n", "for", "a", "in", "range", "(", "self", ".", "n_a", ")", ":", "\n", "            ", "action_outcome_probs", "=", "self", ".", "full_history_prior", "(", "x", ",", "history", ",", "a", ",", "kernel", "=", "self", ".", "default_kernel", ")", "\n", "for", "y", "in", "range", "(", "self", ".", "n_y", ")", ":", "\n", "                ", "if", "y", ">", "best_outcome", "+", "self", ".", "epsilon", ":", "\n", "                    ", "ev_vec", "[", "a", "]", "+=", "y", "*", "action_outcome_probs", "[", "y", "]", "\n", "", "", "", "return", "ev_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.generate_all_possible_histories": [[58, 72], ["numpy.copy", "tuple", "len", "all_histories.append", "to_generate_for.pop", "range", "len", "numpy.copy", "tuple", "to_generate_for.append"], "methods", ["None"], ["", "def", "generate_all_possible_histories", "(", "self", ",", "state", ")", ":", "\n", "        ", "to_generate_for", "=", "[", "tuple", "(", "state", ")", "]", "\n", "all_histories", "=", "[", "]", "\n", "while", "len", "(", "to_generate_for", ")", ">", "0", ":", "\n", "            ", "all_histories", ".", "append", "(", "to_generate_for", "[", "0", "]", ")", "\n", "s", "=", "to_generate_for", ".", "pop", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "s", ")", ")", ":", "\n", "                ", "if", "s", "[", "i", "]", "!=", "-", "1", ":", "\n", "                    ", "s_tmp", "=", "np", ".", "copy", "(", "s", ")", "\n", "s_tmp", "[", "i", "]", "=", "-", "1", "\n", "s_tmp", "=", "tuple", "(", "s_tmp", ")", "\n", "if", "s_tmp", "not", "in", "to_generate_for", ":", "\n", "                        ", "to_generate_for", ".", "append", "(", "s_tmp", ")", "\n", "", "", "", "", "return", "np", ".", "copy", "(", "all_histories", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.calc_history_distance": [[73, 78], ["len", "len", "numpy.abs", "numpy.argwhere", "numpy.argwhere", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "calc_history_distance", "(", "self", ",", "history", ",", "other_history", ")", ":", "\n", "        ", "h_order", "=", "len", "(", "np", ".", "argwhere", "(", "np", ".", "array", "(", "history", ")", "!=", "-", "1", ")", ")", "\n", "oh_order", "=", "len", "(", "np", ".", "argwhere", "(", "np", ".", "array", "(", "other_history", ")", "!=", "-", "1", ")", ")", "\n", "diff", "=", "np", ".", "abs", "(", "h_order", "-", "oh_order", ")", "\n", "return", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.kernel_gaussian": [[79, 83], ["statistical_approximator.StatisticalApproximator.calc_history_distance", "numpy.exp", "statistical_approximator.StatisticalApproximator.calc_history_distance", "numpy.zeros", "len", "statistical_approximator.StatisticalApproximator.calc_history_distance"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.calc_history_distance", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.calc_history_distance", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.calc_history_distance"], ["", "def", "kernel_gaussian", "(", "self", ",", "current_state", ",", "historical_state", ")", ":", "\n", "        ", "diff", "=", "self", ".", "calc_history_distance", "(", "current_state", ",", "historical_state", ")", "\n", "k", "=", "np", ".", "exp", "(", "-", "(", "diff", "-", "1", ")", "**", "2", ")", "/", "(", "self", ".", "calc_history_distance", "(", "current_state", ",", "np", ".", "zeros", "(", "len", "(", "current_state", ")", ")", ")", "*", "2", "**", "(", "self", ".", "calc_history_distance", "(", "current_state", ",", "historical_state", ")", "-", "1", ")", ")", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.kernel_laplace": [[84, 87], ["statistical_approximator.StatisticalApproximator.calc_history_distance", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.calc_history_distance"], ["", "def", "kernel_laplace", "(", "self", ",", "current_state", ",", "historical_state", ")", ":", "\n", "        ", "diff", "=", "self", ".", "calc_history_distance", "(", "current_state", ",", "historical_state", ")", "\n", "return", "np", ".", "exp", "(", "-", "(", "diff", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.kernel_no_history": [[88, 93], ["statistical_approximator.StatisticalApproximator.calc_history_distance"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.calc_history_distance"], ["", "def", "kernel_no_history", "(", "self", ",", "current_state", ",", "historical_state", ")", ":", "\n", "        ", "diff", "=", "self", ".", "calc_history_distance", "(", "current_state", ",", "historical_state", ")", "\n", "if", "diff", "==", "0", ":", "\n", "            ", "return", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.get_probabilities": [[94, 100], ["numpy.sum", "tuple", "numpy.hstack"], "methods", ["None"], ["", "def", "get_probabilities", "(", "self", ",", "x", ",", "state", ",", "action", ")", ":", "\n", "        ", "stats", "=", "self", ".", "statistics", "[", "tuple", "(", "np", ".", "hstack", "(", "(", "x", ",", "state", ",", "action", ")", ")", ")", "]", "\n", "den", "=", "np", ".", "sum", "(", "stats", ")", "\n", "if", "den", "==", "0", ":", "\n", "            ", "den", "=", "1", "\n", "", "return", "stats", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.full_history_prior": [[101, 120], ["statistical_approximator.StatisticalApproximator.generate_all_possible_histories", "numpy.zeros", "numpy.zeros", "numpy.all", "numpy.sum", "statistical_approximator.StatisticalApproximator.get_probabilities", "numpy.sum", "numpy.max", "kernel", "tuple", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.generate_all_possible_histories", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.get_probabilities"], ["", "def", "full_history_prior", "(", "self", ",", "x", ",", "state", ",", "action", ",", "kernel", ")", ":", "\n", "        ", "histories", "=", "self", ".", "generate_all_possible_histories", "(", "state", ")", "\n", "total_probabilities", "=", "np", ".", "zeros", "(", "self", ".", "n_y", ")", "\n", "total_probabilities_prior", "=", "np", ".", "zeros", "(", "self", ".", "n_y", ")", "\n", "total_kernel", "=", "0", "\n", "for", "h", "in", "histories", ":", "\n", "            ", "if", "np", ".", "all", "(", "h", "==", "state", ")", ":", "\n", "                ", "total_probabilities", "+=", "self", ".", "statistics", "[", "tuple", "(", "np", ".", "hstack", "(", "(", "x", ",", "state", ",", "action", ")", ")", ")", "]", "\n", "", "else", ":", "\n", "                ", "probs", "=", "self", ".", "get_probabilities", "(", "x", ",", "h", ",", "action", ")", "\n", "if", "np", ".", "max", "(", "probs", ")", "!=", "0", ":", "\n", "                    ", "k", "=", "kernel", "(", "state", ",", "h", ")", "\n", "total_probabilities_prior", "+=", "k", "*", "probs", "\n", "total_kernel", "+=", "k", "\n", "", "", "", "if", "total_kernel", ">", "0", ":", "\n", "            ", "total_probabilities_prior", "*=", "4", "/", "total_kernel", "\n", "", "elif", "np", ".", "sum", "(", "total_probabilities", "+", "total_probabilities_prior", ")", "==", "0", ":", "\n", "            ", "total_probabilities_prior", "+=", "1", "\n", "", "return", "(", "total_probabilities", "+", "total_probabilities_prior", ")", "/", "np", ".", "sum", "(", "total_probabilities", "+", "total_probabilities_prior", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.calculate_probability_constraint": [[121, 138], ["numpy.max", "numpy.zeros", "range", "numpy.zeros", "range", "range", "statistical_approximator.StatisticalApproximator.full_history_prior"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.full_history_prior"], ["", "def", "calculate_probability_constraint", "(", "self", ",", "x", ",", "state", ")", ":", "\n", "        ", "best_outcome", "=", "np", ".", "max", "(", "state", ")", "\n", "full_probabilities", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_a", ",", "self", ".", "n_y", ")", ")", "\n", "for", "a", "in", "range", "(", "self", ".", "n_a", ")", ":", "\n", "            ", "if", "state", "[", "a", "]", "==", "-", "1", ":", "\n", "                ", "full_probabilities", "[", "a", "]", "=", "self", ".", "full_history_prior", "(", "x", ",", "state", ",", "a", ",", "self", ".", "default_kernel", ")", "\n", "", "", "better_probabilities", "=", "np", ".", "zeros", "(", "self", ".", "n_a", ")", "\n", "for", "a", "in", "range", "(", "self", ".", "n_a", ")", ":", "\n", "            ", "total", "=", "0", "\n", "for", "y", "in", "range", "(", "self", ".", "n_y", ")", ":", "\n", "                ", "total", "+=", "full_probabilities", "[", "a", "]", "[", "y", "]", "\n", "if", "y", ">", "best_outcome", ":", "\n", "                    ", "better_probabilities", "[", "a", "]", "+=", "full_probabilities", "[", "a", "]", "[", "y", "]", "\n", "", "", "if", "total", "==", "0", ":", "\n", "                ", "total", "=", "1", "\n", "", "better_probabilities", "[", "a", "]", "/=", "total", "\n", "", "return", "better_probabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.history_to_compare_dict": [[139, 150], ["enumerate", "hash_history", "state_dict[].append"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.hash_history"], ["", "def", "history_to_compare_dict", "(", "self", ",", "histories", ",", "xs", ")", ":", "\n", "        ", "state_dict", "=", "{", "}", "\n", "for", "i", ",", "history", "in", "enumerate", "(", "histories", ")", ":", "\n", "            ", "x", "=", "xs", "[", "i", "]", "\n", "temp_history", "=", "history", "[", ":", "-", "1", "]", "\n", "history_hash", "=", "hash_history", "(", "x", ",", "temp_history", ",", "self", ".", "n_a", ")", "\n", "try", ":", "\n", "                ", "state_dict", "[", "history_hash", "]", ".", "append", "(", "history", ")", "\n", "", "except", "KeyError", ":", "\n", "                ", "state_dict", "[", "history_hash", "]", "=", "[", "history", "]", "\n", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.statistical_approximator.StatisticalApproximator.find_counts": [[151, 160], ["numpy.zeros"], "methods", ["None"], ["", "def", "find_counts", "(", "self", ",", "patients", ",", "max_outcome", ")", ":", "\n", "        ", "counts", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_a", ",", "2", ")", ")", "\n", "for", "patient", "in", "patients", ":", "\n", "            ", "treatment", ",", "outcome", "=", "patient", "[", "-", "1", "]", "\n", "if", "outcome", ">", "max_outcome", "+", "self", ".", "epsilon", ":", "\n", "                ", "counts", "[", "treatment", "]", "[", "0", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "counts", "[", "treatment", "]", "[", "1", "]", "+=", "1", "\n", "", "", "return", "counts", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.exact_approximator.ExactApproximator.__init__": [[6, 12], ["Algorithms.Approximators.probability_approximator.ProbabilityApproximator.__init__", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dist", ",", "epsilon", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "0", ",", "0", ",", "0", ",", "None", ")", "\n", "self", ".", "dist", "=", "dist", "\n", "self", ".", "y_y_dict", "=", "dict", "(", ")", "\n", "self", ".", "y_h_dict", "=", "dict", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.exact_approximator.ExactApproximator.calculate_probability": [[13, 20], ["numpy.argwhere().flatten", "numpy.array", "exact_approximator.ExactApproximator.calculate_y_given_y_pr", "numpy.array.append", "numpy.argwhere", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.exact_approximator.ExactApproximator.calculate_y_given_y_pr"], ["", "def", "calculate_probability", "(", "self", ",", "x", ",", "history", ",", "action", ",", "outcome", ")", ":", "\n", "        ", "tried_history", "=", "np", ".", "argwhere", "(", "np", ".", "array", "(", "history", ")", "!=", "-", "1", ")", ".", "flatten", "(", ")", "\n", "h_list", "=", "[", "]", "\n", "for", "h", "in", "tried_history", ":", "\n", "            ", "h_list", ".", "append", "(", "np", ".", "array", "(", "(", "h", ",", "history", "[", "h", "]", ")", ")", ")", "\n", "", "h_list", "=", "np", ".", "array", "(", "h_list", ")", "\n", "return", "self", ".", "calculate_y_given_y_pr", "(", "x", ",", "outcome", ",", "action", ",", "h_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.exact_approximator.ExactApproximator.calculate_probabilities": [[21, 26], ["numpy.zeros", "range", "exact_approximator.ExactApproximator.calculate_probability"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.calculate_probability"], ["", "def", "calculate_probabilities", "(", "self", ",", "x", ",", "history", ",", "action", ")", ":", "\n", "        ", "outcomes", "=", "np", ".", "zeros", "(", "self", ".", "dist", ".", "n_y", ")", "\n", "for", "y", "in", "range", "(", "self", ".", "dist", ".", "n_y", ")", ":", "\n", "            ", "outcomes", "[", "y", "]", "=", "self", ".", "calculate_probability", "(", "x", ",", "history", ",", "action", ",", "y", ")", "\n", "", "return", "outcomes", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.exact_approximator.ExactApproximator.calculate_probability_greedy": [[27, 35], ["numpy.zeros", "range", "range", "exact_approximator.ExactApproximator.calculate_probability"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.calculate_probability"], ["", "def", "calculate_probability_greedy", "(", "self", ",", "state", ",", "best_outcome", ",", "use_expected_value", "=", "True", ")", ":", "\n", "        ", "total_ev", "=", "np", ".", "zeros", "(", "self", ".", "dist", ".", "n_a", ")", "\n", "x", ",", "outcome_state", "=", "state", "\n", "for", "y", "in", "range", "(", "self", ".", "dist", ".", "n_y", ")", ":", "\n", "            ", "if", "y", ">", "best_outcome", "+", "self", ".", "epsilon", ":", "\n", "                ", "for", "a", "in", "range", "(", "self", ".", "dist", ".", "n_a", ")", ":", "\n", "                    ", "total_ev", "[", "a", "]", "+=", "self", ".", "calculate_probability", "(", "x", ",", "outcome_state", ",", "a", ",", "y", ")", "*", "y", "\n", "", "", "", "return", "total_ev", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.exact_approximator.ExactApproximator.calculate_probability_constraint": [[36, 44], ["numpy.zeros", "range", "range", "numpy.max", "exact_approximator.ExactApproximator.calculate_probability"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.calculate_probability"], ["", "def", "calculate_probability_constraint", "(", "self", ",", "x", ",", "state", ")", ":", "\n", "        ", "probs", "=", "np", ".", "zeros", "(", "self", ".", "dist", ".", "n_a", ")", "\n", "for", "a", "in", "range", "(", "self", ".", "dist", ".", "n_a", ")", ":", "\n", "            ", "if", "state", "[", "a", "]", "==", "-", "1", ":", "\n", "                ", "for", "y", "in", "range", "(", "self", ".", "dist", ".", "n_y", ")", ":", "\n", "                    ", "if", "y", ">", "np", ".", "max", "(", "state", ")", ":", "\n", "                        ", "probs", "[", "a", "]", "+=", "self", ".", "calculate_probability", "(", "x", ",", "state", ",", "a", ",", "y", ")", "\n", "", "", "", "", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.exact_approximator.ExactApproximator.calculate_y_given_y_pr": [[45, 61], ["numpy.hstack", "tuple", "len", "numpy.ndenumerate", "numpy.ndenumerate", "history.flatten", "numpy.zeros", "numpy.zeros", "exact_approximator.ExactApproximator.calculate_y_given_z_pr", "exact_approximator.ExactApproximator.dist.calc_z_given_x_probability", "exact_approximator.ExactApproximator.calculate_z_given_history_pr", "exact_approximator.ExactApproximator.calculate_y_given_z_pr"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.exact_approximator.ExactApproximator.calculate_y_given_z_pr", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.calc_z_given_x_probability", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.exact_approximator.ExactApproximator.calculate_z_given_history_pr", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.exact_approximator.ExactApproximator.calculate_y_given_z_pr"], ["", "def", "calculate_y_given_y_pr", "(", "self", ",", "x", ",", "outcome", ",", "action", ",", "history", ")", ":", "\n", "        ", "idx", "=", "np", ".", "hstack", "(", "[", "x", ",", "outcome", ",", "action", ",", "history", ".", "flatten", "(", ")", "]", ")", "\n", "idx", "=", "tuple", "(", "idx", ")", "\n", "if", "idx", "in", "self", ".", "y_y_dict", ":", "\n", "            ", "return", "self", ".", "y_y_dict", "[", "idx", "]", "\n", "\n", "", "total_probability", "=", "0", "\n", "if", "len", "(", "history", ")", "==", "0", ":", "\n", "            ", "for", "z", ",", "_", "in", "np", ".", "ndenumerate", "(", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "dist", ".", "n_z", ")", ")", ":", "\n", "                ", "total_probability", "+=", "self", ".", "calculate_y_given_z_pr", "(", "x", ",", "z", ",", "action", ",", "outcome", ")", "*", "self", ".", "dist", ".", "calc_z_given_x_probability", "(", "z", ",", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "z", ",", "_", "in", "np", ".", "ndenumerate", "(", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "dist", ".", "n_z", ")", ")", ":", "\n", "                ", "total_probability", "+=", "self", ".", "calculate_z_given_history_pr", "(", "x", ",", "z", ",", "history", ")", "*", "self", ".", "calculate_y_given_z_pr", "(", "x", ",", "z", ",", "action", ",", "outcome", ")", "\n", "", "", "self", ".", "y_y_dict", "[", "idx", "]", "=", "total_probability", "\n", "return", "total_probability", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.exact_approximator.ExactApproximator.calculate_z_given_history_pr": [[62, 78], ["numpy.hstack", "tuple", "exact_approximator.ExactApproximator.dist.calc_z_given_x_probability", "numpy.copy", "range", "exact_approximator.ExactApproximator.calculate_y_given_z_pr", "len", "exact_approximator.ExactApproximator.calculate_y_given_y_pr", "numpy.copy.flatten"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.DiscreteDistribution.calc_z_given_x_probability", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.exact_approximator.ExactApproximator.calculate_y_given_z_pr", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.exact_approximator.ExactApproximator.calculate_y_given_y_pr"], ["", "def", "calculate_z_given_history_pr", "(", "self", ",", "x", ",", "z", ",", "history", ")", ":", "\n", "        ", "idx", "=", "np", ".", "hstack", "(", "[", "x", ",", "z", ",", "history", ".", "flatten", "(", ")", "]", ")", "\n", "idx", "=", "tuple", "(", "idx", ")", "\n", "if", "idx", "in", "self", ".", "y_h_dict", ":", "\n", "            ", "return", "self", ".", "y_h_dict", "[", "idx", "]", "\n", "", "total_prob", "=", "self", ".", "dist", ".", "calc_z_given_x_probability", "(", "z", ",", "x", ")", "\n", "history", "=", "np", ".", "copy", "(", "history", ")", "\n", "for", "h", "in", "history", ":", "\n", "            ", "action", ",", "outcome", "=", "h", "\n", "total_prob", "*=", "self", ".", "calculate_y_given_z_pr", "(", "x", ",", "z", ",", "action", ",", "outcome", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "history", ")", ")", ":", "\n", "            ", "h", "=", "history", "[", "i", "]", "\n", "action", ",", "outcome", "=", "h", "\n", "total_prob", "/=", "self", ".", "calculate_y_given_y_pr", "(", "x", ",", "outcome", ",", "action", ",", "history", "[", "i", "+", "1", ":", "]", ")", "\n", "", "self", ".", "y_h_dict", "[", "idx", "]", "=", "total_prob", "\n", "return", "total_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.exact_approximator.ExactApproximator.calculate_y_given_z_pr": [[79, 81], ["exact_approximator.ExactApproximator.dist.calc_y_weights"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.DataGenerator.distributions.ToyDistribution2SlightlyRandom.calc_y_weights"], ["", "def", "calculate_y_given_z_pr", "(", "self", ",", "x", ",", "z", ",", "action", ",", "outcome", ")", ":", "\n", "        ", "return", "self", ".", "dist", ".", "calc_y_weights", "(", "action", ",", "x", ",", "z", ")", "[", "outcome", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.__init__": [[8, 27], ["Algorithms.Approximators.probability_approximator.ProbabilityApproximator.__init__", "sklearn.ensemble.RandomForestClassifier", "len", "numpy.zeros", "numpy.zeros", "range", "function_approximation.FunctionApproximation.model.fit", "function_approximation.FunctionApproximation.get_features"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.__init__", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.get_features"], ["    ", "def", "__init__", "(", "self", ",", "n_x", ",", "n_a", ",", "n_y", ",", "data", ",", "epsilon", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_x", ",", "n_a", ",", "n_y", ",", "data", ",", "epsilon", ")", "\n", "self", ".", "model", "=", "RandomForestClassifier", "(", "n_jobs", "=", "1", ",", "random_state", "=", "1337", ")", "\n", "self", ".", "name", "=", "'Random forest approximator'", "\n", "self", ".", "xs", "=", "data", "[", "'x'", "]", "\n", "self", ".", "histories", "=", "data", "[", "'h'", "]", "\n", "self", ".", "n_samples", "=", "len", "(", "self", ".", "xs", ")", "\n", "self", ".", "n_features", "=", "n_x", "+", "n_a", "+", "n_a", "+", "1", "\n", "self", ".", "predictions_dict", "=", "{", "}", "\n", "self", ".", "predictions_all_actions_dict", "=", "{", "}", "\n", "input_data", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_samples", ",", "self", ".", "n_features", ")", ")", "\n", "output_data", "=", "np", ".", "zeros", "(", "self", ".", "n_samples", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_samples", ")", ":", "\n", "            ", "x", "=", "self", ".", "xs", "[", "i", "]", "\n", "h", "=", "self", ".", "histories", "[", "i", "]", "\n", "inp", ",", "outp", "=", "self", ".", "get_features", "(", "x", ",", "h", ")", "\n", "input_data", "[", "i", "]", "=", "inp", "\n", "output_data", "[", "i", "]", "=", "outp", "\n", "", "self", ".", "model", ".", "fit", "(", "input_data", ",", "output_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.get_features": [[28, 33], ["function_approximation.FunctionApproximation.history_to_actions_and_outcomes", "function_approximation.FunctionApproximation.fill_feature_vector"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.history_to_actions_and_outcomes", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.fill_feature_vector"], ["", "def", "get_features", "(", "self", ",", "x", ",", "history", ")", ":", "\n", "        ", "last_action", ",", "last_outcome", "=", "history", "[", "-", "1", "]", "\n", "actions", ",", "outcomes", "=", "self", ".", "history_to_actions_and_outcomes", "(", "history", "[", ":", "-", "1", "]", ")", "\n", "features", "=", "self", ".", "fill_feature_vector", "(", "x", ",", "actions", ",", "outcomes", ",", "last_action", ")", "\n", "return", "features", ",", "last_outcome", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.history_to_actions_and_outcomes": [[34, 42], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "history_to_actions_and_outcomes", "(", "self", ",", "history", ")", ":", "\n", "        ", "actions", "=", "np", ".", "zeros", "(", "self", ".", "n_a", ")", "\n", "outcomes", "=", "np", ".", "zeros", "(", "self", ".", "n_a", ")", "\n", "for", "intervention", "in", "history", ":", "\n", "            ", "treatment", ",", "outcome", "=", "intervention", "\n", "actions", "[", "treatment", "]", "=", "1", "\n", "outcomes", "[", "treatment", "]", "=", "outcome", "\n", "", "return", "actions", ",", "outcomes", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.state_to_actions_and_outcomes": [[43, 51], ["numpy.zeros", "numpy.zeros", "enumerate"], "methods", ["None"], ["", "def", "state_to_actions_and_outcomes", "(", "self", ",", "state", ")", ":", "\n", "        ", "actions", "=", "np", ".", "zeros", "(", "self", ".", "n_a", ")", "\n", "outcomes", "=", "np", ".", "zeros", "(", "self", ".", "n_a", ")", "\n", "for", "treatment", ",", "outcome", "in", "enumerate", "(", "state", ")", ":", "\n", "            ", "if", "outcome", ">", "-", "1", ":", "\n", "                ", "actions", "[", "treatment", "]", "=", "1", "\n", "outcomes", "[", "treatment", "]", "=", "outcome", "\n", "", "", "return", "actions", ",", "outcomes", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.fill_feature_vector": [[52, 64], ["numpy.zeros"], "methods", ["None"], ["", "def", "fill_feature_vector", "(", "self", ",", "x", ",", "actions", ",", "outcomes", ",", "last_action", "=", "None", ")", ":", "\n", "        ", "if", "last_action", "is", "None", ":", "\n", "            ", "n_features", "=", "self", ".", "n_features", "-", "1", "\n", "", "else", ":", "\n", "            ", "n_features", "=", "self", ".", "n_features", "\n", "", "features", "=", "np", ".", "zeros", "(", "n_features", ")", "\n", "features", "[", ":", "self", ".", "n_x", "]", "=", "x", "\n", "features", "[", "self", ".", "n_x", ":", "self", ".", "n_x", "+", "self", ".", "n_a", "]", "=", "actions", "\n", "features", "[", "self", ".", "n_x", "+", "self", ".", "n_a", ":", "self", ".", "n_x", "+", "self", ".", "n_a", "+", "self", ".", "n_a", "]", "=", "outcomes", "\n", "if", "last_action", "is", "not", "None", ":", "\n", "            ", "features", "[", "self", ".", "n_x", "+", "self", ".", "n_a", "+", "self", ".", "n_a", ":", "self", ".", "n_x", "+", "self", ".", "n_a", "+", "self", ".", "n_a", "+", "1", "]", "=", "last_action", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.prepare_calculation": [[65, 89], ["numpy.zeros", "range", "function_approximation.FunctionApproximation.state_to_actions_and_outcomes", "function_approximation.FunctionApproximation.fill_feature_vector", "hash_array", "function_approximation.FunctionApproximation.model.predict_proba", "function_approximation.FunctionApproximation.state_to_actions_and_outcomes", "function_approximation.FunctionApproximation.fill_feature_vector", "hash_array", "function_approximation.FunctionApproximation.reshape", "function_approximation.FunctionApproximation.model.predict_proba", "function_approximation.FunctionApproximation.reshape"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.state_to_actions_and_outcomes", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.fill_feature_vector", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.hash_array", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.state_to_actions_and_outcomes", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.fill_feature_vector", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Algorithms.help_functions.hash_array"], ["", "def", "prepare_calculation", "(", "self", ",", "x", ",", "history", ",", "action", "=", "None", ")", ":", "\n", "        ", "if", "action", "is", "None", ":", "\n", "            ", "probability_of_outcome_approximation", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_a", ",", "self", ".", "n_y", ")", ")", "\n", "for", "action", "in", "range", "(", "self", ".", "n_a", ")", ":", "\n", "                ", "if", "history", "[", "action", "]", "==", "-", "1", ":", "\n", "                    ", "old_actions", ",", "old_outcomes", "=", "self", ".", "state_to_actions_and_outcomes", "(", "history", ")", "\n", "features", "=", "self", ".", "fill_feature_vector", "(", "x", ",", "old_actions", ",", "old_outcomes", ",", "action", ")", "\n", "h", "=", "hash_array", "(", "features", ")", "\n", "if", "h", "in", "self", ".", "predictions_dict", ":", "\n", "                        ", "prediction", "=", "self", ".", "predictions_dict", "[", "h", "]", "\n", "", "else", ":", "\n", "                        ", "prediction", "=", "self", ".", "model", ".", "predict_proba", "(", "features", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "self", ".", "predictions_dict", "[", "h", "]", "=", "prediction", "\n", "", "probability_of_outcome_approximation", "[", "action", "]", "=", "prediction", "\n", "", "", "", "else", ":", "\n", "            ", "old_actions", ",", "old_outcomes", "=", "self", ".", "state_to_actions_and_outcomes", "(", "history", ")", "\n", "features", "=", "self", ".", "fill_feature_vector", "(", "x", ",", "old_actions", ",", "old_outcomes", ",", "action", ")", "\n", "h", "=", "hash_array", "(", "features", ")", "\n", "if", "h", "in", "self", ".", "predictions_all_actions_dict", ":", "\n", "                ", "probability_of_outcome_approximation", "=", "self", ".", "predictions_all_actions_dict", "[", "h", "]", "\n", "", "else", ":", "\n", "                ", "probability_of_outcome_approximation", "=", "self", ".", "model", ".", "predict_proba", "(", "features", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "self", ".", "predictions_all_actions_dict", "[", "h", "]", "=", "probability_of_outcome_approximation", "\n", "", "", "return", "probability_of_outcome_approximation", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.calculate_probability": [[90, 93], ["function_approximation.FunctionApproximation.prepare_calculation"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.prepare_calculation"], ["", "def", "calculate_probability", "(", "self", ",", "x", ",", "history", ",", "action", ",", "outcome", ")", ":", "\n", "        ", "probs", "=", "self", ".", "prepare_calculation", "(", "x", ",", "history", ",", "action", ")", "\n", "return", "probs", "[", "0", "]", "[", "outcome", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.calculate_probabilities": [[94, 97], ["function_approximation.FunctionApproximation.prepare_calculation"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.prepare_calculation"], ["", "def", "calculate_probabilities", "(", "self", ",", "x", ",", "history", ",", "action", ")", ":", "\n", "        ", "probs", "=", "self", ".", "prepare_calculation", "(", "x", ",", "history", ",", "action", ")", "\n", "return", "probs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.calculate_probability_greedy": [[98, 103], ["function_approximation.FunctionApproximation.prepare_calculation", "super().calculate_probability_greedy"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.prepare_calculation", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.calculate_probability_greedy"], ["", "def", "calculate_probability_greedy", "(", "self", ",", "state", ",", "best_outcome", ",", "use_expected_value", "=", "True", ")", ":", "\n", "        ", "x", ",", "history", "=", "state", "\n", "probability_of_outcome_approximation", "=", "self", ".", "prepare_calculation", "(", "x", ",", "history", ")", "\n", "return", "super", "(", "FunctionApproximation", ",", "self", ")", ".", "calculate_probability_greedy", "(", "\n", "probability_of_outcome_approximation", ",", "best_outcome", ",", "use_expected_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.calculate_probability_constraint": [[104, 109], ["function_approximation.FunctionApproximation.prepare_calculation", "max", "super().calculate_probability_greedy"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.prepare_calculation", "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.function_approximation.FunctionApproximation.calculate_probability_greedy"], ["", "def", "calculate_probability_constraint", "(", "self", ",", "x", ",", "state", ",", "accuracy", "=", "None", ")", ":", "\n", "        ", "probability_of_outcome_approximation", "=", "self", ".", "prepare_calculation", "(", "x", ",", "state", ")", "\n", "max_outcome", "=", "max", "(", "state", ")", "\n", "return", "super", "(", "FunctionApproximation", ",", "self", ")", ".", "calculate_probability_greedy", "(", "\n", "probability_of_outcome_approximation", ",", "max_outcome", ",", "use_expected_value", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.__init__": [[6, 12], ["doctor_approximator.DoctorApproximator.get_patient_statistics"], "methods", ["home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.get_patient_statistics"], ["    ", "def", "__init__", "(", "self", ",", "n_x", ",", "n_a", ",", "n_y", ",", "data", ",", "epsilon", "=", "0", ")", ":", "\n", "        ", "self", ".", "n_x", "=", "n_x", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "n_y", "=", "n_y", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "statistics", "=", "self", ".", "get_patient_statistics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.get_patient_statistics": [[13, 31], ["numpy.zeros", "enumerate", "numpy.zeros", "numpy.ones", "tuple", "tuple"], "methods", ["None"], ["", "def", "get_patient_statistics", "(", "self", ")", ":", "\n", "        ", "histories", "=", "self", ".", "data", "[", "'h'", "]", "\n", "x_s", "=", "self", ".", "data", "[", "'x'", "]", "\n", "\n", "patient_statistics", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", "*", "self", ".", "n_x", "+", "(", "self", ".", "n_y", "+", "1", ",", ")", "*", "self", ".", "n_a", "+", "(", "self", ".", "n_a", ",", ")", "+", "(", "self", ".", "n_y", ",", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", ",", "history", "in", "enumerate", "(", "histories", ")", ":", "\n", "            ", "x", "=", "x_s", "[", "i", "]", "\n", "treatment", ",", "outcome", "=", "history", "[", "-", "1", "]", "\n", "chopped_history", "=", "history", "[", ":", "-", "1", "]", "\n", "index", "=", "np", ".", "ones", "(", "self", ".", "n_a", ",", "dtype", "=", "int", ")", "*", "-", "1", "\n", "new", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_a", ",", "self", ".", "n_y", ")", ",", "dtype", "=", "int", ")", "\n", "for", "h", "in", "chopped_history", ":", "\n", "                ", "index", "[", "h", "[", "0", "]", "]", "=", "h", "[", "1", "]", "\n", "", "new", "[", "treatment", ",", "outcome", "]", "=", "1", "\n", "ind", "=", "tuple", "(", "x", ")", "+", "tuple", "(", "index", ")", "\n", "patient_statistics", "[", "ind", "]", "+=", "new", "\n", "\n", "", "return", "patient_statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.Healthy-AI_TreatmentExploration.Approximators.doctor_approximator.DoctorApproximator.calculate_probability": [[32, 37], ["tuple", "numpy.array", "numpy.hstack", "numpy.sum"], "methods", ["None"], ["", "def", "calculate_probability", "(", "self", ",", "x", ",", "state", ")", ":", "\n", "        ", "index", "=", "tuple", "(", "np", ".", "hstack", "(", "(", "x", ",", "state", ")", ")", ")", "\n", "actions_and_outcomes", "=", "self", ".", "statistics", "[", "index", "]", "\n", "actions", "=", "np", ".", "array", "(", "np", ".", "sum", "(", "actions_and_outcomes", ",", "axis", "=", "1", ")", ",", "dtype", "=", "float", ")", "\n", "return", "actions", "\n", "", "", ""]]}