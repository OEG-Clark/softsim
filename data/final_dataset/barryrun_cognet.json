{"home.repos.pwc.inspect_result.barryrun_cognet.src.MICRON.eval": [[40, 178], ["model.eval", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "util.ddi_rate_score", "util.llprint", "enumerate", "smm_record.append", "util.multi_label_metric", "ja.append", "prauc.append", "avg_p.append", "avg_r.append", "avg_f1.append", "util.llprint", "range", "range", "range", "range", "range", "range", "range", "len", "numpy.zeros", "y_gt.append", "label_list.append", "len", "add_list.append", "delete_list.append", "numpy.array", "numpy.array", "numpy.array", "len", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "util.ddi_rate_score", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "numpy.array", "model", "y_pred_prob.append", "prob_list.append", "numpy.zeros", "y_pred.append", "y_pred_label.append", "len", "util.multi_label_metric", "ja_by_visit[].append", "prauc_by_visit[].append", "pre_by_visit[].append", "recall_by_visit[].append", "f1_by_visit[].append", "smm_record_by_visit[].append", "numpy.zeros", "model", "y_pred_prob.append", "prob_list.append", "y_pred.append", "y_pred_label.append", "len", "add_temp_list.append", "delete_temp_list.append", "numpy.mean", "numpy.mean", "len", "add_list.append", "delete_list.append", "len", "torch.sigmoid().detach().cpu().numpy", "numpy.where", "sorted", "numpy.array", "numpy.array", "numpy.array", "torch.sigmoid().detach().cpu().numpy", "numpy.where", "numpy.where", "sorted", "set", "set", "set", "set", "set", "set", "set", "set", "len", "len", "len", "len", "util.multi_label_metric", "ja_by_visit[].append", "prauc_by_visit[].append", "pre_by_visit[].append", "recall_by_visit[].append", "f1_by_visit[].append", "smm_record_by_visit[].append", "sorted", "numpy.array", "numpy.array", "numpy.array", "torch.sigmoid().detach().cpu", "torch.sigmoid().detach().cpu", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "set", "set", "set", "set", "set", "set", "set", "set", "sorted", "torch.sigmoid().detach", "torch.sigmoid().detach", "torch.sigmoid", "torch.sigmoid"], "function", ["home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.eval", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.ddi_rate_score", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.llprint", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.multi_label_metric", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.llprint", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.ddi_rate_score", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.multi_label_metric", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.multi_label_metric"], ["def", "eval", "(", "model", ",", "data_eval", ",", "voc_size", ",", "epoch", ",", "val", "=", "0", ",", "threshold1", "=", "0.8", ",", "threshold2", "=", "0.2", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "smm_record", "=", "[", "]", "\n", "ja", ",", "prauc", ",", "avg_p", ",", "avg_r", ",", "avg_f1", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "med_cnt", ",", "visit_cnt", "=", "0", ",", "0", "\n", "label_list", ",", "prob_list", "=", "[", "]", ",", "[", "]", "\n", "add_list", ",", "delete_list", "=", "[", "]", ",", "[", "]", "\n", "# \u4e0d\u540cvisit\u7684\u6307\u6807\u7edf\u8ba1", "\n", "ja_by_visit", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "prauc_by_visit", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "pre_by_visit", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "recall_by_visit", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "f1_by_visit", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "smm_record_by_visit", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "\n", "for", "step", ",", "input", "in", "enumerate", "(", "data_eval", ")", ":", "\n", "        ", "y_gt", ",", "y_pred", ",", "y_pred_prob", ",", "y_pred_label", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "add_temp_list", ",", "delete_temp_list", "=", "[", "]", ",", "[", "]", "\n", "if", "len", "(", "input", ")", "<", "2", ":", "continue", "\n", "for", "adm_idx", ",", "adm", "in", "enumerate", "(", "input", ")", ":", "\n", "# \u7b2c0\u4e2avisit\u4e5f\u8981\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\u53bb", "\n", "            ", "y_gt_tmp", "=", "np", ".", "zeros", "(", "voc_size", "[", "2", "]", ")", "\n", "y_gt_tmp", "[", "adm", "[", "2", "]", "]", "=", "1", "\n", "y_gt", ".", "append", "(", "y_gt_tmp", ")", "\n", "label_list", ".", "append", "(", "y_gt_tmp", ")", "\n", "\n", "if", "adm_idx", "==", "0", ":", "\n", "                ", "representation_base", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "input", "[", ":", "adm_idx", "+", "1", "]", ")", "\n", "# \u7b2c0\u4e2avisit\u4e5f\u6dfb\u52a0", "\n", "y_pred_tmp", "=", "F", ".", "sigmoid", "(", "representation_base", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "y_pred_prob", ".", "append", "(", "y_pred_tmp", ")", "\n", "prob_list", ".", "append", "(", "y_pred_tmp", ")", "\n", "\n", "y_old", "=", "np", ".", "zeros", "(", "voc_size", "[", "2", "]", ")", "\n", "y_old", "[", "y_pred_tmp", ">=", "threshold1", "]", "=", "1", "\n", "y_old", "[", "y_pred_tmp", "<", "threshold2", "]", "=", "0", "\n", "y_pred", ".", "append", "(", "y_old", ")", "\n", "# prediction label", "\n", "y_pred_label_tmp", "=", "np", ".", "where", "(", "y_old", "==", "1", ")", "[", "0", "]", "\n", "y_pred_label", ".", "append", "(", "sorted", "(", "y_pred_label_tmp", ")", ")", "\n", "visit_cnt", "+=", "1", "\n", "med_cnt", "+=", "len", "(", "y_pred_label_tmp", ")", "\n", "\n", "single_ja", ",", "single_prauc", ",", "single_p", ",", "single_r", ",", "single_f1", "=", "multi_label_metric", "(", "np", ".", "array", "(", "[", "y_gt_tmp", "]", ")", ",", "np", ".", "array", "(", "[", "y_old", "]", ")", ",", "np", ".", "array", "(", "[", "y_pred_tmp", "]", ")", ")", "\n", "ja_by_visit", "[", "0", "]", ".", "append", "(", "single_ja", ")", "\n", "prauc_by_visit", "[", "0", "]", ".", "append", "(", "single_prauc", ")", "\n", "pre_by_visit", "[", "0", "]", ".", "append", "(", "single_p", ")", "\n", "recall_by_visit", "[", "0", "]", ".", "append", "(", "single_r", ")", "\n", "f1_by_visit", "[", "0", "]", ".", "append", "(", "single_f1", ")", "\n", "smm_record_by_visit", "[", "0", "]", ".", "append", "(", "[", "sorted", "(", "y_pred_label_tmp", ")", "]", ")", "\n", "\n", "y_old", "=", "np", ".", "zeros", "(", "voc_size", "[", "2", "]", ")", "\n", "y_old", "[", "adm", "[", "2", "]", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "_", ",", "_", ",", "residual", ",", "_", ",", "_", "=", "model", "(", "input", "[", ":", "adm_idx", "+", "1", "]", ")", "\n", "# prediction prod", "\n", "representation_base", "+=", "residual", "\n", "y_pred_tmp", "=", "F", ".", "sigmoid", "(", "representation_base", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "y_pred_prob", ".", "append", "(", "y_pred_tmp", ")", "\n", "prob_list", ".", "append", "(", "y_pred_tmp", ")", "\n", "\n", "previous_set", "=", "np", ".", "where", "(", "y_old", "==", "1", ")", "[", "0", "]", "\n", "\n", "# prediction med set", "\n", "# result = F.sigmoid(result).detach().cpu().numpy()[0]", "\n", "# y_pred_tmp = result.copy()", "\n", "y_old", "[", "y_pred_tmp", ">=", "threshold1", "]", "=", "1", "\n", "y_old", "[", "y_pred_tmp", "<", "threshold2", "]", "=", "0", "\n", "y_pred", ".", "append", "(", "y_old", ")", "\n", "\n", "# prediction label", "\n", "y_pred_label_tmp", "=", "np", ".", "where", "(", "y_old", "==", "1", ")", "[", "0", "]", "\n", "y_pred_label", ".", "append", "(", "sorted", "(", "y_pred_label_tmp", ")", ")", "\n", "visit_cnt", "+=", "1", "\n", "med_cnt", "+=", "len", "(", "y_pred_label_tmp", ")", "\n", "\n", "#### add or delete", "\n", "add_gt", "=", "set", "(", "np", ".", "where", "(", "y_gt_tmp", "==", "1", ")", "[", "0", "]", ")", "-", "set", "(", "previous_set", ")", "\n", "delete_gt", "=", "set", "(", "previous_set", ")", "-", "set", "(", "np", ".", "where", "(", "y_gt_tmp", "==", "1", ")", "[", "0", "]", ")", "\n", "\n", "add_pre", "=", "set", "(", "np", ".", "where", "(", "y_old", "==", "1", ")", "[", "0", "]", ")", "-", "set", "(", "previous_set", ")", "\n", "delete_pre", "=", "set", "(", "previous_set", ")", "-", "set", "(", "np", ".", "where", "(", "y_old", "==", "1", ")", "[", "0", "]", ")", "\n", "\n", "add_distance", "=", "len", "(", "set", "(", "add_pre", ")", "-", "set", "(", "add_gt", ")", ")", "+", "len", "(", "set", "(", "add_gt", ")", "-", "set", "(", "add_pre", ")", ")", "\n", "delete_distance", "=", "len", "(", "set", "(", "delete_pre", ")", "-", "set", "(", "delete_gt", ")", ")", "+", "len", "(", "set", "(", "delete_gt", ")", "-", "set", "(", "delete_pre", ")", ")", "\n", "####", "\n", "\n", "add_temp_list", ".", "append", "(", "add_distance", ")", "\n", "delete_temp_list", ".", "append", "(", "delete_distance", ")", "\n", "\n", "if", "adm_idx", "<", "5", ":", "\n", "                    ", "single_ja", ",", "single_prauc", ",", "single_p", ",", "single_r", ",", "single_f1", "=", "multi_label_metric", "(", "np", ".", "array", "(", "[", "y_gt_tmp", "]", ")", ",", "np", ".", "array", "(", "[", "y_old", "]", ")", ",", "np", ".", "array", "(", "[", "y_pred_tmp", "]", ")", ")", "\n", "ja_by_visit", "[", "adm_idx", "]", ".", "append", "(", "single_ja", ")", "\n", "prauc_by_visit", "[", "adm_idx", "]", ".", "append", "(", "single_prauc", ")", "\n", "pre_by_visit", "[", "adm_idx", "]", ".", "append", "(", "single_p", ")", "\n", "recall_by_visit", "[", "adm_idx", "]", ".", "append", "(", "single_r", ")", "\n", "f1_by_visit", "[", "adm_idx", "]", ".", "append", "(", "single_f1", ")", "\n", "smm_record_by_visit", "[", "adm_idx", "]", ".", "append", "(", "[", "sorted", "(", "y_pred_label_tmp", ")", "]", ")", "\n", "\n", "", "", "", "if", "len", "(", "add_temp_list", ")", ">", "1", ":", "\n", "            ", "add_list", ".", "append", "(", "np", ".", "mean", "(", "add_temp_list", ")", ")", "\n", "delete_list", ".", "append", "(", "np", ".", "mean", "(", "delete_temp_list", ")", ")", "\n", "", "elif", "len", "(", "add_temp_list", ")", "==", "1", ":", "\n", "            ", "add_list", ".", "append", "(", "add_temp_list", "[", "0", "]", ")", "\n", "delete_list", ".", "append", "(", "delete_temp_list", "[", "0", "]", ")", "\n", "\n", "", "smm_record", ".", "append", "(", "y_pred_label", ")", "\n", "adm_ja", ",", "adm_prauc", ",", "adm_avg_p", ",", "adm_avg_r", ",", "adm_avg_f1", "=", "multi_label_metric", "(", "np", ".", "array", "(", "y_gt", ")", ",", "np", ".", "array", "(", "y_pred", ")", ",", "np", ".", "array", "(", "y_pred_prob", ")", ")", "\n", "\n", "ja", ".", "append", "(", "adm_ja", ")", "\n", "prauc", ".", "append", "(", "adm_prauc", ")", "\n", "avg_p", ".", "append", "(", "adm_avg_p", ")", "\n", "avg_r", ".", "append", "(", "adm_avg_r", ")", "\n", "avg_f1", ".", "append", "(", "adm_avg_f1", ")", "\n", "llprint", "(", "'\\rtest step: {} / {}'", ".", "format", "(", "step", ",", "len", "(", "data_eval", ")", ")", ")", "\n", "\n", "# \u5206\u6790\u5404\u4e2avisit\u7684\u7ed3\u679c", "\n", "", "print", "(", "'\\tvisit1\\tvisit2\\tvisit3\\tvisit4\\tvisit5'", ")", "\n", "print", "(", "'count:'", ",", "[", "len", "(", "buf", ")", "for", "buf", "in", "ja_by_visit", "]", ")", "\n", "print", "(", "'prauc:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "prauc_by_visit", "]", ")", "\n", "print", "(", "'jaccard:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "ja_by_visit", "]", ")", "\n", "print", "(", "'precision:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "pre_by_visit", "]", ")", "\n", "print", "(", "'recall:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "recall_by_visit", "]", ")", "\n", "print", "(", "'f1:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "f1_by_visit", "]", ")", "\n", "print", "(", "'DDI:'", ",", "[", "ddi_rate_score", "(", "buf", ")", "for", "buf", "in", "smm_record_by_visit", "]", ")", "\n", "\n", "# ddi rate", "\n", "ddi_rate", "=", "ddi_rate_score", "(", "smm_record", ",", "path", "=", "'../data/ddi_A_final.pkl'", ")", "\n", "\n", "llprint", "(", "'\\nDDI Rate: {:.4}, Jaccard: {:.4}, PRAUC: {:.4},  AVG_F1: {:.4}, Add: {:.4}, Delete: {:.4}, AVG_MED: {:.4}\\n'", ".", "format", "(", "\n", "ddi_rate", ",", "np", ".", "mean", "(", "ja", ")", ",", "np", ".", "mean", "(", "prauc", ")", ",", "np", ".", "mean", "(", "avg_f1", ")", ",", "np", ".", "mean", "(", "add_list", ")", ",", "np", ".", "mean", "(", "delete_list", ")", ",", "med_cnt", "/", "visit_cnt", "\n", ")", ")", "\n", "\n", "if", "val", "==", "0", ":", "\n", "        ", "return", "ddi_rate", ",", "np", ".", "mean", "(", "ja", ")", ",", "np", ".", "mean", "(", "prauc", ")", ",", "np", ".", "mean", "(", "avg_p", ")", ",", "np", ".", "mean", "(", "avg_r", ")", ",", "np", ".", "mean", "(", "avg_f1", ")", ",", "np", ".", "mean", "(", "add_list", ")", ",", "np", ".", "mean", "(", "delete_list", ")", ",", "med_cnt", "/", "visit_cnt", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array", "(", "label_list", ")", ",", "np", ".", "array", "(", "prob_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.MICRON.main": [[180, 378], ["torch.device", "torch.device", "dill.load", "dill.load", "dill.load", "int", "int", "models.MICRON", "models.MICRON.to", "print", "torch.optim.RMSprop", "collections.defaultdict", "range", "dill.dump", "open", "open", "open", "len", "len", "len", "models.MICRON.load_state_dict", "models.MICRON.to", "time.time", "MICRON.eval", "range", "print", "MICRON.eval", "print", "range", "numpy.array", "np.array.mean", "np.array.std", "zip", "print", "print", "util.get_n_params", "list", "time.time", "print", "numpy.array", "models.MICRON.train", "enumerate", "print", "time.time", "MICRON.eval", "print", "history[].append", "history[].append", "history[].append", "history[].append", "history[].append", "history[].append", "history[].append", "history[].append", "history[].append", "torch.save", "torch.save", "print", "open", "len", "torch.load", "torch.load", "sklearn.metrics.roc_curve", "threshold1.append", "threshold2.append", "numpy.mean", "numpy.mean", "numpy.ones", "numpy.mean", "numpy.ones", "numpy.mean", "numpy.random.choice", "MICRON.eval", "np.array.append", "models.MICRON.parameters", "enumerate", "torch.optim.RMSprop.zero_grad", "loss.backward", "torch.optim.RMSprop.step", "util.llprint", "print", "models.MICRON.state_dict", "open", "os.path.join", "len", "open", "min", "max", "round", "len", "numpy.zeros", "numpy.zeros", "numpy.full", "enumerate", "numpy.full", "models.MICRON.", "util.ddi_rate_score", "os.path.join", "max", "min", "time.time", "time.time", "enumerate", "torch.sigmoid().detach().cpu().numpy", "numpy.where", "numpy.array", "weight_list.append", "len", "time.time", "time.time", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "len", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "numpy.array", "numpy.exp", "sum", "numpy.array", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.multilabel_margin_loss", "torch.multilabel_margin_loss", "torch.sigmoid().detach().cpu", "loss_bce.detach().cpu().numpy", "loss_multi.detach().cpu().numpy", "loss_ddi.detach().cpu().numpy", "loss_rec.detach().cpu().numpy", "numpy.array", "numpy.exp", "numpy.array", "max", "min", "torch.sigmoid", "torch.LongTensor().to", "torch.LongTensor().to", "torch.sigmoid", "torch.LongTensor().to", "torch.LongTensor().to", "loss_bce.detach().cpu().numpy", "loss_multi.detach().cpu().numpy", "loss_ddi.detach().cpu().numpy", "loss_rec.detach().cpu().numpy", "round", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.sigmoid().detach", "loss_bce.detach().cpu", "loss_multi.detach().cpu", "loss_ddi.detach().cpu", "loss_rec.detach().cpu", "round", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "loss_bce.detach().cpu", "loss_multi.detach().cpu", "loss_ddi.detach().cpu", "loss_rec.detach().cpu", "len", "torch.sigmoid", "loss_bce.detach", "loss_multi.detach", "loss_ddi.detach", "loss_rec.detach", "len", "loss_bce.detach", "loss_multi.detach", "loss_ddi.detach", "loss_rec.detach"], "function", ["home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.eval", "home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.eval", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.get_n_params", "home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.eval", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.eval", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.llprint", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.ddi_rate_score", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "# load data", "\n", "    ", "data_path", "=", "'../data/records_final.pkl'", "\n", "voc_path", "=", "'../data/voc_final.pkl'", "\n", "\n", "ddi_adj_path", "=", "'../data/ddi_A_final.pkl'", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "\n", "ddi_adj", "=", "dill", ".", "load", "(", "open", "(", "ddi_adj_path", ",", "'rb'", ")", ")", "\n", "data", "=", "dill", ".", "load", "(", "open", "(", "data_path", ",", "'rb'", ")", ")", "\n", "\n", "voc", "=", "dill", ".", "load", "(", "open", "(", "voc_path", ",", "'rb'", ")", ")", "\n", "diag_voc", ",", "pro_voc", ",", "med_voc", "=", "voc", "[", "'diag_voc'", "]", ",", "voc", "[", "'pro_voc'", "]", ",", "voc", "[", "'med_voc'", "]", "\n", "\n", "# np.random.seed(1203)", "\n", "# np.random.shuffle(data)", "\n", "\n", "# \"\u6dfb\u52a0\u7b2c\u4e00\u4e2avisit\"", "\n", "# new_data = []", "\n", "# for patient in data:", "\n", "#     patient.insert(0, [[],[],[]])", "\n", "#     # patient.insert(0, patient[0])", "\n", "#     new_data.append(patient)", "\n", "# data = new_data", "\n", "\n", "split_point", "=", "int", "(", "len", "(", "data", ")", "*", "2", "/", "3", ")", "\n", "data_train", "=", "data", "[", ":", "split_point", "]", "\n", "eval_len", "=", "int", "(", "len", "(", "data", "[", "split_point", ":", "]", ")", "/", "2", ")", "\n", "data_test", "=", "data", "[", "split_point", ":", "split_point", "+", "eval_len", "]", "\n", "data_eval", "=", "data", "[", "split_point", "+", "eval_len", ":", "]", "\n", "\n", "voc_size", "=", "(", "len", "(", "diag_voc", ".", "idx2word", ")", ",", "len", "(", "pro_voc", ".", "idx2word", ")", ",", "len", "(", "med_voc", ".", "idx2word", ")", ")", "\n", "\n", "model", "=", "MICRON", "(", "voc_size", ",", "ddi_adj", ",", "emb_dim", "=", "args", ".", "dim", ",", "device", "=", "device", ")", "\n", "# model.load_state_dict(torch.load(open(args.resume_path, 'rb')))", "\n", "\n", "if", "args", ".", "Test", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "open", "(", "args", ".", "resume_path", ",", "'rb'", ")", ")", ")", "\n", "model", ".", "to", "(", "device", "=", "device", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "label_list", ",", "prob_list", "=", "eval", "(", "model", ",", "data_eval", ",", "voc_size", ",", "0", ",", "1", ")", "\n", "\n", "threshold1", ",", "threshold2", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "label_list", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "_", ",", "_", ",", "boundary", "=", "roc_curve", "(", "label_list", "[", ":", ",", "i", "]", ",", "prob_list", "[", ":", ",", "i", "]", ",", "pos_label", "=", "1", ")", "\n", "# boundary1 should be in [0.5, 0.9], boundary2 should be in [0.1, 0.5]", "\n", "threshold1", ".", "append", "(", "min", "(", "0.9", ",", "max", "(", "0.5", ",", "boundary", "[", "max", "(", "0", ",", "round", "(", "len", "(", "boundary", ")", "*", "0.05", ")", "-", "1", ")", "]", ")", ")", ")", "\n", "threshold2", ".", "append", "(", "max", "(", "0.1", ",", "min", "(", "0.5", ",", "boundary", "[", "min", "(", "round", "(", "len", "(", "boundary", ")", "*", "0.95", ")", ",", "len", "(", "boundary", ")", "-", "1", ")", "]", ")", ")", ")", "\n", "", "print", "(", "np", ".", "mean", "(", "threshold1", ")", ",", "np", ".", "mean", "(", "threshold2", ")", ")", "\n", "threshold1", "=", "np", ".", "ones", "(", "voc_size", "[", "2", "]", ")", "*", "np", ".", "mean", "(", "threshold1", ")", "\n", "threshold2", "=", "np", ".", "ones", "(", "voc_size", "[", "2", "]", ")", "*", "np", ".", "mean", "(", "threshold2", ")", "\n", "eval", "(", "model", ",", "data_test", ",", "voc_size", ",", "0", ",", "0", ",", "threshold1", ",", "threshold2", ")", "\n", "print", "(", "'test time: {}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "test_sample", "=", "np", ".", "random", ".", "choice", "(", "data_test", ",", "round", "(", "len", "(", "data_test", ")", "*", "0.8", ")", ",", "replace", "=", "True", ")", "\n", "ddi_rate", ",", "ja", ",", "prauc", ",", "avg_p", ",", "avg_r", ",", "avg_f1", ",", "avg_add", ",", "avg_del", ",", "avg_med", "=", "eval", "(", "model", ",", "test_sample", ",", "voc_size", ",", "0", ")", "\n", "result", ".", "append", "(", "[", "ddi_rate", ",", "ja", ",", "avg_f1", ",", "prauc", ",", "avg_med", "]", ")", "\n", "\n", "", "result", "=", "np", ".", "array", "(", "result", ")", "\n", "mean", "=", "result", ".", "mean", "(", "axis", "=", "0", ")", "\n", "std", "=", "result", ".", "std", "(", "axis", "=", "0", ")", "\n", "\n", "outstring", "=", "\"\"", "\n", "for", "m", ",", "s", "in", "zip", "(", "mean", ",", "std", ")", ":", "\n", "            ", "outstring", "+=", "\"{:.4f} $\\pm$ {:.4f} & \"", ".", "format", "(", "m", ",", "s", ")", "\n", "\n", "", "print", "(", "outstring", ")", "\n", "\n", "print", "(", "'test time: {}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "return", "\n", "\n", "", "model", ".", "to", "(", "device", "=", "device", ")", "\n", "print", "(", "'parameters'", ",", "get_n_params", "(", "model", ")", ")", "\n", "# exit()", "\n", "optimizer", "=", "RMSprop", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# start iterations", "\n", "history", "=", "defaultdict", "(", "list", ")", "\n", "best_epoch", ",", "best_ja", "=", "0", ",", "0", "\n", "\n", "weight_list", "=", "[", "[", "0.25", ",", "0.25", ",", "0.25", ",", "0.25", "]", "]", "\n", "\n", "EPOCH", "=", "40", "\n", "for", "epoch", "in", "range", "(", "EPOCH", ")", ":", "\n", "        ", "t", "=", "0", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'\\nepoch {} --------------------------'", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "sample_counter", "=", "0", "\n", "mean_loss", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "for", "step", ",", "input", "in", "enumerate", "(", "data_train", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "if", "len", "(", "input", ")", "<", "2", ":", "continue", "\n", "for", "adm_idx", ",", "adm", "in", "enumerate", "(", "input", ")", ":", "\n", "                ", "\"\"\"\u7b2c\u4e00\u4e2avisit\u4e5f\u53c2\u4e0e\u8bad\u7ec3\"\"\"", "\n", "# if adm_idx == 0: continue     ", "\n", "# sample_counter += 1", "\n", "seq_input", "=", "input", "[", ":", "adm_idx", "+", "1", "]", "\n", "\n", "loss_bce_target", "=", "np", ".", "zeros", "(", "(", "1", ",", "voc_size", "[", "2", "]", ")", ")", "\n", "loss_bce_target", "[", ":", ",", "adm", "[", "2", "]", "]", "=", "1", "\n", "\n", "loss_bce_target_last", "=", "np", ".", "zeros", "(", "(", "1", ",", "voc_size", "[", "2", "]", ")", ")", "\n", "if", "adm_idx", ">", "0", ":", "\n", "                    ", "loss_bce_target_last", "[", ":", ",", "input", "[", "adm_idx", "-", "1", "]", "[", "2", "]", "]", "=", "1", "\n", "\n", "", "loss_multi_target", "=", "np", ".", "full", "(", "(", "1", ",", "voc_size", "[", "2", "]", ")", ",", "-", "1", ")", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "adm", "[", "2", "]", ")", ":", "\n", "                    ", "loss_multi_target", "[", "0", "]", "[", "idx", "]", "=", "item", "\n", "\n", "", "loss_multi_target_last", "=", "np", ".", "full", "(", "(", "1", ",", "voc_size", "[", "2", "]", ")", ",", "-", "1", ")", "\n", "if", "adm_idx", ">", "0", ":", "\n", "                    ", "for", "idx", ",", "item", "in", "enumerate", "(", "input", "[", "adm_idx", "-", "1", "]", "[", "2", "]", ")", ":", "\n", "                        ", "loss_multi_target_last", "[", "0", "]", "[", "idx", "]", "=", "item", "\n", "\n", "", "", "result", ",", "result_last", ",", "_", ",", "loss_ddi", ",", "loss_rec", "=", "model", "(", "seq_input", ")", "\n", "\n", "loss_bce", "=", "0.75", "*", "F", ".", "binary_cross_entropy_with_logits", "(", "result", ",", "torch", ".", "FloatTensor", "(", "loss_bce_target", ")", ".", "to", "(", "device", ")", ")", "+", "(", "1", "-", "0.75", ")", "*", "F", ".", "binary_cross_entropy_with_logits", "(", "result_last", ",", "torch", ".", "FloatTensor", "(", "loss_bce_target_last", ")", ".", "to", "(", "device", ")", ")", "\n", "loss_multi", "=", "5e-2", "*", "(", "0.75", "*", "F", ".", "multilabel_margin_loss", "(", "F", ".", "sigmoid", "(", "result", ")", ",", "torch", ".", "LongTensor", "(", "loss_multi_target", ")", ".", "to", "(", "device", ")", ")", "+", "(", "1", "-", "0.75", ")", "*", "F", ".", "multilabel_margin_loss", "(", "F", ".", "sigmoid", "(", "result_last", ")", ",", "torch", ".", "LongTensor", "(", "loss_multi_target_last", ")", ".", "to", "(", "device", ")", ")", ")", "\n", "\n", "y_pred_tmp", "=", "F", ".", "sigmoid", "(", "result", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "y_pred_tmp", "[", "y_pred_tmp", ">=", "0.5", "]", "=", "1", "\n", "y_pred_tmp", "[", "y_pred_tmp", "<", "0.5", "]", "=", "0", "\n", "y_label", "=", "np", ".", "where", "(", "y_pred_tmp", "==", "1", ")", "[", "0", "]", "\n", "current_ddi_rate", "=", "ddi_rate_score", "(", "[", "[", "y_label", "]", "]", ",", "path", "=", "'../data/ddi_A_final.pkl'", ")", "\n", "\n", "# l2 = 0", "\n", "# for p in model.parameters():", "\n", "#     l2 = l2 + (p ** 2).sum()", "\n", "\n", "if", "sample_counter", "==", "0", ":", "\n", "                    ", "lambda1", ",", "lambda2", ",", "lambda3", ",", "lambda4", "=", "weight_list", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "current_loss", "=", "np", ".", "array", "(", "[", "loss_bce", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "loss_multi", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "loss_ddi", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "loss_rec", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "\n", "current_ratio", "=", "(", "current_loss", "-", "np", ".", "array", "(", "mean_loss", ")", ")", "/", "np", ".", "array", "(", "mean_loss", ")", "\n", "instant_weight", "=", "np", ".", "exp", "(", "current_ratio", ")", "/", "sum", "(", "np", ".", "exp", "(", "current_ratio", ")", ")", "\n", "lambda1", ",", "lambda2", ",", "lambda3", ",", "lambda4", "=", "instant_weight", "*", "0.75", "+", "np", ".", "array", "(", "weight_list", "[", "-", "1", "]", ")", "*", "0.25", "\n", "# update weight_list", "\n", "weight_list", ".", "append", "(", "[", "lambda1", ",", "lambda2", ",", "lambda3", ",", "lambda4", "]", ")", "\n", "# update mean_loss", "\n", "", "mean_loss", "=", "(", "mean_loss", "*", "(", "sample_counter", "-", "1", ")", "+", "np", ".", "array", "(", "[", "loss_bce", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "loss_multi", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "loss_ddi", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "loss_rec", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", ")", "/", "sample_counter", "\n", "# lambda1, lambda2, lambda3, lambda4 = weight_list[-1]", "\n", "if", "current_ddi_rate", ">", "0.08", ":", "\n", "                    ", "loss", "+=", "lambda1", "*", "loss_bce", "+", "lambda2", "*", "loss_multi", "+", "lambda3", "*", "loss_ddi", "+", "lambda4", "*", "loss_rec", "\n", "", "else", ":", "\n", "                    ", "loss", "+=", "lambda1", "*", "loss_bce", "+", "lambda2", "*", "loss_multi", "+", "lambda4", "*", "loss_rec", "\n", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "llprint", "(", "'\\rtraining step: {} / {}'", ".", "format", "(", "step", ",", "len", "(", "data_train", ")", ")", ")", "\n", "\n", "", "print", "(", ")", "\n", "tic2", "=", "time", ".", "time", "(", ")", "\n", "ddi_rate", ",", "ja", ",", "prauc", ",", "avg_p", ",", "avg_r", ",", "avg_f1", ",", "add", ",", "delete", ",", "avg_med", "=", "eval", "(", "model", ",", "data_eval", ",", "voc_size", ",", "epoch", ")", "\n", "print", "(", "'training time: {}, test time: {}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ",", "time", ".", "time", "(", ")", "-", "tic2", ")", ")", "\n", "\n", "history", "[", "'ja'", "]", ".", "append", "(", "ja", ")", "\n", "history", "[", "'ddi_rate'", "]", ".", "append", "(", "ddi_rate", ")", "\n", "history", "[", "'avg_p'", "]", ".", "append", "(", "avg_p", ")", "\n", "history", "[", "'avg_r'", "]", ".", "append", "(", "avg_r", ")", "\n", "history", "[", "'avg_f1'", "]", ".", "append", "(", "avg_f1", ")", "\n", "history", "[", "'prauc'", "]", ".", "append", "(", "prauc", ")", "\n", "history", "[", "'add'", "]", ".", "append", "(", "add", ")", "\n", "history", "[", "'delete'", "]", ".", "append", "(", "delete", ")", "\n", "history", "[", "'med'", "]", ".", "append", "(", "avg_med", ")", "\n", "\n", "if", "epoch", ">=", "5", ":", "\n", "            ", "print", "(", "'ddi: {}, Med: {}, Ja: {}, F1: {}, Add: {}, Delete: {}'", ".", "format", "(", "\n", "np", ".", "mean", "(", "history", "[", "'ddi_rate'", "]", "[", "-", "5", ":", "]", ")", ",", "\n", "np", ".", "mean", "(", "history", "[", "'med'", "]", "[", "-", "5", ":", "]", ")", ",", "\n", "np", ".", "mean", "(", "history", "[", "'ja'", "]", "[", "-", "5", ":", "]", ")", ",", "\n", "np", ".", "mean", "(", "history", "[", "'avg_f1'", "]", "[", "-", "5", ":", "]", ")", ",", "\n", "np", ".", "mean", "(", "history", "[", "'add'", "]", "[", "-", "5", ":", "]", ")", ",", "\n", "np", ".", "mean", "(", "history", "[", "'delete'", "]", "[", "-", "5", ":", "]", ")", "\n", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "open", "(", "os", ".", "path", ".", "join", "(", "'saved'", ",", "args", ".", "model_name", ",", "'Epoch_{}_JA_{:.4}_DDI_{:.4}.model'", ".", "format", "(", "epoch", ",", "ja", ",", "ddi_rate", ")", ")", ",", "'wb'", ")", ")", "\n", "\n", "if", "epoch", "!=", "0", "and", "best_ja", "<", "ja", ":", "\n", "            ", "best_epoch", "=", "epoch", "\n", "best_ja", "=", "ja", "\n", "\n", "", "print", "(", "'best_epoch: {}'", ".", "format", "(", "best_epoch", ")", ")", "\n", "\n", "", "dill", ".", "dump", "(", "history", ",", "open", "(", "os", ".", "path", ".", "join", "(", "'saved'", ",", "args", ".", "model_name", ",", "'history_{}.pkl'", ".", "format", "(", "args", ".", "model_name", ")", ")", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.GCN.__init__": [[17, 31], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "models.GCN.normalize", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "layers.GraphConvolution", "torch.Dropout", "torch.Dropout", "torch.Dropout", "layers.GraphConvolution", "numpy.eye", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.GCN.normalize"], ["    ", "def", "__init__", "(", "self", ",", "voc_size", ",", "emb_dim", ",", "adj", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "voc_size", "=", "voc_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "device", "=", "device", "\n", "\n", "adj", "=", "self", ".", "normalize", "(", "adj", "+", "np", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "self", ".", "adj", "=", "torch", ".", "FloatTensor", "(", "adj", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "x", "=", "torch", ".", "eye", "(", "voc_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "gcn1", "=", "GraphConvolution", "(", "voc_size", ",", "emb_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.3", ")", "\n", "self", ".", "gcn2", "=", "GraphConvolution", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.GCN.forward": [[32, 38], ["models.GCN.gcn1", "torch.relu", "torch.relu", "torch.relu", "models.GCN.dropout", "models.GCN.gcn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "node_embedding", "=", "self", ".", "gcn1", "(", "self", ".", "x", ",", "self", ".", "adj", ")", "\n", "node_embedding", "=", "F", ".", "relu", "(", "node_embedding", ")", "\n", "node_embedding", "=", "self", ".", "dropout", "(", "node_embedding", ")", "\n", "node_embedding", "=", "self", ".", "gcn2", "(", "node_embedding", ",", "self", ".", "adj", ")", "\n", "return", "node_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.GCN.normalize": [[39, 47], ["numpy.array", "numpy.power().flatten", "numpy.diagflat", "numpy.diagflat.dot", "np.diagflat.dot.sum", "numpy.power", "numpy.isinf"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "normalize", "(", "self", ",", "mx", ")", ":", "\n", "        ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "np", ".", "diagflat", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MaskLinear.__init__": [[50, 60], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "models.MaskLinear.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "models.MaskLinear.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MaskLinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "MaskLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MaskLinear.reset_parameters": [[61, 66], ["models.MaskLinear.weight.data.uniform_", "math.sqrt", "models.MaskLinear.bias.data.uniform_", "models.MaskLinear.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MaskLinear.forward": [[67, 75], ["torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "mask", ")", ":", "\n", "        ", "weight", "=", "torch", ".", "mul", "(", "self", ".", "weight", ",", "mask", ")", "\n", "output", "=", "torch", ".", "mm", "(", "input", ",", "weight", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MaskLinear.__repr__": [[76, 80], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.__init__": [[83, 91], ["torch.Module.__init__", "torch.Embedding().to", "torch.Embedding().to", "torch.Embedding().to", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear().to", "torch.Linear().to", "torch.Linear().to", "range", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "N_fingerprint", ",", "dim", ",", "layer_hidden", ",", "device", ")", ":", "\n", "        ", "super", "(", "MolecularGraphNeuralNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "embed_fingerprint", "=", "nn", ".", "Embedding", "(", "\n", "N_fingerprint", ",", "dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "W_fingerprint", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "_", "in", "range", "(", "layer_hidden", ")", "]", ")", "\n", "self", ".", "layer_hidden", "=", "layer_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.pad": [[92, 110], ["torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "enumerate", "models.MolecularGraphNeuralNetwork.sum"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "pad", "(", "self", ",", "matrices", ",", "pad_value", ")", ":", "\n", "        ", "\"\"\"Pad the list of matrices\n        with a pad_value (e.g., 0) for batch proc essing.\n        For example, given a list of matrices [A, B, C],\n        we obtain a new matrix [A00, 0B0, 00C],\n        where 0 is the zero (i.e., pad value) matrix.\n        \"\"\"", "\n", "shapes", "=", "[", "m", ".", "shape", "for", "m", "in", "matrices", "]", "\n", "M", ",", "N", "=", "sum", "(", "[", "s", "[", "0", "]", "for", "s", "in", "shapes", "]", ")", ",", "sum", "(", "[", "s", "[", "1", "]", "for", "s", "in", "shapes", "]", ")", "\n", "zeros", "=", "torch", ".", "FloatTensor", "(", "np", ".", "zeros", "(", "(", "M", ",", "N", ")", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "pad_matrices", "=", "pad_value", "+", "zeros", "\n", "i", ",", "j", "=", "0", ",", "0", "\n", "for", "k", ",", "matrix", "in", "enumerate", "(", "matrices", ")", ":", "\n", "            ", "m", ",", "n", "=", "shapes", "[", "k", "]", "\n", "pad_matrices", "[", "i", ":", "i", "+", "m", ",", "j", ":", "j", "+", "n", "]", "=", "matrix", "\n", "i", "+=", "m", "\n", "j", "+=", "n", "\n", "", "return", "pad_matrices", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.update": [[111, 114], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "matrix", ",", "vectors", ",", "layer", ")", ":", "\n", "        ", "hidden_vectors", "=", "torch", ".", "relu", "(", "self", ".", "W_fingerprint", "[", "layer", "]", "(", "vectors", ")", ")", "\n", "return", "hidden_vectors", "+", "torch", ".", "mm", "(", "matrix", ",", "hidden_vectors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum": [[115, 118], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "sum", "(", "self", ",", "vectors", ",", "axis", ")", ":", "\n", "        ", "sum_vectors", "=", "[", "torch", ".", "sum", "(", "v", ",", "0", ")", "for", "v", "in", "torch", ".", "split", "(", "vectors", ",", "axis", ")", "]", "\n", "return", "torch", ".", "stack", "(", "sum_vectors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean": [[119, 122], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean"], ["", "def", "mean", "(", "self", ",", "vectors", ",", "axis", ")", ":", "\n", "        ", "mean_vectors", "=", "[", "torch", ".", "mean", "(", "v", ",", "0", ")", "for", "v", "in", "torch", ".", "split", "(", "vectors", ",", "axis", ")", "]", "\n", "return", "torch", ".", "stack", "(", "mean_vectors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.forward": [[123, 141], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.MolecularGraphNeuralNetwork.pad", "models.MolecularGraphNeuralNetwork.embed_fingerprint", "range", "models.MolecularGraphNeuralNetwork.sum", "models.MolecularGraphNeuralNetwork.update"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.pad", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.update"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Cat or pad each input data for batch processing.\"\"\"", "\n", "fingerprints", ",", "adjacencies", ",", "molecular_sizes", "=", "inputs", "\n", "fingerprints", "=", "torch", ".", "cat", "(", "fingerprints", ")", "\n", "adjacencies", "=", "self", ".", "pad", "(", "adjacencies", ",", "0", ")", "\n", "\n", "\"\"\"MPNN layer (update the fingerprint vectors).\"\"\"", "\n", "fingerprint_vectors", "=", "self", ".", "embed_fingerprint", "(", "fingerprints", ")", "\n", "for", "l", "in", "range", "(", "self", ".", "layer_hidden", ")", ":", "\n", "            ", "hs", "=", "self", ".", "update", "(", "adjacencies", ",", "fingerprint_vectors", ",", "l", ")", "\n", "# fingerprint_vectors = F.normalize(hs, 2, 1)  # normalize.", "\n", "fingerprint_vectors", "=", "hs", "\n", "\n", "", "\"\"\"Molecular vector by sum or mean of the fingerprint vectors.\"\"\"", "\n", "molecular_vectors", "=", "self", ".", "sum", "(", "fingerprint_vectors", ",", "molecular_sizes", ")", "\n", "# molecular_vectors = self.mean(fingerprint_vectors, molecular_sizes)", "\n", "\n", "return", "molecular_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.SafeDrugModel.__init__": [[144, 183], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.MaskLinear", "list", "models.MolecularGraphNeuralNetwork.forward", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "models.SafeDrugModel.init_weights", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "zip", "average_projection.to", "models.SafeDrugModel.MPNN_emb.to", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.GRU", "torch.GRU", "torch.GRU", "models.MolecularGraphNeuralNetwork", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "range"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.policy_network.forward", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MICRON.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "ddi_adj", ",", "ddi_mask_H", ",", "MPNNSet", ",", "N_fingerprints", ",", "average_projection", ",", "emb_dim", "=", "256", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "SafeDrugModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "# pre-embedding", "\n", "self", ".", "embeddings", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Embedding", "(", "vocab_size", "[", "i", "]", ",", "emb_dim", ")", "for", "i", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "encoders", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "GRU", "(", "emb_dim", ",", "emb_dim", ",", "batch_first", "=", "True", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "query", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2", "*", "emb_dim", ",", "emb_dim", ")", "\n", ")", "\n", "\n", "# bipartite local embedding", "\n", "self", ".", "bipartite_transform", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "emb_dim", ",", "ddi_mask_H", ".", "shape", "[", "1", "]", ")", "\n", ")", "\n", "self", ".", "bipartite_output", "=", "MaskLinear", "(", "\n", "ddi_mask_H", ".", "shape", "[", "1", "]", ",", "vocab_size", "[", "2", "]", ",", "False", ")", "\n", "\n", "# MPNN global embedding", "\n", "self", ".", "MPNN_molecule_Set", "=", "list", "(", "zip", "(", "*", "MPNNSet", ")", ")", "\n", "\n", "self", ".", "MPNN_emb", "=", "MolecularGraphNeuralNetwork", "(", "\n", "N_fingerprints", ",", "emb_dim", ",", "layer_hidden", "=", "2", ",", "device", "=", "device", ")", ".", "forward", "(", "self", ".", "MPNN_molecule_Set", ")", "\n", "self", ".", "MPNN_emb", "=", "torch", ".", "mm", "(", "average_projection", ".", "to", "(", "\n", "device", "=", "self", ".", "device", ")", ",", "self", ".", "MPNN_emb", ".", "to", "(", "device", "=", "self", ".", "device", ")", ")", "\n", "# self.MPNN_emb.to(device=self.device)", "\n", "self", ".", "MPNN_emb", "=", "torch", ".", "tensor", "(", "self", ".", "MPNN_emb", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "MPNN_output", "=", "nn", ".", "Linear", "(", "vocab_size", "[", "2", "]", ",", "vocab_size", "[", "2", "]", ")", "\n", "self", ".", "MPNN_layernorm", "=", "nn", ".", "LayerNorm", "(", "vocab_size", "[", "2", "]", ")", "\n", "\n", "# graphs, bipartite matrix", "\n", "self", ".", "tensor_ddi_adj", "=", "torch", ".", "FloatTensor", "(", "ddi_adj", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "tensor_ddi_mask_H", "=", "torch", ".", "FloatTensor", "(", "ddi_mask_H", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.SafeDrugModel.forward": [[184, 229], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models.SafeDrugModel.MPNN_layernorm", "models.SafeDrugModel.bipartite_output", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "embedding.sum().unsqueeze", "models.SafeDrugModel.forward.sum_embedding"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "# patient health representation", "\n", "        ", "i1_seq", "=", "[", "]", "\n", "i2_seq", "=", "[", "]", "\n", "\n", "def", "sum_embedding", "(", "embedding", ")", ":", "\n", "            ", "return", "embedding", ".", "sum", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "# (1,1,dim)", "\n", "", "for", "adm", "in", "input", ":", "\n", "            ", "i1", "=", "sum_embedding", "(", "self", ".", "dropout", "(", "self", ".", "embeddings", "[", "0", "]", "(", "\n", "torch", ".", "LongTensor", "(", "adm", "[", "0", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", ")", ")", ")", "# (1,1,dim)", "\n", "i2", "=", "sum_embedding", "(", "self", ".", "dropout", "(", "self", ".", "embeddings", "[", "1", "]", "(", "\n", "torch", ".", "LongTensor", "(", "adm", "[", "1", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", ")", ")", ")", "\n", "i1_seq", ".", "append", "(", "i1", ")", "\n", "i2_seq", ".", "append", "(", "i2", ")", "\n", "", "i1_seq", "=", "torch", ".", "cat", "(", "i1_seq", ",", "dim", "=", "1", ")", "# (1,seq,dim)", "\n", "i2_seq", "=", "torch", ".", "cat", "(", "i2_seq", ",", "dim", "=", "1", ")", "# (1,seq,dim)", "\n", "\n", "o1", ",", "h1", "=", "self", ".", "encoders", "[", "0", "]", "(", "\n", "i1_seq", "\n", ")", "\n", "o2", ",", "h2", "=", "self", ".", "encoders", "[", "1", "]", "(", "\n", "i2_seq", "\n", ")", "\n", "patient_representations", "=", "torch", ".", "cat", "(", "\n", "[", "o1", ",", "o2", "]", ",", "dim", "=", "-", "1", ")", ".", "squeeze", "(", "dim", "=", "0", ")", "# (seq, dim*2)", "\n", "query", "=", "self", ".", "query", "(", "patient_representations", ")", "[", "-", "1", ":", ",", ":", "]", "# (seq, dim)", "\n", "\n", "# MPNN embedding", "\n", "MPNN_match", "=", "F", ".", "sigmoid", "(", "torch", ".", "mm", "(", "query", ",", "self", ".", "MPNN_emb", ".", "t", "(", ")", ")", ")", "\n", "MPNN_att", "=", "self", ".", "MPNN_layernorm", "(", "\n", "MPNN_match", "+", "self", ".", "MPNN_output", "(", "MPNN_match", ")", ")", "\n", "\n", "# local embedding", "\n", "bipartite_emb", "=", "self", ".", "bipartite_output", "(", "\n", "F", ".", "sigmoid", "(", "self", ".", "bipartite_transform", "(", "query", ")", ")", ",", "self", ".", "tensor_ddi_mask_H", ".", "t", "(", ")", ")", "\n", "\n", "result", "=", "torch", ".", "mul", "(", "bipartite_emb", ",", "MPNN_att", ")", "\n", "\n", "neg_pred_prob", "=", "F", ".", "sigmoid", "(", "result", ")", "\n", "neg_pred_prob", "=", "neg_pred_prob", ".", "t", "(", ")", "*", "neg_pred_prob", "# (voc_size, voc_size)", "\n", "\n", "batch_neg", "=", "0.0005", "*", "neg_pred_prob", ".", "mul", "(", "self", ".", "tensor_ddi_adj", ")", ".", "sum", "(", ")", "\n", "\n", "return", "result", ",", "batch_neg", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.SafeDrugModel.init_weights": [[230, 235], ["item.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize weights.\"\"\"", "\n", "initrange", "=", "0.1", "\n", "for", "item", "in", "self", ".", "embeddings", ":", "\n", "            ", "item", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.DMNC.__init__": [[238, 273], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "dnc.DNC", "range", "range"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "emb_dim", "=", "64", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "DMNC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "K", "=", "len", "(", "vocab_size", ")", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "token_start", "=", "vocab_size", "[", "2", "]", "\n", "self", ".", "token_end", "=", "vocab_size", "[", "2", "]", "+", "1", "\n", "\n", "self", ".", "embeddings", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Embedding", "(", "vocab_size", "[", "i", "]", "if", "i", "!=", "2", "else", "vocab_size", "[", "2", "]", "+", "2", ",", "emb_dim", ")", "for", "i", "in", "range", "(", "K", ")", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "encoders", "=", "nn", ".", "ModuleList", "(", "[", "DNC", "(", "\n", "input_size", "=", "emb_dim", ",", "\n", "hidden_size", "=", "emb_dim", ",", "\n", "rnn_type", "=", "'gru'", ",", "\n", "num_layers", "=", "1", ",", "\n", "num_hidden_layers", "=", "1", ",", "\n", "nr_cells", "=", "16", ",", "\n", "cell_size", "=", "emb_dim", ",", "\n", "read_heads", "=", "1", ",", "\n", "batch_first", "=", "True", ",", "\n", "gpu_id", "=", "0", ",", "\n", "independent_linears", "=", "False", "\n", ")", "for", "_", "in", "range", "(", "K", "-", "1", ")", "]", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "GRU", "(", "emb_dim", "+", "emb_dim", "*", "2", ",", "emb_dim", "*", "2", ",", "\n", "batch_first", "=", "True", ")", "# input: (y, r1, r2,) hidden: (hidden1, hidden2)", "\n", "self", ".", "interface_weighting", "=", "nn", ".", "Linear", "(", "\n", "emb_dim", "*", "2", ",", "2", "*", "(", "emb_dim", "+", "1", "+", "3", ")", ")", "# 2 read head (key, str, mode)", "\n", "self", ".", "decoder_r2o", "=", "nn", ".", "Linear", "(", "2", "*", "emb_dim", ",", "emb_dim", "*", "2", ")", "\n", "\n", "self", ".", "output", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "vocab_size", "[", "2", "]", "+", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.DMNC.forward": [[274, 366], ["r1.unsqueeze.unsqueeze.unsqueeze", "r2.unsqueeze.unsqueeze.unsqueeze", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.DMNC.decoder", "models.DMNC.decode_read_variable", "models.DMNC.read_from_memory", "models.DMNC.read_from_memory", "models.DMNC.decoder_r2o", "models.DMNC.output().squeeze", "output_logits.append", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "models.DMNC.decoder", "models.DMNC.decode_read_variable", "models.DMNC.read_from_memory", "models.DMNC.read_from_memory", "models.DMNC.decoder_r2o", "models.DMNC.output().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "output_logits.append", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "input_token.item.item.item", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "read_keys[].unsqueeze", "read_strengths[].unsqueeze", "read_modes[].unsqueeze", "read_keys[].unsqueeze", "read_strengths[].unsqueeze", "read_modes[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "read_keys[].unsqueeze", "read_strengths[].unsqueeze", "read_modes[].unsqueeze", "read_keys[].unsqueeze", "read_strengths[].unsqueeze", "read_modes[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "models.DMNC.output", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "models.DMNC.output", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.DMNC.decode_read_variable", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.DMNC.read_from_memory", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.DMNC.read_from_memory", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.DMNC.decode_read_variable", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.DMNC.read_from_memory", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.DMNC.read_from_memory"], ["", "def", "forward", "(", "self", ",", "input", ",", "i1_state", "=", "None", ",", "i2_state", "=", "None", ",", "h_n", "=", "None", ",", "max_len", "=", "20", ")", ":", "\n", "# input (3, code)", "\n", "        ", "i1_input_tensor", "=", "self", ".", "embeddings", "[", "0", "]", "(", "\n", "torch", ".", "LongTensor", "(", "input", "[", "0", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", ")", "# (1, seq, codes)", "\n", "i2_input_tensor", "=", "self", ".", "embeddings", "[", "1", "]", "(", "\n", "torch", ".", "LongTensor", "(", "input", "[", "1", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", ")", "# (1, seq, codes)", "\n", "\n", "o1", ",", "(", "ch1", ",", "m1", ",", "r1", ")", "=", "self", ".", "encoders", "[", "0", "]", "(", "i1_input_tensor", ",", "(", "None", ",", "None", ",", "None", ")", "\n", "if", "i1_state", "is", "None", "else", "i1_state", ")", "\n", "o2", ",", "(", "ch2", ",", "m2", ",", "r2", ")", "=", "self", ".", "encoders", "[", "1", "]", "(", "i2_input_tensor", ",", "(", "None", ",", "None", ",", "None", ")", "\n", "if", "i2_state", "is", "None", "else", "i2_state", ")", "\n", "\n", "# save memory state", "\n", "i1_state", "=", "(", "ch1", ",", "m1", ",", "r1", ")", "\n", "i2_state", "=", "(", "ch2", ",", "m2", ",", "r2", ")", "\n", "\n", "predict_sequence", "=", "[", "self", ".", "token_start", "]", "+", "input", "[", "2", "]", "\n", "if", "h_n", "is", "None", ":", "\n", "            ", "h_n", "=", "torch", ".", "cat", "(", "[", "ch1", "[", "0", "]", ",", "ch2", "[", "0", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "output_logits", "=", "[", "]", "\n", "r1", "=", "r1", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "r2", "=", "r2", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "for", "item", "in", "predict_sequence", ":", "\n", "# teacher force predict drug", "\n", "                ", "item_tensor", "=", "self", ".", "embeddings", "[", "2", "]", "(", "\n", "torch", ".", "LongTensor", "(", "[", "item", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", ")", "# (1, seq, codes)", "\n", "\n", "o3", ",", "h_n", "=", "self", ".", "decoder", "(", "\n", "torch", ".", "cat", "(", "[", "item_tensor", ",", "r1", ",", "r2", "]", ",", "dim", "=", "-", "1", ")", ",", "h_n", ")", "\n", "read_keys", ",", "read_strengths", ",", "read_modes", "=", "self", ".", "decode_read_variable", "(", "\n", "h_n", ".", "squeeze", "(", "0", ")", ")", "\n", "\n", "# read from i1_mem, i2_mem and i3_mem", "\n", "r1", ",", "_", "=", "self", ".", "read_from_memory", "(", "self", ".", "encoders", "[", "0", "]", ",", "\n", "read_keys", "[", ":", ",", "0", ",", ":", "]", ".", "unsqueeze", "(", "\n", "dim", "=", "1", ")", ",", "\n", "read_strengths", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "\n", "dim", "=", "1", ")", ",", "\n", "read_modes", "[", ":", ",", "0", ",", ":", "]", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "i1_state", "[", "1", "]", ")", "\n", "\n", "r2", ",", "_", "=", "self", ".", "read_from_memory", "(", "self", ".", "encoders", "[", "1", "]", ",", "\n", "read_keys", "[", ":", ",", "1", ",", ":", "]", ".", "unsqueeze", "(", "\n", "dim", "=", "1", ")", ",", "\n", "read_strengths", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "\n", "dim", "=", "1", ")", ",", "\n", "read_modes", "[", ":", ",", "1", ",", ":", "]", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "i2_state", "[", "1", "]", ")", "\n", "\n", "output", "=", "self", ".", "decoder_r2o", "(", "torch", ".", "cat", "(", "[", "r1", ",", "r2", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "output", "=", "self", ".", "output", "(", "output", "+", "o3", ")", ".", "squeeze", "(", "dim", "=", "0", ")", "\n", "output_logits", ".", "append", "(", "output", ")", "\n", "", "", "else", ":", "\n", "            ", "item_tensor", "=", "self", ".", "embeddings", "[", "2", "]", "(", "\n", "torch", ".", "LongTensor", "(", "[", "self", ".", "token_start", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", ")", "# (1, seq, codes)", "\n", "for", "idx", "in", "range", "(", "max_len", ")", ":", "\n", "# predict", "\n", "# teacher force predict drug", "\n", "                ", "o3", ",", "h_n", "=", "self", ".", "decoder", "(", "\n", "torch", ".", "cat", "(", "[", "item_tensor", ",", "r1", ",", "r2", "]", ",", "dim", "=", "-", "1", ")", ",", "h_n", ")", "\n", "read_keys", ",", "read_strengths", ",", "read_modes", "=", "self", ".", "decode_read_variable", "(", "\n", "h_n", ".", "squeeze", "(", "0", ")", ")", "\n", "\n", "# read from i1_mem, i2_mem and i3_mem", "\n", "r1", ",", "_", "=", "self", ".", "read_from_memory", "(", "self", ".", "encoders", "[", "0", "]", ",", "\n", "read_keys", "[", ":", ",", "0", ",", ":", "]", ".", "unsqueeze", "(", "\n", "dim", "=", "1", ")", ",", "\n", "read_strengths", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "\n", "dim", "=", "1", ")", ",", "\n", "read_modes", "[", ":", ",", "0", ",", ":", "]", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "i1_state", "[", "1", "]", ")", "\n", "\n", "r2", ",", "_", "=", "self", ".", "read_from_memory", "(", "self", ".", "encoders", "[", "1", "]", ",", "\n", "read_keys", "[", ":", ",", "1", ",", ":", "]", ".", "unsqueeze", "(", "\n", "dim", "=", "1", ")", ",", "\n", "read_strengths", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "\n", "dim", "=", "1", ")", ",", "\n", "read_modes", "[", ":", ",", "1", ",", ":", "]", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "i2_state", "[", "1", "]", ")", "\n", "\n", "output", "=", "self", ".", "decoder_r2o", "(", "torch", ".", "cat", "(", "[", "r1", ",", "r2", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "output", "=", "self", ".", "output", "(", "output", "+", "o3", ")", ".", "squeeze", "(", "dim", "=", "0", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "-", "1", ")", "\n", "output_logits", ".", "append", "(", "output", ")", "\n", "\n", "input_token", "=", "torch", ".", "argmax", "(", "output", ",", "dim", "=", "-", "1", ")", "\n", "input_token", "=", "input_token", ".", "item", "(", ")", "\n", "item_tensor", "=", "self", ".", "embeddings", "[", "2", "]", "(", "\n", "torch", ".", "LongTensor", "(", "[", "input_token", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", ")", "# (1, seq, codes)", "\n", "\n", "", "", "return", "torch", ".", "cat", "(", "output_logits", ",", "dim", "=", "0", ")", ",", "i1_state", ",", "i2_state", ",", "h_n", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.DMNC.read_from_memory": [[367, 371], ["dnc.memories[].read"], "methods", ["None"], ["", "def", "read_from_memory", "(", "self", ",", "dnc", ",", "read_key", ",", "read_str", ",", "read_mode", ",", "m_hidden", ")", ":", "\n", "        ", "read_vectors", ",", "hidden", "=", "dnc", ".", "memories", "[", "0", "]", ".", "read", "(", "\n", "read_key", ",", "read_str", ",", "read_mode", ",", "m_hidden", ")", "\n", "return", "read_vectors", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.DMNC.decode_read_variable": [[372, 387], ["models.DMNC.size", "models.DMNC.interface_weighting", "torch.tanh", "torch.tanh", "torch.tanh", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softmax", "torch.softmax", "torch.softmax", "input[].contiguous().view", "input[].contiguous().view", "input[].contiguous().view", "input[].contiguous", "input[].contiguous", "input[].contiguous"], "methods", ["None"], ["", "def", "decode_read_variable", "(", "self", ",", "input", ")", ":", "\n", "        ", "w", "=", "64", "\n", "r", "=", "2", "\n", "b", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "input", "=", "self", ".", "interface_weighting", "(", "input", ")", "\n", "# r read keys (b * w * r)", "\n", "read_keys", "=", "F", ".", "tanh", "(", "input", "[", ":", ",", ":", "r", "*", "w", "]", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "r", ",", "w", ")", ")", "\n", "# r read strengths (b * r)", "\n", "read_strengths", "=", "F", ".", "softplus", "(", "\n", "input", "[", ":", ",", "r", "*", "w", ":", "r", "*", "w", "+", "r", "]", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "r", ")", ")", "\n", "# read modes (b * 3*r)", "\n", "read_modes", "=", "F", ".", "softmax", "(", "\n", "input", "[", ":", ",", "(", "r", "*", "w", "+", "r", ")", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "r", ",", "3", ")", ",", "-", "1", ")", "\n", "return", "read_keys", ",", "read_strengths", ",", "read_modes", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.GAMENet.__init__": [[390, 424], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "len", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.GCN", "models.GCN", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.GAMENet.init_weights", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.GRU", "torch.GRU", "torch.GRU", "range", "range"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MICRON.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "ehr_adj", ",", "ddi_adj", ",", "emb_dim", "=", "64", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ",", "ddi_in_memory", "=", "True", ")", ":", "\n", "        ", "super", "(", "GAMENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "K", "=", "len", "(", "vocab_size", ")", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "tensor_ddi_adj", "=", "torch", ".", "FloatTensor", "(", "ddi_adj", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "ddi_in_memory", "=", "ddi_in_memory", "\n", "self", ".", "embeddings", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Embedding", "(", "vocab_size", "[", "i", "]", ",", "emb_dim", ")", "for", "i", "in", "range", "(", "K", "-", "1", ")", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "encoders", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "GRU", "(", "emb_dim", ",", "emb_dim", "*", "2", ",", "batch_first", "=", "True", ")", "for", "_", "in", "range", "(", "K", "-", "1", ")", "]", ")", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dim", "*", "4", ",", "emb_dim", ")", ",", "\n", ")", "\n", "\n", "self", ".", "ehr_gcn", "=", "GCN", "(", "\n", "voc_size", "=", "vocab_size", "[", "2", "]", ",", "emb_dim", "=", "emb_dim", ",", "adj", "=", "ehr_adj", ",", "device", "=", "device", ")", "\n", "self", ".", "ddi_gcn", "=", "GCN", "(", "\n", "voc_size", "=", "vocab_size", "[", "2", "]", ",", "emb_dim", "=", "emb_dim", ",", "adj", "=", "ddi_adj", ",", "device", "=", "device", ")", "\n", "self", ".", "inter", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ")", "\n", "\n", "self", ".", "output", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dim", "*", "3", ",", "emb_dim", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "vocab_size", "[", "2", "]", ")", "\n", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.GAMENet.forward": [[425, 499], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "models.GAMENet.query", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "models.GAMENet.output", "embedding.mean().unsqueeze", "models.GAMENet.forward.mean_embedding"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# input (adm, 3, codes)", "\n", "\n", "# generate medical embeddings and queries", "\n", "        ", "i1_seq", "=", "[", "]", "\n", "i2_seq", "=", "[", "]", "\n", "\n", "def", "mean_embedding", "(", "embedding", ")", ":", "\n", "            ", "return", "embedding", ".", "mean", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "# (1,1,dim)", "\n", "", "for", "adm", "in", "input", ":", "\n", "            ", "i1", "=", "mean_embedding", "(", "self", ".", "dropout", "(", "self", ".", "embeddings", "[", "0", "]", "(", "\n", "torch", ".", "LongTensor", "(", "adm", "[", "0", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", ")", ")", ")", "# (1,1,dim)", "\n", "i2", "=", "mean_embedding", "(", "self", ".", "dropout", "(", "self", ".", "embeddings", "[", "1", "]", "(", "\n", "torch", ".", "LongTensor", "(", "adm", "[", "1", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", ")", ")", ")", "\n", "i1_seq", ".", "append", "(", "i1", ")", "\n", "i2_seq", ".", "append", "(", "i2", ")", "\n", "", "i1_seq", "=", "torch", ".", "cat", "(", "i1_seq", ",", "dim", "=", "1", ")", "# (1,seq,dim)", "\n", "i2_seq", "=", "torch", ".", "cat", "(", "i2_seq", ",", "dim", "=", "1", ")", "# (1,seq,dim)", "\n", "\n", "o1", ",", "h1", "=", "self", ".", "encoders", "[", "0", "]", "(", "\n", "i1_seq", "\n", ")", "# o1:(1, seq, dim*2) hi:(1,1,dim*2)", "\n", "o2", ",", "h2", "=", "self", ".", "encoders", "[", "1", "]", "(", "\n", "i2_seq", "\n", ")", "\n", "patient_representations", "=", "torch", ".", "cat", "(", "\n", "[", "o1", ",", "o2", "]", ",", "dim", "=", "-", "1", ")", ".", "squeeze", "(", "dim", "=", "0", ")", "# (seq, dim*4)", "\n", "queries", "=", "self", ".", "query", "(", "patient_representations", ")", "# (seq, dim)", "\n", "\n", "# graph memory module", "\n", "'''I:generate current input'''", "\n", "query", "=", "queries", "[", "-", "1", ":", "]", "# (1,dim)", "\n", "\n", "'''G:generate graph memory bank and insert history information'''", "\n", "if", "self", ".", "ddi_in_memory", ":", "\n", "            ", "drug_memory", "=", "self", ".", "ehr_gcn", "(", ")", "-", "self", ".", "ddi_gcn", "(", ")", "*", "self", ".", "inter", "# (size, dim)", "\n", "", "else", ":", "\n", "            ", "drug_memory", "=", "self", ".", "ehr_gcn", "(", ")", "\n", "\n", "", "if", "len", "(", "input", ")", ">", "1", ":", "\n", "            ", "history_keys", "=", "queries", "[", ":", "(", "queries", ".", "size", "(", "0", ")", "-", "1", ")", "]", "# (seq-1, dim)", "\n", "\n", "history_values", "=", "np", ".", "zeros", "(", "(", "len", "(", "input", ")", "-", "1", ",", "self", ".", "vocab_size", "[", "2", "]", ")", ")", "\n", "for", "idx", ",", "adm", "in", "enumerate", "(", "input", ")", ":", "\n", "                ", "if", "idx", "==", "len", "(", "input", ")", "-", "1", ":", "\n", "                    ", "break", "\n", "", "history_values", "[", "idx", ",", "adm", "[", "2", "]", "]", "=", "1", "\n", "", "history_values", "=", "torch", ".", "FloatTensor", "(", "\n", "history_values", ")", ".", "to", "(", "self", ".", "device", ")", "# (seq-1, size)", "\n", "\n", "", "'''O:read from global memory bank and dynamic memory bank'''", "\n", "key_weights1", "=", "F", ".", "softmax", "(", "\n", "torch", ".", "mm", "(", "query", ",", "drug_memory", ".", "t", "(", ")", ")", ",", "dim", "=", "-", "1", ")", "# (1, size)", "\n", "fact1", "=", "torch", ".", "mm", "(", "key_weights1", ",", "drug_memory", ")", "# (1, dim)", "\n", "\n", "if", "len", "(", "input", ")", ">", "1", ":", "\n", "            ", "visit_weight", "=", "F", ".", "softmax", "(", "\n", "torch", ".", "mm", "(", "query", ",", "history_keys", ".", "t", "(", ")", ")", ")", "# (1, seq-1)", "\n", "weighted_values", "=", "visit_weight", ".", "mm", "(", "history_values", ")", "# (1, size)", "\n", "fact2", "=", "torch", ".", "mm", "(", "weighted_values", ",", "drug_memory", ")", "# (1, dim)", "\n", "", "else", ":", "\n", "            ", "fact2", "=", "fact1", "\n", "", "'''R:convert O and predict'''", "\n", "output", "=", "self", ".", "output", "(", "\n", "torch", ".", "cat", "(", "[", "query", ",", "fact1", ",", "fact2", "]", ",", "dim", "=", "-", "1", ")", ")", "# (1, dim)", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "neg_pred_prob", "=", "F", ".", "sigmoid", "(", "output", ")", "\n", "neg_pred_prob", "=", "neg_pred_prob", ".", "t", "(", ")", "*", "neg_pred_prob", "# (voc_size, voc_size)", "\n", "batch_neg", "=", "neg_pred_prob", ".", "mul", "(", "self", ".", "tensor_ddi_adj", ")", ".", "mean", "(", ")", "\n", "\n", "return", "output", ",", "batch_neg", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.GAMENet.init_weights": [[500, 507], ["models.GAMENet.inter.data.uniform_", "item.weight.data.uniform_"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize weights.\"\"\"", "\n", "initrange", "=", "0.1", "\n", "for", "item", "in", "self", ".", "embeddings", ":", "\n", "            ", "item", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "\n", "", "self", ".", "inter", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.Leap.__init__": [[510, 534], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "voc_size", ",", "emb_dim", "=", "64", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "Leap", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "voc_size", "=", "voc_size", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "SOS_TOKEN", "=", "voc_size", "[", "2", "]", "# start of sentence", "\n", "self", ".", "END_TOKEN", "=", "voc_size", "[", "2", "]", "+", "1", "# end   \u65b0\u589e\u7684\u4e24\u4e2a\u7f16\u7801\uff0c\u4e24\u8005\u5747\u662f\u9488\u5bf9\u4e8e\u836f\u7269\u7684embedding", "\n", "\n", "# dig_num * emb_dim", "\n", "self", ".", "enc_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "0", "]", ",", "emb_dim", ",", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# med_num * emb_dim", "\n", "self", ".", "dec_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "2", "]", "+", "2", ",", "emb_dim", ",", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "self", ".", "dec_gru", "=", "nn", ".", "GRU", "(", "emb_dim", "*", "2", ",", "emb_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "attn", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "1", ")", "\n", "\n", "self", ".", "output", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "voc_size", "[", "2", "]", "+", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.Leap.forward": [[535, 602], ["torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "models.Leap.enc_embedding().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "models.Leap.enc_embedding", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "models.Leap.dec_embedding().squeeze", "hidden_state.squeeze.squeeze.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.mm", "models.Leap.dec_gru", "hidden_state.squeeze.squeeze.squeeze", "output_logits.append", "models.Leap.dec_embedding().squeeze", "hidden_state.squeeze.squeeze.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.mm", "models.Leap.dec_gru", "hidden_state.squeeze.squeeze.squeeze", "models.Leap.output", "models.Leap.data.topk", "output_logits.append", "topi.detach", "torch.LongTensor().to.unsqueeze", "torch.LongTensor().to.unsqueeze", "torch.LongTensor().to.unsqueeze", "F.softmax.mm.size", "models.Leap.attn().t", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "hidden_state.squeeze.squeeze.unsqueeze", "models.Leap.output", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "F.softmax.mm.size", "models.Leap.attn().t", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "hidden_state.squeeze.squeeze.unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch.softmax", "torch.softmax", "torch.softmax", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "models.Leap.dec_embedding", "torch.relu", "torch.relu", "torch.relu", "models.Leap.dec_embedding", "models.Leap.attn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "models.Leap.attn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# input (3, codes)", "\n", "input_tensor", "=", "torch", ".", "LongTensor", "(", "input", "[", "0", "]", ")", ".", "to", "(", "device", ")", "\n", "# (len, dim)", "\n", "# \u5bf9\u75be\u75c5\u8fdb\u884c\u7f16\u7801", "\n", "input_embedding", "=", "self", ".", "enc_embedding", "(", "\n", "input_tensor", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "dim", "=", "0", ")", "\n", "\n", "output_logits", "=", "[", "]", "\n", "hidden_state", "=", "None", "\n", "if", "self", ".", "training", ":", "\n", "# training \u8fc7\u7a0b", "\n", "# \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5f53\u524d\u5df2\u77e5\u7684\u836f\u7269\u5206\u522b\u8fdb\u884c\u8ba1\u7b97\uff0c\u6709\u70b9\u50cfteacher-forcing\u7684\u601d\u8def", "\n", "            ", "for", "med_code", "in", "[", "self", ".", "SOS_TOKEN", "]", "+", "input", "[", "2", "]", ":", "\n", "                ", "dec_input", "=", "torch", ".", "LongTensor", "(", "\n", "[", "med_code", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "to", "(", "device", ")", "\n", "dec_input", "=", "self", ".", "dec_embedding", "(", "dec_input", ")", ".", "squeeze", "(", "\n", "dim", "=", "0", ")", "# (1,dim)  \u53d6\u5bf9\u5e94\u836f\u7269\u7684embedding", "\n", "\n", "if", "hidden_state", "is", "None", ":", "# \u4f7f\u7528\u4e0a\u4e00\u4e2aadm\u7684hidden_state", "\n", "                    ", "hidden_state", "=", "dec_input", "\n", "", "hidden_state_repeat", "=", "hidden_state", ".", "repeat", "(", "\n", "input_embedding", ".", "size", "(", "0", ")", ",", "1", ")", "# (len, dim)", "\n", "\n", "combined_input", "=", "torch", ".", "cat", "(", "\n", "[", "hidden_state_repeat", ",", "input_embedding", "]", ",", "dim", "=", "-", "1", ")", "# (len, dim*2)", "\n", "# (1, len)   \u8ba1\u7b97\u8be5\u836f\u7269\u9488\u5bf9\u6240\u6709\u75be\u75c5\u7684attention weight", "\n", "attn_weight", "=", "F", ".", "softmax", "(", "self", ".", "attn", "(", "combined_input", ")", ".", "t", "(", ")", ",", "dim", "=", "-", "1", ")", "\n", "input_embedding", "=", "attn_weight", ".", "mm", "(", "\n", "input_embedding", ")", "# (1, dim)    # \u52a0\u6743\u6c42\u548c", "\n", "\n", "_", ",", "hidden_state", "=", "self", ".", "dec_gru", "(", "torch", ".", "cat", "(", "\n", "[", "input_embedding", ",", "dec_input", "]", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "hidden_state", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "\n", "hidden_state", "=", "hidden_state", ".", "squeeze", "(", "dim", "=", "0", ")", "# (1,dim)", "\n", "\n", "# (1, med_num) \u8868\u793a\u5f53\u524d\u4f4d\u7f6e\u4e0a\u6bcf\u4e2amed\u7684logits", "\n", "output_logits", ".", "append", "(", "self", ".", "output", "(", "F", ".", "relu", "(", "hidden_state", ")", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "output_logits", ",", "dim", "=", "0", ")", "\n", "\n", "", "else", ":", "\n", "# testing \u8fc7\u7a0b\uff0c\u8fd9\u91cc\u4e0d\u80fd\u7528input[2]\u4e5f\u5c31\u662fmedication\u7684\u4fe1\u606f", "\n", "# \u63a7\u5236\u6700\u5927\u7684\u957f\u5ea6\uff08\u53ef\u4ee5\u6839\u636e\u6570\u636e\u7684\u8303\u56f4\u8c03\u6574\uff09", "\n", "            ", "for", "di", "in", "range", "(", "max_len", ")", ":", "\n", "                ", "if", "di", "==", "0", ":", "\n", "                    ", "dec_input", "=", "torch", ".", "LongTensor", "(", "[", "[", "self", ".", "SOS_TOKEN", "]", "]", ")", ".", "to", "(", "\n", "device", ")", "# \u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u7528SOS\uff0c\u540e\u9762\u7684\u5219\u7528\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u9884\u6d4b\u7ed3\u679c", "\n", "", "dec_input", "=", "self", ".", "dec_embedding", "(", "\n", "dec_input", ")", ".", "squeeze", "(", "dim", "=", "0", ")", "# (1,dim)", "\n", "if", "hidden_state", "is", "None", ":", "\n", "                    ", "hidden_state", "=", "dec_input", "\n", "", "hidden_state_repeat", "=", "hidden_state", ".", "repeat", "(", "\n", "input_embedding", ".", "size", "(", "0", ")", ",", "1", ")", "# (len, dim)", "\n", "combined_input", "=", "torch", ".", "cat", "(", "\n", "[", "hidden_state_repeat", ",", "input_embedding", "]", ",", "dim", "=", "-", "1", ")", "# (len, dim*2)", "\n", "attn_weight", "=", "F", ".", "softmax", "(", "\n", "self", ".", "attn", "(", "combined_input", ")", ".", "t", "(", ")", ",", "dim", "=", "-", "1", ")", "# (1, len)", "\n", "input_embedding", "=", "attn_weight", ".", "mm", "(", "input_embedding", ")", "# (1, dim)", "\n", "_", ",", "hidden_state", "=", "self", ".", "dec_gru", "(", "torch", ".", "cat", "(", "[", "input_embedding", ",", "dec_input", "]", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "\n", "hidden_state", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "\n", "hidden_state", "=", "hidden_state", ".", "squeeze", "(", "dim", "=", "0", ")", "# (1,dim)", "\n", "output", "=", "self", ".", "output", "(", "F", ".", "relu", "(", "hidden_state", ")", ")", "\n", "# data\u662f\u76f4\u63a5\u53d6\u6570\u636e\uff0c\u8fd9\u91cc\u76f4\u63a5\u83b7\u53d6\u5f53\u524d\u4f4d\u7f6e\u4e0a\u6700\u6709\u53ef\u80fd\u7684logits", "\n", "topv", ",", "topi", "=", "output", ".", "data", ".", "topk", "(", "1", ")", "\n", "output_logits", ".", "append", "(", "F", ".", "softmax", "(", "output", ",", "dim", "=", "-", "1", ")", ")", "\n", "dec_input", "=", "topi", ".", "detach", "(", ")", "\n", "", "return", "torch", ".", "cat", "(", "output_logits", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.Retain.__init__": [[605, 626], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "voc_size", ",", "emb_size", "=", "64", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "Retain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "voc_size", "=", "voc_size", "\n", "self", ".", "emb_size", "=", "emb_size", "\n", "self", ".", "input_len", "=", "voc_size", "[", "0", "]", "+", "voc_size", "[", "1", "]", "+", "voc_size", "[", "2", "]", "\n", "self", ".", "output_len", "=", "voc_size", "[", "2", "]", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "self", ".", "input_len", "+", "1", ",", "self", ".", "emb_size", ",", "\n", "padding_idx", "=", "self", ".", "input_len", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", "\n", ")", "\n", "\n", "self", ".", "alpha_gru", "=", "nn", ".", "GRU", "(", "emb_size", ",", "emb_size", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "beta_gru", "=", "nn", ".", "GRU", "(", "emb_size", ",", "emb_size", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "alpha_li", "=", "nn", ".", "Linear", "(", "emb_size", ",", "1", ")", "\n", "self", ".", "beta_li", "=", "nn", ".", "Linear", "(", "emb_size", ",", "emb_size", ")", "\n", "\n", "self", ".", "output", "=", "nn", ".", "Linear", "(", "emb_size", ",", "self", ".", "output_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.Retain.forward": [[627, 659], ["max", "models.Retain.embedding", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models.Retain.alpha_gru", "models.Retain.beta_gru", "g.squeeze.squeeze.squeeze", "h.squeeze.squeeze.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "models.Retain.output", "input_tmp.extend", "input_tmp.extend", "input_tmp.extend", "input_np.append", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "models.Retain.alpha_li", "models.Retain.beta_li", "list", "list", "len", "input_tmp.extend", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "len", "numpy.array", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# input: (visit, 3, codes )", "\n", "max_len", "=", "max", "(", "[", "(", "len", "(", "v", "[", "0", "]", ")", "+", "len", "(", "v", "[", "1", "]", ")", "+", "len", "(", "v", "[", "2", "]", ")", ")", "for", "v", "in", "input", "]", ")", "\n", "input_np", "=", "[", "]", "\n", "for", "visit", "in", "input", ":", "\n", "            ", "input_tmp", "=", "[", "]", "\n", "input_tmp", ".", "extend", "(", "visit", "[", "0", "]", ")", "\n", "input_tmp", ".", "extend", "(", "list", "(", "np", ".", "array", "(", "visit", "[", "1", "]", ")", "+", "self", ".", "voc_size", "[", "0", "]", ")", ")", "\n", "input_tmp", ".", "extend", "(", "\n", "list", "(", "np", ".", "array", "(", "visit", "[", "2", "]", ")", "+", "self", ".", "voc_size", "[", "0", "]", "+", "self", ".", "voc_size", "[", "1", "]", ")", ")", "\n", "if", "len", "(", "input_tmp", ")", "<", "max_len", ":", "\n", "                ", "input_tmp", ".", "extend", "(", "[", "self", ".", "input_len", "]", "*", "(", "max_len", "-", "len", "(", "input_tmp", ")", ")", ")", "\n", "\n", "", "input_np", ".", "append", "(", "input_tmp", ")", "\n", "\n", "", "visit_emb", "=", "self", ".", "embedding", "(", "torch", ".", "LongTensor", "(", "\n", "input_np", ")", ".", "to", "(", "device", ")", ")", "# (visit, max_len, emb)", "\n", "visit_emb", "=", "torch", ".", "sum", "(", "visit_emb", ",", "dim", "=", "1", ")", "# (visit, emb)", "\n", "\n", "g", ",", "_", "=", "self", ".", "alpha_gru", "(", "visit_emb", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "# g: (1, visit, emb)", "\n", "h", ",", "_", "=", "self", ".", "beta_gru", "(", "visit_emb", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "# h: (1, visit, emb)", "\n", "\n", "g", "=", "g", ".", "squeeze", "(", "dim", "=", "0", ")", "# (visit, emb)", "\n", "h", "=", "h", ".", "squeeze", "(", "dim", "=", "0", ")", "# (visit, emb)", "\n", "attn_g", "=", "F", ".", "softmax", "(", "self", ".", "alpha_li", "(", "g", ")", ",", "dim", "=", "-", "1", ")", "# (visit, 1)", "\n", "attn_h", "=", "F", ".", "tanh", "(", "self", ".", "beta_li", "(", "h", ")", ")", "# (visit, emb)", "\n", "\n", "c", "=", "attn_g", "*", "attn_h", "*", "visit_emb", "# (visit, emb)", "\n", "c", "=", "torch", ".", "sum", "(", "c", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "# (1, emb)", "\n", "\n", "return", "self", ".", "output", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.Leap_batch.__init__": [[662, 706], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "voc_size", ",", "emb_dim", "=", "64", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "Leap_batch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "voc_size", "=", "voc_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "SOS_TOKEN", "=", "voc_size", "[", "2", "]", "# start of sentence", "\n", "self", ".", "END_TOKEN", "=", "voc_size", "[", "2", "]", "+", "1", "# end   \u65b0\u589e\u7684\u4e24\u4e2a\u7f16\u7801\uff0c\u4e24\u8005\u5747\u662f\u9488\u5bf9\u4e8e\u836f\u7269\u7684embedding", "\n", "self", ".", "MED_PAD_TOKEN", "=", "voc_size", "[", "2", "]", "+", "2", "# \u7528\u4e8eembedding\u77e9\u9635\u4e2d\u7684padding\uff08\u5168\u4e3a0\uff09", "\n", "self", ".", "DIAG_PAD_TOKEN", "=", "voc_size", "[", "0", "]", "+", "2", "\n", "self", ".", "PROC_PAD_TOKEN", "=", "voc_size", "[", "1", "]", "+", "2", "\n", "# dig_num * emb_dim", "\n", "self", ".", "diag_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "0", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "DIAG_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# proc_num * emb_dim", "\n", "self", ".", "proc_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "1", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "PROC_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# med_num * emb_dim", "\n", "self", ".", "med_embedding", "=", "nn", ".", "Sequential", "(", "\n", "# \u6dfb\u52a0padding_idx\uff0c\u8868\u793a\u53d60\u5411\u91cf", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "2", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "MED_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# \u7528\u4e8e\u5bf9\u4e0a\u4e00\u4e2avisit\u8fdb\u884c\u7f16\u7801", "\n", "self", ".", "enc_gru", "=", "nn", ".", "GRU", "(", "emb_dim", ",", "emb_dim", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n", "\n", "# \u7528\u4e8e\u751f\u6210\u836f\u7269\u5e8f\u5217", "\n", "self", ".", "dec_gru", "=", "nn", ".", "GRU", "(", "emb_dim", "*", "2", ",", "emb_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "attn", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "1", ")", "\n", "\n", "# self.output = nn.Linear(emb_dim, voc_size[2]+2)", "\n", "# self.output2 = nn.Linear(emb_dim, voc_size[2]+2)", "\n", "\n", "# weights", "\n", "self", ".", "Ws", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "emb_dim", ")", "# only used at initial stage", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "voc_size", "[", "2", "]", "+", "2", ")", "# generate mode", "\n", "self", ".", "Wc", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "emb_dim", ")", "# copy mode", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.Leap_batch.encoder": [[707, 712], ["models.Leap_batch.dec_embedding", "models.Leap_batch.enc_gru"], "methods", ["None"], ["", "def", "encoder", "(", "self", ",", "x", ")", ":", "\n", "# input: (med_num)", "\n", "        ", "embedded", "=", "self", ".", "dec_embedding", "(", "x", ")", "\n", "out", ",", "h", "=", "self", ".", "enc_gru", "(", "embedded", ")", "# out: [b x seq x hid*2] (biRNN)", "\n", "return", "out", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.Leap_batch.forward": [[714, 805], ["medications.size", "models.Leap_batch.diag_embedding", "models.Leap_batch.med_embedding", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.Leap_batch.med_embedding", "models.Leap_batch.enc_gru", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "diseases.size", "models.Leap_batch.view", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "hidden_state.view.view.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.Leap_batch.attn().squeeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze.view", "torch.matmul().squeeze.view", "torch.matmul().squeeze.view", "models.Leap_batch.view", "hidden_state.view.view.view", "models.Leap_batch.dec_gru", "hidden_state_buf.view.view.view", "models.Leap_batch.Wo", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "models.Leap_batch.med_embedding", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "topi.detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.Leap_batch.med_embedding", "hidden_state.view.view.unsqueeze", "models.Leap_batch.attn", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "models.Leap_batch.med_embedding"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "m_mask_matrix", ",", "seq_length", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# batch\u7ef4\u5ea6\u4ee5\u53caseq\u7ef4\u5ea6\u4e0a\u5e76\u884c\u8ba1\u7b97\uff08\u73b0\u5728\u4e0d\u8003\u8651\u65f6\u95f4\u5e8f\u5217\u4fe1\u606f\uff09\uff0c\u6bcf\u4e00\u4e2amedication\u5e8f\u5217\u4ecd\u7136\u6309\u987a\u5e8f\u9884\u6d4b", "\n", "batch_size", ",", "max_seq_length", ",", "max_med_num", "=", "medications", ".", "size", "(", ")", "\n", "max_diag_num", "=", "diseases", ".", "size", "(", ")", "[", "2", "]", "\n", "hidden_state", "=", "None", "\n", "\n", "# print(\"diasease size\", diseases.size())", "\n", "# print(\"proc size\", procedures.size())", "\n", "# print(\"med size\", medications.size())", "\n", "input_disease_embdding", "=", "self", ".", "diag_embedding", "(", "diseases", ")", "# [batch, seq, max_d_num, emb]", "\n", "input_med_embedding", "=", "self", ".", "med_embedding", "(", "medications", ")", "# [batch, seq, max_med_num, emb]", "\n", "\n", "# \u62fc\u63a5\u4e00\u4e2alast_seq_medication\uff0c\u8868\u793a\u5bf9\u5e94seq\u5bf9\u5e94\u7684\u4e0a\u4e00\u6b21\u7684medication\uff0c\u7b2c\u4e00\u6b21\u7684\u7531\u4e8e\u6ca1\u6709\u4e0a\u4e00\u6b21medication\uff0c\u75280\u586b\u8865\uff08\u7528\u5565\u586b\u8865\u90fd\u884c\uff0c\u53cd\u6b63\u4e0d\u4f1a\u7528\u5230\uff09", "\n", "last_seq_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ",", "max_med_num", ")", ",", "0", ")", ".", "to", "(", "device", ")", "\n", "last_seq_medication", "=", "torch", ".", "cat", "(", "[", "last_seq_medication", ",", "medications", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "# m_mask_matrix\u77e9\u9635\u540c\u6837\u4e5f\u9700\u8981\u540e\u79fb", "\n", "last_m_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ",", "max_med_num", ")", ",", "-", "1e9", ")", ".", "to", "(", "device", ")", "# \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "last_m_mask", "=", "torch", ".", "cat", "(", "[", "last_m_mask", ",", "m_mask_matrix", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "last_seq_medication_emb", "=", "self", ".", "med_embedding", "(", "last_seq_medication", ")", "\n", "# print(last_seq_medication.size(), input_med_embedding.size())", "\n", "# \u5bf9last_visit\u8fdb\u884c\u7f16\u7801\uff0c\u6ce8\u610f\u8fd9\u91cc\u7528\u7684\u662flast_seq_medication\u7684\u7f16\u7801\u7ed3\u679c", "\n", "# (batch*seq, max_med_num, emb_dim*2)", "\n", "encoded_disease", ",", "_", "=", "self", ".", "enc_gru", "(", "last_seq_medication_emb", ".", "view", "(", "batch_size", "*", "max_seq_length", ",", "max_med_num", ",", "self", ".", "emb_dim", ")", ")", "\n", "\n", "# \u540c\u6837\u62fc\u63a5\u4e00\u4e2alast_medication\uff0c\u7528\u4e8e\u8fdb\u884c\u5e8f\u5217\u751f\u6210\uff0c\u6ce8\u610f\u7ef4\u5ea6\u4e0a\u589e\u52a0\u4e86\u4e00\u7ef4", "\n", "last_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq_length", ",", "1", ")", ",", "self", ".", "SOS_TOKEN", ")", ".", "to", "(", "device", ")", "# [batch_size, seq, 1]", "\n", "last_medication", "=", "torch", ".", "cat", "(", "[", "last_medication", ",", "medications", "]", ",", "dim", "=", "2", ")", "# [batch_size, seq, max_med_num + 1]", "\n", "# print(last_medication.size(), medications.size())", "\n", "\n", "hidden_state", "=", "None", "\n", "# \u9884\u5b9a\u4e49\u7ed3\u679c\u77e9\u9635", "\n", "if", "self", ".", "training", ":", "\n", "            ", "output_logits", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max_seq_length", ",", "max_med_num", "+", "1", ",", "self", ".", "voc_size", "[", "2", "]", "+", "2", ")", ".", "to", "(", "device", ")", "\n", "loop_size", "=", "max_med_num", "+", "1", "\n", "", "else", ":", "\n", "            ", "output_logits", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max_seq_length", ",", "max_len", ",", "self", ".", "voc_size", "[", "2", "]", "+", "2", ")", ".", "to", "(", "device", ")", "\n", "loop_size", "=", "max_len", "\n", "\n", "# \u5f00\u59cb\u904d\u5386\u751f\u6210\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684\u7ed3\u679c", "\n", "", "for", "i", "in", "range", "(", "loop_size", ")", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "dec_input", "=", "self", ".", "med_embedding", "(", "last_medication", "[", ":", ",", ":", ",", "i", "]", ")", "# (batch, seq, emb_dim)  \u53d6\u4e0a\u4e00\u4e2a\u836f\u7269\u7684embedding", "\n", "", "else", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "dec_input", "=", "self", ".", "med_embedding", "(", "last_medication", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "", "elif", "i", "==", "max_len", ":", "\n", "                    ", "break", "\n", "", "else", ":", "\n", "# \u975e\u8bad\u7ec3\u65f6\uff0c\u53ea\u80fd\u53d6\u4e0a\u4e00\u6b21\u7684\u8f93\u51fa", "\n", "                    ", "dec_input", "=", "self", ".", "med_embedding", "(", "dec_input", ")", "\n", "\n", "", "", "if", "hidden_state", "is", "None", ":", "\n", "                    ", "hidden_state", "=", "dec_input", "\n", "\n", "# \u6839\u636e\u5f53\u524d\u7684\u75be\u75c5\u505aattention\uff0c\u8ba1\u7b97hidden_state (batch, seq, emb_dim)", "\n", "# print(dec_input.size())", "\n", "", "hidden_state_repeat", "=", "hidden_state", ".", "unsqueeze", "(", "dim", "=", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "max_diag_num", ",", "1", ")", "# (batch, seq, max_diag_num, emb_dim)", "\n", "# print(hidden_state_repeat.size())", "\n", "combined_input", "=", "torch", ".", "cat", "(", "[", "hidden_state_repeat", ",", "input_disease_embdding", "]", ",", "dim", "=", "-", "1", ")", "# (batch, seq, max_diag_num, emb_dim*2)", "\n", "\"\"\"\u8fd9\u91ccattn_score\u7ed3\u679c\u9700\u8981\u6839\u636emask\u6765\u52a0\u4e0a\u4e00\u4e2a\u8f83\u5927\u7684\u8d1f\u503c\uff0c\u4f7f\u5f97\u5bf9\u5e94softmax\u503c\u63a5\u8fd10\uff0c\u6765\u907f\u514d\u5206\u6563\u6ce8\u610f\u529b\"\"\"", "\n", "attn_score", "=", "self", ".", "attn", "(", "combined_input", ")", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "# (batch, seq, max_diag_num, 1) -> (batch, seq, max_diag_num)", "\n", "attn_score", "=", "attn_score", "+", "d_mask_matrix", "\n", "\n", "attn_weight", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "2", ")", "# (batch, seq, 1, max_diag_num) \u6ce8\u610f\u529b\u6743\u91cd", "\n", "# print(attn_weight.size())", "\n", "input_embedding", "=", "torch", ".", "matmul", "(", "attn_weight", ",", "input_disease_embdding", ")", ".", "squeeze", "(", "dim", "=", "2", ")", "# (batch, seq, emb_dim)", "\n", "\n", "# \u4e3a\u4e86\u9001\u5230dec_gru\u4e2d\u8fdb\u884creshape", "\n", "input_embedding_buf", "=", "input_embedding", ".", "view", "(", "batch_size", "*", "max_seq_length", ",", "1", ",", "-", "1", ")", "\n", "dec_input_buf", "=", "dec_input", ".", "view", "(", "batch_size", "*", "max_seq_length", ",", "1", ",", "-", "1", ")", "\n", "# print(input_embedding_buf.size())", "\n", "# print(dec_input_buf.size())", "\n", "hidden_state_buf", "=", "hidden_state", ".", "view", "(", "1", ",", "batch_size", "*", "max_seq_length", ",", "-", "1", ")", "\n", "_", ",", "hidden_state_buf", "=", "self", ".", "dec_gru", "(", "torch", ".", "cat", "(", "[", "input_embedding_buf", ",", "dec_input_buf", "]", ",", "dim", "=", "-", "1", ")", ",", "hidden_state_buf", ")", "\n", "# print(hidden_state_buf.size())", "\n", "hidden_state", "=", "hidden_state_buf", ".", "view", "(", "batch_size", ",", "max_seq_length", ",", "-", "1", ")", "# (batch, seq, emb_dim)", "\n", "# print(hidden_state.size())", "\n", "\n", "score_g", "=", "self", ".", "Wo", "(", "hidden_state", ")", "# (batch, seq, voc_size[2]+2)", "\n", "\n", "prob", "=", "torch", ".", "log_softmax", "(", "score_g", ",", "dim", "=", "-", "1", ")", "\n", "output_logits", "[", ":", ",", ":", ",", "i", ",", ":", "]", "=", "prob", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "# data\u662f\u76f4\u63a5\u53d6\u6570\u636e\uff0c\u8fd9\u91cc\u76f4\u63a5\u83b7\u53d6\u5f53\u524d\u4f4d\u7f6e\u4e0a\u6700\u6709\u53ef\u80fd\u7684logits", "\n", "                ", "_", ",", "topi", "=", "torch", ".", "topk", "(", "prob", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "dec_input", "=", "topi", ".", "detach", "(", ")", "\n", "\n", "", "", "return", "output_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MICRON.__init__": [[808, 832], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "models.MICRON.init_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MICRON.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "ddi_adj", ",", "emb_dim", "=", "256", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "MICRON", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "# pre-embedding", "\n", "self", ".", "embeddings", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Embedding", "(", "vocab_size", "[", "i", "]", ",", "emb_dim", ")", "for", "i", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "health_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", "*", "emb_dim", ",", "emb_dim", ")", "\n", ")", "\n", "\n", "# ", "\n", "self", ".", "prescription_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dim", "*", "4", ",", "vocab_size", "[", "2", "]", ")", "\n", ")", "\n", "\n", "# graphs, bipartite matrix", "\n", "self", ".", "tensor_ddi_adj", "=", "torch", ".", "FloatTensor", "(", "ddi_adj", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MICRON.forward": [[833, 874], ["models.MICRON.forward.sum_embedding"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "# patient health representation", "\n", "        ", "def", "sum_embedding", "(", "embedding", ")", ":", "\n", "            ", "return", "embedding", ".", "sum", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "# (1,1,dim)", "\n", "\n", "", "diag_emb", "=", "sum_embedding", "(", "self", ".", "dropout", "(", "self", ".", "embeddings", "[", "0", "]", "(", "torch", ".", "LongTensor", "(", "input", "[", "-", "1", "]", "[", "0", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", ")", ")", ")", "# (1,1,dim)", "\n", "prod_emb", "=", "sum_embedding", "(", "self", ".", "dropout", "(", "self", ".", "embeddings", "[", "1", "]", "(", "torch", ".", "LongTensor", "(", "input", "[", "-", "1", "]", "[", "1", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", ")", ")", ")", "\n", "# diag_emb = torch.cat(diag_emb, dim=1) #(1,seq,dim)", "\n", "# prod_emb = torch.cat(prod_emb, dim=1) #(1,seq,dim)", "\n", "\n", "if", "len", "(", "input", ")", "<", "2", ":", "\n", "            ", "diag_emb_last", "=", "diag_emb", "*", "torch", ".", "tensor", "(", "0.0", ")", "\n", "prod_emb_last", "=", "diag_emb", "*", "torch", ".", "tensor", "(", "0.0", ")", "\n", "", "else", ":", "\n", "            ", "diag_emb_last", "=", "sum_embedding", "(", "self", ".", "dropout", "(", "self", ".", "embeddings", "[", "0", "]", "(", "torch", ".", "LongTensor", "(", "input", "[", "-", "2", "]", "[", "0", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", ")", ")", ")", "# (1,1,dim)", "\n", "prod_emb_last", "=", "sum_embedding", "(", "self", ".", "dropout", "(", "self", ".", "embeddings", "[", "1", "]", "(", "torch", ".", "LongTensor", "(", "input", "[", "-", "2", "]", "[", "1", "]", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", ")", ")", ")", "\n", "# diag_emb_last = torch.cat(diag_emb_last, dim=1) #(1,seq,dim)", "\n", "# prod_emb_last = torch.cat(prod_emb_last, dim=1) #(1,seq,dim)", "\n", "\n", "", "health_representation", "=", "torch", ".", "cat", "(", "[", "diag_emb", ",", "prod_emb", "]", ",", "dim", "=", "-", "1", ")", ".", "squeeze", "(", "dim", "=", "0", ")", "# (seq, dim*2)", "\n", "health_representation_last", "=", "torch", ".", "cat", "(", "[", "diag_emb_last", ",", "prod_emb_last", "]", ",", "dim", "=", "-", "1", ")", ".", "squeeze", "(", "dim", "=", "0", ")", "# (seq, dim*2)", "\n", "\n", "health_rep", "=", "self", ".", "health_net", "(", "health_representation", ")", "[", "-", "1", ":", ",", ":", "]", "# (seq, dim)", "\n", "health_rep_last", "=", "self", ".", "health_net", "(", "health_representation_last", ")", "[", "-", "1", ":", ",", ":", "]", "# (seq, dim)", "\n", "health_residual_rep", "=", "health_rep", "-", "health_rep_last", "\n", "\n", "# drug representation", "\n", "drug_rep", "=", "self", ".", "prescription_net", "(", "health_rep", ")", "\n", "drug_rep_last", "=", "self", ".", "prescription_net", "(", "health_rep_last", ")", "\n", "drug_residual_rep", "=", "self", ".", "prescription_net", "(", "health_residual_rep", ")", "\n", "\n", "# reconstructon loss", "\n", "rec_loss", "=", "1", "/", "self", ".", "tensor_ddi_adj", ".", "shape", "[", "0", "]", "*", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "(", "F", ".", "sigmoid", "(", "drug_rep", ")", "-", "F", ".", "sigmoid", "(", "drug_rep_last", "+", "drug_residual_rep", ")", ")", ",", "2", ")", ")", "\n", "\n", "# ddi_loss", "\n", "neg_pred_prob", "=", "F", ".", "sigmoid", "(", "drug_rep", ")", "\n", "neg_pred_prob", "=", "neg_pred_prob", ".", "t", "(", ")", "*", "neg_pred_prob", "# (voc_size, voc_size)", "\n", "\n", "batch_neg", "=", "1", "/", "self", ".", "tensor_ddi_adj", ".", "shape", "[", "0", "]", "*", "neg_pred_prob", ".", "mul", "(", "self", ".", "tensor_ddi_adj", ")", ".", "sum", "(", ")", "\n", "return", "drug_rep", ",", "drug_rep_last", ",", "drug_residual_rep", ",", "batch_neg", ",", "rec_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MICRON.init_weights": [[875, 880], ["item.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize weights.\"\"\"", "\n", "initrange", "=", "0.1", "\n", "for", "item", "in", "self", ".", "embeddings", ":", "\n", "            ", "item", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.mimic_data.__init__": [[9, 12], ["torch.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.mimic_data.__getitem__": [[13, 15], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.mimic_data.__len__": [[16, 18], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_batch": [[20, 110], ["torch.tensor", "len", "max", "torch.full", "range", "torch.full", "range", "torch.full", "range", "torch.full", "torch.full", "torch.full", "torch.full", "enumerate", "torch.full", "torch.full", "torch.full", "enumerate", "enumerate", "d_length_matrix.append", "p_length_matrix.append", "m_length_matrix.append", "d_dec_list.append", "d_stay_list.append", "range", "range", "range", "zip", "enumerate", "enumerate", "len", "d_buf.append", "p_buf.append", "m_buf.append", "max", "max", "max", "len", "len", "len", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "len", "len", "len", "len", "len", "d_dec_list_buf.append", "d_stay_list_buf.append", "set", "set", "list", "list", "d_dec_list_buf.append", "d_stay_list_buf.append", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "pad_batch", "(", "batch", ")", ":", "\n", "    ", "seq_length", "=", "torch", ".", "tensor", "(", "[", "len", "(", "data", ")", "for", "data", "in", "batch", "]", ")", "\n", "batch_size", "=", "len", "(", "batch", ")", "\n", "max_seq", "=", "max", "(", "seq_length", ")", "\n", "\n", "# \u7edf\u8ba1\u6bcf\u4e00\u4e2aseq\u75be\u75c5\u3001\u624b\u672f\u3001\u836f\u7269\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u6700\u503c", "\n", "# \u540c\u65f6\u4e3a\u6bcf\u4e00\u4e2aseq\u7684disease\u8ba1\u7b97\u4e0e\u4e0a\u4e00\u4e2aseq\u7684disease\u4e4b\u95f4\u7684\u4ea4\u96c6\u548c\u5dee\u96c6", "\n", "d_length_matrix", "=", "[", "]", "\n", "p_length_matrix", "=", "[", "]", "\n", "m_length_matrix", "=", "[", "]", "\n", "d_max_num", "=", "0", "\n", "p_max_num", "=", "0", "\n", "m_max_num", "=", "0", "\n", "d_dec_list", "=", "[", "]", "\n", "d_stay_list", "=", "[", "]", "\n", "for", "data", "in", "batch", ":", "\n", "        ", "d_buf", ",", "p_buf", ",", "m_buf", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "d_dec_list_buf", ",", "d_stay_list_buf", "=", "[", "]", ",", "[", "]", "\n", "for", "idx", ",", "seq", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "d_buf", ".", "append", "(", "len", "(", "seq", "[", "0", "]", ")", ")", "\n", "p_buf", ".", "append", "(", "len", "(", "seq", "[", "1", "]", ")", ")", "\n", "m_buf", ".", "append", "(", "len", "(", "seq", "[", "2", "]", ")", ")", "\n", "d_max_num", "=", "max", "(", "d_max_num", ",", "len", "(", "seq", "[", "0", "]", ")", ")", "\n", "p_max_num", "=", "max", "(", "p_max_num", ",", "len", "(", "seq", "[", "1", "]", ")", ")", "\n", "m_max_num", "=", "max", "(", "m_max_num", ",", "len", "(", "seq", "[", "2", "]", ")", ")", "\n", "if", "idx", "==", "0", ":", "\n", "# \u7b2c\u4e00\u4e2aseq\uff0c\u5219\u4ea4\u96c6\u4e0e\u5dee\u96c6\u4e3a\u7a7a", "\n", "                ", "d_dec_list_buf", ".", "append", "(", "[", "]", ")", "\n", "d_stay_list_buf", ".", "append", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "# \u8ba1\u7b97\u5dee\u96c6\u4e0e\u4ea4\u96c6", "\n", "                ", "cur_d", "=", "set", "(", "seq", "[", "0", "]", ")", "\n", "last_d", "=", "set", "(", "data", "[", "idx", "-", "1", "]", "[", "0", "]", ")", "\n", "stay_list", "=", "list", "(", "cur_d", "&", "last_d", ")", "\n", "dec_list", "=", "list", "(", "last_d", "-", "cur_d", ")", "\n", "d_dec_list_buf", ".", "append", "(", "dec_list", ")", "\n", "d_stay_list_buf", ".", "append", "(", "stay_list", ")", "\n", "", "", "d_length_matrix", ".", "append", "(", "d_buf", ")", "\n", "p_length_matrix", ".", "append", "(", "p_buf", ")", "\n", "m_length_matrix", ".", "append", "(", "m_buf", ")", "\n", "d_dec_list", ".", "append", "(", "d_dec_list_buf", ")", "\n", "d_stay_list", ".", "append", "(", "d_stay_list_buf", ")", "\n", "\n", "# \u751f\u6210m_mask_matrix", "\n", "", "m_mask_matrix", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "m_max_num", ")", ",", "-", "1e9", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "m_length_matrix", "[", "i", "]", ")", ")", ":", "\n", "            ", "m_mask_matrix", "[", "i", ",", "j", ",", ":", "m_length_matrix", "[", "i", "]", "[", "j", "]", "]", "=", "0.", "\n", "\n", "# \u751f\u6210d_mask_matrix", "\n", "", "", "d_mask_matrix", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1e9", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "d_length_matrix", "[", "i", "]", ")", ")", ":", "\n", "            ", "d_mask_matrix", "[", "i", ",", "j", ",", ":", "d_length_matrix", "[", "i", "]", "[", "j", "]", "]", "=", "0.", "\n", "\n", "# \u751f\u6210p_mask_matrix", "\n", "", "", "p_mask_matrix", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "p_max_num", ")", ",", "-", "1e9", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "p_length_matrix", "[", "i", "]", ")", ")", ":", "\n", "            ", "p_mask_matrix", "[", "i", ",", "j", ",", ":", "p_length_matrix", "[", "i", "]", "[", "j", "]", "]", "=", "0.", "\n", "\n", "# \u5206\u522b\u751f\u6210dec_disease_tensor\u548cstay_disease_tensor", "\n", "", "", "dec_disease_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1", ")", "\n", "stay_disease_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1", ")", "\n", "dec_disease_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1e9", ")", "\n", "stay_disease_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1e9", ")", "\n", "for", "b_id", ",", "(", "dec_seqs", ",", "stay_seqs", ")", "in", "enumerate", "(", "zip", "(", "d_dec_list", ",", "d_stay_list", ")", ")", ":", "\n", "        ", "for", "s_id", ",", "(", "dec_adm", ",", "stay_adm", ")", "in", "enumerate", "(", "zip", "(", "dec_seqs", ",", "stay_seqs", ")", ")", ":", "\n", "            ", "dec_disease_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "torch", ".", "tensor", "(", "dec_adm", ")", "\n", "stay_disease_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "stay_adm", ")", "]", "=", "torch", ".", "tensor", "(", "stay_adm", ")", "\n", "dec_disease_mask", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "0.", "\n", "stay_disease_mask", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "0.", "\n", "\n", "# \u5206\u522b\u751f\u6210disease\u3001procedure\u3001medication\u7684\u6570\u636e", "\n", "", "", "disease_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1", ")", "\n", "procedure_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "p_max_num", ")", ",", "-", "1", ")", "\n", "medication_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "m_max_num", ")", ",", "0", ")", "\n", "\n", "# \u5206\u522b\u62fc\u63a5\u6210\u4e00\u4e2abatch\u7684\u6570\u636e", "\n", "for", "b_id", ",", "data", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "for", "s_id", ",", "adm", "in", "enumerate", "(", "data", ")", ":", "\n", "# adm\u90e8\u5206\u7684\u6570\u636e\u6309\u7167disease\u3001procedure\u3001medication\u6392\u5e8f", "\n", "            ", "disease_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "adm", "[", "0", "]", ")", "]", "=", "torch", ".", "tensor", "(", "adm", "[", "0", "]", ")", "\n", "procedure_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "adm", "[", "1", "]", ")", "]", "=", "torch", ".", "tensor", "(", "adm", "[", "1", "]", ")", "\n", "medication_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "adm", "[", "2", "]", ")", "]", "=", "torch", ".", "tensor", "(", "adm", "[", "2", "]", ")", "\n", "# print(disease_tensor[1])", "\n", "", "", "return", "disease_tensor", ",", "procedure_tensor", ",", "medication_tensor", ",", "seq_length", ",", "d_length_matrix", ",", "p_length_matrix", ",", "m_length_matrix", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "dec_disease_tensor", ",", "stay_disease_tensor", ",", "dec_disease_mask", ",", "stay_disease_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_batch_v2_train": [[112, 234], ["torch.tensor", "len", "max", "torch.full", "range", "torch.full", "range", "torch.full", "range", "torch.full", "torch.full", "torch.full", "torch.full", "enumerate", "torch.full", "torch.full", "torch.full", "torch.full", "enumerate", "torch.full", "torch.full", "torch.full", "enumerate", "enumerate", "d_length_matrix.append", "p_length_matrix.append", "m_length_matrix.append", "d_dec_list.append", "d_stay_list.append", "p_dec_list.append", "p_stay_list.append", "range", "range", "range", "zip", "enumerate", "zip", "enumerate", "enumerate", "len", "d_buf.append", "p_buf.append", "m_buf.append", "max", "max", "max", "len", "len", "len", "zip", "torch.tensor", "torch.tensor", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "len", "len", "len", "len", "len", "d_dec_list_buf.append", "d_stay_list_buf.append", "p_dec_list_buf.append", "p_stay_list_buf.append", "set", "set", "list", "list", "d_dec_list_buf.append", "d_stay_list_buf.append", "set", "set", "list", "list", "p_dec_list_buf.append", "p_stay_list_buf.append", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "pad_batch_v2_train", "(", "batch", ")", ":", "\n", "    ", "seq_length", "=", "torch", ".", "tensor", "(", "[", "len", "(", "data", ")", "for", "data", "in", "batch", "]", ")", "\n", "batch_size", "=", "len", "(", "batch", ")", "\n", "max_seq", "=", "max", "(", "seq_length", ")", "\n", "\n", "# \u7edf\u8ba1\u6bcf\u4e00\u4e2aseq\u75be\u75c5\u3001\u624b\u672f\u3001\u836f\u7269\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u6700\u503c", "\n", "# \u540c\u65f6\u4e3a\u6bcf\u4e00\u4e2aseq\u7684disease\u8ba1\u7b97\u4e0e\u4e0a\u4e00\u4e2aseq\u7684disease\u4e4b\u95f4\u7684\u4ea4\u96c6\u548c\u5dee\u96c6", "\n", "d_length_matrix", "=", "[", "]", "\n", "p_length_matrix", "=", "[", "]", "\n", "m_length_matrix", "=", "[", "]", "\n", "d_max_num", "=", "0", "\n", "p_max_num", "=", "0", "\n", "m_max_num", "=", "0", "\n", "d_dec_list", "=", "[", "]", "\n", "d_stay_list", "=", "[", "]", "\n", "p_dec_list", "=", "[", "]", "\n", "p_stay_list", "=", "[", "]", "\n", "for", "data", "in", "batch", ":", "\n", "        ", "d_buf", ",", "p_buf", ",", "m_buf", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "d_dec_list_buf", ",", "d_stay_list_buf", "=", "[", "]", ",", "[", "]", "\n", "p_dec_list_buf", ",", "p_stay_list_buf", "=", "[", "]", ",", "[", "]", "\n", "for", "idx", ",", "seq", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "d_buf", ".", "append", "(", "len", "(", "seq", "[", "0", "]", ")", ")", "\n", "p_buf", ".", "append", "(", "len", "(", "seq", "[", "1", "]", ")", ")", "\n", "m_buf", ".", "append", "(", "len", "(", "seq", "[", "2", "]", ")", ")", "\n", "d_max_num", "=", "max", "(", "d_max_num", ",", "len", "(", "seq", "[", "0", "]", ")", ")", "\n", "p_max_num", "=", "max", "(", "p_max_num", ",", "len", "(", "seq", "[", "1", "]", ")", ")", "\n", "m_max_num", "=", "max", "(", "m_max_num", ",", "len", "(", "seq", "[", "2", "]", ")", ")", "\n", "if", "idx", "==", "0", ":", "\n", "# \u7b2c\u4e00\u4e2aseq\uff0c\u5219\u4ea4\u96c6\u4e0e\u5dee\u96c6\u4e3a\u7a7a", "\n", "                ", "d_dec_list_buf", ".", "append", "(", "[", "]", ")", "\n", "d_stay_list_buf", ".", "append", "(", "[", "]", ")", "\n", "p_dec_list_buf", ".", "append", "(", "[", "]", ")", "\n", "p_stay_list_buf", ".", "append", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "# \u8ba1\u7b97\u5dee\u96c6\u4e0e\u4ea4\u96c6", "\n", "                ", "cur_d", "=", "set", "(", "seq", "[", "0", "]", ")", "\n", "last_d", "=", "set", "(", "data", "[", "idx", "-", "1", "]", "[", "0", "]", ")", "\n", "stay_list", "=", "list", "(", "cur_d", "&", "last_d", ")", "\n", "dec_list", "=", "list", "(", "last_d", "-", "cur_d", ")", "\n", "d_dec_list_buf", ".", "append", "(", "dec_list", ")", "\n", "d_stay_list_buf", ".", "append", "(", "stay_list", ")", "\n", "\n", "cur_p", "=", "set", "(", "seq", "[", "1", "]", ")", "\n", "last_p", "=", "set", "(", "data", "[", "idx", "-", "1", "]", "[", "1", "]", ")", "\n", "proc_stay_list", "=", "list", "(", "cur_p", "&", "last_p", ")", "\n", "proc_dec_list", "=", "list", "(", "last_p", "-", "cur_p", ")", "\n", "p_dec_list_buf", ".", "append", "(", "proc_dec_list", ")", "\n", "p_stay_list_buf", ".", "append", "(", "proc_stay_list", ")", "\n", "", "", "d_length_matrix", ".", "append", "(", "d_buf", ")", "\n", "p_length_matrix", ".", "append", "(", "p_buf", ")", "\n", "m_length_matrix", ".", "append", "(", "m_buf", ")", "\n", "d_dec_list", ".", "append", "(", "d_dec_list_buf", ")", "\n", "d_stay_list", ".", "append", "(", "d_stay_list_buf", ")", "\n", "p_dec_list", ".", "append", "(", "p_dec_list_buf", ")", "\n", "p_stay_list", ".", "append", "(", "p_stay_list_buf", ")", "\n", "\n", "# \u751f\u6210m_mask_matrix", "\n", "", "m_mask_matrix", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "m_max_num", ")", ",", "-", "1e9", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "m_length_matrix", "[", "i", "]", ")", ")", ":", "\n", "            ", "m_mask_matrix", "[", "i", ",", "j", ",", ":", "m_length_matrix", "[", "i", "]", "[", "j", "]", "]", "=", "0.", "\n", "\n", "# \u751f\u6210d_mask_matrix", "\n", "", "", "d_mask_matrix", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1e9", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "d_length_matrix", "[", "i", "]", ")", ")", ":", "\n", "            ", "d_mask_matrix", "[", "i", ",", "j", ",", ":", "d_length_matrix", "[", "i", "]", "[", "j", "]", "]", "=", "0.", "\n", "\n", "# \u751f\u6210p_mask_matrix", "\n", "", "", "p_mask_matrix", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "p_max_num", ")", ",", "-", "1e9", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "p_length_matrix", "[", "i", "]", ")", ")", ":", "\n", "            ", "p_mask_matrix", "[", "i", ",", "j", ",", ":", "p_length_matrix", "[", "i", "]", "[", "j", "]", "]", "=", "0.", "\n", "\n", "# \u5206\u522b\u751f\u6210dec_disease_tensor\u548cstay_disease_tensor", "\n", "", "", "dec_disease_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1", ")", "\n", "stay_disease_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1", ")", "\n", "dec_disease_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1e9", ")", "\n", "stay_disease_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1e9", ")", "\n", "for", "b_id", ",", "(", "dec_seqs", ",", "stay_seqs", ")", "in", "enumerate", "(", "zip", "(", "d_dec_list", ",", "d_stay_list", ")", ")", ":", "\n", "        ", "for", "s_id", ",", "(", "dec_adm", ",", "stay_adm", ")", "in", "enumerate", "(", "zip", "(", "dec_seqs", ",", "stay_seqs", ")", ")", ":", "\n", "            ", "dec_disease_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "torch", ".", "tensor", "(", "dec_adm", ")", "\n", "stay_disease_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "stay_adm", ")", "]", "=", "torch", ".", "tensor", "(", "stay_adm", ")", "\n", "dec_disease_mask", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "0.", "\n", "stay_disease_mask", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "0.", "\n", "\n", "# \u5206\u522b\u751f\u6210dec_disease_tensor\u548cstay_disease_tensor", "\n", "", "", "dec_proc_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "p_max_num", ")", ",", "-", "1", ")", "\n", "stay_proc_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "p_max_num", ")", ",", "-", "1", ")", "\n", "dec_proc_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "p_max_num", ")", ",", "-", "1e9", ")", "\n", "stay_proc_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "p_max_num", ")", ",", "-", "1e9", ")", "\n", "for", "b_id", ",", "(", "dec_seqs", ",", "stay_seqs", ")", "in", "enumerate", "(", "zip", "(", "p_dec_list", ",", "p_stay_list", ")", ")", ":", "\n", "        ", "for", "s_id", ",", "(", "dec_adm", ",", "stay_adm", ")", "in", "enumerate", "(", "zip", "(", "dec_seqs", ",", "stay_seqs", ")", ")", ":", "\n", "            ", "dec_proc_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "torch", ".", "tensor", "(", "dec_adm", ")", "\n", "stay_proc_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "stay_adm", ")", "]", "=", "torch", ".", "tensor", "(", "stay_adm", ")", "\n", "dec_proc_mask", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "0.", "\n", "stay_proc_mask", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "0.", "\n", "\n", "# \u5206\u522b\u751f\u6210disease\u3001procedure\u3001medication\u7684\u6570\u636e", "\n", "", "", "disease_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1", ")", "\n", "procedure_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "p_max_num", ")", ",", "-", "1", ")", "\n", "medication_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "m_max_num", ")", ",", "0", ")", "\n", "\n", "# \u5206\u522b\u62fc\u63a5\u6210\u4e00\u4e2abatch\u7684\u6570\u636e", "\n", "for", "b_id", ",", "data", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "for", "s_id", ",", "adm", "in", "enumerate", "(", "data", ")", ":", "\n", "# adm\u90e8\u5206\u7684\u6570\u636e\u6309\u7167disease\u3001procedure\u3001medication\u6392\u5e8f", "\n", "            ", "disease_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "adm", "[", "0", "]", ")", "]", "=", "torch", ".", "tensor", "(", "adm", "[", "0", "]", ")", "\n", "procedure_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "adm", "[", "1", "]", ")", "]", "=", "torch", ".", "tensor", "(", "adm", "[", "1", "]", ")", "\n", "# dynamic shuffle", "\n", "# cur_medications = adm[2]", "\n", "# random.shuffle(cur_medications)", "\n", "# medication_tensor[b_id, s_id, :len(adm[2])] = torch.tensor(cur_medications)", "\n", "medication_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "adm", "[", "2", "]", ")", "]", "=", "torch", ".", "tensor", "(", "adm", "[", "2", "]", ")", "\n", "\n", "# print(disease_tensor[1])", "\n", "", "", "return", "disease_tensor", ",", "procedure_tensor", ",", "medication_tensor", ",", "seq_length", ",", "d_length_matrix", ",", "p_length_matrix", ",", "m_length_matrix", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "dec_disease_tensor", ",", "stay_disease_tensor", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc_tensor", ",", "stay_proc_tensor", ",", "dec_proc_mask", ",", "stay_proc_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_batch_v2_eval": [[237, 355], ["torch.tensor", "len", "max", "torch.full", "range", "torch.full", "range", "torch.full", "range", "torch.full", "torch.full", "torch.full", "torch.full", "enumerate", "torch.full", "torch.full", "torch.full", "torch.full", "enumerate", "torch.full", "torch.full", "torch.full", "enumerate", "enumerate", "d_length_matrix.append", "p_length_matrix.append", "m_length_matrix.append", "d_dec_list.append", "d_stay_list.append", "p_dec_list.append", "p_stay_list.append", "range", "range", "range", "zip", "enumerate", "zip", "enumerate", "enumerate", "len", "d_buf.append", "p_buf.append", "m_buf.append", "max", "max", "max", "len", "len", "len", "zip", "torch.tensor", "torch.tensor", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "len", "len", "len", "len", "len", "d_dec_list_buf.append", "d_stay_list_buf.append", "p_dec_list_buf.append", "p_stay_list_buf.append", "set", "set", "list", "list", "d_dec_list_buf.append", "d_stay_list_buf.append", "set", "set", "list", "list", "p_dec_list_buf.append", "p_stay_list_buf.append", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "pad_batch_v2_eval", "(", "batch", ")", ":", "\n", "    ", "seq_length", "=", "torch", ".", "tensor", "(", "[", "len", "(", "data", ")", "for", "data", "in", "batch", "]", ")", "\n", "batch_size", "=", "len", "(", "batch", ")", "\n", "max_seq", "=", "max", "(", "seq_length", ")", "\n", "\n", "# \u7edf\u8ba1\u6bcf\u4e00\u4e2aseq\u75be\u75c5\u3001\u624b\u672f\u3001\u836f\u7269\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u6700\u503c", "\n", "# \u540c\u65f6\u4e3a\u6bcf\u4e00\u4e2aseq\u7684disease\u8ba1\u7b97\u4e0e\u4e0a\u4e00\u4e2aseq\u7684disease\u4e4b\u95f4\u7684\u4ea4\u96c6\u548c\u5dee\u96c6", "\n", "d_length_matrix", "=", "[", "]", "\n", "p_length_matrix", "=", "[", "]", "\n", "m_length_matrix", "=", "[", "]", "\n", "d_max_num", "=", "0", "\n", "p_max_num", "=", "0", "\n", "m_max_num", "=", "0", "\n", "d_dec_list", "=", "[", "]", "\n", "d_stay_list", "=", "[", "]", "\n", "p_dec_list", "=", "[", "]", "\n", "p_stay_list", "=", "[", "]", "\n", "for", "data", "in", "batch", ":", "\n", "        ", "d_buf", ",", "p_buf", ",", "m_buf", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "d_dec_list_buf", ",", "d_stay_list_buf", "=", "[", "]", ",", "[", "]", "\n", "p_dec_list_buf", ",", "p_stay_list_buf", "=", "[", "]", ",", "[", "]", "\n", "for", "idx", ",", "seq", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "d_buf", ".", "append", "(", "len", "(", "seq", "[", "0", "]", ")", ")", "\n", "p_buf", ".", "append", "(", "len", "(", "seq", "[", "1", "]", ")", ")", "\n", "m_buf", ".", "append", "(", "len", "(", "seq", "[", "2", "]", ")", ")", "\n", "d_max_num", "=", "max", "(", "d_max_num", ",", "len", "(", "seq", "[", "0", "]", ")", ")", "\n", "p_max_num", "=", "max", "(", "p_max_num", ",", "len", "(", "seq", "[", "1", "]", ")", ")", "\n", "m_max_num", "=", "max", "(", "m_max_num", ",", "len", "(", "seq", "[", "2", "]", ")", ")", "\n", "if", "idx", "==", "0", ":", "\n", "# \u7b2c\u4e00\u4e2aseq\uff0c\u5219\u4ea4\u96c6\u4e0e\u5dee\u96c6\u4e3a\u7a7a", "\n", "                ", "d_dec_list_buf", ".", "append", "(", "[", "]", ")", "\n", "d_stay_list_buf", ".", "append", "(", "[", "]", ")", "\n", "p_dec_list_buf", ".", "append", "(", "[", "]", ")", "\n", "p_stay_list_buf", ".", "append", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "# \u8ba1\u7b97\u5dee\u96c6\u4e0e\u4ea4\u96c6", "\n", "                ", "cur_d", "=", "set", "(", "seq", "[", "0", "]", ")", "\n", "last_d", "=", "set", "(", "data", "[", "idx", "-", "1", "]", "[", "0", "]", ")", "\n", "stay_list", "=", "list", "(", "cur_d", "&", "last_d", ")", "\n", "dec_list", "=", "list", "(", "last_d", "-", "cur_d", ")", "\n", "d_dec_list_buf", ".", "append", "(", "dec_list", ")", "\n", "d_stay_list_buf", ".", "append", "(", "stay_list", ")", "\n", "\n", "cur_p", "=", "set", "(", "seq", "[", "1", "]", ")", "\n", "last_p", "=", "set", "(", "data", "[", "idx", "-", "1", "]", "[", "1", "]", ")", "\n", "proc_stay_list", "=", "list", "(", "cur_p", "&", "last_p", ")", "\n", "proc_dec_list", "=", "list", "(", "last_p", "-", "cur_p", ")", "\n", "p_dec_list_buf", ".", "append", "(", "proc_dec_list", ")", "\n", "p_stay_list_buf", ".", "append", "(", "proc_stay_list", ")", "\n", "", "", "d_length_matrix", ".", "append", "(", "d_buf", ")", "\n", "p_length_matrix", ".", "append", "(", "p_buf", ")", "\n", "m_length_matrix", ".", "append", "(", "m_buf", ")", "\n", "d_dec_list", ".", "append", "(", "d_dec_list_buf", ")", "\n", "d_stay_list", ".", "append", "(", "d_stay_list_buf", ")", "\n", "p_dec_list", ".", "append", "(", "p_dec_list_buf", ")", "\n", "p_stay_list", ".", "append", "(", "p_stay_list_buf", ")", "\n", "\n", "# \u751f\u6210m_mask_matrix", "\n", "", "m_mask_matrix", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "m_max_num", ")", ",", "-", "1e9", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "m_length_matrix", "[", "i", "]", ")", ")", ":", "\n", "            ", "m_mask_matrix", "[", "i", ",", "j", ",", ":", "m_length_matrix", "[", "i", "]", "[", "j", "]", "]", "=", "0.", "\n", "\n", "# \u751f\u6210d_mask_matrix", "\n", "", "", "d_mask_matrix", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1e9", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "d_length_matrix", "[", "i", "]", ")", ")", ":", "\n", "            ", "d_mask_matrix", "[", "i", ",", "j", ",", ":", "d_length_matrix", "[", "i", "]", "[", "j", "]", "]", "=", "0.", "\n", "\n", "# \u751f\u6210p_mask_matrix", "\n", "", "", "p_mask_matrix", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "p_max_num", ")", ",", "-", "1e9", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "p_length_matrix", "[", "i", "]", ")", ")", ":", "\n", "            ", "p_mask_matrix", "[", "i", ",", "j", ",", ":", "p_length_matrix", "[", "i", "]", "[", "j", "]", "]", "=", "0.", "\n", "\n", "# \u5206\u522b\u751f\u6210dec_disease_tensor\u548cstay_disease_tensor", "\n", "", "", "dec_disease_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1", ")", "\n", "stay_disease_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1", ")", "\n", "dec_disease_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1e9", ")", "\n", "stay_disease_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1e9", ")", "\n", "for", "b_id", ",", "(", "dec_seqs", ",", "stay_seqs", ")", "in", "enumerate", "(", "zip", "(", "d_dec_list", ",", "d_stay_list", ")", ")", ":", "\n", "        ", "for", "s_id", ",", "(", "dec_adm", ",", "stay_adm", ")", "in", "enumerate", "(", "zip", "(", "dec_seqs", ",", "stay_seqs", ")", ")", ":", "\n", "            ", "dec_disease_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "torch", ".", "tensor", "(", "dec_adm", ")", "\n", "stay_disease_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "stay_adm", ")", "]", "=", "torch", ".", "tensor", "(", "stay_adm", ")", "\n", "dec_disease_mask", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "0.", "\n", "stay_disease_mask", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "0.", "\n", "\n", "# \u5206\u522b\u751f\u6210dec_disease_tensor\u548cstay_disease_tensor", "\n", "", "", "dec_proc_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "p_max_num", ")", ",", "-", "1", ")", "\n", "stay_proc_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "p_max_num", ")", ",", "-", "1", ")", "\n", "dec_proc_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "p_max_num", ")", ",", "-", "1e9", ")", "\n", "stay_proc_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "p_max_num", ")", ",", "-", "1e9", ")", "\n", "for", "b_id", ",", "(", "dec_seqs", ",", "stay_seqs", ")", "in", "enumerate", "(", "zip", "(", "p_dec_list", ",", "p_stay_list", ")", ")", ":", "\n", "        ", "for", "s_id", ",", "(", "dec_adm", ",", "stay_adm", ")", "in", "enumerate", "(", "zip", "(", "dec_seqs", ",", "stay_seqs", ")", ")", ":", "\n", "            ", "dec_proc_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "torch", ".", "tensor", "(", "dec_adm", ")", "\n", "stay_proc_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "stay_adm", ")", "]", "=", "torch", ".", "tensor", "(", "stay_adm", ")", "\n", "dec_proc_mask", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "0.", "\n", "stay_proc_mask", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "dec_adm", ")", "]", "=", "0.", "\n", "\n", "# \u5206\u522b\u751f\u6210disease\u3001procedure\u3001medication\u7684\u6570\u636e", "\n", "", "", "disease_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "d_max_num", ")", ",", "-", "1", ")", "\n", "procedure_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "p_max_num", ")", ",", "-", "1", ")", "\n", "medication_tensor", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq", ",", "m_max_num", ")", ",", "0", ")", "\n", "\n", "# \u5206\u522b\u62fc\u63a5\u6210\u4e00\u4e2abatch\u7684\u6570\u636e", "\n", "for", "b_id", ",", "data", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "for", "s_id", ",", "adm", "in", "enumerate", "(", "data", ")", ":", "\n", "# adm\u90e8\u5206\u7684\u6570\u636e\u6309\u7167disease\u3001procedure\u3001medication\u6392\u5e8f", "\n", "            ", "disease_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "adm", "[", "0", "]", ")", "]", "=", "torch", ".", "tensor", "(", "adm", "[", "0", "]", ")", "\n", "procedure_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "adm", "[", "1", "]", ")", "]", "=", "torch", ".", "tensor", "(", "adm", "[", "1", "]", ")", "\n", "medication_tensor", "[", "b_id", ",", "s_id", ",", ":", "len", "(", "adm", "[", "2", "]", ")", "]", "=", "torch", ".", "tensor", "(", "adm", "[", "2", "]", ")", "\n", "\n", "# print(disease_tensor[1])", "\n", "", "", "return", "disease_tensor", ",", "procedure_tensor", ",", "medication_tensor", ",", "seq_length", ",", "d_length_matrix", ",", "p_length_matrix", ",", "m_length_matrix", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "dec_disease_tensor", ",", "stay_disease_tensor", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc_tensor", ",", "stay_proc_tensor", ",", "dec_proc_mask", ",", "stay_proc_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace": [[357, 360], ["torch.where"], "function", ["None"], ["", "def", "pad_num_replace", "(", "tensor", ",", "src_num", ",", "target_num", ")", ":", "\n", "# replace_tensor = torch.full_like(tensor, target_num)", "\n", "    ", "return", "torch", ".", "where", "(", "tensor", "==", "src_num", ",", "target_num", ",", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.__init__": [[18, 43], ["beam.Beam.tt.FloatTensor().zero_", "beam.Beam.tt.LongTensor().fill_", "beam.Beam.tt.FloatTensor", "beam.Beam.tt.LongTensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "PAD_TOKEN", ",", "BOS_TOKEN", ",", "EOS_TOKEN", ",", "ddi_adj", ",", "device", ")", ":", "\n", "        ", "self", ".", "ddi_adj", "=", "ddi_adj", "\n", "self", ".", "PAD", "=", "PAD_TOKEN", "\n", "self", ".", "BOS", "=", "BOS_TOKEN", "\n", "self", ".", "EOS", "=", "EOS_TOKEN", "\n", "# print(PAD_TOKEN, EOS_TOKEN, BOS_TOKEN)", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "done", "=", "False", "# \u8868\u793a\u5f53\u524d\u662f\u5426\u5df2\u7ecf\u5b8c\u6210\u4e86beam search\u7684\u8fc7\u7a0b", "\n", "\n", "self", ".", "beam_status", "=", "[", "False", "]", "*", "size", "# \u7528\u4e8e\u8bb0\u5f55\u6bcf\u4e00\u4e2abeam\u662f\u5426\u5df2\u7ecf\u5904\u4e8eEOS\u72b6\u6001", "\n", "\n", "self", ".", "tt", "=", "torch", ".", "cuda", "if", "device", ".", "type", "==", "'cuda'", "else", "torch", "\n", "\n", "# \u6bcf\u4e00\u4e2a\u751f\u6210\u7ed3\u679c\u7684\u5206\u6570\uff0c\u521d\u59cb\u662fbeam_size\u4e2a0", "\n", "self", ".", "scores", "=", "self", ".", "tt", ".", "FloatTensor", "(", "size", ")", ".", "zero_", "(", ")", "\n", "self", ".", "all_scores", "=", "[", "]", "\n", "\n", "# The backpointers at each time-step.", "\n", "self", ".", "prev_ks", "=", "[", "]", "\n", "\n", "# The outputs at each time-step.", "\n", "self", ".", "next_ys", "=", "[", "self", ".", "tt", ".", "LongTensor", "(", "size", ")", ".", "fill_", "(", "self", ".", "BOS", ")", "]", "\n", "self", ".", "prob_list", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.get_current_state": [[45, 51], ["beam.Beam.get_tentative_hypothesis", "beam.Beam.get_tentative_hypothesis_wo_sort"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.get_tentative_hypothesis", "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.get_tentative_hypothesis_wo_sort"], ["", "def", "get_current_state", "(", "self", ",", "sort", "=", "True", ")", ":", "\n", "        ", "\"Get the outputs for the current timestep.\"", "\n", "if", "sort", ":", "\n", "            ", "return", "self", ".", "get_tentative_hypothesis", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "get_tentative_hypothesis_wo_sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.get_current_origin": [[52, 55], ["None"], "methods", ["None"], ["", "", "def", "get_current_origin", "(", "self", ")", ":", "\n", "        ", "\"Get the backpointers for the current timestep.\"", "\n", "return", "self", ".", "prev_ks", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.advance": [[56, 136], ["word_lk.size", "torch.tensor().long().to", "torch.tensor().long().to", "beam.Beam.get_current_state", "beam_lk.view", "len", "torch.cat", "beam.Beam.all_scores.append", "torch.sort", "beam.Beam.prob_list.append", "torch.stack", "beam.Beam.prev_ks.append", "beam.Beam.next_ys.append", "range", "beam.Beam.prev_ks.append", "beam.Beam.next_ys.append", "beam.Beam.prob_list.append", "len", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor().long", "torch.tensor().long", "active_scores.unsqueeze().expand_as", "torch.tensor().to", "new_active_status.append", "selected_scores.append", "selected_beams.append", "selected_words.append", "prob_buf.append", "list", "selected_scores.append", "selected_beams.append", "selected_words.append", "prob_buf.append", "range", "torch.tensor", "torch.tensor", "active_scores.unsqueeze", "torch.tensor", "new_active_status.append", "new_active_status.append", "active_word_lk[].detach().cpu().numpy().tolist", "active_word_lk[].detach().cpu().numpy", "range", "range", "active_word_lk[].detach().cpu", "active_word_lk[].detach"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.get_current_state"], ["", "def", "advance", "(", "self", ",", "word_lk", ")", ":", "\n", "        ", "\"Update the status and check for finished or not.\"", "\n", "num_words", "=", "word_lk", ".", "size", "(", "1", ")", "\n", "if", "self", ".", "done", ":", "\n", "            ", "self", ".", "prev_ks", ".", "append", "(", "torch", ".", "tensor", "(", "list", "(", "range", "(", "self", ".", "size", ")", ")", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "self", ".", "next_ys", ".", "append", "(", "torch", ".", "tensor", "(", "[", "self", ".", "EOS", "]", "*", "self", ".", "size", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "self", ".", "prob_list", ".", "append", "(", "[", "[", "0", "]", "*", "num_words", ",", "[", "0", "]", "*", "num_words", "]", ")", "\n", "return", "True", "\n", "\n", "", "active_beam_idx", "=", "torch", ".", "tensor", "(", "[", "idx", "for", "idx", "in", "range", "(", "self", ".", "size", ")", "if", "self", ".", "beam_status", "[", "idx", "]", "==", "False", "]", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "end_beam_idx", "=", "torch", ".", "tensor", "(", "[", "idx", "for", "idx", "in", "range", "(", "self", ".", "size", ")", "if", "self", ".", "beam_status", "[", "idx", "]", "==", "True", "]", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "active_word_lk", "=", "word_lk", "[", "active_beam_idx", "]", "# active_beam_num * num_words", "\n", "\n", "cur_output", "=", "self", ".", "get_current_state", "(", "sort", "=", "False", ")", "\n", "\n", "active_scores", "=", "self", ".", "scores", "[", "active_beam_idx", "]", "\n", "end_scores", "=", "self", ".", "scores", "[", "end_beam_idx", "]", "\n", "\n", "if", "len", "(", "self", ".", "prev_ks", ")", ">", "0", ":", "\n", "            ", "beam_lk", "=", "active_word_lk", "+", "active_scores", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "expand_as", "(", "active_word_lk", ")", "# (active_beam_num, num_words)", "\n", "", "else", ":", "\n", "            ", "beam_lk", "=", "active_word_lk", "[", "0", "]", "\n", "\n", "", "flat_beam_lk", "=", "beam_lk", ".", "view", "(", "-", "1", ")", "\n", "active_max_idx", "=", "len", "(", "flat_beam_lk", ")", "\n", "flat_beam_lk", "=", "torch", ".", "cat", "(", "[", "flat_beam_lk", ",", "end_scores", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "self", ".", "all_scores", ".", "append", "(", "self", ".", "scores", ")", "\n", "\n", "\n", "sorted_scores", ",", "sorted_score_ids", "=", "torch", ".", "sort", "(", "flat_beam_lk", ",", "descending", "=", "True", ")", "\n", "select_num", ",", "cur_idx", "=", "0", ",", "0", "\n", "selected_scores", "=", "[", "]", "\n", "selected_words", "=", "[", "]", "\n", "selected_beams", "=", "[", "]", "\n", "new_active_status", "=", "[", "]", "\n", "\n", "prob_buf", "=", "[", "]", "\n", "while", "select_num", "<", "self", ".", "size", ":", "\n", "            ", "cur_score", ",", "cur_id", "=", "sorted_scores", "[", "cur_idx", "]", ",", "sorted_score_ids", "[", "cur_idx", "]", "\n", "if", "cur_id", ">=", "active_max_idx", ":", "\n", "                ", "which_beam", "=", "end_beam_idx", "[", "cur_id", "-", "active_max_idx", "]", "\n", "which_word", "=", "torch", ".", "tensor", "(", "self", ".", "EOS", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "select_num", "+=", "1", "\n", "new_active_status", ".", "append", "(", "True", ")", "\n", "selected_scores", ".", "append", "(", "cur_score", ")", "\n", "selected_beams", ".", "append", "(", "which_beam", ")", "\n", "selected_words", ".", "append", "(", "which_word", ")", "\n", "prob_buf", ".", "append", "(", "[", "0", "]", "*", "num_words", ")", "\n", "", "else", ":", "\n", "                ", "which_beam_idx", "=", "cur_id", "//", "num_words", "\n", "which_beam", "=", "active_beam_idx", "[", "which_beam_idx", "]", "\n", "which_word", "=", "cur_id", "-", "which_beam_idx", "*", "num_words", "\n", "if", "which_word", "not", "in", "cur_output", "[", "which_beam", "]", ":", "\n", "                    ", "if", "which_word", "in", "[", "self", ".", "EOS", ",", "self", ".", "BOS", "]", ":", "\n", "                        ", "new_active_status", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "                        ", "new_active_status", ".", "append", "(", "False", ")", "\n", "", "select_num", "+=", "1", "\n", "selected_scores", ".", "append", "(", "cur_score", ")", "\n", "selected_beams", ".", "append", "(", "which_beam", ")", "\n", "selected_words", ".", "append", "(", "which_word", ")", "\n", "prob_buf", ".", "append", "(", "active_word_lk", "[", "which_beam_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "", "cur_idx", "+=", "1", "\n", "", "self", ".", "prob_list", ".", "append", "(", "prob_buf", ")", "\n", "\n", "self", ".", "beam_status", "=", "new_active_status", "\n", "self", ".", "scores", "=", "torch", ".", "stack", "(", "selected_scores", ")", "\n", "self", ".", "prev_ks", ".", "append", "(", "torch", ".", "stack", "(", "selected_beams", ")", ")", "\n", "self", ".", "next_ys", ".", "append", "(", "torch", ".", "stack", "(", "selected_words", ")", ")", "\n", "\n", "if_done", "=", "True", "\n", "for", "i", "in", "range", "(", "self", ".", "size", ")", ":", "\n", "            ", "if", "not", "self", ".", "beam_status", "[", "i", "]", ":", "\n", "                ", "if_done", "=", "False", "\n", "break", "\n", "", "", "if", "if_done", ":", "\n", "            ", "self", ".", "done", "=", "True", "\n", "\n", "", "return", "self", ".", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.sort_scores": [[137, 140], ["torch.sort"], "methods", ["None"], ["", "def", "sort_scores", "(", "self", ")", ":", "\n", "        ", "\"Sort the scores.\"", "\n", "return", "torch", ".", "sort", "(", "self", ".", "scores", ",", "0", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.get_tentative_hypothesis": [[142, 153], ["len", "beam.Beam.next_ys[].unsqueeze", "beam.Beam.sort_scores", "torch.from_numpy().long().to", "beam.Beam.get_hypothesis", "torch.from_numpy().long", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.sort_scores", "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.get_hypothesis"], ["", "def", "get_tentative_hypothesis", "(", "self", ")", ":", "\n", "        ", "\"Get the decoded sequence for the current timestep.\"", "\n", "\n", "if", "len", "(", "self", ".", "next_ys", ")", "==", "1", ":", "\n", "            ", "dec_seq", "=", "self", ".", "next_ys", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "keys", "=", "self", ".", "sort_scores", "(", ")", "\n", "hyps", "=", "[", "self", ".", "get_hypothesis", "(", "k", ")", "for", "k", "in", "keys", "]", "\n", "hyps", "=", "[", "[", "self", ".", "BOS", "]", "+", "h", "for", "h", "in", "hyps", "]", "\n", "dec_seq", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "hyps", ")", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "return", "dec_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.get_tentative_hypothesis_wo_sort": [[154, 165], ["len", "beam.Beam.next_ys[].unsqueeze", "list", "torch.from_numpy().long().to", "range", "beam.Beam.get_hypothesis", "torch.from_numpy().long", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.get_hypothesis"], ["", "def", "get_tentative_hypothesis_wo_sort", "(", "self", ")", ":", "\n", "        ", "\"Get the decoded sequence for the current timestep.\"", "\n", "\n", "if", "len", "(", "self", ".", "next_ys", ")", "==", "1", ":", "\n", "            ", "dec_seq", "=", "self", ".", "next_ys", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "keys", "=", "list", "(", "range", "(", "self", ".", "size", ")", ")", "\n", "hyps", "=", "[", "self", ".", "get_hypothesis", "(", "k", ")", "for", "k", "in", "keys", "]", "\n", "hyps", "=", "[", "[", "self", ".", "BOS", "]", "+", "h", "for", "h", "in", "hyps", "]", "\n", "dec_seq", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "hyps", ")", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "return", "dec_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.get_hypothesis": [[166, 180], ["range", "hyp.append", "len", "[].item"], "methods", ["None"], ["", "def", "get_hypothesis", "(", "self", ",", "k", ")", ":", "\n", "        ", "\"\"\"\n        Walk back to construct the full hypothesis.\n        Parameters.\n             * `k` - the position in the beam to construct.\n         Returns.\n            1. The hypothesis\n            2. The attention at each time step.\n        \"\"\"", "\n", "hyp", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "self", ".", "prev_ks", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "hyp", ".", "append", "(", "self", ".", "next_ys", "[", "j", "+", "1", "]", "[", "k", "]", ".", "item", "(", ")", ")", "\n", "k", "=", "self", ".", "prev_ks", "[", "j", "]", "[", "k", "]", "\n", "", "return", "hyp", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.get_prob_list": [[181, 187], ["range", "ret_prob_list.append", "len"], "methods", ["None"], ["", "def", "get_prob_list", "(", "self", ",", "k", ")", ":", "\n", "        ", "ret_prob_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "self", ".", "prev_ks", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "ret_prob_list", ".", "append", "(", "self", ".", "prob_list", "[", "j", "]", "[", "k", "]", ")", "\n", "k", "=", "self", ".", "prev_ks", "[", "j", "]", "[", "k", "]", "\n", "", "return", "ret_prob_list", "[", ":", ":", "-", "1", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet.main": [[52, 223], ["torch.device", "torch.device", "torch.device", "dill.load", "dill.load", "dill.load", "dill.load", "dill.load", "print", "print", "print", "collections.defaultdict", "range", "int", "int", "data_loader.mimic_data", "data_loader.mimic_data", "data_loader.mimic_data", "torch.utils.data.dataloader.DataLoader", "torch.utils.data.dataloader.DataLoader", "torch.utils.data.dataloader.DataLoader", "COGNet_model.COGNet", "COGNet_model.COGNet.to", "print", "torch.optim.Adam", "collections.defaultdict", "range", "open", "open", "open", "open", "open", "len", "range", "len", "len", "len", "COGNet_model.COGNet.load_state_dict", "COGNet_model.COGNet.to", "time.time", "recommend.test", "range", "numpy.array", "np.array.mean", "np.array.std", "zip", "print", "print", "util.get_n_params", "COGNet_model.COGNet.parameters", "time.time", "print", "COGNet_model.COGNet.train", "enumerate", "print", "time.time", "recommend.eval", "print", "history[].append", "history[].append", "history[].append", "history[].append", "history[].append", "history[].append", "history[].append", "torch.save", "torch.save", "torch.save", "print", "dill.dump", "len", "sorted", "len", "torch.load", "torch.load", "torch.load", "len", "int", "list", "random.shuffle", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "util.ddi_rate_score", "np.array.append", "util.llprint", "data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "medications.to.to", "m_mask_matrix.to.to", "d_mask_matrix.to.to", "p_mask_matrix.to.to", "dec_disease_mask.to.to", "stay_disease_mask.to.to", "dec_proc_mask.to.to", "stay_proc_mask.to.to", "COGNet_model.COGNet.", "util.output_flatten", "torch.nll_loss", "torch.optim.Adam.zero_grad", "F.nll_loss.backward", "torch.optim.Adam.step", "util.llprint", "print", "COGNet_model.COGNet.state_dict", "open", "open", "len", "len", "len", "len", "open", "range", "labels.long", "os.path.join", "os.path.join", "time.time", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "len", "time.time", "time.time", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.test", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.get_n_params", "home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.eval", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.ddi_rate_score", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.llprint", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.output_flatten", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.llprint", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean"], ["def", "main", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "data_path", "=", "'../data/records_final.pkl'", "\n", "voc_path", "=", "'../data/voc_final.pkl'", "\n", "\n", "# ehr_adj_path = '../data/weighted_ehr_adj_final.pkl'", "\n", "ehr_adj_path", "=", "'../data/ehr_adj_final.pkl'", "\n", "ddi_adj_path", "=", "'../data/ddi_A_final.pkl'", "\n", "ddi_mask_path", "=", "'../data/ddi_mask_H.pkl'", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "\n", "data", "=", "dill", ".", "load", "(", "open", "(", "data_path", ",", "'rb'", ")", ")", "\n", "voc", "=", "dill", ".", "load", "(", "open", "(", "voc_path", ",", "'rb'", ")", ")", "\n", "ehr_adj", "=", "dill", ".", "load", "(", "open", "(", "ehr_adj_path", ",", "'rb'", ")", ")", "\n", "ddi_adj", "=", "dill", ".", "load", "(", "open", "(", "ddi_adj_path", ",", "'rb'", ")", ")", "\n", "ddi_mask_H", "=", "dill", ".", "load", "(", "open", "(", "ddi_mask_path", ",", "'rb'", ")", ")", "\n", "\n", "diag_voc", ",", "pro_voc", ",", "med_voc", "=", "voc", "[", "'diag_voc'", "]", ",", "voc", "[", "'pro_voc'", "]", ",", "voc", "[", "'med_voc'", "]", "\n", "print", "(", "f\"Diag num:{len(diag_voc.idx2word)}\"", ")", "\n", "print", "(", "f\"Proc num:{len(pro_voc.idx2word)}\"", ")", "\n", "print", "(", "f\"Med num:{len(med_voc.idx2word)}\"", ")", "\n", "\n", "# frequency statistic", "\n", "med_count", "=", "defaultdict", "(", "int", ")", "\n", "for", "patient", "in", "data", ":", "\n", "        ", "for", "adm", "in", "patient", ":", "\n", "            ", "for", "med", "in", "adm", "[", "2", "]", ":", "\n", "                ", "med_count", "[", "med", "]", "+=", "1", "\n", "\n", "## rare first", "\n", "", "", "", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "data", "[", "i", "]", ")", ")", ":", "\n", "            ", "cur_medications", "=", "sorted", "(", "data", "[", "i", "]", "[", "j", "]", "[", "2", "]", ",", "key", "=", "lambda", "x", ":", "med_count", "[", "x", "]", ")", "\n", "data", "[", "i", "]", "[", "j", "]", "[", "2", "]", "=", "cur_medications", "\n", "\n", "\n", "", "", "split_point", "=", "int", "(", "len", "(", "data", ")", "*", "2", "/", "3", ")", "\n", "data_train", "=", "data", "[", ":", "split_point", "]", "\n", "eval_len", "=", "int", "(", "len", "(", "data", "[", "split_point", ":", "]", ")", "/", "2", ")", "\n", "data_test", "=", "data", "[", "split_point", ":", "split_point", "+", "eval_len", "]", "\n", "data_eval", "=", "data", "[", "split_point", "+", "eval_len", ":", "]", "\n", "\n", "train_dataset", "=", "mimic_data", "(", "data_train", ")", "\n", "eval_dataset", "=", "mimic_data", "(", "data_eval", ")", "\n", "test_dataset", "=", "mimic_data", "(", "data_test", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "collate_fn", "=", "pad_batch_v2_train", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "1", ",", "collate_fn", "=", "pad_batch_v2_eval", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ")", "\n", "test_dataloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "collate_fn", "=", "pad_batch_v2_eval", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ")", "\n", "\n", "voc_size", "=", "(", "len", "(", "diag_voc", ".", "idx2word", ")", ",", "len", "(", "pro_voc", ".", "idx2word", ")", ",", "len", "(", "med_voc", ".", "idx2word", ")", ")", "\n", "\n", "END_TOKEN", "=", "voc_size", "[", "2", "]", "+", "1", "\n", "DIAG_PAD_TOKEN", "=", "voc_size", "[", "0", "]", "+", "2", "\n", "PROC_PAD_TOKEN", "=", "voc_size", "[", "1", "]", "+", "2", "\n", "MED_PAD_TOKEN", "=", "voc_size", "[", "2", "]", "+", "2", "\n", "SOS_TOKEN", "=", "voc_size", "[", "2", "]", "\n", "TOKENS", "=", "[", "END_TOKEN", ",", "DIAG_PAD_TOKEN", ",", "PROC_PAD_TOKEN", ",", "MED_PAD_TOKEN", ",", "SOS_TOKEN", "]", "\n", "\n", "model", "=", "COGNet", "(", "voc_size", ",", "ehr_adj", ",", "ddi_adj", ",", "ddi_mask_H", ",", "emb_dim", "=", "args", ".", "emb_dim", ",", "device", "=", "device", ")", "\n", "\n", "if", "args", ".", "Test", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "open", "(", "args", ".", "resume_path", ",", "'rb'", ")", ")", ")", "\n", "model", ".", "to", "(", "device", "=", "device", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "smm_record", ",", "ja", ",", "prauc", ",", "precision", ",", "recall", ",", "f1", ",", "med_num", "=", "test", "(", "model", ",", "test_dataloader", ",", "diag_voc", ",", "pro_voc", ",", "med_voc", ",", "voc_size", ",", "0", ",", "device", ",", "TOKENS", ",", "ddi_adj", ",", "args", ")", "\n", "result", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "data_num", "=", "len", "(", "ja", ")", "\n", "final_length", "=", "int", "(", "0.8", "*", "data_num", ")", "\n", "idx_list", "=", "list", "(", "range", "(", "data_num", ")", ")", "\n", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "idx_list", "=", "idx_list", "[", ":", "final_length", "]", "\n", "avg_ja", "=", "np", ".", "mean", "(", "[", "ja", "[", "i", "]", "for", "i", "in", "idx_list", "]", ")", "\n", "avg_prauc", "=", "np", ".", "mean", "(", "[", "prauc", "[", "i", "]", "for", "i", "in", "idx_list", "]", ")", "\n", "avg_precision", "=", "np", ".", "mean", "(", "[", "precision", "[", "i", "]", "for", "i", "in", "idx_list", "]", ")", "\n", "avg_recall", "=", "np", ".", "mean", "(", "[", "recall", "[", "i", "]", "for", "i", "in", "idx_list", "]", ")", "\n", "avg_f1", "=", "np", ".", "mean", "(", "[", "f1", "[", "i", "]", "for", "i", "in", "idx_list", "]", ")", "\n", "avg_med", "=", "np", ".", "mean", "(", "[", "med_num", "[", "i", "]", "for", "i", "in", "idx_list", "]", ")", "\n", "cur_smm_record", "=", "[", "smm_record", "[", "i", "]", "for", "i", "in", "idx_list", "]", "\n", "ddi_rate", "=", "ddi_rate_score", "(", "cur_smm_record", ",", "path", "=", "'../data/ddi_A_final.pkl'", ")", "\n", "result", ".", "append", "(", "[", "ddi_rate", ",", "avg_ja", ",", "avg_prauc", ",", "avg_precision", ",", "avg_recall", ",", "avg_f1", ",", "avg_med", "]", ")", "\n", "llprint", "(", "'\\nDDI Rate: {:.4}, Jaccard: {:.4}, PRAUC: {:.4}, AVG_PRC: {:.4}, AVG_RECALL: {:.4}, AVG_F1: {:.4}, AVG_MED: {:.4}\\n'", ".", "format", "(", "\n", "ddi_rate", ",", "avg_ja", ",", "avg_prauc", ",", "avg_precision", ",", "avg_recall", ",", "avg_f1", ",", "avg_med", ")", ")", "\n", "", "result", "=", "np", ".", "array", "(", "result", ")", "\n", "mean", "=", "result", ".", "mean", "(", "axis", "=", "0", ")", "\n", "std", "=", "result", ".", "std", "(", "axis", "=", "0", ")", "\n", "\n", "outstring", "=", "\"\"", "\n", "for", "m", ",", "s", "in", "zip", "(", "mean", ",", "std", ")", ":", "\n", "            ", "outstring", "+=", "\"{:.4f} $\\pm$ {:.4f} & \"", ".", "format", "(", "m", ",", "s", ")", "\n", "\n", "", "print", "(", "outstring", ")", "\n", "print", "(", "'test time: {}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "return", "\n", "\n", "", "model", ".", "to", "(", "device", "=", "device", ")", "\n", "print", "(", "'parameters'", ",", "get_n_params", "(", "model", ")", ")", "\n", "optimizer", "=", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "history", "=", "defaultdict", "(", "list", ")", "\n", "best_epoch", ",", "best_ja", "=", "0", ",", "0", "\n", "\n", "EPOCH", "=", "200", "\n", "for", "epoch", "in", "range", "(", "EPOCH", ")", ":", "\n", "        ", "tic", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'\\nepoch {} --------------------------'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "            ", "diseases", ",", "procedures", ",", "medications", ",", "seq_length", ",", "d_length_matrix", ",", "p_length_matrix", ",", "m_length_matrix", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", "=", "data", "\n", "\n", "diseases", "=", "pad_num_replace", "(", "diseases", ",", "-", "1", ",", "DIAG_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "procedures", "=", "pad_num_replace", "(", "procedures", ",", "-", "1", ",", "PROC_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "dec_disease", "=", "pad_num_replace", "(", "dec_disease", ",", "-", "1", ",", "DIAG_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "stay_disease", "=", "pad_num_replace", "(", "stay_disease", ",", "-", "1", ",", "DIAG_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "dec_proc", "=", "pad_num_replace", "(", "dec_proc", ",", "-", "1", ",", "PROC_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "stay_proc", "=", "pad_num_replace", "(", "stay_proc", ",", "-", "1", ",", "PROC_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "medications", "=", "medications", ".", "to", "(", "device", ")", "\n", "m_mask_matrix", "=", "m_mask_matrix", ".", "to", "(", "device", ")", "\n", "d_mask_matrix", "=", "d_mask_matrix", ".", "to", "(", "device", ")", "\n", "p_mask_matrix", "=", "p_mask_matrix", ".", "to", "(", "device", ")", "\n", "dec_disease_mask", "=", "dec_disease_mask", ".", "to", "(", "device", ")", "\n", "stay_disease_mask", "=", "stay_disease_mask", ".", "to", "(", "device", ")", "\n", "dec_proc_mask", "=", "dec_proc_mask", ".", "to", "(", "device", ")", "\n", "stay_proc_mask", "=", "stay_proc_mask", ".", "to", "(", "device", ")", "\n", "output_logits", "=", "model", "(", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "\n", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ")", "\n", "labels", ",", "predictions", "=", "output_flatten", "(", "medications", ",", "output_logits", ",", "seq_length", ",", "m_length_matrix", ",", "voc_size", "[", "2", "]", "+", "2", ",", "END_TOKEN", ",", "device", ",", "max_len", "=", "args", ".", "max_len", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "predictions", ",", "labels", ".", "long", "(", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "llprint", "(", "'\\rtraining step: {} / {}'", ".", "format", "(", "idx", ",", "len", "(", "train_dataloader", ")", ")", ")", "\n", "\n", "", "print", "(", ")", "\n", "tic2", "=", "time", ".", "time", "(", ")", "\n", "ddi_rate", ",", "ja", ",", "prauc", ",", "avg_p", ",", "avg_r", ",", "avg_f1", ",", "avg_med", "=", "eval", "(", "model", ",", "eval_dataloader", ",", "voc_size", ",", "epoch", ",", "device", ",", "TOKENS", ",", "args", ")", "\n", "print", "(", "'training time: {}, test time: {}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ",", "time", ".", "time", "(", ")", "-", "tic2", ")", ")", "\n", "\n", "history", "[", "'ja'", "]", ".", "append", "(", "ja", ")", "\n", "history", "[", "'ddi_rate'", "]", ".", "append", "(", "ddi_rate", ")", "\n", "history", "[", "'avg_p'", "]", ".", "append", "(", "avg_p", ")", "\n", "history", "[", "'avg_r'", "]", ".", "append", "(", "avg_r", ")", "\n", "history", "[", "'avg_f1'", "]", ".", "append", "(", "avg_f1", ")", "\n", "history", "[", "'prauc'", "]", ".", "append", "(", "prauc", ")", "\n", "history", "[", "'med'", "]", ".", "append", "(", "avg_med", ")", "\n", "\n", "if", "epoch", ">=", "5", ":", "\n", "            ", "print", "(", "'ddi: {}, Med: {}, Ja: {}, F1: {}'", ".", "format", "(", "\n", "np", ".", "mean", "(", "history", "[", "'ddi_rate'", "]", "[", "-", "5", ":", "]", ")", ",", "\n", "np", ".", "mean", "(", "history", "[", "'med'", "]", "[", "-", "5", ":", "]", ")", ",", "\n", "np", ".", "mean", "(", "history", "[", "'ja'", "]", "[", "-", "5", ":", "]", ")", ",", "\n", "np", ".", "mean", "(", "history", "[", "'avg_f1'", "]", "[", "-", "5", ":", "]", ")", ",", "\n", "np", ".", "mean", "(", "history", "[", "'prauc'", "]", "[", "-", "5", ":", "]", ")", "\n", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "open", "(", "os", ".", "path", ".", "join", "(", "'saved'", ",", "args", ".", "model_name", ",", "'Epoch_{}_JA_{:.4}_DDI_{:.4}.model'", ".", "format", "(", "epoch", ",", "ja", ",", "ddi_rate", ")", ")", ",", "'wb'", ")", ")", "\n", "\n", "if", "best_ja", "<", "ja", ":", "\n", "            ", "best_epoch", "=", "epoch", "\n", "best_ja", "=", "ja", "\n", "\n", "", "print", "(", "'best_epoch: {}'", ".", "format", "(", "best_epoch", ")", ")", "\n", "\n", "dill", ".", "dump", "(", "history", ",", "open", "(", "os", ".", "path", ".", "join", "(", "'saved'", ",", "args", ".", "model_name", ",", "'history_{}.pkl'", ".", "format", "(", "args", ".", "model_name", ")", ")", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.eval_recommend_batch": [[51, 97], ["data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "medications.to.to", "m_mask_matrix.to.to", "d_mask_matrix.to.to", "p_mask_matrix.to.to", "dec_disease_mask.to.to", "stay_disease_mask.to.to", "dec_proc_mask.to.to", "stay_proc_mask.to.to", "medications.to.size", "medications.to.size", "model.encode", "torch.full().to", "torch.full().to", "torch.full().to", "range", "torch.cat.size", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "model.decode", "torch.topk", "torch.topk", "torch.topk", "torch.cat", "torch.cat", "torch.cat", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "torch.full", "torch.full", "torch.full", "torch.zeros", "torch.zeros", "torch.zeros", "torch.utils.data"], "function", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.encode", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.decode", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace"], ["", "", "def", "eval_recommend_batch", "(", "model", ",", "batch_data", ",", "device", ",", "TOKENS", ",", "args", ")", ":", "\n", "    ", "END_TOKEN", ",", "DIAG_PAD_TOKEN", ",", "PROC_PAD_TOKEN", ",", "MED_PAD_TOKEN", ",", "SOS_TOKEN", "=", "TOKENS", "\n", "\n", "diseases", ",", "procedures", ",", "medications", ",", "seq_length", ",", "d_length_matrix", ",", "p_length_matrix", ",", "m_length_matrix", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", "=", "batch_data", "\n", "# continue", "\n", "# \u6839\u636evocab\u5bf9padding\u6570\u503c\u8fdb\u884c\u66ff\u6362", "\n", "diseases", "=", "pad_num_replace", "(", "diseases", ",", "-", "1", ",", "DIAG_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "procedures", "=", "pad_num_replace", "(", "procedures", ",", "-", "1", ",", "PROC_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "dec_disease", "=", "pad_num_replace", "(", "dec_disease", ",", "-", "1", ",", "DIAG_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "stay_disease", "=", "pad_num_replace", "(", "stay_disease", ",", "-", "1", ",", "DIAG_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "dec_proc", "=", "pad_num_replace", "(", "dec_proc", ",", "-", "1", ",", "PROC_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "stay_proc", "=", "pad_num_replace", "(", "stay_proc", ",", "-", "1", ",", "PROC_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "medications", "=", "medications", ".", "to", "(", "device", ")", "\n", "m_mask_matrix", "=", "m_mask_matrix", ".", "to", "(", "device", ")", "\n", "d_mask_matrix", "=", "d_mask_matrix", ".", "to", "(", "device", ")", "\n", "p_mask_matrix", "=", "p_mask_matrix", ".", "to", "(", "device", ")", "\n", "dec_disease_mask", "=", "dec_disease_mask", ".", "to", "(", "device", ")", "\n", "stay_disease_mask", "=", "stay_disease_mask", ".", "to", "(", "device", ")", "\n", "dec_proc_mask", "=", "dec_proc_mask", ".", "to", "(", "device", ")", "\n", "stay_proc_mask", "=", "stay_proc_mask", ".", "to", "(", "device", ")", "\n", "\n", "batch_size", "=", "medications", ".", "size", "(", "0", ")", "\n", "max_visit_num", "=", "medications", ".", "size", "(", "1", ")", "\n", "\n", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "cross_visit_scores", ",", "last_seq_medication", ",", "last_m_mask", ",", "drug_memory", "=", "model", ".", "encode", "(", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "\n", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", "\n", "\n", "partial_input_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_visit_num", ",", "1", ")", ",", "SOS_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "parital_logits", "=", "None", "\n", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "max_len", ")", ":", "\n", "        ", "partial_input_med_num", "=", "partial_input_medication", ".", "size", "(", "2", ")", "\n", "partial_m_mask_matrix", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "max_visit_num", ",", "partial_input_med_num", ")", ",", "device", "=", "device", ")", ".", "float", "(", ")", "\n", "# print('val', i, partial_m_mask_matrix.size())", "\n", "\n", "parital_logits", "=", "model", ".", "decode", "(", "partial_input_medication", ",", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "last_seq_medication", ",", "cross_visit_scores", ",", "\n", "d_mask_matrix", ",", "p_mask_matrix", ",", "partial_m_mask_matrix", ",", "last_m_mask", ",", "drug_memory", ")", "\n", "_", ",", "next_medication", "=", "torch", ".", "topk", "(", "parital_logits", "[", ":", ",", ":", ",", "-", "1", ",", ":", "]", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "partial_input_medication", "=", "torch", ".", "cat", "(", "[", "partial_input_medication", ",", "next_medication", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "parital_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.test_recommend_batch": [[100, 191], ["data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "data_loader.pad_num_replace().to", "medications.to.to", "m_mask_matrix.to.to", "d_mask_matrix.repeat_interleave.to", "p_mask_matrix.repeat_interleave.to", "dec_disease_mask.to.to", "stay_disease_mask.to.to", "dec_proc_mask.to.to", "stay_proc_mask.to.to", "medications.to.size", "medications.to.size", "model.encode", "input_disease_embdding.repeat_interleave.repeat_interleave", "input_proc_embedding.repeat_interleave.repeat_interleave", "encoded_medication.repeat_interleave.repeat_interleave", "last_seq_medication.repeat_interleave.repeat_interleave", "cross_visit_scores.repeat_interleave.repeat_interleave", "d_mask_matrix.repeat_interleave.repeat_interleave", "p_mask_matrix.repeat_interleave.repeat_interleave", "last_m_mask.repeat_interleave.repeat_interleave", "range", "range", "beam.Beam", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "model.decode", "range", "beams[].sort_scores", "beams[].get_hypothesis", "beams[].get_prob_list", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "data_loader.pad_num_replace", "range", "b.get_current_state().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "beams[].advance", "active_beam_idx_list.append", "b.get_current_state", "torch.utils.data"], "function", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.encode", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.decode", "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.sort_scores", "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.get_hypothesis", "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.get_prob_list", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.data_loader.pad_num_replace", "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.advance", "home.repos.pwc.inspect_result.barryrun_cognet.src.beam.Beam.get_current_state"], ["", "def", "test_recommend_batch", "(", "model", ",", "batch_data", ",", "device", ",", "TOKENS", ",", "ddi_adj", ",", "args", ")", ":", "\n", "    ", "END_TOKEN", ",", "DIAG_PAD_TOKEN", ",", "PROC_PAD_TOKEN", ",", "MED_PAD_TOKEN", ",", "SOS_TOKEN", "=", "TOKENS", "\n", "\n", "diseases", ",", "procedures", ",", "medications", ",", "seq_length", ",", "d_length_matrix", ",", "p_length_matrix", ",", "m_length_matrix", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", "=", "batch_data", "\n", "# continue", "\n", "# \u6839\u636evocab\u5bf9padding\u6570\u503c\u8fdb\u884c\u66ff\u6362", "\n", "diseases", "=", "pad_num_replace", "(", "diseases", ",", "-", "1", ",", "DIAG_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "procedures", "=", "pad_num_replace", "(", "procedures", ",", "-", "1", ",", "PROC_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "dec_disease", "=", "pad_num_replace", "(", "dec_disease", ",", "-", "1", ",", "DIAG_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "stay_disease", "=", "pad_num_replace", "(", "stay_disease", ",", "-", "1", ",", "DIAG_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "dec_proc", "=", "pad_num_replace", "(", "dec_proc", ",", "-", "1", ",", "PROC_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "stay_proc", "=", "pad_num_replace", "(", "stay_proc", ",", "-", "1", ",", "PROC_PAD_TOKEN", ")", ".", "to", "(", "device", ")", "\n", "medications", "=", "medications", ".", "to", "(", "device", ")", "\n", "m_mask_matrix", "=", "m_mask_matrix", ".", "to", "(", "device", ")", "\n", "d_mask_matrix", "=", "d_mask_matrix", ".", "to", "(", "device", ")", "\n", "p_mask_matrix", "=", "p_mask_matrix", ".", "to", "(", "device", ")", "\n", "dec_disease_mask", "=", "dec_disease_mask", ".", "to", "(", "device", ")", "\n", "stay_disease_mask", "=", "stay_disease_mask", ".", "to", "(", "device", ")", "\n", "dec_proc_mask", "=", "dec_proc_mask", ".", "to", "(", "device", ")", "\n", "stay_proc_mask", "=", "stay_proc_mask", ".", "to", "(", "device", ")", "\n", "\n", "batch_size", "=", "medications", ".", "size", "(", "0", ")", "\n", "visit_num", "=", "medications", ".", "size", "(", "1", ")", "\n", "\n", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "cross_visit_scores", ",", "last_seq_medication", ",", "last_m_mask", ",", "drug_memory", "=", "model", ".", "encode", "(", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "\n", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", "\n", "\n", "# partial_input_medication = torch.full((batch_size, visit_num, 1), SOS_TOKEN).to(device)", "\n", "# parital_logits = None", "\n", "\n", "# \u4e3a\u6bcf\u4e00\u4e2a\u6837\u672c\u58f0\u660e\u4e00\u4e2abeam", "\n", "# \u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\u5b9e\u73b0\uff0c\u5199\u6b7bbatch_size\u5fc5\u987b\u4e3a1", "\n", "assert", "batch_size", "==", "1", "\n", "# visit_num\u4e2abatch", "\n", "beams", "=", "[", "Beam", "(", "args", ".", "beam_size", ",", "MED_PAD_TOKEN", ",", "SOS_TOKEN", ",", "END_TOKEN", ",", "ddi_adj", ",", "device", ")", "for", "_", "in", "range", "(", "visit_num", ")", "]", "\n", "\n", "# \u6784\u5efadecode\u8f93\u5165\uff0c\u6bcf\u4e00\u4e2avisit\u4e0a\u9700\u8981\u91cd\u590dbeam_size\u6b21\u6570\u636e", "\n", "input_disease_embdding", "=", "input_disease_embdding", ".", "repeat_interleave", "(", "args", ".", "beam_size", ",", "dim", "=", "0", ")", "\n", "input_proc_embedding", "=", "input_proc_embedding", ".", "repeat_interleave", "(", "args", ".", "beam_size", ",", "dim", "=", "0", ")", "\n", "encoded_medication", "=", "encoded_medication", ".", "repeat_interleave", "(", "args", ".", "beam_size", ",", "dim", "=", "0", ")", "\n", "last_seq_medication", "=", "last_seq_medication", ".", "repeat_interleave", "(", "args", ".", "beam_size", ",", "dim", "=", "0", ")", "\n", "cross_visit_scores", "=", "cross_visit_scores", ".", "repeat_interleave", "(", "args", ".", "beam_size", ",", "dim", "=", "0", ")", "\n", "# cross_visit_scores = cross_visit_scores.repeat_interleave(args.beam_size, dim=2)", "\n", "d_mask_matrix", "=", "d_mask_matrix", ".", "repeat_interleave", "(", "args", ".", "beam_size", ",", "dim", "=", "0", ")", "\n", "p_mask_matrix", "=", "p_mask_matrix", ".", "repeat_interleave", "(", "args", ".", "beam_size", ",", "dim", "=", "0", ")", "\n", "last_m_mask", "=", "last_m_mask", ".", "repeat_interleave", "(", "args", ".", "beam_size", ",", "dim", "=", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "max_len", ")", ":", "\n", "        ", "len_dec_seq", "=", "i", "+", "1", "\n", "# b.get_current_state(): (beam_size, len_dec_seq) --> (beam_size, 1, len_dec_seq)", "\n", "# dec_partial_inputs: (beam_size, visit_num, len_dec_seq)", "\n", "dec_partial_inputs", "=", "torch", ".", "cat", "(", "[", "b", ".", "get_current_state", "(", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "for", "b", "in", "beams", "]", ",", "dim", "=", "1", ")", "\n", "# dec_partial_inputs = dec_partial_inputs.view(args.beam_size, visit_num, len_dec_seq)", "\n", "\n", "partial_m_mask_matrix", "=", "torch", ".", "zeros", "(", "(", "args", ".", "beam_size", ",", "visit_num", ",", "len_dec_seq", ")", ",", "device", "=", "device", ")", ".", "float", "(", ")", "\n", "# print('val', i, partial_m_mask_matrix.size())", "\n", "\n", "# parital_logits: (beam_size, visit_sum, len_dec_seq, all_med_num)", "\n", "parital_logits", "=", "model", ".", "decode", "(", "dec_partial_inputs", ",", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "last_seq_medication", ",", "cross_visit_scores", ",", "\n", "d_mask_matrix", ",", "p_mask_matrix", ",", "partial_m_mask_matrix", ",", "last_m_mask", ",", "drug_memory", ")", "\n", "\n", "# word_lk: (beam_size, visit_sum, all_med_num)", "\n", "word_lk", "=", "parital_logits", "[", ":", ",", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "active_beam_idx_list", "=", "[", "]", "# \u8bb0\u5f55\u76ee\u524d\u4ecd\u7136active\u7684beam", "\n", "for", "beam_idx", "in", "range", "(", "visit_num", ")", ":", "\n", "# # \u5982\u679c\u5f53\u524dbeam\u5b8c\u6210\u4e86\uff0c\u5219\u8df3\u8fc7\uff0c\u8fd9\u91ccbeams\u7684size\u5e94\u8be5\u662f\u4e0d\u53d8\u7684", "\n", "# if beams[beam_idx].done: continue", "\n", "# inst_idx = beam_inst_idx_map[beam_idx]  # \u8be5beam\u6240\u5bf9\u5e94\u7684adm\u4e0b\u6807", "\n", "# \u66f4\u65b0beam\uff0c\u540c\u65f6\u8fd4\u56de\u5f53\u524dbeam\u662f\u5426\u5b8c\u6210\uff0c\u5982\u679c\u672a\u5b8c\u6210\u5219\u8868\u793aactive", "\n", "            ", "if", "not", "beams", "[", "beam_idx", "]", ".", "advance", "(", "word_lk", "[", ":", ",", "beam_idx", ",", ":", "]", ")", ":", "\n", "                ", "active_beam_idx_list", ".", "append", "(", "beam_idx", ")", "\n", "\n", "# \u5982\u679c\u6ca1\u6709active\u7684beam\uff0c\u5219\u5168\u90e8\u6837\u672c\u9884\u6d4b\u5b8c\u6bd5", "\n", "", "", "if", "not", "active_beam_idx_list", ":", "break", "\n", "\n", "# Return useful information", "\n", "", "all_hyp", "=", "[", "]", "\n", "all_prob", "=", "[", "]", "\n", "for", "beam_idx", "in", "range", "(", "visit_num", ")", ":", "\n", "        ", "scores", ",", "tail_idxs", "=", "beams", "[", "beam_idx", "]", ".", "sort_scores", "(", ")", "# \u6bcf\u4e2abeam\u6309\u7167score\u6392\u5e8f\uff0c\u627e\u51fa\u6700\u4f18\u7684\u751f\u6210", "\n", "hyps", "=", "beams", "[", "beam_idx", "]", ".", "get_hypothesis", "(", "tail_idxs", "[", "0", "]", ")", "\n", "probs", "=", "beams", "[", "beam_idx", "]", ".", "get_prob_list", "(", "tail_idxs", "[", "0", "]", ")", "\n", "all_hyp", "+=", "[", "hyps", "]", "# \u6ce8\u610f\u8fd9\u91cc\u53ea\u5173\u6ce8\u6700\u4f18\u89e3\uff0c\u5426\u5219\u5199\u6cd5\u4e0a\u8981\u4fee\u6539", "\n", "all_prob", "+=", "[", "probs", "]", "\n", "\n", "", "return", "all_hyp", ",", "all_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.eval": [[194, 262], ["model.eval", "enumerate", "util.ddi_rate_score", "util.llprint", "seq_length.sum().item", "recommend.eval_recommend_batch", "util.output_flatten", "zip", "smm_record.append", "util.sequence_metric", "ja.append", "prauc.append", "avg_p.append", "avg_r.append", "avg_f1.append", "util.llprint", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "range", "numpy.zeros", "y_gt.append", "util.sequence_output_process", "y_pred_label.append", "y_pred_prob.append", "numpy.zeros", "y_pred.append", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "seq_length.sum", "sorted", "numpy.mean", "len"], "function", ["home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.eval", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.ddi_rate_score", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.llprint", "home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.eval_recommend_batch", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.output_flatten", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.sequence_metric", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.llprint", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.sequence_output_process", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean"], ["", "def", "eval", "(", "model", ",", "eval_dataloader", ",", "voc_size", ",", "epoch", ",", "device", ",", "TOKENS", ",", "args", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "END_TOKEN", ",", "DIAG_PAD_TOKEN", ",", "PROC_PAD_TOKEN", ",", "MED_PAD_TOKEN", ",", "SOS_TOKEN", "=", "TOKENS", "\n", "ja", ",", "prauc", ",", "avg_p", ",", "avg_r", ",", "avg_f1", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "smm_record", "=", "[", "]", "\n", "med_cnt", ",", "visit_cnt", "=", "0", ",", "0", "\n", "\n", "# fw = open(\"prediction_results.txt\", \"w\")", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "eval_dataloader", ")", ":", "\n", "        ", "diseases", ",", "procedures", ",", "medications", ",", "seq_length", ",", "d_length_matrix", ",", "p_length_matrix", ",", "m_length_matrix", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", "=", "data", "\n", "visit_cnt", "+=", "seq_length", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "output_logits", "=", "eval_recommend_batch", "(", "model", ",", "data", ",", "device", ",", "TOKENS", ",", "args", ")", "\n", "\n", "# \u6bcf\u4e00\u4e2amed\u4e0a\u7684\u9884\u6d4b\u7ed3\u679c", "\n", "labels", ",", "predictions", "=", "output_flatten", "(", "medications", ",", "output_logits", ",", "seq_length", ",", "m_length_matrix", ",", "voc_size", "[", "2", "]", ",", "END_TOKEN", ",", "device", ",", "training", "=", "False", ",", "testing", "=", "False", ",", "max_len", "=", "args", ".", "max_len", ")", "\n", "\n", "y_gt", "=", "[", "]", "# groud truth \u8868\u793a\u6b63\u786e\u7684label   0-1\u5e8f\u5217", "\n", "y_pred", "=", "[", "]", "# \u9884\u6d4b\u7684\u7ed3\u679c    0-1\u5e8f\u5217", "\n", "y_pred_prob", "=", "[", "]", "# \u9884\u6d4b\u7684\u6bcf\u4e00\u4e2a\u836f\u7269\u7684\u5e73\u5747\u6982\u7387\uff0c\u975e0-1\u5e8f\u5217", "\n", "y_pred_label", "=", "[", "]", "# \u9884\u6d4b\u7684\u7ed3\u679c\uff0c\u975e0-1\u5e8f\u5217", "\n", "# \u9488\u5bf9\u6bcf\u4e00\u4e2aadmission\u7684\u9884\u6d4b\u7ed3\u679c", "\n", "for", "label", ",", "prediction", "in", "zip", "(", "labels", ",", "predictions", ")", ":", "\n", "            ", "y_gt_tmp", "=", "np", ".", "zeros", "(", "voc_size", "[", "2", "]", ")", "\n", "y_gt_tmp", "[", "label", "]", "=", "1", "# 01\u5e8f\u5217\uff0c\u8868\u793a\u6b63\u786e\u7684label", "\n", "y_gt", ".", "append", "(", "y_gt_tmp", ")", "\n", "\n", "# label: med set", "\n", "# prediction: [med_num, probability]", "\n", "out_list", ",", "sorted_predict", "=", "sequence_output_process", "(", "prediction", ",", "[", "voc_size", "[", "2", "]", ",", "voc_size", "[", "2", "]", "+", "1", "]", ")", "\n", "y_pred_label", ".", "append", "(", "sorted", "(", "sorted_predict", ")", ")", "\n", "y_pred_prob", ".", "append", "(", "np", ".", "mean", "(", "prediction", "[", ":", ",", ":", "-", "2", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "# prediction label", "\n", "y_pred_tmp", "=", "np", ".", "zeros", "(", "voc_size", "[", "2", "]", ")", "\n", "y_pred_tmp", "[", "out_list", "]", "=", "1", "\n", "y_pred", ".", "append", "(", "y_pred_tmp", ")", "\n", "med_cnt", "+=", "len", "(", "sorted_predict", ")", "\n", "\n", "# if idx < 100:", "\n", "#     fw.write(print_result(label, sorted_predict))", "\n", "\n", "", "smm_record", ".", "append", "(", "y_pred_label", ")", "\n", "\n", "adm_ja", ",", "adm_prauc", ",", "adm_avg_p", ",", "adm_avg_r", ",", "adm_avg_f1", "=", "sequence_metric", "(", "np", ".", "array", "(", "y_gt", ")", ",", "np", ".", "array", "(", "y_pred", ")", ",", "np", ".", "array", "(", "y_pred_prob", ")", ",", "np", ".", "array", "(", "y_pred_label", ")", ")", "\n", "ja", ".", "append", "(", "adm_ja", ")", "\n", "prauc", ".", "append", "(", "adm_prauc", ")", "\n", "avg_p", ".", "append", "(", "adm_avg_p", ")", "\n", "avg_r", ".", "append", "(", "adm_avg_r", ")", "\n", "avg_f1", ".", "append", "(", "adm_avg_f1", ")", "\n", "llprint", "(", "'\\rtest step: {} / {}'", ".", "format", "(", "idx", ",", "len", "(", "eval_dataloader", ")", ")", ")", "\n", "\n", "# fw.close()", "\n", "\n", "# ddi rate", "\n", "", "ddi_rate", "=", "ddi_rate_score", "(", "smm_record", ",", "path", "=", "'../data/ddi_A_final.pkl'", ")", "\n", "\n", "llprint", "(", "'\\nDDI Rate: {:.4}, Jaccard: {:.4},  PRAUC: {:.4}, AVG_PRC: {:.4}, AVG_RECALL: {:.4}, AVG_F1: {:.4}, AVG_MED: {:.4}\\n'", ".", "format", "(", "\n", "ddi_rate", ",", "np", ".", "mean", "(", "ja", ")", ",", "np", ".", "mean", "(", "prauc", ")", ",", "np", ".", "mean", "(", "avg_p", ")", ",", "np", ".", "mean", "(", "avg_r", ")", ",", "np", ".", "mean", "(", "avg_f1", ")", ",", "med_cnt", "/", "visit_cnt", "\n", ")", ")", "\n", "\n", "return", "ddi_rate", ",", "np", ".", "mean", "(", "ja", ")", ",", "np", ".", "mean", "(", "prauc", ")", ",", "np", ".", "mean", "(", "avg_p", ")", ",", "np", ".", "mean", "(", "avg_r", ")", ",", "np", ".", "mean", "(", "avg_f1", ")", ",", "med_cnt", "/", "visit_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.test": [[265, 405], ["model.eval", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "pickle.dump", "pickle.dump", "seq_length.sum().item", "recommend.test_recommend_batch", "util.output_flatten", "util.output_flatten", "zip", "smm_record.append", "range", "all_pred_list.append", "all_label_list.append", "util.sequence_metric", "ja.append", "prauc.append", "avg_p.append", "avg_r.append", "avg_f1.append", "util.llprint", "open", "open", "range", "range", "range", "range", "range", "range", "range", "set", "set", "label.tolist", "numpy.zeros", "y_gt.append", "zip", "pred_list.append", "label_hisory_list.append", "numpy.max", "range", "y_pred_prob.append", "y_pred_label.append", "numpy.zeros", "y_pred.append", "len", "med_cnt_list.append", "min", "util.sequence_metric", "ja_by_visit[].append", "auc_by_visit[].append", "pre_by_visit[].append", "recall_by_visit[].append", "f1_by_visit[].append", "smm_record_by_visit[].append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "print", "print", "print", "print", "print", "print", "print", "print", "len", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "util.ddi_rate_score", "seq_length.sum", "len", "len", "out_list.append", "out_prob_list.append", "jaccard_list.append", "label.tolist", "len", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "recommend.test.cal_jaccard"], "function", ["home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.eval", "home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.test_recommend_batch", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.output_flatten", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.output_flatten", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.sequence_metric", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.llprint", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.sequence_metric", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.mean", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.ddi_rate_score", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "test", "(", "model", ",", "test_dataloader", ",", "diag_voc", ",", "pro_voc", ",", "med_voc", ",", "voc_size", ",", "epoch", ",", "device", ",", "TOKENS", ",", "ddi_adj", ",", "args", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "END_TOKEN", ",", "DIAG_PAD_TOKEN", ",", "PROC_PAD_TOKEN", ",", "MED_PAD_TOKEN", ",", "SOS_TOKEN", "=", "TOKENS", "\n", "ja", ",", "prauc", ",", "avg_p", ",", "avg_r", ",", "avg_f1", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "med_cnt_list", "=", "[", "]", "\n", "smm_record", "=", "[", "]", "\n", "med_cnt", ",", "visit_cnt", "=", "0", ",", "0", "\n", "all_pred_list", "=", "[", "]", "\n", "all_label_list", "=", "[", "]", "\n", "\n", "ja_by_visit", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "auc_by_visit", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "pre_by_visit", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "recall_by_visit", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "f1_by_visit", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "smm_record_by_visit", "=", "[", "[", "]", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "test_dataloader", ")", ":", "\n", "        ", "diseases", ",", "procedures", ",", "medications", ",", "seq_length", ",", "d_length_matrix", ",", "p_length_matrix", ",", "m_length_matrix", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", "=", "data", "\n", "visit_cnt", "+=", "seq_length", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "output_logits", ",", "output_probs", "=", "test_recommend_batch", "(", "model", ",", "data", ",", "device", ",", "TOKENS", ",", "ddi_adj", ",", "args", ")", "\n", "\n", "labels", ",", "predictions", "=", "output_flatten", "(", "medications", ",", "output_logits", ",", "seq_length", ",", "m_length_matrix", ",", "voc_size", "[", "2", "]", ",", "END_TOKEN", ",", "device", ",", "training", "=", "False", ",", "testing", "=", "True", ",", "max_len", "=", "args", ".", "max_len", ")", "\n", "_", ",", "probs", "=", "output_flatten", "(", "medications", ",", "output_probs", ",", "seq_length", ",", "m_length_matrix", ",", "voc_size", "[", "2", "]", ",", "END_TOKEN", ",", "device", ",", "training", "=", "False", ",", "testing", "=", "True", ",", "max_len", "=", "args", ".", "max_len", ")", "\n", "y_gt", "=", "[", "]", "\n", "y_pred", "=", "[", "]", "\n", "y_pred_label", "=", "[", "]", "\n", "y_pred_prob", "=", "[", "]", "\n", "\n", "label_hisory", "=", "[", "]", "\n", "label_hisory_list", "=", "[", "]", "\n", "pred_list", "=", "[", "]", "\n", "jaccard_list", "=", "[", "]", "\n", "def", "cal_jaccard", "(", "set1", ",", "set2", ")", ":", "\n", "            ", "if", "not", "set1", "or", "not", "set2", ":", "\n", "                ", "return", "0", "\n", "", "set1", "=", "set", "(", "set1", ")", "\n", "set2", "=", "set", "(", "set2", ")", "\n", "a", ",", "b", "=", "len", "(", "set1", "&", "set2", ")", ",", "len", "(", "set1", "|", "set2", ")", "\n", "return", "a", "/", "b", "\n", "", "def", "cal_overlap_num", "(", "set1", ",", "set2", ")", ":", "\n", "            ", "count", "=", "0", "\n", "for", "d", "in", "set1", ":", "\n", "                ", "if", "d", "in", "set2", ":", "\n", "                    ", "count", "+=", "1", "\n", "", "", "return", "count", "\n", "\n", "# \u9488\u5bf9\u6bcf\u4e00\u4e2aadmission\u7684\u9884\u6d4b\u7ed3\u679c", "\n", "", "for", "label", ",", "prediction", ",", "prob_list", "in", "zip", "(", "labels", ",", "predictions", ",", "probs", ")", ":", "\n", "            ", "label_hisory", "+=", "label", ".", "tolist", "(", ")", "### case study", "\n", "\n", "y_gt_tmp", "=", "np", ".", "zeros", "(", "voc_size", "[", "2", "]", ")", "\n", "y_gt_tmp", "[", "label", "]", "=", "1", "# 01\u5e8f\u5217\uff0c\u8868\u793a\u6b63\u786e\u7684label", "\n", "y_gt", ".", "append", "(", "y_gt_tmp", ")", "\n", "\n", "out_list", "=", "[", "]", "\n", "out_prob_list", "=", "[", "]", "\n", "for", "med", ",", "prob", "in", "zip", "(", "prediction", ",", "prob_list", ")", ":", "\n", "                ", "if", "med", "in", "[", "voc_size", "[", "2", "]", ",", "voc_size", "[", "2", "]", "+", "1", "]", ":", "\n", "                    ", "break", "\n", "", "out_list", ".", "append", "(", "med", ")", "\n", "out_prob_list", ".", "append", "(", "prob", "[", ":", "-", "2", "]", ")", "# \u53bb\u6389SOS\u4e0eEOS\u7b26\u53f7", "\n", "\n", "## case study", "\n", "", "if", "label_hisory", ":", "\n", "                ", "jaccard_list", ".", "append", "(", "cal_jaccard", "(", "prediction", ",", "label_hisory", ")", ")", "\n", "", "pred_list", ".", "append", "(", "out_list", ")", "\n", "label_hisory_list", ".", "append", "(", "label", ".", "tolist", "(", ")", ")", "\n", "\n", "# \u5bf9\u4e8e\u6ca1\u9884\u6d4b\u7684\u836f\u7269\uff0c\u53d6\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u5e73\u5747\u7684\u6982\u7387\uff0c\u5426\u5219\u76f4\u63a5\u53d6\u5bf9\u5e94\u7684\u6982\u7387", "\n", "# pred_out_prob_list = np.mean(out_prob_list, axis=0)", "\n", "pred_out_prob_list", "=", "np", ".", "max", "(", "out_prob_list", ",", "axis", "=", "0", ")", "\n", "# pred_out_prob_list = np.min(out_prob_list, axis=0)", "\n", "for", "i", "in", "range", "(", "131", ")", ":", "\n", "                ", "if", "i", "in", "out_list", ":", "\n", "                    ", "pred_out_prob_list", "[", "i", "]", "=", "out_prob_list", "[", "out_list", ".", "index", "(", "i", ")", "]", "[", "i", "]", "\n", "\n", "", "", "y_pred_prob", ".", "append", "(", "pred_out_prob_list", ")", "\n", "y_pred_label", ".", "append", "(", "out_list", ")", "\n", "\n", "# prediction label", "\n", "y_pred_tmp", "=", "np", ".", "zeros", "(", "voc_size", "[", "2", "]", ")", "\n", "y_pred_tmp", "[", "out_list", "]", "=", "1", "\n", "y_pred", ".", "append", "(", "y_pred_tmp", ")", "\n", "med_cnt", "+=", "len", "(", "prediction", ")", "\n", "med_cnt_list", ".", "append", "(", "len", "(", "prediction", ")", ")", "\n", "\n", "\n", "", "smm_record", ".", "append", "(", "y_pred_label", ")", "\n", "for", "i", "in", "range", "(", "min", "(", "len", "(", "labels", ")", ",", "5", ")", ")", ":", "\n", "# single_ja, single_p, single_r, single_f1 = sequence_metric_v2(np.array(y_gt[i:i+1]), np.array(y_pred[i:i+1]), np.array(y_pred_label[i:i+1]))", "\n", "            ", "single_ja", ",", "single_auc", ",", "single_p", ",", "single_r", ",", "single_f1", "=", "sequence_metric", "(", "np", ".", "array", "(", "[", "y_gt", "[", "i", "]", "]", ")", ",", "np", ".", "array", "(", "[", "y_pred", "[", "i", "]", "]", ")", ",", "np", ".", "array", "(", "[", "y_pred_prob", "[", "i", "]", "]", ")", ",", "np", ".", "array", "(", "[", "y_pred_label", "[", "i", "]", "]", ")", ")", "\n", "ja_by_visit", "[", "i", "]", ".", "append", "(", "single_ja", ")", "\n", "auc_by_visit", "[", "i", "]", ".", "append", "(", "single_auc", ")", "\n", "pre_by_visit", "[", "i", "]", ".", "append", "(", "single_p", ")", "\n", "recall_by_visit", "[", "i", "]", ".", "append", "(", "single_r", ")", "\n", "f1_by_visit", "[", "i", "]", ".", "append", "(", "single_f1", ")", "\n", "smm_record_by_visit", "[", "i", "]", ".", "append", "(", "y_pred_label", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "\n", "# \u5b58\u50a8\u6240\u6709\u9884\u6d4b\u7ed3\u679c", "\n", "", "all_pred_list", ".", "append", "(", "pred_list", ")", "\n", "all_label_list", ".", "append", "(", "labels", ")", "\n", "adm_ja", ",", "adm_prauc", ",", "adm_avg_p", ",", "adm_avg_r", ",", "adm_avg_f1", "=", "sequence_metric", "(", "np", ".", "array", "(", "y_gt", ")", ",", "np", ".", "array", "(", "y_pred", ")", ",", "np", ".", "array", "(", "y_pred_prob", ")", ",", "np", ".", "array", "(", "y_pred_label", ")", ")", "\n", "ja", ".", "append", "(", "adm_ja", ")", "\n", "prauc", ".", "append", "(", "adm_prauc", ")", "\n", "avg_p", ".", "append", "(", "adm_avg_p", ")", "\n", "avg_r", ".", "append", "(", "adm_avg_r", ")", "\n", "avg_f1", ".", "append", "(", "adm_avg_f1", ")", "\n", "llprint", "(", "'\\rtest step: {} / {}'", ".", "format", "(", "idx", ",", "len", "(", "test_dataloader", ")", ")", ")", "\n", "\n", "# \u7edf\u8ba1\u4e0d\u540cvisit\u7684\u6307\u6807", "\n", "if", "idx", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'\\tvisit1\\tvisit2\\tvisit3\\tvisit4\\tvisit5'", ")", "\n", "print", "(", "'count:'", ",", "[", "len", "(", "buf", ")", "for", "buf", "in", "ja_by_visit", "]", ")", "\n", "print", "(", "'jaccard:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "ja_by_visit", "]", ")", "\n", "print", "(", "'auc:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "auc_by_visit", "]", ")", "\n", "print", "(", "'precision:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "pre_by_visit", "]", ")", "\n", "print", "(", "'recall:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "recall_by_visit", "]", ")", "\n", "print", "(", "'f1:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "f1_by_visit", "]", ")", "\n", "print", "(", "'DDI:'", ",", "[", "ddi_rate_score", "(", "buf", ")", "for", "buf", "in", "smm_record_by_visit", "]", ")", "\n", "\n", "", "", "print", "(", "'\\tvisit1\\tvisit2\\tvisit3\\tvisit4\\tvisit5'", ")", "\n", "print", "(", "'count:'", ",", "[", "len", "(", "buf", ")", "for", "buf", "in", "ja_by_visit", "]", ")", "\n", "print", "(", "'jaccard:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "ja_by_visit", "]", ")", "\n", "print", "(", "'auc:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "auc_by_visit", "]", ")", "\n", "print", "(", "'precision:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "pre_by_visit", "]", ")", "\n", "print", "(", "'recall:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "recall_by_visit", "]", ")", "\n", "print", "(", "'f1:'", ",", "[", "np", ".", "mean", "(", "buf", ")", "for", "buf", "in", "f1_by_visit", "]", ")", "\n", "print", "(", "'DDI:'", ",", "[", "ddi_rate_score", "(", "buf", ")", "for", "buf", "in", "smm_record_by_visit", "]", ")", "\n", "\n", "pickle", ".", "dump", "(", "all_pred_list", ",", "open", "(", "'out_list.pkl'", ",", "'wb'", ")", ")", "\n", "pickle", ".", "dump", "(", "all_label_list", ",", "open", "(", "'out_list_gt.pkl'", ",", "'wb'", ")", ")", "\n", "\n", "return", "smm_record", ",", "ja", ",", "prauc", ",", "avg_p", ",", "avg_r", ",", "avg_f1", ",", "med_cnt_list", "\n", "", ""]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_copy.__init__": [[14, 100], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "COGNet_ablation.GCN", "torch.Parameter", "torch.Parameter", "torch.Parameter", "layers.SelfAttend", "layers.SelfAttend", "COGNet_ablation.MedTransformerDecoder", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "COGNet_ablation.MaskLinear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Linear", "torch.Linear", "torch.Linear", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["def", "__init__", "(", "self", ",", "voc_size", ",", "ehr_adj", ",", "ddi_adj", ",", "ddi_mask_H", ",", "emb_dim", "=", "64", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "COGNet_wo_copy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "voc_size", "=", "voc_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "nhead", "=", "2", "\n", "self", ".", "SOS_TOKEN", "=", "voc_size", "[", "2", "]", "# start of sentence", "\n", "self", ".", "END_TOKEN", "=", "voc_size", "[", "2", "]", "+", "1", "# end   \u65b0\u589e\u7684\u4e24\u4e2a\u7f16\u7801\uff0c\u4e24\u8005\u5747\u662f\u9488\u5bf9\u4e8e\u836f\u7269\u7684embedding", "\n", "self", ".", "MED_PAD_TOKEN", "=", "voc_size", "[", "2", "]", "+", "2", "# \u7528\u4e8eembedding\u77e9\u9635\u4e2d\u7684padding\uff08\u5168\u4e3a0\uff09", "\n", "self", ".", "DIAG_PAD_TOKEN", "=", "voc_size", "[", "0", "]", "+", "2", "\n", "self", ".", "PROC_PAD_TOKEN", "=", "voc_size", "[", "1", "]", "+", "2", "\n", "\n", "self", ".", "tensor_ddi_mask_H", "=", "torch", ".", "FloatTensor", "(", "ddi_mask_H", ")", ".", "to", "(", "device", ")", "\n", "\n", "# dig_num * emb_dim", "\n", "self", ".", "diag_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "0", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "DIAG_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# proc_num * emb_dim", "\n", "self", ".", "proc_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "1", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "PROC_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# med_num * emb_dim", "\n", "self", ".", "med_embedding", "=", "nn", ".", "Sequential", "(", "\n", "# \u6dfb\u52a0padding_idx\uff0c\u8868\u793a\u53d60\u5411\u91cf", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "2", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "MED_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# \u7528\u4e8e\u5bf9\u4e0a\u4e00\u4e2avisit\u7684medication\u8fdb\u884c\u7f16\u7801", "\n", "self", ".", "medication_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "# \u7528\u4e8e\u5bf9\u5f53\u524dvisit\u7684\u75be\u75c5\u4e0e\u75c7\u72b6\u8fdb\u884c\u7f16\u7801      ", "\n", "self", ".", "diagnoses_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "self", ".", "procedure_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "# self.enc_gru = nn.GRU(emb_dim, emb_dim, batch_first=True, bidirectional=True)", "\n", "\n", "self", ".", "tensor_ddi_adj", "=", "torch", ".", "FloatTensor", "(", "ddi_adj", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "gcn", "=", "GCN", "(", "voc_size", "=", "voc_size", "[", "2", "]", ",", "emb_dim", "=", "emb_dim", ",", "ehr_adj", "=", "ehr_adj", ",", "ddi_adj", "=", "ddi_adj", ",", "device", "=", "device", ")", "\n", "self", ".", "inter", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ")", "\n", "\n", "# \u805a\u5408\u5355\u4e2avisit\u5185\u7684diag\u548cproc\u5f97\u5230visit-level\u7684\u8868\u8fbe", "\n", "self", ".", "diag_self_attend", "=", "SelfAttend", "(", "emb_dim", ")", "\n", "self", ".", "proc_self_attend", "=", "SelfAttend", "(", "emb_dim", ")", "\n", "\n", "self", ".", "decoder", "=", "MedTransformerDecoder", "(", "emb_dim", ",", "self", ".", "nhead", ",", "dim_feedforward", "=", "emb_dim", "*", "2", ",", "dropout", "=", "0.2", ",", "\n", "layer_norm_eps", "=", "1e-5", ")", "\n", "\n", "# \u7528\u4e8e\u5bf9\u6bcf\u4e00\u4e2avisit\u7684diagnoses\u8fdb\u884c\u7f16\u7801", "\n", "\n", "# \u7528\u4e8e\u751f\u6210\u836f\u7269\u5e8f\u5217", "\n", "self", ".", "dec_gru", "=", "nn", ".", "GRU", "(", "emb_dim", "*", "3", ",", "emb_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "diag_attn", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "W_diag_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_diff_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_diff_proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n", "# weights", "\n", "self", ".", "Ws", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "emb_dim", ")", "# only used at initial stage", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "voc_size", "[", "2", "]", "+", "2", ")", "# generate mode", "\n", "# self.Wc = nn.Linear(emb_dim*2, emb_dim)  # copy mode", "\n", "self", ".", "Wc", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "# copy mode", "\n", "\n", "self", ".", "W_dec", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_stay", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_dec", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_stay", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n", "# swtich network to calculate generate probablity", "\n", "self", ".", "W_z", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "1", ")", "\n", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0.3", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "# bipartite local embedding", "\n", "self", ".", "bipartite_transform", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "emb_dim", ",", "ddi_mask_H", ".", "shape", "[", "1", "]", ")", "\n", ")", "\n", "self", ".", "bipartite_output", "=", "MaskLinear", "(", "\n", "ddi_mask_H", ".", "shape", "[", "1", "]", ",", "voc_size", "[", "2", "]", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_copy.encode": [[101, 150], ["medications.size", "COGNet_ablation.COGNet_wo_copy.diag_embedding().view", "COGNet_ablation.COGNet_wo_copy.proc_embedding().view", "d_mask_matrix.view().unsqueeze().unsqueeze().repeat", "d_enc_mask_matrix.view.view.view", "p_mask_matrix.view().unsqueeze().unsqueeze().repeat", "p_enc_mask_matrix.view.view.view", "COGNet_ablation.COGNet_wo_copy.diagnoses_encoder().view", "COGNet_ablation.COGNet_wo_copy.procedure_encoder().view", "COGNet_ablation.COGNet_wo_copy.diag_self_attend", "COGNet_ablation.COGNet_wo_copy.proc_self_attend", "visit_diag_embedding.view.view.view", "visit_proc_embedding.view.view.view", "COGNet_ablation.COGNet_wo_copy.calc_cross_visit_scores", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "COGNet_ablation.COGNet_wo_copy.med_embedding", "torch.cat.view().unsqueeze().unsqueeze().repeat", "torch.cat.view().unsqueeze().unsqueeze().repeat", "torch.cat.view().unsqueeze().unsqueeze().repeat", "last_m_enc_mask.view.view.view", "COGNet_ablation.COGNet_wo_copy.medication_encoder", "encoded_medication.view.view.view", "COGNet_ablation.COGNet_wo_copy.gcn", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "diseases.size", "procedures.size", "COGNet_ablation.COGNet_wo_copy.view", "d_mask_matrix.view", "COGNet_ablation.COGNet_wo_copy.view", "p_mask_matrix.view", "COGNet_ablation.COGNet_wo_copy.view", "COGNet_ablation.COGNet_wo_copy.diag_embedding", "COGNet_ablation.COGNet_wo_copy.proc_embedding", "d_mask_matrix.view().unsqueeze().unsqueeze", "p_mask_matrix.view().unsqueeze().unsqueeze", "COGNet_ablation.COGNet_wo_copy.diagnoses_encoder", "COGNet_ablation.COGNet_wo_copy.procedure_encoder", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.cat.view().unsqueeze().unsqueeze", "torch.cat.view().unsqueeze().unsqueeze", "torch.cat.view().unsqueeze().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "d_mask_matrix.view().unsqueeze", "p_mask_matrix.view().unsqueeze", "torch.cat.view().unsqueeze", "torch.cat.view().unsqueeze", "torch.cat.view().unsqueeze", "d_mask_matrix.view", "p_mask_matrix.view", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.calc_cross_visit_scores"], ["", "def", "encode", "(", "self", ",", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# batch\u7ef4\u5ea6\u4ee5\u53caseq\u7ef4\u5ea6\u4e0a\u5e76\u884c\u8ba1\u7b97\uff08\u73b0\u5728\u4e0d\u8003\u8651\u65f6\u95f4\u5e8f\u5217\u4fe1\u606f\uff09\uff0c\u6bcf\u4e00\u4e2amedication\u5e8f\u5217\u4ecd\u7136\u6309\u987a\u5e8f\u9884\u6d4b", "\n", "batch_size", ",", "max_visit_num", ",", "max_med_num", "=", "medications", ".", "size", "(", ")", "\n", "max_diag_num", "=", "diseases", ".", "size", "(", ")", "[", "2", "]", "\n", "max_proc_num", "=", "procedures", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "############################ \u6570\u636e\u9884\u5904\u7406 #########################", "\n", "# 1. \u5bf9\u5f53\u524d\u7684disease\u4e0eprocedure\u8fdb\u884c\u7f16\u7801", "\n", "input_disease_embdding", "=", "self", ".", "diag_embedding", "(", "diseases", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "self", ".", "emb_dim", ")", "# [batch, seq, max_diag_num, emb]", "\n", "input_proc_embedding", "=", "self", ".", "proc_embedding", "(", "procedures", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "self", ".", "emb_dim", ")", "# [batch, seq, max_proc_num, emb]", "\n", "d_enc_mask_matrix", "=", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_diag_num", ",", "1", ")", "# [batch*seq, nhead, input_length, output_length]", "\n", "d_enc_mask_matrix", "=", "d_enc_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_diag_num", ",", "max_diag_num", ")", "\n", "p_enc_mask_matrix", "=", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_proc_num", ",", "1", ")", "\n", "p_enc_mask_matrix", "=", "p_enc_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_proc_num", ",", "max_proc_num", ")", "\n", "input_disease_embdding", "=", "self", ".", "diagnoses_encoder", "(", "input_disease_embdding", ",", "src_mask", "=", "d_enc_mask_matrix", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_diag_num", ",", "self", ".", "emb_dim", ")", "\n", "input_proc_embedding", "=", "self", ".", "procedure_encoder", "(", "input_proc_embedding", ",", "src_mask", "=", "p_enc_mask_matrix", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_proc_num", ",", "self", ".", "emb_dim", ")", "\n", "\n", "# 1.1 encode visit-level diag and proc representations", "\n", "visit_diag_embedding", "=", "self", ".", "diag_self_attend", "(", "input_disease_embdding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "-", "1", ")", ",", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "-", "1", ")", ")", "\n", "visit_proc_embedding", "=", "self", ".", "proc_self_attend", "(", "input_proc_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "-", "1", ")", ",", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "-", "1", ")", ")", "\n", "visit_diag_embedding", "=", "visit_diag_embedding", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "-", "1", ")", "\n", "visit_proc_embedding", "=", "visit_proc_embedding", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "-", "1", ")", "\n", "\n", "# 1.3 \u8ba1\u7b97 visit-level\u7684attention score", "\n", "# [batch_size, max_visit_num, max_visit_num]", "\n", "cross_visit_scores", "=", "self", ".", "calc_cross_visit_scores", "(", "visit_diag_embedding", ",", "visit_proc_embedding", ")", "\n", "\n", "\n", "# 3. \u6784\u9020\u4e00\u4e2alast_seq_medication\uff0c\u8868\u793a\u4e0a\u4e00\u6b21visit\u7684medication\uff0c\u7b2c\u4e00\u6b21\u7684\u7531\u4e8e\u6ca1\u6709\u4e0a\u4e00\u6b21medication\uff0c\u75280\u586b\u8865\uff08\u7528\u5565\u586b\u8865\u90fd\u884c\uff0c\u53cd\u6b63\u4e0d\u4f1a\u7528\u5230\uff09", "\n", "last_seq_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ",", "max_med_num", ")", ",", "0", ")", ".", "to", "(", "device", ")", "\n", "last_seq_medication", "=", "torch", ".", "cat", "(", "[", "last_seq_medication", ",", "medications", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "# m_mask_matrix\u77e9\u9635\u540c\u6837\u4e5f\u9700\u8981\u540e\u79fb", "\n", "last_m_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ",", "max_med_num", ")", ",", "-", "1e9", ")", ".", "to", "(", "device", ")", "# \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "last_m_mask", "=", "torch", ".", "cat", "(", "[", "last_m_mask", ",", "m_mask_matrix", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "# \u5bf9last_seq_medication\u8fdb\u884c\u7f16\u7801", "\n", "last_seq_medication_emb", "=", "self", ".", "med_embedding", "(", "last_seq_medication", ")", "\n", "last_m_enc_mask", "=", "last_m_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "last_m_enc_mask", "=", "last_m_enc_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_med_num", ")", "\n", "encoded_medication", "=", "self", ".", "medication_encoder", "(", "last_seq_medication_emb", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "self", ".", "emb_dim", ")", ",", "src_mask", "=", "last_m_enc_mask", ")", "# (batch*seq, max_med_num, emb_dim)", "\n", "encoded_medication", "=", "encoded_medication", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "self", ".", "emb_dim", ")", "\n", "\n", "# vocab_size, emb_size", "\n", "ehr_embedding", ",", "ddi_embedding", "=", "self", ".", "gcn", "(", ")", "\n", "drug_memory", "=", "ehr_embedding", "-", "ddi_embedding", "*", "self", ".", "inter", "\n", "drug_memory_padding", "=", "torch", ".", "zeros", "(", "(", "3", ",", "self", ".", "emb_dim", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "drug_memory", "=", "torch", ".", "cat", "(", "[", "drug_memory", ",", "drug_memory_padding", "]", ",", "dim", "=", "0", ")", "\n", "\n", "return", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "cross_visit_scores", ",", "last_seq_medication", ",", "last_m_mask", ",", "drug_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_copy.decode": [[151, 202], ["input_medications.size", "input_medications.size", "input_medications.size", "input_disease_embedding.size", "input_proc_embedding.size", "COGNet_ablation.COGNet_wo_copy.med_embedding().view", "drug_memory[].view", "COGNet_ablation.COGNet_wo_copy.view().unsqueeze().unsqueeze().repeat", "COGNet_ablation.COGNet_wo_copy.view", "d_mask_matrix.view().unsqueeze().unsqueeze().repeat", "m2d_mask_matrix.view.view.view", "p_mask_matrix.view().unsqueeze().unsqueeze().repeat", "m2p_mask_matrix.view.view.view", "COGNet_ablation.COGNet_wo_copy.decoder", "COGNet_ablation.COGNet_wo_copy.Wo", "score_g.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "COGNet_ablation.COGNet_wo_copy.copy_med", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "last_medications.view().repeat", "prob_c_to_g.view.view.scatter_add_", "prob_c_to_g.view.view.view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "COGNet_ablation.COGNet_wo_copy.view", "COGNet_ablation.COGNet_wo_copy.med_embedding", "COGNet_ablation.COGNet_wo_copy.view().unsqueeze().unsqueeze", "d_mask_matrix.view().unsqueeze().unsqueeze", "p_mask_matrix.view().unsqueeze().unsqueeze", "input_disease_embedding.view", "input_proc_embedding.view", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "last_medications.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "COGNet_ablation.COGNet_wo_copy.W_z", "COGNet_ablation.COGNet_wo_copy.view().unsqueeze", "d_mask_matrix.view().unsqueeze", "p_mask_matrix.view().unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "COGNet_ablation.COGNet_wo_copy.view", "d_mask_matrix.view", "p_mask_matrix.view"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.copy_med"], ["", "def", "decode", "(", "self", ",", "input_medications", ",", "input_disease_embedding", ",", "input_proc_embedding", ",", "last_medication_embedding", ",", "last_medications", ",", "cross_visit_scores", ",", "\n", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "last_m_mask", ",", "drug_memory", ")", ":", "\n", "        ", "\"\"\"\n        input_medications: [batch_size, max_visit_num, max_med_num + 1], \u5f00\u5934\u5305\u542b\u4e86 SOS_TOKEN\n        \"\"\"", "\n", "batch_size", "=", "input_medications", ".", "size", "(", "0", ")", "\n", "max_visit_num", "=", "input_medications", ".", "size", "(", "1", ")", "\n", "max_med_num", "=", "input_medications", ".", "size", "(", "2", ")", "\n", "max_diag_num", "=", "input_disease_embedding", ".", "size", "(", "2", ")", "\n", "max_proc_num", "=", "input_proc_embedding", ".", "size", "(", "2", ")", "\n", "\n", "input_medication_embs", "=", "self", ".", "med_embedding", "(", "input_medications", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "# input_medication_embs = self.dropout_emb(input_medication_embs)", "\n", "input_medication_memory", "=", "drug_memory", "[", "input_medications", "]", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "\n", "# m_sos_mask = torch.zeros((batch_size, max_visit_num, 1), device=self.device).float() # \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "m_self_mask", "=", "m_mask_matrix", "\n", "\n", "last_m_enc_mask", "=", "m_self_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "medication_self_mask", "=", "last_m_enc_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_med_num", ")", "\n", "m2d_mask_matrix", "=", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "m2d_mask_matrix", "=", "m2d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_diag_num", ")", "\n", "m2p_mask_matrix", "=", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "m2p_mask_matrix", "=", "m2p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_proc_num", ")", "\n", "\n", "dec_hidden", "=", "self", ".", "decoder", "(", "input_medication_embedding", "=", "input_medication_embs", ",", "input_medication_memory", "=", "input_medication_memory", ",", "\n", "input_disease_embdding", "=", "input_disease_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "-", "1", ")", ",", "\n", "input_proc_embedding", "=", "input_proc_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "-", "1", ")", ",", "\n", "input_medication_self_mask", "=", "medication_self_mask", ",", "\n", "d_mask", "=", "m2d_mask_matrix", ",", "\n", "p_mask", "=", "m2p_mask_matrix", ")", "\n", "\n", "score_g", "=", "self", ".", "Wo", "(", "dec_hidden", ")", "# (batch * max_visit_num, max_med_num, voc_size[2]+2)", "\n", "score_g", "=", "score_g", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "prob_g", "=", "F", ".", "softmax", "(", "score_g", ",", "dim", "=", "-", "1", ")", "\n", "\n", "score_c", "=", "self", ".", "copy_med", "(", "dec_hidden", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", ",", "last_medication_embedding", ",", "last_m_mask", ",", "cross_visit_scores", ")", "\n", "prob_c_to_g", "=", "torch", ".", "zeros_like", "(", "prob_g", ")", ".", "to", "(", "self", ".", "device", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", "*", "max_med_num", ",", "-", "1", ")", "# (batch, max_visit_num * input_med_num, voc_size[2]+2)", "\n", "\n", "# \u7528scatter\u64cd\u4f5c\u4ee3\u66ff\u5d4c\u5957\u5faa\u73af", "\n", "# \u6839\u636elast_seq_medication\u4e2d\u7684indice\uff0c\u5c06score_c\u4e2d\u7684\u503c\u52a0\u5230score_c_to_g\u4e2d\u53bb", "\n", "copy_source", "=", "last_medications", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "max_visit_num", "*", "max_med_num", ",", "1", ")", "\n", "prob_c_to_g", ".", "scatter_add_", "(", "2", ",", "copy_source", ",", "score_c", ")", "\n", "prob_c_to_g", "=", "prob_c_to_g", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "\n", "generate_prob", "=", "F", ".", "sigmoid", "(", "self", ".", "W_z", "(", "dec_hidden", ")", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "1", ")", "\n", "# prob =  prob_g * generate_prob + prob_c_to_g * (1. - generate_prob)", "\n", "# prob[:, 0, :, :] = prob_g[:, 0, :, :] # \u7b2c\u4e00\u4e2aseq\u7531\u4e8e\u6ca1\u6709last_medication\u4fe1\u606f\uff0c\u4ec5\u53d6prob_g\u7684\u6982\u7387", "\n", "prob", "=", "prob_g", "\n", "\n", "return", "torch", ".", "log", "(", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_copy.forward": [[204, 233], ["medications.size", "COGNet_ablation.COGNet_wo_copy.encode", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "COGNet_ablation.COGNet_wo_copy.decode", "diseases.size", "procedures.size", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.encode", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.decode"], ["", "def", "forward", "(", "self", ",", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# batch\u7ef4\u5ea6\u4ee5\u53caseq\u7ef4\u5ea6\u4e0a\u5e76\u884c\u8ba1\u7b97\uff08\u73b0\u5728\u4e0d\u8003\u8651\u65f6\u95f4\u5e8f\u5217\u4fe1\u606f\uff09\uff0c\u6bcf\u4e00\u4e2amedication\u5e8f\u5217\u4ecd\u7136\u6309\u987a\u5e8f\u9884\u6d4b", "\n", "batch_size", ",", "max_seq_length", ",", "max_med_num", "=", "medications", ".", "size", "(", ")", "\n", "max_diag_num", "=", "diseases", ".", "size", "(", ")", "[", "2", "]", "\n", "max_proc_num", "=", "procedures", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "cross_visit_scores", ",", "last_seq_medication", ",", "last_m_mask", ",", "drug_memory", "=", "self", ".", "encode", "(", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "\n", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", "\n", "\n", "# 4. \u6784\u9020\u7ed9decoder\u7684medications\uff0c\u7528\u4e8edecoding\u8fc7\u7a0b\u4e2d\u7684teacher forcing\uff0c\u6ce8\u610f\u7ef4\u5ea6\u4e0a\u589e\u52a0\u4e86\u4e00\u7ef4\uff0c\u56e0\u4e3a\u4f1a\u591a\u751f\u6210\u4e00\u4e2aEND_TOKEN", "\n", "input_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq_length", ",", "1", ")", ",", "self", ".", "SOS_TOKEN", ")", ".", "to", "(", "device", ")", "# [batch_size, seq, 1]", "\n", "input_medication", "=", "torch", ".", "cat", "(", "[", "input_medication", ",", "medications", "]", ",", "dim", "=", "2", ")", "# [batch_size, seq, max_med_num + 1]", "\n", "\n", "m_sos_mask", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "max_seq_length", ",", "1", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "# \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "m_mask_matrix", "=", "torch", ".", "cat", "(", "[", "m_sos_mask", ",", "m_mask_matrix", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "output_logits", "=", "self", ".", "decode", "(", "input_medication", ",", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "last_seq_medication", ",", "cross_visit_scores", ",", "\n", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "last_m_mask", ",", "drug_memory", ")", "\n", "\n", "# 5. \u52a0\u5165ddi loss", "\n", "# output_logits_part = torch.exp(output_logits[:, :, :, :-2] + m_mask_matrix.unsqueeze(-1))    # \u53bb\u6389SOS\u4e0eEOS", "\n", "# output_logits_part = torch.mean(output_logits_part, dim=2)", "\n", "# neg_pred_prob1 = output_logits_part.unsqueeze(-1)", "\n", "# neg_pred_prob2 = output_logits_part.unsqueeze(-2)", "\n", "# neg_pred_prob = neg_pred_prob1 * neg_pred_prob2 # bach * seq * max_med_num * all_med_num * all_med_num", "\n", "# batch_neg = 0.0005 * neg_pred_prob.mul(self.tensor_ddi_adj).sum()", "\n", "# return output_logits, batch_neg", "\n", "return", "output_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_copy.calc_cross_visit_scores": [[234, 261], ["visit_diag_embedding.size", "visit_diag_embedding.size", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "visit_diag_embedding.size", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "visit_proc_embedding.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.unsqueeze().repeat.unsqueeze().repeat.float"], "methods", ["None"], ["", "def", "calc_cross_visit_scores", "(", "self", ",", "visit_diag_embedding", ",", "visit_proc_embedding", ")", ":", "\n", "        ", "\"\"\"\n        visit_diag_embedding: (batch * visit_num * emb)\n        visit_proc_embedding: (batch * visit_num * emb)\n        \"\"\"", "\n", "max_visit_num", "=", "visit_diag_embedding", ".", "size", "(", "1", ")", "\n", "batch_size", "=", "visit_diag_embedding", ".", "size", "(", "0", ")", "\n", "\n", "# mask\u8868\u793a\u6bcf\u4e2avisit\u53ea\u80fd\u770b\u5230\u81ea\u5df1\u4e4b\u524d\u7684visit", "\n", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "(", "max_visit_num", ",", "max_visit_num", ")", ",", "device", "=", "self", ".", "device", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "# \u4e0b\u4e09\u89d2\u77e9\u9635", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "# batch * max_visit_num * max_visit_num", "\n", "\n", "# \u6bcf\u4e2avisit\u540e\u79fb\u4e00\u4f4d", "\n", "padding", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "1", ",", "self", ".", "emb_dim", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "diag_keys", "=", "torch", ".", "cat", "(", "[", "padding", ",", "visit_diag_embedding", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "# batch * max_visit_num * emb", "\n", "proc_keys", "=", "torch", ".", "cat", "(", "[", "padding", ",", "visit_proc_embedding", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# \u5f97\u5230\u6bcf\u4e2avisit\u8ddf\u81ea\u5df1\u524d\u9762\u6240\u6709visit\u7684score", "\n", "diag_scores", "=", "torch", ".", "matmul", "(", "visit_diag_embedding", ",", "diag_keys", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "visit_diag_embedding", ".", "size", "(", "-", "1", ")", ")", "\n", "proc_scores", "=", "torch", ".", "matmul", "(", "visit_proc_embedding", ",", "proc_keys", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "visit_proc_embedding", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "# 1st visit's scores is not zero!", "\n", "scores", "=", "F", ".", "softmax", "(", "diag_scores", "+", "proc_scores", "+", "mask", ",", "dim", "=", "-", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_copy.copy_med": [[262, 289], ["decode_input_hiddens.size", "decode_input_hiddens.size", "last_medications.size", "COGNet_ablation.COGNet_wo_copy.Wc().view", "last_m_mask.view().repeat", "torch.softmax", "torch.softmax", "torch.softmax", "cross_visit_scores.repeat().view", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat().view", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp.sum", "torch.mul().clamp.sum", "torch.mul().clamp.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "COGNet_ablation.COGNet_wo_copy.Wc", "last_medications.view().transpose", "last_m_mask.view", "cross_visit_scores.repeat", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "last_medications.view", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "copy_med", "(", "self", ",", "decode_input_hiddens", ",", "last_medications", ",", "last_m_mask", ",", "cross_visit_scores", ")", ":", "\n", "        ", "\"\"\"\n        decode_input_hiddens: [batch_size, max_visit_num, input_med_num, emb_size]\n        last_medications: [batch_size, max_visit_num, max_med_num, emb_size]\n        last_m_mask: [batch_size, max_visit_num, max_med_num]\n        cross_visit_scores: [batch_size, max_visit_num, max_visit_num]\n        \"\"\"", "\n", "max_visit_num", "=", "decode_input_hiddens", ".", "size", "(", "1", ")", "\n", "input_med_num", "=", "decode_input_hiddens", ".", "size", "(", "2", ")", "\n", "max_med_num", "=", "last_medications", ".", "size", "(", "2", ")", "\n", "copy_query", "=", "self", ".", "Wc", "(", "decode_input_hiddens", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "self", ".", "emb_dim", ")", "\n", "attn_scores", "=", "torch", ".", "matmul", "(", "copy_query", ",", "last_medications", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "max_med_num", ",", "self", ".", "emb_dim", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "self", ".", "emb_dim", ")", "\n", "med_mask", "=", "last_m_mask", ".", "view", "(", "-", "1", ",", "1", ",", "max_visit_num", "*", "max_med_num", ")", ".", "repeat", "(", "1", ",", "max_visit_num", "*", "input_med_num", ",", "1", ")", "\n", "\n", "# [batch_size, max_vist_num * input_med_num, max_visit_num * max_med_num]", "\n", "attn_scores", "=", "F", ".", "softmax", "(", "attn_scores", "+", "med_mask", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# (batch_size, max_visit_num * input_med_num, max_visit_num)", "\n", "visit_scores", "=", "cross_visit_scores", ".", "repeat", "(", "1", ",", "1", ",", "input_med_num", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "max_visit_num", ")", "\n", "# (batch_size, max_visit_num * input_med_num, max_visit_num * max_med_num)", "\n", "visit_scores", "=", "visit_scores", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "max_med_num", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "max_visit_num", "*", "max_med_num", ")", "\n", "\n", "scores", "=", "torch", ".", "mul", "(", "attn_scores", ",", "visit_scores", ")", ".", "clamp", "(", "min", "=", "1e-9", ")", "\n", "row_scores", "=", "scores", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "scores", "=", "scores", "/", "row_scores", "# (batch_size, max_visit_num * input_med_num, max_visit_num * max_med_num)", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_visit_score.__init__": [[292, 385], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "COGNet_ablation.GCN", "torch.Parameter", "torch.Parameter", "torch.Parameter", "layers.SelfAttend", "layers.SelfAttend", "COGNet_ablation.MedTransformerDecoder", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "COGNet_ablation.MaskLinear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Linear", "torch.Linear", "torch.Linear", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["def", "__init__", "(", "self", ",", "voc_size", ",", "ehr_adj", ",", "ddi_adj", ",", "ddi_mask_H", ",", "emb_dim", "=", "64", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "COGNet_wo_visit_score", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "voc_size", "=", "voc_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "nhead", "=", "2", "\n", "self", ".", "SOS_TOKEN", "=", "voc_size", "[", "2", "]", "# start of sentence", "\n", "self", ".", "END_TOKEN", "=", "voc_size", "[", "2", "]", "+", "1", "# end   \u65b0\u589e\u7684\u4e24\u4e2a\u7f16\u7801\uff0c\u4e24\u8005\u5747\u662f\u9488\u5bf9\u4e8e\u836f\u7269\u7684embedding", "\n", "self", ".", "MED_PAD_TOKEN", "=", "voc_size", "[", "2", "]", "+", "2", "# \u7528\u4e8eembedding\u77e9\u9635\u4e2d\u7684padding\uff08\u5168\u4e3a0\uff09", "\n", "self", ".", "DIAG_PAD_TOKEN", "=", "voc_size", "[", "0", "]", "+", "2", "\n", "self", ".", "PROC_PAD_TOKEN", "=", "voc_size", "[", "1", "]", "+", "2", "\n", "\n", "self", ".", "tensor_ddi_mask_H", "=", "torch", ".", "FloatTensor", "(", "ddi_mask_H", ")", ".", "to", "(", "device", ")", "\n", "\n", "# dig_num * emb_dim", "\n", "self", ".", "diag_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "0", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "DIAG_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# proc_num * emb_dim", "\n", "self", ".", "proc_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "1", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "PROC_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# med_num * emb_dim", "\n", "self", ".", "med_embedding", "=", "nn", ".", "Sequential", "(", "\n", "# \u6dfb\u52a0padding_idx\uff0c\u8868\u793a\u53d60\u5411\u91cf", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "2", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "MED_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# \u7528\u4e8e\u5bf9\u4e0a\u4e00\u4e2avisit\u7684medication\u8fdb\u884c\u7f16\u7801", "\n", "# self.medication_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)", "\n", "self", ".", "medication_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "# \u7528\u4e8e\u5bf9\u5f53\u524dvisit\u7684\u75be\u75c5\u4e0e\u75c7\u72b6\u8fdb\u884c\u7f16\u7801", "\n", "# self.diagnoses_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)", "\n", "# self.procedure_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)        ", "\n", "self", ".", "diagnoses_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "self", ".", "procedure_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "# self.enc_gru = nn.GRU(emb_dim, emb_dim, batch_first=True, bidirectional=True)", "\n", "\n", "# self.ehr_gcn = GCN(", "\n", "#     voc_size=voc_size[2], emb_dim=emb_dim, adj=ehr_adj, device=device)", "\n", "# self.ddi_gcn = GCN(", "\n", "#     voc_size=voc_size[2], emb_dim=emb_dim, adj=ddi_adj, device=device)", "\n", "self", ".", "tensor_ddi_adj", "=", "torch", ".", "FloatTensor", "(", "ddi_adj", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "gcn", "=", "GCN", "(", "voc_size", "=", "voc_size", "[", "2", "]", ",", "emb_dim", "=", "emb_dim", ",", "ehr_adj", "=", "ehr_adj", ",", "ddi_adj", "=", "ddi_adj", ",", "device", "=", "device", ")", "\n", "self", ".", "inter", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ")", "\n", "\n", "# \u805a\u5408\u5355\u4e2avisit\u5185\u7684diag\u548cproc\u5f97\u5230visit-level\u7684\u8868\u8fbe", "\n", "self", ".", "diag_self_attend", "=", "SelfAttend", "(", "emb_dim", ")", "\n", "self", ".", "proc_self_attend", "=", "SelfAttend", "(", "emb_dim", ")", "\n", "\n", "self", ".", "decoder", "=", "MedTransformerDecoder", "(", "emb_dim", ",", "self", ".", "nhead", ",", "dim_feedforward", "=", "emb_dim", "*", "2", ",", "dropout", "=", "0.2", ",", "\n", "layer_norm_eps", "=", "1e-5", ")", "\n", "\n", "# \u7528\u4e8e\u5bf9\u6bcf\u4e00\u4e2avisit\u7684diagnoses\u8fdb\u884c\u7f16\u7801", "\n", "\n", "# \u7528\u4e8e\u751f\u6210\u836f\u7269\u5e8f\u5217", "\n", "self", ".", "dec_gru", "=", "nn", ".", "GRU", "(", "emb_dim", "*", "3", ",", "emb_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "diag_attn", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "W_diag_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_diff_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_diff_proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n", "# weights", "\n", "self", ".", "Ws", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "emb_dim", ")", "# only used at initial stage", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "voc_size", "[", "2", "]", "+", "2", ")", "# generate mode", "\n", "# self.Wc = nn.Linear(emb_dim*2, emb_dim)  # copy mode", "\n", "self", ".", "Wc", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "# copy mode", "\n", "\n", "self", ".", "W_dec", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_stay", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_dec", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_stay", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n", "# swtich network to calculate generate probablity", "\n", "self", ".", "W_z", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "1", ")", "\n", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0.3", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "# bipartite local embedding", "\n", "self", ".", "bipartite_transform", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "emb_dim", ",", "ddi_mask_H", ".", "shape", "[", "1", "]", ")", "\n", ")", "\n", "self", ".", "bipartite_output", "=", "MaskLinear", "(", "\n", "ddi_mask_H", ".", "shape", "[", "1", "]", ",", "voc_size", "[", "2", "]", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_visit_score.encode": [[386, 435], ["medications.size", "COGNet_ablation.COGNet_wo_visit_score.diag_embedding().view", "COGNet_ablation.COGNet_wo_visit_score.proc_embedding().view", "d_mask_matrix.view().unsqueeze().unsqueeze().repeat", "d_enc_mask_matrix.view.view.view", "p_mask_matrix.view().unsqueeze().unsqueeze().repeat", "p_enc_mask_matrix.view.view.view", "COGNet_ablation.COGNet_wo_visit_score.diagnoses_encoder().view", "COGNet_ablation.COGNet_wo_visit_score.procedure_encoder().view", "COGNet_ablation.COGNet_wo_visit_score.diag_self_attend", "COGNet_ablation.COGNet_wo_visit_score.proc_self_attend", "visit_diag_embedding.view.view.view", "visit_proc_embedding.view.view.view", "COGNet_ablation.COGNet_wo_visit_score.calc_cross_visit_scores", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "COGNet_ablation.COGNet_wo_visit_score.med_embedding", "torch.cat.view().unsqueeze().unsqueeze().repeat", "torch.cat.view().unsqueeze().unsqueeze().repeat", "torch.cat.view().unsqueeze().unsqueeze().repeat", "last_m_enc_mask.view.view.view", "COGNet_ablation.COGNet_wo_visit_score.medication_encoder", "encoded_medication.view.view.view", "COGNet_ablation.COGNet_wo_visit_score.gcn", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "diseases.size", "procedures.size", "COGNet_ablation.COGNet_wo_visit_score.view", "d_mask_matrix.view", "COGNet_ablation.COGNet_wo_visit_score.view", "p_mask_matrix.view", "COGNet_ablation.COGNet_wo_visit_score.view", "COGNet_ablation.COGNet_wo_visit_score.diag_embedding", "COGNet_ablation.COGNet_wo_visit_score.proc_embedding", "d_mask_matrix.view().unsqueeze().unsqueeze", "p_mask_matrix.view().unsqueeze().unsqueeze", "COGNet_ablation.COGNet_wo_visit_score.diagnoses_encoder", "COGNet_ablation.COGNet_wo_visit_score.procedure_encoder", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.cat.view().unsqueeze().unsqueeze", "torch.cat.view().unsqueeze().unsqueeze", "torch.cat.view().unsqueeze().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "d_mask_matrix.view().unsqueeze", "p_mask_matrix.view().unsqueeze", "torch.cat.view().unsqueeze", "torch.cat.view().unsqueeze", "torch.cat.view().unsqueeze", "d_mask_matrix.view", "p_mask_matrix.view", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.calc_cross_visit_scores"], ["", "def", "encode", "(", "self", ",", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# batch\u7ef4\u5ea6\u4ee5\u53caseq\u7ef4\u5ea6\u4e0a\u5e76\u884c\u8ba1\u7b97\uff08\u73b0\u5728\u4e0d\u8003\u8651\u65f6\u95f4\u5e8f\u5217\u4fe1\u606f\uff09\uff0c\u6bcf\u4e00\u4e2amedication\u5e8f\u5217\u4ecd\u7136\u6309\u987a\u5e8f\u9884\u6d4b", "\n", "batch_size", ",", "max_visit_num", ",", "max_med_num", "=", "medications", ".", "size", "(", ")", "\n", "max_diag_num", "=", "diseases", ".", "size", "(", ")", "[", "2", "]", "\n", "max_proc_num", "=", "procedures", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "############################ \u6570\u636e\u9884\u5904\u7406 #########################", "\n", "# 1. \u5bf9\u5f53\u524d\u7684disease\u4e0eprocedure\u8fdb\u884c\u7f16\u7801", "\n", "input_disease_embdding", "=", "self", ".", "diag_embedding", "(", "diseases", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "self", ".", "emb_dim", ")", "# [batch, seq, max_diag_num, emb]", "\n", "input_proc_embedding", "=", "self", ".", "proc_embedding", "(", "procedures", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "self", ".", "emb_dim", ")", "# [batch, seq, max_proc_num, emb]", "\n", "d_enc_mask_matrix", "=", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_diag_num", ",", "1", ")", "# [batch*seq, nhead, input_length, output_length]", "\n", "d_enc_mask_matrix", "=", "d_enc_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_diag_num", ",", "max_diag_num", ")", "\n", "p_enc_mask_matrix", "=", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_proc_num", ",", "1", ")", "\n", "p_enc_mask_matrix", "=", "p_enc_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_proc_num", ",", "max_proc_num", ")", "\n", "input_disease_embdding", "=", "self", ".", "diagnoses_encoder", "(", "input_disease_embdding", ",", "src_mask", "=", "d_enc_mask_matrix", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_diag_num", ",", "self", ".", "emb_dim", ")", "\n", "input_proc_embedding", "=", "self", ".", "procedure_encoder", "(", "input_proc_embedding", ",", "src_mask", "=", "p_enc_mask_matrix", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_proc_num", ",", "self", ".", "emb_dim", ")", "\n", "\n", "# 1.1 encode visit-level diag and proc representations", "\n", "visit_diag_embedding", "=", "self", ".", "diag_self_attend", "(", "input_disease_embdding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "-", "1", ")", ",", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "-", "1", ")", ")", "\n", "visit_proc_embedding", "=", "self", ".", "proc_self_attend", "(", "input_proc_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "-", "1", ")", ",", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "-", "1", ")", ")", "\n", "visit_diag_embedding", "=", "visit_diag_embedding", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "-", "1", ")", "\n", "visit_proc_embedding", "=", "visit_proc_embedding", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "-", "1", ")", "\n", "\n", "# 1.3 \u8ba1\u7b97 visit-level\u7684attention score", "\n", "# [batch_size, max_visit_num, max_visit_num]", "\n", "cross_visit_scores", "=", "self", ".", "calc_cross_visit_scores", "(", "visit_diag_embedding", ",", "visit_proc_embedding", ")", "\n", "\n", "\n", "# 3. \u6784\u9020\u4e00\u4e2alast_seq_medication\uff0c\u8868\u793a\u4e0a\u4e00\u6b21visit\u7684medication\uff0c\u7b2c\u4e00\u6b21\u7684\u7531\u4e8e\u6ca1\u6709\u4e0a\u4e00\u6b21medication\uff0c\u75280\u586b\u8865\uff08\u7528\u5565\u586b\u8865\u90fd\u884c\uff0c\u53cd\u6b63\u4e0d\u4f1a\u7528\u5230\uff09", "\n", "last_seq_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ",", "max_med_num", ")", ",", "0", ")", ".", "to", "(", "device", ")", "\n", "last_seq_medication", "=", "torch", ".", "cat", "(", "[", "last_seq_medication", ",", "medications", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "# m_mask_matrix\u77e9\u9635\u540c\u6837\u4e5f\u9700\u8981\u540e\u79fb", "\n", "last_m_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ",", "max_med_num", ")", ",", "-", "1e9", ")", ".", "to", "(", "device", ")", "# \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "last_m_mask", "=", "torch", ".", "cat", "(", "[", "last_m_mask", ",", "m_mask_matrix", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "# \u5bf9last_seq_medication\u8fdb\u884c\u7f16\u7801", "\n", "last_seq_medication_emb", "=", "self", ".", "med_embedding", "(", "last_seq_medication", ")", "\n", "last_m_enc_mask", "=", "last_m_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "last_m_enc_mask", "=", "last_m_enc_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_med_num", ")", "\n", "encoded_medication", "=", "self", ".", "medication_encoder", "(", "last_seq_medication_emb", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "self", ".", "emb_dim", ")", ",", "src_mask", "=", "last_m_enc_mask", ")", "# (batch*seq, max_med_num, emb_dim)", "\n", "encoded_medication", "=", "encoded_medication", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "self", ".", "emb_dim", ")", "\n", "\n", "# vocab_size, emb_size", "\n", "ehr_embedding", ",", "ddi_embedding", "=", "self", ".", "gcn", "(", ")", "\n", "drug_memory", "=", "ehr_embedding", "-", "ddi_embedding", "*", "self", ".", "inter", "\n", "drug_memory_padding", "=", "torch", ".", "zeros", "(", "(", "3", ",", "self", ".", "emb_dim", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "drug_memory", "=", "torch", ".", "cat", "(", "[", "drug_memory", ",", "drug_memory_padding", "]", ",", "dim", "=", "0", ")", "\n", "\n", "return", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "cross_visit_scores", ",", "last_seq_medication", ",", "last_m_mask", ",", "drug_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_visit_score.decode": [[436, 486], ["input_medications.size", "input_medications.size", "input_medications.size", "input_disease_embedding.size", "input_proc_embedding.size", "COGNet_ablation.COGNet_wo_visit_score.med_embedding().view", "drug_memory[].view", "COGNet_ablation.COGNet_wo_visit_score.view().unsqueeze().unsqueeze().repeat", "COGNet_ablation.COGNet_wo_visit_score.view", "d_mask_matrix.view().unsqueeze().unsqueeze().repeat", "m2d_mask_matrix.view.view.view", "p_mask_matrix.view().unsqueeze().unsqueeze().repeat", "m2p_mask_matrix.view.view.view", "COGNet_ablation.COGNet_wo_visit_score.decoder", "COGNet_ablation.COGNet_wo_visit_score.Wo", "score_g.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "COGNet_ablation.COGNet_wo_visit_score.copy_med", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "last_medications.view().repeat", "prob_c_to_g.view.view.scatter_add_", "prob_c_to_g.view.view.view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "COGNet_ablation.COGNet_wo_visit_score.view", "COGNet_ablation.COGNet_wo_visit_score.med_embedding", "COGNet_ablation.COGNet_wo_visit_score.view().unsqueeze().unsqueeze", "d_mask_matrix.view().unsqueeze().unsqueeze", "p_mask_matrix.view().unsqueeze().unsqueeze", "input_disease_embedding.view", "input_proc_embedding.view", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "last_medications.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "COGNet_ablation.COGNet_wo_visit_score.W_z", "COGNet_ablation.COGNet_wo_visit_score.view().unsqueeze", "d_mask_matrix.view().unsqueeze", "p_mask_matrix.view().unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "COGNet_ablation.COGNet_wo_visit_score.view", "d_mask_matrix.view", "p_mask_matrix.view"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.copy_med"], ["", "def", "decode", "(", "self", ",", "input_medications", ",", "input_disease_embedding", ",", "input_proc_embedding", ",", "last_medication_embedding", ",", "last_medications", ",", "cross_visit_scores", ",", "\n", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "last_m_mask", ",", "drug_memory", ")", ":", "\n", "        ", "\"\"\"\n        input_medications: [batch_size, max_visit_num, max_med_num + 1], \u5f00\u5934\u5305\u542b\u4e86 SOS_TOKEN\n        \"\"\"", "\n", "batch_size", "=", "input_medications", ".", "size", "(", "0", ")", "\n", "max_visit_num", "=", "input_medications", ".", "size", "(", "1", ")", "\n", "max_med_num", "=", "input_medications", ".", "size", "(", "2", ")", "\n", "max_diag_num", "=", "input_disease_embedding", ".", "size", "(", "2", ")", "\n", "max_proc_num", "=", "input_proc_embedding", ".", "size", "(", "2", ")", "\n", "\n", "input_medication_embs", "=", "self", ".", "med_embedding", "(", "input_medications", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "# input_medication_embs = self.dropout_emb(input_medication_embs)", "\n", "input_medication_memory", "=", "drug_memory", "[", "input_medications", "]", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "\n", "# m_sos_mask = torch.zeros((batch_size, max_visit_num, 1), device=self.device).float() # \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "m_self_mask", "=", "m_mask_matrix", "\n", "\n", "last_m_enc_mask", "=", "m_self_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "medication_self_mask", "=", "last_m_enc_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_med_num", ")", "\n", "m2d_mask_matrix", "=", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "m2d_mask_matrix", "=", "m2d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_diag_num", ")", "\n", "m2p_mask_matrix", "=", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "m2p_mask_matrix", "=", "m2p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_proc_num", ")", "\n", "\n", "dec_hidden", "=", "self", ".", "decoder", "(", "input_medication_embedding", "=", "input_medication_embs", ",", "input_medication_memory", "=", "input_medication_memory", ",", "\n", "input_disease_embdding", "=", "input_disease_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "-", "1", ")", ",", "\n", "input_proc_embedding", "=", "input_proc_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "-", "1", ")", ",", "\n", "input_medication_self_mask", "=", "medication_self_mask", ",", "\n", "d_mask", "=", "m2d_mask_matrix", ",", "\n", "p_mask", "=", "m2p_mask_matrix", ")", "\n", "\n", "score_g", "=", "self", ".", "Wo", "(", "dec_hidden", ")", "# (batch * max_visit_num, max_med_num, voc_size[2]+2)", "\n", "score_g", "=", "score_g", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "prob_g", "=", "F", ".", "softmax", "(", "score_g", ",", "dim", "=", "-", "1", ")", "\n", "\n", "score_c", "=", "self", ".", "copy_med", "(", "dec_hidden", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", ",", "last_medication_embedding", ",", "last_m_mask", ",", "cross_visit_scores", ")", "\n", "prob_c_to_g", "=", "torch", ".", "zeros_like", "(", "prob_g", ")", ".", "to", "(", "self", ".", "device", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", "*", "max_med_num", ",", "-", "1", ")", "# (batch, max_visit_num * input_med_num, voc_size[2]+2)", "\n", "\n", "# \u7528scatter\u64cd\u4f5c\u4ee3\u66ff\u5d4c\u5957\u5faa\u73af", "\n", "# \u6839\u636elast_seq_medication\u4e2d\u7684indice\uff0c\u5c06score_c\u4e2d\u7684\u503c\u52a0\u5230score_c_to_g\u4e2d\u53bb", "\n", "copy_source", "=", "last_medications", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "max_visit_num", "*", "max_med_num", ",", "1", ")", "\n", "prob_c_to_g", ".", "scatter_add_", "(", "2", ",", "copy_source", ",", "score_c", ")", "\n", "prob_c_to_g", "=", "prob_c_to_g", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "\n", "generate_prob", "=", "F", ".", "sigmoid", "(", "self", ".", "W_z", "(", "dec_hidden", ")", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "1", ")", "\n", "prob", "=", "prob_g", "*", "generate_prob", "+", "prob_c_to_g", "*", "(", "1.", "-", "generate_prob", ")", "\n", "prob", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "prob_g", "[", ":", ",", "0", ",", ":", ",", ":", "]", "# \u7b2c\u4e00\u4e2aseq\u7531\u4e8e\u6ca1\u6709last_medication\u4fe1\u606f\uff0c\u4ec5\u53d6prob_g\u7684\u6982\u7387", "\n", "\n", "return", "torch", ".", "log", "(", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_visit_score.forward": [[488, 509], ["medications.size", "COGNet_ablation.COGNet_wo_visit_score.encode", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "COGNet_ablation.COGNet_wo_visit_score.decode", "diseases.size", "procedures.size", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.encode", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.decode"], ["", "def", "forward", "(", "self", ",", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# batch\u7ef4\u5ea6\u4ee5\u53caseq\u7ef4\u5ea6\u4e0a\u5e76\u884c\u8ba1\u7b97\uff08\u73b0\u5728\u4e0d\u8003\u8651\u65f6\u95f4\u5e8f\u5217\u4fe1\u606f\uff09\uff0c\u6bcf\u4e00\u4e2amedication\u5e8f\u5217\u4ecd\u7136\u6309\u987a\u5e8f\u9884\u6d4b", "\n", "batch_size", ",", "max_seq_length", ",", "max_med_num", "=", "medications", ".", "size", "(", ")", "\n", "max_diag_num", "=", "diseases", ".", "size", "(", ")", "[", "2", "]", "\n", "max_proc_num", "=", "procedures", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "cross_visit_scores", ",", "last_seq_medication", ",", "last_m_mask", ",", "drug_memory", "=", "self", ".", "encode", "(", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "\n", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", "\n", "\n", "# 4. \u6784\u9020\u7ed9decoder\u7684medications\uff0c\u7528\u4e8edecoding\u8fc7\u7a0b\u4e2d\u7684teacher forcing\uff0c\u6ce8\u610f\u7ef4\u5ea6\u4e0a\u589e\u52a0\u4e86\u4e00\u7ef4\uff0c\u56e0\u4e3a\u4f1a\u591a\u751f\u6210\u4e00\u4e2aEND_TOKEN", "\n", "input_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq_length", ",", "1", ")", ",", "self", ".", "SOS_TOKEN", ")", ".", "to", "(", "device", ")", "# [batch_size, seq, 1]", "\n", "input_medication", "=", "torch", ".", "cat", "(", "[", "input_medication", ",", "medications", "]", ",", "dim", "=", "2", ")", "# [batch_size, seq, max_med_num + 1]", "\n", "\n", "m_sos_mask", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "max_seq_length", ",", "1", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "# \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "m_mask_matrix", "=", "torch", ".", "cat", "(", "[", "m_sos_mask", ",", "m_mask_matrix", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "output_logits", "=", "self", ".", "decode", "(", "input_medication", ",", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "last_seq_medication", ",", "cross_visit_scores", ",", "\n", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "last_m_mask", ",", "drug_memory", ")", "\n", "\n", "return", "output_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_visit_score.calc_cross_visit_scores": [[510, 537], ["visit_diag_embedding.size", "visit_diag_embedding.size", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "visit_diag_embedding.size", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "visit_proc_embedding.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.unsqueeze().repeat.unsqueeze().repeat.float"], "methods", ["None"], ["", "def", "calc_cross_visit_scores", "(", "self", ",", "visit_diag_embedding", ",", "visit_proc_embedding", ")", ":", "\n", "        ", "\"\"\"\n        visit_diag_embedding: (batch * visit_num * emb)\n        visit_proc_embedding: (batch * visit_num * emb)\n        \"\"\"", "\n", "max_visit_num", "=", "visit_diag_embedding", ".", "size", "(", "1", ")", "\n", "batch_size", "=", "visit_diag_embedding", ".", "size", "(", "0", ")", "\n", "\n", "# mask\u8868\u793a\u6bcf\u4e2avisit\u53ea\u80fd\u770b\u5230\u81ea\u5df1\u4e4b\u524d\u7684visit", "\n", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "(", "max_visit_num", ",", "max_visit_num", ")", ",", "device", "=", "self", ".", "device", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "# \u4e0b\u4e09\u89d2\u77e9\u9635", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "# batch * max_visit_num * max_visit_num", "\n", "\n", "# \u6bcf\u4e2avisit\u540e\u79fb\u4e00\u4f4d", "\n", "padding", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "1", ",", "self", ".", "emb_dim", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "diag_keys", "=", "torch", ".", "cat", "(", "[", "padding", ",", "visit_diag_embedding", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "# batch * max_visit_num * emb", "\n", "proc_keys", "=", "torch", ".", "cat", "(", "[", "padding", ",", "visit_proc_embedding", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# \u5f97\u5230\u6bcf\u4e2avisit\u8ddf\u81ea\u5df1\u524d\u9762\u6240\u6709visit\u7684score", "\n", "diag_scores", "=", "torch", ".", "matmul", "(", "visit_diag_embedding", ",", "diag_keys", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "visit_diag_embedding", ".", "size", "(", "-", "1", ")", ")", "\n", "proc_scores", "=", "torch", ".", "matmul", "(", "visit_proc_embedding", ",", "proc_keys", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "visit_proc_embedding", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "# 1st visit's scores is not zero!", "\n", "scores", "=", "F", ".", "softmax", "(", "diag_scores", "+", "proc_scores", "+", "mask", ",", "dim", "=", "-", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_visit_score.copy_med": [[538, 565], ["decode_input_hiddens.size", "decode_input_hiddens.size", "last_medications.size", "COGNet_ablation.COGNet_wo_visit_score.Wc().view", "last_m_mask.view().repeat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "COGNet_ablation.COGNet_wo_visit_score.Wc", "last_medications.view().transpose", "last_m_mask.view", "last_medications.view"], "methods", ["None"], ["", "def", "copy_med", "(", "self", ",", "decode_input_hiddens", ",", "last_medications", ",", "last_m_mask", ",", "cross_visit_scores", ")", ":", "\n", "        ", "\"\"\"\n        decode_input_hiddens: [batch_size, max_visit_num, input_med_num, emb_size]\n        last_medications: [batch_size, max_visit_num, max_med_num, emb_size]\n        last_m_mask: [batch_size, max_visit_num, max_med_num]\n        cross_visit_scores: [batch_size, max_visit_num, max_visit_num]\n        \"\"\"", "\n", "max_visit_num", "=", "decode_input_hiddens", ".", "size", "(", "1", ")", "\n", "input_med_num", "=", "decode_input_hiddens", ".", "size", "(", "2", ")", "\n", "max_med_num", "=", "last_medications", ".", "size", "(", "2", ")", "\n", "copy_query", "=", "self", ".", "Wc", "(", "decode_input_hiddens", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "self", ".", "emb_dim", ")", "\n", "attn_scores", "=", "torch", ".", "matmul", "(", "copy_query", ",", "last_medications", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "max_med_num", ",", "self", ".", "emb_dim", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "self", ".", "emb_dim", ")", "\n", "med_mask", "=", "last_m_mask", ".", "view", "(", "-", "1", ",", "1", ",", "max_visit_num", "*", "max_med_num", ")", ".", "repeat", "(", "1", ",", "max_visit_num", "*", "input_med_num", ",", "1", ")", "\n", "\n", "# [batch_size, max_vist_num * input_med_num, max_visit_num * max_med_num]", "\n", "attn_scores", "=", "F", ".", "softmax", "(", "attn_scores", "+", "med_mask", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# # (batch_size, max_visit_num * input_med_num, max_visit_num)", "\n", "# visit_scores = cross_visit_scores.repeat(1, 1, input_med_num).view(-1, max_visit_num * input_med_num, max_visit_num)", "\n", "# # (batch_size, max_visit_num * input_med_num, max_visit_num * max_med_num)", "\n", "# visit_scores = visit_scores.unsqueeze(-1).repeat(1, 1, 1, max_med_num).view(-1, max_visit_num * input_med_num, max_visit_num * max_med_num)", "\n", "\n", "# scores = torch.mul(attn_scores, visit_scores).clamp(min=1e-9)", "\n", "# row_scores = scores.sum(dim=-1, keepdim=True)", "\n", "# scores = scores / row_scores    # (batch_size, max_visit_num * input_med_num, max_visit_num * max_med_num)", "\n", "\n", "return", "attn_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_graph.__init__": [[568, 661], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "COGNet_ablation.GCN", "torch.Parameter", "torch.Parameter", "torch.Parameter", "layers.SelfAttend", "layers.SelfAttend", "COGNet_ablation.MedTransformerDecoder_wo_graph", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "COGNet_ablation.MaskLinear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Linear", "torch.Linear", "torch.Linear", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["def", "__init__", "(", "self", ",", "voc_size", ",", "ehr_adj", ",", "ddi_adj", ",", "ddi_mask_H", ",", "emb_dim", "=", "64", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "COGNet_wo_graph", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "voc_size", "=", "voc_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "nhead", "=", "2", "\n", "self", ".", "SOS_TOKEN", "=", "voc_size", "[", "2", "]", "# start of sentence", "\n", "self", ".", "END_TOKEN", "=", "voc_size", "[", "2", "]", "+", "1", "# end   \u65b0\u589e\u7684\u4e24\u4e2a\u7f16\u7801\uff0c\u4e24\u8005\u5747\u662f\u9488\u5bf9\u4e8e\u836f\u7269\u7684embedding", "\n", "self", ".", "MED_PAD_TOKEN", "=", "voc_size", "[", "2", "]", "+", "2", "# \u7528\u4e8eembedding\u77e9\u9635\u4e2d\u7684padding\uff08\u5168\u4e3a0\uff09", "\n", "self", ".", "DIAG_PAD_TOKEN", "=", "voc_size", "[", "0", "]", "+", "2", "\n", "self", ".", "PROC_PAD_TOKEN", "=", "voc_size", "[", "1", "]", "+", "2", "\n", "\n", "self", ".", "tensor_ddi_mask_H", "=", "torch", ".", "FloatTensor", "(", "ddi_mask_H", ")", ".", "to", "(", "device", ")", "\n", "\n", "# dig_num * emb_dim", "\n", "self", ".", "diag_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "0", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "DIAG_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# proc_num * emb_dim", "\n", "self", ".", "proc_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "1", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "PROC_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# med_num * emb_dim", "\n", "self", ".", "med_embedding", "=", "nn", ".", "Sequential", "(", "\n", "# \u6dfb\u52a0padding_idx\uff0c\u8868\u793a\u53d60\u5411\u91cf", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "2", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "MED_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# \u7528\u4e8e\u5bf9\u4e0a\u4e00\u4e2avisit\u7684medication\u8fdb\u884c\u7f16\u7801", "\n", "# self.medication_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)", "\n", "self", ".", "medication_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "# \u7528\u4e8e\u5bf9\u5f53\u524dvisit\u7684\u75be\u75c5\u4e0e\u75c7\u72b6\u8fdb\u884c\u7f16\u7801", "\n", "# self.diagnoses_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)", "\n", "# self.procedure_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)        ", "\n", "self", ".", "diagnoses_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "self", ".", "procedure_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "# self.enc_gru = nn.GRU(emb_dim, emb_dim, batch_first=True, bidirectional=True)", "\n", "\n", "# self.ehr_gcn = GCN(", "\n", "#     voc_size=voc_size[2], emb_dim=emb_dim, adj=ehr_adj, device=device)", "\n", "# self.ddi_gcn = GCN(", "\n", "#     voc_size=voc_size[2], emb_dim=emb_dim, adj=ddi_adj, device=device)", "\n", "self", ".", "tensor_ddi_adj", "=", "torch", ".", "FloatTensor", "(", "ddi_adj", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "gcn", "=", "GCN", "(", "voc_size", "=", "voc_size", "[", "2", "]", ",", "emb_dim", "=", "emb_dim", ",", "ehr_adj", "=", "ehr_adj", ",", "ddi_adj", "=", "ddi_adj", ",", "device", "=", "device", ")", "\n", "self", ".", "inter", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ")", "\n", "\n", "# \u805a\u5408\u5355\u4e2avisit\u5185\u7684diag\u548cproc\u5f97\u5230visit-level\u7684\u8868\u8fbe", "\n", "self", ".", "diag_self_attend", "=", "SelfAttend", "(", "emb_dim", ")", "\n", "self", ".", "proc_self_attend", "=", "SelfAttend", "(", "emb_dim", ")", "\n", "\n", "self", ".", "decoder", "=", "MedTransformerDecoder_wo_graph", "(", "emb_dim", ",", "self", ".", "nhead", ",", "dim_feedforward", "=", "emb_dim", "*", "2", ",", "dropout", "=", "0.2", ",", "\n", "layer_norm_eps", "=", "1e-5", ")", "\n", "\n", "# \u7528\u4e8e\u5bf9\u6bcf\u4e00\u4e2avisit\u7684diagnoses\u8fdb\u884c\u7f16\u7801", "\n", "\n", "# \u7528\u4e8e\u751f\u6210\u836f\u7269\u5e8f\u5217", "\n", "self", ".", "dec_gru", "=", "nn", ".", "GRU", "(", "emb_dim", "*", "3", ",", "emb_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "diag_attn", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "W_diag_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_diff_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_diff_proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n", "# weights", "\n", "self", ".", "Ws", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "emb_dim", ")", "# only used at initial stage", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "voc_size", "[", "2", "]", "+", "2", ")", "# generate mode", "\n", "# self.Wc = nn.Linear(emb_dim*2, emb_dim)  # copy mode", "\n", "self", ".", "Wc", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "# copy mode", "\n", "\n", "self", ".", "W_dec", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_stay", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_dec", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_stay", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n", "# swtich network to calculate generate probablity", "\n", "self", ".", "W_z", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "1", ")", "\n", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0.3", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "# bipartite local embedding", "\n", "self", ".", "bipartite_transform", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "emb_dim", ",", "ddi_mask_H", ".", "shape", "[", "1", "]", ")", "\n", ")", "\n", "self", ".", "bipartite_output", "=", "MaskLinear", "(", "\n", "ddi_mask_H", ".", "shape", "[", "1", "]", ",", "voc_size", "[", "2", "]", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_graph.encode": [[662, 711], ["medications.size", "COGNet_ablation.COGNet_wo_graph.diag_embedding().view", "COGNet_ablation.COGNet_wo_graph.proc_embedding().view", "d_mask_matrix.view().unsqueeze().unsqueeze().repeat", "d_enc_mask_matrix.view.view.view", "p_mask_matrix.view().unsqueeze().unsqueeze().repeat", "p_enc_mask_matrix.view.view.view", "COGNet_ablation.COGNet_wo_graph.diagnoses_encoder().view", "COGNet_ablation.COGNet_wo_graph.procedure_encoder().view", "COGNet_ablation.COGNet_wo_graph.diag_self_attend", "COGNet_ablation.COGNet_wo_graph.proc_self_attend", "visit_diag_embedding.view.view.view", "visit_proc_embedding.view.view.view", "COGNet_ablation.COGNet_wo_graph.calc_cross_visit_scores", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "COGNet_ablation.COGNet_wo_graph.med_embedding", "torch.cat.view().unsqueeze().unsqueeze().repeat", "torch.cat.view().unsqueeze().unsqueeze().repeat", "torch.cat.view().unsqueeze().unsqueeze().repeat", "last_m_enc_mask.view.view.view", "COGNet_ablation.COGNet_wo_graph.medication_encoder", "encoded_medication.view.view.view", "COGNet_ablation.COGNet_wo_graph.gcn", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "diseases.size", "procedures.size", "COGNet_ablation.COGNet_wo_graph.view", "d_mask_matrix.view", "COGNet_ablation.COGNet_wo_graph.view", "p_mask_matrix.view", "COGNet_ablation.COGNet_wo_graph.view", "COGNet_ablation.COGNet_wo_graph.diag_embedding", "COGNet_ablation.COGNet_wo_graph.proc_embedding", "d_mask_matrix.view().unsqueeze().unsqueeze", "p_mask_matrix.view().unsqueeze().unsqueeze", "COGNet_ablation.COGNet_wo_graph.diagnoses_encoder", "COGNet_ablation.COGNet_wo_graph.procedure_encoder", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.cat.view().unsqueeze().unsqueeze", "torch.cat.view().unsqueeze().unsqueeze", "torch.cat.view().unsqueeze().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "d_mask_matrix.view().unsqueeze", "p_mask_matrix.view().unsqueeze", "torch.cat.view().unsqueeze", "torch.cat.view().unsqueeze", "torch.cat.view().unsqueeze", "d_mask_matrix.view", "p_mask_matrix.view", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.calc_cross_visit_scores"], ["", "def", "encode", "(", "self", ",", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# batch\u7ef4\u5ea6\u4ee5\u53caseq\u7ef4\u5ea6\u4e0a\u5e76\u884c\u8ba1\u7b97\uff08\u73b0\u5728\u4e0d\u8003\u8651\u65f6\u95f4\u5e8f\u5217\u4fe1\u606f\uff09\uff0c\u6bcf\u4e00\u4e2amedication\u5e8f\u5217\u4ecd\u7136\u6309\u987a\u5e8f\u9884\u6d4b", "\n", "batch_size", ",", "max_visit_num", ",", "max_med_num", "=", "medications", ".", "size", "(", ")", "\n", "max_diag_num", "=", "diseases", ".", "size", "(", ")", "[", "2", "]", "\n", "max_proc_num", "=", "procedures", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "############################ \u6570\u636e\u9884\u5904\u7406 #########################", "\n", "# 1. \u5bf9\u5f53\u524d\u7684disease\u4e0eprocedure\u8fdb\u884c\u7f16\u7801", "\n", "input_disease_embdding", "=", "self", ".", "diag_embedding", "(", "diseases", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "self", ".", "emb_dim", ")", "# [batch, seq, max_diag_num, emb]", "\n", "input_proc_embedding", "=", "self", ".", "proc_embedding", "(", "procedures", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "self", ".", "emb_dim", ")", "# [batch, seq, max_proc_num, emb]", "\n", "d_enc_mask_matrix", "=", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_diag_num", ",", "1", ")", "# [batch*seq, nhead, input_length, output_length]", "\n", "d_enc_mask_matrix", "=", "d_enc_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_diag_num", ",", "max_diag_num", ")", "\n", "p_enc_mask_matrix", "=", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_proc_num", ",", "1", ")", "\n", "p_enc_mask_matrix", "=", "p_enc_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_proc_num", ",", "max_proc_num", ")", "\n", "input_disease_embdding", "=", "self", ".", "diagnoses_encoder", "(", "input_disease_embdding", ",", "src_mask", "=", "d_enc_mask_matrix", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_diag_num", ",", "self", ".", "emb_dim", ")", "\n", "input_proc_embedding", "=", "self", ".", "procedure_encoder", "(", "input_proc_embedding", ",", "src_mask", "=", "p_enc_mask_matrix", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_proc_num", ",", "self", ".", "emb_dim", ")", "\n", "\n", "# 1.1 encode visit-level diag and proc representations", "\n", "visit_diag_embedding", "=", "self", ".", "diag_self_attend", "(", "input_disease_embdding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "-", "1", ")", ",", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "-", "1", ")", ")", "\n", "visit_proc_embedding", "=", "self", ".", "proc_self_attend", "(", "input_proc_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "-", "1", ")", ",", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "-", "1", ")", ")", "\n", "visit_diag_embedding", "=", "visit_diag_embedding", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "-", "1", ")", "\n", "visit_proc_embedding", "=", "visit_proc_embedding", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "-", "1", ")", "\n", "\n", "# 1.3 \u8ba1\u7b97 visit-level\u7684attention score", "\n", "# [batch_size, max_visit_num, max_visit_num]", "\n", "cross_visit_scores", "=", "self", ".", "calc_cross_visit_scores", "(", "visit_diag_embedding", ",", "visit_proc_embedding", ")", "\n", "\n", "\n", "# 3. \u6784\u9020\u4e00\u4e2alast_seq_medication\uff0c\u8868\u793a\u4e0a\u4e00\u6b21visit\u7684medication\uff0c\u7b2c\u4e00\u6b21\u7684\u7531\u4e8e\u6ca1\u6709\u4e0a\u4e00\u6b21medication\uff0c\u75280\u586b\u8865\uff08\u7528\u5565\u586b\u8865\u90fd\u884c\uff0c\u53cd\u6b63\u4e0d\u4f1a\u7528\u5230\uff09", "\n", "last_seq_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ",", "max_med_num", ")", ",", "0", ")", ".", "to", "(", "device", ")", "\n", "last_seq_medication", "=", "torch", ".", "cat", "(", "[", "last_seq_medication", ",", "medications", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "# m_mask_matrix\u77e9\u9635\u540c\u6837\u4e5f\u9700\u8981\u540e\u79fb", "\n", "last_m_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ",", "max_med_num", ")", ",", "-", "1e9", ")", ".", "to", "(", "device", ")", "# \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "last_m_mask", "=", "torch", ".", "cat", "(", "[", "last_m_mask", ",", "m_mask_matrix", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "# \u5bf9last_seq_medication\u8fdb\u884c\u7f16\u7801", "\n", "last_seq_medication_emb", "=", "self", ".", "med_embedding", "(", "last_seq_medication", ")", "\n", "last_m_enc_mask", "=", "last_m_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "last_m_enc_mask", "=", "last_m_enc_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_med_num", ")", "\n", "encoded_medication", "=", "self", ".", "medication_encoder", "(", "last_seq_medication_emb", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "self", ".", "emb_dim", ")", ",", "src_mask", "=", "last_m_enc_mask", ")", "# (batch*seq, max_med_num, emb_dim)", "\n", "encoded_medication", "=", "encoded_medication", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "self", ".", "emb_dim", ")", "\n", "\n", "# vocab_size, emb_size", "\n", "ehr_embedding", ",", "ddi_embedding", "=", "self", ".", "gcn", "(", ")", "\n", "drug_memory", "=", "ehr_embedding", "-", "ddi_embedding", "*", "self", ".", "inter", "\n", "drug_memory_padding", "=", "torch", ".", "zeros", "(", "(", "3", ",", "self", ".", "emb_dim", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "drug_memory", "=", "torch", ".", "cat", "(", "[", "drug_memory", ",", "drug_memory_padding", "]", ",", "dim", "=", "0", ")", "\n", "\n", "return", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "cross_visit_scores", ",", "last_seq_medication", ",", "last_m_mask", ",", "drug_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_graph.decode": [[712, 762], ["input_medications.size", "input_medications.size", "input_medications.size", "input_disease_embedding.size", "input_proc_embedding.size", "COGNet_ablation.COGNet_wo_graph.med_embedding().view", "drug_memory[].view", "COGNet_ablation.COGNet_wo_graph.view().unsqueeze().unsqueeze().repeat", "COGNet_ablation.COGNet_wo_graph.view", "d_mask_matrix.view().unsqueeze().unsqueeze().repeat", "m2d_mask_matrix.view.view.view", "p_mask_matrix.view().unsqueeze().unsqueeze().repeat", "m2p_mask_matrix.view.view.view", "COGNet_ablation.COGNet_wo_graph.decoder", "COGNet_ablation.COGNet_wo_graph.Wo", "score_g.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "COGNet_ablation.COGNet_wo_graph.copy_med", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "last_medications.view().repeat", "prob_c_to_g.view.view.scatter_add_", "prob_c_to_g.view.view.view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "COGNet_ablation.COGNet_wo_graph.view", "COGNet_ablation.COGNet_wo_graph.med_embedding", "COGNet_ablation.COGNet_wo_graph.view().unsqueeze().unsqueeze", "d_mask_matrix.view().unsqueeze().unsqueeze", "p_mask_matrix.view().unsqueeze().unsqueeze", "input_disease_embedding.view", "input_proc_embedding.view", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "last_medications.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "COGNet_ablation.COGNet_wo_graph.W_z", "COGNet_ablation.COGNet_wo_graph.view().unsqueeze", "d_mask_matrix.view().unsqueeze", "p_mask_matrix.view().unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "COGNet_ablation.COGNet_wo_graph.view", "d_mask_matrix.view", "p_mask_matrix.view"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.copy_med"], ["", "def", "decode", "(", "self", ",", "input_medications", ",", "input_disease_embedding", ",", "input_proc_embedding", ",", "last_medication_embedding", ",", "last_medications", ",", "cross_visit_scores", ",", "\n", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "last_m_mask", ",", "drug_memory", ")", ":", "\n", "        ", "\"\"\"\n        input_medications: [batch_size, max_visit_num, max_med_num + 1], \u5f00\u5934\u5305\u542b\u4e86 SOS_TOKEN\n        \"\"\"", "\n", "batch_size", "=", "input_medications", ".", "size", "(", "0", ")", "\n", "max_visit_num", "=", "input_medications", ".", "size", "(", "1", ")", "\n", "max_med_num", "=", "input_medications", ".", "size", "(", "2", ")", "\n", "max_diag_num", "=", "input_disease_embedding", ".", "size", "(", "2", ")", "\n", "max_proc_num", "=", "input_proc_embedding", ".", "size", "(", "2", ")", "\n", "\n", "input_medication_embs", "=", "self", ".", "med_embedding", "(", "input_medications", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "# input_medication_embs = self.dropout_emb(input_medication_embs)", "\n", "input_medication_memory", "=", "drug_memory", "[", "input_medications", "]", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "\n", "# m_sos_mask = torch.zeros((batch_size, max_visit_num, 1), device=self.device).float() # \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "m_self_mask", "=", "m_mask_matrix", "\n", "\n", "last_m_enc_mask", "=", "m_self_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "medication_self_mask", "=", "last_m_enc_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_med_num", ")", "\n", "m2d_mask_matrix", "=", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "m2d_mask_matrix", "=", "m2d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_diag_num", ")", "\n", "m2p_mask_matrix", "=", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "m2p_mask_matrix", "=", "m2p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_proc_num", ")", "\n", "\n", "dec_hidden", "=", "self", ".", "decoder", "(", "input_medication_embedding", "=", "input_medication_embs", ",", "input_medication_memory", "=", "input_medication_memory", ",", "\n", "input_disease_embdding", "=", "input_disease_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "-", "1", ")", ",", "\n", "input_proc_embedding", "=", "input_proc_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "-", "1", ")", ",", "\n", "input_medication_self_mask", "=", "medication_self_mask", ",", "\n", "d_mask", "=", "m2d_mask_matrix", ",", "\n", "p_mask", "=", "m2p_mask_matrix", ")", "\n", "\n", "score_g", "=", "self", ".", "Wo", "(", "dec_hidden", ")", "# (batch * max_visit_num, max_med_num, voc_size[2]+2)", "\n", "score_g", "=", "score_g", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "prob_g", "=", "F", ".", "softmax", "(", "score_g", ",", "dim", "=", "-", "1", ")", "\n", "\n", "score_c", "=", "self", ".", "copy_med", "(", "dec_hidden", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", ",", "last_medication_embedding", ",", "last_m_mask", ",", "cross_visit_scores", ")", "\n", "prob_c_to_g", "=", "torch", ".", "zeros_like", "(", "prob_g", ")", ".", "to", "(", "self", ".", "device", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", "*", "max_med_num", ",", "-", "1", ")", "# (batch, max_visit_num * input_med_num, voc_size[2]+2)", "\n", "\n", "# \u7528scatter\u64cd\u4f5c\u4ee3\u66ff\u5d4c\u5957\u5faa\u73af", "\n", "# \u6839\u636elast_seq_medication\u4e2d\u7684indice\uff0c\u5c06score_c\u4e2d\u7684\u503c\u52a0\u5230score_c_to_g\u4e2d\u53bb", "\n", "copy_source", "=", "last_medications", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "max_visit_num", "*", "max_med_num", ",", "1", ")", "\n", "prob_c_to_g", ".", "scatter_add_", "(", "2", ",", "copy_source", ",", "score_c", ")", "\n", "prob_c_to_g", "=", "prob_c_to_g", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "\n", "generate_prob", "=", "F", ".", "sigmoid", "(", "self", ".", "W_z", "(", "dec_hidden", ")", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "1", ")", "\n", "prob", "=", "prob_g", "*", "generate_prob", "+", "prob_c_to_g", "*", "(", "1.", "-", "generate_prob", ")", "\n", "prob", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "prob_g", "[", ":", ",", "0", ",", ":", ",", ":", "]", "# \u7b2c\u4e00\u4e2aseq\u7531\u4e8e\u6ca1\u6709last_medication\u4fe1\u606f\uff0c\u4ec5\u53d6prob_g\u7684\u6982\u7387", "\n", "\n", "return", "torch", ".", "log", "(", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_graph.forward": [[764, 785], ["medications.size", "COGNet_ablation.COGNet_wo_graph.encode", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "COGNet_ablation.COGNet_wo_graph.decode", "diseases.size", "procedures.size", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.encode", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.decode"], ["", "def", "forward", "(", "self", ",", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# batch\u7ef4\u5ea6\u4ee5\u53caseq\u7ef4\u5ea6\u4e0a\u5e76\u884c\u8ba1\u7b97\uff08\u73b0\u5728\u4e0d\u8003\u8651\u65f6\u95f4\u5e8f\u5217\u4fe1\u606f\uff09\uff0c\u6bcf\u4e00\u4e2amedication\u5e8f\u5217\u4ecd\u7136\u6309\u987a\u5e8f\u9884\u6d4b", "\n", "batch_size", ",", "max_seq_length", ",", "max_med_num", "=", "medications", ".", "size", "(", ")", "\n", "max_diag_num", "=", "diseases", ".", "size", "(", ")", "[", "2", "]", "\n", "max_proc_num", "=", "procedures", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "cross_visit_scores", ",", "last_seq_medication", ",", "last_m_mask", ",", "drug_memory", "=", "self", ".", "encode", "(", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "\n", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", "\n", "\n", "# 4. \u6784\u9020\u7ed9decoder\u7684medications\uff0c\u7528\u4e8edecoding\u8fc7\u7a0b\u4e2d\u7684teacher forcing\uff0c\u6ce8\u610f\u7ef4\u5ea6\u4e0a\u589e\u52a0\u4e86\u4e00\u7ef4\uff0c\u56e0\u4e3a\u4f1a\u591a\u751f\u6210\u4e00\u4e2aEND_TOKEN", "\n", "input_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq_length", ",", "1", ")", ",", "self", ".", "SOS_TOKEN", ")", ".", "to", "(", "device", ")", "# [batch_size, seq, 1]", "\n", "input_medication", "=", "torch", ".", "cat", "(", "[", "input_medication", ",", "medications", "]", ",", "dim", "=", "2", ")", "# [batch_size, seq, max_med_num + 1]", "\n", "\n", "m_sos_mask", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "max_seq_length", ",", "1", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "# \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "m_mask_matrix", "=", "torch", ".", "cat", "(", "[", "m_sos_mask", ",", "m_mask_matrix", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "output_logits", "=", "self", ".", "decode", "(", "input_medication", ",", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "last_seq_medication", ",", "cross_visit_scores", ",", "\n", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "last_m_mask", ",", "drug_memory", ")", "\n", "\n", "return", "output_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_graph.calc_cross_visit_scores": [[786, 813], ["visit_diag_embedding.size", "visit_diag_embedding.size", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "visit_diag_embedding.size", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "visit_proc_embedding.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.unsqueeze().repeat.unsqueeze().repeat.float"], "methods", ["None"], ["", "def", "calc_cross_visit_scores", "(", "self", ",", "visit_diag_embedding", ",", "visit_proc_embedding", ")", ":", "\n", "        ", "\"\"\"\n        visit_diag_embedding: (batch * visit_num * emb)\n        visit_proc_embedding: (batch * visit_num * emb)\n        \"\"\"", "\n", "max_visit_num", "=", "visit_diag_embedding", ".", "size", "(", "1", ")", "\n", "batch_size", "=", "visit_diag_embedding", ".", "size", "(", "0", ")", "\n", "\n", "# mask\u8868\u793a\u6bcf\u4e2avisit\u53ea\u80fd\u770b\u5230\u81ea\u5df1\u4e4b\u524d\u7684visit", "\n", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "(", "max_visit_num", ",", "max_visit_num", ")", ",", "device", "=", "self", ".", "device", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "# \u4e0b\u4e09\u89d2\u77e9\u9635", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "# batch * max_visit_num * max_visit_num", "\n", "\n", "# \u6bcf\u4e2avisit\u540e\u79fb\u4e00\u4f4d", "\n", "padding", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "1", ",", "self", ".", "emb_dim", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "diag_keys", "=", "torch", ".", "cat", "(", "[", "padding", ",", "visit_diag_embedding", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "# batch * max_visit_num * emb", "\n", "proc_keys", "=", "torch", ".", "cat", "(", "[", "padding", ",", "visit_proc_embedding", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# \u5f97\u5230\u6bcf\u4e2avisit\u8ddf\u81ea\u5df1\u524d\u9762\u6240\u6709visit\u7684score", "\n", "diag_scores", "=", "torch", ".", "matmul", "(", "visit_diag_embedding", ",", "diag_keys", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "visit_diag_embedding", ".", "size", "(", "-", "1", ")", ")", "\n", "proc_scores", "=", "torch", ".", "matmul", "(", "visit_proc_embedding", ",", "proc_keys", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "visit_proc_embedding", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "# 1st visit's scores is not zero!", "\n", "scores", "=", "F", ".", "softmax", "(", "diag_scores", "+", "proc_scores", "+", "mask", ",", "dim", "=", "-", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_graph.copy_med": [[814, 841], ["decode_input_hiddens.size", "decode_input_hiddens.size", "last_medications.size", "COGNet_ablation.COGNet_wo_graph.Wc().view", "last_m_mask.view().repeat", "torch.softmax", "torch.softmax", "torch.softmax", "cross_visit_scores.repeat().view", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat().view", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp.sum", "torch.mul().clamp.sum", "torch.mul().clamp.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "COGNet_ablation.COGNet_wo_graph.Wc", "last_medications.view().transpose", "last_m_mask.view", "cross_visit_scores.repeat", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "last_medications.view", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "copy_med", "(", "self", ",", "decode_input_hiddens", ",", "last_medications", ",", "last_m_mask", ",", "cross_visit_scores", ")", ":", "\n", "        ", "\"\"\"\n        decode_input_hiddens: [batch_size, max_visit_num, input_med_num, emb_size]\n        last_medications: [batch_size, max_visit_num, max_med_num, emb_size]\n        last_m_mask: [batch_size, max_visit_num, max_med_num]\n        cross_visit_scores: [batch_size, max_visit_num, max_visit_num]\n        \"\"\"", "\n", "max_visit_num", "=", "decode_input_hiddens", ".", "size", "(", "1", ")", "\n", "input_med_num", "=", "decode_input_hiddens", ".", "size", "(", "2", ")", "\n", "max_med_num", "=", "last_medications", ".", "size", "(", "2", ")", "\n", "copy_query", "=", "self", ".", "Wc", "(", "decode_input_hiddens", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "self", ".", "emb_dim", ")", "\n", "attn_scores", "=", "torch", ".", "matmul", "(", "copy_query", ",", "last_medications", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "max_med_num", ",", "self", ".", "emb_dim", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "self", ".", "emb_dim", ")", "\n", "med_mask", "=", "last_m_mask", ".", "view", "(", "-", "1", ",", "1", ",", "max_visit_num", "*", "max_med_num", ")", ".", "repeat", "(", "1", ",", "max_visit_num", "*", "input_med_num", ",", "1", ")", "\n", "\n", "# [batch_size, max_vist_num * input_med_num, max_visit_num * max_med_num]", "\n", "attn_scores", "=", "F", ".", "softmax", "(", "attn_scores", "+", "med_mask", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# (batch_size, max_visit_num * input_med_num, max_visit_num)", "\n", "visit_scores", "=", "cross_visit_scores", ".", "repeat", "(", "1", ",", "1", ",", "input_med_num", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "max_visit_num", ")", "\n", "# (batch_size, max_visit_num * input_med_num, max_visit_num * max_med_num)", "\n", "visit_scores", "=", "visit_scores", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "max_med_num", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "max_visit_num", "*", "max_med_num", ")", "\n", "\n", "scores", "=", "torch", ".", "mul", "(", "attn_scores", ",", "visit_scores", ")", ".", "clamp", "(", "min", "=", "1e-9", ")", "\n", "row_scores", "=", "scores", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "scores", "=", "scores", "/", "row_scores", "# (batch_size, max_visit_num * input_med_num, max_visit_num * max_med_num)", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_diag.__init__": [[844, 937], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "COGNet_ablation.GCN", "torch.Parameter", "torch.Parameter", "torch.Parameter", "layers.SelfAttend", "layers.SelfAttend", "COGNet_ablation.MedTransformerDecoder_wo_diag", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "COGNet_ablation.MaskLinear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Linear", "torch.Linear", "torch.Linear", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["def", "__init__", "(", "self", ",", "voc_size", ",", "ehr_adj", ",", "ddi_adj", ",", "ddi_mask_H", ",", "emb_dim", "=", "64", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "COGNet_wo_diag", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "voc_size", "=", "voc_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "nhead", "=", "2", "\n", "self", ".", "SOS_TOKEN", "=", "voc_size", "[", "2", "]", "# start of sentence", "\n", "self", ".", "END_TOKEN", "=", "voc_size", "[", "2", "]", "+", "1", "# end   \u65b0\u589e\u7684\u4e24\u4e2a\u7f16\u7801\uff0c\u4e24\u8005\u5747\u662f\u9488\u5bf9\u4e8e\u836f\u7269\u7684embedding", "\n", "self", ".", "MED_PAD_TOKEN", "=", "voc_size", "[", "2", "]", "+", "2", "# \u7528\u4e8eembedding\u77e9\u9635\u4e2d\u7684padding\uff08\u5168\u4e3a0\uff09", "\n", "self", ".", "DIAG_PAD_TOKEN", "=", "voc_size", "[", "0", "]", "+", "2", "\n", "self", ".", "PROC_PAD_TOKEN", "=", "voc_size", "[", "1", "]", "+", "2", "\n", "\n", "self", ".", "tensor_ddi_mask_H", "=", "torch", ".", "FloatTensor", "(", "ddi_mask_H", ")", ".", "to", "(", "device", ")", "\n", "\n", "# dig_num * emb_dim", "\n", "self", ".", "diag_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "0", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "DIAG_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# proc_num * emb_dim", "\n", "self", ".", "proc_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "1", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "PROC_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# med_num * emb_dim", "\n", "self", ".", "med_embedding", "=", "nn", ".", "Sequential", "(", "\n", "# \u6dfb\u52a0padding_idx\uff0c\u8868\u793a\u53d60\u5411\u91cf", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "2", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "MED_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# \u7528\u4e8e\u5bf9\u4e0a\u4e00\u4e2avisit\u7684medication\u8fdb\u884c\u7f16\u7801", "\n", "# self.medication_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)", "\n", "self", ".", "medication_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "# \u7528\u4e8e\u5bf9\u5f53\u524dvisit\u7684\u75be\u75c5\u4e0e\u75c7\u72b6\u8fdb\u884c\u7f16\u7801", "\n", "# self.diagnoses_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)", "\n", "# self.procedure_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)        ", "\n", "self", ".", "diagnoses_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "self", ".", "procedure_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "# self.enc_gru = nn.GRU(emb_dim, emb_dim, batch_first=True, bidirectional=True)", "\n", "\n", "# self.ehr_gcn = GCN(", "\n", "#     voc_size=voc_size[2], emb_dim=emb_dim, adj=ehr_adj, device=device)", "\n", "# self.ddi_gcn = GCN(", "\n", "#     voc_size=voc_size[2], emb_dim=emb_dim, adj=ddi_adj, device=device)", "\n", "self", ".", "tensor_ddi_adj", "=", "torch", ".", "FloatTensor", "(", "ddi_adj", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "gcn", "=", "GCN", "(", "voc_size", "=", "voc_size", "[", "2", "]", ",", "emb_dim", "=", "emb_dim", ",", "ehr_adj", "=", "ehr_adj", ",", "ddi_adj", "=", "ddi_adj", ",", "device", "=", "device", ")", "\n", "self", ".", "inter", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ")", "\n", "\n", "# \u805a\u5408\u5355\u4e2avisit\u5185\u7684diag\u548cproc\u5f97\u5230visit-level\u7684\u8868\u8fbe", "\n", "self", ".", "diag_self_attend", "=", "SelfAttend", "(", "emb_dim", ")", "\n", "self", ".", "proc_self_attend", "=", "SelfAttend", "(", "emb_dim", ")", "\n", "\n", "self", ".", "decoder", "=", "MedTransformerDecoder_wo_diag", "(", "emb_dim", ",", "self", ".", "nhead", ",", "dim_feedforward", "=", "emb_dim", "*", "2", ",", "dropout", "=", "0.2", ",", "\n", "layer_norm_eps", "=", "1e-5", ")", "\n", "\n", "# \u7528\u4e8e\u5bf9\u6bcf\u4e00\u4e2avisit\u7684diagnoses\u8fdb\u884c\u7f16\u7801", "\n", "\n", "# \u7528\u4e8e\u751f\u6210\u836f\u7269\u5e8f\u5217", "\n", "self", ".", "dec_gru", "=", "nn", ".", "GRU", "(", "emb_dim", "*", "3", ",", "emb_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "diag_attn", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "W_diag_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_diff_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_diff_proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n", "# weights", "\n", "self", ".", "Ws", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "emb_dim", ")", "# only used at initial stage", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "voc_size", "[", "2", "]", "+", "2", ")", "# generate mode", "\n", "# self.Wc = nn.Linear(emb_dim*2, emb_dim)  # copy mode", "\n", "self", ".", "Wc", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "# copy mode", "\n", "\n", "self", ".", "W_dec", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_stay", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_dec", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_stay", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n", "# swtich network to calculate generate probablity", "\n", "self", ".", "W_z", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "1", ")", "\n", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0.3", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "# bipartite local embedding", "\n", "self", ".", "bipartite_transform", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "emb_dim", ",", "ddi_mask_H", ".", "shape", "[", "1", "]", ")", "\n", ")", "\n", "self", ".", "bipartite_output", "=", "MaskLinear", "(", "\n", "ddi_mask_H", ".", "shape", "[", "1", "]", ",", "voc_size", "[", "2", "]", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_diag.encode": [[938, 987], ["medications.size", "COGNet_ablation.COGNet_wo_diag.diag_embedding().view", "COGNet_ablation.COGNet_wo_diag.proc_embedding().view", "d_mask_matrix.view().unsqueeze().unsqueeze().repeat", "d_enc_mask_matrix.view.view.view", "p_mask_matrix.view().unsqueeze().unsqueeze().repeat", "p_enc_mask_matrix.view.view.view", "COGNet_ablation.COGNet_wo_diag.diagnoses_encoder().view", "COGNet_ablation.COGNet_wo_diag.procedure_encoder().view", "COGNet_ablation.COGNet_wo_diag.diag_self_attend", "COGNet_ablation.COGNet_wo_diag.proc_self_attend", "visit_diag_embedding.view.view.view", "visit_proc_embedding.view.view.view", "COGNet_ablation.COGNet_wo_diag.calc_cross_visit_scores", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "COGNet_ablation.COGNet_wo_diag.med_embedding", "torch.cat.view().unsqueeze().unsqueeze().repeat", "torch.cat.view().unsqueeze().unsqueeze().repeat", "torch.cat.view().unsqueeze().unsqueeze().repeat", "last_m_enc_mask.view.view.view", "COGNet_ablation.COGNet_wo_diag.medication_encoder", "encoded_medication.view.view.view", "COGNet_ablation.COGNet_wo_diag.gcn", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "diseases.size", "procedures.size", "COGNet_ablation.COGNet_wo_diag.view", "d_mask_matrix.view", "COGNet_ablation.COGNet_wo_diag.view", "p_mask_matrix.view", "COGNet_ablation.COGNet_wo_diag.view", "COGNet_ablation.COGNet_wo_diag.diag_embedding", "COGNet_ablation.COGNet_wo_diag.proc_embedding", "d_mask_matrix.view().unsqueeze().unsqueeze", "p_mask_matrix.view().unsqueeze().unsqueeze", "COGNet_ablation.COGNet_wo_diag.diagnoses_encoder", "COGNet_ablation.COGNet_wo_diag.procedure_encoder", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.cat.view().unsqueeze().unsqueeze", "torch.cat.view().unsqueeze().unsqueeze", "torch.cat.view().unsqueeze().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "d_mask_matrix.view().unsqueeze", "p_mask_matrix.view().unsqueeze", "torch.cat.view().unsqueeze", "torch.cat.view().unsqueeze", "torch.cat.view().unsqueeze", "d_mask_matrix.view", "p_mask_matrix.view", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.calc_cross_visit_scores"], ["", "def", "encode", "(", "self", ",", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# batch\u7ef4\u5ea6\u4ee5\u53caseq\u7ef4\u5ea6\u4e0a\u5e76\u884c\u8ba1\u7b97\uff08\u73b0\u5728\u4e0d\u8003\u8651\u65f6\u95f4\u5e8f\u5217\u4fe1\u606f\uff09\uff0c\u6bcf\u4e00\u4e2amedication\u5e8f\u5217\u4ecd\u7136\u6309\u987a\u5e8f\u9884\u6d4b", "\n", "batch_size", ",", "max_visit_num", ",", "max_med_num", "=", "medications", ".", "size", "(", ")", "\n", "max_diag_num", "=", "diseases", ".", "size", "(", ")", "[", "2", "]", "\n", "max_proc_num", "=", "procedures", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "############################ \u6570\u636e\u9884\u5904\u7406 #########################", "\n", "# 1. \u5bf9\u5f53\u524d\u7684disease\u4e0eprocedure\u8fdb\u884c\u7f16\u7801", "\n", "input_disease_embdding", "=", "self", ".", "diag_embedding", "(", "diseases", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "self", ".", "emb_dim", ")", "# [batch, seq, max_diag_num, emb]", "\n", "input_proc_embedding", "=", "self", ".", "proc_embedding", "(", "procedures", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "self", ".", "emb_dim", ")", "# [batch, seq, max_proc_num, emb]", "\n", "d_enc_mask_matrix", "=", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_diag_num", ",", "1", ")", "# [batch*seq, nhead, input_length, output_length]", "\n", "d_enc_mask_matrix", "=", "d_enc_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_diag_num", ",", "max_diag_num", ")", "\n", "p_enc_mask_matrix", "=", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_proc_num", ",", "1", ")", "\n", "p_enc_mask_matrix", "=", "p_enc_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_proc_num", ",", "max_proc_num", ")", "\n", "input_disease_embdding", "=", "self", ".", "diagnoses_encoder", "(", "input_disease_embdding", ",", "src_mask", "=", "d_enc_mask_matrix", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_diag_num", ",", "self", ".", "emb_dim", ")", "\n", "input_proc_embedding", "=", "self", ".", "procedure_encoder", "(", "input_proc_embedding", ",", "src_mask", "=", "p_enc_mask_matrix", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_proc_num", ",", "self", ".", "emb_dim", ")", "\n", "\n", "# 1.1 encode visit-level diag and proc representations", "\n", "visit_diag_embedding", "=", "self", ".", "diag_self_attend", "(", "input_disease_embdding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "-", "1", ")", ",", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "-", "1", ")", ")", "\n", "visit_proc_embedding", "=", "self", ".", "proc_self_attend", "(", "input_proc_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "-", "1", ")", ",", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "-", "1", ")", ")", "\n", "visit_diag_embedding", "=", "visit_diag_embedding", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "-", "1", ")", "\n", "visit_proc_embedding", "=", "visit_proc_embedding", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "-", "1", ")", "\n", "\n", "# 1.3 \u8ba1\u7b97 visit-level\u7684attention score", "\n", "# [batch_size, max_visit_num, max_visit_num]", "\n", "cross_visit_scores", "=", "self", ".", "calc_cross_visit_scores", "(", "visit_diag_embedding", ",", "visit_proc_embedding", ")", "\n", "\n", "\n", "# 3. \u6784\u9020\u4e00\u4e2alast_seq_medication\uff0c\u8868\u793a\u4e0a\u4e00\u6b21visit\u7684medication\uff0c\u7b2c\u4e00\u6b21\u7684\u7531\u4e8e\u6ca1\u6709\u4e0a\u4e00\u6b21medication\uff0c\u75280\u586b\u8865\uff08\u7528\u5565\u586b\u8865\u90fd\u884c\uff0c\u53cd\u6b63\u4e0d\u4f1a\u7528\u5230\uff09", "\n", "last_seq_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ",", "max_med_num", ")", ",", "0", ")", ".", "to", "(", "device", ")", "\n", "last_seq_medication", "=", "torch", ".", "cat", "(", "[", "last_seq_medication", ",", "medications", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "# m_mask_matrix\u77e9\u9635\u540c\u6837\u4e5f\u9700\u8981\u540e\u79fb", "\n", "last_m_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ",", "max_med_num", ")", ",", "-", "1e9", ")", ".", "to", "(", "device", ")", "# \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "last_m_mask", "=", "torch", ".", "cat", "(", "[", "last_m_mask", ",", "m_mask_matrix", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "# \u5bf9last_seq_medication\u8fdb\u884c\u7f16\u7801", "\n", "last_seq_medication_emb", "=", "self", ".", "med_embedding", "(", "last_seq_medication", ")", "\n", "last_m_enc_mask", "=", "last_m_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "last_m_enc_mask", "=", "last_m_enc_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_med_num", ")", "\n", "encoded_medication", "=", "self", ".", "medication_encoder", "(", "last_seq_medication_emb", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "self", ".", "emb_dim", ")", ",", "src_mask", "=", "last_m_enc_mask", ")", "# (batch*seq, max_med_num, emb_dim)", "\n", "encoded_medication", "=", "encoded_medication", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "self", ".", "emb_dim", ")", "\n", "\n", "# vocab_size, emb_size", "\n", "ehr_embedding", ",", "ddi_embedding", "=", "self", ".", "gcn", "(", ")", "\n", "drug_memory", "=", "ehr_embedding", "-", "ddi_embedding", "*", "self", ".", "inter", "\n", "drug_memory_padding", "=", "torch", ".", "zeros", "(", "(", "3", ",", "self", ".", "emb_dim", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "drug_memory", "=", "torch", ".", "cat", "(", "[", "drug_memory", ",", "drug_memory_padding", "]", ",", "dim", "=", "0", ")", "\n", "\n", "return", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "cross_visit_scores", ",", "last_seq_medication", ",", "last_m_mask", ",", "drug_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_diag.decode": [[988, 1038], ["input_medications.size", "input_medications.size", "input_medications.size", "input_disease_embedding.size", "input_proc_embedding.size", "COGNet_ablation.COGNet_wo_diag.med_embedding().view", "drug_memory[].view", "COGNet_ablation.COGNet_wo_diag.view().unsqueeze().unsqueeze().repeat", "COGNet_ablation.COGNet_wo_diag.view", "d_mask_matrix.view().unsqueeze().unsqueeze().repeat", "m2d_mask_matrix.view.view.view", "p_mask_matrix.view().unsqueeze().unsqueeze().repeat", "m2p_mask_matrix.view.view.view", "COGNet_ablation.COGNet_wo_diag.decoder", "COGNet_ablation.COGNet_wo_diag.Wo", "score_g.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "COGNet_ablation.COGNet_wo_diag.copy_med", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "last_medications.view().repeat", "prob_c_to_g.view.view.scatter_add_", "prob_c_to_g.view.view.view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "COGNet_ablation.COGNet_wo_diag.view", "COGNet_ablation.COGNet_wo_diag.med_embedding", "COGNet_ablation.COGNet_wo_diag.view().unsqueeze().unsqueeze", "d_mask_matrix.view().unsqueeze().unsqueeze", "p_mask_matrix.view().unsqueeze().unsqueeze", "input_disease_embedding.view", "input_proc_embedding.view", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "last_medications.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "COGNet_ablation.COGNet_wo_diag.W_z", "COGNet_ablation.COGNet_wo_diag.view().unsqueeze", "d_mask_matrix.view().unsqueeze", "p_mask_matrix.view().unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "COGNet_ablation.COGNet_wo_diag.view", "d_mask_matrix.view", "p_mask_matrix.view"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.copy_med"], ["", "def", "decode", "(", "self", ",", "input_medications", ",", "input_disease_embedding", ",", "input_proc_embedding", ",", "last_medication_embedding", ",", "last_medications", ",", "cross_visit_scores", ",", "\n", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "last_m_mask", ",", "drug_memory", ")", ":", "\n", "        ", "\"\"\"\n        input_medications: [batch_size, max_visit_num, max_med_num + 1], \u5f00\u5934\u5305\u542b\u4e86 SOS_TOKEN\n        \"\"\"", "\n", "batch_size", "=", "input_medications", ".", "size", "(", "0", ")", "\n", "max_visit_num", "=", "input_medications", ".", "size", "(", "1", ")", "\n", "max_med_num", "=", "input_medications", ".", "size", "(", "2", ")", "\n", "max_diag_num", "=", "input_disease_embedding", ".", "size", "(", "2", ")", "\n", "max_proc_num", "=", "input_proc_embedding", ".", "size", "(", "2", ")", "\n", "\n", "input_medication_embs", "=", "self", ".", "med_embedding", "(", "input_medications", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "# input_medication_embs = self.dropout_emb(input_medication_embs)", "\n", "input_medication_memory", "=", "drug_memory", "[", "input_medications", "]", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "\n", "# m_sos_mask = torch.zeros((batch_size, max_visit_num, 1), device=self.device).float() # \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "m_self_mask", "=", "m_mask_matrix", "\n", "\n", "last_m_enc_mask", "=", "m_self_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "medication_self_mask", "=", "last_m_enc_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_med_num", ")", "\n", "m2d_mask_matrix", "=", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "m2d_mask_matrix", "=", "m2d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_diag_num", ")", "\n", "m2p_mask_matrix", "=", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "m2p_mask_matrix", "=", "m2p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_proc_num", ")", "\n", "\n", "dec_hidden", "=", "self", ".", "decoder", "(", "input_medication_embedding", "=", "input_medication_embs", ",", "input_medication_memory", "=", "input_medication_memory", ",", "\n", "input_disease_embdding", "=", "input_disease_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "-", "1", ")", ",", "\n", "input_proc_embedding", "=", "input_proc_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "-", "1", ")", ",", "\n", "input_medication_self_mask", "=", "medication_self_mask", ",", "\n", "d_mask", "=", "m2d_mask_matrix", ",", "\n", "p_mask", "=", "m2p_mask_matrix", ")", "\n", "\n", "score_g", "=", "self", ".", "Wo", "(", "dec_hidden", ")", "# (batch * max_visit_num, max_med_num, voc_size[2]+2)", "\n", "score_g", "=", "score_g", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "prob_g", "=", "F", ".", "softmax", "(", "score_g", ",", "dim", "=", "-", "1", ")", "\n", "\n", "score_c", "=", "self", ".", "copy_med", "(", "dec_hidden", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", ",", "last_medication_embedding", ",", "last_m_mask", ",", "cross_visit_scores", ")", "\n", "prob_c_to_g", "=", "torch", ".", "zeros_like", "(", "prob_g", ")", ".", "to", "(", "self", ".", "device", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", "*", "max_med_num", ",", "-", "1", ")", "# (batch, max_visit_num * input_med_num, voc_size[2]+2)", "\n", "\n", "# \u7528scatter\u64cd\u4f5c\u4ee3\u66ff\u5d4c\u5957\u5faa\u73af", "\n", "# \u6839\u636elast_seq_medication\u4e2d\u7684indice\uff0c\u5c06score_c\u4e2d\u7684\u503c\u52a0\u5230score_c_to_g\u4e2d\u53bb", "\n", "copy_source", "=", "last_medications", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "max_visit_num", "*", "max_med_num", ",", "1", ")", "\n", "prob_c_to_g", ".", "scatter_add_", "(", "2", ",", "copy_source", ",", "score_c", ")", "\n", "prob_c_to_g", "=", "prob_c_to_g", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "\n", "generate_prob", "=", "F", ".", "sigmoid", "(", "self", ".", "W_z", "(", "dec_hidden", ")", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "1", ")", "\n", "prob", "=", "prob_g", "*", "generate_prob", "+", "prob_c_to_g", "*", "(", "1.", "-", "generate_prob", ")", "\n", "prob", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "prob_g", "[", ":", ",", "0", ",", ":", ",", ":", "]", "# \u7b2c\u4e00\u4e2aseq\u7531\u4e8e\u6ca1\u6709last_medication\u4fe1\u606f\uff0c\u4ec5\u53d6prob_g\u7684\u6982\u7387", "\n", "\n", "return", "torch", ".", "log", "(", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_diag.forward": [[1040, 1069], ["medications.size", "COGNet_ablation.COGNet_wo_diag.encode", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "COGNet_ablation.COGNet_wo_diag.decode", "diseases.size", "procedures.size", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.encode", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.decode"], ["", "def", "forward", "(", "self", ",", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# batch\u7ef4\u5ea6\u4ee5\u53caseq\u7ef4\u5ea6\u4e0a\u5e76\u884c\u8ba1\u7b97\uff08\u73b0\u5728\u4e0d\u8003\u8651\u65f6\u95f4\u5e8f\u5217\u4fe1\u606f\uff09\uff0c\u6bcf\u4e00\u4e2amedication\u5e8f\u5217\u4ecd\u7136\u6309\u987a\u5e8f\u9884\u6d4b", "\n", "batch_size", ",", "max_seq_length", ",", "max_med_num", "=", "medications", ".", "size", "(", ")", "\n", "max_diag_num", "=", "diseases", ".", "size", "(", ")", "[", "2", "]", "\n", "max_proc_num", "=", "procedures", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "cross_visit_scores", ",", "last_seq_medication", ",", "last_m_mask", ",", "drug_memory", "=", "self", ".", "encode", "(", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "\n", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", "\n", "\n", "# 4. \u6784\u9020\u7ed9decoder\u7684medications\uff0c\u7528\u4e8edecoding\u8fc7\u7a0b\u4e2d\u7684teacher forcing\uff0c\u6ce8\u610f\u7ef4\u5ea6\u4e0a\u589e\u52a0\u4e86\u4e00\u7ef4\uff0c\u56e0\u4e3a\u4f1a\u591a\u751f\u6210\u4e00\u4e2aEND_TOKEN", "\n", "input_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq_length", ",", "1", ")", ",", "self", ".", "SOS_TOKEN", ")", ".", "to", "(", "device", ")", "# [batch_size, seq, 1]", "\n", "input_medication", "=", "torch", ".", "cat", "(", "[", "input_medication", ",", "medications", "]", ",", "dim", "=", "2", ")", "# [batch_size, seq, max_med_num + 1]", "\n", "\n", "m_sos_mask", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "max_seq_length", ",", "1", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "# \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "m_mask_matrix", "=", "torch", ".", "cat", "(", "[", "m_sos_mask", ",", "m_mask_matrix", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "output_logits", "=", "self", ".", "decode", "(", "input_medication", ",", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "last_seq_medication", ",", "cross_visit_scores", ",", "\n", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "last_m_mask", ",", "drug_memory", ")", "\n", "\n", "# 5. \u52a0\u5165ddi loss", "\n", "# output_logits_part = torch.exp(output_logits[:, :, :, :-2] + m_mask_matrix.unsqueeze(-1))    # \u53bb\u6389SOS\u4e0eEOS", "\n", "# output_logits_part = torch.mean(output_logits_part, dim=2)", "\n", "# neg_pred_prob1 = output_logits_part.unsqueeze(-1)", "\n", "# neg_pred_prob2 = output_logits_part.unsqueeze(-2)", "\n", "# neg_pred_prob = neg_pred_prob1 * neg_pred_prob2 # bach * seq * max_med_num * all_med_num * all_med_num", "\n", "# batch_neg = 0.0005 * neg_pred_prob.mul(self.tensor_ddi_adj).sum()", "\n", "# return output_logits, batch_neg", "\n", "return", "output_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_diag.calc_cross_visit_scores": [[1070, 1098], ["visit_diag_embedding.size", "visit_diag_embedding.size", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "visit_diag_embedding.size", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "visit_proc_embedding.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.unsqueeze().repeat.unsqueeze().repeat.float"], "methods", ["None"], ["", "def", "calc_cross_visit_scores", "(", "self", ",", "visit_diag_embedding", ",", "visit_proc_embedding", ")", ":", "\n", "        ", "\"\"\"\n        visit_diag_embedding: (batch * visit_num * emb)\n        visit_proc_embedding: (batch * visit_num * emb)\n        \"\"\"", "\n", "max_visit_num", "=", "visit_diag_embedding", ".", "size", "(", "1", ")", "\n", "batch_size", "=", "visit_diag_embedding", ".", "size", "(", "0", ")", "\n", "\n", "# mask\u8868\u793a\u6bcf\u4e2avisit\u53ea\u80fd\u770b\u5230\u81ea\u5df1\u4e4b\u524d\u7684visit", "\n", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "(", "max_visit_num", ",", "max_visit_num", ")", ",", "device", "=", "self", ".", "device", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "# \u4e0b\u4e09\u89d2\u77e9\u9635", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "# batch * max_visit_num * max_visit_num", "\n", "\n", "# \u6bcf\u4e2avisit\u540e\u79fb\u4e00\u4f4d", "\n", "padding", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "1", ",", "self", ".", "emb_dim", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "diag_keys", "=", "torch", ".", "cat", "(", "[", "padding", ",", "visit_diag_embedding", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "# batch * max_visit_num * emb", "\n", "proc_keys", "=", "torch", ".", "cat", "(", "[", "padding", ",", "visit_proc_embedding", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# \u5f97\u5230\u6bcf\u4e2avisit\u8ddf\u81ea\u5df1\u524d\u9762\u6240\u6709visit\u7684score", "\n", "diag_scores", "=", "torch", ".", "matmul", "(", "visit_diag_embedding", ",", "diag_keys", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "visit_diag_embedding", ".", "size", "(", "-", "1", ")", ")", "\n", "proc_scores", "=", "torch", ".", "matmul", "(", "visit_proc_embedding", ",", "proc_keys", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "visit_proc_embedding", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "# 1st visit's scores is not zero!", "\n", "# scores = F.softmax(diag_scores + proc_scores + mask, dim=-1)", "\n", "scores", "=", "F", ".", "softmax", "(", "proc_scores", "+", "mask", ",", "dim", "=", "-", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_diag.copy_med": [[1099, 1126], ["decode_input_hiddens.size", "decode_input_hiddens.size", "last_medications.size", "COGNet_ablation.COGNet_wo_diag.Wc().view", "last_m_mask.view().repeat", "torch.softmax", "torch.softmax", "torch.softmax", "cross_visit_scores.repeat().view", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat().view", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp.sum", "torch.mul().clamp.sum", "torch.mul().clamp.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "COGNet_ablation.COGNet_wo_diag.Wc", "last_medications.view().transpose", "last_m_mask.view", "cross_visit_scores.repeat", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "last_medications.view", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "copy_med", "(", "self", ",", "decode_input_hiddens", ",", "last_medications", ",", "last_m_mask", ",", "cross_visit_scores", ")", ":", "\n", "        ", "\"\"\"\n        decode_input_hiddens: [batch_size, max_visit_num, input_med_num, emb_size]\n        last_medications: [batch_size, max_visit_num, max_med_num, emb_size]\n        last_m_mask: [batch_size, max_visit_num, max_med_num]\n        cross_visit_scores: [batch_size, max_visit_num, max_visit_num]\n        \"\"\"", "\n", "max_visit_num", "=", "decode_input_hiddens", ".", "size", "(", "1", ")", "\n", "input_med_num", "=", "decode_input_hiddens", ".", "size", "(", "2", ")", "\n", "max_med_num", "=", "last_medications", ".", "size", "(", "2", ")", "\n", "copy_query", "=", "self", ".", "Wc", "(", "decode_input_hiddens", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "self", ".", "emb_dim", ")", "\n", "attn_scores", "=", "torch", ".", "matmul", "(", "copy_query", ",", "last_medications", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "max_med_num", ",", "self", ".", "emb_dim", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "self", ".", "emb_dim", ")", "\n", "med_mask", "=", "last_m_mask", ".", "view", "(", "-", "1", ",", "1", ",", "max_visit_num", "*", "max_med_num", ")", ".", "repeat", "(", "1", ",", "max_visit_num", "*", "input_med_num", ",", "1", ")", "\n", "\n", "# [batch_size, max_vist_num * input_med_num, max_visit_num * max_med_num]", "\n", "attn_scores", "=", "F", ".", "softmax", "(", "attn_scores", "+", "med_mask", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# (batch_size, max_visit_num * input_med_num, max_visit_num)", "\n", "visit_scores", "=", "cross_visit_scores", ".", "repeat", "(", "1", ",", "1", ",", "input_med_num", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "max_visit_num", ")", "\n", "# (batch_size, max_visit_num * input_med_num, max_visit_num * max_med_num)", "\n", "visit_scores", "=", "visit_scores", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "max_med_num", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "max_visit_num", "*", "max_med_num", ")", "\n", "\n", "scores", "=", "torch", ".", "mul", "(", "attn_scores", ",", "visit_scores", ")", ".", "clamp", "(", "min", "=", "1e-9", ")", "\n", "row_scores", "=", "scores", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "scores", "=", "scores", "/", "row_scores", "# (batch_size, max_visit_num * input_med_num, max_visit_num * max_med_num)", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_proc.__init__": [[1130, 1223], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "COGNet_ablation.GCN", "torch.Parameter", "torch.Parameter", "torch.Parameter", "layers.SelfAttend", "layers.SelfAttend", "COGNet_ablation.MedTransformerDecoder_wo_proc", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "COGNet_ablation.MaskLinear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Linear", "torch.Linear", "torch.Linear", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["def", "__init__", "(", "self", ",", "voc_size", ",", "ehr_adj", ",", "ddi_adj", ",", "ddi_mask_H", ",", "emb_dim", "=", "64", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "COGNet_wo_proc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "voc_size", "=", "voc_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "nhead", "=", "2", "\n", "self", ".", "SOS_TOKEN", "=", "voc_size", "[", "2", "]", "# start of sentence", "\n", "self", ".", "END_TOKEN", "=", "voc_size", "[", "2", "]", "+", "1", "# end   \u65b0\u589e\u7684\u4e24\u4e2a\u7f16\u7801\uff0c\u4e24\u8005\u5747\u662f\u9488\u5bf9\u4e8e\u836f\u7269\u7684embedding", "\n", "self", ".", "MED_PAD_TOKEN", "=", "voc_size", "[", "2", "]", "+", "2", "# \u7528\u4e8eembedding\u77e9\u9635\u4e2d\u7684padding\uff08\u5168\u4e3a0\uff09", "\n", "self", ".", "DIAG_PAD_TOKEN", "=", "voc_size", "[", "0", "]", "+", "2", "\n", "self", ".", "PROC_PAD_TOKEN", "=", "voc_size", "[", "1", "]", "+", "2", "\n", "\n", "self", ".", "tensor_ddi_mask_H", "=", "torch", ".", "FloatTensor", "(", "ddi_mask_H", ")", ".", "to", "(", "device", ")", "\n", "\n", "# dig_num * emb_dim", "\n", "self", ".", "diag_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "0", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "DIAG_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# proc_num * emb_dim", "\n", "self", ".", "proc_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "1", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "PROC_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# med_num * emb_dim", "\n", "self", ".", "med_embedding", "=", "nn", ".", "Sequential", "(", "\n", "# \u6dfb\u52a0padding_idx\uff0c\u8868\u793a\u53d60\u5411\u91cf", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "2", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "MED_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# \u7528\u4e8e\u5bf9\u4e0a\u4e00\u4e2avisit\u7684medication\u8fdb\u884c\u7f16\u7801", "\n", "# self.medication_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)", "\n", "self", ".", "medication_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "# \u7528\u4e8e\u5bf9\u5f53\u524dvisit\u7684\u75be\u75c5\u4e0e\u75c7\u72b6\u8fdb\u884c\u7f16\u7801", "\n", "# self.diagnoses_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)", "\n", "# self.procedure_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)        ", "\n", "self", ".", "diagnoses_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "self", ".", "procedure_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "# self.enc_gru = nn.GRU(emb_dim, emb_dim, batch_first=True, bidirectional=True)", "\n", "\n", "# self.ehr_gcn = GCN(", "\n", "#     voc_size=voc_size[2], emb_dim=emb_dim, adj=ehr_adj, device=device)", "\n", "# self.ddi_gcn = GCN(", "\n", "#     voc_size=voc_size[2], emb_dim=emb_dim, adj=ddi_adj, device=device)", "\n", "self", ".", "tensor_ddi_adj", "=", "torch", ".", "FloatTensor", "(", "ddi_adj", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "gcn", "=", "GCN", "(", "voc_size", "=", "voc_size", "[", "2", "]", ",", "emb_dim", "=", "emb_dim", ",", "ehr_adj", "=", "ehr_adj", ",", "ddi_adj", "=", "ddi_adj", ",", "device", "=", "device", ")", "\n", "self", ".", "inter", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ")", "\n", "\n", "# \u805a\u5408\u5355\u4e2avisit\u5185\u7684diag\u548cproc\u5f97\u5230visit-level\u7684\u8868\u8fbe", "\n", "self", ".", "diag_self_attend", "=", "SelfAttend", "(", "emb_dim", ")", "\n", "self", ".", "proc_self_attend", "=", "SelfAttend", "(", "emb_dim", ")", "\n", "\n", "self", ".", "decoder", "=", "MedTransformerDecoder_wo_proc", "(", "emb_dim", ",", "self", ".", "nhead", ",", "dim_feedforward", "=", "emb_dim", "*", "2", ",", "dropout", "=", "0.2", ",", "\n", "layer_norm_eps", "=", "1e-5", ")", "\n", "\n", "# \u7528\u4e8e\u5bf9\u6bcf\u4e00\u4e2avisit\u7684diagnoses\u8fdb\u884c\u7f16\u7801", "\n", "\n", "# \u7528\u4e8e\u751f\u6210\u836f\u7269\u5e8f\u5217", "\n", "self", ".", "dec_gru", "=", "nn", ".", "GRU", "(", "emb_dim", "*", "3", ",", "emb_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "diag_attn", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "W_diag_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_diff_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_diff_proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n", "# weights", "\n", "self", ".", "Ws", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "emb_dim", ")", "# only used at initial stage", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "voc_size", "[", "2", "]", "+", "2", ")", "# generate mode", "\n", "# self.Wc = nn.Linear(emb_dim*2, emb_dim)  # copy mode", "\n", "self", ".", "Wc", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "# copy mode", "\n", "\n", "self", ".", "W_dec", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_stay", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_dec", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_stay", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n", "# swtich network to calculate generate probablity", "\n", "self", ".", "W_z", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "1", ")", "\n", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0.3", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "# bipartite local embedding", "\n", "self", ".", "bipartite_transform", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "emb_dim", ",", "ddi_mask_H", ".", "shape", "[", "1", "]", ")", "\n", ")", "\n", "self", ".", "bipartite_output", "=", "MaskLinear", "(", "\n", "ddi_mask_H", ".", "shape", "[", "1", "]", ",", "voc_size", "[", "2", "]", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_proc.encode": [[1224, 1273], ["medications.size", "COGNet_ablation.COGNet_wo_proc.diag_embedding().view", "COGNet_ablation.COGNet_wo_proc.proc_embedding().view", "d_mask_matrix.view().unsqueeze().unsqueeze().repeat", "d_enc_mask_matrix.view.view.view", "p_mask_matrix.view().unsqueeze().unsqueeze().repeat", "p_enc_mask_matrix.view.view.view", "COGNet_ablation.COGNet_wo_proc.diagnoses_encoder().view", "COGNet_ablation.COGNet_wo_proc.procedure_encoder().view", "COGNet_ablation.COGNet_wo_proc.diag_self_attend", "COGNet_ablation.COGNet_wo_proc.proc_self_attend", "visit_diag_embedding.view.view.view", "visit_proc_embedding.view.view.view", "COGNet_ablation.COGNet_wo_proc.calc_cross_visit_scores", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "COGNet_ablation.COGNet_wo_proc.med_embedding", "torch.cat.view().unsqueeze().unsqueeze().repeat", "torch.cat.view().unsqueeze().unsqueeze().repeat", "torch.cat.view().unsqueeze().unsqueeze().repeat", "last_m_enc_mask.view.view.view", "COGNet_ablation.COGNet_wo_proc.medication_encoder", "encoded_medication.view.view.view", "COGNet_ablation.COGNet_wo_proc.gcn", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "diseases.size", "procedures.size", "COGNet_ablation.COGNet_wo_proc.view", "d_mask_matrix.view", "COGNet_ablation.COGNet_wo_proc.view", "p_mask_matrix.view", "COGNet_ablation.COGNet_wo_proc.view", "COGNet_ablation.COGNet_wo_proc.diag_embedding", "COGNet_ablation.COGNet_wo_proc.proc_embedding", "d_mask_matrix.view().unsqueeze().unsqueeze", "p_mask_matrix.view().unsqueeze().unsqueeze", "COGNet_ablation.COGNet_wo_proc.diagnoses_encoder", "COGNet_ablation.COGNet_wo_proc.procedure_encoder", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.cat.view().unsqueeze().unsqueeze", "torch.cat.view().unsqueeze().unsqueeze", "torch.cat.view().unsqueeze().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "d_mask_matrix.view().unsqueeze", "p_mask_matrix.view().unsqueeze", "torch.cat.view().unsqueeze", "torch.cat.view().unsqueeze", "torch.cat.view().unsqueeze", "d_mask_matrix.view", "p_mask_matrix.view", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.calc_cross_visit_scores"], ["", "def", "encode", "(", "self", ",", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# batch\u7ef4\u5ea6\u4ee5\u53caseq\u7ef4\u5ea6\u4e0a\u5e76\u884c\u8ba1\u7b97\uff08\u73b0\u5728\u4e0d\u8003\u8651\u65f6\u95f4\u5e8f\u5217\u4fe1\u606f\uff09\uff0c\u6bcf\u4e00\u4e2amedication\u5e8f\u5217\u4ecd\u7136\u6309\u987a\u5e8f\u9884\u6d4b", "\n", "batch_size", ",", "max_visit_num", ",", "max_med_num", "=", "medications", ".", "size", "(", ")", "\n", "max_diag_num", "=", "diseases", ".", "size", "(", ")", "[", "2", "]", "\n", "max_proc_num", "=", "procedures", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "############################ \u6570\u636e\u9884\u5904\u7406 #########################", "\n", "# 1. \u5bf9\u5f53\u524d\u7684disease\u4e0eprocedure\u8fdb\u884c\u7f16\u7801", "\n", "input_disease_embdding", "=", "self", ".", "diag_embedding", "(", "diseases", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "self", ".", "emb_dim", ")", "# [batch, seq, max_diag_num, emb]", "\n", "input_proc_embedding", "=", "self", ".", "proc_embedding", "(", "procedures", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "self", ".", "emb_dim", ")", "# [batch, seq, max_proc_num, emb]", "\n", "d_enc_mask_matrix", "=", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_diag_num", ",", "1", ")", "# [batch*seq, nhead, input_length, output_length]", "\n", "d_enc_mask_matrix", "=", "d_enc_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_diag_num", ",", "max_diag_num", ")", "\n", "p_enc_mask_matrix", "=", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_proc_num", ",", "1", ")", "\n", "p_enc_mask_matrix", "=", "p_enc_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_proc_num", ",", "max_proc_num", ")", "\n", "input_disease_embdding", "=", "self", ".", "diagnoses_encoder", "(", "input_disease_embdding", ",", "src_mask", "=", "d_enc_mask_matrix", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_diag_num", ",", "self", ".", "emb_dim", ")", "\n", "input_proc_embedding", "=", "self", ".", "procedure_encoder", "(", "input_proc_embedding", ",", "src_mask", "=", "p_enc_mask_matrix", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_proc_num", ",", "self", ".", "emb_dim", ")", "\n", "\n", "# 1.1 encode visit-level diag and proc representations", "\n", "visit_diag_embedding", "=", "self", ".", "diag_self_attend", "(", "input_disease_embdding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "-", "1", ")", ",", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "-", "1", ")", ")", "\n", "visit_proc_embedding", "=", "self", ".", "proc_self_attend", "(", "input_proc_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "-", "1", ")", ",", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "-", "1", ")", ")", "\n", "visit_diag_embedding", "=", "visit_diag_embedding", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "-", "1", ")", "\n", "visit_proc_embedding", "=", "visit_proc_embedding", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "-", "1", ")", "\n", "\n", "# 1.3 \u8ba1\u7b97 visit-level\u7684attention score", "\n", "# [batch_size, max_visit_num, max_visit_num]", "\n", "cross_visit_scores", "=", "self", ".", "calc_cross_visit_scores", "(", "visit_diag_embedding", ",", "visit_proc_embedding", ")", "\n", "\n", "\n", "# 3. \u6784\u9020\u4e00\u4e2alast_seq_medication\uff0c\u8868\u793a\u4e0a\u4e00\u6b21visit\u7684medication\uff0c\u7b2c\u4e00\u6b21\u7684\u7531\u4e8e\u6ca1\u6709\u4e0a\u4e00\u6b21medication\uff0c\u75280\u586b\u8865\uff08\u7528\u5565\u586b\u8865\u90fd\u884c\uff0c\u53cd\u6b63\u4e0d\u4f1a\u7528\u5230\uff09", "\n", "last_seq_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ",", "max_med_num", ")", ",", "0", ")", ".", "to", "(", "device", ")", "\n", "last_seq_medication", "=", "torch", ".", "cat", "(", "[", "last_seq_medication", ",", "medications", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "# m_mask_matrix\u77e9\u9635\u540c\u6837\u4e5f\u9700\u8981\u540e\u79fb", "\n", "last_m_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ",", "max_med_num", ")", ",", "-", "1e9", ")", ".", "to", "(", "device", ")", "# \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "last_m_mask", "=", "torch", ".", "cat", "(", "[", "last_m_mask", ",", "m_mask_matrix", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "# \u5bf9last_seq_medication\u8fdb\u884c\u7f16\u7801", "\n", "last_seq_medication_emb", "=", "self", ".", "med_embedding", "(", "last_seq_medication", ")", "\n", "last_m_enc_mask", "=", "last_m_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "last_m_enc_mask", "=", "last_m_enc_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_med_num", ")", "\n", "encoded_medication", "=", "self", ".", "medication_encoder", "(", "last_seq_medication_emb", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "self", ".", "emb_dim", ")", ",", "src_mask", "=", "last_m_enc_mask", ")", "# (batch*seq, max_med_num, emb_dim)", "\n", "encoded_medication", "=", "encoded_medication", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "self", ".", "emb_dim", ")", "\n", "\n", "# vocab_size, emb_size", "\n", "ehr_embedding", ",", "ddi_embedding", "=", "self", ".", "gcn", "(", ")", "\n", "drug_memory", "=", "ehr_embedding", "-", "ddi_embedding", "*", "self", ".", "inter", "\n", "drug_memory_padding", "=", "torch", ".", "zeros", "(", "(", "3", ",", "self", ".", "emb_dim", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "drug_memory", "=", "torch", ".", "cat", "(", "[", "drug_memory", ",", "drug_memory_padding", "]", ",", "dim", "=", "0", ")", "\n", "\n", "return", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "cross_visit_scores", ",", "last_seq_medication", ",", "last_m_mask", ",", "drug_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_proc.decode": [[1274, 1324], ["input_medications.size", "input_medications.size", "input_medications.size", "input_disease_embedding.size", "input_proc_embedding.size", "COGNet_ablation.COGNet_wo_proc.med_embedding().view", "drug_memory[].view", "COGNet_ablation.COGNet_wo_proc.view().unsqueeze().unsqueeze().repeat", "COGNet_ablation.COGNet_wo_proc.view", "d_mask_matrix.view().unsqueeze().unsqueeze().repeat", "m2d_mask_matrix.view.view.view", "p_mask_matrix.view().unsqueeze().unsqueeze().repeat", "m2p_mask_matrix.view.view.view", "COGNet_ablation.COGNet_wo_proc.decoder", "COGNet_ablation.COGNet_wo_proc.Wo", "score_g.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "COGNet_ablation.COGNet_wo_proc.copy_med", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "last_medications.view().repeat", "prob_c_to_g.view.view.scatter_add_", "prob_c_to_g.view.view.view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "COGNet_ablation.COGNet_wo_proc.view", "COGNet_ablation.COGNet_wo_proc.med_embedding", "COGNet_ablation.COGNet_wo_proc.view().unsqueeze().unsqueeze", "d_mask_matrix.view().unsqueeze().unsqueeze", "p_mask_matrix.view().unsqueeze().unsqueeze", "input_disease_embedding.view", "input_proc_embedding.view", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "last_medications.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "COGNet_ablation.COGNet_wo_proc.W_z", "COGNet_ablation.COGNet_wo_proc.view().unsqueeze", "d_mask_matrix.view().unsqueeze", "p_mask_matrix.view().unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "COGNet_ablation.COGNet_wo_proc.view", "d_mask_matrix.view", "p_mask_matrix.view"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.copy_med"], ["", "def", "decode", "(", "self", ",", "input_medications", ",", "input_disease_embedding", ",", "input_proc_embedding", ",", "last_medication_embedding", ",", "last_medications", ",", "cross_visit_scores", ",", "\n", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "last_m_mask", ",", "drug_memory", ")", ":", "\n", "        ", "\"\"\"\n        input_medications: [batch_size, max_visit_num, max_med_num + 1], \u5f00\u5934\u5305\u542b\u4e86 SOS_TOKEN\n        \"\"\"", "\n", "batch_size", "=", "input_medications", ".", "size", "(", "0", ")", "\n", "max_visit_num", "=", "input_medications", ".", "size", "(", "1", ")", "\n", "max_med_num", "=", "input_medications", ".", "size", "(", "2", ")", "\n", "max_diag_num", "=", "input_disease_embedding", ".", "size", "(", "2", ")", "\n", "max_proc_num", "=", "input_proc_embedding", ".", "size", "(", "2", ")", "\n", "\n", "input_medication_embs", "=", "self", ".", "med_embedding", "(", "input_medications", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "# input_medication_embs = self.dropout_emb(input_medication_embs)", "\n", "input_medication_memory", "=", "drug_memory", "[", "input_medications", "]", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "\n", "# m_sos_mask = torch.zeros((batch_size, max_visit_num, 1), device=self.device).float() # \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "m_self_mask", "=", "m_mask_matrix", "\n", "\n", "last_m_enc_mask", "=", "m_self_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "medication_self_mask", "=", "last_m_enc_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_med_num", ")", "\n", "m2d_mask_matrix", "=", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "m2d_mask_matrix", "=", "m2d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_diag_num", ")", "\n", "m2p_mask_matrix", "=", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "m2p_mask_matrix", "=", "m2p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_proc_num", ")", "\n", "\n", "dec_hidden", "=", "self", ".", "decoder", "(", "input_medication_embedding", "=", "input_medication_embs", ",", "input_medication_memory", "=", "input_medication_memory", ",", "\n", "input_disease_embdding", "=", "input_disease_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "-", "1", ")", ",", "\n", "input_proc_embedding", "=", "input_proc_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "-", "1", ")", ",", "\n", "input_medication_self_mask", "=", "medication_self_mask", ",", "\n", "d_mask", "=", "m2d_mask_matrix", ",", "\n", "p_mask", "=", "m2p_mask_matrix", ")", "\n", "\n", "score_g", "=", "self", ".", "Wo", "(", "dec_hidden", ")", "# (batch * max_visit_num, max_med_num, voc_size[2]+2)", "\n", "score_g", "=", "score_g", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "prob_g", "=", "F", ".", "softmax", "(", "score_g", ",", "dim", "=", "-", "1", ")", "\n", "\n", "score_c", "=", "self", ".", "copy_med", "(", "dec_hidden", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", ",", "last_medication_embedding", ",", "last_m_mask", ",", "cross_visit_scores", ")", "\n", "prob_c_to_g", "=", "torch", ".", "zeros_like", "(", "prob_g", ")", ".", "to", "(", "self", ".", "device", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", "*", "max_med_num", ",", "-", "1", ")", "# (batch, max_visit_num * input_med_num, voc_size[2]+2)", "\n", "\n", "# \u7528scatter\u64cd\u4f5c\u4ee3\u66ff\u5d4c\u5957\u5faa\u73af", "\n", "# \u6839\u636elast_seq_medication\u4e2d\u7684indice\uff0c\u5c06score_c\u4e2d\u7684\u503c\u52a0\u5230score_c_to_g\u4e2d\u53bb", "\n", "copy_source", "=", "last_medications", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "max_visit_num", "*", "max_med_num", ",", "1", ")", "\n", "prob_c_to_g", ".", "scatter_add_", "(", "2", ",", "copy_source", ",", "score_c", ")", "\n", "prob_c_to_g", "=", "prob_c_to_g", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "\n", "generate_prob", "=", "F", ".", "sigmoid", "(", "self", ".", "W_z", "(", "dec_hidden", ")", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "1", ")", "\n", "prob", "=", "prob_g", "*", "generate_prob", "+", "prob_c_to_g", "*", "(", "1.", "-", "generate_prob", ")", "\n", "prob", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "prob_g", "[", ":", ",", "0", ",", ":", ",", ":", "]", "# \u7b2c\u4e00\u4e2aseq\u7531\u4e8e\u6ca1\u6709last_medication\u4fe1\u606f\uff0c\u4ec5\u53d6prob_g\u7684\u6982\u7387", "\n", "\n", "return", "torch", ".", "log", "(", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_proc.forward": [[1326, 1355], ["medications.size", "COGNet_ablation.COGNet_wo_proc.encode", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "COGNet_ablation.COGNet_wo_proc.decode", "diseases.size", "procedures.size", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.encode", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.decode"], ["", "def", "forward", "(", "self", ",", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# batch\u7ef4\u5ea6\u4ee5\u53caseq\u7ef4\u5ea6\u4e0a\u5e76\u884c\u8ba1\u7b97\uff08\u73b0\u5728\u4e0d\u8003\u8651\u65f6\u95f4\u5e8f\u5217\u4fe1\u606f\uff09\uff0c\u6bcf\u4e00\u4e2amedication\u5e8f\u5217\u4ecd\u7136\u6309\u987a\u5e8f\u9884\u6d4b", "\n", "batch_size", ",", "max_seq_length", ",", "max_med_num", "=", "medications", ".", "size", "(", ")", "\n", "max_diag_num", "=", "diseases", ".", "size", "(", ")", "[", "2", "]", "\n", "max_proc_num", "=", "procedures", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "cross_visit_scores", ",", "last_seq_medication", ",", "last_m_mask", ",", "drug_memory", "=", "self", ".", "encode", "(", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "\n", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", "\n", "\n", "# 4. \u6784\u9020\u7ed9decoder\u7684medications\uff0c\u7528\u4e8edecoding\u8fc7\u7a0b\u4e2d\u7684teacher forcing\uff0c\u6ce8\u610f\u7ef4\u5ea6\u4e0a\u589e\u52a0\u4e86\u4e00\u7ef4\uff0c\u56e0\u4e3a\u4f1a\u591a\u751f\u6210\u4e00\u4e2aEND_TOKEN", "\n", "input_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq_length", ",", "1", ")", ",", "self", ".", "SOS_TOKEN", ")", ".", "to", "(", "device", ")", "# [batch_size, seq, 1]", "\n", "input_medication", "=", "torch", ".", "cat", "(", "[", "input_medication", ",", "medications", "]", ",", "dim", "=", "2", ")", "# [batch_size, seq, max_med_num + 1]", "\n", "\n", "m_sos_mask", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "max_seq_length", ",", "1", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "# \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "m_mask_matrix", "=", "torch", ".", "cat", "(", "[", "m_sos_mask", ",", "m_mask_matrix", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "output_logits", "=", "self", ".", "decode", "(", "input_medication", ",", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "last_seq_medication", ",", "cross_visit_scores", ",", "\n", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "last_m_mask", ",", "drug_memory", ")", "\n", "\n", "# 5. \u52a0\u5165ddi loss", "\n", "# output_logits_part = torch.exp(output_logits[:, :, :, :-2] + m_mask_matrix.unsqueeze(-1))    # \u53bb\u6389SOS\u4e0eEOS", "\n", "# output_logits_part = torch.mean(output_logits_part, dim=2)", "\n", "# neg_pred_prob1 = output_logits_part.unsqueeze(-1)", "\n", "# neg_pred_prob2 = output_logits_part.unsqueeze(-2)", "\n", "# neg_pred_prob = neg_pred_prob1 * neg_pred_prob2 # bach * seq * max_med_num * all_med_num * all_med_num", "\n", "# batch_neg = 0.0005 * neg_pred_prob.mul(self.tensor_ddi_adj).sum()", "\n", "# return output_logits, batch_neg", "\n", "return", "output_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_proc.calc_cross_visit_scores": [[1356, 1384], ["visit_diag_embedding.size", "visit_diag_embedding.size", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "visit_diag_embedding.size", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "visit_proc_embedding.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.unsqueeze().repeat.unsqueeze().repeat.float"], "methods", ["None"], ["", "def", "calc_cross_visit_scores", "(", "self", ",", "visit_diag_embedding", ",", "visit_proc_embedding", ")", ":", "\n", "        ", "\"\"\"\n        visit_diag_embedding: (batch * visit_num * emb)\n        visit_proc_embedding: (batch * visit_num * emb)\n        \"\"\"", "\n", "max_visit_num", "=", "visit_diag_embedding", ".", "size", "(", "1", ")", "\n", "batch_size", "=", "visit_diag_embedding", ".", "size", "(", "0", ")", "\n", "\n", "# mask\u8868\u793a\u6bcf\u4e2avisit\u53ea\u80fd\u770b\u5230\u81ea\u5df1\u4e4b\u524d\u7684visit", "\n", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "(", "max_visit_num", ",", "max_visit_num", ")", ",", "device", "=", "self", ".", "device", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "# \u4e0b\u4e09\u89d2\u77e9\u9635", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "# batch * max_visit_num * max_visit_num", "\n", "\n", "# \u6bcf\u4e2avisit\u540e\u79fb\u4e00\u4f4d", "\n", "padding", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "1", ",", "self", ".", "emb_dim", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "diag_keys", "=", "torch", ".", "cat", "(", "[", "padding", ",", "visit_diag_embedding", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "# batch * max_visit_num * emb", "\n", "proc_keys", "=", "torch", ".", "cat", "(", "[", "padding", ",", "visit_proc_embedding", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# \u5f97\u5230\u6bcf\u4e2avisit\u8ddf\u81ea\u5df1\u524d\u9762\u6240\u6709visit\u7684score", "\n", "diag_scores", "=", "torch", ".", "matmul", "(", "visit_diag_embedding", ",", "diag_keys", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "visit_diag_embedding", ".", "size", "(", "-", "1", ")", ")", "\n", "proc_scores", "=", "torch", ".", "matmul", "(", "visit_proc_embedding", ",", "proc_keys", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "visit_proc_embedding", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "# 1st visit's scores is not zero!", "\n", "# scores = F.softmax(diag_scores + proc_scores + mask, dim=-1)", "\n", "scores", "=", "F", ".", "softmax", "(", "diag_scores", "+", "mask", ",", "dim", "=", "-", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.COGNet_wo_proc.copy_med": [[1385, 1412], ["decode_input_hiddens.size", "decode_input_hiddens.size", "last_medications.size", "COGNet_ablation.COGNet_wo_proc.Wc().view", "last_m_mask.view().repeat", "torch.softmax", "torch.softmax", "torch.softmax", "cross_visit_scores.repeat().view", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat().view", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp.sum", "torch.mul().clamp.sum", "torch.mul().clamp.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "COGNet_ablation.COGNet_wo_proc.Wc", "last_medications.view().transpose", "last_m_mask.view", "cross_visit_scores.repeat", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "last_medications.view", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "copy_med", "(", "self", ",", "decode_input_hiddens", ",", "last_medications", ",", "last_m_mask", ",", "cross_visit_scores", ")", ":", "\n", "        ", "\"\"\"\n        decode_input_hiddens: [batch_size, max_visit_num, input_med_num, emb_size]\n        last_medications: [batch_size, max_visit_num, max_med_num, emb_size]\n        last_m_mask: [batch_size, max_visit_num, max_med_num]\n        cross_visit_scores: [batch_size, max_visit_num, max_visit_num]\n        \"\"\"", "\n", "max_visit_num", "=", "decode_input_hiddens", ".", "size", "(", "1", ")", "\n", "input_med_num", "=", "decode_input_hiddens", ".", "size", "(", "2", ")", "\n", "max_med_num", "=", "last_medications", ".", "size", "(", "2", ")", "\n", "copy_query", "=", "self", ".", "Wc", "(", "decode_input_hiddens", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "self", ".", "emb_dim", ")", "\n", "attn_scores", "=", "torch", ".", "matmul", "(", "copy_query", ",", "last_medications", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "max_med_num", ",", "self", ".", "emb_dim", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "self", ".", "emb_dim", ")", "\n", "med_mask", "=", "last_m_mask", ".", "view", "(", "-", "1", ",", "1", ",", "max_visit_num", "*", "max_med_num", ")", ".", "repeat", "(", "1", ",", "max_visit_num", "*", "input_med_num", ",", "1", ")", "\n", "\n", "# [batch_size, max_vist_num * input_med_num, max_visit_num * max_med_num]", "\n", "attn_scores", "=", "F", ".", "softmax", "(", "attn_scores", "+", "med_mask", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# (batch_size, max_visit_num * input_med_num, max_visit_num)", "\n", "visit_scores", "=", "cross_visit_scores", ".", "repeat", "(", "1", ",", "1", ",", "input_med_num", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "max_visit_num", ")", "\n", "# (batch_size, max_visit_num * input_med_num, max_visit_num * max_med_num)", "\n", "visit_scores", "=", "visit_scores", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "max_med_num", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "max_visit_num", "*", "max_med_num", ")", "\n", "\n", "scores", "=", "torch", ".", "mul", "(", "attn_scores", ",", "visit_scores", ")", ".", "clamp", "(", "min", "=", "1e-9", ")", "\n", "row_scores", "=", "scores", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "scores", "=", "scores", "/", "row_scores", "# (batch_size, max_visit_num * input_med_num, max_visit_num * max_med_num)", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder.__init__": [[1415, 1435], ["torch.Module.__init__", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "\n", "layer_norm_eps", "=", "1e-5", ")", "->", "None", ":", "\n", "        ", "super", "(", "MedTransformerDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "m2d_multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "m2p_multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "nhead", "=", "nhead", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder.forward": [[1438, 1463], ["input_medication_embedding.size", "input_medication_embedding.size", "COGNet_ablation.MedTransformerDecoder.generate_square_subsequent_mask", "COGNet_ablation.MedTransformerDecoder.norm1", "COGNet_ablation.MedTransformerDecoder.norm2", "COGNet_ablation.MedTransformerDecoder.norm3", "COGNet_ablation.MedTransformerDecoder._sa_block", "COGNet_ablation.MedTransformerDecoder._m2p_mha_block", "COGNet_ablation.MedTransformerDecoder._ff_block", "COGNet_ablation.MedTransformerDecoder._m2d_mha_block"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder.generate_square_subsequent_mask", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._sa_block", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._m2p_mha_block", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._ff_block", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._m2d_mha_block"], ["", "def", "forward", "(", "self", ",", "input_medication_embedding", ",", "input_medication_memory", ",", "input_disease_embdding", ",", "input_proc_embedding", ",", "\n", "input_medication_self_mask", ",", "d_mask", ",", "p_mask", ")", ":", "\n", "        ", "r\"\"\"Pass the inputs (and mask) through the decoder layer.\n        Args:\n            input_medication_embedding: [*, max_med_num+1, embedding_size]\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "input_len", "=", "input_medication_embedding", ".", "size", "(", "0", ")", "\n", "tgt_len", "=", "input_medication_embedding", ".", "size", "(", "1", ")", "\n", "\n", "# [batch_size*visit_num, max_med_num+1, max_med_num+1]", "\n", "subsequent_mask", "=", "self", ".", "generate_square_subsequent_mask", "(", "tgt_len", ",", "input_len", "*", "self", ".", "nhead", ",", "input_disease_embdding", ".", "device", ")", "\n", "self_attn_mask", "=", "subsequent_mask", "+", "input_medication_self_mask", "\n", "\n", "x", "=", "input_medication_embedding", "+", "input_medication_memory", "\n", "\n", "x", "=", "self", ".", "norm1", "(", "x", "+", "self", ".", "_sa_block", "(", "x", ",", "self_attn_mask", ")", ")", "\n", "# attentioned_disease_embedding = self._m2d_mha_block(x, input_disease_embdding, d_mask)", "\n", "# attentioned_proc_embedding = self._m2p_mha_block(x, input_proc_embedding, p_mask)", "\n", "# x = self.norm3(x + self._ff_block(torch.cat([attentioned_disease_embedding, self.align(attentioned_proc_embedding)], dim=-1)))", "\n", "x", "=", "self", ".", "norm2", "(", "x", "+", "self", ".", "_m2d_mha_block", "(", "x", ",", "input_disease_embdding", ",", "d_mask", ")", "+", "self", ".", "_m2p_mha_block", "(", "x", ",", "input_proc_embedding", ",", "p_mask", ")", ")", "\n", "x", "=", "self", ".", "norm3", "(", "x", "+", "self", ".", "_ff_block", "(", "x", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder._sa_block": [[1465, 1470], ["COGNet_ablation.MedTransformerDecoder.dropout1", "COGNet_ablation.MedTransformerDecoder.self_attn"], "methods", ["None"], ["", "def", "_sa_block", "(", "self", ",", "x", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder._m2d_mha_block": [[1472, 1477], ["COGNet_ablation.MedTransformerDecoder.dropout2", "COGNet_ablation.MedTransformerDecoder.m2d_multihead_attn"], "methods", ["None"], ["", "def", "_m2d_mha_block", "(", "self", ",", "x", ",", "mem", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "m2d_multihead_attn", "(", "x", ",", "mem", ",", "mem", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder._m2p_mha_block": [[1478, 1483], ["COGNet_ablation.MedTransformerDecoder.dropout2", "COGNet_ablation.MedTransformerDecoder.m2p_multihead_attn"], "methods", ["None"], ["", "def", "_m2p_mha_block", "(", "self", ",", "x", ",", "mem", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "m2p_multihead_attn", "(", "x", ",", "mem", ",", "mem", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder._ff_block": [[1485, 1488], ["COGNet_ablation.MedTransformerDecoder.linear2", "COGNet_ablation.MedTransformerDecoder.dropout3", "COGNet_ablation.MedTransformerDecoder.dropout", "COGNet_ablation.MedTransformerDecoder.activation", "COGNet_ablation.MedTransformerDecoder.linear1"], "methods", ["None"], ["", "def", "_ff_block", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "x", ")", ")", ")", ")", "\n", "return", "self", ".", "dropout3", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder.generate_square_subsequent_mask": [[1489, 1497], ["mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "float", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.unsqueeze().repeat.unsqueeze().repeat.float"], "methods", ["None"], ["", "def", "generate_square_subsequent_mask", "(", "self", ",", "sz", ":", "int", ",", "batch_size", ":", "int", ",", "device", ")", ":", "\n", "        ", "r\"\"\"Generate a square mask for the sequence. The masked positions are filled with float('-inf').\n            Unmasked positions are filled with float(0.0).\n        \"\"\"", "\n", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "(", "sz", ",", "sz", ")", ",", "device", "=", "device", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_diag.__init__": [[1500, 1520], ["torch.Module.__init__", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "\n", "layer_norm_eps", "=", "1e-5", ")", "->", "None", ":", "\n", "        ", "super", "(", "MedTransformerDecoder_wo_diag", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "m2d_multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "m2p_multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "nhead", "=", "nhead", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_diag.forward": [[1523, 1548], ["input_medication_embedding.size", "input_medication_embedding.size", "COGNet_ablation.MedTransformerDecoder_wo_diag.generate_square_subsequent_mask", "COGNet_ablation.MedTransformerDecoder_wo_diag.norm1", "COGNet_ablation.MedTransformerDecoder_wo_diag.norm2", "COGNet_ablation.MedTransformerDecoder_wo_diag.norm3", "COGNet_ablation.MedTransformerDecoder_wo_diag._sa_block", "COGNet_ablation.MedTransformerDecoder_wo_diag._m2p_mha_block", "COGNet_ablation.MedTransformerDecoder_wo_diag._ff_block"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder.generate_square_subsequent_mask", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._sa_block", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._m2p_mha_block", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._ff_block"], ["", "def", "forward", "(", "self", ",", "input_medication_embedding", ",", "input_medication_memory", ",", "input_disease_embdding", ",", "input_proc_embedding", ",", "\n", "input_medication_self_mask", ",", "d_mask", ",", "p_mask", ")", ":", "\n", "        ", "r\"\"\"Pass the inputs (and mask) through the decoder layer.\n        Args:\n            input_medication_embedding: [*, max_med_num+1, embedding_size]\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "input_len", "=", "input_medication_embedding", ".", "size", "(", "0", ")", "\n", "tgt_len", "=", "input_medication_embedding", ".", "size", "(", "1", ")", "\n", "\n", "# [batch_size*visit_num, max_med_num+1, max_med_num+1]", "\n", "subsequent_mask", "=", "self", ".", "generate_square_subsequent_mask", "(", "tgt_len", ",", "input_len", "*", "self", ".", "nhead", ",", "input_disease_embdding", ".", "device", ")", "\n", "self_attn_mask", "=", "subsequent_mask", "+", "input_medication_self_mask", "\n", "\n", "x", "=", "input_medication_embedding", "+", "input_medication_memory", "\n", "\n", "x", "=", "self", ".", "norm1", "(", "x", "+", "self", ".", "_sa_block", "(", "x", ",", "self_attn_mask", ")", ")", "\n", "# attentioned_disease_embedding = self._m2d_mha_block(x, input_disease_embdding, d_mask)", "\n", "# attentioned_proc_embedding = self._m2p_mha_block(x, input_proc_embedding, p_mask)", "\n", "# x = self.norm3(x + self._ff_block(torch.cat([attentioned_disease_embedding, self.align(attentioned_proc_embedding)], dim=-1)))", "\n", "x", "=", "self", ".", "norm2", "(", "x", "+", "self", ".", "_m2p_mha_block", "(", "x", ",", "input_proc_embedding", ",", "p_mask", ")", ")", "\n", "x", "=", "self", ".", "norm3", "(", "x", "+", "self", ".", "_ff_block", "(", "x", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_diag._sa_block": [[1550, 1555], ["COGNet_ablation.MedTransformerDecoder_wo_diag.dropout1", "COGNet_ablation.MedTransformerDecoder_wo_diag.self_attn"], "methods", ["None"], ["", "def", "_sa_block", "(", "self", ",", "x", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_diag._m2d_mha_block": [[1557, 1562], ["COGNet_ablation.MedTransformerDecoder_wo_diag.dropout2", "COGNet_ablation.MedTransformerDecoder_wo_diag.m2d_multihead_attn"], "methods", ["None"], ["", "def", "_m2d_mha_block", "(", "self", ",", "x", ",", "mem", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "m2d_multihead_attn", "(", "x", ",", "mem", ",", "mem", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_diag._m2p_mha_block": [[1563, 1568], ["COGNet_ablation.MedTransformerDecoder_wo_diag.dropout2", "COGNet_ablation.MedTransformerDecoder_wo_diag.m2p_multihead_attn"], "methods", ["None"], ["", "def", "_m2p_mha_block", "(", "self", ",", "x", ",", "mem", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "m2p_multihead_attn", "(", "x", ",", "mem", ",", "mem", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_diag._ff_block": [[1570, 1573], ["COGNet_ablation.MedTransformerDecoder_wo_diag.linear2", "COGNet_ablation.MedTransformerDecoder_wo_diag.dropout3", "COGNet_ablation.MedTransformerDecoder_wo_diag.dropout", "COGNet_ablation.MedTransformerDecoder_wo_diag.activation", "COGNet_ablation.MedTransformerDecoder_wo_diag.linear1"], "methods", ["None"], ["", "def", "_ff_block", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "x", ")", ")", ")", ")", "\n", "return", "self", ".", "dropout3", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_diag.generate_square_subsequent_mask": [[1574, 1582], ["mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "float", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.unsqueeze().repeat.unsqueeze().repeat.float"], "methods", ["None"], ["", "def", "generate_square_subsequent_mask", "(", "self", ",", "sz", ":", "int", ",", "batch_size", ":", "int", ",", "device", ")", ":", "\n", "        ", "r\"\"\"Generate a square mask for the sequence. The masked positions are filled with float('-inf').\n            Unmasked positions are filled with float(0.0).\n        \"\"\"", "\n", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "(", "sz", ",", "sz", ")", ",", "device", "=", "device", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_proc.__init__": [[1585, 1605], ["torch.Module.__init__", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "\n", "layer_norm_eps", "=", "1e-5", ")", "->", "None", ":", "\n", "        ", "super", "(", "MedTransformerDecoder_wo_proc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "m2d_multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "m2p_multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "nhead", "=", "nhead", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_proc.forward": [[1608, 1633], ["input_medication_embedding.size", "input_medication_embedding.size", "COGNet_ablation.MedTransformerDecoder_wo_proc.generate_square_subsequent_mask", "COGNet_ablation.MedTransformerDecoder_wo_proc.norm1", "COGNet_ablation.MedTransformerDecoder_wo_proc.norm2", "COGNet_ablation.MedTransformerDecoder_wo_proc.norm3", "COGNet_ablation.MedTransformerDecoder_wo_proc._sa_block", "COGNet_ablation.MedTransformerDecoder_wo_proc._m2d_mha_block", "COGNet_ablation.MedTransformerDecoder_wo_proc._ff_block"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder.generate_square_subsequent_mask", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._sa_block", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._m2d_mha_block", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._ff_block"], ["", "def", "forward", "(", "self", ",", "input_medication_embedding", ",", "input_medication_memory", ",", "input_disease_embdding", ",", "input_proc_embedding", ",", "\n", "input_medication_self_mask", ",", "d_mask", ",", "p_mask", ")", ":", "\n", "        ", "r\"\"\"Pass the inputs (and mask) through the decoder layer.\n        Args:\n            input_medication_embedding: [*, max_med_num+1, embedding_size]\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "input_len", "=", "input_medication_embedding", ".", "size", "(", "0", ")", "\n", "tgt_len", "=", "input_medication_embedding", ".", "size", "(", "1", ")", "\n", "\n", "# [batch_size*visit_num, max_med_num+1, max_med_num+1]", "\n", "subsequent_mask", "=", "self", ".", "generate_square_subsequent_mask", "(", "tgt_len", ",", "input_len", "*", "self", ".", "nhead", ",", "input_disease_embdding", ".", "device", ")", "\n", "self_attn_mask", "=", "subsequent_mask", "+", "input_medication_self_mask", "\n", "\n", "x", "=", "input_medication_embedding", "+", "input_medication_memory", "\n", "\n", "x", "=", "self", ".", "norm1", "(", "x", "+", "self", ".", "_sa_block", "(", "x", ",", "self_attn_mask", ")", ")", "\n", "# attentioned_disease_embedding = self._m2d_mha_block(x, input_disease_embdding, d_mask)", "\n", "# attentioned_proc_embedding = self._m2p_mha_block(x, input_proc_embedding, p_mask)", "\n", "# x = self.norm3(x + self._ff_block(torch.cat([attentioned_disease_embedding, self.align(attentioned_proc_embedding)], dim=-1)))", "\n", "x", "=", "self", ".", "norm2", "(", "x", "+", "self", ".", "_m2d_mha_block", "(", "x", ",", "input_disease_embdding", ",", "d_mask", ")", ")", "\n", "x", "=", "self", ".", "norm3", "(", "x", "+", "self", ".", "_ff_block", "(", "x", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_proc._sa_block": [[1635, 1640], ["COGNet_ablation.MedTransformerDecoder_wo_proc.dropout1", "COGNet_ablation.MedTransformerDecoder_wo_proc.self_attn"], "methods", ["None"], ["", "def", "_sa_block", "(", "self", ",", "x", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_proc._m2d_mha_block": [[1642, 1647], ["COGNet_ablation.MedTransformerDecoder_wo_proc.dropout2", "COGNet_ablation.MedTransformerDecoder_wo_proc.m2d_multihead_attn"], "methods", ["None"], ["", "def", "_m2d_mha_block", "(", "self", ",", "x", ",", "mem", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "m2d_multihead_attn", "(", "x", ",", "mem", ",", "mem", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_proc._m2p_mha_block": [[1648, 1653], ["COGNet_ablation.MedTransformerDecoder_wo_proc.dropout2", "COGNet_ablation.MedTransformerDecoder_wo_proc.m2p_multihead_attn"], "methods", ["None"], ["", "def", "_m2p_mha_block", "(", "self", ",", "x", ",", "mem", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "m2p_multihead_attn", "(", "x", ",", "mem", ",", "mem", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_proc._ff_block": [[1655, 1658], ["COGNet_ablation.MedTransformerDecoder_wo_proc.linear2", "COGNet_ablation.MedTransformerDecoder_wo_proc.dropout3", "COGNet_ablation.MedTransformerDecoder_wo_proc.dropout", "COGNet_ablation.MedTransformerDecoder_wo_proc.activation", "COGNet_ablation.MedTransformerDecoder_wo_proc.linear1"], "methods", ["None"], ["", "def", "_ff_block", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "x", ")", ")", ")", ")", "\n", "return", "self", ".", "dropout3", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_proc.generate_square_subsequent_mask": [[1659, 1667], ["mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "float", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.unsqueeze().repeat.unsqueeze().repeat.float"], "methods", ["None"], ["", "def", "generate_square_subsequent_mask", "(", "self", ",", "sz", ":", "int", ",", "batch_size", ":", "int", ",", "device", ")", ":", "\n", "        ", "r\"\"\"Generate a square mask for the sequence. The masked positions are filled with float('-inf').\n            Unmasked positions are filled with float(0.0).\n        \"\"\"", "\n", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "(", "sz", ",", "sz", ")", ",", "device", "=", "device", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_graph.__init__": [[1669, 1689], ["torch.Module.__init__", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "\n", "layer_norm_eps", "=", "1e-5", ")", "->", "None", ":", "\n", "        ", "super", "(", "MedTransformerDecoder_wo_graph", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "m2d_multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "m2p_multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "nhead", "=", "nhead", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_graph.forward": [[1692, 1718], ["input_medication_embedding.size", "input_medication_embedding.size", "COGNet_ablation.MedTransformerDecoder_wo_graph.generate_square_subsequent_mask", "COGNet_ablation.MedTransformerDecoder_wo_graph.norm1", "COGNet_ablation.MedTransformerDecoder_wo_graph.norm2", "COGNet_ablation.MedTransformerDecoder_wo_graph.norm3", "COGNet_ablation.MedTransformerDecoder_wo_graph._sa_block", "COGNet_ablation.MedTransformerDecoder_wo_graph._m2p_mha_block", "COGNet_ablation.MedTransformerDecoder_wo_graph._ff_block", "COGNet_ablation.MedTransformerDecoder_wo_graph._m2d_mha_block"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder.generate_square_subsequent_mask", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._sa_block", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._m2p_mha_block", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._ff_block", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._m2d_mha_block"], ["", "def", "forward", "(", "self", ",", "input_medication_embedding", ",", "input_medication_memory", ",", "input_disease_embdding", ",", "input_proc_embedding", ",", "\n", "input_medication_self_mask", ",", "d_mask", ",", "p_mask", ")", ":", "\n", "        ", "r\"\"\"Pass the inputs (and mask) through the decoder layer.\n        Args:\n            input_medication_embedding: [*, max_med_num+1, embedding_size]\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "input_len", "=", "input_medication_embedding", ".", "size", "(", "0", ")", "\n", "tgt_len", "=", "input_medication_embedding", ".", "size", "(", "1", ")", "\n", "\n", "# [batch_size*visit_num, max_med_num+1, max_med_num+1]", "\n", "subsequent_mask", "=", "self", ".", "generate_square_subsequent_mask", "(", "tgt_len", ",", "input_len", "*", "self", ".", "nhead", ",", "input_disease_embdding", ".", "device", ")", "\n", "self_attn_mask", "=", "subsequent_mask", "+", "input_medication_self_mask", "\n", "\n", "# x = input_medication_embedding + input_medication_memory", "\n", "x", "=", "input_medication_embedding", "\n", "\n", "x", "=", "self", ".", "norm1", "(", "x", "+", "self", ".", "_sa_block", "(", "x", ",", "self_attn_mask", ")", ")", "\n", "# attentioned_disease_embedding = self._m2d_mha_block(x, input_disease_embdding, d_mask)", "\n", "# attentioned_proc_embedding = self._m2p_mha_block(x, input_proc_embedding, p_mask)", "\n", "# x = self.norm3(x + self._ff_block(torch.cat([attentioned_disease_embedding, self.align(attentioned_proc_embedding)], dim=-1)))", "\n", "x", "=", "self", ".", "norm2", "(", "x", "+", "self", ".", "_m2d_mha_block", "(", "x", ",", "input_disease_embdding", ",", "d_mask", ")", "+", "self", ".", "_m2p_mha_block", "(", "x", ",", "input_proc_embedding", ",", "p_mask", ")", ")", "\n", "x", "=", "self", ".", "norm3", "(", "x", "+", "self", ".", "_ff_block", "(", "x", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_graph._sa_block": [[1720, 1725], ["COGNet_ablation.MedTransformerDecoder_wo_graph.dropout1", "COGNet_ablation.MedTransformerDecoder_wo_graph.self_attn"], "methods", ["None"], ["", "def", "_sa_block", "(", "self", ",", "x", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_graph._m2d_mha_block": [[1727, 1732], ["COGNet_ablation.MedTransformerDecoder_wo_graph.dropout2", "COGNet_ablation.MedTransformerDecoder_wo_graph.m2d_multihead_attn"], "methods", ["None"], ["", "def", "_m2d_mha_block", "(", "self", ",", "x", ",", "mem", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "m2d_multihead_attn", "(", "x", ",", "mem", ",", "mem", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_graph._m2p_mha_block": [[1733, 1738], ["COGNet_ablation.MedTransformerDecoder_wo_graph.dropout2", "COGNet_ablation.MedTransformerDecoder_wo_graph.m2p_multihead_attn"], "methods", ["None"], ["", "def", "_m2p_mha_block", "(", "self", ",", "x", ",", "mem", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "m2p_multihead_attn", "(", "x", ",", "mem", ",", "mem", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_graph._ff_block": [[1740, 1743], ["COGNet_ablation.MedTransformerDecoder_wo_graph.linear2", "COGNet_ablation.MedTransformerDecoder_wo_graph.dropout3", "COGNet_ablation.MedTransformerDecoder_wo_graph.dropout", "COGNet_ablation.MedTransformerDecoder_wo_graph.activation", "COGNet_ablation.MedTransformerDecoder_wo_graph.linear1"], "methods", ["None"], ["", "def", "_ff_block", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "x", ")", ")", ")", ")", "\n", "return", "self", ".", "dropout3", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MedTransformerDecoder_wo_graph.generate_square_subsequent_mask": [[1744, 1752], ["mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "float", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.unsqueeze().repeat.unsqueeze().repeat.float"], "methods", ["None"], ["", "def", "generate_square_subsequent_mask", "(", "self", ",", "sz", ":", "int", ",", "batch_size", ":", "int", ",", "device", ")", ":", "\n", "        ", "r\"\"\"Generate a square mask for the sequence. The masked positions are filled with float('-inf').\n            Unmasked positions are filled with float(0.0).\n        \"\"\"", "\n", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "(", "sz", ",", "sz", ")", ",", "device", "=", "device", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.PositionEmbedding.__init__": [[1758, 1762], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["def", "__init__", "(", "self", ",", "emb_size", ",", "max_length", "=", "512", ")", ":", "\n", "        ", "super", "(", "PositionEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "embedding_layer", "=", "nn", ".", "Embedding", "(", "max_length", ",", "emb_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.PositionEmbedding.forward": [[1763, 1769], ["torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "ids.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "COGNet_ablation.PositionEmbedding.embedding_layer", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "ids.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_size", ",", "seq_length", ",", "device", ")", ":", "\n", "        ", "assert", "(", "seq_length", "<=", "self", ".", "max_length", ")", "\n", "ids", "=", "torch", ".", "arange", "(", "0", ",", "seq_length", ")", ".", "long", "(", ")", ".", "to", "(", "torch", ".", "device", "(", "device", ")", ")", "\n", "ids", "=", "ids", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ")", "\n", "emb", "=", "self", ".", "embedding_layer", "(", "ids", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MaskLinear.__init__": [[1772, 1782], ["torch.Module.__init__", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "COGNet_ablation.MaskLinear.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "COGNet_ablation.MaskLinear.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MaskLinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "MaskLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "nn", ".", "parameter", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "parameter", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MaskLinear.reset_parameters": [[1783, 1788], ["COGNet_ablation.MaskLinear.weight.data.uniform_", "math.sqrt", "COGNet_ablation.MaskLinear.bias.data.uniform_", "COGNet_ablation.MaskLinear.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MaskLinear.forward": [[1789, 1797], ["torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "mask", ")", ":", "\n", "        ", "weight", "=", "torch", ".", "mul", "(", "self", ".", "weight", ",", "mask", ")", "\n", "output", "=", "torch", ".", "mm", "(", "input", ",", "weight", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.MaskLinear.__repr__": [[1798, 1802], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.GCN.__init__": [[1805, 1822], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "COGNet_ablation.GCN.normalize", "COGNet_ablation.GCN.normalize", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "layers.GraphConvolution", "torch.Dropout", "torch.Dropout", "torch.Dropout", "layers.GraphConvolution", "layers.GraphConvolution", "numpy.eye", "numpy.eye", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.GCN.normalize", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.GCN.normalize"], ["    ", "def", "__init__", "(", "self", ",", "voc_size", ",", "emb_dim", ",", "ehr_adj", ",", "ddi_adj", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "voc_size", "=", "voc_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "device", "=", "device", "\n", "\n", "ehr_adj", "=", "self", ".", "normalize", "(", "ehr_adj", "+", "np", ".", "eye", "(", "ehr_adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "ddi_adj", "=", "self", ".", "normalize", "(", "ddi_adj", "+", "np", ".", "eye", "(", "ddi_adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "self", ".", "ehr_adj", "=", "torch", ".", "FloatTensor", "(", "ehr_adj", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "ddi_adj", "=", "torch", ".", "FloatTensor", "(", "ddi_adj", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "x", "=", "torch", ".", "eye", "(", "voc_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "gcn1", "=", "GraphConvolution", "(", "voc_size", ",", "emb_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.3", ")", "\n", "self", ".", "gcn2", "=", "GraphConvolution", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "gcn3", "=", "GraphConvolution", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.GCN.forward": [[1823, 1835], ["COGNet_ablation.GCN.gcn1", "COGNet_ablation.GCN.gcn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "COGNet_ablation.GCN.dropout", "COGNet_ablation.GCN.dropout", "COGNet_ablation.GCN.gcn2", "COGNet_ablation.GCN.gcn3"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "ehr_node_embedding", "=", "self", ".", "gcn1", "(", "self", ".", "x", ",", "self", ".", "ehr_adj", ")", "\n", "ddi_node_embedding", "=", "self", ".", "gcn1", "(", "self", ".", "x", ",", "self", ".", "ddi_adj", ")", "\n", "\n", "ehr_node_embedding", "=", "F", ".", "relu", "(", "ehr_node_embedding", ")", "\n", "ddi_node_embedding", "=", "F", ".", "relu", "(", "ddi_node_embedding", ")", "\n", "ehr_node_embedding", "=", "self", ".", "dropout", "(", "ehr_node_embedding", ")", "\n", "ddi_node_embedding", "=", "self", ".", "dropout", "(", "ddi_node_embedding", ")", "\n", "\n", "ehr_node_embedding", "=", "self", ".", "gcn2", "(", "ehr_node_embedding", ",", "self", ".", "ehr_adj", ")", "\n", "ddi_node_embedding", "=", "self", ".", "gcn3", "(", "ddi_node_embedding", ",", "self", ".", "ddi_adj", ")", "\n", "return", "ehr_node_embedding", ",", "ddi_node_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_ablation.GCN.normalize": [[1836, 1844], ["numpy.array", "numpy.power().flatten", "numpy.diagflat", "numpy.diagflat.dot", "np.diagflat.dot.sum", "numpy.power", "numpy.isinf"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "normalize", "(", "self", ",", "mx", ")", ":", "\n", "        ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "np", ".", "diagflat", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.barryrun_cognet.src.layers.GraphConvolution.__init__": [[14, 24], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layers.GraphConvolution.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layers.GraphConvolution.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MaskLinear.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.layers.GraphConvolution.reset_parameters": [[25, 30], ["layers.GraphConvolution.weight.data.uniform_", "math.sqrt", "layers.GraphConvolution.bias.data.uniform_", "layers.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.layers.GraphConvolution.forward": [[31, 38], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "support", "=", "torch", ".", "mm", "(", "input", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "mm", "(", "adj", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.layers.GraphConvolution.__repr__": [[39, 43], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.layers.SelfAttend.__init__": [[46, 55], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_size", ":", "int", ")", "->", "None", ":", "\n", "        ", "super", "(", "SelfAttend", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "h1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "embedding_size", ",", "32", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "self", ".", "gate_layer", "=", "nn", ".", "Linear", "(", "32", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.layers.SelfAttend.forward": [[56, 70], ["layers.SelfAttend.gate_layer().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "p_attn.unsqueeze.unsqueeze.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "layers.SelfAttend.gate_layer", "layers.SelfAttend.h1"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "forward", "(", "self", ",", "seqs", ",", "seq_masks", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param seqs: shape [batch_size, seq_length, embedding_size]\n        :param seq_lens: shape [batch_size, seq_length]\n        :return: shape [batch_size, seq_length, embedding_size]\n        \"\"\"", "\n", "gates", "=", "self", ".", "gate_layer", "(", "self", ".", "h1", "(", "seqs", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "if", "seq_masks", "is", "not", "None", ":", "\n", "            ", "gates", "=", "gates", "+", "seq_masks", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "gates", ",", "dim", "=", "-", "1", ")", "\n", "p_attn", "=", "p_attn", ".", "unsqueeze", "(", "-", "1", ")", "\n", "h", "=", "seqs", "*", "p_attn", "\n", "output", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "1", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.barryrun_cognet.src.loss.cross_entropy_loss.__init__": [[7, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.loss.cross_entropy_loss.forward": [[11, 39], ["seq_length.sum().item", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "range", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "labels.size", "max", "sum", "range", "torch.empty().to.long", "torch.empty().to.long", "torch.empty().to.long", "seq_length.sum", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "sum"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "forward", "(", "self", ",", "labels", ",", "logits", ",", "seq_length", ",", "m_length_matrix", ",", "med_num", ",", "END_TOKEN", ")", ":", "\n", "# labels: [batch_size, max_seq_length, max_med_num]", "\n", "# logits: [batch_size, max_seq_length, max_med_num, med_num]", "\n", "# m_length_matrix: [batch_size, seq_length]", "\n", "# seq_length: [batch_size]", "\n", "\n", "        ", "batch_size", ",", "max_seq_length", "=", "labels", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "assert", "max_seq_length", "==", "max", "(", "seq_length", ")", "\n", "whole_seqs_num", "=", "seq_length", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "whole_med_sum", "=", "sum", "(", "[", "sum", "(", "buf", ")", "for", "buf", "in", "m_length_matrix", "]", ")", "+", "whole_seqs_num", "\n", "\n", "labels_flatten", "=", "torch", ".", "empty", "(", "whole_med_sum", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "logits_flatten", "=", "torch", ".", "empty", "(", "whole_med_sum", ",", "med_num", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "start_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "seq_length", "[", "i", "]", ")", ":", "\n", "                ", "for", "k", "in", "range", "(", "m_length_matrix", "[", "i", "]", "[", "j", "]", "+", "1", ")", ":", "\n", "                    ", "if", "k", "==", "m_length_matrix", "[", "i", "]", "[", "j", "]", ":", "\n", "                        ", "labels_flatten", "[", "start_idx", "]", "=", "END_TOKEN", "\n", "", "else", ":", "\n", "                        ", "labels_flatten", "[", "start_idx", "]", "=", "labels", "[", "i", ",", "j", ",", "k", "]", "\n", "", "logits_flatten", "[", "start_idx", ",", ":", "]", "=", "logits", "[", "i", ",", "j", ",", "k", ",", ":", "]", "\n", "start_idx", "+=", "1", "\n", "\n", "\n", "", "", "", "loss", "=", "F", ".", "cross_entropy", "(", "logits_flatten", ",", "labels_flatten", ".", "long", "(", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.util.get_n_params": [[14, 22], ["list", "model.parameters", "list", "p.size"], "function", ["None"], ["def", "get_n_params", "(", "model", ")", ":", "\n", "    ", "pp", "=", "0", "\n", "for", "p", "in", "list", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "nn", "=", "1", "\n", "for", "s", "in", "list", "(", "p", ".", "size", "(", ")", ")", ":", "\n", "            ", "nn", "=", "nn", "*", "s", "\n", "", "pp", "+=", "nn", "\n", "", "return", "pp", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.util.llprint": [[24, 27], ["sys.stdout.write", "sys.stdout.flush"], "function", ["None"], ["", "def", "llprint", "(", "message", ")", ":", "\n", "    ", "sys", ".", "stdout", ".", "write", "(", "message", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.util.transform_split": [[28, 32], ["sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split"], "function", ["None"], ["", "def", "transform_split", "(", "X", ",", "Y", ")", ":", "\n", "    ", "x_train", ",", "x_eval", ",", "y_train", ",", "y_eval", "=", "train_test_split", "(", "X", ",", "Y", ",", "train_size", "=", "2", "/", "3", ",", "random_state", "=", "1203", ")", "\n", "x_eval", ",", "x_test", ",", "y_eval", ",", "y_test", "=", "train_test_split", "(", "x_eval", ",", "y_eval", ",", "test_size", "=", "0.5", ",", "random_state", "=", "1203", ")", "\n", "return", "x_train", ",", "x_eval", ",", "x_test", ",", "y_train", ",", "y_eval", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.util.sequence_output_process": [[33, 62], ["range", "enumerate", "numpy.argsort", "len", "range", "y_pred_prob_tmp.append", "sorted", "out_list.append", "zip"], "function", ["None"], ["", "def", "sequence_output_process", "(", "output_logits", ",", "filter_token", ")", ":", "\n", "    ", "\"\"\"\u751f\u6210\u6700\u7ec8\u6b63\u786e\u7684\u5e8f\u5217\uff0coutput_logits\u8868\u793a\u6bcf\u4e2a\u4f4d\u7f6e\u7684prob\uff0cfilter_token\u4ee3\u8868SOS\u4e0eEND\"\"\"", "\n", "pind", "=", "np", ".", "argsort", "(", "output_logits", ",", "axis", "=", "-", "1", ")", "[", ":", ",", ":", ":", "-", "1", "]", "# \u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u6309\u6982\u7387\u7684\u964d\u5e8f\u6392\u5e8f", "\n", "\n", "out_list", "=", "[", "]", "# \u751f\u6210\u7684\u7ed3\u679c", "\n", "break_flag", "=", "False", "\n", "for", "i", "in", "range", "(", "len", "(", "pind", ")", ")", ":", "\n", "# \u987a\u5e8f\u904d\u5386pind\u4e0a\u6240\u6709\u503c", "\n", "# break_flag\u6765\u5224\u65ad\u662f\u5426\u9000\u51fasentence\u751f\u6210\u7684\u5faa\u73af", "\n", "        ", "if", "break_flag", ":", "\n", "            ", "break", "\n", "# \u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u662f\u6309\u964d\u5e8f\u6392\u5e8f\u597d\u7684\u7ed3\u679c", "\n", "", "for", "j", "in", "range", "(", "pind", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "label", "=", "pind", "[", "i", "]", "[", "j", "]", "\n", "# \u5982\u679c\u9047\u5230\u4e86SOS\u6216\u8005END\uff0c\u5c31\u8868\u793a\u53e5\u5b50over\u4e86", "\n", "if", "label", "in", "filter_token", ":", "\n", "                ", "break_flag", "=", "True", "\n", "break", "\n", "# \u5982\u679c\u9047\u5230\u4e86\u672a\u51fa\u73b0\u8fc7\u7684\uff0c\u5c31\u7ee7\u7eed\u751f\u6210", "\n", "# \u5426\u5219\u5c31\u7ee7\u7eed\u770b\u4e0b\u4e00\u4e2a\u6982\u7387\u8f83\u5927\u7684\u836f", "\n", "", "if", "label", "not", "in", "out_list", ":", "\n", "                ", "out_list", ".", "append", "(", "label", ")", "\n", "break", "\n", "", "", "", "y_pred_prob_tmp", "=", "[", "]", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "out_list", ")", ":", "\n", "        ", "y_pred_prob_tmp", ".", "append", "(", "output_logits", "[", "idx", ",", "item", "]", ")", "\n", "# \u5c06out_list\u4e2d\u6309\u7167\u6982\u7387\u7684\u9ad8\u4f4e\u5c06\u6240\u6709\u836f\u7269\u6392\u5e8f\uff1f", "\n", "", "sorted_predict", "=", "[", "x", "for", "_", ",", "x", "in", "sorted", "(", "zip", "(", "y_pred_prob_tmp", ",", "out_list", ")", ",", "reverse", "=", "True", ")", "]", "\n", "return", "out_list", ",", "sorted_predict", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.util.sequence_metric": [[64, 154], ["util.sequence_metric.precision_at_k"], "function", ["None"], ["", "def", "sequence_metric", "(", "y_gt", ",", "y_pred", ",", "y_prob", ",", "y_label", ")", ":", "\n", "    ", "def", "average_prc", "(", "y_gt", ",", "y_label", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "y_gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "target", "=", "np", ".", "where", "(", "y_gt", "[", "b", "]", "==", "1", ")", "[", "0", "]", "\n", "out_list", "=", "y_label", "[", "b", "]", "\n", "inter", "=", "set", "(", "out_list", ")", "&", "set", "(", "target", ")", "\n", "prc_score", "=", "0", "if", "len", "(", "out_list", ")", "==", "0", "else", "len", "(", "inter", ")", "/", "len", "(", "out_list", ")", "\n", "score", ".", "append", "(", "prc_score", ")", "\n", "", "return", "score", "\n", "\n", "\n", "", "def", "average_recall", "(", "y_gt", ",", "y_label", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "y_gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "target", "=", "np", ".", "where", "(", "y_gt", "[", "b", "]", "==", "1", ")", "[", "0", "]", "\n", "out_list", "=", "y_label", "[", "b", "]", "\n", "inter", "=", "set", "(", "out_list", ")", "&", "set", "(", "target", ")", "\n", "recall_score", "=", "0", "if", "len", "(", "target", ")", "==", "0", "else", "len", "(", "inter", ")", "/", "len", "(", "target", ")", "\n", "score", ".", "append", "(", "recall_score", ")", "\n", "", "return", "score", "\n", "\n", "\n", "", "def", "average_f1", "(", "average_prc", ",", "average_recall", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "average_prc", ")", ")", ":", "\n", "            ", "if", "(", "average_prc", "[", "idx", "]", "+", "average_recall", "[", "idx", "]", ")", "==", "0", ":", "\n", "                ", "score", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "score", ".", "append", "(", "2", "*", "average_prc", "[", "idx", "]", "*", "average_recall", "[", "idx", "]", "/", "(", "average_prc", "[", "idx", "]", "+", "average_recall", "[", "idx", "]", ")", ")", "\n", "", "", "return", "score", "\n", "\n", "\n", "", "def", "jaccard", "(", "y_gt", ",", "y_label", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "y_gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "target", "=", "np", ".", "where", "(", "y_gt", "[", "b", "]", "==", "1", ")", "[", "0", "]", "\n", "out_list", "=", "y_label", "[", "b", "]", "\n", "inter", "=", "set", "(", "out_list", ")", "&", "set", "(", "target", ")", "\n", "union", "=", "set", "(", "out_list", ")", "|", "set", "(", "target", ")", "\n", "jaccard_score", "=", "0", "if", "union", "==", "0", "else", "len", "(", "inter", ")", "/", "len", "(", "union", ")", "\n", "score", ".", "append", "(", "jaccard_score", ")", "\n", "", "return", "np", ".", "mean", "(", "score", ")", "\n", "\n", "", "def", "f1", "(", "y_gt", ",", "y_pred", ")", ":", "\n", "        ", "all_micro", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "y_gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "all_micro", ".", "append", "(", "f1_score", "(", "y_gt", "[", "b", "]", ",", "y_pred", "[", "b", "]", ",", "average", "=", "'macro'", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "all_micro", ")", "\n", "\n", "", "def", "roc_auc", "(", "y_gt", ",", "y_pred_prob", ")", ":", "\n", "        ", "all_micro", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "len", "(", "y_gt", ")", ")", ":", "\n", "            ", "all_micro", ".", "append", "(", "roc_auc_score", "(", "y_gt", "[", "b", "]", ",", "y_pred_prob", "[", "b", "]", ",", "average", "=", "'macro'", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "all_micro", ")", "\n", "\n", "", "def", "precision_auc", "(", "y_gt", ",", "y_prob", ")", ":", "\n", "        ", "all_micro", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "len", "(", "y_gt", ")", ")", ":", "\n", "# try:", "\n", "#     all_micro.append(average_precision_score(y_gt[b], y_prob[b], average='macro'))", "\n", "# except:", "\n", "#     continue", "\n", "            ", "all_micro", ".", "append", "(", "average_precision_score", "(", "y_gt", "[", "b", "]", ",", "y_prob", "[", "b", "]", ",", "average", "=", "'macro'", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "all_micro", ")", "\n", "\n", "", "def", "precision_at_k", "(", "y_gt", ",", "y_prob_label", ",", "k", ")", ":", "\n", "        ", "precision", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "y_gt", ")", ")", ":", "\n", "            ", "TP", "=", "0", "\n", "for", "j", "in", "y_prob_label", "[", "i", "]", "[", ":", "k", "]", ":", "\n", "                ", "if", "y_gt", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                    ", "TP", "+=", "1", "\n", "", "", "precision", "+=", "TP", "/", "k", "\n", "", "return", "precision", "/", "len", "(", "y_gt", ")", "\n", "", "try", ":", "\n", "        ", "auc", "=", "roc_auc", "(", "y_gt", ",", "y_prob", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "auc", "=", "0", "\n", "", "p_1", "=", "precision_at_k", "(", "y_gt", ",", "y_label", ",", "k", "=", "1", ")", "\n", "p_3", "=", "precision_at_k", "(", "y_gt", ",", "y_label", ",", "k", "=", "3", ")", "\n", "p_5", "=", "precision_at_k", "(", "y_gt", ",", "y_label", ",", "k", "=", "5", ")", "\n", "f1", "=", "f1", "(", "y_gt", ",", "y_pred", ")", "\n", "prauc", "=", "precision_auc", "(", "y_gt", ",", "y_prob", ")", "\n", "ja", "=", "jaccard", "(", "y_gt", ",", "y_label", ")", "\n", "avg_prc", "=", "average_prc", "(", "y_gt", ",", "y_label", ")", "\n", "avg_recall", "=", "average_recall", "(", "y_gt", ",", "y_label", ")", "\n", "avg_f1", "=", "average_f1", "(", "avg_prc", ",", "avg_recall", ")", "\n", "\n", "return", "ja", ",", "prauc", ",", "np", ".", "mean", "(", "avg_prc", ")", ",", "np", ".", "mean", "(", "avg_recall", ")", ",", "np", ".", "mean", "(", "avg_f1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.util.sequence_metric_v2": [[156, 242], ["f1."], "function", ["None"], ["", "def", "sequence_metric_v2", "(", "y_gt", ",", "y_pred", ",", "y_label", ")", ":", "\n", "    ", "def", "average_prc", "(", "y_gt", ",", "y_label", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "y_gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "target", "=", "np", ".", "where", "(", "y_gt", "[", "b", "]", "==", "1", ")", "[", "0", "]", "\n", "out_list", "=", "y_label", "[", "b", "]", "\n", "inter", "=", "set", "(", "out_list", ")", "&", "set", "(", "target", ")", "\n", "prc_score", "=", "0", "if", "len", "(", "out_list", ")", "==", "0", "else", "len", "(", "inter", ")", "/", "len", "(", "out_list", ")", "\n", "score", ".", "append", "(", "prc_score", ")", "\n", "", "return", "score", "\n", "\n", "\n", "", "def", "average_recall", "(", "y_gt", ",", "y_label", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "y_gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "target", "=", "np", ".", "where", "(", "y_gt", "[", "b", "]", "==", "1", ")", "[", "0", "]", "\n", "out_list", "=", "y_label", "[", "b", "]", "\n", "inter", "=", "set", "(", "out_list", ")", "&", "set", "(", "target", ")", "\n", "recall_score", "=", "0", "if", "len", "(", "target", ")", "==", "0", "else", "len", "(", "inter", ")", "/", "len", "(", "target", ")", "\n", "score", ".", "append", "(", "recall_score", ")", "\n", "", "return", "score", "\n", "\n", "\n", "", "def", "average_f1", "(", "average_prc", ",", "average_recall", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "average_prc", ")", ")", ":", "\n", "            ", "if", "(", "average_prc", "[", "idx", "]", "+", "average_recall", "[", "idx", "]", ")", "==", "0", ":", "\n", "                ", "score", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "score", ".", "append", "(", "2", "*", "average_prc", "[", "idx", "]", "*", "average_recall", "[", "idx", "]", "/", "(", "average_prc", "[", "idx", "]", "+", "average_recall", "[", "idx", "]", ")", ")", "\n", "", "", "return", "score", "\n", "\n", "\n", "", "def", "jaccard", "(", "y_gt", ",", "y_label", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "y_gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "target", "=", "np", ".", "where", "(", "y_gt", "[", "b", "]", "==", "1", ")", "[", "0", "]", "\n", "out_list", "=", "y_label", "[", "b", "]", "\n", "inter", "=", "set", "(", "out_list", ")", "&", "set", "(", "target", ")", "\n", "union", "=", "set", "(", "out_list", ")", "|", "set", "(", "target", ")", "\n", "jaccard_score", "=", "0", "if", "union", "==", "0", "else", "len", "(", "inter", ")", "/", "len", "(", "union", ")", "\n", "score", ".", "append", "(", "jaccard_score", ")", "\n", "", "return", "np", ".", "mean", "(", "score", ")", "\n", "\n", "", "def", "f1", "(", "y_gt", ",", "y_pred", ")", ":", "\n", "        ", "all_micro", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "y_gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "all_micro", ".", "append", "(", "f1_score", "(", "y_gt", "[", "b", "]", ",", "y_pred", "[", "b", "]", ",", "average", "=", "'macro'", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "all_micro", ")", "\n", "\n", "", "def", "roc_auc", "(", "y_gt", ",", "y_pred_prob", ")", ":", "\n", "        ", "all_micro", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "len", "(", "y_gt", ")", ")", ":", "\n", "            ", "all_micro", ".", "append", "(", "roc_auc_score", "(", "y_gt", "[", "b", "]", ",", "y_pred_prob", "[", "b", "]", ",", "average", "=", "'macro'", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "all_micro", ")", "\n", "\n", "", "def", "precision_auc", "(", "y_gt", ",", "y_prob", ")", ":", "\n", "        ", "all_micro", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "len", "(", "y_gt", ")", ")", ":", "\n", "            ", "all_micro", ".", "append", "(", "average_precision_score", "(", "y_gt", "[", "b", "]", ",", "y_prob", "[", "b", "]", ",", "average", "=", "'macro'", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "all_micro", ")", "\n", "\n", "", "def", "precision_at_k", "(", "y_gt", ",", "y_prob_label", ",", "k", ")", ":", "\n", "        ", "precision", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "y_gt", ")", ")", ":", "\n", "            ", "TP", "=", "0", "\n", "for", "j", "in", "y_prob_label", "[", "i", "]", "[", ":", "k", "]", ":", "\n", "                ", "if", "y_gt", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                    ", "TP", "+=", "1", "\n", "", "", "precision", "+=", "TP", "/", "k", "\n", "", "return", "precision", "/", "len", "(", "y_gt", ")", "\n", "# try:", "\n", "#     auc = roc_auc(y_gt, y_prob)", "\n", "# except ValueError:", "\n", "#     auc = 0", "\n", "# p_1 = precision_at_k(y_gt, y_label, k=1)", "\n", "# p_3 = precision_at_k(y_gt, y_label, k=3)", "\n", "# p_5 = precision_at_k(y_gt, y_label, k=5)", "\n", "", "f1", "=", "f1", "(", "y_gt", ",", "y_pred", ")", "\n", "# prauc = precision_auc(y_gt, y_prob)", "\n", "ja", "=", "jaccard", "(", "y_gt", ",", "y_label", ")", "\n", "avg_prc", "=", "average_prc", "(", "y_gt", ",", "y_label", ")", "\n", "avg_recall", "=", "average_recall", "(", "y_gt", ",", "y_label", ")", "\n", "avg_f1", "=", "average_f1", "(", "avg_prc", ",", "avg_recall", ")", "\n", "\n", "return", "ja", ",", "np", ".", "mean", "(", "avg_prc", ")", ",", "np", ".", "mean", "(", "avg_recall", ")", ",", "np", ".", "mean", "(", "avg_f1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.util.multi_label_metric": [[243, 335], ["util.sequence_metric.precision_at_k"], "function", ["None"], ["", "def", "multi_label_metric", "(", "y_gt", ",", "y_pred", ",", "y_prob", ")", ":", "\n", "\n", "    ", "def", "jaccard", "(", "y_gt", ",", "y_pred", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "y_gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "target", "=", "np", ".", "where", "(", "y_gt", "[", "b", "]", "==", "1", ")", "[", "0", "]", "\n", "out_list", "=", "np", ".", "where", "(", "y_pred", "[", "b", "]", "==", "1", ")", "[", "0", "]", "\n", "inter", "=", "set", "(", "out_list", ")", "&", "set", "(", "target", ")", "\n", "union", "=", "set", "(", "out_list", ")", "|", "set", "(", "target", ")", "\n", "jaccard_score", "=", "0", "if", "union", "==", "0", "else", "len", "(", "inter", ")", "/", "len", "(", "union", ")", "\n", "score", ".", "append", "(", "jaccard_score", ")", "\n", "", "return", "np", ".", "mean", "(", "score", ")", "\n", "\n", "", "def", "average_prc", "(", "y_gt", ",", "y_pred", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "y_gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "target", "=", "np", ".", "where", "(", "y_gt", "[", "b", "]", "==", "1", ")", "[", "0", "]", "\n", "out_list", "=", "np", ".", "where", "(", "y_pred", "[", "b", "]", "==", "1", ")", "[", "0", "]", "\n", "inter", "=", "set", "(", "out_list", ")", "&", "set", "(", "target", ")", "\n", "prc_score", "=", "0", "if", "len", "(", "out_list", ")", "==", "0", "else", "len", "(", "inter", ")", "/", "len", "(", "out_list", ")", "\n", "score", ".", "append", "(", "prc_score", ")", "\n", "", "return", "score", "\n", "\n", "", "def", "average_recall", "(", "y_gt", ",", "y_pred", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "y_gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "target", "=", "np", ".", "where", "(", "y_gt", "[", "b", "]", "==", "1", ")", "[", "0", "]", "\n", "out_list", "=", "np", ".", "where", "(", "y_pred", "[", "b", "]", "==", "1", ")", "[", "0", "]", "\n", "inter", "=", "set", "(", "out_list", ")", "&", "set", "(", "target", ")", "\n", "recall_score", "=", "0", "if", "len", "(", "target", ")", "==", "0", "else", "len", "(", "inter", ")", "/", "len", "(", "target", ")", "\n", "score", ".", "append", "(", "recall_score", ")", "\n", "", "return", "score", "\n", "\n", "", "def", "average_f1", "(", "average_prc", ",", "average_recall", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "average_prc", ")", ")", ":", "\n", "            ", "if", "average_prc", "[", "idx", "]", "+", "average_recall", "[", "idx", "]", "==", "0", ":", "\n", "                ", "score", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "score", ".", "append", "(", "2", "*", "average_prc", "[", "idx", "]", "*", "average_recall", "[", "idx", "]", "/", "(", "average_prc", "[", "idx", "]", "+", "average_recall", "[", "idx", "]", ")", ")", "\n", "", "", "return", "score", "\n", "\n", "", "def", "f1", "(", "y_gt", ",", "y_pred", ")", ":", "\n", "        ", "all_micro", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "y_gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "all_micro", ".", "append", "(", "f1_score", "(", "y_gt", "[", "b", "]", ",", "y_pred", "[", "b", "]", ",", "average", "=", "'macro'", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "all_micro", ")", "\n", "\n", "", "def", "roc_auc", "(", "y_gt", ",", "y_prob", ")", ":", "\n", "        ", "all_micro", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "len", "(", "y_gt", ")", ")", ":", "\n", "            ", "all_micro", ".", "append", "(", "roc_auc_score", "(", "y_gt", "[", "b", "]", ",", "y_prob", "[", "b", "]", ",", "average", "=", "'macro'", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "all_micro", ")", "\n", "\n", "", "def", "precision_auc", "(", "y_gt", ",", "y_prob", ")", ":", "\n", "        ", "all_micro", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "len", "(", "y_gt", ")", ")", ":", "\n", "            ", "all_micro", ".", "append", "(", "average_precision_score", "(", "y_gt", "[", "b", "]", ",", "y_prob", "[", "b", "]", ",", "average", "=", "'macro'", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "all_micro", ")", "\n", "\n", "", "def", "precision_at_k", "(", "y_gt", ",", "y_prob", ",", "k", "=", "3", ")", ":", "\n", "        ", "precision", "=", "0", "\n", "sort_index", "=", "np", ".", "argsort", "(", "y_prob", ",", "axis", "=", "-", "1", ")", "[", ":", ",", ":", ":", "-", "1", "]", "[", ":", ",", ":", "k", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "y_gt", ")", ")", ":", "\n", "            ", "TP", "=", "0", "\n", "for", "j", "in", "range", "(", "len", "(", "sort_index", "[", "i", "]", ")", ")", ":", "\n", "                ", "if", "y_gt", "[", "i", ",", "sort_index", "[", "i", ",", "j", "]", "]", "==", "1", ":", "\n", "                    ", "TP", "+=", "1", "\n", "", "", "precision", "+=", "TP", "/", "len", "(", "sort_index", "[", "i", "]", ")", "\n", "", "return", "precision", "/", "len", "(", "y_gt", ")", "\n", "\n", "# roc_auc", "\n", "", "try", ":", "\n", "        ", "auc", "=", "roc_auc", "(", "y_gt", ",", "y_prob", ")", "\n", "", "except", ":", "\n", "        ", "auc", "=", "0", "\n", "# precision", "\n", "", "p_1", "=", "precision_at_k", "(", "y_gt", ",", "y_prob", ",", "k", "=", "1", ")", "\n", "p_3", "=", "precision_at_k", "(", "y_gt", ",", "y_prob", ",", "k", "=", "3", ")", "\n", "p_5", "=", "precision_at_k", "(", "y_gt", ",", "y_prob", ",", "k", "=", "5", ")", "\n", "# macro f1", "\n", "f1", "=", "f1", "(", "y_gt", ",", "y_pred", ")", "\n", "# precision", "\n", "prauc", "=", "precision_auc", "(", "y_gt", ",", "y_prob", ")", "\n", "# jaccard", "\n", "ja", "=", "jaccard", "(", "y_gt", ",", "y_pred", ")", "\n", "# pre, recall, f1", "\n", "avg_prc", "=", "average_prc", "(", "y_gt", ",", "y_pred", ")", "\n", "avg_recall", "=", "average_recall", "(", "y_gt", ",", "y_pred", ")", "\n", "avg_f1", "=", "average_f1", "(", "avg_prc", ",", "avg_recall", ")", "\n", "\n", "return", "ja", ",", "prauc", ",", "np", ".", "mean", "(", "avg_prc", ")", ",", "np", ".", "mean", "(", "avg_recall", ")", ",", "np", ".", "mean", "(", "avg_f1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.util.ddi_rate_score": [[336, 354], ["dill.load", "open", "enumerate", "enumerate"], "function", ["None"], ["", "def", "ddi_rate_score", "(", "record", ",", "path", "=", "'../data/ddi_A_final.pkl'", ")", ":", "\n", "# ddi rate", "\n", "    ", "ddi_A", "=", "dill", ".", "load", "(", "open", "(", "path", ",", "'rb'", ")", ")", "\n", "all_cnt", "=", "0", "\n", "dd_cnt", "=", "0", "\n", "for", "patient", "in", "record", ":", "\n", "        ", "for", "adm", "in", "patient", ":", "\n", "            ", "med_code_set", "=", "adm", "\n", "for", "i", ",", "med_i", "in", "enumerate", "(", "med_code_set", ")", ":", "\n", "                ", "for", "j", ",", "med_j", "in", "enumerate", "(", "med_code_set", ")", ":", "\n", "                    ", "if", "j", "<=", "i", ":", "\n", "                        ", "continue", "\n", "", "all_cnt", "+=", "1", "\n", "if", "ddi_A", "[", "med_i", ",", "med_j", "]", "==", "1", "or", "ddi_A", "[", "med_j", ",", "med_i", "]", "==", "1", ":", "\n", "                        ", "dd_cnt", "+=", "1", "\n", "", "", "", "", "", "if", "all_cnt", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "dd_cnt", "/", "all_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.util.create_atoms": [[356, 367], ["mol.GetAromaticAtoms", "numpy.array", "a.GetSymbol", "a.GetIdx", "mol.GetAtoms"], "function", ["None"], ["", "def", "create_atoms", "(", "mol", ",", "atom_dict", ")", ":", "\n", "    ", "\"\"\"Transform the atom types in a molecule (e.g., H, C, and O)\n    into the indices (e.g., H=0, C=1, and O=2).\n    Note that each atom index considers the aromaticity.\n    \"\"\"", "\n", "atoms", "=", "[", "a", ".", "GetSymbol", "(", ")", "for", "a", "in", "mol", ".", "GetAtoms", "(", ")", "]", "\n", "for", "a", "in", "mol", ".", "GetAromaticAtoms", "(", ")", ":", "\n", "        ", "i", "=", "a", ".", "GetIdx", "(", ")", "\n", "atoms", "[", "i", "]", "=", "(", "atoms", "[", "i", "]", ",", "'aromatic'", ")", "\n", "", "atoms", "=", "[", "atom_dict", "[", "a", "]", "for", "a", "in", "atoms", "]", "\n", "return", "np", ".", "array", "(", "atoms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.util.create_ijbonddict": [[368, 380], ["collections.defaultdict", "mol.GetBonds", "i_jbond_dict[].append", "i_jbond_dict[].append", "b.GetBeginAtomIdx", "b.GetEndAtomIdx", "str", "b.GetBondType"], "function", ["None"], ["", "def", "create_ijbonddict", "(", "mol", ",", "bond_dict", ")", ":", "\n", "    ", "\"\"\"Create a dictionary, in which each key is a node ID\n    and each value is the tuples of its neighboring node\n    and chemical bond (e.g., single and double) IDs.\n    \"\"\"", "\n", "i_jbond_dict", "=", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "for", "b", "in", "mol", ".", "GetBonds", "(", ")", ":", "\n", "        ", "i", ",", "j", "=", "b", ".", "GetBeginAtomIdx", "(", ")", ",", "b", ".", "GetEndAtomIdx", "(", ")", "\n", "bond", "=", "bond_dict", "[", "str", "(", "b", ".", "GetBondType", "(", ")", ")", "]", "\n", "i_jbond_dict", "[", "i", "]", ".", "append", "(", "(", "j", ",", "bond", ")", ")", "\n", "i_jbond_dict", "[", "j", "]", ".", "append", "(", "(", "i", ",", "bond", ")", ")", "\n", "", "return", "i_jbond_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.util.extract_fingerprints": [[381, 419], ["numpy.array", "range", "len", "i_jedge_dict.items", "collections.defaultdict", "i_jedge_dict.items", "nodes_.append", "tuple", "tuple", "i_jedge_dict_[].append", "sorted", "sorted"], "function", ["None"], ["", "def", "extract_fingerprints", "(", "radius", ",", "atoms", ",", "i_jbond_dict", ",", "\n", "fingerprint_dict", ",", "edge_dict", ")", ":", "\n", "    ", "\"\"\"Extract the fingerprints from a molecular graph\n    based on Weisfeiler-Lehman algorithm.\n    \"\"\"", "\n", "\n", "if", "(", "len", "(", "atoms", ")", "==", "1", ")", "or", "(", "radius", "==", "0", ")", ":", "\n", "        ", "nodes", "=", "[", "fingerprint_dict", "[", "a", "]", "for", "a", "in", "atoms", "]", "\n", "\n", "", "else", ":", "\n", "        ", "nodes", "=", "atoms", "\n", "i_jedge_dict", "=", "i_jbond_dict", "\n", "\n", "for", "_", "in", "range", "(", "radius", ")", ":", "\n", "\n", "            ", "\"\"\"Update each node ID considering its neighboring nodes and edges.\n            The updated node IDs are the fingerprint IDs.\n            \"\"\"", "\n", "nodes_", "=", "[", "]", "\n", "for", "i", ",", "j_edge", "in", "i_jedge_dict", ".", "items", "(", ")", ":", "\n", "                ", "neighbors", "=", "[", "(", "nodes", "[", "j", "]", ",", "edge", ")", "for", "j", ",", "edge", "in", "j_edge", "]", "\n", "fingerprint", "=", "(", "nodes", "[", "i", "]", ",", "tuple", "(", "sorted", "(", "neighbors", ")", ")", ")", "\n", "nodes_", ".", "append", "(", "fingerprint_dict", "[", "fingerprint", "]", ")", "\n", "\n", "", "\"\"\"Also update each edge ID considering\n            its two nodes on both sides.\n            \"\"\"", "\n", "i_jedge_dict_", "=", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "for", "i", ",", "j_edge", "in", "i_jedge_dict", ".", "items", "(", ")", ":", "\n", "                ", "for", "j", ",", "edge", "in", "j_edge", ":", "\n", "                    ", "both_side", "=", "tuple", "(", "sorted", "(", "(", "nodes", "[", "i", "]", ",", "nodes", "[", "j", "]", ")", ")", ")", "\n", "edge", "=", "edge_dict", "[", "(", "both_side", ",", "edge", ")", "]", "\n", "i_jedge_dict_", "[", "i", "]", ".", "append", "(", "(", "j", ",", "edge", ")", ")", "\n", "\n", "", "", "nodes", "=", "nodes_", "\n", "i_jedge_dict", "=", "i_jedge_dict_", "\n", "\n", "", "", "return", "np", ".", "array", "(", "nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.util.buildMPNN": [[421, 473], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "print", "med_voc.items", "len", "sum", "len", "numpy.zeros", "enumerate", "len", "list", "average_index.append", "torch.FloatTensor", "len", "len", "len", "len", "med_voc.items", "rdkit.Chem.AddHs", "util.create_atoms", "len", "util.create_ijbonddict", "util.extract_fingerprints", "rdkit.Chem.GetAdjacencyMatrix", "range", "torch.LongTensor().to", "torch.FloatTensor().to", "MPNNSet.append", "rdkit.Chem.MolFromSmiles", "numpy.append", "torch.LongTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.create_atoms", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.create_ijbonddict", "home.repos.pwc.inspect_result.barryrun_cognet.src.util.extract_fingerprints"], ["", "def", "buildMPNN", "(", "molecule", ",", "med_voc", ",", "radius", "=", "1", ",", "device", "=", "\"cpu:0\"", ")", ":", "\n", "\n", "    ", "atom_dict", "=", "defaultdict", "(", "lambda", ":", "len", "(", "atom_dict", ")", ")", "\n", "bond_dict", "=", "defaultdict", "(", "lambda", ":", "len", "(", "bond_dict", ")", ")", "\n", "fingerprint_dict", "=", "defaultdict", "(", "lambda", ":", "len", "(", "fingerprint_dict", ")", ")", "\n", "edge_dict", "=", "defaultdict", "(", "lambda", ":", "len", "(", "edge_dict", ")", ")", "\n", "MPNNSet", ",", "average_index", "=", "[", "]", ",", "[", "]", "\n", "\n", "print", "(", "len", "(", "med_voc", ".", "items", "(", ")", ")", ")", "\n", "for", "index", ",", "ndc", "in", "med_voc", ".", "items", "(", ")", ":", "\n", "\n", "        ", "smilesList", "=", "list", "(", "molecule", "[", "ndc", "]", ")", "\n", "\n", "\"\"\"Create each data with the above defined functions.\"\"\"", "\n", "counter", "=", "0", "# counter how many drugs are under that ATC-3", "\n", "for", "smiles", "in", "smilesList", ":", "\n", "            ", "try", ":", "\n", "                ", "mol", "=", "Chem", ".", "AddHs", "(", "Chem", ".", "MolFromSmiles", "(", "smiles", ")", ")", "\n", "atoms", "=", "create_atoms", "(", "mol", ",", "atom_dict", ")", "\n", "molecular_size", "=", "len", "(", "atoms", ")", "\n", "i_jbond_dict", "=", "create_ijbonddict", "(", "mol", ",", "bond_dict", ")", "\n", "fingerprints", "=", "extract_fingerprints", "(", "radius", ",", "atoms", ",", "i_jbond_dict", ",", "\n", "fingerprint_dict", ",", "edge_dict", ")", "\n", "adjacency", "=", "Chem", ".", "GetAdjacencyMatrix", "(", "mol", ")", "\n", "# if fingerprints.shape[0] == adjacency.shape[0]:", "\n", "for", "_", "in", "range", "(", "adjacency", ".", "shape", "[", "0", "]", "-", "fingerprints", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "fingerprints", "=", "np", ".", "append", "(", "fingerprints", ",", "1", ")", "\n", "", "fingerprints", "=", "torch", ".", "LongTensor", "(", "fingerprints", ")", ".", "to", "(", "device", ")", "\n", "adjacency", "=", "torch", ".", "FloatTensor", "(", "adjacency", ")", ".", "to", "(", "device", ")", "\n", "MPNNSet", ".", "append", "(", "(", "fingerprints", ",", "adjacency", ",", "molecular_size", ")", ")", "\n", "counter", "+=", "1", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "", "average_index", ".", "append", "(", "counter", ")", "\n", "\n", "\"\"\"Transform the above each data of numpy\n        to pytorch tensor on a device (i.e., CPU or GPU).\n        \"\"\"", "\n", "\n", "", "N_fingerprint", "=", "len", "(", "fingerprint_dict", ")", "\n", "\n", "# transform into projection matrix", "\n", "n_col", "=", "sum", "(", "average_index", ")", "\n", "n_row", "=", "len", "(", "average_index", ")", "\n", "\n", "average_projection", "=", "np", ".", "zeros", "(", "(", "n_row", ",", "n_col", ")", ")", "\n", "col_counter", "=", "0", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "average_index", ")", ":", "\n", "        ", "average_projection", "[", "i", ",", "col_counter", ":", "col_counter", "+", "item", "]", "=", "1", "/", "item", "\n", "col_counter", "+=", "item", "\n", "\n", "", "return", "MPNNSet", ",", "N_fingerprint", ",", "torch", ".", "FloatTensor", "(", "average_projection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.util.output_flatten": [[476, 527], ["seq_length.sum().item", "labels.size", "max", "torch.empty().to", "torch.empty().to", "range", "range", "seq_length.sum", "sum", "range", "range", "torch.empty", "torch.empty", "range", "torch.empty().to.append", "sum", "labels[].detach().cpu().numpy", "torch.empty().to.append", "torch.empty().to.append", "logits[].detach().cpu().numpy", "labels[].detach().cpu", "logits[].detach().cpu", "labels[].detach", "logits[].detach"], "function", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "output_flatten", "(", "labels", ",", "logits", ",", "seq_length", ",", "m_length_matrix", ",", "med_num", ",", "END_TOKEN", ",", "device", ",", "training", "=", "True", ",", "testing", "=", "False", ",", "max_len", "=", "20", ")", ":", "\n", "    ", "'''\n    labels: [batch_size, visit_num, medication_num]\n    logits: [batch_size, visit_num, max_med_num, medication_vocab_size]\n    '''", "\n", "# \u5c06\u6700\u7ec8\u591a\u4e2a\u7ef4\u5ea6\u7684\u7ed3\u679c\u5c55\u5f00", "\n", "batch_size", ",", "max_seq_length", "=", "labels", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "assert", "max_seq_length", "==", "max", "(", "seq_length", ")", "\n", "whole_seqs_num", "=", "seq_length", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "training", ":", "\n", "        ", "whole_med_sum", "=", "sum", "(", "[", "sum", "(", "buf", ")", "for", "buf", "in", "m_length_matrix", "]", ")", "+", "whole_seqs_num", "# \u56e0\u4e3a\u6bcf\u4e00\u4e2aseq\u540e\u9762\u4f1a\u591a\u4e00\u4e2aEND_TOKEN", "\n", "\n", "# \u5c06\u7ed3\u679c\u5c55\u5f00\uff0c\u7136\u540e\u7528\u5e93\u51fd\u6570\u8fdb\u884c\u8ba1\u7b97", "\n", "labels_flatten", "=", "torch", ".", "empty", "(", "whole_med_sum", ")", ".", "to", "(", "device", ")", "\n", "logits_flatten", "=", "torch", ".", "empty", "(", "whole_med_sum", ",", "med_num", ")", ".", "to", "(", "device", ")", "\n", "\n", "start_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "# \u6bcf\u4e2abatch", "\n", "            ", "for", "j", "in", "range", "(", "seq_length", "[", "i", "]", ")", ":", "# seq_length[i]\u6307\u8fd9\u4e2abatch\u5bf9\u5e94\u7684seq\u6570\u76ee", "\n", "                ", "for", "k", "in", "range", "(", "m_length_matrix", "[", "i", "]", "[", "j", "]", "+", "1", ")", ":", "# m_length_matrix[i][j]\u5bf9\u5e94seq\u4e2dmed\u7684\u6570\u76ee", "\n", "                    ", "if", "k", "==", "m_length_matrix", "[", "i", "]", "[", "j", "]", ":", "# \u6700\u540e\u4e00\u4e2alabel\u6307\u5b9a\u4e3aEND_TOKEN", "\n", "                        ", "labels_flatten", "[", "start_idx", "]", "=", "END_TOKEN", "\n", "", "else", ":", "\n", "                        ", "labels_flatten", "[", "start_idx", "]", "=", "labels", "[", "i", ",", "j", ",", "k", "]", "\n", "", "logits_flatten", "[", "start_idx", ",", ":", "]", "=", "logits", "[", "i", ",", "j", ",", "k", ",", ":", "]", "\n", "start_idx", "+=", "1", "\n", "", "", "", "return", "labels_flatten", ",", "logits_flatten", "\n", "", "else", ":", "\n", "# \u5c06\u7ed3\u679c\u6309\u7167adm\u5c55\u5f00\uff0c\u7136\u540e\u7528\u5e93\u51fd\u6570\u8fdb\u884c\u8ba1\u7b97", "\n", "        ", "labels_flatten", "=", "[", "]", "\n", "logits_flatten", "=", "[", "]", "\n", "\n", "start_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "# \u6bcf\u4e2abatch", "\n", "            ", "for", "j", "in", "range", "(", "seq_length", "[", "i", "]", ")", ":", "# seq_length[i]\u6307\u8fd9\u4e2abatch\u5bf9\u5e94\u7684seq\u6570\u76ee", "\n", "                ", "labels_flatten", ".", "append", "(", "labels", "[", "i", ",", "j", ",", ":", "m_length_matrix", "[", "i", "]", "[", "j", "]", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "testing", ":", "\n", "                    ", "logits_flatten", ".", "append", "(", "logits", "[", "j", "]", ")", "# beam search\u76ee\u524d\u76f4\u63a5\u7ed9\u51fa\u4e86\u9884\u6d4b\u7ed3\u679c", "\n", "", "else", ":", "\n", "                    ", "logits_flatten", ".", "append", "(", "logits", "[", "i", ",", "j", ",", ":", "max_len", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "# \u6ce8\u610f\u8fd9\u91cc\u624b\u52a8\u5b9a\u4e49\u4e86max_len", "\n", "# cur_label = []", "\n", "# cur_seq_length = []", "\n", "# for k in range(m_length_matrix[i][j]+1):  # m_length_matrix[i][j]\u5bf9\u5e94seq\u4e2dmed\u7684\u6570\u76ee", "\n", "#     if k==m_length_matrix[i][j]:    # \u6700\u540e\u4e00\u4e2alabel\u6307\u5b9a\u4e3aEND_TOKEN", "\n", "#         continue", "\n", "#     else:", "\n", "#         labels_flatten[start_idx] = labels[i, j, k]", "\n", "#     logits_flatten[start_idx, :] = logits[i, j, k, :med_num]", "\n", "#     start_idx += 1", "\n", "", "", "", "return", "labels_flatten", ",", "logits_flatten", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.util.print_result": [[529, 538], ["str", "str"], "function", ["None"], ["", "", "def", "print_result", "(", "label", ",", "prediction", ")", ":", "\n", "    ", "'''\n    label: [real_med_num, ]\n    logits: [20, med_vocab_size]\n    '''", "\n", "label_text", "=", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "label", "]", ")", "\n", "predict_text", "=", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "prediction", "]", ")", "\n", "\n", "return", "\"[GT]\\t{}\\n[PR]\\t{}\\n\\n\"", ".", "format", "(", "label_text", ",", "predict_text", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.__init__": [[16, 109], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "COGNet_model.GCN", "torch.Parameter", "torch.Parameter", "torch.Parameter", "layers.SelfAttend", "layers.SelfAttend", "COGNet_model.MedTransformerDecoder", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "COGNet_model.MaskLinear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Linear", "torch.Linear", "torch.Linear", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["def", "__init__", "(", "self", ",", "voc_size", ",", "ehr_adj", ",", "ddi_adj", ",", "ddi_mask_H", ",", "emb_dim", "=", "64", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "COGNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "voc_size", "=", "voc_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "nhead", "=", "2", "\n", "self", ".", "SOS_TOKEN", "=", "voc_size", "[", "2", "]", "# start of sentence", "\n", "self", ".", "END_TOKEN", "=", "voc_size", "[", "2", "]", "+", "1", "# end   \u65b0\u589e\u7684\u4e24\u4e2a\u7f16\u7801\uff0c\u4e24\u8005\u5747\u662f\u9488\u5bf9\u4e8e\u836f\u7269\u7684embedding", "\n", "self", ".", "MED_PAD_TOKEN", "=", "voc_size", "[", "2", "]", "+", "2", "# \u7528\u4e8eembedding\u77e9\u9635\u4e2d\u7684padding\uff08\u5168\u4e3a0\uff09", "\n", "self", ".", "DIAG_PAD_TOKEN", "=", "voc_size", "[", "0", "]", "+", "2", "\n", "self", ".", "PROC_PAD_TOKEN", "=", "voc_size", "[", "1", "]", "+", "2", "\n", "\n", "self", ".", "tensor_ddi_mask_H", "=", "torch", ".", "FloatTensor", "(", "ddi_mask_H", ")", ".", "to", "(", "device", ")", "\n", "\n", "# dig_num * emb_dim", "\n", "self", ".", "diag_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "0", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "DIAG_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# proc_num * emb_dim", "\n", "self", ".", "proc_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "1", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "PROC_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# med_num * emb_dim", "\n", "self", ".", "med_embedding", "=", "nn", ".", "Sequential", "(", "\n", "# \u6dfb\u52a0padding_idx\uff0c\u8868\u793a\u53d60\u5411\u91cf", "\n", "nn", ".", "Embedding", "(", "voc_size", "[", "2", "]", "+", "3", ",", "emb_dim", ",", "self", ".", "MED_PAD_TOKEN", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", "\n", ")", "\n", "\n", "# \u7528\u4e8e\u5bf9\u4e0a\u4e00\u4e2avisit\u7684medication\u8fdb\u884c\u7f16\u7801", "\n", "# self.medication_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)", "\n", "self", ".", "medication_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "# \u7528\u4e8e\u5bf9\u5f53\u524dvisit\u7684\u75be\u75c5\u4e0e\u75c7\u72b6\u8fdb\u884c\u7f16\u7801", "\n", "# self.diagnoses_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)", "\n", "# self.procedure_encoder = nn.TransformerEncoderLayer(emb_dim, self.nhead, dim_feedforward=emb_dim*8, batch_first=True, dropout=0.2)        ", "\n", "self", ".", "diagnoses_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "self", ".", "procedure_encoder", "=", "nn", ".", "TransformerEncoderLayer", "(", "emb_dim", ",", "self", ".", "nhead", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "# self.enc_gru = nn.GRU(emb_dim, emb_dim, batch_first=True, bidirectional=True)", "\n", "\n", "# self.ehr_gcn = GCN(", "\n", "#     voc_size=voc_size[2], emb_dim=emb_dim, adj=ehr_adj, device=device)", "\n", "# self.ddi_gcn = GCN(", "\n", "#     voc_size=voc_size[2], emb_dim=emb_dim, adj=ddi_adj, device=device)", "\n", "self", ".", "tensor_ddi_adj", "=", "torch", ".", "FloatTensor", "(", "ddi_adj", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "gcn", "=", "GCN", "(", "voc_size", "=", "voc_size", "[", "2", "]", ",", "emb_dim", "=", "emb_dim", ",", "ehr_adj", "=", "ehr_adj", ",", "ddi_adj", "=", "ddi_adj", ",", "device", "=", "device", ")", "\n", "self", ".", "inter", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ")", "\n", "\n", "# \u805a\u5408\u5355\u4e2avisit\u5185\u7684diag\u548cproc\u5f97\u5230visit-level\u7684\u8868\u8fbe", "\n", "self", ".", "diag_self_attend", "=", "SelfAttend", "(", "emb_dim", ")", "\n", "self", ".", "proc_self_attend", "=", "SelfAttend", "(", "emb_dim", ")", "\n", "\n", "self", ".", "decoder", "=", "MedTransformerDecoder", "(", "emb_dim", ",", "self", ".", "nhead", ",", "dim_feedforward", "=", "emb_dim", "*", "2", ",", "dropout", "=", "0.2", ",", "\n", "layer_norm_eps", "=", "1e-5", ")", "\n", "\n", "# \u7528\u4e8e\u5bf9\u6bcf\u4e00\u4e2avisit\u7684diagnoses\u8fdb\u884c\u7f16\u7801", "\n", "\n", "# \u7528\u4e8e\u751f\u6210\u836f\u7269\u5e8f\u5217", "\n", "self", ".", "dec_gru", "=", "nn", ".", "GRU", "(", "emb_dim", "*", "3", ",", "emb_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "diag_attn", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "W_diag_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_diff_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_diff_proc_attn", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n", "# weights", "\n", "self", ".", "Ws", "=", "nn", ".", "Linear", "(", "emb_dim", "*", "2", ",", "emb_dim", ")", "# only used at initial stage", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "voc_size", "[", "2", "]", "+", "2", ")", "# generate mode", "\n", "# self.Wc = nn.Linear(emb_dim*2, emb_dim)  # copy mode", "\n", "self", ".", "Wc", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "# copy mode", "\n", "\n", "self", ".", "W_dec", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_stay", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_dec", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "W_proc_stay", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n", "# swtich network to calculate generate probablity", "\n", "self", ".", "W_z", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "1", ")", "\n", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0.3", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "# bipartite local embedding", "\n", "self", ".", "bipartite_transform", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "emb_dim", ",", "ddi_mask_H", ".", "shape", "[", "1", "]", ")", "\n", ")", "\n", "self", ".", "bipartite_output", "=", "MaskLinear", "(", "\n", "ddi_mask_H", ".", "shape", "[", "1", "]", ",", "voc_size", "[", "2", "]", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.encode": [[110, 159], ["medications.size", "COGNet_model.COGNet.diag_embedding().view", "COGNet_model.COGNet.proc_embedding().view", "d_mask_matrix.view().unsqueeze().unsqueeze().repeat", "d_enc_mask_matrix.view.view.view", "p_mask_matrix.view().unsqueeze().unsqueeze().repeat", "p_enc_mask_matrix.view.view.view", "COGNet_model.COGNet.diagnoses_encoder().view", "COGNet_model.COGNet.procedure_encoder().view", "COGNet_model.COGNet.diag_self_attend", "COGNet_model.COGNet.proc_self_attend", "visit_diag_embedding.view.view.view", "visit_proc_embedding.view.view.view", "COGNet_model.COGNet.calc_cross_visit_scores", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "COGNet_model.COGNet.med_embedding", "torch.cat.view().unsqueeze().unsqueeze().repeat", "torch.cat.view().unsqueeze().unsqueeze().repeat", "torch.cat.view().unsqueeze().unsqueeze().repeat", "last_m_enc_mask.view.view.view", "COGNet_model.COGNet.medication_encoder", "encoded_medication.view.view.view", "COGNet_model.COGNet.gcn", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "diseases.size", "procedures.size", "COGNet_model.COGNet.view", "d_mask_matrix.view", "COGNet_model.COGNet.view", "p_mask_matrix.view", "COGNet_model.COGNet.view", "COGNet_model.COGNet.diag_embedding", "COGNet_model.COGNet.proc_embedding", "d_mask_matrix.view().unsqueeze().unsqueeze", "p_mask_matrix.view().unsqueeze().unsqueeze", "COGNet_model.COGNet.diagnoses_encoder", "COGNet_model.COGNet.procedure_encoder", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.cat.view().unsqueeze().unsqueeze", "torch.cat.view().unsqueeze().unsqueeze", "torch.cat.view().unsqueeze().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "d_mask_matrix.view().unsqueeze", "p_mask_matrix.view().unsqueeze", "torch.cat.view().unsqueeze", "torch.cat.view().unsqueeze", "torch.cat.view().unsqueeze", "d_mask_matrix.view", "p_mask_matrix.view", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.calc_cross_visit_scores"], ["", "def", "encode", "(", "self", ",", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# batch\u7ef4\u5ea6\u4ee5\u53caseq\u7ef4\u5ea6\u4e0a\u5e76\u884c\u8ba1\u7b97\uff08\u73b0\u5728\u4e0d\u8003\u8651\u65f6\u95f4\u5e8f\u5217\u4fe1\u606f\uff09\uff0c\u6bcf\u4e00\u4e2amedication\u5e8f\u5217\u4ecd\u7136\u6309\u987a\u5e8f\u9884\u6d4b", "\n", "batch_size", ",", "max_visit_num", ",", "max_med_num", "=", "medications", ".", "size", "(", ")", "\n", "max_diag_num", "=", "diseases", ".", "size", "(", ")", "[", "2", "]", "\n", "max_proc_num", "=", "procedures", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "############################ \u6570\u636e\u9884\u5904\u7406 #########################", "\n", "# 1. \u5bf9\u5f53\u524d\u7684disease\u4e0eprocedure\u8fdb\u884c\u7f16\u7801", "\n", "input_disease_embdding", "=", "self", ".", "diag_embedding", "(", "diseases", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "self", ".", "emb_dim", ")", "# [batch, seq, max_diag_num, emb]", "\n", "input_proc_embedding", "=", "self", ".", "proc_embedding", "(", "procedures", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "self", ".", "emb_dim", ")", "# [batch, seq, max_proc_num, emb]", "\n", "d_enc_mask_matrix", "=", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_diag_num", ",", "1", ")", "# [batch*seq, nhead, input_length, output_length]", "\n", "d_enc_mask_matrix", "=", "d_enc_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_diag_num", ",", "max_diag_num", ")", "\n", "p_enc_mask_matrix", "=", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_proc_num", ",", "1", ")", "\n", "p_enc_mask_matrix", "=", "p_enc_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_proc_num", ",", "max_proc_num", ")", "\n", "input_disease_embdding", "=", "self", ".", "diagnoses_encoder", "(", "input_disease_embdding", ",", "src_mask", "=", "d_enc_mask_matrix", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_diag_num", ",", "self", ".", "emb_dim", ")", "\n", "input_proc_embedding", "=", "self", ".", "procedure_encoder", "(", "input_proc_embedding", ",", "src_mask", "=", "p_enc_mask_matrix", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_proc_num", ",", "self", ".", "emb_dim", ")", "\n", "\n", "# 1.1 encode visit-level diag and proc representations", "\n", "visit_diag_embedding", "=", "self", ".", "diag_self_attend", "(", "input_disease_embdding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "-", "1", ")", ",", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "-", "1", ")", ")", "\n", "visit_proc_embedding", "=", "self", ".", "proc_self_attend", "(", "input_proc_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "-", "1", ")", ",", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "-", "1", ")", ")", "\n", "visit_diag_embedding", "=", "visit_diag_embedding", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "-", "1", ")", "\n", "visit_proc_embedding", "=", "visit_proc_embedding", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "-", "1", ")", "\n", "\n", "# 1.3 \u8ba1\u7b97 visit-level\u7684attention score", "\n", "# [batch_size, max_visit_num, max_visit_num]", "\n", "cross_visit_scores", "=", "self", ".", "calc_cross_visit_scores", "(", "visit_diag_embedding", ",", "visit_proc_embedding", ")", "\n", "\n", "\n", "# 3. \u6784\u9020\u4e00\u4e2alast_seq_medication\uff0c\u8868\u793a\u4e0a\u4e00\u6b21visit\u7684medication\uff0c\u7b2c\u4e00\u6b21\u7684\u7531\u4e8e\u6ca1\u6709\u4e0a\u4e00\u6b21medication\uff0c\u75280\u586b\u8865\uff08\u7528\u5565\u586b\u8865\u90fd\u884c\uff0c\u53cd\u6b63\u4e0d\u4f1a\u7528\u5230\uff09", "\n", "last_seq_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ",", "max_med_num", ")", ",", "0", ")", ".", "to", "(", "device", ")", "\n", "last_seq_medication", "=", "torch", ".", "cat", "(", "[", "last_seq_medication", ",", "medications", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "# m_mask_matrix\u77e9\u9635\u540c\u6837\u4e5f\u9700\u8981\u540e\u79fb", "\n", "last_m_mask", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ",", "max_med_num", ")", ",", "-", "1e9", ")", ".", "to", "(", "device", ")", "# \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "last_m_mask", "=", "torch", ".", "cat", "(", "[", "last_m_mask", ",", "m_mask_matrix", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "# \u5bf9last_seq_medication\u8fdb\u884c\u7f16\u7801", "\n", "last_seq_medication_emb", "=", "self", ".", "med_embedding", "(", "last_seq_medication", ")", "\n", "last_m_enc_mask", "=", "last_m_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "last_m_enc_mask", "=", "last_m_enc_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_med_num", ")", "\n", "encoded_medication", "=", "self", ".", "medication_encoder", "(", "last_seq_medication_emb", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "self", ".", "emb_dim", ")", ",", "src_mask", "=", "last_m_enc_mask", ")", "# (batch*seq, max_med_num, emb_dim)", "\n", "encoded_medication", "=", "encoded_medication", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "self", ".", "emb_dim", ")", "\n", "\n", "# vocab_size, emb_size", "\n", "ehr_embedding", ",", "ddi_embedding", "=", "self", ".", "gcn", "(", ")", "\n", "drug_memory", "=", "ehr_embedding", "-", "ddi_embedding", "*", "self", ".", "inter", "\n", "drug_memory_padding", "=", "torch", ".", "zeros", "(", "(", "3", ",", "self", ".", "emb_dim", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "drug_memory", "=", "torch", ".", "cat", "(", "[", "drug_memory", ",", "drug_memory_padding", "]", ",", "dim", "=", "0", ")", "\n", "\n", "return", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "cross_visit_scores", ",", "last_seq_medication", ",", "last_m_mask", ",", "drug_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.decode": [[160, 221], ["input_medications.size", "input_medications.size", "input_medications.size", "input_disease_embedding.size", "input_proc_embedding.size", "COGNet_model.COGNet.med_embedding().view", "drug_memory[].view", "COGNet_model.COGNet.view().unsqueeze().unsqueeze().repeat", "COGNet_model.COGNet.view", "d_mask_matrix.view().unsqueeze().unsqueeze().repeat", "m2d_mask_matrix.view.view.view", "p_mask_matrix.view().unsqueeze().unsqueeze().repeat", "m2p_mask_matrix.view.view.view", "COGNet_model.COGNet.decoder", "COGNet_model.COGNet.Wo", "score_g.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "COGNet_model.COGNet.copy_med", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "torch.zeros_like().to().view", "last_medications.view().repeat", "prob_c_to_g.view.view.scatter_add_", "prob_c_to_g.view.view.view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "COGNet_model.COGNet.view", "COGNet_model.COGNet.med_embedding", "COGNet_model.COGNet.view().unsqueeze().unsqueeze", "d_mask_matrix.view().unsqueeze().unsqueeze", "p_mask_matrix.view().unsqueeze().unsqueeze", "input_disease_embedding.view", "input_proc_embedding.view", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "last_medications.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "COGNet_model.COGNet.W_z", "COGNet_model.COGNet.view().unsqueeze", "d_mask_matrix.view().unsqueeze", "p_mask_matrix.view().unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "COGNet_model.COGNet.view", "d_mask_matrix.view", "p_mask_matrix.view"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.copy_med"], ["", "def", "decode", "(", "self", ",", "input_medications", ",", "input_disease_embedding", ",", "input_proc_embedding", ",", "last_medication_embedding", ",", "last_medications", ",", "cross_visit_scores", ",", "\n", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "last_m_mask", ",", "drug_memory", ")", ":", "\n", "        ", "\"\"\"\n        input_medications: [batch_size, max_visit_num, max_med_num + 1], \u5f00\u5934\u5305\u542b\u4e86 SOS_TOKEN\n        \"\"\"", "\n", "batch_size", "=", "input_medications", ".", "size", "(", "0", ")", "\n", "max_visit_num", "=", "input_medications", ".", "size", "(", "1", ")", "\n", "max_med_num", "=", "input_medications", ".", "size", "(", "2", ")", "\n", "max_diag_num", "=", "input_disease_embedding", ".", "size", "(", "2", ")", "\n", "max_proc_num", "=", "input_proc_embedding", ".", "size", "(", "2", ")", "\n", "\n", "input_medication_embs", "=", "self", ".", "med_embedding", "(", "input_medications", ")", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "# input_medication_embs = self.dropout_emb(input_medication_embs)", "\n", "input_medication_memory", "=", "drug_memory", "[", "input_medications", "]", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "\n", "# m_sos_mask = torch.zeros((batch_size, max_visit_num, 1), device=self.device).float() # \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "m_self_mask", "=", "m_mask_matrix", "\n", "\n", "last_m_enc_mask", "=", "m_self_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_med_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "medication_self_mask", "=", "last_m_enc_mask", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_med_num", ")", "\n", "m2d_mask_matrix", "=", "d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "m2d_mask_matrix", "=", "m2d_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_diag_num", ")", "\n", "m2p_mask_matrix", "=", "p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nhead", ",", "max_med_num", ",", "1", ")", "\n", "m2p_mask_matrix", "=", "m2p_mask_matrix", ".", "view", "(", "batch_size", "*", "max_visit_num", "*", "self", ".", "nhead", ",", "max_med_num", ",", "max_proc_num", ")", "\n", "\n", "dec_hidden", "=", "self", ".", "decoder", "(", "input_medication_embedding", "=", "input_medication_embs", ",", "input_medication_memory", "=", "input_medication_memory", ",", "\n", "input_disease_embdding", "=", "input_disease_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_diag_num", ",", "-", "1", ")", ",", "\n", "input_proc_embedding", "=", "input_proc_embedding", ".", "view", "(", "batch_size", "*", "max_visit_num", ",", "max_proc_num", ",", "-", "1", ")", ",", "\n", "input_medication_self_mask", "=", "medication_self_mask", ",", "\n", "d_mask", "=", "m2d_mask_matrix", ",", "\n", "p_mask", "=", "m2p_mask_matrix", ")", "\n", "\n", "score_g", "=", "self", ".", "Wo", "(", "dec_hidden", ")", "# (batch * max_visit_num, max_med_num, voc_size[2]+2)", "\n", "score_g", "=", "score_g", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "prob_g", "=", "F", ".", "softmax", "(", "score_g", ",", "dim", "=", "-", "1", ")", "\n", "score_c", "=", "self", ".", "copy_med", "(", "dec_hidden", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", ",", "last_medication_embedding", ",", "last_m_mask", ",", "cross_visit_scores", ")", "\n", "# (batch_size, max_visit_num * input_med_num, max_visit_num * max_med_num)", "\n", "\n", "###### case study", "\n", "# \u8fd9\u91cc\u524d\u63d0\u662fbatch_size\u7b49\u4e8e1", "\n", "# \u51e0\u4e2a\u53d6\u503c\u7684\u8bf4\u660e\uff1a", "\n", "#   1.\u53d6\u6700\u65b0\u751f\u6210\u7684\u836f\u7269\u5bf9\u4e8e\u5386\u53f2\u836f\u7269\u7684attention\u503c\uff0c\u6240\u4ee5\u7b2c\u4e09\u7ef4\u5ea6\u4e3a-1", "\n", "#   2.\u53d6\u7b2c\u6700\u540e\u4e00\u4e2avisit\u7684copy\u503c\uff0c\u6240\u4ee5\u7b2c\u4e8c\u7ef4\u5ea6\u4e3a-1", "\n", "#   3.\u53d6\u6700\u540e\u4e00\u4e2avisit\u5bf9\u5012\u6570\u7b2c\u4e8c\u4e2avisit\u7684\u836f\u7269\u7684attention\u503c\uff0c\u6240\u4ee5\u7b2c\u56db\u7ef4\u5ea6\u53d6\u6700\u540emax_med_num\u4e2a", "\n", "# score_c_buf = score_c.view(batch_size, max_visit_num, max_med_num, -1)", "\n", "# score_c_buf = score_c_buf[0, -1, -1, :] # visit_num * (visit_num * max_med_num)", "\n", "# max_med_num_in_last = len(score_c_buf) // max_visit_num", "\n", "# print(score_c_buf[-max_med_num_in_last:])", "\n", "prob_c_to_g", "=", "torch", ".", "zeros_like", "(", "prob_g", ")", ".", "to", "(", "self", ".", "device", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", "*", "max_med_num", ",", "-", "1", ")", "# (batch, max_visit_num * input_med_num, voc_size[2]+2)", "\n", "\n", "# \u7528scatter\u64cd\u4f5c\u4ee3\u66ff\u5d4c\u5957\u5faa\u73af", "\n", "# \u6839\u636elast_seq_medication\u4e2d\u7684indice\uff0c\u5c06score_c\u4e2d\u7684\u503c\u52a0\u5230score_c_to_g\u4e2d\u53bb", "\n", "copy_source", "=", "last_medications", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "max_visit_num", "*", "max_med_num", ",", "1", ")", "\n", "prob_c_to_g", ".", "scatter_add_", "(", "2", ",", "copy_source", ",", "score_c", ")", "\n", "prob_c_to_g", "=", "prob_c_to_g", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "-", "1", ")", "\n", "\n", "generate_prob", "=", "F", ".", "sigmoid", "(", "self", ".", "W_z", "(", "dec_hidden", ")", ")", ".", "view", "(", "batch_size", ",", "max_visit_num", ",", "max_med_num", ",", "1", ")", "\n", "prob", "=", "prob_g", "*", "generate_prob", "+", "prob_c_to_g", "*", "(", "1.", "-", "generate_prob", ")", "\n", "prob", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "prob_g", "[", ":", ",", "0", ",", ":", ",", ":", "]", "# \u7b2c\u4e00\u4e2aseq\u7531\u4e8e\u6ca1\u6709last_medication\u4fe1\u606f\uff0c\u4ec5\u53d6prob_g\u7684\u6982\u7387", "\n", "\n", "return", "torch", ".", "log", "(", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.forward": [[223, 252], ["medications.size", "COGNet_model.COGNet.encode", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "COGNet_model.COGNet.decode", "diseases.size", "procedures.size", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.encode", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.decode"], ["", "def", "forward", "(", "self", ",", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "# batch\u7ef4\u5ea6\u4ee5\u53caseq\u7ef4\u5ea6\u4e0a\u5e76\u884c\u8ba1\u7b97\uff08\u73b0\u5728\u4e0d\u8003\u8651\u65f6\u95f4\u5e8f\u5217\u4fe1\u606f\uff09\uff0c\u6bcf\u4e00\u4e2amedication\u5e8f\u5217\u4ecd\u7136\u6309\u987a\u5e8f\u9884\u6d4b", "\n", "batch_size", ",", "max_seq_length", ",", "max_med_num", "=", "medications", ".", "size", "(", ")", "\n", "max_diag_num", "=", "diseases", ".", "size", "(", ")", "[", "2", "]", "\n", "max_proc_num", "=", "procedures", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "cross_visit_scores", ",", "last_seq_medication", ",", "last_m_mask", ",", "drug_memory", "=", "self", ".", "encode", "(", "diseases", ",", "procedures", ",", "medications", ",", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "\n", "seq_length", ",", "dec_disease", ",", "stay_disease", ",", "dec_disease_mask", ",", "stay_disease_mask", ",", "dec_proc", ",", "stay_proc", ",", "dec_proc_mask", ",", "stay_proc_mask", ",", "max_len", "=", "20", ")", "\n", "\n", "# 4. \u6784\u9020\u7ed9decoder\u7684medications\uff0c\u7528\u4e8edecoding\u8fc7\u7a0b\u4e2d\u7684teacher forcing\uff0c\u6ce8\u610f\u7ef4\u5ea6\u4e0a\u589e\u52a0\u4e86\u4e00\u7ef4\uff0c\u56e0\u4e3a\u4f1a\u591a\u751f\u6210\u4e00\u4e2aEND_TOKEN", "\n", "input_medication", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "max_seq_length", ",", "1", ")", ",", "self", ".", "SOS_TOKEN", ")", ".", "to", "(", "device", ")", "# [batch_size, seq, 1]", "\n", "input_medication", "=", "torch", ".", "cat", "(", "[", "input_medication", ",", "medications", "]", ",", "dim", "=", "2", ")", "# [batch_size, seq, max_med_num + 1]", "\n", "\n", "m_sos_mask", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "max_seq_length", ",", "1", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "# \u8fd9\u91cc\u7528\u8f83\u5927\u8d1f\u503c\uff0c\u907f\u514dsoftmax\u4e4b\u540e\u5206\u8d70\u4e86\u6982\u7387", "\n", "m_mask_matrix", "=", "torch", ".", "cat", "(", "[", "m_sos_mask", ",", "m_mask_matrix", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "output_logits", "=", "self", ".", "decode", "(", "input_medication", ",", "input_disease_embdding", ",", "input_proc_embedding", ",", "encoded_medication", ",", "last_seq_medication", ",", "cross_visit_scores", ",", "\n", "d_mask_matrix", ",", "p_mask_matrix", ",", "m_mask_matrix", ",", "last_m_mask", ",", "drug_memory", ")", "\n", "\n", "# 5. \u52a0\u5165ddi loss", "\n", "# output_logits_part = torch.exp(output_logits[:, :, :, :-2] + m_mask_matrix.unsqueeze(-1))    # \u53bb\u6389SOS\u4e0eEOS", "\n", "# output_logits_part = torch.mean(output_logits_part, dim=2)", "\n", "# neg_pred_prob1 = output_logits_part.unsqueeze(-1)", "\n", "# neg_pred_prob2 = output_logits_part.unsqueeze(-2)", "\n", "# neg_pred_prob = neg_pred_prob1 * neg_pred_prob2 # bach * seq * max_med_num * all_med_num * all_med_num", "\n", "# batch_neg = 0.0005 * neg_pred_prob.mul(self.tensor_ddi_adj).sum()", "\n", "# return output_logits, batch_neg", "\n", "return", "output_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.calc_cross_visit_scores": [[253, 287], ["visit_diag_embedding.size", "visit_diag_embedding.size", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "visit_diag_embedding.size", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "visit_proc_embedding.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.unsqueeze().repeat.unsqueeze().repeat.float"], "methods", ["None"], ["", "def", "calc_cross_visit_scores", "(", "self", ",", "visit_diag_embedding", ",", "visit_proc_embedding", ")", ":", "\n", "        ", "\"\"\"\n        visit_diag_embedding: (batch * visit_num * emb)\n        visit_proc_embedding: (batch * visit_num * emb)\n        \"\"\"", "\n", "max_visit_num", "=", "visit_diag_embedding", ".", "size", "(", "1", ")", "\n", "batch_size", "=", "visit_diag_embedding", ".", "size", "(", "0", ")", "\n", "\n", "# mask\u8868\u793a\u6bcf\u4e2avisit\u53ea\u80fd\u770b\u5230\u81ea\u5df1\u4e4b\u524d\u7684visit", "\n", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "(", "max_visit_num", ",", "max_visit_num", ")", ",", "device", "=", "self", ".", "device", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "# \u4e0b\u4e09\u89d2\u77e9\u9635", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "# batch * max_visit_num * max_visit_num", "\n", "\n", "# \u6bcf\u4e2avisit\u540e\u79fb\u4e00\u4f4d", "\n", "padding", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "1", ",", "self", ".", "emb_dim", ")", ",", "device", "=", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "diag_keys", "=", "torch", ".", "cat", "(", "[", "padding", ",", "visit_diag_embedding", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "# batch * max_visit_num * emb", "\n", "proc_keys", "=", "torch", ".", "cat", "(", "[", "padding", ",", "visit_proc_embedding", "[", ":", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# \u5f97\u5230\u6bcf\u4e2avisit\u8ddf\u81ea\u5df1\u524d\u9762\u6240\u6709visit\u7684score", "\n", "diag_scores", "=", "torch", ".", "matmul", "(", "visit_diag_embedding", ",", "diag_keys", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "visit_diag_embedding", ".", "size", "(", "-", "1", ")", ")", "\n", "proc_scores", "=", "torch", ".", "matmul", "(", "visit_proc_embedding", ",", "proc_keys", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "visit_proc_embedding", ".", "size", "(", "-", "1", ")", ")", "\n", "# 1st visit's scores is not zero!", "\n", "scores", "=", "F", ".", "softmax", "(", "diag_scores", "+", "proc_scores", "+", "mask", ",", "dim", "=", "-", "1", ")", "\n", "\n", "###### case study", "\n", "# \u5c06\u7b2c0\u4e2aval\u7f6e0\uff0c\u7136\u540e\u91cd\u65b0\u5f52\u4e00\u5316", "\n", "# scores_buf = scores", "\n", "# scores_buf[:, :, 0] = 0.", "\n", "# scores_buf = scores_buf / torch.sum(scores_buf, dim=2, keepdim=True)", "\n", "\n", "# print(scores_buf)", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.COGNet.copy_med": [[288, 315], ["decode_input_hiddens.size", "decode_input_hiddens.size", "last_medications.size", "COGNet_model.COGNet.Wc().view", "last_m_mask.view().repeat", "torch.softmax", "torch.softmax", "torch.softmax", "cross_visit_scores.repeat().view", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat().view", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp", "torch.mul().clamp.sum", "torch.mul().clamp.sum", "torch.mul().clamp.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "COGNet_model.COGNet.Wc", "last_medications.view().transpose", "last_m_mask.view", "cross_visit_scores.repeat", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "last_medications.view", "visit_scores.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum", "home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "copy_med", "(", "self", ",", "decode_input_hiddens", ",", "last_medications", ",", "last_m_mask", ",", "cross_visit_scores", ")", ":", "\n", "        ", "\"\"\"\n        decode_input_hiddens: [batch_size, max_visit_num, input_med_num, emb_size]\n        last_medications: [batch_size, max_visit_num, max_med_num, emb_size]\n        last_m_mask: [batch_size, max_visit_num, max_med_num]\n        cross_visit_scores: [batch_size, max_visit_num, max_visit_num]\n        \"\"\"", "\n", "max_visit_num", "=", "decode_input_hiddens", ".", "size", "(", "1", ")", "\n", "input_med_num", "=", "decode_input_hiddens", ".", "size", "(", "2", ")", "\n", "max_med_num", "=", "last_medications", ".", "size", "(", "2", ")", "\n", "copy_query", "=", "self", ".", "Wc", "(", "decode_input_hiddens", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "self", ".", "emb_dim", ")", "\n", "attn_scores", "=", "torch", ".", "matmul", "(", "copy_query", ",", "last_medications", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "max_med_num", ",", "self", ".", "emb_dim", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "self", ".", "emb_dim", ")", "\n", "med_mask", "=", "last_m_mask", ".", "view", "(", "-", "1", ",", "1", ",", "max_visit_num", "*", "max_med_num", ")", ".", "repeat", "(", "1", ",", "max_visit_num", "*", "input_med_num", ",", "1", ")", "\n", "# [batch_size, max_vist_num * input_med_num, max_visit_num * max_med_num]", "\n", "attn_scores", "=", "F", ".", "softmax", "(", "attn_scores", "+", "med_mask", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# (batch_size, max_visit_num * input_med_num, max_visit_num)", "\n", "visit_scores", "=", "cross_visit_scores", ".", "repeat", "(", "1", ",", "1", ",", "input_med_num", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "max_visit_num", ")", "\n", "\n", "# (batch_size, max_visit_num * input_med_num, max_visit_num * max_med_num)", "\n", "visit_scores", "=", "visit_scores", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "max_med_num", ")", ".", "view", "(", "-", "1", ",", "max_visit_num", "*", "input_med_num", ",", "max_visit_num", "*", "max_med_num", ")", "\n", "\n", "scores", "=", "torch", ".", "mul", "(", "attn_scores", ",", "visit_scores", ")", ".", "clamp", "(", "min", "=", "1e-9", ")", "\n", "row_scores", "=", "scores", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "scores", "=", "scores", "/", "row_scores", "# (batch_size, max_visit_num * input_med_num, max_visit_num * max_med_num)", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder.__init__": [[318, 338], ["torch.Module.__init__", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "\n", "layer_norm_eps", "=", "1e-5", ")", "->", "None", ":", "\n", "        ", "super", "(", "MedTransformerDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "m2d_multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "m2p_multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "nhead", "=", "nhead", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder.forward": [[341, 366], ["input_medication_embedding.size", "input_medication_embedding.size", "COGNet_model.MedTransformerDecoder.generate_square_subsequent_mask", "COGNet_model.MedTransformerDecoder.norm1", "COGNet_model.MedTransformerDecoder.norm2", "COGNet_model.MedTransformerDecoder.norm3", "COGNet_model.MedTransformerDecoder._sa_block", "COGNet_model.MedTransformerDecoder._m2p_mha_block", "COGNet_model.MedTransformerDecoder._ff_block", "COGNet_model.MedTransformerDecoder._m2d_mha_block"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder.generate_square_subsequent_mask", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._sa_block", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._m2p_mha_block", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._ff_block", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._m2d_mha_block"], ["", "def", "forward", "(", "self", ",", "input_medication_embedding", ",", "input_medication_memory", ",", "input_disease_embdding", ",", "input_proc_embedding", ",", "\n", "input_medication_self_mask", ",", "d_mask", ",", "p_mask", ")", ":", "\n", "        ", "r\"\"\"Pass the inputs (and mask) through the decoder layer.\n        Args:\n            input_medication_embedding: [*, max_med_num+1, embedding_size]\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "input_len", "=", "input_medication_embedding", ".", "size", "(", "0", ")", "\n", "tgt_len", "=", "input_medication_embedding", ".", "size", "(", "1", ")", "\n", "\n", "# [batch_size*visit_num, max_med_num+1, max_med_num+1]", "\n", "subsequent_mask", "=", "self", ".", "generate_square_subsequent_mask", "(", "tgt_len", ",", "input_len", "*", "self", ".", "nhead", ",", "input_disease_embdding", ".", "device", ")", "\n", "self_attn_mask", "=", "subsequent_mask", "+", "input_medication_self_mask", "\n", "\n", "x", "=", "input_medication_embedding", "+", "input_medication_memory", "\n", "\n", "x", "=", "self", ".", "norm1", "(", "x", "+", "self", ".", "_sa_block", "(", "x", ",", "self_attn_mask", ")", ")", "\n", "# attentioned_disease_embedding = self._m2d_mha_block(x, input_disease_embdding, d_mask)", "\n", "# attentioned_proc_embedding = self._m2p_mha_block(x, input_proc_embedding, p_mask)", "\n", "# x = self.norm3(x + self._ff_block(torch.cat([attentioned_disease_embedding, self.align(attentioned_proc_embedding)], dim=-1)))", "\n", "x", "=", "self", ".", "norm2", "(", "x", "+", "self", ".", "_m2d_mha_block", "(", "x", ",", "input_disease_embdding", ",", "d_mask", ")", "+", "self", ".", "_m2p_mha_block", "(", "x", ",", "input_proc_embedding", ",", "p_mask", ")", ")", "\n", "x", "=", "self", ".", "norm3", "(", "x", "+", "self", ".", "_ff_block", "(", "x", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._sa_block": [[368, 373], ["COGNet_model.MedTransformerDecoder.dropout1", "COGNet_model.MedTransformerDecoder.self_attn"], "methods", ["None"], ["", "def", "_sa_block", "(", "self", ",", "x", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._m2d_mha_block": [[375, 380], ["COGNet_model.MedTransformerDecoder.dropout2", "COGNet_model.MedTransformerDecoder.m2d_multihead_attn"], "methods", ["None"], ["", "def", "_m2d_mha_block", "(", "self", ",", "x", ",", "mem", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "m2d_multihead_attn", "(", "x", ",", "mem", ",", "mem", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._m2p_mha_block": [[381, 386], ["COGNet_model.MedTransformerDecoder.dropout2", "COGNet_model.MedTransformerDecoder.m2p_multihead_attn"], "methods", ["None"], ["", "def", "_m2p_mha_block", "(", "self", ",", "x", ",", "mem", ",", "attn_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "m2p_multihead_attn", "(", "x", ",", "mem", ",", "mem", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "need_weights", "=", "False", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder._ff_block": [[388, 391], ["COGNet_model.MedTransformerDecoder.linear2", "COGNet_model.MedTransformerDecoder.dropout3", "COGNet_model.MedTransformerDecoder.dropout", "COGNet_model.MedTransformerDecoder.activation", "COGNet_model.MedTransformerDecoder.linear1"], "methods", ["None"], ["", "def", "_ff_block", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "x", ")", ")", ")", ")", "\n", "return", "self", ".", "dropout3", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MedTransformerDecoder.generate_square_subsequent_mask": [[392, 400], ["mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "float", "mask.unsqueeze().repeat.unsqueeze().repeat.float().masked_fill", "mask.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.unsqueeze().repeat.unsqueeze().repeat.float"], "methods", ["None"], ["", "def", "generate_square_subsequent_mask", "(", "self", ",", "sz", ":", "int", ",", "batch_size", ":", "int", ",", "device", ")", ":", "\n", "        ", "r\"\"\"Generate a square mask for the sequence. The masked positions are filled with float('-inf').\n            Unmasked positions are filled with float(0.0).\n        \"\"\"", "\n", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "(", "sz", ",", "sz", ")", ",", "device", "=", "device", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.PositionEmbedding.__init__": [[406, 410], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["def", "__init__", "(", "self", ",", "emb_size", ",", "max_length", "=", "512", ")", ":", "\n", "        ", "super", "(", "PositionEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "embedding_layer", "=", "nn", ".", "Embedding", "(", "max_length", ",", "emb_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.PositionEmbedding.forward": [[411, 417], ["torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "ids.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "COGNet_model.PositionEmbedding.embedding_layer", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "ids.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_size", ",", "seq_length", ",", "device", ")", ":", "\n", "        ", "assert", "(", "seq_length", "<=", "self", ".", "max_length", ")", "\n", "ids", "=", "torch", ".", "arange", "(", "0", ",", "seq_length", ")", ".", "long", "(", ")", ".", "to", "(", "torch", ".", "device", "(", "device", ")", ")", "\n", "ids", "=", "ids", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ")", "\n", "emb", "=", "self", ".", "embedding_layer", "(", "ids", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MaskLinear.__init__": [[420, 430], ["torch.Module.__init__", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "COGNet_model.MaskLinear.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "COGNet_model.MaskLinear.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MaskLinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "MaskLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "nn", ".", "parameter", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "parameter", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MaskLinear.reset_parameters": [[431, 436], ["COGNet_model.MaskLinear.weight.data.uniform_", "math.sqrt", "COGNet_model.MaskLinear.bias.data.uniform_", "COGNet_model.MaskLinear.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MaskLinear.forward": [[437, 445], ["torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "mask", ")", ":", "\n", "        ", "weight", "=", "torch", ".", "mul", "(", "self", ".", "weight", ",", "mask", ")", "\n", "output", "=", "torch", ".", "mm", "(", "input", ",", "weight", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.MaskLinear.__repr__": [[446, 450], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.GCN.__init__": [[453, 470], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "COGNet_model.GCN.normalize", "COGNet_model.GCN.normalize", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "layers.GraphConvolution", "torch.Dropout", "torch.Dropout", "torch.Dropout", "layers.GraphConvolution", "layers.GraphConvolution", "numpy.eye", "numpy.eye", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.GCN.normalize", "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.GCN.normalize"], ["    ", "def", "__init__", "(", "self", ",", "voc_size", ",", "emb_dim", ",", "ehr_adj", ",", "ddi_adj", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "voc_size", "=", "voc_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "device", "=", "device", "\n", "\n", "ehr_adj", "=", "self", ".", "normalize", "(", "ehr_adj", "+", "np", ".", "eye", "(", "ehr_adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "ddi_adj", "=", "self", ".", "normalize", "(", "ddi_adj", "+", "np", ".", "eye", "(", "ddi_adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "self", ".", "ehr_adj", "=", "torch", ".", "FloatTensor", "(", "ehr_adj", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "ddi_adj", "=", "torch", ".", "FloatTensor", "(", "ddi_adj", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "x", "=", "torch", ".", "eye", "(", "voc_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "gcn1", "=", "GraphConvolution", "(", "voc_size", ",", "emb_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.3", ")", "\n", "self", ".", "gcn2", "=", "GraphConvolution", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "gcn3", "=", "GraphConvolution", "(", "emb_dim", ",", "emb_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.GCN.forward": [[471, 483], ["COGNet_model.GCN.gcn1", "COGNet_model.GCN.gcn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "COGNet_model.GCN.dropout", "COGNet_model.GCN.dropout", "COGNet_model.GCN.gcn2", "COGNet_model.GCN.gcn3"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "ehr_node_embedding", "=", "self", ".", "gcn1", "(", "self", ".", "x", ",", "self", ".", "ehr_adj", ")", "\n", "ddi_node_embedding", "=", "self", ".", "gcn1", "(", "self", ".", "x", ",", "self", ".", "ddi_adj", ")", "\n", "\n", "ehr_node_embedding", "=", "F", ".", "relu", "(", "ehr_node_embedding", ")", "\n", "ddi_node_embedding", "=", "F", ".", "relu", "(", "ddi_node_embedding", ")", "\n", "ehr_node_embedding", "=", "self", ".", "dropout", "(", "ehr_node_embedding", ")", "\n", "ddi_node_embedding", "=", "self", ".", "dropout", "(", "ddi_node_embedding", ")", "\n", "\n", "ehr_node_embedding", "=", "self", ".", "gcn2", "(", "ehr_node_embedding", ",", "self", ".", "ehr_adj", ")", "\n", "ddi_node_embedding", "=", "self", ".", "gcn3", "(", "ddi_node_embedding", ",", "self", ".", "ddi_adj", ")", "\n", "return", "ehr_node_embedding", ",", "ddi_node_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.GCN.normalize": [[484, 492], ["numpy.array", "numpy.power().flatten", "numpy.diagflat", "numpy.diagflat.dot", "np.diagflat.dot.sum", "numpy.power", "numpy.isinf"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.src.models.MolecularGraphNeuralNetwork.sum"], ["", "def", "normalize", "(", "self", ",", "mx", ")", ":", "\n", "        ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "np", ".", "diagflat", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.policy_network.__init__": [[495, 501], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "policy_network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.src.COGNet_model.policy_network.forward": [[503, 505], ["COGNet_model.policy_network.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.__init__": [[195, 198], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "idx2word", "=", "{", "}", "\n", "self", ".", "word2idx", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.add_sentence": [[199, 204], ["len", "len"], "methods", ["None"], ["", "def", "add_sentence", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "for", "word", "in", "sentence", ":", "\n", "            ", "if", "word", "not", "in", "self", ".", "word2idx", ":", "\n", "                ", "self", ".", "idx2word", "[", "len", "(", "self", ".", "word2idx", ")", "]", "=", "word", "\n", "self", ".", "word2idx", "[", "word", "]", "=", "len", "(", "self", ".", "word2idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.med_process": [[9, 33], ["pandas.read_csv", "med_pd.reset_index.drop", "med_pd.reset_index.drop", "med_pd.reset_index.fillna", "med_pd.reset_index.dropna", "med_pd.reset_index.drop_duplicates", "med_pd[].astype", "pandas.to_datetime", "med_pd.reset_index.sort_values", "med_pd.reset_index.reset_index", "med_pd.reset_index.drop", "med_pd.reset_index.drop_duplicates", "med_pd.reset_index.reset_index"], "function", ["None"], ["def", "med_process", "(", "med_file", ")", ":", "\n", "    ", "\"\"\"\u8bfb\u53d6MIMIC\u539f\u6570\u636e\u6587\u4ef6\uff0c\u4fdd\u7559pid\u3001adm_id\u3001data\u4ee5\u53caNDC\uff0c\u4ee5DF\u7c7b\u578b\u8fd4\u56de\"\"\"", "\n", "# \u8bfb\u53d6\u836f\u7269\u6587\u4ef6\uff0cNDC\uff08National Drug Code\uff09\u4ee5\u7c7b\u522b\u7c7b\u578b\u5b58\u50a8", "\n", "med_pd", "=", "pd", ".", "read_csv", "(", "med_file", ",", "dtype", "=", "{", "'NDC'", ":", "'category'", "}", ")", "\n", "\n", "# drop\u4e0d\u7528\u7684\u6570\u636e", "\n", "med_pd", ".", "drop", "(", "columns", "=", "[", "'ROW_ID'", ",", "'DRUG_TYPE'", ",", "'DRUG_NAME_POE'", ",", "'DRUG_NAME_GENERIC'", ",", "\n", "'FORMULARY_DRUG_CD'", ",", "'PROD_STRENGTH'", ",", "'DOSE_VAL_RX'", ",", "\n", "'DOSE_UNIT_RX'", ",", "'FORM_VAL_DISP'", ",", "'FORM_UNIT_DISP'", ",", "'GSN'", ",", "'FORM_UNIT_DISP'", ",", "\n", "'ROUTE'", ",", "'ENDDATE'", ",", "'DRUG'", "]", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "med_pd", ".", "drop", "(", "index", "=", "med_pd", "[", "med_pd", "[", "'NDC'", "]", "==", "'0'", "]", ".", "index", ",", "axis", "=", "0", ",", "inplace", "=", "True", ")", "\n", "med_pd", ".", "fillna", "(", "method", "=", "'pad'", ",", "inplace", "=", "True", ")", "\n", "med_pd", ".", "dropna", "(", "inplace", "=", "True", ")", "\n", "med_pd", ".", "drop_duplicates", "(", "inplace", "=", "True", ")", "\n", "med_pd", "[", "'ICUSTAY_ID'", "]", "=", "med_pd", "[", "'ICUSTAY_ID'", "]", ".", "astype", "(", "'int64'", ")", "\n", "med_pd", "[", "'STARTDATE'", "]", "=", "pd", ".", "to_datetime", "(", "med_pd", "[", "'STARTDATE'", "]", ",", "format", "=", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "med_pd", ".", "sort_values", "(", "by", "=", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", ",", "'ICUSTAY_ID'", ",", "'STARTDATE'", "]", ",", "inplace", "=", "True", ")", "\n", "med_pd", "=", "med_pd", ".", "reset_index", "(", "drop", "=", "True", ")", "# \u91cd\u7f6e\u7d22\u5f15\uff0c\u540c\u65f6drop\u539f\u7d22\u5f15", "\n", "\n", "med_pd", "=", "med_pd", ".", "drop", "(", "columns", "=", "[", "'ICUSTAY_ID'", "]", ")", "\n", "med_pd", "=", "med_pd", ".", "drop_duplicates", "(", ")", "\n", "med_pd", "=", "med_pd", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "return", "med_pd", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.ndc2atc4": [[35, 59], ["med_pd[].map", "med_pd.reset_index.dropna", "pandas.read_csv", "rxnorm2atc.drop.drop", "rxnorm2atc.drop.drop_duplicates", "med_pd.reset_index.drop", "med_pd[].astype", "med_pd.reset_index.reset_index", "med_pd.reset_index.merge", "med_pd.reset_index.drop", "med_pd.reset_index.rename", "med_pd[].map", "med_pd.reset_index.drop_duplicates", "med_pd.reset_index.reset_index", "open", "eval", "f.read", "med_pd[].isin"], "function", ["home.repos.pwc.inspect_result.barryrun_cognet.src.recommend.eval"], ["", "def", "ndc2atc4", "(", "med_pd", ")", ":", "\n", "    ", "\"\"\"\u5c06NDC\u6620\u5c04\u5230ACT4\"\"\"", "\n", "with", "open", "(", "ndc_rxnorm_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "ndc2rxnorm", "=", "eval", "(", "f", ".", "read", "(", ")", ")", "\n", "# \u6839\u636endc_rxnorm_file\u6587\u4ef6\u8bfb\u53d6ndc\u5230xnorm\u7684\u6620\u5c04\uff08\u8fd9\u4e2axnorm\u4f3c\u4e4e\u7b49\u540c\u4e8e\u4e0b\u9762\u7684RXCUI\uff09", "\n", "", "med_pd", "[", "'RXCUI'", "]", "=", "med_pd", "[", "'NDC'", "]", ".", "map", "(", "ndc2rxnorm", ")", "\n", "med_pd", ".", "dropna", "(", "inplace", "=", "True", ")", "# \u5b9e\u9645\u4e0a\u5565\u4e5f\u6ca1\u5220\u6389", "\n", "\n", "rxnorm2atc", "=", "pd", ".", "read_csv", "(", "ndc2atc_file", ")", "\n", "rxnorm2atc", "=", "rxnorm2atc", ".", "drop", "(", "columns", "=", "[", "'YEAR'", ",", "'MONTH'", ",", "'NDC'", "]", ")", "# NDC\u5220\u4e86\uff0c\u76f4\u63a5\u4eceRXCUI\u6620\u5c04\u5230ATC", "\n", "# \u6839\u636eRXCUI\u5220\u9664\u91cd\u590d\u5217", "\n", "rxnorm2atc", ".", "drop_duplicates", "(", "subset", "=", "[", "'RXCUI'", "]", ",", "inplace", "=", "True", ")", "\n", "\n", "med_pd", ".", "drop", "(", "index", "=", "med_pd", "[", "med_pd", "[", "'RXCUI'", "]", ".", "isin", "(", "[", "''", "]", ")", "]", ".", "index", ",", "axis", "=", "0", ",", "inplace", "=", "True", ")", "# \u5220\u9664\u7279\u5b9a\u7684RXCUI", "\n", "\n", "med_pd", "[", "'RXCUI'", "]", "=", "med_pd", "[", "'RXCUI'", "]", ".", "astype", "(", "'int64'", ")", "\n", "med_pd", "=", "med_pd", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "med_pd", "=", "med_pd", ".", "merge", "(", "rxnorm2atc", ",", "on", "=", "[", "'RXCUI'", "]", ")", "# \u5408\u5e76\u4e24\u4e2a\u8868", "\n", "med_pd", ".", "drop", "(", "columns", "=", "[", "'NDC'", ",", "'RXCUI'", "]", ",", "inplace", "=", "True", ")", "# \u5e72\u6389NDC\\RXCUI\uff0c\u53ea\u5269ATC4\u4e86", "\n", "med_pd", "=", "med_pd", ".", "rename", "(", "columns", "=", "{", "'ATC4'", ":", "'NDC'", "}", ")", "# \u91cd\u65b0\u547d\u540d\u4e3aNDC", "\n", "med_pd", "[", "'NDC'", "]", "=", "med_pd", "[", "'NDC'", "]", ".", "map", "(", "lambda", "x", ":", "x", "[", ":", "4", "]", ")", "# \u53ea\u4fdd\u7559\u524d\u56db\u4f4d", "\n", "med_pd", "=", "med_pd", ".", "drop_duplicates", "(", ")", "\n", "med_pd", "=", "med_pd", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "return", "med_pd", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.process_visit_lg2": [[61, 67], ["[].unique().reset_index", "a[].map", "[].unique", "len", "med_pd[].groupby"], "function", ["None"], ["", "def", "process_visit_lg2", "(", "med_pd", ")", ":", "\n", "    ", "\"\"\"\u7b5b\u9664admission\u6b21\u6570\u5c0f\u4e8e\u4e24\u6b21\u7684\u60a3\u8005\u6570\u636e\"\"\"", "\n", "a", "=", "med_pd", "[", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", "]", ".", "groupby", "(", "by", "=", "'SUBJECT_ID'", ")", "[", "'HADM_ID'", "]", ".", "unique", "(", ")", ".", "reset_index", "(", ")", "\n", "a", "[", "'HADM_ID_Len'", "]", "=", "a", "[", "'HADM_ID'", "]", ".", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ")", "\n", "a", "=", "a", "[", "a", "[", "'HADM_ID_Len'", "]", ">", "1", "]", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.filter_300_most_med": [[69, 75], ["med_pd.groupby().size().reset_index().rename().sort_values().reset_index", "med_pd.reset_index", "med_pd.groupby().size().reset_index().rename().sort_values", "med_pd[].isin", "med_pd.groupby().size().reset_index().rename", "med_pd.groupby().size().reset_index", "med_pd.groupby().size", "med_pd.groupby"], "function", ["None"], ["", "def", "filter_300_most_med", "(", "med_pd", ")", ":", "\n", "# \u6309\u7167NDC\u51fa\u73b0\u7684\u6b21\u6570\u964d\u5e8f\u6392\u5217\uff0c\u53d6\u524d300", "\n", "    ", "med_count", "=", "med_pd", ".", "groupby", "(", "by", "=", "[", "'NDC'", "]", ")", ".", "size", "(", ")", ".", "reset_index", "(", ")", ".", "rename", "(", "columns", "=", "{", "0", ":", "'count'", "}", ")", ".", "sort_values", "(", "by", "=", "[", "'count'", "]", ",", "ascending", "=", "False", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "med_pd", "=", "med_pd", "[", "med_pd", "[", "'NDC'", "]", ".", "isin", "(", "med_count", ".", "loc", "[", ":", "299", ",", "'NDC'", "]", ")", "]", "\n", "\n", "return", "med_pd", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.diag_process": [[77, 94], ["pandas.read_csv", "filter_2000_most_diag.dropna", "filter_2000_most_diag.drop", "filter_2000_most_diag.drop_duplicates", "filter_2000_most_diag.sort_values", "filter_2000_most_diag.reset_index", "processing.diag_process.filter_2000_most_diag"], "function", ["None"], ["", "def", "diag_process", "(", "diag_file", ")", ":", "\n", "    ", "diag_pd", "=", "pd", ".", "read_csv", "(", "diag_file", ")", "\n", "diag_pd", ".", "dropna", "(", "inplace", "=", "True", ")", "\n", "diag_pd", ".", "drop", "(", "columns", "=", "[", "'SEQ_NUM'", ",", "'ROW_ID'", "]", ",", "inplace", "=", "True", ")", "\n", "diag_pd", ".", "drop_duplicates", "(", "inplace", "=", "True", ")", "\n", "diag_pd", ".", "sort_values", "(", "by", "=", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", ",", "inplace", "=", "True", ")", "\n", "diag_pd", "=", "diag_pd", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "def", "filter_2000_most_diag", "(", "diag_pd", ")", ":", "\n", "        ", "diag_count", "=", "diag_pd", ".", "groupby", "(", "by", "=", "[", "'ICD9_CODE'", "]", ")", ".", "size", "(", ")", ".", "reset_index", "(", ")", ".", "rename", "(", "columns", "=", "{", "0", ":", "'count'", "}", ")", ".", "sort_values", "(", "by", "=", "[", "'count'", "]", ",", "ascending", "=", "False", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "diag_pd", "=", "diag_pd", "[", "diag_pd", "[", "'ICD9_CODE'", "]", ".", "isin", "(", "diag_count", ".", "loc", "[", ":", "1999", ",", "'ICD9_CODE'", "]", ")", "]", "\n", "\n", "return", "diag_pd", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "", "diag_pd", "=", "filter_2000_most_diag", "(", "diag_pd", ")", "\n", "\n", "return", "diag_pd", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.procedure_process": [[96, 106], ["pandas.read_csv", "pd.read_csv.drop", "pd.read_csv.drop_duplicates", "pd.read_csv.sort_values", "pd.read_csv.drop", "pd.read_csv.drop_duplicates", "pd.read_csv.reset_index"], "function", ["None"], ["", "def", "procedure_process", "(", "procedure_file", ")", ":", "\n", "    ", "pro_pd", "=", "pd", ".", "read_csv", "(", "procedure_file", ",", "dtype", "=", "{", "'ICD9_CODE'", ":", "'category'", "}", ")", "\n", "pro_pd", ".", "drop", "(", "columns", "=", "[", "'ROW_ID'", "]", ",", "inplace", "=", "True", ")", "\n", "pro_pd", ".", "drop_duplicates", "(", "inplace", "=", "True", ")", "\n", "pro_pd", ".", "sort_values", "(", "by", "=", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", ",", "'SEQ_NUM'", "]", ",", "inplace", "=", "True", ")", "\n", "pro_pd", ".", "drop", "(", "columns", "=", "[", "'SEQ_NUM'", "]", ",", "inplace", "=", "True", ")", "\n", "pro_pd", ".", "drop_duplicates", "(", "inplace", "=", "True", ")", "\n", "pro_pd", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "\n", "return", "pro_pd", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.filter_1000_most_pro": [[107, 112], ["pro_pd.groupby().size().reset_index().rename().sort_values().reset_index", "pro_pd.reset_index", "pro_pd.groupby().size().reset_index().rename().sort_values", "pro_pd[].isin", "pro_pd.groupby().size().reset_index().rename", "pro_pd.groupby().size().reset_index", "pro_pd.groupby().size", "pro_pd.groupby"], "function", ["None"], ["", "def", "filter_1000_most_pro", "(", "pro_pd", ")", ":", "\n", "    ", "pro_count", "=", "pro_pd", ".", "groupby", "(", "by", "=", "[", "'ICD9_CODE'", "]", ")", ".", "size", "(", ")", ".", "reset_index", "(", ")", ".", "rename", "(", "columns", "=", "{", "0", ":", "'count'", "}", ")", ".", "sort_values", "(", "by", "=", "[", "'count'", "]", ",", "ascending", "=", "False", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "pro_pd", "=", "pro_pd", "[", "pro_pd", "[", "'ICD9_CODE'", "]", ".", "isin", "(", "pro_count", ".", "loc", "[", ":", "1000", ",", "'ICD9_CODE'", "]", ")", "]", "\n", "\n", "return", "pro_pd", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.combine_process": [[114, 140], ["med_pd[].drop_duplicates", "diag_pd[].drop_duplicates", "pro_pd[].drop_duplicates", "med_pd[].drop_duplicates.merge", "combined_key.merge.merge", "[].unique().reset_index.merge", "[].unique().reset_index.merge", "[].unique().reset_index().rename.merge", "[].unique().reset_index", "[].unique().reset_index", "[].unique().reset_index().rename", "med_pd[].map", "pro_pd[].map", "[].unique().reset_index.merge", "data.merge.merge", "data[].map", "[].unique", "[].unique", "[].unique().reset_index", "list", "list", "len", "[].unique", "[].unique().reset_index.groupby", "[].unique().reset_index.groupby", "[].unique().reset_index().rename.groupby"], "function", ["None"], ["", "def", "combine_process", "(", "med_pd", ",", "diag_pd", ",", "pro_pd", ")", ":", "\n", "    ", "\"\"\"\u836f\u7269\u3001\u75c7\u72b6\u3001proc\u7684\u6570\u636e\u7ed3\u5408\"\"\"", "\n", "\n", "med_pd_key", "=", "med_pd", "[", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", "]", ".", "drop_duplicates", "(", ")", "\n", "diag_pd_key", "=", "diag_pd", "[", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", "]", ".", "drop_duplicates", "(", ")", "\n", "pro_pd_key", "=", "pro_pd", "[", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", "]", ".", "drop_duplicates", "(", ")", "\n", "\n", "combined_key", "=", "med_pd_key", ".", "merge", "(", "diag_pd_key", ",", "on", "=", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", ",", "how", "=", "'inner'", ")", "\n", "combined_key", "=", "combined_key", ".", "merge", "(", "pro_pd_key", ",", "on", "=", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", ",", "how", "=", "'inner'", ")", "\n", "\n", "diag_pd", "=", "diag_pd", ".", "merge", "(", "combined_key", ",", "on", "=", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", ",", "how", "=", "'inner'", ")", "\n", "med_pd", "=", "med_pd", ".", "merge", "(", "combined_key", ",", "on", "=", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", ",", "how", "=", "'inner'", ")", "\n", "pro_pd", "=", "pro_pd", ".", "merge", "(", "combined_key", ",", "on", "=", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", ",", "how", "=", "'inner'", ")", "\n", "\n", "# flatten and merge", "\n", "diag_pd", "=", "diag_pd", ".", "groupby", "(", "by", "=", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", ")", "[", "'ICD9_CODE'", "]", ".", "unique", "(", ")", ".", "reset_index", "(", ")", "\n", "med_pd", "=", "med_pd", ".", "groupby", "(", "by", "=", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", ")", "[", "'NDC'", "]", ".", "unique", "(", ")", ".", "reset_index", "(", ")", "\n", "pro_pd", "=", "pro_pd", ".", "groupby", "(", "by", "=", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", ")", "[", "'ICD9_CODE'", "]", ".", "unique", "(", ")", ".", "reset_index", "(", ")", ".", "rename", "(", "columns", "=", "{", "'ICD9_CODE'", ":", "'PRO_CODE'", "}", ")", "\n", "med_pd", "[", "'NDC'", "]", "=", "med_pd", "[", "'NDC'", "]", ".", "map", "(", "lambda", "x", ":", "list", "(", "x", ")", ")", "\n", "pro_pd", "[", "'PRO_CODE'", "]", "=", "pro_pd", "[", "'PRO_CODE'", "]", ".", "map", "(", "lambda", "x", ":", "list", "(", "x", ")", ")", "\n", "data", "=", "diag_pd", ".", "merge", "(", "med_pd", ",", "on", "=", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", ",", "how", "=", "'inner'", ")", "\n", "data", "=", "data", ".", "merge", "(", "pro_pd", ",", "on", "=", "[", "'SUBJECT_ID'", ",", "'HADM_ID'", "]", ",", "how", "=", "'inner'", ")", "\n", "#     data['ICD9_CODE_Len'] = data['ICD9_CODE'].map(lambda x: len(x))", "\n", "data", "[", "'NDC_Len'", "]", "=", "data", "[", "'NDC'", "]", ".", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.statistics": [[141, 192], ["print", "print", "set", "set", "set", "print", "print", "print", "data[].unique", "print", "print", "print", "print", "print", "print", "print", "print", "len", "len", "len", "len", "item_data.iterrows", "len", "len", "len", "data[].unique", "range", "x.extend", "y.extend", "z.extend", "set", "set", "set", "len", "len", "len", "len", "len", "len", "len", "list", "list", "list", "list", "list", "list", "data[].unique"], "function", ["None"], ["", "def", "statistics", "(", "data", ")", ":", "\n", "    ", "print", "(", "'#patients '", ",", "data", "[", "'SUBJECT_ID'", "]", ".", "unique", "(", ")", ".", "shape", ")", "\n", "print", "(", "'#clinical events '", ",", "len", "(", "data", ")", ")", "\n", "\n", "diag", "=", "data", "[", "'ICD9_CODE'", "]", ".", "values", "\n", "med", "=", "data", "[", "'NDC'", "]", ".", "values", "\n", "pro", "=", "data", "[", "'PRO_CODE'", "]", ".", "values", "\n", "\n", "unique_diag", "=", "set", "(", "[", "j", "for", "i", "in", "diag", "for", "j", "in", "list", "(", "i", ")", "]", ")", "\n", "unique_med", "=", "set", "(", "[", "j", "for", "i", "in", "med", "for", "j", "in", "list", "(", "i", ")", "]", ")", "\n", "unique_pro", "=", "set", "(", "[", "j", "for", "i", "in", "pro", "for", "j", "in", "list", "(", "i", ")", "]", ")", "\n", "\n", "print", "(", "'#diagnosis '", ",", "len", "(", "unique_diag", ")", ")", "\n", "print", "(", "'#med '", ",", "len", "(", "unique_med", ")", ")", "\n", "print", "(", "'#procedure'", ",", "len", "(", "unique_pro", ")", ")", "\n", "\n", "avg_diag", ",", "avg_med", ",", "avg_pro", ",", "max_diag", ",", "max_med", ",", "max_pro", ",", "cnt", ",", "max_visit", ",", "avg_visit", "=", "[", "0", "for", "i", "in", "range", "(", "9", ")", "]", "\n", "\n", "for", "subject_id", "in", "data", "[", "'SUBJECT_ID'", "]", ".", "unique", "(", ")", ":", "\n", "        ", "item_data", "=", "data", "[", "data", "[", "'SUBJECT_ID'", "]", "==", "subject_id", "]", "\n", "x", ",", "y", ",", "z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "visit_cnt", "=", "0", "\n", "for", "index", ",", "row", "in", "item_data", ".", "iterrows", "(", ")", ":", "\n", "            ", "visit_cnt", "+=", "1", "\n", "cnt", "+=", "1", "\n", "x", ".", "extend", "(", "list", "(", "row", "[", "'ICD9_CODE'", "]", ")", ")", "\n", "y", ".", "extend", "(", "list", "(", "row", "[", "'NDC'", "]", ")", ")", "\n", "z", ".", "extend", "(", "list", "(", "row", "[", "'PRO_CODE'", "]", ")", ")", "\n", "", "x", ",", "y", ",", "z", "=", "set", "(", "x", ")", ",", "set", "(", "y", ")", ",", "set", "(", "z", ")", "\n", "avg_diag", "+=", "len", "(", "x", ")", "\n", "avg_med", "+=", "len", "(", "y", ")", "\n", "avg_pro", "+=", "len", "(", "z", ")", "\n", "avg_visit", "+=", "visit_cnt", "\n", "if", "len", "(", "x", ")", ">", "max_diag", ":", "\n", "            ", "max_diag", "=", "len", "(", "x", ")", "\n", "", "if", "len", "(", "y", ")", ">", "max_med", ":", "\n", "            ", "max_med", "=", "len", "(", "y", ")", "\n", "", "if", "len", "(", "z", ")", ">", "max_pro", ":", "\n", "            ", "max_pro", "=", "len", "(", "z", ")", "\n", "", "if", "visit_cnt", ">", "max_visit", ":", "\n", "            ", "max_visit", "=", "visit_cnt", "\n", "\n", "", "", "print", "(", "'#avg of diagnoses '", ",", "avg_diag", "/", "cnt", ")", "\n", "print", "(", "'#avg of medicines '", ",", "avg_med", "/", "cnt", ")", "\n", "print", "(", "'#avg of procedures '", ",", "avg_pro", "/", "cnt", ")", "\n", "print", "(", "'#avg of vists '", ",", "avg_visit", "/", "len", "(", "data", "[", "'SUBJECT_ID'", "]", ".", "unique", "(", ")", ")", ")", "\n", "\n", "print", "(", "'#max of diagnoses '", ",", "max_diag", ")", "\n", "print", "(", "'#max of medicines '", ",", "max_med", ")", "\n", "print", "(", "'#max of procedures '", ",", "max_pro", ")", "\n", "print", "(", "'#max of visit '", ",", "max_visit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.create_str_token_mapping": [[206, 218], ["processing.Voc", "processing.Voc", "processing.Voc", "df.iterrows", "dill.dump", "processing.Voc.add_sentence", "processing.Voc.add_sentence", "processing.Voc.add_sentence", "open"], "function", ["home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.add_sentence", "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.add_sentence", "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.Voc.add_sentence"], ["", "", "", "", "def", "create_str_token_mapping", "(", "df", ")", ":", "\n", "    ", "diag_voc", "=", "Voc", "(", ")", "\n", "med_voc", "=", "Voc", "(", ")", "\n", "pro_voc", "=", "Voc", "(", ")", "\n", "\n", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "diag_voc", ".", "add_sentence", "(", "row", "[", "'ICD9_CODE'", "]", ")", "\n", "med_voc", ".", "add_sentence", "(", "row", "[", "'NDC'", "]", ")", "\n", "pro_voc", ".", "add_sentence", "(", "row", "[", "'PRO_CODE'", "]", ")", "\n", "\n", "", "dill", ".", "dump", "(", "obj", "=", "{", "'diag_voc'", ":", "diag_voc", ",", "'med_voc'", ":", "med_voc", ",", "'pro_voc'", ":", "pro_voc", "}", ",", "file", "=", "open", "(", "'voc_final.pkl'", ",", "'wb'", ")", ")", "\n", "return", "diag_voc", ",", "med_voc", ",", "pro_voc", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.create_patient_record": [[220, 239], ["df[].unique", "dill.dump", "item_df.iterrows", "records.append", "admission.append", "admission.append", "admission.append", "patient.append", "open"], "function", ["None"], ["", "def", "create_patient_record", "(", "df", ",", "diag_voc", ",", "med_voc", ",", "pro_voc", ")", ":", "\n", "    ", "\"\"\"\n    \u4fdd\u5b58list\u7c7b\u578b\u7684\u8bb0\u5f55\n    \u6bcf\u4e00\u9879\u4ee3\u8868\u4e00\u4e2a\u60a3\u8005\uff0c\u60a3\u8005\u4e2d\u6709\u591a\u4e2avisit\uff0c\u6bcf\u4e2avisit\u5305\u542b\u4e09\u8005\u6570\u7ec4\uff0c\u6309\u987a\u5e8f\u5206\u522b\u8868\u793a\u8bca\u65ad\u3001proc\u4e0e\u836f\u7269\n    \u5b58\u50a8\u7684\u5747\u4e3a\u7f16\u53f7\uff0c\u53ef\u4ee5\u901a\u8fc7voc_final.pkl\u6765\u67e5\u770b\u5bf9\u5e94\u7684\u5177\u4f53word\n    \"\"\"", "\n", "records", "=", "[", "]", "# (patient, code_kind:3, codes)  code_kind:diag, proc, med", "\n", "for", "subject_id", "in", "df", "[", "'SUBJECT_ID'", "]", ".", "unique", "(", ")", ":", "\n", "        ", "item_df", "=", "df", "[", "df", "[", "'SUBJECT_ID'", "]", "==", "subject_id", "]", "\n", "patient", "=", "[", "]", "\n", "for", "index", ",", "row", "in", "item_df", ".", "iterrows", "(", ")", ":", "\n", "            ", "admission", "=", "[", "]", "\n", "admission", ".", "append", "(", "[", "diag_voc", ".", "word2idx", "[", "i", "]", "for", "i", "in", "row", "[", "'ICD9_CODE'", "]", "]", ")", "\n", "admission", ".", "append", "(", "[", "pro_voc", ".", "word2idx", "[", "i", "]", "for", "i", "in", "row", "[", "'PRO_CODE'", "]", "]", ")", "\n", "admission", ".", "append", "(", "[", "med_voc", ".", "word2idx", "[", "i", "]", "for", "i", "in", "row", "[", "'NDC'", "]", "]", ")", "\n", "patient", ".", "append", "(", "admission", ")", "\n", "", "records", ".", "append", "(", "patient", ")", "\n", "", "dill", ".", "dump", "(", "obj", "=", "records", ",", "file", "=", "open", "(", "'records_final.pkl'", ",", "'wb'", ")", ")", "\n", "return", "records", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.processing.get_ddi_matrix": [[243, 307], ["collections.defaultdict", "len", "collections.defaultdict", "pandas.read_csv", "fliter_ddi_df[].drop_duplicates().reset_index.groupby().size().reset_index().rename().sort_values().reset_index", "fliter_ddi_df[].drop_duplicates().reset_index.merge", "fliter_ddi_df[].drop_duplicates().reset_index", "numpy.zeros", "dill.dump", "numpy.zeros", "fliter_ddi_df[].drop_duplicates().reset_index.iterrows", "dill.dump", "atc3_atc4_dic[].add", "open", "open", "open", "range", "line[].split", "fliter_ddi_df[].drop_duplicates().reset_index.groupby().size().reset_index().rename().sort_values", "fliter_ddi_df[].drop_duplicates", "enumerate", "enumerate", "len", "cid2atc_dic[].add", "fliter_ddi_df[].drop_duplicates().reset_index.groupby().size().reset_index().rename", "fliter_ddi_df[].drop_duplicates().reset_index.groupby().size().reset_index", "fliter_ddi_df[].drop_duplicates().reset_index.groupby().size", "fliter_ddi_df[].drop_duplicates().reset_index.groupby"], "function", ["None"], ["", "def", "get_ddi_matrix", "(", "records", ",", "med_voc", ",", "ddi_file", ")", ":", "\n", "\n", "    ", "TOPK", "=", "40", "# topk drug-drug interaction", "\n", "cid2atc_dic", "=", "defaultdict", "(", "set", ")", "\n", "med_voc_size", "=", "len", "(", "med_voc", ".", "idx2word", ")", "\n", "med_unique_word", "=", "[", "med_voc", ".", "idx2word", "[", "i", "]", "for", "i", "in", "range", "(", "med_voc_size", ")", "]", "# \u6240\u6709\u7684\u836f\u7269\u7684ATC4", "\n", "atc3_atc4_dic", "=", "defaultdict", "(", "set", ")", "\n", "for", "item", "in", "med_unique_word", ":", "\n", "        ", "atc3_atc4_dic", "[", "item", "[", ":", "4", "]", "]", ".", "add", "(", "item", ")", "# ", "\n", "\n", "", "with", "open", "(", "cid_atc", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line_ls", "=", "line", "[", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "cid", "=", "line_ls", "[", "0", "]", "\n", "atcs", "=", "line_ls", "[", "1", ":", "]", "\n", "for", "atc", "in", "atcs", ":", "\n", "                ", "if", "len", "(", "atc3_atc4_dic", "[", "atc", "[", ":", "4", "]", "]", ")", "!=", "0", ":", "\n", "                    ", "cid2atc_dic", "[", "cid", "]", ".", "add", "(", "atc", "[", ":", "4", "]", ")", "\n", "\n", "# \u52a0\u8f7dDDI\u6570\u636e", "\n", "", "", "", "", "ddi_df", "=", "pd", ".", "read_csv", "(", "ddi_file", ")", "\n", "# fliter sever side effect\uff0c\u4e5f\u662f\u91c7\u53d6topK\u7684\u5f62\u5f0f", "\n", "ddi_most_pd", "=", "ddi_df", ".", "groupby", "(", "by", "=", "[", "'Polypharmacy Side Effect'", ",", "'Side Effect Name'", "]", ")", ".", "size", "(", ")", ".", "reset_index", "(", ")", ".", "rename", "(", "columns", "=", "{", "0", ":", "'count'", "}", ")", ".", "sort_values", "(", "by", "=", "[", "'count'", "]", ",", "ascending", "=", "False", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "ddi_most_pd", "=", "ddi_most_pd", ".", "iloc", "[", "-", "TOPK", ":", ",", ":", "]", "\n", "# ddi_most_pd = pd.DataFrame(columns=['Side Effect Name'], data=['as','asd','as'])", "\n", "fliter_ddi_df", "=", "ddi_df", ".", "merge", "(", "ddi_most_pd", "[", "[", "'Side Effect Name'", "]", "]", ",", "how", "=", "'inner'", ",", "on", "=", "[", "'Side Effect Name'", "]", ")", "\n", "ddi_df", "=", "fliter_ddi_df", "[", "[", "'STITCH 1'", ",", "'STITCH 2'", "]", "]", ".", "drop_duplicates", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "\n", "# weighted ehr adj ", "\n", "ehr_adj", "=", "np", ".", "zeros", "(", "(", "med_voc_size", ",", "med_voc_size", ")", ")", "\n", "for", "patient", "in", "records", ":", "\n", "        ", "for", "adm", "in", "patient", ":", "\n", "            ", "med_set", "=", "adm", "[", "2", "]", "\n", "for", "i", ",", "med_i", "in", "enumerate", "(", "med_set", ")", ":", "\n", "                ", "for", "j", ",", "med_j", "in", "enumerate", "(", "med_set", ")", ":", "\n", "                    ", "if", "j", "<=", "i", ":", "\n", "                        ", "continue", "\n", "# ehr_adj[med_i, med_j] = 1", "\n", "# ehr_adj[med_j, med_i] = 1", "\n", "", "ehr_adj", "[", "med_i", ",", "med_j", "]", "+=", "1", "\n", "ehr_adj", "[", "med_j", ",", "med_i", "]", "+=", "1", "\n", "", "", "", "", "dill", ".", "dump", "(", "ehr_adj", ",", "open", "(", "'ehr_adj_final.pkl'", ",", "'wb'", ")", ")", "\n", "\n", "# ddi adj\uff0cDDI\u8868\u662fCID\u7f16\u7801\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5c06CID\u6620\u5c04\u5230ACT\u7f16\u7801\uff0c\u624d\u80fd\u8bb0\u5f55\u6570\u636e\u96c6\u4e2d\u836f\u7269\u4e4b\u95f4\u7684\u51b2\u7a81\u4fe1\u606f", "\n", "ddi_adj", "=", "np", ".", "zeros", "(", "(", "med_voc_size", ",", "med_voc_size", ")", ")", "\n", "for", "index", ",", "row", "in", "ddi_df", ".", "iterrows", "(", ")", ":", "\n", "# ddi", "\n", "        ", "cid1", "=", "row", "[", "'STITCH 1'", "]", "\n", "cid2", "=", "row", "[", "'STITCH 2'", "]", "\n", "\n", "# cid -> atc_level3", "\n", "for", "atc_i", "in", "cid2atc_dic", "[", "cid1", "]", ":", "\n", "            ", "for", "atc_j", "in", "cid2atc_dic", "[", "cid2", "]", ":", "\n", "\n", "# atc_level3 -> atc_level4", "\n", "                ", "for", "i", "in", "atc3_atc4_dic", "[", "atc_i", "]", ":", "\n", "                    ", "for", "j", "in", "atc3_atc4_dic", "[", "atc_j", "]", ":", "\n", "                        ", "if", "med_voc", ".", "word2idx", "[", "i", "]", "!=", "med_voc", ".", "word2idx", "[", "j", "]", ":", "\n", "                            ", "ddi_adj", "[", "med_voc", ".", "word2idx", "[", "i", "]", ",", "med_voc", ".", "word2idx", "[", "j", "]", "]", "=", "1", "\n", "ddi_adj", "[", "med_voc", ".", "word2idx", "[", "j", "]", ",", "med_voc", ".", "word2idx", "[", "i", "]", "]", "=", "1", "\n", "", "", "", "", "", "", "dill", ".", "dump", "(", "ddi_adj", ",", "open", "(", "'ddi_A_final.pkl'", ",", "'wb'", ")", ")", "\n", "\n", "return", "ddi_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.get_SMILES.fix_mismatch": [[8, 26], ["pandas.read_csv", "pd.read_csv.ATC4.apply", "idx2atc.items", "atc2ndc.append.append", "atc2ndc.append.append", "open", "atc2ndc.append.append", "atc2ndc.append.NDC.tolist", "mismatch.append", "s.replace", "ndc2atc[].NDC.tolist"], "function", ["None"], ["def", "fix_mismatch", "(", "idx2atc", ",", "atc2ndc", ",", "ndc2atc_original_path", ")", ":", "\n", "    ", "ndc2atc", "=", "pd", ".", "read_csv", "(", "open", "(", "ndc2atc_original_path", ",", "'rb'", ")", ")", "\n", "ndc2atc", ".", "ATC4", "=", "ndc2atc", ".", "ATC4", ".", "apply", "(", "lambda", "x", ":", "x", "[", ":", "4", "]", ")", "\n", "\n", "mismatch", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "idx2atc", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "in", "atc2ndc", ".", "NDC", ".", "tolist", "(", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "mismatch", ".", "append", "(", "v", ")", "\n", "\n", "", "", "for", "i", "in", "mismatch", ":", "\n", "        ", "atc2ndc", "=", "atc2ndc", ".", "append", "(", "{", "'NDC'", ":", "i", ",", "'NDC_orig'", ":", "[", "s", ".", "replace", "(", "'-'", ",", "''", ")", "for", "s", "in", "ndc2atc", "[", "ndc2atc", ".", "ATC4", "==", "i", "]", ".", "NDC", ".", "tolist", "(", ")", "]", "}", ",", "ignore_index", "=", "True", ")", "\n", "\n", "", "atc2ndc", "=", "atc2ndc", ".", "append", "(", "{", "'NDC'", ":", "'seperator'", ",", "'NDC_orig'", ":", "[", "]", "}", ",", "ignore_index", "=", "True", ")", "\n", "atc2ndc", "=", "atc2ndc", ".", "append", "(", "{", "'NDC'", ":", "'decoder_point'", ",", "'NDC_orig'", ":", "[", "]", "}", ",", "ignore_index", "=", "True", ")", "\n", "\n", "return", "atc2ndc", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.get_SMILES.ndc2smiles": [[27, 41], ["requests.get", "requests.get", "requests.get", "re.findall", "re.findall", "re.findall"], "function", ["None"], ["", "def", "ndc2smiles", "(", "NDC", ")", ":", "\n", "    ", "url3", "=", "'https://ndclist.com/?s='", "+", "NDC", "\n", "r3", "=", "requests", ".", "get", "(", "url3", ")", "\n", "name", "=", "re", ".", "findall", "(", "'<td data-title=\"Proprietary Name\">(.+?)</td>'", ",", "r3", ".", "text", ")", "[", "0", "]", "\n", "\n", "url", "=", "'https://dev.drugbankplus.com/guides/tutorials/api_request?request_path=us/product_concepts?q='", "+", "name", "\n", "r", "=", "requests", ".", "get", "(", "url", ")", "\n", "drugbankID", "=", "re", ".", "findall", "(", "'(DB\\d+)'", ",", "r", ".", "text", ")", "[", "0", "]", "\n", "\n", "# re matching might need to update (drugbank may change their html script)", "\n", "url2", "=", "'https://www.drugbank.ca/drugs/'", "+", "drugbankID", "\n", "r2", "=", "requests", ".", "get", "(", "url2", ")", "\n", "SMILES", "=", "re", ".", "findall", "(", "'SMILES</dt><dd class=\"col-xl-10 col-md-9 col-sm-8\"><div class=\"wrap\">(.+?)</div>'", ",", "r2", ".", "text", ")", "[", "0", "]", "\n", "return", "SMILES", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.get_SMILES.atc2smiles": [[42, 61], ["list", "enumerate", "atc2SMILES.keys", "get_SMILES.ndc2smiles", "print", "atc2SMILES[].add", "len", "set"], "function", ["home.repos.pwc.inspect_result.barryrun_cognet.data.get_SMILES.ndc2smiles"], ["", "def", "atc2smiles", "(", "atc2ndc", ")", ":", "\n", "    ", "atc2SMILES", "=", "{", "}", "\n", "for", "k", ",", "ndc", "in", "atc2ndc", ".", "values", ":", "\n", "        ", "if", "k", "not", "in", "list", "(", "atc2SMILES", ".", "keys", "(", ")", ")", ":", "\n", "            ", "for", "index", ",", "code", "in", "enumerate", "(", "ndc", ")", ":", "\n", "                ", "if", "index", ">", "100", ":", "break", "\n", "try", ":", "\n", "                    ", "SMILES", "=", "ndc2smiles", "(", "code", ")", "\n", "if", "'href'", "in", "SMILES", ":", "\n", "                        ", "continue", "\n", "", "print", "(", "k", ",", "index", ",", "len", "(", "ndc", ")", ",", "SMILES", ")", "\n", "if", "k", "not", "in", "atc2SMILES", ":", "\n", "                        ", "atc2SMILES", "[", "k", "]", "=", "set", "(", ")", "\n", "", "atc2SMILES", "[", "k", "]", ".", "add", "(", "SMILES", ")", "\n", "# if len(atc2SMILES[k]) >= 3:", "\n", "#     break", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "", "", "", "", "return", "atc2SMILES", "\n", "\n"]], "home.repos.pwc.inspect_result.barryrun_cognet.data.get_SMILES.idx2smiles": [[63, 74], ["idx2atc.items", "dill.dump", "open"], "function", ["None"], ["", "def", "idx2smiles", "(", "idx2atc", ",", "atc2SMILES", ")", ":", "\n", "    ", "idx2drug", "=", "{", "}", "\n", "idx2drug", "[", "'seperator'", "]", "=", "{", "}", "\n", "idx2drug", "[", "'decoder_point'", "]", "=", "{", "}", "\n", "\n", "for", "idx", ",", "atc", "in", "idx2atc", ".", "items", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "idx2drug", "[", "idx", "]", "=", "atc2SMILES", "[", "atc", "]", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "", "dill", ".", "dump", "(", "idx2drug", ",", "open", "(", "'idx2drug.pkl'", ",", "'wb'", ")", ")", "\n", "\n"]]}