{"home.repos.pwc.inspect_result.muberraozmen_mrmp.None.processor.process": [[10, 59], ["torch.load", "max", "len", "len", "utils.loader.DataIterator", "utils.loader.DataIterator", "utils.loader.DataIterator", "os.path.join", "max", "max", "max", "utils.graphs.calc_graphs", "enumerate", "value.float", "len", "len", "len", "adj.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.graphs.calc_graphs"], ["def", "process", "(", "opt", ")", ":", "\n", "\n", "# ========= Loading Data ========= #", "\n", "    ", "data", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "data_dir", ",", "opt", ".", "dataset", "+", "'.pt'", ")", ")", "\n", "max_seq_len", "=", "max", "(", "max", "(", "len", "(", "inst", ")", "for", "inst", "in", "data", "[", "'train'", "]", "[", "'src'", "]", ")", ",", "\n", "max", "(", "len", "(", "inst", ")", "for", "inst", "in", "data", "[", "'valid'", "]", "[", "'src'", "]", ")", ",", "\n", "max", "(", "len", "(", "inst", ")", "for", "inst", "in", "data", "[", "'test'", "]", "[", "'src'", "]", ")", ")", "\n", "\n", "opt", ".", "n_position", "=", "max_seq_len", "+", "1", "\n", "opt", ".", "n_src_vocab", "=", "len", "(", "data", "[", "'dict'", "]", "[", "'src'", "]", ")", "\n", "opt", ".", "n_tgt_vocab", "=", "len", "(", "data", "[", "'dict'", "]", "[", "'tgt'", "]", ")", "\n", "\n", "# ========= Calculating Multi-relation Adjacency Matrices =========#", "\n", "if", "opt", ".", "mrmp_on", ":", "\n", "        ", "adjs", "=", "calc_graphs", "(", "data", ",", "type", "=", "opt", ".", "mrmp_adjs", ")", "\n", "for", "index", ",", "value", "in", "enumerate", "(", "adjs", ")", ":", "\n", "            ", "adj", "=", "value", ".", "float", "(", ")", "\n", "if", "opt", ".", "cuda_on", ":", "\n", "                ", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "", "adjs", "[", "index", "]", "=", "adj", "\n", "", "", "else", ":", "\n", "        ", "adjs", "=", "None", "\n", "\n", "# ========= Preparing DataLoader =========#", "\n", "", "train_data", "=", "DataIterator", "(", "\n", "src_insts", "=", "data", "[", "'train'", "]", "[", "'src'", "]", ",", "\n", "tgt_insts", "=", "data", "[", "'train'", "]", "[", "'tgt'", "]", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "cuda_on", "=", "opt", ".", "cuda_on", ",", "\n", "shuffle_on", "=", "False", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "test_data", "=", "DataIterator", "(", "\n", "src_insts", "=", "data", "[", "'test'", "]", "[", "'src'", "]", ",", "\n", "tgt_insts", "=", "data", "[", "'test'", "]", "[", "'tgt'", "]", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "cuda_on", "=", "opt", ".", "cuda_on", ",", "\n", "shuffle_on", "=", "False", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "valid_data", "=", "DataIterator", "(", "\n", "src_insts", "=", "data", "[", "'valid'", "]", "[", "'src'", "]", ",", "\n", "tgt_insts", "=", "data", "[", "'valid'", "]", "[", "'tgt'", "]", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "cuda_on", "=", "opt", ".", "cuda_on", ",", "\n", "shuffle_on", "=", "False", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "return", "train_data", ",", "valid_data", ",", "test_data", ",", "adjs", ",", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.None.runner.run": [[15, 68], ["os.path.join", "os.makedirs", "utils.logger.get_logger", "utils.logger.get_logger.info", "utils.logger.get_logger.info", "range", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "utils.logger.log_performance", "os.path.exists", "os.makedirs", "vars", "utils.logger.get_logger.info", "utils.epochs.train_epoch", "utils.metrics.compute_metrics", "train_metrics.append", "utils.epochs.eval_epoch", "utils.metrics.compute_metrics", "valid_metrics.append", "utils.epochs.eval_epoch", "utils.metrics.compute_metrics", "test_metrics.append", "utils.logger.log_performance", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "scheduler.step"], "function", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.logger.get_logger", "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.logger.log_performance", "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.epochs.train_epoch", "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.metrics.compute_metrics", "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.epochs.eval_epoch", "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.metrics.compute_metrics", "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.epochs.eval_epoch", "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.metrics.compute_metrics", "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.logger.log_performance"], ["def", "run", "(", "model", ",", "train_data", ",", "valid_data", ",", "test_data", ",", "optimizer", ",", "scheduler", ",", "opt", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "results_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "results_dir", ")", "\n", "", "epochs_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "results_dir", ",", "'epochs'", ")", "\n", "os", ".", "makedirs", "(", "epochs_dir", ")", "\n", "\n", "logger", "=", "get_logger", "(", "opt", ".", "name", ",", "opt", ".", "results_dir", ")", "\n", "logger", ".", "info", "(", "model", ")", "\n", "logger", ".", "info", "(", "vars", "(", "opt", ")", ")", "\n", "\n", "train_metrics", "=", "[", "]", "\n", "valid_metrics", "=", "[", "]", "\n", "test_metrics", "=", "[", "]", "\n", "\n", "for", "epoch_i", "in", "range", "(", "opt", ".", "num_epochs", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'[ Epoch {}] \\n'", ".", "format", "(", "epoch_i", ")", ")", "\n", "\n", "if", "scheduler", "and", "opt", ".", "lr_decay", ">", "0", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "# ======================= TRAINING ======================= #", "\n", "", "train_predictions", ",", "train_targets", ",", "train_totals", "=", "train_epoch", "(", "model", ",", "train_data", ",", "optimizer", ")", "\n", "train_metrics_epoch", ",", "train_tau", "=", "compute_metrics", "(", "train_predictions", ",", "train_targets", ",", "train_totals", ")", "\n", "train_metrics", ".", "append", "(", "train_metrics_epoch", ")", "\n", "\n", "# ====================== VALIDATION ====================== #", "\n", "valid_predictions", ",", "valid_targets", ",", "valid_totals", "=", "eval_epoch", "(", "model", ",", "valid_data", ")", "\n", "valid_metrics_epoch", ",", "valid_tau", "=", "compute_metrics", "(", "valid_predictions", ",", "valid_targets", ",", "valid_totals", ")", "\n", "valid_metrics", ".", "append", "(", "valid_metrics_epoch", ")", "\n", "\n", "# ======================= TESTING ======================= #", "\n", "test_predictions", ",", "test_targets", ",", "test_totals", "=", "eval_epoch", "(", "model", ",", "test_data", ")", "\n", "test_metrics_epoch", ",", "_", "=", "compute_metrics", "(", "test_predictions", ",", "test_targets", ",", "test_totals", ",", "br_thresholds", "=", "train_tau", ")", "\n", "test_metrics", ".", "append", "(", "test_metrics_epoch", ")", "\n", "\n", "log_performance", "(", "logger", ",", "test_metrics_epoch", ")", "\n", "\n", "# writer = SummaryWriter(os.path.join(opt.results_dir, 'board'))", "\n", "# for metric in train_metrics_epoch.keys():", "\n", "#     writer.add_scalar(\"train/\" + metric, train_metrics_epoch[metric], epoch_i + 1)", "\n", "# for metric in valid_metrics_epoch.keys():", "\n", "#     writer.add_scalar(\"valid/\" + metric, valid_metrics_epoch[metric], epoch_i + 1)", "\n", "# for metric in test_metrics_epoch.keys():", "\n", "#     writer.add_scalar(\"test/\" + metric, test_metrics_epoch[metric], epoch_i + 1)", "\n", "\n", "", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "results_dir", ",", "'model.pt'", ")", ")", "\n", "torch", ".", "save", "(", "opt", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "results_dir", ",", "'opt.pt'", ")", ")", "\n", "torch", ".", "save", "(", "train_metrics", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "results_dir", ",", "'train_metrics.pt'", ")", ")", "\n", "torch", ".", "save", "(", "valid_metrics", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "results_dir", ",", "'valid_metrics.pt'", ")", ")", "\n", "torch", ".", "save", "(", "test_metrics", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "results_dir", ",", "'test_metrics.pt'", ")", ")", "\n", "\n", "log_performance", "(", "logger", ",", "test_metrics", ",", "type", "=", "'best'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.None.main.main": [[9, 72], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "int", "int", "processor.process", "network.Model.MrMP", "int", "torch.optim.Adam", "torch.optim.Adam", "torch.torch.optim.lr_scheduler.StepLR", "torch.torch.optim.lr_scheduler.StepLR", "runner.run", "int", "time.strftime", "sum", "nn.DataParallel.parameters", "torch.cuda.is_available", "torch.cuda.is_available", "nn.DataParallel.cuda", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "time.strftime", "p.numel", "nn.DataParallel.parameters"], "function", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.None.processor.process", "home.repos.pwc.inspect_result.muberraozmen_mrmp.None.runner.run"], ["def", "main", "(", ")", ":", "\n", "\n", "# ======== Parsing Arguments ========#", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-name'", ",", "type", "=", "str", ",", "default", "=", "'testrun'", ")", "\n", "parser", ".", "add_argument", "(", "'-data_dir'", ",", "type", "=", "str", ",", "default", "=", "'./data/'", ")", "\n", "parser", ".", "add_argument", "(", "'-dataset'", ",", "type", "=", "str", ",", "default", "=", "'bibtex'", ")", "\n", "parser", ".", "add_argument", "(", "'-results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-n_layers_enc'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'-n_layers_dec'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'-d_model'", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "'-d_inner'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "parser", ".", "add_argument", "(", "'-n_head'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'-dropout'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'-enc_pos_embedding'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-mrmp_on'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-n_layers_mrmp'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'-mrmp_composition_mode'", ",", "type", "=", "str", ",", "default", "=", "'mul'", ")", "\n", "parser", ".", "add_argument", "(", "'-mrmp_adjs'", ",", "choices", "=", "[", "'occ'", ",", "'chi2'", "]", ",", "default", "=", "'chi2'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-cuda_on'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-num_epochs'", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "'-batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ")", "\n", "parser", ".", "add_argument", "(", "'-lr_step_size'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'-lr_decay'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# ======== Configuring Arguments ========#", "\n", "opt", ".", "d_v", "=", "int", "(", "opt", ".", "d_model", "/", "opt", ".", "n_head", ")", "\n", "opt", ".", "d_k", "=", "int", "(", "opt", ".", "d_model", "/", "opt", ".", "n_head", ")", "\n", "if", "opt", ".", "d_inner", "==", "-", "1", ":", "\n", "        ", "opt", ".", "d_inner", "=", "int", "(", "opt", ".", "d_model", "*", "4", ")", "\n", "\n", "", "if", "opt", ".", "dataset", "in", "[", "'bibtex'", ",", "'reuters'", ",", "'sider'", "]", ":", "\n", "        ", "opt", ".", "dropout", "=", "0.2", "\n", "\n", "", "opt", ".", "name", "=", "opt", ".", "name", "+", "'_'", "+", "time", ".", "strftime", "(", "'%d_%m_%Y'", ")", "+", "'_'", "+", "time", ".", "strftime", "(", "'%H_%M_%S'", ")", "\n", "opt", ".", "results_dir", "=", "opt", ".", "results_dir", "+", "'/'", "+", "opt", ".", "dataset", "+", "'/'", "+", "opt", ".", "name", "+", "'/'", "\n", "\n", "# ============= Get Inputs =============#", "\n", "train_data", ",", "valid_data", ",", "test_data", ",", "adjs", ",", "opt", "=", "process", "(", "opt", ")", "\n", "\n", "# =========== Prepare Model ============#", "\n", "model", "=", "MrMP", "(", "opt", ",", "adjs", "=", "adjs", ")", "\n", "\n", "opt", ".", "num_parameters", "=", "int", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "betas", "=", "(", "0.9", ",", "0.98", ")", ",", "lr", "=", "opt", ".", "lr", ")", "\n", "scheduler", "=", "torch", ".", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "\n", "step_size", "=", "opt", ".", "lr_step_size", ",", "gamma", "=", "opt", ".", "lr_decay", ",", "last_epoch", "=", "-", "1", ")", "\n", "\n", "if", "opt", ".", "cuda_on", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "# ============= Run Experiment =============#", "\n", "", "", "run", "(", "model", ",", "train_data", ",", "valid_data", ",", "test_data", ",", "optimizer", ",", "scheduler", ",", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.metrics.compute_metrics": [[6, 65], ["targets.cpu().numpy.cpu().numpy", "predictions.cpu().numpy.cpu().numpy", "len", "len", "predictions.cpu().numpy.copy", "sklearn.metrics.accuracy_score", "predictions.cpu().numpy.copy", "predictions.cpu().numpy.copy", "sklearn.metrics.f1_score", "predictions.cpu().numpy.copy", "sklearn.metrics.f1_score", "predictions.cpu().numpy.copy", "sklearn.metrics.f1_score", "targets.cpu().numpy.cpu", "predictions.cpu().numpy.cpu", "predictions.cpu().numpy.copy", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.hamming_loss", "sklearn.metrics.hamming_loss"], "function", ["None"], ["def", "compute_metrics", "(", "predictions", ",", "targets", ",", "totals", ",", "br_thresholds", "=", "None", ")", ":", "\n", "\n", "    ", "targets", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "predictions", "=", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "loss", "=", "totals", "[", "'loss'", "]", "/", "len", "(", "predictions", ")", "\n", "bce", "=", "totals", "[", "'bce'", "]", "/", "len", "(", "predictions", ")", "\n", "\n", "metrics_dict", "=", "{", "'ACC'", ":", "0", ",", "'HA'", ":", "0", ",", "'ebF1'", ":", "0", ",", "'miF1'", ":", "0", ",", "'maF1'", ":", "0", ",", "\n", "'loss'", ":", "loss", ",", "'bce'", ":", "bce", "}", "\n", "\n", "if", "br_thresholds", "is", "None", ":", "\n", "        ", "br_thresholds", "=", "{", "'ACC'", ":", "0", ",", "'HA'", ":", "0", ",", "'ebF1'", ":", "0", ",", "'miF1'", ":", "0", ",", "'maF1'", ":", "0", "}", "\n", "for", "tau", "in", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", ":", "\n", "            ", "pred", "=", "predictions", ".", "copy", "(", ")", "\n", "pred", "[", "pred", "<", "tau", "]", "=", "0", "\n", "pred", "[", "pred", ">=", "tau", "]", "=", "1", "\n", "ACC", "=", "accuracy_score", "(", "targets", ",", "pred", ")", "\n", "HA", "=", "1", "-", "hamming_loss", "(", "targets", ",", "pred", ")", "\n", "ebF1", "=", "f1_score", "(", "targets", ",", "pred", ",", "average", "=", "'samples'", ")", "\n", "miF1", "=", "f1_score", "(", "targets", ",", "pred", ",", "average", "=", "'micro'", ")", "\n", "maF1", "=", "f1_score", "(", "targets", ",", "pred", ",", "average", "=", "'macro'", ")", "\n", "if", "ACC", ">=", "metrics_dict", "[", "'ACC'", "]", ":", "\n", "                ", "metrics_dict", "[", "'ACC'", "]", "=", "ACC", "\n", "br_thresholds", "[", "'ACC'", "]", "=", "tau", "\n", "", "if", "HA", ">=", "metrics_dict", "[", "'HA'", "]", ":", "\n", "                ", "metrics_dict", "[", "'HA'", "]", "=", "HA", "\n", "br_thresholds", "[", "'HA'", "]", "=", "tau", "\n", "", "if", "ebF1", ">=", "metrics_dict", "[", "'ebF1'", "]", ":", "\n", "                ", "metrics_dict", "[", "'ebF1'", "]", "=", "ebF1", "\n", "br_thresholds", "[", "'ebF1'", "]", "=", "tau", "\n", "", "if", "miF1", ">=", "metrics_dict", "[", "'miF1'", "]", ":", "\n", "                ", "metrics_dict", "[", "'miF1'", "]", "=", "miF1", "\n", "br_thresholds", "[", "'miF1'", "]", "=", "tau", "\n", "", "if", "maF1", ">=", "metrics_dict", "[", "'maF1'", "]", ":", "\n", "                ", "metrics_dict", "[", "'maF1'", "]", "=", "maF1", "\n", "br_thresholds", "[", "'maF1'", "]", "=", "tau", "\n", "", "", "", "else", ":", "\n", "        ", "pred", "=", "predictions", ".", "copy", "(", ")", "\n", "pred", "[", "pred", "<", "br_thresholds", "[", "'ACC'", "]", "]", "=", "0", "\n", "pred", "[", "pred", ">=", "br_thresholds", "[", "'ACC'", "]", "]", "=", "1", "\n", "metrics_dict", "[", "'ACC'", "]", "=", "accuracy_score", "(", "targets", ",", "pred", ")", "\n", "pred", "=", "predictions", ".", "copy", "(", ")", "\n", "pred", "[", "pred", "<", "br_thresholds", "[", "'HA'", "]", "]", "=", "0", "\n", "pred", "[", "pred", ">=", "br_thresholds", "[", "'HA'", "]", "]", "=", "1", "\n", "metrics_dict", "[", "'HA'", "]", "=", "1", "-", "hamming_loss", "(", "targets", ",", "pred", ")", "\n", "pred", "=", "predictions", ".", "copy", "(", ")", "\n", "pred", "[", "pred", "<", "br_thresholds", "[", "'ebF1'", "]", "]", "=", "0", "\n", "pred", "[", "pred", ">=", "br_thresholds", "[", "'ebF1'", "]", "]", "=", "1", "\n", "metrics_dict", "[", "'ebF1'", "]", "=", "f1_score", "(", "targets", ",", "pred", ",", "average", "=", "'samples'", ")", "\n", "pred", "=", "predictions", ".", "copy", "(", ")", "\n", "pred", "[", "pred", "<", "br_thresholds", "[", "'miF1'", "]", "]", "=", "0", "\n", "pred", "[", "pred", ">=", "br_thresholds", "[", "'miF1'", "]", "]", "=", "1", "\n", "metrics_dict", "[", "'miF1'", "]", "=", "f1_score", "(", "targets", ",", "pred", ",", "average", "=", "'micro'", ")", "\n", "pred", "=", "predictions", ".", "copy", "(", ")", "\n", "pred", "[", "pred", "<", "br_thresholds", "[", "'maF1'", "]", "]", "=", "0", "\n", "pred", "[", "pred", ">=", "br_thresholds", "[", "'maF1'", "]", "]", "=", "1", "\n", "metrics_dict", "[", "'maF1'", "]", "=", "f1_score", "(", "targets", ",", "pred", ",", "average", "=", "'macro'", ")", "\n", "\n", "", "return", "metrics_dict", ",", "br_thresholds", "\n", "", ""]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.logger.get_logger": [[8, 28], ["logging.config.dictConfig", "logging.config.dictConfig", "logging.getLogger", "logging.getLogger", "logging.StreamHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.Formatter", "logging.Formatter"], "function", ["None"], ["def", "get_logger", "(", "name", ",", "log_dir", ")", ":", "\n", "\n", "    ", "config_dict", "=", "{", "\"version\"", ":", "1", ",", "\n", "\"formatters\"", ":", "{", "\"base\"", ":", "{", "\"format\"", ":", "\"%(message)s\"", "}", "}", ",", "\n", "\"handlers\"", ":", "{", "\"base\"", ":", "{", "\"class\"", ":", "\"logging.FileHandler\"", ",", "\n", "\"level\"", ":", "\"DEBUG\"", ",", "\n", "\"formatter\"", ":", "\"base\"", ",", "\n", "\"filename\"", ":", "log_dir", "+", "name", ",", "\n", "\"encoding\"", ":", "\"utf8\"", "}", "}", ",", "\n", "\"root\"", ":", "{", "\"level\"", ":", "\"DEBUG\"", ",", "\"handlers\"", ":", "[", "\"base\"", "]", "}", ",", "\n", "\"disable_existing_loggers\"", ":", "False", "}", "\n", "\n", "logging", ".", "config", ".", "dictConfig", "(", "config_dict", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "console_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "console_handler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "'%(message)s'", ")", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.logger.log_performance": [[30, 58], ["logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "pandas.DataFrame", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "df[].min", "df[].min", "df[].max", "df[].max", "df[].max", "df[].max", "df[].max"], "function", ["None"], ["", "def", "log_performance", "(", "logger", ",", "metrics", ",", "type", "=", "'epoch'", ")", ":", "\n", "    ", "if", "type", "==", "'epoch'", ":", "\n", "        ", "logger", ".", "info", "(", "'loss:   \\t {:.6} '", ".", "format", "(", "metrics", "[", "'loss'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'bce:    \\t {:.6}'", ".", "format", "(", "metrics", "[", "'bce'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'ACC:    \\t {:.6} '", ".", "format", "(", "metrics", "[", "'ACC'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'HA:     \\t {:.6} '", ".", "format", "(", "metrics", "[", "'HA'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'ebF1:   \\t {:.6} '", ".", "format", "(", "metrics", "[", "'ebF1'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'miF1:   \\t {:.6} '", ".", "format", "(", "metrics", "[", "'miF1'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'maF1:   \\t {:.6} '", ".", "format", "(", "metrics", "[", "'maF1'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'\\n'", ")", "\n", "\n", "return", "\n", "", "if", "type", "==", "'best'", ":", "\n", "        ", "df", "=", "pd", ".", "DataFrame", "(", "metrics", ")", "\n", "best_metrics", "=", "{", "'loss'", ":", "df", "[", "'loss'", "]", ".", "min", "(", ")", ",", "'bce'", ":", "df", "[", "'bce'", "]", ".", "min", "(", ")", ",", "\n", "'ACC'", ":", "df", "[", "'ACC'", "]", ".", "max", "(", ")", ",", "'HA'", ":", "df", "[", "'HA'", "]", ".", "max", "(", ")", ",", "\n", "'ebF1'", ":", "df", "[", "'ebF1'", "]", ".", "max", "(", ")", ",", "'miF1'", ":", "df", "[", "'miF1'", "]", ".", "max", "(", ")", ",", "'maF1'", ":", "df", "[", "'maF1'", "]", ".", "max", "(", ")", "}", "\n", "logger", ".", "info", "(", "'BEST PERFORMANCES OF TESTING\\n'", ")", "\n", "logger", ".", "info", "(", "'loss:   \\t {:.6} '", ".", "format", "(", "best_metrics", "[", "'loss'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'bce:    \\t {:.6} '", ".", "format", "(", "best_metrics", "[", "'bce'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'ACC:    \\t {:.6} '", ".", "format", "(", "best_metrics", "[", "'ACC'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'HA:     \\t {:.6} '", ".", "format", "(", "best_metrics", "[", "'HA'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'ebF1:   \\t {:.6} '", ".", "format", "(", "best_metrics", "[", "'ebF1'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'miF1:   \\t {:.6} '", ".", "format", "(", "best_metrics", "[", "'miF1'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'maF1:   \\t {:.6} '", ".", "format", "(", "best_metrics", "[", "'maF1'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'\\n'", ")", "\n", "\n", "return", "best_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.graphs.calc_graphs": [[7, 30], ["len", "len", "range", "scipy.sparse.coo_matrix", "len", "graphs._by_chi2_contingency", "graphs._by_occurrences", "row.append", "column.append", "values.append"], "function", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.graphs._by_chi2_contingency", "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.graphs._by_occurrences"], ["def", "calc_graphs", "(", "data", ",", "type", "=", "'chi2'", ",", "quantiles", "=", "[", "0.05", ",", "0.95", "]", ")", ":", "\n", "    ", "label_seq", "=", "data", "[", "'train'", "]", "[", "'tgt'", "]", "\n", "num_observations", "=", "len", "(", "data", "[", "'train'", "]", "[", "'tgt'", "]", ")", "\n", "num_labels", "=", "len", "(", "data", "[", "'dict'", "]", "[", "'tgt'", "]", ")", "\n", "row", "=", "[", "]", "\n", "column", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "label_seq", ")", ")", ":", "\n", "        ", "for", "l", "in", "label_seq", "[", "i", "]", ":", "\n", "            ", "row", ".", "append", "(", "i", ")", "\n", "column", ".", "append", "(", "l", ")", "\n", "values", ".", "append", "(", "1", ")", "\n", "", "", "y", "=", "coo_matrix", "(", "(", "values", ",", "(", "row", ",", "column", ")", ")", ",", "shape", "=", "(", "num_observations", ",", "num_labels", ")", ")", "\n", "\n", "adjs", "=", "None", "\n", "\n", "if", "type", "==", "'chi2'", ":", "\n", "        ", "adjs", "=", "_by_chi2_contingency", "(", "y", ",", "quantiles", ")", "\n", "\n", "", "if", "type", "==", "'occ'", ":", "\n", "        ", "adjs", "=", "_by_occurrences", "(", "y", ")", "\n", "\n", "", "return", "adjs", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.graphs._by_chi2_contingency": [[32, 58], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nan_to_num.fill_diagonal_", "torch.nan_to_num", "min", "max", "float", "torch.quantile", "torch.quantile", "y.transpose", "torch.nan_to_num.nanmean", "y.transpose().todense", "y.todense", "y.transpose", "y.transpose"], "function", ["None"], ["", "def", "_by_chi2_contingency", "(", "y", ",", "quantiles", "=", "[", "0.05", ",", "0.95", "]", ",", "return_skeleton", "=", "False", ")", ":", "\n", "\n", "# cell counts", "\n", "    ", "num_observations", "=", "y", ".", "shape", "[", "0", "]", "\n", "count11", "=", "torch", ".", "Tensor", "(", "(", "y", ".", "transpose", "(", ")", "*", "y", ")", ".", "todense", "(", ")", ")", "\n", "count01", "=", "torch", ".", "Tensor", "(", "(", "1", "-", "y", ".", "transpose", "(", ")", ".", "todense", "(", ")", ")", "*", "y", ")", "\n", "count10", "=", "torch", ".", "Tensor", "(", "y", ".", "transpose", "(", ")", "*", "(", "1", "-", "y", ".", "todense", "(", ")", ")", ")", "\n", "count00", "=", "torch", ".", "Tensor", "(", "num_observations", "-", "count11", "-", "count10", "-", "count01", ")", "\n", "\n", "# chi2 testing on pairwise dependencies", "\n", "phi_stat", "=", "(", "count11", "*", "count00", "-", "count01", "*", "count10", ")", "/", "(", "\n", "(", "(", "count11", "+", "count01", ")", "*", "(", "count10", "+", "count00", ")", "*", "(", "count11", "+", "count10", ")", "*", "(", "count01", "+", "count00", ")", ")", "**", "0.5", ")", "\n", "\n", "phi_stat", "=", "phi_stat", ".", "fill_diagonal_", "(", "float", "(", "'nan'", ")", ")", "\n", "phi_stat", "=", "torch", ".", "nan_to_num", "(", "phi_stat", ",", "nan", "=", "phi_stat", ".", "nanmean", "(", ")", ")", "\n", "\n", "lower", ",", "upper", "=", "torch", ".", "quantile", "(", "phi_stat", ",", "quantiles", "[", "0", "]", ")", ",", "torch", ".", "quantile", "(", "phi_stat", ",", "quantiles", "[", "1", "]", ")", "\n", "lower", "=", "min", "(", "0", ",", "lower", ")", "\n", "upper", "=", "max", "(", "0", ",", "upper", ")", "\n", "pulling", "=", "1", "*", "(", "phi_stat", ">=", "upper", ")", "\n", "pushing", "=", "1", "*", "(", "phi_stat", "<=", "lower", ")", "\n", "\n", "if", "return_skeleton", ":", "\n", "        ", "return", "pulling", "+", "pushing", "\n", "", "else", ":", "\n", "        ", "return", "[", "pulling", ",", "pushing", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.graphs._by_occurrences": [[60, 66], ["torch.Tensor", "y.transpose"], "function", ["None"], ["", "", "def", "_by_occurrences", "(", "y", ")", ":", "\n", "    ", "count11", "=", "torch", ".", "Tensor", "(", "(", "y", ".", "transpose", "(", ")", "*", "y", ")", ".", "todense", "(", ")", ")", "\n", "pulling", "=", "1", "*", "(", "count11", ">", "0", ")", "\n", "pushing", "=", "1", "*", "(", "count11", "==", "0", ")", "\n", "adjs", "=", "[", "pulling", ",", "pushing", "]", "\n", "return", "adjs", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.epochs.train_epoch": [[8, 46], ["model.train", "tqdm.tqdm", "optimizer.zero_grad", "model", "torch.sigmoid", "seq2bin().to", "model.loss_fn", "loss.backward", "optimizer.step", "loss.item", "bce.item", "torch.cat", "torch.cat", "epochs.seq2bin", "pred.size"], "function", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.loss_fn", "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.epochs.seq2bin"], ["def", "train_epoch", "(", "model", ",", "train_data", ",", "optimizer", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "predictions", "=", "None", "\n", "targets", "=", "None", "\n", "total_loss", "=", "0", "\n", "total_bce", "=", "0", "\n", "\n", "for", "batch", "in", "tqdm", "(", "train_data", ",", "mininterval", "=", "0.5", ",", "desc", "=", "'  - (Training)   '", ",", "leave", "=", "False", ")", ":", "\n", "\n", "# prepare data", "\n", "        ", "src_seq", ",", "tgt_seq", "=", "batch", "\n", "\n", "# forward", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "pred", ",", "mrmp_output", "=", "model", "(", "src_seq", ")", "\n", "norm_pred", "=", "torch", ".", "sigmoid", "(", "pred", ")", "\n", "\n", "tgt_binary", "=", "seq2bin", "(", "tgt_seq", ",", "pred", ".", "size", "(", "1", ")", ")", ".", "to", "(", "pred", ".", "device", ")", "\n", "loss", ",", "bce", "=", "model", ".", "loss_fn", "(", "pred", ",", "tgt_binary", ",", "mrmp_output", ")", "\n", "\n", "# backward and update parameters", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# note keeping", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "total_bce", "+=", "bce", ".", "item", "(", ")", "\n", "if", "predictions", "is", "None", ":", "\n", "            ", "predictions", "=", "norm_pred", ".", "data", "\n", "targets", "=", "tgt_binary", ".", "data", "\n", "", "else", ":", "\n", "            ", "predictions", "=", "torch", ".", "cat", "(", "(", "predictions", ",", "norm_pred", ".", "data", ")", ",", "0", ")", "\n", "targets", "=", "torch", ".", "cat", "(", "(", "targets", ",", "tgt_binary", ".", "data", ")", ",", "0", ")", "\n", "\n", "", "", "totals", "=", "{", "'loss'", ":", "total_loss", ",", "'bce'", ":", "total_bce", "}", "\n", "\n", "return", "predictions", ",", "targets", ",", "totals", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.epochs.eval_epoch": [[48, 83], ["model.eval", "torch.no_grad", "tqdm.tqdm", "model", "torch.sigmoid", "seq2bin().to", "model.loss_fn", "loss.item", "bce.item", "torch.cat", "torch.cat", "epochs.seq2bin", "pred.size"], "function", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.loss_fn", "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.epochs.seq2bin"], ["", "def", "eval_epoch", "(", "model", ",", "eval_data", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "predictions", "=", "None", "\n", "targets", "=", "None", "\n", "total_loss", "=", "0", "\n", "total_bce", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "for", "batch", "in", "tqdm", "(", "eval_data", ",", "mininterval", "=", "0.5", ",", "desc", "=", "'  - (Evaluating)   '", ",", "leave", "=", "False", ")", ":", "\n", "\n", "# prepare data", "\n", "            ", "src_seq", ",", "tgt_seq", "=", "batch", "\n", "\n", "# forward", "\n", "pred", ",", "mrmp_output", "=", "model", "(", "src_seq", ")", "\n", "norm_pred", "=", "torch", ".", "sigmoid", "(", "pred", ")", "\n", "\n", "tgt_binary", "=", "seq2bin", "(", "tgt_seq", ",", "pred", ".", "size", "(", "1", ")", ")", ".", "to", "(", "pred", ".", "device", ")", "\n", "loss", ",", "bce", "=", "model", ".", "loss_fn", "(", "pred", ",", "tgt_binary", ",", "mrmp_output", ")", "\n", "\n", "# note keeping", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "total_bce", "+=", "bce", ".", "item", "(", ")", "\n", "if", "predictions", "is", "None", ":", "\n", "                ", "predictions", "=", "norm_pred", ".", "data", "\n", "targets", "=", "tgt_binary", ".", "data", "\n", "", "else", ":", "\n", "                ", "predictions", "=", "torch", ".", "cat", "(", "(", "predictions", ",", "norm_pred", ".", "data", ")", ",", "0", ")", "\n", "targets", "=", "torch", ".", "cat", "(", "(", "targets", ",", "tgt_binary", ".", "data", ")", ",", "0", ")", "\n", "\n", "", "", "", "totals", "=", "{", "'loss'", ":", "total_loss", ",", "'bce'", ":", "total_bce", "}", "\n", "\n", "return", "predictions", ",", "targets", ",", "totals", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.epochs.seq2bin": [[85, 94], ["list", "range", "torch.tensor", "len", "numpy.zeros", "list.append", "numpy.delete"], "function", ["None"], ["", "def", "seq2bin", "(", "seq", ",", "length", ",", "drop", "=", "None", ")", ":", "\n", "    ", "bin", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "seq", ")", ")", ":", "\n", "        ", "y", "=", "np", ".", "zeros", "(", "length", ")", "\n", "y", "[", "seq", "[", "i", "]", "]", "=", "1", "\n", "if", "drop", "is", "not", "None", ":", "\n", "            ", "y", "=", "np", ".", "delete", "(", "y", ",", "drop", ")", "\n", "", "bin", ".", "append", "(", "y", ")", "\n", "", "return", "torch", ".", "tensor", "(", "bin", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.loader.DataIterator.__init__": [[11, 30], ["int", "len", "len", "len", "numpy.ceil", "loader.DataIterator.shuffle", "len"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.loader.DataIterator.shuffle"], ["def", "__init__", "(", "\n", "self", ",", "src_insts", ",", "tgt_insts", ",", "batch_size", "=", "64", ",", "cuda_on", "=", "False", ",", "shuffle_on", "=", "True", ",", "drop_last", "=", "False", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "src_insts", ")", ">=", "batch_size", "\n", "assert", "len", "(", "src_insts", ")", "==", "len", "(", "tgt_insts", ")", "\n", "\n", "self", ".", "_src_insts", "=", "src_insts", "\n", "self", ".", "_tgt_insts", "=", "tgt_insts", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_n_batch", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "src_insts", ")", "/", "batch_size", ")", ")", "\n", "if", "drop_last", ":", "\n", "            ", "self", ".", "_n_batch", "-=", "1", "\n", "", "self", ".", "cuda_on", "=", "cuda_on", "\n", "\n", "self", ".", "_iter_count", "=", "0", "\n", "\n", "self", ".", "_shuffle_on", "=", "shuffle_on", "\n", "if", "self", ".", "_shuffle_on", ":", "\n", "            ", "self", ".", "shuffle", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.loader.DataIterator.shuffle": [[31, 36], ["list", "random.shuffle", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.loader.DataIterator.shuffle"], ["", "", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "\"\"\" Shuffle data for a brand new start \"\"\"", "\n", "paired_insts", "=", "list", "(", "zip", "(", "self", ".", "_src_insts", ",", "self", ".", "_tgt_insts", ")", ")", "\n", "random", ".", "shuffle", "(", "paired_insts", ")", "\n", "self", ".", "_src_insts", ",", "self", ".", "_tgt_insts", "=", "zip", "(", "*", "paired_insts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.loader.DataIterator.__iter__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.loader.DataIterator.__next__": [[40, 42], ["loader.DataIterator.next"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.loader.DataIterator.next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.loader.DataIterator.__len__": [[43, 45], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.loader.DataIterator.next": [[46, 80], ["max", "torch.Tensor", "pad_to_longest().long", "StopIteration", "src_insts.cuda.cuda.cuda", "loader.DataIterator.shuffle", "len", "loader.DataIterator.next.pad_to_longest"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.utils.loader.DataIterator.shuffle"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the next batch \"\"\"", "\n", "\n", "def", "pad_to_longest", "(", "insts", ",", "padding_index", "=", "0", ")", ":", "\n", "            ", "\"\"\" Pad the instance to the max seq length in batch \"\"\"", "\n", "max_len", "=", "max", "(", "len", "(", "inst", ")", "for", "inst", "in", "insts", ")", "\n", "inst_data", "=", "torch", ".", "Tensor", "(", "[", "\n", "inst", "+", "[", "padding_index", "]", "*", "(", "max_len", "-", "len", "(", "inst", ")", ")", "\n", "for", "inst", "in", "insts", "]", ")", "\n", "return", "inst_data", "\n", "\n", "", "if", "self", ".", "_iter_count", "<", "self", ".", "_n_batch", ":", "\n", "\n", "            ", "batch_idx", "=", "self", ".", "_iter_count", "\n", "self", ".", "_iter_count", "+=", "1", "\n", "start_idx", "=", "batch_idx", "*", "self", ".", "_batch_size", "\n", "end_idx", "=", "(", "batch_idx", "+", "1", ")", "*", "self", ".", "_batch_size", "\n", "\n", "src_insts", "=", "self", ".", "_src_insts", "[", "start_idx", ":", "end_idx", "]", "\n", "src_insts", "=", "pad_to_longest", "(", "src_insts", ",", "padding_index", "=", "0", ")", ".", "long", "(", ")", "\n", "tgt_insts", "=", "self", ".", "_tgt_insts", "[", "start_idx", ":", "end_idx", "]", "\n", "\n", "if", "self", ".", "cuda_on", ":", "\n", "                ", "src_insts", "=", "src_insts", ".", "cuda", "(", ")", "\n", "\n", "", "return", "src_insts", ",", "tgt_insts", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "if", "self", ".", "_shuffle_on", ":", "\n", "                ", "self", ".", "shuffle", "(", ")", "\n", "\n", "", "self", ".", "_iter_count", "=", "0", "\n", "raise", "StopIteration", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.XavierLinear.__init__": [[10, 14], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_in", ",", "d_out", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "d_in", ",", "d_out", ",", "bias", "=", "bias", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "linear", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.XavierLinear.forward": [[15, 17], ["Modules.XavierLinear.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "linear", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.MultiHeadAttention.__init__": [[27, 44], ["torch.Module.__init__", "Modules.XavierLinear", "Modules.XavierLinear", "Modules.XavierLinear", "Modules.ScaledDotProductAttention", "Modules.XavierLinear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "XavierLinear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks", "=", "XavierLinear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs", "=", "XavierLinear", "(", "d_model", ",", "n_head", "*", "d_v", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "d_k", "**", "0.5", ")", "\n", "\n", "self", ".", "fc", "=", "XavierLinear", "(", "n_head", "*", "d_v", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.MultiHeadAttention.forward": [[45, 72], ["Modules.MultiHeadAttention.w_qs().view", "Modules.MultiHeadAttention.w_ks().view", "Modules.MultiHeadAttention.w_vs().view", "Modules.MultiHeadAttention.attention", "Modules.MultiHeadAttention.transpose().contiguous().view", "Modules.MultiHeadAttention.dropout", "Modules.MultiHeadAttention.layer_norm", "Modules.MultiHeadAttention.size", "Modules.MultiHeadAttention.size", "Modules.MultiHeadAttention.size", "Modules.MultiHeadAttention.size", "Modules.MultiHeadAttention.transpose", "Modules.MultiHeadAttention.transpose", "Modules.MultiHeadAttention.transpose", "Modules.MultiHeadAttention.fc", "Modules.MultiHeadAttention.w_qs", "Modules.MultiHeadAttention.w_ks", "Modules.MultiHeadAttention.w_vs", "Modules.MultiHeadAttention.transpose().contiguous", "Modules.MultiHeadAttention.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "sz_b", ",", "len_q", ",", "len_k", ",", "len_v", "=", "q", ".", "size", "(", "0", ")", ",", "q", ".", "size", "(", "1", ")", ",", "k", ".", "size", "(", "1", ")", ",", "v", ".", "size", "(", "1", ")", "\n", "\n", "residual", "=", "q", "\n", "\n", "# Pass through the pre-attention projection: b x lq x (n*dv)", "\n", "# Separate different heads: b x lq x n x dv", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "# Transpose for attention dot product: b x n x lq x dv", "\n", "q", ",", "k", ",", "v", "=", "q", ".", "transpose", "(", "1", ",", "2", ")", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ",", "v", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "q", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "mask", ")", "\n", "\n", "# Transpose to move the head dimension back: b x lq x n x dv", "\n", "# Combine the last two dimensions to concatenate all the heads together: b x lq x (n*dv)", "\n", "q", "=", "q", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "-", "1", ")", "\n", "q", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "q", ")", ")", "\n", "q", "+=", "residual", "\n", "\n", "q", "=", "self", ".", "layer_norm", "(", "q", ")", "\n", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.PositionwiseFeedForward.__init__": [[76, 82], ["torch.Module.__init__", "Modules.XavierLinear", "Modules.XavierLinear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_in", ",", "d_hid", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "XavierLinear", "(", "d_in", ",", "d_hid", ")", "# position-wise", "\n", "self", ".", "w_2", "=", "XavierLinear", "(", "d_hid", ",", "d_in", ")", "# position-wise", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_in", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.PositionwiseFeedForward.forward": [[83, 91], ["Modules.PositionwiseFeedForward.w_2", "Modules.PositionwiseFeedForward.dropout", "Modules.PositionwiseFeedForward.layer_norm", "torch.relu", "torch.relu", "torch.relu", "Modules.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "x", "=", "self", ".", "w_2", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "+=", "residual", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.ScaledDotProductAttention.__init__": [[95, 99], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.ScaledDotProductAttention.forward": [[100, 110], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "Modules.ScaledDotProductAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "k.transpose", "mask.unsqueeze.unsqueeze.unsqueeze", "attn.masked_fill.masked_fill.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "attn", "=", "torch", ".", "matmul", "(", "q", "/", "self", ".", "temperature", ",", "k", ".", "transpose", "(", "2", ",", "3", ")", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "attn", "=", "attn", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "", "attn", "=", "self", ".", "dropout", "(", "F", ".", "softmax", "(", "attn", ",", "dim", "=", "-", "1", ")", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "attn", ",", "v", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.PositionalEncoding.__init__": [[114, 119], ["torch.Module.__init__", "Modules.PositionalEncoding.register_buffer", "Modules.PositionalEncoding._get_sinusoid_encoding_table"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.__init__", "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.PositionalEncoding._get_sinusoid_encoding_table"], ["    ", "def", "__init__", "(", "self", ",", "d_hid", ",", "n_position", "=", "200", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Not a parameter", "\n", "self", ".", "register_buffer", "(", "'pos_table'", ",", "self", ".", "_get_sinusoid_encoding_table", "(", "n_position", ",", "d_hid", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.PositionalEncoding._get_sinusoid_encoding_table": [[120, 131], ["numpy.array", "numpy.sin", "numpy.cos", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "Modules.PositionalEncoding._get_sinusoid_encoding_table.get_position_angle_vec"], "methods", ["None"], ["", "def", "_get_sinusoid_encoding_table", "(", "self", ",", "n_position", ",", "d_hid", ")", ":", "\n", "        ", "''' Sinusoid position encoding table '''", "\n", "\n", "def", "get_position_angle_vec", "(", "position", ")", ":", "\n", "            ", "return", "[", "position", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "hid_j", "//", "2", ")", "/", "d_hid", ")", "for", "hid_j", "in", "range", "(", "d_hid", ")", "]", "\n", "\n", "", "sinusoid_table", "=", "np", ".", "array", "(", "[", "get_position_angle_vec", "(", "pos_i", ")", "for", "pos_i", "in", "range", "(", "n_position", ")", "]", ")", "\n", "sinusoid_table", "[", "1", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "sinusoid_table", "[", "1", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n", "sinusoid_table", "[", "1", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "sinusoid_table", "[", "1", ":", ",", "1", ":", ":", "2", "]", ")", "# dim 2i+1", "\n", "\n", "return", "torch", ".", "FloatTensor", "(", "sinusoid_table", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.PositionalEncoding.forward": [[132, 134], ["x.squeeze().unsqueeze", "Modules.PositionalEncoding.pos_table[].clone().detach", "x.squeeze", "Modules.PositionalEncoding.pos_table[].clone", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "squeeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "*", "self", ".", "pos_table", "[", ":", ",", ":", "x", ".", "size", "(", "-", "1", ")", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.XavierEmbedding": [[19, 23], ["torch.Embedding", "torch.init.xavier_normal_"], "function", ["None"], ["", "", "def", "XavierEmbedding", "(", "shape", ",", "padding_idx", "=", "None", ")", ":", "\n", "    ", "x", "=", "nn", ".", "Embedding", "(", "*", "shape", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "x", ".", "weight", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Decoder.DecoderLayer.__init__": [[8, 12], ["nn.Module.__init__", "MultiHeadAttention", "PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "enc_attn", "=", "MultiHeadAttention", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn1", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Decoder.DecoderLayer.forward": [[13, 18], ["Decoder.DecoderLayer.enc_attn", "Decoder.DecoderLayer.pos_ffn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_input", ",", "enc_output", ",", "dec_enc_attn_mask", "=", "None", ")", ":", "\n", "        ", "dec_output", "=", "self", ".", "enc_attn", "(", "dec_input", ",", "enc_output", ",", "enc_output", ",", "mask", "=", "dec_enc_attn_mask", ")", "\n", "dec_output", "=", "self", ".", "pos_ffn1", "(", "dec_output", ")", "\n", "\n", "return", "dec_output", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Decoder.Decoder.__init__": [[22, 29], ["nn.Module.__init__", "nn.ModuleList", "Decoder.DecoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DecoderLayer", "(", "opt", ".", "d_model", ",", "opt", ".", "d_inner", ",", "opt", ".", "n_head", ",", "opt", ".", "d_k", ",", "opt", ".", "d_v", ",", "dropout", "=", "opt", ".", "dropout", ")", "\n", "for", "_", "in", "range", "(", "opt", ".", "n_layers_dec", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Decoder.Decoder.forward": [[30, 35], ["dec_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_input", ",", "enc_outputs", ",", "mask", ")", ":", "\n", "        ", "dec_output", "=", "dec_input", "\n", "for", "dec_layer", "in", "self", ".", "layer_stack", ":", "\n", "            ", "dec_output", "=", "dec_layer", "(", "dec_output", ",", "enc_outputs", "[", "-", "1", "]", ",", "dec_enc_attn_mask", "=", "mask", ")", "\n", "", "return", "dec_output", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Encoder.EncoderLayer.__init__": [[8, 12], ["nn.Module.__init__", "MultiHeadAttention", "PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Encoder.EncoderLayer.forward": [[13, 17], ["Encoder.EncoderLayer.slf_attn", "Encoder.EncoderLayer.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "enc_input", ",", "slf_attn_mask", "=", "None", ")", ":", "\n", "        ", "enc_output", "=", "self", ".", "slf_attn", "(", "enc_input", ",", "enc_input", ",", "enc_input", ",", "mask", "=", "slf_attn_mask", ")", "\n", "enc_output", "=", "self", ".", "pos_ffn", "(", "enc_output", ")", "\n", "return", "enc_output", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Encoder.Encoder.__init__": [[21, 31], ["nn.Module.__init__", "nn.ModuleList", "PositionalEncoding", "Encoder.EncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "opt", ".", "enc_pos_embedding", "is", "True", ":", "\n", "            ", "self", ".", "position_enc", "=", "PositionalEncoding", "(", "opt", ".", "d_word_vec", ",", "n_position", "=", "opt", ".", "n_position", ")", "\n", "\n", "", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "[", "\n", "EncoderLayer", "(", "opt", ".", "d_model", ",", "opt", ".", "d_inner", ",", "opt", ".", "n_head", ",", "opt", ".", "d_k", ",", "opt", ".", "d_v", ",", "dropout", "=", "opt", ".", "dropout", ")", "\n", "for", "_", "in", "range", "(", "opt", ".", "n_layers_enc", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Encoder.Encoder.forward": [[32, 44], ["hasattr", "Encoder.Encoder.position_enc", "enc_layer", "enc_outputs.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "enc_input", ",", "mask", ")", ":", "\n", "\n", "        ", "enc_output", "=", "enc_input", "\n", "if", "hasattr", "(", "self", ",", "'position_enc'", ")", ":", "\n", "            ", "enc_output", "+=", "self", ".", "position_enc", "(", "mask", ")", "\n", "\n", "", "enc_outputs", "=", "[", "]", "\n", "for", "enc_layer", "in", "self", ".", "layer_stack", ":", "\n", "            ", "enc_output", "=", "enc_layer", "(", "enc_output", ",", "slf_attn_mask", "=", "mask", ")", "\n", "enc_outputs", ".", "append", "(", "enc_output", ")", "\n", "\n", "", "return", "enc_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.CompGCN.CompGCN.__init__": [[8, 42], ["nn.Module.__init__", "len", "XavierLinear", "XavierLinear", "XavierLinear", "XavierLinear", "PositionwiseFeedForward", "PositionwiseFeedForward", "CompGCN.CompGCN.sym_transform().unsqueeze", "torch.triu", "torch.tril", "torch.eye().unsqueeze().type().to", "adjs_in.append", "adjs_out.append", "adjs_loop.append", "torch.eye().unsqueeze().type().to.sum", "CompGCN.CompGCN.sym_transform", "torch.eye().unsqueeze().type", "torch.eye().unsqueeze", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.__init__", "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.CompGCN.CompGCN.sym_transform"], ["    ", "def", "__init__", "(", "self", ",", "adjs", ",", "d_model", ",", "d_inner", ",", "phi_mode", "=", "'mul'", ",", "dropout", "=", "0.1", ",", "device", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "CompGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_relns", "=", "len", "(", "adjs", ")", "\n", "self", ".", "phi_mode", "=", "phi_mode", "\n", "self", ".", "device", "=", "device", "\n", "if", "self", ".", "device", "is", "None", ":", "\n", "            ", "self", ".", "device", "=", "adjs", "[", "0", "]", ".", "device", "\n", "\n", "", "self", ".", "w_in", "=", "XavierLinear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "w_out", "=", "XavierLinear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "w_loop", "=", "XavierLinear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "w_rel", "=", "XavierLinear", "(", "d_model", ",", "d_model", ")", "\n", "# self.bn = torch.nn.BatchNorm1d(d_model)", "\n", "self", ".", "pos_ffn_l", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn_r", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n", "adjs_in", "=", "[", "]", "\n", "adjs_out", "=", "[", "]", "\n", "adjs_loop", "=", "[", "]", "\n", "for", "adj", "in", "adjs", ":", "\n", "            ", "adj", "=", "self", ".", "sym_transform", "(", "adj", ")", ".", "unsqueeze", "(", "0", ")", "\n", "A_in", "=", "torch", ".", "triu", "(", "adj", ")", "\n", "A_out", "=", "torch", ".", "tril", "(", "adj", ")", "\n", "A_loop", "=", "torch", ".", "eye", "(", "A_in", ".", "shape", "[", "-", "1", "]", ",", "A_in", ".", "shape", "[", "-", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "A_loop", "=", "A_loop", "/", "A_loop", ".", "sum", "(", ")", "\n", "adjs_in", ".", "append", "(", "A_in", ")", "\n", "adjs_out", ".", "append", "(", "A_out", ")", "\n", "adjs_loop", ".", "append", "(", "A_loop", ")", "\n", "\n", "", "self", ".", "adjs_in", "=", "adjs_in", "\n", "self", ".", "adjs_out", "=", "adjs_out", "\n", "self", ".", "adjs_loop", "=", "adjs_loop", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.CompGCN.CompGCN.sym_transform": [[43, 49], ["torch.diag", "torch.matmul", "torch.matmul.sum().pow", "torch.matmul", "torch.matmul.sum", "torch.matmul.sum", "float"], "methods", ["None"], ["", "def", "sym_transform", "(", "self", ",", "A", ")", ":", "\n", "        ", "D_inv", "=", "torch", ".", "diag", "(", "A", ".", "sum", "(", "dim", "=", "1", ")", ".", "pow", "(", "-", "0.5", ")", ")", "\n", "D_inv", "[", "D_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "A", "=", "torch", ".", "matmul", "(", "torch", ".", "matmul", "(", "D_inv", ",", "A", ")", ",", "D_inv", ")", "\n", "A", "=", "A", "/", "A", ".", "sum", "(", ")", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.CompGCN.CompGCN.phi": [[50, 55], ["None"], "methods", ["None"], ["", "def", "phi", "(", "self", ",", "label_emb", ",", "reln_emb", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "'mul'", ":", "\n", "            ", "return", "(", "label_emb", "*", "reln_emb", ")", "\n", "", "elif", "mode", "==", "'sub'", ":", "\n", "            ", "return", "(", "label_emb", "-", "reln_emb", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.CompGCN.CompGCN.forward": [[56, 82], ["range", "CompGCN.CompGCN.pos_ffn_l", "CompGCN.CompGCN.pos_ffn_r", "torch.index_select", "CompGCN.CompGCN.phi", "torch.matmul", "torch.index_select", "CompGCN.CompGCN.phi", "torch.matmul", "torch.index_select", "CompGCN.CompGCN.phi", "torch.matmul", "torch.tensor().to", "CompGCN.CompGCN.w_in", "torch.tensor().to", "CompGCN.CompGCN.w_out", "torch.tensor().to", "CompGCN.CompGCN.w_loop", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.CompGCN.CompGCN.phi", "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.CompGCN.CompGCN.phi", "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.CompGCN.CompGCN.phi"], ["", "", "def", "forward", "(", "self", ",", "labels", ",", "relns", ")", ":", "\n", "\n", "        ", "out_labels", "=", "0", "\n", "for", "r", "in", "range", "(", "self", ".", "num_relns", ")", ":", "\n", "\n", "            ", "reln_in", "=", "torch", ".", "index_select", "(", "relns", ",", "0", ",", "torch", ".", "tensor", "(", "[", "r", "]", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "input_in", "=", "self", ".", "phi", "(", "labels", ",", "reln_in", ",", "self", ".", "phi_mode", ")", "\n", "output_in", "=", "torch", ".", "matmul", "(", "self", ".", "adjs_in", "[", "r", "]", ",", "self", ".", "w_in", "(", "input_in", ")", ")", "\n", "\n", "reln_out", "=", "torch", ".", "index_select", "(", "relns", ",", "0", ",", "torch", ".", "tensor", "(", "[", "self", ".", "num_relns", "+", "r", "]", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "input_out", "=", "self", ".", "phi", "(", "labels", ",", "reln_out", ",", "self", ".", "phi_mode", ")", "\n", "output_out", "=", "torch", ".", "matmul", "(", "self", ".", "adjs_out", "[", "r", "]", ",", "self", ".", "w_out", "(", "input_out", ")", ")", "\n", "\n", "reln_loop", "=", "torch", ".", "index_select", "(", "relns", ",", "0", ",", "torch", ".", "tensor", "(", "[", "2", "*", "self", ".", "num_relns", "+", "r", "]", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "input_loop", "=", "self", ".", "phi", "(", "labels", ",", "reln_loop", ",", "self", ".", "phi_mode", ")", "\n", "output_loop", "=", "torch", ".", "matmul", "(", "self", ".", "adjs_loop", "[", "r", "]", ",", "self", ".", "w_loop", "(", "input_loop", ")", ")", "\n", "\n", "out_labels", "+=", "output_in", "*", "(", "1", "/", "3", ")", "+", "output_out", "*", "(", "1", "/", "3", ")", "+", "output_loop", "*", "(", "1", "/", "3", ")", "\n", "\n", "#        out_labels = self.bn(out_labels.squeeze()).unsqueeze(0)", "\n", "", "out_labels", "=", "out_labels", "/", "self", ".", "num_relns", "\n", "out_labels", "=", "self", ".", "pos_ffn_l", "(", "out_labels", ")", "\n", "out_relns", "=", "self", ".", "pos_ffn_r", "(", "relns", ")", "\n", "# out_relns = torch.nn.functional.relu(self.w_rel(relns))", "\n", "\n", "return", "out_labels", ",", "out_relns", "\n", "", "", ""]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.__init__": [[16, 42], ["torch.Module.__init__", "network.Modules.XavierEmbedding", "Encoder", "torch.from_numpy().view().transpose", "torch.from_numpy().view().transpose", "torch.from_numpy().view().transpose", "torch.from_numpy().view().transpose", "torch.from_numpy().view().transpose", "torch.from_numpy().view().transpose", "torch.from_numpy().view().transpose", "torch.from_numpy().view().transpose", "torch.from_numpy().view().transpose", "network.Modules.XavierEmbedding", "Decoder", "network.Modules.XavierLinear", "Model.MrMP.tgt_array.cuda", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "network.Modules.XavierEmbedding", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "numpy.arange", "Model.MrMP.reln_array.cuda", "CompGCN", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.__init__", "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.XavierEmbedding", "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.XavierEmbedding", "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Modules.XavierEmbedding"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "adjs", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "src_word_emb", "=", "XavierEmbedding", "(", "(", "opt", ".", "n_src_vocab", ",", "opt", ".", "d_model", ")", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "opt", ")", "\n", "\n", "self", ".", "tgt_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "arange", "(", "opt", ".", "n_tgt_vocab", ")", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "opt", ".", "cuda_on", "is", "True", ":", "\n", "            ", "self", ".", "tgt_array", "=", "self", ".", "tgt_array", ".", "cuda", "(", ")", "\n", "", "self", ".", "tgt_word_emb", "=", "XavierEmbedding", "(", "(", "opt", ".", "n_tgt_vocab", ",", "opt", ".", "d_model", ")", ",", "padding_idx", "=", "0", ")", "\n", "\n", "if", "opt", ".", "mrmp_on", "is", "True", ":", "\n", "            ", "self", ".", "num_relns", "=", "len", "(", "adjs", ")", "\n", "self", ".", "reln_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "arange", "(", "self", ".", "num_relns", "*", "3", ")", ")", "# x3 in-out-loop", "\n", "if", "opt", ".", "cuda_on", "is", "True", ":", "\n", "                ", "self", ".", "reln_array", "=", "self", ".", "reln_array", ".", "cuda", "(", ")", "\n", "", "self", ".", "reln_order_emb", "=", "XavierEmbedding", "(", "(", "self", ".", "num_relns", "*", "3", ",", "opt", ".", "d_model", ")", ")", "\n", "self", ".", "mrmp_stack", "=", "nn", ".", "ModuleList", "(", "\n", "[", "CompGCN", "(", "adjs", ",", "opt", ".", "d_model", ",", "opt", ".", "d_inner", ",", "phi_mode", "=", "opt", ".", "mrmp_composition_mode", ",", "dropout", "=", "opt", ".", "dropout", ")", "\n", "for", "_", "in", "range", "(", "opt", ".", "n_layers_mrmp", ")", "]", ")", "\n", "\n", "", "self", ".", "decoder", "=", "Decoder", "(", "opt", ")", "\n", "\n", "self", ".", "tgt_word_prj", "=", "XavierLinear", "(", "opt", ".", "d_model", ",", "opt", ".", "n_tgt_vocab", ",", "bias", "=", "True", ")", "\n", "self", ".", "tgt_word_prj", ".", "weight", "=", "self", ".", "tgt_word_emb", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.forward": [[43, 65], ["Model.MrMP.src_word_emb", "Model.MrMP.encoder", "src_mask.size", "Model.MrMP.tgt_word_emb", "hasattr", "Model.MrMP.repeat", "Model.MrMP.decoder", "Model.MrMP.tgt_word_prj", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "Model.MrMP.reln_order_emb", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_seq", ")", ":", "\n", "        ", "enc_input", "=", "self", ".", "src_word_emb", "(", "src_seq", ")", "\n", "src_mask", "=", "(", "src_seq", "!=", "0", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "enc_outputs", "=", "self", ".", "encoder", "(", "enc_input", ",", "src_mask", ")", "\n", "\n", "batch_size", "=", "src_mask", ".", "size", "(", "0", ")", "\n", "\n", "label_embeddings", "=", "self", ".", "tgt_word_emb", "(", "self", ".", "tgt_array", ")", "\n", "if", "hasattr", "(", "self", ",", "'mrmp_stack'", ")", ":", "\n", "            ", "relation_embeddings", "=", "self", ".", "reln_order_emb", "(", "self", ".", "reln_array", ")", "\n", "for", "layer", "in", "self", ".", "mrmp_stack", ":", "\n", "                ", "label_embeddings", ",", "relation_embeddings", "=", "layer", "(", "label_embeddings", ",", "relation_embeddings", ")", "\n", "", "mrmp_output", "=", "(", "label_embeddings", ",", "relation_embeddings", ")", "\n", "", "else", ":", "\n", "            ", "mrmp_output", "=", "None", "\n", "\n", "", "dec_input", "=", "label_embeddings", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "dec_output", "=", "self", ".", "decoder", "(", "dec_input", ",", "enc_outputs", ",", "src_mask", ")", "\n", "seq_logit", "=", "self", ".", "tgt_word_prj", "(", "dec_output", ")", "\n", "seq_logit", "=", "torch", ".", "diagonal", "(", "seq_logit", ",", "0", ",", "1", ",", "2", ")", "\n", "\n", "return", "seq_logit", ",", "mrmp_output", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.calculate_mrmp_loss": [[66, 78], ["torch.linalg.norm().unsqueeze", "torch.linalg.norm().unsqueeze", "torch.linalg.norm().unsqueeze", "torch.linalg.norm().unsqueeze", "torch.linalg.norm().unsqueeze", "torch.linalg.norm().unsqueeze", "torch.linalg.norm().unsqueeze", "torch.linalg.norm().unsqueeze", "torch.linalg.norm().unsqueeze", "torch.masked_select.mean", "torch.masked_select.mean", "torch.masked_select.mean", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.tensor().bool().to", "torch.tensor().bool().to", "torch.tensor().bool().to", "torch.tensor().bool().to", "torch.tensor().bool().to", "torch.tensor().bool().to", "torch.tensor().bool().to", "torch.tensor().bool().to", "torch.tensor().bool().to", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "e_r.transpose", "torch.linalg.norm().unsqueeze.transpose", "torch.linalg.norm().unsqueeze.transpose", "torch.linalg.norm().unsqueeze.transpose", "torch.tensor().bool", "torch.tensor().bool", "torch.tensor().bool", "torch.tensor().bool", "torch.tensor().bool", "torch.tensor().bool", "torch.tensor().bool", "torch.tensor().bool", "torch.tensor().bool", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "calculate_mrmp_loss", "(", "self", ",", "e_r", ",", "mask", "=", "None", ")", ":", "\n", "        ", "norm", "=", "torch", ".", "linalg", ".", "norm", "(", "e_r", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "S", "=", "torch", ".", "matmul", "(", "e_r", ",", "e_r", ".", "transpose", "(", "0", ",", "1", ")", ")", "/", "torch", ".", "matmul", "(", "norm", ",", "norm", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ".", "bool", "(", ")", ".", "to", "(", "e_r", ".", "device", ")", "\n", "S", "=", "torch", ".", "masked_select", "(", "S", ",", "mask", ")", "\n", "", "return", "S", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.loss_fn": [[79, 99], ["pred.size", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.binary_cross_entropy_with_logits.sum", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "Model.MrMP.calculate_mrmp_loss", "gold.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.muberraozmen_mrmp.network.Model.MrMP.calculate_mrmp_loss"], ["", "def", "loss_fn", "(", "self", ",", "pred", ",", "gold", ",", "mrmp_output", "=", "None", ",", "smoothing", "=", "False", ")", ":", "\n", "        ", "if", "smoothing", ":", "\n", "            ", "eps", "=", "0.1", "\n", "n_class", "=", "pred", ".", "size", "(", "1", ")", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "pred", ")", ".", "scatter", "(", "1", ",", "gold", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "one_hot", "=", "one_hot", "*", "(", "1", "-", "eps", ")", "+", "(", "1", "-", "one_hot", ")", "*", "eps", "/", "(", "n_class", "-", "1", ")", "\n", "log_prb", "=", "F", ".", "log_softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "bce", "=", "-", "(", "one_hot", "*", "log_prb", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "bce", "=", "bce", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "bce", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "pred", ",", "gold", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "if", "mrmp_output", "is", "not", "None", ":", "\n", "            ", "label_embeddings", ",", "relation_embeddings", "=", "mrmp_output", "\n", "reln_loss", "=", "self", ".", "calculate_mrmp_loss", "(", "relation_embeddings", ")", "\n", "loss", "=", "bce", "+", "reln_loss", "\n", "", "else", ":", "\n", "            ", "loss", "=", "bce", "\n", "\n", "", "return", "loss", ",", "bce", "\n", "\n"]]}