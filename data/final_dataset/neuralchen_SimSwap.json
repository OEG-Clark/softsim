{"home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_video_swapsingle.lcm": [[23, 24], ["abs", "fractions.gcd"], "function", ["None"], ["def", "lcm", "(", "a", ",", "b", ")", ":", "return", "abs", "(", "a", "*", "b", ")", "/", "fractions", ".", "gcd", "(", "a", ",", "b", ")", "if", "a", "and", "b", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_wholeimage_swapsingle.lcm": [[26, 27], ["abs", "fractions.gcd"], "function", ["None"], ["def", "lcm", "(", "a", ",", "b", ")", ":", "return", "abs", "(", "a", "*", "b", ")", "/", "fractions", ".", "gcd", "(", "a", ",", "b", ")", "if", "a", "and", "b", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_wholeimage_swapsingle._totensor": [[33, 37], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy.transpose().transpose().contiguous", "tensor.transpose().transpose().contiguous.float().div", "torch.from_numpy.transpose().transpose", "tensor.transpose().transpose().contiguous.float", "torch.from_numpy.transpose"], "function", ["None"], ["def", "_totensor", "(", "array", ")", ":", "\n", "    ", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "img", "=", "tensor", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.predict.Predictor.setup": [[20, 24], ["torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["None"], ["    ", "def", "setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "transformer_Arcface", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.predict.Predictor.predict": [[26, 102], ["cog.input", "cog.input", "cog.input", "insightface_func.face_detect_crop_multi.Face_detect_crop", "insightface_func.face_detect_crop_single.Face_detect_crop.prepare", "options.test_options.TestOptions.test_options.TestOptions", "options.test_options.TestOptions.test_options.TestOptions.initialize", "options.test_options.TestOptions.test_options.TestOptions.parser.parse_args", "options.test_options.TestOptions.parser.parse_args.gpu_ids.split", "models.models.create_model", "models.models.create_model.eval", "util.norm.SpecificNorm", "insightface_func.face_detect_crop_single.Face_detect_crop", "int", "len", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cv2.imread", "insightface_func.face_detect_crop_single.Face_detect_crop.get", "PIL.Image.fromarray", "predict.Predictor.transformer_Arcface", "predict.Predictor.view", "img_id.cuda.cuda.cuda", "torch.interpolate", "torch.interpolate", "models.models.create_model.netArc", "torch.normalize", "torch.normalize", "cv2.imread", "insightface_func.face_detect_crop_single.Face_detect_crop.get", "util.reverse2original.reverse2wholeimage", "str", "str", "options.test_options.TestOptions.parser.parse_args.gpu_ids.append", "cv2.cvtColor", "[].cuda", "swap_result_list.append", "b_align_crop_tenor_list.append", "pathlib.Path", "str", "models.models.create_model.", "tempfile.mkdtemp", "test_wholeimage_swapmulti._totensor", "cv2.cvtColor"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.prepare", "home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.create_model", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.eval", "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.get", "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.get", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.reverse2original.reverse2wholeimage", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.videoswap_multispecific._totensor"], ["", "@", "cog", ".", "input", "(", "\"source\"", ",", "type", "=", "Path", ",", "help", "=", "\"source image\"", ")", "\n", "@", "cog", ".", "input", "(", "\"target\"", ",", "type", "=", "Path", ",", "help", "=", "\"target image\"", ")", "\n", "@", "cog", ".", "input", "(", "\"mode\"", ",", "type", "=", "str", ",", "options", "=", "[", "'single'", ",", "'all'", "]", ",", "default", "=", "'all'", ",", "\n", "help", "=", "\"swap a single face (the one with highest confidence by face detection) or all faces in the target image\"", ")", "\n", "def", "predict", "(", "self", ",", "source", ",", "target", ",", "mode", "=", "'all'", ")", ":", "\n", "\n", "        ", "app", "=", "Face_detect_crop_multi", "(", "name", "=", "'antelope'", ",", "root", "=", "'./insightface_func/models'", ")", "\n", "\n", "if", "mode", "==", "'single'", ":", "\n", "            ", "app", "=", "Face_detect_crop_single", "(", "name", "=", "'antelope'", ",", "root", "=", "'./insightface_func/models'", ")", "\n", "\n", "", "app", ".", "prepare", "(", "ctx_id", "=", "0", ",", "det_thresh", "=", "0.6", ",", "det_size", "=", "(", "640", ",", "640", ")", ")", "\n", "\n", "options", "=", "TestOptions", "(", ")", "\n", "options", ".", "initialize", "(", ")", "\n", "opt", "=", "options", ".", "parser", ".", "parse_args", "(", "[", "\"--Arc_path\"", ",", "'arcface_model/arcface_checkpoint.tar'", ",", "\"--pic_a_path\"", ",", "str", "(", "source", ")", ",", "\n", "\"--pic_b_path\"", ",", "str", "(", "target", ")", ",", "\"--isTrain\"", ",", "False", ",", "\"--no_simswaplogo\"", "]", ")", "\n", "\n", "str_ids", "=", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "\n", "# set gpu ids", "\n", "", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "torch", ".", "nn", ".", "Module", ".", "dump_patches", "=", "True", "\n", "model", "=", "create_model", "(", "opt", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "crop_size", "=", "opt", ".", "crop_size", "\n", "spNorm", "=", "SpecificNorm", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pic_a", "=", "opt", ".", "pic_a_path", "\n", "img_a_whole", "=", "cv2", ".", "imread", "(", "pic_a", ")", "\n", "img_a_align_crop", ",", "_", "=", "app", ".", "get", "(", "img_a_whole", ",", "crop_size", ")", "\n", "img_a_align_crop_pil", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "img_a_align_crop", "[", "0", "]", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "img_a", "=", "self", ".", "transformer_Arcface", "(", "img_a_align_crop_pil", ")", "\n", "img_id", "=", "img_a", ".", "view", "(", "-", "1", ",", "img_a", ".", "shape", "[", "0", "]", ",", "img_a", ".", "shape", "[", "1", "]", ",", "img_a", ".", "shape", "[", "2", "]", ")", "\n", "\n", "# convert numpy to tensor", "\n", "img_id", "=", "img_id", ".", "cuda", "(", ")", "\n", "\n", "# create latent id", "\n", "img_id_downsample", "=", "F", ".", "interpolate", "(", "img_id", ",", "size", "=", "(", "112", ",", "112", ")", ")", "\n", "latend_id", "=", "model", ".", "netArc", "(", "img_id_downsample", ")", "\n", "latend_id", "=", "F", ".", "normalize", "(", "latend_id", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "############## Forward Pass ######################", "\n", "\n", "pic_b", "=", "opt", ".", "pic_b_path", "\n", "img_b_whole", "=", "cv2", ".", "imread", "(", "pic_b", ")", "\n", "img_b_align_crop_list", ",", "b_mat_list", "=", "app", ".", "get", "(", "img_b_whole", ",", "crop_size", ")", "\n", "\n", "swap_result_list", "=", "[", "]", "\n", "b_align_crop_tenor_list", "=", "[", "]", "\n", "\n", "for", "b_align_crop", "in", "img_b_align_crop_list", ":", "\n", "                ", "b_align_crop_tenor", "=", "_totensor", "(", "cv2", ".", "cvtColor", "(", "b_align_crop", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "[", "None", ",", "...", "]", ".", "cuda", "(", ")", "\n", "\n", "swap_result", "=", "model", "(", "None", ",", "b_align_crop_tenor", ",", "latend_id", ",", "None", ",", "True", ")", "[", "0", "]", "\n", "swap_result_list", ".", "append", "(", "swap_result", ")", "\n", "b_align_crop_tenor_list", ".", "append", "(", "b_align_crop_tenor", ")", "\n", "\n", "", "net", "=", "None", "\n", "\n", "out_path", "=", "Path", "(", "tempfile", ".", "mkdtemp", "(", ")", ")", "/", "\"output.png\"", "\n", "\n", "reverse2wholeimage", "(", "b_align_crop_tenor_list", ",", "swap_result_list", ",", "b_mat_list", ",", "crop_size", ",", "img_b_whole", ",", "None", ",", "\n", "str", "(", "out_path", ")", ",", "opt", ".", "no_simswaplogo", ",", "\n", "pasring_model", "=", "net", ",", "use_mask", "=", "opt", ".", "use_mask", ",", "norm", "=", "spNorm", ")", "\n", "return", "out_path", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_wholeimage_swap_multispecific.lcm": [[28, 29], ["abs", "fractions.gcd"], "function", ["None"], ["def", "lcm", "(", "a", ",", "b", ")", ":", "return", "abs", "(", "a", "*", "b", ")", "/", "fractions", ".", "gcd", "(", "a", ",", "b", ")", "if", "a", "and", "b", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_wholeimage_swap_multispecific._totensor": [[35, 39], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.transpose().transpose().contiguous", "tensor.transpose().transpose().contiguous.float().div", "torch.from_numpy.transpose().transpose", "tensor.transpose().transpose().contiguous.float", "torch.from_numpy.transpose"], "function", ["None"], ["def", "_totensor", "(", "array", ")", ":", "\n", "    ", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "img", "=", "tensor", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_wholeimage_swap_multispecific._toarctensor": [[40, 44], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.transpose().transpose().contiguous", "tensor.transpose().transpose().contiguous.float().div", "torch.from_numpy.transpose().transpose", "tensor.transpose().transpose().contiguous.float", "torch.from_numpy.transpose"], "function", ["None"], ["", "def", "_toarctensor", "(", "array", ")", ":", "\n", "    ", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "img", "=", "tensor", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_wholeimage_swapspecific.lcm": [[27, 28], ["abs", "fractions.gcd"], "function", ["None"], ["def", "lcm", "(", "a", ",", "b", ")", ":", "return", "abs", "(", "a", "*", "b", ")", "/", "fractions", ".", "gcd", "(", "a", ",", "b", ")", "if", "a", "and", "b", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_wholeimage_swapspecific._totensor": [[34, 38], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.transpose().transpose().contiguous", "tensor.transpose().transpose().contiguous.float().div", "torch.from_numpy.transpose().transpose", "tensor.transpose().transpose().contiguous.float", "torch.from_numpy.transpose"], "function", ["None"], ["def", "_totensor", "(", "array", ")", ":", "\n", "    ", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "img", "=", "tensor", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_wholeimage_swapspecific._toarctensor": [[39, 43], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.transpose().transpose().contiguous", "tensor.transpose().transpose().contiguous.float().div", "torch.from_numpy.transpose().transpose", "tensor.transpose().transpose().contiguous.float", "torch.from_numpy.transpose"], "function", ["None"], ["", "def", "_toarctensor", "(", "array", ")", ":", "\n", "    ", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "img", "=", "tensor", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_wholeimage_swapmulti.lcm": [[26, 27], ["abs", "fractions.gcd"], "function", ["None"], ["def", "lcm", "(", "a", ",", "b", ")", ":", "return", "abs", "(", "a", "*", "b", ")", "/", "fractions", ".", "gcd", "(", "a", ",", "b", ")", "if", "a", "and", "b", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_wholeimage_swapmulti._totensor": [[33, 37], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy.transpose().transpose().contiguous", "tensor.transpose().transpose().contiguous.float().div", "torch.from_numpy.transpose().transpose", "tensor.transpose().transpose().contiguous.float", "torch.from_numpy.transpose"], "function", ["None"], ["def", "_totensor", "(", "array", ")", ":", "\n", "    ", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "img", "=", "tensor", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.train.TrainOptions.__init__": [[34, 37], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.train.TrainOptions.initialize": [[38, 77], ["train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument", "train.TrainOptions.parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'simswap'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "default", "=", "'0'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--isTrain'", ",", "type", "=", "str2bool", ",", "default", "=", "'True'", ")", "\n", "\n", "# input/output sizes       ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'input batch size'", ")", "\n", "\n", "# for displays", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_tensorboard'", ",", "type", "=", "str2bool", ",", "default", "=", "'False'", ")", "\n", "\n", "# for training", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "\"/path/to/VGGFace2\"", ",", "help", "=", "'path to the face swapping dataset'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "type", "=", "str2bool", ",", "default", "=", "'False'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_pretrain'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints/simswap224_test'", ",", "help", "=", "'load the pretrained model from the specified location'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'10000'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'momentum term of adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0004", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--Gdeep'", ",", "type", "=", "str2bool", ",", "default", "=", "'False'", ")", "\n", "\n", "# for discriminators         ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_feat'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_id'", ",", "type", "=", "float", ",", "default", "=", "30.0", ",", "help", "=", "'weight for id loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_rec'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for reconstruction loss'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--Arc_path\"", ",", "type", "=", "str", ",", "default", "=", "'arcface_model/arcface_checkpoint.tar'", ",", "help", "=", "\"run ONNX model via TRT\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--total_step\"", ",", "type", "=", "int", ",", "default", "=", "1000000", ",", "help", "=", "'total training step'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--log_frep\"", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'frequence for printing log information'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--sample_freq\"", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequence for sampling'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--model_freq\"", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "'frequence for saving the model'", ")", "\n", "\n", "\n", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.train.TrainOptions.parse": [[78, 103], ["train.TrainOptions.parser.parse_args", "vars", "print", "sorted", "print", "train.TrainOptions.initialize", "vars.items", "print", "os.path.join", "util.util.util.mkdirs", "os.path.join", "open", "opt_file.write", "sorted", "opt_file.write", "str", "str", "vars.items", "opt_file.write", "str", "str"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdirs"], ["", "def", "parse", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "args", "=", "vars", "(", "self", ".", "opt", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# save to the disk", "\n", "if", "self", ".", "opt", ".", "isTrain", ":", "\n", "            ", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "if", "save", "and", "not", "self", ".", "opt", ".", "continue_train", ":", "\n", "                ", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "                    ", "opt_file", ".", "write", "(", "'------------ Options -------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                        ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'-------------- End ----------------\\n'", ")", "\n", "", "", "", "return", "self", ".", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.train.str2bool": [[30, 32], ["v.lower"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "return", "v", ".", "lower", "(", ")", "in", "(", "'true'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_video_swapmulti.lcm": [[23, 24], ["abs", "fractions.gcd"], "function", ["None"], ["def", "lcm", "(", "a", ",", "b", ")", ":", "return", "abs", "(", "a", "*", "b", ")", "/", "fractions", ".", "gcd", "(", "a", ",", "b", ")", "if", "a", "and", "b", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_video_swap_multispecific.lcm": [[15, 16], ["abs", "fractions.gcd"], "function", ["None"], ["def", "lcm", "(", "a", ",", "b", ")", ":", "return", "abs", "(", "a", "*", "b", ")", "/", "fractions", ".", "gcd", "(", "a", ",", "b", ")", "if", "a", "and", "b", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_video_swapspecific.lcm": [[23, 24], ["abs", "fractions.gcd"], "function", ["None"], ["def", "lcm", "(", "a", ",", "b", ")", ":", "return", "abs", "(", "a", "*", "b", ")", "/", "fractions", ".", "gcd", "(", "a", ",", "b", ")", "if", "a", "and", "b", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.None.test_one_image.lcm": [[13, 14], ["abs", "fractions.gcd"], "function", ["None"], ["def", "lcm", "(", "a", ",", "b", ")", ":", "return", "abs", "(", "a", "*", "b", ")", "/", "fractions", ".", "gcd", "(", "a", ",", "b", ")", "if", "a", "and", "b", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.BasicBlock.__init__": [[21, 34], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.conv3x3", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "out_chan", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_chan", ",", "out_chan", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_chan", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "out_chan", ",", "out_chan", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_chan", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "None", "\n", "if", "in_chan", "!=", "out_chan", "or", "stride", "!=", "1", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chan", ",", "out_chan", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_chan", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.BasicBlock.forward": [[36, 49], ["resnet.BasicBlock.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "self", ".", "conv1", "(", "x", ")", "\n", "residual", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "residual", ")", ")", "\n", "residual", "=", "self", ".", "conv2", "(", "residual", ")", "\n", "residual", "=", "self", ".", "bn2", "(", "residual", ")", "\n", "\n", "shortcut", "=", "x", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "shortcut", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.Resnet18.__init__": [[59, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.create_layer_basic", "resnet.create_layer_basic", "resnet.create_layer_basic", "resnet.create_layer_basic", "resnet.Resnet18.init_weight"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.create_layer_basic", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.create_layer_basic", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.create_layer_basic", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.create_layer_basic", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNet.init_weight"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Resnet18", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "create_layer_basic", "(", "64", ",", "64", ",", "bnum", "=", "2", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "create_layer_basic", "(", "64", ",", "128", ",", "bnum", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "create_layer_basic", "(", "128", ",", "256", ",", "bnum", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "create_layer_basic", "(", "256", ",", "512", ",", "bnum", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.Resnet18.forward": [[71, 81], ["resnet.Resnet18.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Resnet18.maxpool", "resnet.Resnet18.layer1", "resnet.Resnet18.layer2", "resnet.Resnet18.layer3", "resnet.Resnet18.layer4", "resnet.Resnet18.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "feat8", "=", "self", ".", "layer2", "(", "x", ")", "# 1/8", "\n", "feat16", "=", "self", ".", "layer3", "(", "feat8", ")", "# 1/16", "\n", "feat32", "=", "self", ".", "layer4", "(", "feat16", ")", "# 1/32", "\n", "return", "feat8", ",", "feat16", ",", "feat32", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.Resnet18.init_weight": [[82, 89], ["torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "resnet.Resnet18.state_dict", "torch.load_url.items", "resnet.Resnet18.load_state_dict", "resnet.Resnet18.update"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "state_dict", "=", "modelzoo", ".", "load_url", "(", "resnet18_url", ")", "\n", "self_state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'fc'", "in", "k", ":", "continue", "\n", "self_state_dict", ".", "update", "(", "{", "k", ":", "v", "}", ")", "\n", "", "self", ".", "load_state_dict", "(", "self_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.Resnet18.get_params": [[90, 100], ["resnet.Resnet18.named_modules", "isinstance", "wd_params.append", "isinstance", "nowd_params.append", "list", "module.parameters"], "methods", ["None"], ["", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "wd_params", ",", "nowd_params", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ")", ")", ":", "\n", "                ", "wd_params", ".", "append", "(", "module", ".", "weight", ")", "\n", "if", "not", "module", ".", "bias", "is", "None", ":", "\n", "                    ", "nowd_params", ".", "append", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nowd_params", "+=", "list", "(", "module", ".", "parameters", "(", ")", ")", "\n", "", "", "return", "wd_params", ",", "nowd_params", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.conv3x3": [[14, 18], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.create_layer_basic": [[51, 56], ["range", "torch.Sequential", "resnet.BasicBlock", "layers.append", "resnet.BasicBlock"], "function", ["None"], ["", "", "def", "create_layer_basic", "(", "in_chan", ",", "out_chan", ",", "bnum", ",", "stride", "=", "1", ")", ":", "\n", "    ", "layers", "=", "[", "BasicBlock", "(", "in_chan", ",", "out_chan", ",", "stride", "=", "stride", ")", "]", "\n", "for", "i", "in", "range", "(", "bnum", "-", "1", ")", ":", "\n", "        ", "layers", ".", "append", "(", "BasicBlock", "(", "out_chan", ",", "out_chan", ",", "stride", "=", "1", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.ConvBNReLU.__init__": [[15, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.ConvBNReLU.init_weight"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNet.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "out_chan", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_chan", ",", "\n", "out_chan", ",", "\n", "kernel_size", "=", "ks", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_chan", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.ConvBNReLU.forward": [[26, 30], ["model.ConvBNReLU.conv", "torch.relu", "torch.relu", "torch.relu", "model.ConvBNReLU.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.ConvBNReLU.init_weight": [[31, 36], ["model.ConvBNReLU.children", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNetOutput.__init__": [[38, 43], ["torch.Module.__init__", "model.ConvBNReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.BiSeNetOutput.init_weight"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNet.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "mid_chan", ",", "n_classes", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BiSeNetOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "ConvBNReLU", "(", "in_chan", ",", "mid_chan", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_out", "=", "nn", ".", "Conv2d", "(", "mid_chan", ",", "n_classes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNetOutput.forward": [[44, 48], ["model.BiSeNetOutput.conv", "model.BiSeNetOutput.conv_out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_out", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNetOutput.init_weight": [[49, 54], ["model.BiSeNetOutput.children", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNetOutput.get_params": [[55, 65], ["model.BiSeNetOutput.named_modules", "isinstance", "isinstance", "wd_params.append", "isinstance", "nowd_params.append", "list", "module.parameters"], "methods", ["None"], ["", "", "", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "wd_params", ",", "nowd_params", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "wd_params", ".", "append", "(", "module", ".", "weight", ")", "\n", "if", "not", "module", ".", "bias", "is", "None", ":", "\n", "                    ", "nowd_params", ".", "append", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nowd_params", "+=", "list", "(", "module", ".", "parameters", "(", ")", ")", "\n", "", "", "return", "wd_params", ",", "nowd_params", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.AttentionRefinementModule.__init__": [[68, 75], ["torch.Module.__init__", "model.ConvBNReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model.AttentionRefinementModule.init_weight"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNet.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "out_chan", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttentionRefinementModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "ConvBNReLU", "(", "in_chan", ",", "out_chan", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_atten", "=", "nn", ".", "Conv2d", "(", "out_chan", ",", "out_chan", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_atten", "=", "nn", ".", "BatchNorm2d", "(", "out_chan", ")", "\n", "self", ".", "sigmoid_atten", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.AttentionRefinementModule.forward": [[76, 84], ["model.AttentionRefinementModule.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "model.AttentionRefinementModule.conv_atten", "model.AttentionRefinementModule.bn_atten", "model.AttentionRefinementModule.sigmoid_atten", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "model.AttentionRefinementModule.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "self", ".", "conv", "(", "x", ")", "\n", "atten", "=", "F", ".", "avg_pool2d", "(", "feat", ",", "feat", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "atten", "=", "self", ".", "conv_atten", "(", "atten", ")", "\n", "atten", "=", "self", ".", "bn_atten", "(", "atten", ")", "\n", "atten", "=", "self", ".", "sigmoid_atten", "(", "atten", ")", "\n", "out", "=", "torch", ".", "mul", "(", "feat", ",", "atten", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.AttentionRefinementModule.init_weight": [[85, 90], ["model.AttentionRefinementModule.children", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.ContextPath.__init__": [[93, 103], ["torch.Module.__init__", "parsing_model.resnet.Resnet18", "model.AttentionRefinementModule", "model.AttentionRefinementModule", "model.ConvBNReLU", "model.ConvBNReLU", "model.ConvBNReLU", "model.ContextPath.init_weight"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNet.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ContextPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnet", "=", "Resnet18", "(", ")", "\n", "self", ".", "arm16", "=", "AttentionRefinementModule", "(", "256", ",", "128", ")", "\n", "self", ".", "arm32", "=", "AttentionRefinementModule", "(", "512", ",", "128", ")", "\n", "self", ".", "conv_head32", "=", "ConvBNReLU", "(", "128", ",", "128", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_head16", "=", "ConvBNReLU", "(", "128", ",", "128", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_avg", "=", "ConvBNReLU", "(", "512", ",", "128", ",", "ks", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.ContextPath.forward": [[104, 126], ["model.ContextPath.resnet", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "model.ContextPath.conv_avg", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model.ContextPath.arm32", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model.ContextPath.conv_head32", "model.ContextPath.arm16", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model.ContextPath.conv_head16", "x.size", "feat8.size", "feat16.size", "feat32.size", "feat32.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "H0", ",", "W0", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "feat8", ",", "feat16", ",", "feat32", "=", "self", ".", "resnet", "(", "x", ")", "\n", "H8", ",", "W8", "=", "feat8", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "H16", ",", "W16", "=", "feat16", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "H32", ",", "W32", "=", "feat32", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "avg", "=", "F", ".", "avg_pool2d", "(", "feat32", ",", "feat32", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "avg", "=", "self", ".", "conv_avg", "(", "avg", ")", "\n", "avg_up", "=", "F", ".", "interpolate", "(", "avg", ",", "(", "H32", ",", "W32", ")", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "feat32_arm", "=", "self", ".", "arm32", "(", "feat32", ")", "\n", "feat32_sum", "=", "feat32_arm", "+", "avg_up", "\n", "feat32_up", "=", "F", ".", "interpolate", "(", "feat32_sum", ",", "(", "H16", ",", "W16", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat32_up", "=", "self", ".", "conv_head32", "(", "feat32_up", ")", "\n", "\n", "feat16_arm", "=", "self", ".", "arm16", "(", "feat16", ")", "\n", "feat16_sum", "=", "feat16_arm", "+", "feat32_up", "\n", "feat16_up", "=", "F", ".", "interpolate", "(", "feat16_sum", ",", "(", "H8", ",", "W8", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat16_up", "=", "self", ".", "conv_head16", "(", "feat16_up", ")", "\n", "\n", "return", "feat8", ",", "feat16_up", ",", "feat32_up", "# x8, x8, x16", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.ContextPath.init_weight": [[127, 132], ["model.ContextPath.children", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.ContextPath.get_params": [[133, 143], ["model.ContextPath.named_modules", "isinstance", "wd_params.append", "isinstance", "nowd_params.append", "list", "module.parameters"], "methods", ["None"], ["", "", "", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "wd_params", ",", "nowd_params", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ")", ")", ":", "\n", "                ", "wd_params", ".", "append", "(", "module", ".", "weight", ")", "\n", "if", "not", "module", ".", "bias", "is", "None", ":", "\n", "                    ", "nowd_params", ".", "append", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nowd_params", "+=", "list", "(", "module", ".", "parameters", "(", ")", ")", "\n", "", "", "return", "wd_params", ",", "nowd_params", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.SpatialPath.__init__": [[147, 154], ["torch.Module.__init__", "model.ConvBNReLU", "model.ConvBNReLU", "model.ConvBNReLU", "model.ConvBNReLU", "model.SpatialPath.init_weight"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNet.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SpatialPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "ConvBNReLU", "(", "3", ",", "64", ",", "ks", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "conv2", "=", "ConvBNReLU", "(", "64", ",", "64", ",", "ks", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "ConvBNReLU", "(", "64", ",", "64", ",", "ks", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_out", "=", "ConvBNReLU", "(", "64", ",", "128", ",", "ks", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.SpatialPath.forward": [[155, 161], ["model.SpatialPath.conv1", "model.SpatialPath.conv2", "model.SpatialPath.conv3", "model.SpatialPath.conv_out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "self", ".", "conv1", "(", "x", ")", "\n", "feat", "=", "self", ".", "conv2", "(", "feat", ")", "\n", "feat", "=", "self", ".", "conv3", "(", "feat", ")", "\n", "feat", "=", "self", ".", "conv_out", "(", "feat", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.SpatialPath.init_weight": [[162, 167], ["model.SpatialPath.children", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.SpatialPath.get_params": [[168, 178], ["model.SpatialPath.named_modules", "isinstance", "isinstance", "wd_params.append", "isinstance", "nowd_params.append", "list", "module.parameters"], "methods", ["None"], ["", "", "", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "wd_params", ",", "nowd_params", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "wd_params", ".", "append", "(", "module", ".", "weight", ")", "\n", "if", "not", "module", ".", "bias", "is", "None", ":", "\n", "                    ", "nowd_params", ".", "append", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nowd_params", "+=", "list", "(", "module", ".", "parameters", "(", ")", ")", "\n", "", "", "return", "wd_params", ",", "nowd_params", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.FeatureFusionModule.__init__": [[181, 199], ["torch.Module.__init__", "model.ConvBNReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model.FeatureFusionModule.init_weight"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNet.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "out_chan", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FeatureFusionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convblk", "=", "ConvBNReLU", "(", "in_chan", ",", "out_chan", ",", "ks", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "out_chan", ",", "\n", "out_chan", "//", "4", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_chan", "//", "4", ",", "\n", "out_chan", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.FeatureFusionModule.forward": [[200, 211], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.FeatureFusionModule.convblk", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "model.FeatureFusionModule.conv1", "model.FeatureFusionModule.relu", "model.FeatureFusionModule.conv2", "model.FeatureFusionModule.sigmoid", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "model.FeatureFusionModule.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fsp", ",", "fcp", ")", ":", "\n", "        ", "fcat", "=", "torch", ".", "cat", "(", "[", "fsp", ",", "fcp", "]", ",", "dim", "=", "1", ")", "\n", "feat", "=", "self", ".", "convblk", "(", "fcat", ")", "\n", "atten", "=", "F", ".", "avg_pool2d", "(", "feat", ",", "feat", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "atten", "=", "self", ".", "conv1", "(", "atten", ")", "\n", "atten", "=", "self", ".", "relu", "(", "atten", ")", "\n", "atten", "=", "self", ".", "conv2", "(", "atten", ")", "\n", "atten", "=", "self", ".", "sigmoid", "(", "atten", ")", "\n", "feat_atten", "=", "torch", ".", "mul", "(", "feat", ",", "atten", ")", "\n", "feat_out", "=", "feat_atten", "+", "feat", "\n", "return", "feat_out", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.FeatureFusionModule.init_weight": [[212, 217], ["model.FeatureFusionModule.children", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.FeatureFusionModule.get_params": [[218, 228], ["model.FeatureFusionModule.named_modules", "isinstance", "isinstance", "wd_params.append", "isinstance", "nowd_params.append", "list", "module.parameters"], "methods", ["None"], ["", "", "", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "wd_params", ",", "nowd_params", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "wd_params", ".", "append", "(", "module", ".", "weight", ")", "\n", "if", "not", "module", ".", "bias", "is", "None", ":", "\n", "                    ", "nowd_params", ".", "append", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nowd_params", "+=", "list", "(", "module", ".", "parameters", "(", ")", ")", "\n", "", "", "return", "wd_params", ",", "nowd_params", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNet.__init__": [[231, 240], ["torch.Module.__init__", "model.ContextPath", "model.FeatureFusionModule", "model.BiSeNetOutput", "model.BiSeNetOutput", "model.BiSeNetOutput", "model.BiSeNet.init_weight"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNet.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BiSeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cp", "=", "ContextPath", "(", ")", "\n", "## here self.sp is deleted", "\n", "self", ".", "ffm", "=", "FeatureFusionModule", "(", "256", ",", "256", ")", "\n", "self", ".", "conv_out", "=", "BiSeNetOutput", "(", "256", ",", "256", ",", "n_classes", ")", "\n", "self", ".", "conv_out16", "=", "BiSeNetOutput", "(", "128", ",", "64", ",", "n_classes", ")", "\n", "self", ".", "conv_out32", "=", "BiSeNetOutput", "(", "128", ",", "64", ",", "n_classes", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNet.forward": [[241, 255], ["model.BiSeNet.cp", "model.BiSeNet.ffm", "model.BiSeNet.conv_out", "model.BiSeNet.conv_out16", "model.BiSeNet.conv_out32", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "H", ",", "W", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "feat_res8", ",", "feat_cp8", ",", "feat_cp16", "=", "self", ".", "cp", "(", "x", ")", "# here return res3b1 feature", "\n", "feat_sp", "=", "feat_res8", "# use res3b1 feature to replace spatial path feature", "\n", "feat_fuse", "=", "self", ".", "ffm", "(", "feat_sp", ",", "feat_cp8", ")", "\n", "\n", "feat_out", "=", "self", ".", "conv_out", "(", "feat_fuse", ")", "\n", "feat_out16", "=", "self", ".", "conv_out16", "(", "feat_cp8", ")", "\n", "feat_out32", "=", "self", ".", "conv_out32", "(", "feat_cp16", ")", "\n", "\n", "feat_out", "=", "F", ".", "interpolate", "(", "feat_out", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "feat_out16", "=", "F", ".", "interpolate", "(", "feat_out16", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "feat_out32", "=", "F", ".", "interpolate", "(", "feat_out32", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "feat_out", ",", "feat_out16", ",", "feat_out32", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNet.init_weight": [[256, 261], ["model.BiSeNet.children", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNet.get_params": [[262, 273], ["model.BiSeNet.named_children", "child.get_params", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.model.BiSeNet.get_params"], ["", "", "", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "wd_params", ",", "nowd_params", ",", "lr_mul_wd_params", ",", "lr_mul_nowd_params", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "child", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "child_wd_params", ",", "child_nowd_params", "=", "child", ".", "get_params", "(", ")", "\n", "if", "isinstance", "(", "child", ",", "FeatureFusionModule", ")", "or", "isinstance", "(", "child", ",", "BiSeNetOutput", ")", ":", "\n", "                ", "lr_mul_wd_params", "+=", "child_wd_params", "\n", "lr_mul_nowd_params", "+=", "child_nowd_params", "\n", "", "else", ":", "\n", "                ", "wd_params", "+=", "child_wd_params", "\n", "nowd_params", "+=", "child_nowd_params", "\n", "", "", "return", "wd_params", ",", "nowd_params", ",", "lr_mul_wd_params", ",", "lr_mul_nowd_params", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.html.HTML.__init__": [[7, 20], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "meta", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "refresh", "=", "0", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "refresh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"refresh\"", ",", "content", "=", "str", "(", "refresh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.html.HTML.get_image_dir": [[21, 23], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.html.HTML.add_header": [[24, 27], ["h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.html.HTML.add_table": [[28, 31], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.html.HTML.add_images": [[32, 43], ["html.HTML.add_table", "tr", "zip", "td", "p", "br", "p", "a", "img", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "512", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "(", "width", ")", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.html.HTML.save": [[44, 49], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "html_file", "=", "'%s/index.html'", "%", "self", ".", "web_dir", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.videoswap_specific._totensor": [[18, 22], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy.transpose().transpose().contiguous", "tensor.transpose().transpose().contiguous.float().div", "torch.from_numpy.transpose().transpose", "tensor.transpose().transpose().contiguous.float", "torch.from_numpy.transpose"], "function", ["None"], ["def", "_totensor", "(", "array", ")", ":", "\n", "    ", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "img", "=", "tensor", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.videoswap_specific.video_swap": [[23, 130], ["moviepy.editor.VideoFileClip", "cv2.VideoCapture", "util.add_watermark.watermark_image", "int", "cv2.VideoCapture.get", "os.path.exists", "util.norm.SpecificNorm", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "tqdm.tqdm", "cv2.VideoCapture.release", "os.path.join", "sorted", "moviepy.video.io.ImageSequenceClip.ImageSequenceClip", "clips.set_audio.write_videofile", "moviepy.editor.AudioFileClip", "cv2.VideoCapture.get", "shutil.rmtree", "parsing_model.model.BiSeNet", "parsing_model.model.BiSeNet.cuda", "os.path.join", "parsing_model.model.BiSeNet.load_state_dict", "parsing_model.model.BiSeNet.eval", "range", "cv2.VideoCapture.read", "glob.glob", "clips.set_audio.set_audio", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.load", "torch.load", "detect_model.get", "numpy.array", "numpy.argmin", "logoclass.apply_frames.astype", "cv2.imwrite", "os.path.exists", "os.mkdir", "[].cuda", "util.norm.SpecificNorm.", "torch.interpolate", "swap_model.netArc", "id_compare_values.append", "frame_align_crop_tenor_list.append", "util.reverse2original.reverse2wholeimage", "logoclass.apply_frames.astype", "cv2.imwrite", "os.path.exists", "os.mkdir", "util.add_watermark.watermark_image.apply_frames", "os.path.join", "torch.nn.MSELoss().cuda.detach().cpu().numpy", "swap_model", "os.path.join", "os.path.exists", "os.mkdir", "util.add_watermark.watermark_image.apply_frames", "os.path.join", "videoswap_specific._totensor", "torch.nn.MSELoss().cuda.detach().cpu", "cv2.cvtColor", "torch.nn.MSELoss().cuda.detach", "torch.nn.MSELoss().cuda."], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.get", "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.get", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.eval", "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.get", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdir", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.reverse2original.reverse2wholeimage", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdir", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.add_watermark.watermark_image.apply_frames", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdir", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.add_watermark.watermark_image.apply_frames", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.videoswap_multispecific._totensor"], ["", "def", "video_swap", "(", "video_path", ",", "id_vetor", ",", "specific_person_id_nonorm", ",", "id_thres", ",", "swap_model", ",", "detect_model", ",", "save_path", ",", "temp_results_dir", "=", "'./temp_results'", ",", "crop_size", "=", "224", ",", "no_simswaplogo", "=", "False", ",", "use_mask", "=", "False", ")", ":", "\n", "    ", "video_forcheck", "=", "VideoFileClip", "(", "video_path", ")", "\n", "if", "video_forcheck", ".", "audio", "is", "None", ":", "\n", "        ", "no_audio", "=", "True", "\n", "", "else", ":", "\n", "        ", "no_audio", "=", "False", "\n", "\n", "", "del", "video_forcheck", "\n", "\n", "if", "not", "no_audio", ":", "\n", "        ", "video_audio_clip", "=", "AudioFileClip", "(", "video_path", ")", "\n", "\n", "", "video", "=", "cv2", ".", "VideoCapture", "(", "video_path", ")", "\n", "logoclass", "=", "watermark_image", "(", "'./simswaplogo/simswaplogo.png'", ")", "\n", "ret", "=", "True", "\n", "frame_index", "=", "0", "\n", "\n", "frame_count", "=", "int", "(", "video", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "\n", "# video_WIDTH = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))", "\n", "\n", "# video_HEIGHT = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))", "\n", "\n", "fps", "=", "video", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "temp_results_dir", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "temp_results_dir", ")", "\n", "\n", "", "spNorm", "=", "SpecificNorm", "(", ")", "\n", "mse", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "use_mask", ":", "\n", "        ", "n_classes", "=", "19", "\n", "net", "=", "BiSeNet", "(", "n_classes", "=", "n_classes", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "save_pth", "=", "os", ".", "path", ".", "join", "(", "'./parsing_model/checkpoint'", ",", "'79999_iter.pth'", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_pth", ")", ")", "\n", "net", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "        ", "net", "=", "None", "\n", "\n", "# while ret:", "\n", "", "for", "frame_index", "in", "tqdm", "(", "range", "(", "frame_count", ")", ")", ":", "\n", "        ", "ret", ",", "frame", "=", "video", ".", "read", "(", ")", "\n", "if", "ret", ":", "\n", "            ", "detect_results", "=", "detect_model", ".", "get", "(", "frame", ",", "crop_size", ")", "\n", "\n", "if", "detect_results", "is", "not", "None", ":", "\n", "# print(frame_index)", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "temp_results_dir", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "temp_results_dir", ")", "\n", "", "frame_align_crop_list", "=", "detect_results", "[", "0", "]", "\n", "frame_mat_list", "=", "detect_results", "[", "1", "]", "\n", "\n", "id_compare_values", "=", "[", "]", "\n", "frame_align_crop_tenor_list", "=", "[", "]", "\n", "for", "frame_align_crop", "in", "frame_align_crop_list", ":", "\n", "\n", "# BGR TO RGB", "\n", "# frame_align_crop_RGB = frame_align_crop[...,::-1]", "\n", "\n", "                    ", "frame_align_crop_tenor", "=", "_totensor", "(", "cv2", ".", "cvtColor", "(", "frame_align_crop", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "[", "None", ",", "...", "]", ".", "cuda", "(", ")", "\n", "\n", "frame_align_crop_tenor_arcnorm", "=", "spNorm", "(", "frame_align_crop_tenor", ")", "\n", "frame_align_crop_tenor_arcnorm_downsample", "=", "F", ".", "interpolate", "(", "frame_align_crop_tenor_arcnorm", ",", "size", "=", "(", "112", ",", "112", ")", ")", "\n", "frame_align_crop_crop_id_nonorm", "=", "swap_model", ".", "netArc", "(", "frame_align_crop_tenor_arcnorm_downsample", ")", "\n", "\n", "id_compare_values", ".", "append", "(", "mse", "(", "frame_align_crop_crop_id_nonorm", ",", "specific_person_id_nonorm", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "frame_align_crop_tenor_list", ".", "append", "(", "frame_align_crop_tenor", ")", "\n", "", "id_compare_values_array", "=", "np", ".", "array", "(", "id_compare_values", ")", "\n", "min_index", "=", "np", ".", "argmin", "(", "id_compare_values_array", ")", "\n", "min_value", "=", "id_compare_values_array", "[", "min_index", "]", "\n", "if", "min_value", "<", "id_thres", ":", "\n", "                    ", "swap_result", "=", "swap_model", "(", "None", ",", "frame_align_crop_tenor_list", "[", "min_index", "]", ",", "id_vetor", ",", "None", ",", "True", ")", "[", "0", "]", "\n", "\n", "reverse2wholeimage", "(", "[", "frame_align_crop_tenor_list", "[", "min_index", "]", "]", ",", "[", "swap_result", "]", ",", "[", "frame_mat_list", "[", "min_index", "]", "]", ",", "crop_size", ",", "frame", ",", "logoclass", ",", "os", ".", "path", ".", "join", "(", "temp_results_dir", ",", "'frame_{:0>7d}.jpg'", ".", "format", "(", "frame_index", ")", ")", ",", "no_simswaplogo", ",", "pasring_model", "=", "net", ",", "use_mask", "=", "use_mask", ",", "norm", "=", "spNorm", ")", "\n", "", "else", ":", "\n", "                    ", "if", "not", "os", ".", "path", ".", "exists", "(", "temp_results_dir", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "temp_results_dir", ")", "\n", "", "frame", "=", "frame", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "not", "no_simswaplogo", ":", "\n", "                        ", "frame", "=", "logoclass", ".", "apply_frames", "(", "frame", ")", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "temp_results_dir", ",", "'frame_{:0>7d}.jpg'", ".", "format", "(", "frame_index", ")", ")", ",", "frame", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "temp_results_dir", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "temp_results_dir", ")", "\n", "", "frame", "=", "frame", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "not", "no_simswaplogo", ":", "\n", "                    ", "frame", "=", "logoclass", ".", "apply_frames", "(", "frame", ")", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "temp_results_dir", ",", "'frame_{:0>7d}.jpg'", ".", "format", "(", "frame_index", ")", ")", ",", "frame", ")", "\n", "", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "video", ".", "release", "(", ")", "\n", "\n", "# image_filename_list = []", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "temp_results_dir", ",", "'*.jpg'", ")", "\n", "image_filenames", "=", "sorted", "(", "glob", ".", "glob", "(", "path", ")", ")", "\n", "\n", "clips", "=", "ImageSequenceClip", "(", "image_filenames", ",", "fps", "=", "fps", ")", "\n", "\n", "if", "not", "no_audio", ":", "\n", "        ", "clips", "=", "clips", ".", "set_audio", "(", "video_audio_clip", ")", "\n", "\n", "\n", "", "clips", ".", "write_videofile", "(", "save_path", ",", "audio_codec", "=", "'aac'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.add_watermark.watermark_image.__init__": [[23, 79], ["cv2.imread", "print", "int", "numpy.zeros", "numpy.zeros", "cv2.vconcat", "cv2.vconcat", "add_watermark.rotate_image", "print", "add_watermark.watermark_image.__addAlpha__", "int", "int", "cv2.resize", "cv2.bitwise_not", "math.sin", "math.cos"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.add_watermark.rotate_image", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.add_watermark.watermark_image.__addAlpha__"], ["    ", "def", "__init__", "(", "self", ",", "logo_path", ",", "size", "=", "0.3", ",", "oritation", "=", "\"DR\"", ",", "margin", "=", "(", "5", ",", "20", ",", "20", ",", "20", ")", ",", "angle", "=", "15", ",", "rgb_weight", "=", "(", "0", ",", "1", ",", "1.5", ")", ",", "input_frame_shape", "=", "None", ")", "->", "None", ":", "\n", "\n", "        ", "logo_image", "=", "cv2", ".", "imread", "(", "logo_path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "h", ",", "w", ",", "c", "=", "logo_image", ".", "shape", "\n", "if", "angle", "%", "360", "!=", "0", ":", "\n", "            ", "new_h", "=", "w", "*", "math", ".", "sin", "(", "angle", "/", "180", "*", "math", ".", "pi", ")", "+", "h", "*", "math", ".", "cos", "(", "angle", "/", "180", "*", "math", ".", "pi", ")", "\n", "pad_h", "=", "int", "(", "(", "new_h", "-", "h", ")", "//", "2", ")", "\n", "\n", "padding", "=", "np", ".", "zeros", "(", "(", "pad_h", ",", "w", ",", "c", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "logo_image", "=", "cv2", ".", "vconcat", "(", "[", "logo_image", ",", "padding", "]", ")", "\n", "logo_image", "=", "cv2", ".", "vconcat", "(", "[", "padding", ",", "logo_image", "]", ")", "\n", "\n", "logo_image", "=", "rotate_image", "(", "logo_image", ",", "angle", ")", "\n", "", "print", "(", "logo_image", ".", "shape", ")", "\n", "self", ".", "logo_image", "=", "logo_image", "\n", "\n", "if", "self", ".", "logo_image", ".", "shape", "[", "2", "]", "<", "4", ":", "\n", "            ", "print", "(", "\"No alpha channel found!\"", ")", "\n", "self", ".", "logo_image", "=", "self", ".", "__addAlpha__", "(", "self", ".", "logo_image", ")", "#add alpha channel", "\n", "", "self", ".", "size", "=", "size", "\n", "self", ".", "oritation", "=", "oritation", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ori_shape", "=", "self", ".", "logo_image", ".", "shape", "\n", "self", ".", "resized", "=", "False", "\n", "self", ".", "rgb_weight", "=", "rgb_weight", "\n", "\n", "self", ".", "logo_image", "[", ":", ",", ":", ",", "2", "]", "=", "self", ".", "logo_image", "[", ":", ",", ":", ",", "2", "]", "*", "self", ".", "rgb_weight", "[", "0", "]", "\n", "self", ".", "logo_image", "[", ":", ",", ":", ",", "1", "]", "=", "self", ".", "logo_image", "[", ":", ",", ":", ",", "1", "]", "*", "self", ".", "rgb_weight", "[", "1", "]", "\n", "self", ".", "logo_image", "[", ":", ",", ":", ",", "0", "]", "=", "self", ".", "logo_image", "[", ":", ",", ":", ",", "0", "]", "*", "self", ".", "rgb_weight", "[", "2", "]", "\n", "\n", "if", "input_frame_shape", "is", "not", "None", ":", "\n", "\n", "            ", "logo_w", "=", "input_frame_shape", "[", "1", "]", "*", "self", ".", "size", "\n", "ratio", "=", "logo_w", "/", "self", ".", "ori_shape", "[", "1", "]", "\n", "logo_h", "=", "int", "(", "ratio", "*", "self", ".", "ori_shape", "[", "0", "]", ")", "\n", "logo_w", "=", "int", "(", "logo_w", ")", "\n", "\n", "size", "=", "(", "logo_w", ",", "logo_h", ")", "\n", "self", ".", "logo_image", "=", "cv2", ".", "resize", "(", "self", ".", "logo_image", ",", "size", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "self", ".", "resized", "=", "True", "\n", "if", "oritation", "==", "\"UL\"", ":", "\n", "                ", "self", ".", "coor_h", "=", "self", ".", "margin", "[", "1", "]", "\n", "self", ".", "coor_w", "=", "self", ".", "margin", "[", "0", "]", "\n", "", "elif", "oritation", "==", "\"UR\"", ":", "\n", "                ", "self", ".", "coor_h", "=", "self", ".", "margin", "[", "1", "]", "\n", "self", ".", "coor_w", "=", "input_frame_shape", "[", "1", "]", "-", "(", "logo_w", "+", "self", ".", "margin", "[", "2", "]", ")", "\n", "", "elif", "oritation", "==", "\"DL\"", ":", "\n", "                ", "self", ".", "coor_h", "=", "input_frame_shape", "[", "0", "]", "-", "(", "logo_h", "+", "self", ".", "margin", "[", "1", "]", ")", "\n", "self", ".", "coor_w", "=", "self", ".", "margin", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "coor_h", "=", "input_frame_shape", "[", "0", "]", "-", "(", "logo_h", "+", "self", ".", "margin", "[", "3", "]", ")", "\n", "self", ".", "coor_w", "=", "input_frame_shape", "[", "1", "]", "-", "(", "logo_w", "+", "self", ".", "margin", "[", "2", "]", ")", "\n", "", "self", ".", "logo_w", "=", "logo_w", "\n", "self", ".", "logo_h", "=", "logo_h", "\n", "self", ".", "mask", "=", "self", ".", "logo_image", "[", ":", ",", ":", ",", "3", "]", "\n", "self", ".", "mask", "=", "cv2", ".", "bitwise_not", "(", "self", ".", "mask", "//", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.add_watermark.watermark_image.apply_frames": [[80, 113], ["cv2.add", "int", "int", "cv2.resize", "cv2.bitwise_not"], "methods", ["None"], ["", "", "def", "apply_frames", "(", "self", ",", "frame", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "resized", ":", "\n", "            ", "shape", "=", "frame", ".", "shape", "\n", "logo_w", "=", "shape", "[", "1", "]", "*", "self", ".", "size", "\n", "ratio", "=", "logo_w", "/", "self", ".", "ori_shape", "[", "1", "]", "\n", "logo_h", "=", "int", "(", "ratio", "*", "self", ".", "ori_shape", "[", "0", "]", ")", "\n", "logo_w", "=", "int", "(", "logo_w", ")", "\n", "\n", "size", "=", "(", "logo_w", ",", "logo_h", ")", "\n", "self", ".", "logo_image", "=", "cv2", ".", "resize", "(", "self", ".", "logo_image", ",", "size", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "self", ".", "resized", "=", "True", "\n", "if", "self", ".", "oritation", "==", "\"UL\"", ":", "\n", "                ", "self", ".", "coor_h", "=", "self", ".", "margin", "[", "1", "]", "\n", "self", ".", "coor_w", "=", "self", ".", "margin", "[", "0", "]", "\n", "", "elif", "self", ".", "oritation", "==", "\"UR\"", ":", "\n", "                ", "self", ".", "coor_h", "=", "self", ".", "margin", "[", "1", "]", "\n", "self", ".", "coor_w", "=", "shape", "[", "1", "]", "-", "(", "logo_w", "+", "self", ".", "margin", "[", "2", "]", ")", "\n", "", "elif", "self", ".", "oritation", "==", "\"DL\"", ":", "\n", "                ", "self", ".", "coor_h", "=", "shape", "[", "0", "]", "-", "(", "logo_h", "+", "self", ".", "margin", "[", "1", "]", ")", "\n", "self", ".", "coor_w", "=", "self", ".", "margin", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "coor_h", "=", "shape", "[", "0", "]", "-", "(", "logo_h", "+", "self", ".", "margin", "[", "3", "]", ")", "\n", "self", ".", "coor_w", "=", "shape", "[", "1", "]", "-", "(", "logo_w", "+", "self", ".", "margin", "[", "2", "]", ")", "\n", "", "self", ".", "logo_w", "=", "logo_w", "\n", "self", ".", "logo_h", "=", "logo_h", "\n", "self", ".", "mask", "=", "self", ".", "logo_image", "[", ":", ",", ":", ",", "3", "]", "\n", "self", ".", "mask", "=", "cv2", ".", "bitwise_not", "(", "self", ".", "mask", "//", "255", ")", "\n", "\n", "", "original_frame", "=", "frame", "[", "self", ".", "coor_h", ":", "(", "self", ".", "coor_h", "+", "self", ".", "logo_h", ")", ",", "self", ".", "coor_w", ":", "(", "self", ".", "coor_w", "+", "self", ".", "logo_w", ")", ",", ":", "]", "\n", "blending_logo", "=", "cv2", ".", "add", "(", "self", ".", "logo_image", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "original_frame", ",", "mask", "=", "self", ".", "mask", ")", "\n", "frame", "[", "self", ".", "coor_h", ":", "(", "self", ".", "coor_h", "+", "self", ".", "logo_h", ")", ",", "self", ".", "coor_w", ":", "(", "self", ".", "coor_w", "+", "self", ".", "logo_w", ")", ",", ":", "]", "=", "blending_logo", "\n", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.add_watermark.watermark_image.__addAlpha__": [[114, 118], ["numpy.concatenate", "numpy.concatenate", "numpy.ones", "numpy.ones"], "methods", ["None"], ["", "def", "__addAlpha__", "(", "self", ",", "image", ")", ":", "\n", "        ", "shape", "=", "image", ".", "shape", "\n", "alpha_channel", "=", "np", ".", "ones", "(", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "1", ")", ",", "np", ".", "uint8", ")", "*", "255", "\n", "return", "np", ".", "concatenate", "(", "(", "image", ",", "alpha_channel", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.add_watermark.rotate_image": [[10, 21], ["cv2.getRotationMatrix2D", "cv2.warpAffine"], "function", ["None"], ["def", "rotate_image", "(", "image", ",", "angle", ",", "center", "=", "None", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "(", "h", ",", "w", ")", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "\n", "if", "center", "is", "None", ":", "\n", "        ", "center", "=", "(", "w", "/", "2", ",", "h", "/", "2", ")", "\n", "\n", "# Perform the rotation", "\n", "", "M", "=", "cv2", ".", "getRotationMatrix2D", "(", "center", ",", "angle", ",", "scale", ")", "\n", "rotated", "=", "cv2", ".", "warpAffine", "(", "image", ",", "M", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "rotated", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.videoswap._totensor": [[25, 29], ["torch.from_numpy", "torch.from_numpy.transpose().transpose().contiguous", "tensor.transpose().transpose().contiguous.float().div", "torch.from_numpy.transpose().transpose", "tensor.transpose().transpose().contiguous.float", "torch.from_numpy.transpose"], "function", ["None"], ["def", "_totensor", "(", "array", ")", ":", "\n", "    ", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "img", "=", "tensor", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.videoswap.video_swap": [[30, 122], ["moviepy.editor.VideoFileClip", "cv2.VideoCapture", "util.add_watermark.watermark_image", "int", "cv2.VideoCapture.get", "os.path.exists", "util.norm.SpecificNorm", "tqdm.tqdm", "cv2.VideoCapture.release", "os.path.join", "sorted", "moviepy.video.io.ImageSequenceClip.ImageSequenceClip", "clips.set_audio.write_videofile", "moviepy.editor.AudioFileClip", "cv2.VideoCapture.get", "shutil.rmtree", "parsing_model.model.BiSeNet", "parsing_model.model.BiSeNet.cuda", "os.path.join", "parsing_model.model.BiSeNet.load_state_dict", "parsing_model.model.BiSeNet.eval", "range", "cv2.VideoCapture.read", "glob.glob", "clips.set_audio.set_audio", "torch.load", "detect_model.get", "util.reverse2original.reverse2wholeimage", "logoclass.apply_frames.astype", "cv2.imwrite", "os.path.exists", "os.mkdir", "[].cuda", "cv2.imwrite", "swap_result_list.append", "frame_align_crop_tenor_list.append", "os.path.join", "os.path.exists", "os.mkdir", "util.add_watermark.watermark_image.apply_frames", "os.path.join", "swap_model", "os.path.join", "videoswap._totensor", "cv2.cvtColor"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.get", "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.get", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.eval", "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.get", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.reverse2original.reverse2wholeimage", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdir", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdir", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.add_watermark.watermark_image.apply_frames", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.videoswap_multispecific._totensor"], ["", "def", "video_swap", "(", "video_path", ",", "id_vetor", ",", "swap_model", ",", "detect_model", ",", "save_path", ",", "temp_results_dir", "=", "'./temp_results'", ",", "crop_size", "=", "224", ",", "no_simswaplogo", "=", "False", ",", "use_mask", "=", "False", ")", ":", "\n", "    ", "video_forcheck", "=", "VideoFileClip", "(", "video_path", ")", "\n", "if", "video_forcheck", ".", "audio", "is", "None", ":", "\n", "        ", "no_audio", "=", "True", "\n", "", "else", ":", "\n", "        ", "no_audio", "=", "False", "\n", "\n", "", "del", "video_forcheck", "\n", "\n", "if", "not", "no_audio", ":", "\n", "        ", "video_audio_clip", "=", "AudioFileClip", "(", "video_path", ")", "\n", "\n", "", "video", "=", "cv2", ".", "VideoCapture", "(", "video_path", ")", "\n", "logoclass", "=", "watermark_image", "(", "'./simswaplogo/simswaplogo.png'", ")", "\n", "ret", "=", "True", "\n", "frame_index", "=", "0", "\n", "\n", "frame_count", "=", "int", "(", "video", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "\n", "# video_WIDTH = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))", "\n", "\n", "# video_HEIGHT = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))", "\n", "\n", "fps", "=", "video", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "temp_results_dir", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "temp_results_dir", ")", "\n", "\n", "", "spNorm", "=", "SpecificNorm", "(", ")", "\n", "if", "use_mask", ":", "\n", "        ", "n_classes", "=", "19", "\n", "net", "=", "BiSeNet", "(", "n_classes", "=", "n_classes", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "save_pth", "=", "os", ".", "path", ".", "join", "(", "'./parsing_model/checkpoint'", ",", "'79999_iter.pth'", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_pth", ")", ")", "\n", "net", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "        ", "net", "=", "None", "\n", "\n", "# while ret:", "\n", "", "for", "frame_index", "in", "tqdm", "(", "range", "(", "frame_count", ")", ")", ":", "\n", "        ", "ret", ",", "frame", "=", "video", ".", "read", "(", ")", "\n", "if", "ret", ":", "\n", "            ", "detect_results", "=", "detect_model", ".", "get", "(", "frame", ",", "crop_size", ")", "\n", "\n", "if", "detect_results", "is", "not", "None", ":", "\n", "# print(frame_index)", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "temp_results_dir", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "temp_results_dir", ")", "\n", "", "frame_align_crop_list", "=", "detect_results", "[", "0", "]", "\n", "frame_mat_list", "=", "detect_results", "[", "1", "]", "\n", "swap_result_list", "=", "[", "]", "\n", "frame_align_crop_tenor_list", "=", "[", "]", "\n", "for", "frame_align_crop", "in", "frame_align_crop_list", ":", "\n", "\n", "# BGR TO RGB", "\n", "# frame_align_crop_RGB = frame_align_crop[...,::-1]", "\n", "\n", "                    ", "frame_align_crop_tenor", "=", "_totensor", "(", "cv2", ".", "cvtColor", "(", "frame_align_crop", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "[", "None", ",", "...", "]", ".", "cuda", "(", ")", "\n", "\n", "swap_result", "=", "swap_model", "(", "None", ",", "frame_align_crop_tenor", ",", "id_vetor", ",", "None", ",", "True", ")", "[", "0", "]", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "temp_results_dir", ",", "'frame_{:0>7d}.jpg'", ".", "format", "(", "frame_index", ")", ")", ",", "frame", ")", "\n", "swap_result_list", ".", "append", "(", "swap_result", ")", "\n", "frame_align_crop_tenor_list", ".", "append", "(", "frame_align_crop_tenor", ")", "\n", "\n", "\n", "\n", "", "reverse2wholeimage", "(", "frame_align_crop_tenor_list", ",", "swap_result_list", ",", "frame_mat_list", ",", "crop_size", ",", "frame", ",", "logoclass", ",", "os", ".", "path", ".", "join", "(", "temp_results_dir", ",", "'frame_{:0>7d}.jpg'", ".", "format", "(", "frame_index", ")", ")", ",", "no_simswaplogo", ",", "pasring_model", "=", "net", ",", "use_mask", "=", "use_mask", ",", "norm", "=", "spNorm", ")", "\n", "\n", "", "else", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "temp_results_dir", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "temp_results_dir", ")", "\n", "", "frame", "=", "frame", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "not", "no_simswaplogo", ":", "\n", "                    ", "frame", "=", "logoclass", ".", "apply_frames", "(", "frame", ")", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "temp_results_dir", ",", "'frame_{:0>7d}.jpg'", ".", "format", "(", "frame_index", ")", ")", ",", "frame", ")", "\n", "", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "video", ".", "release", "(", ")", "\n", "\n", "# image_filename_list = []", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "temp_results_dir", ",", "'*.jpg'", ")", "\n", "image_filenames", "=", "sorted", "(", "glob", ".", "glob", "(", "path", ")", ")", "\n", "\n", "clips", "=", "ImageSequenceClip", "(", "image_filenames", ",", "fps", "=", "fps", ")", "\n", "\n", "if", "not", "no_audio", ":", "\n", "        ", "clips", "=", "clips", ".", "set_audio", "(", "video_audio_clip", ")", "\n", "\n", "\n", "", "clips", ".", "write_videofile", "(", "save_path", ",", "audio_codec", "=", "'aac'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.image_pool.ImagePool.__init__": [[5, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "pool_size", "=", "pool_size", "\n", "if", "self", ".", "pool_size", ">", "0", ":", "\n", "            ", "self", ".", "num_imgs", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.image_pool.ImagePool.query": [[11, 32], ["torch.autograd.Variable", "torch.unsqueeze", "torch.cat", "image_pool.ImagePool.images.append", "torch.autograd.Variable.append", "random.uniform", "random.randint", "image_pool.ImagePool.images[].clone", "torch.autograd.Variable.append", "torch.autograd.Variable.append"], "methods", ["None"], ["", "", "def", "query", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "pool_size", "==", "0", ":", "\n", "            ", "return", "images", "\n", "", "return_images", "=", "[", "]", "\n", "for", "image", "in", "images", ".", "data", ":", "\n", "            ", "image", "=", "torch", ".", "unsqueeze", "(", "image", ",", "0", ")", "\n", "if", "self", ".", "num_imgs", "<", "self", ".", "pool_size", ":", "\n", "                ", "self", ".", "num_imgs", "=", "self", ".", "num_imgs", "+", "1", "\n", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "return_images", ".", "append", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "p", ">", "0.5", ":", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "pool_size", "-", "1", ")", "\n", "tmp", "=", "self", ".", "images", "[", "random_id", "]", ".", "clone", "(", ")", "\n", "self", ".", "images", "[", "random_id", "]", "=", "image", "\n", "return_images", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "return_images", ".", "append", "(", "image", ")", "\n", "", "", "", "return_images", "=", "Variable", "(", "torch", ".", "cat", "(", "return_images", ",", "0", ")", ")", "\n", "return", "return_images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.save_heatmap.SaveHeatmap": [[20, 54], ["range", "cv2.imwrite", "os.path.exists", "os.makedirs", "os.path.join", "seaborn.heatmap", "matplotlib.savefig", "cv2.imread", "numpy.zeros", "heatmaps[].max"], "function", ["None"], ["def", "SaveHeatmap", "(", "heatmaps", ",", "path", ",", "row", "=", "-", "1", ",", "dpi", "=", "72", ")", ":", "\n", "    ", "\"\"\"\n    The input tensor must be B X 1 X H X W\n    \"\"\"", "\n", "batch_size", "=", "heatmaps", ".", "shape", "[", "0", "]", "\n", "temp_path", "=", "\".temp/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "temp_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "temp_path", ")", "\n", "", "final_img", "=", "None", "\n", "if", "row", "<", "1", ":", "\n", "        ", "col", "=", "batch_size", "\n", "row", "=", "1", "\n", "", "else", ":", "\n", "        ", "col", "=", "batch_size", "//", "row", "\n", "if", "row", "*", "col", "<", "batch_size", ":", "\n", "            ", "col", "+=", "1", "\n", "\n", "", "", "row_i", "=", "0", "\n", "col_i", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "temp_path", ",", "'temp_batch_{}.png'", ".", "format", "(", "i", ")", ")", "\n", "sns", ".", "heatmap", "(", "heatmaps", "[", "i", ",", "0", ",", ":", ",", ":", "]", ",", "vmin", "=", "0", ",", "vmax", "=", "heatmaps", "[", "i", ",", "0", ",", ":", ",", ":", "]", ".", "max", "(", ")", ",", "cbar", "=", "False", ")", "\n", "plt", ".", "savefig", "(", "img_path", ",", "dpi", "=", "dpi", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "H", ",", "W", ",", "C", "=", "img", ".", "shape", "\n", "final_img", "=", "np", ".", "zeros", "(", "(", "H", "*", "row", ",", "W", "*", "col", ",", "C", ")", ")", "\n", "", "final_img", "[", "H", "*", "row_i", ":", "H", "*", "(", "row_i", "+", "1", ")", ",", "W", "*", "col_i", ":", "W", "*", "(", "col_i", "+", "1", ")", ",", ":", "]", "=", "img", "\n", "col_i", "+=", "1", "\n", "if", "col_i", ">=", "col", ":", "\n", "            ", "col_i", "=", "0", "\n", "row_i", "+=", "1", "\n", "", "", "cv2", ".", "imwrite", "(", "path", ",", "final_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.visualizer.Visualizer.__init__": [[14, 35], ["os.path.join", "os.path.join", "tf.summary.FileWriter", "os.path.join", "os.path.join", "print", "util.mkdirs", "open", "time.strftime", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "# self.opt = opt", "\n", "        ", "self", ".", "tf_log", "=", "opt", ".", "tf_log", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "if", "self", ".", "tf_log", ":", "\n", "            ", "import", "tensorflow", "as", "tf", "\n", "self", ".", "tf", "=", "tf", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'logs'", ")", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "log_dir", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.visualizer.Visualizer.display_current_results": [[37, 93], ["visuals.items", "visualizer.Visualizer.tf.Summary", "visualizer.Visualizer.writer.add_summary", "visuals.items", "html.HTML", "range", "html.HTML.save", "scipy.misc.toimage().save", "visualizer.Visualizer.tf.Summary.Image", "img_summaries.append", "isinstance", "html.HTML.add_header", "visuals.items", "StringIO", "visualizer.Visualizer.tf.Summary.Value", "range", "os.path.join", "util.save_image", "isinstance", "len", "html.HTML.add_images", "int", "html.HTML.add_images", "html.HTML.add_images", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue", "len", "os.path.join", "util.save_image", "range", "ims.append", "txts.append", "links.append", "round", "len", "ims.append", "txts.append", "links.append", "len", "str"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.fsModel.save", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.fsModel.save", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.html.HTML.add_header", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.save_image", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.html.HTML.add_images", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.html.HTML.add_images", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.html.HTML.add_images", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.save_image"], ["", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "tf_log", ":", "# show images in tensorboard output", "\n", "            ", "img_summaries", "=", "[", "]", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "# Write the image to a string", "\n", "                ", "try", ":", "\n", "                    ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                    ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "image_numpy", ")", ".", "save", "(", "s", ",", "format", "=", "\"jpeg\"", ")", "\n", "# Create an Image object", "\n", "img_sum", "=", "self", ".", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "height", "=", "image_numpy", ".", "shape", "[", "0", "]", ",", "width", "=", "image_numpy", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "label", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "# save images to a html file", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "image_numpy", ",", "list", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "image_numpy", ")", ")", ":", "\n", "                        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s_%d.jpg'", "%", "(", "epoch", ",", "label", ",", "i", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", "[", "i", "]", ",", "img_path", ")", "\n", "", "", "else", ":", "\n", "                    ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s.jpg'", "%", "(", "epoch", ",", "label", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "\n", "# update website", "\n", "", "", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "refresh", "=", "30", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "image_numpy", ",", "list", ")", ":", "\n", "                        ", "for", "i", "in", "range", "(", "len", "(", "image_numpy", ")", ")", ":", "\n", "                            ", "img_path", "=", "'epoch%.3d_%s_%d.jpg'", "%", "(", "n", ",", "label", ",", "i", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", "+", "str", "(", "i", ")", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "else", ":", "\n", "                        ", "img_path", "=", "'epoch%.3d_%s.jpg'", "%", "(", "n", ",", "label", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "if", "len", "(", "ims", ")", "<", "10", ":", "\n", "                    ", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "else", ":", "\n", "                    ", "num", "=", "int", "(", "round", "(", "len", "(", "ims", ")", "/", "2.0", ")", ")", "\n", "webpage", ".", "add_images", "(", "ims", "[", ":", "num", "]", ",", "txts", "[", ":", "num", "]", ",", "links", "[", ":", "num", "]", ",", "width", "=", "self", ".", "win_size", ")", "\n", "webpage", ".", "add_images", "(", "ims", "[", "num", ":", "]", ",", "txts", "[", "num", ":", "]", ",", "links", "[", "num", ":", "]", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.visualizer.Visualizer.plot_current_errors": [[95, 100], ["errors.items", "visualizer.Visualizer.tf.Summary", "visualizer.Visualizer.writer.add_summary", "visualizer.Visualizer.tf.Summary.Value"], "methods", ["None"], ["", "", "def", "plot_current_errors", "(", "self", ",", "errors", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "tf_log", ":", "\n", "            ", "for", "tag", ",", "value", "in", "errors", ".", "items", "(", ")", ":", "\n", "                ", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "[", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.visualizer.Visualizer.print_current_errors": [[102, 111], ["errors.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "", "", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "!=", "0", ":", "\n", "                ", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.visualizer.Visualizer.save_images": [[113, 132], ["webpage.get_image_dir", "ntpath.basename", "webpage.add_header", "visuals.items", "webpage.add_images", "os.path.splitext", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.html.HTML.add_header", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.html.HTML.add_images", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.save_image"], ["", "", "def", "save_images", "(", "self", ",", "webpage", ",", "visuals", ",", "image_path", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "\n", "webpage", ".", "add_header", "(", "name", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "image_name", "=", "'%s_%s.jpg'", "%", "(", "name", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.logo_class.logo_class.print_group_logo": [[15, 29], ["print"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "print_group_logo", "(", ")", ":", "\n", "        ", "logo_str", "=", "\"\"\"\n\n\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\n\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d     \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d     \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\n\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2588\u2557    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557     \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551\n\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588   \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551\n\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d   \u2588\u2588\u2551   \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\n\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d     \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2550\u255d \nNeural Rendering Special Interesting Group of SJTU\n                                                                            \n        \"\"\"", "\n", "print", "(", "logo_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.logo_class.logo_class.print_start_training": [[30, 41], ["print"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print_start_training", "(", ")", ":", "\n", "        ", "logo_str", "=", "\"\"\"\n   _____  __                __     ______              _         _              \n  / ___/ / /_ ____ _ _____ / /_   /_  __/_____ ____ _ (_)____   (_)____   ____ _\n  \\__ \\ / __// __ `// ___// __/    / /  / ___// __ `// // __ \\ / // __ \\ / __ `/\n ___/ // /_ / /_/ // /   / /_     / /  / /   / /_/ // // / / // // / / // /_/ / \n/____/ \\__/ \\__,_//_/    \\__/    /_/  /_/    \\__,_//_//_/ /_//_//_/ /_/ \\__, /  \n                                                                       /____/   \n        \"\"\"", "\n", "print", "(", "logo_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.norm.SpecificNorm.__init__": [[5, 18], ["torch.Module.__init__", "numpy.array", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "norm.SpecificNorm.mean.view", "numpy.array", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "norm.SpecificNorm.std.view", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"\n            @notice: avoid in-place ops.\n            https://discuss.pytorch.org/t/encounter-the-runtimeerror-one-of-the-variables-needed-for-gradient-computation-has-been-modified-by-an-inplace-operation/836/3\n        \"\"\"", "\n", "super", "(", "SpecificNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "\n", "self", ".", "mean", "=", "torch", ".", "from_numpy", "(", "self", ".", "mean", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "mean", "=", "self", ".", "mean", ".", "view", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "std", "=", "torch", ".", "from_numpy", "(", "self", ".", "std", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "std", "=", "self", ".", "std", ".", "view", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.norm.SpecificNorm.forward": [[19, 26], ["norm.SpecificNorm.mean.expand", "norm.SpecificNorm.std.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "self", ".", "mean", ".", "expand", "(", "[", "1", ",", "3", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ")", "\n", "std", "=", "self", ".", "std", ".", "expand", "(", "[", "1", ",", "3", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "x", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.plot.postprocess": [[5, 11], ["numpy.clip"], "function", ["None"], ["def", "postprocess", "(", "x", ")", ":", "\n", "    ", "\"\"\"[0,1] to uint8.\"\"\"", "\n", "\n", "x", "=", "np", ".", "clip", "(", "255", "*", "x", ",", "0", ",", "255", ")", "\n", "x", "=", "np", ".", "cast", "[", "np", ".", "uint8", "]", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.plot.tile": [[12, 25], ["numpy.zeros", "range", "range"], "function", ["None"], ["", "def", "tile", "(", "X", ",", "rows", ",", "cols", ")", ":", "\n", "    ", "\"\"\"Tile images for display.\"\"\"", "\n", "tiling", "=", "np", ".", "zeros", "(", "(", "rows", "*", "X", ".", "shape", "[", "1", "]", ",", "cols", "*", "X", ".", "shape", "[", "2", "]", ",", "X", ".", "shape", "[", "3", "]", ")", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "rows", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "cols", ")", ":", "\n", "            ", "idx", "=", "i", "*", "cols", "+", "j", "\n", "if", "idx", "<", "X", ".", "shape", "[", "0", "]", ":", "\n", "                ", "img", "=", "X", "[", "idx", ",", "...", "]", "\n", "tiling", "[", "\n", "i", "*", "X", ".", "shape", "[", "1", "]", ":", "(", "i", "+", "1", ")", "*", "X", ".", "shape", "[", "1", "]", ",", "\n", "j", "*", "X", ".", "shape", "[", "2", "]", ":", "(", "j", "+", "1", ")", "*", "X", ".", "shape", "[", "2", "]", ",", "\n", ":", "]", "=", "img", "\n", "", "", "", "return", "tiling", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.plot.plot_batch": [[27, 38], ["plot.postprocess", "math.sqrt", "math.ceil", "plot.tile", "numpy.squeeze", "PIL.Image.fromarray().save", "PIL.Image.fromarray", "numpy.random.choice"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.reverse2original.postprocess", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.plot.tile", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.fsModel.save"], ["", "def", "plot_batch", "(", "X", ",", "out_path", ")", ":", "\n", "    ", "\"\"\"Save batch of images tiled.\"\"\"", "\n", "n_channels", "=", "X", ".", "shape", "[", "3", "]", "\n", "if", "n_channels", ">", "3", ":", "\n", "        ", "X", "=", "X", "[", ":", ",", ":", ",", ":", ",", "np", ".", "random", ".", "choice", "(", "n_channels", ",", "size", "=", "3", ")", "]", "\n", "", "X", "=", "postprocess", "(", "X", ")", "\n", "rc", "=", "math", ".", "sqrt", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "rows", "=", "cols", "=", "math", ".", "ceil", "(", "rc", ")", "\n", "canvas", "=", "tile", "(", "X", ",", "rows", ",", "cols", ")", "\n", "canvas", "=", "np", ".", "squeeze", "(", "canvas", ")", "\n", "PIL", ".", "Image", ".", "fromarray", "(", "canvas", ")", ".", "save", "(", "out_path", ")", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.reverse2original.SoftErosion.__init__": [[31, 45], ["torch.Module.__init__", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "kernel.view.view.sum", "kernel.view.view.view", "reverse2original.SoftErosion.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.sqrt.max", "torch.sqrt.max"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", "=", "15", ",", "threshold", "=", "0.6", ",", "iterations", "=", "1", ")", ":", "\n", "        ", "super", "(", "SoftErosion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "r", "=", "kernel_size", "//", "2", "\n", "self", ".", "padding", "=", "r", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n", "# Create kernel", "\n", "y_indices", ",", "x_indices", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "0.", ",", "kernel_size", ")", ",", "torch", ".", "arange", "(", "0.", ",", "kernel_size", ")", ")", "\n", "dist", "=", "torch", ".", "sqrt", "(", "(", "x_indices", "-", "r", ")", "**", "2", "+", "(", "y_indices", "-", "r", ")", "**", "2", ")", "\n", "kernel", "=", "dist", ".", "max", "(", ")", "-", "dist", "\n", "kernel", "/=", "kernel", ".", "sum", "(", ")", "\n", "kernel", "=", "kernel", ".", "view", "(", "1", ",", "1", ",", "*", "kernel", ".", "shape", ")", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.reverse2original.SoftErosion.forward": [[46, 57], ["torch.min.float", "torch.min.float", "range", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "x[].max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "float", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "iterations", "-", "1", ")", ":", "\n", "            ", "x", "=", "torch", ".", "min", "(", "x", ",", "F", ".", "conv2d", "(", "x", ",", "weight", "=", "self", ".", "weight", ",", "groups", "=", "x", ".", "shape", "[", "1", "]", ",", "padding", "=", "self", ".", "padding", ")", ")", "\n", "", "x", "=", "F", ".", "conv2d", "(", "x", ",", "weight", "=", "self", ".", "weight", ",", "groups", "=", "x", ".", "shape", "[", "1", "]", ",", "padding", "=", "self", ".", "padding", ")", "\n", "\n", "mask", "=", "x", ">=", "self", ".", "threshold", "\n", "x", "[", "mask", "]", "=", "1.0", "\n", "x", "[", "~", "mask", "]", "/=", "x", "[", "~", "mask", "]", ".", "max", "(", ")", "\n", "\n", "return", "x", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.reverse2original.encode_segmentation_rgb": [[9, 28], ["numpy.zeros", "numpy.zeros", "numpy.where", "numpy.stack", "numpy.where"], "function", ["None"], ["def", "encode_segmentation_rgb", "(", "segmentation", ",", "no_neck", "=", "True", ")", ":", "\n", "    ", "parse", "=", "segmentation", "\n", "\n", "face_part_ids", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "10", ",", "12", ",", "13", "]", "if", "no_neck", "else", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "10", ",", "12", ",", "13", ",", "14", "]", "\n", "mouth_id", "=", "11", "\n", "# hair_id = 17", "\n", "face_map", "=", "np", ".", "zeros", "(", "[", "parse", ".", "shape", "[", "0", "]", ",", "parse", ".", "shape", "[", "1", "]", "]", ")", "\n", "mouth_map", "=", "np", ".", "zeros", "(", "[", "parse", ".", "shape", "[", "0", "]", ",", "parse", ".", "shape", "[", "1", "]", "]", ")", "\n", "# hair_map = np.zeros([parse.shape[0], parse.shape[1]])", "\n", "\n", "for", "valid_id", "in", "face_part_ids", ":", "\n", "        ", "valid_index", "=", "np", ".", "where", "(", "parse", "==", "valid_id", ")", "\n", "face_map", "[", "valid_index", "]", "=", "255", "\n", "", "valid_index", "=", "np", ".", "where", "(", "parse", "==", "mouth_id", ")", "\n", "mouth_map", "[", "valid_index", "]", "=", "255", "\n", "# valid_index = np.where(parse==hair_id)", "\n", "# hair_map[valid_index] = 255", "\n", "#return np.stack([face_map, mouth_map,hair_map], axis=2)", "\n", "return", "np", ".", "stack", "(", "[", "face_map", ",", "mouth_map", "]", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.reverse2original.postprocess": [[59, 74], ["torch.from_numpy().float().mul_().cuda", "torch.from_numpy().float().mul_().cuda", "smooth_mask", "soft_face_mask_tensor.squeeze_", "soft_face_mask_tensor.cpu().numpy", "face_mask_tensor.unsqueeze_().unsqueeze_", "torch.from_numpy().float().mul_", "torch.from_numpy().float().mul_", "soft_face_mask_tensor.cpu", "face_mask_tensor.unsqueeze_", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "target_mask.copy().transpose", "target_mask.copy"], "function", ["None"], ["", "", "def", "postprocess", "(", "swapped_face", ",", "target", ",", "target_mask", ",", "smooth_mask", ")", ":", "\n", "# target_mask = cv2.resize(target_mask, (self.size,  self.size))", "\n", "\n", "    ", "mask_tensor", "=", "torch", ".", "from_numpy", "(", "target_mask", ".", "copy", "(", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", ".", "float", "(", ")", ".", "mul_", "(", "1", "/", "255.0", ")", ".", "cuda", "(", ")", "\n", "face_mask_tensor", "=", "mask_tensor", "[", "0", "]", "+", "mask_tensor", "[", "1", "]", "\n", "\n", "soft_face_mask_tensor", ",", "_", "=", "smooth_mask", "(", "face_mask_tensor", ".", "unsqueeze_", "(", "0", ")", ".", "unsqueeze_", "(", "0", ")", ")", "\n", "soft_face_mask_tensor", ".", "squeeze_", "(", ")", "\n", "\n", "soft_face_mask", "=", "soft_face_mask_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "soft_face_mask", "=", "soft_face_mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "result", "=", "swapped_face", "*", "soft_face_mask", "+", "target", "*", "(", "1", "-", "soft_face_mask", ")", "\n", "result", "=", "result", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# .astype(np.uint8)", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.reverse2original.reverse2wholeimage": [[75, 176], ["zip", "numpy.array", "zip", "np.array.astype", "cv2.imwrite", "SoftErosion().cuda", "swaped_img.cpu().detach().numpy().transpose.cpu().detach().numpy().transpose", "numpy.full", "numpy.zeros", "cv2.warpAffine", "numpy.ones", "cv2.erode", "tuple", "cv2.GaussianBlur", "numpy.reshape", "img_mask_list.append", "target_image_list.append", "logoclass.apply_frames", "norm", "torch.nn.functional.interpolate", "out.squeeze().detach().cpu().numpy().argmax", "out.squeeze().detach().cpu().numpy().argmax.copy().astype", "reverse2original.encode_segmentation_rgb", "cv2.warpAffine", "reverse2original.SoftErosion", "swaped_img.cpu().detach().numpy().transpose.cpu().detach().numpy", "pasring_model", "encode_segmentation_rgb.sum", "cv2.resize", "reverse2original.postprocess", "cv2.warpAffine", "numpy.array", "out.squeeze().detach().cpu().numpy", "out.squeeze().detach().cpu().numpy().argmax.copy", "source_img[].cpu().detach().numpy().transpose", "cv2.warpAffine", "numpy.array", "swaped_img.cpu().detach().numpy().transpose.cpu().detach", "out.squeeze().detach().cpu", "source_img[].cpu().detach().numpy", "swaped_img.cpu().detach().numpy().transpose.cpu", "out.squeeze().detach", "source_img[].cpu().detach", "out.squeeze", "source_img[].cpu"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.add_watermark.watermark_image.apply_frames", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.reverse2original.encode_segmentation_rgb", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.reverse2original.postprocess"], ["", "def", "reverse2wholeimage", "(", "b_align_crop_tenor_list", ",", "swaped_imgs", ",", "mats", ",", "crop_size", ",", "oriimg", ",", "logoclass", ",", "save_path", "=", "''", ",", "no_simswaplogo", "=", "False", ",", "pasring_model", "=", "None", ",", "norm", "=", "None", ",", "use_mask", "=", "False", ")", ":", "\n", "\n", "    ", "target_image_list", "=", "[", "]", "\n", "img_mask_list", "=", "[", "]", "\n", "if", "use_mask", ":", "\n", "        ", "smooth_mask", "=", "SoftErosion", "(", "kernel_size", "=", "17", ",", "threshold", "=", "0.9", ",", "iterations", "=", "7", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "\n", "# print(len(swaped_imgs))", "\n", "# print(mats)", "\n", "# print(len(b_align_crop_tenor_list))", "\n", "", "for", "swaped_img", ",", "mat", ",", "source_img", "in", "zip", "(", "swaped_imgs", ",", "mats", ",", "b_align_crop_tenor_list", ")", ":", "\n", "        ", "swaped_img", "=", "swaped_img", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "img_white", "=", "np", ".", "full", "(", "(", "crop_size", ",", "crop_size", ")", ",", "255", ",", "dtype", "=", "float", ")", "\n", "\n", "# inverse the Affine transformation matrix", "\n", "mat_rev", "=", "np", ".", "zeros", "(", "[", "2", ",", "3", "]", ")", "\n", "div1", "=", "mat", "[", "0", "]", "[", "0", "]", "*", "mat", "[", "1", "]", "[", "1", "]", "-", "mat", "[", "0", "]", "[", "1", "]", "*", "mat", "[", "1", "]", "[", "0", "]", "\n", "mat_rev", "[", "0", "]", "[", "0", "]", "=", "mat", "[", "1", "]", "[", "1", "]", "/", "div1", "\n", "mat_rev", "[", "0", "]", "[", "1", "]", "=", "-", "mat", "[", "0", "]", "[", "1", "]", "/", "div1", "\n", "mat_rev", "[", "0", "]", "[", "2", "]", "=", "-", "(", "mat", "[", "0", "]", "[", "2", "]", "*", "mat", "[", "1", "]", "[", "1", "]", "-", "mat", "[", "0", "]", "[", "1", "]", "*", "mat", "[", "1", "]", "[", "2", "]", ")", "/", "div1", "\n", "div2", "=", "mat", "[", "0", "]", "[", "1", "]", "*", "mat", "[", "1", "]", "[", "0", "]", "-", "mat", "[", "0", "]", "[", "0", "]", "*", "mat", "[", "1", "]", "[", "1", "]", "\n", "mat_rev", "[", "1", "]", "[", "0", "]", "=", "mat", "[", "1", "]", "[", "0", "]", "/", "div2", "\n", "mat_rev", "[", "1", "]", "[", "1", "]", "=", "-", "mat", "[", "0", "]", "[", "0", "]", "/", "div2", "\n", "mat_rev", "[", "1", "]", "[", "2", "]", "=", "-", "(", "mat", "[", "0", "]", "[", "2", "]", "*", "mat", "[", "1", "]", "[", "0", "]", "-", "mat", "[", "0", "]", "[", "0", "]", "*", "mat", "[", "1", "]", "[", "2", "]", ")", "/", "div2", "\n", "\n", "orisize", "=", "(", "oriimg", ".", "shape", "[", "1", "]", ",", "oriimg", ".", "shape", "[", "0", "]", ")", "\n", "if", "use_mask", ":", "\n", "            ", "source_img_norm", "=", "norm", "(", "source_img", ")", "\n", "source_img_512", "=", "F", ".", "interpolate", "(", "source_img_norm", ",", "size", "=", "(", "512", ",", "512", ")", ")", "\n", "out", "=", "pasring_model", "(", "source_img_512", ")", "[", "0", "]", "\n", "parsing", "=", "out", ".", "squeeze", "(", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "0", ")", "\n", "vis_parsing_anno", "=", "parsing", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "tgt_mask", "=", "encode_segmentation_rgb", "(", "vis_parsing_anno", ")", "\n", "if", "tgt_mask", ".", "sum", "(", ")", ">=", "5000", ":", "\n", "# face_mask_tensor = tgt_mask[...,0] + tgt_mask[...,1]", "\n", "                ", "target_mask", "=", "cv2", ".", "resize", "(", "tgt_mask", ",", "(", "crop_size", ",", "crop_size", ")", ")", "\n", "# print(source_img)", "\n", "target_image_parsing", "=", "postprocess", "(", "swaped_img", ",", "source_img", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ",", "target_mask", ",", "smooth_mask", ")", "\n", "\n", "\n", "target_image", "=", "cv2", ".", "warpAffine", "(", "target_image_parsing", ",", "mat_rev", ",", "orisize", ")", "\n", "# target_image_parsing = cv2.warpAffine(swaped_img, mat_rev, orisize)", "\n", "", "else", ":", "\n", "                ", "target_image", "=", "cv2", ".", "warpAffine", "(", "swaped_img", ",", "mat_rev", ",", "orisize", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "target_image", "=", "cv2", ".", "warpAffine", "(", "swaped_img", ",", "mat_rev", ",", "orisize", ")", "\n", "# source_image   = cv2.warpAffine(source_img, mat_rev, orisize)", "\n", "\n", "", "img_white", "=", "cv2", ".", "warpAffine", "(", "img_white", ",", "mat_rev", ",", "orisize", ")", "\n", "\n", "\n", "img_white", "[", "img_white", ">", "20", "]", "=", "255", "\n", "\n", "img_mask", "=", "img_white", "\n", "\n", "# if use_mask:", "\n", "#     kernel = np.ones((40,40),np.uint8)", "\n", "#     img_mask = cv2.erode(img_mask,kernel,iterations = 1)", "\n", "# else:", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "40", ",", "40", ")", ",", "np", ".", "uint8", ")", "\n", "img_mask", "=", "cv2", ".", "erode", "(", "img_mask", ",", "kernel", ",", "iterations", "=", "1", ")", "\n", "kernel_size", "=", "(", "20", ",", "20", ")", "\n", "blur_size", "=", "tuple", "(", "2", "*", "i", "+", "1", "for", "i", "in", "kernel_size", ")", "\n", "img_mask", "=", "cv2", ".", "GaussianBlur", "(", "img_mask", ",", "blur_size", ",", "0", ")", "\n", "\n", "# kernel = np.ones((10,10),np.uint8)", "\n", "# img_mask = cv2.erode(img_mask,kernel,iterations = 1)", "\n", "\n", "\n", "\n", "img_mask", "/=", "255", "\n", "\n", "img_mask", "=", "np", ".", "reshape", "(", "img_mask", ",", "[", "img_mask", ".", "shape", "[", "0", "]", ",", "img_mask", ".", "shape", "[", "1", "]", ",", "1", "]", ")", "\n", "\n", "# pasing mask", "\n", "\n", "# target_image_parsing = postprocess(target_image, source_image, tgt_mask)", "\n", "\n", "if", "use_mask", ":", "\n", "            ", "target_image", "=", "np", ".", "array", "(", "target_image", ",", "dtype", "=", "np", ".", "float", ")", "*", "255", "\n", "", "else", ":", "\n", "            ", "target_image", "=", "np", ".", "array", "(", "target_image", ",", "dtype", "=", "np", ".", "float", ")", "[", "...", ",", ":", ":", "-", "1", "]", "*", "255", "\n", "\n", "\n", "", "img_mask_list", ".", "append", "(", "img_mask", ")", "\n", "target_image_list", ".", "append", "(", "target_image", ")", "\n", "\n", "\n", "# target_image /= 255", "\n", "# target_image = 0", "\n", "", "img", "=", "np", ".", "array", "(", "oriimg", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "img_mask", ",", "target_image", "in", "zip", "(", "img_mask_list", ",", "target_image_list", ")", ":", "\n", "        ", "img", "=", "img_mask", "*", "target_image", "+", "(", "1", "-", "img_mask", ")", "*", "img", "\n", "\n", "", "final_img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "not", "no_simswaplogo", ":", "\n", "        ", "final_img", "=", "logoclass", ".", "apply_frames", "(", "final_img", ")", "\n", "", "cv2", ".", "imwrite", "(", "save_path", ",", "final_img", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.videoswap_multispecific._totensor": [[18, 22], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy.transpose().transpose().contiguous", "tensor.transpose().transpose().contiguous.float().div", "torch.from_numpy.transpose().transpose", "tensor.transpose().transpose().contiguous.float", "torch.from_numpy.transpose"], "function", ["None"], ["def", "_totensor", "(", "array", ")", ":", "\n", "    ", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "img", "=", "tensor", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.videoswap_multispecific.video_swap": [[23, 146], ["moviepy.editor.VideoFileClip", "cv2.VideoCapture", "util.add_watermark.watermark_image", "int", "cv2.VideoCapture.get", "os.path.exists", "util.norm.SpecificNorm", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "tqdm.tqdm", "cv2.VideoCapture.release", "os.path.join", "sorted", "moviepy.video.io.ImageSequenceClip.ImageSequenceClip", "clips.set_audio.write_videofile", "moviepy.editor.AudioFileClip", "cv2.VideoCapture.get", "shutil.rmtree", "parsing_model.model.BiSeNet", "parsing_model.model.BiSeNet.cuda", "os.path.join", "parsing_model.model.BiSeNet.load_state_dict", "parsing_model.model.BiSeNet.eval", "range", "cv2.VideoCapture.read", "glob.glob", "clips.set_audio.set_audio", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.load", "torch.load", "detect_model.get", "numpy.array().transpose", "numpy.argmin", "numpy.min", "enumerate", "logoclass.apply_frames.astype", "cv2.imwrite", "os.path.exists", "os.mkdir", "[].cuda", "util.norm.SpecificNorm.", "torch.interpolate", "swap_model.netArc", "id_compare_values.append", "frame_align_crop_tenor_list.append", "len", "util.reverse2original.reverse2wholeimage", "logoclass.apply_frames.astype", "cv2.imwrite", "os.path.exists", "os.mkdir", "util.add_watermark.watermark_image.apply_frames", "os.path.join", "id_compare_values[].append", "numpy.array", "swap_result_list.append", "swap_result_matrix_list.append", "swap_result_ori_pic_list.append", "os.path.join", "os.path.exists", "os.mkdir", "util.add_watermark.watermark_image.apply_frames", "os.path.join", "torch.nn.MSELoss().cuda.detach().cpu().numpy", "swap_model", "videoswap_multispecific._totensor", "cv2.cvtColor", "torch.nn.MSELoss().cuda.detach().cpu", "torch.nn.MSELoss().cuda.detach", "torch.nn.MSELoss().cuda."], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.get", "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.get", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.eval", "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.get", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdir", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.reverse2original.reverse2wholeimage", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdir", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.add_watermark.watermark_image.apply_frames", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdir", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.add_watermark.watermark_image.apply_frames", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.videoswap_multispecific._totensor"], ["", "def", "video_swap", "(", "video_path", ",", "target_id_norm_list", ",", "source_specific_id_nonorm_list", ",", "id_thres", ",", "swap_model", ",", "detect_model", ",", "save_path", ",", "temp_results_dir", "=", "'./temp_results'", ",", "crop_size", "=", "224", ",", "no_simswaplogo", "=", "False", ",", "use_mask", "=", "False", ")", ":", "\n", "    ", "video_forcheck", "=", "VideoFileClip", "(", "video_path", ")", "\n", "if", "video_forcheck", ".", "audio", "is", "None", ":", "\n", "        ", "no_audio", "=", "True", "\n", "", "else", ":", "\n", "        ", "no_audio", "=", "False", "\n", "\n", "", "del", "video_forcheck", "\n", "\n", "if", "not", "no_audio", ":", "\n", "        ", "video_audio_clip", "=", "AudioFileClip", "(", "video_path", ")", "\n", "\n", "", "video", "=", "cv2", ".", "VideoCapture", "(", "video_path", ")", "\n", "logoclass", "=", "watermark_image", "(", "'./simswaplogo/simswaplogo.png'", ")", "\n", "ret", "=", "True", "\n", "frame_index", "=", "0", "\n", "\n", "frame_count", "=", "int", "(", "video", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "\n", "# video_WIDTH = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))", "\n", "\n", "# video_HEIGHT = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))", "\n", "\n", "fps", "=", "video", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "temp_results_dir", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "temp_results_dir", ")", "\n", "\n", "", "spNorm", "=", "SpecificNorm", "(", ")", "\n", "mse", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "use_mask", ":", "\n", "        ", "n_classes", "=", "19", "\n", "net", "=", "BiSeNet", "(", "n_classes", "=", "n_classes", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "save_pth", "=", "os", ".", "path", ".", "join", "(", "'./parsing_model/checkpoint'", ",", "'79999_iter.pth'", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_pth", ")", ")", "\n", "net", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "        ", "net", "=", "None", "\n", "\n", "# while ret:", "\n", "", "for", "frame_index", "in", "tqdm", "(", "range", "(", "frame_count", ")", ")", ":", "\n", "        ", "ret", ",", "frame", "=", "video", ".", "read", "(", ")", "\n", "if", "ret", ":", "\n", "            ", "detect_results", "=", "detect_model", ".", "get", "(", "frame", ",", "crop_size", ")", "\n", "\n", "if", "detect_results", "is", "not", "None", ":", "\n", "# print(frame_index)", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "temp_results_dir", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "temp_results_dir", ")", "\n", "", "frame_align_crop_list", "=", "detect_results", "[", "0", "]", "\n", "frame_mat_list", "=", "detect_results", "[", "1", "]", "\n", "\n", "id_compare_values", "=", "[", "]", "\n", "frame_align_crop_tenor_list", "=", "[", "]", "\n", "for", "frame_align_crop", "in", "frame_align_crop_list", ":", "\n", "\n", "# BGR TO RGB", "\n", "# frame_align_crop_RGB = frame_align_crop[...,::-1]", "\n", "\n", "                    ", "frame_align_crop_tenor", "=", "_totensor", "(", "cv2", ".", "cvtColor", "(", "frame_align_crop", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "[", "None", ",", "...", "]", ".", "cuda", "(", ")", "\n", "\n", "frame_align_crop_tenor_arcnorm", "=", "spNorm", "(", "frame_align_crop_tenor", ")", "\n", "frame_align_crop_tenor_arcnorm_downsample", "=", "F", ".", "interpolate", "(", "frame_align_crop_tenor_arcnorm", ",", "size", "=", "(", "112", ",", "112", ")", ")", "\n", "frame_align_crop_crop_id_nonorm", "=", "swap_model", ".", "netArc", "(", "frame_align_crop_tenor_arcnorm_downsample", ")", "\n", "id_compare_values", ".", "append", "(", "[", "]", ")", "\n", "for", "source_specific_id_nonorm_tmp", "in", "source_specific_id_nonorm_list", ":", "\n", "                        ", "id_compare_values", "[", "-", "1", "]", ".", "append", "(", "mse", "(", "frame_align_crop_crop_id_nonorm", ",", "source_specific_id_nonorm_tmp", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "frame_align_crop_tenor_list", ".", "append", "(", "frame_align_crop_tenor", ")", "\n", "\n", "", "id_compare_values_array", "=", "np", ".", "array", "(", "id_compare_values", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "min_indexs", "=", "np", ".", "argmin", "(", "id_compare_values_array", ",", "axis", "=", "0", ")", "\n", "min_value", "=", "np", ".", "min", "(", "id_compare_values_array", ",", "axis", "=", "0", ")", "\n", "\n", "swap_result_list", "=", "[", "]", "\n", "swap_result_matrix_list", "=", "[", "]", "\n", "swap_result_ori_pic_list", "=", "[", "]", "\n", "for", "tmp_index", ",", "min_index", "in", "enumerate", "(", "min_indexs", ")", ":", "\n", "                    ", "if", "min_value", "[", "tmp_index", "]", "<", "id_thres", ":", "\n", "                        ", "swap_result", "=", "swap_model", "(", "None", ",", "frame_align_crop_tenor_list", "[", "tmp_index", "]", ",", "target_id_norm_list", "[", "min_index", "]", ",", "None", ",", "True", ")", "[", "0", "]", "\n", "swap_result_list", ".", "append", "(", "swap_result", ")", "\n", "swap_result_matrix_list", ".", "append", "(", "frame_mat_list", "[", "tmp_index", "]", ")", "\n", "swap_result_ori_pic_list", ".", "append", "(", "frame_align_crop_tenor_list", "[", "tmp_index", "]", ")", "\n", "", "else", ":", "\n", "                        ", "pass", "\n", "\n", "\n", "\n", "", "", "if", "len", "(", "swap_result_list", ")", "!=", "0", ":", "\n", "\n", "                    ", "reverse2wholeimage", "(", "swap_result_ori_pic_list", ",", "swap_result_list", ",", "swap_result_matrix_list", ",", "crop_size", ",", "frame", ",", "logoclass", ",", "os", ".", "path", ".", "join", "(", "temp_results_dir", ",", "'frame_{:0>7d}.jpg'", ".", "format", "(", "frame_index", ")", ")", ",", "no_simswaplogo", ",", "pasring_model", "=", "net", ",", "use_mask", "=", "use_mask", ",", "norm", "=", "spNorm", ")", "\n", "", "else", ":", "\n", "                    ", "if", "not", "os", ".", "path", ".", "exists", "(", "temp_results_dir", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "temp_results_dir", ")", "\n", "", "frame", "=", "frame", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "not", "no_simswaplogo", ":", "\n", "                        ", "frame", "=", "logoclass", ".", "apply_frames", "(", "frame", ")", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "temp_results_dir", ",", "'frame_{:0>7d}.jpg'", ".", "format", "(", "frame_index", ")", ")", ",", "frame", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "temp_results_dir", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "temp_results_dir", ")", "\n", "", "frame", "=", "frame", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "not", "no_simswaplogo", ":", "\n", "                    ", "frame", "=", "logoclass", ".", "apply_frames", "(", "frame", ")", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "temp_results_dir", ",", "'frame_{:0>7d}.jpg'", ".", "format", "(", "frame_index", ")", ")", ",", "frame", ")", "\n", "", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "video", ".", "release", "(", ")", "\n", "\n", "# image_filename_list = []", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "temp_results_dir", ",", "'*.jpg'", ")", "\n", "image_filenames", "=", "sorted", "(", "glob", ".", "glob", "(", "path", ")", ")", "\n", "\n", "clips", "=", "ImageSequenceClip", "(", "image_filenames", ",", "fps", "=", "fps", ")", "\n", "\n", "if", "not", "no_audio", ":", "\n", "        ", "clips", "=", "clips", ".", "set_audio", "(", "video_audio_clip", ")", "\n", "\n", "\n", "", "clips", ".", "write_videofile", "(", "save_path", ",", "audio_codec", "=", "'aac'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.json_config.readConfig": [[4, 11], ["open", "cf.read", "json.loads", "isinstance", "json.loads"], "function", ["None"], ["def", "readConfig", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "cf", ":", "\n", "        ", "nodelocaltionstr", "=", "cf", ".", "read", "(", ")", "\n", "nodelocaltioninf", "=", "json", ".", "loads", "(", "nodelocaltionstr", ")", "\n", "if", "isinstance", "(", "nodelocaltioninf", ",", "str", ")", ":", "\n", "            ", "nodelocaltioninf", "=", "json", ".", "loads", "(", "nodelocaltioninf", ")", "\n", "", "", "return", "nodelocaltioninf", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.json_config.writeConfig": [[12, 16], ["open", "json.dumps", "cf.writelines"], "function", ["None"], ["", "def", "writeConfig", "(", "path", ",", "info", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ")", "as", "cf", ":", "\n", "        ", "configjson", "=", "json", ".", "dumps", "(", "info", ",", "indent", "=", "4", ")", "\n", "cf", ".", "writelines", "(", "configjson", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.Colorize.__init__": [[86, 89], ["util.labelcolormap", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.labelcolormap"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "35", ")", ":", "\n", "        ", "self", ".", "cmap", "=", "labelcolormap", "(", "n", ")", "\n", "self", ".", "cmap", "=", "torch", ".", "from_numpy", "(", "self", ".", "cmap", "[", ":", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.Colorize.__call__": [[90, 101], ["gray_image.size", "torch.ByteTensor().fill_", "range", "len", "torch.ByteTensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "gray_image", ")", ":", "\n", "        ", "size", "=", "gray_image", ".", "size", "(", ")", "\n", "color_image", "=", "torch", ".", "ByteTensor", "(", "3", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "for", "label", "in", "range", "(", "0", ",", "len", "(", "self", ".", "cmap", ")", ")", ":", "\n", "            ", "mask", "=", "(", "label", "==", "gray_image", "[", "0", "]", ")", ".", "cpu", "(", ")", "\n", "color_image", "[", "0", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "0", "]", "\n", "color_image", "[", "1", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "1", "]", "\n", "color_image", "[", "2", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "2", "]", "\n", "\n", "", "return", "color_image", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.tensor2im": [[10, 25], ["isinstance", "image_tensor.cpu().float().numpy", "numpy.clip", "np.clip.astype", "range", "len", "np.clip.append", "image_tensor.cpu().float", "numpy.transpose", "util.tensor2im", "image_tensor.cpu", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.tensor2im"], ["def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "if", "isinstance", "(", "image_tensor", ",", "list", ")", ":", "\n", "        ", "image_numpy", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "image_tensor", ")", ")", ":", "\n", "            ", "image_numpy", ".", "append", "(", "tensor2im", "(", "image_tensor", "[", "i", "]", ",", "imtype", ",", "normalize", ")", ")", "\n", "", "return", "image_numpy", "\n", "", "image_numpy", "=", "image_tensor", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "normalize", ":", "\n", "        ", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "", "else", ":", "\n", "        ", "image_numpy", "=", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "255.0", "\n", "", "image_numpy", "=", "np", ".", "clip", "(", "image_numpy", ",", "0", ",", "255", ")", "\n", "if", "image_numpy", ".", "shape", "[", "2", "]", "==", "1", "or", "image_numpy", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "        ", "image_numpy", "=", "image_numpy", "[", ":", ",", ":", ",", "0", "]", "\n", "", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.tensor2label": [[27, 36], ["label_tensor.cpu().float.cpu().float", "numpy.transpose", "np.transpose.astype", "util.tensor2im", "util.Colorize", "label_tensor.cpu().float.numpy", "label_tensor.cpu().float.cpu", "label_tensor.cpu().float.size", "label_tensor.cpu().float.max"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.tensor2im"], ["", "def", "tensor2label", "(", "label_tensor", ",", "n_label", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "if", "n_label", "==", "0", ":", "\n", "        ", "return", "tensor2im", "(", "label_tensor", ",", "imtype", ")", "\n", "", "label_tensor", "=", "label_tensor", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "if", "label_tensor", ".", "size", "(", ")", "[", "0", "]", ">", "1", ":", "\n", "        ", "label_tensor", "=", "label_tensor", ".", "max", "(", "0", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "", "label_tensor", "=", "Colorize", "(", "n_label", ")", "(", "label_tensor", ")", "\n", "label_numpy", "=", "np", ".", "transpose", "(", "label_tensor", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "return", "label_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.save_image": [[37, 40], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.fsModel.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdirs": [[41, 47], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdir", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdir"], ["", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdir": [[48, 51], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.uint82bin": [[57, 60], ["str", "range"], "function", ["None"], ["", "", "def", "uint82bin", "(", "n", ",", "count", "=", "8", ")", ":", "\n", "    ", "\"\"\"returns the binary of integer n, count refers to amount of bits\"\"\"", "\n", "return", "''", ".", "join", "(", "[", "str", "(", "(", "n", ">>", "y", ")", "&", "1", ")", "for", "y", "in", "range", "(", "count", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.labelcolormap": [[61, 84], ["numpy.array", "numpy.zeros", "range", "range", "util.uint82bin", "numpy.uint8", "numpy.uint8", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.uint82bin"], ["", "def", "labelcolormap", "(", "N", ")", ":", "\n", "    ", "if", "N", "==", "35", ":", "# cityscape", "\n", "        ", "cmap", "=", "np", ".", "array", "(", "[", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "111", ",", "74", ",", "0", ")", ",", "(", "81", ",", "0", ",", "81", ")", ",", "\n", "(", "128", ",", "64", ",", "128", ")", ",", "(", "244", ",", "35", ",", "232", ")", ",", "(", "250", ",", "170", ",", "160", ")", ",", "(", "230", ",", "150", ",", "140", ")", ",", "(", "70", ",", "70", ",", "70", ")", ",", "(", "102", ",", "102", ",", "156", ")", ",", "(", "190", ",", "153", ",", "153", ")", ",", "\n", "(", "180", ",", "165", ",", "180", ")", ",", "(", "150", ",", "100", ",", "100", ")", ",", "(", "150", ",", "120", ",", "90", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "250", ",", "170", ",", "30", ")", ",", "(", "220", ",", "220", ",", "0", ")", ",", "\n", "(", "107", ",", "142", ",", "35", ")", ",", "(", "152", ",", "251", ",", "152", ")", ",", "(", "70", ",", "130", ",", "180", ")", ",", "(", "220", ",", "20", ",", "60", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "142", ")", ",", "(", "0", ",", "0", ",", "70", ")", ",", "\n", "(", "0", ",", "60", ",", "100", ")", ",", "(", "0", ",", "0", ",", "90", ")", ",", "(", "0", ",", "0", ",", "110", ")", ",", "(", "0", ",", "80", ",", "100", ")", ",", "(", "0", ",", "0", ",", "230", ")", ",", "(", "119", ",", "11", ",", "32", ")", ",", "(", "0", ",", "0", ",", "142", ")", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "r", ",", "g", ",", "b", "=", "0", ",", "0", ",", "0", "\n", "id", "=", "i", "\n", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "                ", "str_id", "=", "uint82bin", "(", "id", ")", "\n", "r", "=", "r", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "1", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "g", "=", "g", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "2", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "b", "=", "b", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "3", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "id", "=", "id", ">>", "3", "\n", "", "cmap", "[", "i", ",", "0", "]", "=", "r", "\n", "cmap", "[", "i", ",", "1", "]", "=", "g", "\n", "cmap", "[", "i", ",", "2", "]", "=", "b", "\n", "", "", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks.InstanceNorm.__init__": [[11, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"\n            @notice: avoid in-place ops.\n            https://discuss.pytorch.org/t/encounter-the-runtimeerror-one-of-the-variables-needed-for-gradient-computation-has-been-modified-by-an-inplace-operation/836/3\n        \"\"\"", "\n", "super", "(", "InstanceNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks.InstanceNorm.forward": [[19, 24], ["torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "-", "torch", ".", "mean", "(", "x", ",", "(", "2", ",", "3", ")", ",", "True", ")", "\n", "tmp", "=", "torch", ".", "mul", "(", "x", ",", "x", ")", "# or x ** 2", "\n", "tmp", "=", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "tmp", ",", "(", "2", ",", "3", ")", ",", "True", ")", "+", "self", ".", "epsilon", ")", "\n", "return", "x", "*", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks.ApplyStyle.__init__": [[29, 32], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "latent_size", ",", "channels", ")", ":", "\n", "        ", "super", "(", "ApplyStyle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "latent_size", ",", "channels", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks.ApplyStyle.forward": [[33, 40], ["fs_networks.ApplyStyle.linear", "style.view.view.view", "x.size"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.linear"], ["", "def", "forward", "(", "self", ",", "x", ",", "latent", ")", ":", "\n", "        ", "style", "=", "self", ".", "linear", "(", "latent", ")", "# style => [batch_size, n_channels*2]", "\n", "shape", "=", "[", "-", "1", ",", "2", ",", "x", ".", "size", "(", "1", ")", ",", "1", ",", "1", "]", "\n", "style", "=", "style", ".", "view", "(", "shape", ")", "# [batch_size, 2, n_channels, ...]", "\n", "#x = x * (style[:, 0] + 1.) + style[:, 1]", "\n", "x", "=", "x", "*", "(", "style", "[", ":", ",", "0", "]", "*", "1", "+", "1.", ")", "+", "style", "[", ":", ",", "1", "]", "*", "1", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks.ResnetBlock_Adain.__init__": [[42, 73], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "fs_networks.ApplyStyle", "torch.Sequential", "torch.Sequential", "fs_networks.ApplyStyle", "torch.Conv2d", "torch.Conv2d", "fs_networks.InstanceNorm", "torch.Conv2d", "torch.Conv2d", "fs_networks.InstanceNorm", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "latent_size", ",", "padding_type", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "super", "(", "ResnetBlock_Adain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "p", "=", "0", "\n", "conv1", "=", "[", "]", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv1", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv1", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv1", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "InstanceNorm", "(", ")", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "*", "conv1", ")", "\n", "self", ".", "style1", "=", "ApplyStyle", "(", "latent_size", ",", "dim", ")", "\n", "self", ".", "act1", "=", "activation", "\n", "\n", "p", "=", "0", "\n", "conv2", "=", "[", "]", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv2", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv2", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv2", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "InstanceNorm", "(", ")", "]", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "*", "conv2", ")", "\n", "self", ".", "style2", "=", "ApplyStyle", "(", "latent_size", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks.ResnetBlock_Adain.forward": [[75, 83], ["fs_networks.ResnetBlock_Adain.conv1", "fs_networks.ResnetBlock_Adain.style1", "fs_networks.ResnetBlock_Adain.act1", "fs_networks.ResnetBlock_Adain.conv2", "fs_networks.ResnetBlock_Adain.style2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "dlatents_in_slice", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv1", "(", "x", ")", "\n", "y", "=", "self", ".", "style1", "(", "y", ",", "dlatents_in_slice", ")", "\n", "y", "=", "self", ".", "act1", "(", "y", ")", "\n", "y", "=", "self", ".", "conv2", "(", "y", ")", "\n", "y", "=", "self", ".", "style2", "(", "y", ",", "dlatents_in_slice", ")", "\n", "out", "=", "x", "+", "y", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks.Generator_Adain_Upsample.__init__": [[87, 138], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "fs_networks.ResnetBlock_Adain", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "latent_size", ",", "n_blocks", "=", "6", ",", "deep", "=", "False", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "Generator_Adain_Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "deep", "=", "deep", "\n", "\n", "self", ".", "first_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "64", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "64", ")", ",", "activation", ")", "\n", "### downsample", "\n", "self", ".", "down1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "128", ")", ",", "activation", ")", "\n", "self", ".", "down2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "256", ")", ",", "activation", ")", "\n", "self", ".", "down3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "activation", ")", "\n", "if", "self", ".", "deep", ":", "\n", "            ", "self", ".", "down4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "activation", ")", "\n", "\n", "### resnet blocks", "\n", "", "BN", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "BN", "+=", "[", "\n", "ResnetBlock_Adain", "(", "512", ",", "latent_size", "=", "latent_size", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ")", "]", "\n", "", "self", ".", "BottleNeck", "=", "nn", ".", "Sequential", "(", "*", "BN", ")", "\n", "\n", "if", "self", ".", "deep", ":", "\n", "            ", "self", ".", "up4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "activation", "\n", ")", "\n", "", "self", ".", "up3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "activation", "\n", ")", "\n", "self", ".", "up2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "activation", "\n", ")", "\n", "self", ".", "up1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "activation", "\n", ")", "\n", "self", ".", "last_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "64", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks.Generator_Adain_Upsample.forward": [[139, 163], ["fs_networks.Generator_Adain_Upsample.first_layer", "fs_networks.Generator_Adain_Upsample.down1", "fs_networks.Generator_Adain_Upsample.down2", "range", "fs_networks.Generator_Adain_Upsample.up3", "fs_networks.Generator_Adain_Upsample.up2", "fs_networks.Generator_Adain_Upsample.up1", "fs_networks.Generator_Adain_Upsample.last_layer", "fs_networks.Generator_Adain_Upsample.down3", "fs_networks.Generator_Adain_Upsample.down4", "fs_networks.Generator_Adain_Upsample.down3", "len", "fs_networks.Generator_Adain_Upsample.up4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "dlatents", ")", ":", "\n", "        ", "x", "=", "input", "# 3*224*224", "\n", "\n", "skip1", "=", "self", ".", "first_layer", "(", "x", ")", "\n", "skip2", "=", "self", ".", "down1", "(", "skip1", ")", "\n", "skip3", "=", "self", ".", "down2", "(", "skip2", ")", "\n", "if", "self", ".", "deep", ":", "\n", "            ", "skip4", "=", "self", ".", "down3", "(", "skip3", ")", "\n", "x", "=", "self", ".", "down4", "(", "skip4", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "down3", "(", "skip3", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "BottleNeck", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "BottleNeck", "[", "i", "]", "(", "x", ",", "dlatents", ")", "\n", "\n", "", "if", "self", ".", "deep", ":", "\n", "            ", "x", "=", "self", ".", "up4", "(", "x", ")", "\n", "", "x", "=", "self", ".", "up3", "(", "x", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ")", "\n", "x", "=", "self", ".", "up1", "(", "x", ")", "\n", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "x", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks.Discriminator.__init__": [[165, 198], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "self", ".", "down1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "64", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "self", ".", "down2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "128", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "self", ".", "down3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "256", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "self", ".", "down4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks.Discriminator.forward": [[200, 216], ["fs_networks.Discriminator.down1", "out.append", "fs_networks.Discriminator.down2", "out.append", "fs_networks.Discriminator.down3", "out.append", "fs_networks.Discriminator.down4", "out.append", "fs_networks.Discriminator.conv1", "out.append", "fs_networks.Discriminator.conv2", "out.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "x", "=", "self", ".", "down1", "(", "input", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "down2", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "down3", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "down4", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projectionhead.ProjectionHead.__init__": [[4, 11], ["torch.Module.__init__", "torch.Sequential", "torch.Linear", "torch.ReLU", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "proj_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "ProjectionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "proj_dim", ",", "proj_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "proj_dim", ",", "proj_dim", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projectionhead.ProjectionHead.forward": [[13, 15], ["projectionhead.ProjectionHead.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "proj", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.SEBlock.__init__": [[30, 38], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SEBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.SEBlock.forward": [[40, 45], ["x.size", "models.SEBlock.avg_pool().view", "models.SEBlock.fc().view", "models.SEBlock.avg_pool", "models.SEBlock.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.IRBlock.__init__": [[50, 63], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "models.SEBlock"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.conv3x3", "home.repos.pwc.inspect_result.neuralchen_SimSwap.parsing_model.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "use_se", "=", "True", ")", ":", "\n", "        ", "super", "(", "IRBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "inplanes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "use_se", "=", "use_se", "\n", "if", "self", ".", "use_se", ":", "\n", "            ", "self", ".", "se", "=", "SEBlock", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.IRBlock.forward": [[64, 83], ["models.IRBlock.bn0", "models.IRBlock.conv1", "models.IRBlock.bn1", "models.IRBlock.prelu", "models.IRBlock.conv2", "models.IRBlock.bn2", "models.IRBlock.prelu", "models.IRBlock.se", "models.IRBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "bn0", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "prelu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "if", "self", ".", "use_se", ":", "\n", "            ", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "prelu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.ResNet.__init__": [[87, 113], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "models.ResNet._make_layer", "models.ResNet._make_layer", "models.ResNet._make_layer", "models.ResNet._make_layer", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "models.ResNet.modules", "isinstance", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "isinstance", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.ResNet._make_layer", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.ResNet._make_layer", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.ResNet._make_layer", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "use_se", "=", "True", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "use_se", "=", "use_se", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "7", "*", "7", ",", "512", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.ResNet._make_layer": [[114, 130], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "use_se", "=", "self", ".", "use_se", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "use_se", "=", "self", ".", "use_se", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.ResNet.forward": [[131, 149], ["models.ResNet.conv1", "models.ResNet.bn1", "models.ResNet.prelu", "models.ResNet.maxpool", "models.ResNet.layer1", "models.ResNet.layer2", "models.ResNet.layer3", "models.ResNet.layer4", "models.ResNet.bn2", "models.ResNet.dropout", "models.ResNet.view", "models.ResNet.fc", "models.ResNet.bn3", "models.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.ArcMarginModel.__init__": [[152, 166], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "math.cos", "math.sin", "math.cos", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "math.sin"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "ArcMarginModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_classes", ",", "args", ".", "emb_size", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "\n", "self", ".", "easy_margin", "=", "args", ".", "easy_margin", "\n", "self", ".", "m", "=", "args", ".", "margin_m", "\n", "self", ".", "s", "=", "args", ".", "margin_s", "\n", "\n", "self", ".", "cos_m", "=", "math", ".", "cos", "(", "self", ".", "m", ")", "\n", "self", ".", "sin_m", "=", "math", ".", "sin", "(", "self", ".", "m", ")", "\n", "self", ".", "th", "=", "math", ".", "cos", "(", "math", ".", "pi", "-", "self", ".", "m", ")", "\n", "self", ".", "mm", "=", "math", ".", "sin", "(", "math", ".", "pi", "-", "self", ".", "m", ")", "*", "self", ".", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.ArcMarginModel.forward": [[167, 182], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear", "torch.linear", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.linear.size", "label.view().long", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "label.view"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.linear", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.linear"], ["", "def", "forward", "(", "self", ",", "input", ",", "label", ")", ":", "\n", "        ", "x", "=", "F", ".", "normalize", "(", "input", ")", "\n", "W", "=", "F", ".", "normalize", "(", "self", ".", "weight", ")", "\n", "cosine", "=", "F", ".", "linear", "(", "x", ",", "W", ")", "\n", "sine", "=", "torch", ".", "sqrt", "(", "1.0", "-", "torch", ".", "pow", "(", "cosine", ",", "2", ")", ")", "\n", "phi", "=", "cosine", "*", "self", ".", "cos_m", "-", "sine", "*", "self", ".", "sin_m", "# cos(theta + m)", "\n", "if", "self", ".", "easy_margin", ":", "\n", "            ", "phi", "=", "torch", ".", "where", "(", "cosine", ">", "0", ",", "phi", ",", "cosine", ")", "\n", "", "else", ":", "\n", "            ", "phi", "=", "torch", ".", "where", "(", "cosine", ">", "self", ".", "th", ",", "phi", ",", "cosine", "-", "self", ".", "mm", ")", "\n", "", "one_hot", "=", "torch", ".", "zeros", "(", "cosine", ".", "size", "(", ")", ",", "device", "=", "device", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "output", "=", "(", "one_hot", "*", "phi", ")", "+", "(", "(", "1.0", "-", "one_hot", ")", "*", "cosine", ")", "\n", "output", "*=", "self", ".", "s", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.create_model": [[9, 26], ["torch.nn.DataParallel.initialize", "fsModel", "UIModel", "print", "len", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.name"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.fsModel.name"], ["def", "create_model", "(", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "model", "==", "'pix2pixHD'", ":", "\n", "#from .pix2pixHD_model import Pix2PixHDModel, InferenceModel", "\n", "        ", "from", ".", "fs_model", "import", "fsModel", "\n", "model", "=", "fsModel", "(", ")", "\n", "", "else", ":", "\n", "        ", "from", ".", "ui_model", "import", "UIModel", "\n", "model", "=", "UIModel", "(", ")", "\n", "\n", "", "model", ".", "initialize", "(", "opt", ")", "\n", "if", "opt", ".", "verbose", ":", "\n", "        ", "print", "(", "\"model [%s] was created\"", "%", "(", "model", ".", "name", "(", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "len", "(", "opt", ".", "gpu_ids", ")", "and", "not", "opt", ".", "fp16", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.GANLoss.__init__": [[111, 132], ["torch.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gan_mode", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_tensor", "=", "None", "\n", "self", ".", "fake_label_tensor", "=", "None", "\n", "self", ".", "zero_tensor", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "self", ".", "opt", "=", "opt", "\n", "if", "gan_mode", "==", "'ls'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'original'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'w'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unexpected gan_mode {}'", ".", "format", "(", "gan_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.GANLoss.get_target_tensor": [[133, 144], ["networks.GANLoss.real_label_tensor.expand_as", "networks.GANLoss.fake_label_tensor.expand_as", "networks.GANLoss.Tensor().fill_", "networks.GANLoss.real_label_tensor.requires_grad_", "networks.GANLoss.Tensor().fill_", "networks.GANLoss.fake_label_tensor.requires_grad_", "networks.GANLoss.Tensor", "networks.GANLoss.Tensor"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "if", "self", ".", "real_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "real_label_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "real_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "fake_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "fake_label_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "fake_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.GANLoss.get_zero_tensor": [[145, 150], ["networks.GANLoss.zero_tensor.expand_as", "networks.GANLoss.Tensor().fill_", "networks.GANLoss.zero_tensor.requires_grad_", "networks.GANLoss.Tensor"], "methods", ["None"], ["", "", "def", "get_zero_tensor", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "zero_tensor", "is", "None", ":", "\n", "            ", "self", ".", "zero_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "self", ".", "zero_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "zero_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.GANLoss.loss": [[151, 177], ["networks.GANLoss.get_target_tensor", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "networks.GANLoss.get_target_tensor", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "input.mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "input.mean", "networks.GANLoss.get_zero_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "networks.GANLoss.get_zero_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.GANLoss.get_zero_tensor", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.GANLoss.get_zero_tensor"], ["", "def", "loss", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "gan_mode", "==", "'original'", ":", "# cross entropy loss", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "input", ",", "target_tensor", ")", "\n", "return", "loss", "\n", "", "elif", "self", ".", "gan_mode", "==", "'ls'", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "F", ".", "mse_loss", "(", "input", ",", "target_tensor", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "if", "for_discriminator", ":", "\n", "                ", "if", "target_is_real", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "else", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "-", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "", "else", ":", "\n", "                ", "assert", "target_is_real", ",", "\"The generator's hinge loss must be aiming for real\"", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "input", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "# wgan", "\n", "            ", "if", "target_is_real", ":", "\n", "                ", "return", "-", "input", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "input", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.GANLoss.__call__": [[178, 193], ["isinstance", "networks.GANLoss.loss", "isinstance", "networks.GANLoss.loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "networks.GANLoss.size", "networks.GANLoss.view", "len", "networks.GANLoss.size"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.GANLoss.loss", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.GANLoss.loss"], ["", "", "", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "# computing loss is a bit complicated because |input| may not be", "\n", "# a tensor, but list of tensors in case of multiscale discriminator", "\n", "        ", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "pred_i", "in", "input", ":", "\n", "                ", "if", "isinstance", "(", "pred_i", ",", "list", ")", ":", "\n", "                    ", "pred_i", "=", "pred_i", "[", "-", "1", "]", "\n", "", "loss_tensor", "=", "self", ".", "loss", "(", "pred_i", ",", "target_is_real", ",", "for_discriminator", ")", "\n", "bs", "=", "1", "if", "len", "(", "loss_tensor", ".", "size", "(", ")", ")", "==", "0", "else", "loss_tensor", ".", "size", "(", "0", ")", "\n", "new_loss", "=", "torch", ".", "mean", "(", "loss_tensor", ".", "view", "(", "bs", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "loss", "+=", "new_loss", "\n", "", "return", "loss", "/", "len", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "loss", "(", "input", ",", "target_is_real", ",", "for_discriminator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.VGGLoss.__init__": [[195, 200], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "networks.Vgg19"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.VGGLoss.forward": [[201, 207], ["range", "networks.VGGLoss.vgg", "networks.VGGLoss.vgg", "len", "networks.VGGLoss.criterion", "y_vgg[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "i", "]", ",", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.LocalEnhancer.__init__": [[212, 248], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "networks.GlobalGenerator", "range", "setattr", "setattr", "range", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.ResnetBlock", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "\n", "n_local_enhancers", "=", "1", ",", "n_blocks_local", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "super", "(", "LocalEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_local_enhancers", "=", "n_local_enhancers", "\n", "\n", "###### global generator model #####           ", "\n", "ngf_global", "=", "ngf", "*", "(", "2", "**", "n_local_enhancers", ")", "\n", "model_global", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf_global", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", ".", "model", "\n", "model_global", "=", "[", "model_global", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "model_global", ")", "-", "3", ")", "]", "# get rid of final convolution layers        ", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model_global", ")", "\n", "\n", "###### local enhancer layers #####", "\n", "for", "n", "in", "range", "(", "1", ",", "n_local_enhancers", "+", "1", ")", ":", "\n", "### downsample            ", "\n", "            ", "ngf_global", "=", "ngf", "*", "(", "2", "**", "(", "n_local_enhancers", "-", "n", ")", ")", "\n", "model_downsample", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf_global", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf_global", ",", "ngf_global", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### residual blocks", "\n", "model_upsample", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks_local", ")", ":", "\n", "                ", "model_upsample", "+=", "[", "ResnetBlock", "(", "ngf_global", "*", "2", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample", "\n", "", "model_upsample", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf_global", "*", "2", ",", "ngf_global", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf_global", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### final convolution", "\n", "if", "n", "==", "n_local_enhancers", ":", "\n", "                ", "model_upsample", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_1'", ",", "nn", ".", "Sequential", "(", "*", "model_downsample", ")", ")", "\n", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", "+", "'_2'", ",", "nn", ".", "Sequential", "(", "*", "model_upsample", ")", ")", "\n", "\n", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.LocalEnhancer.forward": [[249, 264], ["range", "networks.LocalEnhancer.model", "range", "input_downsampled.append", "getattr", "getattr", "getattr.", "networks.LocalEnhancer.downsample", "getattr.", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "### create input pyramid", "\n", "        ", "input_downsampled", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local_enhancers", ")", ":", "\n", "            ", "input_downsampled", ".", "append", "(", "self", ".", "downsample", "(", "input_downsampled", "[", "-", "1", "]", ")", ")", "\n", "\n", "### output at coarest level", "\n", "", "output_prev", "=", "self", ".", "model", "(", "input_downsampled", "[", "-", "1", "]", ")", "\n", "### build up one layer at a time", "\n", "for", "n_local_enhancers", "in", "range", "(", "1", ",", "self", ".", "n_local_enhancers", "+", "1", ")", ":", "\n", "            ", "model_downsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_1'", ")", "\n", "model_upsample", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n_local_enhancers", ")", "+", "'_2'", ")", "\n", "input_i", "=", "input_downsampled", "[", "self", ".", "n_local_enhancers", "-", "n_local_enhancers", "]", "\n", "output_prev", "=", "model_upsample", "(", "model_downsample", "(", "input_i", ")", "+", "output_prev", ")", "\n", "", "return", "output_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.GlobalGenerator.__init__": [[266, 291], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "3", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "GlobalGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "\n", "### resnet blocks", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.GlobalGenerator.forward": [[292, 294], ["networks.GlobalGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.ResnetBlock.__init__": [[297, 300], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.ResnetBlock.build_conv_block": [[301, 332], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ",", "use_dropout", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "activation", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.ResnetBlock.forward": [[333, 336], ["networks.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.InstanceNorm.__init__": [[338, 345], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"\n            @notice: avoid in-place ops.\n            https://discuss.pytorch.org/t/encounter-the-runtimeerror-one-of-the-variables-needed-for-gradient-computation-has-been-modified-by-an-inplace-operation/836/3\n        \"\"\"", "\n", "super", "(", "InstanceNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.InstanceNorm.forward": [[346, 351], ["torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "-", "torch", ".", "mean", "(", "x", ",", "(", "2", ",", "3", ")", ",", "True", ")", "\n", "tmp", "=", "torch", ".", "mul", "(", "x", ",", "x", ")", "# or x ** 2", "\n", "tmp", "=", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "tmp", ",", "(", "2", ",", "3", ")", ",", "True", ")", "+", "self", ".", "epsilon", ")", "\n", "return", "x", "*", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.SpecificNorm.__init__": [[353, 366], ["torch.Module.__init__", "numpy.array", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "networks.SpecificNorm.mean.view", "numpy.array", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "networks.SpecificNorm.std.view", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"\n            @notice: avoid in-place ops.\n            https://discuss.pytorch.org/t/encounter-the-runtimeerror-one-of-the-variables-needed-for-gradient-computation-has-been-modified-by-an-inplace-operation/836/3\n        \"\"\"", "\n", "super", "(", "SpecificNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "\n", "self", ".", "mean", "=", "torch", ".", "from_numpy", "(", "self", ".", "mean", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "mean", "=", "self", ".", "mean", ".", "view", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "std", "=", "torch", ".", "from_numpy", "(", "self", ".", "std", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "std", "=", "self", ".", "std", ".", "view", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.SpecificNorm.forward": [[367, 374], ["networks.SpecificNorm.mean.expand", "networks.SpecificNorm.std.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "self", ".", "mean", ".", "expand", "(", "[", "1", ",", "3", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ")", "\n", "std", "=", "self", ".", "std", ".", "expand", "(", "[", "1", ",", "3", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "x", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.ApplyStyle.__init__": [[379, 382], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "latent_size", ",", "channels", ")", ":", "\n", "        ", "super", "(", "ApplyStyle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "latent_size", ",", "channels", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.ApplyStyle.forward": [[383, 389], ["networks.ApplyStyle.linear", "style.view.view.view", "x.size"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.linear"], ["", "def", "forward", "(", "self", ",", "x", ",", "latent", ")", ":", "\n", "        ", "style", "=", "self", ".", "linear", "(", "latent", ")", "# style => [batch_size, n_channels*2]", "\n", "shape", "=", "[", "-", "1", ",", "2", ",", "x", ".", "size", "(", "1", ")", ",", "1", ",", "1", "]", "\n", "style", "=", "style", ".", "view", "(", "shape", ")", "# [batch_size, 2, n_channels, ...]", "\n", "x", "=", "x", "*", "(", "style", "[", ":", ",", "0", "]", "+", "1.", ")", "+", "style", "[", ":", ",", "1", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.ResnetBlock_Adain.__init__": [[391, 422], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.ApplyStyle", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.ApplyStyle", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.InstanceNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.InstanceNorm", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "latent_size", ",", "padding_type", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "super", "(", "ResnetBlock_Adain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "p", "=", "0", "\n", "conv1", "=", "[", "]", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv1", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv1", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv1", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "InstanceNorm", "(", ")", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "*", "conv1", ")", "\n", "self", ".", "style1", "=", "ApplyStyle", "(", "latent_size", ",", "dim", ")", "\n", "self", ".", "act1", "=", "activation", "\n", "\n", "p", "=", "0", "\n", "conv2", "=", "[", "]", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv2", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv2", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv2", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "InstanceNorm", "(", ")", "]", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "*", "conv2", ")", "\n", "self", ".", "style2", "=", "ApplyStyle", "(", "latent_size", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.ResnetBlock_Adain.forward": [[424, 432], ["networks.ResnetBlock_Adain.conv1", "networks.ResnetBlock_Adain.style1", "networks.ResnetBlock_Adain.act1", "networks.ResnetBlock_Adain.conv2", "networks.ResnetBlock_Adain.style2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "dlatents_in_slice", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv1", "(", "x", ")", "\n", "y", "=", "self", ".", "style1", "(", "y", ",", "dlatents_in_slice", ")", "\n", "y", "=", "self", ".", "act1", "(", "y", ")", "\n", "y", "=", "self", ".", "conv2", "(", "y", ")", "\n", "y", "=", "self", ".", "style2", "(", "y", ",", "dlatents_in_slice", ")", "\n", "out", "=", "x", "+", "y", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.UpBlock_Adain.__init__": [[434, 451], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.ApplyStyle", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.InstanceNorm", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "latent_size", ",", "padding_type", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "super", "(", "UpBlock_Adain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "p", "=", "0", "\n", "conv1", "=", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "]", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv1", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv1", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv1", "+=", "[", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "InstanceNorm", "(", ")", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "*", "conv1", ")", "\n", "self", ".", "style1", "=", "ApplyStyle", "(", "latent_size", ",", "dim_out", ")", "\n", "self", ".", "act1", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.UpBlock_Adain.forward": [[453, 458], ["networks.UpBlock_Adain.conv1", "networks.UpBlock_Adain.style1", "networks.UpBlock_Adain.act1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "dlatents_in_slice", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv1", "(", "x", ")", "\n", "y", "=", "self", ".", "style1", "(", "y", ",", "dlatents_in_slice", ")", "\n", "y", "=", "self", ".", "act1", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.Encoder.__init__": [[460, 480], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ",", "n_downsampling", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "### upsample         ", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.Encoder.forward": [[481, 495], ["networks.Encoder.model", "networks.Encoder.clone", "numpy.unique", "inst.cpu().numpy().astype", "range", "range", "inst.cpu().numpy", "input.size", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "inst.cpu", "int", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "inst", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "# instance-wise average pooling", "\n", "outputs_mean", "=", "outputs", ".", "clone", "(", ")", "\n", "inst_list", "=", "np", ".", "unique", "(", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ")", "\n", "for", "i", "in", "inst_list", ":", "\n", "            ", "for", "b", "in", "range", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "indices", "=", "(", "inst", "[", "b", ":", "b", "+", "1", "]", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "# n x 4            ", "\n", "for", "j", "in", "range", "(", "self", ".", "output_nc", ")", ":", "\n", "                    ", "output_ins", "=", "outputs", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "\n", "mean_feat", "=", "torch", ".", "mean", "(", "output_ins", ")", ".", "expand_as", "(", "output_ins", ")", "\n", "outputs_mean", "[", "indices", "[", ":", ",", "0", "]", "+", "b", ",", "indices", "[", ":", ",", "1", "]", "+", "j", ",", "indices", "[", ":", ",", "2", "]", ",", "indices", "[", ":", ",", "3", "]", "]", "=", "mean_feat", "\n", "", "", "", "return", "outputs_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.Generator_Adain.__init__": [[498, 539], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.SpecificNorm", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks.ResnetBlock_Adain", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "latent_size", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "2", ",", "n_blocks", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "Generator_Adain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "Enc", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "Enc", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "", "self", ".", "Encoder", "=", "nn", ".", "Sequential", "(", "*", "Enc", ")", "\n", "\n", "### resnet blocks", "\n", "BN", "=", "[", "]", "\n", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "BN", "+=", "[", "ResnetBlock_Adain", "(", "ngf", "*", "mult", ",", "latent_size", "=", "latent_size", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ")", "]", "\n", "", "self", ".", "BottleNeck", "=", "nn", ".", "Sequential", "(", "*", "BN", ")", "\n", "'''self.ResBlockAdain1 = ResnetBlock_Adain(ngf * mult, latent_size=latent_size, padding_type=padding_type,\n                                                activation=activation)\n        self.ResBlockAdain2 = ResnetBlock_Adain(ngf * mult, latent_size=latent_size, padding_type=padding_type,\n                                                activation=activation)\n        self.ResBlockAdain3 = ResnetBlock_Adain(ngf * mult, latent_size=latent_size, padding_type=padding_type,\n                                                activation=activation)\n        self.ResBlockAdain4 = ResnetBlock_Adain(ngf * mult, latent_size=latent_size, padding_type=padding_type,\n                                                activation=activation)'''", "\n", "\n", "### upsample", "\n", "Dec", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "Dec", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "Dec", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "Decoder", "=", "nn", ".", "Sequential", "(", "*", "Dec", ")", "\n", "#self.model = nn.Sequential(*model)", "\n", "self", ".", "spNorm", "=", "SpecificNorm", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.Generator_Adain.forward": [[540, 558], ["networks.Generator_Adain.Encoder", "range", "networks.Generator_Adain.Decoder", "networks.Generator_Adain.spNorm", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "dlatents", ")", ":", "\n", "        ", "x", "=", "input", "\n", "x", "=", "self", ".", "Encoder", "(", "x", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "BottleNeck", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "BottleNeck", "[", "i", "]", "(", "x", ",", "dlatents", ")", "\n", "", "'''x = self.ResBlockAdain1(x, dlatents)\n        x = self.ResBlockAdain2(x, dlatents)\n        x = self.ResBlockAdain3(x, dlatents)\n        x = self.ResBlockAdain4(x, dlatents)'''", "\n", "\n", "x", "=", "self", ".", "Decoder", "(", "x", ")", "\n", "\n", "x", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "x", "=", "self", ".", "spNorm", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.Generator_Adain_Mask.__init__": [[560, 596], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.SpecificNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks.ResnetBlock_Adain", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "latent_size", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "2", ",", "n_blocks", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "Generator_Adain_Mask", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "Enc", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "Enc", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "", "self", ".", "Encoder", "=", "nn", ".", "Sequential", "(", "*", "Enc", ")", "\n", "\n", "### resnet blocks", "\n", "BN", "=", "[", "]", "\n", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "BN", "+=", "[", "ResnetBlock_Adain", "(", "ngf", "*", "mult", ",", "latent_size", "=", "latent_size", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ")", "]", "\n", "", "self", ".", "BottleNeck", "=", "nn", ".", "Sequential", "(", "*", "BN", ")", "\n", "\n", "### upsample", "\n", "Dec", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "Dec", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "Fake_out", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "Mast_out", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "1", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "\n", "self", ".", "Decoder", "=", "nn", ".", "Sequential", "(", "*", "Dec", ")", "\n", "#self.model = nn.Sequential(*model)", "\n", "self", ".", "spNorm", "=", "SpecificNorm", "(", ")", "\n", "self", ".", "Fake_out", "=", "nn", ".", "Sequential", "(", "*", "Fake_out", ")", "\n", "self", ".", "Mask_out", "=", "nn", ".", "Sequential", "(", "*", "Mast_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.Generator_Adain_Mask.forward": [[597, 616], ["networks.Generator_Adain_Mask.Encoder", "range", "networks.Generator_Adain_Mask.Decoder", "networks.Generator_Adain_Mask.Fake_out", "networks.Generator_Adain_Mask.Mask_out", "networks.Generator_Adain_Mask.spNorm", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "dlatents", ")", ":", "\n", "        ", "x", "=", "input", "\n", "x", "=", "self", ".", "Encoder", "(", "x", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "BottleNeck", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "BottleNeck", "[", "i", "]", "(", "x", ",", "dlatents", ")", "\n", "\n", "", "x", "=", "self", ".", "Decoder", "(", "x", ")", "\n", "\n", "fake_out", "=", "self", ".", "Fake_out", "(", "x", ")", "\n", "mask_out", "=", "self", ".", "Mask_out", "(", "x", ")", "\n", "\n", "fake_out", "=", "(", "fake_out", "+", "1", ")", "/", "2", "\n", "fake_out", "=", "self", ".", "spNorm", "(", "fake_out", ")", "\n", "\n", "generated", "=", "fake_out", "*", "mask_out", "+", "input", "*", "(", "1", "-", "mask_out", ")", "\n", "\n", "return", "generated", ",", "mask_out", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.Generator_Adain_Upsample.__init__": [[618, 653], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.SpecificNorm", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks.ResnetBlock_Adain", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "int", "int"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "latent_size", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "2", ",", "n_blocks", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "Generator_Adain_Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "Enc", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "Enc", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "", "self", ".", "Encoder", "=", "nn", ".", "Sequential", "(", "*", "Enc", ")", "\n", "\n", "### resnet blocks", "\n", "BN", "=", "[", "]", "\n", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "BN", "+=", "[", "ResnetBlock_Adain", "(", "ngf", "*", "mult", ",", "latent_size", "=", "latent_size", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ")", "]", "\n", "", "self", ".", "BottleNeck", "=", "nn", ".", "Sequential", "(", "*", "BN", ")", "\n", "\n", "### upsample", "\n", "Dec", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "'''Dec += [nn.ConvTranspose2d(ngf * mult, int(ngf * mult / 2), kernel_size=3, stride=2, padding=1,\n                                         output_padding=1),\n                      norm_layer(int(ngf * mult / 2)), activation]'''", "\n", "Dec", "+=", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "activation", "]", "\n", "", "Dec", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "Decoder", "=", "nn", ".", "Sequential", "(", "*", "Dec", ")", "\n", "self", ".", "spNorm", "=", "SpecificNorm", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.Generator_Adain_Upsample.forward": [[654, 668], ["networks.Generator_Adain_Upsample.Encoder", "range", "networks.Generator_Adain_Upsample.Decoder", "networks.Generator_Adain_Upsample.spNorm", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "dlatents", ")", ":", "\n", "        ", "x", "=", "input", "\n", "x", "=", "self", ".", "Encoder", "(", "x", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "BottleNeck", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "BottleNeck", "[", "i", "]", "(", "x", ",", "dlatents", ")", "\n", "\n", "", "x", "=", "self", ".", "Decoder", "(", "x", ")", "\n", "\n", "x", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "x", "=", "self", ".", "spNorm", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.Generator_Adain_2.__init__": [[670, 702], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.SpecificNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks.ResnetBlock_Adain", "networks.UpBlock_Adain", "int"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "latent_size", ",", "ngf", "=", "64", ",", "n_downsampling", "=", "2", ",", "n_blocks", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "Generator_Adain_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "Enc", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "norm_layer", "(", "ngf", ")", ",", "activation", "]", "\n", "### downsample", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "Enc", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "activation", "]", "\n", "", "self", ".", "Encoder", "=", "nn", ".", "Sequential", "(", "*", "Enc", ")", "\n", "\n", "### resnet blocks", "\n", "BN", "=", "[", "]", "\n", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "BN", "+=", "[", "ResnetBlock_Adain", "(", "ngf", "*", "mult", ",", "latent_size", "=", "latent_size", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ")", "]", "\n", "", "self", ".", "BottleNeck", "=", "nn", ".", "Sequential", "(", "*", "BN", ")", "\n", "\n", "### upsample", "\n", "Dec", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "Dec", "+=", "[", "UpBlock_Adain", "(", "dim_in", "=", "ngf", "*", "mult", ",", "dim_out", "=", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "latent_size", "=", "latent_size", ",", "padding_type", "=", "padding_type", ")", "]", "\n", "", "layer_out", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "Decoder", "=", "nn", ".", "Sequential", "(", "*", "Dec", ")", "\n", "#self.model = nn.Sequential(*model)", "\n", "self", ".", "spNorm", "=", "SpecificNorm", "(", ")", "\n", "self", ".", "layer_out", "=", "nn", ".", "Sequential", "(", "*", "layer_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.Generator_Adain_2.forward": [[703, 720], ["networks.Generator_Adain_2.Encoder", "range", "range", "networks.Generator_Adain_2.layer_out", "networks.Generator_Adain_2.spNorm", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "dlatents", ")", ":", "\n", "        ", "x", "=", "input", "\n", "x", "=", "self", ".", "Encoder", "(", "x", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "BottleNeck", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "BottleNeck", "[", "i", "]", "(", "x", ",", "dlatents", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "Decoder", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "Decoder", "[", "i", "]", "(", "x", ",", "dlatents", ")", "\n", "\n", "", "x", "=", "self", ".", "layer_out", "(", "x", ")", "\n", "\n", "x", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "x", "=", "self", ".", "spNorm", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.MultiscaleDiscriminator.__init__": [[722, 738], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "networks.NLayerDiscriminator", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_sigmoid", "=", "False", ",", "num_D", "=", "3", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiscaleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_D", "=", "num_D", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ",", "use_sigmoid", ",", "getIntermFeat", ")", "\n", "if", "getIntermFeat", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_layers", "+", "2", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "'scale'", "+", "str", "(", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ",", "getattr", "(", "netD", ",", "'model'", "+", "str", "(", "j", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "'layer'", "+", "str", "(", "i", ")", ",", "netD", ".", "model", ")", "\n", "\n", "", "", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.MultiscaleDiscriminator.singleD_forward": [[739, 747], ["range", "len", "result.append", "model"], "methods", ["None"], ["", "def", "singleD_forward", "(", "self", ",", "model", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "result", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n", "                ", "result", ".", "append", "(", "model", "[", "i", "]", "(", "result", "[", "-", "1", "]", ")", ")", "\n", "", "return", "result", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "model", "(", "input", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.MultiscaleDiscriminator.forward": [[748, 761], ["range", "result.append", "getattr", "networks.MultiscaleDiscriminator.singleD_forward", "networks.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.MultiscaleDiscriminator.singleD_forward"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "num_D", "=", "self", ".", "num_D", "\n", "result", "=", "[", "]", "\n", "input_downsampled", "=", "input", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "if", "self", ".", "getIntermFeat", ":", "\n", "                ", "model", "=", "[", "getattr", "(", "self", ",", "'scale'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", "+", "'_layer'", "+", "str", "(", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'layer'", "+", "str", "(", "num_D", "-", "1", "-", "i", ")", ")", "\n", "", "result", ".", "append", "(", "self", ".", "singleD_forward", "(", "model", ",", "input_downsampled", ")", ")", "\n", "if", "i", "!=", "(", "num_D", "-", "1", ")", ":", "\n", "                ", "input_downsampled", "=", "self", ".", "downsample", "(", "input_downsampled", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.NLayerDiscriminator.__init__": [[764, 803], ["torch.Module.__init__", "range", "min", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "len", "setattr", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "str"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "getIntermFeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "getIntermFeat", "=", "getIntermFeat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "nn", ".", "Sigmoid", "(", ")", "]", "]", "\n", "", "else", ":", "\n", "            ", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "", "if", "getIntermFeat", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "sequence_stream", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "                ", "sequence_stream", "+=", "sequence", "[", "n", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence_stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.NLayerDiscriminator.forward": [[804, 813], ["range", "networks.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "getIntermFeat", ":", "\n", "            ", "res", "=", "[", "input", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_layers", "+", "2", ")", ":", "\n", "                ", "model", "=", "getattr", "(", "self", ",", "'model'", "+", "str", "(", "n", ")", ")", "\n", "res", ".", "append", "(", "model", "(", "res", "[", "-", "1", "]", ")", ")", "\n", "", "return", "res", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.Vgg19.__init__": [[816, 837], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks.Vgg19.slice1.add_module", "networks.Vgg19.slice2.add_module", "networks.Vgg19.slice3.add_module", "networks.Vgg19.slice4.add_module", "networks.Vgg19.slice5.add_module", "networks.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.Vgg19.forward": [[838, 846], ["networks.Vgg19.slice1", "networks.Vgg19.slice2", "networks.Vgg19.slice3", "networks.Vgg19.slice4", "networks.Vgg19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.weights_init": [[12, 19], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.get_norm_layer": [[20, 28], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.define_G": [[29, 47], ["networks.get_norm_layer", "print", "Encoder.apply", "networks.GlobalGenerator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "Encoder.cuda", "networks.LocalEnhancer", "networks.Encoder"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.get_norm_layer"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "3", ",", "n_blocks_global", "=", "9", ",", "n_local_enhancers", "=", "1", ",", "\n", "n_blocks_local", "=", "3", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "netG", "==", "'global'", ":", "\n", "        ", "netG", "=", "GlobalGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'local'", ":", "\n", "        ", "netG", "=", "LocalEnhancer", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "\n", "n_local_enhancers", ",", "n_blocks_local", ",", "norm_layer", ")", "\n", "", "elif", "netG", "==", "'encoder'", ":", "\n", "        ", "netG", "=", "Encoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_downsample_global", ",", "norm_layer", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "'generator not implemented!'", ")", "\n", "", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.define_G_Adain": [[48, 57], ["networks.get_norm_layer", "networks.Generator_Adain", "print", "Generator_Adain.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "Generator_Adain.cuda"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.get_norm_layer"], ["", "def", "define_G_Adain", "(", "input_nc", ",", "output_nc", ",", "latent_size", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "2", ",", "n_blocks_global", "=", "4", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netG", "=", "Generator_Adain", "(", "input_nc", ",", "output_nc", ",", "latent_size", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.define_G_Adain_Mask": [[58, 67], ["networks.get_norm_layer", "networks.Generator_Adain_Mask", "print", "Generator_Adain_Mask.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "Generator_Adain_Mask.cuda"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.get_norm_layer"], ["", "def", "define_G_Adain_Mask", "(", "input_nc", ",", "output_nc", ",", "latent_size", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "2", ",", "n_blocks_global", "=", "4", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netG", "=", "Generator_Adain_Mask", "(", "input_nc", ",", "output_nc", ",", "latent_size", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.define_G_Adain_Upsample": [[68, 77], ["networks.get_norm_layer", "networks.Generator_Adain_Upsample", "print", "Generator_Adain_Upsample.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "Generator_Adain_Upsample.cuda"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.get_norm_layer"], ["", "def", "define_G_Adain_Upsample", "(", "input_nc", ",", "output_nc", ",", "latent_size", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "2", ",", "n_blocks_global", "=", "4", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netG", "=", "Generator_Adain_Upsample", "(", "input_nc", ",", "output_nc", ",", "latent_size", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.define_G_Adain_2": [[78, 87], ["networks.get_norm_layer", "networks.Generator_Adain_2", "print", "Generator_Adain_2.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "Generator_Adain_2.cuda"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.get_norm_layer"], ["", "def", "define_G_Adain_2", "(", "input_nc", ",", "output_nc", ",", "latent_size", ",", "ngf", ",", "netG", ",", "n_downsample_global", "=", "2", ",", "n_blocks_global", "=", "4", ",", "norm", "=", "'instance'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netG", "=", "Generator_Adain_2", "(", "input_nc", ",", "output_nc", ",", "latent_size", ",", "ngf", ",", "n_downsample_global", ",", "n_blocks_global", ",", "norm_layer", ")", "\n", "print", "(", "netG", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.define_D": [[88, 97], ["networks.get_norm_layer", "networks.MultiscaleDiscriminator", "print", "MultiscaleDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "MultiscaleDiscriminator.cuda"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.get_norm_layer"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm", "=", "'instance'", ",", "use_sigmoid", "=", "False", ",", "num_D", "=", "1", ",", "getIntermFeat", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netD", "=", "MultiscaleDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", ",", "use_sigmoid", ",", "num_D", ",", "getIntermFeat", ")", "\n", "print", "(", "netD", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.print_network": [[98, 106], ["isinstance", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "if", "isinstance", "(", "net", ",", "list", ")", ":", "\n", "        ", "net", "=", "net", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.name": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Pix2PixHDModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.init_loss_filter": [[13, 18], ["zip"], "methods", ["None"], ["", "def", "init_loss_filter", "(", "self", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ")", ":", "\n", "        ", "flags", "=", "(", "True", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "True", ",", "True", ")", "\n", "def", "loss_filter", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ")", ":", "\n", "            ", "return", "[", "l", "for", "(", "l", ",", "f", ")", "in", "zip", "(", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "d_real", ",", "d_fake", ")", ",", "flags", ")", "if", "f", "]", "\n", "", "return", "loss_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.initialize": [[19, 110], ["base_model.BaseModel.initialize", "networks.define_G", "networks.define_D", "networks.define_G", "print", "pix2pixHD_model.Pix2PixHDModel.load_network", "util.image_pool.ImagePool", "pix2pixHD_model.Pix2PixHDModel.init_loss_filter", "networks.GANLoss", "torch.nn.L1Loss", "pix2pixHD_model.Pix2PixHDModel.loss_filter", "torch.optim.Adam", "list", "torch.optim.Adam", "pix2pixHD_model.Pix2PixHDModel.load_network", "pix2pixHD_model.Pix2PixHDModel.load_network", "NotImplementedError", "networks.VGGLoss", "dict", "dict.items", "print", "print", "list", "list", "pix2pixHD_model.Pix2PixHDModel.netD.parameters", "len", "set", "Set", "pix2pixHD_model.Pix2PixHDModel.netG.named_parameters", "key.startswith", "sorted", "pix2pixHD_model.Pix2PixHDModel.netG.parameters", "pix2pixHD_model.Pix2PixHDModel.netE.parameters", "Set.add", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.define_G", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.define_D", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.define_G", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_model.fsModel.init_loss_filter", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "if", "opt", ".", "resize_or_crop", "!=", "'none'", "or", "not", "opt", ".", "isTrain", ":", "# when training at full res this causes OOM", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "use_features", "=", "opt", ".", "instance_feat", "or", "opt", ".", "label_feat", "\n", "self", ".", "gen_features", "=", "self", ".", "use_features", "and", "not", "self", ".", "opt", ".", "load_features", "\n", "input_nc", "=", "opt", ".", "label_nc", "if", "opt", ".", "label_nc", "!=", "0", "else", "opt", ".", "input_nc", "\n", "\n", "##### define networks        ", "\n", "# Generator network", "\n", "netG_input_nc", "=", "input_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "netG_input_nc", "+=", "1", "\n", "", "if", "self", ".", "use_features", ":", "\n", "            ", "netG_input_nc", "+=", "opt", ".", "feat_num", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "netG_input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "n_downsample_global", ",", "opt", ".", "n_blocks_global", ",", "opt", ".", "n_local_enhancers", ",", "\n", "opt", ".", "n_blocks_local", ",", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "# Discriminator network", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "netD_input_nc", "=", "input_nc", "+", "opt", ".", "output_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "                ", "netD_input_nc", "+=", "1", "\n", "", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "netD_input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "\n", "opt", ".", "num_D", ",", "not", "opt", ".", "no_ganFeat_loss", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "### Encoder network", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "netE", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "feat_num", ",", "opt", ".", "nef", ",", "'encoder'", ",", "\n", "opt", ".", "n_downsample_E", ",", "norm", "=", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "                ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "\n", "# load networks", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", "or", "opt", ".", "load_pretrain", ":", "\n", "            ", "pretrained_path", "=", "''", "if", "not", "self", ".", "isTrain", "else", "opt", ".", "load_pretrain", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netE", ",", "'E'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "\n", "# set loss functions and optimizers", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "if", "opt", ".", "pool_size", ">", "0", "and", "(", "len", "(", "self", ".", "gpu_ids", ")", ")", ">", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Fake Pool Not Implemented for MultiGPU\"", ")", "\n", "", "self", ".", "fake_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n", "# define loss functions", "\n", "self", ".", "loss_filter", "=", "self", ".", "init_loss_filter", "(", "not", "opt", ".", "no_ganFeat_loss", ",", "not", "opt", ".", "no_vgg_loss", ")", "\n", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "if", "not", "opt", ".", "no_vgg_loss", ":", "\n", "                ", "self", ".", "criterionVGG", "=", "networks", ".", "VGGLoss", "(", "self", ".", "gpu_ids", ")", "\n", "\n", "\n", "# Names so we can breakout loss", "\n", "", "self", ".", "loss_names", "=", "self", ".", "loss_filter", "(", "'G_GAN'", ",", "'G_GAN_Feat'", ",", "'G_VGG'", ",", "'D_real'", ",", "'D_fake'", ")", "\n", "\n", "# initialize optimizers", "\n", "# optimizer G", "\n", "if", "opt", ".", "niter_fix_global", ">", "0", ":", "\n", "                ", "import", "sys", "\n", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                    ", "finetune_list", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                    ", "from", "sets", "import", "Set", "\n", "finetune_list", "=", "Set", "(", ")", "\n", "\n", "", "params_dict", "=", "dict", "(", "self", ".", "netG", ".", "named_parameters", "(", ")", ")", "\n", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", ".", "startswith", "(", "'model'", "+", "str", "(", "opt", ".", "n_local_enhancers", ")", ")", ":", "\n", "                        ", "params", "+=", "[", "value", "]", "\n", "finetune_list", ".", "add", "(", "key", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "", "print", "(", "'------------- Only training the local enhancer network (for %d epochs) ------------'", "%", "opt", ".", "niter_fix_global", ")", "\n", "print", "(", "'The layers that are finetuned are '", ",", "sorted", "(", "finetune_list", ")", ")", "\n", "", "else", ":", "\n", "                ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "gen_features", ":", "\n", "                ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "# optimizer D                        ", "\n", "params", "=", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.encode_input": [[111, 143], ["torch.autograd.Variable", "label_map.data.cuda", "label_map.size", "torch.cuda.FloatTensor().zero_", "input_label.half.half.scatter_", "label_map.cuda.data.cuda", "pix2pixHD_model.Pix2PixHDModel.get_edges", "torch.cat", "torch.autograd.Variable", "label_map.data.long().cuda", "input_label.half.half.half", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable", "label_map.cuda", "torch.cuda.FloatTensor", "torch.autograd.Variable.data.cuda", "torch.Size", "label_map.data.long"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.get_edges"], ["", "", "def", "encode_input", "(", "self", ",", "label_map", ",", "inst_map", "=", "None", ",", "real_image", "=", "None", ",", "feat_map", "=", "None", ",", "infer", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "label_nc", "==", "0", ":", "\n", "            ", "input_label", "=", "label_map", ".", "data", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "# create one-hot vector for label map ", "\n", "            ", "size", "=", "label_map", ".", "size", "(", ")", "\n", "oneHot_size", "=", "(", "size", "[", "0", "]", ",", "self", ".", "opt", ".", "label_nc", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "input_label", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "oneHot_size", ")", ")", ".", "zero_", "(", ")", "\n", "input_label", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ".", "data", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "1.0", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "                ", "input_label", "=", "input_label", ".", "half", "(", ")", "\n", "\n", "# get edges from instance map", "\n", "", "", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_map", "=", "inst_map", ".", "data", ".", "cuda", "(", ")", "\n", "edge_map", "=", "self", ".", "get_edges", "(", "inst_map", ")", "\n", "input_label", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "edge_map", ")", ",", "dim", "=", "1", ")", "\n", "", "input_label", "=", "Variable", "(", "input_label", ",", "volatile", "=", "infer", ")", "\n", "\n", "# real images for training", "\n", "if", "real_image", "is", "not", "None", ":", "\n", "            ", "real_image", "=", "Variable", "(", "real_image", ".", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# instance map for feature encoding", "\n", "", "if", "self", ".", "use_features", ":", "\n", "# get precomputed feature maps", "\n", "            ", "if", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "Variable", "(", "feat_map", ".", "data", ".", "cuda", "(", ")", ")", "\n", "", "if", "self", ".", "opt", ".", "label_feat", ":", "\n", "                ", "inst_map", "=", "label_map", ".", "cuda", "(", ")", "\n", "\n", "", "", "return", "input_label", ",", "inst_map", ",", "real_image", ",", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.discriminate": [[144, 151], ["torch.cat", "pix2pixHD_model.Pix2PixHDModel.fake_pool.query", "pix2pixHD_model.Pix2PixHDModel.netD.forward", "pix2pixHD_model.Pix2PixHDModel.netD.forward", "test_image.detach"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward"], ["", "def", "discriminate", "(", "self", ",", "input_label", ",", "test_image", ",", "use_pool", "=", "False", ")", ":", "\n", "        ", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "test_image", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "if", "use_pool", ":", "\n", "            ", "fake_query", "=", "self", ".", "fake_pool", ".", "query", "(", "input_concat", ")", "\n", "return", "self", ".", "netD", ".", "forward", "(", "fake_query", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "netD", ".", "forward", "(", "input_concat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.forward": [[152, 194], ["pix2pixHD_model.Pix2PixHDModel.encode_input", "pix2pixHD_model.Pix2PixHDModel.netG.forward", "pix2pixHD_model.Pix2PixHDModel.discriminate", "pix2pixHD_model.Pix2PixHDModel.criterionGAN", "pix2pixHD_model.Pix2PixHDModel.discriminate", "pix2pixHD_model.Pix2PixHDModel.criterionGAN", "pix2pixHD_model.Pix2PixHDModel.netD.forward", "pix2pixHD_model.Pix2PixHDModel.criterionGAN", "torch.cat", "torch.cat", "range", "pix2pixHD_model.Pix2PixHDModel.loss_filter", "pix2pixHD_model.Pix2PixHDModel.netE.forward", "range", "pix2pixHD_model.Pix2PixHDModel.criterionVGG", "len", "pix2pixHD_model.Pix2PixHDModel.criterionFeat", "[].detach"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.discriminate", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward"], ["", "", "def", "forward", "(", "self", ",", "label", ",", "inst", ",", "image", ",", "feat", ",", "infer", "=", "False", ")", ":", "\n", "# Encode Inputs", "\n", "        ", "input_label", ",", "inst_map", ",", "real_image", ",", "feat_map", "=", "self", ".", "encode_input", "(", "label", ",", "inst", ",", "image", ",", "feat", ")", "\n", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "load_features", ":", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "\n", "# Fake Detection and Loss", "\n", "pred_fake_pool", "=", "self", ".", "discriminate", "(", "input_label", ",", "fake_image", ",", "use_pool", "=", "True", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake_pool", ",", "False", ")", "\n", "\n", "# Real Detection and Loss        ", "\n", "pred_real", "=", "self", ".", "discriminate", "(", "input_label", ",", "real_image", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "\n", "# GAN loss (Fake Passability Loss)        ", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "torch", ".", "cat", "(", "(", "input_label", ",", "fake_image", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "\n", "# GAN feature matching loss", "\n", "loss_G_GAN_Feat", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "feat_weights", "=", "4.0", "/", "(", "self", ".", "opt", ".", "n_layers_D", "+", "1", ")", "\n", "D_weights", "=", "1.0", "/", "self", ".", "opt", ".", "num_D", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_D", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "                    ", "loss_G_GAN_Feat", "+=", "D_weights", "*", "feat_weights", "*", "self", ".", "criterionFeat", "(", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "\n", "# VGG feature matching loss", "\n", "", "", "", "loss_G_VGG", "=", "0", "\n", "if", "not", "self", ".", "opt", ".", "no_vgg_loss", ":", "\n", "            ", "loss_G_VGG", "=", "self", ".", "criterionVGG", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "\n", "# Only return the fake_B image if necessary to save BW", "\n", "", "return", "[", "self", ".", "loss_filter", "(", "loss_G_GAN", ",", "loss_G_GAN_Feat", ",", "loss_G_VGG", ",", "loss_D_real", ",", "loss_D_fake", ")", ",", "None", "if", "not", "infer", "else", "fake_image", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.inference": [[195, 218], ["pix2pixHD_model.Pix2PixHDModel.encode_input", "torch.__version__.startswith", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "pix2pixHD_model.Pix2PixHDModel.netG.forward", "pix2pixHD_model.Pix2PixHDModel.netE.forward", "pix2pixHD_model.Pix2PixHDModel.sample_features", "torch.no_grad", "pix2pixHD_model.Pix2PixHDModel.netG.forward"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.encode_input", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.sample_features", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward"], ["", "def", "inference", "(", "self", ",", "label", ",", "inst", ",", "image", "=", "None", ")", ":", "\n", "# Encode Inputs        ", "\n", "        ", "image", "=", "Variable", "(", "image", ")", "if", "image", "is", "not", "None", "else", "None", "\n", "input_label", ",", "inst_map", ",", "real_image", ",", "_", "=", "self", ".", "encode_input", "(", "Variable", "(", "label", ")", ",", "Variable", "(", "inst", ")", ",", "image", ",", "infer", "=", "True", ")", "\n", "\n", "# Fake Generation", "\n", "if", "self", ".", "use_features", ":", "\n", "            ", "if", "self", ".", "opt", ".", "use_encoded_image", ":", "\n", "# encode the real image to get feature map", "\n", "                ", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "real_image", ",", "inst_map", ")", "\n", "", "else", ":", "\n", "# sample clusters from precomputed features             ", "\n", "                ", "feat_map", "=", "self", ".", "sample_features", "(", "inst_map", ")", "\n", "", "input_concat", "=", "torch", ".", "cat", "(", "(", "input_label", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_concat", "=", "input_label", "\n", "\n", "", "if", "torch", ".", "__version__", ".", "startswith", "(", "'0.4'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "", "else", ":", "\n", "            ", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "input_concat", ")", "\n", "", "return", "fake_image", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.sample_features": [[219, 239], ["os.path.join", "numpy.load().item", "inst.cpu().numpy().astype", "pix2pixHD_model.Pix2PixHDModel.Tensor", "numpy.unique", "feat_map.half.half.half", "numpy.load", "inst.cpu().numpy", "inst.size", "inst.size", "inst.size", "numpy.random.randint", "range", "inst.cpu", "int"], "methods", ["None"], ["", "def", "sample_features", "(", "self", ",", "inst", ")", ":", "\n", "# read precomputed feature clusters ", "\n", "        ", "cluster_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "self", ".", "opt", ".", "cluster_path", ")", "\n", "features_clustered", "=", "np", ".", "load", "(", "cluster_path", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "\n", "\n", "# randomly sample from the feature clusters", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feat_map", "=", "self", ".", "Tensor", "(", "inst", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "opt", ".", "feat_num", ",", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "if", "label", "in", "features_clustered", ":", "\n", "                ", "feat", "=", "features_clustered", "[", "label", "]", "\n", "cluster_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "feat", ".", "shape", "[", "0", "]", ")", "\n", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "feat_num", ")", ":", "\n", "                    ", "feat_map", "[", "idx", "[", ":", ",", "0", "]", ",", "idx", "[", ":", ",", "1", "]", "+", "k", ",", "idx", "[", ":", ",", "2", "]", ",", "idx", "[", ":", ",", "3", "]", "]", "=", "feat", "[", "cluster_idx", ",", "k", "]", "\n", "", "", "", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "feat_map", "=", "feat_map", ".", "half", "(", ")", "\n", "", "return", "feat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.encode_features": [[240, 261], ["torch.autograd.Variable", "pix2pixHD_model.Pix2PixHDModel.netE.forward", "inst.cpu().numpy().astype", "range", "numpy.unique", "torch.autograd.Variable.cuda", "inst.cuda", "numpy.zeros", "numpy.zeros", "range", "numpy.append", "inst.size", "inst.size", "inst.cpu().numpy", "idx.size", "float", "inst.cpu", "int"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward"], ["", "def", "encode_features", "(", "self", ",", "image", ",", "inst", ")", ":", "\n", "        ", "image", "=", "Variable", "(", "image", ".", "cuda", "(", ")", ",", "volatile", "=", "True", ")", "\n", "feat_num", "=", "self", ".", "opt", ".", "feat_num", "\n", "h", ",", "w", "=", "inst", ".", "size", "(", ")", "[", "2", "]", ",", "inst", ".", "size", "(", ")", "[", "3", "]", "\n", "block_num", "=", "32", "\n", "feat_map", "=", "self", ".", "netE", ".", "forward", "(", "image", ",", "inst", ".", "cuda", "(", ")", ")", "\n", "inst_np", "=", "inst", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "feature", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "label_nc", ")", ":", "\n", "            ", "feature", "[", "i", "]", "=", "np", ".", "zeros", "(", "(", "0", ",", "feat_num", "+", "1", ")", ")", "\n", "", "for", "i", "in", "np", ".", "unique", "(", "inst_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "idx", "=", "(", "inst", "==", "int", "(", "i", ")", ")", ".", "nonzero", "(", ")", "\n", "num", "=", "idx", ".", "size", "(", ")", "[", "0", "]", "\n", "idx", "=", "idx", "[", "num", "//", "2", ",", ":", "]", "\n", "val", "=", "np", ".", "zeros", "(", "(", "1", ",", "feat_num", "+", "1", ")", ")", "\n", "for", "k", "in", "range", "(", "feat_num", ")", ":", "\n", "                ", "val", "[", "0", ",", "k", "]", "=", "feat_map", "[", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", "+", "k", ",", "idx", "[", "2", "]", ",", "idx", "[", "3", "]", "]", ".", "data", "[", "0", "]", "\n", "", "val", "[", "0", ",", "feat_num", "]", "=", "float", "(", "num", ")", "/", "(", "h", "*", "w", "//", "block_num", ")", "\n", "feature", "[", "label", "]", "=", "np", ".", "append", "(", "feature", "[", "label", "]", ",", "val", ",", "axis", "=", "0", ")", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.get_edges": [[262, 272], ["torch.cuda.ByteTensor().zero_", "torch.cuda.ByteTensor().zero_.half", "torch.cuda.ByteTensor().zero_.float", "torch.cuda.ByteTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "if", "self", ".", "opt", ".", "data_type", "==", "16", ":", "\n", "            ", "return", "edge", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.save": [[273, 278], ["pix2pixHD_model.Pix2PixHDModel.save_network", "pix2pixHD_model.Pix2PixHDModel.save_network", "pix2pixHD_model.Pix2PixHDModel.save_network"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "netE", ",", "'E'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.update_fixed_params": [[279, 287], ["list", "torch.optim.Adam", "pix2pixHD_model.Pix2PixHDModel.netG.parameters", "list", "print", "pix2pixHD_model.Pix2PixHDModel.netE.parameters"], "methods", ["None"], ["", "", "def", "update_fixed_params", "(", "self", ")", ":", "\n", "# after fixing the global generator for a number of iterations, also start finetuning it", "\n", "        ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'------------ Now also finetuning global generator -----------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.update_learning_rate": [[288, 298], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.InferenceModel.forward": [[300, 303], ["pix2pixHD_model.InferenceModel.inference"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.pix2pixHD_model.Pix2PixHDModel.inference"], ["    ", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "label", ",", "inst", "=", "inp", "\n", "return", "self", ".", "inference", "(", "label", ",", "inst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_model.SpecificNorm.__init__": [[11, 24], ["torch.Module.__init__", "numpy.array", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "fs_model.SpecificNorm.mean.view", "numpy.array", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "fs_model.SpecificNorm.std.view", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"\n            @notice: avoid in-place ops.\n            https://discuss.pytorch.org/t/encounter-the-runtimeerror-one-of-the-variables-needed-for-gradient-computation-has-been-modified-by-an-inplace-operation/836/3\n        \"\"\"", "\n", "super", "(", "SpecificNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "\n", "self", ".", "mean", "=", "torch", ".", "from_numpy", "(", "self", ".", "mean", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "mean", "=", "self", ".", "mean", ".", "view", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "std", "=", "torch", ".", "from_numpy", "(", "self", ".", "std", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "std", "=", "self", ".", "std", ".", "view", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_model.SpecificNorm.forward": [[25, 32], ["fs_model.SpecificNorm.mean.expand", "fs_model.SpecificNorm.std.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "self", ".", "mean", ".", "expand", "(", "[", "1", ",", "3", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ")", "\n", "std", "=", "self", ".", "std", ".", "expand", "(", "[", "1", ",", "3", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "x", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_model.fsModel.name": [[34, 36], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'fsModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_model.fsModel.init_loss_filter": [[37, 44], ["zip"], "methods", ["None"], ["", "def", "init_loss_filter", "(", "self", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ")", ":", "\n", "        ", "flags", "=", "(", "True", ",", "use_gan_feat_loss", ",", "use_vgg_loss", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ")", "\n", "\n", "def", "loss_filter", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "g_id", ",", "g_rec", ",", "g_mask", ",", "d_real", ",", "d_fake", ")", ":", "\n", "            ", "return", "[", "l", "for", "(", "l", ",", "f", ")", "in", "zip", "(", "(", "g_gan", ",", "g_gan_feat", ",", "g_vgg", ",", "g_id", ",", "g_rec", ",", "g_mask", ",", "d_real", ",", "d_fake", ")", ",", "flags", ")", "if", "f", "]", "\n", "\n", "", "return", "loss_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_model.fsModel.initialize": [[45, 122], ["base_model.BaseModel.initialize", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "Generator_Adain_Upsample", "fs_model.fsModel.netG.to", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "fs_model.fsModel.netArc.to", "fs_model.fsModel.netArc.eval", "Discriminator", "Discriminator", "fs_model.fsModel.netD1.to", "fs_model.fsModel.netD2.to", "fs_model.SpecificNorm", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "fs_model.fsModel.load_network", "fs_model.fsModel.load_network", "fs_model.fsModel.load_network", "fs_model.fsModel.load_network", "fs_model.fsModel.init_loss_filter", "networks.GANLoss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "fs_model.fsModel.loss_filter", "list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "fs_model.fsModel.netG.parameters", "list", "list", "fs_model.fsModel.netD1.parameters", "fs_model.fsModel.netD2.parameters"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.eval", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_model.fsModel.init_loss_filter"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "if", "opt", ".", "resize_or_crop", "!=", "'none'", "or", "not", "opt", ".", "isTrain", ":", "# when training at full res this causes OOM", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n", "if", "opt", ".", "crop_size", "==", "224", ":", "\n", "            ", "from", ".", "fs_networks", "import", "Generator_Adain_Upsample", ",", "Discriminator", "\n", "", "elif", "opt", ".", "crop_size", "==", "512", ":", "\n", "            ", "from", ".", "fs_networks_512", "import", "Generator_Adain_Upsample", ",", "Discriminator", "\n", "\n", "# Generator network", "\n", "", "self", ".", "netG", "=", "Generator_Adain_Upsample", "(", "input_nc", "=", "3", ",", "output_nc", "=", "3", ",", "latent_size", "=", "512", ",", "n_blocks", "=", "9", ",", "deep", "=", "False", ")", "\n", "self", ".", "netG", ".", "to", "(", "device", ")", "\n", "\n", "\n", "\n", "\n", "# Id network", "\n", "netArc_checkpoint", "=", "opt", ".", "Arc_path", "\n", "netArc_checkpoint", "=", "torch", ".", "load", "(", "netArc_checkpoint", ")", "\n", "self", ".", "netArc", "=", "netArc_checkpoint", "[", "'model'", "]", ".", "module", "\n", "self", ".", "netArc", "=", "self", ".", "netArc", ".", "to", "(", "device", ")", "\n", "self", ".", "netArc", ".", "eval", "(", ")", "\n", "\n", "if", "not", "self", ".", "isTrain", ":", "\n", "            ", "pretrained_path", "=", "''", "if", "not", "self", ".", "isTrain", "else", "opt", ".", "load_pretrain", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "return", "\n", "\n", "# Discriminator network", "\n", "", "if", "opt", ".", "gan_mode", "==", "'original'", ":", "\n", "            ", "use_sigmoid", "=", "True", "\n", "", "else", ":", "\n", "            ", "use_sigmoid", "=", "False", "\n", "", "self", ".", "netD1", "=", "Discriminator", "(", "input_nc", "=", "3", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "self", ".", "netD2", "=", "Discriminator", "(", "input_nc", "=", "3", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "self", ".", "netD1", ".", "to", "(", "device", ")", "\n", "self", ".", "netD2", ".", "to", "(", "device", ")", "\n", "\n", "#", "\n", "self", ".", "spNorm", "=", "SpecificNorm", "(", ")", "\n", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n", "# load networks", "\n", "if", "opt", ".", "continue_train", "or", "opt", ".", "load_pretrain", ":", "\n", "            ", "pretrained_path", "=", "''", "if", "not", "self", ".", "isTrain", "else", "opt", ".", "load_pretrain", "\n", "# print (pretrained_path)", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "self", ".", "load_network", "(", "self", ".", "netD1", ",", "'D1'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "self", ".", "load_network", "(", "self", ".", "netD2", ",", "'D2'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "\n", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "# define loss functions", "\n", "            ", "self", ".", "loss_filter", "=", "self", ".", "init_loss_filter", "(", "not", "opt", ".", "no_ganFeat_loss", ",", "not", "opt", ".", "no_vgg_loss", ")", "\n", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "opt", ".", "gan_mode", ",", "tensor", "=", "self", ".", "Tensor", ",", "opt", "=", "self", ".", "opt", ")", "\n", "self", ".", "criterionFeat", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionRec", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "# Names so we can breakout loss", "\n", "self", ".", "loss_names", "=", "self", ".", "loss_filter", "(", "'G_GAN'", ",", "'G_GAN_Feat'", ",", "'G_VGG'", ",", "'G_ID'", ",", "'G_Rec'", ",", "'D_GP'", ",", "\n", "'D_real'", ",", "'D_fake'", ")", "\n", "\n", "# initialize optimizers", "\n", "\n", "# optimizer G", "\n", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "# optimizer D", "\n", "params", "=", "list", "(", "self", ".", "netD1", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "netD2", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_model.fsModel._gradinet_penalty_D": [[123, 145], ["torch.rand().expand_as().cuda", "torch.rand().expand_as().cuda", "torch.rand().expand_as().cuda", "torch.rand().expand_as().cuda", "torch.rand().expand_as().cuda", "torch.rand().expand_as().cuda", "torch.rand().expand_as().cuda", "torch.rand().expand_as().cuda", "torch.rand().expand_as().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "netD.forward", "grad.view.view.view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "grad.view.view.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.rand().expand_as", "torch.rand().expand_as", "torch.rand().expand_as", "torch.rand().expand_as", "torch.rand().expand_as", "torch.rand().expand_as", "torch.rand().expand_as", "torch.rand().expand_as", "torch.rand().expand_as", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "netD.forward.size"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward"], ["", "", "def", "_gradinet_penalty_D", "(", "self", ",", "netD", ",", "img_att", ",", "img_fake", ")", ":", "\n", "# interpolate sample", "\n", "        ", "bs", "=", "img_fake", ".", "shape", "[", "0", "]", "\n", "alpha", "=", "torch", ".", "rand", "(", "bs", ",", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "img_fake", ")", ".", "cuda", "(", ")", "\n", "interpolated", "=", "Variable", "(", "alpha", "*", "img_att", "+", "(", "1", "-", "alpha", ")", "*", "img_fake", ",", "requires_grad", "=", "True", ")", "\n", "pred_interpolated", "=", "netD", ".", "forward", "(", "interpolated", ")", "\n", "pred_interpolated", "=", "pred_interpolated", "[", "-", "1", "]", "\n", "\n", "# compute gradients", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "pred_interpolated", ",", "\n", "inputs", "=", "interpolated", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "pred_interpolated", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "\n", "retain_graph", "=", "True", ",", "\n", "create_graph", "=", "True", ",", "\n", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "# penalize gradients", "\n", "grad", "=", "grad", ".", "view", "(", "grad", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "grad_l2norm", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "grad", "**", "2", ",", "dim", "=", "1", ")", ")", "\n", "loss_d_gp", "=", "torch", ".", "mean", "(", "(", "grad_l2norm", "-", "1", ")", "**", "2", ")", "\n", "\n", "return", "loss_d_gp", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_model.fsModel.cosin_metric": [[146, 149], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "cosin_metric", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "#return np.dot(x1, x2) / (np.linalg.norm(x1) * np.linalg.norm(x2))", "\n", "        ", "return", "torch", ".", "sum", "(", "x1", "*", "x2", ",", "dim", "=", "1", ")", "/", "(", "torch", ".", "norm", "(", "x1", ",", "dim", "=", "1", ")", "*", "torch", ".", "norm", "(", "x2", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_model.fsModel.forward": [[150, 216], ["fs_model.fsModel.netG.forward", "fs_model.fsModel.downsample", "fs_model.fsModel.downsample", "fs_model.fsModel.netD1.forward", "fs_model.fsModel.netD2.forward", "fs_model.fsModel.criterionGAN", "fs_model.fsModel.netD1.forward", "fs_model.fsModel.netD2.forward", "fs_model.fsModel.criterionGAN", "fs_model.fsModel.netD1.forward", "fs_model.fsModel.netD2.forward", "fs_model.fsModel.criterionGAN", "torch.interpolate", "torch.interpolate", "torch.interpolate", "fs_model.fsModel.spNorm", "fs_model.fsModel.netArc", "fs_model.fsModel.detach", "fs_model.fsModel.detach", "range", "fs_model.fsModel.cosin_metric", "fs_model.fsModel.criterionRec", "fs_model.fsModel.loss_filter", "range", "len", "fs_model.fsModel.criterionFeat", "[].detach"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.fsModel.cosin_metric"], ["", "def", "forward", "(", "self", ",", "img_id", ",", "img_att", ",", "latent_id", ",", "latent_att", ",", "for_G", "=", "False", ")", ":", "\n", "        ", "loss_D_fake", ",", "loss_D_real", ",", "loss_D_GP", "=", "0", ",", "0", ",", "0", "\n", "loss_G_GAN", ",", "loss_G_GAN_Feat", ",", "loss_G_VGG", ",", "loss_G_ID", ",", "loss_G_Rec", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "img_fake", "=", "self", ".", "netG", ".", "forward", "(", "img_att", ",", "latent_id", ")", "\n", "if", "not", "self", ".", "isTrain", ":", "\n", "            ", "return", "img_fake", "\n", "", "img_fake_downsample", "=", "self", ".", "downsample", "(", "img_fake", ")", "\n", "img_att_downsample", "=", "self", ".", "downsample", "(", "img_att", ")", "\n", "\n", "\n", "\n", "# D_Fake", "\n", "fea1_fake", "=", "self", ".", "netD1", ".", "forward", "(", "img_fake", ".", "detach", "(", ")", ")", "\n", "fea2_fake", "=", "self", ".", "netD2", ".", "forward", "(", "img_fake_downsample", ".", "detach", "(", ")", ")", "\n", "pred_fake", "=", "[", "fea1_fake", ",", "fea2_fake", "]", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ",", "for_discriminator", "=", "True", ")", "\n", "\n", "\n", "# D_Feal", "\n", "fea1_real", "=", "self", ".", "netD1", ".", "forward", "(", "img_att", ")", "\n", "fea2_real", "=", "self", ".", "netD2", ".", "forward", "(", "img_att_downsample", ")", "\n", "pred_real", "=", "[", "fea1_real", ",", "fea2_real", "]", "\n", "fea_real", "=", "[", "fea1_real", ",", "fea2_real", "]", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ",", "for_discriminator", "=", "True", ")", "\n", "#print('=====================D_Real========================')", "\n", "\n", "# D_GP", "\n", "\n", "loss_D_GP", "=", "0", "\n", "\n", "# G_GAN", "\n", "fea1_fake", "=", "self", ".", "netD1", ".", "forward", "(", "img_fake", ")", "\n", "fea2_fake", "=", "self", ".", "netD2", ".", "forward", "(", "img_fake_downsample", ")", "\n", "#pred_fake = [fea1_fake[-1], fea2_fake[-1]]", "\n", "pred_fake", "=", "[", "fea1_fake", ",", "fea2_fake", "]", "\n", "fea_fake", "=", "[", "fea1_fake", ",", "fea2_fake", "]", "\n", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ",", "for_discriminator", "=", "False", ")", "\n", "\n", "# GAN feature matching loss", "\n", "n_layers_D", "=", "4", "\n", "num_D", "=", "2", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "feat_weights", "=", "4.0", "/", "(", "n_layers_D", "+", "1", ")", "\n", "D_weights", "=", "1.0", "/", "num_D", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "0", ",", "len", "(", "fea_fake", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "                    ", "loss_G_GAN_Feat", "+=", "D_weights", "*", "feat_weights", "*", "self", ".", "criterionFeat", "(", "fea_fake", "[", "i", "]", "[", "j", "]", ",", "\n", "fea_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "\n", "\n", "#G_ID", "\n", "", "", "", "img_fake_down", "=", "F", ".", "interpolate", "(", "img_fake", ",", "size", "=", "(", "112", ",", "112", ")", ")", "\n", "img_fake_down", "=", "self", ".", "spNorm", "(", "img_fake_down", ")", "\n", "latent_fake", "=", "self", ".", "netArc", "(", "img_fake_down", ")", "\n", "loss_G_ID", "=", "(", "1", "-", "self", ".", "cosin_metric", "(", "latent_fake", ",", "latent_id", ")", ")", "\n", "#print('=====================G_ID========================')", "\n", "#print(loss_G_ID)", "\n", "\n", "#G_Rec", "\n", "loss_G_Rec", "=", "self", ".", "criterionRec", "(", "img_fake", ",", "img_att", ")", "*", "self", ".", "opt", ".", "lambda_rec", "\n", "\n", "# Only return the fake_B image if necessary to save BW", "\n", "return", "[", "self", ".", "loss_filter", "(", "loss_G_GAN", ",", "loss_G_GAN_Feat", ",", "loss_G_VGG", ",", "loss_G_ID", ",", "loss_G_Rec", ",", "loss_D_GP", ",", "loss_D_real", ",", "loss_D_fake", ")", ",", "\n", "img_fake", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_model.fsModel.save": [[218, 224], ["fs_model.fsModel.save_network", "fs_model.fsModel.save_network", "fs_model.fsModel.save_network"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD1", ",", "'D1'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD2", ",", "'D2'", ",", "which_epoch", ",", "self", ".", "gpu_ids", ")", "\n", "'''if self.gen_features:\n            self.save_network(self.netE, 'E', which_epoch, self.gpu_ids)'''", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_model.fsModel.update_fixed_params": [[225, 233], ["list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "fs_model.fsModel.netG.parameters", "list", "print", "fs_model.fsModel.netE.parameters"], "methods", ["None"], ["", "def", "update_fixed_params", "(", "self", ")", ":", "\n", "# after fixing the global generator for a number of iterations, also start finetuning it", "\n", "        ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'------------ Now also finetuning global generator -----------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_model.fsModel.update_learning_rate": [[234, 244], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_fix.InstanceNorm.__init__": [[11, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"\n            @notice: avoid in-place ops.\n            https://discuss.pytorch.org/t/encounter-the-runtimeerror-one-of-the-variables-needed-for-gradient-computation-has-been-modified-by-an-inplace-operation/836/3\n        \"\"\"", "\n", "super", "(", "InstanceNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_fix.InstanceNorm.forward": [[19, 24], ["torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "-", "torch", ".", "mean", "(", "x", ",", "(", "2", ",", "3", ")", ",", "True", ")", "\n", "tmp", "=", "torch", ".", "mul", "(", "x", ",", "x", ")", "# or x ** 2", "\n", "tmp", "=", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "tmp", ",", "(", "2", ",", "3", ")", ",", "True", ")", "+", "self", ".", "epsilon", ")", "\n", "return", "x", "*", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_fix.ApplyStyle.__init__": [[29, 32], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "latent_size", ",", "channels", ")", ":", "\n", "        ", "super", "(", "ApplyStyle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "latent_size", ",", "channels", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_fix.ApplyStyle.forward": [[33, 40], ["fs_networks_fix.ApplyStyle.linear", "style.view.view.view", "x.size"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.linear"], ["", "def", "forward", "(", "self", ",", "x", ",", "latent", ")", ":", "\n", "        ", "style", "=", "self", ".", "linear", "(", "latent", ")", "# style => [batch_size, n_channels*2]", "\n", "shape", "=", "[", "-", "1", ",", "2", ",", "x", ".", "size", "(", "1", ")", ",", "1", ",", "1", "]", "\n", "style", "=", "style", ".", "view", "(", "shape", ")", "# [batch_size, 2, n_channels, ...]", "\n", "#x = x * (style[:, 0] + 1.) + style[:, 1]", "\n", "x", "=", "x", "*", "(", "style", "[", ":", ",", "0", "]", "*", "1", "+", "1.", ")", "+", "style", "[", ":", ",", "1", "]", "*", "1", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_fix.ResnetBlock_Adain.__init__": [[42, 73], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "fs_networks_fix.ApplyStyle", "torch.Sequential", "torch.Sequential", "fs_networks_fix.ApplyStyle", "torch.Conv2d", "torch.Conv2d", "fs_networks_fix.InstanceNorm", "torch.Conv2d", "torch.Conv2d", "fs_networks_fix.InstanceNorm", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "latent_size", ",", "padding_type", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "super", "(", "ResnetBlock_Adain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "p", "=", "0", "\n", "conv1", "=", "[", "]", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv1", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv1", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv1", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "InstanceNorm", "(", ")", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "*", "conv1", ")", "\n", "self", ".", "style1", "=", "ApplyStyle", "(", "latent_size", ",", "dim", ")", "\n", "self", ".", "act1", "=", "activation", "\n", "\n", "p", "=", "0", "\n", "conv2", "=", "[", "]", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv2", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv2", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv2", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "InstanceNorm", "(", ")", "]", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "*", "conv2", ")", "\n", "self", ".", "style2", "=", "ApplyStyle", "(", "latent_size", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_fix.ResnetBlock_Adain.forward": [[75, 83], ["fs_networks_fix.ResnetBlock_Adain.conv1", "fs_networks_fix.ResnetBlock_Adain.style1", "fs_networks_fix.ResnetBlock_Adain.act1", "fs_networks_fix.ResnetBlock_Adain.conv2", "fs_networks_fix.ResnetBlock_Adain.style2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "dlatents_in_slice", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv1", "(", "x", ")", "\n", "y", "=", "self", ".", "style1", "(", "y", ",", "dlatents_in_slice", ")", "\n", "y", "=", "self", ".", "act1", "(", "y", ")", "\n", "y", "=", "self", ".", "conv2", "(", "y", ")", "\n", "y", "=", "self", ".", "style2", "(", "y", ",", "dlatents_in_slice", ")", "\n", "out", "=", "x", "+", "y", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_fix.Generator_Adain_Upsample.__init__": [[87, 140], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "fs_networks_fix.ResnetBlock_Adain", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "latent_size", ",", "n_blocks", "=", "6", ",", "deep", "=", "False", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "Generator_Adain_Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "self", ".", "deep", "=", "deep", "\n", "\n", "self", ".", "first_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "64", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "64", ")", ",", "activation", ")", "\n", "### downsample", "\n", "self", ".", "down1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "128", ")", ",", "activation", ")", "\n", "self", ".", "down2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "256", ")", ",", "activation", ")", "\n", "self", ".", "down3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "activation", ")", "\n", "\n", "if", "self", ".", "deep", ":", "\n", "            ", "self", ".", "down4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "activation", ")", "\n", "\n", "### resnet blocks", "\n", "", "BN", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "BN", "+=", "[", "\n", "ResnetBlock_Adain", "(", "512", ",", "latent_size", "=", "latent_size", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ")", "]", "\n", "", "self", ".", "BottleNeck", "=", "nn", ".", "Sequential", "(", "*", "BN", ")", "\n", "\n", "if", "self", ".", "deep", ":", "\n", "            ", "self", ".", "up4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "activation", "\n", ")", "\n", "", "self", ".", "up3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "activation", "\n", ")", "\n", "self", ".", "up2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "activation", "\n", ")", "\n", "self", ".", "up1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "activation", "\n", ")", "\n", "self", ".", "last_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "64", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_fix.Generator_Adain_Upsample.forward": [[141, 173], ["fs_networks_fix.Generator_Adain_Upsample.first_layer", "fs_networks_fix.Generator_Adain_Upsample.down1", "fs_networks_fix.Generator_Adain_Upsample.down2", "bot.append", "range", "fs_networks_fix.Generator_Adain_Upsample.up3", "features.append", "fs_networks_fix.Generator_Adain_Upsample.up2", "features.append", "fs_networks_fix.Generator_Adain_Upsample.up1", "features.append", "fs_networks_fix.Generator_Adain_Upsample.last_layer", "fs_networks_fix.Generator_Adain_Upsample.down3", "fs_networks_fix.Generator_Adain_Upsample.down4", "fs_networks_fix.Generator_Adain_Upsample.down3", "len", "bot.append", "fs_networks_fix.Generator_Adain_Upsample.up4", "features.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "dlatents", ")", ":", "\n", "        ", "x", "=", "input", "# 3*224*224", "\n", "\n", "skip1", "=", "self", ".", "first_layer", "(", "x", ")", "\n", "skip2", "=", "self", ".", "down1", "(", "skip1", ")", "\n", "skip3", "=", "self", ".", "down2", "(", "skip2", ")", "\n", "if", "self", ".", "deep", ":", "\n", "            ", "skip4", "=", "self", ".", "down3", "(", "skip3", ")", "\n", "x", "=", "self", ".", "down4", "(", "skip4", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "down3", "(", "skip3", ")", "\n", "", "bot", "=", "[", "]", "\n", "bot", ".", "append", "(", "x", ")", "\n", "features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "BottleNeck", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "BottleNeck", "[", "i", "]", "(", "x", ",", "dlatents", ")", "\n", "bot", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "deep", ":", "\n", "            ", "x", "=", "self", ".", "up4", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "up3", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "up1", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "# x = (x + 1) / 2", "\n", "\n", "# return x, bot, features, dlatents", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_512.InstanceNorm.__init__": [[19, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"\n            @notice: avoid in-place ops.\n            https://discuss.pytorch.org/t/encounter-the-runtimeerror-one-of-the-variables-needed-for-gradient-computation-has-been-modified-by-an-inplace-operation/836/3\n        \"\"\"", "\n", "super", "(", "InstanceNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_512.InstanceNorm.forward": [[27, 32], ["torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "-", "torch", ".", "mean", "(", "x", ",", "(", "2", ",", "3", ")", ",", "True", ")", "\n", "tmp", "=", "torch", ".", "mul", "(", "x", ",", "x", ")", "# or x ** 2", "\n", "tmp", "=", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "tmp", ",", "(", "2", ",", "3", ")", ",", "True", ")", "+", "self", ".", "epsilon", ")", "\n", "return", "x", "*", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_512.ApplyStyle.__init__": [[37, 40], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "latent_size", ",", "channels", ")", ":", "\n", "        ", "super", "(", "ApplyStyle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "latent_size", ",", "channels", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_512.ApplyStyle.forward": [[41, 48], ["fs_networks_512.ApplyStyle.linear", "style.view.view.view", "x.size"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.linear"], ["", "def", "forward", "(", "self", ",", "x", ",", "latent", ")", ":", "\n", "        ", "style", "=", "self", ".", "linear", "(", "latent", ")", "# style => [batch_size, n_channels*2]", "\n", "shape", "=", "[", "-", "1", ",", "2", ",", "x", ".", "size", "(", "1", ")", ",", "1", ",", "1", "]", "\n", "style", "=", "style", ".", "view", "(", "shape", ")", "# [batch_size, 2, n_channels, ...]", "\n", "#x = x * (style[:, 0] + 1.) + style[:, 1]", "\n", "x", "=", "x", "*", "(", "style", "[", ":", ",", "0", "]", "*", "1", "+", "1.", ")", "+", "style", "[", ":", ",", "1", "]", "*", "1", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_512.ResnetBlock_Adain.__init__": [[50, 81], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "fs_networks_512.ApplyStyle", "torch.Sequential", "torch.Sequential", "fs_networks_512.ApplyStyle", "torch.Conv2d", "torch.Conv2d", "fs_networks_512.InstanceNorm", "torch.Conv2d", "torch.Conv2d", "fs_networks_512.InstanceNorm", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "latent_size", ",", "padding_type", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "super", "(", "ResnetBlock_Adain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "p", "=", "0", "\n", "conv1", "=", "[", "]", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv1", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv1", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv1", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "InstanceNorm", "(", ")", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "*", "conv1", ")", "\n", "self", ".", "style1", "=", "ApplyStyle", "(", "latent_size", ",", "dim", ")", "\n", "self", ".", "act1", "=", "activation", "\n", "\n", "p", "=", "0", "\n", "conv2", "=", "[", "]", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv2", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv2", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv2", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "InstanceNorm", "(", ")", "]", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "*", "conv2", ")", "\n", "self", ".", "style2", "=", "ApplyStyle", "(", "latent_size", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_512.ResnetBlock_Adain.forward": [[83, 91], ["fs_networks_512.ResnetBlock_Adain.conv1", "fs_networks_512.ResnetBlock_Adain.style1", "fs_networks_512.ResnetBlock_Adain.act1", "fs_networks_512.ResnetBlock_Adain.conv2", "fs_networks_512.ResnetBlock_Adain.style2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "dlatents_in_slice", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv1", "(", "x", ")", "\n", "y", "=", "self", ".", "style1", "(", "y", ",", "dlatents_in_slice", ")", "\n", "y", "=", "self", ".", "act1", "(", "y", ")", "\n", "y", "=", "self", ".", "conv2", "(", "y", ")", "\n", "y", "=", "self", ".", "style2", "(", "y", ",", "dlatents_in_slice", ")", "\n", "out", "=", "x", "+", "y", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_512.Generator_Adain_Upsample.__init__": [[95, 153], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "fs_networks_512.ResnetBlock_Adain", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "latent_size", ",", "n_blocks", "=", "6", ",", "deep", "=", "False", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "Generator_Adain_Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "deep", "=", "deep", "\n", "\n", "self", ".", "first_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "32", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "32", ")", ",", "activation", ")", "\n", "### downsample", "\n", "self", ".", "down0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "64", ")", ",", "activation", ")", "\n", "self", ".", "down1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "128", ")", ",", "activation", ")", "\n", "self", ".", "down2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "256", ")", ",", "activation", ")", "\n", "self", ".", "down3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "activation", ")", "\n", "if", "self", ".", "deep", ":", "\n", "            ", "self", ".", "down4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "activation", ")", "\n", "\n", "### resnet blocks", "\n", "", "BN", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "BN", "+=", "[", "\n", "ResnetBlock_Adain", "(", "512", ",", "latent_size", "=", "latent_size", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "activation", ")", "]", "\n", "", "self", ".", "BottleNeck", "=", "nn", ".", "Sequential", "(", "*", "BN", ")", "\n", "\n", "if", "self", ".", "deep", ":", "\n", "            ", "self", ".", "up4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "activation", "\n", ")", "\n", "", "self", ".", "up3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "activation", "\n", ")", "\n", "self", ".", "up2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "activation", "\n", ")", "\n", "self", ".", "up1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "activation", "\n", ")", "\n", "self", ".", "up0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "activation", "\n", ")", "\n", "self", ".", "last_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "32", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_512.Generator_Adain_Upsample.forward": [[154, 180], ["fs_networks_512.Generator_Adain_Upsample.first_layer", "fs_networks_512.Generator_Adain_Upsample.down0", "fs_networks_512.Generator_Adain_Upsample.down1", "fs_networks_512.Generator_Adain_Upsample.down2", "range", "fs_networks_512.Generator_Adain_Upsample.up3", "fs_networks_512.Generator_Adain_Upsample.up2", "fs_networks_512.Generator_Adain_Upsample.up1", "fs_networks_512.Generator_Adain_Upsample.up0", "fs_networks_512.Generator_Adain_Upsample.last_layer", "fs_networks_512.Generator_Adain_Upsample.down3", "fs_networks_512.Generator_Adain_Upsample.down4", "fs_networks_512.Generator_Adain_Upsample.down3", "len", "fs_networks_512.Generator_Adain_Upsample.up4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "dlatents", ")", ":", "\n", "        ", "x", "=", "input", "# 3*224*224", "\n", "\n", "skip0", "=", "self", ".", "first_layer", "(", "x", ")", "\n", "skip1", "=", "self", ".", "down0", "(", "skip0", ")", "\n", "skip2", "=", "self", ".", "down1", "(", "skip1", ")", "\n", "skip3", "=", "self", ".", "down2", "(", "skip2", ")", "\n", "if", "self", ".", "deep", ":", "\n", "            ", "skip4", "=", "self", ".", "down3", "(", "skip3", ")", "\n", "x", "=", "self", ".", "down4", "(", "skip4", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "down3", "(", "skip3", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "BottleNeck", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "BottleNeck", "[", "i", "]", "(", "x", ",", "dlatents", ")", "\n", "\n", "", "if", "self", ".", "deep", ":", "\n", "            ", "x", "=", "self", ".", "up4", "(", "x", ")", "\n", "", "x", "=", "self", ".", "up3", "(", "x", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ")", "\n", "x", "=", "self", ".", "up1", "(", "x", ")", "\n", "x", "=", "self", ".", "up0", "(", "x", ")", "\n", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "x", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_512.Discriminator.__init__": [[182, 215], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "self", ".", "down1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "64", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "self", ".", "down2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "128", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "self", ".", "down3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "256", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "self", ".", "down4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.fs_networks_512.Discriminator.forward": [[217, 233], ["fs_networks_512.Discriminator.down1", "out.append", "fs_networks_512.Discriminator.down2", "out.append", "fs_networks_512.Discriminator.down3", "out.append", "fs_networks_512.Discriminator.down4", "out.append", "fs_networks_512.Discriminator.conv1", "out.append", "fs_networks_512.Discriminator.conv2", "out.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "x", "=", "self", ".", "down1", "(", "input", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "down2", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "down3", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "down4", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.name": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'UIModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.initialize": [[15, 32], ["base_model.BaseModel.initialize", "networks.define_G", "ui_model.UIModel.load_network", "print"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.networks.define_G", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "assert", "(", "not", "opt", ".", "isTrain", ")", "\n", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "self", ".", "use_features", "=", "opt", ".", "instance_feat", "or", "opt", ".", "label_feat", "\n", "\n", "netG_input_nc", "=", "opt", ".", "label_nc", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "netG_input_nc", "+=", "1", "\n", "", "if", "self", ".", "use_features", ":", "\n", "            ", "netG_input_nc", "+=", "opt", ".", "feat_num", "\n", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "netG_input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "n_downsample_global", ",", "opt", ".", "n_blocks_global", ",", "opt", ".", "n_local_enhancers", ",", "\n", "opt", ".", "n_blocks_local", ",", "opt", ".", "norm", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ")", "\n", "\n", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.toTensor": [[33, 40], ["torch.from_numpy", "tensor.transpose().transpose().contiguous.transpose().transpose().contiguous.view", "tensor.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose().contiguous", "tensor.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "numpy.array", "len", "tensor.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose", "tensor.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose", "tensor.transpose().transpose().contiguous.transpose().transpose().contiguous.float"], "methods", ["None"], ["", "def", "toTensor", "(", "self", ",", "img", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "tensor", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "tensor", "=", "tensor", ".", "view", "(", "1", ",", "img", ".", "size", "[", "1", "]", ",", "img", ".", "size", "[", "0", "]", ",", "len", "(", "img", ".", "mode", ")", ")", "\n", "tensor", "=", "tensor", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "if", "normalize", ":", "\n", "            ", "return", "(", "tensor", ".", "float", "(", ")", "/", "255.0", "-", "0.5", ")", "/", "0.5", "\n", "", "return", "tensor", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.load_image": [[41, 90], ["PIL.Image.open", "int", "label_img.convert.convert.resize", "ui_model.UIModel.toTensor", "ui_model.UIModel.cuda", "ui_model.UIModel.Tensor().zero_", "ui_model.UIModel.scatter_", "numpy.load().item", "ui_model.UIModel.object_map.cpu().numpy().astype", "ui_model.UIModel.Tensor().zero_", "numpy.zeros", "numpy.unique", "ui_model.UIModel.net_input.clone", "ui_model.UIModel.label_map.clone", "ui_model.UIModel.feat_map.clone", "label_path.find", "label_img.convert.convert.convert", "ui_model.UIModel.long().cuda", "PIL.Image.open", "inst_img.resize.resize.resize", "ui_model.UIModel.toTensor().cuda", "ui_model.UIModel.get_edges", "torch.autograd.Variable", "torch.autograd.Variable", "ui_model.UIModel.inst_map.clone", "ui_model.UIModel.Tensor", "torch.cat", "numpy.load", "ui_model.UIModel.object_map.cpu().numpy", "ui_model.UIModel.Tensor", "numpy.random.seed", "numpy.random.randint", "ui_model.UIModel.set_features", "torch.Size", "ui_model.UIModel.long", "ui_model.UIModel.toTensor", "ui_model.UIModel.object_map.cpu"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.toTensor", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.get_edges", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.set_features", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.toTensor"], ["", "def", "load_image", "(", "self", ",", "label_path", ",", "inst_path", ",", "feat_path", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "# read label map", "\n", "label_img", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "if", "label_path", ".", "find", "(", "'face'", ")", "!=", "-", "1", ":", "\n", "            ", "label_img", "=", "label_img", ".", "convert", "(", "'L'", ")", "\n", "", "ow", ",", "oh", "=", "label_img", ".", "size", "\n", "w", "=", "opt", ".", "loadSize", "\n", "h", "=", "int", "(", "w", "*", "oh", "/", "ow", ")", "\n", "label_img", "=", "label_img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "label_map", "=", "self", ".", "toTensor", "(", "label_img", ")", "\n", "\n", "# onehot vector input for label map", "\n", "self", ".", "label_map", "=", "label_map", ".", "cuda", "(", ")", "\n", "oneHot_size", "=", "(", "1", ",", "opt", ".", "label_nc", ",", "h", ",", "w", ")", "\n", "input_label", "=", "self", ".", "Tensor", "(", "torch", ".", "Size", "(", "oneHot_size", ")", ")", ".", "zero_", "(", ")", "\n", "self", ".", "input_label", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "1.0", ")", "\n", "\n", "# read instance map", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "inst_img", "=", "Image", ".", "open", "(", "inst_path", ")", "\n", "inst_img", "=", "inst_img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "self", ".", "inst_map", "=", "self", ".", "toTensor", "(", "inst_img", ")", ".", "cuda", "(", ")", "\n", "self", ".", "edge_map", "=", "self", ".", "get_edges", "(", "self", ".", "inst_map", ")", "\n", "self", ".", "net_input", "=", "Variable", "(", "torch", ".", "cat", "(", "(", "self", ".", "input_label", ",", "self", ".", "edge_map", ")", ",", "dim", "=", "1", ")", ",", "volatile", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net_input", "=", "Variable", "(", "self", ".", "input_label", ",", "volatile", "=", "True", ")", "\n", "\n", "", "self", ".", "features_clustered", "=", "np", ".", "load", "(", "feat_path", ")", ".", "item", "(", ")", "\n", "self", ".", "object_map", "=", "self", ".", "inst_map", "if", "opt", ".", "instance_feat", "else", "self", ".", "label_map", "\n", "\n", "object_np", "=", "self", ".", "object_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "feat_map", "=", "self", ".", "Tensor", "(", "1", ",", "opt", ".", "feat_num", ",", "h", ",", "w", ")", ".", "zero_", "(", ")", "\n", "self", ".", "cluster_indices", "=", "np", ".", "zeros", "(", "self", ".", "opt", ".", "label_nc", ",", "np", ".", "uint8", ")", "\n", "for", "i", "in", "np", ".", "unique", "(", "object_np", ")", ":", "\n", "            ", "label", "=", "i", "if", "i", "<", "1000", "else", "i", "//", "1000", "\n", "if", "label", "in", "self", ".", "features_clustered", ":", "\n", "                ", "feat", "=", "self", ".", "features_clustered", "[", "label", "]", "\n", "np", ".", "random", ".", "seed", "(", "i", "+", "1", ")", "\n", "cluster_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "feat", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "cluster_indices", "[", "label", "]", "=", "cluster_idx", "\n", "idx", "=", "(", "self", ".", "object_map", "==", "i", ")", ".", "nonzero", "(", ")", "\n", "self", ".", "set_features", "(", "idx", ",", "feat", ",", "cluster_idx", ")", "\n", "\n", "", "", "self", ".", "net_input_original", "=", "self", ".", "net_input", ".", "clone", "(", ")", "\n", "self", ".", "label_map_original", "=", "self", ".", "label_map", ".", "clone", "(", ")", "\n", "self", ".", "feat_map_original", "=", "self", ".", "feat_map", ".", "clone", "(", ")", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "self", ".", "inst_map_original", "=", "self", ".", "inst_map", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.reset": [[91, 98], ["ui_model.UIModel.net_input_original.clone", "ui_model.UIModel.label_map_original.clone", "ui_model.UIModel.feat_map_original.clone", "ui_model.UIModel.inst_map_original.clone"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "net_input", "=", "self", ".", "net_input_prev", "=", "self", ".", "net_input_original", ".", "clone", "(", ")", "\n", "self", ".", "label_map", "=", "self", ".", "label_map_prev", "=", "self", ".", "label_map_original", ".", "clone", "(", ")", "\n", "self", ".", "feat_map", "=", "self", ".", "feat_map_prev", "=", "self", ".", "feat_map_original", ".", "clone", "(", ")", "\n", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "self", ".", "inst_map", "=", "self", ".", "inst_map_prev", "=", "self", ".", "inst_map_original", ".", "clone", "(", ")", "\n", "", "self", ".", "object_map", "=", "self", ".", "inst_map", "if", "self", ".", "opt", ".", "instance_feat", "else", "self", ".", "label_map", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.undo": [[99, 106], ["None"], "methods", ["None"], ["", "def", "undo", "(", "self", ")", ":", "\n", "        ", "self", ".", "net_input", "=", "self", ".", "net_input_prev", "\n", "self", ".", "label_map", "=", "self", ".", "label_map_prev", "\n", "self", ".", "feat_map", "=", "self", ".", "feat_map_prev", "\n", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "self", ".", "inst_map", "=", "self", ".", "inst_map_prev", "\n", "", "self", ".", "object_map", "=", "self", ".", "inst_map", "if", "self", ".", "opt", ".", "instance_feat", "else", "self", ".", "label_map", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.get_edges": [[108, 115], ["torch.cuda.ByteTensor().zero_", "torch.cuda.ByteTensor().zero_.float", "torch.cuda.ByteTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.change_labels": [[117, 150], ["int", "int", "util.tensor2im", "ui_model.UIModel.backup_current_state", "ui_model.UIModel.get_edges", "ui_model.UIModel.single_forward", "ui_model.UIModel.copy_features", "ui_model.UIModel.inst_map[].max"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.tensor2im", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.backup_current_state", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.get_edges", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.single_forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.copy_features"], ["", "def", "change_labels", "(", "self", ",", "click_src", ",", "click_tgt", ")", ":", "\n", "        ", "y_src", ",", "x_src", "=", "click_src", "[", "0", "]", ",", "click_src", "[", "1", "]", "\n", "y_tgt", ",", "x_tgt", "=", "click_tgt", "[", "0", "]", ",", "click_tgt", "[", "1", "]", "\n", "label_src", "=", "int", "(", "self", ".", "label_map", "[", "0", ",", "0", ",", "y_src", ",", "x_src", "]", ")", "\n", "inst_src", "=", "self", ".", "inst_map", "[", "0", ",", "0", ",", "y_src", ",", "x_src", "]", "\n", "label_tgt", "=", "int", "(", "self", ".", "label_map", "[", "0", ",", "0", ",", "y_tgt", ",", "x_tgt", "]", ")", "\n", "inst_tgt", "=", "self", ".", "inst_map", "[", "0", ",", "0", ",", "y_tgt", ",", "x_tgt", "]", "\n", "\n", "idx_src", "=", "(", "self", ".", "inst_map", "==", "inst_src", ")", ".", "nonzero", "(", ")", "\n", "# need to change 3 things: label map, instance map, and feature map", "\n", "if", "idx_src", ".", "shape", ":", "\n", "# backup current maps", "\n", "            ", "self", ".", "backup_current_state", "(", ")", "\n", "\n", "# change both the label map and the network input", "\n", "self", ".", "label_map", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "label_tgt", "\n", "self", ".", "net_input", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", "+", "label_src", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "0", "\n", "self", ".", "net_input", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", "+", "label_tgt", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "1", "\n", "\n", "# update the instance map (and the network input)", "\n", "if", "inst_tgt", ">", "1000", ":", "\n", "# if different instances have different ids, give the new object a new id", "\n", "                ", "tgt_indices", "=", "(", "self", ".", "inst_map", ">", "label_tgt", "*", "1000", ")", "&", "(", "self", ".", "inst_map", "<", "(", "label_tgt", "+", "1", ")", "*", "1000", ")", "\n", "inst_tgt", "=", "self", ".", "inst_map", "[", "tgt_indices", "]", ".", "max", "(", ")", "+", "1", "\n", "", "self", ".", "inst_map", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "inst_tgt", "\n", "self", ".", "net_input", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", "=", "self", ".", "get_edges", "(", "self", ".", "inst_map", ")", "\n", "\n", "# also copy the source features to the target position      ", "\n", "idx_tgt", "=", "(", "self", ".", "inst_map", "==", "inst_tgt", ")", ".", "nonzero", "(", ")", "\n", "if", "idx_tgt", ".", "shape", ":", "\n", "                ", "self", ".", "copy_features", "(", "idx_src", ",", "idx_tgt", "[", "0", ",", ":", "]", ")", "\n", "\n", "", "", "self", ".", "fake_image", "=", "util", ".", "tensor2im", "(", "self", ".", "single_forward", "(", "self", ".", "net_input", ",", "self", ".", "feat_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.add_strokes": [[152, 188], ["ui_model.UIModel.net_input.size", "torch.LongTensor().fill_", "range", "idx_src.cuda.cuda.cuda", "util.tensor2im", "min", "range", "range", "ui_model.UIModel.get_edges", "ui_model.UIModel.single_forward", "torch.LongTensor", "max", "min", "ui_model.UIModel.backup_current_state", "ui_model.UIModel.set_features", "max"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.tensor2im", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.get_edges", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.single_forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.backup_current_state", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.set_features"], ["", "def", "add_strokes", "(", "self", ",", "click_src", ",", "label_tgt", ",", "bw", ",", "save", ")", ":", "\n", "# get the region of the new strokes (bw is the brush width)        ", "\n", "        ", "size", "=", "self", ".", "net_input", ".", "size", "(", ")", "\n", "h", ",", "w", "=", "size", "[", "2", "]", ",", "size", "[", "3", "]", "\n", "idx_src", "=", "torch", ".", "LongTensor", "(", "bw", "**", "2", ",", "4", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "bw", ")", ":", "\n", "            ", "idx_src", "[", "i", "*", "bw", ":", "(", "i", "+", "1", ")", "*", "bw", ",", "2", "]", "=", "min", "(", "h", "-", "1", ",", "max", "(", "0", ",", "click_src", "[", "0", "]", "-", "bw", "//", "2", "+", "i", ")", ")", "\n", "for", "j", "in", "range", "(", "bw", ")", ":", "\n", "                ", "idx_src", "[", "i", "*", "bw", "+", "j", ",", "3", "]", "=", "min", "(", "w", "-", "1", ",", "max", "(", "0", ",", "click_src", "[", "1", "]", "-", "bw", "//", "2", "+", "j", ")", ")", "\n", "", "", "idx_src", "=", "idx_src", ".", "cuda", "(", ")", "\n", "\n", "# again, need to update 3 things", "\n", "if", "idx_src", ".", "shape", ":", "\n", "# backup current maps", "\n", "            ", "if", "save", ":", "\n", "                ", "self", ".", "backup_current_state", "(", ")", "\n", "\n", "# update the label map (and the network input) in the stroke region            ", "\n", "", "self", ".", "label_map", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "label_tgt", "\n", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "label_nc", ")", ":", "\n", "                ", "self", ".", "net_input", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", "+", "k", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "0", "\n", "", "self", ".", "net_input", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", "+", "label_tgt", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "1", "\n", "\n", "# update the instance map (and the network input)", "\n", "self", ".", "inst_map", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "label_tgt", "\n", "self", ".", "net_input", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", "=", "self", ".", "get_edges", "(", "self", ".", "inst_map", ")", "\n", "\n", "# also update the features if available", "\n", "if", "self", ".", "opt", ".", "instance_feat", ":", "\n", "                ", "feat", "=", "self", ".", "features_clustered", "[", "label_tgt", "]", "\n", "#np.random.seed(label_tgt+1)   ", "\n", "#cluster_idx = np.random.randint(0, feat.shape[0])", "\n", "cluster_idx", "=", "self", ".", "cluster_indices", "[", "label_tgt", "]", "\n", "self", ".", "set_features", "(", "idx_src", ",", "feat", ",", "cluster_idx", ")", "\n", "\n", "", "", "self", ".", "fake_image", "=", "util", ".", "tensor2im", "(", "self", ".", "single_forward", "(", "self", ".", "net_input", ",", "self", ".", "feat_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.add_objects": [[190, 214], ["torch.from_numpy().cuda().nonzero", "ui_model.UIModel.backup_current_state", "range", "ui_model.UIModel.get_edges", "ui_model.UIModel.set_features", "util.tensor2im", "numpy.transpose", "ui_model.UIModel.single_forward", "torch.from_numpy().cuda", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.backup_current_state", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.get_edges", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.set_features", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.tensor2im", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.single_forward"], ["", "def", "add_objects", "(", "self", ",", "click_src", ",", "label_tgt", ",", "mask", ",", "style_id", "=", "0", ")", ":", "\n", "        ", "y", ",", "x", "=", "click_src", "[", "0", "]", ",", "click_src", "[", "1", "]", "\n", "mask", "=", "np", ".", "transpose", "(", "mask", ",", "(", "2", ",", "0", ",", "1", ")", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "idx_src", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "cuda", "(", ")", ".", "nonzero", "(", ")", "\n", "idx_src", "[", ":", ",", "2", "]", "+=", "y", "\n", "idx_src", "[", ":", ",", "3", "]", "+=", "x", "\n", "\n", "# backup current maps", "\n", "self", ".", "backup_current_state", "(", ")", "\n", "\n", "# update label map", "\n", "self", ".", "label_map", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "label_tgt", "\n", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "label_nc", ")", ":", "\n", "            ", "self", ".", "net_input", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", "+", "k", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "0", "\n", "", "self", ".", "net_input", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", "+", "label_tgt", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "1", "\n", "\n", "# update instance map", "\n", "self", ".", "inst_map", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "label_tgt", "\n", "self", ".", "net_input", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", "=", "self", ".", "get_edges", "(", "self", ".", "inst_map", ")", "\n", "\n", "# update feature map", "\n", "self", ".", "set_features", "(", "idx_src", ",", "self", ".", "feat", ",", "style_id", ")", "\n", "\n", "self", ".", "fake_image", "=", "util", ".", "tensor2im", "(", "self", ".", "single_forward", "(", "self", ".", "net_input", ",", "self", ".", "feat_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.single_forward": [[215, 222], ["torch.cat", "ui_model.UIModel.netG.forward", "ui_model.UIModel.size"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward"], ["", "def", "single_forward", "(", "self", ",", "net_input", ",", "feat_map", ")", ":", "\n", "        ", "net_input", "=", "torch", ".", "cat", "(", "(", "net_input", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "fake_image", "=", "self", ".", "netG", ".", "forward", "(", "net_input", ")", "\n", "\n", "if", "fake_image", ".", "size", "(", ")", "[", "0", "]", "==", "1", ":", "\n", "            ", "return", "fake_image", ".", "data", "[", "0", "]", "\n", "", "return", "fake_image", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.style_forward": [[225, 285], ["util.tensor2im", "int", "ui_model.UIModel.mask.nonzero", "ui_model.UIModel.get_crop_region", "ui_model.UIModel.size", "ui_model.UIModel.single_forward", "range", "ui_model.UIModel.set_features", "util.tensor2im", "ui_model.UIModel.set_features", "ui_model.UIModel.single_forward", "util.tensor2im", "ui_model.UIModel.fake_image.append", "ui_model.UIModel.single_forward"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.tensor2im", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.get_crop_region", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.single_forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.set_features", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.tensor2im", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.set_features", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.single_forward", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.tensor2im", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.single_forward"], ["", "def", "style_forward", "(", "self", ",", "click_pt", ",", "style_id", "=", "-", "1", ")", ":", "\n", "        ", "if", "click_pt", "is", "None", ":", "\n", "            ", "self", ".", "fake_image", "=", "util", ".", "tensor2im", "(", "self", ".", "single_forward", "(", "self", ".", "net_input", ",", "self", ".", "feat_map", ")", ")", "\n", "self", ".", "crop", "=", "None", "\n", "self", ".", "mask", "=", "None", "\n", "", "else", ":", "\n", "            ", "instToChange", "=", "int", "(", "self", ".", "object_map", "[", "0", ",", "0", ",", "click_pt", "[", "0", "]", ",", "click_pt", "[", "1", "]", "]", ")", "\n", "self", ".", "instToChange", "=", "instToChange", "\n", "label", "=", "instToChange", "if", "instToChange", "<", "1000", "else", "instToChange", "//", "1000", "\n", "self", ".", "feat", "=", "self", ".", "features_clustered", "[", "label", "]", "\n", "self", ".", "fake_image", "=", "[", "]", "\n", "self", ".", "mask", "=", "self", ".", "object_map", "==", "instToChange", "\n", "idx", "=", "self", ".", "mask", ".", "nonzero", "(", ")", "\n", "self", ".", "get_crop_region", "(", "idx", ")", "\n", "if", "idx", ".", "size", "(", ")", ":", "\n", "                ", "if", "style_id", "==", "-", "1", ":", "\n", "                    ", "(", "min_y", ",", "min_x", ",", "max_y", ",", "max_x", ")", "=", "self", ".", "crop", "\n", "### original", "\n", "for", "cluster_idx", "in", "range", "(", "self", ".", "opt", ".", "multiple_output", ")", ":", "\n", "                        ", "self", ".", "set_features", "(", "idx", ",", "self", ".", "feat", ",", "cluster_idx", ")", "\n", "fake_image", "=", "self", ".", "single_forward", "(", "self", ".", "net_input", ",", "self", ".", "feat_map", ")", "\n", "fake_image", "=", "util", ".", "tensor2im", "(", "fake_image", "[", ":", ",", "min_y", ":", "max_y", ",", "min_x", ":", "max_x", "]", ")", "\n", "self", ".", "fake_image", ".", "append", "(", "fake_image", ")", "\n", "", "\"\"\"### To speed up previewing different style results, either crop or downsample the label maps\n                    if instToChange > 1000:\n                        (min_y, min_x, max_y, max_x) = self.crop                                                \n                        ### crop                                                \n                        _, _, h, w = self.net_input.size()\n                        offset = 512\n                        y_start, x_start = max(0, min_y-offset), max(0, min_x-offset)\n                        y_end, x_end = min(h, (max_y + offset)), min(w, (max_x + offset))\n                        y_region = slice(y_start, y_start+(y_end-y_start)//16*16)\n                        x_region = slice(x_start, x_start+(x_end-x_start)//16*16)\n                        net_input = self.net_input[:,:,y_region,x_region]                    \n                        for cluster_idx in range(self.opt.multiple_output):  \n                            self.set_features(idx, self.feat, cluster_idx)\n                            fake_image = self.single_forward(net_input, self.feat_map[:,:,y_region,x_region])                            \n                            fake_image = util.tensor2im(fake_image[:,min_y-y_start:max_y-y_start,min_x-x_start:max_x-x_start])\n                            self.fake_image.append(fake_image)\n                    else:\n                        ### downsample\n                        (min_y, min_x, max_y, max_x) = [crop//2 for crop in self.crop]                    \n                        net_input = self.net_input[:,:,::2,::2]                    \n                        size = net_input.size()\n                        net_input_batch = net_input.expand(self.opt.multiple_output, size[1], size[2], size[3])             \n                        for cluster_idx in range(self.opt.multiple_output):  \n                            self.set_features(idx, self.feat, cluster_idx)\n                            feat_map = self.feat_map[:,:,::2,::2]\n                            if cluster_idx == 0:\n                                feat_map_batch = feat_map\n                            else:\n                                feat_map_batch = torch.cat((feat_map_batch, feat_map), dim=0)\n                        fake_image_batch = self.single_forward(net_input_batch, feat_map_batch)\n                        for i in range(self.opt.multiple_output):\n                            self.fake_image.append(util.tensor2im(fake_image_batch[i,:,min_y:max_y,min_x:max_x]))\"\"\"", "\n", "\n", "", "else", ":", "\n", "                    ", "self", ".", "set_features", "(", "idx", ",", "self", ".", "feat", ",", "style_id", ")", "\n", "self", ".", "cluster_indices", "[", "label", "]", "=", "style_id", "\n", "self", ".", "fake_image", "=", "util", ".", "tensor2im", "(", "self", ".", "single_forward", "(", "self", ".", "net_input", ",", "self", ".", "feat_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.backup_current_state": [[286, 291], ["ui_model.UIModel.net_input.clone", "ui_model.UIModel.label_map.clone", "ui_model.UIModel.inst_map.clone", "ui_model.UIModel.feat_map.clone"], "methods", ["None"], ["", "", "", "", "def", "backup_current_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "net_input_prev", "=", "self", ".", "net_input", ".", "clone", "(", ")", "\n", "self", ".", "label_map_prev", "=", "self", ".", "label_map", ".", "clone", "(", ")", "\n", "self", ".", "inst_map_prev", "=", "self", ".", "inst_map", ".", "clone", "(", ")", "\n", "self", ".", "feat_map_prev", "=", "self", ".", "feat_map", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.get_crop_region": [[293, 307], ["ui_model.UIModel.net_input.size", "idx[].min", "idx[].min", "idx[].max", "idx[].max", "max", "min", "max", "min"], "methods", ["None"], ["", "def", "get_crop_region", "(", "self", ",", "idx", ")", ":", "\n", "        ", "size", "=", "self", ".", "net_input", ".", "size", "(", ")", "\n", "h", ",", "w", "=", "size", "[", "2", "]", ",", "size", "[", "3", "]", "\n", "min_y", ",", "min_x", "=", "idx", "[", ":", ",", "2", "]", ".", "min", "(", ")", ",", "idx", "[", ":", ",", "3", "]", ".", "min", "(", ")", "\n", "max_y", ",", "max_x", "=", "idx", "[", ":", ",", "2", "]", ".", "max", "(", ")", ",", "idx", "[", ":", ",", "3", "]", ".", "max", "(", ")", "\n", "crop_min", "=", "128", "\n", "if", "max_y", "-", "min_y", "<", "crop_min", ":", "\n", "            ", "min_y", "=", "max", "(", "0", ",", "(", "max_y", "+", "min_y", ")", "//", "2", "-", "crop_min", "//", "2", ")", "\n", "max_y", "=", "min", "(", "h", "-", "1", ",", "min_y", "+", "crop_min", ")", "\n", "", "if", "max_x", "-", "min_x", "<", "crop_min", ":", "\n", "            ", "min_x", "=", "max", "(", "0", ",", "(", "max_x", "+", "min_x", ")", "//", "2", "-", "crop_min", "//", "2", ")", "\n", "max_x", "=", "min", "(", "w", "-", "1", ",", "min_x", "+", "crop_min", ")", "\n", "", "self", ".", "crop", "=", "(", "min_y", ",", "min_x", ",", "max_y", ",", "max_x", ")", "\n", "self", ".", "mask", "=", "self", ".", "mask", "[", ":", ",", ":", ",", "min_y", ":", "max_y", ",", "min_x", ":", "max_x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.update_features": [[309, 324], ["ui_model.UIModel.feat_map.clone", "ui_model.UIModel.set_features", "torch.from_numpy().cuda().nonzero", "numpy.transpose", "torch.from_numpy().cuda", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.set_features"], ["", "def", "update_features", "(", "self", ",", "cluster_idx", ",", "mask", "=", "None", ",", "click_pt", "=", "None", ")", ":", "\n", "        ", "self", ".", "feat_map_prev", "=", "self", ".", "feat_map", ".", "clone", "(", ")", "\n", "# adding a new object", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "y", ",", "x", "=", "click_pt", "[", "0", "]", ",", "click_pt", "[", "1", "]", "\n", "mask", "=", "np", ".", "transpose", "(", "mask", ",", "(", "2", ",", "0", ",", "1", ")", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "idx", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "cuda", "(", ")", ".", "nonzero", "(", ")", "\n", "idx", "[", ":", ",", "2", "]", "+=", "y", "\n", "idx", "[", ":", ",", "3", "]", "+=", "x", "\n", "# changing the label of an existing object ", "\n", "", "else", ":", "\n", "            ", "idx", "=", "(", "self", ".", "object_map", "==", "self", ".", "instToChange", ")", ".", "nonzero", "(", ")", "\n", "\n", "# update feature map", "\n", "", "self", ".", "set_features", "(", "idx", ",", "self", ".", "feat", ",", "cluster_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.set_features": [[326, 329], ["range"], "methods", ["None"], ["", "def", "set_features", "(", "self", ",", "idx", ",", "feat", ",", "cluster_idx", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "feat_num", ")", ":", "\n", "            ", "self", ".", "feat_map", "[", "idx", "[", ":", ",", "0", "]", ",", "idx", "[", ":", ",", "1", "]", "+", "k", ",", "idx", "[", ":", ",", "2", "]", ",", "idx", "[", ":", ",", "3", "]", "]", "=", "feat", "[", "cluster_idx", ",", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.copy_features": [[331, 335], ["range"], "methods", ["None"], ["", "", "def", "copy_features", "(", "self", ",", "idx_src", ",", "idx_tgt", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "self", ".", "opt", ".", "feat_num", ")", ":", "\n", "            ", "val", "=", "self", ".", "feat_map", "[", "idx_tgt", "[", "0", "]", ",", "idx_tgt", "[", "1", "]", "+", "k", ",", "idx_tgt", "[", "2", "]", ",", "idx_tgt", "[", "3", "]", "]", "\n", "self", ".", "feat_map", "[", "idx_src", "[", ":", ",", "0", "]", ",", "idx_src", "[", ":", ",", "1", "]", "+", "k", ",", "idx_src", "[", ":", ",", "2", "]", ",", "idx_src", "[", ":", ",", "3", "]", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.ui_model.UIModel.get_current_visuals": [[336, 348], ["collections.OrderedDict", "numpy.transpose().astype", "util.tensor2label", "numpy.transpose", "ui_model.UIModel.mask[].cpu().float().numpy", "ui_model.UIModel.mask[].cpu().float", "ui_model.UIModel.mask[].cpu"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.tensor2label"], ["", "", "def", "get_current_visuals", "(", "self", ",", "getLabel", "=", "False", ")", ":", "\n", "        ", "mask", "=", "self", ".", "mask", "\n", "if", "self", ".", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "np", ".", "transpose", "(", "self", ".", "mask", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "dict_list", "=", "[", "(", "'fake_image'", ",", "self", ".", "fake_image", ")", ",", "(", "'mask'", ",", "mask", ")", "]", "\n", "\n", "if", "getLabel", ":", "# only output label map if needed to save bandwidth", "\n", "            ", "label", "=", "util", ".", "tensor2label", "(", "self", ".", "net_input", ".", "data", "[", "0", "]", ",", "self", ".", "opt", ".", "label_nc", ")", "\n", "dict_list", "+=", "[", "(", "'label'", ",", "label", ")", "]", "\n", "\n", "", "return", "OrderedDict", "(", "dict_list", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.name": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.initialize": [[9, 15], ["os.path.join"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "gpu_ids", "else", "torch", ".", "Tensor", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.set_input": [[16, 18], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.forward": [[19, 21], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.test": [[23, 25], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.get_image_paths": [[26, 28], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.optimize_parameters": [[29, 31], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.get_current_visuals": [[32, 34], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.get_current_errors": [[35, 37], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.save": [[38, 40], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.save_network": [[42, 48], ["os.path.join", "torch.save", "torch.cuda.is_available", "network.cpu().state_dict", "network.cuda", "network.cpu"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.fsModel.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "gpu_ids", "=", "None", ")", ":", "\n", "        ", "save_filename", "=", "'{}_net_{}.pth'", ".", "format", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "network", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.save_optim": [[49, 53], ["os.path.join", "torch.save", "network.state_dict"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.fsModel.save"], ["", "", "def", "save_optim", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "gpu_ids", "=", "None", ")", ":", "\n", "        ", "save_filename", "=", "'{}_optim_{}.pth'", ".", "format", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_network": [[56, 95], ["os.path.join", "os.path.isfile", "print", "network.load_state_dict", "torch.load", "torch.load", "network.state_dict", "network.load_state_dict", "print", "print", "torch.load.items", "network.state_dict.items", "print", "network.load_state_dict", "torch.load.items", "set", "Set", "sorted", "v.size", "model_dict[].size", "Set.add", "v.size", "pretrained_dict[].size", "k.split"], "methods", ["None"], ["", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "save_dir", "=", "''", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "if", "not", "save_dir", ":", "\n", "            ", "save_dir", "=", "self", ".", "save_dir", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_path", ")", ":", "\n", "            ", "print", "(", "'%s not exists yet!'", "%", "save_path", ")", "\n", "if", "network_label", "==", "'G'", ":", "\n", "                ", "raise", "(", "'Generator must exist!'", ")", "\n", "", "", "else", ":", "\n", "#network.load_state_dict(torch.load(save_path))", "\n", "            ", "try", ":", "\n", "                ", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "", "except", ":", "\n", "                ", "pretrained_dict", "=", "torch", ".", "load", "(", "save_path", ")", "\n", "model_dict", "=", "network", ".", "state_dict", "(", ")", "\n", "try", ":", "\n", "                    ", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "network", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "                        ", "print", "(", "'Pretrained network %s has excessive layers; Only loading layers that are used'", "%", "network_label", ")", "\n", "", "", "except", ":", "\n", "                    ", "print", "(", "'Pretrained network %s has fewer layers; The following are not initialized:'", "%", "network_label", ")", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "v", ".", "size", "(", ")", "==", "model_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                            ", "model_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                        ", "not_initialized", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                        ", "from", "sets", "import", "Set", "\n", "not_initialized", "=", "Set", "(", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "k", "not", "in", "pretrained_dict", "or", "v", ".", "size", "(", ")", "!=", "pretrained_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                            ", "not_initialized", ".", "add", "(", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "", "", "print", "(", "sorted", "(", "not_initialized", ")", ")", "\n", "network", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_optim": [[97, 136], ["os.path.join", "os.path.isfile", "print", "network.load_state_dict", "torch.load", "torch.load", "network.state_dict", "network.load_state_dict", "torch.device", "torch.device", "print", "print", "torch.load.items", "network.state_dict.items", "print", "network.load_state_dict", "torch.load.items", "set", "Set", "sorted", "v.size", "model_dict[].size", "Set.add", "v.size", "pretrained_dict[].size", "k.split"], "methods", ["None"], ["", "", "", "", "def", "load_optim", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "save_dir", "=", "''", ")", ":", "\n", "        ", "save_filename", "=", "'%s_optim_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "if", "not", "save_dir", ":", "\n", "            ", "save_dir", "=", "self", ".", "save_dir", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_path", ")", ":", "\n", "            ", "print", "(", "'%s not exists yet!'", "%", "save_path", ")", "\n", "if", "network_label", "==", "'G'", ":", "\n", "                ", "raise", "(", "'Generator must exist!'", ")", "\n", "", "", "else", ":", "\n", "#network.load_state_dict(torch.load(save_path))", "\n", "            ", "try", ":", "\n", "                ", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", ")", "\n", "", "except", ":", "\n", "                ", "pretrained_dict", "=", "torch", ".", "load", "(", "save_path", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "model_dict", "=", "network", ".", "state_dict", "(", ")", "\n", "try", ":", "\n", "                    ", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "network", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "                        ", "print", "(", "'Pretrained network %s has excessive layers; Only loading layers that are used'", "%", "network_label", ")", "\n", "", "", "except", ":", "\n", "                    ", "print", "(", "'Pretrained network %s has fewer layers; The following are not initialized:'", "%", "network_label", ")", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "v", ".", "size", "(", ")", "==", "model_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                            ", "model_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                        ", "not_initialized", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                        ", "from", "sets", "import", "Set", "\n", "not_initialized", "=", "Set", "(", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "k", "not", "in", "pretrained_dict", "or", "v", ".", "size", "(", ")", "!=", "pretrained_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                            ", "not_initialized", ".", "add", "(", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "", "", "print", "(", "sorted", "(", "not_initialized", ")", ")", "\n", "network", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.update_learning_rate": [[137, 139], ["None"], "methods", ["None"], ["", "", "", "", "def", "update_learning_rate", "(", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.fsModel.name": [[34, 36], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'fsModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.fsModel.initialize": [[37, 87], ["base_model.BaseModel.initialize", "fs_networks_fix.Generator_Adain_Upsample", "projected_model.fsModel.netG.cuda", "torch.load", "torch.load", "torch.load", "torch.load", "projected_model.fsModel.netArc.cuda", "projected_model.fsModel.netArc.eval", "projected_model.fsModel.netArc.requires_grad_", "pg_modules.projected_discriminator.ProjectedDiscriminator", "projected_model.fsModel.netD.cuda", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "projected_model.fsModel.load_network", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "projected_model.fsModel.load_network", "projected_model.fsModel.load_network", "projected_model.fsModel.load_optim", "projected_model.fsModel.load_optim", "torch.device", "torch.device", "torch.device", "torch.device", "projected_model.fsModel.netG.parameters", "projected_model.fsModel.netD.parameters"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.eval", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_optim", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.load_optim"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "# if opt.resize_or_crop != 'none' or not opt.isTrain:  # when training at full res this causes OOM", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "\n", "# Generator network", "\n", "self", ".", "netG", "=", "Generator_Adain_Upsample", "(", "input_nc", "=", "3", ",", "output_nc", "=", "3", ",", "latent_size", "=", "512", ",", "n_blocks", "=", "9", ",", "deep", "=", "opt", ".", "Gdeep", ")", "\n", "self", ".", "netG", ".", "cuda", "(", ")", "\n", "\n", "# Id network", "\n", "netArc_checkpoint", "=", "opt", ".", "Arc_path", "\n", "netArc_checkpoint", "=", "torch", ".", "load", "(", "netArc_checkpoint", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "self", ".", "netArc", "=", "netArc_checkpoint", "[", "'model'", "]", ".", "module", "\n", "self", ".", "netArc", "=", "self", ".", "netArc", ".", "cuda", "(", ")", "\n", "self", ".", "netArc", ".", "eval", "(", ")", "\n", "self", ".", "netArc", ".", "requires_grad_", "(", "False", ")", "\n", "if", "not", "self", ".", "isTrain", ":", "\n", "            ", "pretrained_path", "=", "opt", ".", "checkpoints_dir", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "return", "\n", "", "self", ".", "netD", "=", "ProjectedDiscriminator", "(", "diffaug", "=", "False", ",", "interp224", "=", "False", ",", "**", "{", "}", ")", "\n", "# self.netD.feature_network.requires_grad_(False)", "\n", "self", ".", "netD", ".", "cuda", "(", ")", "\n", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "# define loss functions", "\n", "            ", "self", ".", "criterionFeat", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionRec", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "\n", "# initialize optimizers", "\n", "\n", "# optimizer G", "\n", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.99", ")", ",", "eps", "=", "1e-8", ")", "\n", "\n", "# optimizer D", "\n", "params", "=", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.99", ")", ",", "eps", "=", "1e-8", ")", "\n", "\n", "# load networks", "\n", "", "if", "opt", ".", "continue_train", ":", "\n", "            ", "pretrained_path", "=", "''", "if", "not", "self", ".", "isTrain", "else", "opt", ".", "load_pretrain", "\n", "# print (pretrained_path)", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "self", ".", "load_optim", "(", "self", ".", "optimizer_G", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "self", ".", "load_optim", "(", "self", ".", "optimizer_D", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "pretrained_path", ")", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.fsModel.cosin_metric": [[88, 91], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "cosin_metric", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "#return np.dot(x1, x2) / (np.linalg.norm(x1) * np.linalg.norm(x2))", "\n", "        ", "return", "torch", ".", "sum", "(", "x1", "*", "x2", ",", "dim", "=", "1", ")", "/", "(", "torch", ".", "norm", "(", "x1", ",", "dim", "=", "1", ")", "*", "torch", ".", "norm", "(", "x2", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.fsModel.save": [[94, 101], ["projected_model.fsModel.save_network", "projected_model.fsModel.save_network", "projected_model.fsModel.save_optim", "projected_model.fsModel.save_optim"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.save_optim", "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.base_model.BaseModel.save_optim"], ["", "def", "save", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "which_epoch", ")", "\n", "self", ".", "save_optim", "(", "self", ".", "optimizer_G", ",", "'G'", ",", "which_epoch", ")", "\n", "self", ".", "save_optim", "(", "self", ".", "optimizer_D", ",", "'D'", ",", "which_epoch", ")", "\n", "'''if self.gen_features:\n            self.save_network(self.netE, 'E', which_epoch, self.gpu_ids)'''", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.fsModel.update_fixed_params": [[102, 110], ["list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "projected_model.fsModel.netG.parameters", "list", "print", "projected_model.fsModel.netE.parameters"], "methods", ["None"], ["", "def", "update_fixed_params", "(", "self", ")", ":", "\n", "# after fixing the global generator for a number of iterations, also start finetuning it", "\n", "        ", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "gen_features", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'------------ Now also finetuning global generator -----------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.fsModel.update_learning_rate": [[111, 121], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "if", "self", ".", "opt", ".", "verbose", ":", "\n", "            ", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.models.projected_model.compute_grad2": [[22, 32], ["x_in.size", "grad_dout.pow", "grad_dout.pow.view().sum", "torch.autograd.grad", "torch.autograd.grad", "grad_dout.pow.size", "x_in.size", "grad_dout.pow.view", "d_out.sum"], "function", ["None"], ["def", "compute_grad2", "(", "d_out", ",", "x_in", ")", ":", "\n", "    ", "batch_size", "=", "x_in", ".", "size", "(", "0", ")", "\n", "grad_dout", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "d_out", ".", "sum", "(", ")", ",", "inputs", "=", "x_in", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", "\n", ")", "[", "0", "]", "\n", "grad_dout2", "=", "grad_dout", ".", "pow", "(", "2", ")", "\n", "assert", "(", "grad_dout2", ".", "size", "(", ")", "==", "x_in", ".", "size", "(", ")", ")", "\n", "reg", "=", "grad_dout2", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "\n", "return", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.data.data_loader_Swapping.data_prefetcher.__init__": [[10, 22], ["iter", "torch.cuda.Stream", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "len", "data_loader_Swapping.data_prefetcher.preload", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.data.data_loader_Swapping.data_prefetcher.preload"], ["    ", "def", "__init__", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "loader", "=", "loader", "\n", "self", ".", "dataiter", "=", "iter", "(", "loader", ")", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "# With Amp, it isn't necessary to manually convert data to half.", "\n", "# if args.fp16:", "\n", "#     self.mean = self.mean.half()", "\n", "#     self.std = self.std.half()", "\n", "self", ".", "num_images", "=", "len", "(", "loader", ")", "\n", "self", ".", "preload", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.data.data_loader_Swapping.data_prefetcher.preload": [[23, 35], ["data_loader_Swapping.data_prefetcher.next"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.data.data_loader_Swapping.data_prefetcher.next"], ["", "def", "preload", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "src_image1", ",", "self", ".", "src_image2", "=", "next", "(", "self", ".", "dataiter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "dataiter", "=", "iter", "(", "self", ".", "loader", ")", "\n", "self", ".", "src_image1", ",", "self", ".", "src_image2", "=", "next", "(", "self", ".", "dataiter", ")", "\n", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "self", ".", "src_image1", "=", "self", ".", "src_image1", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "self", ".", "src_image1", "=", "self", ".", "src_image1", ".", "sub_", "(", "self", ".", "mean", ")", ".", "div_", "(", "self", ".", "std", ")", "\n", "self", ".", "src_image2", "=", "self", ".", "src_image2", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "self", ".", "src_image2", "=", "self", ".", "src_image2", ".", "sub_", "(", "self", ".", "mean", ")", ".", "div_", "(", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.data.data_loader_Swapping.data_prefetcher.next": [[36, 42], ["torch.cuda.current_stream().wait_stream", "data_loader_Swapping.data_prefetcher.preload", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.data.data_loader_Swapping.data_prefetcher.preload"], ["", "", "def", "next", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "src_image1", "=", "self", ".", "src_image1", "\n", "src_image2", "=", "self", ".", "src_image2", "\n", "self", ".", "preload", "(", ")", "\n", "return", "src_image1", ",", "src_image2", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.data.data_loader_Swapping.data_prefetcher.__len__": [[43, 46], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the number of images.\"\"\"", "\n", "return", "self", ".", "num_images", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.data.data_loader_Swapping.SwappingDataset.__init__": [[50, 63], ["data_loader_Swapping.SwappingDataset.preprocess", "len"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.data.data_loader_Swapping.SwappingDataset.preprocess"], ["def", "__init__", "(", "self", ",", "\n", "image_dir", ",", "\n", "img_transform", ",", "\n", "subffix", "=", "'jpg'", ",", "\n", "random_seed", "=", "1234", ")", ":", "\n", "        ", "\"\"\"Initialize and preprocess the Swapping dataset.\"\"\"", "\n", "self", ".", "image_dir", "=", "image_dir", "\n", "self", ".", "img_transform", "=", "img_transform", "\n", "self", ".", "subffix", "=", "subffix", "\n", "self", ".", "dataset", "=", "[", "]", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "preprocess", "(", ")", "\n", "self", ".", "num_images", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.data.data_loader_Swapping.SwappingDataset.preprocess": [[64, 81], ["print", "os.path.join", "glob.glob", "random.seed", "random.shuffle", "print", "glob.glob", "print", "data_loader_Swapping.SwappingDataset.dataset.append", "os.path.join", "temp_list.append", "len"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ")", ":", "\n", "        ", "\"\"\"Preprocess the Swapping dataset.\"\"\"", "\n", "print", "(", "\"processing Swapping dataset images...\"", ")", "\n", "\n", "temp_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "'*/'", ")", "\n", "pathes", "=", "glob", ".", "glob", "(", "temp_path", ")", "\n", "self", ".", "dataset", "=", "[", "]", "\n", "for", "dir_item", "in", "pathes", ":", "\n", "            ", "join_path", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dir_item", ",", "'*.jpg'", ")", ")", "\n", "print", "(", "\"processing %s\"", "%", "dir_item", ",", "end", "=", "'\\r'", ")", "\n", "temp_list", "=", "[", "]", "\n", "for", "item", "in", "join_path", ":", "\n", "                ", "temp_list", ".", "append", "(", "item", ")", "\n", "", "self", ".", "dataset", ".", "append", "(", "temp_list", ")", "\n", "", "random", ".", "seed", "(", "self", ".", "random_seed", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "dataset", ")", "\n", "print", "(", "'Finished preprocessing the Swapping dataset, total dirs number: %d...'", "%", "len", "(", "self", ".", "dataset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.data.data_loader_Swapping.SwappingDataset.__getitem__": [[82, 92], ["len", "data_loader_Swapping.SwappingDataset.img_transform", "data_loader_Swapping.SwappingDataset.img_transform", "PIL.Image.open", "PIL.Image.open", "random.randint", "random.randint"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return two src domain images and two dst domain images.\"\"\"", "\n", "dir_tmp1", "=", "self", ".", "dataset", "[", "index", "]", "\n", "dir_tmp1_len", "=", "len", "(", "dir_tmp1", ")", "\n", "\n", "filename1", "=", "dir_tmp1", "[", "random", ".", "randint", "(", "0", ",", "dir_tmp1_len", "-", "1", ")", "]", "\n", "filename2", "=", "dir_tmp1", "[", "random", ".", "randint", "(", "0", ",", "dir_tmp1_len", "-", "1", ")", "]", "\n", "image1", "=", "self", ".", "img_transform", "(", "Image", ".", "open", "(", "filename1", ")", ")", "\n", "image2", "=", "self", ".", "img_transform", "(", "Image", ".", "open", "(", "filename2", ")", ")", "\n", "return", "image1", ",", "image2", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.data.data_loader_Swapping.SwappingDataset.__len__": [[93, 96], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the number of images.\"\"\"", "\n", "return", "self", ".", "num_images", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.data.data_loader_Swapping.GetLoader": [[97, 122], ["T.Compose.append", "torchvision.transforms.Compose", "data_loader_Swapping.SwappingDataset", "torch.utils.data.DataLoader", "data_loader_Swapping.data_prefetcher", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "", "def", "GetLoader", "(", "dataset_roots", ",", "\n", "batch_size", "=", "16", ",", "\n", "dataloader_workers", "=", "8", ",", "\n", "random_seed", "=", "1234", "\n", ")", ":", "\n", "    ", "\"\"\"Build and return a data loader.\"\"\"", "\n", "\n", "num_workers", "=", "dataloader_workers", "\n", "data_root", "=", "dataset_roots", "\n", "random_seed", "=", "random_seed", "\n", "\n", "c_transforms", "=", "[", "]", "\n", "\n", "c_transforms", ".", "append", "(", "T", ".", "ToTensor", "(", ")", ")", "\n", "c_transforms", "=", "T", ".", "Compose", "(", "c_transforms", ")", "\n", "\n", "content_dataset", "=", "SwappingDataset", "(", "\n", "data_root", ",", "\n", "c_transforms", ",", "\n", "\"jpg\"", ",", "\n", "random_seed", ")", "\n", "content_data_loader", "=", "data", ".", "DataLoader", "(", "dataset", "=", "content_dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "drop_last", "=", "True", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "prefetcher", "=", "data_prefetcher", "(", "content_data_loader", ")", "\n", "return", "prefetcher", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.data.data_loader_Swapping.denorm": [[123, 126], ["out.clamp_"], "function", ["None"], ["", "def", "denorm", "(", "x", ")", ":", "\n", "    ", "out", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "return", "out", ".", "clamp_", "(", "0", ",", "1", ")", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_multi.Face_detect_crop.__init__": [[31, 49], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "glob.glob", "sorted", "os.join", "os.join", "insightface.model_zoo.model_zoo.get_model", "onnx_file.find", "print", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "root", "=", "'~/.insightface_func/models'", ")", ":", "\n", "        ", "self", ".", "models", "=", "{", "}", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "onnx_files", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "root", ",", "name", ",", "'*.onnx'", ")", ")", "\n", "onnx_files", "=", "sorted", "(", "onnx_files", ")", "\n", "for", "onnx_file", "in", "onnx_files", ":", "\n", "            ", "if", "onnx_file", ".", "find", "(", "'_selfgen_'", ")", ">", "0", ":", "\n", "#print('ignore:', onnx_file)", "\n", "                ", "continue", "\n", "", "model", "=", "model_zoo", ".", "get_model", "(", "onnx_file", ")", "\n", "if", "model", ".", "taskname", "not", "in", "self", ".", "models", ":", "\n", "                ", "print", "(", "'find model:'", ",", "onnx_file", ",", "model", ".", "taskname", ")", "\n", "self", ".", "models", "[", "model", ".", "taskname", "]", "=", "model", "\n", "", "else", ":", "\n", "                ", "print", "(", "'duplicated model task type, ignore:'", ",", "onnx_file", ",", "model", ".", "taskname", ")", "\n", "del", "model", "\n", "", "", "assert", "'detection'", "in", "self", ".", "models", "\n", "self", ".", "det_model", "=", "self", ".", "models", "[", "'detection'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_multi.Face_detect_crop.prepare": [[51, 62], ["print", "face_detect_crop_multi.Face_detect_crop.models.items", "model.prepare", "model.prepare"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.prepare", "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.prepare"], ["", "def", "prepare", "(", "self", ",", "ctx_id", ",", "det_thresh", "=", "0.5", ",", "det_size", "=", "(", "640", ",", "640", ")", ",", "mode", "=", "'None'", ")", ":", "\n", "        ", "self", ".", "det_thresh", "=", "det_thresh", "\n", "self", ".", "mode", "=", "mode", "\n", "assert", "det_size", "is", "not", "None", "\n", "print", "(", "'set det-size:'", ",", "det_size", ")", "\n", "self", ".", "det_size", "=", "det_size", "\n", "for", "taskname", ",", "model", "in", "self", ".", "models", ".", "items", "(", ")", ":", "\n", "            ", "if", "taskname", "==", "'detection'", ":", "\n", "                ", "model", ".", "prepare", "(", "ctx_id", ",", "input_size", "=", "det_size", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "prepare", "(", "ctx_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_multi.Face_detect_crop.get": [[63, 101], ["face_detect_crop_multi.Face_detect_crop.det_model.detect", "range", "insightface_func.utils.face_align_ffhqandnewarc.estimate_norm", "cv2.warpAffine", "align_img_list.append", "M_list.append"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.utils.face_align_ffhqandnewarc.estimate_norm"], ["", "", "", "def", "get", "(", "self", ",", "img", ",", "crop_size", ",", "max_num", "=", "0", ")", ":", "\n", "        ", "bboxes", ",", "kpss", "=", "self", ".", "det_model", ".", "detect", "(", "img", ",", "\n", "threshold", "=", "self", ".", "det_thresh", ",", "\n", "max_num", "=", "max_num", ",", "\n", "metric", "=", "'default'", ")", "\n", "if", "bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "ret", "=", "[", "]", "\n", "# for i in range(bboxes.shape[0]):", "\n", "#     bbox = bboxes[i, 0:4]", "\n", "#     det_score = bboxes[i, 4]", "\n", "#     kps = None", "\n", "#     if kpss is not None:", "\n", "#         kps = kpss[i]", "\n", "#     M, _ = face_align.estimate_norm(kps, crop_size, mode ='None') ", "\n", "#     align_img = cv2.warpAffine(img, M, (crop_size, crop_size), borderValue=0.0)", "\n", "align_img_list", "=", "[", "]", "\n", "M_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "kps", "=", "None", "\n", "if", "kpss", "is", "not", "None", ":", "\n", "                ", "kps", "=", "kpss", "[", "i", "]", "\n", "", "M", ",", "_", "=", "face_align", ".", "estimate_norm", "(", "kps", ",", "crop_size", ",", "mode", "=", "self", ".", "mode", ")", "\n", "align_img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "M", ",", "(", "crop_size", ",", "crop_size", ")", ",", "borderValue", "=", "0.0", ")", "\n", "align_img_list", ".", "append", "(", "align_img", ")", "\n", "M_list", ".", "append", "(", "M", ")", "\n", "\n", "# det_score = bboxes[..., 4]", "\n", "\n", "# best_index = np.argmax(det_score)", "\n", "\n", "# kps = None", "\n", "# if kpss is not None:", "\n", "#     kps = kpss[best_index]", "\n", "# M, _ = face_align.estimate_norm(kps, crop_size, mode ='None') ", "\n", "# align_img = cv2.warpAffine(img, M, (crop_size, crop_size), borderValue=0.0)", "\n", "\n", "", "return", "align_img_list", ",", "M_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.__init__": [[31, 49], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "glob.glob", "sorted", "os.join", "os.join", "insightface.model_zoo.model_zoo.get_model", "onnx_file.find", "print", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "root", "=", "'~/.insightface_func/models'", ")", ":", "\n", "        ", "self", ".", "models", "=", "{", "}", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "onnx_files", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "root", ",", "name", ",", "'*.onnx'", ")", ")", "\n", "onnx_files", "=", "sorted", "(", "onnx_files", ")", "\n", "for", "onnx_file", "in", "onnx_files", ":", "\n", "            ", "if", "onnx_file", ".", "find", "(", "'_selfgen_'", ")", ">", "0", ":", "\n", "#print('ignore:', onnx_file)", "\n", "                ", "continue", "\n", "", "model", "=", "model_zoo", ".", "get_model", "(", "onnx_file", ")", "\n", "if", "model", ".", "taskname", "not", "in", "self", ".", "models", ":", "\n", "                ", "print", "(", "'find model:'", ",", "onnx_file", ",", "model", ".", "taskname", ")", "\n", "self", ".", "models", "[", "model", ".", "taskname", "]", "=", "model", "\n", "", "else", ":", "\n", "                ", "print", "(", "'duplicated model task type, ignore:'", ",", "onnx_file", ",", "model", ".", "taskname", ")", "\n", "del", "model", "\n", "", "", "assert", "'detection'", "in", "self", ".", "models", "\n", "self", ".", "det_model", "=", "self", ".", "models", "[", "'detection'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.prepare": [[51, 62], ["print", "face_detect_crop_single.Face_detect_crop.models.items", "model.prepare", "model.prepare"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.prepare", "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.prepare"], ["", "def", "prepare", "(", "self", ",", "ctx_id", ",", "det_thresh", "=", "0.5", ",", "det_size", "=", "(", "640", ",", "640", ")", ",", "mode", "=", "'None'", ")", ":", "\n", "        ", "self", ".", "det_thresh", "=", "det_thresh", "\n", "self", ".", "mode", "=", "mode", "\n", "assert", "det_size", "is", "not", "None", "\n", "print", "(", "'set det-size:'", ",", "det_size", ")", "\n", "self", ".", "det_size", "=", "det_size", "\n", "for", "taskname", ",", "model", "in", "self", ".", "models", ".", "items", "(", ")", ":", "\n", "            ", "if", "taskname", "==", "'detection'", ":", "\n", "                ", "model", ".", "prepare", "(", "ctx_id", ",", "input_size", "=", "det_size", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "prepare", "(", "ctx_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.insightface_func.face_detect_crop_single.Face_detect_crop.get": [[63, 98], ["face_detect_crop_single.Face_detect_crop.det_model.detect", "numpy.argmax", "insightface_func.utils.face_align_ffhqandnewarc.estimate_norm", "cv2.warpAffine"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.utils.face_align_ffhqandnewarc.estimate_norm"], ["", "", "", "def", "get", "(", "self", ",", "img", ",", "crop_size", ",", "max_num", "=", "0", ")", ":", "\n", "        ", "bboxes", ",", "kpss", "=", "self", ".", "det_model", ".", "detect", "(", "img", ",", "\n", "threshold", "=", "self", ".", "det_thresh", ",", "\n", "max_num", "=", "max_num", ",", "\n", "metric", "=", "'default'", ")", "\n", "if", "bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "return", "None", "\n", "# ret = []", "\n", "# for i in range(bboxes.shape[0]):", "\n", "#     bbox = bboxes[i, 0:4]", "\n", "#     det_score = bboxes[i, 4]", "\n", "#     kps = None", "\n", "#     if kpss is not None:", "\n", "#         kps = kpss[i]", "\n", "#     M, _ = face_align.estimate_norm(kps, crop_size, mode ='None') ", "\n", "#     align_img = cv2.warpAffine(img, M, (crop_size, crop_size), borderValue=0.0)", "\n", "# for i in range(bboxes.shape[0]):", "\n", "#     kps = None", "\n", "#     if kpss is not None:", "\n", "#         kps = kpss[i]", "\n", "#     M, _ = face_align.estimate_norm(kps, crop_size, mode ='None') ", "\n", "#     align_img = cv2.warpAffine(img, M, (crop_size, crop_size), borderValue=0.0)", "\n", "\n", "", "det_score", "=", "bboxes", "[", "...", ",", "4", "]", "\n", "\n", "# select the face with the hightest detection score", "\n", "best_index", "=", "np", ".", "argmax", "(", "det_score", ")", "\n", "\n", "kps", "=", "None", "\n", "if", "kpss", "is", "not", "None", ":", "\n", "            ", "kps", "=", "kpss", "[", "best_index", "]", "\n", "", "M", ",", "_", "=", "face_align", ".", "estimate_norm", "(", "kps", ",", "crop_size", ",", "mode", "=", "self", ".", "mode", ")", "\n", "align_img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "M", ",", "(", "crop_size", ",", "crop_size", ")", ",", "borderValue", "=", "0.0", ")", "\n", "\n", "return", "[", "align_img", "]", ",", "[", "M", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.utils.face_align_ffhqandnewarc.estimate_norm": [[55, 79], ["skimage.transform.SimilarityTransform", "numpy.insert", "float", "numpy.arange", "trans.SimilarityTransform.estimate", "numpy.dot", "numpy.sum", "numpy.ones", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["def", "estimate_norm", "(", "lmk", ",", "image_size", "=", "112", ",", "mode", "=", "'ffhq'", ")", ":", "\n", "    ", "assert", "lmk", ".", "shape", "==", "(", "5", ",", "2", ")", "\n", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "lmk_tran", "=", "np", ".", "insert", "(", "lmk", ",", "2", ",", "values", "=", "np", ".", "ones", "(", "5", ")", ",", "axis", "=", "1", ")", "\n", "min_M", "=", "[", "]", "\n", "min_index", "=", "[", "]", "\n", "min_error", "=", "float", "(", "'inf'", ")", "\n", "if", "mode", "==", "'ffhq'", ":", "\n", "# assert image_size == 112", "\n", "        ", "src", "=", "ffhq_src", "*", "image_size", "/", "512", "\n", "", "else", ":", "\n", "        ", "src", "=", "src_map", "*", "image_size", "/", "112", "\n", "", "for", "i", "in", "np", ".", "arange", "(", "src", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "tform", ".", "estimate", "(", "lmk", ",", "src", "[", "i", "]", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "results", "=", "np", ".", "dot", "(", "M", ",", "lmk_tran", ".", "T", ")", "\n", "results", "=", "results", ".", "T", "\n", "error", "=", "np", ".", "sum", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "results", "-", "src", "[", "i", "]", ")", "**", "2", ",", "axis", "=", "1", ")", ")", ")", "\n", "#         print(error)", "\n", "if", "error", "<", "min_error", ":", "\n", "            ", "min_error", "=", "error", "\n", "min_M", "=", "M", "\n", "min_index", "=", "i", "\n", "", "", "return", "min_M", ",", "min_index", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.utils.face_align_ffhqandnewarc.norm_crop": [[81, 92], ["face_align_ffhqandnewarc.estimate_norm", "face_align_ffhqandnewarc.estimate_norm", "cv2.warpAffine", "cv2.warpAffine", "face_align_ffhqandnewarc.estimate_norm", "cv2.warpAffine"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.utils.face_align_ffhqandnewarc.estimate_norm", "home.repos.pwc.inspect_result.neuralchen_SimSwap.utils.face_align_ffhqandnewarc.estimate_norm", "home.repos.pwc.inspect_result.neuralchen_SimSwap.utils.face_align_ffhqandnewarc.estimate_norm"], ["", "def", "norm_crop", "(", "img", ",", "landmark", ",", "image_size", "=", "112", ",", "mode", "=", "'ffhq'", ")", ":", "\n", "    ", "if", "mode", "==", "'Both'", ":", "\n", "        ", "M_None", ",", "_", "=", "estimate_norm", "(", "landmark", ",", "image_size", ",", "mode", "=", "'newarc'", ")", "\n", "M_ffhq", ",", "_", "=", "estimate_norm", "(", "landmark", ",", "image_size", ",", "mode", "=", "'ffhq'", ")", "\n", "warped_None", "=", "cv2", ".", "warpAffine", "(", "img", ",", "M_None", ",", "(", "image_size", ",", "image_size", ")", ",", "borderValue", "=", "0.0", ")", "\n", "warped_ffhq", "=", "cv2", ".", "warpAffine", "(", "img", ",", "M_ffhq", ",", "(", "image_size", ",", "image_size", ")", ",", "borderValue", "=", "0.0", ")", "\n", "return", "warped_ffhq", ",", "warped_None", "\n", "", "else", ":", "\n", "        ", "M", ",", "pose_index", "=", "estimate_norm", "(", "landmark", ",", "image_size", ",", "mode", ")", "\n", "warped", "=", "cv2", ".", "warpAffine", "(", "img", ",", "M", ",", "(", "image_size", ",", "image_size", ")", ",", "borderValue", "=", "0.0", ")", "\n", "return", "warped", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.utils.face_align_ffhqandnewarc.square_crop": [[93, 106], ["cv2.resize", "numpy.zeros", "int", "int", "float", "float", "float", "float"], "function", ["None"], ["", "", "def", "square_crop", "(", "im", ",", "S", ")", ":", "\n", "    ", "if", "im", ".", "shape", "[", "0", "]", ">", "im", ".", "shape", "[", "1", "]", ":", "\n", "        ", "height", "=", "S", "\n", "width", "=", "int", "(", "float", "(", "im", ".", "shape", "[", "1", "]", ")", "/", "im", ".", "shape", "[", "0", "]", "*", "S", ")", "\n", "scale", "=", "float", "(", "S", ")", "/", "im", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "width", "=", "S", "\n", "height", "=", "int", "(", "float", "(", "im", ".", "shape", "[", "0", "]", ")", "/", "im", ".", "shape", "[", "1", "]", "*", "S", ")", "\n", "scale", "=", "float", "(", "S", ")", "/", "im", ".", "shape", "[", "1", "]", "\n", "", "resized_im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "width", ",", "height", ")", ")", "\n", "det_im", "=", "np", ".", "zeros", "(", "(", "S", ",", "S", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "det_im", "[", ":", "resized_im", ".", "shape", "[", "0", "]", ",", ":", "resized_im", ".", "shape", "[", "1", "]", ",", ":", "]", "=", "resized_im", "\n", "return", "det_im", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.utils.face_align_ffhqandnewarc.transform": [[108, 125], ["skimage.transform.SimilarityTransform", "skimage.transform.SimilarityTransform", "skimage.transform.SimilarityTransform", "skimage.transform.SimilarityTransform", "cv2.warpAffine", "float"], "function", ["None"], ["", "def", "transform", "(", "data", ",", "center", ",", "output_size", ",", "scale", ",", "rotation", ")", ":", "\n", "    ", "scale_ratio", "=", "scale", "\n", "rot", "=", "float", "(", "rotation", ")", "*", "np", ".", "pi", "/", "180.0", "\n", "#translation = (output_size/2-center[0]*scale_ratio, output_size/2-center[1]*scale_ratio)", "\n", "t1", "=", "trans", ".", "SimilarityTransform", "(", "scale", "=", "scale_ratio", ")", "\n", "cx", "=", "center", "[", "0", "]", "*", "scale_ratio", "\n", "cy", "=", "center", "[", "1", "]", "*", "scale_ratio", "\n", "t2", "=", "trans", ".", "SimilarityTransform", "(", "translation", "=", "(", "-", "1", "*", "cx", ",", "-", "1", "*", "cy", ")", ")", "\n", "t3", "=", "trans", ".", "SimilarityTransform", "(", "rotation", "=", "rot", ")", "\n", "t4", "=", "trans", ".", "SimilarityTransform", "(", "translation", "=", "(", "output_size", "/", "2", ",", "\n", "output_size", "/", "2", ")", ")", "\n", "t", "=", "t1", "+", "t2", "+", "t3", "+", "t4", "\n", "M", "=", "t", ".", "params", "[", "0", ":", "2", "]", "\n", "cropped", "=", "cv2", ".", "warpAffine", "(", "data", ",", "\n", "M", ",", "(", "output_size", ",", "output_size", ")", ",", "\n", "borderValue", "=", "0.0", ")", "\n", "return", "cropped", ",", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.utils.face_align_ffhqandnewarc.trans_points2d": [[127, 137], ["numpy.zeros", "range", "numpy.array", "numpy.dot"], "function", ["None"], ["", "def", "trans_points2d", "(", "pts", ",", "M", ")", ":", "\n", "    ", "new_pts", "=", "np", ".", "zeros", "(", "shape", "=", "pts", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "pts", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "pt", "=", "pts", "[", "i", "]", "\n", "new_pt", "=", "np", ".", "array", "(", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "1.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "new_pt", "=", "np", ".", "dot", "(", "M", ",", "new_pt", ")", "\n", "#print('new_pt', new_pt.shape, new_pt)", "\n", "new_pts", "[", "i", "]", "=", "new_pt", "[", "0", ":", "2", "]", "\n", "\n", "", "return", "new_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.utils.face_align_ffhqandnewarc.trans_points3d": [[139, 152], ["numpy.sqrt", "numpy.zeros", "range", "numpy.array", "numpy.dot"], "function", ["None"], ["", "def", "trans_points3d", "(", "pts", ",", "M", ")", ":", "\n", "    ", "scale", "=", "np", ".", "sqrt", "(", "M", "[", "0", "]", "[", "0", "]", "*", "M", "[", "0", "]", "[", "0", "]", "+", "M", "[", "0", "]", "[", "1", "]", "*", "M", "[", "0", "]", "[", "1", "]", ")", "\n", "#print(scale)", "\n", "new_pts", "=", "np", ".", "zeros", "(", "shape", "=", "pts", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "pts", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "pt", "=", "pts", "[", "i", "]", "\n", "new_pt", "=", "np", ".", "array", "(", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "1.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "new_pt", "=", "np", ".", "dot", "(", "M", ",", "new_pt", ")", "\n", "#print('new_pt', new_pt.shape, new_pt)", "\n", "new_pts", "[", "i", "]", "[", "0", ":", "2", "]", "=", "new_pt", "[", "0", ":", "2", "]", "\n", "new_pts", "[", "i", "]", "[", "2", "]", "=", "pts", "[", "i", "]", "[", "2", "]", "*", "scale", "\n", "\n", "", "return", "new_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.utils.face_align_ffhqandnewarc.trans_points": [[154, 159], ["face_align_ffhqandnewarc.trans_points2d", "face_align_ffhqandnewarc.trans_points3d"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.utils.face_align_ffhqandnewarc.trans_points2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.utils.face_align_ffhqandnewarc.trans_points3d"], ["", "def", "trans_points", "(", "pts", ",", "M", ")", ":", "\n", "    ", "if", "pts", ".", "shape", "[", "1", "]", "==", "2", ":", "\n", "        ", "return", "trans_points2d", "(", "pts", ",", "M", ")", "\n", "", "else", ":", "\n", "        ", "return", "trans_points3d", "(", "pts", ",", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projector.F_RandomProj.__init__": [[94, 111], ["torch.Module.__init__", "projector._make_projector"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projector._make_projector"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "im_res", "=", "256", ",", "\n", "cout", "=", "64", ",", "\n", "expand", "=", "True", ",", "\n", "proj_type", "=", "2", ",", "# 0 = no projection, 1 = cross channel mixing, 2 = cross scale mixing", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj_type", "=", "proj_type", "\n", "self", ".", "cout", "=", "cout", "\n", "self", ".", "expand", "=", "expand", "\n", "\n", "# build pretrained feature network and random decoder (scratch)", "\n", "self", ".", "pretrained", ",", "self", ".", "scratch", "=", "_make_projector", "(", "im_res", "=", "im_res", ",", "cout", "=", "self", ".", "cout", ",", "proj_type", "=", "self", ".", "proj_type", ",", "expand", "=", "self", ".", "expand", ")", "\n", "self", ".", "CHANNELS", "=", "self", ".", "pretrained", ".", "CHANNELS", "\n", "self", ".", "RESOLUTIONS", "=", "self", ".", "pretrained", ".", "RESOLUTIONS", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projector.F_RandomProj.forward": [[112, 159], ["projector.F_RandomProj.pretrained.layer0", "projector.F_RandomProj.pretrained.layer1", "projector.F_RandomProj.pretrained.layer2", "projector.F_RandomProj.pretrained.layer3", "projector.F_RandomProj.scratch.layer0_ccm", "projector.F_RandomProj.scratch.layer1_ccm", "projector.F_RandomProj.scratch.layer2_ccm", "projector.F_RandomProj.scratch.layer3_ccm", "projector.F_RandomProj.scratch.layer3_csm", "projector.F_RandomProj.scratch.layer2_csm", "projector.F_RandomProj.scratch.layer1_csm", "projector.F_RandomProj.scratch.layer0_csm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "get_features", "=", "False", ")", ":", "\n", "# predict feature maps", "\n", "        ", "out0", "=", "self", ".", "pretrained", ".", "layer0", "(", "x", ")", "\n", "out1", "=", "self", ".", "pretrained", ".", "layer1", "(", "out0", ")", "\n", "out2", "=", "self", ".", "pretrained", ".", "layer2", "(", "out1", ")", "\n", "out3", "=", "self", ".", "pretrained", ".", "layer3", "(", "out2", ")", "\n", "\n", "# start enumerating at the lowest layer (this is where we put the first discriminator)", "\n", "backbone_features", "=", "{", "\n", "'0'", ":", "out0", ",", "\n", "'1'", ":", "out1", ",", "\n", "'2'", ":", "out2", ",", "\n", "'3'", ":", "out3", ",", "\n", "}", "\n", "if", "get_features", ":", "\n", "            ", "return", "backbone_features", "\n", "\n", "", "if", "self", ".", "proj_type", "==", "0", ":", "return", "backbone_features", "\n", "\n", "out0_channel_mixed", "=", "self", ".", "scratch", ".", "layer0_ccm", "(", "backbone_features", "[", "'0'", "]", ")", "\n", "out1_channel_mixed", "=", "self", ".", "scratch", ".", "layer1_ccm", "(", "backbone_features", "[", "'1'", "]", ")", "\n", "out2_channel_mixed", "=", "self", ".", "scratch", ".", "layer2_ccm", "(", "backbone_features", "[", "'2'", "]", ")", "\n", "out3_channel_mixed", "=", "self", ".", "scratch", ".", "layer3_ccm", "(", "backbone_features", "[", "'3'", "]", ")", "\n", "\n", "out", "=", "{", "\n", "'0'", ":", "out0_channel_mixed", ",", "\n", "'1'", ":", "out1_channel_mixed", ",", "\n", "'2'", ":", "out2_channel_mixed", ",", "\n", "'3'", ":", "out3_channel_mixed", ",", "\n", "}", "\n", "\n", "if", "self", ".", "proj_type", "==", "1", ":", "return", "out", "\n", "\n", "# from bottom to top", "\n", "out3_scale_mixed", "=", "self", ".", "scratch", ".", "layer3_csm", "(", "out3_channel_mixed", ")", "\n", "out2_scale_mixed", "=", "self", ".", "scratch", ".", "layer2_csm", "(", "out3_scale_mixed", ",", "out2_channel_mixed", ")", "\n", "out1_scale_mixed", "=", "self", ".", "scratch", ".", "layer1_csm", "(", "out2_scale_mixed", ",", "out1_channel_mixed", ")", "\n", "out0_scale_mixed", "=", "self", ".", "scratch", ".", "layer0_csm", "(", "out1_scale_mixed", ",", "out0_channel_mixed", ")", "\n", "\n", "out", "=", "{", "\n", "'0'", ":", "out0_scale_mixed", ",", "\n", "'1'", ":", "out1_scale_mixed", ",", "\n", "'2'", ":", "out2_scale_mixed", ",", "\n", "'3'", ":", "out3_scale_mixed", ",", "\n", "}", "\n", "\n", "return", "out", ",", "backbone_features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projector._make_scratch_ccm": [[7, 19], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "function", ["None"], ["def", "_make_scratch_ccm", "(", "scratch", ",", "in_channels", ",", "cout", ",", "expand", "=", "False", ")", ":", "\n", "# shapes", "\n", "    ", "out_channels", "=", "[", "cout", ",", "cout", "*", "2", ",", "cout", "*", "4", ",", "cout", "*", "8", "]", "if", "expand", "else", "[", "cout", "]", "*", "4", "\n", "\n", "scratch", ".", "layer0_ccm", "=", "nn", ".", "Conv2d", "(", "in_channels", "[", "0", "]", ",", "out_channels", "[", "0", "]", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "scratch", ".", "layer1_ccm", "=", "nn", ".", "Conv2d", "(", "in_channels", "[", "1", "]", ",", "out_channels", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "scratch", ".", "layer2_ccm", "=", "nn", ".", "Conv2d", "(", "in_channels", "[", "2", "]", ",", "out_channels", "[", "2", "]", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "scratch", ".", "layer3_ccm", "=", "nn", ".", "Conv2d", "(", "in_channels", "[", "3", "]", ",", "out_channels", "[", "3", "]", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n", "scratch", ".", "CHANNELS", "=", "out_channels", "\n", "\n", "return", "scratch", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projector._make_scratch_csm": [[21, 31], ["pg_modules.blocks.FeatureFusionBlock", "pg_modules.blocks.FeatureFusionBlock", "pg_modules.blocks.FeatureFusionBlock", "pg_modules.blocks.FeatureFusionBlock", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "def", "_make_scratch_csm", "(", "scratch", ",", "in_channels", ",", "cout", ",", "expand", ")", ":", "\n", "    ", "scratch", ".", "layer3_csm", "=", "FeatureFusionBlock", "(", "in_channels", "[", "3", "]", ",", "nn", ".", "ReLU", "(", "False", ")", ",", "expand", "=", "expand", ",", "lowest", "=", "True", ")", "\n", "scratch", ".", "layer2_csm", "=", "FeatureFusionBlock", "(", "in_channels", "[", "2", "]", ",", "nn", ".", "ReLU", "(", "False", ")", ",", "expand", "=", "expand", ")", "\n", "scratch", ".", "layer1_csm", "=", "FeatureFusionBlock", "(", "in_channels", "[", "1", "]", ",", "nn", ".", "ReLU", "(", "False", ")", ",", "expand", "=", "expand", ")", "\n", "scratch", ".", "layer0_csm", "=", "FeatureFusionBlock", "(", "in_channels", "[", "0", "]", ",", "nn", ".", "ReLU", "(", "False", ")", ")", "\n", "\n", "# last refinenet does not expand to save channels in higher dimensions", "\n", "scratch", ".", "CHANNELS", "=", "[", "cout", ",", "cout", ",", "cout", "*", "2", ",", "cout", "*", "4", "]", "if", "expand", "else", "[", "cout", "]", "*", "4", "\n", "\n", "return", "scratch", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projector._make_efficientnet": [[33, 40], ["torch.Module", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "function", ["None"], ["", "def", "_make_efficientnet", "(", "model", ")", ":", "\n", "    ", "pretrained", "=", "nn", ".", "Module", "(", ")", "\n", "pretrained", ".", "layer0", "=", "nn", ".", "Sequential", "(", "model", ".", "conv_stem", ",", "model", ".", "bn1", ",", "model", ".", "act1", ",", "*", "model", ".", "blocks", "[", "0", ":", "2", "]", ")", "\n", "pretrained", ".", "layer1", "=", "nn", ".", "Sequential", "(", "*", "model", ".", "blocks", "[", "2", ":", "3", "]", ")", "\n", "pretrained", ".", "layer2", "=", "nn", ".", "Sequential", "(", "*", "model", ".", "blocks", "[", "3", ":", "5", "]", ")", "\n", "pretrained", ".", "layer3", "=", "nn", ".", "Sequential", "(", "*", "model", ".", "blocks", "[", "5", ":", "9", "]", ")", "\n", "return", "pretrained", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projector.calc_channels": [[42, 57], ["torch.zeros", "torch.zeros", "pretrained.layer0", "channels.append", "pretrained.layer1", "channels.append", "pretrained.layer2", "channels.append", "pretrained.layer3", "channels.append"], "function", ["None"], ["", "def", "calc_channels", "(", "pretrained", ",", "inp_res", "=", "224", ")", ":", "\n", "    ", "channels", "=", "[", "]", "\n", "tmp", "=", "torch", ".", "zeros", "(", "1", ",", "3", ",", "inp_res", ",", "inp_res", ")", "\n", "\n", "# forward pass", "\n", "tmp", "=", "pretrained", ".", "layer0", "(", "tmp", ")", "\n", "channels", ".", "append", "(", "tmp", ".", "shape", "[", "1", "]", ")", "\n", "tmp", "=", "pretrained", ".", "layer1", "(", "tmp", ")", "\n", "channels", ".", "append", "(", "tmp", ".", "shape", "[", "1", "]", ")", "\n", "tmp", "=", "pretrained", ".", "layer2", "(", "tmp", ")", "\n", "channels", ".", "append", "(", "tmp", ".", "shape", "[", "1", "]", ")", "\n", "tmp", "=", "pretrained", ".", "layer3", "(", "tmp", ")", "\n", "channels", ".", "append", "(", "tmp", ".", "shape", "[", "1", "]", ")", "\n", "\n", "return", "channels", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projector._make_projector": [[59, 91], ["timm.create_model", "projector._make_efficientnet", "projector.calc_channels", "torch.Module", "projector._make_scratch_ccm", "projector._make_scratch_csm"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.models.models.create_model", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projector._make_efficientnet", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projector.calc_channels", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projector._make_scratch_ccm", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projector._make_scratch_csm"], ["", "def", "_make_projector", "(", "im_res", ",", "cout", ",", "proj_type", ",", "expand", "=", "False", ")", ":", "\n", "    ", "assert", "proj_type", "in", "[", "0", ",", "1", ",", "2", "]", ",", "\"Invalid projection type\"", "\n", "\n", "### Build pretrained feature network", "\n", "model", "=", "timm", ".", "create_model", "(", "'tf_efficientnet_lite0'", ",", "pretrained", "=", "True", ")", "\n", "pretrained", "=", "_make_efficientnet", "(", "model", ")", "\n", "\n", "# determine resolution of feature maps, this is later used to calculate the number", "\n", "# of down blocks in the discriminators. Interestingly, the best results are achieved", "\n", "# by fixing this to 256, ie., we use the same number of down blocks per discriminator", "\n", "# independent of the dataset resolution", "\n", "im_res", "=", "256", "\n", "pretrained", ".", "RESOLUTIONS", "=", "[", "im_res", "//", "4", ",", "im_res", "//", "8", ",", "im_res", "//", "16", ",", "im_res", "//", "32", "]", "\n", "pretrained", ".", "CHANNELS", "=", "calc_channels", "(", "pretrained", ")", "\n", "\n", "if", "proj_type", "==", "0", ":", "return", "pretrained", ",", "None", "\n", "\n", "### Build CCM", "\n", "scratch", "=", "nn", ".", "Module", "(", ")", "\n", "scratch", "=", "_make_scratch_ccm", "(", "scratch", ",", "in_channels", "=", "pretrained", ".", "CHANNELS", ",", "cout", "=", "cout", ",", "expand", "=", "expand", ")", "\n", "pretrained", ".", "CHANNELS", "=", "scratch", ".", "CHANNELS", "\n", "\n", "if", "proj_type", "==", "1", ":", "return", "pretrained", ",", "scratch", "\n", "\n", "### build CSM", "\n", "scratch", "=", "_make_scratch_csm", "(", "scratch", ",", "in_channels", "=", "scratch", ".", "CHANNELS", ",", "cout", "=", "cout", ",", "expand", "=", "expand", ")", "\n", "\n", "# CSM upsamples x2 so the feature map resolution doubles", "\n", "pretrained", ".", "RESOLUTIONS", "=", "[", "res", "*", "2", "for", "res", "in", "pretrained", ".", "RESOLUTIONS", "]", "\n", "pretrained", ".", "CHANNELS", "=", "scratch", ".", "CHANNELS", "\n", "\n", "return", "pretrained", ",", "scratch", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.diffaug.DiffAugment": [[9, 20], ["policy.split", "f.contiguous", "f.permute", "f.permute", "f"], "function", ["None"], ["def", "DiffAugment", "(", "x", ",", "policy", "=", "''", ",", "channels_first", "=", "True", ")", ":", "\n", "    ", "if", "policy", ":", "\n", "        ", "if", "not", "channels_first", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "for", "p", "in", "policy", ".", "split", "(", "','", ")", ":", "\n", "            ", "for", "f", "in", "AUGMENT_FNS", "[", "p", "]", ":", "\n", "                ", "x", "=", "f", "(", "x", ")", "\n", "", "", "if", "not", "channels_first", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.diffaug.rand_brightness": [[22, 25], ["torch.rand", "torch.rand", "x.size"], "function", ["None"], ["", "def", "rand_brightness", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", "+", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "-", "0.5", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.diffaug.rand_saturation": [[27, 31], ["x.mean", "torch.rand", "torch.rand", "x.size"], "function", ["None"], ["", "def", "rand_saturation", "(", "x", ")", ":", "\n", "    ", "x_mean", "=", "x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "x_mean", ")", "*", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "*", "2", ")", "+", "x_mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.diffaug.rand_contrast": [[33, 37], ["x.mean", "torch.rand", "torch.rand", "x.size"], "function", ["None"], ["", "def", "rand_contrast", "(", "x", ")", ":", "\n", "    ", "x_mean", "=", "x", ".", "mean", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "x_mean", ")", "*", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "+", "0.5", ")", "+", "x_mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.diffaug.rand_translation": [[39, 53], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.pad", "[].permute", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "F.pad.permute().contiguous", "[].permute.size", "[].permute.size", "F.pad.permute"], "function", ["None"], ["", "def", "rand_translation", "(", "x", ",", "ratio", "=", "0.125", ")", ":", "\n", "    ", "shift_x", ",", "shift_y", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "translation_x", "=", "torch", ".", "randint", "(", "-", "shift_x", ",", "shift_x", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "translation_y", "=", "torch", ".", "randint", "(", "-", "shift_y", ",", "shift_y", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "2", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "translation_x", "+", "1", ",", "0", ",", "x", ".", "size", "(", "2", ")", "+", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "translation_y", "+", "1", ",", "0", ",", "x", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "x_pad", "=", "F", ".", "pad", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "x", "=", "x_pad", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.diffaug.rand_cutout": [[55, 70], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], ["", "def", "rand_cutout", "(", "x", ",", "ratio", "=", "0.2", ")", ":", "\n", "    ", "cutout_size", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.GLU.forward": [[38, 43], ["x.size", "int", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "nc", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "nc", "%", "2", "==", "0", ",", "'channels dont divide 2!'", "\n", "nc", "=", "int", "(", "nc", "/", "2", ")", "\n", "return", "x", "[", ":", ",", ":", "nc", "]", "*", "torch", ".", "sigmoid", "(", "x", "[", ":", ",", "nc", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.Swish.forward": [[46, 48], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "feat", ")", ":", "\n", "        ", "return", "feat", "*", "torch", ".", "sigmoid", "(", "feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.InitLayer.__init__": [[54, 61], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "blocks.convTranspose2d", "blocks.NormLayer", "blocks.GLU"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.convTranspose2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.NormLayer"], ["    ", "def", "__init__", "(", "self", ",", "nz", ",", "channel", ",", "sz", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "init", "=", "nn", ".", "Sequential", "(", "\n", "convTranspose2d", "(", "nz", ",", "channel", "*", "2", ",", "sz", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "NormLayer", "(", "channel", "*", "2", ")", ",", "\n", "GLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.InitLayer.forward": [[63, 66], ["noise.view.view.view", "blocks.InitLayer.init"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "noise", ")", ":", "\n", "        ", "noise", "=", "noise", ".", "view", "(", "noise", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "self", ".", "init", "(", "noise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.UpBlockSmallCond.__init__": [[77, 87], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "blocks.conv2d", "functools.partial", "functools.partial.", "blocks.GLU"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "z_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "conv", "=", "conv2d", "(", "in_planes", ",", "out_planes", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "which_bn", "=", "functools", ".", "partial", "(", "CCBN", ",", "which_linear", "=", "linear", ",", "input_size", "=", "z_dim", ")", "\n", "self", ".", "bn", "=", "which_bn", "(", "2", "*", "out_planes", ")", "\n", "self", ".", "act", "=", "GLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.UpBlockSmallCond.forward": [[88, 94], ["blocks.UpBlockSmallCond.up", "blocks.UpBlockSmallCond.conv", "blocks.UpBlockSmallCond.bn", "blocks.UpBlockSmallCond.act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "c", ")", ":", "\n", "        ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ",", "c", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.UpBlockBigCond.__init__": [[110, 123], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "blocks.conv2d", "blocks.conv2d", "functools.partial", "functools.partial.", "functools.partial.", "blocks.GLU", "blocks.NoiseInjection"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "z_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "conv1", "=", "conv2d", "(", "in_planes", ",", "out_planes", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv2d", "(", "out_planes", ",", "out_planes", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "which_bn", "=", "functools", ".", "partial", "(", "CCBN", ",", "which_linear", "=", "linear", ",", "input_size", "=", "z_dim", ")", "\n", "self", ".", "bn1", "=", "which_bn", "(", "2", "*", "out_planes", ")", "\n", "self", ".", "bn2", "=", "which_bn", "(", "2", "*", "out_planes", ")", "\n", "self", ".", "act", "=", "GLU", "(", ")", "\n", "self", ".", "noise", "=", "NoiseInjection", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.UpBlockBigCond.forward": [[124, 139], ["blocks.UpBlockBigCond.up", "blocks.UpBlockBigCond.conv1", "blocks.UpBlockBigCond.noise", "blocks.UpBlockBigCond.bn1", "blocks.UpBlockBigCond.act", "blocks.UpBlockBigCond.conv2", "blocks.UpBlockBigCond.noise", "blocks.UpBlockBigCond.bn2", "blocks.UpBlockBigCond.act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "c", ")", ":", "\n", "# block 1", "\n", "        ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "noise", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ",", "c", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "\n", "# block 2", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "noise", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ",", "c", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.SEBlock.__init__": [[142, 150], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "blocks.conv2d", "blocks.Swish", "blocks.conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "4", ")", ",", "\n", "conv2d", "(", "ch_in", ",", "ch_out", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "Swish", "(", ")", ",", "\n", "conv2d", "(", "ch_out", ",", "ch_out", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.SEBlock.forward": [[152, 154], ["blocks.SEBlock.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat_small", ",", "feat_big", ")", ":", "\n", "        ", "return", "feat_big", "*", "self", ".", "main", "(", "feat_small", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.SeparableConv2d.__init__": [[160, 166], ["torch.Module.__init__", "blocks.conv2d", "blocks.conv2d"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depthwise", "=", "conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "groups", "=", "in_channels", ",", "bias", "=", "bias", ",", "padding", "=", "1", ")", "\n", "self", ".", "pointwise", "=", "conv2d", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.SeparableConv2d.forward": [[167, 171], ["blocks.SeparableConv2d.depthwise", "blocks.SeparableConv2d.pointwise"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "depthwise", "(", "x", ")", "\n", "out", "=", "self", ".", "pointwise", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.DownBlock.__init__": [[174, 188], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "blocks.conv2d", "blocks.NormLayer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "blocks.SeparableConv2d", "blocks.NormLayer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.NormLayer", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.NormLayer"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "separable", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "separable", ":", "\n", "            ", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "conv2d", "(", "in_planes", ",", "out_planes", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "NormLayer", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "SeparableConv2d", "(", "in_planes", ",", "out_planes", ",", "3", ")", ",", "\n", "NormLayer", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.DownBlock.forward": [[190, 192], ["blocks.DownBlock.main"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "feat", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.DownBlockPatch.__init__": [[195, 202], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "blocks.DownBlock", "blocks.conv2d", "blocks.NormLayer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.NormLayer"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "separable", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "DownBlock", "(", "in_planes", ",", "out_planes", ",", "separable", ")", ",", "\n", "conv2d", "(", "out_planes", ",", "out_planes", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "NormLayer", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.DownBlockPatch.forward": [[204, 206], ["blocks.DownBlockPatch.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.ResidualConvUnit.__init__": [[212, 216], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cin", ",", "activation", ",", "bn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "cin", ",", "cin", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "skip_add", "=", "nn", ".", "quantized", ".", "FloatFunctional", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.ResidualConvUnit.forward": [[217, 219], ["blocks.ResidualConvUnit.skip_add.add", "blocks.ResidualConvUnit.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "skip_add", ".", "add", "(", "self", ".", "conv", "(", "x", ")", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.FeatureFusionBlock.__init__": [[222, 235], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "activation", ",", "deconv", "=", "False", ",", "bn", "=", "False", ",", "expand", "=", "False", ",", "align_corners", "=", "True", ",", "lowest", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "deconv", "=", "deconv", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "\n", "self", ".", "expand", "=", "expand", "\n", "out_features", "=", "features", "\n", "if", "self", ".", "expand", "==", "True", ":", "\n", "            ", "out_features", "=", "features", "//", "2", "\n", "\n", "", "self", ".", "out_conv", "=", "nn", ".", "Conv2d", "(", "features", ",", "out_features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ",", "groups", "=", "1", ")", "\n", "self", ".", "skip_add", "=", "nn", ".", "quantized", ".", "FloatFunctional", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.FeatureFusionBlock.forward": [[236, 249], ["torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "blocks.FeatureFusionBlock.out_conv", "len", "blocks.FeatureFusionBlock.skip_add.add"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "xs", ")", ":", "\n", "        ", "output", "=", "xs", "[", "0", "]", "\n", "\n", "if", "len", "(", "xs", ")", "==", "2", ":", "\n", "            ", "output", "=", "self", ".", "skip_add", ".", "add", "(", "output", ",", "xs", "[", "1", "]", ")", "\n", "\n", "", "output", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "output", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "self", ".", "align_corners", "\n", ")", "\n", "\n", "output", "=", "self", ".", "out_conv", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.NoiseInjection.__init__": [[255, 258], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.NoiseInjection.forward": [[259, 265], ["torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat", ",", "noise", "=", "None", ")", ":", "\n", "        ", "if", "noise", "is", "None", ":", "\n", "            ", "batch", ",", "_", ",", "height", ",", "width", "=", "feat", ".", "shape", "\n", "noise", "=", "torch", ".", "randn", "(", "batch", ",", "1", ",", "height", ",", "width", ")", ".", "to", "(", "feat", ".", "device", ")", "\n", "\n", "", "return", "feat", "+", "self", ".", "weight", "*", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.CCBN.__init__": [[269, 284], ["torch.Module.__init__", "which_linear", "which_linear", "blocks.CCBN.register_buffer", "blocks.CCBN.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "output_size", ",", "input_size", ",", "which_linear", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", ",", "self", ".", "input_size", "=", "output_size", ",", "input_size", "\n", "\n", "# Prepare gain and bias layers", "\n", "self", ".", "gain", "=", "which_linear", "(", "input_size", ",", "output_size", ")", "\n", "self", ".", "bias", "=", "which_linear", "(", "input_size", ",", "output_size", ")", "\n", "\n", "# epsilon to avoid dividing by 0", "\n", "self", ".", "eps", "=", "eps", "\n", "# Momentum", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "self", ".", "register_buffer", "(", "'stored_mean'", ",", "torch", ".", "zeros", "(", "output_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'stored_var'", ",", "torch", ".", "ones", "(", "output_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.CCBN.forward": [[285, 292], ["blocks.CCBN.bias().view", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "y.size", "y.size", "blocks.CCBN.bias", "blocks.CCBN.gain"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# Calculate class-conditional gains and biases", "\n", "        ", "gain", "=", "(", "1", "+", "self", ".", "gain", "(", "y", ")", ")", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "self", ".", "bias", "(", "y", ")", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "self", ".", "stored_mean", ",", "self", ".", "stored_var", ",", "None", ",", "None", ",", "\n", "self", ".", "training", ",", "0.1", ",", "self", ".", "eps", ")", "\n", "return", "out", "*", "gain", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.Interpolate.__init__": [[297, 309], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ":", "\n", "        ", "\"\"\"Init.\n        Args:\n            scale_factor (float): scaling\n            mode (str): interpolation mode\n        \"\"\"", "\n", "super", "(", "Interpolate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "interp", "=", "nn", ".", "functional", ".", "interpolate", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.Interpolate.forward": [[310, 326], ["blocks.Interpolate.interp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward pass.\n        Args:\n            x (tensor): input\n        Returns:\n            tensor: interpolated data\n        \"\"\"", "\n", "\n", "x", "=", "self", ".", "interp", "(", "\n", "x", ",", "\n", "size", "=", "self", ".", "size", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ",", "\n", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d": [[11, 13], ["torch.nn.utils.spectral_norm", "torch.Conv2d"], "function", ["None"], ["def", "conv2d", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.convTranspose2d": [[15, 17], ["torch.nn.utils.spectral_norm", "torch.ConvTranspose2d"], "function", ["None"], ["", "def", "convTranspose2d", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "ConvTranspose2d", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.embedding": [[19, 21], ["torch.nn.utils.spectral_norm", "torch.Embedding"], "function", ["None"], ["", "def", "embedding", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "Embedding", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.linear": [[23, 25], ["torch.nn.utils.spectral_norm", "torch.Linear"], "function", ["None"], ["", "def", "linear", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "Linear", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.NormLayer": [[27, 32], ["torch.GroupNorm", "torch.BatchNorm2d"], "function", ["None"], ["", "def", "NormLayer", "(", "c", ",", "mode", "=", "'batch'", ")", ":", "\n", "    ", "if", "mode", "==", "'group'", ":", "\n", "        ", "return", "nn", ".", "GroupNorm", "(", "c", "//", "2", ",", "c", ")", "\n", "", "elif", "mode", "==", "'batch'", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.UpBlockSmall": [[68, 74], ["torch.Sequential", "torch.Upsample", "blocks.conv2d", "blocks.NormLayer", "blocks.GLU"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.NormLayer"], ["", "", "def", "UpBlockSmall", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "conv2d", "(", "in_planes", ",", "out_planes", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "NormLayer", "(", "out_planes", "*", "2", ")", ",", "GLU", "(", ")", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.UpBlockBig": [[96, 107], ["torch.Sequential", "torch.Upsample", "blocks.conv2d", "blocks.NoiseInjection", "blocks.NormLayer", "blocks.GLU", "blocks.conv2d", "blocks.NoiseInjection", "blocks.NormLayer", "blocks.GLU"], "function", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.NormLayer", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.NormLayer"], ["", "", "def", "UpBlockBig", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "conv2d", "(", "in_planes", ",", "out_planes", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "NoiseInjection", "(", ")", ",", "\n", "NormLayer", "(", "out_planes", "*", "2", ")", ",", "GLU", "(", ")", ",", "\n", "conv2d", "(", "out_planes", ",", "out_planes", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "NoiseInjection", "(", ")", ",", "\n", "NormLayer", "(", "out_planes", "*", "2", ")", ",", "GLU", "(", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.SingleDisc.__init__": [[12, 49], ["torch.Module.__init__", "layers.append", "torch.Sequential", "torch.Sequential", "channel_dict.keys", "numpy.array", "functools.partial", "functools.partial", "layers.append", "pg_modules.blocks.conv2d", "list", "pg_modules.blocks.conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "DB", "channel_dict.keys", "numpy.argmin", "channel_dict.items", "abs"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d"], ["    ", "def", "__init__", "(", "self", ",", "nc", "=", "None", ",", "ndf", "=", "None", ",", "start_sz", "=", "256", ",", "end_sz", "=", "8", ",", "head", "=", "None", ",", "separable", "=", "False", ",", "patch", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "channel_dict", "=", "{", "4", ":", "512", ",", "8", ":", "512", ",", "16", ":", "256", ",", "32", ":", "128", ",", "64", ":", "64", ",", "128", ":", "64", ",", "\n", "256", ":", "32", ",", "512", ":", "16", ",", "1024", ":", "8", "}", "\n", "\n", "# interpolate for start sz that are not powers of two", "\n", "if", "start_sz", "not", "in", "channel_dict", ".", "keys", "(", ")", ":", "\n", "            ", "sizes", "=", "np", ".", "array", "(", "list", "(", "channel_dict", ".", "keys", "(", ")", ")", ")", "\n", "start_sz", "=", "sizes", "[", "np", ".", "argmin", "(", "abs", "(", "sizes", "-", "start_sz", ")", ")", "]", "\n", "", "self", ".", "start_sz", "=", "start_sz", "\n", "\n", "# if given ndf, allocate all layers with the same ndf", "\n", "if", "ndf", "is", "None", ":", "\n", "            ", "nfc", "=", "channel_dict", "\n", "", "else", ":", "\n", "            ", "nfc", "=", "{", "k", ":", "ndf", "for", "k", ",", "v", "in", "channel_dict", ".", "items", "(", ")", "}", "\n", "\n", "# for feature map discriminators with nfc not in channel_dict", "\n", "# this is the case for the pretrained backbone (midas.pretrained)", "\n", "", "if", "nc", "is", "not", "None", "and", "head", "is", "None", ":", "\n", "            ", "nfc", "[", "start_sz", "]", "=", "nc", "\n", "\n", "", "layers", "=", "[", "]", "\n", "\n", "# Head if the initial input is the full modality", "\n", "if", "head", ":", "\n", "            ", "layers", "+=", "[", "conv2d", "(", "nc", ",", "nfc", "[", "256", "]", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "# Down Blocks", "\n", "", "DB", "=", "partial", "(", "DownBlockPatch", ",", "separable", "=", "separable", ")", "if", "patch", "else", "partial", "(", "DownBlock", ",", "separable", "=", "separable", ")", "\n", "while", "start_sz", ">", "end_sz", ":", "\n", "            ", "layers", ".", "append", "(", "DB", "(", "nfc", "[", "start_sz", "]", ",", "nfc", "[", "start_sz", "//", "2", "]", ")", ")", "\n", "start_sz", "=", "start_sz", "//", "2", "\n", "\n", "", "layers", ".", "append", "(", "conv2d", "(", "nfc", "[", "end_sz", "]", ",", "1", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.SingleDisc.forward": [[50, 52], ["projected_discriminator.SingleDisc.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "c", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.SingleDiscCond.__init__": [[55, 100], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "pg_modules.blocks.conv2d", "torch.Embedding", "torch.Embedding", "torch.Sequential", "torch.Sequential", "channel_dict.keys", "numpy.array", "functools.partial", "functools.partial", "layers.append", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "list", "pg_modules.blocks.conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "DB", "channel_dict.keys", "numpy.argmin", "channel_dict.items", "abs"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.blocks.conv2d"], ["    ", "def", "__init__", "(", "self", ",", "nc", "=", "None", ",", "ndf", "=", "None", ",", "start_sz", "=", "256", ",", "end_sz", "=", "8", ",", "head", "=", "None", ",", "separable", "=", "False", ",", "patch", "=", "False", ",", "c_dim", "=", "1000", ",", "cmap_dim", "=", "64", ",", "embedding_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cmap_dim", "=", "cmap_dim", "\n", "\n", "# midas channels", "\n", "channel_dict", "=", "{", "4", ":", "512", ",", "8", ":", "512", ",", "16", ":", "256", ",", "32", ":", "128", ",", "64", ":", "64", ",", "128", ":", "64", ",", "\n", "256", ":", "32", ",", "512", ":", "16", ",", "1024", ":", "8", "}", "\n", "\n", "# interpolate for start sz that are not powers of two", "\n", "if", "start_sz", "not", "in", "channel_dict", ".", "keys", "(", ")", ":", "\n", "            ", "sizes", "=", "np", ".", "array", "(", "list", "(", "channel_dict", ".", "keys", "(", ")", ")", ")", "\n", "start_sz", "=", "sizes", "[", "np", ".", "argmin", "(", "abs", "(", "sizes", "-", "start_sz", ")", ")", "]", "\n", "", "self", ".", "start_sz", "=", "start_sz", "\n", "\n", "# if given ndf, allocate all layers with the same ndf", "\n", "if", "ndf", "is", "None", ":", "\n", "            ", "nfc", "=", "channel_dict", "\n", "", "else", ":", "\n", "            ", "nfc", "=", "{", "k", ":", "ndf", "for", "k", ",", "v", "in", "channel_dict", ".", "items", "(", ")", "}", "\n", "\n", "# for feature map discriminators with nfc not in channel_dict", "\n", "# this is the case for the pretrained backbone (midas.pretrained)", "\n", "", "if", "nc", "is", "not", "None", "and", "head", "is", "None", ":", "\n", "            ", "nfc", "[", "start_sz", "]", "=", "nc", "\n", "\n", "", "layers", "=", "[", "]", "\n", "\n", "# Head if the initial input is the full modality", "\n", "if", "head", ":", "\n", "            ", "layers", "+=", "[", "conv2d", "(", "nc", ",", "nfc", "[", "256", "]", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "# Down Blocks", "\n", "", "DB", "=", "partial", "(", "DownBlockPatch", ",", "separable", "=", "separable", ")", "if", "patch", "else", "partial", "(", "DownBlock", ",", "separable", "=", "separable", ")", "\n", "while", "start_sz", ">", "end_sz", ":", "\n", "            ", "layers", ".", "append", "(", "DB", "(", "nfc", "[", "start_sz", "]", ",", "nfc", "[", "start_sz", "//", "2", "]", ")", ")", "\n", "start_sz", "=", "start_sz", "//", "2", "\n", "", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "# additions for conditioning on class information", "\n", "self", ".", "cls", "=", "conv2d", "(", "nfc", "[", "end_sz", "]", ",", "self", ".", "cmap_dim", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "c_dim", ",", "embedding_dim", "=", "embedding_dim", ")", "\n", "self", ".", "embed_proj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "embed", ".", "embedding_dim", ",", "self", ".", "cmap_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.SingleDiscCond.forward": [[102, 111], ["projected_discriminator.SingleDiscCond.main", "projected_discriminator.SingleDiscCond.cls", "projected_discriminator.SingleDiscCond.embed_proj().unsqueeze().unsqueeze", "projected_discriminator.SingleDiscCond.embed_proj().unsqueeze", "numpy.sqrt", "projected_discriminator.SingleDiscCond.embed_proj", "projected_discriminator.SingleDiscCond.embed", "c.argmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "c", ")", ":", "\n", "        ", "h", "=", "self", ".", "main", "(", "x", ")", "\n", "out", "=", "self", ".", "cls", "(", "h", ")", "\n", "\n", "# conditioning via projection", "\n", "cmap", "=", "self", ".", "embed_proj", "(", "self", ".", "embed", "(", "c", ".", "argmax", "(", "1", ")", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "out", "=", "(", "out", "*", "cmap", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "*", "(", "1", "/", "np", ".", "sqrt", "(", "self", ".", "cmap_dim", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.MultiScaleD.__init__": [[114, 139], ["torch.Module.__init__", "enumerate", "torch.ModuleDict", "torch.ModuleDict", "zip", "str", "Disc"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "channels", ",", "\n", "resolutions", ",", "\n", "num_discs", "=", "4", ",", "\n", "proj_type", "=", "2", ",", "# 0 = no projection, 1 = cross channel mixing, 2 = cross scale mixing", "\n", "cond", "=", "0", ",", "\n", "separable", "=", "False", ",", "\n", "patch", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "num_discs", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", "\n", "\n", "# the first disc is on the lowest level of the backbone", "\n", "self", ".", "disc_in_channels", "=", "channels", "[", ":", "num_discs", "]", "\n", "self", ".", "disc_in_res", "=", "resolutions", "[", ":", "num_discs", "]", "\n", "Disc", "=", "SingleDiscCond", "if", "cond", "else", "SingleDisc", "\n", "\n", "mini_discs", "=", "[", "]", "\n", "for", "i", ",", "(", "cin", ",", "res", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "disc_in_channels", ",", "self", ".", "disc_in_res", ")", ")", ":", "\n", "            ", "start_sz", "=", "res", "if", "not", "patch", "else", "16", "\n", "mini_discs", "+=", "[", "str", "(", "i", ")", ",", "Disc", "(", "nc", "=", "cin", ",", "start_sz", "=", "start_sz", ",", "end_sz", "=", "8", ",", "separable", "=", "separable", ",", "patch", "=", "patch", ")", "]", ",", "\n", "", "self", ".", "mini_discs", "=", "nn", ".", "ModuleDict", "(", "mini_discs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.MultiScaleD.forward": [[140, 148], ["projected_discriminator.MultiScaleD.mini_discs.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "disc().view", "torch.cat.append", "torch.cat.append", "features[].size", "disc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "c", ")", ":", "\n", "        ", "all_logits", "=", "[", "]", "\n", "for", "k", ",", "disc", "in", "self", ".", "mini_discs", ".", "items", "(", ")", ":", "\n", "            ", "res", "=", "disc", "(", "features", "[", "k", "]", ",", "c", ")", ".", "view", "(", "features", "[", "k", "]", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "all_logits", ".", "append", "(", "res", ")", "\n", "\n", "", "all_logits", "=", "torch", ".", "cat", "(", "all_logits", ",", "dim", "=", "1", ")", "\n", "return", "all_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.__init__": [[151, 166], ["super().__init__", "pg_modules.projector.F_RandomProj", "projected_discriminator.MultiScaleD"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "diffaug", "=", "True", ",", "\n", "interp224", "=", "True", ",", "\n", "backbone_kwargs", "=", "{", "}", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "diffaug", "=", "diffaug", "\n", "self", ".", "interp224", "=", "interp224", "\n", "self", ".", "feature_network", "=", "F_RandomProj", "(", "**", "backbone_kwargs", ")", "\n", "self", ".", "discriminator", "=", "MultiScaleD", "(", "\n", "channels", "=", "self", ".", "feature_network", ".", "CHANNELS", ",", "\n", "resolutions", "=", "self", ".", "feature_network", ".", "RESOLUTIONS", ",", "\n", "**", "backbone_kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.train": [[168, 172], ["projected_discriminator.ProjectedDiscriminator.feature_network.train", "projected_discriminator.ProjectedDiscriminator.discriminator.train"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.train", "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "self", ".", "feature_network", "=", "self", ".", "feature_network", ".", "train", "(", "False", ")", "\n", "self", ".", "discriminator", "=", "self", ".", "discriminator", ".", "train", "(", "mode", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.eval": [[173, 175], ["projected_discriminator.ProjectedDiscriminator.train"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.train"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.get_feature": [[176, 179], ["projected_discriminator.ProjectedDiscriminator.feature_network"], "methods", ["None"], ["", "def", "get_feature", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "feature_network", "(", "x", ",", "get_features", "=", "True", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.pg_modules.projected_discriminator.ProjectedDiscriminator.forward": [[180, 191], ["projected_discriminator.ProjectedDiscriminator.feature_network", "projected_discriminator.ProjectedDiscriminator.discriminator"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "c", ")", ":", "\n", "# if self.diffaug:", "\n", "#     x = DiffAugment(x, policy='color,translation,cutout')", "\n", "\n", "# if self.interp224:", "\n", "#     x = F.interpolate(x, 224, mode='bilinear', align_corners=False)", "\n", "\n", "        ", "features", ",", "backbone_features", "=", "self", ".", "feature_network", "(", "x", ")", "\n", "logits", "=", "self", ".", "discriminator", "(", "features", ",", "c", ")", "\n", "\n", "return", "logits", ",", "backbone_features", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.options.test_options.TestOptions.initialize": [[12, 39], ["base_options.BaseOptions.initialize", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "float"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ntest'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'# of test examples.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'how many test images to run'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--cluster_path'", ",", "type", "=", "str", ",", "default", "=", "'features_clustered_010.npy'", ",", "help", "=", "'the path for clustered results of encoded features'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_encoded_image'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, encode the real image to get the feature map'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--export_onnx\"", ",", "type", "=", "str", ",", "help", "=", "\"export ONNX model to a given file\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--engine\"", ",", "type", "=", "str", ",", "help", "=", "\"run serialized TRT engine\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--onnx\"", ",", "type", "=", "str", ",", "help", "=", "\"run ONNX model via TRT\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--Arc_path\"", ",", "type", "=", "str", ",", "default", "=", "'models/BEST_checkpoint.tar'", ",", "help", "=", "\"run ONNX model via TRT\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pic_a_path\"", ",", "type", "=", "str", ",", "default", "=", "'./crop_224/gdg.jpg'", ",", "help", "=", "\"Person who provides identity information\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pic_b_path\"", ",", "type", "=", "str", ",", "default", "=", "'./crop_224/zrf.jpg'", ",", "help", "=", "\"Person who provides information other than their identity\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pic_specific_path\"", ",", "type", "=", "str", ",", "default", "=", "'./crop_224/zrf.jpg'", ",", "help", "=", "\"The specific person to be swapped\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--multisepcific_dir\"", ",", "type", "=", "str", ",", "default", "=", "'./demo_file/multispecific'", ",", "help", "=", "\"Dir for multi specific\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--video_path\"", ",", "type", "=", "str", ",", "default", "=", "'./demo_file/multi_people_1080p.mp4'", ",", "help", "=", "\"path for the video to swap\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--temp_path\"", ",", "type", "=", "str", ",", "default", "=", "'./temp_results'", ",", "help", "=", "\"path to save temporarily images\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--output_path\"", ",", "type", "=", "str", ",", "default", "=", "'./output/'", ",", "help", "=", "\"results path\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--id_thres'", ",", "type", "=", "float", ",", "default", "=", "0.03", ",", "help", "=", "'how many test images to run'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_simswaplogo'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Remove the watermark'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_mask'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use mask for better result'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--crop_size'", ",", "type", "=", "int", ",", "default", "=", "224", ",", "help", "=", "'Crop of size of input image'", ")", "\n", "\n", "self", ".", "isTrain", "=", "False", "", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.options.train_options.TrainOptions.initialize": [[4, 40], ["base_options.BaseOptions.initialize", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "# for displays", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "99", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'only do one epoch and displays at each iteration'", ")", "\n", "\n", "# for training", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_pretrain'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'load the pretrained model from the specified location'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "\n", "# for discriminators        ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_D'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of discriminators to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'only used if which_model_netD==n_layers'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_feat'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_id'", ",", "type", "=", "float", ",", "default", "=", "20.0", ",", "help", "=", "'weight for id loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_rec'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for reconstruction loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_GP'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for gradient penalty loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_ganFeat_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use discriminator feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_vgg_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use VGG feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gan_mode'", ",", "type", "=", "str", ",", "default", "=", "'hinge'", ",", "help", "=", "'(ls|original|hinge)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--times_G'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'time of training generator before traning discriminator'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.__init__": [[7, 10], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.initialize": [[11, 68], ["base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "# experiment specifics", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'people'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'pix2pixHD'", ",", "help", "=", "'which model to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'batch'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dropout for the generator'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--data_type'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "choices", "=", "[", "8", ",", "16", ",", "32", "]", ",", "help", "=", "\"Supported data type i.e. 8, 16, 32 bit\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'toggles verbose'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--fp16'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'train with AMP'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'local rank for distributed training'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--isTrain'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'local rank for distributed training'", ")", "\n", "\n", "# input/output sizes       ", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'input batch size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--loadSize'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "'scale images to this size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'then crop to this size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--label_nc'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'# of input label channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "\n", "# for setting inputs", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "type", "=", "str", ",", "default", "=", "'./datasets/cityscapes/'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resize_or_crop'", ",", "type", "=", "str", ",", "default", "=", "'scale_width'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop|crop|scale_width|scale_width_and_crop]'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data argumentation'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "\n", "# for displays", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'display window size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--tf_log'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, use tensorboard logging. Requires tensorflow installed'", ")", "\n", "\n", "# for generator", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'global'", ",", "help", "=", "'selects model to use for netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--latent_size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'latent size of Adain layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_downsample_global'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of downsampling layers in netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_blocks_global'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "'number of residual blocks in the global generator network'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_blocks_local'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of residual blocks in the local enhancer network'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_local_enhancers'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of local enhancers to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_fix_global'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'number of epochs that we only train the outmost local enhancer'", ")", "\n", "\n", "# for instance-wise features", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_instance'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* add instance map as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--instance_feat'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, add encoded instance features as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--label_feat'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, add encoded label features as input'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--feat_num'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'vector length for encoded features'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_features'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, load precomputed feature maps'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_downsample_E'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'# of downsampling layers in encoder'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nef'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'# of encoder filters in the first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_clusters'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of clusters for features'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--image_size'", ",", "type", "=", "int", ",", "default", "=", "224", ",", "help", "=", "'number of clusters for features'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--norm_G'", ",", "type", "=", "str", ",", "default", "=", "'spectralspadesyncbatch3x3'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--semantic_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of clusters for features'", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.parse": [[69, 105], ["base_options.BaseOptions.parser.parse_args", "base_options.BaseOptions.opt.gpu_ids.split", "vars", "print", "sorted", "print", "base_options.BaseOptions.initialize", "int", "len", "torch.cuda.set_device", "vars.items", "print", "os.path.join", "util.util.util.mkdirs", "base_options.BaseOptions.opt.gpu_ids.append", "os.path.join", "open", "opt_file.write", "sorted", "opt_file.write", "str", "str", "vars.items", "opt_file.write", "str", "str"], "methods", ["home.repos.pwc.inspect_result.neuralchen_SimSwap.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.neuralchen_SimSwap.util.util.mkdirs"], ["", "def", "parse", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "str_ids", "=", "self", ".", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "self", ".", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "self", ".", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "\n", "# set gpu ids", "\n", "", "", "if", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "args", "=", "vars", "(", "self", ".", "opt", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# save to the disk", "\n", "if", "self", ".", "opt", ".", "isTrain", ":", "\n", "            ", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "if", "save", "and", "not", "self", ".", "opt", ".", "continue_train", ":", "\n", "                ", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "                    ", "opt_file", ".", "write", "(", "'------------ Options -------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                        ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'-------------- End ----------------\\n'", ")", "\n", "", "", "", "return", "self", ".", "opt", "\n", "", "", ""]]}