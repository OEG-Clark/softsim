{"home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.main.seed_everything": [[20, 28], ["random.seed", "numpy.random.seed", "str", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["def", "seed_everything", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.main.test_one_epoch": [[29, 69], ["net.eval", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "src.cuda.cuda", "target.cuda.cuda", "net", "R_list.append", "t_list.append", "R_pred_list.append", "t_pred_list.append", "euler_list.append", "numpy.abs", "numpy.abs", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "np.concatenate.unsqueeze", "np.concatenate.numpy", "np.concatenate.numpy", "np.concatenate.detach().cpu().numpy", "np.concatenate.detach().cpu().numpy", "np.concatenate.numpy", "numpy.degrees", "numpy.degrees", "np.concatenate.detach().cpu", "np.concatenate.detach().cpu", "np.concatenate.detach", "np.concatenate.detach"], "function", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.npmat2euler"], ["", "def", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "\n", "R_list", "=", "[", "]", "\n", "t_list", "=", "[", "]", "\n", "R_pred_list", "=", "[", "]", "\n", "t_pred_list", "=", "[", "]", "\n", "euler_list", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "src", ",", "target", ",", "R", ",", "t", ",", "euler", "in", "tqdm", "(", "test_loader", ")", ":", "\n", "\n", "        ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "\n", "R_pred", ",", "t_pred", ",", "*", "_", "=", "net", "(", "src", ",", "target", ")", "\n", "src2", "=", "torch", ".", "matmul", "(", "R_pred", ",", "src", ")", "+", "t_pred", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "count", "+=", "1", "\n", "R_list", ".", "append", "(", "R", ".", "numpy", "(", ")", ")", "\n", "t_list", ".", "append", "(", "t", ".", "numpy", "(", ")", ")", "\n", "R_pred_list", ".", "append", "(", "R_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "t_pred_list", ".", "append", "(", "t_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "euler_list", ".", "append", "(", "euler", ".", "numpy", "(", ")", ")", "\n", "\n", "", "R", "=", "np", ".", "concatenate", "(", "R_list", ",", "axis", "=", "0", ")", "\n", "t", "=", "np", ".", "concatenate", "(", "t_list", ",", "axis", "=", "0", ")", "\n", "R_pred", "=", "np", ".", "concatenate", "(", "R_pred_list", ",", "axis", "=", "0", ")", "\n", "t_pred", "=", "np", ".", "concatenate", "(", "t_pred_list", ",", "axis", "=", "0", ")", "\n", "euler", "=", "np", ".", "concatenate", "(", "euler_list", ",", "axis", "=", "0", ")", "\n", "\n", "euler_pred", "=", "npmat2euler", "(", "R_pred", ")", "\n", "r_mse", "=", "np", ".", "mean", "(", "(", "euler_pred", "-", "np", ".", "degrees", "(", "euler", ")", ")", "**", "2", ")", "\n", "r_rmse", "=", "np", ".", "sqrt", "(", "r_mse", ")", "\n", "r_mae", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "euler_pred", "-", "np", ".", "degrees", "(", "euler", ")", ")", ")", "\n", "t_mse", "=", "np", ".", "mean", "(", "(", "t", "-", "t_pred", ")", "**", "2", ")", "\n", "t_rmse", "=", "np", ".", "sqrt", "(", "t_mse", ")", "\n", "t_mae", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "t", "-", "t_pred", ")", ")", "\n", "\n", "return", "r_rmse", ",", "r_mae", ",", "t_rmse", ",", "t_mae", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.main.train_one_epoch": [[71, 113], ["net.train", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "src.cuda.cuda", "target.cuda.cuda", "R.cuda.cuda", "t.cuda.cuda", "opt.zero_grad", "net", "R_list.append", "t_list.append", "R_pred_list.append", "t_pred_list.append", "euler_list.append", "loss.backward", "opt.step", "numpy.abs", "numpy.abs", "R.cuda.detach().cpu().numpy", "t.cuda.detach().cpu().numpy", "np.concatenate.detach().cpu().numpy", "np.concatenate.detach().cpu().numpy", "np.concatenate.numpy", "numpy.degrees", "numpy.degrees", "R.cuda.detach().cpu", "t.cuda.detach().cpu", "np.concatenate.detach().cpu", "np.concatenate.detach().cpu", "R.cuda.detach", "t.cuda.detach", "np.concatenate.detach", "np.concatenate.detach"], "function", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.main.train", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.npmat2euler"], ["", "def", "train_one_epoch", "(", "args", ",", "net", ",", "train_loader", ",", "opt", ")", ":", "\n", "    ", "net", ".", "train", "(", ")", "\n", "\n", "R_list", "=", "[", "]", "\n", "t_list", "=", "[", "]", "\n", "R_pred_list", "=", "[", "]", "\n", "t_pred_list", "=", "[", "]", "\n", "euler_list", "=", "[", "]", "\n", "\n", "for", "src", ",", "target", ",", "R", ",", "t", ",", "euler", "in", "tqdm", "(", "train_loader", ")", ":", "\n", "        ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "R", "=", "R", ".", "cuda", "(", ")", "\n", "t", "=", "t", ".", "cuda", "(", ")", "\n", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "R_pred", ",", "t_pred", ",", "loss", "=", "net", "(", "src", ",", "target", ",", "R", ",", "t", ")", "\n", "\n", "R_list", ".", "append", "(", "R", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "t_list", ".", "append", "(", "t", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "R_pred_list", ".", "append", "(", "R_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "t_pred_list", ".", "append", "(", "t_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "euler_list", ".", "append", "(", "euler", ".", "numpy", "(", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "", "R", "=", "np", ".", "concatenate", "(", "R_list", ",", "axis", "=", "0", ")", "\n", "t", "=", "np", ".", "concatenate", "(", "t_list", ",", "axis", "=", "0", ")", "\n", "R_pred", "=", "np", ".", "concatenate", "(", "R_pred_list", ",", "axis", "=", "0", ")", "\n", "t_pred", "=", "np", ".", "concatenate", "(", "t_pred_list", ",", "axis", "=", "0", ")", "\n", "euler", "=", "np", ".", "concatenate", "(", "euler_list", ",", "axis", "=", "0", ")", "\n", "\n", "euler_pred", "=", "npmat2euler", "(", "R_pred", ")", "\n", "r_mse", "=", "np", ".", "mean", "(", "(", "euler_pred", "-", "np", ".", "degrees", "(", "euler", ")", ")", "**", "2", ")", "\n", "r_rmse", "=", "np", ".", "sqrt", "(", "r_mse", ")", "\n", "r_mae", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "euler_pred", "-", "np", ".", "degrees", "(", "euler", ")", ")", ")", "\n", "t_mse", "=", "np", ".", "mean", "(", "(", "t", "-", "t_pred", ")", "**", "2", ")", "\n", "t_rmse", "=", "np", ".", "sqrt", "(", "t_mse", ")", "\n", "t_mae", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "t", "-", "t_pred", ")", ")", "\n", "\n", "return", "r_rmse", ",", "r_mae", ",", "t_rmse", ",", "t_mae", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.main.train": [[115, 145], ["torch.Adam", "torch.optim.lr_scheduler.MultiStepLR", "main.test_one_epoch", "range", "net.parameters", "main.train_one_epoch", "print", "print", "scipy.cprint", "torch.save", "torch.save", "torch.save", "torch.save", "torch.optim.lr_scheduler.MultiStepLR.step", "main.test_one_epoch", "print", "scipy.cprint", "net.state_dict", "main.test_one_epoch", "scipy.io"], "function", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.test.test_one_epoch", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.main.train_one_epoch", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.cprint", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.test.test_one_epoch", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.cprint", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.test.test_one_epoch"], ["", "def", "train", "(", "args", ",", "net", ",", "train_loader", ",", "test_loader", ",", "io", ")", ":", "\n", "    ", "opt", "=", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "0.0001", ",", "weight_decay", "=", "0.001", ")", "\n", "scheduler", "=", "MultiStepLR", "(", "opt", ",", "milestones", "=", "[", "50", ",", "85", "]", ",", "gamma", "=", "0.1", ")", "\n", "\n", "train_stats", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "test", "=", "False", "\n", "train_stats", "=", "train_one_epoch", "(", "args", ",", "net", ",", "train_loader", ",", "opt", ")", "\n", "if", "epoch", ">", "5", ":", "\n", "            ", "if", "epoch", "%", "2", "==", "1", ":", "\n", "                ", "test", "=", "True", "\n", "test_stats", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "", "", "else", ":", "\n", "            ", "test", "=", "True", "\n", "test_stats", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "\n", "", "print", "(", "'=====  EPOCH %d  ====='", "%", "(", "epoch", "+", "1", ")", ")", "\n", "print", "(", "'TRAIN, rot_RMSE: %f, rot_MAE: %f, trans_RMSE: %f, trans_MAE: %f'", "%", "train_stats", ")", "\n", "if", "test", ":", "\n", "            ", "print", "(", "'TEST,  rot_RMSE: %f, rot_MAE: %f, trans_RMSE: %f, trans_MAE: %f'", "%", "test_stats", ")", "\n", "# io.cprint('=====  EPOCH %d  =====' % (epoch + 1))", "\n", "", "io", ".", "cprint", "(", "'TRAIN epoch %d, rot_RMSE: %f, rot_MAE: %f, trans_RMSE: %f, trans_MAE: %f'", "%", "(", "\n", "(", "epoch", "+", "1", ")", ",", "train_stats", "[", "0", "]", ",", "train_stats", "[", "1", "]", ",", "train_stats", "[", "2", "]", ",", "train_stats", "[", "3", "]", ")", ")", "\n", "if", "test", ":", "\n", "            ", "io", ".", "cprint", "(", "'TEST epoch %d,  rot_RMSE: %f, rot_MAE: %f, trans_RMSE: %f, trans_MAE: %f'", "%", "(", "\n", "(", "epoch", "+", "1", ")", ",", "test_stats", "[", "0", "]", ",", "test_stats", "[", "1", "]", ",", "test_stats", "[", "2", "]", ",", "test_stats", "[", "3", "]", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.%d.t7'", "%", "(", "args", ".", "exp_name", ",", "epoch", ")", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.main.main": [[147, 212], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "os.system", "os.system", "os.system", "util.IOStream", "util.IOStream.cprint", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "MFGNet.MFGNet().cuda", "main.train", "util.IOStream.close", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "str", "data.ModelNet40", "data.ModelNet40", "x.lower", "MFGNet.MFGNet", "MFGNet.GNN"], "function", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.cprint", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.main.train", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.close"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "arg_bool", "=", "lambda", "x", ":", "x", ".", "lower", "(", ")", "in", "[", "'true'", ",", "'t'", ",", "'1'", "]", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Point Cloud Registration'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'exp'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Name of the experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iter'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of iteration inside the network'", ")", "\n", "parser", ".", "add_argument", "(", "'--emb_nn'", ",", "type", "=", "str", ",", "default", "=", "'GNN'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Feature extraction method. [GNN]'", ")", "\n", "parser", ".", "add_argument", "(", "'--emb_dims'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Dimension of embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "metavar", "=", "'batch_size'", ",", "\n", "help", "=", "'Size of batch)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "metavar", "=", "'batch_size'", ",", "\n", "help", "=", "'Size of batch)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of episode to train '", ")", "\n", "parser", ".", "add_argument", "(", "'--unseen'", ",", "type", "=", "arg_bool", ",", "default", "=", "'True'", ",", "\n", "help", "=", "'Test on unseen categories'", ")", "\n", "parser", ".", "add_argument", "(", "'--gaussian_noise'", ",", "type", "=", "arg_bool", ",", "default", "=", "'True'", ",", "\n", "help", "=", "'Wheter to add gaussian noise'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "type", "=", "float", ",", "default", "=", "0.75", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Fraction of points when sampling partial point cloud'", ")", "\n", "parser", ".", "add_argument", "(", "'--factor'", ",", "type", "=", "float", ",", "default", "=", "4", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Divided factor for rotations'", ")", "# \u65cb\u8f6c\u89d2\u5ea6\u5728pi/4\u8303\u56f4\u5185", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "type", "=", "arg_bool", ",", "default", "=", "'False'", ",", "\n", "help", "=", "'Load pretrained weight'", ")", "# \u65cb\u8f6c\u89d2\u5ea6\u5728pi/4\u8303\u56f4\u5185", "\n", "parser", ".", "add_argument", "(", "'--K_test'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'The number of key points preserved during testing'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "##### make checkpoint directory and backup #####", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'checkpoints'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints/'", "+", "args", ".", "exp_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'checkpoints/'", "+", "args", ".", "exp_name", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'models'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'models'", ")", "\n", "", "os", ".", "system", "(", "'cp main.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'main.py.backup'", ")", "\n", "os", ".", "system", "(", "'cp model.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'model.py.backup'", ")", "\n", "os", ".", "system", "(", "'cp data.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'data.py.backup'", ")", "\n", "##### make checkpoint directory and backup #####", "\n", "\n", "io", "=", "IOStream", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/log.txt'", ")", "\n", "io", ".", "cprint", "(", "str", "(", "args", ")", ")", "\n", "\n", "##### load data #####", "\n", "train_loader", "=", "DataLoader", "(", "\n", "ModelNet40", "(", "partition", "=", "'train'", ",", "alpha", "=", "args", ".", "alpha", ",", "gaussian_noise", "=", "args", ".", "gaussian_noise", ",", "unseen", "=", "args", ".", "unseen", ",", "factor", "=", "args", ".", "factor", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "ModelNet40", "(", "partition", "=", "'test'", ",", "alpha", "=", "args", ".", "alpha", ",", "gaussian_noise", "=", "args", ".", "gaussian_noise", ",", "unseen", "=", "args", ".", "unseen", ",", "factor", "=", "args", ".", "factor", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "num_workers", "=", "8", ")", "\n", "\n", "##### load model #####", "\n", "net", "=", "MFGNet", "(", "GNN", "(", "args", ".", "emb_dims", ")", ",", "args", ")", ".", "cuda", "(", ")", "\n", "# net.load_state_dict(torch.load('model_gaussian.t7'))", "\n", "# for param in net.parameters():", "\n", "#     print(param.name, param.size())", "\n", "\n", "##### train #####", "\n", "train", "(", "args", ",", "net", ",", "train_loader", ",", "test_loader", ",", "io", ")", "\n", "io", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.ModelNet40.__init__": [[102, 128], ["torch.utils.data.Dataset.__init__", "int", "data.load_data", "data.ModelNet40.label.squeeze", "data.load_data", "data.ModelNet40.label.squeeze", "Exception"], "methods", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.__init__", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.load_data", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.load_data"], ["    ", "def", "__init__", "(", "self", ",", "num_points", "=", "1024", ",", "partition", "=", "'train'", ",", "gaussian_noise", "=", "False", ",", "alpha", "=", "0.75", ",", "unseen", "=", "False", ",", "factor", "=", "4", ")", ":", "\n", "        ", "super", "(", "ModelNet40", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "gaussian_noise", "=", "gaussian_noise", "\n", "self", ".", "unseen", "=", "unseen", "\n", "self", ".", "rot_factor", "=", "factor", "\n", "# if self.partition == 'test':", "\n", "#     seed_everything(1234)", "\n", "if", "self", ".", "unseen", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "label", "=", "load_data", "(", "partition", ")", "\n", "self", ".", "label", "=", "self", ".", "label", ".", "squeeze", "(", ")", "\n", "if", "self", ".", "partition", "==", "'test'", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "label", ">=", "20", "]", "\n", "self", ".", "label", "=", "self", ".", "label", "[", "self", ".", "label", ">=", "20", "]", "\n", "", "elif", "self", ".", "partition", "==", "'train'", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "label", "<", "20", "]", "\n", "self", ".", "label", "=", "self", ".", "label", "[", "self", ".", "label", "<", "20", "]", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Invalid partition'", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "label", "=", "load_data", "(", "partition", ")", "\n", "self", ".", "label", "=", "self", ".", "label", ".", "squeeze", "(", ")", "\n", "", "self", ".", "data", "=", "self", ".", "data", "[", ":", ",", ":", "self", ".", "num_points", "]", "# [?, 1024, 3]", "\n", "self", ".", "num_subsampled_points", "=", "int", "(", "self", ".", "data", ".", "shape", "[", "1", "]", "*", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.ModelNet40.__getitem__": [[129, 145], ["data.random_Rt", "data.farthest_subsample_points", "numpy.matmul", "numpy.random.permutation", "numpy.random.permutation", "data.jitter_pointcloud", "data.jitter_pointcloud", "jitter_pointcloud.astype", "jitter_pointcloud.astype", "R_ab.astype", "translation_ab.astype", "euler_ab.astype"], "methods", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.random_Rt", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.farthest_subsample_points", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.jitter_pointcloud", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.jitter_pointcloud"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "pointcloud1", "=", "self", ".", "data", "[", "item", "]", ".", "T", "\n", "R_ab", ",", "translation_ab", ",", "euler_ab", "=", "random_Rt", "(", "np", ".", "pi", "/", "self", ".", "rot_factor", ")", "\n", "pointcloud2", "=", "np", ".", "matmul", "(", "R_ab", ",", "pointcloud1", ")", "+", "translation_ab", "[", ":", ",", "np", ".", "newaxis", "]", "# (3,) -> (3, 1)", "\n", "pointcloud1", "=", "np", ".", "random", ".", "permutation", "(", "pointcloud1", ".", "T", ")", ".", "T", "\n", "pointcloud2", "=", "np", ".", "random", ".", "permutation", "(", "pointcloud2", ".", "T", ")", ".", "T", "\n", "\n", "if", "self", ".", "gaussian_noise", ":", "\n", "            ", "pointcloud1", "=", "jitter_pointcloud", "(", "pointcloud1", ")", "\n", "pointcloud2", "=", "jitter_pointcloud", "(", "pointcloud2", ")", "\n", "\n", "", "pointcloud1", ",", "pointcloud2", "=", "farthest_subsample_points", "(", "pointcloud1", ",", "pointcloud2", ",", "\n", "num_subsampled_points", "=", "self", ".", "num_subsampled_points", ")", "\n", "\n", "return", "pointcloud1", ".", "astype", "(", "'float32'", ")", ",", "pointcloud2", ".", "astype", "(", "'float32'", ")", ",", "R_ab", ".", "astype", "(", "'float32'", ")", ",", "translation_ab", ".", "astype", "(", "'float32'", ")", ",", "euler_ab", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.ModelNet40.__len__": [[146, 148], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.download": [[17, 28], ["os.path.dirname", "os.path.join", "os.path.abspath", "os.path.exists", "os.mkdir", "os.path.exists", "os.path.basename", "os.system", "os.system", "os.system", "os.path.join"], "function", ["None"], ["def", "download", "(", ")", ":", "\n", "    ", "BASE_DIR", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "DATA_DIR", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "'data'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "DATA_DIR", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "DATA_DIR", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'modelnet40_ply_hdf5_2048'", ")", ")", ":", "\n", "        ", "www", "=", "'https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip'", "\n", "zipfile", "=", "os", ".", "path", ".", "basename", "(", "www", ")", "\n", "os", ".", "system", "(", "'wget --no-check-certificate %s; unzip %s'", "%", "(", "www", ",", "zipfile", ")", ")", "\n", "os", ".", "system", "(", "'mv %s %s'", "%", "(", "zipfile", "[", ":", "-", "4", "]", ",", "DATA_DIR", ")", ")", "\n", "os", ".", "system", "(", "'rm %s'", "%", "(", "zipfile", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.load_data": [[30, 47], ["data.download", "os.path.dirname", "os.path.join", "glob.glob", "numpy.concatenate", "numpy.concatenate", "os.path.abspath", "os.path.join", "h5py.File", "[].astype", "[].astype", "h5py.File.close", "np.concatenate.append", "np.concatenate.append"], "function", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.download", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.close"], ["", "", "def", "load_data", "(", "partition", ")", ":", "\n", "    ", "download", "(", ")", "\n", "BASE_DIR", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "DATA_DIR", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "'data'", ")", "\n", "#     DATA_DIR = \"D:\\\\Pycharm-Projects\\\\dgcnn.pytorch-master\\\\data\"", "\n", "all_data", "=", "[", "]", "\n", "all_label", "=", "[", "]", "\n", "for", "h5_name", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'modelnet40_ply_hdf5_2048'", ",", "'ply_data_%s*.h5'", "%", "partition", ")", ")", ":", "\n", "        ", "f", "=", "h5py", ".", "File", "(", "h5_name", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", ".", "astype", "(", "'float32'", ")", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", ".", "astype", "(", "'int64'", ")", "\n", "f", ".", "close", "(", ")", "\n", "all_data", ".", "append", "(", "data", ")", "\n", "all_label", ".", "append", "(", "label", ")", "\n", "", "all_data", "=", "np", ".", "concatenate", "(", "all_data", ",", "axis", "=", "0", ")", "\n", "all_label", "=", "np", ".", "concatenate", "(", "all_label", ",", "axis", "=", "0", ")", "\n", "return", "all_data", ",", "all_label", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.jitter_pointcloud": [[49, 55], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "jitter_pointcloud", "(", "pointcloud", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ",", "seed", "=", "None", ")", ":", "\n", "# if seed is not None:", "\n", "#     seed_everything(seed)", "\n", "    ", "N", ",", "C", "=", "pointcloud", ".", "shape", "\n", "pointcloud", "=", "pointcloud", "+", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "return", "pointcloud", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.farthest_subsample_points": [[57, 70], ["sklearn.neighbors.NearestNeighbors().fit", "NearestNeighbors().fit.kneighbors().reshape", "sklearn.neighbors.NearestNeighbors().fit", "NearestNeighbors().fit.kneighbors().reshape", "numpy.random.random", "sklearn.neighbors.NearestNeighbors", "numpy.array", "numpy.random.choice", "NearestNeighbors().fit.kneighbors", "sklearn.neighbors.NearestNeighbors", "NearestNeighbors().fit.kneighbors", "scipy.spatial.distance.minkowski", "scipy.spatial.distance.minkowski"], "function", ["None"], ["", "def", "farthest_subsample_points", "(", "pointcloud1", ",", "pointcloud2", ",", "num_subsampled_points", "=", "768", ")", ":", "\n", "    ", "pointcloud1", "=", "pointcloud1", ".", "T", "\n", "pointcloud2", "=", "pointcloud2", ".", "T", "\n", "num_points", "=", "pointcloud1", ".", "shape", "[", "0", "]", "\n", "nbrs1", "=", "NearestNeighbors", "(", "n_neighbors", "=", "num_subsampled_points", ",", "algorithm", "=", "'auto'", ",", "\n", "metric", "=", "lambda", "x", ",", "y", ":", "minkowski", "(", "x", ",", "y", ")", ")", ".", "fit", "(", "pointcloud1", ")", "\n", "random_p1", "=", "np", ".", "random", ".", "random", "(", "size", "=", "(", "1", ",", "3", ")", ")", "+", "np", ".", "array", "(", "[", "[", "500", ",", "500", ",", "500", "]", "]", ")", "*", "np", ".", "random", ".", "choice", "(", "[", "1", ",", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "idx1", "=", "nbrs1", ".", "kneighbors", "(", "random_p1", ",", "return_distance", "=", "False", ")", ".", "reshape", "(", "(", "num_subsampled_points", ",", ")", ")", "\n", "nbrs2", "=", "NearestNeighbors", "(", "n_neighbors", "=", "num_subsampled_points", ",", "algorithm", "=", "'auto'", ",", "\n", "metric", "=", "lambda", "x", ",", "y", ":", "minkowski", "(", "x", ",", "y", ")", ")", ".", "fit", "(", "pointcloud2", ")", "\n", "random_p2", "=", "random_p1", "\n", "idx2", "=", "nbrs2", ".", "kneighbors", "(", "random_p2", ",", "return_distance", "=", "False", ")", ".", "reshape", "(", "(", "num_subsampled_points", ",", ")", ")", "\n", "return", "pointcloud1", "[", "idx1", ",", ":", "]", ".", "T", ",", "pointcloud2", "[", "idx2", ",", ":", "]", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.random_Rt": [[72, 99], ["numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.array", "numpy.array", "numpy.array", "np.array.dot().dot", "numpy.random.uniform", "numpy.array", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "np.array.dot"], "function", ["None"], ["", "def", "random_Rt", "(", "angle", ",", "seed", "=", "None", ")", ":", "\n", "# if seed is not None:", "\n", "#     seed_everything(seed)", "\n", "    ", "anglex", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "angle", "\n", "angley", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "angle", "\n", "anglez", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "angle", "\n", "\n", "cosx", "=", "np", ".", "cos", "(", "anglex", ")", "\n", "cosy", "=", "np", ".", "cos", "(", "angley", ")", "\n", "cosz", "=", "np", ".", "cos", "(", "anglez", ")", "\n", "sinx", "=", "np", ".", "sin", "(", "anglex", ")", "\n", "siny", "=", "np", ".", "sin", "(", "angley", ")", "\n", "sinz", "=", "np", ".", "sin", "(", "anglez", ")", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cosx", ",", "-", "sinx", "]", ",", "\n", "[", "0", ",", "sinx", ",", "cosx", "]", "]", ")", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "cosy", ",", "0", ",", "siny", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "siny", ",", "0", ",", "cosy", "]", "]", ")", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "cosz", ",", "-", "sinz", ",", "0", "]", ",", "\n", "[", "sinz", ",", "cosz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R", "=", "Rx", ".", "dot", "(", "Ry", ")", ".", "dot", "(", "Rz", ")", "\n", "t", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ",", "size", "=", "3", ")", "\n", "euler", "=", "np", ".", "array", "(", "[", "anglez", ",", "angley", ",", "anglex", "]", ")", "\n", "\n", "return", "R", ",", "t", ",", "euler", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.data.seed_everything": [[149, 157], ["random.seed", "numpy.random.seed", "str", "torch.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["", "", "def", "seed_everything", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.test.test_one_epoch": [[15, 55], ["net.eval", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "src.cuda.cuda", "target.cuda.cuda", "R.cuda.cuda", "t.cuda.cuda", "net", "R_list.append", "t_list.append", "R_pred_list.append", "t_pred_list.append", "euler_list.append", "numpy.abs", "numpy.abs", "R.cuda.detach().cpu().numpy", "t.cuda.detach().cpu().numpy", "np.concatenate.detach().cpu().numpy", "np.concatenate.detach().cpu().numpy", "np.concatenate.numpy", "numpy.degrees", "numpy.degrees", "R.cuda.detach().cpu", "t.cuda.detach().cpu", "np.concatenate.detach().cpu", "np.concatenate.detach().cpu", "R.cuda.detach", "t.cuda.detach", "np.concatenate.detach", "np.concatenate.detach"], "function", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.npmat2euler"], ["def", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "\n", "R_list", "=", "[", "]", "\n", "t_list", "=", "[", "]", "\n", "R_pred_list", "=", "[", "]", "\n", "t_pred_list", "=", "[", "]", "\n", "euler_list", "=", "[", "]", "\n", "\n", "for", "src", ",", "target", ",", "R", ",", "t", ",", "euler", "in", "tqdm", "(", "test_loader", ")", ":", "\n", "\n", "        ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "R", "=", "R", ".", "cuda", "(", ")", "\n", "t", "=", "t", ".", "cuda", "(", ")", "\n", "\n", "R_pred", ",", "t_pred", ",", "*", "_", "=", "net", "(", "src", ",", "target", ")", "\n", "\n", "\n", "R_list", ".", "append", "(", "R", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "t_list", ".", "append", "(", "t", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "R_pred_list", ".", "append", "(", "R_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "t_pred_list", ".", "append", "(", "t_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "euler_list", ".", "append", "(", "euler", ".", "numpy", "(", ")", ")", "\n", "\n", "", "R", "=", "np", ".", "concatenate", "(", "R_list", ",", "axis", "=", "0", ")", "\n", "t", "=", "np", ".", "concatenate", "(", "t_list", ",", "axis", "=", "0", ")", "\n", "R_pred", "=", "np", ".", "concatenate", "(", "R_pred_list", ",", "axis", "=", "0", ")", "\n", "t_pred", "=", "np", ".", "concatenate", "(", "t_pred_list", ",", "axis", "=", "0", ")", "\n", "euler", "=", "np", ".", "concatenate", "(", "euler_list", ",", "axis", "=", "0", ")", "\n", "\n", "euler_pred", "=", "npmat2euler", "(", "R_pred", ")", "\n", "r_mse", "=", "np", ".", "mean", "(", "(", "euler_pred", "-", "np", ".", "degrees", "(", "euler", ")", ")", "**", "2", ")", "\n", "r_rmse", "=", "np", ".", "sqrt", "(", "r_mse", ")", "\n", "r_mae", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "euler_pred", "-", "np", ".", "degrees", "(", "euler", ")", ")", ")", "\n", "t_mse", "=", "np", ".", "mean", "(", "(", "t", "-", "t_pred", ")", "**", "2", ")", "\n", "t_rmse", "=", "np", ".", "sqrt", "(", "t_mse", ")", "\n", "t_mae", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "t", "-", "t_pred", ")", ")", "\n", "\n", "return", "r_rmse", ",", "r_mae", ",", "t_rmse", ",", "t_mae", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.Conv1DBNReLU.__init__": [[25, 30], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "ksize", ")", ":", "\n", "        ", "super", "(", "Conv1DBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "in_channel", ",", "out_channel", ",", "ksize", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "out_channel", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.Conv1DBNReLU.forward": [[31, 36], ["MFGNet.Conv1DBNReLU.conv", "MFGNet.Conv1DBNReLU.bn", "MFGNet.Conv1DBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.Conv1DBlock.__init__": [[39, 45], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "MFGNet.Conv1DBlock.conv.append", "MFGNet.Conv1DBlock.conv.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "len", "MFGNet.Conv1DBNReLU"], "methods", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "ksize", ")", ":", "\n", "        ", "super", "(", "Conv1DBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "channels", ")", "-", "2", ")", ":", "\n", "            ", "self", ".", "conv", ".", "append", "(", "Conv1DBNReLU", "(", "channels", "[", "i", "]", ",", "channels", "[", "i", "+", "1", "]", ",", "ksize", ")", ")", "\n", "", "self", ".", "conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", "[", "-", "2", "]", ",", "channels", "[", "-", "1", "]", ",", "ksize", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.Conv1DBlock.forward": [[46, 50], ["conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "conv", "in", "self", ".", "conv", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.Conv2DBNReLU.__init__": [[53, 58], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "ksize", ")", ":", "\n", "        ", "super", "(", "Conv2DBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "ksize", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.Conv2DBNReLU.forward": [[59, 64], ["MFGNet.Conv2DBNReLU.conv", "MFGNet.Conv2DBNReLU.bn", "MFGNet.Conv2DBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.Conv2DBlock.__init__": [[67, 73], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "MFGNet.Conv2DBlock.conv.append", "MFGNet.Conv2DBlock.conv.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "len", "MFGNet.Conv2DBNReLU"], "methods", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "ksize", ")", ":", "\n", "        ", "super", "(", "Conv2DBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "channels", ")", "-", "2", ")", ":", "\n", "            ", "self", ".", "conv", ".", "append", "(", "Conv2DBNReLU", "(", "channels", "[", "i", "]", ",", "channels", "[", "i", "+", "1", "]", ",", "ksize", ")", ")", "\n", "", "self", ".", "conv", ".", "append", "(", "nn", ".", "Conv2d", "(", "channels", "[", "-", "2", "]", ",", "channels", "[", "-", "1", "]", ",", "ksize", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.Conv2DBlock.forward": [[74, 78], ["conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "conv", "in", "self", ".", "conv", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.Propagate.__init__": [[81, 85], ["torch.Module.__init__", "MFGNet.Conv2DBlock", "MFGNet.Conv1DBlock"], "methods", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "emb_dims", ")", ":", "\n", "        ", "super", "(", "Propagate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d", "=", "Conv2DBlock", "(", "(", "in_channel", ",", "emb_dims", ",", "emb_dims", ")", ",", "1", ")", "\n", "self", ".", "conv1d", "=", "Conv1DBlock", "(", "(", "emb_dims", ",", "emb_dims", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.Propagate.forward": [[86, 94], ["numpy.arange().reshape", "x[].permute", "MFGNet.Propagate.conv2d", "MFGNet.Propagate.conv1d", "MFGNet.Propagate.size", "MFGNet.Propagate.unsqueeze", "MFGNet.Propagate.max", "numpy.arange", "MFGNet.Propagate.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "idx", ")", ":", "\n", "        ", "batch_idx", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "nn_feat", "=", "x", "[", "batch_idx", ",", ":", ",", "idx", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# [B, C, N, k]", "\n", "x", "=", "nn_feat", "-", "x", ".", "unsqueeze", "(", "-", "1", ")", "# [B, c, N, k] - [B, c, N, 1] = [B, c, N, k]", "\n", "x", "=", "self", ".", "conv2d", "(", "x", ")", "# [B, emb_dims, N, k]", "\n", "x", "=", "x", ".", "max", "(", "-", "1", ")", "[", "0", "]", "# [B, C, N]", "\n", "x", "=", "self", ".", "conv1d", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.GNN.__init__": [[97, 104], ["torch.Module.__init__", "MFGNet.Propagate", "MFGNet.Propagate", "MFGNet.Propagate", "MFGNet.Propagate", "MFGNet.Propagate"], "methods", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dims", "=", "64", ")", ":", "\n", "        ", "super", "(", "GNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "propogate1", "=", "Propagate", "(", "3", ",", "64", ")", "# Conv2DBNReLU(3,64)->Conv2DBNReLU(64,64)->Conv1DBNReLU(64,64)", "\n", "self", ".", "propogate2", "=", "Propagate", "(", "64", ",", "64", ")", "\n", "self", ".", "propogate3", "=", "Propagate", "(", "64", ",", "64", ")", "\n", "self", ".", "propogate4", "=", "Propagate", "(", "64", ",", "64", ")", "\n", "self", ".", "propogate5", "=", "Propagate", "(", "64", ",", "emb_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.GNN.forward": [[105, 116], ["util.knn", "MFGNet.GNN.propogate1", "MFGNet.GNN.propogate2", "MFGNet.GNN.propogate3", "MFGNet.GNN.propogate4", "MFGNet.GNN.propogate5"], "methods", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.knn"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# [B, 3, N]", "\n", "        ", "nn_idx", "=", "knn", "(", "x", ",", "k", "=", "12", ")", "# [B, N, k], \u6700\u8fd1\u90bb\u7d22\u5f15", "\n", "\n", "x", "=", "self", ".", "propogate1", "(", "x", ",", "nn_idx", ")", "\n", "x", "=", "self", ".", "propogate2", "(", "x", ",", "nn_idx", ")", "\n", "x", "=", "self", ".", "propogate3", "(", "x", ",", "nn_idx", ")", "\n", "x", "=", "self", ".", "propogate4", "(", "x", ",", "nn_idx", ")", "\n", "x", "=", "self", ".", "propogate5", "(", "x", ",", "nn_idx", ")", "# [B, emb_dims, N]", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.SVDHead.__init__": [[118, 123], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "SVDHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "reflect", "=", "nn", ".", "Parameter", "(", "torch", ".", "eye", "(", "3", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "reflect", "[", "2", ",", "2", "]", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.SVDHead.forward": [[124, 154], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "src.mean", "src_corr.mean", "src_corr_centered.transpose().contiguous", "src.size", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "t.view", "weights.unsqueeze", "u.transpose().contiguous", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "src.size", "src_corr_centered.transpose", "u.transpose().contiguous", "u.transpose", "weights.unsqueeze", "u.transpose", "weights.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ",", "src_corr", ",", "weights", ")", ":", "\n", "        ", "src_centered", "=", "src", "-", "src", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "src_corr_centered", "=", "src_corr", "-", "src_corr", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "H", "=", "torch", ".", "matmul", "(", "src_centered", "*", "weights", ".", "unsqueeze", "(", "1", ")", ",", "src_corr_centered", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "U", ",", "S", ",", "V", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "R", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "src", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "r_det", "=", "torch", ".", "det", "(", "r", ")", "\n", "if", "r_det", "<", "0", ":", "\n", "                ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "v", "=", "torch", ".", "matmul", "(", "v", ",", "self", ".", "reflect", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "", "R", ".", "append", "(", "r", ")", "\n", "\n", "U", ".", "append", "(", "u", ")", "\n", "S", ".", "append", "(", "s", ")", "\n", "V", ".", "append", "(", "v", ")", "\n", "\n", "", "U", "=", "torch", ".", "stack", "(", "U", ",", "dim", "=", "0", ")", "\n", "V", "=", "torch", ".", "stack", "(", "V", ",", "dim", "=", "0", ")", "\n", "S", "=", "torch", ".", "stack", "(", "S", ",", "dim", "=", "0", ")", "\n", "R", "=", "torch", ".", "stack", "(", "R", ",", "dim", "=", "0", ")", "\n", "\n", "t", "=", "torch", ".", "matmul", "(", "-", "R", ",", "(", "weights", ".", "unsqueeze", "(", "1", ")", "*", "src", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ")", "+", "(", "weights", ".", "unsqueeze", "(", "1", ")", "*", "src_corr", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "return", "R", ",", "t", ".", "view", "(", "src", ".", "size", "(", "0", ")", ",", "3", ")", "\n", "# return R, t.view(batch_size, 3)", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.MFGNet.__init__": [[158, 173], ["torch.Module.__init__", "MFGNet.Conv1DBlock", "MFGNet.SVDHead", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "MFGNet.Conv2DBlock", "MFGNet.Conv2DBlock", "MFGNet.Conv1DBlock", "MFGNet.Conv2DBlock", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_nn", ",", "args", ")", ":", "\n", "        ", "super", "(", "MFGNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "# 64", "\n", "self", ".", "num_iter", "=", "args", ".", "num_iter", "# 4", "\n", "self", ".", "emb_nn", "=", "emb_nn", "# GNN,[B, 64, N]", "\n", "self", ".", "K_test", "=", "args", ".", "K_test", "\n", "self", ".", "significance_fc", "=", "Conv1DBlock", "(", "(", "self", ".", "emb_dims", ",", "64", ",", "32", ",", "1", ")", ",", "1", ")", "\n", "self", ".", "head", "=", "SVDHead", "(", "args", "=", "args", ")", "\n", "self", ".", "sim_mat_Fconv", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Conv2DBlock", "(", "(", "self", ".", "emb_dims", "+", "1", ",", "32", ",", "32", ",", "32", ",", "1", ")", ",", "1", ")", "for", "_", "in", "range", "(", "self", ".", "num_iter", ")", "]", ")", "\n", "self", ".", "sim_mat_Sconv", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Conv2DBlock", "(", "(", "7", ",", "32", ",", "32", ",", "32", ",", "1", ")", ",", "1", ")", "for", "_", "in", "range", "(", "self", ".", "num_iter", ")", "]", ")", "\n", "\n", "self", ".", "weight_fc", "=", "nn", ".", "ModuleList", "(", "[", "Conv1DBlock", "(", "(", "32", ",", "32", ",", "1", ")", ",", "1", ")", "for", "_", "in", "range", "(", "self", ".", "num_iter", ")", "]", ")", "\n", "self", ".", "preweight", "=", "nn", ".", "ModuleList", "(", "[", "Conv2DBlock", "(", "(", "2", ",", "32", ")", ",", "1", ")", "for", "_", "in", "range", "(", "self", ".", "num_iter", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.MFGNet.MFGNet.forward": [[175, 314], ["MFGNet.MFGNet.emb_nn", "MFGNet.MFGNet.emb_nn", "MFGNet.MFGNet.significance_fc().squeeze", "MFGNet.MFGNet.significance_fc().squeeze", "src[].transpose", "src_embedding[].transpose", "tgt[].transpose", "tgt_embedding[].transpose", "torch.eye().unsqueeze().expand().cuda().float", "torch.eye().unsqueeze().expand().cuda().float", "torch.eye().unsqueeze().expand().cuda().float", "torch.eye().unsqueeze().expand().cuda().float", "torch.eye().unsqueeze().expand().cuda().float", "torch.eye().unsqueeze().expand().cuda().float", "torch.eye().unsqueeze().expand().cuda().float", "torch.eye().unsqueeze().expand().cuda().float", "torch.eye().unsqueeze().expand().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "range", "Exception", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "min_idx.cpu().numpy.cpu().numpy.cpu().numpy", "match_labels.cpu().numpy", "src[].transpose.size", "numpy.tile", "util.batch_choice", "util.batch_choice", "numpy.concatenate", "src_idx.cpu().numpy.cpu().numpy.cpu().numpy", "tgt_idx.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.arange", "src_embedding[].transpose.size", "src_embedding[].transpose.unsqueeze().repeat", "tgt_embedding[].transpose.unsqueeze().repeat", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "similarity_matrix.clamp.clamp.squeeze", "similarity_matrix.clamp.clamp.clamp", "tgt[].transpose", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "MFGNet.MFGNet.head", "rotation_ab.detach.detach.detach", "translation_ab.detach.detach.detach", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "t_gt.unsqueeze", "src_gt.unsqueeze", "tgt[].transpose.unsqueeze", "match_labels.cpu().numpy.sum", "match_labels.cpu().numpy.sum", "MFGNet.MFGNet.significance_fc", "MFGNet.MFGNet.significance_fc", "numpy.arange", "MFGNet.MFGNet.topk", "MFGNet.MFGNet.topk", "src[].transpose.size", "torch.eye().unsqueeze().expand().cuda", "torch.eye().unsqueeze().expand().cuda", "torch.eye().unsqueeze().expand().cuda", "torch.eye().unsqueeze().expand().cuda", "torch.eye().unsqueeze().expand().cuda", "torch.eye().unsqueeze().expand().cuda", "torch.eye().unsqueeze().expand().cuda", "torch.eye().unsqueeze().expand().cuda", "torch.eye().unsqueeze().expand().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "src[].transpose.unsqueeze", "tgt[].transpose.unsqueeze", "torch.cat.max", "torch.cat.max", "torch.cat.max", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "similarity_matrix.clamp.clamp.max", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "translation_ab.detach.detach.unsqueeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "min_idx.cpu().numpy.cpu().numpy.cpu", "match_labels.cpu", "src[].transpose.size", "src[].transpose.size", "src_idx.cpu().numpy.cpu().numpy.cpu", "tgt_idx.cpu().numpy.cpu().numpy.cpu", "src_embedding[].transpose.unsqueeze", "tgt_embedding[].transpose.unsqueeze", "src[].transpose.unsqueeze().repeat", "similarity_matrix.clamp.clamp.squeeze", "similarity_matrix.clamp.clamp.squeeze", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "match_labels.sum", "torch.sigmoid.sum", "torch.sigmoid.sum", "torch.sigmoid.sum", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tgt[].transpose.size", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "numpy.arange", "src[].transpose.size", "src[].transpose.size", "src[].transpose.unsqueeze", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.softmax.detach", "torch.softmax.detach", "torch.softmax.detach", "torch.softmax.detach", "torch.softmax.detach", "torch.softmax.detach", "numpy.arange", "numpy.arange", "torch.arange().cuda().unsqueeze", "torch.arange().cuda().unsqueeze", "torch.arange().cuda().unsqueeze", "torch.arange().cuda().unsqueeze", "torch.arange().cuda().unsqueeze", "torch.arange().cuda().unsqueeze", "torch.arange().cuda().unsqueeze", "torch.arange().cuda().unsqueeze", "torch.arange().cuda().unsqueeze", "torch.zeros().cuda().float.unsqueeze", "torch.zeros().cuda().float.unsqueeze", "torch.zeros().cuda().float.unsqueeze", "len", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.softmax.size", "torch.softmax.size", "torch.softmax.size", "torch.softmax.size", "torch.softmax.size", "torch.softmax.size", "torch.sigmoid.median", "torch.sigmoid.median", "torch.sigmoid.median", "numpy.arange", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "tgt[].transpose.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "corr_idx.size"], "methods", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.batch_choice", "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.batch_choice"], ["", "def", "forward", "(", "self", ",", "src", ",", "tgt", ",", "R_gt", "=", "None", ",", "t_gt", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param src: [B, 3, 768]\n        :param tgt: [B, 3, 768]\n        :param R_gt: [B, 3, 3]\n        :param t_gt: [B, 3]\n        :return:\n        \"\"\"", "\n", "##### only pass ground truth while training #####", "\n", "if", "not", "(", "self", ".", "training", "or", "(", "R_gt", "is", "None", "and", "t_gt", "is", "None", ")", ")", ":", "\n", "            ", "raise", "Exception", "(", "'Passing ground truth while testing'", ")", "\n", "\n", "##### getting ground truth correspondences #####", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "src_gt", "=", "torch", ".", "matmul", "(", "R_gt", ",", "src", ")", "+", "t_gt", ".", "unsqueeze", "(", "-", "1", ")", "\n", "dist", "=", "src_gt", ".", "unsqueeze", "(", "-", "1", ")", "-", "tgt", ".", "unsqueeze", "(", "-", "2", ")", "# [B, 3, 768, 768]", "\n", "min_dist", ",", "min_idx", "=", "(", "dist", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "min", "(", "-", "1", ")", "# [B, npoint], [B, npoint]", "\n", "min_dist", "=", "torch", ".", "sqrt", "(", "min_dist", ")", "\n", "min_idx", "=", "min_idx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# drop to cpu for numpy", "\n", "match_labels", "=", "(", "min_dist", "<", "0.05", ")", ".", "float", "(", ")", "# [B, 768]", "\n", "indicator", "=", "match_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "indicator", "+=", "1e-5", "\n", "pos_probs", "=", "indicator", "/", "indicator", ".", "sum", "(", "-", "1", ",", "keepdims", "=", "True", ")", "# [B, N]", "\n", "indicator", "=", "1", "+", "1e-5", "*", "2", "-", "indicator", "\n", "neg_probs", "=", "indicator", "/", "indicator", ".", "sum", "(", "-", "1", ",", "keepdims", "=", "True", ")", "# get the proability whether the point in src has a correspondences in tgt", "\n", "\n", "##### Keypoints' Feature Extraction #####", "\n", "", "tgt_embedding", "=", "self", ".", "emb_nn", "(", "tgt", ")", "\n", "src_embedding", "=", "self", ".", "emb_nn", "(", "src", ")", "# [B, 64, N]", "\n", "\n", "src_sig_score", "=", "self", ".", "significance_fc", "(", "src_embedding", ")", ".", "squeeze", "(", "1", ")", "# [B, N]", "\n", "tgt_sig_score", "=", "self", ".", "significance_fc", "(", "tgt_embedding", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "num_point_preserved", "=", "src", ".", "size", "(", "-", "1", ")", "//", "6", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "num_point_preserved", "=", "self", ".", "K_test", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "candidates", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "src", ".", "size", "(", "-", "1", ")", ")", ",", "(", "src", ".", "size", "(", "0", ")", ",", "1", ")", ")", "\n", "pos_idx", "=", "batch_choice", "(", "candidates", ",", "num_point_preserved", "//", "2", ",", "p", "=", "pos_probs", ")", "\n", "neg_idx", "=", "batch_choice", "(", "candidates", ",", "num_point_preserved", "-", "num_point_preserved", "//", "2", ",", "p", "=", "neg_probs", ")", "\n", "src_idx", "=", "np", ".", "concatenate", "(", "[", "pos_idx", ",", "neg_idx", "]", ",", "1", ")", "\n", "tgt_idx", "=", "min_idx", "[", "np", ".", "arange", "(", "len", "(", "src", ")", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "src_idx", "]", "\n", "", "else", ":", "\n", "            ", "src_idx", "=", "src_sig_score", ".", "topk", "(", "k", "=", "num_point_preserved", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "src_idx", "=", "src_idx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "tgt_idx", "=", "tgt_sig_score", ".", "topk", "(", "k", "=", "num_point_preserved", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "tgt_idx", "=", "tgt_idx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "batch_idx", "=", "np", ".", "arange", "(", "src", ".", "size", "(", "0", ")", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "if", "self", ".", "training", ":", "\n", "            ", "match_labels", "=", "match_labels", "[", "batch_idx", ",", "src_idx", "]", "\n", "", "src", "=", "src", "[", "batch_idx", ",", ":", ",", "src_idx", "]", ".", "transpose", "(", "1", ",", "2", ")", "# [B, 3, N]", "\n", "src_embedding", "=", "src_embedding", "[", "batch_idx", ",", ":", ",", "src_idx", "]", ".", "transpose", "(", "1", ",", "2", ")", "# [B, 3, C]", "\n", "src_sig_score", "=", "src_sig_score", "[", "batch_idx", ",", "src_idx", "]", "\n", "tgt", "=", "tgt", "[", "batch_idx", ",", ":", ",", "tgt_idx", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "tgt_embedding", "=", "tgt_embedding", "[", "batch_idx", ",", ":", ",", "tgt_idx", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "tgt_sig_score", "=", "tgt_sig_score", "[", "batch_idx", ",", "tgt_idx", "]", "\n", "\n", "##### transformation initialize #####", "\n", "R", "=", "torch", ".", "eye", "(", "3", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "src", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "t", "=", "torch", ".", "zeros", "(", "src", ".", "size", "(", "0", ")", ",", "3", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "loss", "=", "0.", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_iter", ")", ":", "\n", "            ", "batch_size", ",", "num_dims", ",", "num_points", "=", "src_embedding", ".", "size", "(", ")", "\n", "_src_emb", "=", "src_embedding", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "num_points", ")", "\n", "_tgt_emb", "=", "tgt_embedding", ".", "unsqueeze", "(", "-", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "num_points", ",", "1", ")", "# [B, C, N, N]", "\n", "\n", "#### Feature Matching Matrix Computation ####", "\n", "diff_f", "=", "_tgt_emb", "-", "_src_emb", "\n", "dist_f", "=", "torch", ".", "sqrt", "(", "(", "diff_f", "**", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "diff_f", "=", "diff_f", "/", "(", "dist_f", "+", "1e-8", ")", "\n", "similarity_matrix_F", "=", "torch", ".", "cat", "(", "[", "dist_f", ",", "diff_f", "]", ",", "1", ")", "\n", "similarity_matrix_F", "=", "self", ".", "sim_mat_Fconv", "[", "i", "]", "(", "similarity_matrix_F", ")", "# [B, 1, N, N]", "\n", "\n", "##### Coordinate Matching Matrix Computation #####", "\n", "diff", "=", "src", ".", "unsqueeze", "(", "-", "1", ")", "-", "tgt", ".", "unsqueeze", "(", "-", "2", ")", "\n", "dist", "=", "(", "diff", "**", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "dist", "=", "torch", ".", "sqrt", "(", "dist", ")", "\n", "diff", "=", "diff", "/", "(", "dist", "+", "1e-8", ")", "\n", "similarity_matrix_S", "=", "torch", ".", "cat", "(", "[", "dist", ",", "diff", ",", "src", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "tgt", ".", "size", "(", "2", ")", ")", "]", ",", "1", ")", "# [B, 7, N, N]", "\n", "similarity_matrix_S", "=", "self", ".", "sim_mat_Sconv", "[", "i", "]", "(", "similarity_matrix_S", ")", "# [B, 1, N, N]", "\n", "\n", "##### Final Matching Matrix Computation #####", "\n", "similarity_matrix", "=", "similarity_matrix_F", "+", "similarity_matrix_S", "\n", "\n", "##### Correspondences Credibility Computation #####", "\n", "preweight", "=", "torch", ".", "cat", "(", "[", "similarity_matrix_F", ",", "similarity_matrix_S", "]", ",", "1", ")", "\n", "preweight", "=", "self", ".", "preweight", "[", "i", "]", "(", "preweight", ")", "\n", "weights", "=", "preweight", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "weights", "=", "self", ".", "weight_fc", "[", "i", "]", "(", "weights", ")", ".", "squeeze", "(", "1", ")", "# [B, N]", "\n", "\n", "##### Obtain  Final Matching Matrix #####", "\n", "similarity_matrix", "=", "similarity_matrix", ".", "squeeze", "(", "1", ")", "\n", "similarity_matrix", "=", "similarity_matrix", ".", "clamp", "(", "min", "=", "-", "20", ",", "max", "=", "20", ")", "# [B, N, N] in -20 ~ 20", "\n", "##### similarity matrix convolution to get similarities #####", "\n", "\n", "###############################################      Loss     ################################################################", "\n", "##### keypoints selection loss #####", "\n", "if", "self", ".", "training", "and", "i", "==", "0", ":", "\n", "                ", "src_neg_ent", "=", "torch", ".", "softmax", "(", "similarity_matrix", ".", "squeeze", "(", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "src_neg_ent", "=", "(", "src_neg_ent", "*", "torch", ".", "log", "(", "src_neg_ent", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "tgt_neg_ent", "=", "torch", ".", "softmax", "(", "similarity_matrix", ".", "squeeze", "(", "1", ")", ",", "dim", "=", "-", "2", ")", "\n", "tgt_neg_ent", "=", "(", "tgt_neg_ent", "*", "torch", ".", "log", "(", "tgt_neg_ent", ")", ")", ".", "sum", "(", "-", "2", ")", "\n", "loss", "=", "loss", "+", "(", "F", ".", "mse_loss", "(", "src_sig_score", ",", "src_neg_ent", ".", "detach", "(", ")", ")", "+", "F", ".", "mse_loss", "(", "tgt_sig_score", ",", "tgt_neg_ent", ".", "detach", "(", ")", ")", ")", "\n", "\n", "###### correspondence matching loss #####", "\n", "", "if", "self", ".", "training", ":", "\n", "                ", "temp", "=", "torch", ".", "softmax", "(", "similarity_matrix", ",", "dim", "=", "-", "1", ")", "# [B, N. N]", "\n", "temp", "=", "temp", "[", ":", ",", "np", ".", "arange", "(", "temp", ".", "size", "(", "-", "2", ")", ")", ",", "np", ".", "arange", "(", "temp", ".", "size", "(", "-", "1", ")", ")", "]", "\n", "temp", "=", "-", "torch", ".", "log", "(", "temp", ")", "\n", "match_loss", "=", "(", "temp", "*", "match_labels", ")", ".", "sum", "(", ")", "/", "match_labels", ".", "sum", "(", ")", "\n", "loss", "=", "loss", "+", "match_loss", "\n", "\n", "##### finding correspondences #####", "\n", "", "corr_idx", "=", "similarity_matrix", ".", "max", "(", "-", "1", ")", "[", "1", "]", "\n", "src_corr", "=", "tgt", "[", "np", ".", "arange", "(", "tgt", ".", "size", "(", "0", ")", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", ":", ",", "corr_idx", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "##### correspondences credibility computation loss #####", "\n", "if", "self", ".", "training", ":", "\n", "                ", "weight_labels", "=", "(", "corr_idx", "==", "torch", ".", "arange", "(", "corr_idx", ".", "size", "(", "1", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", ".", "float", "(", ")", "\n", "weight_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "weights", ",", "weight_labels", ")", "\n", "loss", "=", "loss", "+", "weight_loss", "\n", "\n", "##### Unreliable correspondence elimination #####", "\n", "", "weights", "=", "torch", ".", "sigmoid", "(", "weights", ")", "# [B,N]", "\n", "weights", "=", "weights", "*", "(", "weights", ">=", "weights", ".", "median", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ")", ".", "float", "(", ")", "\n", "weights", "=", "weights", "/", "(", "weights", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n", "##### get R and t #####", "\n", "rotation_ab", ",", "translation_ab", "=", "self", ".", "head", "(", "src", ",", "src_corr", ",", "weights", ")", "\n", "rotation_ab", "=", "rotation_ab", ".", "detach", "(", ")", "# prevent backprop through svd", "\n", "translation_ab", "=", "translation_ab", ".", "detach", "(", ")", "# prevent backprop through svd", "\n", "src", "=", "torch", ".", "matmul", "(", "rotation_ab", ",", "src", ")", "+", "translation_ab", ".", "unsqueeze", "(", "-", "1", ")", "\n", "R", "=", "torch", ".", "matmul", "(", "rotation_ab", ",", "R", ")", "\n", "t", "=", "torch", ".", "matmul", "(", "rotation_ab", ",", "t", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", ")", "+", "translation_ab", "\n", "\n", "", "return", "R", ",", "t", ",", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.__init__": [[80, 82], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "f", "=", "open", "(", "path", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.cprint": [[83, 86], ["util.IOStream.f.write", "util.IOStream.f.flush"], "methods", ["None"], ["", "def", "cprint", "(", "self", ",", "text", ")", ":", "\n", "        ", "self", ".", "f", ".", "write", "(", "text", "+", "'\\n'", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.close": [[87, 89], ["util.IOStream.f.close"], "methods", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.IOStream.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "f", ".", "close", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.quat2mat": [[12, 25], ["quat.size", "torch.stack().reshape", "torch.stack().reshape", "torch.stack().reshape", "torch.stack().reshape", "w.pow", "x.pow", "y.pow", "z.pow", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["def", "quat2mat", "(", "quat", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", ",", "w", "=", "quat", "[", ":", ",", "0", "]", ",", "quat", "[", ":", ",", "1", "]", ",", "quat", "[", ":", ",", "2", "]", ",", "quat", "[", ":", ",", "3", "]", "\n", "\n", "B", "=", "quat", ".", "size", "(", "0", ")", "\n", "\n", "w2", ",", "x2", ",", "y2", ",", "z2", "=", "w", ".", "pow", "(", "2", ")", ",", "x", ".", "pow", "(", "2", ")", ",", "y", ".", "pow", "(", "2", ")", ",", "z", ".", "pow", "(", "2", ")", "\n", "wx", ",", "wy", ",", "wz", "=", "w", "*", "x", ",", "w", "*", "y", ",", "w", "*", "z", "\n", "xy", ",", "xz", ",", "yz", "=", "x", "*", "y", ",", "x", "*", "z", ",", "y", "*", "z", "\n", "\n", "rotMat", "=", "torch", ".", "stack", "(", "[", "w2", "+", "x2", "-", "y2", "-", "z2", ",", "2", "*", "xy", "-", "2", "*", "wz", ",", "2", "*", "wy", "+", "2", "*", "xz", ",", "\n", "2", "*", "wz", "+", "2", "*", "xy", ",", "w2", "-", "x2", "+", "y2", "-", "z2", ",", "2", "*", "yz", "-", "2", "*", "wx", ",", "\n", "2", "*", "xz", "-", "2", "*", "wy", ",", "2", "*", "wx", "+", "2", "*", "yz", ",", "w2", "-", "x2", "-", "y2", "+", "z2", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.transform_point_cloud": [[27, 33], ["len", "util.quat2mat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "translation.unsqueeze", "rotation.size"], "function", ["home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.quat2mat"], ["", "def", "transform_point_cloud", "(", "point_cloud", ",", "rotation", ",", "translation", ")", ":", "\n", "    ", "if", "len", "(", "rotation", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "        ", "rot_mat", "=", "quat2mat", "(", "rotation", ")", "\n", "", "else", ":", "\n", "        ", "rot_mat", "=", "rotation", "\n", "", "return", "torch", ".", "matmul", "(", "rot_mat", ",", "point_cloud", ")", "+", "translation", ".", "unsqueeze", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.npmat2euler": [[35, 41], ["range", "numpy.asarray", "scipy.spatial.transform.Rotation.from_dcm", "eulers.append", "Rotation.from_dcm.as_euler"], "function", ["None"], ["", "def", "npmat2euler", "(", "mats", ",", "seq", "=", "'zyx'", ")", ":", "\n", "    ", "eulers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "mats", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "r", "=", "Rotation", ".", "from_dcm", "(", "mats", "[", "i", "]", ")", "\n", "eulers", ".", "append", "(", "r", ".", "as_euler", "(", "seq", ",", "degrees", "=", "True", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "eulers", ",", "dtype", "=", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.batch_choice": [[43, 50], ["range", "numpy.stack", "len", "np.stack.append", "numpy.random.choice"], "function", ["None"], ["", "def", "batch_choice", "(", "data", ",", "k", ",", "p", "=", "None", ",", "replace", "=", "False", ")", ":", "\n", "# data is [B, N]", "\n", "    ", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "        ", "out", ".", "append", "(", "np", ".", "random", ".", "choice", "(", "data", "[", "i", "]", ",", "size", "=", "k", ",", "p", "=", "p", "[", "i", "]", ",", "replace", "=", "replace", ")", ")", "\n", "", "out", "=", "np", ".", "stack", "(", "out", ",", "0", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.pairwise_distance": [[52, 59], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "src.transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "src.transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "pairwise_distance", "(", "src", ",", "dst", ")", ":", "\n", "# square of distance", "\n", "    ", "inner", "=", "2", "*", "torch", ".", "matmul", "(", "src", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "contiguous", "(", ")", ",", "dst", ")", "# src, dst (num_dims, num_points)", "\n", "distances", "=", "torch", ".", "sum", "(", "src", "**", "2", ",", "dim", "=", "-", "2", ",", "keepdim", "=", "True", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "contiguous", "(", ")", "-", "inner", "+", "torch", ".", "sum", "(", "dst", "**", "2", ",", "\n", "dim", "=", "-", "2", ",", "\n", "keepdim", "=", "True", ")", "\n", "return", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.nearest_neighbor": [[61, 68], ["distances.topk", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "src.transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "src.transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "nearest_neighbor", "(", "src", ",", "dst", ")", ":", "\n", "    ", "inner", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ",", "dst", ")", "# src, dst (num_dims, num_points)", "\n", "distances", "=", "-", "torch", ".", "sum", "(", "src", "**", "2", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "-", "inner", "-", "torch", ".", "sum", "(", "dst", "**", "2", ",", "\n", "dim", "=", "0", ",", "\n", "keepdim", "=", "True", ")", "\n", "distances", ",", "indices", "=", "distances", ".", "topk", "(", "k", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "return", "distances", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.util.knn": [[70, 77], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum.transpose().contiguous", "pairwise_distance.topk", "x.transpose().contiguous", "torch.sum.transpose", "x.transpose"], "function", ["None"], ["", "def", "knn", "(", "x", ",", "k", ")", ":", "\n", "    ", "inner", "=", "-", "2", "*", "torch", ".", "matmul", "(", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "x", ")", "\n", "xx", "=", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "pairwise_distance", "=", "-", "xx", "-", "inner", "-", "xx", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "idx", "=", "pairwise_distance", ".", "topk", "(", "k", "=", "k", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "# (batch_size, num_points, k)", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.test_modelnet40.load_h5": [[7, 13], ["h5py.File", "[].astype", "[].astype", "[].astype"], "function", ["None"], ["def", "load_h5", "(", "path", ")", ":", "\n", "    ", "f", "=", "h5py", ".", "File", "(", "path", ",", "'r+'", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", ".", "astype", "(", "'float32'", ")", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", ".", "astype", "(", "'int64'", ")", "\n", "seg", "=", "f", "[", "'seg'", "]", "[", ":", "]", ".", "astype", "(", "'int64'", ")", "\n", "return", "data", ",", "label", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.test_modelnet40.plot_pc": [[14, 29], ["open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "pc.voxel_down_sample.voxel_down_sample", "open3d.visualization.draw_geometries", "open3d.geometry.PointCloud", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.visualization.draw_geometries", "numpy.tile", "numpy.tile", "numpy.tile"], "function", ["None"], ["", "def", "plot_pc", "(", "data1", ",", "data2", "=", "None", ")", ":", "\n", "    ", "if", "data2", "is", "None", ":", "\n", "        ", "pc", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pc", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "data1", ")", "\n", "pc", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "tile", "(", "[", "0", ",", "0", ",", "255", "]", ",", "(", "data1", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", "\n", "pc", "=", "pc", ".", "voxel_down_sample", "(", "voxel_size", "=", "0.01", ")", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "pc", "]", ",", "width", "=", "800", ",", "height", "=", "600", ")", "\n", "", "if", "data2", "is", "not", "None", ":", "\n", "        ", "pc1", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pc2", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pc1", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "data1", ")", "\n", "pc2", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "data2", ")", "\n", "pc1", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "tile", "(", "[", "255", ",", "0", ",", "0", "]", ",", "(", "data1", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", "\n", "pc2", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "tile", "(", "[", "0", ",", "0", ",", "255", "]", ",", "(", "data2", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "pc1", ",", "pc2", "]", ",", "width", "=", "800", ",", "height", "=", "600", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiangLiu0731_MFGNet.None.test_modelnet40.my_plot_pc": [[30, 46], ["open3d.geometry.PointCloud", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "open3d.visualization.draw_geometries", "open3d.visualization.draw_geometries", "numpy.tile", "numpy.tile", "numpy.matmul", "numpy.tile"], "function", ["None"], ["", "", "def", "my_plot_pc", "(", "src", ",", "tgt", ",", "R", ",", "t", ")", ":", "\n", "    ", "pc1", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pc2", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pc1", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "src", ")", "\n", "pc2", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "tgt", ")", "\n", "pc1", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "tile", "(", "[", "255", ",", "0", ",", "0", "]", ",", "(", "src", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", "\n", "pc2", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "tile", "(", "[", "0", ",", "0", ",", "255", "]", ",", "(", "tgt", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", "\n", "\n", "tgt_pre", "=", "np", ".", "matmul", "(", "R", ",", "src", ".", "T", ")", "+", "t", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "tgt_pre", "=", "tgt_pre", ".", "T", "\n", "pc3", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pc3", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "tgt_pre", ")", "\n", "pc3", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "tile", "(", "[", "255", ",", "0", ",", "0", "]", ",", "(", "tgt_pre", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", "\n", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "pc1", ",", "pc2", "]", ",", "width", "=", "800", ",", "height", "=", "600", ")", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "pc3", ",", "pc2", "]", ",", "width", "=", "800", ",", "height", "=", "600", ")", "\n", "\n"]]}