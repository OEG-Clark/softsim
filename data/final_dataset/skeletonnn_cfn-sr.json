{"home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.ravdess.RAVDESSDataset.__init__": [[63, 84], ["print", "glob.glob", "os.path.join", "ravdess.RAVDESSDataset.video_list.append", "str", "str", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "actor_folds", ",", "modality", "=", "(", "'video'", ",", "'audio'", ")", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param actor_folds: a list of actor folder paths\n        :param modality: list of modalities, default ('video', 'audio')\n        :param transform: data transform or a dict with\n        {\n            \"image_transform\": transform function or None\n            \"audio_transform\": transform function or None\n        }\n        \"\"\"", "\n", "self", ".", "video_list", "=", "[", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "modality", "=", "modality", "\n", "\n", "actor_counter", "=", "0", "\n", "for", "each_actor", "in", "actor_folds", ":", "\n", "            ", "for", "each_video", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "each_actor", ",", "\"*.mp4\"", ")", ")", ":", "\n", "                ", "self", ".", "video_list", ".", "append", "(", "each_video", ")", "\n", "", "actor_counter", "+=", "1", "\n", "\n", "", "print", "(", "\"{} videos for {} actors found.\"", ".", "format", "(", "str", "(", "len", "(", "self", ".", "video_list", ")", ")", ",", "str", "(", "actor_counter", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.ravdess.RAVDESSDataset.__len__": [[85, 87], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "video_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.ravdess.RAVDESSDataset._read_images": [[88, 105], ["os.path.join", "sorted", "torch.stack", "glob.glob", "cv2.imread", "torch.stack.append", "torch.stack.float", "os.path.join", "transform", "torch.tensor.squeeze_", "torch.tensor"], "methods", ["None"], ["", "def", "_read_images", "(", "self", ",", "idx", ",", "transform", ")", ":", "\n", "        ", "X", "=", "[", "]", "\n", "video_path", "=", "self", ".", "video_list", "[", "idx", "]", "\n", "frames_path", "=", "os", ".", "path", ".", "join", "(", "video_path", ",", "\"frames\"", ")", "\n", "frames_lst", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "frames_path", ",", "\"*.jpg\"", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "6", ":", "]", ")", "\n", "\n", "for", "frame", "in", "frames_lst", ":", "\n", "            ", "img", "=", "cv2", ".", "imread", "(", "frame", ")", "\n", "if", "transform", ":", "\n", "                ", "img", "=", "transform", "(", "img", ")", "\n", "img", "=", "img", ".", "squeeze_", "(", "0", ")", "# remove fake batch dimension", "\n", "", "else", ":", "\n", "                ", "img", "=", "torch", ".", "tensor", "(", "img", ")", "\n", "", "X", ".", "append", "(", "img", ")", "\n", "", "X", "=", "torch", ".", "stack", "(", "X", ",", "dim", "=", "0", ")", "\n", "\n", "return", "{", "'images'", ":", "X", ".", "float", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.ravdess.RAVDESSDataset._read_audio": [[106, 120], ["os.path.join", "os.path.join", "librosa.load", "transform", "numpy.array", "librosa.feature.mfcc", "numpy.load", "torch.tensor"], "methods", ["None"], ["", "def", "_read_audio", "(", "self", ",", "idx", ",", "transform", ")", ":", "\n", "        ", "video_path", "=", "self", ".", "video_list", "[", "idx", "]", "\n", "audio_path", "=", "os", ".", "path", ".", "join", "(", "video_path", ",", "\"audios/featuresMFCC.npy\"", ")", "\n", "\n", "if", "transform", ":", "\n", "            ", "wav_file", "=", "os", ".", "path", ".", "join", "(", "video_path", ",", "\"audios/audio.wav\"", ")", "\n", "X", ",", "sample_rate", "=", "librosa", ".", "load", "(", "wav_file", ",", "duration", "=", "2.45", ",", "sr", "=", "22050", "*", "2", ",", "offset", "=", "0.5", ")", "\n", "X", "=", "transform", "(", "X", ")", "\n", "sample_rate", "=", "np", ".", "array", "(", "sample_rate", ")", "\n", "features", "=", "librosa", ".", "feature", ".", "mfcc", "(", "y", "=", "X", ",", "sr", "=", "sample_rate", ",", "n_mfcc", "=", "13", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "np", ".", "load", "(", "audio_path", ")", "\n", "\n", "", "return", "{", "'mfcc'", ":", "torch", ".", "tensor", "(", "features", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.ravdess.RAVDESSDataset.__getitem__": [[121, 143], ["ravdess.parse_gt", "torch.LongTensor", "os.path.basename", "ravdess.RAVDESSDataset._read_images", "sample.update", "ravdess.RAVDESSDataset._read_audio", "sample.update", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.ravdess.parse_gt", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.ravdess.RAVDESSDataset._read_images", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.ravdess.RAVDESSDataset._read_audio"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "gt", "=", "parse_gt", "(", "os", ".", "path", ".", "basename", "(", "self", ".", "video_list", "[", "idx", "]", ")", ")", "\n", "y", "=", "torch", ".", "LongTensor", "(", "[", "gt", "[", "\"emotion\"", "]", "-", "1", "]", ")", "# id starts in 1", "\n", "\n", "sample", "=", "{", "'emotion'", ":", "y", "}", "\n", "\n", "if", "\"video\"", "in", "self", ".", "modality", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "transform", ",", "dict", ")", "and", "\"image_transform\"", "in", "self", ".", "transform", ":", "\n", "                ", "image_transform", "=", "self", ".", "transform", "[", "\"image_transform\"", "]", "\n", "", "else", ":", "\n", "                ", "image_transform", "=", "self", ".", "transform", "\n", "", "image_feature", "=", "self", ".", "_read_images", "(", "idx", ",", "image_transform", ")", "\n", "sample", ".", "update", "(", "image_feature", ")", "\n", "", "if", "\"audio\"", "in", "self", ".", "modality", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "transform", ",", "dict", ")", "and", "\"audio_transform\"", "in", "self", ".", "transform", ":", "\n", "                ", "audio_transform", "=", "self", ".", "transform", "[", "\"audio_transform\"", "]", "\n", "", "else", ":", "\n", "                ", "audio_transform", "=", "self", ".", "transform", "\n", "", "audio_features", "=", "self", ".", "_read_audio", "(", "idx", ",", "audio_transform", ")", "\n", "sample", ".", "update", "(", "audio_features", ")", "\n", "\n", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.ravdess.parse_gt": [[50, 58], ["video_dict.keys", "video_name.strip", "y.split.split", "zip", "int"], "function", ["None"], ["def", "parse_gt", "(", "video_name", ")", ":", "\n", "    ", "video_keys", "=", "video_dict", ".", "keys", "(", ")", "\n", "gt", "=", "{", "}", "\n", "y", "=", "video_name", ".", "strip", "(", "\".mp4\"", ")", "\n", "y", "=", "y", ".", "split", "(", "\"-\"", ")", "\n", "for", "k", ",", "v", "in", "zip", "(", "video_keys", ",", "y", ")", ":", "\n", "        ", "gt", "[", "k", "]", "=", "int", "(", "v", ")", "\n", "", "return", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.main_msaf.get_n_params": [[52, 60], ["list", "model.parameters", "list", "p.size"], "function", ["None"], ["def", "get_n_params", "(", "model", ")", ":", "\n", "    ", "pp", "=", "0", "\n", "for", "p", "in", "list", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "nn", "=", "1", "\n", "for", "s", "in", "list", "(", "p", ".", "size", "(", ")", ")", ":", "\n", "            ", "nn", "=", "nn", "*", "s", "\n", "", "pp", "+=", "nn", "\n", "", "return", "pp", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.main_msaf.get_X": [[62, 68], ["sample[].to", "images.permute.permute", "sample[].to", "images[].size"], "function", ["None"], ["", "def", "get_X", "(", "device", ",", "sample", ")", ":", "\n", "    ", "images", "=", "sample", "[", "\"images\"", "]", ".", "to", "(", "device", ")", "\n", "images", "=", "images", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "# swap to be (N, C, D, H, W)", "\n", "mfcc", "=", "sample", "[", "\"mfcc\"", "]", ".", "to", "(", "device", ")", "\n", "n", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "return", "[", "images", ",", "mfcc", "]", ",", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.main_utils.accuracy_topk": [[31, 44], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["def", "accuracy_topk", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.main_utils.train": [[46, 81], ["model.train", "enumerate", "len", "get_X", "sample[].to().squeeze", "model", "optimizer.zero_grad", "loss_func", "losses.append", "main_utils.accuracy_topk", "enumerate", "loss_func.backward", "optimizer.step", "loss_func.item", "scores[].append", "print", "enumerate", "sample[].to", "int", "print", "len", "loss_func.item", "len", "float"], "function", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.main_utils.train", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.main_msaf.get_X", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.main_utils.accuracy_topk"], ["", "def", "train", "(", "get_X", ",", "log_interval", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "loss_func", ",", "metric_topk", ",", "epoch", ")", ":", "\n", "# set model as training mode", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "losses", "=", "[", "]", "\n", "scores", "=", "[", "[", "]", "]", "*", "len", "(", "metric_topk", ")", "\n", "N_count", "=", "0", "# counting total trained sample in one epoch", "\n", "\n", "for", "batch_idx", ",", "sample", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# distribute data to device", "\n", "        ", "X", ",", "n", "=", "get_X", "(", "device", ",", "sample", ")", "\n", "y", "=", "sample", "[", "\"emotion\"", "]", ".", "to", "(", "device", ")", ".", "squeeze", "(", ")", "\n", "output", "=", "model", "(", "X", ")", "\n", "\n", "N_count", "+=", "n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", "=", "loss_func", "(", "output", ",", "y", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "step_score", "=", "accuracy_topk", "(", "output", ",", "y", ",", "topk", "=", "metric_topk", ")", "\n", "for", "i", ",", "ss", "in", "enumerate", "(", "step_score", ")", ":", "\n", "            ", "scores", "[", "i", "]", ".", "append", "(", "int", "(", "ss", ")", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# show information", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "N_count", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "(", "batch_idx", "+", "1", ")", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "for", "i", ",", "each_k", "in", "enumerate", "(", "metric_topk", ")", ":", "\n", "                ", "print", "(", "\"Top {} accuracy: {:.2f}%\"", ".", "format", "(", "each_k", ",", "float", "(", "step_score", "[", "i", "]", ")", ")", ")", "\n", "\n", "", "", "", "return", "losses", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.main_utils.validation": [[83, 124], ["model.eval", "numpy.mean", "torch.stack", "torch.stack", "print", "enumerate", "print", "torch.no_grad", "float", "print", "sklearn.metrics.confusion_matrix", "print", "print", "get_X", "sample[].to().squeeze", "model", "loss_func", "np.mean.append", "torch.stack.extend", "torch.stack.extend", "main_utils.accuracy_topk", "len", "torch.stack.cpu().data.squeeze().numpy", "torch.stack.cpu().data.squeeze().numpy", "loss_func.item", "sample[].to", "torch.stack.cpu().data.squeeze", "torch.stack.cpu().data.squeeze", "torch.stack.cpu", "torch.stack.cpu"], "function", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.main_msaf.get_X", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.main_utils.accuracy_topk"], ["", "def", "validation", "(", "get_X", ",", "model", ",", "device", ",", "loss_func", ",", "val_loader", ",", "metric_topk", ",", "show_cm", "=", "False", ")", ":", "\n", "# set model as testing mode", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "test_loss", "=", "[", "]", "\n", "all_y", "=", "[", "]", "\n", "all_y_pred", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "sample", "in", "val_loader", ":", "\n", "# distribute data to device", "\n", "            ", "X", ",", "_", "=", "get_X", "(", "device", ",", "sample", ")", "\n", "y", "=", "sample", "[", "\"emotion\"", "]", ".", "to", "(", "device", ")", ".", "squeeze", "(", ")", "\n", "output", "=", "model", "(", "X", ")", "\n", "\n", "loss", "=", "loss_func", "(", "output", ",", "y", ")", "\n", "test_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "# sum up batch loss", "\n", "\n", "# collect all y and y_pred in all batches", "\n", "all_y", ".", "extend", "(", "y", ")", "\n", "all_y_pred", ".", "extend", "(", "output", ")", "\n", "\n", "", "", "test_loss", "=", "np", ".", "mean", "(", "test_loss", ")", "\n", "\n", "# compute accuracy", "\n", "all_y", "=", "torch", ".", "stack", "(", "all_y", ",", "dim", "=", "0", ")", "\n", "all_y_pred", "=", "torch", ".", "stack", "(", "all_y_pred", ",", "dim", "=", "0", ")", "\n", "test_score", "=", "[", "float", "(", "t_acc", ")", "for", "t_acc", "in", "accuracy_topk", "(", "all_y_pred", ",", "all_y", ",", "topk", "=", "metric_topk", ")", "]", "\n", "\n", "# show information", "\n", "print", "(", "'\\nTest set ({:d} samples): Average loss: {:.4f}'", ".", "format", "(", "len", "(", "all_y", ")", ",", "test_loss", ")", ")", "\n", "for", "i", ",", "each_k", "in", "enumerate", "(", "metric_topk", ")", ":", "\n", "        ", "print", "(", "\"Top {} accuracy: {:.2f}%\"", ".", "format", "(", "each_k", ",", "test_score", "[", "i", "]", ")", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n", "if", "show_cm", ":", "\n", "        ", "cm", "=", "confusion_matrix", "(", "all_y", ".", "cpu", "(", ")", ".", "data", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "all_y_pred", ".", "cpu", "(", ")", ".", "data", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "\"Confusion matrix\"", ")", "\n", "print", "(", "cm", ")", "\n", "\n", "", "return", "test_loss", ",", "test_score", "\n", "", ""]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.dataset_prep.preprocess_video": [[30, 53], ["os.path.join", "os.path.join", "glob.glob", "os.path.join", "os.path.basename", "os.path.join", "glob.glob", "os.path.exists", "os.makedirs", "os.path.join", "os.path.basename", "os.path.join", "os.path.join", "video_utils.VideoProcessor", "video_utils.VideoProcessor.preprocess", "[].split", "int", "os.path.exists", "os.mkdir", "each_video.split"], "function", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.video_utils.VideoProcessor.preprocess"], ["def", "preprocess_video", "(", "dataset_folder", ")", ":", "\n", "    ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "dataset_folder", ",", "\"preprocessed\"", ")", "\n", "landmark_folder", "=", "os", ".", "path", ".", "join", "(", "dataset_folder", ",", "\"landmarks\"", ")", "\n", "\n", "for", "each_actor", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dataset_folder", ",", "\"Actor*\"", ")", ")", ":", "\n", "        ", "actor_name", "=", "os", ".", "path", ".", "basename", "(", "each_actor", ")", "\n", "output_actor_folder", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "actor_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_actor_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_actor_folder", ")", "\n", "\n", "", "for", "each_video", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "each_actor", ",", "\"*.mp4\"", ")", ")", ":", "\n", "            ", "name", "=", "each_video", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "\n", "if", "int", "(", "name", ")", "==", "2", ":", "\n", "                ", "continue", "\n", "", "video_name", "=", "os", ".", "path", ".", "basename", "(", "each_video", ")", "\n", "landmark_path", "=", "os", ".", "path", ".", "join", "(", "landmark_folder", ",", "video_name", "[", ":", "-", "4", "]", "+", "'.csv'", ")", "\n", "frames_folder", "=", "os", ".", "path", ".", "join", "(", "output_actor_folder", ",", "video_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "frames_folder", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "frames_folder", ")", "\n", "", "video_processor", "=", "VideoProcessor", "(", "video_path", "=", "each_video", ",", "landmark_path", "=", "landmark_path", ",", "\n", "output_folder", "=", "frames_folder", ",", "extract_audio", "=", "True", ")", "\n", "video_processor", ".", "preprocess", "(", "seq_len", "=", "30", ",", "target_resolution", "=", "(", "224", ",", "224", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.dataset_prep.get_audio_paths": [[55, 63], ["os.listdir", "os.path.join", "os.listdir", "os.path.join"], "function", ["None"], ["", "", "", "def", "get_audio_paths", "(", "path", ")", ":", "\n", "    ", "audio_files", "=", "[", "]", "\n", "actors", "=", "os", ".", "listdir", "(", "path", ")", "\n", "for", "a", "in", "actors", ":", "\n", "        ", "path_to_folders", "=", "os", ".", "path", ".", "join", "(", "path", ",", "a", ")", "\n", "folders", "=", "os", ".", "listdir", "(", "path_to_folders", ")", "\n", "audio_files", "+=", "[", "os", ".", "path", ".", "join", "(", "path_to_folders", ",", "p", ")", "for", "p", "in", "folders", "]", "\n", "", "return", "audio_files", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.dataset_prep.mfcc_features": [[65, 74], ["os.path.join", "dataset_prep.get_audio_paths", "tqdm.tqdm", "librosa.load", "numpy.array", "librosa.feature.mfcc", "numpy.save", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.dataset_prep.get_audio_paths"], ["", "def", "mfcc_features", "(", "dataset_folder", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "dataset_folder", ",", "\"preprocessed\"", ")", "\n", "files", "=", "get_audio_paths", "(", "path", ")", "\n", "for", "f", "in", "tqdm", "(", "files", ")", ":", "\n", "        ", "X", ",", "sample_rate", "=", "librosa", ".", "load", "(", "os", ".", "path", ".", "join", "(", "f", ",", "'audios/audio.wav'", ")", ",", "\n", "duration", "=", "2.45", ",", "sr", "=", "22050", "*", "2", ",", "offset", "=", "0.5", ")", "\n", "sample_rate", "=", "np", ".", "array", "(", "sample_rate", ")", "\n", "mfccs", "=", "librosa", ".", "feature", ".", "mfcc", "(", "y", "=", "X", ",", "sr", "=", "sample_rate", ",", "n_mfcc", "=", "13", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "f", ",", "'audios/featuresMFCC.npy'", ")", ",", "mfccs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.video_utils.VideoProcessor.__init__": [[28, 42], ["os.path.join", "os.path.join", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "video_path", ",", "landmark_path", ",", "output_folder", ",", "extract_audio", ")", ":", "\n", "# path of the video file", "\n", "        ", "self", ".", "video_path", "=", "video_path", "\n", "self", ".", "landmarks_path", "=", "landmark_path", "\n", "self", ".", "extract_audio", "=", "extract_audio", "\n", "self", ".", "frames_folder", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"frames\"", ")", "\n", "self", ".", "audios_folder", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"audios\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_folder", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_folder", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "audios_folder", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "audios_folder", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "frames_folder", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "frames_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.None.video_utils.VideoProcessor.preprocess": [[43, 85], ["moviepy.editor.VideoFileClip", "list", "enumerate", "print", "moviepy.editor.VideoFileClip.audio.write_audiofile", "numpy.arange", "len", "list.append", "numpy.genfromtxt", "int", "len", "lm_times.append", "cv2.cvtColor", "int", "int", "int", "int", "cv2.resize", "cv2.imwrite", "os.path.join", "numpy.ceil", "list", "moviepy.editor.VideoFileClip.get_frame", "os.path.join", "len", "numpy.arange", "len", "max", "max", "min", "min", "len", "len"], "methods", ["None"], ["", "", "def", "preprocess", "(", "self", ",", "seq_len", "=", "30", ",", "target_resolution", "=", "(", "224", ",", "224", ")", ")", ":", "\n", "        ", "\"\"\"\n        extract frames and audio from the video,\n        store the cropped frames and audio file in the output folders\n        seq_len: how many frames will be extracted from the video.\n                  Considering all videos from this dataset have similar duration\n                  video_duration = seq_len / fps\n        target_resolution: (desired_height, desired_width) of the facial frame extracted\n        \"\"\"", "\n", "video", "=", "VideoFileClip", "(", "self", ".", "video_path", ",", "audio", "=", "self", ".", "extract_audio", ",", "target_resolution", "=", "target_resolution", ")", "\n", "if", "self", ".", "extract_audio", ":", "\n", "            ", "video", ".", "audio", ".", "write_audiofile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "audios_folder", ",", "\"audio.wav\"", ")", ")", "\n", "\n", "", "times", "=", "list", "(", "np", ".", "arange", "(", "0", ",", "video", ".", "duration", ",", "video", ".", "duration", "/", "seq_len", ")", ")", "\n", "if", "len", "(", "times", ")", "<", "seq_len", ":", "\n", "            ", "times", ".", "append", "(", "video", ".", "duration", ")", "\n", "", "times", "=", "times", "[", ":", "seq_len", "]", "\n", "\n", "# extract 2D points from csv", "\n", "data", "=", "np", ".", "genfromtxt", "(", "self", ".", "landmarks_path", ",", "delimiter", "=", "','", ")", "[", "1", ":", "]", "\n", "lm_times", "=", "[", "int", "(", "np", ".", "ceil", "(", "t", ")", ")", "for", "t", "in", "list", "(", "np", ".", "arange", "(", "0", ",", "len", "(", "data", ")", ",", "len", "(", "data", ")", "/", "seq_len", ")", ")", "]", "\n", "if", "len", "(", "lm_times", ")", "<", "seq_len", ":", "\n", "            ", "lm_times", ".", "append", "(", "len", "(", "data", ")", "-", "1", ")", "\n", "", "lm_times", "=", "lm_times", "[", ":", "seq_len", "]", "\n", "index_x", "=", "(", "298", ",", "366", ")", "\n", "index_y", "=", "(", "366", ",", "433", ")", "\n", "landmarks_2d_x", "=", "[", "data", "[", "t", ",", "index_x", "[", "0", "]", "-", "1", ":", "index_x", "[", "1", "]", "-", "1", "]", "*", "(", "1", "/", "1280", ")", "for", "t", "in", "lm_times", "]", "\n", "landmarks_2d_y", "=", "[", "data", "[", "t", ",", "index_y", "[", "0", "]", "-", "1", ":", "index_y", "[", "1", "]", "]", "*", "(", "1", "/", "720", ")", "for", "t", "in", "lm_times", "]", "\n", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "times", ")", ":", "\n", "            ", "img", "=", "cv2", ".", "cvtColor", "(", "video", ".", "get_frame", "(", "t", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "# extract roi from landmarks and crop", "\n", "xs", ",", "ys", "=", "landmarks_2d_x", "[", "i", "]", ",", "landmarks_2d_y", "[", "i", "]", "\n", "bottom", "=", "int", "(", "max", "(", "ys", ")", "*", "img", ".", "shape", "[", "0", "]", ")", "\n", "right", "=", "int", "(", "max", "(", "xs", ")", "*", "img", ".", "shape", "[", "1", "]", ")", "\n", "top", "=", "int", "(", "min", "(", "ys", ")", "*", "img", ".", "shape", "[", "0", "]", ")", "\n", "left", "=", "int", "(", "min", "(", "xs", ")", "*", "img", ".", "shape", "[", "1", "]", ")", "\n", "\n", "cropped", "=", "cv2", ".", "resize", "(", "img", "[", "top", ":", "bottom", ",", "left", ":", "right", ",", ":", "]", ",", "target_resolution", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "frames_folder", ",", "\"frame_{0:.2f}.jpg\"", ".", "format", "(", "t", ")", ")", ",", "cropped", ")", "\n", "\n", "", "print", "(", "\"Video duration {} seconds. Extracted {} frames\"", ".", "format", "(", "video", ".", "duration", ",", "len", "(", "times", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.__init__": [[16, 42], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "multihead_attention.MultiheadAttention.register_parameter", "torch.nn.Linear", "torch.nn.Linear", "multihead_attention.MultiheadAttention.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.reset_parameters"], ["def", "__init__", "(", "self", ",", "embed_dim", ",", "num_heads", ",", "attn_dropout", "=", "0.", ",", "\n", "bias", "=", "True", ",", "add_bias_kv", "=", "False", ",", "add_zero_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "attn_dropout", "=", "attn_dropout", "\n", "self", ".", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "# print(self.head_dim, embed_dim, num_heads)", "\n", "assert", "self", ".", "head_dim", "*", "num_heads", "==", "self", ".", "embed_dim", ",", "\"embed_dim must be divisible by num_heads\"", "\n", "self", ".", "scaling", "=", "self", ".", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "in_proj_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "3", "*", "embed_dim", ",", "embed_dim", ")", ")", "\n", "self", ".", "register_parameter", "(", "'in_proj_bias'", ",", "None", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "in_proj_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "3", "*", "embed_dim", ")", ")", "\n", "", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ",", "bias", "=", "bias", ")", "\n", "\n", "if", "add_bias_kv", ":", "\n", "            ", "self", ".", "bias_k", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "bias_v", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias_k", "=", "self", ".", "bias_v", "=", "None", "\n", "\n", "", "self", ".", "add_zero_attn", "=", "add_zero_attn", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.reset_parameters": [[43, 53], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "in_proj_weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "out_proj", ".", "weight", ")", "\n", "if", "self", ".", "in_proj_bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "in_proj_bias", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "out_proj", ".", "bias", ",", "0.", ")", "\n", "", "if", "self", ".", "bias_k", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "bias_k", ")", "\n", "", "if", "self", ".", "bias_v", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "bias_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.forward": [[54, 138], ["query.size", "multihead_attention.MultiheadAttention.contiguous().view().transpose", "multihead_attention.MultiheadAttention.size", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax().type_as", "torch.softmax().type_as", "torch.dropout", "torch.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "multihead_attention.MultiheadAttention.transpose().contiguous().view", "multihead_attention.MultiheadAttention.out_proj", "attn_weights.view.view.view", "query.data_ptr", "key.data_ptr", "value.data_ptr", "key.data_ptr", "value.data_ptr", "list", "key.size", "value.size", "multihead_attention.MultiheadAttention.in_proj_qkv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "multihead_attention.MultiheadAttention.contiguous().view().transpose", "multihead_attention.MultiheadAttention.contiguous().view().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "multihead_attention.MultiheadAttention.transpose", "list", "list", "attn_weights.view.view.sum", "query.size", "multihead_attention.MultiheadAttention.in_proj_q", "multihead_attention.MultiheadAttention.in_proj_q", "multihead_attention.MultiheadAttention.in_proj_k", "multihead_attention.MultiheadAttention.in_proj_v", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "multihead_attention.MultiheadAttention.contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attn_weights.view.view.size", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.softmax", "torch.softmax", "multihead_attention.MultiheadAttention.size", "multihead_attention.MultiheadAttention.transpose().contiguous", "multihead_attention.MultiheadAttention.in_proj_kv", "multihead_attention.MultiheadAttention.bias_k.repeat", "multihead_attention.MultiheadAttention.bias_v.repeat", "multihead_attention.MultiheadAttention.contiguous().view", "multihead_attention.MultiheadAttention.contiguous().view", "multihead_attention.MultiheadAttention.new_zeros", "multihead_attention.MultiheadAttention.new_zeros", "print", "print", "attn_weights.view.view.float", "torch.cat.new_zeros", "torch.cat.new_zeros", "multihead_attention.MultiheadAttention.contiguous", "torch.cat.new_zeros", "torch.cat.new_zeros", "multihead_attention.MultiheadAttention.transpose", "torch.cat.size", "torch.cat.size", "multihead_attention.MultiheadAttention.contiguous", "multihead_attention.MultiheadAttention.contiguous", "torch.cat.size", "torch.cat.size", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "multihead_attention.MultiheadAttention.size", "multihead_attention.MultiheadAttention.size", "multihead_attention.MultiheadAttention.size", "multihead_attention.MultiheadAttention.size"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.in_proj_qkv", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.in_proj_q", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.in_proj_q", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.in_proj_k", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.in_proj_v", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.in_proj_kv"], ["", "", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "attn_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"Input shape: Time x Batch x Channel\n        Self-attention can be implemented by passing in the same arguments for\n        query, key and value. Timesteps can be masked by supplying a T x T mask in the\n        `attn_mask` argument. Padding elements can be excluded from\n        the key by passing a binary ByteTensor (`key_padding_mask`) with shape:\n        batch x src_len, where padding elements are indicated by 1s.\n        \"\"\"", "\n", "qkv_same", "=", "query", ".", "data_ptr", "(", ")", "==", "key", ".", "data_ptr", "(", ")", "==", "value", ".", "data_ptr", "(", ")", "\n", "kv_same", "=", "key", ".", "data_ptr", "(", ")", "==", "value", ".", "data_ptr", "(", ")", "\n", "\n", "tgt_len", ",", "bsz", ",", "embed_dim", "=", "query", ".", "size", "(", ")", "\n", "assert", "embed_dim", "==", "self", ".", "embed_dim", "\n", "assert", "list", "(", "query", ".", "size", "(", ")", ")", "==", "[", "tgt_len", ",", "bsz", ",", "embed_dim", "]", "\n", "assert", "key", ".", "size", "(", ")", "==", "value", ".", "size", "(", ")", "\n", "\n", "aved_state", "=", "None", "\n", "\n", "if", "qkv_same", ":", "\n", "# self-attention", "\n", "            ", "q", ",", "k", ",", "v", "=", "self", ".", "in_proj_qkv", "(", "query", ")", "\n", "", "elif", "kv_same", ":", "\n", "# encoder-decoder attention", "\n", "            ", "q", "=", "self", ".", "in_proj_q", "(", "query", ")", "\n", "\n", "if", "key", "is", "None", ":", "\n", "                ", "assert", "value", "is", "None", "\n", "k", "=", "v", "=", "None", "\n", "", "else", ":", "\n", "                ", "k", ",", "v", "=", "self", ".", "in_proj_kv", "(", "key", ")", "\n", "", "", "else", ":", "\n", "            ", "q", "=", "self", ".", "in_proj_q", "(", "query", ")", "\n", "k", "=", "self", ".", "in_proj_k", "(", "key", ")", "\n", "v", "=", "self", ".", "in_proj_v", "(", "value", ")", "\n", "", "q", "=", "q", "*", "self", ".", "scaling", "\n", "\n", "if", "self", ".", "bias_k", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "bias_v", "is", "not", "None", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "self", ".", "bias_k", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "self", ".", "bias_v", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "torch", ".", "cat", "(", "[", "attn_mask", ",", "attn_mask", ".", "new_zeros", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "q", "=", "q", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "k", "is", "not", "None", ":", "\n", "            ", "k", "=", "k", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "if", "v", "is", "not", "None", ":", "\n", "            ", "v", "=", "v", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "", "src_len", "=", "k", ".", "size", "(", "1", ")", "\n", "\n", "if", "self", ".", "add_zero_attn", ":", "\n", "            ", "src_len", "+=", "1", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "k", ".", "new_zeros", "(", "(", "k", ".", "size", "(", "0", ")", ",", "1", ")", "+", "k", ".", "size", "(", ")", "[", "2", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "v", ".", "new_zeros", "(", "(", "v", ".", "size", "(", "0", ")", ",", "1", ")", "+", "v", ".", "size", "(", ")", "[", "2", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "torch", ".", "cat", "(", "[", "attn_mask", ",", "attn_mask", ".", "new_zeros", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "attn_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "assert", "list", "(", "attn_weights", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", "]", "\n", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "attn_weights", "+=", "attn_mask", ".", "unsqueeze", "(", "0", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "attn_weights", ".", "shape", ")", "\n", "print", "(", "attn_mask", ".", "unsqueeze", "(", "0", ")", ".", "shape", ")", "\n", "assert", "False", "\n", "\n", "", "", "attn_weights", "=", "F", ".", "softmax", "(", "attn_weights", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "type_as", "(", "attn_weights", ")", "\n", "# attn_weights = F.relu(attn_weights)", "\n", "# attn_weights = attn_weights / torch.max(attn_weights)", "\n", "attn_weights", "=", "F", ".", "dropout", "(", "attn_weights", ",", "p", "=", "self", ".", "attn_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "attn", "=", "torch", ".", "bmm", "(", "attn_weights", ",", "v", ")", "\n", "assert", "list", "(", "attn", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "self", ".", "head_dim", "]", "\n", "\n", "attn", "=", "attn", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "embed_dim", ")", "\n", "attn", "=", "self", ".", "out_proj", "(", "attn", ")", "\n", "\n", "# average attention weights over heads", "\n", "attn_weights", "=", "attn_weights", ".", "view", "(", "bsz", ",", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "attn_weights", "=", "attn_weights", ".", "sum", "(", "dim", "=", "1", ")", "/", "self", ".", "num_heads", "\n", "return", "attn", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.in_proj_qkv": [[139, 141], ["multihead_attention.MultiheadAttention._in_proj().chunk", "multihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention._in_proj"], ["", "def", "in_proj_qkv", "(", "self", ",", "query", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "query", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.in_proj_kv": [[142, 144], ["multihead_attention.MultiheadAttention._in_proj().chunk", "multihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention._in_proj"], ["", "def", "in_proj_kv", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "key", ",", "start", "=", "self", ".", "embed_dim", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.in_proj_q": [[145, 147], ["multihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention._in_proj"], ["", "def", "in_proj_q", "(", "self", ",", "query", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "query", ",", "end", "=", "self", ".", "embed_dim", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.in_proj_k": [[148, 150], ["multihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention._in_proj"], ["", "def", "in_proj_k", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "key", ",", "start", "=", "self", ".", "embed_dim", ",", "end", "=", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention.in_proj_v": [[151, 153], ["multihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention._in_proj"], ["", "def", "in_proj_v", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "value", ",", "start", "=", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.multihead_attention.MultiheadAttention._in_proj": [[154, 161], ["kwargs.get", "kwargs.get", "torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "_in_proj", "(", "self", ",", "input", ",", "start", "=", "0", ",", "end", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "weight", "=", "kwargs", ".", "get", "(", "'weight'", ",", "self", ".", "in_proj_weight", ")", "\n", "bias", "=", "kwargs", ".", "get", "(", "'bias'", ",", "self", ".", "in_proj_bias", ")", "\n", "weight", "=", "weight", "[", "start", ":", "end", ",", ":", "]", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "bias", "[", "start", ":", "end", "]", "\n", "", "return", "F", ".", "linear", "(", "input", ",", "weight", ",", "bias", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.position_embedding.SinusoidalPositionalEmbedding.__init__": [[36, 43], ["torch.Module.__init__", "dict", "position_embedding.SinusoidalPositionalEmbedding.register_buffer", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "embedding_dim", ",", "padding_idx", "=", "0", ",", "left_pad", "=", "0", ",", "init_size", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "padding_idx", "=", "padding_idx", "\n", "self", ".", "left_pad", "=", "left_pad", "\n", "self", ".", "weights", "=", "dict", "(", ")", "# device --> actual weight; due to nn.DataParallel :-(", "\n", "self", ".", "register_buffer", "(", "'_float_tensor'", ",", "torch", ".", "FloatTensor", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.position_embedding.SinusoidalPositionalEmbedding.get_embedding": [[44, 61], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "math.log", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "None", ")", ":", "\n", "        ", "\"\"\"Build sinusoidal embeddings.\n        This matches the implementation in tensor2tensor, but differs slightly\n        from the description in Section 3.5 of \"Attention Is All You Need\".\n        \"\"\"", "\n", "half_dim", "=", "embedding_dim", "//", "2", "\n", "emb", "=", "math", ".", "log", "(", "10000", ")", "/", "(", "half_dim", "-", "1", ")", "\n", "emb", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "half_dim", ",", "dtype", "=", "torch", ".", "float", ")", "*", "-", "emb", ")", "\n", "emb", "=", "torch", ".", "arange", "(", "num_embeddings", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "*", "emb", ".", "unsqueeze", "(", "0", ")", "\n", "emb", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sin", "(", "emb", ")", ",", "torch", ".", "cos", "(", "emb", ")", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "num_embeddings", ",", "-", "1", ")", "\n", "if", "embedding_dim", "%", "2", "==", "1", ":", "\n", "# zero pad", "\n", "            ", "emb", "=", "torch", ".", "cat", "(", "[", "emb", ",", "torch", ".", "zeros", "(", "num_embeddings", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "padding_idx", "is", "not", "None", ":", "\n", "            ", "emb", "[", "padding_idx", ",", ":", "]", "=", "0", "\n", "", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.position_embedding.SinusoidalPositionalEmbedding.forward": [[62, 77], ["input.size", "input.get_device", "position_embedding.SinusoidalPositionalEmbedding.weights[].type_as", "position_embedding.make_positions", "position_embedding.SinusoidalPositionalEmbedding.weights[].index_select().view().detach", "position_embedding.SinusoidalPositionalEmbedding.get_embedding", "position_embedding.SinusoidalPositionalEmbedding.weights[].size", "position_embedding.SinusoidalPositionalEmbedding.weights[].index_select().view", "position_embedding.SinusoidalPositionalEmbedding.weights[].index_select", "make_positions.view"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.position_embedding.make_positions", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.position_embedding.SinusoidalPositionalEmbedding.get_embedding"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Input is expected to be of size [bsz x seqlen].\"\"\"", "\n", "bsz", ",", "seq_len", "=", "input", ".", "size", "(", ")", "\n", "max_pos", "=", "self", ".", "padding_idx", "+", "1", "+", "seq_len", "\n", "device", "=", "input", ".", "get_device", "(", ")", "\n", "if", "device", "not", "in", "self", ".", "weights", "or", "max_pos", ">", "self", ".", "weights", "[", "device", "]", ".", "size", "(", "0", ")", ":", "\n", "# recompute/expand embeddings if needed", "\n", "            ", "self", ".", "weights", "[", "device", "]", "=", "SinusoidalPositionalEmbedding", ".", "get_embedding", "(", "\n", "max_pos", ",", "\n", "self", ".", "embedding_dim", ",", "\n", "self", ".", "padding_idx", ",", "\n", ")", "\n", "", "self", ".", "weights", "[", "device", "]", "=", "self", ".", "weights", "[", "device", "]", ".", "type_as", "(", "self", ".", "_float_tensor", ")", "\n", "positions", "=", "make_positions", "(", "input", ",", "self", ".", "padding_idx", ",", "self", ".", "left_pad", ")", "\n", "return", "self", ".", "weights", "[", "device", "]", ".", "index_select", "(", "0", ",", "positions", ".", "view", "(", "-", "1", ")", ")", ".", "view", "(", "bsz", ",", "seq_len", ",", "-", "1", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.position_embedding.SinusoidalPositionalEmbedding.max_positions": [[78, 81], ["int"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum number of supported positions.\"\"\"", "\n", "return", "int", "(", "1e5", ")", "# an arbitrary large number", "", "", "", ""]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.position_embedding.make_positions": [[8, 28], ["tensor.get_device", "setattr", "tensor.ne", "[].expand_as", "tensor.clone", "tensor.clone.masked_scatter_().long", "tensor.size", "hasattr", "setattr", "getattr().type_as", "getattr().numel", "torch.arange", "torch.arange", "tensor.new", "tensor.ne.long().sum().unsqueeze", "tensor.clone.masked_scatter_", "getattr", "getattr", "getattr", "getattr", "tensor.ne.size", "tensor.size", "tensor.ne.long().sum", "tensor.ne.long"], "function", ["None"], ["def", "make_positions", "(", "tensor", ",", "padding_idx", ",", "left_pad", ")", ":", "\n", "    ", "\"\"\"Replace non-padding symbols with their position numbers.\n    Position numbers begin at padding_idx+1.\n    Padding symbols are ignored, but it is necessary to specify whether padding\n    is added on the left side (left_pad=True) or right side (left_pad=False).\n    \"\"\"", "\n", "max_pos", "=", "padding_idx", "+", "1", "+", "tensor", ".", "size", "(", "1", ")", "\n", "device", "=", "tensor", ".", "get_device", "(", ")", "\n", "buf_name", "=", "f'range_buf_{device}'", "\n", "if", "not", "hasattr", "(", "make_positions", ",", "buf_name", ")", ":", "\n", "        ", "setattr", "(", "make_positions", ",", "buf_name", ",", "tensor", ".", "new", "(", ")", ")", "\n", "", "setattr", "(", "make_positions", ",", "buf_name", ",", "getattr", "(", "make_positions", ",", "buf_name", ")", ".", "type_as", "(", "tensor", ")", ")", "\n", "if", "getattr", "(", "make_positions", ",", "buf_name", ")", ".", "numel", "(", ")", "<", "max_pos", ":", "\n", "        ", "torch", ".", "arange", "(", "padding_idx", "+", "1", ",", "max_pos", ",", "out", "=", "getattr", "(", "make_positions", ",", "buf_name", ")", ")", "\n", "", "mask", "=", "tensor", ".", "ne", "(", "padding_idx", ")", "\n", "positions", "=", "getattr", "(", "make_positions", ",", "buf_name", ")", "[", ":", "tensor", ".", "size", "(", "1", ")", "]", ".", "expand_as", "(", "tensor", ")", "\n", "if", "left_pad", ":", "\n", "        ", "positions", "=", "positions", "-", "mask", ".", "size", "(", "1", ")", "+", "mask", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "new_tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "return", "new_tensor", ".", "masked_scatter_", "(", "mask", ",", "positions", "[", "mask", "]", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.TransformerEncoder.__init__": [[23, 48], ["torch.nn.Module.__init__", "math.sqrt", "modules.position_embedding.SinusoidalPositionalEmbedding", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "transformer.TransformerEncoder.register_buffer", "transformer.TransformerEncoderLayer", "transformer.TransformerEncoder.layers.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "transformer.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.LayerNorm"], ["def", "__init__", "(", "self", ",", "embed_dim", ",", "num_heads", ",", "layers", ",", "attn_dropout", "=", "0.0", ",", "relu_dropout", "=", "0.0", ",", "res_dropout", "=", "0.0", ",", "\n", "embed_dropout", "=", "0.0", ",", "attn_mask", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "embed_dropout", "# Embedding dropout", "\n", "self", ".", "attn_dropout", "=", "attn_dropout", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "embed_scale", "=", "math", ".", "sqrt", "(", "embed_dim", ")", "\n", "self", ".", "embed_positions", "=", "SinusoidalPositionalEmbedding", "(", "embed_dim", ")", "\n", "\n", "self", ".", "attn_mask", "=", "attn_mask", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "layer", "in", "range", "(", "layers", ")", ":", "\n", "            ", "new_layer", "=", "TransformerEncoderLayer", "(", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "attn_dropout", "=", "attn_dropout", ",", "\n", "relu_dropout", "=", "relu_dropout", ",", "\n", "res_dropout", "=", "res_dropout", ",", "\n", "attn_mask", "=", "attn_mask", ")", "\n", "self", ".", "layers", ".", "append", "(", "new_layer", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "'version'", ",", "torch", ".", "Tensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "normalize", "=", "True", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "self", ".", "layer_norm", "=", "LayerNorm", "(", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.TransformerEncoder.forward": [[49, 91], ["torch.dropout", "torch.dropout", "transformer.TransformerEncoder.embed_positions().transpose", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "intermediates.append", "transformer.TransformerEncoder.layer_norm", "transformer.TransformerEncoder.embed_positions().transpose", "transformer.TransformerEncoder.embed_positions().transpose", "layer", "layer", "transformer.TransformerEncoder.embed_positions", "transformer.TransformerEncoder.embed_positions", "transformer.TransformerEncoder.embed_positions", "x_in.transpose", "x_in_k.transpose", "x_in_v.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_in", ",", "x_in_k", "=", "None", ",", "x_in_v", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x_in (FloatTensor): embedded input of shape `(src_len, batch, embed_dim)`\n            x_in_k (FloatTensor): embedded input of shape `(src_len, batch, embed_dim)`\n            x_in_v (FloatTensor): embedded input of shape `(src_len, batch, embed_dim)`\n        Returns:\n            dict:\n                - **encoder_out** (Tensor): the last encoder layer's output of\n                  shape `(src_len, batch, embed_dim)`\n                - **encoder_padding_mask** (ByteTensor): the positions of\n                  padding elements of shape `(batch, src_len)`\n        \"\"\"", "\n", "# embed tokens and positions", "\n", "x", "=", "self", ".", "embed_scale", "*", "x_in", "\n", "if", "self", ".", "embed_positions", "is", "not", "None", ":", "\n", "            ", "x", "+=", "self", ".", "embed_positions", "(", "x_in", ".", "transpose", "(", "0", ",", "1", ")", "[", ":", ",", ":", ",", "0", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "# Add positional embedding", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "if", "x_in_k", "is", "not", "None", "and", "x_in_v", "is", "not", "None", ":", "\n", "# embed tokens and positions    ", "\n", "            ", "x_k", "=", "self", ".", "embed_scale", "*", "x_in_k", "\n", "x_v", "=", "self", ".", "embed_scale", "*", "x_in_v", "\n", "if", "self", ".", "embed_positions", "is", "not", "None", ":", "\n", "                ", "x_k", "+=", "self", ".", "embed_positions", "(", "x_in_k", ".", "transpose", "(", "0", ",", "1", ")", "[", ":", ",", ":", ",", "0", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "# Add positional embedding", "\n", "x_v", "+=", "self", ".", "embed_positions", "(", "x_in_v", ".", "transpose", "(", "0", ",", "1", ")", "[", ":", ",", ":", ",", "0", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "# Add positional embedding", "\n", "", "x_k", "=", "F", ".", "dropout", "(", "x_k", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x_v", "=", "F", ".", "dropout", "(", "x_v", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# encoder layers", "\n", "", "intermediates", "=", "[", "x", "]", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "x_in_k", "is", "not", "None", "and", "x_in_v", "is", "not", "None", ":", "\n", "                ", "x", "=", "layer", "(", "x", ",", "x_k", ",", "x_v", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "layer", "(", "x", ")", "\n", "", "intermediates", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "normalize", ":", "\n", "            ", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.TransformerEncoder.max_positions": [[92, 97], ["min", "transformer.TransformerEncoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.TransformerEncoder.max_positions"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the encoder.\"\"\"", "\n", "if", "self", ".", "embed_positions", "is", "None", ":", "\n", "            ", "return", "self", ".", "max_source_positions", "\n", "", "return", "min", "(", "self", ".", "max_source_positions", ",", "self", ".", "embed_positions", ".", "max_positions", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.TransformerEncoderLayer.__init__": [[112, 132], ["torch.nn.Module.__init__", "modules.multihead_attention.MultiheadAttention", "transformer.Linear", "transformer.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "transformer.LayerNorm", "range"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.LayerNorm"], ["def", "__init__", "(", "self", ",", "embed_dim", ",", "num_heads", "=", "4", ",", "attn_dropout", "=", "0.1", ",", "relu_dropout", "=", "0.1", ",", "res_dropout", "=", "0.1", ",", "\n", "attn_mask", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "\n", "self", ".", "self_attn", "=", "MultiheadAttention", "(", "\n", "embed_dim", "=", "self", ".", "embed_dim", ",", "\n", "num_heads", "=", "self", ".", "num_heads", ",", "\n", "attn_dropout", "=", "attn_dropout", "\n", ")", "\n", "self", ".", "attn_mask", "=", "attn_mask", "\n", "\n", "self", ".", "relu_dropout", "=", "relu_dropout", "\n", "self", ".", "res_dropout", "=", "res_dropout", "\n", "self", ".", "normalize_before", "=", "True", "\n", "\n", "self", ".", "fc1", "=", "Linear", "(", "self", ".", "embed_dim", ",", "4", "*", "self", ".", "embed_dim", ")", "# The \"Add & Norm\" part in the paper", "\n", "self", ".", "fc2", "=", "Linear", "(", "4", "*", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "layer_norms", "=", "nn", ".", "ModuleList", "(", "[", "LayerNorm", "(", "self", ".", "embed_dim", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.TransformerEncoderLayer.forward": [[133, 166], ["transformer.TransformerEncoderLayer.maybe_layer_norm", "torch.dropout", "torch.dropout", "transformer.TransformerEncoderLayer.maybe_layer_norm", "transformer.TransformerEncoderLayer.maybe_layer_norm", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "transformer.TransformerEncoderLayer.fc2", "torch.dropout", "torch.dropout", "transformer.TransformerEncoderLayer.maybe_layer_norm", "transformer.buffered_future_mask", "transformer.TransformerEncoderLayer.self_attn", "transformer.TransformerEncoderLayer.maybe_layer_norm", "transformer.TransformerEncoderLayer.maybe_layer_norm", "transformer.TransformerEncoderLayer.self_attn", "transformer.TransformerEncoderLayer.fc1"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.TransformerEncoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.TransformerEncoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.TransformerEncoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.TransformerEncoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.buffered_future_mask", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.TransformerEncoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.TransformerEncoderLayer.maybe_layer_norm"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_k", "=", "None", ",", "x_v", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x (Tensor): input to the layer of shape `(seq_len, batch, embed_dim)`\n            encoder_padding_mask (ByteTensor): binary ByteTensor of shape\n                `(batch, src_len)` where padding elements are indicated by ``1``.\n            x_k (Tensor): same as x\n            x_v (Tensor): same as x\n        Returns:\n            encoded output of shape `(batch, src_len, embed_dim)`\n        \"\"\"", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "0", ",", "x", ",", "before", "=", "True", ")", "\n", "mask", "=", "buffered_future_mask", "(", "x", ",", "x_k", ")", "if", "self", ".", "attn_mask", "else", "None", "\n", "if", "x_k", "is", "None", "and", "x_v", "is", "None", ":", "\n", "            ", "x", ",", "_", "=", "self", ".", "self_attn", "(", "query", "=", "x", ",", "key", "=", "x", ",", "value", "=", "x", ",", "attn_mask", "=", "mask", ")", "\n", "", "else", ":", "\n", "            ", "x_k", "=", "self", ".", "maybe_layer_norm", "(", "0", ",", "x_k", ",", "before", "=", "True", ")", "\n", "x_v", "=", "self", ".", "maybe_layer_norm", "(", "0", ",", "x_v", ",", "before", "=", "True", ")", "\n", "x", ",", "_", "=", "self", ".", "self_attn", "(", "query", "=", "x", ",", "key", "=", "x_k", ",", "value", "=", "x_v", ",", "attn_mask", "=", "mask", ")", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "res_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "0", ",", "x", ",", "after", "=", "True", ")", "\n", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "1", ",", "x", ",", "before", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "relu_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "res_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "1", ",", "x", ",", "after", "=", "True", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.TransformerEncoderLayer.maybe_layer_norm": [[167, 173], ["None"], "methods", ["None"], ["", "def", "maybe_layer_norm", "(", "self", ",", "i", ",", "x", ",", "before", "=", "False", ",", "after", "=", "False", ")", ":", "\n", "        ", "assert", "before", "^", "after", "\n", "if", "after", "^", "self", ".", "normalize_before", ":", "\n", "            ", "return", "self", ".", "layer_norms", "[", "i", "]", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.fill_with_neg_inf": [[174, 177], ["t.float().fill_().type_as", "t.float().fill_", "float", "t.float"], "function", ["None"], ["", "", "", "def", "fill_with_neg_inf", "(", "t", ")", ":", "\n", "    ", "\"\"\"FP16-compatible function that fills a tensor with -inf.\"\"\"", "\n", "return", "t", ".", "float", "(", ")", ".", "fill_", "(", "float", "(", "'-inf'", ")", ")", ".", "type_as", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.buffered_future_mask": [[179, 187], ["tensor.size", "torch.triu", "torch.triu", "tensor2.size", "transformer.fill_with_neg_inf", "future_mask.cuda.cuda", "torch.ones", "torch.ones", "abs"], "function", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.fill_with_neg_inf"], ["", "def", "buffered_future_mask", "(", "tensor", ",", "tensor2", "=", "None", ")", ":", "\n", "    ", "dim1", "=", "dim2", "=", "tensor", ".", "size", "(", "0", ")", "\n", "if", "tensor2", "is", "not", "None", ":", "\n", "        ", "dim2", "=", "tensor2", ".", "size", "(", "0", ")", "\n", "", "future_mask", "=", "torch", ".", "triu", "(", "fill_with_neg_inf", "(", "torch", ".", "ones", "(", "dim1", ",", "dim2", ")", ")", ",", "1", "+", "abs", "(", "dim2", "-", "dim1", ")", ")", "\n", "if", "tensor", ".", "is_cuda", ":", "\n", "        ", "future_mask", "=", "future_mask", ".", "cuda", "(", ")", "\n", "", "return", "future_mask", "[", ":", "dim1", ",", ":", "dim2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear": [[189, 195], ["torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_"], "function", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear"], ["", "def", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "bias", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.LayerNorm": [[197, 200], ["torch.nn.LayerNorm"], "function", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.LayerNorm"], ["", "def", "LayerNorm", "(", "embedding_dim", ")", ":", "\n", "    ", "m", "=", "nn", ".", "LayerNorm", "(", "embedding_dim", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_1.CrossModalAttentionLayer.__init__": [[15, 34], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "modules.transformer.TransformerEncoder", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "x_channels", ",", "y_size", ",", "spatial", "=", "True", ")", ":", "\n", "        ", "super", "(", "CrossModalAttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "spatial", "=", "spatial", "\n", "\n", "if", "spatial", ":", "\n", "            ", "self", ".", "channel_affine", "=", "nn", ".", "Linear", "(", "x_channels", ",", "k", ")", "\n", "\n", "", "self", ".", "y_affine", "=", "nn", ".", "Linear", "(", "y_size", ",", "k", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "audio_attention", "=", "TransformerEncoder", "(", "embed_dim", "=", "k", ",", "\n", "num_heads", "=", "8", ",", "\n", "layers", "=", "5", ",", "\n", "attn_dropout", "=", "0.1", ",", "\n", "relu_dropout", "=", "0.1", ",", "\n", "res_dropout", "=", "0.1", ",", "\n", "embed_dropout", "=", "0.3", ",", "\n", "attn_mask", "=", "True", ")", "\n", "self", ".", "attn_weight_affine", "=", "nn", ".", "Linear", "(", "k", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_1.CrossModalAttentionLayer.forward": [[35, 72], ["msaf_ravdess_ab_1.CrossModalAttentionLayer.audio_attention", "y.size", "msaf_ravdess_ab_1.CrossModalAttentionLayer.y_affine", "range", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "y.permute", "type", "x[].permute", "msaf_ravdess_ab_1.CrossModalAttentionLayer.channel_affine", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "msaf_ravdess_ab_1.CrossModalAttentionLayer.attn_weight_affine().squeeze", "all_spatial_attn_weights_softmax.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.softmax().reshape", "torch.softmax().reshape", "torch.softmax().reshape", "msaf_ravdess_ab_1.CrossModalAttentionLayer.attn_weight_affine", "x[].permute.size", "x[].permute.size", "x[].permute.size", "x[].permute().size", "x[].permute().size", "x[].permute().size", "torch.softmax", "torch.softmax", "torch.softmax", "msaf_ravdess_ab_1.CrossModalAttentionLayer.reshape", "x[].permute", "x[].permute", "x[].permute", "x[].permute.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x -> [(S, C, H, W)], len(x) = bs", "\n", "# y -> (bs, D)", "\n", "\n", "# print(x.size(), y.size())", "\n", "\n", "        ", "original_y", "=", "y", "\n", "h_vs", "=", "self", ".", "audio_attention", "(", "y", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "if", "type", "(", "h_vs", ")", "==", "tuple", ":", "\n", "            ", "h_vs", "=", "h_vs", "[", "0", "]", "\n", "\n", "", "last_vs", "=", "h_vs", "[", "-", "1", "]", "\n", "bs", "=", "y", ".", "size", "(", "0", ")", "\n", "y_k", "=", "self", ".", "y_affine", "(", "last_vs", ")", "# (bs, k)", "\n", "\n", "all_spatial_attn_weights_softmax", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "            ", "if", "self", ".", "spatial", ":", "\n", "                ", "x_tensor", "=", "x", "[", "i", "]", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", "# (S_v, H_v, W_v, C_v)", "\n", "x_k", "=", "self", ".", "channel_affine", "(", "x_tensor", ")", "# (S_v, H_v, W_v, k)", "\n", "x_k", "+=", "y_k", "[", "i", "]", "\n", "x_k", "=", "torch", ".", "tanh", "(", "x_k", ")", "\n", "x_attn_weights", "=", "self", ".", "attn_weight_affine", "(", "x_k", ")", ".", "squeeze", "(", "-", "1", ")", "# (S_v, H_v, W_v)", "\n", "\n", "all_spatial_attn_weights_softmax", ".", "append", "(", "\n", "F", ".", "softmax", "(", "x_attn_weights", ".", "reshape", "(", "x_tensor", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "x_tensor", ".", "size", "(", "0", ")", ",", "x_tensor", ".", "size", "(", "1", ")", ",", "x_tensor", ".", "size", "(", "2", ")", ")", "# (S_v, H_v, W_v)", "\n", ")", "\n", "\n", "", "", "res", "=", "torch", ".", "zeros", "(", "(", "x", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "size", "(", "0", ")", ",", "x", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "size", "(", "1", ")", ",", "x", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "size", "(", "2", ")", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "all_spatial_attn_weights_softmax", ":", "\n", "            ", "res", "+=", "i", "\n", "\n", "", "result", "=", "x", "*", "res", "\n", "result", "+=", "x", "\n", "return", "[", "result", ",", "original_y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_1.Flatten.forward": [[74, 76], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_1.MSAFNet.__init__": [[79, 138], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "msaf_ravdess_ab_1.MSAFNet.make_blocks", "torch.Sequential", "torch.Sequential", "torch.Sequential", "msaf_ravdess_ab_1.MSAFNet.make_blocks", "msaf_ravdess_ab_1.Flatten", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_2.MSAFNet.make_blocks", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_2.MSAFNet.make_blocks"], ["    ", "def", "__init__", "(", "self", ",", "model_param", ")", ":", "\n", "        ", "super", "(", "MSAFNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# The inputs to these layers will be passed through msaf before being passed into the layer", "\n", "self", ".", "msaf_locations", "=", "{", "\n", "# \"video\": [6, 7],", "\n", "# \"audio\": [5, 11],", "\n", "\"video\"", ":", "[", "]", ",", "\n", "\"audio\"", ":", "[", "]", ",", "\n", "}", "\n", "# MSAF blocks", "\n", "self", ".", "msaf", "=", "nn", ".", "ModuleList", "(", "[", "\n", "# MSAF(in_channels=[1024, 32], block_channel=16, block_dropout=0.2, reduction_factor=4),", "\n", "# CrossModalAttentionLayer(k=32, x_channels=1024, y_size=32, spatial=True),", "\n", "# MSAF(in_channels=[2048, 64], block_channel=32, block_dropout=0.2, reduction_factor=4)", "\n", "# CrossModalAttentionLayer(k=64, x_channels=2048, y_size=64, spatial=True)", "\n", "]", ")", "\n", "self", ".", "num_msaf", "=", "len", "(", "self", ".", "msaf", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "3712", ",", "8", ")", "\n", "\n", "if", "\"video\"", "in", "model_param", ":", "\n", "            ", "video_model", "=", "model_param", "[", "\"video\"", "]", "[", "\"model\"", "]", "\n", "# video model layers", "\n", "video_model", "=", "nn", ".", "Sequential", "(", "\n", "video_model", ".", "conv1", ",", "# 0", "\n", "video_model", ".", "bn1", ",", "# 1", "\n", "video_model", ".", "maxpool", ",", "# 2", "\n", "video_model", ".", "layer1", ",", "# 3", "\n", "video_model", ".", "layer2", ",", "# 4", "\n", "video_model", ".", "layer3", ",", "# 5", "\n", "video_model", ".", "layer4", ",", "# 6", "\n", "video_model", ".", "avgpool", ",", "# 7", "\n", "Flatten", "(", ")", ",", "# 8", "\n", "# video_model.fc  # 9", "\n", ")", "\n", "self", ".", "video_model_blocks", "=", "self", ".", "make_blocks", "(", "video_model", ",", "self", ".", "msaf_locations", "[", "\"video\"", "]", ")", "\n", "self", ".", "video_id", "=", "model_param", "[", "\"video\"", "]", "[", "\"id\"", "]", "\n", "\n", "", "if", "\"audio\"", "in", "model_param", ":", "\n", "            ", "audio_model", "=", "model_param", "[", "\"audio\"", "]", "[", "\"model\"", "]", "\n", "# audio model layers", "\n", "audio_model", "=", "nn", ".", "Sequential", "(", "\n", "audio_model", ".", "conv1", ",", "# 0", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# 1", "\n", "audio_model", ".", "bn1", ",", "# 2", "\n", "audio_model", ".", "conv2", ",", "# 3", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# 4", "\n", "audio_model", ".", "maxpool", ",", "# 5", "\n", "audio_model", ".", "bn2", ",", "# 6", "\n", "audio_model", ".", "dropout1", ",", "# 7", "\n", "audio_model", ".", "conv3", ",", "# 8", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# 9", "\n", "audio_model", ".", "bn3", ",", "# 10", "\n", "audio_model", ".", "flatten", ",", "# 11", "\n", "audio_model", ".", "dropout2", ",", "# 12", "\n", "# audio_model.fc1  # 13", "\n", ")", "\n", "self", ".", "audio_model_blocks", "=", "self", ".", "make_blocks", "(", "audio_model", ",", "self", ".", "msaf_locations", "[", "\"audio\"", "]", ")", "\n", "self", ".", "audio_id", "=", "model_param", "[", "\"audio\"", "]", "[", "\"id\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_1.MSAFNet.forward": [[139, 158], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "msaf_ravdess_ab_1.MSAFNet.fc", "hasattr", "hasattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_msaf", "+", "1", ")", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "\"video_id\"", ")", ":", "\n", "                ", "x", "[", "self", ".", "video_id", "]", "=", "self", ".", "video_model_blocks", "[", "i", "]", "(", "x", "[", "self", ".", "video_id", "]", ")", "\n", "", "if", "hasattr", "(", "self", ",", "\"audio_id\"", ")", ":", "\n", "                ", "x", "[", "self", ".", "audio_id", "]", "=", "self", ".", "audio_model_blocks", "[", "i", "]", "(", "x", "[", "self", ".", "audio_id", "]", ")", "\n", "# if i < self.num_msaf:", "\n", "#     x = self.msaf[i](x[0], x[1])", "\n", "# if i == 0:", "\n", "#     x = self.msaf[i](x)", "\n", "# else:", "\n", "#     x = self.msaf[i](x[0], x[1])", "\n", "# x = self.msaf[i](x)", "\n", "\n", "# print(x[0].size(), x[1].size())", "\n", "", "", "res", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "\n", "res", "=", "self", ".", "fc", "(", "res", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_1.MSAFNet.make_blocks": [[160, 163], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "zip", "list", "model.children"], "methods", ["None"], ["", "def", "make_blocks", "(", "self", ",", "model", ",", "recipe", ")", ":", "\n", "        ", "blocks", "=", "[", "nn", ".", "Sequential", "(", "*", "(", "list", "(", "model", ".", "children", "(", ")", ")", "[", "i", ":", "j", "]", ")", ")", "for", "i", ",", "j", "in", "zip", "(", "[", "0", "]", "+", "recipe", ",", "recipe", "+", "[", "None", "]", ")", "]", "\n", "return", "nn", ".", "ModuleList", "(", "blocks", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.mfcc_cnn.Flatten.forward": [[26, 28], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.mfcc_cnn.MFCCNet.__init__": [[31, 45], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "mfcc_cnn.Flatten", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "features_only", "=", "False", ")", ":", "\n", "        ", "super", "(", "MFCCNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features_only", "=", "features_only", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "13", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "8", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "32", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "flatten", "=", "Flatten", "(", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "p", "=", "0.4", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1664", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.mfcc_cnn.MFCCNet.forward": [[46, 62], ["torch.relu", "torch.relu", "mfcc_cnn.MFCCNet.bn1", "torch.relu", "torch.relu", "mfcc_cnn.MFCCNet.maxpool", "mfcc_cnn.MFCCNet.bn2", "mfcc_cnn.MFCCNet.dropout1", "torch.relu", "torch.relu", "mfcc_cnn.MFCCNet.bn3", "mfcc_cnn.MFCCNet.flatten", "mfcc_cnn.MFCCNet.dropout2", "mfcc_cnn.MFCCNet.fc1", "mfcc_cnn.MFCCNet.conv1", "mfcc_cnn.MFCCNet.conv2", "mfcc_cnn.MFCCNet.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "flatten", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "if", "self", ".", "features_only", ":", "\n", "            ", "return", "x", "\n", "", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess.CrossModalAttentionLayer.__init__": [[15, 34], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "x_channels", ",", "y_size", ",", "spatial", "=", "True", ")", ":", "\n", "        ", "super", "(", "CrossModalAttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "spatial", "=", "spatial", "\n", "\n", "if", "spatial", ":", "\n", "            ", "self", ".", "channel_affine", "=", "nn", ".", "Linear", "(", "x_channels", ",", "k", ")", "\n", "\n", "", "self", ".", "y_affine", "=", "nn", ".", "Linear", "(", "y_size", ",", "k", ",", "bias", "=", "False", ")", "\n", "\n", "# self.audio_attention = TransformerEncoder(embed_dim=k,", "\n", "#                     num_heads=8,", "\n", "#                     layers=5,", "\n", "#                     attn_dropout=0.1,", "\n", "#                     relu_dropout=0.1,", "\n", "#                     res_dropout=0.1,", "\n", "#                     embed_dropout=0.3,", "\n", "#                     attn_mask=True)", "\n", "self", ".", "attn_weight_affine", "=", "nn", ".", "Linear", "(", "k", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess.CrossModalAttentionLayer.forward": [[35, 72], ["msaf_ravdess.CrossModalAttentionLayer.audio_attention", "y.size", "msaf_ravdess.CrossModalAttentionLayer.y_affine", "range", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "y.permute", "type", "x[].permute", "msaf_ravdess.CrossModalAttentionLayer.channel_affine", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "msaf_ravdess.CrossModalAttentionLayer.attn_weight_affine().squeeze", "all_spatial_attn_weights_softmax.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.softmax().reshape", "torch.softmax().reshape", "torch.softmax().reshape", "msaf_ravdess.CrossModalAttentionLayer.attn_weight_affine", "x[].permute.size", "x[].permute.size", "x[].permute.size", "x[].permute().size", "x[].permute().size", "x[].permute().size", "torch.softmax", "torch.softmax", "torch.softmax", "msaf_ravdess.CrossModalAttentionLayer.reshape", "x[].permute", "x[].permute", "x[].permute", "x[].permute.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x -> [(S, C, H, W)], len(x) = bs", "\n", "# y -> (bs, D)", "\n", "\n", "# print(x.size(), y.size())", "\n", "\n", "        ", "original_y", "=", "y", "\n", "h_vs", "=", "self", ".", "audio_attention", "(", "y", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "if", "type", "(", "h_vs", ")", "==", "tuple", ":", "\n", "            ", "h_vs", "=", "h_vs", "[", "0", "]", "\n", "\n", "", "last_vs", "=", "h_vs", "[", "-", "1", "]", "\n", "bs", "=", "y", ".", "size", "(", "0", ")", "\n", "y_k", "=", "self", ".", "y_affine", "(", "last_vs", ")", "# (bs, k)", "\n", "\n", "all_spatial_attn_weights_softmax", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "            ", "if", "self", ".", "spatial", ":", "\n", "                ", "x_tensor", "=", "x", "[", "i", "]", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", "# (S_v, H_v, W_v, C_v)", "\n", "x_k", "=", "self", ".", "channel_affine", "(", "x_tensor", ")", "# (S_v, H_v, W_v, k)", "\n", "x_k", "+=", "y_k", "[", "i", "]", "\n", "x_k", "=", "torch", ".", "tanh", "(", "x_k", ")", "\n", "x_attn_weights", "=", "self", ".", "attn_weight_affine", "(", "x_k", ")", ".", "squeeze", "(", "-", "1", ")", "# (S_v, H_v, W_v)", "\n", "\n", "all_spatial_attn_weights_softmax", ".", "append", "(", "\n", "F", ".", "softmax", "(", "x_attn_weights", ".", "reshape", "(", "x_tensor", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "x_tensor", ".", "size", "(", "0", ")", ",", "x_tensor", ".", "size", "(", "1", ")", ",", "x_tensor", ".", "size", "(", "2", ")", ")", "# (S_v, H_v, W_v)", "\n", ")", "\n", "\n", "", "", "res", "=", "torch", ".", "zeros", "(", "(", "x", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "size", "(", "0", ")", ",", "x", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "size", "(", "1", ")", ",", "x", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "size", "(", "2", ")", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "all_spatial_attn_weights_softmax", ":", "\n", "            ", "res", "+=", "i", "\n", "\n", "", "result", "=", "x", "*", "res", "\n", "result", "+=", "x", "\n", "return", "[", "result", ",", "original_y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess.Flatten.forward": [[74, 76], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess.MSAFNet.__init__": [[79, 138], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "msaf_ravdess.MSAFNet.make_blocks", "torch.Sequential", "torch.Sequential", "torch.Sequential", "msaf_ravdess.MSAFNet.make_blocks", "msaf_ravdess.CrossModalAttentionLayer", "msaf_ravdess.Flatten", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_2.MSAFNet.make_blocks", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_2.MSAFNet.make_blocks"], ["    ", "def", "__init__", "(", "self", ",", "model_param", ")", ":", "\n", "        ", "super", "(", "MSAFNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# The inputs to these layers will be passed through msaf before being passed into the layer", "\n", "self", ".", "msaf_locations", "=", "{", "\n", "# \"video\": [6, 7],", "\n", "# \"audio\": [5, 11],", "\n", "\"video\"", ":", "[", "7", "]", ",", "\n", "\"audio\"", ":", "[", "11", "]", ",", "\n", "}", "\n", "# MSAF blocks", "\n", "self", ".", "msaf", "=", "nn", ".", "ModuleList", "(", "[", "\n", "# MSAF(in_channels=[1024, 32], block_channel=16, block_dropout=0.2, reduction_factor=4),", "\n", "# CrossModalAttentionLayer(k=32, x_channels=1024, y_size=32, spatial=True),", "\n", "# MSAF(in_channels=[2048, 64], block_channel=32, block_dropout=0.2, reduction_factor=4)", "\n", "CrossModalAttentionLayer", "(", "k", "=", "64", ",", "x_channels", "=", "2048", ",", "y_size", "=", "64", ",", "spatial", "=", "True", ")", "\n", "]", ")", "\n", "self", ".", "num_msaf", "=", "len", "(", "self", ".", "msaf", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "3712", ",", "8", ")", "\n", "\n", "if", "\"video\"", "in", "model_param", ":", "\n", "            ", "video_model", "=", "model_param", "[", "\"video\"", "]", "[", "\"model\"", "]", "\n", "# video model layers", "\n", "video_model", "=", "nn", ".", "Sequential", "(", "\n", "video_model", ".", "conv1", ",", "# 0", "\n", "video_model", ".", "bn1", ",", "# 1", "\n", "video_model", ".", "maxpool", ",", "# 2", "\n", "video_model", ".", "layer1", ",", "# 3", "\n", "video_model", ".", "layer2", ",", "# 4", "\n", "video_model", ".", "layer3", ",", "# 5", "\n", "video_model", ".", "layer4", ",", "# 6", "\n", "video_model", ".", "avgpool", ",", "# 7", "\n", "Flatten", "(", ")", ",", "# 8", "\n", "# video_model.fc  # 9", "\n", ")", "\n", "self", ".", "video_model_blocks", "=", "self", ".", "make_blocks", "(", "video_model", ",", "self", ".", "msaf_locations", "[", "\"video\"", "]", ")", "\n", "self", ".", "video_id", "=", "model_param", "[", "\"video\"", "]", "[", "\"id\"", "]", "\n", "\n", "", "if", "\"audio\"", "in", "model_param", ":", "\n", "            ", "audio_model", "=", "model_param", "[", "\"audio\"", "]", "[", "\"model\"", "]", "\n", "# audio model layers", "\n", "audio_model", "=", "nn", ".", "Sequential", "(", "\n", "audio_model", ".", "conv1", ",", "# 0", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# 1", "\n", "audio_model", ".", "bn1", ",", "# 2", "\n", "audio_model", ".", "conv2", ",", "# 3", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# 4", "\n", "audio_model", ".", "maxpool", ",", "# 5", "\n", "audio_model", ".", "bn2", ",", "# 6", "\n", "audio_model", ".", "dropout1", ",", "# 7", "\n", "audio_model", ".", "conv3", ",", "# 8", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# 9", "\n", "audio_model", ".", "bn3", ",", "# 10", "\n", "audio_model", ".", "flatten", ",", "# 11", "\n", "audio_model", ".", "dropout2", ",", "# 12", "\n", "# audio_model.fc1  # 13", "\n", ")", "\n", "self", ".", "audio_model_blocks", "=", "self", ".", "make_blocks", "(", "audio_model", ",", "self", ".", "msaf_locations", "[", "\"audio\"", "]", ")", "\n", "self", ".", "audio_id", "=", "model_param", "[", "\"audio\"", "]", "[", "\"id\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess.MSAFNet.forward": [[139, 157], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "msaf_ravdess.MSAFNet.fc", "hasattr", "hasattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_msaf", "+", "1", ")", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "\"video_id\"", ")", ":", "\n", "                ", "x", "[", "self", ".", "video_id", "]", "=", "self", ".", "video_model_blocks", "[", "i", "]", "(", "x", "[", "self", ".", "video_id", "]", ")", "\n", "", "if", "hasattr", "(", "self", ",", "\"audio_id\"", ")", ":", "\n", "                ", "x", "[", "self", ".", "audio_id", "]", "=", "self", ".", "audio_model_blocks", "[", "i", "]", "(", "x", "[", "self", ".", "audio_id", "]", ")", "\n", "", "if", "i", "<", "self", ".", "num_msaf", ":", "\n", "                ", "x", "=", "self", ".", "msaf", "[", "i", "]", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "\n", "# if i == 0:", "\n", "#     x = self.msaf[i](x)", "\n", "# else:", "\n", "#     x = self.msaf[i](x[0], x[1])", "\n", "# x = self.msaf[i](x)", "\n", "\n", "", "", "res", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "\n", "res", "=", "self", ".", "fc", "(", "res", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess.MSAFNet.make_blocks": [[159, 162], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "zip", "list", "model.children"], "methods", ["None"], ["", "def", "make_blocks", "(", "self", ",", "model", ",", "recipe", ")", ":", "\n", "        ", "blocks", "=", "[", "nn", ".", "Sequential", "(", "*", "(", "list", "(", "model", ".", "children", "(", ")", ")", "[", "i", ":", "j", "]", ")", ")", "for", "i", ",", "j", "in", "zip", "(", "[", "0", "]", "+", "recipe", ",", "recipe", "+", "[", "None", "]", ")", "]", "\n", "return", "nn", ".", "ModuleList", "(", "blocks", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_2.CrossModalAttentionLayer.__init__": [[15, 34], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "modules.transformer.TransformerEncoder", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "x_channels", ",", "y_size", ",", "spatial", "=", "True", ")", ":", "\n", "        ", "super", "(", "CrossModalAttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "spatial", "=", "spatial", "\n", "\n", "if", "spatial", ":", "\n", "            ", "self", ".", "channel_affine", "=", "nn", ".", "Linear", "(", "x_channels", ",", "k", ")", "\n", "\n", "", "self", ".", "y_affine", "=", "nn", ".", "Linear", "(", "y_size", ",", "k", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "audio_attention", "=", "TransformerEncoder", "(", "embed_dim", "=", "k", ",", "\n", "num_heads", "=", "8", ",", "\n", "layers", "=", "5", ",", "\n", "attn_dropout", "=", "0.1", ",", "\n", "relu_dropout", "=", "0.1", ",", "\n", "res_dropout", "=", "0.1", ",", "\n", "embed_dropout", "=", "0.3", ",", "\n", "attn_mask", "=", "True", ")", "\n", "self", ".", "attn_weight_affine", "=", "nn", ".", "Linear", "(", "k", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_2.CrossModalAttentionLayer.forward": [[35, 72], ["msaf_ravdess_ab_2.CrossModalAttentionLayer.audio_attention", "y.size", "msaf_ravdess_ab_2.CrossModalAttentionLayer.y_affine", "range", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "y.permute", "type", "x[].permute", "msaf_ravdess_ab_2.CrossModalAttentionLayer.channel_affine", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "msaf_ravdess_ab_2.CrossModalAttentionLayer.attn_weight_affine().squeeze", "all_spatial_attn_weights_softmax.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.softmax().reshape", "torch.softmax().reshape", "torch.softmax().reshape", "msaf_ravdess_ab_2.CrossModalAttentionLayer.attn_weight_affine", "x[].permute.size", "x[].permute.size", "x[].permute.size", "x[].permute().size", "x[].permute().size", "x[].permute().size", "torch.softmax", "torch.softmax", "torch.softmax", "msaf_ravdess_ab_2.CrossModalAttentionLayer.reshape", "x[].permute", "x[].permute", "x[].permute", "x[].permute.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x -> [(S, C, H, W)], len(x) = bs", "\n", "# y -> (bs, D)", "\n", "\n", "# print(x.size(), y.size())", "\n", "\n", "        ", "original_y", "=", "y", "\n", "h_vs", "=", "self", ".", "audio_attention", "(", "y", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "if", "type", "(", "h_vs", ")", "==", "tuple", ":", "\n", "            ", "h_vs", "=", "h_vs", "[", "0", "]", "\n", "\n", "", "last_vs", "=", "h_vs", "[", "-", "1", "]", "\n", "bs", "=", "y", ".", "size", "(", "0", ")", "\n", "y_k", "=", "self", ".", "y_affine", "(", "last_vs", ")", "# (bs, k)", "\n", "\n", "all_spatial_attn_weights_softmax", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "            ", "if", "self", ".", "spatial", ":", "\n", "                ", "x_tensor", "=", "x", "[", "i", "]", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", "# (S_v, H_v, W_v, C_v)", "\n", "x_k", "=", "self", ".", "channel_affine", "(", "x_tensor", ")", "# (S_v, H_v, W_v, k)", "\n", "x_k", "+=", "y_k", "[", "i", "]", "\n", "x_k", "=", "torch", ".", "tanh", "(", "x_k", ")", "\n", "x_attn_weights", "=", "self", ".", "attn_weight_affine", "(", "x_k", ")", ".", "squeeze", "(", "-", "1", ")", "# (S_v, H_v, W_v)", "\n", "\n", "all_spatial_attn_weights_softmax", ".", "append", "(", "\n", "F", ".", "softmax", "(", "x_attn_weights", ".", "reshape", "(", "x_tensor", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "x_tensor", ".", "size", "(", "0", ")", ",", "x_tensor", ".", "size", "(", "1", ")", ",", "x_tensor", ".", "size", "(", "2", ")", ")", "# (S_v, H_v, W_v)", "\n", ")", "\n", "\n", "", "", "res", "=", "torch", ".", "zeros", "(", "(", "x", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "size", "(", "0", ")", ",", "x", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "size", "(", "1", ")", ",", "x", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "size", "(", "2", ")", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "all_spatial_attn_weights_softmax", ":", "\n", "            ", "res", "+=", "i", "\n", "\n", "", "result", "=", "x", "*", "res", "\n", "# result += x", "\n", "return", "[", "result", ",", "original_y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_2.Flatten.forward": [[74, 76], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_2.MSAFNet.__init__": [[79, 138], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "msaf_ravdess_ab_2.MSAFNet.make_blocks", "torch.Sequential", "torch.Sequential", "torch.Sequential", "msaf_ravdess_ab_2.MSAFNet.make_blocks", "msaf_ravdess_ab_2.CrossModalAttentionLayer", "msaf_ravdess_ab_2.Flatten", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_2.MSAFNet.make_blocks", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_2.MSAFNet.make_blocks"], ["    ", "def", "__init__", "(", "self", ",", "model_param", ")", ":", "\n", "        ", "super", "(", "MSAFNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# The inputs to these layers will be passed through msaf before being passed into the layer", "\n", "self", ".", "msaf_locations", "=", "{", "\n", "# \"video\": [6, 7],", "\n", "# \"audio\": [5, 11],", "\n", "\"video\"", ":", "[", "7", "]", ",", "\n", "\"audio\"", ":", "[", "11", "]", ",", "\n", "}", "\n", "# MSAF blocks", "\n", "self", ".", "msaf", "=", "nn", ".", "ModuleList", "(", "[", "\n", "# MSAF(in_channels=[1024, 32], block_channel=16, block_dropout=0.2, reduction_factor=4),", "\n", "# CrossModalAttentionLayer(k=32, x_channels=1024, y_size=32, spatial=True),", "\n", "# MSAF(in_channels=[2048, 64], block_channel=32, block_dropout=0.2, reduction_factor=4)", "\n", "CrossModalAttentionLayer", "(", "k", "=", "64", ",", "x_channels", "=", "2048", ",", "y_size", "=", "64", ",", "spatial", "=", "True", ")", "\n", "]", ")", "\n", "self", ".", "num_msaf", "=", "len", "(", "self", ".", "msaf", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "3712", ",", "8", ")", "\n", "\n", "if", "\"video\"", "in", "model_param", ":", "\n", "            ", "video_model", "=", "model_param", "[", "\"video\"", "]", "[", "\"model\"", "]", "\n", "# video model layers", "\n", "video_model", "=", "nn", ".", "Sequential", "(", "\n", "video_model", ".", "conv1", ",", "# 0", "\n", "video_model", ".", "bn1", ",", "# 1", "\n", "video_model", ".", "maxpool", ",", "# 2", "\n", "video_model", ".", "layer1", ",", "# 3", "\n", "video_model", ".", "layer2", ",", "# 4", "\n", "video_model", ".", "layer3", ",", "# 5", "\n", "video_model", ".", "layer4", ",", "# 6", "\n", "video_model", ".", "avgpool", ",", "# 7", "\n", "Flatten", "(", ")", ",", "# 8", "\n", "# video_model.fc  # 9", "\n", ")", "\n", "self", ".", "video_model_blocks", "=", "self", ".", "make_blocks", "(", "video_model", ",", "self", ".", "msaf_locations", "[", "\"video\"", "]", ")", "\n", "self", ".", "video_id", "=", "model_param", "[", "\"video\"", "]", "[", "\"id\"", "]", "\n", "\n", "", "if", "\"audio\"", "in", "model_param", ":", "\n", "            ", "audio_model", "=", "model_param", "[", "\"audio\"", "]", "[", "\"model\"", "]", "\n", "# audio model layers", "\n", "audio_model", "=", "nn", ".", "Sequential", "(", "\n", "audio_model", ".", "conv1", ",", "# 0", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# 1", "\n", "audio_model", ".", "bn1", ",", "# 2", "\n", "audio_model", ".", "conv2", ",", "# 3", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# 4", "\n", "audio_model", ".", "maxpool", ",", "# 5", "\n", "audio_model", ".", "bn2", ",", "# 6", "\n", "audio_model", ".", "dropout1", ",", "# 7", "\n", "audio_model", ".", "conv3", ",", "# 8", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# 9", "\n", "audio_model", ".", "bn3", ",", "# 10", "\n", "audio_model", ".", "flatten", ",", "# 11", "\n", "audio_model", ".", "dropout2", ",", "# 12", "\n", "# audio_model.fc1  # 13", "\n", ")", "\n", "self", ".", "audio_model_blocks", "=", "self", ".", "make_blocks", "(", "audio_model", ",", "self", ".", "msaf_locations", "[", "\"audio\"", "]", ")", "\n", "self", ".", "audio_id", "=", "model_param", "[", "\"audio\"", "]", "[", "\"id\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_2.MSAFNet.forward": [[139, 157], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "msaf_ravdess_ab_2.MSAFNet.fc", "hasattr", "hasattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_msaf", "+", "1", ")", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "\"video_id\"", ")", ":", "\n", "                ", "x", "[", "self", ".", "video_id", "]", "=", "self", ".", "video_model_blocks", "[", "i", "]", "(", "x", "[", "self", ".", "video_id", "]", ")", "\n", "", "if", "hasattr", "(", "self", ",", "\"audio_id\"", ")", ":", "\n", "                ", "x", "[", "self", ".", "audio_id", "]", "=", "self", ".", "audio_model_blocks", "[", "i", "]", "(", "x", "[", "self", ".", "audio_id", "]", ")", "\n", "", "if", "i", "<", "self", ".", "num_msaf", ":", "\n", "                ", "x", "=", "self", ".", "msaf", "[", "i", "]", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "\n", "# if i == 0:", "\n", "#     x = self.msaf[i](x)", "\n", "# else:", "\n", "#     x = self.msaf[i](x[0], x[1])", "\n", "# x = self.msaf[i](x)", "\n", "\n", "", "", "res", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "\n", "res", "=", "self", ".", "fc", "(", "res", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.msaf_ravdess_ab_2.MSAFNet.make_blocks": [[159, 162], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "zip", "list", "model.children"], "methods", ["None"], ["", "def", "make_blocks", "(", "self", ",", "model", ",", "recipe", ")", ":", "\n", "        ", "blocks", "=", "[", "nn", ".", "Sequential", "(", "*", "(", "list", "(", "model", ".", "children", "(", ")", ")", "[", "i", ":", "j", "]", ")", ")", "for", "i", ",", "j", "in", "zip", "(", "[", "0", "]", "+", "recipe", ",", "recipe", "+", "[", "None", "]", ")", "]", "\n", "return", "nn", ".", "ModuleList", "(", "blocks", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXtBottleneck.__init__": [[60, 81], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "cardinality", ",", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_planes", "=", "cardinality", "*", "int", "(", "planes", "/", "32", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "mid_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "mid_planes", ",", "\n", "mid_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "cardinality", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "\n", "mid_planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXtBottleneck.forward": [[82, 103], ["resnext.ResNeXtBottleneck.conv1", "resnext.ResNeXtBottleneck.bn1", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.conv2", "resnext.ResNeXtBottleneck.bn2", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.conv3", "resnext.ResNeXtBottleneck.bn3", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.__init__": [[107, 149], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "int", "int", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "resnext.ResNeXt.modules", "math.ceil", "math.ceil", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear", "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.modules.transformer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "shortcut_type", "=", "'B'", ",", "\n", "cardinality", "=", "32", ",", "\n", "num_classes", "=", "400", ",", "\n", "features_only", "=", "False", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "features_only", "=", "features_only", "\n", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "0", "]", ",", "shortcut_type", ",", "\n", "cardinality", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "1", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "2", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "1024", ",", "layers", "[", "3", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "last_duration", "=", "int", "(", "math", ".", "ceil", "(", "sample_duration", "/", "16", ")", ")", "\n", "last_size", "=", "int", "(", "math", ".", "ceil", "(", "sample_size", "/", "32", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool3d", "(", "\n", "(", "last_duration", ",", "last_size", ",", "last_size", ")", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "cardinality", "*", "32", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt._make_layer": [[150, 181], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "\n", "block", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "shortcut_type", ",", "\n", "cardinality", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "\n", "downsample_basic_block", ",", "\n", "planes", "=", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cardinality", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cardinality", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.ResNeXt.forward": [[182, 201], ["resnext.ResNeXt.conv1", "resnext.ResNeXt.bn1", "resnext.ResNeXt.relu", "resnext.ResNeXt.maxpool", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "resnext.ResNeXt.layer4", "resnext.ResNeXt.avgpool", "resnext.ResNeXt.view", "resnext.ResNeXt.fc", "resnext.ResNeXt.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "features_only", ":", "\n", "            ", "return", "x", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.conv3x3x3": [[33, 42], ["torch.Conv3d"], "function", ["None"], ["def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "# 3x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.downsample_basic_block": [[44, 55], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["", "def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.get_fine_tuning_parameters": [[203, 222], ["range", "ft_module_names.append", "model.named_parameters", "model.parameters", "ft_module_names.append", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_begin_index", ")", ":", "\n", "    ", "if", "ft_begin_index", "==", "0", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "ft_module_names", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ft_begin_index", ",", "5", ")", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "", "ft_module_names", ".", "append", "(", "'fc'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "            ", "if", "ft_module", "in", "k", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.resnet50": [[224, 229], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.resnet101": [[231, 236], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.skeletonnn_cfn-sr.networks.resnext.resnet152": [[238, 243], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]]}