{"home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.config.DefaultConfig.__init__": [[7, 63], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "prepare", "=", "False", "\n", "self", ".", "build", "=", "False", "\n", "self", ".", "train", "=", "False", "\n", "self", ".", "evaluate", "=", "False", "\n", "self", ".", "case", "=", "False", "\n", "self", ".", "gpu", "=", "'0'", "\n", "self", ".", "seed", "=", "23333", "\n", "\n", "self", ".", "disable_cuda", "=", "False", "\n", "self", ".", "warmup", "=", "0.5", "\n", "self", ".", "lr", "=", "0.0001", "\n", "self", ".", "weight_decay", "=", "0.0003", "\n", "self", ".", "clip", "=", "0.35", "\n", "self", ".", "emb_dropout", "=", "0.3", "\n", "self", ".", "layer_dropout", "=", "0.3", "\n", "self", ".", "batch_train", "=", "32", "\n", "self", ".", "batch_eval", "=", "64", "\n", "self", ".", "epochs", "=", "10", "\n", "self", ".", "optim", "=", "'Adam'", "\n", "self", ".", "patience", "=", "2", "\n", "self", ".", "period", "=", "1000", "\n", "self", ".", "num_threads", "=", "8", "\n", "self", ".", "max_len", "=", "{", "'full'", ":", "128", ",", "'pre'", ":", "64", ",", "'alt'", ":", "8", ",", "'cur'", ":", "64", "}", "\n", "self", ".", "w2v_type", "=", "'wiki'", "\n", "self", ".", "n_emb", "=", "300", "\n", "self", ".", "n_hidden", "=", "64", "\n", "self", ".", "n_layer", "=", "2", "\n", "self", ".", "n_block", "=", "4", "\n", "self", ".", "n_head", "=", "4", "\n", "self", ".", "is_pos", "=", "False", "\n", "self", ".", "is_sinusoid", "=", "True", "\n", "self", ".", "is_ffn", "=", "True", "\n", "self", ".", "is_fc", "=", "True", "\n", "self", ".", "n_kernel", "=", "3", "\n", "self", ".", "n_kernels", "=", "[", "2", ",", "3", ",", "4", "]", "\n", "self", ".", "n_filter", "=", "50", "\n", "self", ".", "kmax_pooling", "=", "2", "\n", "self", ".", "window_size", "=", "10", "\n", "self", ".", "n_class", "=", "2", "\n", "\n", "self", ".", "task", "=", "'bootstrapped'", "\n", "self", ".", "model", "=", "'MCDN'", "\n", "self", ".", "train_file", "=", "'altlex_train_bootstrapped.tsv'", "\n", "self", ".", "valid_file", "=", "'altlex_dev.tsv'", "\n", "self", ".", "test_file", "=", "'altlex_gold.tsv'", "\n", "self", ".", "transfer_file1", "=", "'2010_random_filtered.json'", "\n", "self", ".", "transfer_file2", "=", "'2010_full_filtered.json'", "\n", "self", ".", "raw_dir", "=", "'data/raw_data/'", "\n", "self", ".", "processed_dir", "=", "'data/processed_data/torch'", "\n", "self", ".", "outputs_dir", "=", "'outputs/'", "\n", "self", ".", "model_dir", "=", "'models/'", "\n", "self", ".", "result_dir", "=", "'results/'", "\n", "self", ".", "pics_dir", "=", "'pics/'", "\n", "self", ".", "summary_dir", "=", "'summary/'", "\n", "self", ".", "log_path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.config.DefaultConfig._parse": [[64, 121], ["kwargs.items", "print", "vars().items", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "setattr", "str", "hasattr", "warnings.warn", "vars", "k.startswith", "print", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNNType.str"], ["", "def", "_parse", "(", "self", ",", "kwargs", ")", ":", "\n", "        ", "'''\n        \u6839\u636e\u5b57\u5178kwargs \u66f4\u65b0 config\u53c2\u6570\n        '''", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "k", ")", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Warning: opt has not attribut %s\"", "%", "k", ")", "\n", "", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "'Config Space:'", ")", "\n", "for", "k", ",", "v", "in", "vars", "(", "self", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "k", ".", "startswith", "(", "'__'", ")", ":", "\n", "                ", "print", "(", "'%s=%s'", "%", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "", "self", ".", "processed_dir", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "self", ".", "task", ",", "str", "(", "self", ".", "max_len", "[", "'full'", "]", ")", ")", "\n", "self", ".", "model_dir", "=", "op", ".", "join", "(", "self", ".", "outputs_dir", ",", "self", ".", "task", ",", "self", ".", "model", ",", "self", ".", "model_dir", ")", "\n", "self", ".", "result_dir", "=", "op", ".", "join", "(", "self", ".", "outputs_dir", ",", "self", ".", "task", ",", "self", ".", "model", ",", "self", ".", "result_dir", ")", "\n", "self", ".", "pics_dir", "=", "op", ".", "join", "(", "self", ".", "outputs_dir", ",", "self", ".", "task", ",", "self", ".", "model", ",", "self", ".", "pics_dir", ")", "\n", "self", ".", "summary_dir", "=", "op", ".", "join", "(", "self", ".", "outputs_dir", ",", "self", ".", "task", ",", "self", ".", "model", ",", "self", ".", "summary_dir", ")", "\n", "for", "dir_path", "in", "[", "self", ".", "raw_dir", ",", "self", ".", "processed_dir", ",", "self", ".", "model_dir", ",", "self", ".", "result_dir", ",", "self", ".", "pics_dir", ",", "\n", "self", ".", "summary_dir", "]", ":", "\n", "            ", "if", "not", "op", ".", "exists", "(", "dir_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "\n", "# \u8fd0\u884c\u8bb0\u5f55\u6587\u4ef6", "\n", "", "", "self", ".", "train_record_file", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'train.pkl'", ")", "\n", "self", ".", "valid_record_file", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'valid.pkl'", ")", "\n", "self", ".", "test_record_file", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'test.pkl'", ")", "\n", "self", ".", "transfer_record_file1", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'transfer1.pkl'", ")", "\n", "self", ".", "transfer_record_file2", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'transfer2.pkl'", ")", "\n", "# \u8ba1\u6570\u6587\u4ef6", "\n", "self", ".", "train_meta", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'train_meta.json'", ")", "\n", "self", ".", "valid_meta", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'valid_meta.json'", ")", "\n", "self", ".", "test_meta", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'test_meta.json'", ")", "\n", "self", ".", "transfer_meta1", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'transfer_meta1.json'", ")", "\n", "self", ".", "transfer_meta2", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'transfer_meta2.json'", ")", "\n", "self", ".", "shape_meta", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'shape_meta.json'", ")", "\n", "\n", "self", ".", "train_annotation", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'train_annotations.txt'", ")", "\n", "self", ".", "valid_annotation", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'valid_annotations.txt'", ")", "\n", "self", ".", "test_annotation", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'test_annotations.txt'", ")", "\n", "\n", "self", ".", "corpus_file", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'corpus.txt'", ")", "\n", "self", ".", "token_emb_file", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'token_emb.pkl'", ")", "\n", "self", ".", "token2id_file", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'token2id.json'", ")", "\n", "self", ".", "id2token_file", "=", "op", ".", "join", "(", "self", ".", "processed_dir", ",", "'id2token.json'", ")", "\n", "\n", "if", "self", ".", "w2v_type", "==", "'wiki'", ":", "\n", "            ", "self", ".", "w2v_file", "=", "'./data/processed_data/wiki.en.pkl'", "\n", "", "elif", "self", ".", "w2v_type", "==", "'google'", ":", "\n", "            ", "self", ".", "w2v_file", "=", "'./data/processed_data/google.news.pkl'", "\n", "", "elif", "self", ".", "w2v_type", "==", "'glove6'", ":", "\n", "            ", "self", ".", "w2v_file", "=", "'./data/processed_data/glove.6B.pkl'", "\n", "", "elif", "self", ".", "w2v_type", "==", "'glove840'", ":", "\n", "            ", "self", ".", "w2v_file", "=", "'./data/processed_data/glove.840B.pkl'", "\n", "", "elif", "self", ".", "w2v_type", "==", "'fastText'", ":", "\n", "            ", "self", ".", "w2v_file", "=", "'./data/processed_data/fastText.pkl'", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_main_SASE.parse_args": [[20, 144], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.run.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parses command line arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Causality'", ")", "\n", "parser", ".", "add_argument", "(", "'--prepare'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'create the directories, prepare the vocabulary and embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--build'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to build word dict and embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--train'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'train the model'", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'evaluate the model on dev set'", ")", "\n", "parser", ".", "add_argument", "(", "'--predict'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'predict the answers for test set with trained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--multi'", ",", "type", "=", "str", ",", "default", "=", "5", ",", "\n", "help", "=", "'times for experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'specify gpu device'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "23333", ",", "\n", "help", "=", "'random seed (default: 23333)'", ")", "\n", "\n", "train_settings", "=", "parser", ".", "add_argument_group", "(", "'train settings'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--disable_cuda'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Disable CUDA'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--warmup'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'learning rate warmup proportion'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--clip'", ",", "type", "=", "float", ",", "default", "=", "0.35", ",", "\n", "help", "=", "'gradient clip, -1 means no clip (default: 0.35)'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--emb_dropout'", ",", "type", "=", "float", ",", "default", "=", "0.3", ",", "\n", "help", "=", "'dropout keep rate'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--layer_dropout'", ",", "type", "=", "float", ",", "default", "=", "0.3", ",", "\n", "help", "=", "'dropout keep rate'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--batch_train'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'train batch size'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--batch_eval'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'dev batch size'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'train epochs'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--optim'", ",", "default", "=", "'Adam'", ",", "\n", "help", "=", "'optimizer type'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--patience'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'num of epochs for train patients'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--period'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'period to save batch loss'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--num_threads'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'Number of threads in input pipeline'", ")", "\n", "\n", "model_settings", "=", "parser", ".", "add_argument_group", "(", "'model settings'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--max_len'", ",", "type", "=", "dict", ",", "default", "=", "{", "'full'", ":", "128", ",", "'pre'", ":", "64", ",", "'alt'", ":", "8", ",", "'cur'", ":", "64", "}", ",", "\n", "help", "=", "'max length of sequence'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--w2v_type'", ",", "type", "=", "str", ",", "default", "=", "'wiki'", ",", "\n", "help", "=", "'type of the embeddings'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_emb'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'size of the embeddings'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_hidden'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'size of LSTM hidden units'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_layer'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'num of layers'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_fc'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use focal loss'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_atten'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use self attention'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_gated'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use gated conv'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_block'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'attention block size (default: 2)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_head'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'attention head size (default: 2)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_pos'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use position embedding'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_sinusoid'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'whether to use sinusoid position embedding'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_ffn'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'whether to use point-wise ffn'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_kernel'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'kernel size (default: 3)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_kernels'", ",", "type", "=", "int", ",", "default", "=", "[", "2", ",", "3", ",", "4", "]", ",", "\n", "help", "=", "'kernels size (default: 2, 3, 4)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_level'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "\n", "help", "=", "'# of levels (default: 10)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_filter'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'number of hidden units per layer (default: 256)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_class'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'class size (default: 2)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--kmax_pooling'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'top-K max pooling'", ")", "\n", "\n", "path_settings", "=", "parser", ".", "add_argument_group", "(", "'path settings'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'bootstrapped'", ",", "\n", "help", "=", "'the task name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'SASE'", ",", "\n", "help", "=", "'the model name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--train_file'", ",", "default", "=", "'altlex_train.tsv'", ",", "\n", "help", "=", "'the train file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--valid_file'", ",", "default", "=", "'altlex_gold.tsv'", ",", "\n", "help", "=", "'the valid file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--test_file'", ",", "default", "=", "'altlex_test.tsv'", ",", "\n", "help", "=", "'the test file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--transfer_file1'", ",", "default", "=", "'2010_random_filtered.json'", ",", "\n", "help", "=", "'the transfer file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--transfer_file2'", ",", "default", "=", "'2010_full_filtered.json'", ",", "\n", "help", "=", "'the transfer file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--raw_dir'", ",", "default", "=", "'data/raw_data/'", ",", "\n", "help", "=", "'the dir to store raw data'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--processed_dir'", ",", "default", "=", "'data/processed_data/torch'", ",", "\n", "help", "=", "'the dir to store prepared data'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--outputs_dir'", ",", "default", "=", "'outputs/'", ",", "\n", "help", "=", "'the dir for outputs'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--model_dir'", ",", "default", "=", "'models/'", ",", "\n", "help", "=", "'the dir to store models'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--result_dir'", ",", "default", "=", "'results/'", ",", "\n", "help", "=", "'the dir to store the results'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--pics_dir'", ",", "default", "=", "'pics/'", ",", "\n", "help", "=", "'the dir to store the pictures'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--summary_dir'", ",", "default", "=", "'summary/'", ",", "\n", "help", "=", "'the dir to write tensorboard summary'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--log_path'", ",", "\n", "help", "=", "'path of the log file. If not set, logs are printed to console'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_main_SASE.train_one_epoch": [[146, 181], ["model.train", "torch.from_numpy().to", "torch.from_numpy().to", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "enumerate", "numpy.mean", "range", "utils.torch_util.get_batch", "optimizer.zero_grad", "model", "loss.backward", "optimizer.step", "scheduler.step", "loss.item", "train_loss.append", "torch.from_numpy", "torch.from_numpy", "torch.nn.CrossEntropyLoss.", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "logger.info", "loss.item", "numpy.array", "outputs.view", "model.parameters"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.get_batch"], ["", "def", "train_one_epoch", "(", "model", ",", "optimizer", ",", "scheduler", ",", "train_num", ",", "train_file", ",", "args", ",", "logger", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "[", "]", "\n", "n_batch_loss", "=", "0", "\n", "weight", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0.3", ",", "0.7", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "entropy_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "weight", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "range", "(", "0", ",", "train_num", ",", "args", ".", "batch_train", ")", ")", ":", "\n", "        ", "start_idx", "=", "batch", "\n", "end_idx", "=", "start_idx", "+", "args", ".", "batch_train", "\n", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "cau_labels", ",", "seq_lens", ",", "_", "=", "get_batch", "(", "train_file", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "args", ".", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", ",", "penal", ",", "weights", "=", "model", "(", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "seq_lens", ")", "\n", "# if args.is_fc:", "\n", "#     criterion = FocalLoss(gamma=2, alpha=0.75)", "\n", "# else:", "\n", "#     criterion = torch.nn.CrossEntropyLoss()", "\n", "# loss = criterion(outputs, cau_labels)", "\n", "loss", "=", "entropy_loss", "(", "outputs", ".", "view", "(", "-", "1", ",", "args", ".", "n_class", ")", ",", "cau_labels", ")", "+", "0.5", "*", "penal", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "clip", ">", "0", ":", "\n", "# \u68af\u5ea6\u88c1\u526a\uff0c\u8f93\u5165\u662f(NN\u53c2\u6570\uff0c\u6700\u5927\u68af\u5ea6\u8303\u6570\uff0c\u8303\u6570\u7c7b\u578b=2)\uff0c\u4e00\u822c\u9ed8\u8ba4\u4e3aL2\u8303\u6570", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "n_batch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "bidx", "=", "batch_idx", "+", "1", "\n", "if", "bidx", "%", "args", ".", "period", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'AvgLoss batch [{} {}] - {}'", ".", "format", "(", "bidx", "-", "args", ".", "period", "+", "1", ",", "bidx", ",", "n_batch_loss", "/", "args", ".", "period", ")", ")", "\n", "n_batch_loss", "=", "0", "\n", "", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "avg_train_loss", "=", "np", ".", "mean", "(", "train_loss", ")", "\n", "return", "avg_train_loss", "\n", "# avg_train_acc = np.mean(train_acc)", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_main_SASE.train": [[189, 300], ["logging.getLogger", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "torch_main_SASE.load_json", "logging.getLogger.info", "torch_main_SASE.load_json", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "logging.getLogger.info", "numpy.zeros", "range", "utils.torch_util.save_metrics", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "logging.getLogger.info", "models.torch_SelfAttentive.SelfAttentive().to", "pytorch_transformers.WarmupCosineSchedule", "logging.getLogger.info", "numpy.zeros", "range", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "getattr", "SelfAttentive().to.parameters", "logging.getLogger.info", "torch_main_SASE.train_one_epoch", "train_loss.append", "logging.getLogger.info", "logging.getLogger.info", "utils.torch_util_SASE.evaluate_batch", "valid_loss.append", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "random.shuffle", "torch_main_SASE.dump_json", "torch_main_SASE.dump_json", "torch_main_SASE.dump_json", "utils.torch_util.save_loss", "utils.torch_util.draw_curve", "models.torch_SelfAttentive.SelfAttentive", "os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "SelfAttentive().to.state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.load_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.load_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.save_metrics", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train_one_epoch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.evaluate_batch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.save_loss", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.draw_curve", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save"], ["", "def", "train", "(", "args", ",", "file_paths", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'Causality'", ")", "\n", "logger", ".", "info", "(", "'Loading train file...'", ")", "\n", "with", "open", "(", "file_paths", ".", "train_record_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "train_file", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading valid file...'", ")", "\n", "with", "open", "(", "file_paths", ".", "valid_record_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "valid_file", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading train meta...'", ")", "\n", "train_meta", "=", "load_json", "(", "file_paths", ".", "train_meta", ")", "\n", "logger", ".", "info", "(", "'Loading valid meta...'", ")", "\n", "valid_meta", "=", "load_json", "(", "file_paths", ".", "valid_meta", ")", "\n", "logger", ".", "info", "(", "'Loading token embeddings...'", ")", "\n", "with", "open", "(", "file_paths", ".", "token_emb_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "token_embeddings", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "train_num", "=", "train_meta", "[", "'total'", "]", "\n", "valid_num", "=", "valid_meta", "[", "'total'", "]", "\n", "\n", "logger", ".", "info", "(", "'Loading shape meta...'", ")", "\n", "logger", ".", "info", "(", "'Num train data {} valid data {}'", ".", "format", "(", "train_num", ",", "valid_num", ")", ")", "\n", "\n", "args", ".", "dropout", "=", "{", "'emb'", ":", "args", ".", "emb_dropout", ",", "'layer'", ":", "args", ".", "layer_dropout", "}", "\n", "records", "=", "np", ".", "zeros", "(", "(", "args", ".", "multi", ",", "7", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "best_sum", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "args", ".", "multi", "+", "1", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Initialize the model...'", ")", "\n", "# model = getattr(models, args.model)(token_embeddings, args, logger).to(device=args.device)", "\n", "# model = TCN(token_embeddings, args.max_len['full'], args.n_class, n_channel=[args.n_filter] * args.n_level,", "\n", "#             n_kernel=args.n_kernel, n_block=args.n_block, n_head=args.n_head, dropout=dropout, logger=logger).", "\n", "#             to(device=args.device)", "\n", "# model = BiGRU(token_embeddings, args.max_len['full'], args.n_class, args.n_hidden, args.n_layer, args.n_block,", "\n", "#               args.n_head, args.is_sinusoid, args.is_ffn, dropout, logger).to(device=args.device)", "\n", "# model = TextCNN(token_embeddings, args.max_len, args.n_class, args.n_kernels, args.n_filter, args.is_pos,", "\n", "#                 args.is_sinusoid, args.dropout, logger).to(device=args.device)", "\n", "# model = TextCNNDeep(token_embeddings, args.max_len, args.n_class, args.n_kernels, args.n_filter,", "\n", "#                     args.dropout, logger).to(device=args.device)", "\n", "# model = DPCNN(token_embeddings, args, logger).to(device=args.device)", "\n", "# model = TextRNN(token_embeddings, args.n_class, args.n_hidden, args.n_layer, args.kmax_pooling,", "\n", "#                 args.is_pos, args.is_sinusoid, args.dropout, logger).to(device=args.device)", "\n", "model", "=", "SelfAttentive", "(", "token_embeddings", ",", "args", ".", "n_class", ",", "args", ".", "n_hidden", ",", "args", ".", "n_layer", ",", "128", ",", "32", ",", "\n", "args", ".", "dropout", ",", "logger", ")", ".", "to", "(", "device", "=", "args", ".", "device", ")", "\n", "lr", "=", "args", ".", "lr", "\n", "optimizer", "=", "getattr", "(", "optim", ",", "args", ".", "optim", ")", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "# scheduler = optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.9)", "\n", "# scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'max', 0.5, patience=args.patience, verbose=True)", "\n", "scheduler", "=", "WarmupCosineSchedule", "(", "optimizer", ",", "args", ".", "warmup", ",", "(", "train_num", "//", "args", ".", "batch_train", "+", "1", ")", "*", "args", ".", "epochs", ")", "\n", "logger", ".", "info", "(", "'Turn {}'", ".", "format", "(", "i", ")", ")", "\n", "max_acc", ",", "max_p", ",", "max_r", ",", "max_f", ",", "max_roc", ",", "max_prc", ",", "max_sum", ",", "max_epoch", "=", "np", ".", "zeros", "(", "8", ")", "\n", "FALSE", ",", "ROC", ",", "PRC", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "train_loss", ",", "valid_loss", "=", "[", "]", ",", "[", "]", "\n", "is_best", "=", "False", "\n", "for", "ep", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'Training the model for epoch {}'", ".", "format", "(", "ep", ")", ")", "\n", "avg_loss", "=", "train_one_epoch", "(", "model", ",", "optimizer", ",", "scheduler", ",", "train_num", ",", "train_file", ",", "args", ",", "logger", ")", "\n", "train_loss", ".", "append", "(", "avg_loss", ")", "\n", "logger", ".", "info", "(", "'Epoch {} AvgLoss {}'", ".", "format", "(", "ep", ",", "avg_loss", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'Evaluating the model for epoch {}'", ".", "format", "(", "ep", ")", ")", "\n", "eval_metrics", ",", "fpr", ",", "tpr", ",", "precision", ",", "recall", "=", "evaluate_batch", "(", "model", ",", "valid_num", ",", "args", ".", "batch_eval", ",", "valid_file", ",", "\n", "args", ".", "device", ",", "args", ".", "is_fc", ",", "'valid'", ",", "logger", ")", "\n", "valid_loss", ".", "append", "(", "eval_metrics", "[", "'loss'", "]", ")", "\n", "logger", ".", "info", "(", "'Valid Loss - {}'", ".", "format", "(", "eval_metrics", "[", "'loss'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid Acc - {}'", ".", "format", "(", "eval_metrics", "[", "'acc'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid Precision - {}'", ".", "format", "(", "eval_metrics", "[", "'precision'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid Recall - {}'", ".", "format", "(", "eval_metrics", "[", "'recall'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid F1 - {}'", ".", "format", "(", "eval_metrics", "[", "'f1'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid AUCROC - {}'", ".", "format", "(", "eval_metrics", "[", "'auc_roc'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid AUCPRC - {}'", ".", "format", "(", "eval_metrics", "[", "'auc_prc'", "]", ")", ")", "\n", "valid_sum", "=", "eval_metrics", "[", "'acc'", "]", "+", "eval_metrics", "[", "'precision'", "]", "+", "eval_metrics", "[", "'recall'", "]", "+", "eval_metrics", "[", "'f1'", "]", "\n", "if", "valid_sum", ">", "max_sum", ":", "\n", "                ", "max_acc", "=", "eval_metrics", "[", "'acc'", "]", "\n", "max_p", "=", "eval_metrics", "[", "'precision'", "]", "\n", "max_r", "=", "eval_metrics", "[", "'recall'", "]", "\n", "max_f", "=", "eval_metrics", "[", "'f1'", "]", "\n", "max_roc", "=", "eval_metrics", "[", "'auc_roc'", "]", "\n", "max_prc", "=", "eval_metrics", "[", "'auc_prc'", "]", "\n", "max_sum", "=", "valid_sum", "\n", "max_epoch", "=", "ep", "\n", "FALSE", "=", "{", "'FP'", ":", "eval_metrics", "[", "'fp'", "]", ",", "'FN'", ":", "eval_metrics", "[", "'fn'", "]", "}", "\n", "ROC", "=", "{", "'FPR'", ":", "fpr", ",", "'TPR'", ":", "tpr", "}", "\n", "PRC", "=", "{", "'PRECISION'", ":", "precision", ",", "'RECALL'", ":", "recall", "}", "\n", "# torch.save(model, os.path.join(args.model_dir, 'model.pth'))", "\n", "if", "max_sum", ">", "best_sum", ":", "\n", "                    ", "best_sum", "=", "max_sum", "\n", "is_best", "=", "True", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'model.bin'", ")", ")", "\n", "\n", "", "", "random", ".", "shuffle", "(", "train_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Max Acc - {}'", ".", "format", "(", "max_acc", ")", ")", "\n", "logger", ".", "info", "(", "'Max Precision - {}'", ".", "format", "(", "max_p", ")", ")", "\n", "logger", ".", "info", "(", "'Max Recall - {}'", ".", "format", "(", "max_r", ")", ")", "\n", "logger", ".", "info", "(", "'Max F1 - {}'", ".", "format", "(", "max_f", ")", ")", "\n", "logger", ".", "info", "(", "'Max ROC - {}'", ".", "format", "(", "max_roc", ")", ")", "\n", "logger", ".", "info", "(", "'Max PRC - {}'", ".", "format", "(", "max_prc", ")", ")", "\n", "logger", ".", "info", "(", "'Max Epoch - {}'", ".", "format", "(", "max_epoch", ")", ")", "\n", "logger", ".", "info", "(", "'Max Sum - {}'", ".", "format", "(", "max_sum", ")", ")", "\n", "\n", "if", "is_best", ":", "\n", "            ", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'FALSE_valid.json'", ")", ",", "FALSE", ")", "\n", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'ROC_valid.json'", ")", ",", "ROC", ")", "\n", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'PRC_valid.json'", ")", ",", "PRC", ")", "\n", "save_loss", "(", "train_loss", ",", "valid_loss", ",", "args", ".", "result_dir", ")", "\n", "draw_curve", "(", "ROC", "[", "'FPR'", "]", ",", "ROC", "[", "'TPR'", "]", ",", "PRC", "[", "'PRECISION'", "]", ",", "PRC", "[", "'RECALL'", "]", ",", "args", ".", "pics_dir", ")", "\n", "\n", "", "records", "[", "i", "-", "1", "]", "=", "[", "max_acc", ",", "max_p", ",", "max_r", ",", "max_f", ",", "max_roc", ",", "max_prc", ",", "max_epoch", "]", "\n", "\n", "", "save_metrics", "(", "records", ",", "args", ".", "result_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_main_SASE.dump_json": [[302, 306], ["f.close", "open", "f.write", "ujson.dumps"], "function", ["None"], ["", "def", "dump_json", "(", "file_path", ",", "obj", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "obj", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_main_SASE.load_json": [[308, 313], ["f.close", "open", "ujson.load"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "def", "load_json", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_main_SASE.run": [[315, 393], ["torch_main_SASE.parse_args", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.getLogger.info", "torch.manual_seed", "torch.manual_seed", "logging.getLogger.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "FilePaths", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "torch.device", "str", "preprocess.torch_preprocess.run_prepare", "torch_main_SASE.train", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.run.parse_args", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNNType.str", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.run_prepare", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train"], ["", "def", "run", "(", ")", ":", "\n", "    ", "\"\"\"\n    Prepares and runs the whole system.\n    \"\"\"", "\n", "args", "=", "parse_args", "(", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'Causality'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "# \u662f\u5426\u5b58\u50a8\u65e5\u5fd7", "\n", "if", "args", ".", "log_path", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "args", ".", "log_path", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "", "else", ":", "\n", "        ", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "", "logger", ".", "info", "(", "'Running with args : {}'", ".", "format", "(", "args", ")", ")", "\n", "os", ".", "environ", "[", "'CUDA_DEVICE_ORDER'", "]", "=", "'PCI_BUS_ID'", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "args", ".", "device", "=", "None", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "args", ".", "disable_cuda", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "logger", ".", "info", "(", "'Preparing the directories...'", ")", "\n", "args", ".", "processed_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "args", ".", "task", ",", "str", "(", "args", ".", "max_len", "[", "'full'", "]", ")", ")", "\n", "args", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "model_dir", ")", "\n", "args", ".", "result_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "result_dir", ")", "\n", "args", ".", "pics_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "pics_dir", ")", "\n", "args", ".", "summary_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "summary_dir", ")", "\n", "for", "dir_path", "in", "[", "args", ".", "raw_dir", ",", "args", ".", "processed_dir", ",", "args", ".", "model_dir", ",", "args", ".", "result_dir", ",", "args", ".", "pics_dir", ",", "\n", "args", ".", "summary_dir", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "\n", "", "", "class", "FilePaths", "(", "object", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "w2v_type", ")", ":", "\n", "# \u8fd0\u884c\u8bb0\u5f55\u6587\u4ef6", "\n", "            ", "self", ".", "train_record_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train.pkl'", ")", "\n", "self", ".", "valid_record_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid.pkl'", ")", "\n", "self", ".", "test_record_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test.pkl'", ")", "\n", "self", ".", "transfer_record_file1", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'transfer1.pkl'", ")", "\n", "self", ".", "transfer_record_file2", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'transfer2.pkl'", ")", "\n", "# \u8ba1\u6570\u6587\u4ef6", "\n", "self", ".", "train_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train_meta.json'", ")", "\n", "self", ".", "valid_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid_meta.json'", ")", "\n", "self", ".", "test_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test_meta.json'", ")", "\n", "self", ".", "transfer_meta1", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'transfer_meta1.json'", ")", "\n", "self", ".", "transfer_meta2", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'transfer_meta2.json'", ")", "\n", "self", ".", "shape_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'shape_meta.json'", ")", "\n", "\n", "self", ".", "train_annotation", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train_annotations.txt'", ")", "\n", "self", ".", "valid_annotation", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid_annotations.txt'", ")", "\n", "self", ".", "test_annotation", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test_annotations.txt'", ")", "\n", "\n", "self", ".", "corpus_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'corpus.txt'", ")", "\n", "self", ".", "token_emb_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'token_emb.pkl'", ")", "\n", "self", ".", "token2id_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'token2id.json'", ")", "\n", "self", ".", "id2token_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'id2token.json'", ")", "\n", "\n", "if", "w2v_type", "==", "'wiki'", ":", "\n", "                ", "self", ".", "w2v_file", "=", "'./data/processed_data/wiki.en.pkl'", "\n", "", "elif", "w2v_type", "==", "'google'", ":", "\n", "                ", "self", ".", "w2v_file", "=", "'./data/processed_data/google.news.pkl'", "\n", "", "elif", "w2v_type", "==", "'glove6'", ":", "\n", "                ", "self", ".", "w2v_file", "=", "'./data/processed_data/glove.6B.pkl'", "\n", "", "elif", "w2v_type", "==", "'glove840'", ":", "\n", "                ", "self", ".", "w2v_file", "=", "'./data/processed_data/glove.840B.pkl'", "\n", "\n", "", "", "", "file_paths", "=", "FilePaths", "(", "args", ".", "w2v_type", ")", "\n", "if", "args", ".", "prepare", ":", "\n", "        ", "run_prepare", "(", "args", ")", "\n", "", "if", "args", ".", "train", ":", "\n", "        ", "train", "(", "args", ",", "file_paths", ")", "\n", "# if args.evaluate:", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_test.lemmatize_all": [[23, 37], ["nltk.stem.WordNetLemmatizer", "nltk.tag.pos_tag", "tag.startswith", "tag.startswith", "nltk.stem.WordNetLemmatizer.lemmatize", "tag.startswith", "nltk.stem.WordNetLemmatizer.lemmatize", "tag.startswith", "nltk.stem.WordNetLemmatizer.lemmatize", "nltk.stem.WordNetLemmatizer.lemmatize"], "function", ["None"], ["def", "lemmatize_all", "(", "sentence", ")", ":", "\n", "    ", "wnl", "=", "WordNetLemmatizer", "(", ")", "\n", "# sen = [w.lower() for w in word_tokenize(sentence)]", "\n", "for", "word", ",", "tag", "in", "pos_tag", "(", "sentence", ")", ":", "\n", "        ", "if", "tag", ".", "startswith", "(", "'NN'", ")", ":", "\n", "            ", "yield", "wnl", ".", "lemmatize", "(", "word", ",", "pos", "=", "'n'", ")", "\n", "", "elif", "tag", ".", "startswith", "(", "'VB'", ")", ":", "\n", "            ", "yield", "wnl", ".", "lemmatize", "(", "word", ",", "pos", "=", "'v'", ")", "\n", "", "elif", "tag", ".", "startswith", "(", "'JJ'", ")", ":", "\n", "            ", "yield", "wnl", ".", "lemmatize", "(", "word", ",", "pos", "=", "'a'", ")", "\n", "", "elif", "tag", ".", "startswith", "(", "'R'", ")", ":", "\n", "            ", "yield", "wnl", ".", "lemmatize", "(", "word", ",", "pos", "=", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "yield", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_test.seg_sentence": [[39, 47], ["pat_letter.sub().strip().lower", "nltk.tokenize.word_tokenize", "SPACE.join().split", "pat_letter.sub().strip", "SPACE.join", "torch_test.lemmatize_all", "pat_letter.sub"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.result_analyze.lemmatize_all"], ["", "", "", "def", "seg_sentence", "(", "sentence", ")", ":", "\n", "    ", "if", "sentence", "==", "'\"\\n'", "or", "sentence", "==", "'\\n'", ":", "\n", "        ", "return", "[", "]", "\n", "", "sentence", "=", "pat_letter", ".", "sub", "(", "''", ",", "sentence", ")", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "tokens", "=", "word_tokenize", "(", "sentence", ")", "\n", "tokens", "=", "SPACE", ".", "join", "(", "lemmatize_all", "(", "tokens", ")", ")", ".", "split", "(", ")", "\n", "tokens", "=", "[", "w", "for", "w", "in", "tokens", "if", "w", "not", "in", "stop_words", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_main.parse_args": [[24, 152], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.run.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parses command line arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Causality'", ")", "\n", "parser", ".", "add_argument", "(", "'--prepare'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'create the directories, prepare the vocabulary and embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--build'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to build word dict and embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--train'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'train the model'", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'evaluate the model on dev set'", ")", "\n", "parser", ".", "add_argument", "(", "'--case'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'case study'", ")", "\n", "parser", ".", "add_argument", "(", "'--multi'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'times for experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'specify gpu device'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "23333", ",", "\n", "help", "=", "'random seed (default: 23333)'", ")", "\n", "\n", "train_settings", "=", "parser", ".", "add_argument_group", "(", "'train settings'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--disable_cuda'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Disable CUDA'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--warmup'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'learning rate warmup proportion'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--clip'", ",", "type", "=", "float", ",", "default", "=", "0.35", ",", "\n", "help", "=", "'gradient clip, -1 means no clip (default: 0.35)'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--emb_dropout'", ",", "type", "=", "float", ",", "default", "=", "0.3", ",", "\n", "help", "=", "'dropout keep rate'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--layer_dropout'", ",", "type", "=", "float", ",", "default", "=", "0.3", ",", "\n", "help", "=", "'dropout keep rate'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--batch_train'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'train batch size'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--batch_eval'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'dev batch size'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'train epochs'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--optim'", ",", "default", "=", "'Adam'", ",", "\n", "help", "=", "'optimizer type'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--patience'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'num of epochs for train patients'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--period'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'period to save batch loss'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--num_threads'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'Number of threads in input pipeline'", ")", "\n", "\n", "model_settings", "=", "parser", ".", "add_argument_group", "(", "'model settings'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--max_len'", ",", "type", "=", "dict", ",", "default", "=", "{", "'full'", ":", "128", ",", "'pre'", ":", "64", ",", "'alt'", ":", "8", ",", "'cur'", ":", "64", "}", ",", "\n", "help", "=", "'max length of sequence'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--w2v_type'", ",", "type", "=", "str", ",", "default", "=", "'wiki'", ",", "\n", "help", "=", "'type of the embeddings'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_emb'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'size of the embeddings'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_hidden'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'size of LSTM hidden units'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_layer'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'num of layers'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_fc'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'whether to use focal loss'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_atten'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use self attention'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_gated'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use gated conv'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_block'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'attention block size (default: 2)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_head'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'attention head size (default: 2)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_pos'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use position embedding'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_sinusoid'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'whether to use sinusoid position embedding'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_ffn'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'whether to use point-wise ffn'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_kernel'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'kernel size (default: 3)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_kernels'", ",", "type", "=", "int", ",", "default", "=", "[", "2", ",", "3", ",", "4", "]", ",", "\n", "help", "=", "'kernels size (default: 2, 3, 4)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_level'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "\n", "help", "=", "'# of levels (default: 10)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_filter'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'number of hidden units per layer (default: 256)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_class'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'class size (default: 2)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--kmax_pooling'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'top-K max pooling'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--window_size'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'size of DRNN window'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--dp_blocks'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'dpcnn block size (default: 3)'", ")", "\n", "\n", "path_settings", "=", "parser", ".", "add_argument_group", "(", "'path settings'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'bootstrapped'", ",", "\n", "help", "=", "'the task name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'MCDN'", ",", "\n", "help", "=", "'the model name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--train_file'", ",", "default", "=", "'altlex_train_bootstrapped.tsv'", ",", "\n", "help", "=", "'the train file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--valid_file'", ",", "default", "=", "'altlex_dev.tsv'", ",", "\n", "help", "=", "'the valid file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--test_file'", ",", "default", "=", "'altlex_gold.tsv'", ",", "\n", "help", "=", "'the test file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--transfer_file1'", ",", "default", "=", "'2010_random_filtered.json'", ",", "\n", "help", "=", "'the transfer file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--transfer_file2'", ",", "default", "=", "'2010_full_filtered.json'", ",", "\n", "help", "=", "'the transfer file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--raw_dir'", ",", "default", "=", "'data/raw_data/'", ",", "\n", "help", "=", "'the dir to store raw data'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--processed_dir'", ",", "default", "=", "'data/processed_data/torch'", ",", "\n", "help", "=", "'the dir to store prepared data'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--outputs_dir'", ",", "default", "=", "'outputs/'", ",", "\n", "help", "=", "'the dir for outputs'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--model_dir'", ",", "default", "=", "'models/'", ",", "\n", "help", "=", "'the dir to store models'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--result_dir'", ",", "default", "=", "'results/'", ",", "\n", "help", "=", "'the dir to store the results'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--pics_dir'", ",", "default", "=", "'pics/'", ",", "\n", "help", "=", "'the dir to store the pictures'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--summary_dir'", ",", "default", "=", "'summary/'", ",", "\n", "help", "=", "'the dir to write tensorboard summary'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--log_path'", ",", "\n", "help", "=", "'path of the log file. If not set, logs are printed to console'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_main.train_one_epoch": [[154, 194], ["model.train", "torch.from_numpy().to", "torch.from_numpy().to", "enumerate", "numpy.mean", "range", "utils.torch_util.get_batch", "optimizer.zero_grad", "model", "torch.nn.CrossEntropyLoss.", "criterion.backward", "optimizer.step", "scheduler.step", "criterion.item", "train_loss.append", "torch.from_numpy", "torch.from_numpy", "utils.torch_util.FocalLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "logger.info", "criterion.item", "numpy.array", "model.parameters"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.get_batch"], ["", "def", "train_one_epoch", "(", "model", ",", "optimizer", ",", "scheduler", ",", "train_num", ",", "train_file", ",", "args", ",", "logger", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "[", "]", "\n", "n_batch_loss", "=", "0", "\n", "weight", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0.2", ",", "0.8", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "range", "(", "0", ",", "train_num", ",", "args", ".", "batch_train", ")", ")", ":", "\n", "        ", "start_idx", "=", "batch", "\n", "end_idx", "=", "start_idx", "+", "args", ".", "batch_train", "\n", "# sentences, cau_labels, seq_lens = get_batch(train_file[start_idx:end_idx], args.device)", "\n", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "cau_labels", ",", "seq_lens", ",", "_", "=", "get_batch", "(", "train_file", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "args", ".", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "model", "(", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "seq_lens", ")", "\n", "# outputs = model(sentences)", "\n", "# loss = compute_loss(logits=outputs, target=labels, length=seq_lens)", "\n", "if", "args", ".", "is_fc", ":", "\n", "            ", "criterion", "=", "FocalLoss", "(", "gamma", "=", "4", ",", "alpha", "=", "0.75", ")", "\n", "", "else", ":", "\n", "            ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "weight", ")", "\n", "", "loss", "=", "criterion", "(", "outputs", ",", "cau_labels", ")", "\n", "# params = model.state_dict()", "\n", "# l2_reg = torch.autograd.Variable(torch.FloatTensor(1), requires_grad=True).cuda()", "\n", "# l2_reg = l2_reg + params['linear.weight'].norm(2) + params['linear.bias'].norm(2)", "\n", "# loss += l2_reg * args.weight_decay", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "clip", ">", "0", ":", "\n", "# \u68af\u5ea6\u88c1\u526a\uff0c\u8f93\u5165\u662f(NN\u53c2\u6570\uff0c\u6700\u5927\u68af\u5ea6\u8303\u6570\uff0c\u8303\u6570\u7c7b\u578b=2)\uff0c\u4e00\u822c\u9ed8\u8ba4\u4e3aL2\u8303\u6570", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "n_batch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "bidx", "=", "batch_idx", "+", "1", "\n", "if", "bidx", "%", "args", ".", "period", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'AvgLoss batch [{} {}] - {}'", ".", "format", "(", "bidx", "-", "args", ".", "period", "+", "1", ",", "bidx", ",", "n_batch_loss", "/", "args", ".", "period", ")", ")", "\n", "n_batch_loss", "=", "0", "\n", "", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "avg_train_loss", "=", "np", ".", "mean", "(", "train_loss", ")", "\n", "return", "avg_train_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_main.train": [[196, 306], ["logging.getLogger", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "torch_main.load_json", "logging.getLogger.info", "torch_main.load_json", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "logging.getLogger.info", "numpy.zeros", "range", "utils.torch_util.save_metrics", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "logging.getLogger.info", "pytorch_transformers.WarmupCosineSchedule", "logging.getLogger.info", "numpy.zeros", "range", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "getattr", "model.parameters", "logging.getLogger.info", "torch_main.train_one_epoch", "train_loss.append", "logging.getLogger.info", "logging.getLogger.info", "utils.torch_util.evaluate_batch", "valid_loss.append", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "random.shuffle", "torch_main.dump_json", "torch_main.dump_json", "torch_main.dump_json", "utils.torch_util.save_loss", "utils.torch_util.draw_curve", "os.path.join", "os.path.join", "os.path.join", "getattr", "time.strftime", "torch.save", "torch.save", "time.localtime", "model.state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.load_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.load_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.save_metrics", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train_one_epoch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.evaluate_batch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.save_loss", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.draw_curve", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save"], ["", "def", "train", "(", "args", ",", "file_paths", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'Causality'", ")", "\n", "logger", ".", "info", "(", "'Loading train file...'", ")", "\n", "with", "open", "(", "file_paths", ".", "train_record_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "train_file", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading valid file...'", ")", "\n", "with", "open", "(", "file_paths", ".", "valid_record_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "valid_file", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading train meta...'", ")", "\n", "train_meta", "=", "load_json", "(", "file_paths", ".", "train_meta", ")", "\n", "logger", ".", "info", "(", "'Loading valid meta...'", ")", "\n", "valid_meta", "=", "load_json", "(", "file_paths", ".", "valid_meta", ")", "\n", "logger", ".", "info", "(", "'Loading token embeddings...'", ")", "\n", "with", "open", "(", "file_paths", ".", "token_emb_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "token_embeddings", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "train_num", "=", "train_meta", "[", "'total'", "]", "\n", "valid_num", "=", "valid_meta", "[", "'total'", "]", "\n", "\n", "logger", ".", "info", "(", "'Loading shape meta...'", ")", "\n", "logger", ".", "info", "(", "'Num train data {} valid data {}'", ".", "format", "(", "train_num", ",", "valid_num", ")", ")", "\n", "\n", "args", ".", "dropout", "=", "{", "'emb'", ":", "args", ".", "emb_dropout", ",", "'layer'", ":", "args", ".", "layer_dropout", "}", "\n", "records", "=", "np", ".", "zeros", "(", "(", "args", ".", "multi", ",", "7", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "best_sum", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "args", ".", "multi", "+", "1", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Initialize the model...'", ")", "\n", "model", "=", "getattr", "(", "models", ",", "args", ".", "model", ")", "(", "token_embeddings", ",", "args", ",", "logger", ")", ".", "to", "(", "device", "=", "args", ".", "device", ")", "\n", "# model = TCN(token_embeddings, args.max_len['full'], args.n_class, n_channel=[args.n_filter] * args.n_level,", "\n", "#             n_kernel=args.n_kernel, n_block=args.n_block, n_head=args.n_head, dropout=dropout, logger=logger).", "\n", "#             to(device=args.device)", "\n", "# model = BiGRU(token_embeddings, args.max_len['full'], args.n_class, args.n_hidden, args.n_layer, args.n_block,", "\n", "#               args.n_head, args.is_sinusoid, args.is_ffn, dropout, logger).to(device=args.device)", "\n", "# model = TextCNN(token_embeddings, args.max_len, args.n_class, args.n_kernels, args.n_filter, args.is_pos,", "\n", "#                 args.is_sinusoid, args.dropout, logger).to(device=args.device)", "\n", "# model = TextCNNDeep(token_embeddings, args.max_len, args.n_class, args.n_kernels, args.n_filter,", "\n", "#                     args.dropout, logger).to(device=args.device)", "\n", "# model = DPCNN(token_embeddings, args, logger).to(device=args.device)", "\n", "# model = TextRNN(token_embeddings, args.n_class, args.n_hidden, args.n_layer, args.kmax_pooling,", "\n", "#                 args.is_pos, args.is_sinusoid, args.dropout, logger).to(device=args.device)", "\n", "lr", "=", "args", ".", "lr", "\n", "optimizer", "=", "getattr", "(", "optim", ",", "args", ".", "optim", ")", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "# scheduler = optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.9)", "\n", "# scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'max', 0.5, patience=args.patience, verbose=True)", "\n", "scheduler", "=", "WarmupCosineSchedule", "(", "optimizer", ",", "args", ".", "warmup", ",", "(", "train_num", "//", "args", ".", "batch_train", "+", "1", ")", "*", "args", ".", "epochs", ")", "\n", "logger", ".", "info", "(", "'Turn {}'", ".", "format", "(", "i", ")", ")", "\n", "max_acc", ",", "max_p", ",", "max_r", ",", "max_f", ",", "max_roc", ",", "max_prc", ",", "max_sum", ",", "max_epoch", "=", "np", ".", "zeros", "(", "8", ")", "\n", "FALSE", ",", "ROC", ",", "PRC", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "train_loss", ",", "valid_loss", "=", "[", "]", ",", "[", "]", "\n", "is_best", "=", "False", "\n", "for", "ep", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'Training the model for epoch {}'", ".", "format", "(", "ep", ")", ")", "\n", "avg_loss", "=", "train_one_epoch", "(", "model", ",", "optimizer", ",", "scheduler", ",", "train_num", ",", "train_file", ",", "args", ",", "logger", ")", "\n", "train_loss", ".", "append", "(", "avg_loss", ")", "\n", "logger", ".", "info", "(", "'Epoch {} AvgLoss {}'", ".", "format", "(", "ep", ",", "avg_loss", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'Evaluating the model for epoch {}'", ".", "format", "(", "ep", ")", ")", "\n", "eval_metrics", ",", "fpr", ",", "tpr", ",", "precision", ",", "recall", "=", "evaluate_batch", "(", "model", ",", "valid_num", ",", "args", ".", "batch_eval", ",", "valid_file", ",", "\n", "args", ".", "device", ",", "args", ".", "is_fc", ",", "'valid'", ",", "logger", ")", "\n", "valid_loss", ".", "append", "(", "eval_metrics", "[", "'loss'", "]", ")", "\n", "logger", ".", "info", "(", "'Valid Loss - {}'", ".", "format", "(", "eval_metrics", "[", "'loss'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid Acc - {}'", ".", "format", "(", "eval_metrics", "[", "'acc'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid Precision - {}'", ".", "format", "(", "eval_metrics", "[", "'precision'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid Recall - {}'", ".", "format", "(", "eval_metrics", "[", "'recall'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid F1 - {}'", ".", "format", "(", "eval_metrics", "[", "'f1'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid AUCROC - {}'", ".", "format", "(", "eval_metrics", "[", "'auc_roc'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid AUCPRC - {}'", ".", "format", "(", "eval_metrics", "[", "'auc_prc'", "]", ")", ")", "\n", "valid_sum", "=", "eval_metrics", "[", "'auc_roc'", "]", "+", "eval_metrics", "[", "'auc_prc'", "]", "+", "eval_metrics", "[", "'f1'", "]", "\n", "if", "valid_sum", ">", "max_sum", ":", "\n", "                ", "max_acc", "=", "eval_metrics", "[", "'acc'", "]", "\n", "max_p", "=", "eval_metrics", "[", "'precision'", "]", "\n", "max_r", "=", "eval_metrics", "[", "'recall'", "]", "\n", "max_f", "=", "eval_metrics", "[", "'f1'", "]", "\n", "max_roc", "=", "eval_metrics", "[", "'auc_roc'", "]", "\n", "max_prc", "=", "eval_metrics", "[", "'auc_prc'", "]", "\n", "max_sum", "=", "valid_sum", "\n", "max_epoch", "=", "ep", "\n", "FALSE", "=", "{", "'FP'", ":", "eval_metrics", "[", "'fp'", "]", ",", "'FN'", ":", "eval_metrics", "[", "'fn'", "]", "}", "\n", "ROC", "=", "{", "'FPR'", ":", "fpr", ",", "'TPR'", ":", "tpr", "}", "\n", "PRC", "=", "{", "'PRECISION'", ":", "precision", ",", "'RECALL'", ":", "recall", "}", "\n", "# torch.save(model, os.path.join(args.model_dir, 'model.pth'))", "\n", "if", "max_sum", ">", "best_sum", ":", "\n", "                    ", "best_sum", "=", "max_sum", "\n", "is_best", "=", "True", "\n", "ts", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H%M%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "ts", "+", "'_model.bin'", ")", ")", "\n", "\n", "", "", "random", ".", "shuffle", "(", "train_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Max Acc - {}'", ".", "format", "(", "max_acc", ")", ")", "\n", "logger", ".", "info", "(", "'Max Precision - {}'", ".", "format", "(", "max_p", ")", ")", "\n", "logger", ".", "info", "(", "'Max Recall - {}'", ".", "format", "(", "max_r", ")", ")", "\n", "logger", ".", "info", "(", "'Max F1 - {}'", ".", "format", "(", "max_f", ")", ")", "\n", "logger", ".", "info", "(", "'Max ROC - {}'", ".", "format", "(", "max_roc", ")", ")", "\n", "logger", ".", "info", "(", "'Max PRC - {}'", ".", "format", "(", "max_prc", ")", ")", "\n", "logger", ".", "info", "(", "'Max Epoch - {}'", ".", "format", "(", "max_epoch", ")", ")", "\n", "logger", ".", "info", "(", "'Max Sum - {}'", ".", "format", "(", "max_sum", ")", ")", "\n", "\n", "if", "is_best", ":", "\n", "            ", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'FALSE_valid.json'", ")", ",", "FALSE", ")", "\n", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'ROC_valid.json'", ")", ",", "ROC", ")", "\n", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'PRC_valid.json'", ")", ",", "PRC", ")", "\n", "save_loss", "(", "train_loss", ",", "valid_loss", ",", "args", ".", "result_dir", ")", "\n", "draw_curve", "(", "ROC", "[", "'FPR'", "]", ",", "ROC", "[", "'TPR'", "]", ",", "PRC", "[", "'PRECISION'", "]", ",", "PRC", "[", "'RECALL'", "]", ",", "args", ".", "pics_dir", ")", "\n", "\n", "", "records", "[", "i", "-", "1", "]", "=", "[", "max_acc", ",", "max_p", ",", "max_r", ",", "max_f", ",", "max_roc", ",", "max_prc", ",", "max_epoch", "]", "\n", "\n", "", "save_metrics", "(", "records", ",", "args", ".", "result_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_main.evaluate": [[308, 366], ["logging.getLogger", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "logging.getLogger.info", "model.load_state_dict", "utils.torch_util.evaluate_batch", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "torch_main.dump_json", "torch_main.dump_json", "torch_main.dump_json", "utils.torch_util.draw_curve", "open", "pickle.load", "open", "pickle.load", "open", "ujson.load", "open", "ujson.load", "open", "ujson.load", "open", "pickle.load", "torch.load", "torch.load", "utils.torch_util.draw_att", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "getattr"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.evaluate_batch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.draw_curve", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.draw_att"], ["", "def", "evaluate", "(", "args", ",", "file_paths", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'Causality'", ")", "\n", "logger", ".", "info", "(", "'Loading valid file...'", ")", "\n", "with", "open", "(", "file_paths", ".", "valid_record_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "valid_file", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading test file...'", ")", "\n", "with", "open", "(", "file_paths", ".", "test_record_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "test_file", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading valid meta...'", ")", "\n", "with", "open", "(", "file_paths", ".", "valid_meta", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "valid_meta", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading test meta...'", ")", "\n", "with", "open", "(", "file_paths", ".", "test_meta", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "test_meta", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading id to token file...'", ")", "\n", "with", "open", "(", "file_paths", ".", "id2token_file", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "id2token_file", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading token embeddings...'", ")", "\n", "with", "open", "(", "file_paths", ".", "token_emb_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "token_embeddings", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "valid_num", "=", "valid_meta", "[", "'total'", "]", "\n", "test_num", "=", "test_meta", "[", "'total'", "]", "\n", "\n", "logger", ".", "info", "(", "'Loading shape meta...'", ")", "\n", "logger", ".", "info", "(", "'Num valid data {} test data {}'", ".", "format", "(", "valid_num", ",", "test_num", ")", ")", "\n", "\n", "args", ".", "dropout", "=", "{", "'emb'", ":", "args", ".", "emb_dropout", ",", "'layer'", ":", "args", ".", "layer_dropout", "}", "\n", "model", "=", "getattr", "(", "models", ",", "args", ".", "model", ")", "(", "token_embeddings", ",", "args", ",", "logger", ")", ".", "to", "(", "device", "=", "args", ".", "device", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'2019-09-03-173141_model.bin'", ")", ")", ")", "\n", "\n", "eval_metrics", ",", "fpr", ",", "tpr", ",", "precision", ",", "recall", "=", "evaluate_batch", "(", "model", ",", "test_num", ",", "args", ".", "batch_eval", ",", "test_file", ",", "\n", "args", ".", "device", ",", "args", ".", "is_fc", ",", "'eval'", ",", "logger", ")", "\n", "logger", ".", "info", "(", "'Eval Loss - {}'", ".", "format", "(", "eval_metrics", "[", "'loss'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Eval Acc - {}'", ".", "format", "(", "eval_metrics", "[", "'acc'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Eval Precision - {}'", ".", "format", "(", "eval_metrics", "[", "'precision'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Eval Recall - {}'", ".", "format", "(", "eval_metrics", "[", "'recall'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Eval F1 - {}'", ".", "format", "(", "eval_metrics", "[", "'f1'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Eval AUCROC - {}'", ".", "format", "(", "eval_metrics", "[", "'auc_roc'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Eval AUCPRC - {}'", ".", "format", "(", "eval_metrics", "[", "'auc_prc'", "]", ")", ")", "\n", "\n", "if", "args", ".", "model", "==", "'MCDN'", "or", "args", ".", "model", "==", "'TB'", ":", "\n", "        ", "draw_att", "(", "model", ",", "test_num", ",", "args", ".", "batch_eval", ",", "test_file", ",", "args", ".", "device", ",", "id2token_file", ",", "\n", "args", ".", "pics_dir", ",", "args", ".", "n_block", ",", "args", ".", "n_head", ",", "logger", ")", "\n", "\n", "", "FALSE", "=", "{", "'FP'", ":", "eval_metrics", "[", "'fp'", "]", ",", "'FN'", ":", "eval_metrics", "[", "'fn'", "]", "}", "\n", "ROC", "=", "{", "'FPR'", ":", "fpr", ",", "'TPR'", ":", "tpr", "}", "\n", "PRC", "=", "{", "'PRECISION'", ":", "precision", ",", "'RECALL'", ":", "recall", "}", "\n", "\n", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'FALSE_transfer.json'", ")", ",", "FALSE", ")", "\n", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'ROC_transfer.json'", ")", ",", "ROC", ")", "\n", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'PRC_transfer.json'", ")", ",", "PRC", ")", "\n", "draw_curve", "(", "ROC", "[", "'FPR'", "]", ",", "ROC", "[", "'TPR'", "]", ",", "PRC", "[", "'PRECISION'", "]", ",", "PRC", "[", "'RECALL'", "]", ",", "args", ".", "pics_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_main.case": [[368, 396], ["logging.getLogger", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "torch_main.load_json", "logging.getLogger.info", "torch_main.load_json", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "logging.getLogger.info", "model.load_state_dict", "utils.torch_util.case_batch", "print", "open", "pickle.load", "open", "pickle.load", "torch.load", "torch.load", "utils.torch_util.draw_att", "os.path.join", "getattr"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.load_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.load_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.case_batch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.draw_att"], ["", "def", "case", "(", "args", ",", "file_path", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'Causality'", ")", "\n", "logger", ".", "info", "(", "'Loading test file...'", ")", "\n", "with", "open", "(", "file_path", ".", "test_record_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "test_file", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading test meta...'", ")", "\n", "test_meta", "=", "load_json", "(", "file_path", ".", "test_meta", ")", "\n", "logger", ".", "info", "(", "'Loading id to token file...'", ")", "\n", "id2token_file", "=", "load_json", "(", "file_path", ".", "id2token_file", ")", "\n", "logger", ".", "info", "(", "'Loading token embeddings...'", ")", "\n", "with", "open", "(", "file_path", ".", "token_emb_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "token_embeddings", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "test_num", "=", "test_meta", "[", "'total'", "]", "\n", "logger", ".", "info", "(", "'Loading shape meta...'", ")", "\n", "logger", ".", "info", "(", "'Num test data {}'", ".", "format", "(", "test_num", ")", ")", "\n", "\n", "args", ".", "dropout", "=", "{", "'emb'", ":", "args", ".", "emb_dropout", ",", "'layer'", ":", "args", ".", "layer_dropout", "}", "\n", "model", "=", "getattr", "(", "models", ",", "args", ".", "model", ")", "(", "token_embeddings", ",", "args", ",", "logger", ")", ".", "to", "(", "device", "=", "args", ".", "device", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'2019-09-03-164417_model.bin'", ")", ")", ")", "\n", "\n", "pred_scores", "=", "case_batch", "(", "model", ",", "test_num", ",", "args", ".", "batch_eval", ",", "test_file", ",", "args", ".", "device", ")", "\n", "print", "(", "pred_scores", ")", "\n", "\n", "if", "args", ".", "model", "==", "'MCDN'", "or", "args", ".", "model", "==", "'TB'", ":", "\n", "        ", "draw_att", "(", "model", ",", "test_num", ",", "args", ".", "batch_eval", ",", "test_file", ",", "args", ".", "device", ",", "id2token_file", ",", "\n", "args", ".", "pics_dir", ",", "args", ".", "n_block", ",", "args", ".", "n_head", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_main.dump_json": [[398, 402], ["f.close", "open", "f.write", "ujson.dumps"], "function", ["None"], ["", "", "def", "dump_json", "(", "file_path", ",", "obj", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "obj", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_main.load_json": [[404, 409], ["f.close", "open", "ujson.load"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "def", "load_json", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_main.run": [[411, 495], ["torch_main.parse_args", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.getLogger.info", "torch.manual_seed", "torch.manual_seed", "logging.getLogger.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "FilePaths", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "torch.device", "str", "preprocess.torch_preprocess.run_prepare", "torch_main.train", "torch_main.evaluate", "torch_main.case", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.run.parse_args", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNNType.str", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.run_prepare", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.evaluate", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.case"], ["", "def", "run", "(", ")", ":", "\n", "    ", "\"\"\"\n    Prepares and runs the whole system.\n    \"\"\"", "\n", "args", "=", "parse_args", "(", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'Causality'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "# \u662f\u5426\u5b58\u50a8\u65e5\u5fd7", "\n", "if", "args", ".", "log_path", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "args", ".", "log_path", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "", "else", ":", "\n", "        ", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "", "logger", ".", "info", "(", "'Running with args : {}'", ".", "format", "(", "args", ")", ")", "\n", "os", ".", "environ", "[", "'CUDA_DEVICE_ORDER'", "]", "=", "'PCI_BUS_ID'", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "args", ".", "device", "=", "None", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "args", ".", "disable_cuda", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "logger", ".", "info", "(", "'Preparing the directories...'", ")", "\n", "args", ".", "processed_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "args", ".", "task", ",", "str", "(", "args", ".", "max_len", "[", "'full'", "]", ")", ")", "\n", "args", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "model_dir", ")", "\n", "args", ".", "result_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "result_dir", ")", "\n", "args", ".", "pics_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "pics_dir", ")", "\n", "args", ".", "summary_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "summary_dir", ")", "\n", "for", "dir_path", "in", "[", "args", ".", "raw_dir", ",", "args", ".", "processed_dir", ",", "args", ".", "model_dir", ",", "args", ".", "result_dir", ",", "args", ".", "pics_dir", ",", "\n", "args", ".", "summary_dir", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "\n", "", "", "class", "FilePaths", "(", "object", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "w2v_type", ")", ":", "\n", "# \u8fd0\u884c\u8bb0\u5f55\u6587\u4ef6", "\n", "            ", "self", ".", "train_record_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train.pkl'", ")", "\n", "self", ".", "valid_record_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid.pkl'", ")", "\n", "self", ".", "test_record_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test.pkl'", ")", "\n", "self", ".", "transfer_record_file1", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'transfer1.pkl'", ")", "\n", "self", ".", "transfer_record_file2", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'transfer2.pkl'", ")", "\n", "# \u8ba1\u6570\u6587\u4ef6", "\n", "self", ".", "train_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train_meta.json'", ")", "\n", "self", ".", "valid_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid_meta.json'", ")", "\n", "self", ".", "test_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test_meta.json'", ")", "\n", "self", ".", "transfer_meta1", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'transfer_meta1.json'", ")", "\n", "self", ".", "transfer_meta2", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'transfer_meta2.json'", ")", "\n", "self", ".", "shape_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'shape_meta.json'", ")", "\n", "\n", "self", ".", "train_annotation", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train_annotations.txt'", ")", "\n", "self", ".", "valid_annotation", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid_annotations.txt'", ")", "\n", "self", ".", "test_annotation", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test_annotations.txt'", ")", "\n", "\n", "self", ".", "corpus_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'corpus.txt'", ")", "\n", "self", ".", "token_emb_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'token_emb.pkl'", ")", "\n", "self", ".", "token2id_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'token2id.json'", ")", "\n", "self", ".", "id2token_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'id2token.json'", ")", "\n", "\n", "if", "w2v_type", "==", "'wiki'", ":", "\n", "                ", "self", ".", "w2v_file", "=", "'./data/processed_data/wiki.en.pkl'", "\n", "", "elif", "w2v_type", "==", "'google'", ":", "\n", "                ", "self", ".", "w2v_file", "=", "'./data/processed_data/google.news.pkl'", "\n", "", "elif", "w2v_type", "==", "'glove6'", ":", "\n", "                ", "self", ".", "w2v_file", "=", "'./data/processed_data/glove.6B.pkl'", "\n", "", "elif", "w2v_type", "==", "'glove840'", ":", "\n", "                ", "self", ".", "w2v_file", "=", "'./data/processed_data/glove.840B.pkl'", "\n", "", "elif", "w2v_type", "==", "'fastText'", ":", "\n", "                ", "self", ".", "w2v_file", "=", "'./data/processed_data/fastText.pkl'", "\n", "\n", "", "", "", "file_paths", "=", "FilePaths", "(", "args", ".", "w2v_type", ")", "\n", "if", "args", ".", "prepare", ":", "\n", "        ", "run_prepare", "(", "args", ")", "\n", "", "if", "args", ".", "train", ":", "\n", "        ", "train", "(", "args", ",", "file_paths", ")", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "evaluate", "(", "args", ",", "file_paths", ")", "\n", "", "if", "args", ".", "case", ":", "\n", "        ", "case", "(", "args", ",", "file_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.ulmfit_main.parse_args": [[13, 125], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.run.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parses command line arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Causality'", ")", "\n", "parser", ".", "add_argument", "(", "'--prepare'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'create the directories, prepare the vocabulary and embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--build'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to build word dict and embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--train'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'train the model'", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'evaluate the model on dev set'", ")", "\n", "parser", ".", "add_argument", "(", "'--predict'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'predict the answers for test set with trained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'specify gpu device'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "23333", ",", "\n", "help", "=", "'random seed (default: 23333)'", ")", "\n", "\n", "train_settings", "=", "parser", ".", "add_argument_group", "(", "'train settings'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--disable_cuda'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Disable CUDA'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--clip'", ",", "type", "=", "float", ",", "default", "=", "0.35", ",", "\n", "help", "=", "'gradient clip, -1 means no clip (default: 0.35)'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--emb_dropout'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'dropout keep rate'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--layer_dropout'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'dropout keep rate'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--batch_train'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'train batch size'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--batch_eval'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'dev batch size'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'train epochs'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--optim'", ",", "default", "=", "'Adam'", ",", "\n", "help", "=", "'optimizer type'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--patience'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'num of epochs for train patients'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--period'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'period to save batch loss'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--num_threads'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'Number of threads in input pipeline'", ")", "\n", "\n", "model_settings", "=", "parser", ".", "add_argument_group", "(", "'model settings'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--max_len'", ",", "type", "=", "dict", ",", "default", "=", "{", "'full'", ":", "200", ",", "'pre'", ":", "100", ",", "'alt'", ":", "10", ",", "'cur'", ":", "200", "}", ",", "\n", "help", "=", "'max length of sequence'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_emb'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'size of the embeddings'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_hidden'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'size of LSTM hidden units'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_layer'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'num of layers'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_fc'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use focal loss'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_atten'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use self attention'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_gated'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use gated conv'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_block'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'attention block size (default: 2)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_head'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'attention head size (default: 2)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_pos'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use position embedding'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_sinusoid'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'whether to use sinusoid position embedding'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_ffn'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'whether to use point-wise ffn'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_kernel'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'kernel size (default: 3)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_kernels'", ",", "type", "=", "int", ",", "default", "=", "[", "2", ",", "3", ",", "4", "]", ",", "\n", "help", "=", "'kernels size (default: 2, 3, 4)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_level'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "\n", "help", "=", "'# of levels (default: 10)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_filter'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'number of hidden units per layer (default: 256)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_class'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'class size (default: 2)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--kmax_pooling'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'top-K max pooling'", ")", "\n", "\n", "path_settings", "=", "parser", ".", "add_argument_group", "(", "'path settings'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'bootstrapped'", ",", "\n", "help", "=", "'the task name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'ULMFIT'", ",", "\n", "help", "=", "'the model name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--train_file'", ",", "default", "=", "'altlex_train_bootstrapped.tsv'", ",", "\n", "help", "=", "'the train file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--valid_file'", ",", "default", "=", "'altlex_dev.tsv'", ",", "\n", "help", "=", "'the valid file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--test_file'", ",", "default", "=", "'altlex_gold.tsv'", ",", "\n", "help", "=", "'the test file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--raw_dir'", ",", "default", "=", "'data/raw_data/'", ",", "\n", "help", "=", "'the dir to store raw data'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--processed_dir'", ",", "default", "=", "'data/processed_data/fastai'", ",", "\n", "help", "=", "'the dir to store prepared data'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--outputs_dir'", ",", "default", "=", "'outputs/'", ",", "\n", "help", "=", "'the dir for outputs'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--model_dir'", ",", "default", "=", "'models/'", ",", "\n", "help", "=", "'the dir to store models'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--result_dir'", ",", "default", "=", "'results/'", ",", "\n", "help", "=", "'the dir to output the results'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--summary_dir'", ",", "default", "=", "'summary/'", ",", "\n", "help", "=", "'the dir to write tensorboard summary'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--log_path'", ",", "\n", "help", "=", "'path of the log file. If not set, logs are printed to console'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.ulmfit_main.train_one_epoch": [[127, 166], ["model.train", "torch.from_numpy().to", "enumerate", "np.mean", "range", "utils.torch_util.get_batch", "optimizer.zero_grad", "model", "torch.nn.CrossEntropyLoss.", "criterion.backward", "optimizer.step", "criterion.item", "train_loss.append", "torch.from_numpy", "utils.torch_util.FocalLoss", "torch.nn.CrossEntropyLoss", "torch.nn.utils.clip_grad_norm_", "logger.info", "criterion.item", "np.array", "model.parameters"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.get_batch"], ["", "def", "train_one_epoch", "(", "model", ",", "optimizer", ",", "train_num", ",", "train_file", ",", "args", ",", "logger", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "[", "]", "\n", "n_batch_loss", "=", "0", "\n", "weight", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0.2", ",", "0.8", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "range", "(", "0", ",", "train_num", ",", "args", ".", "batch_train", ")", ")", ":", "\n", "        ", "start_idx", "=", "batch", "\n", "end_idx", "=", "start_idx", "+", "args", ".", "batch_train", "\n", "# sentences, cau_labels, seq_lens = get_batch(train_file[start_idx:end_idx], args.device)", "\n", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "cau_labels", ",", "seq_lens", ",", "_", "=", "get_batch", "(", "train_file", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "args", ".", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "model", "(", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "seq_lens", ")", "\n", "# outputs = model(sentences)", "\n", "# loss = compute_loss(logits=outputs, target=labels, length=seq_lens)", "\n", "if", "args", ".", "is_fc", ":", "\n", "            ", "criterion", "=", "FocalLoss", "(", "gamma", "=", "2", ",", "alpha", "=", "0.75", ")", "\n", "", "else", ":", "\n", "            ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "weight", ")", "\n", "", "loss", "=", "criterion", "(", "outputs", ",", "cau_labels", ")", "\n", "# params = model.state_dict()", "\n", "# l2_reg = torch.autograd.Variable(torch.FloatTensor(1), requires_grad=True).cuda()", "\n", "# l2_reg = l2_reg + params['linear.weight'].norm(2) + params['linear.bias'].norm(2)", "\n", "# loss += l2_reg * args.weight_decay", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "clip", ">", "0", ":", "\n", "# \u68af\u5ea6\u88c1\u526a\uff0c\u8f93\u5165\u662f(NN\u53c2\u6570\uff0c\u6700\u5927\u68af\u5ea6\u8303\u6570\uff0c\u8303\u6570\u7c7b\u578b=2)\uff0c\u4e00\u822c\u9ed8\u8ba4\u4e3aL2\u8303\u6570", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "n_batch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "bidx", "=", "batch_idx", "+", "1", "\n", "if", "bidx", "%", "args", ".", "period", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'AvgLoss batch [{} {}] - {}'", ".", "format", "(", "bidx", "-", "args", ".", "period", "+", "1", ",", "bidx", ",", "n_batch_loss", "/", "args", ".", "period", ")", ")", "\n", "n_batch_loss", "=", "0", "\n", "", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "avg_train_loss", "=", "np", ".", "mean", "(", "train_loss", ")", "\n", "return", "avg_train_loss", "\n", "# avg_train_acc = np.mean(train_acc)", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.ulmfit_main.train": [[174, 233], ["logging.getLogger", "logging.getLogger.info", "pd.read_csv", "logging.getLogger.info", "pd.read_csv", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "logging.getLogger.info", "TextLMDataBunch.from_df", "TextClasDataBunch.from_df", "language_model_learner", "print", "text_classifier_learner.unfreeze", "text_classifier_learner.fit_one_cycle", "text_classifier_learner.save_encoder", "text_classifier_learner", "print", "text_classifier_learner.load_encoder", "text_classifier_learner.freeze_to", "text_classifier_learner.fit_one_cycle", "text_classifier_learner.get_preds", "np.argmax", "print", "np.argmax.numpy", "targets.numpy", "sklearn.metrics.accuracy_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "open", "ujson.load", "open", "ujson.load", "pd.crosstab"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "def", "train", "(", "args", ",", "file_paths", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'Causality'", ")", "\n", "logger", ".", "info", "(", "'Loading train file...'", ")", "\n", "df_trn", "=", "pd", ".", "read_csv", "(", "file_paths", ".", "train_file", ")", "\n", "logger", ".", "info", "(", "'Loading valid file...'", ")", "\n", "df_val", "=", "pd", ".", "read_csv", "(", "file_paths", ".", "test_file", ")", "\n", "logger", ".", "info", "(", "'Loading train meta...'", ")", "\n", "with", "open", "(", "file_paths", ".", "train_meta", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "train_meta", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading valid meta...'", ")", "\n", "with", "open", "(", "file_paths", ".", "test_meta", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "valid_meta", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "\n", "train_num", "=", "train_meta", "[", "'total'", "]", "\n", "valid_num", "=", "valid_meta", "[", "'total'", "]", "\n", "logger", ".", "info", "(", "'Num train data {} Num valid data {}'", ".", "format", "(", "train_num", ",", "valid_num", ")", ")", "\n", "\n", "dropout", "=", "{", "'emb'", ":", "args", ".", "emb_dropout", ",", "'layer'", ":", "args", ".", "layer_dropout", "}", "\n", "logger", ".", "info", "(", "'Initialize the model...'", ")", "\n", "max_acc", ",", "max_p", ",", "max_r", ",", "max_f", ",", "max_sum", ",", "max_epoch", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "FALSE", "=", "{", "}", "\n", "\n", "# Language model data", "\n", "data_lm", "=", "TextLMDataBunch", ".", "from_df", "(", "train_df", "=", "df_trn", ",", "valid_df", "=", "df_val", ",", "path", "=", "''", ")", "\n", "# Classifier model data", "\n", "data_clas", "=", "TextClasDataBunch", ".", "from_df", "(", "path", "=", "\"\"", ",", "train_df", "=", "df_trn", ",", "valid_df", "=", "df_val", ",", "vocab", "=", "data_lm", ".", "train_ds", ".", "vocab", ",", "\n", "bs", "=", "32", ")", "\n", "\n", "learn", "=", "language_model_learner", "(", "data_lm", ",", "AWD_LSTM", ",", "drop_mult", "=", "0.5", ")", "\n", "print", "(", "learn", ".", "model", ")", "\n", "# train the learner object with learning rate = 1e-2", "\n", "learn", ".", "unfreeze", "(", ")", "\n", "learn", ".", "fit_one_cycle", "(", "4", ",", "1e-2", ")", "\n", "# save encoder", "\n", "learn", ".", "save_encoder", "(", "'ft_enc'", ")", "\n", "\n", "# use the data_clas object we created earlier to build a classifier with our fine-tuned encoder", "\n", "learn", "=", "text_classifier_learner", "(", "data_clas", ",", "AWD_LSTM", ",", "drop_mult", "=", "0.5", ")", "\n", "print", "(", "learn", ".", "model", ")", "\n", "learn", ".", "load_encoder", "(", "'ft_enc'", ")", "\n", "learn", ".", "freeze_to", "(", "-", "2", ")", "\n", "# learn.unfreeze()", "\n", "learn", ".", "fit_one_cycle", "(", "4", ",", "1e-2", ")", "\n", "# get predictions", "\n", "preds", ",", "targets", "=", "learn", ".", "get_preds", "(", ")", "\n", "predictions", "=", "np", ".", "argmax", "(", "preds", ",", "axis", "=", "1", ")", "\n", "print", "(", "pd", ".", "crosstab", "(", "predictions", ",", "targets", ")", ")", "\n", "pred", "=", "predictions", ".", "numpy", "(", ")", "\n", "targ", "=", "targets", ".", "numpy", "(", ")", "\n", "acc", "=", "accuracy_score", "(", "targ", ",", "pred", ")", "\n", "precision", "=", "precision_score", "(", "targ", ",", "pred", ")", "\n", "recall", "=", "recall_score", "(", "targ", ",", "pred", ")", "\n", "f1", "=", "f1_score", "(", "targ", ",", "pred", ")", "\n", "logger", ".", "info", "(", "'Valid Acc - {}'", ".", "format", "(", "acc", ")", ")", "\n", "logger", ".", "info", "(", "'Valid Precision - {}'", ".", "format", "(", "precision", ")", ")", "\n", "logger", ".", "info", "(", "'Valid Recall - {}'", ".", "format", "(", "recall", ")", ")", "\n", "logger", ".", "info", "(", "'Valid F1 - {}'", ".", "format", "(", "f1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.ulmfit_main.run": [[270, 337], ["ulmfit_main.parse_args", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.getLogger.info", "torch.manual_seed", "logging.getLogger.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "FilePaths", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "torch.cuda.is_available", "torch.device", "torch.device", "preprocess.ulmfit_preprocess.run_prepare", "ulmfit_main.train", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.run.parse_args", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.run_prepare", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train"], ["", "def", "run", "(", ")", ":", "\n", "    ", "\"\"\"\n    Prepares and runs the whole system.\n    \"\"\"", "\n", "args", "=", "parse_args", "(", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'Causality'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "# \u662f\u5426\u5b58\u50a8\u65e5\u5fd7", "\n", "if", "args", ".", "log_path", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "args", ".", "log_path", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "", "else", ":", "\n", "        ", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "", "logger", ".", "info", "(", "'Running with args : {}'", ".", "format", "(", "args", ")", ")", "\n", "os", ".", "environ", "[", "'CUDA_DEVICE_ORDER'", "]", "=", "'PCI_BUS_ID'", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "args", ".", "device", "=", "None", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "args", ".", "disable_cuda", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "logger", ".", "info", "(", "'Preparing the directories...'", ")", "\n", "args", ".", "processed_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "args", ".", "task", ")", "\n", "args", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "model_dir", ")", "\n", "args", ".", "result_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "result_dir", ")", "\n", "args", ".", "summary_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "summary_dir", ")", "\n", "for", "dir_path", "in", "[", "args", ".", "raw_dir", ",", "args", ".", "processed_dir", ",", "args", ".", "model_dir", ",", "args", ".", "result_dir", ",", "args", ".", "summary_dir", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "\n", "", "", "class", "FilePaths", "(", "object", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "# \u8fd0\u884c\u8bb0\u5f55\u6587\u4ef6", "\n", "            ", "self", ".", "train_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train_boot.csv'", ")", "\n", "self", ".", "valid_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid.csv'", ")", "\n", "self", ".", "test_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test.csv'", ")", "\n", "# \u8ba1\u6570\u6587\u4ef6", "\n", "self", ".", "train_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train_meta.json'", ")", "\n", "self", ".", "valid_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid_meta.json'", ")", "\n", "self", ".", "test_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test_meta.json'", ")", "\n", "self", ".", "shape_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'shape_meta.json'", ")", "\n", "\n", "self", ".", "train_annotation", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train_annotations.txt'", ")", "\n", "self", ".", "valid_annotation", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid_annotations.txt'", ")", "\n", "self", ".", "test_annotation", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test_annotations.txt'", ")", "\n", "\n", "self", ".", "corpus_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'corpus.txt'", ")", "\n", "self", ".", "w2v_file", "=", "'./data/processed_data/wiki.en.pkl'", "\n", "self", ".", "token_emb_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'token_emb.pkl'", ")", "\n", "self", ".", "token2id_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'token2id.json'", ")", "\n", "\n", "", "", "file_paths", "=", "FilePaths", "(", ")", "\n", "if", "args", ".", "prepare", ":", "\n", "# max_seq_len, index_dim = run_prepare(args, file_paths)", "\n", "        ", "run_prepare", "(", "args", ",", "file_paths", ")", "\n", "# with open(file_paths.shape_meta, 'wb') as fh:", "\n", "#     pkl.dump({'max_len': max_seq_len, 'dim': index_dim}, fh)", "\n", "# fh.close()", "\n", "", "if", "args", ".", "train", ":", "\n", "        ", "train", "(", "args", ",", "file_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.transfer_main.parse_args": [[17, 133], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.run.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parses command line arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Causality'", ")", "\n", "parser", ".", "add_argument", "(", "'--prepare'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'create the directories, prepare the vocabulary and embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--build'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to build word dict and embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--train'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'train the model'", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'evaluate the model on dev set'", ")", "\n", "parser", ".", "add_argument", "(", "'--predict'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'predict the answers for test set with trained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'specify gpu device'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "23333", ",", "\n", "help", "=", "'random seed (default: 23333)'", ")", "\n", "\n", "train_settings", "=", "parser", ".", "add_argument_group", "(", "'train settings'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--disable_cuda'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Disable CUDA'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--clip'", ",", "type", "=", "float", ",", "default", "=", "0.35", ",", "\n", "help", "=", "'gradient clip, -1 means no clip (default: 0.35)'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--emb_dropout'", ",", "type", "=", "float", ",", "default", "=", "0.3", ",", "\n", "help", "=", "'dropout keep rate'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--layer_dropout'", ",", "type", "=", "float", ",", "default", "=", "0.3", ",", "\n", "help", "=", "'dropout keep rate'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--batch_train'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'train batch size'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--batch_eval'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'dev batch size'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'train epochs'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--optim'", ",", "default", "=", "'Adam'", ",", "\n", "help", "=", "'optimizer type'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--patience'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'num of epochs for train patients'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--period'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'period to save batch loss'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--num_threads'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'Number of threads in input pipeline'", ")", "\n", "\n", "model_settings", "=", "parser", ".", "add_argument_group", "(", "'model settings'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--max_len'", ",", "type", "=", "dict", ",", "default", "=", "{", "'full'", ":", "128", ",", "'pre'", ":", "64", ",", "'alt'", ":", "8", ",", "'cur'", ":", "64", "}", ",", "\n", "help", "=", "'max length of sequence'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--w2v_type'", ",", "type", "=", "str", ",", "default", "=", "'glove6'", ",", "\n", "help", "=", "'type of the embeddings'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_emb'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'size of the embeddings'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_hidden'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'size of LSTM hidden units'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_layer'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'num of layers'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_fc'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use focal loss'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_atten'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use self attention'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_gated'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use gated conv'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_block'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'attention block size (default: 2)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_head'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'attention head size (default: 2)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_pos'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to use position embedding'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_sinusoid'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'whether to use sinusoid position embedding'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--is_ffn'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'whether to use point-wise ffn'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_kernel'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'kernel size (default: 3)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_kernels'", ",", "type", "=", "int", ",", "default", "=", "[", "2", ",", "3", ",", "4", "]", ",", "\n", "help", "=", "'kernels size (default: 2, 3, 4)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_level'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "\n", "help", "=", "'# of levels (default: 10)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_filter'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'number of hidden units per layer (default: 256)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_class'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'class size (default: 2)'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--kmax_pooling'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'top-K max pooling'", ")", "\n", "\n", "path_settings", "=", "parser", ".", "add_argument_group", "(", "'path settings'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'transfer'", ",", "\n", "help", "=", "'the task name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'MCIN'", ",", "\n", "help", "=", "'the model name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--train_file'", ",", "default", "=", "'2010_train.json'", ",", "\n", "help", "=", "'the train file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--valid_file'", ",", "default", "=", "'2010_test.json'", ",", "\n", "help", "=", "'the valid file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--test_file'", ",", "default", "=", "'2010_test.json'", ",", "\n", "help", "=", "'the test file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--raw_dir'", ",", "default", "=", "'data/raw_data/'", ",", "\n", "help", "=", "'the dir to store raw data'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--processed_dir'", ",", "default", "=", "'data/processed_data/torch'", ",", "\n", "help", "=", "'the dir to store prepared data'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--outputs_dir'", ",", "default", "=", "'outputs/'", ",", "\n", "help", "=", "'the dir for outputs'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--model_dir'", ",", "default", "=", "'models/'", ",", "\n", "help", "=", "'the dir to store models'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--result_dir'", ",", "default", "=", "'results/'", ",", "\n", "help", "=", "'the dir to store the results'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--pics_dir'", ",", "default", "=", "'pics/'", ",", "\n", "help", "=", "'the dir to store the pictures'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--summary_dir'", ",", "default", "=", "'summary/'", ",", "\n", "help", "=", "'the dir to write tensorboard summary'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--log_path'", ",", "\n", "help", "=", "'path of the log file. If not set, logs are printed to console'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.transfer_main.train_one_epoch": [[135, 174], ["model.train", "enumerate", "numpy.mean", "range", "utils.torch_util.get_batch", "optimizer.zero_grad", "model", "torch.nn.CrossEntropyLoss.", "criterion.backward", "optimizer.step", "criterion.item", "train_loss.append", "utils.torch_util.FocalLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "logger.info", "criterion.item", "model.parameters"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.get_batch"], ["", "def", "train_one_epoch", "(", "model", ",", "optimizer", ",", "train_num", ",", "train_file", ",", "args", ",", "logger", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "[", "]", "\n", "n_batch_loss", "=", "0", "\n", "# weight = torch.from_numpy(np.array([0.5, 0.5], dtype=np.float32)).to(args.device)", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "range", "(", "0", ",", "train_num", ",", "args", ".", "batch_train", ")", ")", ":", "\n", "        ", "start_idx", "=", "batch", "\n", "end_idx", "=", "start_idx", "+", "args", ".", "batch_train", "\n", "# sentences, cau_labels, seq_lens = get_batch(train_file[start_idx:end_idx], args.device)", "\n", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "cau_labels", ",", "seq_lens", ",", "_", "=", "get_batch", "(", "train_file", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "args", ".", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "model", "(", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "seq_lens", ")", "\n", "# outputs = model(sentences)", "\n", "# loss = compute_loss(logits=outputs, target=labels, length=seq_lens)", "\n", "if", "args", ".", "is_fc", ":", "\n", "            ", "criterion", "=", "FocalLoss", "(", "gamma", "=", "2", ",", "alpha", "=", "0.75", ")", "\n", "", "else", ":", "\n", "            ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "loss", "=", "criterion", "(", "outputs", ",", "cau_labels", ")", "\n", "# params = model.state_dict()", "\n", "# l2_reg = torch.autograd.Variable(torch.FloatTensor(1), requires_grad=True).cuda()", "\n", "# l2_reg = l2_reg + params['linear.weight'].norm(2) + params['linear.bias'].norm(2)", "\n", "# loss += l2_reg * args.weight_decay", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "clip", ">", "0", ":", "\n", "# \u68af\u5ea6\u88c1\u526a\uff0c\u8f93\u5165\u662f(NN\u53c2\u6570\uff0c\u6700\u5927\u68af\u5ea6\u8303\u6570\uff0c\u8303\u6570\u7c7b\u578b=2)\uff0c\u4e00\u822c\u9ed8\u8ba4\u4e3aL2\u8303\u6570", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "n_batch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "bidx", "=", "batch_idx", "+", "1", "\n", "if", "bidx", "%", "args", ".", "period", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'AvgLoss batch [{} {}] - {}'", ".", "format", "(", "bidx", "-", "args", ".", "period", "+", "1", ",", "bidx", ",", "n_batch_loss", "/", "args", ".", "period", ")", ")", "\n", "n_batch_loss", "=", "0", "\n", "", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "avg_train_loss", "=", "np", ".", "mean", "(", "train_loss", ")", "\n", "return", "avg_train_loss", "\n", "# avg_train_acc = np.mean(train_acc)", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.transfer_main.train": [[182, 277], ["logging.getLogger", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "models.torch_MCDN.MCIN().to", "torch.lr_scheduler.ReduceLROnPlateau", "range", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "f.close", "f.close", "f.close", "utils.torch_util.draw_curve", "open", "pickle.load", "open", "pickle.load", "open", "ujson.load", "open", "ujson.load", "open", "pickle.load", "getattr", "MCIN().to.parameters", "logging.getLogger.info", "transfer_main.train_one_epoch", "logging.getLogger.info", "logging.getLogger.info", "utils.torch_util.evaluate_batch", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "max", "max", "max", "max", "optim.lr_scheduler.ReduceLROnPlateau.step", "random.shuffle", "open", "f.write", "open", "f.write", "open", "f.write", "models.torch_MCDN.MCIN", "torch.save", "torch.save", "os.path.join", "os.path.join", "os.path.join", "MCIN().to.state_dict", "os.path.join", "ujson.dumps", "ujson.dumps", "ujson.dumps"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.draw_curve", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train_one_epoch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.evaluate_batch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save"], ["", "def", "train", "(", "args", ",", "file_paths", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'2010'", ")", "\n", "logger", ".", "info", "(", "'Loading train file...'", ")", "\n", "with", "open", "(", "file_paths", ".", "train_record_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "train_file", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading valid file...'", ")", "\n", "with", "open", "(", "file_paths", ".", "valid_record_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "valid_file", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading train meta...'", ")", "\n", "with", "open", "(", "file_paths", ".", "train_meta", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "train_meta", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading valid meta...'", ")", "\n", "with", "open", "(", "file_paths", ".", "valid_meta", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "valid_meta", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading token embeddings...'", ")", "\n", "with", "open", "(", "file_paths", ".", "token_emb_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "token_embeddings", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "train_num", "=", "train_meta", "[", "'total'", "]", "\n", "valid_num", "=", "valid_meta", "[", "'total'", "]", "\n", "\n", "logger", ".", "info", "(", "'Loading shape meta...'", ")", "\n", "logger", ".", "info", "(", "'Num train data {} valid data {}'", ".", "format", "(", "train_num", ",", "valid_num", ")", ")", "\n", "\n", "dropout", "=", "{", "'emb'", ":", "args", ".", "emb_dropout", ",", "'layer'", ":", "args", ".", "layer_dropout", "}", "\n", "logger", ".", "info", "(", "'Initialize the model...'", ")", "\n", "\n", "model", "=", "MCIN", "(", "token_embeddings", ",", "args", ".", "max_len", ",", "args", ".", "n_class", ",", "args", ".", "n_hidden", ",", "args", ".", "n_layer", ",", "\n", "args", ".", "n_kernels", ",", "args", ".", "n_filter", ",", "args", ".", "n_block", ",", "args", ".", "n_head", ",", "args", ".", "is_sinusoid", ",", "args", ".", "is_ffn", ",", "\n", "dropout", ",", "logger", ")", ".", "to", "(", "device", "=", "args", ".", "device", ")", "\n", "# model = SCRN(token_embeddings, args.max_len, args.n_class, args.n_hidden, args.n_layer,", "\n", "#              args.n_kernels, args.n_filter, args.n_block, args.n_head, args.is_sinusoid, args.is_ffn,", "\n", "#              dropout, logger).to(device=args.device)", "\n", "# model = TB(token_embeddings, args.max_len, args.n_class, args.n_hidden, args.n_layer,", "\n", "#            args.n_kernels, args.n_filter, args.n_block, args.n_head, args.is_sinusoid, args.is_ffn,", "\n", "#            dropout, logger).to(device=args.device)", "\n", "lr", "=", "args", ".", "lr", "\n", "optimizer", "=", "getattr", "(", "optim", ",", "args", ".", "optim", ")", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "'max'", ",", "0.5", ",", "patience", "=", "args", ".", "patience", ",", "verbose", "=", "True", ")", "\n", "max_acc", ",", "max_p", ",", "max_r", ",", "max_f", ",", "max_sum", ",", "max_epoch", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "FALSE", "=", "{", "}", "\n", "ROC", "=", "{", "}", "\n", "PRC", "=", "{", "}", "\n", "for", "ep", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Training the model for epoch {}'", ".", "format", "(", "ep", ")", ")", "\n", "avg_loss", "=", "train_one_epoch", "(", "model", ",", "optimizer", ",", "train_num", ",", "train_file", ",", "args", ",", "logger", ")", "\n", "logger", ".", "info", "(", "'Epoch {} AvgLoss {}'", ".", "format", "(", "ep", ",", "avg_loss", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'Evaluating the model for epoch {}'", ".", "format", "(", "ep", ")", ")", "\n", "eval_metrics", ",", "fpr", ",", "tpr", ",", "precision", ",", "recall", "=", "evaluate_batch", "(", "model", ",", "valid_num", ",", "args", ".", "batch_eval", ",", "valid_file", ",", "\n", "args", ".", "device", ",", "args", ".", "is_fc", ",", "'valid'", ",", "logger", ")", "\n", "logger", ".", "info", "(", "'Valid Loss - {}'", ".", "format", "(", "eval_metrics", "[", "'loss'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid Acc - {}'", ".", "format", "(", "eval_metrics", "[", "'acc'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid Precision - {}'", ".", "format", "(", "eval_metrics", "[", "'precision'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid Recall - {}'", ".", "format", "(", "eval_metrics", "[", "'recall'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid F1 - {}'", ".", "format", "(", "eval_metrics", "[", "'f1'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid AUCROC - {}'", ".", "format", "(", "eval_metrics", "[", "'auc_roc'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid AUCPRC - {}'", ".", "format", "(", "eval_metrics", "[", "'auc_prc'", "]", ")", ")", "\n", "max_acc", "=", "max", "(", "(", "eval_metrics", "[", "'acc'", "]", ",", "max_acc", ")", ")", "\n", "max_p", "=", "max", "(", "eval_metrics", "[", "'precision'", "]", ",", "max_p", ")", "\n", "max_r", "=", "max", "(", "eval_metrics", "[", "'recall'", "]", ",", "max_r", ")", "\n", "max_f", "=", "max", "(", "eval_metrics", "[", "'f1'", "]", ",", "max_f", ")", "\n", "valid_sum", "=", "eval_metrics", "[", "'precision'", "]", "+", "eval_metrics", "[", "'recall'", "]", "+", "eval_metrics", "[", "'f1'", "]", "\n", "if", "valid_sum", ">", "max_sum", ":", "\n", "            ", "max_sum", "=", "valid_sum", "\n", "max_epoch", "=", "ep", "\n", "FALSE", "=", "{", "'FP'", ":", "eval_metrics", "[", "'fp'", "]", ",", "'FN'", ":", "eval_metrics", "[", "'fn'", "]", "}", "\n", "ROC", "=", "{", "'FPR'", ":", "fpr", ",", "'TPR'", ":", "tpr", "}", "\n", "PRC", "=", "{", "'PRECISION'", ":", "precision", ",", "'RECALL'", ":", "recall", "}", "\n", "# torch.save(model, os.path.join(args.model_dir, 'model.pth'))", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'model.bin'", ")", ")", "\n", "\n", "", "scheduler", ".", "step", "(", "metrics", "=", "eval_metrics", "[", "'f1'", "]", ")", "\n", "random", ".", "shuffle", "(", "train_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Max Acc - {}'", ".", "format", "(", "max_acc", ")", ")", "\n", "logger", ".", "info", "(", "'Max Precision - {}'", ".", "format", "(", "max_p", ")", ")", "\n", "logger", ".", "info", "(", "'Max Recall - {}'", ".", "format", "(", "max_r", ")", ")", "\n", "logger", ".", "info", "(", "'Max F1 - {}'", ".", "format", "(", "max_f", ")", ")", "\n", "logger", ".", "info", "(", "'Max Epoch - {}'", ".", "format", "(", "max_epoch", ")", ")", "\n", "logger", ".", "info", "(", "'Max Sum - {}'", ".", "format", "(", "max_sum", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'FALSE.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "FALSE", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'ROC.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "ROC", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'PRC.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "PRC", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "draw_curve", "(", "ROC", "[", "'FPR'", "]", ",", "ROC", "[", "'TPR'", "]", ",", "PRC", "[", "'PRECISION'", "]", ",", "PRC", "[", "'RECALL'", "]", ",", "args", ".", "pics_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.transfer_main.run": [[279, 353], ["transfer_main.parse_args", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.getLogger.info", "torch.manual_seed", "torch.manual_seed", "logging.getLogger.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "FilePaths", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "torch.device", "str", "preprocess.transfer_preprocess.run_prepare", "transfer_main.train", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.run.parse_args", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNNType.str", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.run_prepare", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train"], ["", "def", "run", "(", ")", ":", "\n", "    ", "\"\"\"\n    Prepares and runs the whole system.\n    \"\"\"", "\n", "args", "=", "parse_args", "(", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'2010'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "# \u662f\u5426\u5b58\u50a8\u65e5\u5fd7", "\n", "if", "args", ".", "log_path", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "args", ".", "log_path", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "", "else", ":", "\n", "        ", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "", "logger", ".", "info", "(", "'Running with args : {}'", ".", "format", "(", "args", ")", ")", "\n", "os", ".", "environ", "[", "'CUDA_DEVICE_ORDER'", "]", "=", "'PCI_BUS_ID'", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "args", ".", "device", "=", "None", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "args", ".", "disable_cuda", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "logger", ".", "info", "(", "'Preparing the directories...'", ")", "\n", "args", ".", "processed_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "args", ".", "task", ",", "str", "(", "args", ".", "max_len", "[", "'full'", "]", ")", ")", "\n", "args", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "model_dir", ")", "\n", "args", ".", "result_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "result_dir", ")", "\n", "args", ".", "pics_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "pics_dir", ")", "\n", "args", ".", "summary_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "summary_dir", ")", "\n", "for", "dir_path", "in", "[", "args", ".", "raw_dir", ",", "args", ".", "processed_dir", ",", "args", ".", "model_dir", ",", "args", ".", "result_dir", ",", "args", ".", "pics_dir", ",", "args", ".", "summary_dir", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "\n", "", "", "class", "FilePaths", "(", "object", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "w2v_type", ")", ":", "\n", "# \u8fd0\u884c\u8bb0\u5f55\u6587\u4ef6", "\n", "            ", "self", ".", "train_record_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train.pkl'", ")", "\n", "self", ".", "valid_record_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid.pkl'", ")", "\n", "self", ".", "test_record_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test.pkl'", ")", "\n", "\n", "# \u8ba1\u6570\u6587\u4ef6", "\n", "self", ".", "train_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train_meta.json'", ")", "\n", "self", ".", "valid_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid_meta.json'", ")", "\n", "self", ".", "test_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test_meta.json'", ")", "\n", "self", ".", "shape_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'shape_meta.json'", ")", "\n", "\n", "self", ".", "train_annotation", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train_annotations.txt'", ")", "\n", "self", ".", "valid_annotation", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid_annotations.txt'", ")", "\n", "self", ".", "test_annotation", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test_annotations.txt'", ")", "\n", "\n", "self", ".", "corpus_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'corpus.txt'", ")", "\n", "self", ".", "token_emb_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'token_emb.pkl'", ")", "\n", "self", ".", "token2id_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'token2id.json'", ")", "\n", "self", ".", "id2token_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'id2token.json'", ")", "\n", "\n", "if", "w2v_type", "==", "'wiki'", ":", "\n", "                ", "self", ".", "w2v_file", "=", "'./data/processed_data/wiki.en.pkl'", "\n", "", "elif", "w2v_type", "==", "'google'", ":", "\n", "                ", "self", ".", "w2v_file", "=", "'./data/processed_data/google.news.pkl'", "\n", "", "elif", "w2v_type", "==", "'glove6'", ":", "\n", "                ", "self", ".", "w2v_file", "=", "'./data/processed_data/glove.6B.pkl'", "\n", "", "elif", "w2v_type", "==", "'glove840'", ":", "\n", "                ", "self", ".", "w2v_file", "=", "'./data/processed_data/glove.840B.pkl'", "\n", "\n", "", "", "", "file_paths", "=", "FilePaths", "(", "args", ".", "w2v_type", ")", "\n", "if", "args", ".", "prepare", ":", "\n", "        ", "run_prepare", "(", "args", ",", "file_paths", ")", "\n", "", "if", "args", ".", "train", ":", "\n", "        ", "train", "(", "args", ",", "file_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.run.parse_args": [[16, 112], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.run.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parses command line arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Causality identification on AltLex'", ")", "\n", "parser", ".", "add_argument", "(", "'--prepare'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'create the directories, prepare the vocabulary and embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--build'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to build word dict and embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--train'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'train the model'", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'evaluate the model on dev set'", ")", "\n", "parser", ".", "add_argument", "(", "'--predict'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'predict the answers for test set with trained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'specify gpu device'", ")", "\n", "\n", "train_settings", "=", "parser", ".", "add_argument_group", "(", "'train settings'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--num_steps'", ",", "type", "=", "int", ",", "default", "=", "16000", ",", "\n", "help", "=", "'num of step'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--period'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "\n", "help", "=", "'period to save batch loss'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--checkpoint'", ",", "type", "=", "int", ",", "default", "=", "1600", ",", "\n", "help", "=", "'checkpoint for evaluation'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--eval_num_batches'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'num of batches for evaluation'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--optim'", ",", "default", "=", "'adam'", ",", "\n", "help", "=", "'optimizer type'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--dropout_keep_prob'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'dropout keep rate'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--global_norm'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'clip gradient norm'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--train_batch'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'train batch size'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--valid_batch'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'dev batch size'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'train epochs'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--patience'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'num of epochs for train patients'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--num_threads'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'Number of threads in input pipeline'", ")", "\n", "train_settings", ".", "add_argument", "(", "'--capacity'", ",", "type", "=", "int", ",", "default", "=", "150000", ",", "\n", "help", "=", "'Batch size of data set shuffle'", ")", "\n", "\n", "model_settings", "=", "parser", ".", "add_argument_group", "(", "'model settings'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--max_len'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'max sentence length'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_emb'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'size of the embeddings'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--filter_sizes'", ",", "type", "=", "list", ",", "default", "=", "[", "3", ",", "4", ",", "5", "]", ",", "\n", "help", "=", "'size of the filters'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--num_filters'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "\n", "help", "=", "'num of the filters'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_hidden'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'size of LSTM hidden units'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--n_layer'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'num of layers'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--sa_da'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'dim of self attentive da'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--sa_r'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'dim of self attentive r'", ")", "\n", "model_settings", ".", "add_argument", "(", "'--pos_weight'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'positive example weight'", ")", "\n", "\n", "path_settings", "=", "parser", ".", "add_argument_group", "(", "'path settings'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'training'", ",", "\n", "help", "=", "'the task name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'SASE'", ",", "\n", "help", "=", "'the model name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--raw_dir'", ",", "default", "=", "'data/raw_data'", ",", "\n", "help", "=", "'the dir to store raw data'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--train_file'", ",", "default", "=", "'altlex_train.tsv'", ",", "\n", "help", "=", "'the train file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--valid_file'", ",", "default", "=", "'altlex_gold.tsv'", ",", "\n", "help", "=", "'the valid file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--test_file'", ",", "default", "=", "'altlex_gold.tsv'", ",", "\n", "help", "=", "'the test file name'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--processed_dir'", ",", "default", "=", "'data/processed_data/tf'", ",", "\n", "help", "=", "'the dir to store processed data'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--outputs_dir'", ",", "default", "=", "'outputs/'", ",", "\n", "help", "=", "'the dir for outputs'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--model_dir'", ",", "default", "=", "'models/'", ",", "\n", "help", "=", "'the dir to store models'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--result_dir'", ",", "default", "=", "'results/'", ",", "\n", "help", "=", "'the dir to output the results'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--summary_dir'", ",", "default", "=", "'summary/'", ",", "\n", "help", "=", "'the dir to write tensorboard summary'", ")", "\n", "path_settings", ".", "add_argument", "(", "'--log_path'", ",", "\n", "help", "=", "'path of the log file. If not set, logs are printed to console'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.run.train": [[114, 211], ["logging.getLogger", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "utils.tf_util.get_record_parser", "utils.tf_util.get_batch_dataset", "utils.tf_util.get_dataset", "tensorflow.placeholder", "tensorflow.data.Iterator.from_string_handle", "utils.tf_util.get_batch_dataset.make_one_shot_iterator", "utils.tf_util.get_dataset.make_one_shot_iterator", "logging.getLogger.info", "models.SelfAttentiveSentenceEmbedding.SelfAttentive", "tensorflow.ConfigProto", "open", "pickle.load", "open", "ujson.load", "open", "ujson.load", "open", "ujson.load", "open", "ujson.load", "tensorflow.Session", "tensorflow.summary.FileWriter", "sess.run", "sess.run", "sess.run", "sess.run", "sess.run", "sess.run", "range", "logging.getLogger.info", "logging.getLogger.info", "tensorflow.global_variables_initializer", "train_dataset.make_one_shot_iterator.string_handle", "valid_dataset.make_one_shot_iterator.string_handle", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "sess.run", "sess.run", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.assign", "logging.getLogger.info", "tensorflow.Summary", "tf.summary.FileWriter.add_summary", "logging.getLogger.info", "sess.run", "utils.tf_util.evaluate_batch", "utils.tf_util.print_metrics", "sess.run", "utils.tf_util.evaluate_batch", "sess.run", "utils.tf_util.print_metrics", "tf.summary.FileWriter.flush", "sess.run", "tensorflow.constant", "tensorflow.assign", "tf.summary.FileWriter.add_summary", "tensorflow.assign", "tensorflow.assign", "tf.summary.FileWriter.add_summary", "logging.getLogger.info", "tensorflow.assign", "max", "max", "max", "max", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.Summary.Value"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_util.get_record_parser", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_util.get_batch_dataset", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_util.get_dataset", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.evaluate_batch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_util.print_metrics", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.evaluate_batch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_util.print_metrics", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run"], ["", "def", "train", "(", "args", ",", "file_paths", ",", "max_len", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'altlex'", ")", "\n", "logger", ".", "info", "(", "'Loading token embeddings...'", ")", "\n", "with", "open", "(", "file_paths", ".", "token_emb_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "token_embeddings", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading train eval file...'", ")", "\n", "with", "open", "(", "file_paths", ".", "train_eval_file", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "train_eval_file", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "with", "open", "(", "file_paths", ".", "test_eval_file", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "valid_eval_file", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "logger", ".", "info", "(", "'Loading train meta...'", ")", "\n", "with", "open", "(", "file_paths", ".", "train_meta", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "train_meta", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "logger", ".", "info", "(", "'Loading valid meta...'", ")", "\n", "with", "open", "(", "file_paths", ".", "test_meta", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "valid_meta", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "train_total", "=", "train_meta", "[", "'total'", "]", "\n", "valid_total", "=", "valid_meta", "[", "'total'", "]", "\n", "logger", ".", "info", "(", "'Num of train examples {} test examples {}'", ".", "format", "(", "train_total", ",", "valid_total", ")", ")", "\n", "\n", "parser", "=", "get_record_parser", "(", "max_len", ")", "\n", "train_dataset", "=", "get_batch_dataset", "(", "file_paths", ".", "train_record_file", ",", "parser", ",", "args", ")", "\n", "valid_dataset", "=", "get_dataset", "(", "file_paths", ".", "test_record_file", ",", "parser", ",", "args", ")", "\n", "handle", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "shape", "=", "[", "]", ")", "\n", "iterator", "=", "tf", ".", "data", ".", "Iterator", ".", "from_string_handle", "(", "handle", ",", "train_dataset", ".", "output_types", ",", "train_dataset", ".", "output_shapes", ")", "\n", "train_iterator", "=", "train_dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "valid_iterator", "=", "valid_dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "logger", ".", "info", "(", "'Initialize the model...'", ")", "\n", "# model = BasicBiLSTM(args, iterator, max_len, token_embeddings, trainable=True)", "\n", "model", "=", "SelfAttentive", "(", "args", ",", "iterator", ",", "token_embeddings", ",", "logger", ")", "\n", "sess_config", "=", "tf", ".", "ConfigProto", "(", "intra_op_parallelism_threads", "=", "8", ",", "\n", "inter_op_parallelism_threads", "=", "8", ",", "\n", "allow_soft_placement", "=", "True", ")", "\n", "sess_config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "max_acc", ",", "max_p", ",", "max_r", ",", "max_f", ",", "max_sum", ",", "max_epoch", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "f1_save", ",", "patience", "=", "0", ",", "0", "\n", "lr", "=", "args", ".", "lr", "\n", "with", "tf", ".", "Session", "(", "config", "=", "sess_config", ")", "as", "sess", ":", "\n", "        ", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "args", ".", "summary_dir", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "# saver = tf.train.Saver()", "\n", "train_handle", "=", "sess", ".", "run", "(", "train_iterator", ".", "string_handle", "(", ")", ")", "\n", "valid_handle", "=", "sess", ".", "run", "(", "valid_iterator", ".", "string_handle", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "model", ".", "lr", ",", "tf", ".", "constant", "(", "lr", ",", "dtype", "=", "tf", ".", "float32", ")", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "model", ".", "is_train", ",", "tf", ".", "constant", "(", "True", ",", "dtype", "=", "tf", ".", "bool", ")", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "model", ".", "n_batch", ",", "tf", ".", "constant", "(", "args", ".", "train_batch", ",", "dtype", "=", "tf", ".", "int32", ")", ")", ")", "\n", "for", "step", "in", "range", "(", "1", ",", "args", ".", "num_steps", "+", "1", ")", ":", "\n", "            ", "sess", ".", "run", "(", "tf", ".", "assign", "(", "model", ".", "global_step", ",", "tf", ".", "constant", "(", "step", ",", "dtype", "=", "tf", ".", "int32", ")", ")", ")", "\n", "loss", ",", "train_op", "=", "sess", ".", "run", "(", "[", "model", ".", "loss", ",", "model", ".", "train_op", "]", ",", "feed_dict", "=", "{", "handle", ":", "train_handle", "}", ")", "\n", "if", "step", "%", "args", ".", "period", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Period point {} Loss {}'", ".", "format", "(", "step", ",", "loss", ")", ")", "\n", "loss_sum", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'model/loss'", ",", "simple_value", "=", "loss", ")", ",", "]", ")", "\n", "writer", ".", "add_summary", "(", "loss_sum", ",", "step", ")", "\n", "\n", "", "if", "step", "%", "args", ".", "checkpoint", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Evaluating the model for epoch {}'", ".", "format", "(", "step", "//", "args", ".", "checkpoint", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "model", ".", "is_train", ",", "tf", ".", "constant", "(", "False", ",", "dtype", "=", "tf", ".", "bool", ")", ")", ")", "\n", "train_metrics", ",", "summ", "=", "evaluate_batch", "(", "model", ",", "args", ".", "eval_num_batches", ",", "train_eval_file", ",", "sess", ",", "'train'", ",", "\n", "handle", ",", "train_handle", ")", "\n", "print_metrics", "(", "train_metrics", ",", "logger", ",", "'Train'", ")", "\n", "for", "s", "in", "summ", ":", "\n", "                    ", "writer", ".", "add_summary", "(", "s", ",", "step", ")", "\n", "\n", "", "sess", ".", "run", "(", "tf", ".", "assign", "(", "model", ".", "n_batch", ",", "tf", ".", "constant", "(", "args", ".", "valid_batch", ",", "dtype", "=", "tf", ".", "int32", ")", ")", ")", "\n", "valid_metrics", ",", "summ", "=", "evaluate_batch", "(", "model", ",", "valid_total", "//", "args", ".", "valid_batch", ",", "valid_eval_file", ",", "sess", ",", "\n", "'valid'", ",", "handle", ",", "valid_handle", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "model", ".", "is_train", ",", "tf", ".", "constant", "(", "True", ",", "dtype", "=", "tf", ".", "bool", ")", ")", ")", "\n", "print_metrics", "(", "valid_metrics", ",", "logger", ",", "'Valid'", ")", "\n", "for", "s", "in", "summ", ":", "\n", "                    ", "writer", ".", "add_summary", "(", "s", ",", "step", ")", "\n", "", "writer", ".", "flush", "(", ")", "\n", "f1", "=", "valid_metrics", "[", "'f1'", "]", "\n", "if", "f1", ">", "f1_save", ":", "\n", "                    ", "f1_save", "=", "f1", "\n", "patience", "=", "0", "\n", "", "else", ":", "\n", "                    ", "patience", "+=", "1", "\n", "", "if", "patience", ">=", "args", ".", "patience", ":", "\n", "                    ", "lr", "/=", "2.0", "\n", "logger", ".", "info", "(", "'Learning rate reduced to {}'", ".", "format", "(", "lr", ")", ")", "\n", "f1_save", "=", "f1", "\n", "patience", "=", "0", "\n", "", "sess", ".", "run", "(", "tf", ".", "assign", "(", "model", ".", "lr", ",", "tf", ".", "constant", "(", "lr", ",", "dtype", "=", "tf", ".", "float32", ")", ")", ")", "\n", "valid_sum", "=", "valid_metrics", "[", "'precision'", "]", "+", "valid_metrics", "[", "'recall'", "]", "+", "valid_metrics", "[", "'f1'", "]", "\n", "if", "valid_sum", ">", "max_sum", ":", "\n", "                    ", "max_acc", "=", "max", "(", "valid_metrics", "[", "'acc'", "]", ",", "max_acc", ")", "\n", "max_p", "=", "max", "(", "valid_metrics", "[", "'precision'", "]", ",", "max_p", ")", "\n", "max_r", "=", "max", "(", "valid_metrics", "[", "'recall'", "]", ",", "max_r", ")", "\n", "max_f", "=", "max", "(", "valid_metrics", "[", "'f1'", "]", ",", "max_f", ")", "\n", "max_sum", "=", "valid_sum", "\n", "max_epoch", "=", "step", "//", "args", ".", "checkpoint", "\n", "# filename = os.path.join(args.model_dir, \"model_{}.ckpt\".format(global_step))", "\n", "# saver.save(sess, filename)", "\n", "", "", "", "logger", ".", "info", "(", "'Max Acc {} Max Precision {} Max Recall {} Max F1 {}'", ".", "format", "(", "max_acc", ",", "max_p", ",", "max_r", ",", "max_f", ")", ")", "\n", "logger", ".", "info", "(", "'Max epoch {}'", ".", "format", "(", "max_epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.run.run": [[213, 273], ["run.parse_args", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.getLogger.info", "logging.getLogger.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "FilePaths", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "preprocess.tf_preprocess.run_prepare", "run.train", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "ujson.load"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.run.parse_args", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.run_prepare", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "", "def", "run", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'altlex'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "# \u662f\u5426\u5b58\u50a8\u65e5\u5fd7", "\n", "if", "args", ".", "log_path", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "args", ".", "log_path", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "", "else", ":", "\n", "        ", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Running with args : {}'", ".", "format", "(", "args", ")", ")", "\n", "os", ".", "environ", "[", "'CUDA_DEVICE_ORDER'", "]", "=", "'PCI_BUS_ID'", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "logger", ".", "info", "(", "'Preparing the directories...'", ")", "\n", "args", ".", "processed_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "args", ".", "task", ")", "\n", "args", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "model_dir", ")", "\n", "args", ".", "result_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "result_dir", ")", "\n", "args", ".", "summary_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputs_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "args", ".", "summary_dir", ")", "\n", "for", "dir_path", "in", "[", "args", ".", "model_dir", ",", "args", ".", "result_dir", ",", "args", ".", "summary_dir", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "\n", "", "", "class", "FilePaths", "(", "object", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "# \u8fd0\u884c\u8bb0\u5f55\u6587\u4ef6", "\n", "            ", "self", ".", "train_record_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train.tfrecords'", ")", "\n", "self", ".", "valid_record_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid.tfrecords'", ")", "\n", "self", ".", "test_record_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test.tfrecords'", ")", "\n", "# \u8bc4\u4f30\u6587\u4ef6", "\n", "self", ".", "train_eval_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train_eval.json'", ")", "\n", "self", ".", "valid_eval_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid_eval.json'", ")", "\n", "self", ".", "test_eval_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test_eval.json'", ")", "\n", "# \u8ba1\u6570\u6587\u4ef6", "\n", "self", ".", "train_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'train_meta.json'", ")", "\n", "self", ".", "valid_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'valid_meta.json'", ")", "\n", "self", ".", "test_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'test_meta.json'", ")", "\n", "self", ".", "shape_meta", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'shape_meta.json'", ")", "\n", "\n", "self", ".", "corpus_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'corpus.txt'", ")", "\n", "self", ".", "w2v_file", "=", "'./data/processed_data/wiki.en.pkl'", "\n", "self", ".", "token_emb_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'token_emb.pkl'", ")", "\n", "self", ".", "token2id_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'token2id.json'", ")", "\n", "self", ".", "id2token_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "processed_dir", ",", "'id2token.json'", ")", "\n", "\n", "", "", "file_paths", "=", "FilePaths", "(", ")", "\n", "# max_seq_len, index_dim = 0, 0", "\n", "if", "args", ".", "prepare", ":", "\n", "        ", "run_prepare", "(", "args", ",", "file_paths", ")", "\n", "", "if", "args", ".", "train", ":", "\n", "        ", "with", "open", "(", "file_paths", ".", "shape_meta", ",", "'r'", ")", "as", "fh", ":", "\n", "            ", "shape_meta", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "train", "(", "args", ",", "file_paths", ",", "shape_meta", "[", "'max_len'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train_one_epoch": [[17, 54], ["model.train", "torch.from_numpy().to", "torch.from_numpy().to", "enumerate", "numpy.mean", "range", "utils.torch_util.get_batch", "optimizer.zero_grad", "model", "torch.nn.CrossEntropyLoss.", "criterion.backward", "optimizer.step", "scheduler.step", "criterion.item", "train_loss.append", "torch.from_numpy", "torch.from_numpy", "utils.torch_util.FocalLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "logger.info", "criterion.item", "numpy.array", "model.parameters"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.get_batch"], ["def", "train_one_epoch", "(", "model", ",", "optimizer", ",", "scheduler", ",", "train_num", ",", "train_file", ",", "args", ",", "logger", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "[", "]", "\n", "n_batch_loss", "=", "0", "\n", "weight", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0.2", ",", "0.8", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "range", "(", "0", ",", "train_num", ",", "args", ".", "batch_train", ")", ")", ":", "\n", "        ", "start_idx", "=", "batch", "\n", "end_idx", "=", "start_idx", "+", "args", ".", "batch_train", "\n", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "cau_labels", ",", "seq_lens", ",", "_", "=", "get_batch", "(", "train_file", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "args", ".", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "model", "(", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "seq_lens", ")", "\n", "if", "args", ".", "is_fc", ":", "\n", "            ", "criterion", "=", "FocalLoss", "(", "gamma", "=", "4", ",", "alpha", "=", "0.75", ")", "\n", "", "else", ":", "\n", "            ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "weight", ")", "\n", "", "loss", "=", "criterion", "(", "outputs", ",", "cau_labels", ")", "\n", "# params = model.state_dict()", "\n", "# l2_reg = torch.autograd.Variable(torch.FloatTensor(1), requires_grad=True).cuda()", "\n", "# l2_reg = l2_reg + params['linear.weight'].norm(2) + params['linear.bias'].norm(2)", "\n", "# loss += l2_reg * args.weight_decay", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "clip", ">", "0", ":", "\n", "# \u68af\u5ea6\u88c1\u526a\uff0c\u8f93\u5165\u662f(NN\u53c2\u6570\uff0c\u6700\u5927\u68af\u5ea6\u8303\u6570\uff0c\u8303\u6570\u7c7b\u578b=2)\uff0c\u4e00\u822c\u9ed8\u8ba4\u4e3aL2\u8303\u6570", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "n_batch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "bidx", "=", "batch_idx", "+", "1", "\n", "if", "bidx", "%", "args", ".", "period", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'AvgLoss batch [{} {}] - {}'", ".", "format", "(", "bidx", "-", "args", ".", "period", "+", "1", ",", "bidx", ",", "n_batch_loss", "/", "args", ".", "period", ")", ")", "\n", "n_batch_loss", "=", "0", "\n", "", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "avg_train_loss", "=", "np", ".", "mean", "(", "train_loss", ")", "\n", "return", "avg_train_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train": [[56, 144], ["logging.getLogger", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "utils.torch_util.load_json", "logging.getLogger.info", "utils.torch_util.load_json", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "pytorch_transformers.WarmupCosineSchedule", "numpy.zeros", "range", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "utils.torch_util.dump_json", "utils.torch_util.dump_json", "utils.torch_util.dump_json", "utils.torch_util.save_loss", "utils.torch_util.draw_curve", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "getattr", "model.parameters", "logging.getLogger.info", "torch_run.train_one_epoch", "train_loss.append", "logging.getLogger.info", "logging.getLogger.info", "utils.torch_util.evaluate_batch", "valid_loss.append", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "max", "max", "max", "max", "random.shuffle", "os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "getattr", "model.state_dict", "os.path.join", "config.opt"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.load_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.load_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.save_loss", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.draw_curve", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train_one_epoch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.evaluate_batch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'Causality'", ")", "\n", "logger", ".", "info", "(", "'Loading train file...'", ")", "\n", "with", "open", "(", "args", ".", "train_record_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "train_file", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading valid file...'", ")", "\n", "with", "open", "(", "args", ".", "valid_record_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "valid_file", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading train meta...'", ")", "\n", "train_meta", "=", "load_json", "(", "args", ".", "train_meta", ")", "\n", "logger", ".", "info", "(", "'Loading valid meta...'", ")", "\n", "valid_meta", "=", "load_json", "(", "args", ".", "valid_meta", ")", "\n", "logger", ".", "info", "(", "'Loading token embeddings...'", ")", "\n", "with", "open", "(", "args", ".", "token_emb_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "token_embeddings", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "train_num", "=", "train_meta", "[", "'total'", "]", "\n", "valid_num", "=", "valid_meta", "[", "'total'", "]", "\n", "\n", "logger", ".", "info", "(", "'Loading shape meta...'", ")", "\n", "logger", ".", "info", "(", "'Num train data {} valid data {}'", ".", "format", "(", "train_num", ",", "valid_num", ")", ")", "\n", "\n", "args", ".", "dropout", "=", "{", "'emb'", ":", "args", ".", "emb_dropout", ",", "'layer'", ":", "args", ".", "layer_dropout", "}", "\n", "logger", ".", "info", "(", "'Initialize the model...'", ")", "\n", "model", "=", "getattr", "(", "models", ",", "args", ".", "model", ")", "(", "token_embeddings", ",", "args", ",", "logger", ")", ".", "to", "(", "device", "=", "args", ".", "device", ")", "\n", "lr", "=", "args", ".", "lr", "\n", "optimizer", "=", "getattr", "(", "optim", ",", "args", ".", "optim", ")", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "# scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'max', 0.5, patience=args.patience, verbose=True)", "\n", "scheduler", "=", "WarmupCosineSchedule", "(", "optimizer", ",", "args", ".", "warmup", ",", "(", "train_num", "//", "args", ".", "batch_train", "+", "1", ")", "*", "args", ".", "epochs", ")", "\n", "# torch.backends.cudnn.benchmark = True", "\n", "max_acc", ",", "max_p", ",", "max_r", ",", "max_f", ",", "max_roc", ",", "max_prc", ",", "max_sum", ",", "max_epoch", "=", "np", ".", "zeros", "(", "8", ")", "\n", "FALSE", ",", "ROC", ",", "PRC", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "train_loss", ",", "valid_loss", "=", "[", "]", ",", "[", "]", "\n", "for", "ep", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Training the model for epoch {}'", ".", "format", "(", "ep", ")", ")", "\n", "avg_loss", "=", "train_one_epoch", "(", "model", ",", "optimizer", ",", "scheduler", ",", "train_num", ",", "train_file", ",", "args", ",", "logger", ")", "\n", "train_loss", ".", "append", "(", "avg_loss", ")", "\n", "logger", ".", "info", "(", "'Epoch {} AvgLoss {}'", ".", "format", "(", "ep", ",", "avg_loss", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'Evaluating the model for epoch {}'", ".", "format", "(", "ep", ")", ")", "\n", "eval_metrics", ",", "fpr", ",", "tpr", ",", "precision", ",", "recall", "=", "evaluate_batch", "(", "model", ",", "valid_num", ",", "args", ".", "batch_eval", ",", "valid_file", ",", "\n", "args", ".", "device", ",", "args", ".", "is_fc", ",", "'valid'", ",", "logger", ")", "\n", "valid_loss", ".", "append", "(", "eval_metrics", "[", "'loss'", "]", ")", "\n", "logger", ".", "info", "(", "'Valid Loss - {}'", ".", "format", "(", "eval_metrics", "[", "'loss'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid Acc - {}'", ".", "format", "(", "eval_metrics", "[", "'acc'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid Precision - {}'", ".", "format", "(", "eval_metrics", "[", "'precision'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid Recall - {}'", ".", "format", "(", "eval_metrics", "[", "'recall'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid F1 - {}'", ".", "format", "(", "eval_metrics", "[", "'f1'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid AUCROC - {}'", ".", "format", "(", "eval_metrics", "[", "'auc_roc'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Valid AUCPRC - {}'", ".", "format", "(", "eval_metrics", "[", "'auc_prc'", "]", ")", ")", "\n", "max_acc", "=", "max", "(", "(", "eval_metrics", "[", "'acc'", "]", ",", "max_acc", ")", ")", "\n", "max_p", "=", "max", "(", "eval_metrics", "[", "'precision'", "]", ",", "max_p", ")", "\n", "max_r", "=", "max", "(", "eval_metrics", "[", "'recall'", "]", ",", "max_r", ")", "\n", "max_f", "=", "max", "(", "eval_metrics", "[", "'f1'", "]", ",", "max_f", ")", "\n", "valid_sum", "=", "eval_metrics", "[", "'auc_roc'", "]", "+", "eval_metrics", "[", "'auc_prc'", "]", "+", "eval_metrics", "[", "'f1'", "]", "\n", "if", "valid_sum", ">", "max_sum", ":", "\n", "            ", "max_acc", "=", "eval_metrics", "[", "'acc'", "]", "\n", "max_p", "=", "eval_metrics", "[", "'precision'", "]", "\n", "max_r", "=", "eval_metrics", "[", "'recall'", "]", "\n", "max_f", "=", "eval_metrics", "[", "'f1'", "]", "\n", "max_roc", "=", "eval_metrics", "[", "'auc_roc'", "]", "\n", "max_prc", "=", "eval_metrics", "[", "'auc_prc'", "]", "\n", "max_sum", "=", "valid_sum", "\n", "max_epoch", "=", "ep", "\n", "FALSE", "=", "{", "'FP'", ":", "eval_metrics", "[", "'fp'", "]", ",", "'FN'", ":", "eval_metrics", "[", "'fn'", "]", "}", "\n", "ROC", "=", "{", "'FPR'", ":", "fpr", ",", "'TPR'", ":", "tpr", "}", "\n", "PRC", "=", "{", "'PRECISION'", ":", "precision", ",", "'RECALL'", ":", "recall", "}", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'model.bin'", ")", ")", "\n", "\n", "# scheduler.step(metrics=eval_metrics['f1'])", "\n", "", "random", ".", "shuffle", "(", "train_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Max Acc - {}'", ".", "format", "(", "max_acc", ")", ")", "\n", "logger", ".", "info", "(", "'Max Precision - {}'", ".", "format", "(", "max_p", ")", ")", "\n", "logger", ".", "info", "(", "'Max Recall - {}'", ".", "format", "(", "max_r", ")", ")", "\n", "logger", ".", "info", "(", "'Max F1 - {}'", ".", "format", "(", "max_f", ")", ")", "\n", "logger", ".", "info", "(", "'Max ROC - {}'", ".", "format", "(", "max_roc", ")", ")", "\n", "logger", ".", "info", "(", "'Max PRC - {}'", ".", "format", "(", "max_prc", ")", ")", "\n", "logger", ".", "info", "(", "'Max Epoch - {}'", ".", "format", "(", "max_epoch", ")", ")", "\n", "logger", ".", "info", "(", "'Max Sum - {}'", ".", "format", "(", "max_sum", ")", ")", "\n", "\n", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'FALSE_valid.json'", ")", ",", "FALSE", ")", "\n", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'ROC_valid.json'", ")", ",", "ROC", ")", "\n", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'PRC_valid.json'", ")", ",", "PRC", ")", "\n", "save_loss", "(", "train_loss", ",", "valid_loss", ",", "args", ".", "result_dir", ")", "\n", "draw_curve", "(", "ROC", "[", "'FPR'", "]", ",", "ROC", "[", "'TPR'", "]", ",", "PRC", "[", "'PRECISION'", "]", ",", "PRC", "[", "'RECALL'", "]", ",", "args", ".", "pics_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.evaluate": [[146, 198], ["logging.getLogger", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "utils.torch_util.load_json", "logging.getLogger.info", "utils.torch_util.load_json", "logging.getLogger.info", "utils.torch_util.load_json", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "logging.getLogger.info", "model.load_state_dict", "utils.torch_util.evaluate_batch", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "utils.torch_util.dump_json", "utils.torch_util.dump_json", "utils.torch_util.dump_json", "utils.torch_util.draw_curve", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.load", "torch.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "getattr", "config.opt"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.load_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.load_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.load_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.evaluate_batch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.draw_curve", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "def", "evaluate", "(", "args", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'Causality'", ")", "\n", "logger", ".", "info", "(", "'Loading valid file...'", ")", "\n", "with", "open", "(", "args", ".", "valid_record_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "valid_file", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading test file...'", ")", "\n", "with", "open", "(", "args", ".", "test_record_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "test_file", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading valid meta...'", ")", "\n", "valid_meta", "=", "load_json", "(", "args", ".", "valid_meta", ")", "\n", "logger", ".", "info", "(", "'Loading test meta...'", ")", "\n", "test_meta", "=", "load_json", "(", "args", ".", "test_meta", ")", "\n", "logger", ".", "info", "(", "'Loading id to token file...'", ")", "\n", "id2token_file", "=", "load_json", "(", "args", ".", "id2token_file", ")", "\n", "logger", ".", "info", "(", "'Loading token embeddings...'", ")", "\n", "with", "open", "(", "args", ".", "token_emb_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "token_embeddings", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "valid_num", "=", "valid_meta", "[", "'total'", "]", "\n", "test_num", "=", "test_meta", "[", "'total'", "]", "\n", "\n", "logger", ".", "info", "(", "'Loading shape meta...'", ")", "\n", "logger", ".", "info", "(", "'Num valid data {} test data {}'", ".", "format", "(", "valid_num", ",", "test_num", ")", ")", "\n", "\n", "args", ".", "dropout", "=", "{", "'emb'", ":", "args", ".", "emb_dropout", ",", "'layer'", ":", "args", ".", "layer_dropout", "}", "\n", "model", "=", "getattr", "(", "models", ",", "args", ".", "model", ")", "(", "token_embeddings", ",", "args", ",", "logger", ")", ".", "to", "(", "device", "=", "args", ".", "device", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'model.bin'", ")", ")", ")", "\n", "\n", "eval_metrics", ",", "fpr", ",", "tpr", ",", "precision", ",", "recall", "=", "evaluate_batch", "(", "model", ",", "test_num", ",", "args", ".", "batch_eval", ",", "test_file", ",", "\n", "args", ".", "device", ",", "args", ".", "is_fc", ",", "'eval'", ",", "logger", ")", "\n", "logger", ".", "info", "(", "'Eval Loss - {}'", ".", "format", "(", "eval_metrics", "[", "'loss'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Eval Acc - {}'", ".", "format", "(", "eval_metrics", "[", "'acc'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Eval Precision - {}'", ".", "format", "(", "eval_metrics", "[", "'precision'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Eval Recall - {}'", ".", "format", "(", "eval_metrics", "[", "'recall'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Eval F1 - {}'", ".", "format", "(", "eval_metrics", "[", "'f1'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Eval AUCROC - {}'", ".", "format", "(", "eval_metrics", "[", "'auc_roc'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Eval AUCPRC - {}'", ".", "format", "(", "eval_metrics", "[", "'auc_prc'", "]", ")", ")", "\n", "\n", "# if args.model == 'MCDN' or args.model == 'TB':", "\n", "#     draw_att(model, test_num, args.batch_eval, test_file, args.device, id2token_file,", "\n", "#              args.pics_dir, args.n_block, args.n_head, logger)", "\n", "\n", "FALSE", "=", "{", "'FP'", ":", "eval_metrics", "[", "'fp'", "]", ",", "'FN'", ":", "eval_metrics", "[", "'fn'", "]", "}", "\n", "ROC", "=", "{", "'FPR'", ":", "fpr", ",", "'TPR'", ":", "tpr", "}", "\n", "PRC", "=", "{", "'PRECISION'", ":", "precision", ",", "'RECALL'", ":", "recall", "}", "\n", "\n", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'FALSE_transfer.json'", ")", ",", "FALSE", ")", "\n", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'ROC_transfer.json'", ")", ",", "ROC", ")", "\n", "dump_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "'PRC_transfer.json'", ")", ",", "PRC", ")", "\n", "draw_curve", "(", "ROC", "[", "'FPR'", "]", ",", "ROC", "[", "'TPR'", "]", ",", "PRC", "[", "'PRECISION'", "]", ",", "PRC", "[", "'RECALL'", "]", ",", "args", ".", "pics_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.case": [[200, 228], ["logging.getLogger", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "utils.torch_util.load_json", "logging.getLogger.info", "utils.torch_util.load_json", "logging.getLogger.info", "fh.close", "logging.getLogger.info", "logging.getLogger.info", "model.load_state_dict", "utils.torch_util.case_batch", "print", "open", "pickle.load", "open", "pickle.load", "torch.load", "torch.load", "utils.torch_util.draw_att", "os.path.join", "getattr", "config.opt"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.load_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.load_json", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.case_batch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.draw_att"], ["", "def", "case", "(", "args", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'Causality'", ")", "\n", "logger", ".", "info", "(", "'Loading test file...'", ")", "\n", "with", "open", "(", "args", ".", "test_record_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "test_file", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Loading test meta...'", ")", "\n", "test_meta", "=", "load_json", "(", "args", ".", "test_meta", ")", "\n", "logger", ".", "info", "(", "'Loading id to token file...'", ")", "\n", "id2token_file", "=", "load_json", "(", "args", ".", "id2token_file", ")", "\n", "logger", ".", "info", "(", "'Loading token embeddings...'", ")", "\n", "with", "open", "(", "args", ".", "token_emb_file", ",", "'rb'", ")", "as", "fh", ":", "\n", "        ", "token_embeddings", "=", "pkl", ".", "load", "(", "fh", ")", "\n", "", "fh", ".", "close", "(", ")", "\n", "test_num", "=", "test_meta", "[", "'total'", "]", "\n", "logger", ".", "info", "(", "'Loading shape meta...'", ")", "\n", "logger", ".", "info", "(", "'Num test data {}'", ".", "format", "(", "test_num", ")", ")", "\n", "\n", "args", ".", "dropout", "=", "{", "'emb'", ":", "args", ".", "emb_dropout", ",", "'layer'", ":", "args", ".", "layer_dropout", "}", "\n", "model", "=", "getattr", "(", "models", ",", "args", ".", "model", ")", "(", "token_embeddings", ",", "args", ",", "logger", ")", ".", "to", "(", "device", "=", "args", ".", "device", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'model.bin'", ")", ")", ")", "\n", "\n", "pred_scores", "=", "case_batch", "(", "model", ",", "test_num", ",", "args", ".", "batch_eval", ",", "test_file", ",", "args", ".", "device", ")", "\n", "print", "(", "pred_scores", ")", "\n", "\n", "if", "args", ".", "model", "==", "'MCDN'", "or", "args", ".", "model", "==", "'TB'", ":", "\n", "        ", "draw_att", "(", "model", ",", "test_num", ",", "args", ".", "batch_eval", ",", "test_file", ",", "args", ".", "device", ",", "id2token_file", ",", "\n", "args", ".", "pics_dir", ",", "args", ".", "n_block", ",", "args", ".", "n_head", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run": [[230, 268], ["config.opt._parse", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "torch.manual_seed", "torch.manual_seed", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "torch.device", "preprocess.torch_preprocess.run_prepare", "torch_run.train", "torch_run.evaluate", "torch_run.case"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.config.DefaultConfig._parse", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.run_prepare", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.train", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.evaluate", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.case"], ["", "", "def", "run", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Prepares and runs the whole system.\n    \"\"\"", "\n", "opt", ".", "_parse", "(", "kwargs", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'Causality'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "# \u662f\u5426\u5b58\u50a8\u65e5\u5fd7", "\n", "if", "opt", ".", "log_path", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "opt", ".", "log_path", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "", "else", ":", "\n", "        ", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "# logger.info('Running with args : {}'.format(opt))", "\n", "", "os", ".", "environ", "[", "'CUDA_DEVICE_ORDER'", "]", "=", "'PCI_BUS_ID'", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "opt", ".", "gpu", "\n", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "opt", ".", "device", "=", "None", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "opt", ".", "disable_cuda", ":", "\n", "        ", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "if", "opt", ".", "prepare", ":", "\n", "        ", "run_prepare", "(", "opt", ")", "\n", "", "if", "opt", ".", "train", ":", "\n", "        ", "train", "(", "opt", ")", "\n", "", "if", "opt", ".", "evaluate", ":", "\n", "        ", "evaluate", "(", "opt", ")", "\n", "", "if", "opt", ".", "case", ":", "\n", "        ", "case", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_utils.get_record_parser": [[6, 23], ["tensorflow.parse_single_example", "tensorflow.reshape", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.reshape", "tensorflow.decode_raw", "tensorflow.decode_raw", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "function", ["None"], ["def", "get_record_parser", "(", "max_len", ")", ":", "\n", "    ", "def", "parse", "(", "example", ")", ":", "\n", "        ", "features", "=", "tf", ".", "parse_single_example", "(", "example", ",", "\n", "features", "=", "{", "\n", "'eid'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'token_ids'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'token_len'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'cau_label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'alt_label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "\n", "}", ")", "\n", "eid", "=", "features", "[", "'eid'", "]", "\n", "token_ids", "=", "tf", ".", "reshape", "(", "tf", ".", "decode_raw", "(", "features", "[", "'token_ids'", "]", ",", "tf", ".", "int32", ")", ",", "[", "max_len", "]", ")", "\n", "token_len", "=", "tf", ".", "to_int32", "(", "features", "[", "'token_len'", "]", ")", "\n", "cau_label", "=", "tf", ".", "to_int32", "(", "features", "[", "'cau_label'", "]", ")", "\n", "alt_label", "=", "tf", ".", "reshape", "(", "tf", ".", "decode_raw", "(", "features", "[", "'alt_label'", "]", ",", "tf", ".", "int32", ")", ",", "[", "max_len", "]", ")", "\n", "return", "eid", ",", "token_ids", ",", "token_len", ",", "cau_label", ",", "alt_label", "\n", "", "return", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_utils.get_batch_dataset": [[25, 30], ["tensorflow.constant", "tensorflow.data.TFRecordDataset().map().shuffle().batch().repeat", "tensorflow.data.TFRecordDataset().map().shuffle().batch", "tensorflow.data.TFRecordDataset().map().shuffle", "tensorflow.data.TFRecordDataset().map", "tensorflow.data.TFRecordDataset"], "function", ["None"], ["", "def", "get_batch_dataset", "(", "record_file", ",", "parser", ",", "config", ")", ":", "\n", "    ", "num_threads", "=", "tf", ".", "constant", "(", "config", ".", "num_threads", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "record_file", ")", ".", "map", "(", "parser", ",", "num_parallel_calls", "=", "num_threads", ")", ".", "shuffle", "(", "\n", "config", ".", "capacity", ")", ".", "batch", "(", "config", ".", "train_batch", ")", ".", "repeat", "(", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_utils.get_dataset": [[32, 37], ["tensorflow.constant", "tensorflow.data.TFRecordDataset().map().batch().repeat", "tensorflow.data.TFRecordDataset().map().batch", "tensorflow.data.TFRecordDataset().map", "tensorflow.data.TFRecordDataset"], "function", ["None"], ["", "def", "get_dataset", "(", "record_file", ",", "parser", ",", "config", ")", ":", "\n", "    ", "num_threads", "=", "tf", ".", "constant", "(", "config", ".", "num_threads", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "record_file", ")", ".", "map", "(", "\n", "parser", ",", "num_parallel_calls", "=", "num_threads", ")", ".", "batch", "(", "config", ".", "valid_batch", ")", ".", "repeat", "(", "config", ".", "epochs", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_utils.evaluate_batch": [[39, 67], ["range", "numpy.asarray", "numpy.asarray", "numpy.mean", "sklearn.metrics.accuracy_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score", "print", "tensorflow.Summary", "tensorflow.Summary", "tensorflow.Summary", "tensorflow.Summary", "tensorflow.Summary", "sess.run", "losses.append", "labels.tolist", "sklearn.metrics.confusion_matrix", "np.asarray.append", "tensorflow.Summary.Value", "tensorflow.Summary.Value", "tensorflow.Summary.Value", "tensorflow.Summary.Value", "tensorflow.Summary.Value", "str"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNNType.str"], ["", "def", "evaluate_batch", "(", "model", ",", "num_batches", ",", "eval_file", ",", "sess", ",", "data_type", ",", "handle", ",", "str_handle", ")", ":", "\n", "    ", "losses", ",", "refs", ",", "pres", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "metrics", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "        ", "eids", ",", "loss", ",", "labels", "=", "sess", ".", "run", "(", "[", "model", ".", "eid", ",", "model", ".", "loss", ",", "model", ".", "pre_labels", "]", ",", "\n", "feed_dict", "=", "{", "handle", ":", "str_handle", "}", "if", "handle", "is", "not", "None", "else", "None", ")", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "pres", "+=", "labels", ".", "tolist", "(", ")", "\n", "for", "pid", "in", "eids", ":", "\n", "            ", "refs", ".", "append", "(", "eval_file", "[", "str", "(", "pid", ")", "]", ")", "\n", "\n", "", "", "refs", "=", "np", ".", "asarray", "(", "refs", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "pres", "=", "np", ".", "asarray", "(", "pres", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "metrics", "[", "'loss'", "]", "=", "np", ".", "mean", "(", "losses", ")", "\n", "metrics", "[", "'acc'", "]", "=", "accuracy_score", "(", "refs", ",", "pres", ")", "\n", "metrics", "[", "'precision'", "]", "=", "precision_score", "(", "refs", ",", "pres", ")", "\n", "metrics", "[", "'recall'", "]", "=", "recall_score", "(", "refs", ",", "pres", ")", "\n", "metrics", "[", "'f1'", "]", "=", "f1_score", "(", "refs", ",", "pres", ")", "\n", "print", "(", "confusion_matrix", "(", "refs", ",", "pres", ")", ")", "\n", "# target_names = ['non-causal', 'causal']", "\n", "# print(classification_report(refs, pres, target_names))", "\n", "\n", "loss_sum", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"{}/loss\"", ".", "format", "(", "data_type", ")", ",", "simple_value", "=", "metrics", "[", "'loss'", "]", ")", ",", "]", ")", "\n", "acc_sum", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"{}/acc\"", ".", "format", "(", "data_type", ")", ",", "simple_value", "=", "metrics", "[", "'acc'", "]", ")", ",", "]", ")", "\n", "pre_sum", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"{}/precision\"", ".", "format", "(", "data_type", ")", ",", "simple_value", "=", "metrics", "[", "'precision'", "]", ")", ",", "]", ")", "\n", "rec_sum", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"{}/recall\"", ".", "format", "(", "data_type", ")", ",", "simple_value", "=", "metrics", "[", "'recall'", "]", ")", ",", "]", ")", "\n", "f1_sum", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"{}/f1\"", ".", "format", "(", "data_type", ")", ",", "simple_value", "=", "metrics", "[", "'f1'", "]", ")", ",", "]", ")", "\n", "return", "metrics", ",", "[", "loss_sum", ",", "acc_sum", ",", "pre_sum", ",", "rec_sum", ",", "f1_sum", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_utils.print_metrics": [[69, 76], ["logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info"], "function", ["None"], ["", "def", "print_metrics", "(", "metrics", ",", "logger", ",", "type", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'{} metrics'", ".", "format", "(", "type", ")", ")", "\n", "logger", ".", "info", "(", "'Loss - {}'", ".", "format", "(", "metrics", "[", "'loss'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Acc - {}'", ".", "format", "(", "metrics", "[", "'acc'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Precision - {}'", ".", "format", "(", "metrics", "[", "'precision'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Recall - {}'", ".", "format", "(", "metrics", "[", "'recall'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'F1 - {}'", ".", "format", "(", "metrics", "[", "'f1'", "]", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.result_analyze.lemmatize_all": [[12, 26], ["nltk.stem.WordNetLemmatizer", "nltk.tag.pos_tag", "w.lower", "tag.startswith", "nltk.tokenize.word_tokenize", "tag.startswith", "nltk.stem.WordNetLemmatizer.lemmatize", "tag.startswith", "nltk.stem.WordNetLemmatizer.lemmatize", "tag.startswith", "nltk.stem.WordNetLemmatizer.lemmatize", "nltk.stem.WordNetLemmatizer.lemmatize"], "function", ["None"], ["def", "lemmatize_all", "(", "sentence", ")", ":", "\n", "    ", "wnl", "=", "WordNetLemmatizer", "(", ")", "\n", "sen", "=", "[", "w", ".", "lower", "(", ")", "for", "w", "in", "word_tokenize", "(", "sentence", ")", "]", "\n", "for", "word", ",", "tag", "in", "pos_tag", "(", "sen", ")", ":", "\n", "        ", "if", "tag", ".", "startswith", "(", "'NN'", ")", ":", "\n", "            ", "yield", "wnl", ".", "lemmatize", "(", "word", ",", "pos", "=", "'n'", ")", "\n", "", "elif", "tag", ".", "startswith", "(", "'VB'", ")", ":", "\n", "            ", "yield", "wnl", ".", "lemmatize", "(", "word", ",", "pos", "=", "'v'", ")", "\n", "", "elif", "tag", ".", "startswith", "(", "'JJ'", ")", ":", "\n", "            ", "yield", "wnl", ".", "lemmatize", "(", "word", ",", "pos", "=", "'a'", ")", "\n", "", "elif", "tag", ".", "startswith", "(", "'R'", ")", ":", "\n", "            ", "yield", "wnl", ".", "lemmatize", "(", "word", ",", "pos", "=", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "yield", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.result_analyze.gen_train": [[28, 44], ["fh.close", "open", "line.strip().split.strip().split", "SPACE.join", "all_alt.append", "SPACE.join", "all_alt.append", "result_analyze.lemmatize_all", "result_analyze.lemmatize_all", "line.strip().split.strip"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.result_analyze.lemmatize_all", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.result_analyze.lemmatize_all"], ["", "", "", "def", "gen_train", "(", "path", ")", ":", "\n", "    ", "all_alt", "=", "[", "]", "\n", "SPACE", "=", "' '", "\n", "i", "=", "0", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'ISO-8859-1'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "fh", ":", "\n", "            ", "i", "+=", "1", "\n", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "del", "line", "[", "0", "]", "\n", "alt", "=", "SPACE", ".", "join", "(", "lemmatize_all", "(", "line", "[", "1", "]", ")", ")", "\n", "all_alt", ".", "append", "(", "alt", ")", "\n", "alt", "=", "SPACE", ".", "join", "(", "lemmatize_all", "(", "line", "[", "4", "]", ")", ")", "\n", "all_alt", ".", "append", "(", "alt", ")", "\n", "", "", "fh", ".", "close", "(", ")", "\n", "\n", "return", "all_alt", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.result_analyze.gen_test": [[46, 72], ["fh.close", "open", "ids.remove", "ids.remove", "line.strip().split.strip().split", "SPACE.join", "all_alt.append", "range", "result_analyze.lemmatize_all", "line.strip().split.strip", "fp_alt.append", "fn_alt.append"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.result_analyze.lemmatize_all"], ["", "def", "gen_test", "(", "path", ",", "error_meta", "=", "None", ")", ":", "\n", "    ", "fp_alt", "=", "[", "]", "\n", "fn_alt", "=", "[", "]", "\n", "all_alt", "=", "[", "]", "\n", "SPACE", "=", "' '", "\n", "i", "=", "0", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "fh", ":", "\n", "            ", "i", "+=", "1", "\n", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "del", "line", "[", "-", "1", "]", "\n", "alt", "=", "SPACE", ".", "join", "(", "lemmatize_all", "(", "line", "[", "1", "]", ")", ")", "\n", "all_alt", ".", "append", "(", "alt", ")", "\n", "if", "error_meta", ":", "\n", "                ", "if", "i", "in", "error_meta", "[", "'FP'", "]", ":", "\n", "                    ", "fp_alt", ".", "append", "(", "alt", ")", "\n", "", "elif", "i", "in", "error_meta", "[", "'FN'", "]", ":", "\n", "                    ", "fn_alt", ".", "append", "(", "alt", ")", "\n", "", "", "", "", "fh", ".", "close", "(", ")", "\n", "ids", "=", "[", "j", "for", "j", "in", "range", "(", "1", ",", "i", "+", "1", ")", "]", "\n", "for", "fp", "in", "error_meta", "[", "'FP'", "]", ":", "\n", "        ", "ids", ".", "remove", "(", "fp", ")", "\n", "", "for", "fn", "in", "error_meta", "[", "'FN'", "]", ":", "\n", "        ", "ids", ".", "remove", "(", "fn", ")", "\n", "\n", "", "return", "fp_alt", ",", "fn_alt", ",", "all_alt", ",", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util_SASE.FocalLoss.__init__": [[127, 136], ["super().__init__", "isinstance", "isinstance", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "0", ",", "alpha", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "if", "isinstance", "(", "alpha", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "self", ".", "alpha", "=", "torch", ".", "Tensor", "(", "[", "alpha", ",", "1", "-", "alpha", "]", ")", "\n", "", "if", "isinstance", "(", "alpha", ",", "list", ")", ":", "\n", "            ", "self", ".", "alpha", "=", "torch", ".", "Tensor", "(", "alpha", ")", "\n", "", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util_SASE.FocalLoss.forward": [[137, 158], ["target.view.view.view", "torch.log_softmax", "torch.log_softmax", "logpt.view.view.gather", "logpt.view.view.view", "logpt.view.view.exp", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.view", "input.contiguous().view.contiguous().view.transpose", "input.contiguous().view.contiguous().view.contiguous().view", "torch_util_SASE.FocalLoss.alpha.gather", "loss.mean", "loss.sum", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "torch_util_SASE.FocalLoss.alpha.type", "input.contiguous().view.contiguous().view.data.type", "torch_util_SASE.FocalLoss.alpha.type_as", "target.view.view.data.view", "torch.autograd.Variable", "torch.autograd.Variable", "input.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# N,C,H,W => N,C,H*W", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", "# N,C,H*W => N,H*W,C", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "# N,H*W,C => N*H*W,C", "\n", "", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "logpt", "=", "functional", ".", "log_softmax", "(", "input", ",", "dim", "=", "-", "1", ")", "\n", "logpt", "=", "logpt", ".", "gather", "(", "1", ",", "target", ")", "\n", "logpt", "=", "logpt", ".", "view", "(", "-", "1", ")", "\n", "pt", "=", "logpt", ".", "exp", "(", ")", "\n", "if", "self", ".", "alpha", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "alpha", ".", "type", "(", ")", "!=", "input", ".", "data", ".", "type", "(", ")", ":", "\n", "                ", "self", ".", "alpha", "=", "self", ".", "alpha", ".", "type_as", "(", "input", ".", "data", ")", "\n", "", "at", "=", "self", ".", "alpha", ".", "gather", "(", "0", ",", "target", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "logpt", "=", "logpt", "*", "Variable", "(", "at", ")", "\n", "", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "logpt", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util_SASE.get_batch": [[8, 27], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "ids.append", "np.asarray.append", "np.asarray.append", "np.asarray.append", "np.asarray.append", "np.asarray.append", "np.asarray.append", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "get_batch", "(", "samples", ",", "device", ")", ":", "\n", "    ", "ids", ",", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "cau_labels", ",", "seq_lens", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "sample", "in", "samples", ":", "\n", "        ", "ids", ".", "append", "(", "sample", "[", "'id'", "]", ")", "\n", "tokens", ".", "append", "(", "sample", "[", "'tokens'", "]", ")", "\n", "tokens_pre", ".", "append", "(", "sample", "[", "'tokens_pre'", "]", ")", "\n", "tokens_alt", ".", "append", "(", "sample", "[", "'tokens_alt'", "]", ")", "\n", "tokens_cur", ".", "append", "(", "sample", "[", "'tokens_cur'", "]", ")", "\n", "cau_labels", ".", "append", "(", "sample", "[", "'cau_label'", "]", ")", "\n", "seq_lens", ".", "append", "(", "sample", "[", "'length'", "]", ")", "\n", "", "tokens", "=", "np", ".", "asarray", "(", "tokens", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "tokens_pre", "=", "np", ".", "asarray", "(", "tokens_pre", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "tokens_alt", "=", "np", ".", "asarray", "(", "tokens_alt", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "tokens_cur", "=", "np", ".", "asarray", "(", "tokens_cur", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "cau_labels", "=", "np", ".", "asarray", "(", "cau_labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "seq_lens", "=", "np", ".", "asarray", "(", "seq_lens", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "return", "torch", ".", "from_numpy", "(", "tokens", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "from_numpy", "(", "tokens_pre", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "from_numpy", "(", "tokens_alt", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "from_numpy", "(", "tokens_cur", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "from_numpy", "(", "cau_labels", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "from_numpy", "(", "seq_lens", ")", ".", "to", "(", "device", ")", ",", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util_SASE._sequence_mask": [[29, 41], ["sequence_length.size", "torch.arange().long", "torch.arange().long", "torch.arange().long.unsqueeze().expand", "torch.autograd.Variable", "sequence_length.unsqueeze().expand_as", "sequence_length.data.max", "seq_range_expand.cuda.cuda", "torch.arange", "torch.arange", "torch.arange().long.unsqueeze", "sequence_length.unsqueeze"], "function", ["None"], ["", "def", "_sequence_mask", "(", "sequence_length", ",", "max_len", "=", "None", ")", ":", "\n", "    ", "if", "max_len", "is", "None", ":", "\n", "        ", "max_len", "=", "sequence_length", ".", "data", ".", "max", "(", ")", "\n", "", "batch_size", "=", "sequence_length", ".", "size", "(", "0", ")", "\n", "seq_range", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "long", "(", ")", "\n", "seq_range_expand", "=", "seq_range", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "max_len", ")", "\n", "seq_range_expand", "=", "Variable", "(", "seq_range_expand", ")", "\n", "if", "sequence_length", ".", "is_cuda", ":", "\n", "        ", "seq_range_expand", "=", "seq_range_expand", ".", "cuda", "(", ")", "\n", "", "seq_length_expand", "=", "(", "sequence_length", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "seq_range_expand", ")", ")", "\n", "\n", "return", "seq_range_expand", "<", "seq_length_expand", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util_SASE.compute_loss": [[43, 75], ["logits.view", "torch.log_softmax", "torch.mul", "torch.mul", "target.view", "losses_flat.view", "torch_util_SASE._sequence_mask", "logits.size", "torch.gather", "torch.gather", "_sequence_mask.float", "losses_flat.view.sum", "length.float().sum", "target.size", "target.size", "len", "length.float", "logits.view.size"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util._sequence_mask"], ["", "def", "compute_loss", "(", "logits", ",", "target", ",", "length", ",", "weight", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        logits: A Variable containing a FloatTensor of size\n            (batch, max_len, num_classes) which contains the\n            unnormalized probability for each class.\n        target: A Variable containing a LongTensor of size\n            (batch, max_len) which contains the index of the true\n            class for each corresponding step.\n        length: A Variable containing a LongTensor of size (batch,)\n            which contains the length of each data in a batch.\n    Returns:\n        loss: An average loss value masked by the length.\n    \"\"\"", "\n", "\n", "# logits_flat: (batch * max_len, num_classes)", "\n", "logits_flat", "=", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", "\n", "# log_probs_flat: (batch * max_len, num_classes)", "\n", "log_probs_flat", "=", "functional", ".", "log_softmax", "(", "logits_flat", ",", "dim", "=", "len", "(", "logits_flat", ".", "size", "(", ")", ")", "-", "1", ")", "\n", "log_probs_flat", "=", "torch", ".", "mul", "(", "log_probs_flat", ",", "weight", ")", "\n", "# target_flat: (batch * max_len, 1)", "\n", "target_flat", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "# losses_flat: (batch * max_len, 1)", "\n", "losses_flat", "=", "-", "torch", ".", "gather", "(", "log_probs_flat", ",", "dim", "=", "1", ",", "index", "=", "target_flat", ")", "\n", "# losses: (batch, max_len)", "\n", "losses", "=", "losses_flat", ".", "view", "(", "*", "target", ".", "size", "(", ")", ")", "\n", "# mask: (batch, max_len)", "\n", "mask", "=", "_sequence_mask", "(", "sequence_length", "=", "length", ",", "max_len", "=", "target", ".", "size", "(", "1", ")", ")", "\n", "losses", "=", "losses", "*", "mask", ".", "float", "(", ")", "\n", "loss", "=", "losses", ".", "sum", "(", ")", "/", "length", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util_SASE.evaluate_batch": [[77, 124], ["model.eval", "enumerate", "numpy.mean", "sklearn.metrics.accuracy_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score", "sklearn.metrics.roc_curve", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.auc", "sklearn.metrics.auc", "logger.info", "logger.info", "range", "torch_util_SASE.get_batch", "model", "cau_outputs.detach.detach", "torch.nn.CrossEntropyLoss.", "losses.append", "[].numpy", "[].numpy", "cau_labels.cpu().numpy.cpu().numpy", "[].numpy.tolist", "[].numpy.tolist", "cau_labels.cpu().numpy.tolist", "sklearn.metrics.confusion_matrix", "torch_util_SASE.FocalLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "criterion.item", "zip", "cau_labels.cpu().numpy.cpu", "torch.max", "torch.max", "cau_outputs.detach.cpu", "fn.append", "fp.append", "cau_outputs.detach.cpu"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.get_batch"], ["", "def", "evaluate_batch", "(", "model", ",", "data_num", ",", "batch_size", ",", "eval_file", ",", "device", ",", "is_fc", ",", "data_type", ",", "logger", ")", ":", "\n", "    ", "losses", "=", "[", "]", "\n", "fp", ",", "fn", "=", "[", "]", ",", "[", "]", "\n", "causality_preds", ",", "causality_scores", ",", "causality_labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "metrics", "=", "{", "}", "\n", "model", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "range", "(", "0", ",", "data_num", ",", "batch_size", ")", ")", ":", "\n", "        ", "start_idx", "=", "batch", "\n", "end_idx", "=", "start_idx", "+", "batch_size", "\n", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "cau_labels", ",", "seq_lens", ",", "eids", "=", "get_batch", "(", "eval_file", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "device", ")", "\n", "cau_outputs", ",", "penal", ",", "weights", "=", "model", "(", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "seq_lens", ")", "\n", "cau_outputs", "=", "cau_outputs", ".", "detach", "(", ")", "\n", "if", "is_fc", ":", "\n", "            ", "criterion", "=", "FocalLoss", "(", "gamma", "=", "2", ",", "alpha", "=", "0.75", ")", "\n", "", "else", ":", "\n", "            ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "loss", "=", "criterion", "(", "cau_outputs", ",", "cau_labels", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "cau_preds", "=", "torch", ".", "max", "(", "cau_outputs", ".", "cpu", "(", ")", ",", "1", ")", "[", "1", "]", ".", "numpy", "(", ")", "\n", "cau_scores", "=", "cau_outputs", ".", "cpu", "(", ")", "[", ":", ",", "1", "]", ".", "numpy", "(", ")", "\n", "cau_labels", "=", "cau_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "causality_preds", "+=", "cau_preds", ".", "tolist", "(", ")", "\n", "causality_scores", "+=", "cau_scores", ".", "tolist", "(", ")", "\n", "causality_labels", "+=", "cau_labels", ".", "tolist", "(", ")", "\n", "if", "data_type", "==", "'valid'", "or", "data_type", "==", "'eval'", ":", "\n", "            ", "for", "pred", ",", "label", ",", "eid", "in", "zip", "(", "cau_preds", ",", "cau_labels", ",", "eids", ")", ":", "\n", "                ", "if", "label", "==", "1", "and", "pred", "==", "0", ":", "\n", "                    ", "fn", ".", "append", "(", "eid", ")", "\n", "", "if", "label", "==", "0", "and", "pred", "==", "1", ":", "\n", "                    ", "fp", ".", "append", "(", "eid", ")", "\n", "\n", "", "", "", "", "metrics", "[", "'loss'", "]", "=", "np", ".", "mean", "(", "losses", ")", "\n", "metrics", "[", "'acc'", "]", "=", "accuracy_score", "(", "causality_labels", ",", "causality_preds", ")", "\n", "metrics", "[", "'precision'", "]", "=", "precision_score", "(", "causality_labels", ",", "causality_preds", ")", "\n", "metrics", "[", "'recall'", "]", "=", "recall_score", "(", "causality_labels", ",", "causality_preds", ")", "\n", "metrics", "[", "'f1'", "]", "=", "f1_score", "(", "causality_labels", ",", "causality_preds", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "causality_labels", ",", "causality_scores", ")", "\n", "(", "precisions", ",", "recalls", ",", "_", ")", "=", "precision_recall_curve", "(", "causality_labels", ",", "causality_scores", ")", "\n", "metrics", "[", "'auc_roc'", "]", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "metrics", "[", "'auc_prc'", "]", "=", "auc", "(", "recalls", ",", "precisions", ")", "\n", "if", "data_type", "==", "'valid'", "or", "data_type", "==", "'eval'", ":", "\n", "        ", "metrics", "[", "'fp'", "]", "=", "fp", "\n", "metrics", "[", "'fn'", "]", "=", "fn", "\n", "", "logger", ".", "info", "(", "'Full confusion matrix'", ")", "\n", "logger", ".", "info", "(", "confusion_matrix", "(", "causality_labels", ",", "causality_preds", ")", ")", "\n", "return", "metrics", ",", "fpr", ",", "tpr", ",", "precisions", ",", "recalls", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.case_analyze.load_json": [[4, 8], ["open", "ujson.load"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["def", "load_json", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "fh", ":", "\n", "        ", "error", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_util.get_record_parser": [[6, 21], ["tensorflow.parse_single_example", "tensorflow.reshape", "tensorflow.cast", "tensorflow.cast", "tensorflow.decode_raw", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "function", ["None"], ["def", "get_record_parser", "(", "max_len", ")", ":", "\n", "    ", "def", "parse", "(", "example", ")", ":", "\n", "        ", "features", "=", "tf", ".", "parse_single_example", "(", "example", ",", "\n", "features", "=", "{", "\n", "'eid'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'token_ids'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'token_len'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", "\n", "}", ")", "\n", "eid", "=", "features", "[", "'eid'", "]", "\n", "token_ids", "=", "tf", ".", "reshape", "(", "tf", ".", "decode_raw", "(", "features", "[", "'token_ids'", "]", ",", "tf", ".", "int32", ")", ",", "[", "max_len", "]", ")", "\n", "token_len", "=", "tf", ".", "cast", "(", "features", "[", "'token_len'", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "label", "=", "tf", ".", "cast", "(", "features", "[", "'label'", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "return", "eid", ",", "token_ids", ",", "token_len", ",", "label", "\n", "", "return", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_util.get_batch_dataset": [[23, 28], ["tensorflow.constant", "tensorflow.data.TFRecordDataset().map().shuffle().batch().repeat", "tensorflow.data.TFRecordDataset().map().shuffle().batch", "tensorflow.data.TFRecordDataset().map().shuffle", "tensorflow.data.TFRecordDataset().map", "tensorflow.data.TFRecordDataset"], "function", ["None"], ["", "def", "get_batch_dataset", "(", "record_file", ",", "parser", ",", "config", ")", ":", "\n", "    ", "num_threads", "=", "tf", ".", "constant", "(", "config", ".", "num_threads", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "record_file", ")", ".", "map", "(", "parser", ",", "num_parallel_calls", "=", "num_threads", ")", ".", "shuffle", "(", "\n", "config", ".", "capacity", ")", ".", "batch", "(", "config", ".", "train_batch", ")", ".", "repeat", "(", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_util.get_dataset": [[30, 35], ["tensorflow.constant", "tensorflow.data.TFRecordDataset().map().batch().repeat", "tensorflow.data.TFRecordDataset().map().batch", "tensorflow.data.TFRecordDataset().map", "tensorflow.data.TFRecordDataset"], "function", ["None"], ["", "def", "get_dataset", "(", "record_file", ",", "parser", ",", "config", ")", ":", "\n", "    ", "num_threads", "=", "tf", ".", "constant", "(", "config", ".", "num_threads", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "record_file", ")", ".", "map", "(", "\n", "parser", ",", "num_parallel_calls", "=", "num_threads", ")", ".", "batch", "(", "config", ".", "valid_batch", ")", ".", "repeat", "(", "config", ".", "epochs", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_util.evaluate_batch": [[37, 65], ["range", "numpy.asarray", "numpy.asarray", "numpy.mean", "sklearn.metrics.accuracy_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score", "print", "tensorflow.Summary", "tensorflow.Summary", "tensorflow.Summary", "tensorflow.Summary", "tensorflow.Summary", "sess.run", "losses.append", "labels.tolist", "sklearn.metrics.confusion_matrix", "np.asarray.append", "tensorflow.Summary.Value", "tensorflow.Summary.Value", "tensorflow.Summary.Value", "tensorflow.Summary.Value", "tensorflow.Summary.Value", "str"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.None.torch_run.run", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNNType.str"], ["", "def", "evaluate_batch", "(", "model", ",", "num_batches", ",", "eval_file", ",", "sess", ",", "data_type", ",", "handle", ",", "str_handle", ")", ":", "\n", "    ", "losses", ",", "refs", ",", "pres", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "metrics", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "        ", "eids", ",", "loss", ",", "labels", "=", "sess", ".", "run", "(", "[", "model", ".", "eid", ",", "model", ".", "loss", ",", "model", ".", "pre_labels", "]", ",", "\n", "feed_dict", "=", "{", "handle", ":", "str_handle", "}", "if", "handle", "is", "not", "None", "else", "None", ")", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "pres", "+=", "labels", ".", "tolist", "(", ")", "\n", "for", "pid", "in", "eids", ":", "\n", "            ", "refs", ".", "append", "(", "eval_file", "[", "str", "(", "pid", ")", "]", ")", "\n", "\n", "", "", "refs", "=", "np", ".", "asarray", "(", "refs", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "pres", "=", "np", ".", "asarray", "(", "pres", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "metrics", "[", "'loss'", "]", "=", "np", ".", "mean", "(", "losses", ")", "\n", "metrics", "[", "'acc'", "]", "=", "accuracy_score", "(", "refs", ",", "pres", ")", "\n", "metrics", "[", "'precision'", "]", "=", "precision_score", "(", "refs", ",", "pres", ")", "\n", "metrics", "[", "'recall'", "]", "=", "recall_score", "(", "refs", ",", "pres", ")", "\n", "metrics", "[", "'f1'", "]", "=", "f1_score", "(", "refs", ",", "pres", ")", "\n", "print", "(", "confusion_matrix", "(", "refs", ",", "pres", ")", ")", "\n", "# target_names = ['non-causal', 'causal']", "\n", "# print(classification_report(refs, pres, target_names))", "\n", "\n", "loss_sum", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"{}/loss\"", ".", "format", "(", "data_type", ")", ",", "simple_value", "=", "metrics", "[", "'loss'", "]", ")", ",", "]", ")", "\n", "acc_sum", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"{}/acc\"", ".", "format", "(", "data_type", ")", ",", "simple_value", "=", "metrics", "[", "'acc'", "]", ")", ",", "]", ")", "\n", "pre_sum", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"{}/precision\"", ".", "format", "(", "data_type", ")", ",", "simple_value", "=", "metrics", "[", "'precision'", "]", ")", ",", "]", ")", "\n", "rec_sum", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"{}/recall\"", ".", "format", "(", "data_type", ")", ",", "simple_value", "=", "metrics", "[", "'recall'", "]", ")", ",", "]", ")", "\n", "f1_sum", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"{}/f1\"", ".", "format", "(", "data_type", ")", ",", "simple_value", "=", "metrics", "[", "'f1'", "]", ")", ",", "]", ")", "\n", "return", "metrics", ",", "[", "loss_sum", ",", "acc_sum", ",", "pre_sum", ",", "rec_sum", ",", "f1_sum", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.tf_util.print_metrics": [[67, 74], ["logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info"], "function", ["None"], ["", "def", "print_metrics", "(", "metrics", ",", "logger", ",", "type", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'{} metrics'", ".", "format", "(", "type", ")", ")", "\n", "logger", ".", "info", "(", "'Loss - {}'", ".", "format", "(", "metrics", "[", "'loss'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Acc - {}'", ".", "format", "(", "metrics", "[", "'acc'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Precision - {}'", ".", "format", "(", "metrics", "[", "'precision'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Recall - {}'", ".", "format", "(", "metrics", "[", "'recall'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'F1 - {}'", ".", "format", "(", "metrics", "[", "'f1'", "]", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.FocalLoss.__init__": [[152, 161], ["super().__init__", "isinstance", "isinstance", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "0", ",", "alpha", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "if", "isinstance", "(", "alpha", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "self", ".", "alpha", "=", "torch", ".", "Tensor", "(", "[", "alpha", ",", "1", "-", "alpha", "]", ")", "\n", "", "if", "isinstance", "(", "alpha", ",", "list", ")", ":", "\n", "            ", "self", ".", "alpha", "=", "torch", ".", "Tensor", "(", "alpha", ")", "\n", "", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.FocalLoss.forward": [[162, 183], ["target.view.view.view", "torch.log_softmax", "torch.log_softmax", "logpt.view.view.gather", "logpt.view.view.view", "logpt.view.view.exp", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.view", "input.contiguous().view.contiguous().view.transpose", "input.contiguous().view.contiguous().view.contiguous().view", "torch_util.FocalLoss.alpha.gather", "loss.mean", "loss.sum", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "torch_util.FocalLoss.alpha.type", "input.contiguous().view.contiguous().view.data.type", "torch_util.FocalLoss.alpha.type_as", "target.view.view.data.view", "torch.autograd.Variable", "torch.autograd.Variable", "input.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# N,C,H,W => N,C,H*W", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", "# N,C,H*W => N,H*W,C", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "# N,H*W,C => N*H*W,C", "\n", "", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "logpt", "=", "functional", ".", "log_softmax", "(", "input", ",", "dim", "=", "-", "1", ")", "\n", "logpt", "=", "logpt", ".", "gather", "(", "1", ",", "target", ")", "\n", "logpt", "=", "logpt", ".", "view", "(", "-", "1", ")", "\n", "pt", "=", "logpt", ".", "exp", "(", ")", "\n", "if", "self", ".", "alpha", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "alpha", ".", "type", "(", ")", "!=", "input", ".", "data", ".", "type", "(", ")", ":", "\n", "                ", "self", ".", "alpha", "=", "self", ".", "alpha", ".", "type_as", "(", "input", ".", "data", ")", "\n", "", "at", "=", "self", ".", "alpha", ".", "gather", "(", "0", ",", "target", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "logpt", "=", "logpt", "*", "Variable", "(", "at", ")", "\n", "", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "logpt", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.NeuralFocal.__init__": [[191, 197], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["def", "__init__", "(", "self", ",", "label_size", ",", "gamma", "=", "2.0", ",", "alpha", "=", "0.75", ",", "epsilon", "=", "1.e-9", ")", ":", "\n", "        ", "super", "(", "NeuralFocal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_cls", "=", "label_size", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.NeuralFocal.forward": [[198, 215], ["target.view().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "one_hot_key.scatter_.scatter_.scatter_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "loss.sum.sum.sum", "loss.sum.sum.mean", "target.view().long.size", "target.view", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            logits: model's output, shape of [batch_size, num_cls]\n            target: ground truth labels, shape of [batch_size]\n        Returns:\n            shape of [batch_size]\n        \"\"\"", "\n", "idx", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", "\n", "one_hot_key", "=", "torch", ".", "zeros", "(", "idx", ".", "size", "(", "0", ")", ",", "self", ".", "num_cls", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "idx", ".", "device", ")", "\n", "one_hot_key", "=", "one_hot_key", ".", "scatter_", "(", "1", ",", "idx", ",", "1", ")", "\n", "logits", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "-", "self", ".", "alpha", "*", "one_hot_key", "*", "torch", ".", "pow", "(", "(", "1", "-", "logits", ")", ",", "self", ".", "gamma", ")", "*", "(", "logits", "+", "self", ".", "epsilon", ")", ".", "log", "(", ")", "\n", "loss", "=", "loss", ".", "sum", "(", "1", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.get_batch": [[16, 35], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "ids.append", "np.asarray.append", "np.asarray.append", "np.asarray.append", "np.asarray.append", "np.asarray.append", "np.asarray.append", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "get_batch", "(", "samples", ",", "device", ")", ":", "\n", "    ", "ids", ",", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "cau_labels", ",", "seq_lens", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "sample", "in", "samples", ":", "\n", "        ", "ids", ".", "append", "(", "sample", "[", "'id'", "]", ")", "\n", "tokens", ".", "append", "(", "sample", "[", "'tokens'", "]", ")", "\n", "tokens_pre", ".", "append", "(", "sample", "[", "'tokens_pre'", "]", ")", "\n", "tokens_alt", ".", "append", "(", "sample", "[", "'tokens_alt'", "]", ")", "\n", "tokens_cur", ".", "append", "(", "sample", "[", "'tokens_cur'", "]", ")", "\n", "cau_labels", ".", "append", "(", "sample", "[", "'cau_label'", "]", ")", "\n", "seq_lens", ".", "append", "(", "sample", "[", "'length'", "]", ")", "\n", "", "tokens", "=", "np", ".", "asarray", "(", "tokens", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "tokens_pre", "=", "np", ".", "asarray", "(", "tokens_pre", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "tokens_alt", "=", "np", ".", "asarray", "(", "tokens_alt", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "tokens_cur", "=", "np", ".", "asarray", "(", "tokens_cur", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "cau_labels", "=", "np", ".", "asarray", "(", "cau_labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "seq_lens", "=", "np", ".", "asarray", "(", "seq_lens", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "return", "torch", ".", "from_numpy", "(", "tokens", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "from_numpy", "(", "tokens_pre", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "from_numpy", "(", "tokens_alt", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "from_numpy", "(", "tokens_cur", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "from_numpy", "(", "cau_labels", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "from_numpy", "(", "seq_lens", ")", ".", "to", "(", "device", ")", ",", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util._sequence_mask": [[37, 49], ["sequence_length.size", "torch.arange().long", "torch.arange().long", "torch.arange().long.unsqueeze().expand", "torch.autograd.Variable", "sequence_length.unsqueeze().expand_as", "sequence_length.data.max", "seq_range_expand.cuda.cuda", "torch.arange", "torch.arange", "torch.arange().long.unsqueeze", "sequence_length.unsqueeze"], "function", ["None"], ["", "def", "_sequence_mask", "(", "sequence_length", ",", "max_len", "=", "None", ")", ":", "\n", "    ", "if", "max_len", "is", "None", ":", "\n", "        ", "max_len", "=", "sequence_length", ".", "data", ".", "max", "(", ")", "\n", "", "batch_size", "=", "sequence_length", ".", "size", "(", "0", ")", "\n", "seq_range", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "long", "(", ")", "\n", "seq_range_expand", "=", "seq_range", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "max_len", ")", "\n", "seq_range_expand", "=", "Variable", "(", "seq_range_expand", ")", "\n", "if", "sequence_length", ".", "is_cuda", ":", "\n", "        ", "seq_range_expand", "=", "seq_range_expand", ".", "cuda", "(", ")", "\n", "", "seq_length_expand", "=", "(", "sequence_length", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "seq_range_expand", ")", ")", "\n", "\n", "return", "seq_range_expand", "<", "seq_length_expand", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.compute_loss": [[51, 83], ["logits.view", "torch.log_softmax", "torch.mul", "torch.mul", "target.view", "losses_flat.view", "torch_util._sequence_mask", "logits.size", "torch.gather", "torch.gather", "_sequence_mask.float", "losses_flat.view.sum", "length.float().sum", "target.size", "target.size", "len", "length.float", "logits.view.size"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util._sequence_mask"], ["", "def", "compute_loss", "(", "logits", ",", "target", ",", "length", ",", "weight", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        logits: A Variable containing a FloatTensor of size\n            (batch, max_len, num_classes) which contains the\n            unnormalized probability for each class.\n        target: A Variable containing a LongTensor of size\n            (batch, max_len) which contains the index of the true\n            class for each corresponding step.\n        length: A Variable containing a LongTensor of size (batch,)\n            which contains the length of each data in a batch.\n    Returns:\n        loss: An average loss value masked by the length.\n    \"\"\"", "\n", "\n", "# logits_flat: (batch * max_len, num_classes)", "\n", "logits_flat", "=", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", "\n", "# log_probs_flat: (batch * max_len, num_classes)", "\n", "log_probs_flat", "=", "functional", ".", "log_softmax", "(", "logits_flat", ",", "dim", "=", "len", "(", "logits_flat", ".", "size", "(", ")", ")", "-", "1", ")", "\n", "log_probs_flat", "=", "torch", ".", "mul", "(", "log_probs_flat", ",", "weight", ")", "\n", "# target_flat: (batch * max_len, 1)", "\n", "target_flat", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "# losses_flat: (batch * max_len, 1)", "\n", "losses_flat", "=", "-", "torch", ".", "gather", "(", "log_probs_flat", ",", "dim", "=", "1", ",", "index", "=", "target_flat", ")", "\n", "# losses: (batch, max_len)", "\n", "losses", "=", "losses_flat", ".", "view", "(", "*", "target", ".", "size", "(", ")", ")", "\n", "# mask: (batch, max_len)", "\n", "mask", "=", "_sequence_mask", "(", "sequence_length", "=", "length", ",", "max_len", "=", "target", ".", "size", "(", "1", ")", ")", "\n", "losses", "=", "losses", "*", "mask", ".", "float", "(", ")", "\n", "loss", "=", "losses", ".", "sum", "(", ")", "/", "length", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.evaluate_batch": [[85, 133], ["model.eval", "enumerate", "numpy.mean", "sklearn.metrics.accuracy_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score", "sklearn.metrics.roc_curve", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.auc", "sklearn.metrics.auc", "logger.info", "logger.info", "range", "torch_util.get_batch", "model", "cau_outputs.detach.detach", "torch.nn.CrossEntropyLoss.", "losses.append", "[].numpy", "[].numpy", "cau_labels.cpu().numpy.cpu().numpy", "[].numpy.tolist", "[].numpy.tolist", "cau_labels.cpu().numpy.tolist", "sklearn.metrics.confusion_matrix", "torch_util.FocalLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "criterion.item", "zip", "cau_labels.cpu().numpy.cpu", "torch.max", "torch.max", "cau_outputs.detach.cpu", "fn.append", "fp.append", "cau_outputs.detach.cpu"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.get_batch"], ["", "def", "evaluate_batch", "(", "model", ",", "data_num", ",", "batch_size", ",", "eval_file", ",", "device", ",", "is_fc", ",", "data_type", ",", "logger", ")", ":", "\n", "    ", "losses", "=", "[", "]", "\n", "fp", ",", "fn", "=", "[", "]", ",", "[", "]", "\n", "causality_preds", ",", "causality_scores", ",", "causality_labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "metrics", "=", "{", "}", "\n", "model", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "range", "(", "0", ",", "data_num", ",", "batch_size", ")", ")", ":", "\n", "        ", "start_idx", "=", "batch", "\n", "end_idx", "=", "start_idx", "+", "batch_size", "\n", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "cau_labels", ",", "seq_lens", ",", "eids", "=", "get_batch", "(", "eval_file", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "device", ")", "\n", "cau_outputs", "=", "model", "(", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "seq_lens", ")", "\n", "cau_outputs", "=", "cau_outputs", ".", "detach", "(", ")", "\n", "\n", "if", "is_fc", ":", "\n", "            ", "criterion", "=", "FocalLoss", "(", "gamma", "=", "2", ",", "alpha", "=", "0.75", ")", "\n", "", "else", ":", "\n", "            ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "loss", "=", "criterion", "(", "cau_outputs", ",", "cau_labels", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "cau_preds", "=", "torch", ".", "max", "(", "cau_outputs", ".", "cpu", "(", ")", ",", "1", ")", "[", "1", "]", ".", "numpy", "(", ")", "\n", "cau_scores", "=", "cau_outputs", ".", "cpu", "(", ")", "[", ":", ",", "1", "]", ".", "numpy", "(", ")", "\n", "cau_labels", "=", "cau_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "causality_preds", "+=", "cau_preds", ".", "tolist", "(", ")", "\n", "causality_scores", "+=", "cau_scores", ".", "tolist", "(", ")", "\n", "causality_labels", "+=", "cau_labels", ".", "tolist", "(", ")", "\n", "if", "data_type", "==", "'valid'", "or", "data_type", "==", "'eval'", ":", "\n", "            ", "for", "pred", ",", "label", ",", "eid", "in", "zip", "(", "cau_preds", ",", "cau_labels", ",", "eids", ")", ":", "\n", "                ", "if", "label", "==", "1", "and", "pred", "==", "0", ":", "\n", "                    ", "fn", ".", "append", "(", "eid", ")", "\n", "", "if", "label", "==", "0", "and", "pred", "==", "1", ":", "\n", "                    ", "fp", ".", "append", "(", "eid", ")", "\n", "\n", "", "", "", "", "metrics", "[", "'loss'", "]", "=", "np", ".", "mean", "(", "losses", ")", "\n", "metrics", "[", "'acc'", "]", "=", "accuracy_score", "(", "causality_labels", ",", "causality_preds", ")", "\n", "metrics", "[", "'precision'", "]", "=", "precision_score", "(", "causality_labels", ",", "causality_preds", ")", "\n", "metrics", "[", "'recall'", "]", "=", "recall_score", "(", "causality_labels", ",", "causality_preds", ")", "\n", "metrics", "[", "'f1'", "]", "=", "f1_score", "(", "causality_labels", ",", "causality_preds", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "causality_labels", ",", "causality_scores", ")", "\n", "(", "precisions", ",", "recalls", ",", "_", ")", "=", "precision_recall_curve", "(", "causality_labels", ",", "causality_scores", ")", "\n", "metrics", "[", "'auc_roc'", "]", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "metrics", "[", "'auc_prc'", "]", "=", "auc", "(", "recalls", ",", "precisions", ")", "\n", "if", "data_type", "==", "'valid'", "or", "data_type", "==", "'eval'", ":", "\n", "        ", "metrics", "[", "'fp'", "]", "=", "fp", "\n", "metrics", "[", "'fn'", "]", "=", "fn", "\n", "", "logger", ".", "info", "(", "'Full confusion matrix'", ")", "\n", "logger", ".", "info", "(", "confusion_matrix", "(", "causality_labels", ",", "causality_preds", ")", ")", "\n", "return", "metrics", ",", "fpr", ",", "tpr", ",", "precisions", ",", "recalls", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.case_batch": [[135, 149], ["model.eval", "enumerate", "range", "torch_util.get_batch", "model", "cau_outputs.detach.detach", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax.cpu().numpy", "torch.nn.Softmax.cpu", "torch.nn.Softmax."], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.get_batch"], ["", "def", "case_batch", "(", "model", ",", "data_num", ",", "batch_size", ",", "eval_file", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "range", "(", "0", ",", "data_num", ",", "batch_size", ")", ")", ":", "\n", "        ", "start_idx", "=", "batch", "\n", "end_idx", "=", "start_idx", "+", "batch_size", "\n", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "cau_labels", ",", "seq_lens", ",", "eids", "=", "get_batch", "(", "eval_file", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "device", ")", "\n", "cau_outputs", "=", "model", "(", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "seq_lens", ")", "\n", "cau_outputs", "=", "cau_outputs", ".", "detach", "(", ")", "\n", "\n", "m", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "cau_scores", "=", "m", "(", "cau_outputs", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "return", "cau_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.draw_att": [[217, 247], ["model.eval", "enumerate", "range", "torch_util.get_batch", "model", "tokens.cpu().numpy.cpu().numpy", "seq_lens.cpu().numpy.cpu().numpy", "len", "range", "matplotlib.subplots", "range", "tokens.cpu().numpy.cpu", "seq_lens.cpu().numpy.cpu", "torch_util.trans_ids", "model.transformer.blocks[].self_attn.attn[].detach().cpu().numpy", "range", "matplotlib.savefig", "axs[].set_title", "axs[].tick_params", "axs[].tick_params", "torch_util.draw", "str", "os.path.join", "model.transformer.blocks[].self_attn.attn[].detach().cpu", "str", "str", "model.transformer.blocks[].self_attn.attn[].detach"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.get_batch", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.trans_ids", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.draw", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNNType.str", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNNType.str", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNNType.str"], ["", "", "def", "draw_att", "(", "model", ",", "data_num", ",", "batch_size", ",", "test_file", ",", "device", ",", "id2token_file", ",", "pics_dir", ",", "nblock", ",", "nhead", ",", "logger", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "range", "(", "0", ",", "data_num", ",", "batch_size", ")", ")", ":", "\n", "        ", "start_idx", "=", "batch", "\n", "end_idx", "=", "start_idx", "+", "batch_size", "\n", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "cau_labels", ",", "seq_lens", ",", "eids", "=", "get_batch", "(", "test_file", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "device", ")", "\n", "cau_outputs", "=", "model", "(", "tokens", ",", "tokens_pre", ",", "tokens_alt", ",", "tokens_cur", ",", "seq_lens", ")", "\n", "\n", "tokens", "=", "tokens", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "seq_lens", "=", "seq_lens", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "nbatch", "=", "len", "(", "tokens", ")", "\n", "for", "block", "in", "range", "(", "nblock", ")", ":", "\n", "# logger.info('Block - {}'.format(block + 1))", "\n", "            ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "1", ",", "nhead", ",", "figsize", "=", "(", "16", ",", "9", ")", ")", "\n", "for", "idx", "in", "range", "(", "nbatch", ")", ":", "\n", "                ", "sample", "=", "trans_ids", "(", "tokens", "[", "idx", "]", "[", ":", "seq_lens", "[", "idx", "]", "]", ",", "id2token_file", ")", "\n", "# logger.info('Sample {} - {}'.format(eids[idx], sample))", "\n", "atten_weights", "=", "model", ".", "transformer", ".", "blocks", "[", "block", "]", ".", "self_attn", ".", "attn", "[", "idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# atten_weights = model.__getattr__('self_attention_%d' % block).atten_weights[head_idx:tail_idx].detach()", "\n", "# atten_weights = atten_weights.cpu().numpy()", "\n", "for", "h", "in", "range", "(", "nhead", ")", ":", "\n", "# logger.info('Head - {}'.format(h + 1))", "\n", "# print(atten_weights[h])", "\n", "                    ", "axs", "[", "h", "]", ".", "set_title", "(", "'head_'", "+", "str", "(", "h", ")", ",", "fontsize", "=", "12", ")", "\n", "axs", "[", "h", "]", ".", "tick_params", "(", "axis", "=", "'x'", ",", "labelsize", "=", "10", ")", "\n", "axs", "[", "h", "]", ".", "tick_params", "(", "axis", "=", "'y'", ",", "labelsize", "=", "10", ")", "\n", "draw", "(", "atten_weights", "[", "h", "]", "[", ":", "seq_lens", "[", "idx", "]", ",", ":", "seq_lens", "[", "idx", "]", "]", ",", "sample", ",", "sample", "if", "h", "==", "0", "else", "[", "]", ",", "axs", "[", "h", "]", ")", "\n", "", "file_name", "=", "'block_'", "+", "str", "(", "block", "+", "1", ")", "+", "'_sample_'", "+", "str", "(", "eids", "[", "idx", "]", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "pics_dir", ",", "file_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.draw_curve": [[249, 261], ["matplotlib.subplots", "ax1.plot", "ax1.set_title", "ax1.set_xlabel", "ax1.set_ylabel", "ax2.plot", "ax2.set_title", "ax2.set_xlabel", "ax2.set_ylabel", "matplotlib.savefig", "os.path.join"], "function", ["None"], ["", "", "", "", "def", "draw_curve", "(", "fpr", ",", "tpr", ",", "precisions", ",", "recalls", ",", "pics_dir", ")", ":", "\n", "    ", "f", ",", "(", "ax1", ",", "ax2", ")", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "21", ",", "9", ")", ",", "ncols", "=", "2", ")", "\n", "ax1", ".", "plot", "(", "fpr", ",", "tpr", ")", "\n", "ax1", ".", "set_title", "(", "'ROC Curve'", ")", "\n", "ax1", ".", "set_xlabel", "(", "'FPR'", ")", "\n", "ax1", ".", "set_ylabel", "(", "'TPR'", ")", "\n", "\n", "ax2", ".", "plot", "(", "recalls", ",", "precisions", ")", "\n", "ax2", ".", "set_title", "(", "'Precision-Recall Curve'", ")", "\n", "ax2", ".", "set_xlabel", "(", "'Recall'", ")", "\n", "ax2", ".", "set_ylabel", "(", "'Precision'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "pics_dir", ",", "'ROC-PRC-Curve.jpg'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.trans_ids": [[263, 272], ["tokens.append", "str"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNNType.str"], ["", "def", "trans_ids", "(", "ids", ",", "id2token_file", ")", ":", "\n", "    ", "tokens", "=", "[", "]", "\n", "for", "tid", "in", "ids", ":", "\n", "# if tid > 0:", "\n", "        ", "tokens", ".", "append", "(", "id2token_file", "[", "str", "(", "tid", ")", "]", ")", "\n", "# else:", "\n", "#     break", "\n", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.draw": [[274, 277], ["seaborn.heatmap"], "function", ["None"], ["", "def", "draw", "(", "data", ",", "x", ",", "y", ",", "ax", ")", ":", "\n", "    ", "seaborn", ".", "heatmap", "(", "data", ",", "linewidths", "=", "0.05", ",", "xticklabels", "=", "x", ",", "square", "=", "True", ",", "yticklabels", "=", "y", ",", "vmin", "=", "0.0", ",", "vmax", "=", "1.0", ",", "\n", "cbar", "=", "False", ",", "ax", "=", "ax", ",", "cmap", "=", "'Blues'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.dump_json": [[279, 283], ["f.close", "open", "f.write", "ujson.dumps"], "function", ["None"], ["", "def", "dump_json", "(", "file_path", ",", "obj", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "obj", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.load_json": [[285, 290], ["f.close", "open", "ujson.load"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "def", "load_json", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.save_loss": [[292, 295], ["pandas.DataFrame", "pd.DataFrame.to_csv", "os.path.join"], "function", ["None"], ["", "def", "save_loss", "(", "train_loss", ",", "valid_loss", ",", "path", ")", ":", "\n", "    ", "df", "=", "pd", ".", "DataFrame", "(", "{", "'train'", ":", "train_loss", ",", "'valid'", ":", "valid_loss", "}", ")", "\n", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'loss.csv'", ")", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.torch_util.save_metrics": [[297, 301], ["pandas.DataFrame", "time.strftime", "pd.DataFrame.to_csv", "time.localtime", "os.path.join"], "function", ["None"], ["", "def", "save_metrics", "(", "me_array", ",", "path", ")", ":", "\n", "    ", "df", "=", "pd", ".", "DataFrame", "(", "me_array", ",", "columns", "=", "[", "'acc'", ",", "'precision'", ",", "'recall'", ",", "'f1'", ",", "'roc'", ",", "'prc'", ",", "'epoch'", "]", ")", "\n", "ts", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H%M%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "path", ",", "ts", "+", "'_metrics.csv'", ")", ",", "index", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.utils.split_train.preprocess_train": [[7, 43], ["os.path.join", "open().readlines", "print", "print", "pandas.DataFrame", "pd.DataFrame.to_csv", "line.strip().split.strip().split", "int", "len", "len", "len", "open", "round", "os.path.join", "line.strip().split.strip", "random.random", "neg_examples.append", "round", "random.random", "pos_examples.append", "str"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNNType.str"], ["def", "preprocess_train", "(", "file_path", ",", "file_name", ",", "prob", ")", ":", "\n", "    ", "pos_examples", "=", "[", "]", "\n", "neg_examples", "=", "[", "]", "\n", "in_path", "=", "os", ".", "path", ".", "join", "(", "file_path", ",", "file_name", ")", "\n", "lines", "=", "open", "(", "in_path", ",", "'r'", ",", "encoding", "=", "'ISO-8859-1'", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "line", "[", "0", "]", "==", "'labels'", "and", "line", "[", "1", "]", "==", "'examples'", ":", "\n", "            ", "continue", "\n", "", "label", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "if", "label", "==", "0", ":", "\n", "            ", "tmp", "=", "round", "(", "random", ".", "random", "(", ")", ",", "4", ")", "\n", "if", "tmp", "<=", "prob", ":", "\n", "                ", "neg_examples", ".", "append", "(", "line", ")", "\n", "", "", "elif", "label", "==", "1", ":", "\n", "            ", "tmp", "=", "round", "(", "random", ".", "random", "(", ")", ",", "4", ")", "\n", "if", "tmp", "<=", "prob", ":", "\n", "                ", "pos_examples", ".", "append", "(", "line", ")", "\n", "\n", "", "", "", "print", "(", "len", "(", "pos_examples", ")", ",", "len", "(", "neg_examples", ")", ")", "\n", "examples", "=", "pos_examples", "+", "neg_examples", "\n", "print", "(", "len", "(", "examples", ")", ")", "\n", "# labels, eng_pre, eng_alt, eng_cur, sim_pre, sim_alt, sim_cur = [], [], [], [], [], [], []", "\n", "# for x in examples:", "\n", "#     labels.append(x[0])", "\n", "#     eng_pre.append(x[1])", "\n", "#     eng_alt.append(x[2])", "\n", "#     eng_cur.append(x[3])", "\n", "#     sim_pre.append(x[4])", "\n", "#     sim_alt.append(x[5])", "\n", "#     sim_cur.append(x[6])", "\n", "\n", "# df = pd.DataFrame({'label': labels, 'eng_pre': eng_pre, 'eng_alt': eng_alt, 'eng_cur': eng_cur,", "\n", "#                    'sim_pre': sim_pre, 'sim_alt': sim_alt, 'sim_cur': sim_cur})", "\n", "df", "=", "pd", ".", "DataFrame", "(", "{", "'label'", ":", "[", "x", "[", "0", "]", "for", "x", "in", "examples", "]", ",", "'examples'", ":", "[", "x", "[", "1", "]", "for", "x", "in", "examples", "]", "}", ")", "\n", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "file_path", ",", "'train_boot_p'", "+", "str", "(", "prob", ")", "[", "-", "1", "]", ")", "+", "'.csv'", ",", "sep", "=", "'\\t'", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_attention.layer_normalization.__init__": [[9, 18], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "'''Applies layer normalization.\n        Args:\n          epsilon: A floating number. A very small number for preventing ZeroDivision Error.\n        '''", "\n", "super", "(", "layer_normalization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_attention.layer_normalization.forward": [[19, 23], ["x.mean", "x.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "self", ".", "gamma", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "epsilon", ")", "+", "self", ".", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_attention.WordEmbedding.__init__": [[26, 44], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch_attention.WordEmbedding.lookup_table.data[].fill_"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "num_units", ",", "zeros_pad", "=", "True", ",", "scale", "=", "True", ")", ":", "\n", "        ", "'''Embeds a given Variable.\n        Args:\n          vocab_size: An int. Vocabulary size.\n          num_units: An int. Number of embedding hidden units.\n          zero_pad: A boolean. If True, all the values of the fist row (id 0)\n            should be constant zeros.\n          scale: A boolean. If True. the outputs is multiplied by sqrt num_units.\n        '''", "\n", "super", "(", "WordEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "zeros_pad", "=", "zeros_pad", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "lookup_table", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "vocab_size", ",", "num_units", ")", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "lookup_table", ".", "data", ")", "\n", "if", "self", ".", "zeros_pad", ":", "\n", "            ", "self", ".", "lookup_table", ".", "data", "[", "0", ",", ":", "]", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_attention.WordEmbedding.forward": [[45, 58], ["torch.embedding", "torch.embedding", "torch.embedding", "torch.embedding.cuda"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "zeros_pad", ":", "\n", "            ", "self", ".", "padding_idx", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "padding_idx", "=", "-", "1", "\n", "", "outputs", "=", "F", ".", "embedding", "(", "inputs", ",", "self", ".", "lookup_table", ",", "self", ".", "padding_idx", ",", "None", ",", "2", ",", "False", ",", "False", ")", "\n", "# outputs = self._backend.Embedding.apply(", "\n", "#     inputs, self.lookup_table, self.padding_idx, None, 2, False, False)  # copied from torch.nn.modules.sparse.py", "\n", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "outputs", "=", "outputs", "*", "(", "self", ".", "num_units", "**", "0.5", ")", "\n", "\n", "", "return", "outputs", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_attention.PositionEmbedding.__init__": [[61, 72], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_units", ",", "zeros_pad", "=", "True", ",", "scale", "=", "True", ")", ":", "\n", "        ", "'''Sinusoidal Positional_Encoding.\n        Args:\n          num_units: Output dimensionality\n          zero_pad: Boolean. If True, all the values of the first row (id = 0) should be constant zero\n          scale: Boolean. If True, the output will be multiplied by sqrt num_units(check details from paper)\n        '''", "\n", "super", "(", "PositionEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "zeros_pad", "=", "zeros_pad", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_attention.PositionEmbedding.forward": [[73, 103], ["Variable", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "Variable", "torch.embedding", "torch.embedding", "torch.embedding", "torch.embedding.cuda", "inputs.size", "torch.unsqueeze().repeat().long", "torch.unsqueeze().repeat().long", "torch.unsqueeze().repeat().long", "torch.unsqueeze().repeat().long", "torch.unsqueeze().repeat().long", "torch.unsqueeze().repeat().long", "torch.unsqueeze().repeat().long", "torch.unsqueeze().repeat().long", "torch.unsqueeze().repeat().long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "range", "Variable", "numpy.power", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# inputs: A 2d Tensor with shape of (N, T).", "\n", "        ", "N", ",", "T", "=", "inputs", ".", "size", "(", ")", "[", "0", ":", "2", "]", "\n", "\n", "# First part of the PE function: sin and cos argument", "\n", "position_ind", "=", "Variable", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "arange", "(", "0", ",", "T", ")", ",", "0", ")", ".", "repeat", "(", "N", ",", "1", ")", ".", "long", "(", ")", ")", "\n", "position_enc", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2.", "*", "i", "/", "self", ".", "num_units", ")", "for", "i", "in", "range", "(", "self", ".", "num_units", ")", "]", "\n", "for", "pos", "in", "range", "(", "T", ")", "]", ")", "\n", "\n", "# Second part, apply the cosine to even columns and sin to odds.", "\n", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", ")", "# dim 2i+1", "\n", "\n", "# Convert to a Variable", "\n", "lookup_table", "=", "Variable", "(", "position_enc", ")", "\n", "\n", "if", "self", ".", "zeros_pad", ":", "\n", "            ", "lookup_table", "=", "torch", ".", "cat", "(", "(", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "lookup_table", "[", "1", ":", ",", ":", "]", ")", ",", "0", ")", "\n", "padding_idx", "=", "0", "\n", "", "else", ":", "\n", "            ", "padding_idx", "=", "-", "1", "\n", "", "outputs", "=", "F", ".", "embedding", "(", "position_ind", ",", "lookup_table", ",", "padding_idx", ",", "None", ",", "2", ",", "False", ",", "False", ")", "\n", "# outputs = self._backend.Embedding.apply(", "\n", "#     position_ind, lookup_table, padding_idx, None, 2, False, False)  # copied from torch.nn.modules.sparse.py", "\n", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "outputs", "=", "outputs", "*", "self", ".", "num_units", "**", "0.5", "\n", "\n", "", "return", "outputs", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_attention.Multihead_Attention.__init__": [[106, 127], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch_attention.layer_normalization", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_units", ",", "num_heads", "=", "8", ",", "dropout", "=", "0", ",", "causality", "=", "False", ")", ":", "\n", "        ", "'''Applies multihead attention.\n        Args:\n            num_units: A scalar. Attention size.\n            dropout: A floating point number.\n            causality: Boolean. If true, units that reference the future are masked.\n            num_heads: An int. Number of heads.\n        '''", "\n", "super", "(", "Multihead_Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "dropout_rate", "=", "dropout", "\n", "self", ".", "causality", "=", "causality", "\n", "self", ".", "atten_weights", "=", "None", "\n", "self", ".", "Q_proj", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "num_units", ",", "self", ".", "num_units", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "K_proj", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "num_units", ",", "self", ".", "num_units", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "V_proj", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "num_units", ",", "self", ".", "num_units", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "output_dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout_rate", ")", "\n", "\n", "self", ".", "normalization", "=", "layer_normalization", "(", "self", ".", "num_units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_attention.Multihead_Attention.forward": [[128, 196], ["torch_attention.Multihead_Attention.Q_proj", "torch_attention.Multihead_Attention.K_proj", "torch_attention.Multihead_Attention.V_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.unsqueeze().repeat.repeat", "torch.unsqueeze().repeat.repeat", "torch.unsqueeze().repeat.repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "Variable", "torch.unsqueeze().repeat.eq().float", "torch.unsqueeze().repeat.eq().float", "torch.unsqueeze().repeat.eq().float", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.unsqueeze().repeat.repeat", "torch.unsqueeze().repeat.repeat", "torch.unsqueeze().repeat.repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch_attention.Multihead_Attention.output_dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_attention.Multihead_Attention.normalization", "mini_batch.transpose.transpose.transpose", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "Variable", "Variable", "Variable.eq().float", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "mini_batch.transpose.transpose.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "mini_batch.transpose.transpose.size", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.unsqueeze().repeat.eq", "torch.unsqueeze().repeat.eq", "torch.unsqueeze().repeat.eq", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "mini_batch.transpose.transpose.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "Variable.eq", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch_attention.Multihead_Attention.size", "outputs[].size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch_attention.Multihead_Attention.size", "Variable.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mini_batch", ")", ":", "\n", "# keys, values: same shape of [N, T_k, C_k]", "\n", "# queries: A 3d Variable with shape of [N, T_q, C_q]", "\n", "        ", "if", "mini_batch", ".", "size", "(", ")", "[", "-", "1", "]", "!=", "self", ".", "num_units", ":", "\n", "            ", "mini_batch", "=", "mini_batch", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# Linear projections", "\n", "", "Q", "=", "self", ".", "Q_proj", "(", "mini_batch", ")", "# (N, T_q, C)", "\n", "K", "=", "self", ".", "K_proj", "(", "mini_batch", ")", "# (N, T_q, C)", "\n", "V", "=", "self", ".", "V_proj", "(", "mini_batch", ")", "# (N, T_q, C)", "\n", "\n", "# Split and concat", "\n", "Q_", "=", "torch", ".", "cat", "(", "torch", ".", "chunk", "(", "Q", ",", "self", ".", "num_heads", ",", "dim", "=", "2", ")", ",", "dim", "=", "0", ")", "# (h*N, T_q, C/h)", "\n", "K_", "=", "torch", ".", "cat", "(", "torch", ".", "chunk", "(", "K", ",", "self", ".", "num_heads", ",", "dim", "=", "2", ")", ",", "dim", "=", "0", ")", "# (h*N, T_q, C/h)", "\n", "V_", "=", "torch", ".", "cat", "(", "torch", ".", "chunk", "(", "V", ",", "self", ".", "num_heads", ",", "dim", "=", "2", ")", ",", "dim", "=", "0", ")", "# (h*N, T_q, C/h)", "\n", "\n", "# Multiplication", "\n", "outputs", "=", "torch", ".", "bmm", "(", "Q_", ",", "K_", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Scale", "\n", "outputs", "=", "outputs", "/", "(", "K_", ".", "size", "(", ")", "[", "-", "1", "]", "**", "0.5", ")", "\n", "\n", "# Key Masking", "\n", "key_masks", "=", "torch", ".", "sign", "(", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "mini_batch", ",", "dim", "=", "-", "1", ")", ")", ")", "# (N, T_k)", "\n", "key_masks", "=", "key_masks", ".", "repeat", "(", "self", ".", "num_heads", ",", "1", ")", "# (h*N, T_k)", "\n", "key_masks", "=", "torch", ".", "unsqueeze", "(", "key_masks", ",", "1", ")", ".", "repeat", "(", "1", ",", "mini_batch", ".", "size", "(", ")", "[", "1", "]", ",", "1", ")", "# (h*N, T_q, T_k)", "\n", "\n", "padding", "=", "Variable", "(", "torch", ".", "ones", "(", "*", "outputs", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "*", "(", "-", "2", "**", "32", "+", "1", ")", ")", "\n", "condition", "=", "key_masks", ".", "eq", "(", "0.", ")", ".", "float", "(", ")", "\n", "outputs", "=", "padding", "*", "condition", "+", "outputs", "*", "(", "1.", "-", "condition", ")", "\n", "\n", "# Causality = Future blinding", "\n", "if", "self", ".", "causality", ":", "\n", "            ", "diag_vals", "=", "torch", ".", "ones", "(", "*", "outputs", "[", "0", ",", ":", ",", ":", "]", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "# (T_q, T_k)", "\n", "tril", "=", "torch", ".", "tril", "(", "diag_vals", ",", "diagonal", "=", "0", ")", "# (T_q, T_k)", "\n", "# print(tril)", "\n", "masks", "=", "Variable", "(", "torch", ".", "unsqueeze", "(", "tril", ",", "0", ")", ".", "repeat", "(", "outputs", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "1", ")", ")", "# (h*N, T_q, T_k)", "\n", "\n", "padding", "=", "Variable", "(", "torch", ".", "ones", "(", "*", "masks", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "*", "(", "-", "2", "**", "32", "+", "1", ")", ")", "\n", "condition", "=", "masks", ".", "eq", "(", "0.", ")", ".", "float", "(", ")", "\n", "outputs", "=", "padding", "*", "condition", "+", "outputs", "*", "(", "1.", "-", "condition", ")", "\n", "\n", "# Activation", "\n", "", "outputs", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "-", "1", ")", "# (h*N, T_q, T_k)", "\n", "self", ".", "atten_weights", "=", "outputs", "\n", "\n", "# Query Masking", "\n", "query_masks", "=", "torch", ".", "sign", "(", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "mini_batch", ",", "dim", "=", "-", "1", ")", ")", ")", "# (N, T_q)", "\n", "query_masks", "=", "query_masks", ".", "repeat", "(", "self", ".", "num_heads", ",", "1", ")", "# (h*N, T_q)", "\n", "query_masks", "=", "torch", ".", "unsqueeze", "(", "query_masks", ",", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "mini_batch", ".", "size", "(", ")", "[", "1", "]", ")", "# (h*N, T_q, T_k)", "\n", "outputs", "=", "outputs", "*", "query_masks", "\n", "\n", "# Dropouts", "\n", "outputs", "=", "self", ".", "output_dropout", "(", "outputs", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Weighted sum", "\n", "outputs", "=", "torch", ".", "bmm", "(", "outputs", ",", "V_", ")", "# (h*N, T_q, C/h)", "\n", "\n", "# Restore shape", "\n", "outputs", "=", "torch", ".", "cat", "(", "torch", ".", "chunk", "(", "outputs", ",", "self", ".", "num_heads", ",", "dim", "=", "0", ")", ",", "dim", "=", "2", ")", "# (N, T_q, C)", "\n", "\n", "# Residual connection", "\n", "outputs", "+=", "mini_batch", "\n", "\n", "# Normalize", "\n", "outputs", "=", "self", ".", "normalization", "(", "outputs", ")", "# (N, T_q, C)", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_attention.FeedForward.__init__": [[199, 222], ["torch.Module.__init__", "torch_attention.layer_normalization", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_units", "=", "[", "2048", ",", "512", "]", ")", ":", "\n", "        ", "'''Point-wise feed forward net.\n        Args:\n          in_channels: a number of channels of inputs\n          num_units: A list of two integers.\n        '''", "\n", "super", "(", "FeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_units", "=", "num_units", "\n", "\n", "# nn.Linear is faster than nn.Conv1d", "\n", "self", ".", "conv", "=", "False", "\n", "if", "self", ".", "conv", ":", "\n", "            ", "params", "=", "{", "'in_channels'", ":", "self", ".", "in_channels", ",", "'out_channels'", ":", "self", ".", "num_units", "[", "0", "]", ",", "\n", "'kernel_size'", ":", "1", ",", "'stride'", ":", "1", ",", "'bias'", ":", "True", "}", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "**", "params", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "params", "=", "{", "'in_channels'", ":", "self", ".", "num_units", "[", "0", "]", ",", "'out_channels'", ":", "self", ".", "num_units", "[", "1", "]", ",", "\n", "'kernel_size'", ":", "1", ",", "'stride'", ":", "1", ",", "'bias'", ":", "True", "}", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "**", "params", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "in_channels", ",", "self", ".", "num_units", "[", "0", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Linear", "(", "self", ".", "num_units", "[", "0", "]", ",", "self", ".", "num_units", "[", "1", "]", ")", "\n", "", "self", ".", "normalization", "=", "layer_normalization", "(", "self", ".", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_attention.FeedForward.forward": [[223, 239], ["torch_attention.FeedForward.conv1", "torch_attention.FeedForward.conv2", "inputs.permute.permute.permute", "torch_attention.FeedForward.normalization", "torch_attention.FeedForward.normalization", "torch_attention.FeedForward.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "conv", ":", "\n", "            ", "inputs", "=", "inputs", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "outputs", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "outputs", "=", "self", ".", "conv2", "(", "outputs", ")", "\n", "\n", "# Residual connection", "\n", "outputs", "+=", "inputs", "\n", "\n", "# Layer normalization", "\n", "if", "self", ".", "conv", ":", "\n", "            ", "outputs", "=", "self", ".", "normalization", "(", "outputs", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "self", ".", "normalization", "(", "outputs", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_attention.label_smoothing.__init__": [[242, 249], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "0.1", ")", ":", "\n", "        ", "'''Applies label smoothing. See https://arxiv.org/abs/1512.00567.\n        Args:\n            epsilon: Smoothing rate.\n        '''", "\n", "super", "(", "label_smoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_attention.label_smoothing.forward": [[250, 253], ["inputs.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "K", "=", "inputs", ".", "size", "(", ")", "[", "-", "1", "]", "\n", "return", "(", "(", "1", "-", "self", ".", "epsilon", ")", "*", "inputs", ")", "+", "(", "self", ".", "epsilon", "/", "K", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.EncoderStack.__init__": [[25, 43], ["super().__init__", "range", "attention_module.LayerNormalization", "attention_module.Attention", "attention_module.EncoderStack.layers.append", "attention_module.FeedFowardNetwork", "attention_module.PrePostProcessingWrapper", "attention_module.PrePostProcessingWrapper", "attention_module.PrePostProcessingWrapper"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["def", "__init__", "(", "self", ",", "n_block", ",", "n_hidden", ",", "n_head", ",", "keep_prob", ",", "is_train", ",", "is_ffn_pad", "=", "True", ",", "is_ff", "=", "True", ")", ":", "\n", "        ", "super", "(", "EncoderStack", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "[", "]", "\n", "self", ".", "is_ff", "=", "is_ff", "\n", "for", "_", "in", "range", "(", "n_block", ")", ":", "\n", "# Create sublayers for each layer.", "\n", "# self_attention_layer = SelfAttention(n_hidden, n_head, keep_prob, is_train)", "\n", "            ", "self_attention_layer", "=", "Attention", "(", "n_hidden", ",", "n_head", ",", "keep_prob", ",", "is_train", ")", "\n", "if", "self", ".", "is_ff", ":", "\n", "                ", "feed_forward_network", "=", "FeedFowardNetwork", "(", "n_hidden", ",", "2", "*", "n_hidden", ",", "keep_prob", ",", "is_train", ",", "is_ffn_pad", ")", "\n", "\n", "", "self", ".", "layers", ".", "append", "(", "[", "\n", "PrePostProcessingWrapper", "(", "self_attention_layer", ",", "n_hidden", ",", "keep_prob", ",", "is_train", ")", ",", "\n", "PrePostProcessingWrapper", "(", "feed_forward_network", ",", "n_hidden", ",", "keep_prob", ",", "is_train", ")", "]", "if", "self", ".", "is_ff", "else", "\n", "[", "PrePostProcessingWrapper", "(", "self_attention_layer", ",", "n_hidden", ",", "keep_prob", ",", "is_train", ")", "]", ")", "\n", "\n", "# Create final layer normalization layer.", "\n", "", "self", ".", "output_normalization", "=", "LayerNormalization", "(", "n_hidden", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.EncoderStack.call": [[44, 71], ["enumerate", "attention_module.EncoderStack.output_normalization", "tensorflow.variable_scope", "tensorflow.variable_scope", "attention_module.EncoderStack.", "tensorflow.variable_scope", "feed_forward_network"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs_x", ",", "inputs_y", ",", "attention_bias", ",", "inputs_padding", ")", ":", "\n", "        ", "\"\"\"Return the output of the encoder layer stacks.\n\n        Args:\n          encoder_inputs: tensor with shape [batch_size, input_length, hidden_size]\n          attention_bias: bias for the encoder self-attention layer.\n            [batch_size, 1, 1, input_length]\n          inputs_padding: P\n\n        Returns:\n          Output of encoder layer stack.\n          float32 tensor with shape [batch_size, input_length, hidden_size]\n        \"\"\"", "\n", "for", "n", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "# Run inputs through the sublayers.", "\n", "            ", "self_attention_layer", "=", "layer", "[", "0", "]", "\n", "if", "self", ".", "is_ff", ":", "\n", "                ", "feed_forward_network", "=", "layer", "[", "1", "]", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"layer_%d\"", "%", "n", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "\"self_attention\"", ")", ":", "\n", "                    ", "encoder_outputs", "=", "self_attention_layer", "(", "inputs_x", ",", "inputs_y", ",", "attention_bias", ")", "\n", "", "if", "self", ".", "is_ff", ":", "\n", "                    ", "with", "tf", ".", "variable_scope", "(", "\"ffn\"", ")", ":", "\n", "                        ", "encoder_outputs", "=", "feed_forward_network", "(", "encoder_outputs", ",", "inputs_padding", ")", "\n", "\n", "", "", "", "", "return", "self", ".", "output_normalization", "(", "encoder_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.Attention.__init__": [[76, 92], ["super().__init__", "tensorflow.layers.Dense", "tensorflow.layers.Dense", "tensorflow.layers.Dense", "tensorflow.layers.Dense", "ValueError"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ",", "num_heads", ",", "attention_dropout", ",", "train", ")", ":", "\n", "        ", "if", "hidden_size", "%", "num_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Hidden size must be evenly divisible by the number of heads.\"", ")", "\n", "\n", "", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "attention_dropout", "=", "attention_dropout", "\n", "self", ".", "train", "=", "train", "\n", "\n", "# Layers for linearly projecting the queries, keys, and values.", "\n", "self", ".", "q_dense_layer", "=", "tf", ".", "layers", ".", "Dense", "(", "hidden_size", ",", "use_bias", "=", "False", ",", "name", "=", "\"q\"", ")", "\n", "self", ".", "k_dense_layer", "=", "tf", ".", "layers", ".", "Dense", "(", "hidden_size", ",", "use_bias", "=", "False", ",", "name", "=", "\"k\"", ")", "\n", "self", ".", "v_dense_layer", "=", "tf", ".", "layers", ".", "Dense", "(", "hidden_size", ",", "use_bias", "=", "False", ",", "name", "=", "\"v\"", ")", "\n", "\n", "self", ".", "output_dense_layer", "=", "tf", ".", "layers", ".", "Dense", "(", "hidden_size", ",", "use_bias", "=", "False", ",", "name", "=", "\"output_transform\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.Attention.split_heads": [[93, 117], ["tensorflow.name_scope", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Split x into different heads, and transpose the resulting value.\n\n        The tensor is transposed to insure the inner dimensions hold the correct\n        values during the matrix multiplication.\n\n        Args:\n          x: A tensor with shape [batch_size, length, hidden_size]\n\n        Returns:\n          A tensor with shape [batch_size, num_heads, length, hidden_size/num_heads]\n        \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"split_heads\"", ")", ":", "\n", "            ", "batch_size", "=", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "\n", "length", "=", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "\n", "# Calculate depth of last dimension after it has been split.", "\n", "depth", "=", "(", "self", ".", "hidden_size", "//", "self", ".", "num_heads", ")", "\n", "\n", "# Split the last dimension", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "batch_size", ",", "length", ",", "self", ".", "num_heads", ",", "depth", "]", ")", "\n", "\n", "# Transpose the result", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.Attention.combine_heads": [[118, 132], ["tensorflow.name_scope", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "", "def", "combine_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Combine tensor that has been split.\n\n        Args:\n          x: A tensor [batch_size, num_heads, length, hidden_size/num_heads]\n\n        Returns:\n          A tensor with shape [batch_size, length, hidden_size]\n        \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"combine_heads\"", ")", ":", "\n", "            ", "batch_size", "=", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "\n", "length", "=", "tf", ".", "shape", "(", "x", ")", "[", "2", "]", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "# --> [batch, length, num_heads, depth]", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "[", "batch_size", ",", "length", ",", "self", ".", "hidden_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.Attention.call": [[133, 189], ["attention_module.Attention.q_dense_layer", "attention_module.Attention.k_dense_layer", "attention_module.Attention.v_dense_layer", "attention_module.Attention.split_heads", "attention_module.Attention.split_heads", "attention_module.Attention.split_heads", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.matmul", "attention_module.Attention.combine_heads", "attention_module.Attention.output_dense_layer", "tensorflow.concat", "tensorflow.concat", "tensorflow.nn.dropout"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.Attention.split_heads", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.Attention.split_heads", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.Attention.split_heads", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.Attention.combine_heads"], ["", "", "def", "call", "(", "self", ",", "x", ",", "y", ",", "bias", ",", "cache", "=", "None", ")", ":", "\n", "        ", "\"\"\"Apply attention mechanism to x and y.\n\n        Args:\n          x: a tensor with shape [batch_size, length_x, hidden_size]\n          y: a tensor with shape [batch_size, length_y, hidden_size]\n          bias: attention bias that will be added to the result of the dot product.\n          cache: (Used during prediction) dictionary with tensors containing results\n            of previous attentions. The dictionary must have the items:\n                {\"k\": tensor with shape [batch_size, i, key_channels],\n                 \"v\": tensor with shape [batch_size, i, value_channels]}\n            where i is the current decoded length.\n\n        Returns:\n          Attention layer output with shape [batch_size, length_x, hidden_size]\n        \"\"\"", "\n", "# Linearly project the query (q), key (k) and value (v) using different", "\n", "# learned projections. This is in preparation of splitting them into", "\n", "# multiple heads. Multi-head attention uses multiple queries, keys, and", "\n", "# values rather than regular attention (which uses a single q, k, v).", "\n", "q", "=", "self", ".", "q_dense_layer", "(", "x", ")", "\n", "k", "=", "self", ".", "k_dense_layer", "(", "y", ")", "\n", "v", "=", "self", ".", "v_dense_layer", "(", "y", ")", "\n", "\n", "if", "cache", "is", "not", "None", ":", "\n", "# Combine cached keys and values with new keys and values.", "\n", "            ", "k", "=", "tf", ".", "concat", "(", "[", "cache", "[", "\"k\"", "]", ",", "k", "]", ",", "axis", "=", "1", ")", "\n", "v", "=", "tf", ".", "concat", "(", "[", "cache", "[", "\"v\"", "]", ",", "v", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# Update cache", "\n", "cache", "[", "\"k\"", "]", "=", "k", "\n", "cache", "[", "\"v\"", "]", "=", "v", "\n", "\n", "# Split q, k, v into heads.", "\n", "", "q", "=", "self", ".", "split_heads", "(", "q", ")", "\n", "k", "=", "self", ".", "split_heads", "(", "k", ")", "\n", "v", "=", "self", ".", "split_heads", "(", "v", ")", "\n", "\n", "# Scale q to prevent the dot product between q and k from growing too large.", "\n", "depth", "=", "(", "self", ".", "hidden_size", "//", "self", ".", "num_heads", ")", "\n", "q", "*=", "depth", "**", "-", "0.5", "\n", "\n", "# Calculate dot product attention", "\n", "logits", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "logits", "+=", "bias", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "\"attention_weights\"", ")", "\n", "if", "self", ".", "train", ":", "\n", "            ", "weights", "=", "tf", ".", "nn", ".", "dropout", "(", "weights", ",", "1.0", "-", "self", ".", "attention_dropout", ")", "\n", "", "attention_output", "=", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "\n", "# Recombine heads --> [batch_size, length, hidden_size]", "\n", "attention_output", "=", "self", ".", "combine_heads", "(", "attention_output", ")", "\n", "\n", "# Run the combined outputs through another linear projection layer.", "\n", "attention_output", "=", "self", ".", "output_dense_layer", "(", "attention_output", ")", "\n", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.SelfAttention.call": [[194, 196], ["attention_module.Attention.call"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.LayerNormalization.call"], ["def", "call", "(", "self", ",", "x", ",", "bias", ",", "cache", "=", "None", ")", ":", "\n", "        ", "return", "super", "(", "SelfAttention", ",", "self", ")", ".", "call", "(", "x", ",", "x", ",", "bias", ",", "cache", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.FeedFowardNetwork.__init__": [[201, 213], ["super().__init__", "tensorflow.layers.Dense", "tensorflow.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ",", "filter_size", ",", "relu_dropout", ",", "train", ",", "allow_pad", ")", ":", "\n", "        ", "super", "(", "FeedFowardNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "filter_size", "=", "filter_size", "\n", "self", ".", "relu_dropout", "=", "relu_dropout", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "allow_pad", "=", "allow_pad", "\n", "\n", "self", ".", "filter_dense_layer", "=", "tf", ".", "layers", ".", "Dense", "(", "\n", "filter_size", ",", "use_bias", "=", "True", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "\"filter_layer\"", ")", "\n", "self", ".", "output_dense_layer", "=", "tf", ".", "layers", ".", "Dense", "(", "\n", "hidden_size", ",", "use_bias", "=", "True", ",", "name", "=", "\"output_layer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.FeedFowardNetwork.call": [[214, 264], ["attention_module.FeedFowardNetwork.filter_dense_layer", "attention_module.FeedFowardNetwork.output_dense_layer", "tensorflow.shape", "tensorflow.shape", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.reshape", "tensorflow.to_int32", "tensorflow.reshape", "tensorflow.gather_nd", "tensorflow.expand_dims.set_shape", "tensorflow.expand_dims", "tensorflow.name_scope", "tensorflow.squeeze", "tensorflow.scatter_nd", "tensorflow.reshape", "tensorflow.where"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "padding", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return outputs of the feedforward network.\n\n        Args:\n          x: tensor with shape [batch_size, length, hidden_size]\n          padding: (optional) If set, the padding values are temporarily removed\n            from x (provided self.allow_pad is set). The padding values are placed\n            back in the output tensor in the same locations.\n            shape [batch_size, length]\n\n        Returns:\n          Output of the feedforward network.\n          tensor with shape [batch_size, length, hidden_size]\n        \"\"\"", "\n", "padding", "=", "None", "if", "not", "self", ".", "allow_pad", "else", "padding", "\n", "\n", "# Retrieve dynamically known shapes", "\n", "batch_size", "=", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "\n", "length", "=", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "\n", "if", "padding", "is", "not", "None", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "\"remove_padding\"", ")", ":", "\n", "# Flatten padding to [batch_size*length]", "\n", "                ", "pad_mask", "=", "tf", ".", "reshape", "(", "padding", ",", "[", "-", "1", "]", ")", "\n", "\n", "nonpad_ids", "=", "tf", ".", "to_int32", "(", "tf", ".", "where", "(", "pad_mask", "<", "1e-9", ")", ")", "\n", "\n", "# Reshape x to [batch_size*length, hidden_size] to remove padding", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "self", ".", "hidden_size", "]", ")", "\n", "x", "=", "tf", ".", "gather_nd", "(", "x", ",", "indices", "=", "nonpad_ids", ")", "\n", "\n", "# Reshape x from 2 dimensions to 3 dimensions.", "\n", "x", ".", "set_shape", "(", "[", "None", ",", "self", ".", "hidden_size", "]", ")", "\n", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "output", "=", "self", ".", "filter_dense_layer", "(", "x", ")", "\n", "if", "self", ".", "train", ":", "\n", "            ", "output", "=", "tf", ".", "nn", ".", "dropout", "(", "output", ",", "1.0", "-", "self", ".", "relu_dropout", ")", "\n", "", "output", "=", "self", ".", "output_dense_layer", "(", "output", ")", "\n", "\n", "if", "padding", "is", "not", "None", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "\"re_add_padding\"", ")", ":", "\n", "                ", "output", "=", "tf", ".", "squeeze", "(", "output", ",", "axis", "=", "0", ")", "\n", "output", "=", "tf", ".", "scatter_nd", "(", "\n", "indices", "=", "nonpad_ids", ",", "\n", "updates", "=", "output", ",", "\n", "shape", "=", "[", "batch_size", "*", "length", ",", "self", ".", "hidden_size", "]", "\n", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "batch_size", ",", "length", ",", "self", ".", "hidden_size", "]", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.LayerNormalization.__init__": [[269, 272], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "LayerNormalization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.LayerNormalization.build": [[273, 277], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.ones_initializer", "tensorflow.zeros_initializer"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "_", ")", ":", "\n", "        ", "self", ".", "scale", "=", "tf", ".", "get_variable", "(", "\"layer_norm_scale\"", ",", "[", "self", ".", "hidden_size", "]", ",", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ")", "\n", "self", ".", "bias", "=", "tf", ".", "get_variable", "(", "\"layer_norm_bias\"", ",", "[", "self", ".", "hidden_size", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.LayerNormalization.call": [[278, 283], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.rsqrt"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "        ", "mean", "=", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "[", "-", "1", "]", ",", "keepdims", "=", "True", ")", "\n", "variance", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "x", "-", "mean", ")", ",", "axis", "=", "[", "-", "1", "]", ",", "keepdims", "=", "True", ")", "\n", "norm_x", "=", "(", "x", "-", "mean", ")", "*", "tf", ".", "rsqrt", "(", "variance", "+", "epsilon", ")", "\n", "return", "norm_x", "*", "self", ".", "scale", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.PrePostProcessingWrapper.__init__": [[288, 295], ["attention_module.LayerNormalization"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "layer", ",", "n_hidden", ",", "keep_prob", ",", "train", ")", ":", "\n", "        ", "self", ".", "layer", "=", "layer", "\n", "self", ".", "keep_prob", "=", "keep_prob", "\n", "self", ".", "train", "=", "train", "\n", "\n", "# Create normalization layer", "\n", "self", ".", "layer_norm", "=", "LayerNormalization", "(", "n_hidden", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.PrePostProcessingWrapper.__call__": [[296, 307], ["attention_module.PrePostProcessingWrapper.layer_norm", "attention_module.PrePostProcessingWrapper.layer", "tensorflow.nn.dropout"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.layer_norm"], ["", "def", "__call__", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# Pre_processing: apply layer normalization", "\n", "        ", "y", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# Get layer output", "\n", "y", "=", "self", ".", "layer", "(", "y", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# Postprocessing: apply dropout and residual connection", "\n", "if", "self", ".", "train", ":", "\n", "            ", "y", "=", "tf", ".", "nn", ".", "dropout", "(", "y", ",", "self", ".", "keep_prob", ")", "\n", "", "return", "x", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.self_transformer": [[6, 14], ["attention_module.get_padding_bias", "attention_module.EncoderStack", "EncoderStack.", "tensorflow.nn.dropout", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.get_padding_bias"], ["def", "self_transformer", "(", "embedded_x", ",", "embedded_y", ",", "inputs_padding", ",", "n_block", ",", "n_hidden", ",", "n_head", ",", "keep_prob", ",", "is_ff", ",", "is_train", ")", ":", "\n", "    ", "attention_bias", "=", "get_padding_bias", "(", "inputs_padding", ")", "\n", "if", "is_train", ":", "\n", "        ", "embedded_x", "=", "tf", ".", "nn", ".", "dropout", "(", "embedded_x", ",", "keep_prob", ")", "\n", "embedded_y", "=", "tf", ".", "nn", ".", "dropout", "(", "embedded_y", ",", "keep_prob", ")", "\n", "", "encoder_stack", "=", "EncoderStack", "(", "n_block", ",", "n_hidden", ",", "n_head", ",", "keep_prob", ",", "is_train", ",", "is_ff", ")", "\n", "encoder_outputs", "=", "encoder_stack", "(", "embedded_x", ",", "embedded_y", ",", "attention_bias", ",", "inputs_padding", ")", "\n", "return", "encoder_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.get_padding": [[309, 322], ["tensorflow.name_scope", "tensorflow.to_float", "tensorflow.equal"], "function", ["None"], ["", "", "def", "get_padding", "(", "x", ",", "padding_value", "=", "0", ")", ":", "\n", "    ", "\"\"\"Return float tensor representing the padding values in x.\n\n    Args:\n      x: int tensor with any shape\n      padding_value: int value that\n\n    Returns:\n      flaot tensor with same shape as x containing values 0 or 1.\n        0 -> non-padding, 1 -> padding\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"padding\"", ")", ":", "\n", "        ", "return", "tf", ".", "to_float", "(", "tf", ".", "equal", "(", "x", ",", "padding_value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.attention_module.get_padding_bias": [[324, 341], ["tensorflow.name_scope", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["None"], ["", "", "def", "get_padding_bias", "(", "x", ")", ":", "\n", "    ", "\"\"\"Calculate bias tensor from padding values in tensor.\n\n    Bias tensor that is added to the pre-softmax multi-headed attention logits,\n    which has shape [batch_size, num_heads, length, length]. The tensor is zero at\n    non-padding locations, and -1e9 (negative infinity) at padding locations.\n\n    Args:\n      x: int tensor with shape [batch_size, length]\n\n    Returns:\n      Attention bias tensor of shape [batch_size, 1, 1, length].\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"attention_bias\"", ")", ":", "\n", "        ", "attention_bias", "=", "x", "*", "_NEG_INF", "\n", "attention_bias", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "attention_bias", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "", "return", "attention_bias", "\n", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.Type.str": [[19, 22], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNNType.str": [[29, 32], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "[", "cls", ".", "RNN", ",", "cls", ".", "LSTM", ",", "cls", ".", "GRU", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNN.__init__": [[39, 66], ["super().__init__", "torch.nn.LSTM", "torch.nn.GRU", "torch.nn.RNN", "TypeError", "drnn_module.RNNType.str"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNNType.str"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "num_layers", "=", "1", ",", "\n", "nonlinearity", "=", "\"tanh\"", ",", "bias", "=", "True", ",", "batch_first", "=", "False", ",", "dropout", "=", "0", ",", "\n", "bidirectional", "=", "False", ",", "rnn_type", "=", "RNNType", ".", "GRU", ")", ":", "\n", "        ", "super", "(", "RNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "if", "rnn_type", "==", "RNNType", ".", "LSTM", ":", "\n", "            ", "self", ".", "rnn", "=", "torch", ".", "nn", ".", "LSTM", "(", "\n", "input_size", ",", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "bias", "=", "bias", ",", "\n", "batch_first", "=", "batch_first", ",", "dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "bidirectional", ")", "\n", "", "elif", "rnn_type", "==", "RNNType", ".", "GRU", ":", "\n", "            ", "self", ".", "rnn", "=", "torch", ".", "nn", ".", "GRU", "(", "\n", "input_size", ",", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "bias", "=", "bias", ",", "\n", "batch_first", "=", "batch_first", ",", "dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "bidirectional", ")", "\n", "", "elif", "rnn_type", "==", "RNNType", ".", "RNN", ":", "\n", "            ", "self", ".", "rnn", "=", "torch", ".", "nn", ".", "RNN", "(", "\n", "input_size", ",", "hidden_size", ",", "vnonlinearity", "=", "nonlinearity", ",", "bias", "=", "bias", ",", "\n", "batch_first", "=", "batch_first", ",", "dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "bidirectional", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Unsupported rnn init type: %s. Supported rnn type is: %s\"", "%", "(", "\n", "rnn_type", ",", "RNNType", ".", "str", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNN.forward": [[67, 113], ["torch.sort", "torch.nn.utils.rnn.pad_packed_sequence", "seq_lengths.int.int.int", "torch.sort", "torch.nn.utils.rnn.pack_padded_sequence", "drnn_module.RNN.rnn", "drnn_module.RNN.rnn", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "seq_lengths", "=", "None", ",", "init_state", "=", "None", ",", "\n", "ori_state", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs:\n            seq_lengths:\n            init_state:\n            ori_state: If true, will return ori state generate by rnn. Else will\n                       will return formatted state\n        :return:\n        \"\"\"", "\n", "if", "seq_lengths", "is", "not", "None", ":", "\n", "            ", "seq_lengths", "=", "seq_lengths", ".", "int", "(", ")", "\n", "sorted_seq_lengths", ",", "indices", "=", "torch", ".", "sort", "(", "seq_lengths", ",", "\n", "descending", "=", "True", ")", "\n", "if", "self", ".", "batch_first", ":", "\n", "                ", "sorted_inputs", "=", "inputs", "[", "indices", "]", "\n", "", "else", ":", "\n", "                ", "sorted_inputs", "=", "inputs", "[", ":", ",", "indices", "]", "\n", "", "packed_inputs", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "sorted_inputs", ",", "sorted_seq_lengths", ",", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "outputs", ",", "state", "=", "self", ".", "rnn", "(", "packed_inputs", ",", "init_state", ")", "\n", "", "else", ":", "\n", "            ", "outputs", ",", "state", "=", "self", ".", "rnn", "(", "inputs", ",", "init_state", ")", "\n", "\n", "", "if", "ori_state", ":", "\n", "            ", "return", "outputs", ",", "state", "\n", "", "if", "self", ".", "rnn_type", "==", "RNNType", ".", "LSTM", ":", "\n", "            ", "state", "=", "state", "[", "0", "]", "\n", "", "if", "self", ".", "bidirectional", ":", "\n", "            ", "last_layers_hn", "=", "state", "[", "2", "*", "(", "self", ".", "num_layers", "-", "1", ")", ":", "]", "\n", "last_layers_hn", "=", "torch", ".", "cat", "(", "\n", "(", "last_layers_hn", "[", "0", "]", ",", "last_layers_hn", "[", "1", "]", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "last_layers_hn", "=", "state", "[", "self", ".", "num_layers", "-", "1", ":", "]", "\n", "last_layers_hn", "=", "last_layers_hn", "[", "0", "]", "\n", "\n", "", "_", ",", "revert_indices", "=", "torch", ".", "sort", "(", "indices", ",", "descending", "=", "False", ")", "\n", "last_layers_hn", "=", "last_layers_hn", "[", "revert_indices", "]", "\n", "pad_output", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "\n", "outputs", ",", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "if", "self", ".", "batch_first", ":", "\n", "            ", "pad_output", "=", "pad_output", "[", "revert_indices", "]", "\n", "", "else", ":", "\n", "            ", "pad_output", "=", "pad_output", "[", ":", ",", "revert_indices", "]", "\n", "", "return", "pad_output", ",", "last_layers_hn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.Encoder.__init__": [[12, 20], ["torch.Module.__init__", "torch_transformer.MultiHeadedAttention", "torch_transformer.PositionwiseFeedForward", "torch_transformer.EncoderLayer", "torch_transformer.clones", "torch_transformer.LayerNorm", "c", "c"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.clones"], ["def", "__init__", "(", "self", ",", "n_head", ",", "n_block", ",", "n_dim", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "c", "=", "copy", ".", "deepcopy", "\n", "attn", "=", "MultiHeadedAttention", "(", "n_head", ",", "n_dim", ",", "dropout", ")", "\n", "ff", "=", "PositionwiseFeedForward", "(", "n_dim", ",", "4", "*", "n_dim", ",", "dropout", ")", "\n", "encoder_layer", "=", "EncoderLayer", "(", "n_dim", ",", "c", "(", "attn", ")", ",", "c", "(", "ff", ")", ",", "dropout", ")", "\n", "self", ".", "blocks", "=", "clones", "(", "encoder_layer", ",", "n_block", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "encoder_layer", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.Encoder.forward": [[21, 26], ["torch_transformer.Encoder.norm", "block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"Pass the input (and mask) through each layer in turn.\"", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ",", "mask", ")", "\n", "", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.EncoderLayer.__init__": [[31, 37], ["torch.Module.__init__", "torch_transformer.clones", "torch_transformer.SublayerConnection"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.clones"], ["def", "__init__", "(", "self", ",", "size", ",", "self_attn", ",", "feed_forward", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "self", ".", "feed_forward", "=", "feed_forward", "\n", "self", ".", "sublayer", "=", "clones", "(", "SublayerConnection", "(", "size", ",", "dropout", ")", ",", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.EncoderLayer.forward": [[38, 42], ["torch_transformer.EncoderLayer.self_attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"Follow Figure 1 (left) for connections.\"", "\n", "x", "=", "self", ".", "sublayer", "[", "0", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "mask", ")", ")", "\n", "return", "self", ".", "sublayer", "[", "1", "]", "(", "x", ",", "self", ".", "feed_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.LayerNorm.__init__": [[47, 52], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "a_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n", "self", ".", "b_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "features", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.LayerNorm.forward": [[53, 57], ["x.mean", "x.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "self", ".", "a_2", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "+", "self", ".", "b_2", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.SublayerConnection.__init__": [[65, 69], ["torch.Module.__init__", "torch_transformer.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["def", "__init__", "(", "self", ",", "size", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "SublayerConnection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.SublayerConnection.forward": [[70, 73], ["torch_transformer.SublayerConnection.dropout", "sublayer", "torch_transformer.SublayerConnection.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sublayer", ")", ":", "\n", "        ", "\"Apply residual connection to any sublayer with the same size.\"", "\n", "return", "x", "+", "self", ".", "dropout", "(", "sublayer", "(", "self", ".", "norm", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.MultiHeadedAttention.__init__": [[93, 103], ["torch.Module.__init__", "torch_transformer.clones", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.clones"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "\"Take in model size and number of heads.\"", "\n", "super", "(", "MultiHeadedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "# We assume d_v always equals d_k", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "linears", "=", "clones", "(", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", ",", "4", ")", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.MultiHeadedAttention.forward": [[104, 121], ["query.size", "torch_transformer.attention", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose", "zip", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "l"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.attention"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"Implements Figure 2\"", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Same mask applied to all h heads.", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "# 1) Do all the linear projections in batch from d_model => h x d_k", "\n", "query", ",", "key", ",", "value", "=", "[", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "]", "\n", "\n", "# 2) Apply attention on all the projected vectors in batch.", "\n", "x", ",", "self", ".", "attn", "=", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n", "# 3) \"Concat\" using a view and apply a final linear.", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.PositionwiseFeedForward.__init__": [[135, 140], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_ff", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PositionwiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ff", ")", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_ff", ",", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.PositionwiseFeedForward.forward": [[141, 144], ["torch_transformer.PositionwiseFeedForward.w_2", "torch_transformer.PositionwiseFeedForward.dropout", "torch_transformer.gelu", "torch_transformer.PositionwiseFeedForward.w_1"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.gelu"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# return self.w_2(self.dropout(F.relu(self.w_1(x))))", "\n", "        ", "return", "self", ".", "w_2", "(", "self", ".", "dropout", "(", "gelu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.PositionalEncoding.__init__": [[149, 161], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze.unsqueeze.unsqueeze", "torch_transformer.PositionalEncoding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "dropout", "=", "0", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.dropout = nn.Dropout(p=dropout)", "\n", "\n", "# Compute the positional encodings once in log space.", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0.", ",", "max_len", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0.", ",", "d_model", ",", "2", ")", "*", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.PositionalEncoding.forward": [[162, 165], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "Variable", "(", "self", ".", "pe", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", ",", "requires_grad", "=", "False", ")", "\n", "return", "x", "\n", "# return self.dropout(x)", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.attention": [[75, 85], ["query.size", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill", "dropout", "torch.matmul", "torch.matmul", "torch.matmul", "key.transpose"], "function", ["None"], ["", "", "def", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ")", ":", "\n", "    ", "\"Compute 'Scaled Dot Product Attention'\"", "\n", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.clones": [[87, 90], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "def", "clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "\"Produce N identical layers.\"", "\n", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_transformer.gelu": [[123, 130], ["torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"Implementation of the gelu activation function.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_CNN.Chomp1d.__init__": [[11, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["def", "__init__", "(", "self", ",", "chomp_size", ")", ":", "\n", "# \u8868\u793a\u5bf9\u7ee7\u627f\u81ea\u7236\u7c7b\u7684\u5c5e\u6027\u8fdb\u884c\u521d\u59cb\u5316", "\n", "        ", "super", "(", "Chomp1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chomp_size", "=", "chomp_size", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_CNN.Chomp1d.forward": [[16, 18], ["x[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ",", ":", ",", ":", "-", "self", ".", "chomp_size", "]", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_CNN.TemporalBlock.__init__": [[21, 44], ["torch.Module.__init__", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch_CNN.Chomp1d", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch_CNN.Chomp1d", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch_CNN.TemporalBlock.init_weights", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "n_inputs", ",", "n_outputs", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "padding", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "TemporalBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# \u5b9a\u4e49\u7b2c\u4e00\u4e2a\u6269\u6563\u5377\u79ef\u5c42", "\n", "self", ".", "conv1", "=", "weight_norm", "(", "nn", ".", "Conv1d", "(", "n_inputs", ",", "n_outputs", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ")", ")", "\n", "# \u6839\u636e\u7b2c\u4e00\u4e2a\u5377\u79ef\u5c42\u7684\u8f93\u51fa\u4e0epadding\u5927\u5c0f\u5b9e\u73b0\u56e0\u679c\u5377\u79ef", "\n", "self", ".", "chomp1", "=", "Chomp1d", "(", "padding", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "# \u5728\u5148\u524d\u8f93\u51fa\u7ed3\u679c\u4e0a\u6dfb\u52a0\u6fc0\u6d3b\u51fd\u6570\u4e0edropout \u5b8c\u6210\u7b2c\u4e00\u4e2a\u5377\u79ef", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout2d", "(", "dropout", ")", "\n", "\n", "self", ".", "conv2", "=", "weight_norm", "(", "nn", ".", "Conv1d", "(", "n_outputs", ",", "n_outputs", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ")", ")", "\n", "# padding\u4fdd\u8bc1\u4e86\u8f93\u5165\u5e8f\u5217\u4e0e\u8f93\u51fa\u5e8f\u5217\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u4f46\u5377\u79ef\u524d\u7684\u901a\u9053\u6570\u4e0e\u5377\u79ef\u540e\u7684\u901a\u9053\u6570\u4e0d\u4e00\u5b9a\u4e00\u6837", "\n", "self", ".", "chomp2", "=", "Chomp1d", "(", "padding", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout2d", "(", "dropout", ")", "\n", "\n", "# \u5c06\u5377\u79ef\u6a21\u5757\u7684\u6240\u6709\u7ec4\u4ef6\u901a\u8fc7Sequential \u65b9\u6cd5\u4f9d\u6b21\u5806\u53e0", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "self", ".", "conv1", ",", "self", ".", "chomp1", ",", "self", ".", "relu1", ",", "self", ".", "dropout1", ",", "\n", "self", ".", "conv2", ",", "self", ".", "chomp2", ",", "self", ".", "relu2", ",", "self", ".", "dropout2", ")", "\n", "# \u82e5\u5377\u79ef\u524d\u540e\u901a\u9053\u6570\u4e0d\u540c\uff0c\u9700\u8981\u505a\u9010\u5143\u7d20\u7684\u4e00\u7ef4\u5377\u79ef", "\n", "self", ".", "downsample", "=", "nn", ".", "Conv1d", "(", "n_inputs", ",", "n_outputs", ",", "1", ")", "if", "n_inputs", "!=", "n_outputs", "else", "None", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_CNN.TemporalBlock.init_weights": [[45, 50], ["torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "conv1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "conv2", ".", "weight", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "downsample", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_CNN.TemporalBlock.forward": [[51, 55], ["torch_CNN.TemporalBlock.net", "torch_CNN.TemporalBlock.relu", "torch_CNN.TemporalBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "net", "(", "x", ")", "\n", "res", "=", "x", "if", "self", ".", "downsample", "is", "None", "else", "self", ".", "downsample", "(", "x", ")", "\n", "return", "self", ".", "relu", "(", "out", "+", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_CNN.TemporalConvNet.__init__": [[58, 74], ["torch.Module.__init__", "len", "range", "torch.Sequential", "torch.Sequential", "torch_CNN.TemporalBlock"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_channels", ",", "kernel_size", "=", "2", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "TemporalConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "# num_channels \u4e3a\u5404\u5c42\u5377\u79ef\u7684\u8f93\u51fa\u901a\u9053\u6570\u6216\u5377\u79ef\u6838\u6570\u91cf \u957f\u5ea6\u5373\u9700\u8981\u6267\u884c\u7684\u5377\u79ef\u5c42\u6570\u91cf", "\n", "num_levels", "=", "len", "(", "num_channels", ")", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "# \u6269\u5c55\u7cfb\u6570\u968f\u5c42\u6570\u6307\u6570\u589e\u52a0", "\n", "            ", "dilation_size", "=", "2", "**", "i", "\n", "# \u4ecenum_channels \u4e2d\u62bd\u53d6\u6bcf\u4e00\u4e2a\u6b8b\u5dee\u6a21\u5757\u7684\u8f93\u5165\u901a\u9053\u6570\u4e0e\u8f93\u51fa\u901a\u9053\u6570", "\n", "in_channels", "=", "num_inputs", "if", "i", "==", "0", "else", "num_channels", "[", "i", "-", "1", "]", "\n", "out_channels", "=", "num_channels", "[", "i", "]", "\n", "layers", "+=", "[", "TemporalBlock", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "dilation_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "*", "dilation_size", ",", "dropout", "=", "dropout", ")", "]", "\n", "# layers += [Multihead_Attention(out_channels, num_heads=4, dropout=dropout)]", "\n", "\n", "", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_CNN.TemporalConvNet.forward": [[75, 77], ["torch_CNN.TemporalConvNet.network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "network", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.cnn_module.cnn": [[5, 16], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.convolution", "tensorflow.nn.bias_add", "tensorflow.split", "inputs.get_shape().as_list", "tensorflow.nn.sigmoid", "inputs.get_shape"], "function", ["None"], ["def", "cnn", "(", "inputs", ",", "mask", ",", "hidden_size", ",", "filter_width", ")", ":", "\n", "    ", "input_size", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "shape", "=", "[", "filter_width", ",", "input_size", ",", "2", "*", "hidden_size", "]", "\n", "filter_v", "=", "tf", ".", "get_variable", "(", "'filter'", ",", "shape", ")", "\n", "bias_v", "=", "tf", ".", "get_variable", "(", "'bias'", ",", "[", "2", "*", "hidden_size", "]", ")", "\n", "output", "=", "tf", ".", "nn", ".", "convolution", "(", "inputs", ",", "filter_v", ",", "'SAME'", ")", "\n", "output", "=", "tf", ".", "nn", ".", "bias_add", "(", "output", ",", "bias_v", ")", "\n", "gate", ",", "act", "=", "tf", ".", "split", "(", "output", ",", "2", ",", "2", ")", "\n", "output", "=", "tf", ".", "nn", ".", "sigmoid", "(", "gate", ")", "*", "act", "\n", "\n", "return", "output", "*", "mask", "[", ":", ",", ":", ",", "None", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.add_timing_signal": [[5, 54], ["tensorflow.name_scope", "tensorflow.to_float", "tensorflow.concat", "tensorflow.pad", "tensorflow.reshape", "tensorflow.shape", "tensorflow.shape", "tensorflow.range", "math.log", "tensorflow.exp", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.to_float", "tensorflow.sin", "tensorflow.cos", "float", "float", "tensorflow.to_float", "tensorflow.mod", "tensorflow.range"], "function", ["None"], ["def", "add_timing_signal", "(", "x", ",", "min_timescale", "=", "1.0", ",", "max_timescale", "=", "1.0e4", ")", ":", "\n", "    ", "\"\"\"Adds a bunch of sinusoids of different frequencies to a Tensor.\n\n    Each channel of the input Tensor is incremented by a sinusoid of a\n    different frequency and phase.\n\n    This allows attention to learn to use absolute and relative positions.\n    Timing signals should be added to some precursors of both the query and the\n    memory inputs to attention.\n\n    The use of relative position is possible because sin(x+y) and cos(x+y) can\n    be experessed in terms of y, sin(x) and cos(x).\n\n    In particular, we use a geometric sequence of timescales starting with\n    min_timescale and ending with max_timescale.  The number of different\n    timescales is equal to channels / 2. For each timescale, we\n    generate the two sinusoidal signals sin(timestep/timescale) and\n    cos(timestep/timescale).  All of these sinusoids are concatenated in\n    the channels dimension.\n\n    Args:\n        x: a Tensor with shape [batch, length, channels]\n        min_timescale: a float\n        max_timescale: a float\n\n    Returns:\n        a Tensor the same shape as x.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'timing_embedding'", ",", "values", "=", "[", "x", "]", ")", ":", "\n", "        ", "length", "=", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "channels", "=", "tf", ".", "shape", "(", "x", ")", "[", "2", "]", "\n", "position", "=", "tf", ".", "to_float", "(", "tf", ".", "range", "(", "length", ")", ")", "\n", "num_timescales", "=", "channels", "//", "2", "\n", "\n", "log_timescale_increment", "=", "(", "\n", "math", ".", "log", "(", "float", "(", "max_timescale", ")", "/", "float", "(", "min_timescale", ")", ")", "/", "\n", "(", "tf", ".", "to_float", "(", "num_timescales", ")", "-", "1", ")", "\n", ")", "\n", "inv_timescales", "=", "min_timescale", "*", "tf", ".", "exp", "(", "\n", "tf", ".", "to_float", "(", "tf", ".", "range", "(", "num_timescales", ")", ")", "*", "-", "log_timescale_increment", "\n", ")", "\n", "\n", "scaled_time", "=", "(", "tf", ".", "expand_dims", "(", "position", ",", "1", ")", "*", "\n", "tf", ".", "expand_dims", "(", "inv_timescales", ",", "0", ")", ")", "\n", "signal", "=", "tf", ".", "concat", "(", "[", "tf", ".", "sin", "(", "scaled_time", ")", ",", "tf", ".", "cos", "(", "scaled_time", ")", "]", ",", "axis", "=", "1", ")", "\n", "signal", "=", "tf", ".", "pad", "(", "signal", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "tf", ".", "mod", "(", "channels", ",", "2", ")", "]", "]", ")", "\n", "signal", "=", "tf", ".", "reshape", "(", "signal", ",", "[", "1", ",", "length", ",", "channels", "]", ")", "\n", "\n", "return", "x", "+", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.ffn": [[56, 68], ["tensorflow.variable_scope", "nn_module.linear", "tensorflow.nn.relu", "tensorflow.nn.dropout", "tensorflow.variable_scope", "nn_module.linear"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.linear", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.linear"], ["", "", "def", "ffn", "(", "inputs", ",", "hidden_size", ",", "output_size", ",", "keep_prob", "=", "None", ",", "data_format", "=", "\"NHWC\"", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'input_layer'", ")", ":", "\n", "        ", "hidden", "=", "linear", "(", "inputs", ",", "hidden_size", ",", "True", ",", "data_format", "=", "data_format", ")", "\n", "hidden", "=", "tf", ".", "nn", ".", "relu", "(", "hidden", ")", "\n", "\n", "", "if", "keep_prob", "and", "keep_prob", "<", "1.0", ":", "\n", "        ", "hidden", "=", "tf", ".", "nn", ".", "dropout", "(", "hidden", ",", "keep_prob", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'output_layer'", ")", ":", "\n", "        ", "output", "=", "linear", "(", "hidden", ",", "output_size", ",", "True", ",", "data_format", "=", "data_format", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module._linear_2d": [[70, 97], ["tensorflow.add_n", "sum", "tensorflow.concat", "tensorflow.get_variable", "outputs.append", "range", "tensorflow.get_variable", "tensorflow.nn.bias_add", "tensorflow.matmul", "len", "tensorflow.get_variable", "outputs.append", "item.get_shape", "tensorflow.matmul"], "function", ["None"], ["", "def", "_linear_2d", "(", "inputs", ",", "output_size", ",", "bias", ",", "concat", "=", "True", ")", ":", "\n", "    ", "input_size", "=", "[", "item", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "for", "item", "in", "inputs", "]", "\n", "\n", "outputs", "=", "[", "]", "\n", "\n", "if", "concat", ":", "\n", "        ", "input_size", "=", "sum", "(", "input_size", ")", "\n", "inputs", "=", "tf", ".", "concat", "(", "inputs", ",", "1", ")", "\n", "\n", "shape", "=", "[", "input_size", ",", "output_size", "]", "\n", "matrix", "=", "tf", ".", "get_variable", "(", "\"matrix\"", ",", "shape", ")", "\n", "outputs", ".", "append", "(", "tf", ".", "matmul", "(", "inputs", ",", "matrix", ")", ")", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "input_size", ")", ")", ":", "\n", "            ", "shape", "=", "[", "input_size", "[", "i", "]", ",", "output_size", "]", "\n", "name", "=", "\"matrix_%d\"", "%", "i", "\n", "matrix", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", ")", "\n", "outputs", ".", "append", "(", "tf", ".", "matmul", "(", "inputs", "[", "i", "]", ",", "matrix", ")", ")", "\n", "\n", "", "", "output", "=", "tf", ".", "add_n", "(", "outputs", ")", "\n", "\n", "if", "bias", "is", "not", "None", ":", "\n", "        ", "shape", "=", "[", "output_size", "]", "\n", "bias", "=", "tf", ".", "get_variable", "(", "\"bias\"", ",", "shape", ")", "\n", "output", "=", "tf", ".", "nn", ".", "bias_add", "(", "output", ",", "bias", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module._linear_3d": [[99, 140], ["nn_module.check_data_format", "tensorflow.add_n", "tensorflow.squeeze", "sum", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.nn.convolution", "outputs.append", "range", "tensorflow.get_variable", "tensorflow.nn.bias_add", "tensorflow.expand_dims", "len", "tensorflow.expand_dims", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.nn.convolution", "outputs.append", "item.get_shape", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.check_data_format"], ["", "def", "_linear_3d", "(", "inputs", ",", "output_size", ",", "bias", ",", "concat", "=", "True", ",", "data_format", "=", "\"NHWC\"", ")", ":", "\n", "    ", "data_format", "=", "check_data_format", "(", "data_format", ")", "\n", "channel_axis", "=", "1", "if", "data_format", "==", "\"NCHW\"", "else", "-", "1", "\n", "space_axis", "=", "-", "1", "if", "data_format", "==", "\"NCHW\"", "else", "1", "\n", "\n", "input_size", "=", "[", "item", ".", "get_shape", "(", ")", "[", "channel_axis", "]", ".", "value", "for", "item", "in", "inputs", "]", "\n", "\n", "outputs", "=", "[", "]", "\n", "\n", "if", "concat", ":", "\n", "        ", "input_size", "=", "sum", "(", "input_size", ")", "\n", "inputs", "=", "tf", ".", "concat", "(", "inputs", ",", "channel_axis", ")", "\n", "inputs", "=", "tf", ".", "expand_dims", "(", "inputs", ",", "space_axis", ")", "\n", "\n", "shape", "=", "[", "input_size", ",", "output_size", "]", "\n", "matrix", "=", "tf", ".", "get_variable", "(", "\"matrix\"", ",", "shape", ")", "\n", "matrix", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "matrix", ",", "0", ")", ",", "1", ")", "\n", "output", "=", "tf", ".", "nn", ".", "convolution", "(", "inputs", ",", "matrix", ",", "\"VALID\"", ",", "\n", "data_format", "=", "data_format", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "input_size", ")", ")", ":", "\n", "            ", "inputs", "=", "tf", ".", "expand_dims", "(", "inputs", ",", "space_axis", ")", "\n", "\n", "shape", "=", "[", "input_size", "[", "i", "]", ",", "output_size", "]", "\n", "name", "=", "\"matrix_%d\"", "%", "i", "\n", "matrix", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", ")", "\n", "matrix", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "matrix", ",", "0", ")", ",", "1", ")", "\n", "output", "=", "tf", ".", "nn", ".", "convolution", "(", "inputs", ",", "matrix", ",", "\"VALID\"", ",", "\n", "data_format", "=", "data_format", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "\n", "", "", "output", "=", "tf", ".", "add_n", "(", "outputs", ")", "\n", "\n", "if", "bias", "is", "not", "None", ":", "\n", "        ", "bias", "=", "tf", ".", "get_variable", "(", "\"bias\"", ",", "[", "output_size", "]", ")", "\n", "output", "=", "tf", ".", "nn", ".", "bias_add", "(", "output", ",", "bias", ",", "data_format", "=", "data_format", ")", "\n", "\n", "", "output", "=", "tf", ".", "squeeze", "(", "output", ",", "space_axis", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module._linear_4d": [[142, 177], ["nn_module.check_data_format", "tensorflow.add_n", "sum", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.nn.convolution", "outputs.append", "range", "tensorflow.get_variable", "tensorflow.nn.bias_add", "tensorflow.expand_dims", "len", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.nn.convolution", "outputs.append", "item.get_shape", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.check_data_format"], ["", "def", "_linear_4d", "(", "inputs", ",", "output_size", ",", "bias", ",", "concat", "=", "True", ",", "data_format", "=", "\"NHWC\"", ")", ":", "\n", "    ", "data_format", "=", "check_data_format", "(", "data_format", ")", "\n", "channel_axis", "=", "1", "if", "data_format", "==", "\"NCHW\"", "else", "-", "1", "\n", "\n", "input_size", "=", "[", "item", ".", "get_shape", "(", ")", "[", "channel_axis", "]", ".", "value", "for", "item", "in", "inputs", "]", "\n", "\n", "outputs", "=", "[", "]", "\n", "\n", "if", "concat", ":", "\n", "        ", "input_size", "=", "sum", "(", "input_size", ")", "\n", "inputs", "=", "tf", ".", "concat", "(", "inputs", ",", "channel_axis", ")", "\n", "\n", "shape", "=", "[", "input_size", ",", "output_size", "]", "\n", "matrix", "=", "tf", ".", "get_variable", "(", "\"matrix\"", ",", "shape", ")", "\n", "matrix", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "matrix", ",", "0", ")", ",", "1", ")", "\n", "output", "=", "tf", ".", "nn", ".", "convolution", "(", "inputs", ",", "matrix", ",", "\"VALID\"", ",", "\n", "data_format", "=", "data_format", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "input_size", ")", ")", ":", "\n", "            ", "shape", "=", "[", "input_size", "[", "i", "]", ",", "output_size", "]", "\n", "name", "=", "\"matrix_%d\"", "%", "i", "\n", "matrix", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", ")", "\n", "matrix", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "matrix", ",", "0", ")", ",", "1", ")", "\n", "output", "=", "tf", ".", "nn", ".", "convolution", "(", "inputs", ",", "matrix", ",", "\"VALID\"", ",", "\n", "data_format", "=", "data_format", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "\n", "", "", "output", "=", "tf", ".", "add_n", "(", "outputs", ")", "\n", "\n", "if", "bias", "is", "not", "None", ":", "\n", "        ", "bias", "=", "tf", ".", "get_variable", "(", "\"bias\"", ",", "[", "output_size", "]", ")", "\n", "output", "=", "tf", ".", "nn", ".", "bias_add", "(", "output", ",", "bias", ",", "data_format", "=", "data_format", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module._linear_5d": [[179, 221], ["nn_module.check_data_format", "tensorflow.add_n", "sum", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.nn.convolution", "outputs.append", "range", "tensorflow.get_variable", "tensorflow.nn.bias_add", "tensorflow.expand_dims", "len", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.nn.convolution", "outputs.append", "item.get_shape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.check_data_format"], ["", "def", "_linear_5d", "(", "inputs", ",", "output_size", ",", "bias", ",", "concat", "=", "True", ",", "data_format", "=", "\"NHWC\"", ")", ":", "\n", "    ", "data_format", "=", "check_data_format", "(", "data_format", ")", "\n", "channel_axis", "=", "1", "if", "data_format", "==", "\"NCHW\"", "else", "-", "1", "\n", "\n", "input_size", "=", "[", "item", ".", "get_shape", "(", ")", "[", "channel_axis", "]", ".", "value", "for", "item", "in", "inputs", "]", "\n", "\n", "data_format", "=", "\"NCDHW\"", "if", "data_format", "is", "\"NCHW\"", "else", "\"NDHWC\"", "\n", "\n", "outputs", "=", "[", "]", "\n", "\n", "if", "concat", ":", "\n", "        ", "input_size", "=", "sum", "(", "input_size", ")", "\n", "inputs", "=", "tf", ".", "concat", "(", "inputs", ",", "channel_axis", ")", "\n", "\n", "shape", "=", "[", "input_size", ",", "output_size", "]", "\n", "matrix", "=", "tf", ".", "get_variable", "(", "\"matrix\"", ",", "shape", ")", "\n", "matrix", "=", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "matrix", ",", "0", ")", ",", "1", ")", ",", "2", "\n", ")", "\n", "output", "=", "tf", ".", "nn", ".", "convolution", "(", "inputs", ",", "matrix", ",", "\"VALID\"", ",", "\n", "data_format", "=", "data_format", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "input_size", ")", ")", ":", "\n", "            ", "shape", "=", "[", "input_size", "[", "i", "]", ",", "output_size", "]", "\n", "name", "=", "\"matrix_%d\"", "%", "i", "\n", "matrix", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", ")", "\n", "matrix", "=", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "matrix", ",", "0", ")", ",", "1", ")", ",", "2", "\n", ")", "\n", "output", "=", "tf", ".", "nn", ".", "convolution", "(", "inputs", ",", "matrix", ",", "\"VALID\"", ",", "\n", "data_format", "=", "data_format", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "\n", "", "", "output", "=", "tf", ".", "add_n", "(", "outputs", ")", "\n", "\n", "if", "bias", "is", "not", "None", ":", "\n", "        ", "bias", "=", "tf", ".", "get_variable", "(", "\"bias\"", ",", "[", "output_size", "]", ")", "\n", "data_format", "=", "\"NCHW\"", "if", "data_format", "is", "\"NCDHW\"", "else", "\"NHWC\"", "\n", "output", "=", "tf", ".", "nn", ".", "bias_add", "(", "output", ",", "bias", ",", "data_format", "=", "data_format", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.linear": [[223, 248], ["any", "isinstance", "ValueError", "tensorflow.variable_scope", "ip.get_shape", "nn_module._linear_2d", "nn_module._linear_3d", "nn_module._linear_4d", "nn_module._linear_5d", "ValueError"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module._linear_2d", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module._linear_3d", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module._linear_4d", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module._linear_5d"], ["", "def", "linear", "(", "inputs", ",", "output_size", ",", "bias", ",", "concat", "=", "True", ",", "data_format", "=", "\"NHWC\"", ",", "\n", "dtype", "=", "None", ",", "scope", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "inputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "inputs", "=", "[", "inputs", "]", "\n", "", "ndims", "=", "[", "ip", ".", "get_shape", "(", ")", ".", "ndims", "for", "ip", "in", "inputs", "]", "\n", "\n", "if", "any", "(", "[", "dim", "-", "ndims", "[", "0", "]", "for", "dim", "in", "ndims", "]", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"inputs do not agree on dimensions: %s\"", "%", "ndims", ")", "\n", "\n", "", "rank", "=", "ndims", "[", "0", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "default_name", "=", "\"linear\"", ",", "values", "=", "[", "inputs", "]", ",", "\n", "dtype", "=", "dtype", ")", ":", "\n", "        ", "if", "rank", "==", "2", ":", "\n", "            ", "output", "=", "_linear_2d", "(", "inputs", ",", "output_size", ",", "bias", ",", "concat", ")", "\n", "", "elif", "rank", "==", "3", ":", "\n", "            ", "output", "=", "_linear_3d", "(", "inputs", ",", "output_size", ",", "bias", ",", "concat", ",", "data_format", ")", "\n", "", "elif", "rank", "==", "4", ":", "\n", "            ", "output", "=", "_linear_4d", "(", "inputs", ",", "output_size", ",", "bias", ",", "concat", ",", "data_format", ")", "\n", "", "elif", "rank", "==", "5", ":", "\n", "            ", "output", "=", "_linear_5d", "(", "inputs", ",", "output_size", ",", "bias", ",", "concat", ",", "data_format", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Input rank must be 2, 3 or 4, found %d\"", "%", "rank", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.check_data_format": [[250, 259], ["data_format.upper", "ValueError"], "function", ["None"], ["", "", "def", "check_data_format", "(", "data_format", ")", ":", "\n", "    ", "if", "data_format", "in", "[", "\"NCHW\"", ",", "\"NHWC\"", ",", "\"nchw\"", ",", "\"nhwc\"", "]", ":", "\n", "        ", "return", "data_format", ".", "upper", "(", ")", "\n", "", "elif", "data_format", "in", "[", "\"NCW\"", ",", "\"ncw\"", "]", ":", "\n", "        ", "return", "\"NCW\"", "\n", "", "elif", "data_format", "in", "[", "\"NWC\"", ",", "\"nwc\"", "]", ":", "\n", "        ", "return", "\"NWC\"", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown data_format: %s\"", "%", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.layer_norm": [[261, 273], ["nn_module.check_data_format", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "inputs.get_shape().as_list", "tensorflow.square", "tensorflow.rsqrt", "tensorflow.ones_initializer", "tensorflow.zeros_initializer", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.check_data_format"], ["", "", "def", "layer_norm", "(", "inputs", ",", "epsilon", "=", "1e-6", ",", "data_format", "=", "\"NHWC\"", ")", ":", "\n", "    ", "data_format", "=", "check_data_format", "(", "data_format", ")", "\n", "axis", "=", "1", "if", "data_format", "==", "\"NCHW\"", "else", "-", "1", "\n", "channel_size", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "axis", "]", "\n", "\n", "scale", "=", "tf", ".", "get_variable", "(", "\"scale\"", ",", "shape", "=", "[", "channel_size", "]", ",", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ")", "\n", "offset", "=", "tf", ".", "get_variable", "(", "\"offset\"", ",", "shape", "=", "[", "channel_size", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "mean", "=", "tf", ".", "reduce_mean", "(", "inputs", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "variance", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "inputs", "-", "mean", ")", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "norm_inputs", "=", "(", "inputs", "-", "mean", ")", "*", "tf", ".", "rsqrt", "(", "variance", "+", "epsilon", ")", "\n", "\n", "return", "norm_inputs", "*", "scale", "+", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.multihead_attention": [[275, 358], ["ValueError", "ValueError", "tensorflow.variable_scope", "nn_module.check_data_format", "nn_module._split_heads", "nn_module._split_heads", "nn_module._split_heads", "nn_module._combine_heads", "nn_module.linear", "nn_module.linear", "tensorflow.split", "nn_module.linear", "nn_module.linear", "tensorflow.split", "nn_module.dot_product_attention", "nn_module.additive_attention", "ValueError"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.check_data_format", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module._split_heads", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module._split_heads", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module._split_heads", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module._combine_heads", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.linear", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.linear", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.linear", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.linear", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.dot_product_attention", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.additive_attention"], ["", "def", "multihead_attention", "(", "query", ",", "memory", ",", "bias", ",", "key_size", ",", "value_size", ",", "output_size", ",", "\n", "num_heads", ",", "keep_prob", "=", "None", ",", "data_format", "=", "\"NHWC\"", ",", "\n", "attention_function", "=", "\"dot_product\"", ",", "summaries", "=", "False", ",", "\n", "image_shapes", "=", "None", ",", "dtype", "=", "None", ",", "scope", "=", "None", ")", ":", "\n", "    ", "\"\"\" Multihead scaled-dot-product attention with input/output\n        transformations.\n\n    Args:\n        query: a Tensor with shape [batch, length_q, channels] if\n            data_format is `NHWC`, [batch, channels, length_q] if\n            data_format is `NCHW`\n        memory: a Tensor with shape [batch, length_m, channels] if\n            data_format is `NHWC`, [batch, channels, length_q] if\n            data_format is `NCHW`\n        bias: bias Tensor (see attention_bias())\n        key_size: an integer\n        value_size: an integer\n        output_size: an integer\n        num_heads: an integer dividing total_key_depth and total_value_depth\n        keep_prob: a floating point number\n        summaries: a boolean\n        image_shapes: optional tuple of integer scalars.\n            see comments for attention_image_summary()\n        data_format: \"NHWC\" or \"NCHW\"\n        attention_function: \"dot_product\" or \"additive\"\n        dtype: an optional instance of tf.DType\n        scope: an optional string\n\n    Returns:\n        A Tensor.\n    \"\"\"", "\n", "if", "key_size", "%", "num_heads", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Key size (%d) must be divisible by the number of \"", "\n", "\"attention heads (%d).\"", "%", "(", "key_size", ",", "num_heads", ")", ")", "\n", "\n", "", "if", "value_size", "%", "num_heads", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Value size (%d) must be divisible by the number of \"", "\n", "\"attention heads (%d).\"", "%", "(", "value_size", ",", "num_heads", ")", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", ",", "default_name", "=", "\"multihead_attention\"", ",", "\n", "values", "=", "[", "query", ",", "memory", "]", ",", "dtype", "=", "dtype", ")", ":", "\n", "        ", "data_format", "=", "check_data_format", "(", "data_format", ")", "\n", "axis", "=", "1", "if", "data_format", "is", "\"NCHW\"", "else", "2", "\n", "\n", "if", "memory", "is", "None", ":", "\n", "# self attention", "\n", "            ", "size", "=", "key_size", "*", "2", "+", "value_size", "\n", "combined", "=", "linear", "(", "query", ",", "size", ",", "True", ",", "True", ",", "data_format", "=", "data_format", ",", "\n", "scope", "=", "\"qkv_transform\"", ")", "\n", "q", ",", "k", ",", "v", "=", "tf", ".", "split", "(", "combined", ",", "[", "key_size", ",", "key_size", ",", "value_size", "]", ",", "\n", "axis", "=", "axis", ")", "\n", "", "else", ":", "\n", "            ", "q", "=", "linear", "(", "query", ",", "key_size", ",", "True", ",", "data_format", "=", "data_format", ",", "\n", "scope", "=", "\"q_transform\"", ")", "\n", "combined", "=", "linear", "(", "memory", ",", "key_size", "+", "value_size", ",", "True", ",", "\n", "data_format", "=", "data_format", ",", "scope", "=", "\"kv_transform\"", ")", "\n", "k", ",", "v", "=", "tf", ".", "split", "(", "combined", ",", "[", "key_size", ",", "value_size", "]", ",", "axis", "=", "axis", ")", "\n", "\n", "# split heads", "\n", "", "q", "=", "_split_heads", "(", "q", ",", "num_heads", ",", "data_format", "=", "data_format", ")", "\n", "k", "=", "_split_heads", "(", "k", ",", "num_heads", ",", "data_format", "=", "data_format", ")", "\n", "v", "=", "_split_heads", "(", "v", ",", "num_heads", ",", "data_format", "=", "data_format", ")", "\n", "\n", "# scale query", "\n", "if", "attention_function", "==", "\"dot_product\"", ":", "\n", "            ", "key_depth_per_head", "=", "key_size", "//", "num_heads", "\n", "q", "*=", "key_depth_per_head", "**", "-", "0.5", "\n", "\n", "# attention", "\n", "x", "=", "dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "bias", ",", "keep_prob", ",", "summaries", ",", "\n", "image_shapes", ")", "\n", "", "elif", "attention_function", "==", "\"additive\"", ":", "\n", "            ", "x", "=", "additive_attention", "(", "q", ",", "k", ",", "v", ",", "bias", ",", "keep_prob", ",", "summaries", ",", "\n", "image_shapes", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown attention function\"", ")", "\n", "\n", "# combine heads", "\n", "", "x", "=", "_combine_heads", "(", "x", ",", "data_format", "=", "data_format", ")", "\n", "\n", "x", "=", "linear", "(", "x", ",", "output_size", ",", "True", ",", "data_format", "=", "data_format", ",", "\n", "scope", "=", "\"output_transform\"", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module._split_heads": [[360, 372], ["tensorflow.reshape", "tf.reshape.set_shape", "tensorflow.transpose", "tf.transpose.get_shape", "tensorflow.transpose", "tensorflow.concat", "tensorflow.shape"], "function", ["None"], ["", "", "def", "_split_heads", "(", "x", ",", "num_heads", ",", "data_format", "=", "\"NHWC\"", ")", ":", "\n", "    ", "n", "=", "num_heads", "\n", "old_shape", "=", "x", ".", "get_shape", "(", ")", ".", "dims", "\n", "\n", "if", "data_format", "is", "\"NCHW\"", ":", "\n", "        ", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "", "last", "=", "old_shape", "[", "-", "1", "]", "\n", "new_shape", "=", "old_shape", "[", ":", "-", "1", "]", "+", "[", "n", "]", "+", "[", "last", "//", "n", "if", "last", "else", "None", "]", "\n", "ret", "=", "tf", ".", "reshape", "(", "x", ",", "tf", ".", "concat", "(", "[", "tf", ".", "shape", "(", "x", ")", "[", ":", "-", "1", "]", ",", "[", "n", ",", "-", "1", "]", "]", ",", "0", ")", ")", "\n", "ret", ".", "set_shape", "(", "new_shape", ")", "\n", "return", "tf", ".", "transpose", "(", "ret", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module._combine_heads": [[374, 386], ["tensorflow.transpose", "tensorflow.reshape", "tf.transpose.set_shape", "tf.transpose.get_shape", "tensorflow.concat", "tensorflow.transpose", "tensorflow.shape"], "function", ["None"], ["", "def", "_combine_heads", "(", "x", ",", "data_format", "=", "\"NHWC\"", ")", ":", "\n", "    ", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "old_shape", "=", "x", ".", "get_shape", "(", ")", ".", "dims", "\n", "a", ",", "b", "=", "old_shape", "[", "-", "2", ":", "]", "\n", "new_shape", "=", "old_shape", "[", ":", "-", "2", "]", "+", "[", "a", "*", "b", "if", "a", "and", "b", "else", "None", "]", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "tf", ".", "concat", "(", "[", "tf", ".", "shape", "(", "x", ")", "[", ":", "-", "2", "]", ",", "[", "-", "1", "]", "]", ",", "0", ")", ")", "\n", "x", ".", "set_shape", "(", "new_shape", ")", "\n", "\n", "if", "data_format", "is", "\"NCHW\"", ":", "\n", "        ", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.dot_product_attention": [[388, 423], ["tensorflow.name_scope", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.nn.dropout", "nn_module.attention_image_summary", "tensorflow.get_variable_scope"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.attention_image_summary"], ["", "def", "dot_product_attention", "(", "query", ",", "key", ",", "value", ",", "bias", ",", "keep_prob", ",", "summaries", "=", "False", ",", "\n", "image_shapes", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\" dot-product attention.\n\n    Args:\n        query: a Tensor with shape [batch, heads, length_q, depth_k]\n        key: a Tensor with shape [batch, heads, length_kv, depth_k]\n        value: a Tensor with shape [batch, heads, length_kv, depth_v]\n        bias: bias Tensor (see attention_bias())\n        keep_prob: a floating point number\n        summaries: a boolean\n        image_shapes: optional tuple of integer scalars.\n            see comments for attention_image_summary()\n        name: an optional string\n\n    Returns:\n        A Tensor.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ",", "default_name", "=", "\"dot_product_attention\"", ",", "\n", "values", "=", "[", "query", ",", "key", ",", "value", "]", ")", ":", "\n", "# [batch, num_heads, query_length, memory_length]", "\n", "        ", "logits", "=", "tf", ".", "matmul", "(", "query", ",", "key", ",", "transpose_b", "=", "True", ")", "\n", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "logits", "+=", "bias", "\n", "\n", "", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "\"attention_weights\"", ")", "\n", "# dropping out the attention links for each of the heads", "\n", "if", "keep_prob", "is", "not", "None", "and", "keep_prob", "<", "1.0", ":", "\n", "            ", "weights", "=", "tf", ".", "nn", ".", "dropout", "(", "weights", ",", "keep_prob", ")", "\n", "\n", "", "if", "summaries", "and", "not", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", ":", "\n", "            ", "attention_image_summary", "(", "weights", ",", "image_shapes", ")", "\n", "\n", "", "return", "tf", ".", "matmul", "(", "weights", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.additive_attention": [[425, 464], ["tensorflow.variable_scope", "tensorflow.expand_dims", "tensorflow.expand_dims", "nn_module.linear", "tensorflow.squeeze", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.nn.dropout", "nn_module.attention_image_summary", "tensorflow.get_variable_scope"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.linear", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.attention_image_summary"], ["", "", "def", "additive_attention", "(", "query", ",", "key", ",", "value", ",", "bias", ",", "keep_prob", ",", "summaries", "=", "False", ",", "\n", "image_shapes", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\" dot-product attention.\n\n    Args:\n        query: a Tensor with shape [batch, heads, length_q, depth_k]\n        key: a Tensor with shape [batch, heads, length_kv, depth_k]\n        value: a Tensor with shape [batch, heads, length_kv, depth_v]\n        bias: bias Tensor (see attention_bias())\n        keep_prob: a floating point number\n        summaries: a boolean\n        image_shapes: optional tuple of integer scalars.\n            see comments for attention_image_summary()\n        name: an optional string\n\n    Returns:\n        A Tensor.\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"additive_attention\"", ",", "\n", "values", "=", "[", "query", ",", "key", ",", "value", "]", ")", ":", "\n", "        ", "query", "=", "tf", ".", "expand_dims", "(", "query", ",", "3", ")", "\n", "key", "=", "tf", ".", "expand_dims", "(", "key", ",", "2", ")", "\n", "\n", "hidden", "=", "query", "+", "key", "\n", "logits", "=", "linear", "(", "hidden", ",", "1", ",", "False", ",", "scope", "=", "\"logits\"", ")", "\n", "logits", "=", "tf", ".", "squeeze", "(", "logits", ",", "-", "1", ")", "\n", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "logits", "+=", "bias", "\n", "\n", "", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "\"attention_weights\"", ")", "\n", "# dropping out the attention links for each of the heads", "\n", "if", "keep_prob", "is", "not", "None", "and", "keep_prob", "<", "1.0", ":", "\n", "            ", "weights", "=", "tf", ".", "nn", ".", "dropout", "(", "weights", ",", "keep_prob", ")", "\n", "\n", "", "if", "summaries", "and", "not", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", ":", "\n", "            ", "attention_image_summary", "(", "weights", ",", "image_shapes", ")", "\n", "\n", "", "return", "tf", ".", "matmul", "(", "weights", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.attention_image_summary": [[466, 522], ["tensorflow.transpose", "tensorflow.pow", "tensorflow.pad", "tensorflow.reshape", "tf.reshape.set_shape", "tensorflow.reduce_max", "tensorflow.summary.image", "attn.get_shape().as_list", "tf.reshape.get_shape", "tensorflow.concat", "len", "list", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "list", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "attn.get_shape", "len", "tensorflow.shape"], "function", ["None"], ["", "", "def", "attention_image_summary", "(", "attn", ",", "image_shapes", "=", "None", ")", ":", "\n", "    ", "\"\"\" Compute color image summary.\n\n    Args:\n        attn: a Tensor with shape\n            [batch, num_heads, query_length, memory_length]\n        image_shapes: optional tuple of integer scalars.\n            If the query positions and memory positions represent the\n            pixels of flattened images, then pass in their dimensions:\n                (query_rows, query_cols, memory_rows, memory_cols).\n            If the query positions and memory positions represent the\n            pixels x channels of flattened images, then pass in their\n            dimensions:\n                (query_rows, query_cols, query_channels,\n                memory_rows, memory_cols, memory_channels).\n    \"\"\"", "\n", "num_heads", "=", "attn", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "# [batch, query_length, memory_length, num_heads]", "\n", "image", "=", "tf", ".", "transpose", "(", "attn", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "image", "=", "tf", ".", "pow", "(", "image", ",", "0.2", ")", "# for high-dynamic-range", "\n", "# Each head will correspond to one of RGB.", "\n", "# pad the heads to be a multiple of 3", "\n", "image", "=", "tf", ".", "pad", "(", "image", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "-", "num_heads", "%", "3", "]", "]", ")", "\n", "\n", "# split last dimensions", "\n", "n", "=", "3", "\n", "old_shape", "=", "image", ".", "get_shape", "(", ")", ".", "dims", "\n", "last", "=", "old_shape", "[", "-", "1", "]", "\n", "new_shape", "=", "old_shape", "[", ":", "-", "1", "]", "+", "[", "n", "]", "+", "[", "last", "//", "n", "if", "last", "else", "None", "]", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "tf", ".", "concat", "(", "[", "tf", ".", "shape", "(", "image", ")", "[", ":", "-", "1", "]", ",", "[", "n", ",", "-", "1", "]", "]", ",", "0", ")", ")", "\n", "image", ".", "set_shape", "(", "new_shape", ")", "\n", "image", "=", "tf", ".", "reduce_max", "(", "image", ",", "4", ")", "\n", "\n", "if", "image_shapes", "is", "not", "None", ":", "\n", "        ", "if", "len", "(", "image_shapes", ")", "==", "4", ":", "\n", "            ", "q_rows", ",", "q_cols", ",", "m_rows", ",", "m_cols", "=", "list", "(", "image_shapes", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "-", "1", ",", "q_rows", ",", "q_cols", ",", "m_rows", ",", "m_cols", ",", "3", "]", ")", "\n", "image", "=", "tf", ".", "transpose", "(", "image", ",", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", "]", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "-", "1", ",", "q_rows", "*", "m_rows", ",", "\n", "q_cols", "*", "m_cols", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "image_shapes", ")", "==", "6", "\n", "q_rows", ",", "q_cols", ",", "q_channnels", ",", "m_rows", ",", "m_cols", ",", "m_channels", "=", "list", "(", "\n", "image_shapes", "\n", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "\n", "-", "1", ",", "q_rows", ",", "q_cols", ",", "q_channnels", ",", "m_rows", ",", "m_cols", ",", "m_channels", ",", "3", "\n", "]", ")", "\n", "image", "=", "tf", ".", "transpose", "(", "image", ",", "[", "0", ",", "1", ",", "4", ",", "3", ",", "2", ",", "5", ",", "6", ",", "7", "]", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "\n", "-", "1", ",", "\n", "q_rows", "*", "m_rows", "*", "q_channnels", ",", "\n", "q_cols", "*", "m_cols", "*", "m_channels", ",", "\n", "3", "\n", "]", ")", "\n", "", "", "tf", ".", "summary", ".", "image", "(", "\"attention\"", ",", "image", ",", "max_outputs", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.attention_bias": [[524, 545], ["tensorflow.name_scope", "tensorflow.matrix_band_part", "tensorflow.reshape", "tensorflow.ones", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.to_float", "tensorflow.expand_dims", "ValueError", "tensorflow.range", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.log", "tensorflow.abs"], "function", ["None"], ["", "def", "attention_bias", "(", "inputs", ",", "mode", ",", "inf", "=", "-", "1e9", ",", "name", "=", "\"attention_bias\"", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "name", ",", "values", "=", "[", "inputs", "]", ")", ":", "\n", "        ", "if", "mode", "==", "\"incremental\"", ":", "\n", "            ", "length", "=", "inputs", "\n", "lower_triangle", "=", "tf", ".", "matrix_band_part", "(", "\n", "tf", ".", "ones", "(", "[", "length", ",", "length", "]", ")", ",", "-", "1", ",", "0", "\n", ")", "\n", "ret", "=", "inf", "*", "(", "1.0", "-", "lower_triangle", ")", "\n", "return", "tf", ".", "reshape", "(", "ret", ",", "[", "1", ",", "1", ",", "length", ",", "length", "]", ")", "\n", "", "elif", "mode", "==", "\"masking\"", ":", "\n", "            ", "mask", "=", "inputs", "\n", "ret", "=", "(", "1.0", "-", "mask", ")", "*", "inf", "\n", "return", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "ret", ",", "1", ")", ",", "1", ")", "\n", "", "elif", "mode", "==", "\"proximal\"", ":", "\n", "            ", "length", "=", "inputs", "\n", "r", "=", "tf", ".", "to_float", "(", "tf", ".", "range", "(", "length", ")", ")", "\n", "diff", "=", "tf", ".", "expand_dims", "(", "r", ",", "0", ")", "-", "tf", ".", "expand_dims", "(", "r", ",", "1", ")", "\n", "m", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "-", "tf", ".", "log", "(", "1", "+", "tf", ".", "abs", "(", "diff", ")", ")", ",", "0", ")", ",", "0", ")", "\n", "return", "m", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown mode %s\"", "%", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.residual_link": [[547, 552], ["nn_module.layer_norm", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.layer_norm"], ["", "", "", "def", "residual_link", "(", "x", ",", "y", ",", "keep_prob", ")", ":", "\n", "    ", "if", "keep_prob", "<", "1.0", ":", "\n", "        ", "y", "=", "tf", ".", "nn", ".", "dropout", "(", "y", ",", "keep_prob", ")", "\n", "\n", "", "return", "layer_norm", "(", "x", "+", "y", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.nor_rnn": [[6, 29], ["rnn_type.startswith", "tensorflow.rnn.MultiRNNCell", "tensorflow.nn.dynamic_rnn", "rnn_type.endswith", "tensorflow.rnn.stack_bidirectional_dynamic_rnn", "rnn_module.get_nor_cell", "rnn_module.get_nor_cell", "tensorflow.nn.bidirectional_dynamic_rnn", "rnn_module.get_nor_cell", "rnn_module.get_nor_cell", "rnn_module.get_nor_cell", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.get_nor_cell", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.get_nor_cell", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.get_nor_cell", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.get_nor_cell", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.get_nor_cell"], ["def", "nor_rnn", "(", "rnn_type", ",", "inputs", ",", "length", ",", "hidden_size", ",", "layer_num", "=", "1", ",", "dropout_keep_prob", "=", "None", ",", "concat", "=", "True", ")", ":", "\n", "    ", "if", "not", "rnn_type", ".", "startswith", "(", "'bi'", ")", ":", "\n", "        ", "cells", "=", "tc", ".", "rnn", ".", "MultiRNNCell", "(", "[", "get_nor_cell", "(", "rnn_type", ",", "hidden_size", ",", "dropout_keep_prob", ")", "for", "_", "in", "range", "(", "layer_num", ")", "]", ",", "\n", "state_is_tuple", "=", "True", ")", "\n", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cells", ",", "inputs", ",", "sequence_length", "=", "length", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "if", "rnn_type", ".", "endswith", "(", "'lstm'", ")", ":", "\n", "            ", "c", ",", "h", "=", "state", "\n", "state", "=", "h", "\n", "", "", "else", ":", "\n", "        ", "if", "layer_num", ">", "1", ":", "\n", "            ", "cell_fw", "=", "[", "get_nor_cell", "(", "rnn_type", ",", "hidden_size", ",", "dropout_keep_prob", ")", "for", "_", "in", "range", "(", "layer_num", ")", "]", "\n", "cell_bw", "=", "[", "get_nor_cell", "(", "rnn_type", ",", "hidden_size", ",", "dropout_keep_prob", ")", "for", "_", "in", "range", "(", "layer_num", ")", "]", "\n", "outputs", ",", "state_fw", ",", "state_bw", "=", "tc", ".", "rnn", ".", "stack_bidirectional_dynamic_rnn", "(", "\n", "cell_fw", ",", "cell_bw", ",", "inputs", ",", "sequence_length", "=", "length", ",", "dtype", "=", "tf", ".", "float32", "\n", ")", "\n", "", "else", ":", "\n", "            ", "cell_fw", "=", "get_nor_cell", "(", "rnn_type", ",", "hidden_size", ",", "dropout_keep_prob", ")", "\n", "cell_bw", "=", "get_nor_cell", "(", "rnn_type", ",", "hidden_size", ",", "dropout_keep_prob", ")", "\n", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "\n", "cell_fw", ",", "cell_bw", ",", "inputs", ",", "sequence_length", "=", "length", ",", "dtype", "=", "tf", ".", "float32", "\n", ")", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.get_nor_cell": [[31, 49], ["rnn_type.endswith", "tensorflow.rnn.LSTMCell", "rnn_type.endswith", "tensorflow.rnn.DropoutWrapper", "tensorflow.rnn.GRUCell", "rnn_type.endswith", "tensorflow.rnn.BasicRNNCell", "rnn_type.endswith", "tensorflow.rnn.SRUCell", "rnn_type.endswith", "tensorflow.rnn.IndyGRUCell", "NotImplementedError"], "function", ["None"], ["", "def", "get_nor_cell", "(", "rnn_type", ",", "hidden_size", ",", "dropout_keep_prob", "=", "None", ")", ":", "\n", "    ", "if", "rnn_type", ".", "endswith", "(", "'lstm'", ")", ":", "\n", "        ", "cell", "=", "tc", ".", "rnn", ".", "LSTMCell", "(", "num_units", "=", "hidden_size", ",", "state_is_tuple", "=", "True", ")", "\n", "", "elif", "rnn_type", ".", "endswith", "(", "'gru'", ")", ":", "\n", "        ", "cell", "=", "tc", ".", "rnn", ".", "GRUCell", "(", "num_units", "=", "hidden_size", ")", "\n", "", "elif", "rnn_type", ".", "endswith", "(", "'rnn'", ")", ":", "\n", "        ", "cell", "=", "tc", ".", "rnn", ".", "BasicRNNCell", "(", "num_units", "=", "hidden_size", ")", "\n", "", "elif", "rnn_type", ".", "endswith", "(", "'sru'", ")", ":", "\n", "        ", "cell", "=", "tc", ".", "rnn", ".", "SRUCell", "(", "num_units", "=", "hidden_size", ")", "\n", "", "elif", "rnn_type", ".", "endswith", "(", "'indy'", ")", ":", "\n", "        ", "cell", "=", "tc", ".", "rnn", ".", "IndyGRUCell", "(", "num_units", "=", "hidden_size", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Unsuported rnn type: {}'", ".", "format", "(", "rnn_type", ")", ")", "\n", "", "if", "dropout_keep_prob", "is", "not", "None", ":", "\n", "        ", "cell", "=", "tc", ".", "rnn", ".", "DropoutWrapper", "(", "cell", ",", "\n", "input_keep_prob", "=", "dropout_keep_prob", ",", "\n", "output_keep_prob", "=", "dropout_keep_prob", ")", "\n", "", "return", "cell", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.cu_rnn": [[51, 71], ["tensorflow.transpose", "rnn_type.startswith", "rnn_module.get_cu_cell", "tensorflow.transpose", "tensorflow.zeros", "tensorflow.zeros", "get_cu_cell.", "rnn_type.endswith", "rnn_module.get_cu_cell", "tensorflow.transpose", "get_cu_cell."], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.get_cu_cell", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.get_cu_cell"], ["", "def", "cu_rnn", "(", "rnn_type", ",", "inputs", ",", "hidden_size", ",", "batch_size", ",", "layer_num", "=", "1", ")", ":", "\n", "    ", "if", "not", "rnn_type", ".", "startswith", "(", "'bi'", ")", ":", "\n", "        ", "cell", "=", "get_cu_cell", "(", "rnn_type", ",", "hidden_size", ",", "layer_num", ",", "'unidirectional'", ")", "\n", "inputs", "=", "tf", ".", "transpose", "(", "inputs", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "c", "=", "tf", ".", "zeros", "(", "[", "layer_num", ",", "batch_size", ",", "hidden_size", "]", ",", "tf", ".", "float32", ")", "\n", "h", "=", "tf", ".", "zeros", "(", "[", "layer_num", ",", "batch_size", ",", "hidden_size", "]", ",", "tf", ".", "float32", ")", "\n", "outputs", ",", "state", "=", "cell", "(", "inputs", ")", "\n", "if", "rnn_type", ".", "endswith", "(", "'lstm'", ")", ":", "\n", "            ", "c", ",", "h", "=", "state", "\n", "state", "=", "h", "\n", "", "", "else", ":", "\n", "        ", "cell", "=", "get_cu_cell", "(", "rnn_type", ",", "hidden_size", ",", "layer_num", ",", "'bidirectional'", ")", "\n", "inputs", "=", "tf", ".", "transpose", "(", "inputs", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "outputs", ",", "state", "=", "cell", "(", "inputs", ")", "\n", "# if concat:", "\n", "#     state = tf.concat([state_fw, state_bw], 1)", "\n", "# else:", "\n", "#     state = state_fw + state_bw", "\n", "", "outputs", "=", "tf", ".", "transpose", "(", "outputs", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "return", "outputs", ",", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.get_cu_cell": [[73, 86], ["rnn_type.endswith", "tensorflow.contrib.cudnn_rnn.CudnnLSTM", "rnn_type.endswith", "tensorflow.contrib.cudnn_rnn.CudnnGRU", "rnn_type.endswith", "tensorflow.contrib.cudnn_rnn.CudnnRNNTanh", "NotImplementedError"], "function", ["None"], ["", "def", "get_cu_cell", "(", "rnn_type", ",", "hidden_size", ",", "layer_num", "=", "1", ",", "direction", "=", "'undirectional'", ")", ":", "\n", "    ", "if", "rnn_type", ".", "endswith", "(", "'lstm'", ")", ":", "\n", "        ", "cudnn_cell", "=", "cudnn_rnn", ".", "CudnnLSTM", "(", "num_layers", "=", "layer_num", ",", "num_units", "=", "hidden_size", ",", "direction", "=", "direction", ",", "\n", "dropout", "=", "0", ")", "\n", "", "elif", "rnn_type", ".", "endswith", "(", "'gru'", ")", ":", "\n", "        ", "cudnn_cell", "=", "cudnn_rnn", ".", "CudnnGRU", "(", "num_layers", "=", "layer_num", ",", "num_units", "=", "hidden_size", ",", "direction", "=", "direction", ",", "\n", "dropout", "=", "0", ")", "\n", "", "elif", "rnn_type", ".", "endswith", "(", "'rnn'", ")", ":", "\n", "        ", "cudnn_cell", "=", "cudnn_rnn", ".", "CudnnRNNTanh", "(", "num_layers", "=", "layer_num", ",", "num_units", "=", "hidden_size", ",", "direction", "=", "direction", ",", "\n", "dropout", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Unsuported rnn type: {}'", ".", "format", "(", "rnn_type", ")", ")", "\n", "", "return", "cudnn_cell", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.dense": [[88, 103], ["tensorflow.variable_scope", "tensorflow.shape", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.reshape", "inputs.get_shape().as_list", "tensorflow.get_variable", "tensorflow.nn.bias_add", "inputs.get_shape", "range", "tensorflow.constant_initializer", "len", "inputs.get_shape().as_list", "inputs.get_shape"], "function", ["None"], ["", "def", "dense", "(", "inputs", ",", "hidden", ",", "use_bias", "=", "True", ",", "scope", "=", "'dense'", ",", "initializer", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "shape", "=", "tf", ".", "shape", "(", "inputs", ")", "\n", "dim", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "# \u524d\u4e24\u4e2a\u7ef4\u5ea6\u4e0e\u8f93\u5165\u76f8\u540c\uff0c\u6700\u540e\u52a0\u4e0a\u8f93\u51fa\u7ef4\u5ea6", "\n", "out_shape", "=", "[", "shape", "[", "idx", "]", "for", "idx", "in", "range", "(", "len", "(", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "-", "1", ")", "]", "+", "[", "hidden", "]", "\n", "\n", "flat_inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "dim", "]", ")", "\n", "W", "=", "tf", ".", "get_variable", "(", "'W'", ",", "[", "dim", ",", "hidden", "]", ",", "initializer", "=", "initializer", ")", "\n", "res", "=", "tf", ".", "matmul", "(", "flat_inputs", ",", "W", ")", "\n", "if", "use_bias", ":", "\n", "            ", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "[", "hidden", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ")", "\n", "res", "=", "tf", ".", "nn", ".", "bias_add", "(", "res", ",", "b", ")", "\n", "", "res", "=", "tf", ".", "reshape", "(", "res", ",", "out_shape", ")", "\n", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_TextCNNNet.TextCNNNet.__init__": [[6, 12], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.MaxPool1d", "torch.MaxPool1d"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_input", ",", "max_len", ",", "n_output", ",", "kernel_sizes", ",", "topk", "=", "1", ")", ":", "\n", "        ", "super", "(", "TextCNNNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "n_input", ",", "n_output", ",", "k", ",", "padding", "=", "k", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "n_output", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "max_len", ")", ")", "for", "k", "in", "kernel_sizes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.torch_TextCNNNet.TextCNNNet.forward": [[13, 20], ["x.transpose.transpose.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv_x.squeeze.squeeze.squeeze", "conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "conv_x", "=", "[", "conv", "(", "x", ")", "for", "conv", "in", "self", ".", "convs", "]", "\n", "conv_x", "=", "torch", ".", "cat", "(", "conv_x", ",", "dim", "=", "1", ")", "\n", "conv_x", "=", "conv_x", ".", "squeeze", "(", ")", "\n", "\n", "return", "conv_x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.process_tmp.process_train": [[27, 51], ["fh.close", "open", "line.strip().split.strip().split", "labels.append", "engs.append", "sims.append", "seg_engs.append", "seg_sims.append", "int", "len", "print", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "line.strip().split.strip", "SPACE.join().strip", "SPACE.join().strip", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "SPACE.join", "SPACE.join"], "function", ["None"], ["def", "process_train", "(", "path", ")", ":", "\n", "    ", "examples", "=", "[", "]", "\n", "engs", ",", "sims", "=", "[", "]", ",", "[", "]", "\n", "seg_engs", ",", "seg_sims", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "idx", "=", "1", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'ISO-8859-1'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "fh", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "labels", ".", "append", "(", "int", "(", "line", "[", "0", "]", ")", ")", "\n", "del", "line", "[", "0", "]", "\n", "if", "len", "(", "line", ")", "!=", "6", ":", "\n", "                ", "print", "(", "idx", ")", "\n", "# engs.append(list(tokenizer(SPACE.join(line[:3]).strip())))", "\n", "# sims.append(list(tokenizer(SPACE.join(line[3:]).strip())))", "\n", "# seg_engs.append([list(tokenizer(seg)) for seg in line[:3]])", "\n", "# seg_sims.append([list(tokenizer(seg)) for seg in line[3:]])", "\n", "", "engs", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", "[", ":", "3", "]", ")", ".", "strip", "(", ")", ")", ")", "\n", "sims", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", "[", "3", ":", "]", ")", ".", "strip", "(", ")", ")", ")", "\n", "seg_engs", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "[", ":", "3", "]", "]", ")", "\n", "seg_sims", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "[", "3", ":", "]", "]", ")", "\n", "idx", "+=", "1", "\n", "", "", "fh", ".", "close", "(", ")", "\n", "\n", "return", "seg_engs", ",", "seg_sims", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.process_tmp.process_test": [[53, 71], ["fh.close", "open", "line.strip().split.strip().split", "int", "labels.append", "sentences.append", "seg_sentences.append", "len", "print", "nltk.tokenize.word_tokenize", "line.strip().split.strip", "SPACE.join().strip", "nltk.tokenize.word_tokenize", "SPACE.join"], "function", ["None"], ["", "def", "process_test", "(", "path", ")", ":", "\n", "    ", "sentences", ",", "labels", "=", "[", "]", ",", "[", "]", "\n", "seg_sentences", "=", "[", "]", "\n", "i", "=", "1", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "fh", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "num", "=", "int", "(", "line", "[", "-", "1", "]", ")", "\n", "labels", ".", "append", "(", "0", "if", "num", "==", "0", "else", "1", ")", "\n", "del", "line", "[", "-", "1", "]", "\n", "if", "len", "(", "line", ")", "<", "3", ":", "\n", "                ", "print", "(", "i", ")", "\n", "", "sentences", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", ")", ".", "strip", "(", ")", ")", ")", "\n", "seg_sentences", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "fh", ".", "close", "(", ")", "\n", "\n", "return", "seg_sentences", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.process_tmp.seg_length": [[73, 78], ["seg_len.append", "len", "len", "len"], "function", ["None"], ["", "def", "seg_length", "(", "sentences", ")", ":", "\n", "    ", "seg_len", "=", "[", "]", "\n", "for", "sen", "in", "sentences", ":", "\n", "        ", "seg_len", ".", "append", "(", "(", "len", "(", "sen", "[", "0", "]", ")", ",", "len", "(", "sen", "[", "1", "]", ")", ",", "len", "(", "sen", "[", "2", "]", ")", ")", ")", "\n", "", "return", "seg_len", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.process_tmp.stat_length": [[80, 88], ["max", "max", "max", "len", "len", "len"], "function", ["None"], ["", "def", "stat_length", "(", "sentences", ")", ":", "\n", "    ", "max_pre", ",", "max_alt", ",", "max_cur", "=", "0", ",", "0", ",", "0", "\n", "for", "sen", "in", "sentences", ":", "\n", "        ", "max_pre", "=", "max", "(", "max_pre", ",", "len", "(", "sen", "[", "0", "]", ")", ")", "\n", "max_alt", "=", "max", "(", "max_alt", ",", "len", "(", "sen", "[", "1", "]", ")", ")", "\n", "max_cur", "=", "max", "(", "max_cur", ",", "len", "(", "sen", "[", "2", "]", ")", ")", "\n", "\n", "", "return", "max_pre", ",", "max_alt", ",", "max_cur", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.process_tmp.stat_train_altlex": [[90, 114], ["zip", "set", "set", "set.intersection", "zip", "print", "print", "print", "print", "print", "print", "nc_alt.append", "nc_alt.append", "c_alt.append", "c_alt.append", "len", "len", "len"], "function", ["None"], ["", "def", "stat_train_altlex", "(", "eng_sentences", ",", "sim_sentences", ",", "labels", ")", ":", "\n", "    ", "c_alt", ",", "nc_alt", "=", "[", "]", ",", "[", "]", "\n", "for", "eng", ",", "sim", ",", "label", "in", "zip", "(", "eng_sentences", ",", "sim_sentences", ",", "labels", ")", ":", "\n", "        ", "if", "label", "==", "0", ":", "\n", "            ", "nc_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "eng", "[", "1", "]", ")", ")", "\n", "nc_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "sim", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "c_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "eng", "[", "1", "]", ")", ")", "\n", "c_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "sim", "[", "1", "]", ")", ")", "\n", "", "", "c_alt_set", "=", "set", "(", "c_alt", ")", "\n", "nc_alt_set", "=", "set", "(", "nc_alt", ")", "\n", "co_alt_set", "=", "c_alt_set", ".", "intersection", "(", "nc_alt_set", ")", "\n", "co_in_c", ",", "co_in_nc", "=", "0", ",", "0", "\n", "for", "c", ",", "nc", "in", "zip", "(", "c_alt", ",", "nc_alt", ")", ":", "\n", "        ", "if", "c", "in", "co_alt_set", ":", "\n", "            ", "co_in_c", "+=", "1", "\n", "", "if", "nc", "in", "nc_alt_set", ":", "\n", "            ", "co_in_nc", "+=", "1", "\n", "", "", "print", "(", "'#Altlexes rep casual - {}'", ".", "format", "(", "len", "(", "c_alt_set", ")", ")", ")", "\n", "print", "(", "'#Altlexes rep non_casual - {}'", ".", "format", "(", "len", "(", "nc_alt_set", ")", ")", ")", "\n", "print", "(", "'#Altlexes in both set - {}'", ".", "format", "(", "len", "(", "co_alt_set", ")", ")", ")", "\n", "print", "(", "co_alt_set", ")", "\n", "print", "(", "'#CoAltlex in causal - {}'", ".", "format", "(", "co_in_c", ")", ")", "\n", "print", "(", "'#CoAltlex in non_causal - {}'", ".", "format", "(", "co_in_nc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.process_tmp.stat_test_altlex": [[116, 138], ["zip", "set", "set", "set.intersection", "zip", "print", "print", "print", "print", "print", "print", "nc_alt.append", "c_alt.append", "len", "len", "len"], "function", ["None"], ["", "def", "stat_test_altlex", "(", "sentences", ",", "labels", ")", ":", "\n", "    ", "c_alt", ",", "nc_alt", "=", "[", "]", ",", "[", "]", "\n", "for", "sen", ",", "label", "in", "zip", "(", "sentences", ",", "labels", ")", ":", "\n", "        ", "if", "label", "==", "0", ":", "\n", "            ", "nc_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "sen", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "c_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "sen", "[", "1", "]", ")", ")", "\n", "", "", "c_alt_set", "=", "set", "(", "c_alt", ")", "\n", "nc_alt_set", "=", "set", "(", "nc_alt", ")", "\n", "co_alt_set", "=", "c_alt_set", ".", "intersection", "(", "nc_alt_set", ")", "\n", "co_in_c", ",", "co_in_nc", "=", "0", ",", "0", "\n", "for", "c", ",", "nc", "in", "zip", "(", "c_alt", ",", "nc_alt", ")", ":", "\n", "        ", "if", "c", "in", "co_alt_set", ":", "\n", "            ", "co_in_c", "+=", "1", "\n", "", "if", "nc", "in", "nc_alt_set", ":", "\n", "            ", "co_in_nc", "+=", "1", "\n", "", "", "print", "(", "'#Altlexes rep casual - {}'", ".", "format", "(", "len", "(", "c_alt_set", ")", ")", ")", "\n", "print", "(", "'#Altlexes rep non_casual - {}'", ".", "format", "(", "len", "(", "nc_alt_set", ")", ")", ")", "\n", "print", "(", "'#Altlexes in both set - {}'", ".", "format", "(", "len", "(", "co_alt_set", ")", ")", ")", "\n", "print", "(", "co_alt_set", ")", "\n", "print", "(", "'#CoAltlex in causal - {}'", ".", "format", "(", "co_in_c", ")", ")", "\n", "print", "(", "'#CoAltlex in non_causal - {}'", ".", "format", "(", "co_in_nc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.process_tmp.gen_annotation": [[140, 158], ["f.close", "open", "zip", "os.path.join", "f.write", "f.write", "sum", "sum", "annos.strip", "annos.strip"], "function", ["None"], ["", "def", "gen_annotation", "(", "eng_length", ",", "sim_length", ",", "max_length", ",", "path", ",", "labels", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'annotations.txt'", ")", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "el", ",", "sl", ",", "label", "in", "zip", "(", "eng_length", ",", "sim_length", ",", "labels", ")", ":", "\n", "            ", "pre", ",", "alt", ",", "cur", "=", "el", "\n", "if", "sum", "(", "el", ")", ">", "max_length", ":", "\n", "                ", "cur", "-=", "pre", "+", "alt", "+", "cur", "-", "max_length", "\n", "", "annos", "=", "'O '", "*", "pre", "\n", "annos", "+=", "'C '", "if", "label", "==", "1", "else", "'NC '", "*", "alt", "\n", "annos", "+=", "'O '", "*", "cur", "\n", "f", ".", "write", "(", "annos", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "pre", ",", "alt", ",", "cur", "=", "sl", "\n", "if", "sum", "(", "sl", ")", ">", "max_length", ":", "\n", "                ", "cur", "-=", "pre", "+", "alt", "+", "cur", "-", "max_length", "\n", "", "annos", "=", "'O '", "*", "pre", "\n", "annos", "+=", "'C '", "if", "label", "==", "1", "else", "'NC '", "*", "alt", "\n", "annos", "+=", "'O '", "*", "cur", "\n", "f", ".", "write", "(", "annos", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.getFileLineNums": [[13, 19], ["open"], "function", ["None"], ["def", "getFileLineNums", "(", "filename", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "'r'", ")", "\n", "count", "=", "0", "\n", "for", "line", "in", "f", ":", "\n", "        ", "count", "+=", "1", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.prepend_line": [[22, 27], ["open", "open", "new.write", "shutil.copyfileobj", "str"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.drnn_module.RNNType.str"], ["", "def", "prepend_line", "(", "infile", ",", "outfile", ",", "line", ")", ":", "\n", "    ", "with", "open", "(", "infile", ",", "'r'", ")", "as", "old", ":", "\n", "        ", "with", "open", "(", "outfile", ",", "'w'", ")", "as", "new", ":", "\n", "            ", "new", ".", "write", "(", "str", "(", "line", ")", "+", "\"\\n\"", ")", "\n", "shutil", ".", "copyfileobj", "(", "old", ",", "new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.prepend_slow": [[29, 35], ["open", "open", "fout.write", "fout.write"], "function", ["None"], ["", "", "", "def", "prepend_slow", "(", "infile", ",", "outfile", ",", "line", ")", ":", "\n", "    ", "with", "open", "(", "infile", ",", "'r'", ")", "as", "fin", ":", "\n", "        ", "with", "open", "(", "outfile", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "line", "+", "\"\\n\"", ")", "\n", "for", "line", "in", "fin", ":", "\n", "                ", "fout", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load": [[37, 49], ["w2v_test.getFileLineNums", "gensim.models.KeyedVectors.load_word2vec_format", "print", "w2v_test.prepend_line", "w2v_test.prepend_slow"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.getFileLineNums", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.prepend_line", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.prepend_slow"], ["", "", "", "", "def", "load", "(", "filename", ")", ":", "\n", "    ", "num_lines", "=", "getFileLineNums", "(", "filename", ")", "\n", "gensim_file", "=", "'glove_model.txt'", "\n", "gensim_first_line", "=", "\"{} {}\"", ".", "format", "(", "num_lines", ",", "300", ")", "\n", "# Prepends the line.", "\n", "if", "platform", "==", "\"linux\"", "or", "platform", "==", "\"linux2\"", ":", "\n", "        ", "prepend_line", "(", "filename", ",", "gensim_file", ",", "gensim_first_line", ")", "\n", "", "else", ":", "\n", "        ", "prepend_slow", "(", "filename", ",", "gensim_file", ",", "gensim_first_line", ")", "\n", "\n", "", "model", "=", "gensim", ".", "models", ".", "KeyedVectors", ".", "load_word2vec_format", "(", "gensim_file", ")", "\n", "print", "(", "model", "[", "'word'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical.H0.__init__": [[11, 37], ["tensorflow.get_variable", "tensorflow.get_variable", "batch.get_next", "tensorflow.sequence_mask", "tensorflow.sequence_mask", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "time.time", "Hierarchical.H0._build_graph", "Hierarchical.H0.logger.info", "tensorflow.shape", "tensorflow.shape", "tensorflow.get_variable", "tensorflow.get_variable", "Hierarchical.H0._create_train_op", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._build_graph", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._create_train_op"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "batch", ",", "token_embeddings", ",", "logger", ",", "trainable", "=", "True", ")", ":", "\n", "# logging", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "logger", "=", "logger", "\n", "# basic config", "\n", "self", ".", "n_batch", "=", "tf", ".", "get_variable", "(", "'n_batch'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "int32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "n_class", "=", "2", "\n", "self", ".", "opt_type", "=", "args", ".", "optim", "\n", "self", ".", "weight_decay", "=", "args", ".", "weight_decay", "\n", "\n", "self", ".", "eid", ",", "self", ".", "token_ids", ",", "self", ".", "token_len", ",", "self", ".", "labels", "=", "batch", ".", "get_next", "(", ")", "\n", "self", ".", "N", "=", "tf", ".", "shape", "(", "self", ".", "eid", ")", "[", "0", "]", "\n", "# self.max_len = tf.reduce_max(self.token_len)", "\n", "# self.token_ids = tf.slice(self.token_ids, [0, 0], tf.stack([self.N, self.max_len]))", "\n", "self", ".", "mask", "=", "tf", ".", "sequence_mask", "(", "self", ".", "token_len", ",", "self", ".", "args", ".", "max_len", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'masks'", ")", "\n", "self", ".", "is_train", "=", "tf", ".", "get_variable", "(", "'is_train'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "bool", ",", "trainable", "=", "False", ")", "\n", "self", ".", "global_step", "=", "tf", ".", "get_variable", "(", "'global_step'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "int32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ",", "trainable", "=", "False", ")", "\n", "self", ".", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "start_t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_build_graph", "(", "token_embeddings", ")", "\n", "if", "trainable", ":", "\n", "            ", "self", ".", "lr", "=", "tf", ".", "get_variable", "(", "'lr'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "_create_train_op", "(", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical.H0._build_graph": [[38, 44], ["Hierarchical.H0._embed", "Hierarchical.H0._encoder", "Hierarchical.H0._self_attention", "Hierarchical.H0._predict_label", "Hierarchical.H0._compute_loss"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._embed", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._encoder", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._self_attention", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._predict_label", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._compute_loss"], ["", "def", "_build_graph", "(", "self", ",", "token_embeddings", ")", ":", "\n", "        ", "self", ".", "_embed", "(", "token_embeddings", ")", "\n", "self", ".", "_encoder", "(", ")", "\n", "self", ".", "_self_attention", "(", ")", "\n", "self", ".", "_predict_label", "(", ")", "\n", "self", ".", "_compute_loss", "(", ")", "\n", "# self._compute_accuracy()", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical.H0._embed": [[46, 63], ["tensorflow.device", "tensorflow.device", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "modules.nn_module.add_timing_signal", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.gather", "tensorflow.gather", "tensorflow.tile", "tensorflow.tile", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.constant", "tensorflow.constant", "tensorflow.range", "tensorflow.range", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.add_timing_signal"], ["", "def", "_embed", "(", "self", ",", "token_embeddings", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ",", "tf", ".", "variable_scope", "(", "'word_embedding'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "word_embeddings", "=", "tf", ".", "get_variable", "(", "'word_embeddings'", ",", "\n", "initializer", "=", "tf", ".", "constant", "(", "token_embeddings", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "self", ".", "token_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "word_embeddings", ",", "self", ".", "token_ids", ")", "\n", "if", "self", ".", "args", ".", "timing", ":", "\n", "                ", "self", ".", "token_emb", "=", "add_timing_signal", "(", "self", ".", "token_emb", ")", "\n", "", "else", ":", "\n", "                ", "pos_embeddings", "=", "tf", ".", "get_variable", "(", "'position_embedding'", ",", "[", "200", ",", "self", ".", "args", ".", "n_emb", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "0.0", ",", "self", ".", "args", ".", "n_emb", "**", "-", "0.5", ")", ")", "\n", "indices", "=", "tf", ".", "range", "(", "tf", ".", "shape", "(", "self", ".", "token_ids", ")", "[", "1", "]", ")", "[", "None", ",", ":", "]", "\n", "pos_emb", "=", "tf", ".", "gather", "(", "pos_embeddings", ",", "indices", ")", "\n", "pos_emb", "=", "tf", ".", "tile", "(", "pos_emb", ",", "[", "tf", ".", "shape", "(", "self", ".", "token_ids", ")", "[", "0", "]", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "token_emb", "+=", "pos_emb", "\n", "", "if", "self", ".", "is_train", ":", "\n", "                ", "self", ".", "token_emb", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "token_emb", ",", "self", ".", "args", ".", "dropout_keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical.H0._encoder": [[64, 74], ["tensorflow.variable_scope", "tensorflow.variable_scope", "modules.nn_module.residual_link", "modules.rnn_module.cu_rnn", "int", "modules.cnn_module.cnn", "modules.nn_module.ffn", "int"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.residual_link", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.cu_rnn", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.cnn_module.cnn", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.ffn"], ["", "", "", "def", "_encoder", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'encoder'", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "encoder_type", "==", "'rnn'", ":", "\n", "                ", "y", ",", "_", "=", "cu_rnn", "(", "'bi-gru'", ",", "self", ".", "token_emb", ",", "int", "(", "self", ".", "args", ".", "n_emb", "/", "2", ")", ",", "self", ".", "n_batch", ",", "self", ".", "args", ".", "n_layer", ")", "\n", "", "elif", "self", ".", "args", ".", "encoder_type", "==", "'cnn'", ":", "\n", "                ", "y", "=", "cnn", "(", "self", ".", "token_emb", ",", "self", ".", "mask", ",", "self", ".", "args", ".", "n_emb", ",", "3", ")", "\n", "", "elif", "self", ".", "args", ".", "encoder_type", "==", "'ffn'", ":", "\n", "                ", "y", "=", "ffn", "(", "self", ".", "token_emb", ",", "int", "(", "self", ".", "args", ".", "n_emb", "*", "2", ")", ",", "self", ".", "args", ".", "n_emb", ",", "\n", "self", ".", "args", ".", "dropout_keep_prob", "if", "self", ".", "is_train", "else", "1", ")", "\n", "", "self", ".", "token_encoder", "=", "residual_link", "(", "self", ".", "token_emb", ",", "y", ",", "self", ".", "args", ".", "dropout_keep_prob", "if", "self", ".", "is_train", "else", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical.H0._self_attention": [[75, 94], ["tensorflow.variable_scope", "tensorflow.variable_scope", "modules.nn_module.attention_bias", "range", "tensorflow.variable_scope", "tensorflow.variable_scope", "modules.nn_module.multihead_attention", "modules.nn_module.residual_link"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.attention_bias", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.multihead_attention", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.residual_link"], ["", "", "def", "_self_attention", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'self_attention'", ")", ":", "\n", "            ", "attn_bias", "=", "attention_bias", "(", "self", ".", "mask", ",", "'masking'", ")", "\n", "self", ".", "n_hidden", "=", "self", ".", "args", ".", "n_emb", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "n_block", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'block_{}'", ".", "format", "(", "i", ")", ")", ":", "\n", "                    ", "y", "=", "multihead_attention", "(", "\n", "self", ".", "token_encoder", ",", "\n", "None", ",", "\n", "attn_bias", ",", "\n", "self", ".", "args", ".", "n_emb", ",", "\n", "self", ".", "args", ".", "n_emb", ",", "\n", "self", ".", "n_hidden", ",", "\n", "self", ".", "args", ".", "n_head", ",", "\n", "self", ".", "args", ".", "dropout_keep_prob", "if", "self", ".", "is_train", "else", "1.0", ",", "\n", "attention_function", "=", "'dot_product'", "\n", ")", "\n", "self", ".", "token_encoder", "=", "residual_link", "(", "self", ".", "token_encoder", ",", "y", ",", "\n", "self", ".", "args", ".", "dropout_keep_prob", "if", "self", ".", "is_train", "else", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical.H0._predict_label": [[95, 99], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.reshape", "modules.rnn_module.dense"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.dense"], ["", "", "", "", "def", "_predict_label", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'predict_labels'", ")", ":", "\n", "            ", "self", ".", "token_att", "=", "tf", ".", "reshape", "(", "self", ".", "token_encoder", ",", "shape", "=", "[", "self", ".", "N", ",", "self", ".", "args", ".", "max_len", "*", "self", ".", "n_hidden", "]", ")", "\n", "self", ".", "outputs", "=", "dense", "(", "self", ".", "token_att", ",", "self", ".", "n_class", ",", "initializer", "=", "self", ".", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical.H0._compute_loss": [[100, 115], ["tensorflow.argmax", "tensorflow.argmax", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.nn.weighted_cross_entropy_with_logits", "tensorflow.nn.weighted_cross_entropy_with_logits", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.add_n", "tensorflow.add_n", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "", "def", "_compute_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "pre_labels", "=", "tf", ".", "argmax", "(", "self", ".", "outputs", ",", "axis", "=", "1", ")", "\n", "if", "self", ".", "args", ".", "pos_weight", ">", "0", ":", "\n", "            ", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "weighted_cross_entropy_with_logits", "(", "targets", "=", "tf", ".", "one_hot", "(", "self", ".", "labels", ",", "2", ")", ",", "\n", "logits", "=", "self", ".", "outputs", ",", "\n", "pos_weight", "=", "self", ".", "args", ".", "pos_weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "labels", ",", "\n", "logits", "=", "self", ".", "outputs", ")", ")", "\n", "# self.loss = self._focal_loss(tf.one_hot(self.labels, 2, axis=1), self.output)", "\n", "", "self", ".", "all_params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "if", "self", ".", "args", ".", "weight_decay", ">", "0", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'l2_loss'", ")", ":", "\n", "                ", "l2_loss", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", "for", "v", "in", "self", ".", "all_params", "]", ")", "\n", "", "self", ".", "loss", "+=", "self", ".", "args", ".", "weight_decay", "*", "l2_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical.H0._create_train_op": [[116, 135], ["tensorflow.variable_scope", "tensorflow.variable_scope", "Hierarchical.H0.optimizer.apply_gradients", "tensorflow.train.AdagradOptimizer", "tensorflow.train.AdagradOptimizer", "tensorflow.clip_by_global_norm", "tensorflow.clip_by_global_norm", "tensorflow.gradients", "tensorflow.gradients", "zip", "tensorflow.opt.LazyAdamOptimizer", "tensorflow.opt.LazyAdamOptimizer", "tensorflow.gradients", "tensorflow.gradients", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.GradientDescentOptimizer", "tensorflow.train.GradientDescentOptimizer", "NotImplementedError"], "methods", ["None"], ["", "", "def", "_create_train_op", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'optimizer'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "opt_type", "=", "self", ".", "args", ".", "optim", "\n", "if", "opt_type", "==", "'adagrad'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdagradOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "opt_type", "==", "'adam'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tc", ".", "opt", ".", "LazyAdamOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "opt_type", "==", "'rprop'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "opt_type", "==", "'sgd'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "lr", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Unsupported optimizer: {}'", ".", "format", "(", "self", ".", "opt_type", ")", ")", "\n", "", "if", "self", ".", "args", ".", "global_norm", ">", "0", ":", "\n", "                ", "self", ".", "grads", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "self", ".", "all_params", ")", ",", "self", ".", "args", ".", "global_norm", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "grads", "=", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "self", ".", "all_params", ")", "\n", "", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "zip", "(", "self", ".", "grads", ",", "self", ".", "all_params", ")", ",", "\n", "global_step", "=", "self", ".", "global_step", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_1.H1.__init__": [[11, 33], ["tensorflow.get_variable", "tensorflow.get_variable", "batch.get_next", "tensorflow.sequence_mask", "tensorflow.sequence_mask", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "Hierarchical_1.H1._build_graph", "tensorflow.shape", "tensorflow.shape", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._build_graph"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "batch", ",", "token_embeddings", ",", "logger", ")", ":", "\n", "# logging", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "logger", "=", "logger", "\n", "# basic config", "\n", "self", ".", "n_batch", "=", "tf", ".", "get_variable", "(", "'n_batch'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "int32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "n_class", "=", "2", "\n", "self", ".", "opt_type", "=", "args", ".", "optim", "\n", "self", ".", "weight_decay", "=", "args", ".", "weight_decay", "\n", "\n", "self", ".", "eid", ",", "self", ".", "token_ids", ",", "self", ".", "token_len", ",", "self", ".", "cau_labels", ",", "self", ".", "alt_labels", "=", "batch", ".", "get_next", "(", ")", "\n", "self", ".", "N", "=", "tf", ".", "shape", "(", "self", ".", "eid", ")", "[", "0", "]", "\n", "# self.max_len = tf.reduce_max(self.token_len)", "\n", "# self.token_ids = tf.slice(self.token_ids, [0, 0], tf.stack([self.N, self.max_len]))", "\n", "self", ".", "mask", "=", "tf", ".", "sequence_mask", "(", "self", ".", "token_len", ",", "self", ".", "args", ".", "max_len", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'masks'", ")", "\n", "self", ".", "lr", "=", "tf", ".", "get_variable", "(", "'lr'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "is_train", "=", "tf", ".", "get_variable", "(", "'is_train'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "bool", ",", "trainable", "=", "False", ")", "\n", "self", ".", "global_step", "=", "tf", ".", "get_variable", "(", "'global_step'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "int32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ",", "trainable", "=", "False", ")", "\n", "self", ".", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "self", ".", "_build_graph", "(", "token_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_1.H1._build_graph": [[34, 47], ["time.time", "Hierarchical_1.H1._embed", "Hierarchical_1.H1._encoder", "Hierarchical_1.H1._self_attention", "Hierarchical_1.H1._predict_causality", "Hierarchical_1.H1._extract_altlex", "Hierarchical_1.H1._compute_loss", "Hierarchical_1.H1.logger.info", "Hierarchical_1.H1._create_train_op", "time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._embed", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._encoder", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._self_attention", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_1.H1._predict_causality", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_1.H1._extract_altlex", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._compute_loss", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._create_train_op"], ["", "def", "_build_graph", "(", "self", ",", "token_embeddings", ")", ":", "\n", "        ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_embed", "(", "token_embeddings", ")", "\n", "self", ".", "_encoder", "(", ")", "\n", "self", ".", "_self_attention", "(", ")", "\n", "self", ".", "_predict_causality", "(", ")", "\n", "self", ".", "_extract_altlex", "(", ")", "\n", "self", ".", "_compute_loss", "(", ")", "\n", "# self._compute_accuracy()", "\n", "# \u9009\u62e9\u4f18\u5316\u7b97\u6cd5", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "_create_train_op", "(", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_1.H1._embed": [[48, 65], ["tensorflow.device", "tensorflow.device", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "modules.nn_module.add_timing_signal", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.gather", "tensorflow.gather", "tensorflow.tile", "tensorflow.tile", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.constant", "tensorflow.constant", "tensorflow.range", "tensorflow.range", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.add_timing_signal"], ["", "def", "_embed", "(", "self", ",", "token_embeddings", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ",", "tf", ".", "variable_scope", "(", "'word_embedding'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "word_embeddings", "=", "tf", ".", "get_variable", "(", "'word_embeddings'", ",", "\n", "initializer", "=", "tf", ".", "constant", "(", "token_embeddings", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "self", ".", "token_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "word_embeddings", ",", "self", ".", "token_ids", ")", "\n", "if", "self", ".", "args", ".", "timing", ":", "\n", "                ", "self", ".", "token_emb", "=", "add_timing_signal", "(", "self", ".", "token_emb", ")", "\n", "", "else", ":", "\n", "                ", "pos_embeddings", "=", "tf", ".", "get_variable", "(", "'position_embedding'", ",", "[", "200", ",", "self", ".", "args", ".", "n_emb", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "0.0", ",", "self", ".", "args", ".", "n_emb", "**", "-", "0.5", ")", ")", "\n", "indices", "=", "tf", ".", "range", "(", "tf", ".", "shape", "(", "self", ".", "token_ids", ")", "[", "1", "]", ")", "[", "None", ",", ":", "]", "\n", "pos_emb", "=", "tf", ".", "gather", "(", "pos_embeddings", ",", "indices", ")", "\n", "pos_emb", "=", "tf", ".", "tile", "(", "pos_emb", ",", "[", "tf", ".", "shape", "(", "self", ".", "token_ids", ")", "[", "0", "]", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "token_emb", "+=", "pos_emb", "\n", "", "if", "self", ".", "is_train", ":", "\n", "                ", "self", ".", "token_emb", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "token_emb", ",", "self", ".", "args", ".", "dropout_keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_1.H1._encoder": [[66, 76], ["tensorflow.variable_scope", "tensorflow.variable_scope", "modules.nn_module.residual_link", "modules.rnn_module.cu_rnn", "int", "modules.cnn_module.cnn", "modules.nn_module.ffn", "int"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.residual_link", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.cu_rnn", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.cnn_module.cnn", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.ffn"], ["", "", "", "def", "_encoder", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'encoder'", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "encoder_type", "==", "'rnn'", ":", "\n", "                ", "y", ",", "_", "=", "cu_rnn", "(", "'bi-gru'", ",", "self", ".", "token_emb", ",", "int", "(", "self", ".", "args", ".", "n_emb", "/", "2", ")", ",", "self", ".", "n_batch", ",", "self", ".", "args", ".", "n_layer", ")", "\n", "", "elif", "self", ".", "args", ".", "encoder_type", "==", "'cnn'", ":", "\n", "                ", "y", "=", "cnn", "(", "self", ".", "token_emb", ",", "self", ".", "mask", ",", "self", ".", "args", ".", "n_emb", ",", "3", ")", "\n", "", "elif", "self", ".", "args", ".", "encoder_type", "==", "'ffn'", ":", "\n", "                ", "y", "=", "ffn", "(", "self", ".", "token_emb", ",", "int", "(", "self", ".", "args", ".", "n_emb", "*", "2", ")", ",", "self", ".", "args", ".", "n_emb", ",", "\n", "self", ".", "args", ".", "dropout_keep_prob", "if", "self", ".", "is_train", "else", "1", ")", "\n", "", "self", ".", "token_encoder", "=", "residual_link", "(", "self", ".", "token_emb", ",", "y", ",", "self", ".", "args", ".", "dropout_keep_prob", "if", "self", ".", "is_train", "else", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_1.H1._self_attention": [[77, 95], ["tensorflow.variable_scope", "tensorflow.variable_scope", "modules.nn_module.attention_bias", "range", "tensorflow.variable_scope", "tensorflow.variable_scope", "modules.nn_module.multihead_attention", "modules.nn_module.residual_link"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.attention_bias", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.multihead_attention", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.residual_link"], ["", "", "def", "_self_attention", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'self_attention'", ")", ":", "\n", "            ", "attn_bias", "=", "attention_bias", "(", "self", ".", "mask", ",", "'masking'", ")", "\n", "self", ".", "n_hidden", "=", "self", ".", "args", ".", "n_emb", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "n_block", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'block_{}'", ".", "format", "(", "i", ")", ")", ":", "\n", "                    ", "y", "=", "multihead_attention", "(", "\n", "self", ".", "token_encoder", ",", "\n", "None", ",", "\n", "attn_bias", ",", "\n", "self", ".", "args", ".", "n_emb", ",", "\n", "self", ".", "args", ".", "n_emb", ",", "\n", "self", ".", "n_hidden", ",", "\n", "self", ".", "args", ".", "n_head", ",", "\n", "self", ".", "args", ".", "dropout_keep_prob", ",", "\n", "attention_function", "=", "'dot_product'", "\n", ")", "\n", "self", ".", "token_encoder", "=", "residual_link", "(", "self", ".", "token_encoder", ",", "y", ",", "self", ".", "args", ".", "dropout_keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_1.H1._predict_causality": [[96, 100], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.reshape", "modules.rnn_module.dense"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.dense"], ["", "", "", "", "def", "_predict_causality", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'predict_causality'", ")", ":", "\n", "            ", "self", ".", "token_pre", "=", "tf", ".", "reshape", "(", "self", ".", "token_encoder", ",", "[", "self", ".", "N", ",", "self", ".", "args", ".", "max_len", "*", "self", ".", "n_hidden", "]", ")", "\n", "self", ".", "cau_outputs", "=", "dense", "(", "self", ".", "token_pre", ",", "self", ".", "n_class", ",", "initializer", "=", "self", ".", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_1.H1._extract_altlex": [[101, 106], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.reshape", "modules.rnn_module.dense", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.stack", "tensorflow.stack"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.dense"], ["", "", "def", "_extract_altlex", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'extract_altlex'", ")", ":", "\n", "            ", "self", ".", "token_ext", "=", "tf", ".", "reshape", "(", "self", ".", "token_encoder", ",", "[", "-", "1", ",", "self", ".", "n_hidden", "]", ")", "\n", "self", ".", "alt_outputs", "=", "dense", "(", "self", ".", "token_ext", ",", "3", ",", "initializer", "=", "self", ".", "initializer", ")", "\n", "self", ".", "alt_outputs", "=", "tf", ".", "reshape", "(", "self", ".", "alt_outputs", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "self", ".", "args", ".", "max_len", ",", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_1.H1._compute_loss": [[107, 125], ["tensorflow.argmax", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.seq2seq.sequence_loss", "tensorflow.seq2seq.sequence_loss", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.nn.weighted_cross_entropy_with_logits", "tensorflow.nn.weighted_cross_entropy_with_logits", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.add_n", "tensorflow.add_n", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "", "def", "_compute_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "pred_cau", "=", "tf", ".", "argmax", "(", "self", ".", "cau_outputs", ",", "axis", "=", "1", ")", "\n", "self", ".", "pred_alt", "=", "tf", ".", "argmax", "(", "self", ".", "alt_outputs", ",", "axis", "=", "2", ")", "\n", "self", ".", "loss", "=", "self", ".", "args", ".", "alpha", "*", "tc", ".", "seq2seq", ".", "sequence_loss", "(", "logits", "=", "self", ".", "alt_outputs", ",", "targets", "=", "self", ".", "alt_labels", ",", "\n", "weights", "=", "self", ".", "mask", ")", "\n", "if", "self", ".", "args", ".", "pos_weight", ">", "0", ":", "\n", "            ", "self", ".", "loss", "+=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "weighted_cross_entropy_with_logits", "(", "targets", "=", "tf", ".", "one_hot", "(", "self", ".", "cau_labels", ",", "2", ")", ",", "\n", "logits", "=", "self", ".", "cau_outputs", ",", "\n", "pos_weight", "=", "self", ".", "args", ".", "pos_weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "+=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "cau_labels", ",", "\n", "logits", "=", "self", ".", "cau_outputs", ")", ")", "\n", "# self.loss = self._focal_loss(tf.one_hot(self.labels, 2, axis=1), self.output)", "\n", "", "self", ".", "all_params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "if", "self", ".", "args", ".", "weight_decay", ">", "0", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'l2_loss'", ")", ":", "\n", "                ", "l2_loss", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", "for", "v", "in", "self", ".", "all_params", "]", ")", "\n", "", "self", ".", "loss", "+=", "self", ".", "args", ".", "weight_decay", "*", "l2_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_1.H1._create_train_op": [[126, 145], ["tensorflow.variable_scope", "tensorflow.variable_scope", "Hierarchical_1.H1.optimizer.apply_gradients", "tensorflow.train.AdagradOptimizer", "tensorflow.train.AdagradOptimizer", "tensorflow.clip_by_global_norm", "tensorflow.clip_by_global_norm", "tensorflow.gradients", "tensorflow.gradients", "zip", "tensorflow.opt.LazyAdamOptimizer", "tensorflow.opt.LazyAdamOptimizer", "tensorflow.gradients", "tensorflow.gradients", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.GradientDescentOptimizer", "tensorflow.train.GradientDescentOptimizer", "NotImplementedError"], "methods", ["None"], ["", "", "def", "_create_train_op", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'optimizer'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "opt_type", "=", "self", ".", "args", ".", "optim", "\n", "if", "opt_type", "==", "'adagrad'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdagradOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "opt_type", "==", "'adam'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tc", ".", "opt", ".", "LazyAdamOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "opt_type", "==", "'rprop'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "opt_type", "==", "'sgd'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "lr", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Unsupported optimizer: {}'", ".", "format", "(", "self", ".", "opt_type", ")", ")", "\n", "", "if", "self", ".", "args", ".", "global_norm", ">", "0", ":", "\n", "                ", "self", ".", "grads", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "self", ".", "all_params", ")", ",", "self", ".", "args", ".", "global_norm", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "grads", "=", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "self", ".", "all_params", ")", "\n", "", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "zip", "(", "self", ".", "grads", ",", "self", ".", "all_params", ")", ",", "\n", "global_step", "=", "self", ".", "global_step", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextRNN.TextRNN.__init__": [[19, 40], ["torch.Module.__init__", "time.time.time", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch_TextRNN.TextRNN._init_weights", "logger.info", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextCNN.TextCNN._init_weights"], ["    ", "def", "__init__", "(", "self", ",", "token_embeddings", ",", "output_size", ",", "n_hidden", ",", "n_layer", ",", "kmax_pooling", ",", "is_pos", ",", "is_sinusoid", ",", "\n", "dropout", ",", "logger", ")", ":", "\n", "        ", "super", "(", "TextRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "start_t", "=", "time", "(", ")", "\n", "n_dict", ",", "n_emb", "=", "token_embeddings", ".", "shape", "\n", "self", ".", "gru_hidden", "=", "2", "*", "n_hidden", "\n", "self", ".", "kmax_pooling", "=", "kmax_pooling", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "n_dict", ",", "n_emb", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "emb_dropout", "=", "nn", ".", "Dropout", "(", "dropout", "[", "'emb'", "]", ")", "\n", "self", ".", "bi_GRU", "=", "nn", ".", "GRU", "(", "n_emb", ",", "n_hidden", ",", "n_layer", ",", "dropout", "=", "dropout", "[", "'layer'", "]", ",", "bidirectional", "=", "True", ")", "\n", "\n", "# \u4e24\u5c42\u5168\u8fde\u63a5\u5c42\uff0c\u4e2d\u95f4\u6dfb\u52a0\u6279\u6807\u51c6\u5316\u5c42", "\n", "# \u5168\u8fde\u63a5\u5c42\u9690\u85cf\u5143\u4e2a\u6570\u9700\u8981\u518d\u505a\u4fee\u6539", "\n", "self", ".", "out_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "kmax_pooling", "*", "self", ".", "gru_hidden", ",", "self", ".", "gru_hidden", ")", ",", "\n", "# nn.BatchNorm1d(self.gru_hidden),", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "gru_hidden", ",", "output_size", ")", "\n", ")", "\n", "\n", "self", ".", "_init_weights", "(", "token_embeddings", ")", "\n", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextRNN.TextRNN._init_weights": [[41, 44], ["torch_TextRNN.TextRNN.word_embedding.weight.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "self", ".", "word_embedding", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "embeddings", ")", ")", "\n", "self", ".", "word_embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextRNN.TextRNN.forward": [[46, 60], ["torch_TextRNN.TextRNN.word_embedding", "[].permute", "torch_TextRNN.kmax_pooling", "kmax_pooling.view", "torch_TextRNN.TextRNN.out_fc", "kmax_pooling.size", "torch_TextRNN.TextRNN.bi_GRU"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextRNN.kmax_pooling"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_pre", ",", "x_alt", ",", "x_cur", ",", "seq_lens", ")", ":", "\n", "# batch_size = x.shape[0]", "\n", "# sorted_seq_lens, indices = torch.sort(seq_lens, dim=0, descending=True)", "\n", "# _, desorted_indices = torch.sort(indices, descending=False)", "\n", "# x = x[indices]", "\n", "        ", "x_emb", "=", "self", ".", "word_embedding", "(", "x", ")", "\n", "# x_emb = nn_utils.rnn.pack_padded_sequence(x_emb, sorted_seq_lens, batch_first=True)", "\n", "output", "=", "self", ".", "bi_GRU", "(", "x_emb", ")", "[", "0", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# batch * hidden * seq", "\n", "pooling", "=", "kmax_pooling", "(", "output", ",", "2", ",", "self", ".", "kmax_pooling", ")", "# batch * hidden * kmax", "\n", "\n", "# word+article", "\n", "flatten", "=", "pooling", ".", "view", "(", "pooling", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "self", ".", "out_fc", "(", "flatten", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextRNN.kmax_pooling": [[13, 16], ["x.gather", "[].sort", "x.topk"], "function", ["None"], ["def", "kmax_pooling", "(", "x", ",", "dim", ",", "k", ")", ":", "\n", "    ", "index", "=", "x", ".", "topk", "(", "k", ",", "dim", "=", "dim", ")", "[", "1", "]", ".", "sort", "(", "dim", "=", "dim", ")", "[", "0", "]", "# torch.Tensor.topk()\u7684\u8f93\u51fa\u6709\u4e24\u9879\uff0c\u540e\u4e00\u9879\u4e3a\u7d22\u5f15", "\n", "return", "x", ".", "gather", "(", "dim", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.CNN.BasicCNN.__init__": [[9, 29], ["logging.getLogger", "batch.get_next", "tensorflow.sequence_mask", "tensorflow.get_variable", "tensorflow.get_variable", "CNN.BasicCNN._build_graph"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._build_graph"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "batch", ",", "max_len", ",", "token_embeddings", ",", "trainable", "=", "True", ")", ":", "\n", "# logging", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "'basic cnn model'", ")", "\n", "# basic config", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "embed_size", "=", "args", ".", "embed_size", "\n", "self", ".", "filter_sizes", "=", "args", ".", "filter_sizes", "\n", "self", ".", "num_filters", "=", "args", ".", "num_filters", "\n", "self", ".", "num_class", "=", "2", "\n", "self", ".", "opt_type", "=", "args", ".", "optim", "\n", "self", ".", "dropout_keep_prob", "=", "args", ".", "dropout_keep_prob", "\n", "self", ".", "weight_decay", "=", "args", ".", "weight_decay", "\n", "self", ".", "is_train", "=", "trainable", "\n", "\n", "self", ".", "eid", ",", "self", ".", "token_ids", ",", "self", ".", "token_len", ",", "self", ".", "labels", "=", "batch", ".", "get_next", "(", ")", "\n", "self", ".", "mask", "=", "tf", ".", "sequence_mask", "(", "self", ".", "token_len", ",", "self", ".", "max_len", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'masks'", ")", "\n", "self", ".", "lr", "=", "tf", ".", "get_variable", "(", "'lr'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "is_train", "=", "tf", ".", "get_variable", "(", "'is_train'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "bool", ",", "trainable", "=", "False", ")", "\n", "\n", "self", ".", "_build_graph", "(", "token_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.CNN.BasicCNN._build_graph": [[30, 40], ["time.time", "CNN.BasicCNN._embed", "CNN.BasicCNN._conv_pool", "CNN.BasicCNN._predict_label", "CNN.BasicCNN._compute_loss", "CNN.BasicCNN._compute_accuracy", "CNN.BasicCNN._create_train_op", "CNN.BasicCNN.logger.info", "time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._embed", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.CNN.BasicCNN._conv_pool", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._predict_label", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._compute_loss", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.BiLSTM.BasicBiLSTM._compute_accuracy", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._create_train_op"], ["", "def", "_build_graph", "(", "self", ",", "token_embeddings", ")", ":", "\n", "        ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_embed", "(", "token_embeddings", ")", "\n", "self", ".", "_conv_pool", "(", ")", "\n", "self", ".", "_predict_label", "(", ")", "\n", "self", ".", "_compute_loss", "(", ")", "\n", "self", ".", "_compute_accuracy", "(", ")", "\n", "# \u9009\u62e9\u4f18\u5316\u7b97\u6cd5", "\n", "self", ".", "_create_train_op", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.CNN.BasicCNN._embed": [[41, 48], ["tensorflow.device", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.expand_dims", "tensorflow.constant"], "methods", ["None"], ["", "def", "_embed", "(", "self", ",", "token_embeddings", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ",", "tf", ".", "variable_scope", "(", "'word_embedding'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "word_embeddings", "=", "tf", ".", "get_variable", "(", "'word_embeddings'", ",", "\n", "initializer", "=", "tf", ".", "constant", "(", "token_embeddings", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "self", ".", "token_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "word_embeddings", ",", "self", ".", "token_ids", ")", "\n", "self", ".", "token_emb", "=", "tf", ".", "expand_dims", "(", "self", ".", "token_emb", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.CNN.BasicCNN._conv_pool": [[49, 80], ["tensorflow.concat", "tensorflow.reshape", "tensorflow.variable_scope", "enumerate", "len", "tensorflow.nn.dropout", "tensorflow.contrib.layers.convolution2d", "tensorflow.nn.max_pool", "CNN.BasicCNN.pooled_outputs.append"], "methods", ["None"], ["", "", "def", "_conv_pool", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'conv_pool'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "self", ".", "pooled_outputs", "=", "[", "]", "\n", "for", "i", ",", "filter_size", "in", "enumerate", "(", "self", ".", "filter_sizes", ")", ":", "\n", "                ", "filter_shape", "=", "[", "filter_size", ",", "self", ".", "embed_size", ",", "1", ",", "self", ".", "num_filters", "]", "\n", "# W = tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')", "\n", "# b = tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')", "\n", "# conv = tf.nn.conv2d(", "\n", "#     self.token_emb,", "\n", "#     W,", "\n", "#     strides=[1, 1, 1, 1],", "\n", "#     padding=\"VALID\",", "\n", "#     name='conv')", "\n", "h", "=", "tf", ".", "contrib", ".", "layers", ".", "convolution2d", "(", "self", ".", "token_emb", ",", "self", ".", "num_filters", ",", "[", "filter_size", ",", "self", ".", "embed_size", "]", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "normalizer_fn", "=", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", ",", "\n", "normalizer_params", "=", "{", "'decay'", ":", "0.9", "}", ")", "\n", "# h = tf.nn.relu(conv)", "\n", "pooled", "=", "tf", ".", "nn", ".", "max_pool", "(", "\n", "h", ",", "\n", "ksize", "=", "[", "1", ",", "self", ".", "max_len", "-", "filter_size", "+", "1", ",", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "name", "=", "\"pool\"", ")", "\n", "\n", "self", ".", "pooled_outputs", ".", "append", "(", "pooled", ")", "\n", "", "", "self", ".", "num_filters_total", "=", "self", ".", "num_filters", "*", "len", "(", "self", ".", "filter_sizes", ")", "\n", "self", ".", "h_pool", "=", "tf", ".", "concat", "(", "self", ".", "pooled_outputs", ",", "3", ")", "\n", "self", ".", "h_pool_flat", "=", "tf", ".", "reshape", "(", "self", ".", "h_pool", ",", "[", "-", "1", ",", "self", ".", "num_filters_total", "]", ")", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "h_pool_flat", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "h_pool_flat", ",", "self", ".", "dropout_keep_prob", ")", "\n", "# self.seq_encode = tf.reshape(self.seq_encode, [-1, 2 * self.hidden_size])", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.CNN.BasicCNN._predict_label": [[82, 90], ["tensorflow.variable_scope", "tensorflow.nn.relu", "modules.rnn_module.dense", "modules.rnn_module.dense", "tensorflow.nn.dropout", "int"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.dense", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.dense"], ["", "", "def", "_predict_label", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'predict_labels'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "self", ".", "label_dense_0", "=", "tf", ".", "nn", ".", "relu", "(", "\n", "dense", "(", "self", ".", "h_pool_flat", ",", "hidden", "=", "int", "(", "self", ".", "num_filters_total", "/", "2", ")", ",", "scope", "=", "'dense_0'", ")", ")", "\n", "if", "self", ".", "is_train", ":", "\n", "                ", "self", ".", "label_dense_0", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "label_dense_0", ",", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "", "self", ".", "output", "=", "dense", "(", "self", ".", "label_dense_0", ",", "hidden", "=", "self", ".", "num_class", ",", "scope", "=", "'output_labels'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.CNN.BasicCNN._focal_loss": [[122, 139], ["tensorflow.name_scope", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.cast", "tensorflow.nn.sigmoid", "tensorflow.where", "tensorflow.scalar_mul", "tensorflow.where", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.equal", "tensorflow.ones_like", "tensorflow.equal", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.pow"], "methods", ["None"], ["", "", "def", "_focal_loss", "(", "self", ",", "onehot_labels", ",", "cls_preds", ",", "alpha", "=", "0.75", ",", "gamma", "=", "4.0", ",", "name", "=", "None", ",", "scope", "=", "None", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "scope", ",", "'focal_loss'", ",", "[", "cls_preds", ",", "onehot_labels", "]", ")", "as", "sc", ":", "\n", "            ", "logits", "=", "tf", ".", "convert_to_tensor", "(", "cls_preds", ")", "\n", "onehot_labels", "=", "tf", ".", "convert_to_tensor", "(", "onehot_labels", ")", "\n", "\n", "precise_logits", "=", "tf", ".", "cast", "(", "logits", ",", "tf", ".", "float32", ")", "if", "(", "logits", ".", "dtype", "==", "tf", ".", "float16", ")", "else", "logits", "\n", "onehot_labels", "=", "tf", ".", "cast", "(", "onehot_labels", ",", "precise_logits", ".", "dtype", ")", "\n", "predictions", "=", "tf", ".", "nn", ".", "sigmoid", "(", "precise_logits", ")", "\n", "predictions_pt", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "onehot_labels", ",", "1", ")", ",", "predictions", ",", "1.", "-", "predictions", ")", "\n", "# add small value to avoid 0", "\n", "epsilon", "=", "1e-10", "\n", "alpha_t", "=", "tf", ".", "scalar_mul", "(", "alpha", ",", "tf", ".", "ones_like", "(", "onehot_labels", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "alpha_t", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "onehot_labels", ",", "1.0", ")", ",", "alpha_t", ",", "1", "-", "alpha_t", ")", "\n", "losses", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "reduce_sum", "(", "-", "alpha_t", "*", "tf", ".", "pow", "(", "1.", "-", "predictions_pt", ",", "gamma", ")", "*", "tf", ".", "log", "(", "predictions_pt", "+", "epsilon", ")", ",", "\n", "name", "=", "name", ",", "axis", "=", "1", ")", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.CNN.BasicCNN._compute_loss": [[140, 149], ["tensorflow.reduce_mean", "tensorflow.trainable_variables", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.variable_scope", "tensorflow.add_n", "tensorflow.stop_gradient", "tensorflow.one_hot", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "", "def", "_compute_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "\n", "logits", "=", "self", ".", "output", ",", "labels", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "one_hot", "(", "self", ".", "labels", ",", "2", ",", "axis", "=", "1", ")", ")", ")", ")", "\n", "# self.loss = self._focal_loss(tf.one_hot(self.labels, 2, axis=1), self.output)", "\n", "self", ".", "all_params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "if", "self", ".", "weight_decay", ">", "0", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'l2_loss'", ")", ":", "\n", "                ", "l2_loss", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", "for", "v", "in", "self", ".", "all_params", "]", ")", "\n", "", "self", ".", "loss", "+=", "self", ".", "weight_decay", "*", "l2_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.CNN.BasicCNN._compute_accuracy": [[150, 155], ["tensorflow.name_scope", "tensorflow.argmax", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.cast"], "methods", ["None"], ["", "", "def", "_compute_accuracy", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'accuracy'", ")", ":", "\n", "            ", "self", ".", "pre_labels", "=", "tf", ".", "argmax", "(", "self", ".", "output", ",", "axis", "=", "1", ")", "\n", "correct_predictions", "=", "tf", ".", "equal", "(", "self", ".", "pre_labels", ",", "self", ".", "labels", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_predictions", ",", "'float'", ")", ",", "name", "=", "'accuracy'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.CNN.BasicCNN._create_train_op": [[156, 174], ["tensorflow.variable_scope", "tensorflow.get_collection", "tensorflow.train.AdagradOptimizer", "tensorflow.control_dependencies", "CNN.BasicCNN.optimizer.minimize", "tensorflow.train.AdamOptimizer", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.GradientDescentOptimizer", "NotImplementedError"], "methods", ["None"], ["", "", "def", "_create_train_op", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Selects the training algorithm and creates a train operation with it\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "'optimizer'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "if", "self", ".", "opt_type", "==", "'adagrad'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdagradOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "opt_type", "==", "'adam'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "opt_type", "==", "'rprop'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "opt_type", "==", "'sgd'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "lr", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Unsupported optimizer: {}'", ".", "format", "(", "self", ".", "opt_type", ")", ")", "\n", "", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "                ", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DPCNN.TextCNNDeep.__init__": [[9, 45], ["torch.Module.__init__", "time.time.time", "torch.Embedding", "torch.Embedding", "torch.ModuleList", "torch.ModuleList", "len", "torch.Conv1d", "torch.Conv1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch_DPCNN.TextCNNDeep._init_weights", "logger.info", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.MaxPool1d", "torch.MaxPool1d", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextCNN.TextCNN._init_weights"], ["    ", "def", "__init__", "(", "self", ",", "token_embeddings", ",", "max_len", ",", "output_size", ",", "n_kernels", ",", "n_filter", ",", "dropout", ",", "logger", ")", ":", "\n", "        ", "super", "(", "TextCNNDeep", ",", "self", ")", ".", "__init__", "(", ")", "\n", "start_t", "=", "time", "(", ")", "\n", "n_dict", ",", "n_emb", "=", "token_embeddings", ".", "shape", "\n", "self", ".", "n_filter", "=", "n_filter", "\n", "self", ".", "n_feature_map", "=", "250", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "n_dict", ",", "n_emb", ",", "padding_idx", "=", "0", ")", "\n", "\n", "self", ".", "question_convs", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "in_channels", "=", "n_emb", ",", "out_channels", "=", "n_filter", ",", "kernel_size", "=", "kernel_size", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "n_filter", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "in_channels", "=", "n_filter", ",", "\n", "out_channels", "=", "n_filter", ",", "\n", "kernel_size", "=", "kernel_size", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "n_filter", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "(", "max_len", "[", "'full'", "]", "-", "kernel_size", "*", "2", "+", "2", ")", ")", "\n", ")", "for", "kernel_size", "in", "n_kernels", "]", ")", "\n", "\n", "self", ".", "num_seq", "=", "len", "(", "n_kernels", ")", "\n", "self", ".", "change_dim_conv", "=", "nn", ".", "Conv1d", "(", "n_filter", "*", "self", ".", "num_seq", ",", "self", ".", "n_feature_map", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "standard_pooling", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "standard_batchnm", "=", "nn", ".", "BatchNorm1d", "(", "num_features", "=", "self", ".", "n_feature_map", ")", "\n", "self", ".", "standard_act_fun", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "n_feature_map", ",", "output_size", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "output_size", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "output_size", ",", "output_size", ")", "\n", ")", "\n", "self", ".", "_init_weights", "(", "token_embeddings", ")", "\n", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DPCNN.TextCNNDeep._init_weights": [[46, 49], ["torch_DPCNN.TextCNNDeep.word_embedding.weight.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "self", ".", "word_embedding", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "embeddings", ")", ")", "\n", "self", ".", "word_embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DPCNN.TextCNNDeep.forward": [[50, 69], ["torch_DPCNN.TextCNNDeep.word_embedding", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_DPCNN.TextCNNDeep.change_dim_conv", "torch_DPCNN.TextCNNDeep.standard_batchnm", "torch_DPCNN.TextCNNDeep.standard_act_fun", "torch_DPCNN.TextCNNDeep.standard_batchnm", "torch_DPCNN.TextCNNDeep.standard_act_fun", "torch_DPCNN.TextCNNDeep.view", "torch_DPCNN.TextCNNDeep.fc", "question_conv", "torch_DPCNN.TextCNNDeep.conv3x3", "torch_DPCNN.TextCNNDeep.conv3x3", "torch_DPCNN.TextCNNDeep.size", "torch_DPCNN.TextCNNDeep._block", "torch_DPCNN.TextCNNDeep.size", "torch_DPCNN.TextCNNDeep.permute", "torch_DPCNN.TextCNNDeep.size"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DPCNN.TextCNNDeep.conv3x3", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DPCNN.TextCNNDeep.conv3x3", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DPCNN.TextCNNDeep._block"], ["", "def", "forward", "(", "self", ",", "inp", ",", "x_pre", ",", "x_alt", ",", "x_cur", ",", "seq_lens", ")", ":", "\n", "        ", "inp_emb", "=", "self", ".", "word_embedding", "(", "inp", ")", "\n", "# question = self.encoder(question)", "\n", "# permute \u7684\u4f5c\u7528\u662f\u4ea4\u6362\u7ef4\u5ea6\uff0c\u56e0\u4e3a\u8bcd\u5d4c\u5165\u7684\u7ef4\u5ea6200\u8981\u4f5c\u4e3a\u540e\u9762conv1\u7684\u8f93\u5165\u7684channel\uff0c\u6240\u4ee5\u7b2c\u4e8c\u548c\u4e09\u7ef4\u4ea4\u6362", "\n", "x", "=", "[", "question_conv", "(", "inp_emb", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "for", "question_conv", "in", "self", ".", "question_convs", "]", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "\n", "xp", "=", "x", "\n", "xp", "=", "self", ".", "change_dim_conv", "(", "xp", ")", "\n", "x", "=", "self", ".", "conv3x3", "(", "in_channels", "=", "x", ".", "size", "(", "1", ")", ",", "out_channels", "=", "self", ".", "n_feature_map", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "standard_batchnm", "(", "x", ")", "\n", "x", "=", "self", ".", "standard_act_fun", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3x3", "(", "self", ".", "n_feature_map", ",", "self", ".", "n_feature_map", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "standard_batchnm", "(", "x", ")", "\n", "x", "=", "self", ".", "standard_act_fun", "(", "x", ")", "\n", "x", "=", "x", "+", "xp", "\n", "while", "x", ".", "size", "(", "2", ")", ">", "2", ":", "\n", "            ", "x", "=", "self", ".", "_block", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "fc", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DPCNN.TextCNNDeep.conv3x3": [[70, 75], ["torch.Conv1d", "torch.Conv1d", "torch.Conv1d.cuda"], "methods", ["None"], ["", "def", "conv3x3", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ":", "\n", "        ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "_conv", "=", "nn", ".", "Conv1d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "return", "_conv", ".", "cuda", "(", ")", "\n", "# if self.opt.USE_CUDA:", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DPCNN.TextCNNDeep._block": [[80, 91], ["torch_DPCNN.TextCNNDeep.standard_pooling", "torch_DPCNN.TextCNNDeep.standard_batchnm", "torch_DPCNN.TextCNNDeep.standard_act_fun", "torch_DPCNN.TextCNNDeep.standard_batchnm", "torch_DPCNN.TextCNNDeep.standard_act_fun", "torch_DPCNN.TextCNNDeep.conv3x3", "torch_DPCNN.TextCNNDeep.conv3x3"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DPCNN.TextCNNDeep.conv3x3", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DPCNN.TextCNNDeep.conv3x3"], ["", "def", "_block", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "standard_pooling", "(", "x", ")", "\n", "xp", "=", "x", "\n", "x", "=", "self", ".", "conv3x3", "(", "self", ".", "opt", ".", "NUM_ID_FEATURE_MAP", ",", "self", ".", "opt", ".", "NUM_ID_FEATURE_MAP", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "standard_batchnm", "(", "x", ")", "\n", "x", "=", "self", ".", "standard_act_fun", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3x3", "(", "self", ".", "opt", ".", "NUM_ID_FEATURE_MAP", ",", "self", ".", "opt", ".", "NUM_ID_FEATURE_MAP", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "standard_batchnm", "(", "x", ")", "\n", "x", "=", "self", ".", "standard_act_fun", "(", "x", ")", "\n", "x", "+=", "xp", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.SelfAttentiveSentenceEmbedding.SelfAttentive.__init__": [[8, 35], ["tensorflow.get_variable", "tensorflow.get_variable", "batch.get_next", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.slice", "tensorflow.slice", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "SelfAttentiveSentenceEmbedding.SelfAttentive._build_graph", "tensorflow.shape", "tensorflow.shape", "tensorflow.stack", "tensorflow.stack", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._build_graph"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "batch", ",", "token_embeddings", ",", "logger", ",", "trainable", "=", "True", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logger", "\n", "# basic config", "\n", "self", ".", "n_batch", "=", "tf", ".", "get_variable", "(", "'n_batch'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "int32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "n_hidden", "=", "args", ".", "n_hidden", "\n", "self", ".", "n_layer", "=", "args", ".", "n_layer", "\n", "self", ".", "da", "=", "args", ".", "sa_da", "\n", "self", ".", "r", "=", "args", ".", "sa_r", "\n", "self", ".", "num_class", "=", "2", "\n", "self", ".", "opt_type", "=", "args", ".", "optim", "\n", "self", ".", "pos_weight", "=", "args", ".", "pos_weight", "\n", "self", ".", "dropout_keep_prob", "=", "args", ".", "dropout_keep_prob", "\n", "self", ".", "weight_decay", "=", "args", ".", "weight_decay", "\n", "self", ".", "norm", "=", "args", ".", "global_norm", "\n", "self", ".", "is_train", "=", "trainable", "\n", "\n", "self", ".", "eid", ",", "self", ".", "token_ids", ",", "self", ".", "token_len", ",", "self", ".", "labels", "=", "batch", ".", "get_next", "(", ")", "\n", "self", ".", "N", "=", "tf", ".", "shape", "(", "self", ".", "eid", ")", "[", "0", "]", "\n", "self", ".", "max_len", "=", "tf", ".", "reduce_max", "(", "self", ".", "token_len", ")", "\n", "self", ".", "token_ids", "=", "tf", ".", "slice", "(", "self", ".", "token_ids", ",", "[", "0", ",", "0", "]", ",", "tf", ".", "stack", "(", "[", "self", ".", "N", ",", "self", ".", "max_len", "]", ")", ")", "\n", "self", ".", "lr", "=", "tf", ".", "get_variable", "(", "'lr'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "is_train", "=", "tf", ".", "get_variable", "(", "'is_train'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "bool", ",", "trainable", "=", "False", ")", "\n", "self", ".", "global_step", "=", "tf", ".", "get_variable", "(", "'global_step'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "int32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ",", "trainable", "=", "False", ")", "\n", "self", ".", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "self", ".", "_build_graph", "(", "token_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.SelfAttentiveSentenceEmbedding.SelfAttentive._build_graph": [[36, 50], ["time.time", "SelfAttentiveSentenceEmbedding.SelfAttentive._embed", "SelfAttentiveSentenceEmbedding.SelfAttentive._encode", "SelfAttentiveSentenceEmbedding.SelfAttentive._cal_attention", "SelfAttentiveSentenceEmbedding.SelfAttentive._apply_attention", "SelfAttentiveSentenceEmbedding.SelfAttentive._penal_term", "SelfAttentiveSentenceEmbedding.SelfAttentive._predict_label", "SelfAttentiveSentenceEmbedding.SelfAttentive._compute_loss", "SelfAttentiveSentenceEmbedding.SelfAttentive.logger.info", "SelfAttentiveSentenceEmbedding.SelfAttentive._create_train_op", "time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._embed", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.BiLSTM.BasicBiLSTM._encode", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.SelfAttentiveSentenceEmbedding.SelfAttentive._cal_attention", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.SelfAttentiveSentenceEmbedding.SelfAttentive._apply_attention", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.SelfAttentiveSentenceEmbedding.SelfAttentive._penal_term", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._predict_label", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._compute_loss", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._create_train_op"], ["", "def", "_build_graph", "(", "self", ",", "token_embeddings", ")", ":", "\n", "        ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_embed", "(", "token_embeddings", ")", "\n", "self", ".", "_encode", "(", ")", "\n", "self", ".", "_cal_attention", "(", ")", "\n", "self", ".", "_apply_attention", "(", ")", "\n", "self", ".", "_penal_term", "(", ")", "\n", "self", ".", "_predict_label", "(", ")", "\n", "self", ".", "_compute_loss", "(", ")", "\n", "# self._compute_accuracy()", "\n", "# \u9009\u62e9\u4f18\u5316\u7b97\u6cd5", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "_create_train_op", "(", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.SelfAttentiveSentenceEmbedding.SelfAttentive._embed": [[51, 57], ["tensorflow.device", "tensorflow.device", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.constant", "tensorflow.constant"], "methods", ["None"], ["", "def", "_embed", "(", "self", ",", "token_embeddings", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ",", "tf", ".", "variable_scope", "(", "'word_embedding'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "word_embeddings", "=", "tf", ".", "get_variable", "(", "'word_embeddings'", ",", "\n", "initializer", "=", "tf", ".", "constant", "(", "token_embeddings", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "self", ".", "token_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "word_embeddings", ",", "self", ".", "token_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.SelfAttentiveSentenceEmbedding.SelfAttentive._encode": [[58, 63], ["tensorflow.variable_scope", "tensorflow.variable_scope", "modules.rnn_module.cu_rnn", "tensorflow.nn.dropout", "tensorflow.nn.dropout"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.cu_rnn"], ["", "", "def", "_encode", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'encoding'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "self", ".", "H", ",", "_", "=", "cu_rnn", "(", "'bi-lstm'", ",", "self", ".", "token_emb", ",", "self", ".", "n_hidden", ",", "self", ".", "n_batch", ",", "self", ".", "n_layer", ")", "\n", "", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "H", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "H", ",", "rate", "=", "1", "-", "self", ".", "dropout_keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.SelfAttentiveSentenceEmbedding.SelfAttentive._cal_attention": [[64, 72], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.tanh", "tensorflow.nn.tanh", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["None"], ["", "", "def", "_cal_attention", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'cal_attention'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "self", ".", "W_s1", "=", "tf", ".", "get_variable", "(", "'Ws1'", ",", "shape", "=", "[", "2", "*", "self", ".", "n_hidden", ",", "self", ".", "da", "]", ",", "initializer", "=", "self", ".", "initializer", ")", "\n", "self", ".", "W_s1_H", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "self", ".", "H", ",", "[", "-", "1", ",", "2", "*", "self", ".", "n_hidden", "]", ")", ",", "self", ".", "W_s1", ")", ")", "\n", "self", ".", "W_s2", "=", "tf", ".", "get_variable", "(", "'Ws2'", ",", "shape", "=", "[", "self", ".", "da", ",", "self", ".", "r", "]", ",", "initializer", "=", "self", ".", "initializer", ")", "\n", "self", ".", "A", "=", "tf", ".", "matmul", "(", "self", ".", "W_s1_H", ",", "self", ".", "W_s2", ")", "\n", "# self.A_T = tf.nn.softmax(tf.reshape(self.A, shape=[-1, self.max_len, self.r]), dim=1, name='A_T')", "\n", "self", ".", "A_T", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "reshape", "(", "self", ".", "A", ",", "shape", "=", "[", "-", "1", ",", "self", ".", "max_len", ",", "self", ".", "r", "]", ")", ",", "name", "=", "'A_T'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.SelfAttentiveSentenceEmbedding.SelfAttentive._apply_attention": [[73, 77], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "", "def", "_apply_attention", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'apply_attention'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "self", ".", "H_T", "=", "tf", ".", "transpose", "(", "self", ".", "H", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "M_T", "=", "tf", ".", "matmul", "(", "self", ".", "H_T", ",", "self", ".", "A_T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.SelfAttentiveSentenceEmbedding.SelfAttentive._penal_term": [[78, 87], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.diag", "tensorflow.diag", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.ones", "tensorflow.ones", "tensorflow.square", "tensorflow.square", "tensorflow.norm", "tensorflow.norm"], "methods", ["None"], ["", "", "def", "_penal_term", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'penalization_term'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "self", ".", "A", "=", "tf", ".", "transpose", "(", "self", ".", "A_T", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "AA_T", "=", "tf", ".", "matmul", "(", "self", ".", "A", ",", "self", ".", "A_T", ")", "\n", "# self.I = tf.reshape(tf.tile(tf.diag(tf.ones([self.r]), name='diag_identity'), [self.n_batch, 1]),", "\n", "#                     [self.n_batch, self.r, self.r])", "\n", "self", ".", "I", "=", "tf", ".", "diag", "(", "tf", ".", "ones", "(", "[", "self", ".", "r", "]", ")", ",", "name", "=", "'diag_identity'", ")", "\n", "\n", "self", ".", "penalized_term", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "tf", ".", "norm", "(", "self", ".", "AA_T", "-", "self", ".", "I", ",", "ord", "=", "'euclidean'", ",", "axis", "=", "[", "1", ",", "2", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.SelfAttentiveSentenceEmbedding.SelfAttentive._predict_label": [[88, 96], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.relu", "tensorflow.nn.relu", "modules.rnn_module.dense", "modules.rnn_module.dense", "tensorflow.nn.dropout", "tensorflow.nn.dropout"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.dense", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.dense"], ["", "", "def", "_predict_label", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'predict_labels'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "self", ".", "flatten_M_T", "=", "tf", ".", "reshape", "(", "self", ".", "M_T", ",", "shape", "=", "[", "-", "1", ",", "self", ".", "r", "*", "2", "*", "self", ".", "n_hidden", "]", ")", "\n", "self", ".", "label_dense_0", "=", "tf", ".", "nn", ".", "relu", "(", "dense", "(", "self", ".", "flatten_M_T", ",", "hidden", "=", "2", "*", "self", ".", "n_hidden", ",", "scope", "=", "'dense_0'", ")", ")", "\n", "if", "self", ".", "is_train", ":", "\n", "                ", "self", ".", "label_dense_0", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "label_dense_0", ",", "rate", "=", "1", "-", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "", "self", ".", "output", "=", "dense", "(", "self", ".", "label_dense_0", ",", "hidden", "=", "self", ".", "num_class", ",", "scope", "=", "'output_labels'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.SelfAttentiveSentenceEmbedding.SelfAttentive._compute_loss": [[97, 113], ["tensorflow.argmax", "tensorflow.argmax", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.nn.weighted_cross_entropy_with_logits", "tensorflow.nn.weighted_cross_entropy_with_logits", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.add_n", "tensorflow.add_n", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "", "def", "_compute_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "pre_labels", "=", "tf", ".", "argmax", "(", "self", ".", "output", ",", "axis", "=", "1", ")", "\n", "if", "self", ".", "pos_weight", ">", "0", ":", "\n", "            ", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "weighted_cross_entropy_with_logits", "(", "targets", "=", "tf", ".", "one_hot", "(", "self", ".", "labels", ",", "2", ")", ",", "\n", "logits", "=", "self", ".", "output", ",", "\n", "pos_weight", "=", "self", ".", "pos_weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "labels", ",", "\n", "logits", "=", "self", ".", "output", ")", ")", "\n", "", "self", ".", "loss", "+=", "self", ".", "penalized_term", "\n", "# self.loss = self._focal_loss(tf.one_hot(self.labels, 2, axis=1), self.output)", "\n", "self", ".", "all_params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "if", "self", ".", "weight_decay", ">", "0", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'l2_loss'", ")", ":", "\n", "                ", "l2_loss", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", "for", "v", "in", "self", ".", "all_params", "]", ")", "\n", "", "self", ".", "loss", "+=", "self", ".", "weight_decay", "*", "l2_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.SelfAttentiveSentenceEmbedding.SelfAttentive._compute_accuracy": [[114, 118], ["tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.cast"], "methods", ["None"], ["", "", "def", "_compute_accuracy", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'accuracy'", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "self", ".", "pre_labels", ",", "self", ".", "labels", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_predictions", ",", "'float'", ")", ",", "name", "=", "'accuracy'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.SelfAttentiveSentenceEmbedding.SelfAttentive._create_train_op": [[119, 138], ["tensorflow.variable_scope", "tensorflow.variable_scope", "SelfAttentiveSentenceEmbedding.SelfAttentive.optimizer.compute_gradients", "zip", "tensorflow.clip_by_global_norm", "tensorflow.clip_by_global_norm", "SelfAttentiveSentenceEmbedding.SelfAttentive.optimizer.apply_gradients", "tensorflow.train.AdagradOptimizer", "tensorflow.train.AdagradOptimizer", "zip", "tensorflow.opt.LazyAdamOptimizer", "tensorflow.opt.LazyAdamOptimizer", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.GradientDescentOptimizer", "tensorflow.train.GradientDescentOptimizer", "NotImplementedError"], "methods", ["None"], ["", "", "def", "_create_train_op", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'optimizer'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "if", "self", ".", "opt_type", "==", "'adagrad'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdagradOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "opt_type", "==", "'adam'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tc", ".", "opt", ".", "LazyAdamOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "opt_type", "==", "'rprop'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "opt_type", "==", "'sgd'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "lr", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Unsupported optimizer: {}'", ".", "format", "(", "self", ".", "opt_type", ")", ")", "\n", "# self.grads, _ = tf.clip_by_global_norm(tf.gradients(self.loss, self.all_params), self.norm)", "\n", "# self.grads = tf.gradients(self.loss, self.all_params)", "\n", "", "grads", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", ")", "\n", "gradients", ",", "variables", "=", "zip", "(", "*", "grads", ")", "\n", "capped_grads", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "gradients", ",", "5", ")", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "zip", "(", "capped_grads", ",", "variables", ")", ",", "\n", "global_step", "=", "self", ".", "global_step", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_BiLSTM2DCNN.BiLSTM2DCNN.__init__": [[11, 28], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch_BiLSTM2DCNN.BiLSTM2DCNN.init_hidden", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "len"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_BiLSTM2DCNN.BiLSTM2DCNN.init_hidden"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "BiLSTM2DCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "args", ".", "embed_num", ",", "args", ".", "embedding_dim", ")", "\n", "\n", "self", ".", "hidden_dim", "=", "args", ".", "hidden_dim", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", "\n", "self", ".", "dropout_embed", "=", "nn", ".", "Dropout", "(", "args", ".", "dropout_embed", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "args", ".", "embedding_dim", ",", "args", ".", "hidden_dim", ",", "bidirectional", "=", "True", ",", "dropout", "=", "args", ".", "dropout_model", ")", "\n", "\n", "self", ".", "hidden", "=", "self", ".", "init_hidden", "(", "args", ".", "batch_size", ")", "\n", "\n", "# self.convl3 = nn.Conv2d(1, args.kernel_num, (3, args.hidden_dim * 2))", "\n", "self", ".", "convsl", "=", "[", "nn", ".", "Conv2d", "(", "1", ",", "args", ".", "kernel_num", ",", "(", "K", ",", "args", ".", "hidden_dim", "*", "2", ")", ")", "for", "K", "in", "args", ".", "kernel_sizes", "]", "\n", "\n", "self", ".", "hidden2label1", "=", "nn", ".", "Linear", "(", "args", ".", "kernel_num", "*", "len", "(", "args", ".", "kernel_sizes", ")", ",", "args", ".", "class_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_BiLSTM2DCNN.BiLSTM2DCNN.init_hidden": [[29, 34], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ")", ":", "\n", "# the first is the hidden h", "\n", "# the second is the cell  c", "\n", "        ", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "2", ",", "batch_size", ",", "self", ".", "hidden_dim", ")", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "2", ",", "batch_size", ",", "self", ".", "hidden_dim", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_BiLSTM2DCNN.BiLSTM2DCNN.forward": [[35, 72], ["torch_BiLSTM2DCNN.BiLSTM2DCNN.word_embeddings", "torch_BiLSTM2DCNN.BiLSTM2DCNN.dropout_embed", "torch_BiLSTM2DCNN.BiLSTM2DCNN.lstm", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "lstm_out.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_BiLSTM2DCNN.BiLSTM2DCNN.dropout", "torch_BiLSTM2DCNN.BiLSTM2DCNN.hidden2label1", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "conv", "i.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sentence", ")", ":", "\n", "# print(sentence)                                     # [torch.LongTensor of size 44x64]", "\n", "        ", "x", "=", "self", ".", "word_embeddings", "(", "sentence", ")", "\n", "x", "=", "self", ".", "dropout_embed", "(", "x", ")", "\n", "# print(embeds.size())                                # torch.Size([44, 64, 100])", "\n", "# x = embeds.view(len(sentence), self.batch_size, -1)", "\n", "# print(x.size())                                     # torch.Size([44, 64, 100])", "\n", "lstm_out", ",", "self", ".", "hidden", "=", "self", ".", "lstm", "(", "x", ",", "self", ".", "hidden", ")", "# lstm_out 10*5*50 hidden 1*5*50 *2", "\n", "# print(lstm_out)         # [torch.FloatTensor of size 44x64x400]", "\n", "# print(self.hidden)      # [torch.FloatTensor of size 2x64x200],[torch.FloatTensor of size 2x64x200]", "\n", "# lstm_out = [F.max_pool1d(i, len(lstm_out)).unsqueeze(2) for i in lstm_out]", "\n", "lstm_out", "=", "torch", ".", "transpose", "(", "lstm_out", ",", "0", ",", "1", ")", "# 64*44*400", "\n", "# lstm_out = torch.transpose(lstm_out, 1, 2)          # 5*50*10", "\n", "# print(lstm_out)         # [torch.FloatTensor of size 64x400x44]", "\n", "lstm_out", "=", "lstm_out", ".", "unsqueeze", "(", "1", ")", "\n", "# lstm_out = F.relu(self.convl3(lstm_out).squeeze(3))     # 64*100*44", "\n", "lstm_out", "=", "[", "F", ".", "relu", "(", "conv", "(", "lstm_out", ")", ")", ".", "squeeze", "(", "3", ")", "for", "conv", "in", "self", ".", "convsl", "]", "\n", "# print(lstm_out)             # [torch.FloatTensor of size 64x100x47] 46 45", "\n", "\n", "# lstm_out = F.max_pool1d(lstm_out, lstm_out.size(2))", "\n", "# # print(lstm_out.size())  # torch.Size([64, 100, 1])", "\n", "# lstm_out = lstm_out.squeeze(2)  # 10*5  64*100", "\n", "\n", "x", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "lstm_out", "]", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "1", ")", "\n", "# print(x)                    # [torch.FloatTensor of size 64x300]", "\n", "\n", "#lstm_out = torch.cat(lstm_out, 1)", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "# lstm_out = lstm_out.view(len(sentence), -1)", "\n", "# print(x)                        # [torch.FloatTensor of size 64x300]", "\n", "y", "=", "self", ".", "hidden2label1", "(", "F", ".", "tanh", "(", "x", ")", ")", "\n", "# print(y)                          # [torch.FloatTensor of size 64x2]", "\n", "# y = self.hidden2label2(F.tanh(y))", "\n", "log_probs", "=", "F", ".", "log_softmax", "(", "y", ")", "\n", "# log_probs = y", "\n", "return", "log_probs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DRNN.DRNN.__init__": [[9, 29], ["torch.nn.Module.__init__", "time.time.time", "torch.nn.Embedding", "modules.drnn_module.RNN", "modules.drnn_module.RNN", "torch.nn.Dropout", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch_DRNN.DRNN._init_weights", "logger.info", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextCNN.TextCNN._init_weights"], ["    ", "def", "__init__", "(", "self", ",", "token_embeddings", ",", "config", ",", "logger", ")", ":", "\n", "        ", "super", "(", "DRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "start_t", "=", "time", "(", ")", "\n", "n_dict", ",", "n_emb", "=", "token_embeddings", ".", "shape", "\n", "self", ".", "rnn_type", "=", "\"GRU\"", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "n_dict", ",", "n_emb", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "forward_rnn", "=", "RNN", "(", "n_emb", ",", "config", ".", "n_hidden", ",", "1", ",", "batch_first", "=", "True", ",", "rnn_type", "=", "self", ".", "rnn_type", ")", "\n", "# if config.DRNN.bidirectional:", "\n", "self", ".", "backward_rnn", "=", "RNN", "(", "n_emb", ",", "config", ".", "n_hidden", ",", "1", ",", "batch_first", "=", "True", ",", "rnn_type", "=", "self", ".", "rnn_type", ")", "\n", "self", ".", "window_size", "=", "config", ".", "window_size", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "dropout", "[", "'layer'", "]", ")", "\n", "self", ".", "hidden_dimension", "=", "config", ".", "n_hidden", "*", "2", "\n", "# if config.DRNN.bidirectional:", "\n", "# self.hidden_dimension *= 2", "\n", "self", ".", "batch_norm", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "hidden_dimension", ")", "\n", "\n", "self", ".", "mlp", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "hidden_dimension", ",", "self", ".", "hidden_dimension", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "hidden_dimension", ",", "config", ".", "n_class", ")", "\n", "self", ".", "_init_weights", "(", "token_embeddings", ")", "\n", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DRNN.DRNN._init_weights": [[30, 33], ["torch_DRNN.DRNN.word_embedding.weight.data.copy_", "torch.from_numpy"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "self", ".", "word_embedding", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "embeddings", ")", ")", "\n", "self", ".", "word_embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DRNN.DRNN.get_parameter_optimizer_dict": [[34, 43], ["super().get_parameter_optimizer_dict", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "torch_DRNN.DRNN.forward_rnn.parameters", "torch_DRNN.DRNN.batch_norm.parameters", "torch_DRNN.DRNN.mlp.parameters", "torch_DRNN.DRNN.linear.parameters", "torch_DRNN.DRNN.backward_rnn.parameters"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DRNN.DRNN.get_parameter_optimizer_dict"], ["", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "super", "(", "DRNN", ",", "self", ")", ".", "get_parameter_optimizer_dict", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "forward_rnn", ".", "parameters", "(", ")", "}", ")", "\n", "if", "self", ".", "config", ".", "DRNN", ".", "bidirectional", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "backward_rnn", ".", "parameters", "(", ")", "}", ")", "\n", "", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "batch_norm", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "mlp", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "linear", ".", "parameters", "(", ")", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DRNN.DRNN.get_embedding": [[44, 52], ["torch.where().float", "torch_DRNN.DRNN.word_embedding", "torch.nn.functional.pad", "torch.where", "torch.full_like"], "methods", ["None"], ["", "def", "get_embedding", "(", "self", ",", "batch", ",", "pad_shape", "=", "None", ",", "pad_value", "=", "0", ")", ":", "\n", "# mask = torch.tensor(batch).gt(0).float()", "\n", "        ", "mask", "=", "torch", ".", "where", "(", "batch", ">", "0", ",", "torch", ".", "full_like", "(", "batch", ",", "1", ")", ",", "batch", ")", ".", "float", "(", ")", "\n", "if", "pad_shape", "is", "not", "None", ":", "\n", "            ", "batch", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "batch", ",", "pad_shape", ",", "mode", "=", "'constant'", ",", "value", "=", "pad_value", ")", "\n", "", "embedding", "=", "self", ".", "word_embedding", "(", "batch", ")", "\n", "# length = batch[cDataset.DOC_TOKEN_LEN].to(self.config.device)", "\n", "return", "embedding", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_DRNN.DRNN.forward": [[53, 115], ["torch_DRNN.DRNN.get_embedding", "torch_DRNN.DRNN.get_embedding", "front_pad_embedding.size", "mask.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "range", "front_state.transpose.transpose.transpose", "torch.cat", "list", "range", "torch.cat", "range", "tail_state.transpose.transpose.transpose", "torch.cat", "torch.cat", "hidden.transpose().contiguous.transpose().contiguous.transpose().contiguous", "torch_DRNN.DRNN.batch_norm().transpose", "torch_DRNN.DRNN.mlp", "torch.nn.functional.max_pool1d().squeeze", "torch_DRNN.DRNN.linear", "torch.cat.size", "torch_DRNN.DRNN.forward_rnn", "front_state.transpose.transpose.split", "list.append", "torch.cat.size", "torch_DRNN.DRNN.backward_rnn", "tail_state.transpose.transpose.split", "torch_DRNN.DRNN.dropout", "range", "torch_DRNN.DRNN.dropout", "torch_DRNN.DRNN.dropout", "hidden.transpose().contiguous.transpose().contiguous.transpose", "torch_DRNN.DRNN.batch_norm", "torch.nn.functional.max_pool1d", "tail_pad_embedding.size", "torch.cat.size", "torch_DRNN.DRNN.dropout", "torch_DRNN.DRNN.dropout", "torch_DRNN.DRNN.transpose", "torch_DRNN.DRNN.size", "front_pad_embedding.size"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.get_embedding", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.get_embedding", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.linear"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_pre", ",", "x_alt", ",", "x_cur", ",", "seq_lens", ")", ":", "\n", "        ", "front_pad_embedding", ",", "mask", "=", "self", ".", "get_embedding", "(", "x", ",", "[", "self", ".", "window_size", "-", "1", ",", "0", "]", ",", "0", ")", "\n", "# if self.config.DRNN.bidirectional:", "\n", "tail_pad_embedding", ",", "_", "=", "self", ".", "get_embedding", "(", "x", ",", "[", "0", ",", "self", ".", "window_size", "-", "1", "]", ",", "0", ")", "\n", "batch_size", "=", "front_pad_embedding", ".", "size", "(", "0", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "front_slice_embedding_list", "=", "[", "front_pad_embedding", "[", ":", ",", "i", ":", "i", "+", "self", ".", "window_size", ",", ":", "]", "for", "i", "in", "\n", "range", "(", "front_pad_embedding", ".", "size", "(", "1", ")", "-", "self", ".", "window_size", "+", "1", ")", "]", "\n", "\n", "front_slice_embedding", "=", "torch", ".", "cat", "(", "front_slice_embedding_list", ",", "dim", "=", "0", ")", "\n", "\n", "state", "=", "None", "\n", "for", "i", "in", "range", "(", "front_slice_embedding", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "_", ",", "state", "=", "self", ".", "forward_rnn", "(", "front_slice_embedding", "[", ":", ",", "i", ":", "i", "+", "1", ",", ":", "]", ",", "\n", "init_state", "=", "state", ",", "ori_state", "=", "True", ")", "\n", "if", "self", ".", "rnn_type", "==", "RNNType", ".", "LSTM", ":", "\n", "                ", "state", "[", "0", "]", "=", "self", ".", "dropout", "(", "state", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "state", "=", "self", ".", "dropout", "(", "state", ")", "\n", "", "", "front_state", "=", "state", "[", "0", "]", "if", "self", ".", "rnn_type", "==", "RNNType", ".", "LSTM", "else", "state", "\n", "front_state", "=", "front_state", ".", "transpose", "(", "0", ",", "1", ")", "\n", "front_hidden", "=", "torch", ".", "cat", "(", "front_state", ".", "split", "(", "batch_size", ",", "dim", "=", "0", ")", ",", "dim", "=", "1", ")", "\n", "front_hidden", "=", "front_hidden", "*", "mask", "\n", "\n", "hidden", "=", "front_hidden", "\n", "# if self.config.DRNN.bidirectional:", "\n", "tail_slice_embedding_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "tail_pad_embedding", ".", "size", "(", "1", ")", "-", "self", ".", "window_size", "+", "1", ")", ":", "\n", "            ", "slice_embedding", "=", "tail_pad_embedding", "[", ":", ",", "i", ":", "i", "+", "self", ".", "window_size", ",", ":", "]", "\n", "tail_slice_embedding_list", ".", "append", "(", "slice_embedding", ")", "\n", "", "tail_slice_embedding", "=", "torch", ".", "cat", "(", "tail_slice_embedding_list", ",", "dim", "=", "0", ")", "\n", "\n", "state", "=", "None", "\n", "for", "i", "in", "range", "(", "tail_slice_embedding", ".", "size", "(", "1", ")", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "_", ",", "state", "=", "self", ".", "backward_rnn", "(", "\n", "tail_slice_embedding", "[", ":", ",", "i", "-", "1", ":", "i", ",", ":", "]", ",", "\n", "init_state", "=", "state", ",", "ori_state", "=", "True", ")", "\n", "if", "i", "!=", "tail_slice_embedding", ".", "size", "(", "1", ")", "-", "1", ":", "\n", "                ", "if", "self", ".", "rnn_type", "==", "RNNType", ".", "LSTM", ":", "\n", "                    ", "state", "[", "0", "]", "=", "self", ".", "dropout", "(", "state", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "state", "=", "self", ".", "dropout", "(", "state", ")", "\n", "", "", "", "tail_state", "=", "state", "[", "0", "]", "if", "self", ".", "rnn_type", "==", "RNNType", ".", "LSTM", "else", "state", "\n", "tail_state", "=", "tail_state", ".", "transpose", "(", "0", ",", "1", ")", "\n", "tail_hidden", "=", "torch", ".", "cat", "(", "tail_state", ".", "split", "(", "batch_size", ",", "dim", "=", "0", ")", ",", "dim", "=", "1", ")", "\n", "tail_hidden", "=", "tail_hidden", "*", "mask", "\n", "hidden", "=", "torch", ".", "cat", "(", "[", "hidden", ",", "tail_hidden", "]", ",", "dim", "=", "2", ")", "\n", "\n", "hidden", "=", "hidden", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "batch_normed", "=", "self", ".", "batch_norm", "(", "hidden", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "batch_normed", "=", "batch_normed", "*", "mask", "\n", "mlp_hidden", "=", "self", ".", "mlp", "(", "batch_normed", ")", "\n", "mlp_hidden", "=", "mlp_hidden", "*", "mask", "\n", "neg_mask", "=", "(", "mask", "-", "1", ")", "*", "65500.0", "\n", "mlp_hidden", "=", "mlp_hidden", "+", "neg_mask", "\n", "max_pooling", "=", "torch", ".", "nn", ".", "functional", ".", "max_pool1d", "(", "\n", "mlp_hidden", ".", "transpose", "(", "1", ",", "2", ")", ",", "mlp_hidden", ".", "size", "(", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "return", "self", ".", "linear", "(", "self", ".", "dropout", "(", "max_pooling", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TransBlocks.TB.__init__": [[8, 31], ["torch.nn.Module.__init__", "time.time.time", "torch.nn.Embedding", "modules.torch_transformer.PositionalEncoding", "torch.nn.Dropout", "modules.torch_transformer.Encoder", "torch.nn.Sequential", "torch_TransBlocks.TB._init_weights", "logger.info", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextCNN.TextCNN._init_weights"], ["    ", "def", "__init__", "(", "self", ",", "token_embeddings", ",", "args", ",", "logger", ")", ":", "\n", "        ", "super", "(", "TB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "start_t", "=", "time", "(", ")", "\n", "n_dict", ",", "n_emb", "=", "token_embeddings", ".", "shape", "\n", "self", ".", "att_hidden", "=", "args", ".", "n_emb", "\n", "self", ".", "gru_hidden", "=", "args", ".", "n_hidden", "\n", "self", ".", "crn_hidden", "=", "4", "*", "args", ".", "n_hidden", "\n", "self", ".", "max_len", "=", "args", ".", "max_len", "[", "'full'", "]", "\n", "self", ".", "n_block", "=", "args", ".", "n_block", "\n", "self", ".", "n_head", "=", "args", ".", "n_head", "\n", "self", ".", "is_sinusoid", "=", "args", ".", "is_sinusoid", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "n_dict", ",", "n_emb", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "pos_embedding", "=", "PositionalEncoding", "(", "n_emb", ",", "max_len", "=", "self", ".", "max_len", ")", "\n", "self", ".", "emb_dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "dropout", "[", "'emb'", "]", ")", "\n", "self", ".", "transformer", "=", "Encoder", "(", "self", ".", "n_head", ",", "self", ".", "n_block", ",", "n_emb", ",", "args", ".", "dropout", "[", "'layer'", "]", ")", "\n", "\n", "self", ".", "out_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "max_len", "*", "self", ".", "att_hidden", ",", "self", ".", "att_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "args", ".", "dropout", "[", "'layer'", "]", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "att_hidden", ",", "args", ".", "n_class", ")", ")", "\n", "\n", "self", ".", "_init_weights", "(", "token_embeddings", ")", "\n", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TransBlocks.TB._init_weights": [[32, 35], ["torch_TransBlocks.TB.word_embedding.weight.data.copy_", "torch.from_numpy"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "self", ".", "word_embedding", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "embeddings", ")", ")", "\n", "self", ".", "word_embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TransBlocks.TB.forward": [[36, 46], ["torch_TransBlocks.TB.word_embedding", "torch_TransBlocks.TB.pos_embedding", "torch_TransBlocks.TB.emb_dropout", "torch_TransBlocks.TB.transformer", "torch.reshape", "torch_TransBlocks.TB.out_fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_pre", ",", "x_alt", ",", "x_cur", ",", "seq_lens", ")", ":", "\n", "        ", "x_mask", "=", "(", "x", "!=", "0", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "x_word_emb", "=", "self", ".", "word_embedding", "(", "x", ")", "\n", "\n", "x_word_emb", "=", "self", ".", "pos_embedding", "(", "x_word_emb", ")", "\n", "x_embeded", "=", "self", ".", "emb_dropout", "(", "x_word_emb", ")", "\n", "y_transformed", "=", "self", ".", "transformer", "(", "x_embeded", ",", "x_mask", ")", "\n", "y_word", "=", "torch", ".", "reshape", "(", "y_transformed", ",", "[", "-", "1", ",", "self", ".", "max_len", "*", "self", ".", "att_hidden", "]", ")", "\n", "\n", "return", "self", ".", "out_fc", "(", "y_word", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SCRN.SCRN.__init__": [[10, 51], ["torch.nn.Module.__init__", "time.time.time", "torch.nn.Embedding", "torch.nn.Dropout", "torch.nn.GRU", "modules.torch_TextCNNNet.TextCNNNet", "modules.torch_TextCNNNet.TextCNNNet", "modules.torch_TextCNNNet.TextCNNNet", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch_SCRN.SCRN._init_weights", "logger.info", "modules.torch_transformer.PositionalEncoding", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextCNN.TextCNN._init_weights"], ["    ", "def", "__init__", "(", "self", ",", "token_embeddings", ",", "args", ",", "logger", ")", ":", "\n", "        ", "super", "(", "SCRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "start_t", "=", "time", "(", ")", "\n", "n_dict", ",", "n_emb", "=", "token_embeddings", ".", "shape", "\n", "self", ".", "max_len", "=", "args", ".", "max_len", "[", "'full'", "]", "\n", "self", ".", "att_hidden", "=", "n_emb", "\n", "self", ".", "gru_hidden", "=", "args", ".", "n_hidden", "\n", "self", ".", "crn_hidden", "=", "4", "*", "args", ".", "n_hidden", "\n", "self", ".", "n_layer", "=", "args", ".", "n_layer", "\n", "self", ".", "n_filter", "=", "args", ".", "n_filter", "\n", "self", ".", "n_kernels", "=", "args", ".", "n_kernels", "\n", "self", ".", "is_sinusoid", "=", "args", ".", "is_sinusoid", "\n", "self", ".", "is_ffn", "=", "args", ".", "is_ffn", "\n", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "n_dict", ",", "n_emb", ",", "padding_idx", "=", "0", ")", "\n", "if", "self", ".", "is_sinusoid", ":", "\n", "            ", "self", ".", "position_embedding", "=", "PositionalEncoding", "(", "n_emb", ",", "max_len", "=", "self", ".", "max_len", ")", "\n", "", "self", ".", "emb_dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "dropout", "[", "'emb'", "]", ")", "\n", "\n", "self", ".", "seg_encoder", "=", "nn", ".", "GRU", "(", "n_emb", ",", "self", ".", "gru_hidden", ",", "self", ".", "n_layer", ",", "dropout", "=", "args", ".", "dropout", "[", "'layer'", "]", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "pre_encoder", "=", "TextCNNNet", "(", "n_emb", ",", "args", ".", "max_len", "[", "'pre'", "]", ",", "self", ".", "n_filter", ",", "self", ".", "n_kernels", ")", "\n", "self", ".", "alt_encoder", "=", "TextCNNNet", "(", "n_emb", ",", "args", ".", "max_len", "[", "'alt'", "]", ",", "self", ".", "n_filter", ",", "self", ".", "n_kernels", ")", "\n", "self", ".", "cur_encoder", "=", "TextCNNNet", "(", "n_emb", ",", "args", ".", "max_len", "[", "'cur'", "]", ",", "self", ".", "n_filter", ",", "self", ".", "n_kernels", ")", "\n", "self", ".", "g_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "6", "*", "self", ".", "n_filter", "+", "2", "*", "args", ".", "n_hidden", ",", "self", ".", "crn_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "args", ".", "dropout", "[", "'layer'", "]", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "crn_hidden", ",", "self", ".", "crn_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "f_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "crn_hidden", ",", "self", ".", "crn_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "args", ".", "dropout", "[", "'layer'", "]", ")", ")", "\n", "\n", "self", ".", "out_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "crn_hidden", ",", "self", ".", "gru_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "args", ".", "dropout", "[", "'layer'", "]", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "gru_hidden", ",", "args", ".", "n_class", ")", ")", "\n", "\n", "self", ".", "_init_weights", "(", "token_embeddings", ")", "\n", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SCRN.SCRN._init_weights": [[52, 55], ["torch_SCRN.SCRN.word_embedding.weight.data.copy_", "torch.from_numpy"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "self", ".", "word_embedding", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "embeddings", ")", ")", "\n", "self", ".", "word_embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SCRN.SCRN.forward": [[56, 97], ["torch.sort", "torch.sort", "torch_SCRN.SCRN.word_embedding", "torch_SCRN.SCRN.word_embedding", "torch_SCRN.SCRN.word_embedding", "torch_SCRN.SCRN.word_embedding", "torch_SCRN.SCRN.emb_dropout", "torch_SCRN.SCRN.emb_dropout", "torch_SCRN.SCRN.emb_dropout", "torch_SCRN.SCRN.emb_dropout", "torch.nn.utils.rnn.pack_padded_sequence", "torch_SCRN.SCRN.seg_encoder", "state.view.view.view", "torch.cat", "torch_SCRN.SCRN.pre_encoder", "torch_SCRN.SCRN.alt_encoder", "torch_SCRN.SCRN.cur_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.unsqueeze", "y_state.repeat.repeat.repeat", "torch.cat", "y_pair.sum().squeeze.sum().squeeze.view", "torch_SCRN.SCRN.g_fc", "y_pair.sum().squeeze.sum().squeeze.view", "y_pair.sum().squeeze.sum().squeeze.sum().squeeze", "torch_SCRN.SCRN.f_fc", "torch_SCRN.SCRN.out_fc", "torch_SCRN.SCRN.position_embedding", "y_pair.sum().squeeze.sum().squeeze.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_pre", ",", "x_alt", ",", "x_cur", ",", "seq_lens", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "sorted_seq_lens", ",", "indices", "=", "torch", ".", "sort", "(", "seq_lens", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "_", ",", "desorted_indices", "=", "torch", ".", "sort", "(", "indices", ",", "descending", "=", "False", ")", "\n", "x", "=", "x", "[", "indices", "]", "\n", "x_word_emb", "=", "self", ".", "word_embedding", "(", "x", ")", "\n", "x_pre_word_emb", "=", "self", ".", "word_embedding", "(", "x_pre", ")", "\n", "x_alt_word_emb", "=", "self", ".", "word_embedding", "(", "x_alt", ")", "\n", "x_cur_word_emb", "=", "self", ".", "word_embedding", "(", "x_cur", ")", "\n", "x_pre_word_emb", "=", "self", ".", "emb_dropout", "(", "x_pre_word_emb", ")", "\n", "x_alt_word_emb", "=", "self", ".", "emb_dropout", "(", "x_alt_word_emb", ")", "\n", "x_cur_word_emb", "=", "self", ".", "emb_dropout", "(", "x_cur_word_emb", ")", "\n", "\n", "if", "self", ".", "is_sinusoid", ":", "\n", "            ", "x_word_emb", "+=", "self", ".", "position_embedding", "(", "x_word_emb", ")", "\n", "", "x_word_emb", "=", "self", ".", "emb_dropout", "(", "x_word_emb", ")", "\n", "\n", "x_word_emb", "=", "nn_utils", ".", "rnn", ".", "pack_padded_sequence", "(", "x_word_emb", ",", "sorted_seq_lens", ",", "batch_first", "=", "True", ")", "\n", "output", ",", "state", "=", "self", ".", "seg_encoder", "(", "x_word_emb", ")", "\n", "state", "=", "state", ".", "view", "(", "self", ".", "n_layer", ",", "2", ",", "batch_size", ",", "self", ".", "gru_hidden", ")", "\n", "forward_state", ",", "backward_state", "=", "state", "[", "-", "1", "]", "[", "0", "]", ",", "state", "[", "-", "1", "]", "[", "1", "]", "\n", "y_state", "=", "torch", ".", "cat", "(", "[", "forward_state", ",", "backward_state", "]", ",", "dim", "=", "1", ")", "\n", "y_pre", "=", "self", ".", "pre_encoder", "(", "x_pre_word_emb", ")", "\n", "y_alt", "=", "self", ".", "alt_encoder", "(", "x_alt_word_emb", ")", "\n", "y_cur", "=", "self", ".", "cur_encoder", "(", "x_cur_word_emb", ")", "\n", "pre_cur", "=", "torch", ".", "cat", "(", "(", "y_pre", ",", "y_cur", ")", ",", "dim", "=", "1", ")", "\n", "cur_pre", "=", "torch", ".", "cat", "(", "(", "y_cur", ",", "y_pre", ")", ",", "dim", "=", "1", ")", "\n", "pre_alt", "=", "torch", ".", "cat", "(", "(", "y_pre", ",", "y_alt", ")", ",", "dim", "=", "1", ")", "\n", "alt_cur", "=", "torch", ".", "cat", "(", "(", "y_alt", ",", "y_cur", ")", ",", "dim", "=", "1", ")", "\n", "y_composed", "=", "torch", ".", "stack", "(", "[", "pre_cur", ",", "cur_pre", ",", "pre_alt", ",", "alt_cur", "]", ",", "dim", "=", "1", ")", "\n", "y_state", "=", "torch", ".", "unsqueeze", "(", "y_state", ",", "1", ")", "\n", "y_state", "=", "y_state", ".", "repeat", "(", "1", ",", "4", ",", "1", ")", "\n", "y_pair", "=", "torch", ".", "cat", "(", "[", "y_composed", ",", "y_state", "]", ",", "2", ")", "\n", "\n", "y_pair", "=", "y_pair", ".", "view", "(", "batch_size", "*", "4", ",", "6", "*", "self", ".", "n_filter", "+", "2", "*", "self", ".", "gru_hidden", ")", "\n", "y_pair", "=", "self", ".", "g_fc", "(", "y_pair", ")", "\n", "y_pair", "=", "y_pair", ".", "view", "(", "batch_size", ",", "4", ",", "self", ".", "crn_hidden", ")", "\n", "y_pair", "=", "y_pair", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "\n", "y_segment", "=", "self", ".", "f_fc", "(", "y_pair", ")", "\n", "\n", "return", "self", ".", "out_fc", "(", "y_segment", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_MCDN.MCDN.__init__": [[11, 58], ["torch.nn.Module.__init__", "time.time.time", "torch.nn.Embedding", "torch.nn.Dropout", "modules.torch_transformer.Encoder", "torch.nn.GRU", "torch.nn.Linear", "modules.torch_TextCNNNet.TextCNNNet", "modules.torch_TextCNNNet.TextCNNNet", "modules.torch_TextCNNNet.TextCNNNet", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch_MCDN.MCDN._init_weights", "logger.info", "modules.torch_transformer.PositionalEncoding", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextCNN.TextCNN._init_weights"], ["    ", "def", "__init__", "(", "self", ",", "token_embeddings", ",", "args", ",", "logger", ")", ":", "\n", "        ", "super", "(", "MCDN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "start_t", "=", "time", "(", ")", "\n", "n_dict", ",", "n_emb", "=", "token_embeddings", ".", "shape", "\n", "self", ".", "max_len", "=", "args", ".", "max_len", "[", "'full'", "]", "\n", "self", ".", "att_hidden", "=", "n_emb", "\n", "self", ".", "gru_hidden", "=", "args", ".", "n_hidden", "\n", "self", ".", "crn_hidden", "=", "4", "*", "args", ".", "n_hidden", "\n", "self", ".", "n_block", "=", "args", ".", "n_block", "\n", "self", ".", "n_head", "=", "args", ".", "n_head", "\n", "self", ".", "n_layer", "=", "args", ".", "n_layer", "\n", "self", ".", "n_filter", "=", "args", ".", "n_filter", "\n", "self", ".", "n_kernels", "=", "args", ".", "n_kernels", "\n", "self", ".", "is_sinusoid", "=", "args", ".", "is_sinusoid", "\n", "self", ".", "is_ffn", "=", "args", ".", "is_ffn", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "n_dict", ",", "n_emb", ",", "padding_idx", "=", "0", ")", "\n", "if", "self", ".", "is_sinusoid", ":", "\n", "            ", "self", ".", "pos_embedding", "=", "PositionalEncoding", "(", "n_emb", ",", "max_len", "=", "self", ".", "max_len", ")", "\n", "#     self.position_embedding = PositionEmbedding(n_emb, zeros_pad=False, scale=False)", "\n", "# else:", "\n", "#     self.position_embedding = WordEmbedding(self.max_len, n_emb, zeros_pad=False, scale=False)", "\n", "", "self", ".", "emb_dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "dropout", "[", "'emb'", "]", ")", "\n", "self", ".", "transformer", "=", "Encoder", "(", "self", ".", "n_head", ",", "self", ".", "n_block", ",", "n_emb", ",", "args", ".", "dropout", "[", "'layer'", "]", ")", "\n", "self", ".", "seg_encoder", "=", "nn", ".", "GRU", "(", "n_emb", ",", "self", ".", "gru_hidden", ",", "self", ".", "n_layer", ",", "dropout", "=", "args", ".", "dropout", "[", "'layer'", "]", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "word_fc", "=", "nn", ".", "Linear", "(", "self", ".", "max_len", "*", "self", ".", "att_hidden", ",", "self", ".", "att_hidden", ")", "\n", "\n", "self", ".", "pre_encoder", "=", "TextCNNNet", "(", "n_emb", ",", "args", ".", "max_len", "[", "'pre'", "]", ",", "self", ".", "n_filter", ",", "self", ".", "n_kernels", ")", "\n", "self", ".", "alt_encoder", "=", "TextCNNNet", "(", "n_emb", ",", "args", ".", "max_len", "[", "'alt'", "]", ",", "self", ".", "n_filter", ",", "self", ".", "n_kernels", ")", "\n", "self", ".", "cur_encoder", "=", "TextCNNNet", "(", "n_emb", ",", "args", ".", "max_len", "[", "'cur'", "]", ",", "self", ".", "n_filter", ",", "self", ".", "n_kernels", ")", "\n", "self", ".", "g_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "6", "*", "self", ".", "n_filter", "+", "2", "*", "self", ".", "gru_hidden", ",", "self", ".", "crn_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "args", ".", "dropout", "[", "'layer'", "]", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "crn_hidden", ",", "self", ".", "crn_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "f_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "crn_hidden", ",", "self", ".", "crn_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "args", ".", "dropout", "[", "'layer'", "]", ")", ")", "\n", "\n", "self", ".", "out_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "att_hidden", "+", "self", ".", "crn_hidden", ",", "self", ".", "gru_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "args", ".", "dropout", "[", "'layer'", "]", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "gru_hidden", ",", "args", ".", "n_class", ")", ")", "\n", "\n", "self", ".", "_init_weights", "(", "token_embeddings", ")", "\n", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_MCDN.MCDN._init_weights": [[59, 62], ["torch_MCDN.MCDN.word_embedding.weight.data.copy_", "torch.from_numpy"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "self", ".", "word_embedding", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "embeddings", ")", ")", "\n", "self", ".", "word_embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_MCDN.MCDN.forward": [[63, 112], ["torch.sort", "torch.sort", "torch_MCDN.MCDN.word_embedding", "torch_MCDN.MCDN.word_embedding", "torch_MCDN.MCDN.word_embedding", "torch_MCDN.MCDN.word_embedding", "torch_MCDN.MCDN.emb_dropout", "torch_MCDN.MCDN.emb_dropout", "torch_MCDN.MCDN.emb_dropout", "torch_MCDN.MCDN.emb_dropout", "torch_MCDN.MCDN.transformer", "torch.reshape", "torch_MCDN.MCDN.word_fc", "torch.nn.utils.rnn.pack_padded_sequence", "torch_MCDN.MCDN.seg_encoder", "state.view.view.view", "torch.cat", "torch_MCDN.MCDN.pre_encoder", "torch_MCDN.MCDN.alt_encoder", "torch_MCDN.MCDN.cur_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.unsqueeze", "y_state.repeat.repeat.repeat", "torch.cat", "y_pair.sum().squeeze.sum().squeeze.view", "torch_MCDN.MCDN.g_fc", "y_pair.sum().squeeze.sum().squeeze.view", "y_pair.sum().squeeze.sum().squeeze.sum().squeeze", "torch_MCDN.MCDN.f_fc", "torch.cat", "torch_MCDN.MCDN.out_fc", "torch_MCDN.MCDN.pos_embedding", "y_pair.sum().squeeze.sum().squeeze.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_pre", ",", "x_alt", ",", "x_cur", ",", "seq_lens", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "sorted_seq_lens", ",", "indices", "=", "torch", ".", "sort", "(", "seq_lens", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "_", ",", "desorted_indices", "=", "torch", ".", "sort", "(", "indices", ",", "descending", "=", "False", ")", "\n", "x", "=", "x", "[", "indices", "]", "\n", "x_mask", "=", "(", "x", "!=", "0", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "x_word_emb", "=", "self", ".", "word_embedding", "(", "x", ")", "\n", "x_pre_word_emb", "=", "self", ".", "word_embedding", "(", "x_pre", ")", "\n", "x_alt_word_emb", "=", "self", ".", "word_embedding", "(", "x_alt", ")", "\n", "x_cur_word_emb", "=", "self", ".", "word_embedding", "(", "x_cur", ")", "\n", "x_pre_word_emb", "=", "self", ".", "emb_dropout", "(", "x_pre_word_emb", ")", "\n", "x_alt_word_emb", "=", "self", ".", "emb_dropout", "(", "x_alt_word_emb", ")", "\n", "x_cur_word_emb", "=", "self", ".", "emb_dropout", "(", "x_cur_word_emb", ")", "\n", "\n", "if", "self", ".", "is_sinusoid", ":", "\n", "            ", "x_word_emb", "=", "self", ".", "pos_embedding", "(", "x_word_emb", ")", "\n", "#     x_word_emb += self.position_embedding(x)", "\n", "# else:", "\n", "#     x_word_emb += self.position_embedding(torch.unsqueeze(torch.arange(0, x.size()[1]), 0).repeat(x.size(0), 1).long().cuda())", "\n", "", "x_embeded", "=", "self", ".", "emb_dropout", "(", "x_word_emb", ")", "\n", "y_transformed", "=", "self", ".", "transformer", "(", "x_embeded", ",", "x_mask", ")", "\n", "y_word", "=", "torch", ".", "reshape", "(", "y_transformed", ",", "[", "-", "1", ",", "self", ".", "max_len", "*", "self", ".", "att_hidden", "]", ")", "\n", "y_word", "=", "self", ".", "word_fc", "(", "y_word", ")", "\n", "\n", "x_word_emb", "=", "nn_utils", ".", "rnn", ".", "pack_padded_sequence", "(", "x_word_emb", ",", "sorted_seq_lens", ",", "batch_first", "=", "True", ")", "\n", "output", ",", "state", "=", "self", ".", "seg_encoder", "(", "x_word_emb", ")", "\n", "state", "=", "state", ".", "view", "(", "self", ".", "n_layer", ",", "2", ",", "batch_size", ",", "self", ".", "gru_hidden", ")", "\n", "forward_state", ",", "backward_state", "=", "state", "[", "-", "1", "]", "[", "0", "]", ",", "state", "[", "-", "1", "]", "[", "1", "]", "\n", "y_state", "=", "torch", ".", "cat", "(", "[", "forward_state", ",", "backward_state", "]", ",", "dim", "=", "1", ")", "\n", "y_pre", "=", "self", ".", "pre_encoder", "(", "x_pre_word_emb", ")", "\n", "y_alt", "=", "self", ".", "alt_encoder", "(", "x_alt_word_emb", ")", "\n", "y_cur", "=", "self", ".", "cur_encoder", "(", "x_cur_word_emb", ")", "\n", "pre_cur", "=", "torch", ".", "cat", "(", "(", "y_pre", ",", "y_cur", ")", ",", "dim", "=", "1", ")", "\n", "cur_pre", "=", "torch", ".", "cat", "(", "(", "y_cur", ",", "y_pre", ")", ",", "dim", "=", "1", ")", "\n", "pre_alt", "=", "torch", ".", "cat", "(", "(", "y_pre", ",", "y_alt", ")", ",", "dim", "=", "1", ")", "\n", "alt_cur", "=", "torch", ".", "cat", "(", "(", "y_alt", ",", "y_cur", ")", ",", "dim", "=", "1", ")", "\n", "y_composed", "=", "torch", ".", "stack", "(", "[", "pre_cur", ",", "cur_pre", ",", "pre_alt", ",", "alt_cur", "]", ",", "dim", "=", "1", ")", "\n", "y_state", "=", "torch", ".", "unsqueeze", "(", "y_state", ",", "1", ")", "\n", "y_state", "=", "y_state", ".", "repeat", "(", "1", ",", "4", ",", "1", ")", "\n", "y_pair", "=", "torch", ".", "cat", "(", "[", "y_composed", ",", "y_state", "]", ",", "2", ")", "\n", "\n", "y_pair", "=", "y_pair", ".", "view", "(", "batch_size", "*", "4", ",", "6", "*", "self", ".", "n_filter", "+", "2", "*", "self", ".", "gru_hidden", ")", "\n", "y_pair", "=", "self", ".", "g_fc", "(", "y_pair", ")", "\n", "y_pair", "=", "y_pair", ".", "view", "(", "batch_size", ",", "4", ",", "self", ".", "crn_hidden", ")", "\n", "y_pair", "=", "y_pair", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "\n", "y_segment", "=", "self", ".", "f_fc", "(", "y_pair", ")", "\n", "\n", "y_word_seg", "=", "torch", ".", "cat", "(", "[", "y_word", ",", "y_segment", "]", ",", "1", ")", "\n", "return", "self", ".", "out_fc", "(", "y_word_seg", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.tencent_DPCNN.DPCNN.__init__": [[13, 42], ["torch.nn.Module.__init__", "time.time.time", "int", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "tencent_DPCNN.DPCNN._init_weights", "logger.info", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "range", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextCNN.TextCNN._init_weights"], ["def", "__init__", "(", "self", ",", "token_embeddings", ",", "config", ",", "logger", ")", ":", "\n", "        ", "super", "(", "DPCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "start_t", "=", "time", "(", ")", "\n", "n_dict", ",", "n_emb", "=", "token_embeddings", ".", "shape", "\n", "self", ".", "num_kernels", "=", "config", ".", "n_filter", "\n", "self", ".", "pooling_stride", "=", "2", "\n", "self", ".", "kernel_size", "=", "config", ".", "n_kernels", "[", "1", "]", "\n", "self", ".", "radius", "=", "int", "(", "self", ".", "kernel_size", "/", "2", ")", "\n", "assert", "self", ".", "kernel_size", "%", "2", "==", "1", ",", "\"DPCNN kernel should be odd!\"", "\n", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "n_dict", ",", "n_emb", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "emb_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", "[", "'emb'", "]", ")", "\n", "self", ".", "convert_conv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv1d", "(", "n_emb", ",", "self", ".", "num_kernels", ",", "self", ".", "kernel_size", ",", "padding", "=", "self", ".", "radius", ")", ")", "\n", "\n", "self", ".", "convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Conv1d", "(", "\n", "self", ".", "num_kernels", ",", "self", ".", "num_kernels", ",", "\n", "self", ".", "kernel_size", ",", "padding", "=", "self", ".", "radius", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Conv1d", "(", "\n", "self", ".", "num_kernels", ",", "self", ".", "num_kernels", ",", "\n", "self", ".", "kernel_size", ",", "padding", "=", "self", ".", "radius", ")", "\n", ")", "for", "_", "in", "range", "(", "config", ".", "dp_blocks", ")", "]", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "num_kernels", ",", "config", ".", "n_class", ")", "\n", "self", ".", "out_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", "[", "'layer'", "]", ")", "\n", "self", ".", "_init_weights", "(", "token_embeddings", ")", "\n", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.tencent_DPCNN.DPCNN._init_weights": [[43, 46], ["tencent_DPCNN.DPCNN.word_embedding.weight.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "self", ".", "word_embedding", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "embeddings", ")", ")", "\n", "self", ".", "word_embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.tencent_DPCNN.DPCNN.forward": [[47, 62], ["tencent_DPCNN.DPCNN.word_embedding", "tencent_DPCNN.DPCNN.emb_dropout", "embedding.permute.permute.permute", "tencent_DPCNN.DPCNN.convert_conv", "range", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "tencent_DPCNN.DPCNN.out_dropout", "len", "torch.max_pool1d", "torch.max_pool1d", "tencent_DPCNN.DPCNN.linear", "torch.max_pool1d", "torch.max_pool1d", "conv_features.size"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.linear"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_pre", ",", "x_alt", ",", "x_cur", ",", "seq_lens", ")", ":", "\n", "        ", "embedding", "=", "self", ".", "word_embedding", "(", "x", ")", "\n", "embedding", "=", "self", ".", "emb_dropout", "(", "embedding", ")", "\n", "embedding", "=", "embedding", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "conv_embedding", "=", "self", ".", "convert_conv", "(", "embedding", ")", "\n", "conv_features", "=", "self", ".", "convs", "[", "0", "]", "(", "conv_embedding", ")", "\n", "conv_features", "=", "conv_embedding", "+", "conv_features", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "convs", ")", ")", ":", "\n", "            ", "block_features", "=", "F", ".", "max_pool1d", "(", "\n", "conv_features", ",", "self", ".", "kernel_size", ",", "self", ".", "pooling_stride", ")", "\n", "conv_features", "=", "self", ".", "convs", "[", "i", "]", "(", "block_features", ")", "\n", "conv_features", "=", "conv_features", "+", "block_features", "\n", "", "doc_embedding", "=", "F", ".", "max_pool1d", "(", "\n", "conv_features", ",", "conv_features", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "return", "self", ".", "out_dropout", "(", "self", ".", "linear", "(", "doc_embedding", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.BiLSTM.BasicBiLSTM.__init__": [[9, 29], ["logging.getLogger", "batch.get_next", "tensorflow.sequence_mask", "tensorflow.get_variable", "tensorflow.get_variable", "BiLSTM.BasicBiLSTM._build_graph"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._build_graph"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "batch", ",", "max_len", ",", "token_embeddings", ",", "trainable", "=", "True", ")", ":", "\n", "# logging", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "'basic rnn model'", ")", "\n", "# basic config", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "hidden_size", "=", "args", ".", "hidden_size", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "layer_num", "=", "args", ".", "layer_num", "\n", "self", ".", "num_class", "=", "2", "\n", "self", ".", "opt_type", "=", "args", ".", "optim", "\n", "self", ".", "dropout_keep_prob", "=", "args", ".", "dropout_keep_prob", "\n", "self", ".", "weight_decay", "=", "args", ".", "weight_decay", "\n", "self", ".", "is_train", "=", "trainable", "\n", "\n", "self", ".", "eid", ",", "self", ".", "token_ids", ",", "self", ".", "token_len", ",", "self", ".", "labels", "=", "batch", ".", "get_next", "(", ")", "\n", "self", ".", "mask", "=", "tf", ".", "sequence_mask", "(", "self", ".", "token_len", ",", "self", ".", "max_len", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'masks'", ")", "\n", "self", ".", "lr", "=", "tf", ".", "get_variable", "(", "'lr'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "is_train", "=", "tf", ".", "get_variable", "(", "'is_train'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "bool", ",", "trainable", "=", "False", ")", "\n", "\n", "self", ".", "_build_graph", "(", "token_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.BiLSTM.BasicBiLSTM._build_graph": [[30, 41], ["time.time", "BiLSTM.BasicBiLSTM._embed", "BiLSTM.BasicBiLSTM._encode", "BiLSTM.BasicBiLSTM._predict_label", "BiLSTM.BasicBiLSTM._compute_loss", "BiLSTM.BasicBiLSTM._compute_accuracy", "BiLSTM.BasicBiLSTM.logger.info", "BiLSTM.BasicBiLSTM._create_train_op", "time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._embed", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.BiLSTM.BasicBiLSTM._encode", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._predict_label", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._compute_loss", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.BiLSTM.BasicBiLSTM._compute_accuracy", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._create_train_op"], ["", "def", "_build_graph", "(", "self", ",", "token_embeddings", ")", ":", "\n", "        ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_embed", "(", "token_embeddings", ")", "\n", "self", ".", "_encode", "(", ")", "\n", "self", ".", "_predict_label", "(", ")", "\n", "self", ".", "_compute_loss", "(", ")", "\n", "self", ".", "_compute_accuracy", "(", ")", "\n", "# \u9009\u62e9\u4f18\u5316\u7b97\u6cd5", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "_create_train_op", "(", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.BiLSTM.BasicBiLSTM._embed": [[42, 48], ["tensorflow.device", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.constant"], "methods", ["None"], ["", "def", "_embed", "(", "self", ",", "token_embeddings", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ",", "tf", ".", "variable_scope", "(", "'word_embedding'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "word_embeddings", "=", "tf", ".", "get_variable", "(", "'word_embeddings'", ",", "\n", "initializer", "=", "tf", ".", "constant", "(", "token_embeddings", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "self", ".", "token_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "word_embeddings", ",", "self", ".", "token_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.BiLSTM.BasicBiLSTM._encode": [[49, 54], ["tensorflow.variable_scope", "modules.rnn_module.cu_rnn", "tensorflow.nn.dropout"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.cu_rnn"], ["", "", "def", "_encode", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'encoding'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "self", ".", "seq_encode", ",", "_", "=", "cu_rnn", "(", "'bi-lstm'", ",", "self", ".", "token_emb", ",", "self", ".", "hidden_size", ",", "self", ".", "batch_size", ",", "self", ".", "layer_num", ")", "\n", "", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "seq_encode", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "seq_encode", ",", "self", ".", "dropout_keep_prob", ")", "\n", "# self.seq_encode = tf.reshape(self.seq_encode, [-1, 2 * self.hidden_size])", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.BiLSTM.BasicBiLSTM._predict_label": [[56, 68], ["tensorflow.variable_scope", "tensorflow.concat", "tensorflow.nn.relu", "tensorflow.nn.relu", "modules.rnn_module.dense", "modules.rnn_module.dense", "tensorflow.nn.dropout", "modules.rnn_module.dense", "tensorflow.nn.dropout", "int"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.dense", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.dense", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.dense"], ["", "", "def", "_predict_label", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'predict_labels'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "self", ".", "rnn_output", "=", "tf", ".", "concat", "(", "(", "self", ".", "seq_encode", "[", ":", ",", "0", ",", ":", "]", ",", "self", ".", "seq_encode", "[", ":", ",", "-", "1", ",", ":", "]", ")", ",", "1", ")", "\n", "self", ".", "label_dense_0", "=", "tf", ".", "nn", ".", "relu", "(", "dense", "(", "self", ".", "seq_encode", "[", ":", ",", "-", "1", ",", ":", "]", ",", "hidden", "=", "self", ".", "hidden_size", ",", "scope", "=", "'dense_0'", ")", ")", "\n", "if", "self", ".", "is_train", ":", "\n", "                ", "self", ".", "label_dense_0", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "label_dense_0", ",", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "", "self", ".", "label_dense_1", "=", "tf", ".", "nn", ".", "relu", "(", "\n", "dense", "(", "self", ".", "label_dense_0", ",", "hidden", "=", "int", "(", "self", ".", "hidden_size", "/", "2", ")", ",", "scope", "=", "'dense_1'", ")", ")", "\n", "if", "self", ".", "is_train", ":", "\n", "                ", "self", ".", "label_dense_1", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "label_dense_1", ",", "self", ".", "dropout_keep_prob", ")", "\n", "", "self", ".", "output", "=", "dense", "(", "self", ".", "label_dense_1", ",", "hidden", "=", "self", ".", "num_class", ",", "scope", "=", "'output_labels'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.BiLSTM.BasicBiLSTM._focal_loss": [[69, 99], ["tensorflow.nn.sigmoid", "tensorflow.python.ops.array_ops.zeros_like", "tensorflow.python.ops.array_ops.where", "tensorflow.python.ops.array_ops.where", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.log", "tensorflow.clip_by_value", "tensorflow.clip_by_value"], "methods", ["None"], ["", "", "def", "_focal_loss", "(", "self", ",", "prediction_tensor", ",", "target_tensor", ",", "weights", "=", "None", ",", "alpha", "=", "0.5", ",", "gamma", "=", "2", ")", ":", "\n", "        ", "\"\"\"Compute focal loss for predictions.\n            Multi-labels Focal loss formula:\n                FL = -alpha * (z-p)^gamma * log(p) -(1-alpha) * p^gamma * log(1-p)\n                     ,which alpha = 0.25, gamma = 2, p = sigmoid(x), z = target_tensor.\n        Args:\n         prediction_tensor: A float tensor of shape [batch_size, num_anchors,\n            num_classes] representing the predicted logits for each class\n         target_tensor: A float tensor of shape [batch_size, num_anchors,\n            num_classes] representing one-hot encoded classification targets\n         weights: A float tensor of shape [batch_size, num_anchors]\n         alpha: A scalar tensor for focal loss alpha hyper-parameter\n         gamma: A scalar tensor for focal loss gamma hyper-parameter\n        Returns:\n            loss: A (scalar) tensor representing the value of the loss function\n        \"\"\"", "\n", "sigmoid_p", "=", "tf", ".", "nn", ".", "sigmoid", "(", "prediction_tensor", ")", "\n", "zeros", "=", "array_ops", ".", "zeros_like", "(", "sigmoid_p", ",", "dtype", "=", "sigmoid_p", ".", "dtype", ")", "\n", "\n", "# For poitive prediction, only need consider front part loss, back part is 0;", "\n", "# target_tensor > zeros <=> z=1, so poitive coefficient = z - p.", "\n", "pos_p_sub", "=", "array_ops", ".", "where", "(", "target_tensor", ">", "zeros", ",", "target_tensor", "-", "sigmoid_p", ",", "zeros", ")", "\n", "\n", "# For negative prediction, only need consider back part loss, front part is 0;", "\n", "# target_tensor > zeros <=> z=1, so negative coefficient = 0.", "\n", "neg_p_sub", "=", "array_ops", ".", "where", "(", "target_tensor", ">", "zeros", ",", "zeros", ",", "sigmoid_p", ")", "\n", "per_entry_cross_ent", "=", "-", "alpha", "*", "(", "pos_p_sub", "**", "gamma", ")", "*", "tf", ".", "log", "(", "tf", ".", "clip_by_value", "(", "sigmoid_p", ",", "1e-8", ",", "1.0", ")", ")", "-", "(", "1", "-", "alpha", ")", "*", "(", "neg_p_sub", "**", "gamma", ")", "*", "tf", ".", "log", "(", "\n", "tf", ".", "clip_by_value", "(", "1.0", "-", "sigmoid_p", ",", "1e-8", ",", "1.0", ")", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "per_entry_cross_ent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.BiLSTM.BasicBiLSTM._compute_loss": [[100, 109], ["tensorflow.reduce_mean", "tensorflow.trainable_variables", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.variable_scope", "tensorflow.add_n", "tensorflow.stop_gradient", "tensorflow.one_hot", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "_compute_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "\n", "logits", "=", "self", ".", "output", ",", "labels", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "one_hot", "(", "self", ".", "labels", ",", "2", ",", "axis", "=", "1", ")", ")", ")", ")", "\n", "# self.loss = self._focal_loss(self.output, tf.one_hot(self.labels, 2, axis=1))", "\n", "self", ".", "all_params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "if", "self", ".", "weight_decay", ">", "0", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'l2_loss'", ")", ":", "\n", "                ", "l2_loss", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", "for", "v", "in", "self", ".", "all_params", "]", ")", "\n", "", "self", ".", "loss", "+=", "self", ".", "weight_decay", "*", "l2_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.BiLSTM.BasicBiLSTM._compute_accuracy": [[110, 115], ["tensorflow.name_scope", "tensorflow.argmax", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.cast"], "methods", ["None"], ["", "", "def", "_compute_accuracy", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'accuracy'", ")", ":", "\n", "            ", "self", ".", "pre_labels", "=", "tf", ".", "argmax", "(", "self", ".", "output", ",", "axis", "=", "1", ")", "\n", "correct_predictions", "=", "tf", ".", "equal", "(", "self", ".", "pre_labels", ",", "self", ".", "labels", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_predictions", ",", "'float'", ")", ",", "name", "=", "'accuracy'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.BiLSTM.BasicBiLSTM._create_train_op": [[116, 136], ["tensorflow.variable_scope", "BiLSTM.BasicBiLSTM.optimizer.compute_gradients", "zip", "tensorflow.clip_by_global_norm", "BiLSTM.BasicBiLSTM.optimizer.apply_gradients", "tensorflow.train.AdagradOptimizer", "zip", "tensorflow.train.AdamOptimizer", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.GradientDescentOptimizer", "NotImplementedError"], "methods", ["None"], ["", "", "def", "_create_train_op", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Selects the training algorithm and creates a train operation with it\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "'optimizer'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "if", "self", ".", "opt_type", "==", "'adagrad'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdagradOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "opt_type", "==", "'adam'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "opt_type", "==", "'rprop'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "opt_type", "==", "'sgd'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "lr", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Unsupported optimizer: {}'", ".", "format", "(", "self", ".", "opt_type", ")", ")", "\n", "# self.train_op = self.optimizer.minimize(self.loss)", "\n", "", "grads", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", ")", "\n", "gradients", ",", "variables", "=", "zip", "(", "*", "grads", ")", "\n", "capped_grads", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "gradients", ",", "5", ")", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "zip", "(", "capped_grads", ",", "variables", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextCNN.TextCNN.__init__": [[9, 34], ["torch.nn.Module.__init__", "time.time.time", "torch.nn.Embedding", "torch.nn.Dropout", "modules.torch_TextCNNNet.TextCNNNet", "torch.nn.Sequential", "torch_TextCNN.TextCNN._init_weights", "logger.info", "modules.torch_attention.PositionEmbedding", "modules.torch_attention.WordEmbedding", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextCNN.TextCNN._init_weights"], ["    ", "def", "__init__", "(", "self", ",", "token_embeddings", ",", "max_len", ",", "output_size", ",", "n_kernels", ",", "n_filter", ",", "is_pos", ",", "is_sinusoid", ",", "\n", "dropout", ",", "logger", ")", ":", "\n", "        ", "super", "(", "TextCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "start_t", "=", "time", "(", ")", "\n", "n_dict", ",", "n_emb", "=", "token_embeddings", ".", "shape", "\n", "self", ".", "sinusoid", "=", "is_sinusoid", "\n", "self", ".", "max_len", "=", "max_len", "[", "'full'", "]", "\n", "self", ".", "n_filter", "=", "3", "*", "n_filter", "\n", "self", ".", "fc_hidden", "=", "n_filter", "\n", "self", ".", "is_pos", "=", "is_pos", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "n_dict", ",", "n_emb", ",", "padding_idx", "=", "0", ")", "\n", "if", "is_sinusoid", ":", "\n", "            ", "self", ".", "position_embedding", "=", "PositionEmbedding", "(", "n_emb", ",", "zeros_pad", "=", "False", ",", "scale", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "position_embedding", "=", "WordEmbedding", "(", "self", ".", "max_len", ",", "n_emb", ",", "zeros_pad", "=", "False", ",", "scale", "=", "False", ")", "\n", "", "self", ".", "emb_dropout", "=", "nn", ".", "Dropout", "(", "dropout", "[", "'emb'", "]", ")", "\n", "\n", "self", ".", "cnn_encoder", "=", "TextCNNNet", "(", "n_emb", ",", "max_len", "[", "'full'", "]", ",", "n_filter", ",", "n_kernels", ")", "\n", "self", ".", "out_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "n_filter", ",", "self", ".", "fc_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", "[", "'layer'", "]", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "fc_hidden", ",", "output_size", ")", ")", "\n", "\n", "self", ".", "_init_weights", "(", "token_embeddings", ")", "\n", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextCNN.TextCNN._init_weights": [[35, 38], ["torch_TextCNN.TextCNN.word_embedding.weight.data.copy_", "torch.from_numpy"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "self", ".", "word_embedding", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "embeddings", ")", ")", "\n", "self", ".", "word_embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TextCNN.TextCNN.forward": [[39, 51], ["torch_TextCNN.TextCNN.word_embedding", "torch_TextCNN.TextCNN.emb_dropout", "torch_TextCNN.TextCNN.cnn_encoder", "torch_TextCNN.TextCNN.out_fc", "torch_TextCNN.TextCNN.position_embedding", "torch_TextCNN.TextCNN.position_embedding", "torch.unsqueeze().repeat().long().cuda", "torch.unsqueeze().repeat().long", "torch.unsqueeze().repeat", "x.size", "torch.unsqueeze", "torch.arange", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_pre", ",", "x_alt", ",", "x_cur", ",", "seq_lens", ")", ":", "\n", "        ", "x_emb", "=", "self", ".", "word_embedding", "(", "x", ")", "\n", "x_emb", "=", "self", ".", "emb_dropout", "(", "x_emb", ")", "\n", "if", "self", ".", "is_pos", ":", "\n", "            ", "if", "self", ".", "sinusoid", ":", "\n", "                ", "x_emb", "+=", "self", ".", "position_embedding", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x_emb", "+=", "self", ".", "position_embedding", "(", "\n", "torch", ".", "unsqueeze", "(", "torch", ".", "arange", "(", "0", ",", "x", ".", "size", "(", ")", "[", "1", "]", ")", ",", "0", ")", ".", "repeat", "(", "x", ".", "size", "(", "0", ")", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "", "", "y", "=", "self", ".", "cnn_encoder", "(", "x_emb", ")", "\n", "\n", "return", "self", ".", "out_fc", "(", "y", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TCN.TCN.__init__": [[10, 28], ["torch.nn.Module.__init__", "time.time.time", "torch.nn.Embedding", "torch_TCN.TCN.embedding.weight.data.copy_", "torch.nn.Dropout", "modules.torch_CNN.TemporalConvNet", "range", "torch.nn.Linear", "torch_TCN.TCN.init_weights", "logger.info", "torch.from_numpy", "torch_TCN.TCN.__setattr__", "modules.torch_attention.Multihead_Attention", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "token_embeddings", ",", "max_len", ",", "output_size", ",", "n_channel", ",", "n_kernel", ",", "n_block", ",", "n_head", ",", "dropout", ",", "logger", ")", ":", "\n", "        ", "super", "(", "TCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_hidden", "=", "n_channel", "[", "-", "1", "]", "\n", "self", ".", "max_len", "=", "max_len", "\n", "n_dict", ",", "n_emb", "=", "token_embeddings", ".", "shape", "\n", "self", ".", "n_block", "=", "n_block", "\n", "start_t", "=", "time", "(", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "n_dict", ",", "n_emb", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "token_embeddings", ")", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "emb_dropout", "=", "nn", ".", "Dropout", "(", "dropout", "[", "'emb'", "]", ")", "\n", "self", ".", "tcn", "=", "TemporalConvNet", "(", "n_emb", ",", "n_channel", ",", "kernel_size", "=", "n_kernel", ",", "dropout", "=", "dropout", "[", "'layer'", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_block", ")", ":", "\n", "            ", "self", ".", "__setattr__", "(", "'self_attention_%d'", "%", "i", ",", "Multihead_Attention", "(", "self", ".", "n_hidden", ",", "n_head", ",", "dropout", "[", "'layer'", "]", ")", ")", "\n", "# self.__setattr__('feed_forward_%d' % i, FeedForward(self.n_hidden, [4 * self.n_hidden, self.n_hidden]))", "\n", "", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "max_len", "*", "self", ".", "n_hidden", ",", "output_size", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TCN.TCN.init_weights": [[29, 31], ["torch_TCN.TCN.linear.weight.data.normal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "linear", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_TCN.TCN.forward": [[32, 42], ["torch_TCN.TCN.embedding", "torch_TCN.TCN.emb_dropout", "torch_TCN.TCN.tcn", "torch.reshape.transpose", "range", "torch.reshape", "torch_TCN.TCN.linear", "torch_TCN.TCN.transpose", "torch_TCN.TCN.__getattr__"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_emb", "=", "self", ".", "embedding", "(", "x", ")", "\n", "x_emb", "=", "self", ".", "emb_dropout", "(", "x_emb", ")", "\n", "y", "=", "self", ".", "tcn", "(", "x_emb", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "y", "=", "y", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_block", ")", ":", "\n", "            ", "y", "=", "self", ".", "__getattr__", "(", "'self_attention_%d'", "%", "i", ")", "(", "y", ")", "\n", "# y = self.__getattr__('feed_forward_%d' % i)(y)", "\n", "", "y", "=", "torch", ".", "reshape", "(", "y", ",", "[", "-", "1", ",", "self", ".", "max_len", "*", "self", ".", "n_hidden", "]", ")", "\n", "return", "self", ".", "linear", "(", "y", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2.__init__": [[12, 38], ["tensorflow.get_variable", "tensorflow.get_variable", "batch.get_next", "tensorflow.sequence_mask", "tensorflow.sequence_mask", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "time.time", "Hierarchical_2.H2._build_graph", "Hierarchical_2.H2.logger.info", "tensorflow.shape", "tensorflow.shape", "tensorflow.get_variable", "tensorflow.get_variable", "Hierarchical_2.H2._create_train_op", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._build_graph", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._create_train_op"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "batch", ",", "token_embeddings", ",", "logger", ",", "trainable", "=", "True", ")", ":", "\n", "# logging", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "logger", "=", "logger", "\n", "# basic config", "\n", "self", ".", "n_batch", "=", "tf", ".", "get_variable", "(", "'n_batch'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "int32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "n_class", "=", "2", "\n", "self", ".", "opt_type", "=", "args", ".", "optim", "\n", "self", ".", "weight_decay", "=", "args", ".", "weight_decay", "\n", "\n", "self", ".", "eid", ",", "self", ".", "token_ids", ",", "self", ".", "token_len", ",", "self", ".", "labels", "=", "batch", ".", "get_next", "(", ")", "\n", "self", ".", "N", "=", "tf", ".", "shape", "(", "self", ".", "eid", ")", "[", "0", "]", "\n", "# self.max_len = tf.reduce_max(self.token_len)", "\n", "# self.token_ids = tf.slice(self.token_ids, [0, 0], tf.stack([self.N, self.max_len]))", "\n", "self", ".", "mask", "=", "tf", ".", "sequence_mask", "(", "self", ".", "token_len", ",", "self", ".", "args", ".", "max_len", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'masks'", ")", "\n", "self", ".", "is_train", "=", "tf", ".", "get_variable", "(", "'is_train'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "bool", ",", "trainable", "=", "False", ")", "\n", "self", ".", "global_step", "=", "tf", ".", "get_variable", "(", "'global_step'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "int32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ",", "trainable", "=", "False", ")", "\n", "self", ".", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "start_t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_build_graph", "(", "token_embeddings", ")", "\n", "if", "trainable", ":", "\n", "            ", "self", ".", "lr", "=", "tf", ".", "get_variable", "(", "'lr'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "_create_train_op", "(", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._build_graph": [[39, 45], ["Hierarchical_2.H2._embed", "Hierarchical_2.H2._encoder", "Hierarchical_2.H2._self_attention", "Hierarchical_2.H2._predict_label", "Hierarchical_2.H2._compute_loss"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._embed", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._encoder", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._self_attention", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._predict_label", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._compute_loss"], ["", "def", "_build_graph", "(", "self", ",", "token_embeddings", ")", ":", "\n", "        ", "self", ".", "_embed", "(", "token_embeddings", ")", "\n", "self", ".", "_encoder", "(", ")", "\n", "self", ".", "_self_attention", "(", ")", "\n", "self", ".", "_predict_label", "(", ")", "\n", "self", ".", "_compute_loss", "(", ")", "\n", "# self._compute_accuracy()", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._embed": [[47, 64], ["tensorflow.device", "tensorflow.device", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.constant", "tensorflow.constant"], "methods", ["None"], ["", "def", "_embed", "(", "self", ",", "token_embeddings", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ",", "tf", ".", "variable_scope", "(", "'word_embedding'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "word_embeddings", "=", "tf", ".", "get_variable", "(", "'word_embeddings'", ",", "\n", "initializer", "=", "tf", ".", "constant", "(", "token_embeddings", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "self", ".", "token_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "word_embeddings", ",", "self", ".", "token_ids", ")", "\n", "# if self.args.timing:", "\n", "#     self.token_emb = add_timing_signal(self.token_emb)", "\n", "# else:", "\n", "#     pos_embeddings = tf.get_variable('position_embedding', [200, self.args.n_emb],", "\n", "#                                      initializer=tf.random_normal_initializer(0.0, self.args.n_emb ** -0.5))", "\n", "#     indices = tf.range(tf.shape(self.token_ids)[1])[None, :]", "\n", "#     pos_emb = tf.gather(pos_embeddings, indices)", "\n", "#     pos_emb = tf.tile(pos_emb, [tf.shape(self.token_ids)[0], 1, 1])", "\n", "#     self.token_emb += pos_emb", "\n", "if", "self", ".", "is_train", ":", "\n", "                ", "self", ".", "token_emb", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "token_emb", ",", "self", ".", "args", ".", "dropout_keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._encoder": [[65, 75], ["tensorflow.variable_scope", "tensorflow.variable_scope", "modules.nn_module.residual_link", "modules.rnn_module.cu_rnn", "int", "modules.cnn_module.cnn", "modules.nn_module.ffn", "int"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.residual_link", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.cu_rnn", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.cnn_module.cnn", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.nn_module.ffn"], ["", "", "", "def", "_encoder", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'encoder'", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "encoder_type", "==", "'rnn'", ":", "\n", "                ", "y", ",", "_", "=", "cu_rnn", "(", "'bi-gru'", ",", "self", ".", "token_emb", ",", "int", "(", "self", ".", "args", ".", "n_emb", "/", "2", ")", ",", "self", ".", "n_batch", ",", "self", ".", "args", ".", "n_layer", ")", "\n", "", "elif", "self", ".", "args", ".", "encoder_type", "==", "'cnn'", ":", "\n", "                ", "y", "=", "cnn", "(", "self", ".", "token_emb", ",", "self", ".", "mask", ",", "self", ".", "args", ".", "n_emb", ",", "3", ")", "\n", "", "elif", "self", ".", "args", ".", "encoder_type", "==", "'ffn'", ":", "\n", "                ", "y", "=", "ffn", "(", "self", ".", "token_emb", ",", "int", "(", "self", ".", "args", ".", "n_emb", "*", "2", ")", ",", "self", ".", "args", ".", "n_emb", ",", "\n", "self", ".", "args", ".", "dropout_keep_prob", "if", "self", ".", "is_train", "else", "1", ")", "\n", "", "self", ".", "token_encoder", "=", "residual_link", "(", "self", ".", "token_emb", ",", "y", ",", "self", ".", "args", ".", "dropout_keep_prob", "if", "self", ".", "is_train", "else", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._self_attention": [[76, 81], ["tensorflow.variable_scope", "tensorflow.variable_scope", "Hierarchical_2.H2."], "methods", ["None"], ["", "", "def", "_self_attention", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'self_attention'", ")", ":", "\n", "            ", "self", ".", "token_att", "=", "self_transformer", "(", "self", ".", "token_encoder", ",", "self", ".", "token_encoder", ",", "self", ".", "mask", ",", "self", ".", "args", ".", "n_block", ",", "\n", "self", ".", "args", ".", "n_emb", ",", "self", ".", "args", ".", "n_head", ",", "self", ".", "args", ".", "dropout_keep_prob", ",", "True", ",", "\n", "self", ".", "is_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._predict_label": [[82, 86], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.reshape", "modules.rnn_module.dense"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.modules.rnn_module.dense"], ["", "", "def", "_predict_label", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'predict_labels'", ")", ":", "\n", "            ", "self", ".", "token_att", "=", "tf", ".", "reshape", "(", "self", ".", "token_att", ",", "shape", "=", "[", "self", ".", "N", ",", "self", ".", "args", ".", "max_len", "*", "self", ".", "args", ".", "n_emb", "]", ")", "\n", "self", ".", "outputs", "=", "dense", "(", "self", ".", "token_att", ",", "self", ".", "n_class", ",", "initializer", "=", "self", ".", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._compute_loss": [[87, 102], ["tensorflow.argmax", "tensorflow.argmax", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.nn.weighted_cross_entropy_with_logits", "tensorflow.nn.weighted_cross_entropy_with_logits", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.add_n", "tensorflow.add_n", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "", "def", "_compute_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "pre_labels", "=", "tf", ".", "argmax", "(", "self", ".", "outputs", ",", "axis", "=", "1", ")", "\n", "if", "self", ".", "args", ".", "pos_weight", ">", "0", ":", "\n", "            ", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "weighted_cross_entropy_with_logits", "(", "targets", "=", "tf", ".", "one_hot", "(", "self", ".", "labels", ",", "2", ")", ",", "\n", "logits", "=", "self", ".", "outputs", ",", "\n", "pos_weight", "=", "self", ".", "args", ".", "pos_weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "labels", ",", "\n", "logits", "=", "self", ".", "outputs", ")", ")", "\n", "# self.loss = self._focal_loss(tf.one_hot(self.labels, 2, axis=1), self.output)", "\n", "", "self", ".", "all_params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "if", "self", ".", "args", ".", "weight_decay", ">", "0", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'l2_loss'", ")", ":", "\n", "                ", "l2_loss", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", "for", "v", "in", "self", ".", "all_params", "]", ")", "\n", "", "self", ".", "loss", "+=", "self", ".", "args", ".", "weight_decay", "*", "l2_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.Hierarchical_2.H2._create_train_op": [[103, 122], ["tensorflow.variable_scope", "tensorflow.variable_scope", "Hierarchical_2.H2.optimizer.apply_gradients", "tensorflow.train.AdagradOptimizer", "tensorflow.train.AdagradOptimizer", "tensorflow.clip_by_global_norm", "tensorflow.clip_by_global_norm", "tensorflow.gradients", "tensorflow.gradients", "zip", "tensorflow.opt.LazyAdamOptimizer", "tensorflow.opt.LazyAdamOptimizer", "tensorflow.gradients", "tensorflow.gradients", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.GradientDescentOptimizer", "tensorflow.train.GradientDescentOptimizer", "NotImplementedError"], "methods", ["None"], ["", "", "def", "_create_train_op", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'optimizer'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "opt_type", "=", "self", ".", "args", ".", "optim", "\n", "if", "opt_type", "==", "'adagrad'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdagradOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "opt_type", "==", "'adam'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tc", ".", "opt", ".", "LazyAdamOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "opt_type", "==", "'rprop'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "opt_type", "==", "'sgd'", ":", "\n", "                ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "lr", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Unsupported optimizer: {}'", ".", "format", "(", "self", ".", "opt_type", ")", ")", "\n", "", "if", "self", ".", "args", ".", "global_norm", ">", "0", ":", "\n", "                ", "self", ".", "grads", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "self", ".", "all_params", ")", ",", "self", ".", "args", ".", "global_norm", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "grads", "=", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "self", ".", "all_params", ")", "\n", "", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "zip", "(", "self", ".", "grads", ",", "self", ".", "all_params", ")", ",", "\n", "global_step", "=", "self", ".", "global_step", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__": [[10, 32], ["torch.Module.__init__", "time.time.time", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch_SelfAttentive.SelfAttentive.init_weights", "logger.info", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.__init__", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "token_embeddings", ",", "output_size", ",", "n_hidden", ",", "n_layer", ",", "da", ",", "r", ",", "dropout", ",", "logger", ")", ":", "\n", "        ", "super", "(", "SelfAttentive", ",", "self", ")", ".", "__init__", "(", ")", "\n", "start_t", "=", "time", "(", ")", "\n", "n_dict", ",", "n_emb", "=", "token_embeddings", ".", "shape", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "n_hidden", "=", "n_hidden", "\n", "# Embedding Layer", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "n_dict", ",", "n_emb", ")", "\n", "self", ".", "emb_dropout", "=", "nn", ".", "Dropout", "(", "dropout", "[", "'emb'", "]", ")", "\n", "# RNN type", "\n", "self", ".", "bi_lstm", "=", "nn", ".", "LSTM", "(", "n_emb", ",", "n_hidden", ",", "n_layer", ",", "bias", "=", "False", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n", "\n", "# Self Attention Layers", "\n", "self", ".", "S1", "=", "nn", ".", "Linear", "(", "self", ".", "n_hidden", "*", "2", ",", "da", ",", "bias", "=", "False", ")", "\n", "self", ".", "S2", "=", "nn", ".", "Linear", "(", "da", ",", "r", ",", "bias", "=", "False", ")", "\n", "\n", "# Final MLP Layers", "\n", "self", ".", "MLP", "=", "nn", ".", "Linear", "(", "r", "*", "self", ".", "n_hidden", "*", "2", ",", "self", ".", "n_hidden", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "self", ".", "n_hidden", ",", "output_size", ")", "\n", "\n", "self", ".", "init_weights", "(", "token_embeddings", ")", "\n", "logger", ".", "info", "(", "'Time to build graph: {} s'", ".", "format", "(", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.init_weights": [[33, 43], ["torch_SelfAttentive.SelfAttentive.word_embedding.weight.data.copy_", "torch_SelfAttentive.SelfAttentive.S1.weight.data.uniform_", "torch_SelfAttentive.SelfAttentive.S2.weight.data.uniform_", "torch_SelfAttentive.SelfAttentive.MLP.weight.data.uniform_", "torch_SelfAttentive.SelfAttentive.MLP.bias.data.fill_", "torch_SelfAttentive.SelfAttentive.decoder.weight.data.uniform_", "torch_SelfAttentive.SelfAttentive.decoder.bias.data.fill_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "self", ".", "word_embedding", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "embeddings", ")", ")", "\n", "self", ".", "word_embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "initrange", "=", "0.1", "\n", "self", ".", "S1", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "self", ".", "S2", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "self", ".", "MLP", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "self", ".", "MLP", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "decoder", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "self", ".", "decoder", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.models.torch_SelfAttentive.SelfAttentive.forward": [[44, 83], ["torch_SelfAttentive.SelfAttentive.word_embedding", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch_SelfAttentive.SelfAttentive.bi_lstm", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "x.size", "torch_SelfAttentive.SelfAttentive.MLP", "torch_SelfAttentive.SelfAttentive.decoder", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "x.size", "torch_SelfAttentive.SelfAttentive.S1", "torch_SelfAttentive.SelfAttentive.S2", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm.view", "torch.mm.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch_SelfAttentive.SelfAttentive.t", "torch.nn.functional.softmax.t", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_pre", ",", "x_alt", ",", "x_cur", ",", "seq_lens", ")", ":", "\n", "        ", "x_emb", "=", "self", ".", "word_embedding", "(", "x", ")", "\n", "sorted_seq_lens", ",", "indices", "=", "torch", ".", "sort", "(", "seq_lens", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "_", ",", "desorted_indices", "=", "torch", ".", "sort", "(", "indices", ",", "descending", "=", "False", ")", "\n", "rnn_x", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "x_emb", ",", "sorted_seq_lens", ",", "batch_first", "=", "True", ")", "\n", "output", ",", "hidden", "=", "self", ".", "bi_lstm", "(", "rnn_x", ")", "\n", "\n", "depacked_output", ",", "lens", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "output", ",", "batch_first", "=", "True", ")", "\n", "\n", "BM", "=", "Variable", "(", "torch", ".", "zeros", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "r", "*", "self", ".", "n_hidden", "*", "2", ")", ".", "cuda", "(", ")", ")", "\n", "penal", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", ")", "\n", "I", "=", "Variable", "(", "torch", ".", "eye", "(", "self", ".", "r", ")", ".", "cuda", "(", ")", ")", "\n", "weights", "=", "{", "}", "\n", "\n", "# Attention Block", "\n", "for", "i", "in", "range", "(", "x", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "H", "=", "depacked_output", "[", "i", ",", ":", "lens", "[", "i", "]", ",", ":", "]", "\n", "s1", "=", "self", ".", "S1", "(", "H", ")", "\n", "s2", "=", "self", ".", "S2", "(", "torch", ".", "tanh", "(", "s1", ")", ")", "\n", "\n", "# Attention Weights and Embedding", "\n", "A", "=", "functional", ".", "softmax", "(", "s2", ".", "t", "(", ")", ",", "dim", "=", "-", "1", ")", "\n", "M", "=", "torch", ".", "mm", "(", "A", ",", "H", ")", "\n", "BM", "[", "i", ",", ":", "]", "=", "M", ".", "view", "(", "-", "1", ")", "\n", "\n", "# Penalization term", "\n", "AAT", "=", "torch", ".", "mm", "(", "A", ",", "A", ".", "t", "(", ")", ")", "\n", "P", "=", "torch", ".", "norm", "(", "AAT", "-", "I", ",", "2", ")", "\n", "penal", "+=", "P", "*", "P", "\n", "weights", "[", "i", "]", "=", "A", "\n", "\n", "# Penalization Term", "\n", "", "penal", "/=", "x", ".", "size", "(", "0", ")", "\n", "\n", "# MLP block for Classifier Feature", "\n", "MLPhidden", "=", "self", ".", "MLP", "(", "BM", ")", "\n", "decoded", "=", "self", ".", "decoder", "(", "functional", ".", "relu", "(", "MLPhidden", ")", ")", "\n", "\n", "return", "decoded", ",", "penal", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.stat_length": [[18, 38], ["print", "numpy.asarray", "numpy.arange", "print", "matplotlib.figure", "matplotlib.subplot", "matplotlib.plot", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.subplot", "matplotlib.hist", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.show", "len", "scipy.stats.describe"], "function", ["None"], ["def", "stat_length", "(", "seq_length", ")", ":", "\n", "    ", "print", "(", "'Seq len info :'", ")", "\n", "seq_len", "=", "np", ".", "asarray", "(", "seq_length", ")", "\n", "idx", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "seq_len", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "print", "(", "stats", ".", "describe", "(", "seq_len", ")", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "9", ")", ")", "\n", "plt", ".", "subplot", "(", "121", ")", "\n", "plt", ".", "plot", "(", "idx", "[", ":", "]", ",", "seq_len", "[", ":", "]", ",", "'ro'", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xlabel", "(", "'index'", ")", "\n", "plt", ".", "ylabel", "(", "'seq_len'", ")", "\n", "plt", ".", "title", "(", "'Scatter Plot'", ")", "\n", "\n", "plt", ".", "subplot", "(", "122", ")", "\n", "plt", ".", "hist", "(", "seq_len", ",", "bins", "=", "10", ",", "label", "=", "[", "'seq_len'", "]", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xlabel", "(", "'seq_len'", ")", "\n", "plt", ".", "ylabel", "(", "'freq'", ")", "\n", "plt", ".", "title", "(", "'Histogram'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.stat_altlex": [[40, 64], ["zip", "set", "set", "set.intersection", "zip", "print", "print", "print", "print", "print", "print", "nc_alt.append", "nc_alt.append", "c_alt.append", "c_alt.append", "len", "len", "len"], "function", ["None"], ["", "def", "stat_altlex", "(", "eng_sentences", ",", "sim_sentences", ",", "labels", ")", ":", "\n", "    ", "c_alt", ",", "nc_alt", "=", "[", "]", ",", "[", "]", "\n", "for", "eng", ",", "sim", ",", "label", "in", "zip", "(", "eng_sentences", ",", "sim_sentences", ",", "labels", ")", ":", "\n", "        ", "if", "label", "==", "0", ":", "\n", "            ", "nc_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "eng", "[", "1", "]", ")", ")", "\n", "nc_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "sim", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "c_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "eng", "[", "1", "]", ")", ")", "\n", "c_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "sim", "[", "1", "]", ")", ")", "\n", "", "", "c_alt_set", "=", "set", "(", "c_alt", ")", "\n", "nc_alt_set", "=", "set", "(", "nc_alt", ")", "\n", "co_alt_set", "=", "c_alt_set", ".", "intersection", "(", "nc_alt_set", ")", "\n", "co_in_c", ",", "co_in_nc", "=", "0", ",", "0", "\n", "for", "c", ",", "nc", "in", "zip", "(", "c_alt", ",", "nc_alt", ")", ":", "\n", "        ", "if", "c", "in", "co_alt_set", ":", "\n", "            ", "co_in_c", "+=", "1", "\n", "", "if", "nc", "in", "nc_alt_set", ":", "\n", "            ", "co_in_nc", "+=", "1", "\n", "", "", "print", "(", "'#Altlexes rep casual - {}'", ".", "format", "(", "len", "(", "c_alt_set", ")", ")", ")", "\n", "print", "(", "'#Altlexes rep non_casual - {}'", ".", "format", "(", "len", "(", "nc_alt_set", ")", ")", ")", "\n", "print", "(", "'#Altlexes in both set - {}'", ".", "format", "(", "len", "(", "co_alt_set", ")", ")", ")", "\n", "print", "(", "co_alt_set", ")", "\n", "print", "(", "'#CoAltlex in causal - {}'", ".", "format", "(", "co_in_c", ")", ")", "\n", "print", "(", "'#CoAltlex in non_causal - {}'", ".", "format", "(", "co_in_nc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.seg_length": [[270, 275], ["seg_len.append", "len", "len", "len"], "function", ["None"], ["", "def", "seg_length", "(", "sentences", ")", ":", "\n", "    ", "seg_len", "=", "[", "]", "\n", "for", "sen", "in", "sentences", ":", "\n", "        ", "seg_len", ".", "append", "(", "(", "len", "(", "sen", "[", "0", "]", ")", ",", "len", "(", "sen", "[", "1", "]", ")", ",", "len", "(", "sen", "[", "2", "]", ")", ")", ")", "\n", "", "return", "seg_len", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.check_null": [[73, 101], ["len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "check_null", "(", "sen", ")", ":", "\n", "    ", "flag", "=", "False", "\n", "if", "len", "(", "sen", ")", "==", "3", ":", "\n", "# if len(sen[0]) > 0:", "\n", "#     pre = sen[0]", "\n", "# else:", "\n", "#     pre = ['<NULL>']", "\n", "#     flag = True", "\n", "# if len(sen[1]) > 0:", "\n", "#     mid = sen[1]", "\n", "# else:", "\n", "#     mid = ['<NULL>']", "\n", "#     flag = True", "\n", "# if len(sen[2]) > 0:", "\n", "#     cur = sen[2]", "\n", "# else:", "\n", "#     cur = ['<NULL>']", "\n", "#     flag = True", "\n", "        ", "pre", "=", "sen", "[", "0", "]", "if", "len", "(", "sen", "[", "0", "]", ")", ">", "0", "else", "[", "'<NULL>'", "]", "\n", "mid", "=", "sen", "[", "1", "]", "if", "len", "(", "sen", "[", "1", "]", ")", ">", "0", "else", "[", "'<NULL>'", "]", "\n", "cur", "=", "sen", "[", "2", "]", "if", "len", "(", "sen", "[", "2", "]", ")", ">", "0", "else", "[", "'<NULL>'", "]", "\n", "", "else", ":", "\n", "        ", "pre", "=", "sen", "[", "0", "]", "if", "len", "(", "sen", "[", "0", "]", ")", ">", "0", "else", "[", "'<NULL>'", "]", "\n", "mid", "=", "[", "'<NULL>'", "]", "\n", "cur", "=", "[", "'<NULL>'", "]", "\n", "flag", "=", "True", "\n", "\n", "", "return", "pre", ",", "mid", ",", "cur", ",", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.preprocess": [[103, 125], ["print", "os.path.join", "f.close", "zip", "open", "ujson.load", "transfer_preprocess.check_null", "examples.append", "sentences.append", "print", "SPACE.join"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.check_null"], ["", "def", "preprocess", "(", "file_path", ",", "file_name", ",", "data_type", ",", "is_build", "=", "False", ")", ":", "\n", "    ", "print", "(", "\"Generating {} examples...\"", ".", "format", "(", "data_type", ")", ")", "\n", "examples", ",", "sentences", "=", "[", "]", ",", "[", "]", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "file_path", ",", "file_name", ")", "\n", "\n", "total", "=", "0", "\n", "with", "open", "(", "data_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data_set", "=", "json", ".", "load", "(", "f", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "for", "label", ",", "sample", "in", "zip", "(", "data_set", "[", "'label'", "]", ",", "data_set", "[", "'sample'", "]", ")", ":", "\n", "        ", "total", "+=", "1", "\n", "pre", ",", "mid", ",", "cur", ",", "flag", "=", "check_null", "(", "sample", ")", "\n", "if", "flag", ":", "\n", "            ", "print", "(", "total", ")", "\n", "", "examples", ".", "append", "(", "{", "'eid'", ":", "total", ",", "\n", "'tokens'", ":", "pre", "+", "mid", "+", "cur", ",", "\n", "'tokens_pre'", ":", "pre", ",", "\n", "'tokens_alt'", ":", "mid", ",", "\n", "'tokens_cur'", ":", "cur", ",", "\n", "'cau_label'", ":", "label", "}", ")", "\n", "sentences", ".", "append", "(", "SPACE", ".", "join", "(", "pre", "+", "mid", "+", "cur", ")", ")", "\n", "", "return", "examples", ",", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.build_dict": [[127, 140], ["set", "open", "line.strip().split.strip().split", "nltk.FreqDist", "nltk.FreqDist.keys", "line.strip().split.strip", "dictionary.keys"], "function", ["None"], ["", "def", "build_dict", "(", "data_path", ")", ":", "\n", "    ", "dictionary", "=", "{", "}", "\n", "with", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "fh", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "fredist", "=", "nltk", ".", "FreqDist", "(", "line", ")", "\n", "for", "localkey", "in", "fredist", ".", "keys", "(", ")", ":", "\n", "                ", "if", "localkey", "in", "dictionary", ".", "keys", "(", ")", ":", "\n", "                    ", "dictionary", "[", "localkey", "]", "=", "dictionary", "[", "localkey", "]", "+", "fredist", "[", "localkey", "]", "\n", "", "else", ":", "\n", "# \u5982\u679c\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728", "\n", "                    ", "dictionary", "[", "localkey", "]", "=", "fredist", "[", "localkey", "]", "# \u5c06\u5f53\u524d\u8bcd\u9891\u6dfb\u52a0\u5230\u5b57\u5178\u4e2d", "\n", "", "", "", "", "return", "set", "(", "dictionary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.save": [[142, 155], ["print", "fh.close", "open", "fh.writelines", "open", "pickle.dump", "open", "ujson.dump"], "function", ["None"], ["", "def", "save", "(", "filename", ",", "obj", ",", "message", "=", "None", ")", ":", "\n", "    ", "if", "message", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Saving {}...'", ".", "format", "(", "message", ")", ")", "\n", "if", "message", "==", "'corpus'", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "fh", ":", "\n", "                ", "fh", ".", "writelines", "(", "[", "line", "+", "'\\n'", "for", "line", "in", "obj", "]", ")", "\n", "", "", "elif", "message", "==", "'embeddings'", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "fh", ":", "\n", "                ", "pkl", ".", "dump", "(", "obj", ",", "fh", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "fh", ":", "\n", "                ", "json", ".", "dump", "(", "obj", ",", "fh", ")", "\n", "", "", "fh", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.get_embedding": [[157, 211], ["print", "dict", "fin.close", "set", "print", "corpus_dict.intersection", "corpus_dict.difference", "set", "numpy.zeros", "numpy.random.uniform", "print", "numpy.random.uniform", "numpy.zeros", "numpy.zeros", "zip", "open", "pickle.load", "len", "tokens.split", "numpy.zeros", "max", "len", "token2id.values", "token2id.keys", "len", "len", "set.append", "len", "numpy.row_stack", "len", "len", "token.split", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "", "def", "get_embedding", "(", "data_type", ",", "corpus_dict", ",", "emb_file", "=", "None", ",", "vec_size", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Generating {} embedding...\"", ".", "format", "(", "data_type", ")", ")", "\n", "\n", "token2id", "=", "{", "'<NULL>'", ":", "0", ",", "'<OOV>'", ":", "1", "}", "\n", "if", "emb_file", "is", "not", "None", ":", "\n", "        ", "assert", "vec_size", "is", "not", "None", "\n", "with", "open", "(", "emb_file", ",", "'rb'", ")", "as", "fin", ":", "\n", "            ", "trained_embeddings", "=", "pkl", ".", "load", "(", "fin", ")", "\n", "", "fin", ".", "close", "(", ")", "\n", "embedding_dict", "=", "set", "(", "trained_embeddings", ")", "\n", "print", "(", "'Num of tokens in corpus {}'", ".", "format", "(", "len", "(", "corpus_dict", ")", ")", ")", "\n", "filtered_tokens", "=", "corpus_dict", ".", "intersection", "(", "embedding_dict", ")", "# common", "\n", "oov_tokens", "=", "corpus_dict", ".", "difference", "(", "filtered_tokens", ")", "\n", "combined_tokens", "=", "[", "]", "\n", "for", "token", "in", "oov_tokens", ":", "\n", "            ", "if", "len", "(", "token", ".", "split", "(", "'-'", ")", ")", ">", "1", ":", "\n", "                ", "combined_tokens", ".", "append", "(", "token", ")", "\n", "", "", "combined_tokens", "=", "set", "(", "combined_tokens", ")", "\n", "# oov_tokens = oov_tokens.difference(combined_tokens)", "\n", "# token2id = {'<NULL>': 0, '<OOV>': 1}", "\n", "# embedding_mat = np.zeros([len(corpus_dict) + 2, vec_size])", "\n", "embedding_mat", "=", "np", ".", "zeros", "(", "[", "len", "(", "filtered_tokens", ")", "+", "2", ",", "vec_size", "]", ")", "\n", "for", "token", "in", "filtered_tokens", ":", "\n", "            ", "token2id", "[", "token", "]", "=", "len", "(", "token2id", ")", "\n", "embedding_mat", "[", "token2id", "[", "token", "]", "]", "=", "trained_embeddings", "[", "token", "]", "\n", "\n", "", "combined", "=", "0", "\n", "for", "tokens", "in", "combined_tokens", ":", "\n", "            ", "sub_tokens", "=", "tokens", ".", "split", "(", "'-'", ")", "\n", "token_vec", "=", "np", ".", "zeros", "(", "[", "vec_size", "]", ")", "\n", "in_emb", "=", "0", "\n", "for", "t", "in", "sub_tokens", ":", "\n", "                ", "if", "t", "in", "filtered_tokens", ":", "\n", "                    ", "token_vec", "+=", "trained_embeddings", "[", "t", "]", "\n", "in_emb", "+=", "1", "\n", "", "", "if", "in_emb", ">", "0", ":", "\n", "                ", "combined", "+=", "1", "\n", "token2id", "[", "tokens", "]", "=", "len", "(", "token2id", ")", "\n", "embedding_mat", "=", "np", ".", "row_stack", "(", "(", "embedding_mat", ",", "token_vec", "/", "in_emb", ")", ")", "\n", "", "", "scale", "=", "3.0", "/", "max", "(", "1.0", ",", "(", "len", "(", "corpus_dict", ")", "+", "vec_size", ")", "/", "2.0", ")", "\n", "embedding_mat", "[", "1", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "scale", ",", "scale", ",", "vec_size", ")", "\n", "print", "(", "'Filtered_tokens: {} Combined_tokens: {} OOV_tokens: {}'", ".", "format", "(", "len", "(", "filtered_tokens", ")", ",", "\n", "combined", ",", "\n", "len", "(", "oov_tokens", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "embedding_mat", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "(", "len", "(", "corpus_dict", ")", "+", "2", ",", "vec_size", ")", ")", "\n", "embedding_mat", "[", "0", "]", "=", "np", ".", "zeros", "(", "vec_size", ")", "\n", "embedding_mat", "[", "1", "]", "=", "np", ".", "zeros", "(", "vec_size", ")", "\n", "for", "token", "in", "corpus_dict", ":", "\n", "            ", "token2id", "[", "token", "]", "=", "len", "(", "token2id", ")", "\n", "# id2token = dict([val, key] for key, val in token2id.items())", "\n", "", "", "id2token", "=", "dict", "(", "zip", "(", "token2id", ".", "values", "(", ")", ",", "token2id", ".", "keys", "(", ")", ")", ")", "\n", "# print(len(token2id), len(id2token), len(embedding_mat))", "\n", "return", "embedding_mat", ",", "token2id", ",", "id2token", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.gen_embedding": [[213, 268], ["print", "dict", "fin.close", "set", "corpus_dict.intersection", "corpus_dict.difference", "set", "oov_tokens.difference.difference", "numpy.zeros", "numpy.random.uniform", "print", "numpy.random.uniform", "numpy.zeros", "numpy.zeros", "open", "pickle.load", "len", "tokens.split", "numpy.zeros", "max", "len", "len", "set.append", "len", "numpy.row_stack", "len", "len", "token2id.items", "token.split", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "def", "gen_embedding", "(", "data_type", ",", "corpus_dict", ",", "emb_file", "=", "None", ",", "vec_size", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Generating {} embedding...\"", ".", "format", "(", "data_type", ")", ")", "\n", "\n", "token2id", "=", "{", "'<NULL>'", ":", "0", ",", "'<OOV>'", ":", "1", "}", "\n", "if", "emb_file", "is", "not", "None", ":", "\n", "        ", "assert", "vec_size", "is", "not", "None", "\n", "with", "open", "(", "emb_file", ",", "'rb'", ")", "as", "fin", ":", "\n", "            ", "trained_embeddings", "=", "pkl", ".", "load", "(", "fin", ")", "\n", "", "fin", ".", "close", "(", ")", "\n", "embedding_dict", "=", "set", "(", "trained_embeddings", ")", "\n", "filtered_tokens", "=", "corpus_dict", ".", "intersection", "(", "embedding_dict", ")", "# common", "\n", "oov_tokens", "=", "corpus_dict", ".", "difference", "(", "filtered_tokens", ")", "\n", "combined_tokens", "=", "[", "]", "\n", "for", "token", "in", "oov_tokens", ":", "\n", "            ", "if", "len", "(", "token", ".", "split", "(", "'-'", ")", ")", ">", "1", ":", "\n", "                ", "combined_tokens", ".", "append", "(", "token", ")", "\n", "", "", "combined_tokens", "=", "set", "(", "combined_tokens", ")", "\n", "oov_tokens", "=", "oov_tokens", ".", "difference", "(", "combined_tokens", ")", "\n", "# token2id = {'<NULL>': 0, '<OOV>': 1}", "\n", "# embedding_mat = np.zeros([len(corpus_dict) + 2, vec_size])", "\n", "embedding_mat", "=", "np", ".", "zeros", "(", "[", "len", "(", "filtered_tokens", ")", "+", "2", ",", "vec_size", "]", ")", "\n", "for", "token", "in", "filtered_tokens", ":", "\n", "            ", "token2id", "[", "token", "]", "=", "len", "(", "token2id", ")", "\n", "embedding_mat", "[", "token2id", "[", "token", "]", "]", "=", "trained_embeddings", "[", "token", "]", "\n", "\n", "", "combined", "=", "0", "\n", "for", "tokens", "in", "combined_tokens", ":", "\n", "            ", "sub_tokens", "=", "tokens", ".", "split", "(", "'-'", ")", "\n", "token_vec", "=", "np", ".", "zeros", "(", "[", "vec_size", "]", ")", "\n", "in_emb", "=", "0", "\n", "for", "t", "in", "sub_tokens", ":", "\n", "                ", "if", "t", "in", "filtered_tokens", ":", "\n", "                    ", "token_vec", "+=", "trained_embeddings", "[", "t", "]", "\n", "in_emb", "+=", "1", "\n", "", "", "if", "in_emb", ">", "0", ":", "\n", "                ", "combined", "+=", "1", "\n", "token2id", "[", "tokens", "]", "=", "len", "(", "token2id", ")", "\n", "embedding_mat", "=", "np", ".", "row_stack", "(", "(", "embedding_mat", ",", "token_vec", "/", "in_emb", ")", ")", "\n", "", "", "scale", "=", "3.0", "/", "max", "(", "1.0", ",", "(", "len", "(", "corpus_dict", ")", "+", "vec_size", ")", "/", "2.0", ")", "\n", "embedding_mat", "[", "1", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "scale", ",", "scale", ",", "vec_size", ")", "\n", "# for token in oov_tokens:", "\n", "#     token2id[token] = len(token2id)", "\n", "#     embedding_mat[token2id[token]] = np.random.uniform(-scale, scale, vec_size)\\", "\n", "print", "(", "'Filtered_tokens: {} Combined_tokens: {} OOV_tokens: {}'", ".", "format", "(", "len", "(", "filtered_tokens", ")", ",", "\n", "combined", ",", "\n", "len", "(", "oov_tokens", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "embedding_mat", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "(", "len", "(", "corpus_dict", ")", "+", "2", ",", "vec_size", ")", ")", "\n", "embedding_mat", "[", "0", "]", "=", "np", ".", "zeros", "(", "vec_size", ")", "\n", "embedding_mat", "[", "1", "]", "=", "np", ".", "zeros", "(", "vec_size", ")", "\n", "for", "token", "in", "corpus_dict", ":", "\n", "            ", "token2id", "[", "token", "]", "=", "len", "(", "token2id", ")", "\n", "", "", "id2token", "=", "dict", "(", "[", "val", ",", "key", "]", "for", "key", ",", "val", "in", "token2id", ".", "items", "(", ")", ")", "\n", "# print(len(token2id), len(id2token), len(embedding_mat))", "\n", "return", "embedding_mat", ",", "token2id", ",", "id2token", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.gen_annotation": [[277, 311], ["transfer_preprocess.seg_length", "transfer_preprocess.seg_length", "f.close", "transfer_preprocess.seg_length", "f.close", "open", "zip", "open", "zip", "f.write", "f.write", "f.write", "sum", "sum", "sum", "annos.strip", "annos.strip", "annos.strip"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.seg_length", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.seg_length", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.seg_length"], ["", "def", "gen_annotation", "(", "segs", ",", "max_length", ",", "filename", ",", "labels", ",", "data_type", ")", ":", "\n", "    ", "max_length", "=", "max_length", "[", "'full'", "]", "\n", "if", "data_type", "==", "'train'", ":", "\n", "        ", "eng_length", "=", "seg_length", "(", "segs", "[", "0", "]", ")", "\n", "sim_length", "=", "seg_length", "(", "segs", "[", "1", "]", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "            ", "for", "el", ",", "sl", ",", "label", "in", "zip", "(", "eng_length", ",", "sim_length", ",", "labels", ")", ":", "\n", "                ", "pre", ",", "alt", ",", "cur", "=", "el", "\n", "if", "sum", "(", "el", ")", ">", "max_length", ":", "\n", "                    ", "cur", "-=", "pre", "+", "alt", "+", "cur", "-", "max_length", "\n", "", "annos", "=", "'0 '", "*", "pre", "\n", "annos", "+=", "'1 '", "if", "label", "==", "1", "else", "'2 '", "*", "alt", "\n", "annos", "+=", "'0 '", "*", "cur", "\n", "f", ".", "write", "(", "annos", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "pre", ",", "alt", ",", "cur", "=", "sl", "\n", "if", "sum", "(", "sl", ")", ">", "max_length", ":", "\n", "                    ", "cur", "-=", "pre", "+", "alt", "+", "cur", "-", "max_length", "\n", "", "annos", "=", "'0 '", "*", "pre", "\n", "annos", "+=", "'1 '", "if", "label", "==", "1", "else", "'2 '", "*", "alt", "\n", "annos", "+=", "'0 '", "*", "cur", "\n", "f", ".", "write", "(", "annos", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "length", "=", "seg_length", "(", "segs", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "            ", "for", "l", ",", "label", "in", "zip", "(", "length", ",", "labels", ")", ":", "\n", "                ", "pre", ",", "alt", ",", "cur", "=", "l", "\n", "if", "sum", "(", "l", ")", ">", "max_length", ":", "\n", "                    ", "cur", "-=", "pre", "+", "alt", "+", "cur", "-", "max_length", "\n", "", "annos", "=", "'0 '", "*", "pre", "\n", "annos", "+=", "'1 '", "if", "label", "==", "1", "else", "'2 '", "*", "alt", "\n", "annos", "+=", "'0 '", "*", "cur", "\n", "f", ".", "write", "(", "annos", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.build_features": [[313, 358], ["print", "tqdm.tqdm", "fo.close", "print", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "min", "min", "min", "min", "range", "range", "range", "range", "samples.append", "open", "pickle.dump", "len", "len", "len", "len", "transfer_preprocess.build_features._get_word"], "function", ["None"], ["", "", "def", "build_features", "(", "sentences", ",", "data_type", ",", "max_len", ",", "out_file", ",", "word2id", ",", "annotation_file", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Processing {} examples...\"", ".", "format", "(", "data_type", ")", ")", "\n", "total", "=", "0", "\n", "meta", "=", "{", "}", "\n", "samples", "=", "[", "]", "\n", "# fh = open(annotation_file, 'r', encoding='utf8')", "\n", "for", "sentence", "in", "tqdm", "(", "sentences", ")", ":", "\n", "        ", "total", "+=", "1", "\n", "tokens", "=", "np", ".", "zeros", "(", "[", "max_len", "[", "'full'", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "tokens_pre", "=", "np", ".", "zeros", "(", "[", "max_len", "[", "'pre'", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "tokens_alt", "=", "np", ".", "zeros", "(", "[", "max_len", "[", "'alt'", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "tokens_cur", "=", "np", ".", "zeros", "(", "[", "max_len", "[", "'cur'", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "def", "_get_word", "(", "word", ")", ":", "\n", "            ", "for", "each", "in", "(", "word", ",", "word", ".", "lower", "(", ")", ",", "word", ".", "capitalize", "(", ")", ",", "word", ".", "upper", "(", ")", ")", ":", "\n", "                ", "if", "each", "in", "word2id", ":", "\n", "                    ", "return", "word2id", "[", "each", "]", "\n", "", "", "return", "1", "\n", "\n", "", "seq_len", "=", "min", "(", "len", "(", "sentence", "[", "'tokens'", "]", ")", ",", "max_len", "[", "'full'", "]", ")", "\n", "pre_len", "=", "min", "(", "len", "(", "sentence", "[", "'tokens_pre'", "]", ")", ",", "max_len", "[", "'pre'", "]", ")", "\n", "alt_len", "=", "min", "(", "len", "(", "sentence", "[", "'tokens_alt'", "]", ")", ",", "max_len", "[", "'alt'", "]", ")", "\n", "cur_len", "=", "min", "(", "len", "(", "sentence", "[", "'tokens_cur'", "]", ")", ",", "max_len", "[", "'cur'", "]", ")", "\n", "for", "i", "in", "range", "(", "seq_len", ")", ":", "\n", "            ", "tokens", "[", "i", "]", "=", "_get_word", "(", "sentence", "[", "'tokens'", "]", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "pre_len", ")", ":", "\n", "            ", "tokens_pre", "[", "i", "]", "=", "_get_word", "(", "sentence", "[", "'tokens_pre'", "]", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "alt_len", ")", ":", "\n", "            ", "tokens_alt", "[", "i", "]", "=", "_get_word", "(", "sentence", "[", "'tokens_alt'", "]", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "            ", "tokens_cur", "[", "i", "]", "=", "_get_word", "(", "sentence", "[", "'tokens_cur'", "]", "[", "i", "]", ")", "\n", "", "samples", ".", "append", "(", "{", "'id'", ":", "sentence", "[", "'eid'", "]", ",", "\n", "'tokens'", ":", "tokens", ",", "\n", "'tokens_pre'", ":", "tokens_pre", ",", "\n", "'tokens_alt'", ":", "tokens_alt", ",", "\n", "'tokens_cur'", ":", "tokens_cur", ",", "\n", "'length'", ":", "seq_len", ",", "\n", "'cau_label'", ":", "sentence", "[", "'cau_label'", "]", "}", ")", "\n", "# fh.close()", "\n", "", "with", "open", "(", "out_file", ",", "'wb'", ")", "as", "fo", ":", "\n", "        ", "pkl", ".", "dump", "(", "samples", ",", "fo", ")", "\n", "", "fo", ".", "close", "(", ")", "\n", "print", "(", "'Build {} instances of features in total'", ".", "format", "(", "total", ")", ")", "\n", "meta", "[", "'total'", "]", "=", "total", "\n", "return", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.run_prepare": [[360, 394], ["transfer_preprocess.preprocess", "transfer_preprocess.preprocess", "transfer_preprocess.preprocess", "transfer_preprocess.build_features", "transfer_preprocess.save", "transfer_preprocess.build_features", "transfer_preprocess.save", "transfer_preprocess.build_features", "transfer_preprocess.save", "transfer_preprocess.save", "transfer_preprocess.save", "transfer_preprocess.build_dict", "transfer_preprocess.get_embedding", "transfer_preprocess.save", "transfer_preprocess.save", "transfer_preprocess.save", "open", "ujson.load"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.preprocess", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.preprocess", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.transfer_preprocess.preprocess", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_features", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_features", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_features", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_dict", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.get_embedding", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "def", "run_prepare", "(", "config", ",", "flags", ")", ":", "\n", "    ", "train_examples", ",", "train_corpus", "=", "preprocess", "(", "config", ".", "raw_dir", ",", "config", ".", "train_file", ",", "\n", "'train'", ",", "config", ".", "build", ")", "\n", "valid_examples", ",", "valid_corpus", "=", "preprocess", "(", "config", ".", "raw_dir", ",", "config", ".", "valid_file", ",", "\n", "'valid'", ",", "config", ".", "build", ")", "\n", "test_examples", ",", "test_corpus", "=", "preprocess", "(", "config", ".", "raw_dir", ",", "config", ".", "test_file", ",", "\n", "'test'", ",", "config", ".", "build", ")", "\n", "\n", "if", "config", ".", "build", ":", "\n", "        ", "save", "(", "flags", ".", "corpus_file", ",", "train_corpus", ",", "'corpus'", ")", "\n", "corpus_dict", "=", "build_dict", "(", "flags", ".", "corpus_file", ")", "\n", "token_emb_mat", ",", "token2id", ",", "id2token", "=", "get_embedding", "(", "'word'", ",", "corpus_dict", ",", "flags", ".", "w2v_file", ",", "config", ".", "n_emb", ")", "\n", "save", "(", "flags", ".", "token_emb_file", ",", "token_emb_mat", ",", "message", "=", "'embeddings'", ")", "\n", "save", "(", "flags", ".", "token2id_file", ",", "token2id", ",", "message", "=", "'token to index'", ")", "\n", "save", "(", "flags", ".", "id2token_file", ",", "id2token", ",", "message", "=", "'index to token'", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "flags", ".", "token2id_file", ",", "'r'", ")", "as", "fh", ":", "\n", "            ", "token2id", "=", "json", ".", "load", "(", "fh", ")", "\n", "\n", "", "", "train_meta", "=", "build_features", "(", "train_examples", ",", "'train'", ",", "config", ".", "max_len", ",", "flags", ".", "train_record_file", ",", "token2id", ",", "\n", "flags", ".", "train_annotation", ")", "\n", "save", "(", "flags", ".", "train_meta", ",", "train_meta", ",", "message", "=", "'train meta'", ")", "\n", "del", "train_examples", ",", "train_corpus", "\n", "\n", "valid_meta", "=", "build_features", "(", "valid_examples", ",", "'valid'", ",", "config", ".", "max_len", ",", "flags", ".", "valid_record_file", ",", "token2id", ")", "\n", "save", "(", "flags", ".", "valid_meta", ",", "valid_meta", ",", "message", "=", "'valid meta'", ")", "\n", "del", "valid_examples", ",", "valid_corpus", "\n", "\n", "test_meta", "=", "build_features", "(", "test_examples", ",", "'test'", ",", "config", ".", "max_len", ",", "flags", ".", "test_record_file", ",", "token2id", ",", "\n", "flags", ".", "test_annotation", ")", "\n", "save", "(", "flags", ".", "test_meta", ",", "test_meta", ",", "message", "=", "'test meta'", ")", "\n", "del", "test_examples", ",", "test_corpus", "\n", "\n", "save", "(", "flags", ".", "shape_meta", ",", "{", "'max_len'", ":", "config", ".", "max_len", "}", ",", "message", "=", "'shape meta'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess_1.stat_length": [[18, 38], ["print", "numpy.asarray", "numpy.arange", "print", "matplotlib.figure", "matplotlib.subplot", "matplotlib.plot", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.subplot", "matplotlib.hist", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.show", "len", "scipy.stats.describe"], "function", ["None"], ["def", "stat_length", "(", "seq_length", ")", ":", "\n", "    ", "print", "(", "'Seq len info :'", ")", "\n", "seq_len", "=", "np", ".", "asarray", "(", "seq_length", ")", "\n", "idx", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "seq_len", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "print", "(", "stats", ".", "describe", "(", "seq_len", ")", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "9", ")", ")", "\n", "plt", ".", "subplot", "(", "121", ")", "\n", "plt", ".", "plot", "(", "idx", "[", ":", "]", ",", "seq_len", "[", ":", "]", ",", "'ro'", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xlabel", "(", "'index'", ")", "\n", "plt", ".", "ylabel", "(", "'seq_len'", ")", "\n", "plt", ".", "title", "(", "'Scatter Plot'", ")", "\n", "\n", "plt", ".", "subplot", "(", "122", ")", "\n", "plt", ".", "hist", "(", "seq_len", ",", "bins", "=", "10", ",", "label", "=", "[", "'seq_len'", "]", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xlabel", "(", "'seq_len'", ")", "\n", "plt", ".", "ylabel", "(", "'freq'", ")", "\n", "plt", ".", "title", "(", "'Histogram'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess_1.stat_altlex": [[40, 64], ["zip", "set", "set", "set.intersection", "zip", "print", "print", "print", "print", "print", "print", "nc_alt.append", "nc_alt.append", "c_alt.append", "c_alt.append", "len", "len", "len"], "function", ["None"], ["", "def", "stat_altlex", "(", "eng_sentences", ",", "sim_sentences", ",", "labels", ")", ":", "\n", "    ", "c_alt", ",", "nc_alt", "=", "[", "]", ",", "[", "]", "\n", "for", "eng", ",", "sim", ",", "label", "in", "zip", "(", "eng_sentences", ",", "sim_sentences", ",", "labels", ")", ":", "\n", "        ", "if", "label", "==", "0", ":", "\n", "            ", "nc_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "eng", "[", "1", "]", ")", ")", "\n", "nc_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "sim", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "c_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "eng", "[", "1", "]", ")", ")", "\n", "c_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "sim", "[", "1", "]", ")", ")", "\n", "", "", "c_alt_set", "=", "set", "(", "c_alt", ")", "\n", "nc_alt_set", "=", "set", "(", "nc_alt", ")", "\n", "co_alt_set", "=", "c_alt_set", ".", "intersection", "(", "nc_alt_set", ")", "\n", "co_in_c", ",", "co_in_nc", "=", "0", ",", "0", "\n", "for", "c", ",", "nc", "in", "zip", "(", "c_alt", ",", "nc_alt", ")", ":", "\n", "        ", "if", "c", "in", "co_alt_set", ":", "\n", "            ", "co_in_c", "+=", "1", "\n", "", "if", "nc", "in", "nc_alt_set", ":", "\n", "            ", "co_in_nc", "+=", "1", "\n", "", "", "print", "(", "'#Altlexes rep casual - {}'", ".", "format", "(", "len", "(", "c_alt_set", ")", ")", ")", "\n", "print", "(", "'#Altlexes rep non_casual - {}'", ".", "format", "(", "len", "(", "nc_alt_set", ")", ")", ")", "\n", "print", "(", "'#Altlexes in both set - {}'", ".", "format", "(", "len", "(", "co_alt_set", ")", ")", ")", "\n", "print", "(", "co_alt_set", ")", "\n", "print", "(", "'#CoAltlex in causal - {}'", ".", "format", "(", "co_in_c", ")", ")", "\n", "print", "(", "'#CoAltlex in non_causal - {}'", ".", "format", "(", "co_in_nc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess_1.seg_length": [[256, 261], ["seg_len.append", "len", "len", "len"], "function", ["None"], ["", "def", "seg_length", "(", "sentences", ")", ":", "\n", "    ", "seg_len", "=", "[", "]", "\n", "for", "sen", "in", "sentences", ":", "\n", "        ", "seg_len", ".", "append", "(", "(", "len", "(", "sen", "[", "0", "]", ")", ",", "len", "(", "sen", "[", "1", "]", ")", ",", "len", "(", "sen", "[", "2", "]", ")", ")", ")", "\n", "", "return", "seg_len", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess_1.preprocess_train": [[73, 136], ["print", "os.path.join", "fh.close", "zip", "numpy.random.shuffle", "open", "examples.append", "seq_len.append", "examples.append", "seq_len.append", "zip", "max", "line.strip().split.strip().split", "labels.append", "engs.append", "sims.append", "word.lower", "word.lower", "len", "len", "sentences.append", "sentences.append", "int", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "seg_engs.append", "seg_sims.append", "SPACE.join", "SPACE.join", "line.strip().split.strip", "SPACE.join().strip", "SPACE.join().strip", "word.lower", "word.lower", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "SPACE.join", "SPACE.join"], "function", ["None"], ["", "def", "preprocess_train", "(", "file_path", ",", "file_name", ",", "data_type", ",", "is_build", ")", ":", "\n", "    ", "print", "(", "\"Generating {} examples...\"", ".", "format", "(", "data_type", ")", ")", "\n", "examples", "=", "[", "]", "\n", "eval_examples", "=", "{", "}", "\n", "engs", ",", "sims", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "seg_engs", ",", "seg_sims", "=", "[", "]", ",", "[", "]", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "file_path", ",", "file_name", ")", "\n", "with", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "fh", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "labels", ".", "append", "(", "int", "(", "line", "[", "0", "]", ")", ")", "\n", "del", "line", "[", "0", "]", "\n", "engs", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", "[", ":", "3", "]", ")", ".", "strip", "(", ")", ")", ")", "\n", "sims", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", "[", "3", ":", "]", ")", ".", "strip", "(", ")", ")", ")", "\n", "if", "is_build", ":", "\n", "                ", "seg_engs", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "[", ":", "3", "]", "]", ")", "\n", "seg_sims", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "[", "3", ":", "]", "]", ")", "\n", "", "", "", "fh", ".", "close", "(", ")", "\n", "\n", "english_punctuations", "=", "[", "','", ",", "'.'", ",", "':'", ",", "';'", ",", "'?'", ",", "'('", ",", "')'", ",", "'['", ",", "']'", ",", "'&'", ",", "'!'", ",", "'*'", ",", "'@'", ",", "'#'", ",", "'$'", ",", "'%'", ",", "\n", "'\"'", ",", "'``'", ",", "'-'", ",", "'\\'\\''", "]", "\n", "eng_filtered", "=", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "document", "if", "word", "not", "in", "english_punctuations", "]", "for", "document", "in", "engs", "]", "\n", "sim_filtered", "=", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "document", "if", "word", "not", "in", "english_punctuations", "]", "for", "document", "in", "sims", "]", "\n", "if", "is_build", ":", "\n", "        ", "seg_eng_filtered", "=", "[", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "seg", "if", "word", "not", "in", "english_punctuations", "]", "for", "seg", "in", "eng", "]", "for", "eng", "\n", "in", "seg_engs", "]", "\n", "seg_sim_filtered", "=", "[", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "seg", "if", "word", "not", "in", "english_punctuations", "]", "for", "seg", "in", "sim", "]", "for", "sim", "\n", "in", "seg_sims", "]", "\n", "", "else", ":", "\n", "        ", "seg_eng_filtered", ",", "seg_sim_filtered", "=", "[", "]", ",", "[", "]", "\n", "", "total", "=", "0", "\n", "seq_len", "=", "[", "]", "\n", "for", "label", ",", "eng", ",", "sim", "in", "zip", "(", "labels", ",", "eng_filtered", ",", "sim_filtered", ")", ":", "\n", "# if label == 0:", "\n", "#     prob = np.random.random(1)", "\n", "#     if prob <= 0.75:", "\n", "#         continue", "\n", "        ", "total", "+=", "1", "\n", "examples", ".", "append", "(", "{", "'eid'", ":", "total", ",", "\n", "'tokens'", ":", "eng", ",", "\n", "'label'", ":", "label", "}", ")", "\n", "eval_examples", "[", "total", "]", "=", "label", "\n", "seq_len", ".", "append", "(", "len", "(", "eng", ")", ")", "\n", "\n", "total", "+=", "1", "\n", "examples", ".", "append", "(", "{", "'eid'", ":", "total", ",", "\n", "'tokens'", ":", "sim", ",", "\n", "'label'", ":", "label", "}", ")", "\n", "eval_examples", "[", "total", "]", "=", "label", "\n", "seq_len", ".", "append", "(", "len", "(", "sim", ")", ")", "\n", "# stat_length(seq_len)", "\n", "# print('Get {} total examples'.format(total))", "\n", "# print('Get {} causal examples'.format(causal))", "\n", "# print('Get {} non-causal examples'.format(non_causal))", "\n", "", "if", "is_build", ":", "\n", "        ", "sentences", "=", "[", "]", "\n", "for", "eng_tokens", ",", "sim_tokens", "in", "zip", "(", "eng_filtered", ",", "sim_filtered", ")", ":", "\n", "            ", "sentences", ".", "append", "(", "SPACE", ".", "join", "(", "eng_tokens", ")", ")", "\n", "sentences", ".", "append", "(", "SPACE", ".", "join", "(", "sim_tokens", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "sentences", "=", "[", "]", "\n", "", "np", ".", "random", ".", "shuffle", "(", "examples", ")", "\n", "return", "examples", ",", "eval_examples", ",", "sentences", ",", "(", "seg_eng_filtered", ",", "seg_sim_filtered", ")", ",", "labels", ",", "max", "(", "seq_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess_1.preprocess_test": [[138, 182], ["print", "os.path.join", "fh.close", "zip", "open", "examples.append", "line.strip().split.strip().split", "int", "labels.append", "sentences.append", "word.lower", "SPACE.join", "nltk.tokenize.word_tokenize", "segments.append", "line.strip().split.strip", "SPACE.join().strip", "word.lower", "nltk.tokenize.word_tokenize", "SPACE.join"], "function", ["None"], ["", "def", "preprocess_test", "(", "file_path", ",", "file_name", ",", "data_type", ",", "is_build", "=", "False", ")", ":", "\n", "    ", "print", "(", "\"Generating {} examples...\"", ".", "format", "(", "data_type", ")", ")", "\n", "examples", "=", "[", "]", "\n", "eval_examples", "=", "{", "}", "\n", "sentences", ",", "segments", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "file_path", ",", "file_name", ")", "\n", "with", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'ISO-8859-1'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "fh", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "num", "=", "int", "(", "line", "[", "-", "1", "]", ")", "\n", "labels", ".", "append", "(", "0", "if", "num", "==", "0", "else", "1", ")", "\n", "sentences", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", "[", ":", "-", "1", "]", ")", ".", "strip", "(", ")", ")", ")", "\n", "if", "is_build", ":", "\n", "                ", "segments", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "[", ":", "-", "1", "]", "]", ")", "\n", "", "", "", "fh", ".", "close", "(", ")", "\n", "\n", "english_punctuations", "=", "[", "','", ",", "'.'", ",", "':'", ",", "';'", ",", "'?'", ",", "'('", ",", "')'", ",", "'['", ",", "']'", ",", "'&'", ",", "'!'", ",", "'*'", ",", "'@'", ",", "'#'", ",", "'$'", ",", "'%'", ",", "\n", "'\"'", ",", "'``'", ",", "'-'", ",", "'\\'\\''", "]", "\n", "sen_filtered", "=", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "sentence", "if", "word", "not", "in", "english_punctuations", "]", "for", "sentence", "in", "sentences", "]", "\n", "if", "is_build", ":", "\n", "        ", "seg_filtered", "=", "[", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "seg", "if", "word", "not", "in", "english_punctuations", "]", "for", "seg", "in", "eng", "]", "for", "eng", "\n", "in", "segments", "]", "\n", "", "else", ":", "\n", "        ", "seg_filtered", "=", "[", "]", "\n", "", "total", "=", "0", "\n", "for", "label", ",", "sen", "in", "zip", "(", "labels", ",", "sen_filtered", ")", ":", "\n", "        ", "total", "+=", "1", "\n", "examples", ".", "append", "(", "{", "'eid'", ":", "total", ",", "\n", "'tokens'", ":", "sen", ",", "\n", "'label'", ":", "label", "}", ")", "\n", "eval_examples", "[", "total", "]", "=", "label", "\n", "# if label == 0:", "\n", "#     non_causal += 1", "\n", "# else:", "\n", "#     causal += 1", "\n", "# stat(seq_len)", "\n", "# print('Get {} total examples'.format(total))", "\n", "# print('Get {} causal examples'.format(causal))", "\n", "# print('Get {} non-causal examples'.format(non_causal))", "\n", "", "if", "is_build", ":", "\n", "        ", "sentences", "=", "[", "SPACE", ".", "join", "(", "tokens", ")", "for", "tokens", "in", "sen_filtered", "]", "\n", "", "else", ":", "\n", "        ", "sentences", "=", "[", "]", "\n", "", "return", "examples", ",", "eval_examples", ",", "sentences", ",", "seg_filtered", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess_1.build_dict": [[184, 197], ["set", "open", "line.strip().split.strip().split", "nltk.FreqDist", "nltk.FreqDist.keys", "line.strip().split.strip", "dictionary.keys"], "function", ["None"], ["", "def", "build_dict", "(", "data_path", ")", ":", "\n", "    ", "dictionary", "=", "{", "}", "\n", "with", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "fh", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "fredist", "=", "nltk", ".", "FreqDist", "(", "line", ")", "\n", "for", "localkey", "in", "fredist", ".", "keys", "(", ")", ":", "\n", "                ", "if", "localkey", "in", "dictionary", ".", "keys", "(", ")", ":", "\n", "                    ", "dictionary", "[", "localkey", "]", "=", "dictionary", "[", "localkey", "]", "+", "fredist", "[", "localkey", "]", "\n", "", "else", ":", "\n", "# \u5982\u679c\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728", "\n", "                    ", "dictionary", "[", "localkey", "]", "=", "fredist", "[", "localkey", "]", "# \u5c06\u5f53\u524d\u8bcd\u9891\u6dfb\u52a0\u5230\u5b57\u5178\u4e2d", "\n", "", "", "", "", "return", "set", "(", "dictionary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess_1.save": [[199, 208], ["print", "open", "fh.writelines", "open", "ujson.dump"], "function", ["None"], ["", "def", "save", "(", "filename", ",", "obj", ",", "message", "=", "None", ")", ":", "\n", "    ", "if", "message", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Saving {}...'", ".", "format", "(", "message", ")", ")", "\n", "if", "message", "==", "'corpus'", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "fh", ":", "\n", "                ", "fh", ".", "writelines", "(", "[", "line", "+", "'\\n'", "for", "line", "in", "obj", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "fh", ":", "\n", "                ", "json", ".", "dump", "(", "obj", ",", "fh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess_1.get_embedding": [[210, 254], ["print", "set", "corpus_dict.intersection", "corpus_dict.difference", "set", "oov_tokens.difference.difference", "print", "numpy.zeros", "len", "fin.close", "set", "token.split", "numpy.zeros", "numpy.row_stack", "open", "pickle.load", "len", "set.append", "len", "len", "len", "enumerate", "len", "token.split"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "", "", "", "def", "get_embedding", "(", "data_type", ",", "corpus_dict", ",", "emb_file", "=", "None", ",", "vec_size", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Generating {} embedding...\"", ".", "format", "(", "data_type", ")", ")", "\n", "embedding_dict", "=", "set", "(", ")", "\n", "trained_embeddings", "=", "{", "}", "\n", "if", "emb_file", "is", "not", "None", ":", "\n", "        ", "assert", "vec_size", "is", "not", "None", "\n", "with", "open", "(", "emb_file", ",", "'rb'", ")", "as", "fin", ":", "\n", "            ", "trained_embeddings", "=", "pkl", ".", "load", "(", "fin", ")", "\n", "", "fin", ".", "close", "(", ")", "\n", "embedding_dict", "=", "set", "(", "trained_embeddings", ")", "\n", "\n", "", "filtered_tokens", "=", "corpus_dict", ".", "intersection", "(", "embedding_dict", ")", "# common", "\n", "oov_tokens", "=", "corpus_dict", ".", "difference", "(", "filtered_tokens", ")", "\n", "combined_tokens", "=", "[", "]", "\n", "for", "token", "in", "oov_tokens", ":", "\n", "        ", "if", "len", "(", "token", ".", "split", "(", "'-'", ")", ")", ">", "1", ":", "\n", "            ", "combined_tokens", ".", "append", "(", "token", ")", "\n", "", "", "combined_tokens", "=", "set", "(", "combined_tokens", ")", "\n", "oov_tokens", "=", "oov_tokens", ".", "difference", "(", "combined_tokens", ")", "\n", "print", "(", "'Filtered_tokens: {} Combined_tokens: {} OOV_tokens: {}'", ".", "format", "(", "len", "(", "filtered_tokens", ")", ",", "len", "(", "combined_tokens", ")", ",", "\n", "len", "(", "oov_tokens", ")", ")", ")", "\n", "NULL", "=", "\"<NULL>\"", "\n", "OOV", "=", "\"<OOV>\"", "\n", "token2id", "=", "{", "token", ":", "idx", "for", "idx", ",", "token", "in", "enumerate", "(", "filtered_tokens", ",", "2", ")", "}", "\n", "token2id", "[", "NULL", "]", "=", "0", "\n", "token2id", "[", "OOV", "]", "=", "1", "\n", "embedding_mat", "=", "np", ".", "zeros", "(", "[", "len", "(", "token2id", ")", ",", "vec_size", "]", ")", "\n", "for", "token", "in", "filtered_tokens", ":", "\n", "        ", "embedding_mat", "[", "token2id", "[", "token", "]", "]", "=", "trained_embeddings", "[", "token", "]", "\n", "", "token_tail", "=", "len", "(", "token2id", ")", "\n", "for", "token", "in", "combined_tokens", ":", "\n", "        ", "tokens", "=", "token", ".", "split", "(", "'-'", ")", "\n", "token_vec", "=", "np", ".", "zeros", "(", "[", "vec_size", "]", ")", "\n", "in_emb", "=", "0", "\n", "for", "t", "in", "tokens", ":", "\n", "            ", "if", "t", "in", "filtered_tokens", ":", "\n", "                ", "token_vec", "+=", "trained_embeddings", "[", "t", "]", "\n", "in_emb", "+=", "1", "\n", "", "", "if", "in_emb", "==", "0", ":", "\n", "            ", "continue", "\n", "", "token2id", "[", "token", "]", "=", "token_tail", "\n", "embedding_mat", "=", "np", ".", "row_stack", "(", "(", "embedding_mat", ",", "token_vec", "/", "in_emb", ")", ")", "\n", "token_tail", "+=", "1", "\n", "", "return", "embedding_mat", ",", "token2id", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess_1.gen_annotation": [[263, 296], ["tf_preprocess_1.seg_length", "tf_preprocess_1.seg_length", "f.close", "tf_preprocess_1.seg_length", "f.close", "open", "zip", "open", "zip", "f.write", "f.write", "f.write", "sum", "sum", "sum", "annos.strip", "annos.strip", "annos.strip"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.seg_length", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.seg_length", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.seg_length"], ["", "def", "gen_annotation", "(", "segs", ",", "max_length", ",", "filename", ",", "labels", ",", "data_type", ")", ":", "\n", "    ", "if", "data_type", "==", "'train'", ":", "\n", "        ", "eng_length", "=", "seg_length", "(", "segs", "[", "0", "]", ")", "\n", "sim_length", "=", "seg_length", "(", "segs", "[", "1", "]", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "            ", "for", "el", ",", "sl", ",", "label", "in", "zip", "(", "eng_length", ",", "sim_length", ",", "labels", ")", ":", "\n", "                ", "pre", ",", "alt", ",", "cur", "=", "el", "\n", "if", "sum", "(", "el", ")", ">", "max_length", ":", "\n", "                    ", "cur", "-=", "pre", "+", "alt", "+", "cur", "-", "max_length", "\n", "", "annos", "=", "'0 '", "*", "pre", "\n", "annos", "+=", "'1 '", "if", "label", "==", "1", "else", "'2 '", "*", "alt", "\n", "annos", "+=", "'0 '", "*", "cur", "\n", "f", ".", "write", "(", "annos", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "pre", ",", "alt", ",", "cur", "=", "sl", "\n", "if", "sum", "(", "sl", ")", ">", "max_length", ":", "\n", "                    ", "cur", "-=", "pre", "+", "alt", "+", "cur", "-", "max_length", "\n", "", "annos", "=", "'0 '", "*", "pre", "\n", "annos", "+=", "'1 '", "if", "label", "==", "1", "else", "'2 '", "*", "alt", "\n", "annos", "+=", "'0 '", "*", "cur", "\n", "f", ".", "write", "(", "annos", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "length", "=", "seg_length", "(", "segs", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "            ", "for", "l", ",", "label", "in", "zip", "(", "length", ",", "labels", ")", ":", "\n", "                ", "pre", ",", "alt", ",", "cur", "=", "l", "\n", "if", "sum", "(", "l", ")", ">", "max_length", ":", "\n", "                    ", "cur", "-=", "pre", "+", "alt", "+", "cur", "-", "max_length", "\n", "", "annos", "=", "'0 '", "*", "pre", "\n", "annos", "+=", "'1 '", "if", "label", "==", "1", "else", "'2 '", "*", "alt", "\n", "annos", "+=", "'0 '", "*", "cur", "\n", "f", ".", "write", "(", "annos", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess_1.build_features": [[298, 330], ["print", "tensorflow.python_io.TFRecordWriter", "open", "tqdm.tqdm", "print", "tf.python_io.TFRecordWriter.close", "numpy.zeros", "min", "range", "tensorflow.train.Example", "tf.python_io.TFRecordWriter.write", "len", "tf_preprocess_1.build_features._get_word"], "function", ["None"], ["", "", "def", "build_features", "(", "samples", ",", "data_type", ",", "max_len", ",", "out_file", ",", "word2id", ",", "annotation_file", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Processing {} examples...\"", ".", "format", "(", "data_type", ")", ")", "\n", "writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "out_file", ")", "\n", "total", "=", "0", "\n", "meta", "=", "{", "}", "\n", "fh", "=", "open", "(", "annotation_file", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "\n", "for", "sample", "in", "tqdm", "(", "samples", ")", ":", "\n", "        ", "total", "+=", "1", "\n", "token_ids", "=", "np", ".", "zeros", "(", "[", "max_len", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "def", "_get_word", "(", "word", ")", ":", "\n", "            ", "for", "each", "in", "(", "word", ",", "word", ".", "lower", "(", ")", ",", "word", ".", "capitalize", "(", ")", ",", "word", ".", "upper", "(", ")", ")", ":", "\n", "                ", "if", "each", "in", "word2id", ":", "\n", "                    ", "return", "word2id", "[", "each", "]", "\n", "", "", "return", "1", "\n", "\n", "", "seq_len", "=", "min", "(", "len", "(", "sample", "[", "'tokens'", "]", ")", ",", "max_len", ")", "\n", "for", "i", "in", "range", "(", "seq_len", ")", ":", "\n", "            ", "token_ids", "[", "i", "]", "=", "_get_word", "(", "sample", "[", "'tokens'", "]", "[", "i", "]", ")", "\n", "\n", "", "record", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "{", "\n", "'eid'", ":", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "sample", "[", "'eid'", "]", "]", ")", ")", ",", "\n", "'token_ids'", ":", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "token_ids", ".", "tostring", "(", ")", "]", ")", ")", ",", "\n", "'token_len'", ":", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "seq_len", "]", ")", ")", ",", "\n", "'cu_label'", ":", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "sample", "[", "'label'", "]", "]", ")", ")", ",", "\n", "'alt_label'", ":", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "sample", "[", "'label'", "]", "]", ")", ")", ",", "\n", "}", ")", ")", "\n", "writer", ".", "write", "(", "record", ".", "SerializeToString", "(", ")", ")", "\n", "", "print", "(", "'Build {} instances of features in total'", ".", "format", "(", "total", ")", ")", "\n", "meta", "[", "'total'", "]", "=", "total", "\n", "writer", ".", "close", "(", ")", "\n", "return", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess_1.run_prepare": [[332, 372], ["tf_preprocess_1.preprocess_train", "tf_preprocess_1.preprocess_test", "tf_preprocess_1.build_features", "tf_preprocess_1.save", "tf_preprocess_1.save", "tf_preprocess_1.build_features", "tf_preprocess_1.save", "tf_preprocess_1.save", "tf_preprocess_1.save", "tf_preprocess_1.build_dict", "tf_preprocess_1.get_embedding", "tf_preprocess_1.save", "tf_preprocess_1.save", "zip", "tf_preprocess_1.save", "tf_preprocess_1.gen_annotation", "open", "ujson.load", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.preprocess_train", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.preprocess_test", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_features", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_features", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_dict", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.get_embedding", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.gen_annotation", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "def", "run_prepare", "(", "config", ",", "flags", ")", ":", "\n", "    ", "train_examples", ",", "train_evals", ",", "train_corpus", ",", "train_seg", ",", "train_labels", ",", "max_len", "=", "preprocess_train", "(", "config", ".", "raw_dir", ",", "\n", "config", ".", "train_file", ",", "\n", "'train'", ",", "\n", "config", ".", "is_build", ")", "\n", "# valid_examples, valid_evals, valid_corpus, valid_seg, valid_labels = preprocess_test(config.raw_dir,", "\n", "#                                                                                      config.valid_file, 'valid')", "\n", "test_examples", ",", "test_evals", ",", "test_corpus", ",", "test_seg", ",", "test_labels", "=", "preprocess_test", "(", "config", ".", "raw_dir", ",", "config", ".", "test_file", ",", "\n", "'test'", ",", "config", ".", "is_build", ")", "\n", "if", "config", ".", "is_build", ":", "\n", "        ", "corpus_dict", "=", "build_dict", "(", "flags", ".", "corpus_file", ")", "\n", "token_emb_mat", ",", "token2id", "=", "get_embedding", "(", "'word'", ",", "corpus_dict", ",", "flags", ".", "w2v_file", ",", "config", ".", "n_emb", ")", "\n", "save", "(", "flags", ".", "token_emb_file", ",", "token_emb_mat", ",", "message", "=", "'token embedding matrix'", ")", "\n", "save", "(", "flags", ".", "token2id_file", ",", "token2id", ",", "message", "=", "'word2index'", ")", "\n", "types", "=", "[", "'train'", ",", "'test'", "]", "\n", "labels", "=", "[", "train_labels", ",", "test_labels", "]", "\n", "segs", "=", "[", "train_seg", ",", "test_seg", "]", "\n", "for", "t", ",", "s", ",", "l", "in", "zip", "(", "types", ",", "segs", ",", "labels", ")", ":", "\n", "            ", "save", "(", "os", ".", "path", ".", "join", "(", "config", ".", "processed_dir", ",", "t", "+", "'_corpus.txt'", ")", ",", "train_corpus", ",", "'corpus'", ")", "\n", "gen_annotation", "(", "s", ",", "config", ".", "max_len", ",", "os", ".", "path", ".", "join", "(", "config", ".", "processed_dir", ",", "t", "+", "'_annotations.txt'", ")", ",", "l", ",", "t", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "flags", ".", "token2id_file", ",", "'r'", ")", "as", "fh", ":", "\n", "            ", "token2id", "=", "json", ".", "load", "(", "fh", ")", "\n", "\n", "", "", "train_meta", "=", "build_features", "(", "train_examples", ",", "'train'", ",", "200", ",", "flags", ".", "train_record_file", ",", "token2id", ",", "flags", ".", "train_annotation", ")", "\n", "save", "(", "flags", ".", "train_eval_file", ",", "train_evals", ",", "message", "=", "'train eval'", ")", "\n", "save", "(", "flags", ".", "train_meta", ",", "train_meta", ",", "message", "=", "'train meta'", ")", "\n", "del", "train_examples", ",", "train_evals", ",", "train_corpus", "\n", "\n", "# valid_meta = build_features(valid_examples, 'valid', 200, flags.valid_record_file, token2id)", "\n", "# save(flags.valid_eval_file, valid_evals, message='valid eval')", "\n", "# save(flags.valid_meta, valid_meta, message='valid_meta')", "\n", "# del valid_examples, valid_evals, valid_corpus", "\n", "\n", "test_meta", "=", "build_features", "(", "test_examples", ",", "'test'", ",", "200", ",", "flags", ".", "test_record_file", ",", "token2id", ",", "flags", ".", "test_annotation", ")", "\n", "save", "(", "flags", ".", "test_eval_file", ",", "test_evals", ",", "message", "=", "'test eval'", ")", "\n", "save", "(", "flags", ".", "test_meta", ",", "test_meta", ",", "message", "=", "'test meta'", ")", "\n", "del", "test_examples", ",", "test_evals", ",", "test_corpus", "\n", "\n", "save", "(", "flags", ".", "shape_meta", ",", "{", "'max_len'", ":", "200", "}", ",", "message", "=", "'shape meta'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.stat_length": [[18, 38], ["print", "numpy.asarray", "numpy.arange", "print", "matplotlib.figure", "matplotlib.subplot", "matplotlib.plot", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.subplot", "matplotlib.hist", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.show", "len", "scipy.stats.describe"], "function", ["None"], ["def", "stat_length", "(", "seq_length", ")", ":", "\n", "    ", "print", "(", "'Seq len info :'", ")", "\n", "seq_len", "=", "np", ".", "asarray", "(", "seq_length", ")", "\n", "idx", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "seq_len", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "print", "(", "stats", ".", "describe", "(", "seq_len", ")", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "9", ")", ")", "\n", "plt", ".", "subplot", "(", "121", ")", "\n", "plt", ".", "plot", "(", "idx", "[", ":", "]", ",", "seq_len", "[", ":", "]", ",", "'ro'", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xlabel", "(", "'index'", ")", "\n", "plt", ".", "ylabel", "(", "'seq_len'", ")", "\n", "plt", ".", "title", "(", "'Scatter Plot'", ")", "\n", "\n", "plt", ".", "subplot", "(", "122", ")", "\n", "plt", ".", "hist", "(", "seq_len", ",", "bins", "=", "10", ",", "label", "=", "[", "'seq_len'", "]", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xlabel", "(", "'seq_len'", ")", "\n", "plt", ".", "ylabel", "(", "'freq'", ")", "\n", "plt", ".", "title", "(", "'Histogram'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.stat_altlex": [[40, 64], ["zip", "set", "set", "set.intersection", "zip", "print", "print", "print", "print", "print", "print", "nc_alt.append", "nc_alt.append", "c_alt.append", "c_alt.append", "len", "len", "len"], "function", ["None"], ["", "def", "stat_altlex", "(", "eng_sentences", ",", "sim_sentences", ",", "labels", ")", ":", "\n", "    ", "c_alt", ",", "nc_alt", "=", "[", "]", ",", "[", "]", "\n", "for", "eng", ",", "sim", ",", "label", "in", "zip", "(", "eng_sentences", ",", "sim_sentences", ",", "labels", ")", ":", "\n", "        ", "if", "label", "==", "0", ":", "\n", "            ", "nc_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "eng", "[", "1", "]", ")", ")", "\n", "nc_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "sim", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "c_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "eng", "[", "1", "]", ")", ")", "\n", "c_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "sim", "[", "1", "]", ")", ")", "\n", "", "", "c_alt_set", "=", "set", "(", "c_alt", ")", "\n", "nc_alt_set", "=", "set", "(", "nc_alt", ")", "\n", "co_alt_set", "=", "c_alt_set", ".", "intersection", "(", "nc_alt_set", ")", "\n", "co_in_c", ",", "co_in_nc", "=", "0", ",", "0", "\n", "for", "c", ",", "nc", "in", "zip", "(", "c_alt", ",", "nc_alt", ")", ":", "\n", "        ", "if", "c", "in", "co_alt_set", ":", "\n", "            ", "co_in_c", "+=", "1", "\n", "", "if", "nc", "in", "nc_alt_set", ":", "\n", "            ", "co_in_nc", "+=", "1", "\n", "", "", "print", "(", "'#Altlexes rep casual - {}'", ".", "format", "(", "len", "(", "c_alt_set", ")", ")", ")", "\n", "print", "(", "'#Altlexes rep non_casual - {}'", ".", "format", "(", "len", "(", "nc_alt_set", ")", ")", ")", "\n", "print", "(", "'#Altlexes in both set - {}'", ".", "format", "(", "len", "(", "co_alt_set", ")", ")", ")", "\n", "print", "(", "co_alt_set", ")", "\n", "print", "(", "'#CoAltlex in causal - {}'", ".", "format", "(", "co_in_c", ")", ")", "\n", "print", "(", "'#CoAltlex in non_causal - {}'", ".", "format", "(", "co_in_nc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.seg_length": [[387, 392], ["seg_len.append", "len", "len", "len"], "function", ["None"], ["", "def", "seg_length", "(", "sentences", ")", ":", "\n", "    ", "seg_len", "=", "[", "]", "\n", "for", "sen", "in", "sentences", ":", "\n", "        ", "seg_len", ".", "append", "(", "(", "len", "(", "sen", "[", "0", "]", ")", ",", "len", "(", "sen", "[", "1", "]", ")", ",", "len", "(", "sen", "[", "2", "]", ")", ")", ")", "\n", "", "return", "seg_len", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.check_null": [[73, 101], ["len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "check_null", "(", "sen", ")", ":", "\n", "    ", "flag", "=", "False", "\n", "if", "len", "(", "sen", ")", "==", "3", ":", "\n", "# if len(sen[0]) > 0:", "\n", "#     pre = sen[0]", "\n", "# else:", "\n", "#     pre = ['<NULL>']", "\n", "#     flag = True", "\n", "# if len(sen[1]) > 0:", "\n", "#     mid = sen[1]", "\n", "# else:", "\n", "#     mid = ['<NULL>']", "\n", "#     flag = True", "\n", "# if len(sen[2]) > 0:", "\n", "#     cur = sen[2]", "\n", "# else:", "\n", "#     cur = ['<NULL>']", "\n", "#     flag = True", "\n", "        ", "pre", "=", "sen", "[", "0", "]", "if", "len", "(", "sen", "[", "0", "]", ")", ">", "0", "else", "[", "'<NULL>'", "]", "\n", "mid", "=", "sen", "[", "1", "]", "if", "len", "(", "sen", "[", "1", "]", ")", ">", "0", "else", "[", "'<NULL>'", "]", "\n", "cur", "=", "sen", "[", "2", "]", "if", "len", "(", "sen", "[", "2", "]", ")", ">", "0", "else", "[", "'<NULL>'", "]", "\n", "", "else", ":", "\n", "        ", "pre", "=", "sen", "[", "0", "]", "if", "len", "(", "sen", "[", "0", "]", ")", ">", "0", "else", "[", "'<NULL>'", "]", "\n", "mid", "=", "[", "'<NULL>'", "]", "\n", "cur", "=", "[", "'<NULL>'", "]", "\n", "flag", "=", "True", "\n", "\n", "", "return", "pre", ",", "mid", ",", "cur", ",", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.preprocess_train": [[103, 169], ["print", "os.path.join", "open().readlines", "zip", "numpy.random.shuffle", "torch_preprocess.stat_length", "line.strip().split.strip().split", "labels.append", "seg_engs.append", "seg_sims.append", "torch_preprocess.check_null", "examples.append", "seq_len.append", "torch_preprocess.check_null", "examples.append", "seq_len.append", "zip", "open", "int", "engs.append", "sims.append", "print", "len", "print", "len", "sentences.append", "sentences.append", "line.strip().split.strip", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "word.lower", "word.lower", "word.lower", "word.lower", "SPACE.join", "SPACE.join", "SPACE.join().strip", "SPACE.join().strip", "SPACE.join", "SPACE.join"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.stat_length", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.check_null", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.check_null"], ["", "def", "preprocess_train", "(", "file_path", ",", "file_name", ",", "data_type", ",", "is_build", "=", "False", ")", ":", "\n", "    ", "print", "(", "\"Generating {} examples...\"", ".", "format", "(", "data_type", ")", ")", "\n", "examples", "=", "[", "]", "\n", "engs", ",", "sims", "=", "[", "]", ",", "[", "]", "\n", "seg_engs", ",", "seg_sims", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "file_path", ",", "file_name", ")", "\n", "lines", "=", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'ISO-8859-1'", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "line", "[", "0", "]", "==", "'label'", ":", "\n", "            ", "continue", "\n", "", "labels", ".", "append", "(", "int", "(", "line", "[", "0", "]", ")", ")", "\n", "del", "line", "[", "0", "]", "\n", "if", "is_build", ":", "\n", "            ", "engs", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", "[", ":", "3", "]", ")", ".", "strip", "(", ")", ")", ")", "\n", "sims", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", "[", "3", ":", "]", ")", ".", "strip", "(", ")", ")", ")", "\n", "", "seg_engs", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "[", ":", "3", "]", "]", ")", "\n", "seg_sims", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "[", "3", ":", "]", "]", ")", "\n", "\n", "", "english_punctuations", "=", "[", "','", ",", "'.'", ",", "':'", ",", "';'", ",", "'?'", ",", "'('", ",", "')'", ",", "'['", ",", "']'", ",", "'&'", ",", "'!'", ",", "'*'", ",", "'@'", ",", "'#'", ",", "'$'", ",", "'%'", ",", "\n", "'\"'", ",", "'``'", ",", "'-'", ",", "'\\'\\''", "]", "\n", "if", "is_build", ":", "\n", "        ", "eng_filtered", "=", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "document", "if", "word", "not", "in", "english_punctuations", "]", "for", "document", "in", "engs", "]", "\n", "sim_filtered", "=", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "document", "if", "word", "not", "in", "english_punctuations", "]", "for", "document", "in", "sims", "]", "\n", "", "seg_eng_filtered", "=", "[", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "seg", "if", "word", "not", "in", "english_punctuations", "]", "for", "seg", "in", "eng", "]", "for", "eng", "\n", "in", "seg_engs", "]", "\n", "seg_sim_filtered", "=", "[", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "seg", "if", "word", "not", "in", "english_punctuations", "]", "for", "seg", "in", "sim", "]", "for", "sim", "\n", "in", "seg_sims", "]", "\n", "\n", "total", "=", "0", "\n", "seq_len", "=", "[", "]", "\n", "for", "label", ",", "eng", ",", "sim", "in", "zip", "(", "labels", ",", "seg_eng_filtered", ",", "seg_sim_filtered", ")", ":", "\n", "        ", "total", "+=", "1", "\n", "pre", ",", "mid", ",", "cur", ",", "flag", "=", "check_null", "(", "eng", ")", "\n", "if", "flag", ":", "\n", "            ", "print", "(", "total", ")", "\n", "", "examples", ".", "append", "(", "{", "'eid'", ":", "total", ",", "\n", "'tokens'", ":", "pre", "+", "mid", "+", "cur", ",", "\n", "'tokens_pre'", ":", "pre", ",", "\n", "'tokens_alt'", ":", "mid", ",", "\n", "'tokens_cur'", ":", "cur", ",", "\n", "'cau_label'", ":", "label", "}", ")", "\n", "seq_len", ".", "append", "(", "len", "(", "pre", "+", "mid", "+", "cur", ")", ")", "\n", "\n", "total", "+=", "1", "\n", "pre", ",", "mid", ",", "cur", ",", "flag", "=", "check_null", "(", "sim", ")", "\n", "if", "flag", ":", "\n", "            ", "print", "(", "total", ")", "\n", "", "examples", ".", "append", "(", "{", "'eid'", ":", "total", ",", "\n", "'tokens'", ":", "pre", "+", "mid", "+", "cur", ",", "\n", "'tokens_pre'", ":", "pre", ",", "\n", "'tokens_alt'", ":", "mid", ",", "\n", "'tokens_cur'", ":", "cur", ",", "\n", "'cau_label'", ":", "label", "}", ")", "\n", "seq_len", ".", "append", "(", "len", "(", "pre", "+", "mid", "+", "cur", ")", ")", "\n", "\n", "", "if", "is_build", ":", "\n", "        ", "sentences", "=", "[", "]", "\n", "for", "eng_tokens", ",", "sim_tokens", "in", "zip", "(", "eng_filtered", ",", "sim_filtered", ")", ":", "\n", "            ", "sentences", ".", "append", "(", "SPACE", ".", "join", "(", "eng_tokens", ")", ")", "\n", "sentences", ".", "append", "(", "SPACE", ".", "join", "(", "sim_tokens", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "sentences", "=", "[", "]", "\n", "", "np", ".", "random", ".", "shuffle", "(", "examples", ")", "\n", "stat_length", "(", "seq_len", ")", "\n", "return", "examples", ",", "sentences", ",", "(", "seg_eng_filtered", ",", "seg_sim_filtered", ")", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.preprocess_test": [[171, 218], ["print", "os.path.join", "open().readlines", "zip", "torch_preprocess.stat_length", "line.strip().split.strip().split", "int", "labels.append", "sentences.append", "torch_preprocess.check_null", "examples.append", "seq_len.append", "open", "nltk.tokenize.word_tokenize", "len", "segments.append", "segments.append", "print", "len", "SPACE.join", "line.strip().split.strip", "SPACE.join().strip", "word.lower", "word.lower", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "SPACE.join"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.stat_length", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.check_null"], ["", "def", "preprocess_test", "(", "file_path", ",", "file_name", ",", "data_type", ",", "is_build", "=", "False", ")", ":", "\n", "    ", "print", "(", "\"Generating {} examples...\"", ".", "format", "(", "data_type", ")", ")", "\n", "examples", "=", "[", "]", "\n", "sentences", ",", "segments", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "file_path", ",", "file_name", ")", "\n", "lines", "=", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'ISO-8859-1'", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "num", "=", "int", "(", "line", "[", "-", "1", "]", ")", "\n", "del", "line", "[", "-", "1", "]", "\n", "labels", ".", "append", "(", "0", "if", "num", "==", "0", "else", "1", ")", "\n", "sentences", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", ")", ".", "strip", "(", ")", ")", ")", "\n", "if", "len", "(", "line", ")", "==", "3", ":", "\n", "            ", "segments", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "]", ")", "\n", "", "else", ":", "\n", "            ", "segments", ".", "append", "(", "[", "[", "'<NULL>'", "]", ",", "word_tokenize", "(", "line", "[", "0", "]", ")", ",", "word_tokenize", "(", "line", "[", "1", "]", ")", "]", ")", "\n", "\n", "", "", "english_punctuations", "=", "[", "','", ",", "'.'", ",", "':'", ",", "';'", ",", "'?'", ",", "'('", ",", "')'", ",", "'['", ",", "']'", ",", "'&'", ",", "'!'", ",", "'*'", ",", "'@'", ",", "'#'", ",", "'$'", ",", "'%'", ",", "\n", "'\"'", ",", "'``'", ",", "'-'", ",", "'\\'\\''", "]", "\n", "if", "is_build", ":", "\n", "        ", "sen_filtered", "=", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "sentence", "if", "word", "not", "in", "english_punctuations", "]", "for", "sentence", "in", "\n", "sentences", "]", "\n", "", "seg_filtered", "=", "[", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "seg", "if", "word", "not", "in", "english_punctuations", "]", "for", "seg", "in", "eng", "]", "for", "eng", "in", "\n", "segments", "]", "\n", "total", "=", "0", "\n", "seq_len", "=", "[", "]", "\n", "for", "label", ",", "seg", "in", "zip", "(", "labels", ",", "seg_filtered", ")", ":", "\n", "        ", "total", "+=", "1", "\n", "pre", ",", "mid", ",", "cur", ",", "flag", "=", "check_null", "(", "seg", ")", "\n", "if", "flag", ":", "\n", "            ", "print", "(", "total", ")", "\n", "", "examples", ".", "append", "(", "{", "'eid'", ":", "total", ",", "\n", "'tokens'", ":", "pre", "+", "mid", "+", "cur", ",", "\n", "'tokens_pre'", ":", "pre", ",", "\n", "'tokens_alt'", ":", "mid", ",", "\n", "'tokens_cur'", ":", "cur", ",", "\n", "'cau_label'", ":", "label", "}", ")", "\n", "seq_len", ".", "append", "(", "len", "(", "pre", "+", "mid", "+", "cur", ")", ")", "\n", "# print('Get {} total examples'.format(total))", "\n", "# print('Get {} causal examples'.format(causal))", "\n", "# print('Get {} non-causal examples'.format(non_causal))", "\n", "", "if", "is_build", ":", "\n", "        ", "sentences", "=", "[", "SPACE", ".", "join", "(", "tokens", ")", "for", "tokens", "in", "sen_filtered", "]", "\n", "", "else", ":", "\n", "        ", "sentences", "=", "[", "]", "\n", "", "stat_length", "(", "seq_len", ")", "\n", "return", "examples", ",", "sentences", ",", "seg_filtered", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.preprocess_transfer": [[220, 241], ["print", "os.path.join", "f.close", "zip", "open", "ujson.load", "torch_preprocess.check_null", "examples.append", "print"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.check_null"], ["", "def", "preprocess_transfer", "(", "file_path", ",", "file_name", ",", "data_type", ",", "is_build", "=", "False", ")", ":", "\n", "    ", "print", "(", "\"Generating {} examples...\"", ".", "format", "(", "data_type", ")", ")", "\n", "examples", "=", "[", "]", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "file_path", ",", "file_name", ")", "\n", "\n", "total", "=", "0", "\n", "with", "open", "(", "data_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data_set", "=", "json", ".", "load", "(", "f", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "for", "label", ",", "sample", "in", "zip", "(", "data_set", "[", "'label'", "]", ",", "data_set", "[", "'sample'", "]", ")", ":", "\n", "        ", "total", "+=", "1", "\n", "pre", ",", "mid", ",", "cur", ",", "flag", "=", "check_null", "(", "sample", ")", "\n", "if", "flag", ":", "\n", "            ", "print", "(", "total", ")", "\n", "", "examples", ".", "append", "(", "{", "'eid'", ":", "total", ",", "\n", "'tokens'", ":", "pre", "+", "mid", "+", "cur", ",", "\n", "'tokens_pre'", ":", "pre", ",", "\n", "'tokens_alt'", ":", "mid", ",", "\n", "'tokens_cur'", ":", "cur", ",", "\n", "'cau_label'", ":", "label", "}", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.build_dict": [[243, 256], ["set", "open", "line.strip().split.strip().split", "nltk.FreqDist", "nltk.FreqDist.keys", "line.strip().split.strip", "dictionary.keys"], "function", ["None"], ["", "def", "build_dict", "(", "data_path", ")", ":", "\n", "    ", "dictionary", "=", "{", "}", "\n", "with", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "fh", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "fredist", "=", "nltk", ".", "FreqDist", "(", "line", ")", "\n", "for", "localkey", "in", "fredist", ".", "keys", "(", ")", ":", "\n", "                ", "if", "localkey", "in", "dictionary", ".", "keys", "(", ")", ":", "\n", "                    ", "dictionary", "[", "localkey", "]", "=", "dictionary", "[", "localkey", "]", "+", "fredist", "[", "localkey", "]", "\n", "", "else", ":", "\n", "# \u5982\u679c\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728", "\n", "                    ", "dictionary", "[", "localkey", "]", "=", "fredist", "[", "localkey", "]", "# \u5c06\u5f53\u524d\u8bcd\u9891\u6dfb\u52a0\u5230\u5b57\u5178\u4e2d", "\n", "", "", "", "", "return", "set", "(", "dictionary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.save": [[258, 271], ["print", "fh.close", "open", "fh.writelines", "open", "pickle.dump", "open", "ujson.dump"], "function", ["None"], ["", "def", "save", "(", "filename", ",", "obj", ",", "message", "=", "None", ")", ":", "\n", "    ", "if", "message", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Saving {}...'", ".", "format", "(", "message", ")", ")", "\n", "if", "message", "==", "'corpus'", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "fh", ":", "\n", "                ", "fh", ".", "writelines", "(", "[", "line", "+", "'\\n'", "for", "line", "in", "obj", "]", ")", "\n", "", "", "elif", "message", "==", "'embeddings'", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "fh", ":", "\n", "                ", "pkl", ".", "dump", "(", "obj", ",", "fh", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "fh", ":", "\n", "                ", "json", ".", "dump", "(", "obj", ",", "fh", ")", "\n", "", "", "fh", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.get_embedding": [[273, 328], ["print", "dict", "fin.close", "set", "print", "corpus_dict.intersection", "corpus_dict.difference", "set", "numpy.zeros", "numpy.random.uniform", "print", "numpy.random.uniform", "numpy.zeros", "numpy.zeros", "zip", "open", "pickle.load", "len", "tokens.split", "numpy.zeros", "max", "len", "token2id.values", "token2id.keys", "len", "len", "set.append", "len", "numpy.row_stack", "len", "len", "token.split", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "", "def", "get_embedding", "(", "data_type", ",", "corpus_dict", ",", "emb_file", "=", "None", ",", "vec_size", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Generating {} embedding...\"", ".", "format", "(", "data_type", ")", ")", "\n", "\n", "# token2id = {'<NULL>': 0, '<OOV>': 1, '<LEARN>': 2}", "\n", "token2id", "=", "{", "'<NULL>'", ":", "0", ",", "'<OOV>'", ":", "1", "}", "\n", "if", "emb_file", "is", "not", "None", ":", "\n", "        ", "assert", "vec_size", "is", "not", "None", "\n", "with", "open", "(", "emb_file", ",", "'rb'", ")", "as", "fin", ":", "\n", "            ", "trained_embeddings", "=", "pkl", ".", "load", "(", "fin", ")", "\n", "", "fin", ".", "close", "(", ")", "\n", "embedding_dict", "=", "set", "(", "trained_embeddings", ")", "\n", "print", "(", "'Num of tokens in corpus {}'", ".", "format", "(", "len", "(", "corpus_dict", ")", ")", ")", "\n", "filtered_tokens", "=", "corpus_dict", ".", "intersection", "(", "embedding_dict", ")", "# common", "\n", "oov_tokens", "=", "corpus_dict", ".", "difference", "(", "filtered_tokens", ")", "\n", "combined_tokens", "=", "[", "]", "\n", "for", "token", "in", "oov_tokens", ":", "\n", "            ", "if", "len", "(", "token", ".", "split", "(", "'-'", ")", ")", ">", "1", ":", "\n", "                ", "combined_tokens", ".", "append", "(", "token", ")", "\n", "", "", "combined_tokens", "=", "set", "(", "combined_tokens", ")", "\n", "# oov_tokens = oov_tokens.difference(combined_tokens)", "\n", "# token2id = {'<NULL>': 0, '<OOV>': 1}", "\n", "# embedding_mat = np.zeros([len(corpus_dict) + 2, vec_size])", "\n", "embedding_mat", "=", "np", ".", "zeros", "(", "[", "len", "(", "filtered_tokens", ")", "+", "len", "(", "token2id", ")", ",", "vec_size", "]", ")", "\n", "for", "token", "in", "filtered_tokens", ":", "\n", "            ", "token2id", "[", "token", "]", "=", "len", "(", "token2id", ")", "\n", "embedding_mat", "[", "token2id", "[", "token", "]", "]", "=", "trained_embeddings", "[", "token", "]", "\n", "\n", "", "combined", "=", "0", "\n", "for", "tokens", "in", "combined_tokens", ":", "\n", "            ", "sub_tokens", "=", "tokens", ".", "split", "(", "'-'", ")", "\n", "token_vec", "=", "np", ".", "zeros", "(", "[", "vec_size", "]", ")", "\n", "in_emb", "=", "0", "\n", "for", "t", "in", "sub_tokens", ":", "\n", "                ", "if", "t", "in", "filtered_tokens", ":", "\n", "                    ", "token_vec", "+=", "trained_embeddings", "[", "t", "]", "\n", "in_emb", "+=", "1", "\n", "", "", "if", "in_emb", ">", "0", ":", "\n", "                ", "combined", "+=", "1", "\n", "token2id", "[", "tokens", "]", "=", "len", "(", "token2id", ")", "\n", "embedding_mat", "=", "np", ".", "row_stack", "(", "(", "embedding_mat", ",", "token_vec", "/", "in_emb", ")", ")", "\n", "", "", "scale", "=", "3.0", "/", "max", "(", "1.0", ",", "(", "len", "(", "corpus_dict", ")", "+", "vec_size", ")", "/", "2.0", ")", "\n", "embedding_mat", "[", "1", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "scale", ",", "scale", ",", "vec_size", ")", "\n", "print", "(", "'Filtered_tokens: {} Combined_tokens: {} OOV_tokens: {}'", ".", "format", "(", "len", "(", "filtered_tokens", ")", ",", "\n", "combined", ",", "\n", "len", "(", "oov_tokens", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "embedding_mat", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "(", "len", "(", "corpus_dict", ")", "+", "len", "(", "token2id", ")", ",", "vec_size", ")", ")", "\n", "embedding_mat", "[", "0", "]", "=", "np", ".", "zeros", "(", "vec_size", ")", "\n", "embedding_mat", "[", "1", "]", "=", "np", ".", "zeros", "(", "vec_size", ")", "\n", "for", "token", "in", "corpus_dict", ":", "\n", "            ", "token2id", "[", "token", "]", "=", "len", "(", "token2id", ")", "\n", "# id2token = dict([val, key] for key, val in token2id.items())", "\n", "", "", "id2token", "=", "dict", "(", "zip", "(", "token2id", ".", "values", "(", ")", ",", "token2id", ".", "keys", "(", ")", ")", ")", "\n", "# print(len(token2id), len(id2token), len(embedding_mat))", "\n", "return", "embedding_mat", ",", "token2id", ",", "id2token", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.gen_embedding": [[330, 385], ["print", "dict", "fin.close", "set", "print", "corpus_dict.intersection", "corpus_dict.difference", "set", "numpy.zeros", "numpy.random.uniform", "print", "numpy.random.uniform", "numpy.zeros", "numpy.zeros", "zip", "open", "pickle.load", "len", "tokens.split", "numpy.zeros", "max", "len", "token2id.values", "token2id.keys", "len", "len", "set.append", "len", "numpy.row_stack", "len", "len", "token.split", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "def", "gen_embedding", "(", "data_type", ",", "corpus_dict", ",", "emb_file", "=", "None", ",", "vec_size", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Generating {} embedding...\"", ".", "format", "(", "data_type", ")", ")", "\n", "\n", "# token2id = {'<NULL>': 0, '<OOV>': 1, '<LEARN>': 2}", "\n", "token2id", "=", "{", "'<NULL>'", ":", "0", ",", "'<OOV>'", ":", "1", "}", "\n", "if", "emb_file", "is", "not", "None", ":", "\n", "        ", "assert", "vec_size", "is", "not", "None", "\n", "with", "open", "(", "emb_file", ",", "'rb'", ")", "as", "fin", ":", "\n", "            ", "trained_embeddings", "=", "pkl", ".", "load", "(", "fin", ")", "\n", "", "fin", ".", "close", "(", ")", "\n", "embedding_dict", "=", "set", "(", "trained_embeddings", ")", "\n", "print", "(", "'Num of tokens in corpus {}'", ".", "format", "(", "len", "(", "corpus_dict", ")", ")", ")", "\n", "filtered_tokens", "=", "corpus_dict", ".", "intersection", "(", "embedding_dict", ")", "# common", "\n", "oov_tokens", "=", "corpus_dict", ".", "difference", "(", "filtered_tokens", ")", "\n", "combined_tokens", "=", "[", "]", "\n", "for", "token", "in", "oov_tokens", ":", "\n", "            ", "if", "len", "(", "token", ".", "split", "(", "'-'", ")", ")", ">", "1", ":", "\n", "                ", "combined_tokens", ".", "append", "(", "token", ")", "\n", "", "", "combined_tokens", "=", "set", "(", "combined_tokens", ")", "\n", "# oov_tokens = oov_tokens.difference(combined_tokens)", "\n", "# token2id = {'<NULL>': 0, '<OOV>': 1}", "\n", "# embedding_mat = np.zeros([len(corpus_dict) + 2, vec_size])", "\n", "embedding_mat", "=", "np", ".", "zeros", "(", "[", "len", "(", "filtered_tokens", ")", "+", "len", "(", "token2id", ")", ",", "vec_size", "]", ")", "\n", "for", "token", "in", "filtered_tokens", ":", "\n", "            ", "token2id", "[", "token", "]", "=", "len", "(", "token2id", ")", "\n", "embedding_mat", "[", "token2id", "[", "token", "]", "]", "=", "trained_embeddings", "[", "token", "]", "\n", "\n", "", "combined", "=", "0", "\n", "for", "tokens", "in", "combined_tokens", ":", "\n", "            ", "sub_tokens", "=", "tokens", ".", "split", "(", "'-'", ")", "\n", "token_vec", "=", "np", ".", "zeros", "(", "[", "vec_size", "]", ")", "\n", "in_emb", "=", "0", "\n", "for", "t", "in", "sub_tokens", ":", "\n", "                ", "if", "t", "in", "filtered_tokens", ":", "\n", "                    ", "token_vec", "+=", "trained_embeddings", "[", "t", "]", "\n", "in_emb", "+=", "1", "\n", "", "", "if", "in_emb", ">", "0", ":", "\n", "                ", "combined", "+=", "1", "\n", "token2id", "[", "tokens", "]", "=", "len", "(", "token2id", ")", "\n", "embedding_mat", "=", "np", ".", "row_stack", "(", "(", "embedding_mat", ",", "token_vec", "/", "in_emb", ")", ")", "\n", "", "", "scale", "=", "3.0", "/", "max", "(", "1.0", ",", "(", "len", "(", "corpus_dict", ")", "+", "vec_size", ")", "/", "2.0", ")", "\n", "embedding_mat", "[", "1", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "scale", ",", "scale", ",", "vec_size", ")", "\n", "print", "(", "'Filtered_tokens: {} Combined_tokens: {} OOV_tokens: {}'", ".", "format", "(", "len", "(", "filtered_tokens", ")", ",", "\n", "combined", ",", "\n", "len", "(", "oov_tokens", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "embedding_mat", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "(", "len", "(", "corpus_dict", ")", "+", "len", "(", "token2id", ")", ",", "vec_size", ")", ")", "\n", "embedding_mat", "[", "0", "]", "=", "np", ".", "zeros", "(", "vec_size", ")", "\n", "embedding_mat", "[", "1", "]", "=", "np", ".", "zeros", "(", "vec_size", ")", "\n", "for", "token", "in", "corpus_dict", ":", "\n", "            ", "token2id", "[", "token", "]", "=", "len", "(", "token2id", ")", "\n", "# id2token = dict([val, key] for key, val in token2id.items())", "\n", "", "", "id2token", "=", "dict", "(", "zip", "(", "token2id", ".", "values", "(", ")", ",", "token2id", ".", "keys", "(", ")", ")", ")", "\n", "# print(len(token2id), len(id2token), len(embedding_mat))", "\n", "return", "embedding_mat", ",", "token2id", ",", "id2token", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.gen_annotation": [[394, 428], ["torch_preprocess.seg_length", "torch_preprocess.seg_length", "f.close", "torch_preprocess.seg_length", "f.close", "open", "zip", "open", "zip", "f.write", "f.write", "f.write", "sum", "sum", "sum", "annos.strip", "annos.strip", "annos.strip"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.seg_length", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.seg_length", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.seg_length"], ["", "def", "gen_annotation", "(", "segs", ",", "max_length", ",", "filename", ",", "labels", ",", "data_type", ")", ":", "\n", "    ", "max_length", "=", "max_length", "[", "'full'", "]", "\n", "if", "data_type", "==", "'train'", ":", "\n", "        ", "eng_length", "=", "seg_length", "(", "segs", "[", "0", "]", ")", "\n", "sim_length", "=", "seg_length", "(", "segs", "[", "1", "]", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "            ", "for", "el", ",", "sl", ",", "label", "in", "zip", "(", "eng_length", ",", "sim_length", ",", "labels", ")", ":", "\n", "                ", "pre", ",", "alt", ",", "cur", "=", "el", "\n", "if", "sum", "(", "el", ")", ">", "max_length", ":", "\n", "                    ", "cur", "-=", "pre", "+", "alt", "+", "cur", "-", "max_length", "\n", "", "annos", "=", "'0 '", "*", "pre", "\n", "annos", "+=", "'1 '", "if", "label", "==", "1", "else", "'2 '", "*", "alt", "\n", "annos", "+=", "'0 '", "*", "cur", "\n", "f", ".", "write", "(", "annos", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "pre", ",", "alt", ",", "cur", "=", "sl", "\n", "if", "sum", "(", "sl", ")", ">", "max_length", ":", "\n", "                    ", "cur", "-=", "pre", "+", "alt", "+", "cur", "-", "max_length", "\n", "", "annos", "=", "'0 '", "*", "pre", "\n", "annos", "+=", "'1 '", "if", "label", "==", "1", "else", "'2 '", "*", "alt", "\n", "annos", "+=", "'0 '", "*", "cur", "\n", "f", ".", "write", "(", "annos", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "length", "=", "seg_length", "(", "segs", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "            ", "for", "l", ",", "label", "in", "zip", "(", "length", ",", "labels", ")", ":", "\n", "                ", "pre", ",", "alt", ",", "cur", "=", "l", "\n", "if", "sum", "(", "l", ")", ">", "max_length", ":", "\n", "                    ", "cur", "-=", "pre", "+", "alt", "+", "cur", "-", "max_length", "\n", "", "annos", "=", "'0 '", "*", "pre", "\n", "annos", "+=", "'1 '", "if", "label", "==", "1", "else", "'2 '", "*", "alt", "\n", "annos", "+=", "'0 '", "*", "cur", "\n", "f", ".", "write", "(", "annos", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.build_features": [[430, 475], ["print", "tqdm.tqdm", "fo.close", "print", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "min", "min", "min", "min", "range", "range", "range", "range", "samples.append", "open", "pickle.dump", "len", "len", "len", "len", "torch_preprocess.build_features._get_word"], "function", ["None"], ["", "", "def", "build_features", "(", "sentences", ",", "data_type", ",", "max_len", ",", "out_file", ",", "word2id", ",", "annotation_file", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Processing {} examples...\"", ".", "format", "(", "data_type", ")", ")", "\n", "total", "=", "0", "\n", "meta", "=", "{", "}", "\n", "samples", "=", "[", "]", "\n", "# fh = open(annotation_file, 'r', encoding='utf8')", "\n", "for", "sentence", "in", "tqdm", "(", "sentences", ")", ":", "\n", "        ", "total", "+=", "1", "\n", "tokens", "=", "np", ".", "zeros", "(", "[", "max_len", "[", "'full'", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "tokens_pre", "=", "np", ".", "zeros", "(", "[", "max_len", "[", "'pre'", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "tokens_alt", "=", "np", ".", "zeros", "(", "[", "max_len", "[", "'alt'", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "tokens_cur", "=", "np", ".", "zeros", "(", "[", "max_len", "[", "'cur'", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "def", "_get_word", "(", "word", ")", ":", "\n", "            ", "for", "each", "in", "(", "word", ",", "word", ".", "lower", "(", ")", ",", "word", ".", "capitalize", "(", ")", ",", "word", ".", "upper", "(", ")", ")", ":", "\n", "                ", "if", "each", "in", "word2id", ":", "\n", "                    ", "return", "word2id", "[", "each", "]", "\n", "", "", "return", "1", "\n", "\n", "", "seq_len", "=", "min", "(", "len", "(", "sentence", "[", "'tokens'", "]", ")", ",", "max_len", "[", "'full'", "]", ")", "\n", "pre_len", "=", "min", "(", "len", "(", "sentence", "[", "'tokens_pre'", "]", ")", ",", "max_len", "[", "'pre'", "]", ")", "\n", "alt_len", "=", "min", "(", "len", "(", "sentence", "[", "'tokens_alt'", "]", ")", ",", "max_len", "[", "'alt'", "]", ")", "\n", "cur_len", "=", "min", "(", "len", "(", "sentence", "[", "'tokens_cur'", "]", ")", ",", "max_len", "[", "'cur'", "]", ")", "\n", "for", "i", "in", "range", "(", "seq_len", ")", ":", "\n", "            ", "tokens", "[", "i", "]", "=", "_get_word", "(", "sentence", "[", "'tokens'", "]", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "pre_len", ")", ":", "\n", "            ", "tokens_pre", "[", "i", "]", "=", "_get_word", "(", "sentence", "[", "'tokens_pre'", "]", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "alt_len", ")", ":", "\n", "            ", "tokens_alt", "[", "i", "]", "=", "_get_word", "(", "sentence", "[", "'tokens_alt'", "]", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "            ", "tokens_cur", "[", "i", "]", "=", "_get_word", "(", "sentence", "[", "'tokens_cur'", "]", "[", "i", "]", ")", "\n", "", "samples", ".", "append", "(", "{", "'id'", ":", "sentence", "[", "'eid'", "]", ",", "\n", "'tokens'", ":", "tokens", ",", "\n", "'tokens_pre'", ":", "tokens_pre", ",", "\n", "'tokens_alt'", ":", "tokens_alt", ",", "\n", "'tokens_cur'", ":", "tokens_cur", ",", "\n", "'length'", ":", "seq_len", ",", "\n", "'cau_label'", ":", "sentence", "[", "'cau_label'", "]", "}", ")", "\n", "# fh.close()", "\n", "", "with", "open", "(", "out_file", ",", "'wb'", ")", "as", "fo", ":", "\n", "        ", "pkl", ".", "dump", "(", "samples", ",", "fo", ")", "\n", "", "fo", ".", "close", "(", ")", "\n", "print", "(", "'Build {} instances of features in total'", ".", "format", "(", "total", ")", ")", "\n", "meta", "[", "'total'", "]", "=", "total", "\n", "return", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.run_prepare": [[477, 527], ["torch_preprocess.preprocess_train", "torch_preprocess.preprocess_transfer", "torch_preprocess.preprocess_transfer", "torch_preprocess.preprocess_test", "torch_preprocess.preprocess_test", "torch_preprocess.build_features", "torch_preprocess.save", "torch_preprocess.build_features", "torch_preprocess.save", "torch_preprocess.build_features", "torch_preprocess.save", "torch_preprocess.build_features", "torch_preprocess.save", "torch_preprocess.build_features", "torch_preprocess.save", "torch_preprocess.save", "torch_preprocess.save", "torch_preprocess.build_dict", "torch_preprocess.get_embedding", "torch_preprocess.save", "torch_preprocess.save", "torch_preprocess.save", "open", "ujson.load"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.preprocess_train", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.preprocess_transfer", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.torch_preprocess.preprocess_transfer", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.preprocess_test", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.preprocess_test", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_features", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_features", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_features", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_features", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_features", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_dict", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.get_embedding", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "def", "run_prepare", "(", "config", ")", ":", "\n", "    ", "train_examples", ",", "train_corpus", ",", "train_seg", ",", "train_labels", "=", "preprocess_train", "(", "config", ".", "raw_dir", ",", "config", ".", "train_file", ",", "\n", "'train'", ",", "config", ".", "build", ")", "\n", "transfer_examples1", "=", "preprocess_transfer", "(", "config", ".", "raw_dir", ",", "config", ".", "transfer_file1", ",", "'transfer'", ")", "\n", "transfer_examples2", "=", "preprocess_transfer", "(", "config", ".", "raw_dir", ",", "config", ".", "transfer_file2", ",", "'transfer'", ")", "\n", "valid_examples", ",", "valid_corpus", ",", "valid_seg", ",", "valid_labels", "=", "preprocess_test", "(", "config", ".", "raw_dir", ",", "config", ".", "valid_file", ",", "\n", "'valid'", ",", "config", ".", "build", ")", "\n", "test_examples", ",", "test_corpus", ",", "test_seg", ",", "test_labels", "=", "preprocess_test", "(", "config", ".", "raw_dir", ",", "config", ".", "test_file", ",", "\n", "'test'", ",", "config", ".", "build", ")", "\n", "\n", "if", "config", ".", "build", ":", "\n", "# types = ['train', 'valid', 'test']", "\n", "# labels = [train_labels, valid_labels, test_labels]", "\n", "# segs = [train_seg, valid_seg, test_seg]", "\n", "# for t, s, l in zip(types, segs, labels):", "\n", "#     gen_annotation(s, config.max_len, os.path.join(config.processed_dir, t + '_annotations.txt'), l, t)", "\n", "        ", "save", "(", "config", ".", "corpus_file", ",", "train_corpus", ",", "'corpus'", ")", "\n", "corpus_dict", "=", "build_dict", "(", "config", ".", "corpus_file", ")", "\n", "token_emb_mat", ",", "token2id", ",", "id2token", "=", "get_embedding", "(", "'word'", ",", "corpus_dict", ",", "config", ".", "w2v_file", ",", "config", ".", "n_emb", ")", "\n", "save", "(", "config", ".", "token_emb_file", ",", "token_emb_mat", ",", "message", "=", "'embeddings'", ")", "\n", "save", "(", "config", ".", "token2id_file", ",", "token2id", ",", "message", "=", "'token to index'", ")", "\n", "save", "(", "config", ".", "id2token_file", ",", "id2token", ",", "message", "=", "'index to token'", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "config", ".", "token2id_file", ",", "'r'", ")", "as", "fh", ":", "\n", "            ", "token2id", "=", "json", ".", "load", "(", "fh", ")", "\n", "\n", "", "", "transfer_meta1", "=", "build_features", "(", "transfer_examples1", ",", "'transfer'", ",", "config", ".", "max_len", ",", "config", ".", "transfer_record_file1", ",", "\n", "token2id", ")", "\n", "save", "(", "config", ".", "transfer_meta1", ",", "transfer_meta1", ",", "message", "=", "'transfer meta'", ")", "\n", "del", "transfer_examples1", "\n", "transfer_meta2", "=", "build_features", "(", "transfer_examples2", ",", "'transfer'", ",", "config", ".", "max_len", ",", "config", ".", "transfer_record_file2", ",", "\n", "token2id", ")", "\n", "save", "(", "config", ".", "transfer_meta2", ",", "transfer_meta2", ",", "message", "=", "'transfer meta'", ")", "\n", "del", "transfer_examples2", "\n", "\n", "train_meta", "=", "build_features", "(", "train_examples", ",", "'train'", ",", "config", ".", "max_len", ",", "config", ".", "train_record_file", ",", "token2id", ",", "\n", "config", ".", "train_annotation", ")", "\n", "save", "(", "config", ".", "train_meta", ",", "train_meta", ",", "message", "=", "'train meta'", ")", "\n", "del", "train_examples", ",", "train_corpus", "\n", "\n", "valid_meta", "=", "build_features", "(", "valid_examples", ",", "'valid'", ",", "config", ".", "max_len", ",", "config", ".", "valid_record_file", ",", "token2id", ")", "\n", "save", "(", "config", ".", "valid_meta", ",", "valid_meta", ",", "message", "=", "'valid meta'", ")", "\n", "del", "valid_examples", ",", "valid_corpus", "\n", "\n", "test_meta", "=", "build_features", "(", "test_examples", ",", "'test'", ",", "config", ".", "max_len", ",", "config", ".", "test_record_file", ",", "token2id", ",", "\n", "config", ".", "test_annotation", ")", "\n", "save", "(", "config", ".", "test_meta", ",", "test_meta", ",", "message", "=", "'test meta'", ")", "\n", "del", "test_examples", ",", "test_corpus", "\n", "\n", "save", "(", "config", ".", "shape_meta", ",", "{", "'max_len'", ":", "config", ".", "max_len", "}", ",", "message", "=", "'shape meta'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.stat_length": [[18, 38], ["print", "numpy.asarray", "numpy.arange", "print", "matplotlib.figure", "matplotlib.subplot", "matplotlib.plot", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.subplot", "matplotlib.hist", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.show", "len", "scipy.stats.describe"], "function", ["None"], ["def", "stat_length", "(", "seq_length", ")", ":", "\n", "    ", "print", "(", "'Seq len info :'", ")", "\n", "seq_len", "=", "np", ".", "asarray", "(", "seq_length", ")", "\n", "idx", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "seq_len", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "print", "(", "stats", ".", "describe", "(", "seq_len", ")", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "9", ")", ")", "\n", "plt", ".", "subplot", "(", "121", ")", "\n", "plt", ".", "plot", "(", "idx", "[", ":", "]", ",", "seq_len", "[", ":", "]", ",", "'ro'", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xlabel", "(", "'index'", ")", "\n", "plt", ".", "ylabel", "(", "'seq_len'", ")", "\n", "plt", ".", "title", "(", "'Scatter Plot'", ")", "\n", "\n", "plt", ".", "subplot", "(", "122", ")", "\n", "plt", ".", "hist", "(", "seq_len", ",", "bins", "=", "10", ",", "label", "=", "[", "'seq_len'", "]", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xlabel", "(", "'seq_len'", ")", "\n", "plt", ".", "ylabel", "(", "'freq'", ")", "\n", "plt", ".", "title", "(", "'Histogram'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.stat_altlex": [[40, 64], ["zip", "set", "set", "set.intersection", "zip", "print", "print", "print", "print", "print", "print", "nc_alt.append", "nc_alt.append", "c_alt.append", "c_alt.append", "len", "len", "len"], "function", ["None"], ["", "def", "stat_altlex", "(", "eng_sentences", ",", "sim_sentences", ",", "labels", ")", ":", "\n", "    ", "c_alt", ",", "nc_alt", "=", "[", "]", ",", "[", "]", "\n", "for", "eng", ",", "sim", ",", "label", "in", "zip", "(", "eng_sentences", ",", "sim_sentences", ",", "labels", ")", ":", "\n", "        ", "if", "label", "==", "0", ":", "\n", "            ", "nc_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "eng", "[", "1", "]", ")", ")", "\n", "nc_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "sim", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "c_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "eng", "[", "1", "]", ")", ")", "\n", "c_alt", ".", "append", "(", "' '", ".", "join", "(", "w", "for", "w", "in", "sim", "[", "1", "]", ")", ")", "\n", "", "", "c_alt_set", "=", "set", "(", "c_alt", ")", "\n", "nc_alt_set", "=", "set", "(", "nc_alt", ")", "\n", "co_alt_set", "=", "c_alt_set", ".", "intersection", "(", "nc_alt_set", ")", "\n", "co_in_c", ",", "co_in_nc", "=", "0", ",", "0", "\n", "for", "c", ",", "nc", "in", "zip", "(", "c_alt", ",", "nc_alt", ")", ":", "\n", "        ", "if", "c", "in", "co_alt_set", ":", "\n", "            ", "co_in_c", "+=", "1", "\n", "", "if", "nc", "in", "nc_alt_set", ":", "\n", "            ", "co_in_nc", "+=", "1", "\n", "", "", "print", "(", "'#Altlexes rep casual - {}'", ".", "format", "(", "len", "(", "c_alt_set", ")", ")", ")", "\n", "print", "(", "'#Altlexes rep non_casual - {}'", ".", "format", "(", "len", "(", "nc_alt_set", ")", ")", ")", "\n", "print", "(", "'#Altlexes in both set - {}'", ".", "format", "(", "len", "(", "co_alt_set", ")", ")", ")", "\n", "print", "(", "co_alt_set", ")", "\n", "print", "(", "'#CoAltlex in causal - {}'", ".", "format", "(", "co_in_c", ")", ")", "\n", "print", "(", "'#CoAltlex in non_causal - {}'", ".", "format", "(", "co_in_nc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.seg_length": [[268, 273], ["seg_len.append", "len", "len", "len"], "function", ["None"], ["", "def", "seg_length", "(", "sentences", ")", ":", "\n", "    ", "seg_len", "=", "[", "]", "\n", "for", "sen", "in", "sentences", ":", "\n", "        ", "seg_len", ".", "append", "(", "(", "len", "(", "sen", "[", "0", "]", ")", ",", "len", "(", "sen", "[", "1", "]", ")", ",", "len", "(", "sen", "[", "2", "]", ")", ")", ")", "\n", "", "return", "seg_len", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.preprocess_train": [[73, 136], ["print", "os.path.join", "fh.close", "zip", "numpy.random.shuffle", "open", "examples.append", "seq_len.append", "examples.append", "seq_len.append", "zip", "max", "line.strip().split.strip().split", "labels.append", "engs.append", "sims.append", "word.lower", "word.lower", "len", "len", "sentences.append", "sentences.append", "int", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "seg_engs.append", "seg_sims.append", "SPACE.join", "SPACE.join", "line.strip().split.strip", "SPACE.join().strip", "SPACE.join().strip", "word.lower", "word.lower", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "SPACE.join", "SPACE.join"], "function", ["None"], ["", "def", "preprocess_train", "(", "file_path", ",", "file_name", ",", "data_type", ",", "is_build", ")", ":", "\n", "    ", "print", "(", "\"Generating {} examples...\"", ".", "format", "(", "data_type", ")", ")", "\n", "examples", "=", "[", "]", "\n", "eval_examples", "=", "{", "}", "\n", "engs", ",", "sims", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "seg_engs", ",", "seg_sims", "=", "[", "]", ",", "[", "]", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "file_path", ",", "file_name", ")", "\n", "with", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'ISO-8859-1'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "fh", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "labels", ".", "append", "(", "int", "(", "line", "[", "0", "]", ")", ")", "\n", "del", "line", "[", "0", "]", "\n", "engs", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", "[", ":", "3", "]", ")", ".", "strip", "(", ")", ")", ")", "\n", "sims", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", "[", "3", ":", "]", ")", ".", "strip", "(", ")", ")", ")", "\n", "if", "is_build", ":", "\n", "                ", "seg_engs", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "[", ":", "3", "]", "]", ")", "\n", "seg_sims", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "[", "3", ":", "]", "]", ")", "\n", "", "", "", "fh", ".", "close", "(", ")", "\n", "\n", "english_punctuations", "=", "[", "','", ",", "'.'", ",", "':'", ",", "';'", ",", "'?'", ",", "'('", ",", "')'", ",", "'['", ",", "']'", ",", "'&'", ",", "'!'", ",", "'*'", ",", "'@'", ",", "'#'", ",", "'$'", ",", "'%'", ",", "\n", "'\"'", ",", "'``'", ",", "'-'", ",", "'\\'\\''", "]", "\n", "eng_filtered", "=", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "document", "if", "word", "not", "in", "english_punctuations", "]", "for", "document", "in", "engs", "]", "\n", "sim_filtered", "=", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "document", "if", "word", "not", "in", "english_punctuations", "]", "for", "document", "in", "sims", "]", "\n", "if", "is_build", ":", "\n", "        ", "seg_eng_filtered", "=", "[", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "seg", "if", "word", "not", "in", "english_punctuations", "]", "for", "seg", "in", "eng", "]", "for", "eng", "\n", "in", "seg_engs", "]", "\n", "seg_sim_filtered", "=", "[", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "seg", "if", "word", "not", "in", "english_punctuations", "]", "for", "seg", "in", "sim", "]", "for", "sim", "\n", "in", "seg_sims", "]", "\n", "", "else", ":", "\n", "        ", "seg_eng_filtered", ",", "seg_sim_filtered", "=", "[", "]", ",", "[", "]", "\n", "", "total", "=", "0", "\n", "seq_len", "=", "[", "]", "\n", "for", "label", ",", "eng", ",", "sim", "in", "zip", "(", "labels", ",", "eng_filtered", ",", "sim_filtered", ")", ":", "\n", "# if label == 0:", "\n", "#     prob = np.random.random(1)", "\n", "#     if prob <= 0.75:", "\n", "#         continue", "\n", "        ", "total", "+=", "1", "\n", "examples", ".", "append", "(", "{", "'eid'", ":", "total", ",", "\n", "'tokens'", ":", "eng", ",", "\n", "'label'", ":", "label", "}", ")", "\n", "eval_examples", "[", "total", "]", "=", "label", "\n", "seq_len", ".", "append", "(", "len", "(", "eng", ")", ")", "\n", "\n", "total", "+=", "1", "\n", "examples", ".", "append", "(", "{", "'eid'", ":", "total", ",", "\n", "'tokens'", ":", "sim", ",", "\n", "'label'", ":", "label", "}", ")", "\n", "eval_examples", "[", "total", "]", "=", "label", "\n", "seq_len", ".", "append", "(", "len", "(", "sim", ")", ")", "\n", "# stat_length(seq_len)", "\n", "# print('Get {} total examples'.format(total))", "\n", "# print('Get {} causal examples'.format(causal))", "\n", "# print('Get {} non-causal examples'.format(non_causal))", "\n", "", "if", "is_build", ":", "\n", "        ", "sentences", "=", "[", "]", "\n", "for", "eng_tokens", ",", "sim_tokens", "in", "zip", "(", "eng_filtered", ",", "sim_filtered", ")", ":", "\n", "            ", "sentences", ".", "append", "(", "SPACE", ".", "join", "(", "eng_tokens", ")", ")", "\n", "sentences", ".", "append", "(", "SPACE", ".", "join", "(", "sim_tokens", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "sentences", "=", "[", "]", "\n", "", "np", ".", "random", ".", "shuffle", "(", "examples", ")", "\n", "return", "examples", ",", "eval_examples", ",", "sentences", ",", "(", "seg_eng_filtered", ",", "seg_sim_filtered", ")", ",", "labels", ",", "max", "(", "seq_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.preprocess_test": [[138, 182], ["print", "os.path.join", "fh.close", "zip", "open", "examples.append", "line.strip().split.strip().split", "int", "labels.append", "sentences.append", "word.lower", "SPACE.join", "nltk.tokenize.word_tokenize", "segments.append", "line.strip().split.strip", "SPACE.join().strip", "word.lower", "nltk.tokenize.word_tokenize", "SPACE.join"], "function", ["None"], ["", "def", "preprocess_test", "(", "file_path", ",", "file_name", ",", "data_type", ",", "is_build", "=", "False", ")", ":", "\n", "    ", "print", "(", "\"Generating {} examples...\"", ".", "format", "(", "data_type", ")", ")", "\n", "examples", "=", "[", "]", "\n", "eval_examples", "=", "{", "}", "\n", "sentences", ",", "segments", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "file_path", ",", "file_name", ")", "\n", "with", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'ISO-8859-1'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "fh", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "num", "=", "int", "(", "line", "[", "-", "1", "]", ")", "\n", "labels", ".", "append", "(", "0", "if", "num", "==", "0", "else", "1", ")", "\n", "sentences", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", "[", ":", "-", "1", "]", ")", ".", "strip", "(", ")", ")", ")", "\n", "if", "is_build", ":", "\n", "                ", "segments", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "[", ":", "-", "1", "]", "]", ")", "\n", "", "", "", "fh", ".", "close", "(", ")", "\n", "\n", "english_punctuations", "=", "[", "','", ",", "'.'", ",", "':'", ",", "';'", ",", "'?'", ",", "'('", ",", "')'", ",", "'['", ",", "']'", ",", "'&'", ",", "'!'", ",", "'*'", ",", "'@'", ",", "'#'", ",", "'$'", ",", "'%'", ",", "\n", "'\"'", ",", "'``'", ",", "'-'", ",", "'\\'\\''", "]", "\n", "sen_filtered", "=", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "sentence", "if", "word", "not", "in", "english_punctuations", "]", "for", "sentence", "in", "sentences", "]", "\n", "if", "is_build", ":", "\n", "        ", "seg_filtered", "=", "[", "[", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "seg", "if", "word", "not", "in", "english_punctuations", "]", "for", "seg", "in", "eng", "]", "for", "eng", "\n", "in", "segments", "]", "\n", "", "else", ":", "\n", "        ", "seg_filtered", "=", "[", "]", "\n", "", "total", "=", "0", "\n", "for", "label", ",", "sen", "in", "zip", "(", "labels", ",", "sen_filtered", ")", ":", "\n", "        ", "total", "+=", "1", "\n", "examples", ".", "append", "(", "{", "'eid'", ":", "total", ",", "\n", "'tokens'", ":", "sen", ",", "\n", "'label'", ":", "label", "}", ")", "\n", "eval_examples", "[", "total", "]", "=", "label", "\n", "# if label == 0:", "\n", "#     non_causal += 1", "\n", "# else:", "\n", "#     causal += 1", "\n", "# stat(seq_len)", "\n", "# print('Get {} total examples'.format(total))", "\n", "# print('Get {} causal examples'.format(causal))", "\n", "# print('Get {} non-causal examples'.format(non_causal))", "\n", "", "if", "is_build", ":", "\n", "        ", "sentences", "=", "[", "SPACE", ".", "join", "(", "tokens", ")", "for", "tokens", "in", "sen_filtered", "]", "\n", "", "else", ":", "\n", "        ", "sentences", "=", "[", "]", "\n", "", "return", "examples", ",", "eval_examples", ",", "sentences", ",", "seg_filtered", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_dict": [[184, 205], ["set", "nltk.FreqDist", "nltk.FreqDist.keys", "dictionary.keys"], "function", ["None"], ["", "def", "build_dict", "(", "corpus", ")", ":", "\n", "    ", "dictionary", "=", "{", "}", "\n", "# with open(data_path, 'r', encoding='utf8') as fh:", "\n", "#     for line in fh:", "\n", "#         line = line.strip().split(' ')", "\n", "#         fredist = nltk.FreqDist(line)", "\n", "#         for localkey in fredist.keys():", "\n", "#             if localkey in dictionary.keys():", "\n", "#                 dictionary[localkey] = dictionary[localkey] + fredist[localkey]", "\n", "#             else:", "\n", "#                 # \u5982\u679c\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728", "\n", "#                 dictionary[localkey] = fredist[localkey]  # \u5c06\u5f53\u524d\u8bcd\u9891\u6dfb\u52a0\u5230\u5b57\u5178\u4e2d", "\n", "for", "line", "in", "corpus", ":", "\n", "        ", "fredist", "=", "nltk", ".", "FreqDist", "(", "line", ")", "\n", "for", "localkey", "in", "fredist", ".", "keys", "(", ")", ":", "\n", "            ", "if", "localkey", "in", "dictionary", ".", "keys", "(", ")", ":", "\n", "                ", "dictionary", "[", "localkey", "]", "=", "dictionary", "[", "localkey", "]", "+", "fredist", "[", "localkey", "]", "\n", "", "else", ":", "\n", "# \u5982\u679c\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728", "\n", "                ", "dictionary", "[", "localkey", "]", "=", "fredist", "[", "localkey", "]", "# \u5c06\u5f53\u524d\u8bcd\u9891\u6dfb\u52a0\u5230\u5b57\u5178\u4e2d", "\n", "", "", "", "return", "set", "(", "dictionary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save": [[207, 220], ["print", "fh.close", "open", "fh.writelines", "open", "pickle.dump", "open", "ujson.dump"], "function", ["None"], ["", "def", "save", "(", "filename", ",", "obj", ",", "message", "=", "None", ")", ":", "\n", "    ", "if", "message", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Saving {}...'", ".", "format", "(", "message", ")", ")", "\n", "if", "message", "==", "'corpus'", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "fh", ":", "\n", "                ", "fh", ".", "writelines", "(", "[", "line", "+", "'\\n'", "for", "line", "in", "obj", "]", ")", "\n", "", "", "elif", "message", "==", "'embeddings'", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "fh", ":", "\n", "                ", "pkl", ".", "dump", "(", "obj", ",", "fh", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "fh", ":", "\n", "                ", "json", ".", "dump", "(", "obj", ",", "fh", ")", "\n", "", "", "fh", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.get_embedding": [[222, 266], ["print", "set", "corpus_dict.intersection", "corpus_dict.difference", "set", "oov_tokens.difference.difference", "print", "numpy.zeros", "len", "fin.close", "set", "token.split", "numpy.zeros", "numpy.row_stack", "open", "pickle.load", "len", "set.append", "len", "len", "len", "enumerate", "len", "token.split"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "", "def", "get_embedding", "(", "data_type", ",", "corpus_dict", ",", "emb_file", "=", "None", ",", "vec_size", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Generating {} embedding...\"", ".", "format", "(", "data_type", ")", ")", "\n", "embedding_dict", "=", "set", "(", ")", "\n", "trained_embeddings", "=", "{", "}", "\n", "if", "emb_file", "is", "not", "None", ":", "\n", "        ", "assert", "vec_size", "is", "not", "None", "\n", "with", "open", "(", "emb_file", ",", "'rb'", ")", "as", "fin", ":", "\n", "            ", "trained_embeddings", "=", "pkl", ".", "load", "(", "fin", ")", "\n", "", "fin", ".", "close", "(", ")", "\n", "embedding_dict", "=", "set", "(", "trained_embeddings", ")", "\n", "\n", "", "filtered_tokens", "=", "corpus_dict", ".", "intersection", "(", "embedding_dict", ")", "# common", "\n", "oov_tokens", "=", "corpus_dict", ".", "difference", "(", "filtered_tokens", ")", "\n", "combined_tokens", "=", "[", "]", "\n", "for", "token", "in", "oov_tokens", ":", "\n", "        ", "if", "len", "(", "token", ".", "split", "(", "'-'", ")", ")", ">", "1", ":", "\n", "            ", "combined_tokens", ".", "append", "(", "token", ")", "\n", "", "", "combined_tokens", "=", "set", "(", "combined_tokens", ")", "\n", "oov_tokens", "=", "oov_tokens", ".", "difference", "(", "combined_tokens", ")", "\n", "print", "(", "'Filtered_tokens: {} Combined_tokens: {} OOV_tokens: {}'", ".", "format", "(", "len", "(", "filtered_tokens", ")", ",", "len", "(", "combined_tokens", ")", ",", "\n", "len", "(", "oov_tokens", ")", ")", ")", "\n", "NULL", "=", "\"<NULL>\"", "\n", "OOV", "=", "\"<OOV>\"", "\n", "token2id", "=", "{", "token", ":", "idx", "for", "idx", ",", "token", "in", "enumerate", "(", "filtered_tokens", ",", "2", ")", "}", "\n", "token2id", "[", "NULL", "]", "=", "0", "\n", "token2id", "[", "OOV", "]", "=", "1", "\n", "embedding_mat", "=", "np", ".", "zeros", "(", "[", "len", "(", "token2id", ")", ",", "vec_size", "]", ")", "\n", "for", "token", "in", "filtered_tokens", ":", "\n", "        ", "embedding_mat", "[", "token2id", "[", "token", "]", "]", "=", "trained_embeddings", "[", "token", "]", "\n", "", "token_tail", "=", "len", "(", "token2id", ")", "\n", "for", "token", "in", "combined_tokens", ":", "\n", "        ", "tokens", "=", "token", ".", "split", "(", "'-'", ")", "\n", "token_vec", "=", "np", ".", "zeros", "(", "[", "vec_size", "]", ")", "\n", "in_emb", "=", "0", "\n", "for", "t", "in", "tokens", ":", "\n", "            ", "if", "t", "in", "filtered_tokens", ":", "\n", "                ", "token_vec", "+=", "trained_embeddings", "[", "t", "]", "\n", "in_emb", "+=", "1", "\n", "", "", "if", "in_emb", "==", "0", ":", "\n", "            ", "continue", "\n", "", "token2id", "[", "token", "]", "=", "token_tail", "\n", "embedding_mat", "=", "np", ".", "row_stack", "(", "(", "embedding_mat", ",", "token_vec", "/", "in_emb", ")", ")", "\n", "token_tail", "+=", "1", "\n", "", "return", "embedding_mat", ",", "token2id", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.gen_annotation": [[275, 308], ["tf_preprocess.seg_length", "tf_preprocess.seg_length", "f.close", "tf_preprocess.seg_length", "f.close", "open", "zip", "open", "zip", "f.write", "f.write", "f.write", "sum", "sum", "sum", "annos.strip", "annos.strip", "annos.strip"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.seg_length", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.seg_length", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.seg_length"], ["", "def", "gen_annotation", "(", "segs", ",", "max_length", ",", "filename", ",", "labels", ",", "data_type", ")", ":", "\n", "    ", "if", "data_type", "==", "'train'", ":", "\n", "        ", "eng_length", "=", "seg_length", "(", "segs", "[", "0", "]", ")", "\n", "sim_length", "=", "seg_length", "(", "segs", "[", "1", "]", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "            ", "for", "el", ",", "sl", ",", "label", "in", "zip", "(", "eng_length", ",", "sim_length", ",", "labels", ")", ":", "\n", "                ", "pre", ",", "alt", ",", "cur", "=", "el", "\n", "if", "sum", "(", "el", ")", ">", "max_length", ":", "\n", "                    ", "cur", "-=", "pre", "+", "alt", "+", "cur", "-", "max_length", "\n", "", "annos", "=", "'0 '", "*", "pre", "\n", "annos", "+=", "'1 '", "if", "label", "==", "1", "else", "'2 '", "*", "alt", "\n", "annos", "+=", "'0 '", "*", "cur", "\n", "f", ".", "write", "(", "annos", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "pre", ",", "alt", ",", "cur", "=", "sl", "\n", "if", "sum", "(", "sl", ")", ">", "max_length", ":", "\n", "                    ", "cur", "-=", "pre", "+", "alt", "+", "cur", "-", "max_length", "\n", "", "annos", "=", "'0 '", "*", "pre", "\n", "annos", "+=", "'1 '", "if", "label", "==", "1", "else", "'2 '", "*", "alt", "\n", "annos", "+=", "'0 '", "*", "cur", "\n", "f", ".", "write", "(", "annos", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "length", "=", "seg_length", "(", "segs", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "            ", "for", "l", ",", "label", "in", "zip", "(", "length", ",", "labels", ")", ":", "\n", "                ", "pre", ",", "alt", ",", "cur", "=", "l", "\n", "if", "sum", "(", "l", ")", ">", "max_length", ":", "\n", "                    ", "cur", "-=", "pre", "+", "alt", "+", "cur", "-", "max_length", "\n", "", "annos", "=", "'0 '", "*", "pre", "\n", "annos", "+=", "'1 '", "if", "label", "==", "1", "else", "'2 '", "*", "alt", "\n", "annos", "+=", "'0 '", "*", "cur", "\n", "f", ".", "write", "(", "annos", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_features": [[310, 340], ["print", "tensorflow.python_io.TFRecordWriter", "tqdm.tqdm", "print", "tf.python_io.TFRecordWriter.close", "numpy.zeros", "min", "range", "tensorflow.train.Example", "tf.python_io.TFRecordWriter.write", "len", "tf_preprocess.build_features._get_word"], "function", ["None"], ["", "", "def", "build_features", "(", "samples", ",", "data_type", ",", "max_len", ",", "out_file", ",", "word2id", ")", ":", "\n", "    ", "print", "(", "\"Processing {} examples...\"", ".", "format", "(", "data_type", ")", ")", "\n", "writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "out_file", ")", "\n", "total", "=", "0", "\n", "meta", "=", "{", "}", "\n", "for", "sample", "in", "tqdm", "(", "samples", ")", ":", "\n", "        ", "total", "+=", "1", "\n", "token_ids", "=", "np", ".", "zeros", "(", "[", "max_len", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "def", "_get_word", "(", "word", ")", ":", "\n", "            ", "for", "each", "in", "(", "word", ",", "word", ".", "lower", "(", ")", ",", "word", ".", "capitalize", "(", ")", ",", "word", ".", "upper", "(", ")", ")", ":", "\n", "                ", "if", "each", "in", "word2id", ":", "\n", "                    ", "return", "word2id", "[", "each", "]", "\n", "", "", "return", "1", "\n", "\n", "", "seq_len", "=", "min", "(", "len", "(", "sample", "[", "'tokens'", "]", ")", ",", "max_len", ")", "\n", "for", "i", "in", "range", "(", "seq_len", ")", ":", "\n", "            ", "token_ids", "[", "i", "]", "=", "_get_word", "(", "sample", "[", "'tokens'", "]", "[", "i", "]", ")", "\n", "\n", "", "record", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "{", "\n", "'eid'", ":", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "sample", "[", "'eid'", "]", "]", ")", ")", ",", "\n", "'token_ids'", ":", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "token_ids", ".", "tostring", "(", ")", "]", ")", ")", ",", "\n", "'token_len'", ":", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "seq_len", "]", ")", ")", ",", "\n", "'label'", ":", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "sample", "[", "'label'", "]", "]", ")", ")", ",", "\n", "}", ")", ")", "\n", "writer", ".", "write", "(", "record", ".", "SerializeToString", "(", ")", ")", "\n", "", "print", "(", "'Build {} instances of features in total'", ".", "format", "(", "total", ")", ")", "\n", "meta", "[", "'total'", "]", "=", "total", "\n", "writer", ".", "close", "(", ")", "\n", "return", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.run_prepare": [[342, 382], ["tf_preprocess.preprocess_train", "tf_preprocess.preprocess_test", "tf_preprocess.preprocess_test", "tf_preprocess.build_features", "tf_preprocess.save", "tf_preprocess.save", "tf_preprocess.build_features", "tf_preprocess.save", "tf_preprocess.save", "tf_preprocess.build_features", "tf_preprocess.save", "tf_preprocess.save", "tf_preprocess.save", "tf_preprocess.build_dict", "tf_preprocess.get_embedding", "tf_preprocess.save", "tf_preprocess.save", "zip", "tf_preprocess.save", "tf_preprocess.gen_annotation", "open", "ujson.load", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.preprocess_train", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.preprocess_test", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.preprocess_test", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_features", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_features", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_features", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.build_dict", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.get_embedding", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.save", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.tf_preprocess.gen_annotation", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.tmp.w2v_test.load"], ["", "def", "run_prepare", "(", "config", ",", "flags", ")", ":", "\n", "    ", "train_examples", ",", "train_evals", ",", "train_corpus", ",", "train_seg", ",", "train_labels", ",", "max_len", "=", "preprocess_train", "(", "config", ".", "raw_dir", ",", "\n", "config", ".", "train_file", ",", "\n", "'train'", ",", "\n", "config", ".", "build", ")", "\n", "valid_examples", ",", "valid_evals", ",", "valid_corpus", ",", "valid_seg", ",", "valid_labels", "=", "preprocess_test", "(", "config", ".", "raw_dir", ",", "\n", "config", ".", "valid_file", ",", "'valid'", ")", "\n", "test_examples", ",", "test_evals", ",", "test_corpus", ",", "test_seg", ",", "test_labels", "=", "preprocess_test", "(", "config", ".", "raw_dir", ",", "config", ".", "test_file", ",", "\n", "'test'", ",", "config", ".", "build", ")", "\n", "if", "config", ".", "build", ":", "\n", "        ", "corpus_dict", "=", "build_dict", "(", "train_corpus", "+", "valid_corpus", "+", "test_corpus", ")", "\n", "token_emb_mat", ",", "token2id", "=", "get_embedding", "(", "'word'", ",", "corpus_dict", ",", "flags", ".", "w2v_file", ",", "config", ".", "n_emb", ")", "\n", "save", "(", "flags", ".", "token_emb_file", ",", "token_emb_mat", ",", "message", "=", "'embeddings'", ")", "\n", "save", "(", "flags", ".", "token2id_file", ",", "token2id", ",", "message", "=", "'word2index'", ")", "\n", "types", "=", "[", "'train'", ",", "'test'", "]", "\n", "labels", "=", "[", "train_labels", ",", "test_labels", "]", "\n", "segs", "=", "[", "train_seg", ",", "test_seg", "]", "\n", "for", "t", ",", "s", ",", "l", "in", "zip", "(", "types", ",", "segs", ",", "labels", ")", ":", "\n", "            ", "save", "(", "os", ".", "path", ".", "join", "(", "config", ".", "processed_dir", ",", "t", "+", "'_corpus.txt'", ")", ",", "train_corpus", ",", "'corpus'", ")", "\n", "gen_annotation", "(", "s", ",", "config", ".", "max_len", ",", "os", ".", "path", ".", "join", "(", "config", ".", "processed_dir", ",", "t", "+", "'_annotations.txt'", ")", ",", "l", ",", "t", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "flags", ".", "token2id_file", ",", "'r'", ")", "as", "fh", ":", "\n", "            ", "token2id", "=", "json", ".", "load", "(", "fh", ")", "\n", "\n", "", "", "train_meta", "=", "build_features", "(", "train_examples", ",", "'train'", ",", "200", ",", "flags", ".", "train_record_file", ",", "token2id", ")", "\n", "save", "(", "flags", ".", "train_eval_file", ",", "train_evals", ",", "message", "=", "'train eval'", ")", "\n", "save", "(", "flags", ".", "train_meta", ",", "train_meta", ",", "message", "=", "'train meta'", ")", "\n", "del", "train_examples", ",", "train_evals", ",", "train_corpus", "\n", "\n", "valid_meta", "=", "build_features", "(", "valid_examples", ",", "'valid'", ",", "200", ",", "flags", ".", "valid_record_file", ",", "token2id", ")", "\n", "save", "(", "flags", ".", "valid_eval_file", ",", "valid_evals", ",", "message", "=", "'valid eval'", ")", "\n", "save", "(", "flags", ".", "valid_meta", ",", "valid_meta", ",", "message", "=", "'valid_meta'", ")", "\n", "del", "valid_examples", ",", "valid_evals", ",", "valid_corpus", "\n", "\n", "test_meta", "=", "build_features", "(", "test_examples", ",", "'test'", ",", "200", ",", "flags", ".", "test_record_file", ",", "token2id", ")", "\n", "save", "(", "flags", ".", "test_eval_file", ",", "test_evals", ",", "message", "=", "'test eval'", ")", "\n", "save", "(", "flags", ".", "test_meta", ",", "test_meta", ",", "message", "=", "'test meta'", ")", "\n", "del", "test_examples", ",", "test_evals", ",", "test_corpus", "\n", "\n", "save", "(", "flags", ".", "shape_meta", ",", "{", "'max_len'", ":", "200", "}", ",", "message", "=", "'shape meta'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.preprocess_train": [[14, 48], ["print", "os.path.join", "fh.close", "range", "pandas.DataFrame", "open", "tqdm.tqdm", "SPACE.join", "SPACE.join", "len", "examples.append", "examples.append", "line.strip().split.strip().split", "engs.append", "sims.append", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "seg_engs.append", "seg_sims.append", "word.lower", "word.lower", "line.strip().split.strip", "int", "SPACE.join().strip", "SPACE.join().strip", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "SPACE.join", "SPACE.join"], "function", ["None"], ["def", "preprocess_train", "(", "file_path", ",", "file_name", ",", "data_type", ",", "is_build", ")", ":", "\n", "    ", "print", "(", "\"Generating {} examples...\"", ".", "format", "(", "data_type", ")", ")", "\n", "examples", "=", "[", "]", "\n", "engs", ",", "sims", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "seg_engs", ",", "seg_sims", "=", "[", "]", ",", "[", "]", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "file_path", ",", "file_name", ")", "\n", "with", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'ISO-8859-1'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "tqdm", "(", "fh", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "labels", "+=", "[", "int", "(", "line", "[", "0", "]", ")", "]", "*", "2", "\n", "del", "line", "[", "0", "]", "\n", "engs", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", "[", ":", "3", "]", ")", ".", "strip", "(", ")", ")", ")", "\n", "sims", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", "[", "3", ":", "]", ")", ".", "strip", "(", ")", ")", ")", "\n", "if", "is_build", ":", "\n", "                ", "seg_engs", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "[", ":", "3", "]", "]", ")", "\n", "seg_sims", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "[", "3", ":", "]", "]", ")", "\n", "", "", "", "fh", ".", "close", "(", ")", "\n", "\n", "english_punctuations", "=", "[", "','", ",", "'.'", ",", "':'", ",", "';'", ",", "'?'", ",", "'('", ",", "')'", ",", "'['", ",", "']'", ",", "'&'", ",", "'!'", ",", "'*'", ",", "'@'", ",", "'#'", ",", "'$'", ",", "'%'", ",", "\n", "'\"'", ",", "'``'", ",", "'-'", ",", "'\\'\\''", "]", "\n", "eng_filtered", "=", "[", "SPACE", ".", "join", "(", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "document", "if", "word", "not", "in", "english_punctuations", "]", ")", "\n", "for", "document", "in", "engs", "]", "\n", "sim_filtered", "=", "[", "SPACE", ".", "join", "(", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "document", "if", "word", "not", "in", "english_punctuations", "]", ")", "\n", "for", "document", "in", "sims", "]", "\n", "# for i in range(len(eng_filtered)):", "\n", "#     t =", "\n", "#     examples.append()", "\n", "for", "i", "in", "range", "(", "len", "(", "eng_filtered", ")", ")", ":", "\n", "        ", "examples", ".", "append", "(", "eng_filtered", "[", "i", "]", ")", "\n", "examples", ".", "append", "(", "sim_filtered", "[", "i", "]", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "{", "'labels'", ":", "labels", ",", "'examples'", ":", "examples", "}", ")", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.preprocess_test": [[50, 71], ["print", "os.path.join", "fh.close", "pandas.DataFrame", "open", "tqdm.tqdm", "SPACE.join", "line.strip().split.strip().split", "int", "labels.append", "sentences.append", "nltk.tokenize.word_tokenize", "segments.append", "word.lower", "line.strip().split.strip", "SPACE.join().strip", "nltk.tokenize.word_tokenize", "SPACE.join"], "function", ["None"], ["", "def", "preprocess_test", "(", "file_path", ",", "file_name", ",", "data_type", ",", "is_build", "=", "False", ")", ":", "\n", "    ", "print", "(", "\"Generating {} examples...\"", ".", "format", "(", "data_type", ")", ")", "\n", "sentences", ",", "segments", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "file_path", ",", "file_name", ")", "\n", "with", "open", "(", "data_path", ",", "'r'", ",", "encoding", "=", "'ISO-8859-1'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "tqdm", "(", "fh", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "num", "=", "int", "(", "line", "[", "-", "1", "]", ")", "\n", "labels", ".", "append", "(", "0", "if", "num", "==", "0", "else", "1", ")", "\n", "sentences", ".", "append", "(", "word_tokenize", "(", "SPACE", ".", "join", "(", "line", "[", ":", "-", "1", "]", ")", ".", "strip", "(", ")", ")", ")", "\n", "if", "is_build", ":", "\n", "                ", "segments", ".", "append", "(", "[", "word_tokenize", "(", "seg", ")", "for", "seg", "in", "line", "[", ":", "-", "1", "]", "]", ")", "\n", "", "", "", "fh", ".", "close", "(", ")", "\n", "\n", "english_punctuations", "=", "[", "','", ",", "'.'", ",", "':'", ",", "';'", ",", "'?'", ",", "'('", ",", "')'", ",", "'['", ",", "']'", ",", "'&'", ",", "'!'", ",", "'*'", ",", "'@'", ",", "'#'", ",", "'$'", ",", "'%'", ",", "\n", "'\"'", ",", "'``'", ",", "'-'", ",", "'\\'\\''", "]", "\n", "sen_filtered", "=", "[", "SPACE", ".", "join", "(", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "sentence", "if", "word", "not", "in", "english_punctuations", "]", ")", "\n", "for", "sentence", "in", "sentences", "]", "\n", "df", "=", "pd", ".", "DataFrame", "(", "{", "'labels'", ":", "labels", ",", "'examples'", ":", "sen_filtered", "}", ")", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.run_prepare": [[73, 81], ["ulmfit_preprocess.preprocess_train", "ulmfit_preprocess.preprocess_test", "print", "preprocess_train.to_csv", "preprocess_test.to_csv", "len", "len"], "function", ["home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.preprocess_train", "home.repos.pwc.inspect_result.shiningliang_Multi-level-Causality-Detection-Network.preprocess.ulmfit_preprocess.preprocess_test"], ["", "def", "run_prepare", "(", "config", ",", "flags", ")", ":", "\n", "    ", "df_trn", "=", "preprocess_train", "(", "config", ".", "raw_dir", ",", "config", ".", "train_file", ",", "'train'", ",", "config", ".", "build", ")", "\n", "# valid_examples, valid_corpus, valid_seg, valid_labels = preprocess_test(config.raw_dir, config.valid_file,", "\n", "#                                                                         'valid')", "\n", "df_val", "=", "preprocess_test", "(", "config", ".", "raw_dir", ",", "config", ".", "test_file", ",", "'test'", ",", "config", ".", "build", ")", "\n", "print", "(", "len", "(", "df_trn", ")", ",", "len", "(", "df_val", ")", ")", "\n", "df_trn", ".", "to_csv", "(", "flags", ".", "train_file", ",", "sep", "=", "'\\t'", ",", "index", "=", "False", ")", "\n", "df_val", ".", "to_csv", "(", "flags", ".", "test_file", ",", "sep", "=", "'\\t'", ",", "index", "=", "False", ")", "\n", "", ""]]}