{"home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.data_parallel.BalancedDataParallel.__init__": [[52, 55], ["torch.nn.parallel.DataParallel.__init__"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu0_bsz", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "gpu0_bsz", "=", "gpu0_bsz", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.data_parallel.BalancedDataParallel.forward": [[56, 71], ["data_parallel.BalancedDataParallel.scatter", "data_parallel.BalancedDataParallel.replicate", "data_parallel.BalancedDataParallel.parallel_apply", "data_parallel.BalancedDataParallel.gather", "data_parallel.BalancedDataParallel.module", "len", "data_parallel.BalancedDataParallel.module"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.data_parallel.scatter", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.data_parallel.BalancedDataParallel.parallel_apply"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "device_ids", ":", "\n", "            ", "return", "self", ".", "module", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "if", "self", ".", "gpu0_bsz", "==", "0", ":", "\n", "            ", "device_ids", "=", "self", ".", "device_ids", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "device_ids", "=", "self", ".", "device_ids", "\n", "", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "device_ids", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "", "replicas", "=", "self", ".", "replicate", "(", "self", ".", "module", ",", "self", ".", "device_ids", ")", "\n", "if", "self", ".", "gpu0_bsz", "==", "0", ":", "\n", "            ", "replicas", "=", "replicas", "[", "1", ":", "]", "\n", "", "outputs", "=", "self", ".", "parallel_apply", "(", "replicas", ",", "device_ids", ",", "inputs", ",", "kwargs", ")", "\n", "return", "self", ".", "gather", "(", "outputs", ",", "self", ".", "output_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.data_parallel.BalancedDataParallel.parallel_apply": [[72, 74], ["torch.nn.parallel.parallel_apply.parallel_apply"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.data_parallel.BalancedDataParallel.parallel_apply"], ["", "def", "parallel_apply", "(", "self", ",", "replicas", ",", "device_ids", ",", "inputs", ",", "kwargs", ")", ":", "\n", "        ", "return", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.data_parallel.BalancedDataParallel.scatter": [[75, 90], ["inputs[].size", "len", "data_parallel.scatter_kwargs", "range", "super().scatter", "sum"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.data_parallel.scatter_kwargs", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.data_parallel.scatter"], ["", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "        ", "bsz", "=", "inputs", "[", "0", "]", ".", "size", "(", "self", ".", "dim", ")", "\n", "num_dev", "=", "len", "(", "self", ".", "device_ids", ")", "\n", "gpu0_bsz", "=", "self", ".", "gpu0_bsz", "\n", "bsz_unit", "=", "(", "bsz", "-", "gpu0_bsz", ")", "//", "(", "num_dev", "-", "1", ")", "\n", "if", "gpu0_bsz", "<", "bsz_unit", ":", "\n", "            ", "chunk_sizes", "=", "[", "gpu0_bsz", "]", "+", "[", "bsz_unit", "]", "*", "(", "num_dev", "-", "1", ")", "\n", "delta", "=", "bsz", "-", "sum", "(", "chunk_sizes", ")", "\n", "for", "i", "in", "range", "(", "delta", ")", ":", "\n", "                ", "chunk_sizes", "[", "i", "+", "1", "]", "+=", "1", "\n", "", "if", "gpu0_bsz", "==", "0", ":", "\n", "                ", "chunk_sizes", "=", "chunk_sizes", "[", "1", ":", "]", "\n", "", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "device_ids", ")", "\n", "", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "chunk_sizes", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.data_parallel.scatter": [[6, 38], ["isinstance", "data_parallel.scatter.scatter_map"], "function", ["None"], ["def", "scatter", "(", "inputs", ",", "target_gpus", ",", "chunk_sizes", ",", "dim", "=", "0", ")", ":", "\n", "    ", "r\"\"\"\n    Slices tensors into approximately equal chunks and\n    distributes them across given GPUs. Duplicates\n    references to objects that are not tensors.\n    \"\"\"", "\n", "def", "scatter_map", "(", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "return", "Scatter", ".", "apply", "(", "target_gpus", ",", "chunk_sizes", ",", "dim", ",", "obj", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'obj'", ",", "obj", ".", "size", "(", ")", ")", "\n", "print", "(", "'dim'", ",", "dim", ")", "\n", "print", "(", "'chunk_sizes'", ",", "chunk_sizes", ")", "\n", "quit", "(", ")", "\n", "", "", "if", "isinstance", "(", "obj", ",", "tuple", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "return", "list", "(", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "list", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "return", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "return", "list", "(", "map", "(", "type", "(", "obj", ")", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ".", "items", "(", ")", ")", ")", ")", ")", "\n", "", "return", "[", "obj", "for", "targets", "in", "target_gpus", "]", "\n", "\n", "# After scatter_map is called, a scatter_map cell will exist. This cell", "\n", "# has a reference to the actual function scatter_map, which has references", "\n", "# to a closure that has a reference to the scatter_map cell (because the", "\n", "# fn is recursive). To avoid this reference cycle, we set the function to", "\n", "# None, clearing the cell", "\n", "", "try", ":", "\n", "        ", "return", "scatter_map", "(", "inputs", ")", "\n", "", "finally", ":", "\n", "        ", "scatter_map", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.data_parallel.scatter_kwargs": [[39, 50], ["tuple", "tuple", "data_parallel.scatter", "data_parallel.scatter", "len", "len", "tuple.extend", "len", "len", "tuple.extend", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.data_parallel.scatter", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.data_parallel.scatter"], ["", "", "def", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "target_gpus", ",", "chunk_sizes", ",", "dim", "=", "0", ")", ":", "\n", "    ", "r\"\"\"Scatter with support for kwargs dictionary\"\"\"", "\n", "inputs", "=", "scatter", "(", "inputs", ",", "target_gpus", ",", "chunk_sizes", ",", "dim", ")", "if", "inputs", "else", "[", "]", "\n", "kwargs", "=", "scatter", "(", "kwargs", ",", "target_gpus", ",", "chunk_sizes", ",", "dim", ")", "if", "kwargs", "else", "[", "]", "\n", "if", "len", "(", "inputs", ")", "<", "len", "(", "kwargs", ")", ":", "\n", "        ", "inputs", ".", "extend", "(", "[", "(", ")", "for", "_", "in", "range", "(", "len", "(", "kwargs", ")", "-", "len", "(", "inputs", ")", ")", "]", ")", "\n", "", "elif", "len", "(", "kwargs", ")", "<", "len", "(", "inputs", ")", ":", "\n", "        ", "kwargs", ".", "extend", "(", "[", "{", "}", "for", "_", "in", "range", "(", "len", "(", "inputs", ")", "-", "len", "(", "kwargs", ")", ")", "]", ")", "\n", "", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "kwargs", "=", "tuple", "(", "kwargs", ")", "\n", "return", "inputs", ",", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.ConfigEncoder.default": [[8, 20], ["isinstance", "json.JSONEncoder.default", "isinstance", "callable"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.ConfigEncoder.default"], ["    ", "def", "default", "(", "self", ",", "o", ")", ":", "\n", "        ", "if", "isinstance", "(", "o", ",", "type", ")", ":", "\n", "            ", "return", "{", "'$class'", ":", "o", ".", "__module__", "+", "\".\"", "+", "o", ".", "__name__", "}", "\n", "", "elif", "isinstance", "(", "o", ",", "Enum", ")", ":", "\n", "            ", "return", "{", "\n", "'$enum'", ":", "o", ".", "__module__", "+", "\".\"", "+", "o", ".", "__class__", ".", "__name__", "+", "'.'", "+", "o", ".", "name", "\n", "}", "\n", "", "elif", "callable", "(", "o", ")", ":", "\n", "            ", "return", "{", "\n", "'$function'", ":", "o", ".", "__module__", "+", "\".\"", "+", "o", ".", "__name__", "\n", "}", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.__init__": [[22, 31], ["os.join", "tensorboardX.SummaryWriter", "logger.Logger.log_config", "collections.defaultdict", "vars", "os.join"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.log_config"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "log_dir", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger_path", "=", "osp", ".", "join", "(", "log_dir", ",", "'scalars.json'", ")", "\n", "self", ".", "tb_logger", "=", "SummaryWriter", "(", "\n", "logdir", "=", "osp", ".", "join", "(", "log_dir", ",", "'tflogger'", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "self", ".", "log_config", "(", "vars", "(", "args", ")", ")", "\n", "\n", "self", ".", "scalars", "=", "defaultdict", "(", "OrderedDict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.add_scalar": [[32, 36], ["logger.Logger.tb_logger.add_scalar", "logger.Logger.scalars[].get"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.add_scalar"], ["", "def", "add_scalar", "(", "self", ",", "key", ",", "value", ",", "counter", ")", ":", "\n", "        ", "assert", "self", ".", "scalars", "[", "key", "]", ".", "get", "(", "counter", ",", "None", ")", "is", "None", ",", "'counter should be distinct'", "\n", "self", ".", "scalars", "[", "key", "]", "[", "counter", "]", "=", "value", "\n", "self", ".", "tb_logger", ".", "add_scalar", "(", "key", ",", "value", ",", "counter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.log_config": [[37, 41], ["os.join", "os.dirname", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.dump"], ["", "def", "log_config", "(", "self", ",", "variant_data", ")", ":", "\n", "        ", "config_filepath", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "self", ".", "logger_path", ")", ",", "'configs.json'", ")", "\n", "with", "open", "(", "config_filepath", ",", "\"w\"", ")", "as", "fd", ":", "\n", "            ", "json", ".", "dump", "(", "variant_data", ",", "fd", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ",", "cls", "=", "ConfigEncoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.dump": [[42, 45], ["open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.dump"], ["", "", "def", "dump", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "logger_path", ",", "'w'", ")", "as", "fd", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "scalars", ",", "fd", ",", "indent", "=", "2", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.__init__": [[55, 58], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "n", "=", "0", "\n", "self", ".", "v", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.add": [[59, 62], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "v", "=", "(", "self", ".", "v", "*", "self", ".", "n", "+", "x", ")", "/", "(", "self", ".", "n", "+", "1", ")", "\n", "self", ".", "n", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item": [[63, 65], ["None"], "methods", ["None"], ["", "def", "item", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Timer.__init__": [[84, 86], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "o", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Timer.measure": [[87, 95], ["int", "time.time", "round"], "methods", ["None"], ["", "def", "measure", "(", "self", ",", "p", "=", "1", ")", ":", "\n", "        ", "x", "=", "(", "time", ".", "time", "(", ")", "-", "self", ".", "o", ")", "/", "p", "\n", "x", "=", "int", "(", "x", ")", "\n", "if", "x", ">=", "3600", ":", "\n", "            ", "return", "'{:.1f}h'", ".", "format", "(", "x", "/", "3600", ")", "\n", "", "if", "x", ">=", "60", ":", "\n", "            ", "return", "'{}m'", ".", "format", "(", "round", "(", "x", "/", "60", ")", ")", "\n", "", "return", "'{}s'", ".", "format", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.one_hot": [[9, 27], ["torch.zeros", "indices.view", "encoded_indicies.cuda.scatter_", "encoded_indicies.cuda.cuda", "indices.size", "torch.Size", "indices.size", "torch.Size"], "function", ["None"], ["def", "one_hot", "(", "indices", ",", "depth", ")", ":", "\n", "    ", "\"\"\"\n    Returns a one-hot tensor.\n    This is a PyTorch equivalent of Tensorflow's tf.one_hot.\n\n    Parameters:\n      indices:  a (n_batch, m) Tensor or (m) Tensor.\n      depth: a scalar. Represents the depth of the one hot dimension.\n    Returns: a (n_batch, m, depth) Tensor or (m, depth) Tensor.\n    \"\"\"", "\n", "\n", "encoded_indicies", "=", "torch", ".", "zeros", "(", "indices", ".", "size", "(", ")", "+", "torch", ".", "Size", "(", "[", "depth", "]", ")", ")", "\n", "if", "indices", ".", "is_cuda", ":", "\n", "        ", "encoded_indicies", "=", "encoded_indicies", ".", "cuda", "(", ")", "\n", "", "index", "=", "indices", ".", "view", "(", "indices", ".", "size", "(", ")", "+", "torch", ".", "Size", "(", "[", "1", "]", ")", ")", "\n", "encoded_indicies", "=", "encoded_indicies", ".", "scatter_", "(", "1", ",", "index", ",", "1", ")", "\n", "\n", "return", "encoded_indicies", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.set_gpu": [[28, 31], ["print"], "function", ["None"], ["", "def", "set_gpu", "(", "x", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "x", "\n", "print", "(", "'using gpu:'", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.ensure_path": [[32, 52], ["os.path.exists", "print", "os.mkdir", "os.path.join", "input", "shutil.rmtree", "os.mkdir", "os.path.exists", "os.makedirs", "os.path.join", "print", "os.path.isdir", "os.path.basename", "shutil.copytree", "shutil.copyfile"], "function", ["None"], ["", "def", "ensure_path", "(", "dir_path", ",", "scripts_to_save", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "dir_path", ")", ":", "\n", "        ", "if", "input", "(", "'{} exists, remove? ([y]/n)'", ".", "format", "(", "dir_path", ")", ")", "!=", "'n'", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "dir_path", ")", "\n", "os", ".", "mkdir", "(", "dir_path", ")", "\n", "", "", "else", ":", "\n", "        ", "os", ".", "mkdir", "(", "dir_path", ")", "\n", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "dir_path", ")", ")", "\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "        ", "script_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'scripts'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "script_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "script_path", ")", "\n", "", "for", "src_file", "in", "scripts_to_save", ":", "\n", "            ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "src_file", ")", ")", "\n", "print", "(", "'copy {} to {}'", ".", "format", "(", "src_file", ",", "dst_file", ")", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "src_file", ")", ":", "\n", "                ", "shutil", ".", "copytree", "(", "src_file", ",", "dst_file", ")", "\n", "", "else", ":", "\n", "                ", "shutil", ".", "copyfile", "(", "src_file", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.count_acc": [[67, 73], ["torch.argmax", "torch.cuda.is_available"], "function", ["None"], ["", "", "def", "count_acc", "(", "logits", ",", "label", ")", ":", "\n", "    ", "pred", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "(", "pred", "==", "label", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "pred", "==", "label", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.euclidean_metric": [[74, 81], ["a.unsqueeze().expand.unsqueeze().expand", "b.unsqueeze().expand.unsqueeze().expand", "a.unsqueeze().expand.unsqueeze", "b.unsqueeze().expand.unsqueeze"], "function", ["None"], ["", "", "def", "euclidean_metric", "(", "a", ",", "b", ")", ":", "\n", "    ", "n", "=", "a", ".", "shape", "[", "0", "]", "\n", "m", "=", "b", ".", "shape", "[", "0", "]", "\n", "a", "=", "a", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n", ",", "m", ",", "-", "1", ")", "\n", "b", "=", "b", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n", ",", "m", ",", "-", "1", ")", "\n", "logits", "=", "-", "(", "(", "a", "-", "b", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.pprint": [[97, 99], ["_utils_pp.pprint"], "function", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.pprint"], ["def", "pprint", "(", "x", ")", ":", "\n", "    ", "_utils_pp", ".", "pprint", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.compute_confidence_interval": [[100, 111], ["numpy.mean", "numpy.std", "numpy.array", "numpy.sqrt", "len"], "function", ["None"], ["", "def", "compute_confidence_interval", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Compute 95% confidence interval\n    :param data: An array of mean accuracy (or mAP) across a number of sampled episodes.\n    :return: the 95% confidence interval for this data.\n    \"\"\"", "\n", "a", "=", "1.0", "*", "np", ".", "array", "(", "data", ")", "\n", "m", "=", "np", ".", "mean", "(", "a", ")", "\n", "std", "=", "np", ".", "std", "(", "a", ")", "\n", "pm", "=", "1.96", "*", "(", "std", "/", "np", ".", "sqrt", "(", "len", "(", "a", ")", ")", ")", "\n", "return", "m", ",", "pm", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.postprocess_args": [[112, 139], ["os.path.join", "os.path.exists", "os.mkdir", "str", "str", "str", "os.path.join", "os.path.join", "args.step_size.split", "max"], "function", ["None"], ["", "def", "postprocess_args", "(", "args", ")", ":", "\n", "    ", "args", ".", "num_classes", "=", "args", ".", "way", "\n", "save_path1", "=", "'-'", ".", "join", "(", "[", "args", ".", "dataset", ",", "args", ".", "model_class", ",", "args", ".", "backbone_class", ",", "'{:02d}w{:02d}s{:02}q'", ".", "format", "(", "args", ".", "way", ",", "args", ".", "shot", ",", "args", ".", "query", ")", "]", ")", "\n", "save_path2", "=", "'_'", ".", "join", "(", "[", "str", "(", "'_'", ".", "join", "(", "args", ".", "step_size", ".", "split", "(", "','", ")", ")", ")", ",", "str", "(", "args", ".", "gamma", ")", ",", "\n", "'lr{:.2g}mul{:.2g}'", ".", "format", "(", "args", ".", "lr", ",", "args", ".", "lr_mul", ")", ",", "\n", "str", "(", "args", ".", "lr_scheduler", ")", ",", "\n", "'T1{}T2{}'", ".", "format", "(", "args", ".", "temperature", ",", "args", ".", "temperature2", ")", ",", "\n", "'b{}'", ".", "format", "(", "args", ".", "balance", ")", ",", "\n", "'bsz{:03d}'", ".", "format", "(", "max", "(", "args", ".", "way", ",", "args", ".", "num_classes", ")", "*", "(", "args", ".", "shot", "+", "args", ".", "query", ")", ")", ",", "\n", "# str(time.strftime('%Y%m%d_%H%M%S'))", "\n", "]", ")", "\n", "if", "args", ".", "init_weights", "is", "not", "None", ":", "\n", "        ", "save_path1", "+=", "'-Pre'", "\n", "", "if", "args", ".", "use_euclidean", ":", "\n", "        ", "save_path1", "+=", "'-DIS'", "\n", "", "else", ":", "\n", "        ", "save_path1", "+=", "'-SIM'", "\n", "\n", "", "if", "args", ".", "fix_BN", ":", "\n", "        ", "save_path2", "+=", "'-FBN'", "\n", "", "if", "not", "args", ".", "augment", ":", "\n", "        ", "save_path2", "+=", "'-NoAug'", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "save_path1", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "save_path1", ")", ")", "\n", "", "args", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "save_path1", ",", "save_path2", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.get_command_line_parser": [[140, 185], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "get_command_line_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epoch'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--episodes_per_epoch'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--num_eval_episodes'", ",", "type", "=", "int", ",", "default", "=", "600", ")", "\n", "parser", ".", "add_argument", "(", "'--model_class'", ",", "type", "=", "str", ",", "default", "=", "'FEAT'", ",", "\n", "choices", "=", "[", "'MatchNet'", ",", "'ProtoNet'", ",", "'BILSTM'", ",", "'DeepSet'", ",", "'GCN'", ",", "'FEAT'", ",", "'FEATSTAR'", ",", "'SemiFEAT'", ",", "'SemiProtoFEAT'", "]", ")", "# None for MatchNet or ProtoNet", "\n", "parser", ".", "add_argument", "(", "'--use_euclidean'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone_class'", ",", "type", "=", "str", ",", "default", "=", "'ConvNet'", ",", "\n", "choices", "=", "[", "'ConvNet'", ",", "'Res12'", ",", "'Res18'", ",", "'WRN'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'MiniImageNet'", ",", "\n", "choices", "=", "[", "'MiniImageNet'", ",", "'TieredImageNet'", ",", "'CUB'", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--way'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_way'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--shot'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_shot'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--query'", ",", "type", "=", "int", ",", "default", "=", "15", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_query'", ",", "type", "=", "int", ",", "default", "=", "15", ")", "\n", "parser", ".", "add_argument", "(", "'--balance'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--temperature2'", ",", "type", "=", "float", ",", "default", "=", "1", ")", "# the temperature in the  ", "\n", "\n", "# optimization parameters", "\n", "parser", ".", "add_argument", "(", "'--orig_imsize'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "# -1 for no cache, and -2 for no resize, only for MiniImageNet and CUB", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_mul'", ",", "type", "=", "float", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_scheduler'", ",", "type", "=", "str", ",", "default", "=", "'step'", ",", "choices", "=", "[", "'multistep'", ",", "'step'", ",", "'cosine'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--step_size'", ",", "type", "=", "str", ",", "default", "=", "'20'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "parser", ".", "add_argument", "(", "'--fix_BN'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "# means we do not update the running mean/var in BN, not to freeze BN", "\n", "parser", ".", "add_argument", "(", "'--augment'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--multi_gpu'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "'0'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_weights'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "# usually untouched parameters", "\n", "parser", ".", "add_argument", "(", "'--mom'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.0005", ")", "# we find this weight decay value works the best", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_interval'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ")", "\n", "\n", "return", "parser", "\n", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.samplers.CategoriesSampler.__init__": [[7, 18], ["numpy.array", "range", "numpy.argwhere().reshape", "torch.from_numpy", "samplers.CategoriesSampler.m_ind.append", "max", "numpy.argwhere"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "label", ",", "n_batch", ",", "n_cls", ",", "n_per", ")", ":", "\n", "        ", "self", ".", "n_batch", "=", "n_batch", "\n", "self", ".", "n_cls", "=", "n_cls", "\n", "self", ".", "n_per", "=", "n_per", "\n", "\n", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "self", ".", "m_ind", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "max", "(", "label", ")", "+", "1", ")", ":", "\n", "            ", "ind", "=", "np", ".", "argwhere", "(", "label", "==", "i", ")", ".", "reshape", "(", "-", "1", ")", "\n", "ind", "=", "torch", ".", "from_numpy", "(", "ind", ")", "\n", "self", ".", "m_ind", ".", "append", "(", "ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.samplers.CategoriesSampler.__len__": [[19, 21], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.samplers.CategoriesSampler.__iter__": [[22, 32], ["range", "torch.stack().t().reshape", "torch.randperm", "torch.stack().t().reshape.append", "len", "torch.randperm", "torch.stack().t", "len", "torch.stack"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i_batch", "in", "range", "(", "self", ".", "n_batch", ")", ":", "\n", "            ", "batch", "=", "[", "]", "\n", "classes", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "m_ind", ")", ")", "[", ":", "self", ".", "n_cls", "]", "\n", "for", "c", "in", "classes", ":", "\n", "                ", "l", "=", "self", ".", "m_ind", "[", "c", "]", "\n", "pos", "=", "torch", ".", "randperm", "(", "len", "(", "l", ")", ")", "[", ":", "self", ".", "n_per", "]", "\n", "batch", ".", "append", "(", "l", "[", "pos", "]", ")", "\n", "", "batch", "=", "torch", ".", "stack", "(", "batch", ")", ".", "t", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.samplers.RandomSampler.__init__": [[36, 41], ["numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "label", ",", "n_batch", ",", "n_per", ")", ":", "\n", "        ", "self", ".", "n_batch", "=", "n_batch", "\n", "self", ".", "n_per", "=", "n_per", "\n", "self", ".", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "self", ".", "num_label", "=", "self", ".", "label", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.samplers.RandomSampler.__len__": [[42, 44], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.samplers.RandomSampler.__iter__": [[45, 49], ["range", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i_batch", "in", "range", "(", "self", ".", "n_batch", ")", ":", "\n", "            ", "batch", "=", "torch", ".", "randperm", "(", "self", ".", "num_label", ")", "[", ":", "self", ".", "n_per", "]", "\n", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.samplers.ClassSampler.__init__": [[54, 62], ["numpy.array", "range", "numpy.argwhere().reshape", "torch.from_numpy", "samplers.ClassSampler.m_ind.append", "max", "numpy.argwhere"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "label", ",", "n_per", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_per", "=", "n_per", "\n", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "self", ".", "m_ind", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "max", "(", "label", ")", "+", "1", ")", ":", "\n", "            ", "ind", "=", "np", ".", "argwhere", "(", "label", "==", "i", ")", ".", "reshape", "(", "-", "1", ")", "\n", "ind", "=", "torch", ".", "from_numpy", "(", "ind", ")", "\n", "self", ".", "m_ind", ".", "append", "(", "ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.samplers.ClassSampler.__len__": [[63, 65], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "m_ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.samplers.ClassSampler.__iter__": [[66, 75], ["torch.arange", "len", "torch.randperm", "int", "len", "torch.randperm", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "classes", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "m_ind", ")", ")", "\n", "for", "c", "in", "classes", ":", "\n", "            ", "l", "=", "self", ".", "m_ind", "[", "int", "(", "c", ")", "]", "\n", "if", "self", ".", "n_per", "is", "None", ":", "\n", "                ", "pos", "=", "torch", ".", "randperm", "(", "len", "(", "l", ")", ")", "\n", "", "else", ":", "\n", "                ", "pos", "=", "torch", ".", "randperm", "(", "len", "(", "l", ")", ")", "[", ":", "self", ".", "n_per", "]", "\n", "", "yield", "l", "[", "pos", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.samplers.InSetSampler.__init__": [[80, 85], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_batch", ",", "n_sbatch", ",", "pool", ")", ":", "# pool is a tensor", "\n", "        ", "self", ".", "n_batch", "=", "n_batch", "\n", "self", ".", "n_sbatch", "=", "n_sbatch", "\n", "self", ".", "pool", "=", "pool", "\n", "self", ".", "pool_size", "=", "pool", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.samplers.InSetSampler.__len__": [[86, 88], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.samplers.InSetSampler.__iter__": [[89, 93], ["range", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i_batch", "in", "range", "(", "self", ".", "n_batch", ")", ":", "\n", "            ", "batch", "=", "self", ".", "pool", "[", "torch", ".", "randperm", "(", "self", ".", "pool_size", ")", "[", ":", "self", ".", "n_sbatch", "]", "]", "\n", "yield", "batch", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.tiered_imagenet.tieredImageNet.__init__": [[47, 112], ["tiered_imagenet.load_data", "len", "numpy.load", "label.append", "set", "torchvision.Compose", "tiered_imagenet.tieredImageNet.wnids.append", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Compose", "torchvision.Compose", "torchvision.Normalize", "torchvision.Compose", "numpy.array", "numpy.array", "torchvision.Normalize", "torchvision.Compose", "ValueError", "numpy.array", "numpy.array", "torchvision.Normalize", "numpy.array", "numpy.array", "torchvision.Normalize", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.tiered_imagenet.load_data"], ["    ", "def", "__init__", "(", "self", ",", "setname", ",", "args", ",", "augment", "=", "False", ")", ":", "\n", "        ", "assert", "(", "setname", "==", "'train'", "or", "setname", "==", "'val'", "or", "setname", "==", "'test'", ")", "\n", "image_path", "=", "file_path", "[", "setname", "]", "[", "0", "]", "\n", "label_path", "=", "file_path", "[", "setname", "]", "[", "1", "]", "\n", "\n", "data_train", "=", "load_data", "(", "label_path", ")", "\n", "labels", "=", "data_train", "[", "'labels'", "]", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "image_path", ")", "[", "'images'", "]", "\n", "label", "=", "[", "]", "\n", "lb", "=", "-", "1", "\n", "self", ".", "wnids", "=", "[", "]", "\n", "for", "wnid", "in", "labels", ":", "\n", "            ", "if", "wnid", "not", "in", "self", ".", "wnids", ":", "\n", "                ", "self", ".", "wnids", ".", "append", "(", "wnid", ")", "\n", "lb", "+=", "1", "\n", "", "label", ".", "append", "(", "lb", ")", "\n", "\n", "", "self", ".", "label", "=", "label", "\n", "self", ".", "num_class", "=", "len", "(", "set", "(", "label", ")", ")", "\n", "\n", "if", "augment", "and", "setname", "==", "'train'", ":", "\n", "            ", "transforms_list", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "transforms_list", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", "\n", "# Transformation", "\n", "", "if", "args", ".", "backbone_class", "==", "'ConvNet'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "transforms_list", "+", "[", "\n", "transforms", ".", "Normalize", "(", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "]", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'ResNet'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "transforms_list", "+", "[", "\n", "transforms", ".", "Normalize", "(", "np", ".", "array", "(", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", ")", "\n", "]", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res12'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "transforms_list", "+", "[", "\n", "transforms", ".", "Normalize", "(", "np", ".", "array", "(", "[", "x", "/", "255.0", "for", "x", "in", "[", "120.39586422", ",", "115.59361427", ",", "104.54012653", "]", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "x", "/", "255.0", "for", "x", "in", "[", "70.68188272", ",", "68.27635443", ",", "72.54505529", "]", "]", ")", ")", "\n", "]", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res18'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "transforms_list", "+", "[", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'WRN'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "transforms_list", "+", "[", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Non-supported Network Types. Please Revise Data Pre-Processing Scripts.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.tiered_imagenet.tieredImageNet.__getitem__": [[114, 118], ["tiered_imagenet.tieredImageNet.transform", "PIL.Image.fromarray"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "label", "[", "index", "]", "\n", "img", "=", "self", ".", "transform", "(", "Image", ".", "fromarray", "(", "img", ")", ")", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.tiered_imagenet.tieredImageNet.__len__": [[119, 121], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.tiered_imagenet.buildLabelIndex": [[20, 28], ["enumerate", "label2inds[].append"], "function", ["None"], ["def", "buildLabelIndex", "(", "labels", ")", ":", "\n", "    ", "label2inds", "=", "{", "}", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "if", "label", "not", "in", "label2inds", ":", "\n", "            ", "label2inds", "[", "label", "]", "=", "[", "]", "\n", "", "label2inds", "[", "label", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "return", "label2inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.tiered_imagenet.load_data": [[30, 41], ["open", "pickle.load", "open", "pickle._Unpickler", "pickle._Unpickler.load"], "function", ["None"], ["", "def", "load_data", "(", "file", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "return", "data", "\n", "", "except", ":", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "u", "=", "pickle", ".", "_Unpickler", "(", "f", ")", "\n", "u", ".", "encoding", "=", "'latin1'", "\n", "data", "=", "u", ".", "load", "(", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.cub.CUB.__init__": [[22, 90], ["os.join", "os.join", "cub.CUB.parse_csv", "torchvision.transforms.Compose", "x.strip", "os.exists", "print", "cub.CUB.parse_csv", "print", "torch.save", "print", "torch.load", "numpy.unique", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "open().readlines", "torchvision.transforms.Resize", "resize_", "numpy.array", "torchvision.transforms.Compose", "PIL.Image.open().convert", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "ValueError", "open", "numpy.array", "numpy.array", "torchvision.transforms.Normalize", "PIL.Image.open", "numpy.array", "numpy.array", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.mini_imagenet.MiniImageNet.parse_csv", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.mini_imagenet.MiniImageNet.parse_csv"], ["    ", "def", "__init__", "(", "self", ",", "setname", ",", "args", ",", "augment", "=", "False", ")", ":", "\n", "        ", "im_size", "=", "args", ".", "orig_imsize", "\n", "txt_path", "=", "osp", ".", "join", "(", "SPLIT_PATH", ",", "setname", "+", "'.csv'", ")", "\n", "lines", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "txt_path", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "[", "1", ":", "]", "\n", "cache_path", "=", "osp", ".", "join", "(", "CACHE_PATH", ",", "\"{}.{}.{}.pt\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "setname", ",", "im_size", ")", ")", "\n", "\n", "self", ".", "use_im_cache", "=", "(", "im_size", "!=", "-", "1", ")", "# not using cache", "\n", "if", "self", ".", "use_im_cache", ":", "\n", "            ", "if", "not", "osp", ".", "exists", "(", "cache_path", ")", ":", "\n", "                ", "print", "(", "'* Cache miss... Preprocessing {}...'", ".", "format", "(", "setname", ")", ")", "\n", "resize_", "=", "identity", "if", "im_size", "<", "0", "else", "transforms", ".", "Resize", "(", "im_size", ")", "\n", "data", ",", "label", "=", "self", ".", "parse_csv", "(", "txt_path", ")", "\n", "self", ".", "data", "=", "[", "resize_", "(", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", ")", "for", "path", "in", "data", "]", "\n", "self", ".", "label", "=", "label", "\n", "print", "(", "'* Dump cache from {}'", ".", "format", "(", "cache_path", ")", ")", "\n", "torch", ".", "save", "(", "{", "'data'", ":", "self", ".", "data", ",", "'label'", ":", "self", ".", "label", "}", ",", "cache_path", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'* Load cache from {}'", ".", "format", "(", "cache_path", ")", ")", "\n", "cache", "=", "torch", ".", "load", "(", "cache_path", ")", "\n", "self", ".", "data", "=", "cache", "[", "'data'", "]", "\n", "self", ".", "label", "=", "cache", "[", "'label'", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "label", "=", "self", ".", "parse_csv", "(", "txt_path", ")", "\n", "\n", "", "self", ".", "num_class", "=", "np", ".", "unique", "(", "np", ".", "array", "(", "self", ".", "label", ")", ")", ".", "shape", "[", "0", "]", "\n", "image_size", "=", "84", "\n", "\n", "if", "augment", "and", "setname", "==", "'train'", ":", "\n", "            ", "transforms_list", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "image_size", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "transforms_list", "=", "[", "\n", "transforms", ".", "Resize", "(", "92", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", "\n", "# Transformation", "\n", "", "if", "args", ".", "backbone_class", "==", "'ConvNet'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "transforms_list", "+", "[", "\n", "transforms", ".", "Normalize", "(", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "]", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res12'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "transforms_list", "+", "[", "\n", "transforms", ".", "Normalize", "(", "np", ".", "array", "(", "[", "x", "/", "255.0", "for", "x", "in", "[", "120.39586422", ",", "115.59361427", ",", "104.54012653", "]", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "x", "/", "255.0", "for", "x", "in", "[", "70.68188272", ",", "68.27635443", ",", "72.54505529", "]", "]", ")", ")", "\n", "]", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res18'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "transforms_list", "+", "[", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'WRN'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "transforms_list", "+", "[", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Non-supported Network Types. Please Revise Data Pre-Processing Scripts.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.cub.CUB.parse_csv": [[91, 111], ["l.split", "os.join", "data.append", "label.append", "x.strip", "cub.CUB.wnids.append", "open().readlines", "open"], "methods", ["None"], ["", "", "def", "parse_csv", "(", "self", ",", "txt_path", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "lb", "=", "-", "1", "\n", "self", ".", "wnids", "=", "[", "]", "\n", "lines", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "txt_path", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "[", "1", ":", "]", "\n", "\n", "for", "l", "in", "lines", ":", "\n", "            ", "context", "=", "l", ".", "split", "(", "','", ")", "\n", "name", "=", "context", "[", "0", "]", "\n", "wnid", "=", "context", "[", "1", "]", "\n", "path", "=", "osp", ".", "join", "(", "IMAGE_PATH", ",", "name", ")", "\n", "if", "wnid", "not", "in", "self", ".", "wnids", ":", "\n", "                ", "self", ".", "wnids", ".", "append", "(", "wnid", ")", "\n", "lb", "+=", "1", "\n", "\n", "", "data", ".", "append", "(", "path", ")", "\n", "label", ".", "append", "(", "lb", ")", "\n", "\n", "", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.cub.CUB.__len__": [[113, 115], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.cub.CUB.__getitem__": [[116, 123], ["cub.CUB.transform", "cub.CUB.transform", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "data", ",", "label", "=", "self", ".", "data", "[", "i", "]", ",", "self", ".", "label", "[", "i", "]", "\n", "if", "self", ".", "use_im_cache", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "data", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.mini_imagenet.MiniImageNet.__init__": [[23, 90], ["os.join", "os.join", "len", "mini_imagenet.MiniImageNet.parse_csv", "set", "torchvision.transforms.Compose", "os.exists", "print", "mini_imagenet.MiniImageNet.parse_csv", "print", "torch.save", "print", "torch.load", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "resize_", "torchvision.transforms.Compose", "PIL.Image.open().convert", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "ValueError", "numpy.array", "numpy.array", "torchvision.transforms.Normalize", "PIL.Image.open", "numpy.array", "numpy.array", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.mini_imagenet.MiniImageNet.parse_csv", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.mini_imagenet.MiniImageNet.parse_csv"], ["def", "__init__", "(", "self", ",", "setname", ",", "args", ",", "augment", "=", "False", ")", ":", "\n", "        ", "im_size", "=", "args", ".", "orig_imsize", "\n", "csv_path", "=", "osp", ".", "join", "(", "SPLIT_PATH", ",", "setname", "+", "'.csv'", ")", "\n", "cache_path", "=", "osp", ".", "join", "(", "CACHE_PATH", ",", "\"{}.{}.{}.pt\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "setname", ",", "im_size", ")", ")", "\n", "\n", "self", ".", "use_im_cache", "=", "(", "im_size", "!=", "-", "1", ")", "# not using cache", "\n", "if", "self", ".", "use_im_cache", ":", "\n", "            ", "if", "not", "osp", ".", "exists", "(", "cache_path", ")", ":", "\n", "                ", "print", "(", "'* Cache miss... Preprocessing {}...'", ".", "format", "(", "setname", ")", ")", "\n", "resize_", "=", "identity", "if", "im_size", "<", "0", "else", "transforms", ".", "Resize", "(", "im_size", ")", "\n", "data", ",", "label", "=", "self", ".", "parse_csv", "(", "csv_path", ",", "setname", ")", "\n", "self", ".", "data", "=", "[", "resize_", "(", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", ")", "for", "path", "in", "data", "]", "\n", "self", ".", "label", "=", "label", "\n", "print", "(", "'* Dump cache from {}'", ".", "format", "(", "cache_path", ")", ")", "\n", "torch", ".", "save", "(", "{", "'data'", ":", "self", ".", "data", ",", "'label'", ":", "self", ".", "label", "}", ",", "cache_path", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'* Load cache from {}'", ".", "format", "(", "cache_path", ")", ")", "\n", "cache", "=", "torch", ".", "load", "(", "cache_path", ")", "\n", "self", ".", "data", "=", "cache", "[", "'data'", "]", "\n", "self", ".", "label", "=", "cache", "[", "'label'", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "label", "=", "self", ".", "parse_csv", "(", "csv_path", ",", "setname", ")", "\n", "\n", "", "self", ".", "num_class", "=", "len", "(", "set", "(", "self", ".", "label", ")", ")", "\n", "\n", "image_size", "=", "84", "\n", "if", "augment", "and", "setname", "==", "'train'", ":", "\n", "            ", "transforms_list", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "image_size", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "transforms_list", "=", "[", "\n", "transforms", ".", "Resize", "(", "92", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", "\n", "# Transformation", "\n", "", "if", "args", ".", "backbone_class", "==", "'ConvNet'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "transforms_list", "+", "[", "\n", "transforms", ".", "Normalize", "(", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "]", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res12'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "transforms_list", "+", "[", "\n", "transforms", ".", "Normalize", "(", "np", ".", "array", "(", "[", "x", "/", "255.0", "for", "x", "in", "[", "120.39586422", ",", "115.59361427", ",", "104.54012653", "]", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "x", "/", "255.0", "for", "x", "in", "[", "70.68188272", ",", "68.27635443", ",", "72.54505529", "]", "]", ")", ")", "\n", "]", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res18'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "transforms_list", "+", "[", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'WRN'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "transforms_list", "+", "[", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Non-supported Network Types. Please Revise Data Pre-Processing Scripts.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.mini_imagenet.MiniImageNet.parse_csv": [[91, 110], ["tqdm.tqdm.tqdm", "l.split", "os.join", "data.append", "label.append", "x.strip", "mini_imagenet.MiniImageNet.wnids.append", "open().readlines", "open"], "methods", ["None"], ["", "", "def", "parse_csv", "(", "self", ",", "csv_path", ",", "setname", ")", ":", "\n", "        ", "lines", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "csv_path", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "[", "1", ":", "]", "\n", "\n", "data", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "lb", "=", "-", "1", "\n", "\n", "self", ".", "wnids", "=", "[", "]", "\n", "\n", "for", "l", "in", "tqdm", "(", "lines", ",", "ncols", "=", "64", ")", ":", "\n", "            ", "name", ",", "wnid", "=", "l", ".", "split", "(", "','", ")", "\n", "path", "=", "osp", ".", "join", "(", "IMAGE_PATH1", ",", "name", ")", "\n", "if", "wnid", "not", "in", "self", ".", "wnids", ":", "\n", "                ", "self", ".", "wnids", ".", "append", "(", "wnid", ")", "\n", "lb", "+=", "1", "\n", "", "data", ".", "append", "(", "path", ")", "\n", "label", ".", "append", "(", "lb", ")", "\n", "\n", "", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.mini_imagenet.MiniImageNet.__len__": [[111, 113], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.mini_imagenet.MiniImageNet.__getitem__": [[114, 122], ["mini_imagenet.MiniImageNet.transform", "mini_imagenet.MiniImageNet.transform", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "data", ",", "label", "=", "self", ".", "data", "[", "i", "]", ",", "self", ".", "label", "[", "i", "]", "\n", "if", "self", ".", "use_im_cache", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "data", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.dataloader.mini_imagenet.identity": [[17, 19], ["None"], "function", ["None"], ["def", "identity", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.GraphConvolution.__init__": [[19, 29], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "graphnet.GraphConvolution.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "graphnet.GraphConvolution.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.GraphConvolution.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.GraphConvolution.reset_parameters": [[30, 35], ["graphnet.GraphConvolution.weight.data.uniform_", "math.sqrt", "graphnet.GraphConvolution.bias.data.uniform_", "graphnet.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.GraphConvolution.forward": [[36, 43], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "support", "=", "torch", ".", "mm", "(", "input", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "spmm", "(", "adj", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.GraphConvolution.__repr__": [[44, 48], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.GraphFunc.__init__": [[73, 81], ["torch.Module.__init__", "graphnet.GraphConvolution", "graphnet.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ")", ":", "\n", "        ", "super", "(", "GraphFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        DeepSets Function\n        \"\"\"", "\n", "self", ".", "gc1", "=", "GraphConvolution", "(", "z_dim", ",", "z_dim", "*", "4", ")", "\n", "self", ".", "gc2", "=", "GraphConvolution", "(", "z_dim", "*", "4", ",", "z_dim", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.GraphFunc.forward": [[82, 122], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.unique", "graphnet.normalize", "graphnet.sparse_mx_to_torch_sparse_tensor", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "graphnet.GraphFunc.gc2", "set_output_list.append", "[].tolist", "len", "scipy.coo_matrix", "numpy.concatenate", "scipy.coo_matrix", "scipy.coo_matrix.multiply", "graphnet.GraphFunc.gc1", "len", "numpy.concatenate.append", "scipy.coo_matrix.T.multiply", "scipy.eye", "numpy.array", "numpy.array", "numpy.ones", "numpy.where", "list", "numpy.array", "numpy.array", "itertools.permutations"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.sparse_mx_to_torch_sparse_tensor"], ["", "def", "forward", "(", "self", ",", "graph_input_raw", ",", "graph_label", ")", ":", "\n", "        ", "\"\"\"\n        set_input, seq_length, set_size, dim\n        \"\"\"", "\n", "set_length", ",", "set_size", ",", "dim", "=", "graph_input_raw", ".", "shape", "\n", "assert", "(", "dim", "==", "self", ".", "z_dim", ")", "\n", "set_output_list", "=", "[", "]", "\n", "\n", "for", "g_index", "in", "range", "(", "set_length", ")", ":", "\n", "            ", "graph_input", "=", "graph_input_raw", "[", "g_index", ",", ":", "]", "\n", "# construct the adj matrix", "\n", "unique_class", "=", "np", ".", "unique", "(", "graph_label", ")", "\n", "edge_set", "=", "[", "]", "\n", "for", "c", "in", "unique_class", ":", "\n", "                ", "current_index", "=", "np", ".", "where", "(", "graph_label", "==", "c", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "if", "len", "(", "current_index", ")", ">", "1", ":", "\n", "                    ", "edge_set", ".", "append", "(", "np", ".", "array", "(", "list", "(", "permutations", "(", "current_index", ",", "2", ")", ")", ")", ")", "\n", "\n", "", "", "if", "len", "(", "edge_set", ")", "==", "0", ":", "\n", "                ", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "array", "(", "[", "0", "]", ")", ",", "(", "np", ".", "array", "(", "[", "0", "]", ")", ",", "np", ".", "array", "(", "[", "0", "]", ")", ")", ")", ",", "\n", "shape", "=", "(", "graph_label", ".", "shape", "[", "0", "]", ",", "graph_label", ".", "shape", "[", "0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "edge_set", "=", "np", ".", "concatenate", "(", "edge_set", ",", "0", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "edge_set", ".", "shape", "[", "0", "]", ")", ",", "(", "edge_set", "[", ":", ",", "0", "]", ",", "edge_set", "[", ":", ",", "1", "]", ")", ")", ",", "\n", "shape", "=", "(", "graph_label", ".", "shape", "[", "0", "]", ",", "graph_label", ".", "shape", "[", "0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "adj", "=", "normalize", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", "\n", "\n", "# do GCN process", "\n", "residual", "=", "graph_input", "\n", "graph_input", "=", "F", ".", "relu", "(", "self", ".", "gc1", "(", "graph_input", ",", "adj", ")", ")", "\n", "graph_input", "=", "F", ".", "dropout", "(", "graph_input", ",", "0.5", ",", "training", "=", "self", ".", "training", ")", "\n", "graph_input", "=", "self", ".", "gc2", "(", "graph_input", ",", "adj", ")", "\n", "set_output", "=", "residual", "+", "graph_input", "\n", "set_output_list", ".", "append", "(", "set_output", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "set_output_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.GCN.__init__": [[124, 138], ["model.models.FewShotModel.__init__", "graphnet.GraphFunc", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "if", "args", ".", "backbone_class", "==", "'ConvNet'", ":", "\n", "            ", "hdim", "=", "64", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res12'", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res18'", ":", "\n", "            ", "hdim", "=", "512", "\n", "", "elif", "args", ".", "backbone_class", "==", "'WRN'", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "''", ")", "\n", "\n", "", "self", ".", "graph_func", "=", "GraphFunc", "(", "hdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.GCN._forward": [[139, 177], ["instance_embs.size", "instance_embs[].contiguous().view", "instance_embs[].contiguous().view", "instance_embs[].contiguous().view.mean", "numpy.prod", "graphnet.GCN.graph_func", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "query.view.view.view().unsqueeze", "torch.normalize.unsqueeze().expand().contiguous", "torch.normalize.view", "torch.normalize", "torch.normalize", "torch.normalize", "query.view.view.view", "logits.view.view.view", "instance_embs[].contiguous", "instance_embs[].contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "query.view.view.view", "torch.normalize.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.normalize.permute", "torch.normalize.unsqueeze", "support_idx.contiguous().view", "query_idx.contiguous().view", "support_idx.contiguous", "query_idx.contiguous"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize"], ["", "def", "_forward", "(", "self", ",", "instance_embs", ",", "support_idx", ",", "query_idx", ")", ":", "\n", "        ", "emb_dim", "=", "instance_embs", ".", "size", "(", "-", "1", ")", "\n", "\n", "# organize support/query data", "\n", "support", "=", "instance_embs", "[", "support_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "*", "(", "support_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "query", "=", "instance_embs", "[", "query_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "*", "(", "query_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "\n", "# get mean of the support", "\n", "proto", "=", "support", ".", "mean", "(", "dim", "=", "1", ")", "# Ntask x NK x d", "\n", "num_batch", "=", "proto", ".", "shape", "[", "0", "]", "\n", "num_proto", "=", "proto", ".", "shape", "[", "1", "]", "\n", "num_query", "=", "np", ".", "prod", "(", "query_idx", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "\n", "# query: (num_batch, num_query, num_proto, num_emb)", "\n", "# proto: (num_batch, num_proto, num_emb)", "\n", "if", "self", ".", "training", ":", "\n", "            ", "graph_label", "=", "torch", ".", "arange", "(", "self", ".", "args", ".", "way", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "            ", "graph_label", "=", "torch", ".", "arange", "(", "self", ".", "args", ".", "eval_way", ")", ".", "long", "(", ")", "\n", "", "proto", "=", "self", ".", "graph_func", "(", "proto", ",", "graph_label", ")", "\n", "if", "self", ".", "args", ".", "use_euclidean", ":", "\n", "            ", "query", "=", "query", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", "# (Nbatch*Nq*Nw, 1, d)", "\n", "proto", "=", "proto", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_query", ",", "num_proto", ",", "emb_dim", ")", ".", "contiguous", "(", ")", "\n", "proto", "=", "proto", ".", "view", "(", "num_batch", "*", "num_query", ",", "num_proto", ",", "emb_dim", ")", "# (Nbatch x Nq, Nk, d)", "\n", "\n", "logits", "=", "-", "torch", ".", "sum", "(", "(", "proto", "-", "query", ")", "**", "2", ",", "2", ")", "/", "self", ".", "args", ".", "temperature", "\n", "", "else", ":", "\n", "            ", "proto", "=", "F", ".", "normalize", "(", "proto", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "query", "=", "query", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "# (Nbatch,  Nq*Nw, d)", "\n", "\n", "logits", "=", "torch", ".", "bmm", "(", "query", ",", "proto", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "/", "self", ".", "args", ".", "temperature", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_proto", ")", "\n", "\n", "# do not use contrastive regularization for GCN (since there are only one sinlge instances class in each auxiliary task)", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "return", "logits", ",", "None", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize": [[50, 58], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "", "def", "normalize", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.sparse_mx_to_torch_sparse_tensor": [[60, 71], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.Size", "torch.Size", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "numpy.vstack().astype", "torch.sparse.FloatTensor().cuda", "torch.sparse.FloatTensor().cuda", "torch.sparse.FloatTensor().cuda", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.deepset.DeepSetsFunc.__init__": [[9, 19], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ")", ":", "\n", "        ", "super", "(", "DeepSetsFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        DeepSets Function\n        \"\"\"", "\n", "self", ".", "gen1", "=", "nn", ".", "Linear", "(", "z_dim", ",", "z_dim", "*", "4", ")", "\n", "self", ".", "gen2", "=", "nn", ".", "Linear", "(", "z_dim", "*", "4", ",", "z_dim", ")", "\n", "self", ".", "gen3", "=", "nn", ".", "Linear", "(", "z_dim", "*", "2", ",", "z_dim", "*", "4", ")", "\n", "self", ".", "gen4", "=", "nn", ".", "Linear", "(", "z_dim", "*", "4", ",", "z_dim", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.deepset.DeepSetsFunc.forward": [[20, 43], ["mask_one.cuda.cuda.view", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.relu", "torch.relu", "torch.relu", "deepset.DeepSetsFunc.gen2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "deepset.DeepSetsFunc.gen4", "combined_mean_cat.view.view.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "mask_one.cuda.cuda.cuda", "torch.mul().max", "torch.mul().max", "torch.mul().max", "torch.mul().max", "torch.mul().max", "torch.mul().max", "torch.mul().max", "torch.mul().max", "torch.mul().max", "deepset.DeepSetsFunc.gen1", "deepset.DeepSetsFunc.gen3", "deepset.DeepSetsFunc.view", "set_input.contiguous().view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "set_input.unsqueeze", "set_input.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "set_input", ")", ":", "\n", "        ", "\"\"\"\n        set_input, seq_length, set_size, dim\n        \"\"\"", "\n", "set_length", ",", "set_size", ",", "dim", "=", "set_input", ".", "shape", "\n", "assert", "(", "dim", "==", "self", ".", "z_dim", ")", "\n", "mask_one", "=", "torch", ".", "ones", "(", "set_size", ",", "set_size", ")", "-", "torch", ".", "eye", "(", "set_size", ",", "set_size", ")", "\n", "mask_one", "=", "mask_one", ".", "view", "(", "1", ",", "set_size", ",", "set_size", ",", "1", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "mask_one", "=", "mask_one", ".", "cuda", "(", ")", "\n", "\n", "", "combined_mean", "=", "torch", ".", "mul", "(", "set_input", ".", "unsqueeze", "(", "2", ")", ",", "mask_one", ")", ".", "max", "(", "1", ")", "[", "0", "]", "# 75 x 6 x 64, we can also try max here", "\n", "# do a bilinear transformation", "\n", "combined_mean", "=", "F", ".", "relu", "(", "self", ".", "gen1", "(", "combined_mean", ".", "view", "(", "-", "1", ",", "self", ".", "z_dim", ")", ")", ")", "\n", "combined_mean", "=", "self", ".", "gen2", "(", "combined_mean", ")", "\n", "combined_mean_cat", "=", "torch", ".", "cat", "(", "[", "set_input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "z_dim", ")", ",", "combined_mean", "]", ",", "1", ")", "\n", "# do linear transformation", "\n", "combined_mean_cat", "=", "F", ".", "relu", "(", "self", ".", "gen3", "(", "combined_mean_cat", ")", ")", "\n", "combined_mean_cat", "=", "self", ".", "gen4", "(", "combined_mean_cat", ")", "\n", "\n", "combined_mean_cat", "=", "combined_mean_cat", ".", "view", "(", "-", "1", ",", "set_size", ",", "self", ".", "z_dim", ")", "\n", "set_output", "=", "set_input", "+", "combined_mean_cat", "\n", "return", "set_output", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.deepset.DeepSet.__init__": [[46, 60], ["model.models.FewShotModel.__init__", "deepset.DeepSetsFunc", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "if", "args", ".", "backbone_class", "==", "'ConvNet'", ":", "\n", "            ", "hdim", "=", "64", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res12'", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res18'", ":", "\n", "            ", "hdim", "=", "512", "\n", "", "elif", "args", ".", "backbone_class", "==", "'WRN'", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "''", ")", "\n", "\n", "", "self", ".", "set_func", "=", "DeepSetsFunc", "(", "hdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.deepset.DeepSet._forward": [[61, 119], ["instance_embs.size", "instance_embs[].contiguous().view", "instance_embs[].contiguous().view", "instance_embs[].contiguous().view.mean", "numpy.prod", "deepset.DeepSet.set_func", "query.view.view.view().unsqueeze", "torch.normalize.unsqueeze().expand().contiguous", "torch.normalize.view", "torch.normalize", "torch.normalize", "torch.normalize", "query.view.view.view", "logits.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.prod", "aux_task.contiguous().view.contiguous().view.permute", "aux_task.contiguous().view.contiguous().view.contiguous().view", "deepset.DeepSet.set_func", "aux_emb.view.view.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "instance_embs[].contiguous", "instance_embs[].contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "aux_task.contiguous().view.contiguous().view.contiguous().view().unsqueeze", "torch.normalize.unsqueeze().expand().contiguous", "torch.normalize.view", "torch.normalize", "torch.normalize", "torch.normalize", "aux_task.contiguous().view.contiguous().view.contiguous().view", "logits_reg.view.view.view", "query.view.view.view", "torch.normalize.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.normalize.permute", "instance_embs[].contiguous().view.view", "query.view.view.view", "aux_task.contiguous().view.contiguous().view.contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "aux_task.contiguous().view.contiguous().view.contiguous().view", "torch.normalize.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "aux_task.contiguous().view.contiguous().view.contiguous", "torch.normalize.permute", "torch.normalize.unsqueeze", "support_idx.contiguous().view", "query_idx.contiguous().view", "aux_task.contiguous().view.contiguous().view.contiguous", "torch.normalize.unsqueeze", "support_idx.contiguous", "query_idx.contiguous"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize"], ["", "def", "_forward", "(", "self", ",", "instance_embs", ",", "support_idx", ",", "query_idx", ")", ":", "\n", "        ", "emb_dim", "=", "instance_embs", ".", "size", "(", "-", "1", ")", "\n", "\n", "# organize support/query data", "\n", "support", "=", "instance_embs", "[", "support_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "*", "(", "support_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "query", "=", "instance_embs", "[", "query_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "*", "(", "query_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "\n", "# get mean of the support", "\n", "proto", "=", "support", ".", "mean", "(", "dim", "=", "1", ")", "# Ntask x NK x d", "\n", "num_batch", "=", "proto", ".", "shape", "[", "0", "]", "\n", "num_proto", "=", "proto", ".", "shape", "[", "1", "]", "\n", "num_query", "=", "np", ".", "prod", "(", "query_idx", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "\n", "# query: (num_batch, num_query, num_proto, num_emb)", "\n", "# proto: (num_batch, num_proto, num_emb)", "\n", "proto", "=", "self", ".", "set_func", "(", "proto", ")", "\n", "if", "self", ".", "args", ".", "use_euclidean", ":", "\n", "            ", "query", "=", "query", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", "# (Nbatch*Nq*Nw, 1, d)", "\n", "proto", "=", "proto", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_query", ",", "num_proto", ",", "emb_dim", ")", ".", "contiguous", "(", ")", "\n", "proto", "=", "proto", ".", "view", "(", "num_batch", "*", "num_query", ",", "num_proto", ",", "emb_dim", ")", "# (Nbatch x Nq, Nk, d)", "\n", "\n", "logits", "=", "-", "torch", ".", "sum", "(", "(", "proto", "-", "query", ")", "**", "2", ",", "2", ")", "/", "self", ".", "args", ".", "temperature", "\n", "", "else", ":", "\n", "            ", "proto", "=", "F", ".", "normalize", "(", "proto", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "query", "=", "query", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "# (Nbatch,  Nq*Nw, d)", "\n", "\n", "logits", "=", "torch", ".", "bmm", "(", "query", ",", "proto", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "/", "self", ".", "args", ".", "temperature", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_proto", ")", "\n", "\n", "# for regularization", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "aux_task", "=", "torch", ".", "cat", "(", "[", "support", ".", "view", "(", "1", ",", "self", ".", "args", ".", "shot", ",", "self", ".", "args", ".", "way", ",", "emb_dim", ")", ",", "\n", "query", ".", "view", "(", "1", ",", "self", ".", "args", ".", "query", ",", "self", ".", "args", ".", "way", ",", "emb_dim", ")", "]", ",", "1", ")", "# T x (K+Kq) x N x d", "\n", "num_query", "=", "np", ".", "prod", "(", "aux_task", ".", "shape", "[", "1", ":", "3", "]", ")", "\n", "aux_task", "=", "aux_task", ".", "permute", "(", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "aux_task", "=", "aux_task", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "shot", "+", "self", ".", "args", ".", "query", ",", "emb_dim", ")", "\n", "# apply the transformation over the Aug Task", "\n", "aux_emb", "=", "self", ".", "set_func", "(", "aux_task", ")", "# T x N x (K+Kq) x d", "\n", "# compute class mean", "\n", "aux_emb", "=", "aux_emb", ".", "view", "(", "num_batch", ",", "self", ".", "args", ".", "way", ",", "self", ".", "args", ".", "shot", "+", "self", ".", "args", ".", "query", ",", "emb_dim", ")", "\n", "aux_center", "=", "torch", ".", "mean", "(", "aux_emb", ",", "2", ")", "# T x N x d", "\n", "\n", "if", "self", ".", "args", ".", "use_euclidean", ":", "\n", "                ", "aux_task", "=", "aux_task", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", "# (Nbatch*Nq*Nw, 1, d)", "\n", "aux_center", "=", "aux_center", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_query", ",", "num_proto", ",", "emb_dim", ")", ".", "contiguous", "(", ")", "\n", "aux_center", "=", "aux_center", ".", "view", "(", "num_batch", "*", "num_query", ",", "num_proto", ",", "emb_dim", ")", "# (Nbatch x Nq, Nk, d)", "\n", "\n", "logits_reg", "=", "-", "torch", ".", "sum", "(", "(", "aux_center", "-", "aux_task", ")", "**", "2", ",", "2", ")", "/", "self", ".", "args", ".", "temperature2", "\n", "", "else", ":", "\n", "                ", "aux_center", "=", "F", ".", "normalize", "(", "aux_center", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "aux_task", "=", "aux_task", ".", "contiguous", "(", ")", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "# (Nbatch,  Nq*Nw, d)", "\n", "\n", "logits_reg", "=", "torch", ".", "bmm", "(", "aux_task", ",", "aux_center", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "/", "self", ".", "args", ".", "temperature2", "\n", "logits_reg", "=", "logits_reg", ".", "view", "(", "-", "1", ",", "num_proto", ")", "\n", "\n", "", "return", "logits", ",", "logits_reg", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.feat.ScaledDotProductAttention.__init__": [[11, 16], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.feat.ScaledDotProductAttention.forward": [[17, 26], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "feat.ScaledDotProductAttention.softmax", "feat.ScaledDotProductAttention.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "k.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "\n", "        ", "attn", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attn", "=", "attn", "/", "self", ".", "temperature", "\n", "log_attn", "=", "F", ".", "log_softmax", "(", "attn", ",", "2", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "attn", ",", "v", ")", "\n", "return", "output", ",", "attn", ",", "log_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.feat.MultiHeadAttention.__init__": [[30, 49], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "feat.ScaledDotProductAttention", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_qs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_ks", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_vs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_v", ")", ")", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.feat.MultiHeadAttention.forward": [[50, 74], ["q.permute().contiguous().view.permute().contiguous().view.size", "k.permute().contiguous().view.permute().contiguous().view.size", "v.permute().contiguous().view.permute().contiguous().view.size", "feat.MultiHeadAttention.w_qs().view", "feat.MultiHeadAttention.w_ks().view", "feat.MultiHeadAttention.w_vs().view", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "feat.MultiHeadAttention.attention", "feat.MultiHeadAttention.view", "feat.MultiHeadAttention.permute().contiguous().view", "feat.MultiHeadAttention.dropout", "feat.MultiHeadAttention.layer_norm", "feat.MultiHeadAttention.fc", "feat.MultiHeadAttention.w_qs", "feat.MultiHeadAttention.w_ks", "feat.MultiHeadAttention.w_vs", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "feat.MultiHeadAttention.permute().contiguous", "q.permute().contiguous().view.permute().contiguous().view.permute", "k.permute().contiguous().view.permute().contiguous().view.permute", "v.permute().contiguous().view.permute().contiguous().view.permute", "feat.MultiHeadAttention.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "sz_b", ",", "len_q", ",", "_", "=", "q", ".", "size", "(", ")", "\n", "sz_b", ",", "len_k", ",", "_", "=", "k", ".", "size", "(", ")", "\n", "sz_b", ",", "len_v", ",", "_", "=", "v", ".", "size", "(", ")", "\n", "\n", "residual", "=", "q", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "q", "=", "q", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_q", ",", "d_k", ")", "# (n*b) x lq x dk", "\n", "k", "=", "k", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_k", ",", "d_k", ")", "# (n*b) x lk x dk", "\n", "v", "=", "v", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_v", ",", "d_v", ")", "# (n*b) x lv x dv", "\n", "\n", "output", ",", "attn", ",", "log_attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ")", "\n", "\n", "output", "=", "output", ".", "view", "(", "n_head", ",", "sz_b", ",", "len_q", ",", "d_v", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "-", "1", ")", "# b x lq x (n*dv)", "\n", "\n", "output", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.feat.FEAT.__init__": [[76, 90], ["model.models.FewShotModel.__init__", "feat.MultiHeadAttention", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "if", "args", ".", "backbone_class", "==", "'ConvNet'", ":", "\n", "            ", "hdim", "=", "64", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res12'", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res18'", ":", "\n", "            ", "hdim", "=", "512", "\n", "", "elif", "args", ".", "backbone_class", "==", "'WRN'", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "''", ")", "\n", "\n", "", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "1", ",", "hdim", ",", "hdim", ",", "hdim", ",", "dropout", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.feat.FEAT._forward": [[91, 149], ["instance_embs.size", "instance_embs[].contiguous().view", "instance_embs[].contiguous().view", "instance_embs[].contiguous().view.mean", "numpy.prod", "feat.FEAT.slf_attn", "query.view.view.view().unsqueeze", "torch.normalize.unsqueeze().expand().contiguous", "torch.normalize.view", "torch.normalize", "torch.normalize", "torch.normalize", "query.view.view.view", "logits.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.prod", "aux_task.permute().contiguous().view.permute().contiguous().view.permute", "aux_task.permute().contiguous().view.permute().contiguous().view.contiguous().view", "feat.FEAT.slf_attn", "aux_emb.view.view.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "instance_embs[].contiguous", "instance_embs[].contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view().unsqueeze", "torch.normalize.unsqueeze().expand().contiguous", "torch.normalize.view", "torch.normalize", "torch.normalize", "torch.normalize", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "logits_reg.view.view.view", "query.view.view.view", "torch.normalize.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.normalize.permute", "instance_embs[].contiguous().view.view", "query.view.view.view", "aux_task.permute().contiguous().view.permute().contiguous().view.contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "torch.normalize.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "torch.normalize.permute", "torch.normalize.unsqueeze", "support_idx.contiguous().view", "query_idx.contiguous().view", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "torch.normalize.unsqueeze", "aux_task.permute().contiguous().view.permute().contiguous().view.permute", "support_idx.contiguous", "query_idx.contiguous", "aux_task.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize"], ["", "def", "_forward", "(", "self", ",", "instance_embs", ",", "support_idx", ",", "query_idx", ")", ":", "\n", "        ", "emb_dim", "=", "instance_embs", ".", "size", "(", "-", "1", ")", "\n", "\n", "# organize support/query data", "\n", "support", "=", "instance_embs", "[", "support_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "*", "(", "support_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "query", "=", "instance_embs", "[", "query_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "*", "(", "query_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "\n", "# get mean of the support", "\n", "proto", "=", "support", ".", "mean", "(", "dim", "=", "1", ")", "# Ntask x NK x d", "\n", "num_batch", "=", "proto", ".", "shape", "[", "0", "]", "\n", "num_proto", "=", "proto", ".", "shape", "[", "1", "]", "\n", "num_query", "=", "np", ".", "prod", "(", "query_idx", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "\n", "# query: (num_batch, num_query, num_proto, num_emb)", "\n", "# proto: (num_batch, num_proto, num_emb)", "\n", "proto", "=", "self", ".", "slf_attn", "(", "proto", ",", "proto", ",", "proto", ")", "\n", "if", "self", ".", "args", ".", "use_euclidean", ":", "\n", "            ", "query", "=", "query", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", "# (Nbatch*Nq*Nw, 1, d)", "\n", "proto", "=", "proto", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_query", ",", "num_proto", ",", "emb_dim", ")", ".", "contiguous", "(", ")", "\n", "proto", "=", "proto", ".", "view", "(", "num_batch", "*", "num_query", ",", "num_proto", ",", "emb_dim", ")", "# (Nbatch x Nq, Nk, d)", "\n", "\n", "logits", "=", "-", "torch", ".", "sum", "(", "(", "proto", "-", "query", ")", "**", "2", ",", "2", ")", "/", "self", ".", "args", ".", "temperature", "\n", "", "else", ":", "\n", "            ", "proto", "=", "F", ".", "normalize", "(", "proto", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "query", "=", "query", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "# (Nbatch,  Nq*Nw, d)", "\n", "\n", "logits", "=", "torch", ".", "bmm", "(", "query", ",", "proto", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "/", "self", ".", "args", ".", "temperature", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_proto", ")", "\n", "\n", "# for regularization", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "aux_task", "=", "torch", ".", "cat", "(", "[", "support", ".", "view", "(", "1", ",", "self", ".", "args", ".", "shot", ",", "self", ".", "args", ".", "way", ",", "emb_dim", ")", ",", "\n", "query", ".", "view", "(", "1", ",", "self", ".", "args", ".", "query", ",", "self", ".", "args", ".", "way", ",", "emb_dim", ")", "]", ",", "1", ")", "# T x (K+Kq) x N x d", "\n", "num_query", "=", "np", ".", "prod", "(", "aux_task", ".", "shape", "[", "1", ":", "3", "]", ")", "\n", "aux_task", "=", "aux_task", ".", "permute", "(", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "aux_task", "=", "aux_task", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "shot", "+", "self", ".", "args", ".", "query", ",", "emb_dim", ")", "\n", "# apply the transformation over the Aug Task", "\n", "aux_emb", "=", "self", ".", "slf_attn", "(", "aux_task", ",", "aux_task", ",", "aux_task", ")", "# T x N x (K+Kq) x d", "\n", "# compute class mean", "\n", "aux_emb", "=", "aux_emb", ".", "view", "(", "num_batch", ",", "self", ".", "args", ".", "way", ",", "self", ".", "args", ".", "shot", "+", "self", ".", "args", ".", "query", ",", "emb_dim", ")", "\n", "aux_center", "=", "torch", ".", "mean", "(", "aux_emb", ",", "2", ")", "# T x N x d", "\n", "\n", "if", "self", ".", "args", ".", "use_euclidean", ":", "\n", "                ", "aux_task", "=", "aux_task", ".", "permute", "(", "[", "1", ",", "0", ",", "2", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", "# (Nbatch*Nq*Nw, 1, d)", "\n", "aux_center", "=", "aux_center", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_query", ",", "num_proto", ",", "emb_dim", ")", ".", "contiguous", "(", ")", "\n", "aux_center", "=", "aux_center", ".", "view", "(", "num_batch", "*", "num_query", ",", "num_proto", ",", "emb_dim", ")", "# (Nbatch x Nq, Nk, d)", "\n", "\n", "logits_reg", "=", "-", "torch", ".", "sum", "(", "(", "aux_center", "-", "aux_task", ")", "**", "2", ",", "2", ")", "/", "self", ".", "args", ".", "temperature2", "\n", "", "else", ":", "\n", "                ", "aux_center", "=", "F", ".", "normalize", "(", "aux_center", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "aux_task", "=", "aux_task", ".", "permute", "(", "[", "1", ",", "0", ",", "2", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "# (Nbatch,  Nq*Nw, d)", "\n", "\n", "logits_reg", "=", "torch", ".", "bmm", "(", "aux_task", ",", "aux_center", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "/", "self", ".", "args", ".", "temperature2", "\n", "logits_reg", "=", "logits_reg", ".", "view", "(", "-", "1", ",", "num_proto", ")", "\n", "\n", "", "return", "logits", ",", "logits_reg", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.base.FewShotModel.__init__": [[6, 26], ["torch.Module.__init__", "ConvNet", "ResNet", "ResNet", "Wide_ResNet", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "if", "args", ".", "backbone_class", "==", "'ConvNet'", ":", "\n", "            ", "from", "model", ".", "networks", ".", "convnet", "import", "ConvNet", "\n", "self", ".", "encoder", "=", "ConvNet", "(", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res12'", ":", "\n", "            ", "hdim", "=", "640", "\n", "from", "model", ".", "networks", ".", "res12", "import", "ResNet", "\n", "self", ".", "encoder", "=", "ResNet", "(", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res18'", ":", "\n", "            ", "hdim", "=", "512", "\n", "from", "model", ".", "networks", ".", "res18", "import", "ResNet", "\n", "self", ".", "encoder", "=", "ResNet", "(", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'WRN'", ":", "\n", "            ", "hdim", "=", "640", "\n", "from", "model", ".", "networks", ".", "WRN28", "import", "Wide_ResNet", "\n", "self", ".", "encoder", "=", "Wide_ResNet", "(", "28", ",", "10", ",", "0.5", ")", "# we set the dropout=0.5 directly here, it may achieve better results by tunning the dropout", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.base.FewShotModel.split_instances": [[27, 35], ["torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long().view", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "", "def", "split_instances", "(", "self", ",", "data", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "(", "torch", ".", "Tensor", "(", "np", ".", "arange", "(", "args", ".", "way", "*", "args", ".", "shot", ")", ")", ".", "long", "(", ")", ".", "view", "(", "1", ",", "args", ".", "shot", ",", "args", ".", "way", ")", ",", "\n", "torch", ".", "Tensor", "(", "np", ".", "arange", "(", "args", ".", "way", "*", "args", ".", "shot", ",", "args", ".", "way", "*", "(", "args", ".", "shot", "+", "args", ".", "query", ")", ")", ")", ".", "long", "(", ")", ".", "view", "(", "1", ",", "args", ".", "query", ",", "args", ".", "way", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "torch", ".", "Tensor", "(", "np", ".", "arange", "(", "args", ".", "eval_way", "*", "args", ".", "eval_shot", ")", ")", ".", "long", "(", ")", ".", "view", "(", "1", ",", "args", ".", "eval_shot", ",", "args", ".", "eval_way", ")", ",", "\n", "torch", ".", "Tensor", "(", "np", ".", "arange", "(", "args", ".", "eval_way", "*", "args", ".", "eval_shot", ",", "args", ".", "eval_way", "*", "(", "args", ".", "eval_shot", "+", "args", ".", "eval_query", ")", ")", ")", ".", "long", "(", ")", ".", "view", "(", "1", ",", "args", ".", "eval_query", ",", "args", ".", "eval_way", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.base.FewShotModel.forward": [[36, 53], ["base.FewShotModel.encoder", "x.squeeze.squeeze.squeeze", "base.FewShotModel.encoder", "base.FewShotModel.split_instances", "base.FewShotModel._forward", "base.FewShotModel._forward"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.base.FewShotModel.split_instances", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.bilstm.BILSTM._forward", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.bilstm.BILSTM._forward"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "get_feature", "=", "False", ")", ":", "\n", "        ", "if", "get_feature", ":", "\n", "# get feature with the provided embeddings", "\n", "            ", "return", "self", ".", "encoder", "(", "x", ")", "\n", "", "else", ":", "\n", "# feature extraction", "\n", "            ", "x", "=", "x", ".", "squeeze", "(", "0", ")", "\n", "instance_embs", "=", "self", ".", "encoder", "(", "x", ")", "\n", "num_inst", "=", "instance_embs", ".", "shape", "[", "0", "]", "\n", "# split support query set for few-shot data", "\n", "support_idx", ",", "query_idx", "=", "self", ".", "split_instances", "(", "x", ")", "\n", "if", "self", ".", "training", ":", "\n", "                ", "logits", ",", "logits_reg", "=", "self", ".", "_forward", "(", "instance_embs", ",", "support_idx", ",", "query_idx", ")", "\n", "return", "logits", ",", "logits_reg", "\n", "", "else", ":", "\n", "                ", "logits", "=", "self", ".", "_forward", "(", "instance_embs", ",", "support_idx", ",", "query_idx", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.base.FewShotModel._forward": [[54, 56], ["NotImplementedError"], "methods", ["None"], ["", "", "", "def", "_forward", "(", "self", ",", "x", ",", "support_idx", ",", "query_idx", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Suppose to be implemented by subclass'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.semi_protofeat.ScaledDotProductAttention.__init__": [[12, 17], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.semi_protofeat.ScaledDotProductAttention.forward": [[18, 27], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "semi_protofeat.ScaledDotProductAttention.softmax", "semi_protofeat.ScaledDotProductAttention.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "k.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "\n", "        ", "attn", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attn", "=", "attn", "/", "self", ".", "temperature", "\n", "log_attn", "=", "F", ".", "log_softmax", "(", "attn", ",", "2", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "attn", ",", "v", ")", "\n", "return", "output", ",", "attn", ",", "log_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.semi_protofeat.MultiHeadAttention.__init__": [[31, 50], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "semi_protofeat.ScaledDotProductAttention", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_qs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_ks", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_vs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_v", ")", ")", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.semi_protofeat.MultiHeadAttention.forward": [[51, 75], ["q.permute().contiguous().view.permute().contiguous().view.size", "k.permute().contiguous().view.permute().contiguous().view.size", "v.permute().contiguous().view.permute().contiguous().view.size", "semi_protofeat.MultiHeadAttention.w_qs().view", "semi_protofeat.MultiHeadAttention.w_ks().view", "semi_protofeat.MultiHeadAttention.w_vs().view", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "semi_protofeat.MultiHeadAttention.attention", "semi_protofeat.MultiHeadAttention.view", "semi_protofeat.MultiHeadAttention.permute().contiguous().view", "semi_protofeat.MultiHeadAttention.dropout", "semi_protofeat.MultiHeadAttention.layer_norm", "semi_protofeat.MultiHeadAttention.fc", "semi_protofeat.MultiHeadAttention.w_qs", "semi_protofeat.MultiHeadAttention.w_ks", "semi_protofeat.MultiHeadAttention.w_vs", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "semi_protofeat.MultiHeadAttention.permute().contiguous", "q.permute().contiguous().view.permute().contiguous().view.permute", "k.permute().contiguous().view.permute().contiguous().view.permute", "v.permute().contiguous().view.permute().contiguous().view.permute", "semi_protofeat.MultiHeadAttention.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "sz_b", ",", "len_q", ",", "_", "=", "q", ".", "size", "(", ")", "\n", "sz_b", ",", "len_k", ",", "_", "=", "k", ".", "size", "(", ")", "\n", "sz_b", ",", "len_v", ",", "_", "=", "v", ".", "size", "(", ")", "\n", "\n", "residual", "=", "q", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "q", "=", "q", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_q", ",", "d_k", ")", "# (n*b) x lq x dk", "\n", "k", "=", "k", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_k", ",", "d_k", ")", "# (n*b) x lk x dk", "\n", "v", "=", "v", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_v", ",", "d_v", ")", "# (n*b) x lv x dv", "\n", "\n", "output", ",", "attn", ",", "log_attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ")", "\n", "\n", "output", "=", "output", ".", "view", "(", "n_head", ",", "sz_b", ",", "len_q", ",", "d_v", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "-", "1", ")", "# b x lq x (n*dv)", "\n", "\n", "output", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.semi_protofeat.SemiProtoFEAT.__init__": [[77, 91], ["model.models.FewShotModel.__init__", "semi_protofeat.MultiHeadAttention", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "if", "args", ".", "backbone_class", "==", "'ConvNet'", ":", "\n", "            ", "hdim", "=", "64", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res12'", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res18'", ":", "\n", "            ", "hdim", "=", "512", "\n", "", "elif", "args", ".", "backbone_class", "==", "'WRN'", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "''", ")", "\n", "\n", "", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "1", ",", "hdim", ",", "hdim", ",", "hdim", ",", "dropout", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.semi_protofeat.SemiProtoFEAT.get_proto": [[92, 118], ["torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "model.utils.one_hot", "label_support_onehot.cuda.cuda.unsqueeze().repeat", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "x_shot.mean", "dis.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat.sum().view", "torch.cat.sum().view", "torch.cat.sum().view", "label_support_onehot.cuda.cuda.cuda", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "label_support_onehot.cuda.cuda.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x_shot.view", "x_pool.view", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x_pool.view", "torch.normalize().permute", "torch.normalize().permute", "torch.normalize().permute", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.normalize", "torch.normalize", "torch.normalize", "x_shot.mean.unsqueeze().expand().contiguous().view", "x_pool.view().unsqueeze", "x_shot.mean.unsqueeze().expand().contiguous", "x_pool.view", "x_shot.mean.unsqueeze().expand", "x_shot.mean.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.one_hot", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize"], ["", "def", "get_proto", "(", "self", ",", "x_shot", ",", "x_pool", ")", ":", "\n", "# get the prototypes based w/ an unlabeled pool set", "\n", "        ", "num_batch", ",", "num_shot", ",", "num_way", ",", "emb_dim", "=", "x_shot", ".", "shape", "\n", "num_pool_shot", "=", "x_pool", ".", "shape", "[", "1", "]", "\n", "num_pool", "=", "num_pool_shot", "*", "num_way", "\n", "label_support", "=", "torch", ".", "arange", "(", "num_way", ")", ".", "repeat", "(", "num_shot", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "label_support_onehot", "=", "one_hot", "(", "label_support", ",", "num_way", ")", "\n", "label_support_onehot", "=", "label_support_onehot", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "[", "num_batch", ",", "1", ",", "1", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "label_support_onehot", "=", "label_support_onehot", ".", "cuda", "(", ")", "\n", "\n", "", "proto_shot", "=", "x_shot", ".", "mean", "(", "dim", "=", "1", ")", "\n", "if", "self", ".", "args", ".", "use_euclidean", ":", "\n", "            ", "dis", "=", "-", "torch", ".", "sum", "(", "(", "proto_shot", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_pool", ",", "num_way", ",", "emb_dim", ")", ".", "contiguous", "(", ")", ".", "view", "(", "num_batch", "*", "num_pool", ",", "num_way", ",", "emb_dim", ")", "-", "x_pool", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", ")", "**", "2", ",", "2", ")", "/", "self", ".", "args", ".", "temperature", "\n", "", "else", ":", "\n", "            ", "dis", "=", "torch", ".", "bmm", "(", "x_pool", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", ",", "F", ".", "normalize", "(", "proto_shot", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "/", "self", ".", "args", ".", "temperature", "\n", "\n", "", "dis", "=", "dis", ".", "view", "(", "num_batch", ",", "-", "1", ",", "num_way", ")", "\n", "z_hat", "=", "F", ".", "softmax", "(", "dis", ",", "dim", "=", "2", ")", "\n", "z", "=", "torch", ".", "cat", "(", "[", "label_support_onehot", ",", "z_hat", "]", ",", "dim", "=", "1", ")", "# (num_batch, n_shot + n_pool, n_way)", "\n", "h", "=", "torch", ".", "cat", "(", "[", "x_shot", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", ",", "x_pool", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "]", ",", "dim", "=", "1", ")", "# (num_batch, n_shot + n_pool, n_embedding)", "\n", "\n", "proto", "=", "torch", ".", "bmm", "(", "z", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ",", "h", ")", "\n", "sum_z", "=", "z", ".", "sum", "(", "dim", "=", "1", ")", ".", "view", "(", "(", "num_batch", ",", "-", "1", ",", "1", ")", ")", "\n", "proto", "=", "proto", "/", "sum_z", "\n", "return", "proto", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.semi_protofeat.SemiProtoFEAT._forward": [[119, 183], ["instance_embs.size", "instance_embs[].contiguous().view", "instance_embs[].contiguous().view", "numpy.prod", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "semi_protofeat.SemiProtoFEAT.slf_attn().view", "semi_protofeat.SemiProtoFEAT.get_proto", "query.view.view.view().unsqueeze", "torch.normalize.unsqueeze().expand().contiguous", "torch.normalize.view", "torch.normalize", "torch.normalize", "torch.normalize", "query.view.view.view", "logits.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.prod", "aux_task.permute().contiguous().view.permute().contiguous().view.permute", "aux_task.permute().contiguous().view.permute().contiguous().view.contiguous().view", "semi_protofeat.SemiProtoFEAT.slf_attn", "aux_emb.view.view.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "instance_embs[].contiguous", "instance_embs[].contiguous", "semi_protofeat.SemiProtoFEAT.view", "query.view.view.view", "semi_protofeat.SemiProtoFEAT.slf_attn", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view().unsqueeze", "torch.normalize.unsqueeze().expand().contiguous", "torch.normalize.view", "torch.normalize", "torch.normalize", "torch.normalize", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "logits_reg.view.view.view", "semi_protofeat.SemiProtoFEAT.view", "query.view.view.view", "torch.normalize.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.normalize.permute", "semi_protofeat.SemiProtoFEAT.view", "query.view.view.view", "aux_task.permute().contiguous().view.permute().contiguous().view.contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "torch.normalize.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "torch.normalize.permute", "torch.normalize.unsqueeze", "support_idx.contiguous().view", "query_idx.contiguous().view", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "torch.normalize.unsqueeze", "aux_task.permute().contiguous().view.permute().contiguous().view.permute", "support_idx.contiguous", "query_idx.contiguous", "aux_task.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.semi_protofeat.SemiProtoFEAT.get_proto", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize"], ["", "def", "_forward", "(", "self", ",", "instance_embs", ",", "support_idx", ",", "query_idx", ")", ":", "\n", "        ", "emb_dim", "=", "instance_embs", ".", "size", "(", "-", "1", ")", "\n", "\n", "# organize support/query data", "\n", "support", "=", "instance_embs", "[", "support_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "*", "(", "support_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "query", "=", "instance_embs", "[", "query_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "*", "(", "query_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "\n", "num_batch", "=", "support", ".", "shape", "[", "0", "]", "\n", "num_shot", ",", "num_way", "=", "support", ".", "shape", "[", "1", "]", ",", "support", ".", "shape", "[", "2", "]", "\n", "num_query", "=", "np", ".", "prod", "(", "query_idx", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "\n", "# transformation", "\n", "whole_set", "=", "torch", ".", "cat", "(", "[", "support", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", ",", "query", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "]", ",", "1", ")", "\n", "support", "=", "self", ".", "slf_attn", "(", "support", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", ",", "whole_set", ",", "whole_set", ")", ".", "view", "(", "num_batch", ",", "num_shot", ",", "num_way", ",", "emb_dim", ")", "\n", "\n", "# get mean of the support", "\n", "proto", "=", "self", ".", "get_proto", "(", "support", ",", "query", ")", "# we can also use adapted query set here to achieve better results", "\n", "# proto = support.mean(dim=1) # Ntask x NK x d", "\n", "num_proto", "=", "proto", ".", "shape", "[", "1", "]", "\n", "\n", "# query: (num_batch, num_query, num_proto, num_emb)", "\n", "# proto: (num_batch, num_proto, num_emb)", "\n", "if", "self", ".", "args", ".", "use_euclidean", ":", "\n", "            ", "query", "=", "query", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", "# (Nbatch*Nq*Nw, 1, d)", "\n", "proto", "=", "proto", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_query", ",", "num_proto", ",", "emb_dim", ")", ".", "contiguous", "(", ")", "\n", "proto", "=", "proto", ".", "view", "(", "num_batch", "*", "num_query", ",", "num_proto", ",", "emb_dim", ")", "# (Nbatch x Nq, Nk, d)", "\n", "\n", "logits", "=", "-", "torch", ".", "sum", "(", "(", "proto", "-", "query", ")", "**", "2", ",", "2", ")", "/", "self", ".", "args", ".", "temperature", "\n", "", "else", ":", "\n", "            ", "proto", "=", "F", ".", "normalize", "(", "proto", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "query", "=", "query", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "# (Nbatch,  Nq*Nw, d)", "\n", "\n", "logits", "=", "torch", ".", "bmm", "(", "query", ",", "proto", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "/", "self", ".", "args", ".", "temperature", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_proto", ")", "\n", "\n", "# for regularization", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "aux_task", "=", "torch", ".", "cat", "(", "[", "support", ".", "view", "(", "1", ",", "self", ".", "args", ".", "shot", ",", "self", ".", "args", ".", "way", ",", "emb_dim", ")", ",", "\n", "query", ".", "view", "(", "1", ",", "self", ".", "args", ".", "query", ",", "self", ".", "args", ".", "way", ",", "emb_dim", ")", "]", ",", "1", ")", "# T x (K+Kq) x N x d", "\n", "num_query", "=", "np", ".", "prod", "(", "aux_task", ".", "shape", "[", "1", ":", "3", "]", ")", "\n", "aux_task", "=", "aux_task", ".", "permute", "(", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "aux_task", "=", "aux_task", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "shot", "+", "self", ".", "args", ".", "query", ",", "emb_dim", ")", "\n", "# apply the transformation over the Aug Task", "\n", "aux_emb", "=", "self", ".", "slf_attn", "(", "aux_task", ",", "aux_task", ",", "aux_task", ")", "# T x N x (K+Kq) x d", "\n", "# compute class mean", "\n", "aux_emb", "=", "aux_emb", ".", "view", "(", "num_batch", ",", "self", ".", "args", ".", "way", ",", "self", ".", "args", ".", "shot", "+", "self", ".", "args", ".", "query", ",", "emb_dim", ")", "\n", "aux_center", "=", "torch", ".", "mean", "(", "aux_emb", ",", "2", ")", "# T x N x d", "\n", "\n", "if", "self", ".", "args", ".", "use_euclidean", ":", "\n", "                ", "aux_task", "=", "aux_task", ".", "permute", "(", "[", "1", ",", "0", ",", "2", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", "# (Nbatch*Nq*Nw, 1, d)", "\n", "aux_center", "=", "aux_center", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_query", ",", "num_proto", ",", "emb_dim", ")", ".", "contiguous", "(", ")", "\n", "aux_center", "=", "aux_center", ".", "view", "(", "num_batch", "*", "num_query", ",", "num_proto", ",", "emb_dim", ")", "# (Nbatch x Nq, Nk, d)", "\n", "\n", "logits_reg", "=", "-", "torch", ".", "sum", "(", "(", "aux_center", "-", "aux_task", ")", "**", "2", ",", "2", ")", "/", "self", ".", "args", ".", "temperature2", "\n", "", "else", ":", "\n", "                ", "aux_center", "=", "F", ".", "normalize", "(", "aux_center", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "aux_task", "=", "aux_task", ".", "permute", "(", "[", "1", ",", "0", ",", "2", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "# (Nbatch,  Nq*Nw, d)", "\n", "\n", "logits_reg", "=", "torch", ".", "bmm", "(", "aux_task", ",", "aux_center", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "/", "self", ".", "args", ".", "temperature2", "\n", "logits_reg", "=", "logits_reg", ".", "view", "(", "-", "1", ",", "num_proto", ")", "\n", "\n", "", "return", "logits", ",", "logits_reg", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.semi_feat.ScaledDotProductAttention.__init__": [[11, 16], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.semi_feat.ScaledDotProductAttention.forward": [[17, 26], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "semi_feat.ScaledDotProductAttention.softmax", "semi_feat.ScaledDotProductAttention.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "k.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "\n", "        ", "attn", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attn", "=", "attn", "/", "self", ".", "temperature", "\n", "log_attn", "=", "F", ".", "log_softmax", "(", "attn", ",", "2", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "attn", ",", "v", ")", "\n", "return", "output", ",", "attn", ",", "log_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.semi_feat.MultiHeadAttention.__init__": [[30, 49], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "semi_feat.ScaledDotProductAttention", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_qs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_ks", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_vs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_v", ")", ")", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.semi_feat.MultiHeadAttention.forward": [[50, 74], ["q.permute().contiguous().view.permute().contiguous().view.size", "k.permute().contiguous().view.permute().contiguous().view.size", "v.permute().contiguous().view.permute().contiguous().view.size", "semi_feat.MultiHeadAttention.w_qs().view", "semi_feat.MultiHeadAttention.w_ks().view", "semi_feat.MultiHeadAttention.w_vs().view", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "semi_feat.MultiHeadAttention.attention", "semi_feat.MultiHeadAttention.view", "semi_feat.MultiHeadAttention.permute().contiguous().view", "semi_feat.MultiHeadAttention.dropout", "semi_feat.MultiHeadAttention.layer_norm", "semi_feat.MultiHeadAttention.fc", "semi_feat.MultiHeadAttention.w_qs", "semi_feat.MultiHeadAttention.w_ks", "semi_feat.MultiHeadAttention.w_vs", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "semi_feat.MultiHeadAttention.permute().contiguous", "q.permute().contiguous().view.permute().contiguous().view.permute", "k.permute().contiguous().view.permute().contiguous().view.permute", "v.permute().contiguous().view.permute().contiguous().view.permute", "semi_feat.MultiHeadAttention.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "sz_b", ",", "len_q", ",", "_", "=", "q", ".", "size", "(", ")", "\n", "sz_b", ",", "len_k", ",", "_", "=", "k", ".", "size", "(", ")", "\n", "sz_b", ",", "len_v", ",", "_", "=", "v", ".", "size", "(", ")", "\n", "\n", "residual", "=", "q", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "q", "=", "q", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_q", ",", "d_k", ")", "# (n*b) x lq x dk", "\n", "k", "=", "k", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_k", ",", "d_k", ")", "# (n*b) x lk x dk", "\n", "v", "=", "v", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_v", ",", "d_v", ")", "# (n*b) x lv x dv", "\n", "\n", "output", ",", "attn", ",", "log_attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ")", "\n", "\n", "output", "=", "output", ".", "view", "(", "n_head", ",", "sz_b", ",", "len_q", ",", "d_v", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "-", "1", ")", "# b x lq x (n*dv)", "\n", "\n", "output", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.semi_feat.SemiFEAT.__init__": [[76, 90], ["model.models.FewShotModel.__init__", "semi_feat.MultiHeadAttention", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "if", "args", ".", "backbone_class", "==", "'ConvNet'", ":", "\n", "            ", "hdim", "=", "64", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res12'", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res18'", ":", "\n", "            ", "hdim", "=", "512", "\n", "", "elif", "args", ".", "backbone_class", "==", "'WRN'", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "''", ")", "\n", "\n", "", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "1", ",", "hdim", ",", "hdim", ",", "hdim", ",", "dropout", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.semi_feat.SemiFEAT._forward": [[91, 150], ["instance_embs.size", "instance_embs[].contiguous().view", "instance_embs[].contiguous().view", "instance_embs[].contiguous().view.mean", "numpy.prod", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "semi_feat.SemiFEAT.slf_attn", "query.view.view.view().unsqueeze", "torch.normalize.unsqueeze().expand().contiguous", "torch.normalize.view", "torch.normalize", "torch.normalize", "torch.normalize", "query.view.view.view", "logits.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.prod", "aux_task.permute().contiguous().view.permute().contiguous().view.permute", "aux_task.permute().contiguous().view.permute().contiguous().view.contiguous().view", "semi_feat.SemiFEAT.slf_attn", "aux_emb.view.view.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "instance_embs[].contiguous", "instance_embs[].contiguous", "query.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view().unsqueeze", "torch.normalize.unsqueeze().expand().contiguous", "torch.normalize.view", "torch.normalize", "torch.normalize", "torch.normalize", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "logits_reg.view.view.view", "query.view.view.view", "torch.normalize.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.normalize.permute", "instance_embs[].contiguous().view.view", "query.view.view.view", "aux_task.permute().contiguous().view.permute().contiguous().view.contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "torch.normalize.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "torch.normalize.permute", "torch.normalize.unsqueeze", "support_idx.contiguous().view", "query_idx.contiguous().view", "aux_task.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "torch.normalize.unsqueeze", "aux_task.permute().contiguous().view.permute().contiguous().view.permute", "support_idx.contiguous", "query_idx.contiguous", "aux_task.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize"], ["", "def", "_forward", "(", "self", ",", "instance_embs", ",", "support_idx", ",", "query_idx", ")", ":", "\n", "        ", "emb_dim", "=", "instance_embs", ".", "size", "(", "-", "1", ")", "\n", "\n", "# organize support/query data", "\n", "support", "=", "instance_embs", "[", "support_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "*", "(", "support_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "query", "=", "instance_embs", "[", "query_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "*", "(", "query_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "\n", "# get mean of the support", "\n", "proto", "=", "support", ".", "mean", "(", "dim", "=", "1", ")", "# Ntask x NK x d", "\n", "num_batch", "=", "proto", ".", "shape", "[", "0", "]", "\n", "num_proto", "=", "proto", ".", "shape", "[", "1", "]", "\n", "num_query", "=", "np", ".", "prod", "(", "query_idx", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "\n", "# query: (num_batch, num_query, num_proto, num_emb)", "\n", "# proto: (num_batch, num_proto, num_emb)", "\n", "whole_set", "=", "torch", ".", "cat", "(", "[", "proto", ",", "query", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "]", ",", "1", ")", "\n", "proto", "=", "self", ".", "slf_attn", "(", "proto", ",", "whole_set", ",", "whole_set", ")", "\n", "if", "self", ".", "args", ".", "use_euclidean", ":", "\n", "            ", "query", "=", "query", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", "# (Nbatch*Nq*Nw, 1, d)", "\n", "proto", "=", "proto", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_query", ",", "num_proto", ",", "emb_dim", ")", ".", "contiguous", "(", ")", "\n", "proto", "=", "proto", ".", "view", "(", "num_batch", "*", "num_query", ",", "num_proto", ",", "emb_dim", ")", "# (Nbatch x Nq, Nk, d)", "\n", "\n", "logits", "=", "-", "torch", ".", "sum", "(", "(", "proto", "-", "query", ")", "**", "2", ",", "2", ")", "/", "self", ".", "args", ".", "temperature", "\n", "", "else", ":", "\n", "            ", "proto", "=", "F", ".", "normalize", "(", "proto", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "query", "=", "query", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "# (Nbatch,  Nq*Nw, d)", "\n", "\n", "logits", "=", "torch", ".", "bmm", "(", "query", ",", "proto", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "/", "self", ".", "args", ".", "temperature", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_proto", ")", "\n", "\n", "# for regularization", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "aux_task", "=", "torch", ".", "cat", "(", "[", "support", ".", "view", "(", "1", ",", "self", ".", "args", ".", "shot", ",", "self", ".", "args", ".", "way", ",", "emb_dim", ")", ",", "\n", "query", ".", "view", "(", "1", ",", "self", ".", "args", ".", "query", ",", "self", ".", "args", ".", "way", ",", "emb_dim", ")", "]", ",", "1", ")", "# T x (K+Kq) x N x d", "\n", "num_query", "=", "np", ".", "prod", "(", "aux_task", ".", "shape", "[", "1", ":", "3", "]", ")", "\n", "aux_task", "=", "aux_task", ".", "permute", "(", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "aux_task", "=", "aux_task", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "shot", "+", "self", ".", "args", ".", "query", ",", "emb_dim", ")", "\n", "# apply the transformation over the Aug Task", "\n", "aux_emb", "=", "self", ".", "slf_attn", "(", "aux_task", ",", "aux_task", ",", "aux_task", ")", "# T x N x (K+Kq) x d", "\n", "# compute class mean", "\n", "aux_emb", "=", "aux_emb", ".", "view", "(", "num_batch", ",", "self", ".", "args", ".", "way", ",", "self", ".", "args", ".", "shot", "+", "self", ".", "args", ".", "query", ",", "emb_dim", ")", "\n", "aux_center", "=", "torch", ".", "mean", "(", "aux_emb", ",", "2", ")", "# T x N x d", "\n", "\n", "if", "self", ".", "args", ".", "use_euclidean", ":", "\n", "                ", "aux_task", "=", "aux_task", ".", "permute", "(", "[", "1", ",", "0", ",", "2", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", "# (Nbatch*Nq*Nw, 1, d)", "\n", "aux_center", "=", "aux_center", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_query", ",", "num_proto", ",", "emb_dim", ")", ".", "contiguous", "(", ")", "\n", "aux_center", "=", "aux_center", ".", "view", "(", "num_batch", "*", "num_query", ",", "num_proto", ",", "emb_dim", ")", "# (Nbatch x Nq, Nk, d)", "\n", "\n", "logits_reg", "=", "-", "torch", ".", "sum", "(", "(", "aux_center", "-", "aux_task", ")", "**", "2", ",", "2", ")", "/", "self", ".", "args", ".", "temperature2", "\n", "", "else", ":", "\n", "                ", "aux_center", "=", "F", ".", "normalize", "(", "aux_center", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "aux_task", "=", "aux_task", ".", "permute", "(", "[", "1", ",", "0", ",", "2", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "# (Nbatch,  Nq*Nw, d)", "\n", "\n", "logits_reg", "=", "torch", ".", "bmm", "(", "aux_task", ",", "aux_center", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "/", "self", ".", "args", ".", "temperature2", "\n", "logits_reg", "=", "logits_reg", ".", "view", "(", "-", "1", ",", "num_proto", ")", "\n", "\n", "", "return", "logits", ",", "logits_reg", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.protonet.ProtoNet.__init__": [[12, 14], ["model.models.FewShotModel.__init__"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.protonet.ProtoNet._forward": [[15, 48], ["instance_embs.size", "instance_embs[].view", "instance_embs[].view", "instance_embs[].view.mean", "numpy.prod", "query.view.view.view().unsqueeze", "torch.normalize.unsqueeze().expand", "torch.normalize.contiguous().view", "torch.normalize", "torch.normalize", "torch.normalize", "query.view.view.view", "logits.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "query.view.view.view", "torch.normalize.unsqueeze", "torch.normalize.contiguous", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.normalize.permute", "support_idx.flatten", "query_idx.flatten"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize"], ["", "def", "_forward", "(", "self", ",", "instance_embs", ",", "support_idx", ",", "query_idx", ")", ":", "\n", "        ", "emb_dim", "=", "instance_embs", ".", "size", "(", "-", "1", ")", "\n", "\n", "# organize support/query data", "\n", "support", "=", "instance_embs", "[", "support_idx", ".", "flatten", "(", ")", "]", ".", "view", "(", "*", "(", "support_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "query", "=", "instance_embs", "[", "query_idx", ".", "flatten", "(", ")", "]", ".", "view", "(", "*", "(", "query_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "\n", "# get mean of the support", "\n", "proto", "=", "support", ".", "mean", "(", "dim", "=", "1", ")", "# Ntask x NK x d", "\n", "num_batch", "=", "proto", ".", "shape", "[", "0", "]", "\n", "num_proto", "=", "proto", ".", "shape", "[", "1", "]", "\n", "num_query", "=", "np", ".", "prod", "(", "query_idx", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "\n", "# query: (num_batch, num_query, num_proto, num_emb)", "\n", "# proto: (num_batch, num_proto, num_emb)", "\n", "if", "True", ":", "# self.args.use_euclidean:", "\n", "            ", "query", "=", "query", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", "# (Nbatch*Nq*Nw, 1, d)", "\n", "proto", "=", "proto", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_query", ",", "num_proto", ",", "emb_dim", ")", "\n", "proto", "=", "proto", ".", "contiguous", "(", ")", ".", "view", "(", "num_batch", "*", "num_query", ",", "num_proto", ",", "emb_dim", ")", "# (Nbatch x Nq, Nk, d)", "\n", "\n", "logits", "=", "-", "torch", ".", "sum", "(", "(", "proto", "-", "query", ")", "**", "2", ",", "2", ")", "/", "self", ".", "args", ".", "temperature", "\n", "", "else", ":", "# cosine similarity: more memory efficient", "\n", "            ", "proto", "=", "F", ".", "normalize", "(", "proto", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "query", "=", "query", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "# (Nbatch,  Nq*Nw, d)", "\n", "\n", "# (num_batch,  num_emb, num_proto) * (num_batch, num_query*num_proto, num_emb) -> (num_batch, num_query*num_proto, num_proto)", "\n", "logits", "=", "torch", ".", "bmm", "(", "query", ",", "proto", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "/", "self", ".", "args", ".", "temperature", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_proto", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "return", "logits", ",", "None", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.matchnet.MatchNet.__init__": [[13, 15], ["model.models.FewShotModel.__init__"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.matchnet.MatchNet._forward": [[16, 55], ["instance_embs.size", "instance_embs[].view", "instance_embs[].view", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "numpy.prod", "numpy.prod", "torch.normalize.view", "label_support_onehot.cuda.cuda.unsqueeze().repeat", "torch.normalize", "torch.normalize", "torch.normalize", "query.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "logits.view.view.view", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "model.utils.one_hot", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "torch.arange().repeat().type", "model.utils.one_hot", "label_support_onehot.cuda.cuda.cuda", "torch.normalize.permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "label_support_onehot.cuda.cuda.unsqueeze", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "support_idx.flatten", "query_idx.flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.one_hot", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.one_hot"], ["", "def", "_forward", "(", "self", ",", "instance_embs", ",", "support_idx", ",", "query_idx", ")", ":", "\n", "        ", "emb_dim", "=", "instance_embs", ".", "size", "(", "-", "1", ")", "\n", "\n", "# organize support/query data", "\n", "support", "=", "instance_embs", "[", "support_idx", ".", "flatten", "(", ")", "]", ".", "view", "(", "*", "(", "support_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "query", "=", "instance_embs", "[", "query_idx", ".", "flatten", "(", ")", "]", ".", "view", "(", "*", "(", "query_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "label_support", "=", "torch", ".", "arange", "(", "self", ".", "args", ".", "way", ")", ".", "repeat", "(", "self", ".", "args", ".", "shot", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "label_support_onehot", "=", "one_hot", "(", "label_support", ",", "self", ".", "args", ".", "way", ")", "\n", "", "else", ":", "\n", "            ", "label_support", "=", "torch", ".", "arange", "(", "self", ".", "args", ".", "eval_way", ")", ".", "repeat", "(", "self", ".", "args", ".", "eval_shot", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "label_support_onehot", "=", "one_hot", "(", "label_support", ",", "self", ".", "args", ".", "eval_way", ")", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "label_support_onehot", "=", "label_support_onehot", ".", "cuda", "(", ")", "# KN x N", "\n", "\n", "# get mean of the support", "\n", "", "num_batch", "=", "support", ".", "shape", "[", "0", "]", "\n", "num_way", "=", "support", ".", "shape", "[", "2", "]", "\n", "num_support", "=", "np", ".", "prod", "(", "support", ".", "shape", "[", "1", ":", "3", "]", ")", "\n", "num_query", "=", "np", ".", "prod", "(", "query_idx", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "support", "=", "support", ".", "view", "(", "num_batch", ",", "num_support", ",", "emb_dim", ")", "# Ntask x NK x d", "\n", "label_support_onehot", "=", "label_support_onehot", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "num_batch", ",", "1", ",", "1", ")", "\n", "\n", "# query: (num_batch, num_query, num_proto, num_emb)", "\n", "# proto: (num_batch, num_proto, num_emb)", "\n", "\n", "support", "=", "F", ".", "normalize", "(", "support", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "query", "=", "query", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "# (Nbatch,  Nq*Nw, d)", "\n", "\n", "# (num_batch,  num_emb, num_proto) * (num_batch, num_query*num_proto, num_emb) -> (num_batch, num_query*num_proto, num_proto)", "\n", "logits", "=", "torch", ".", "bmm", "(", "query", ",", "support", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "logits", "=", "torch", ".", "bmm", "(", "logits", ",", "label_support_onehot", ")", "/", "self", ".", "args", ".", "temperature", "# KqN x N", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_way", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "logits", ",", "None", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.featstar.ScaledDotProductAttention.__init__": [[13, 18], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.featstar.ScaledDotProductAttention.forward": [[19, 28], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "featstar.ScaledDotProductAttention.softmax", "featstar.ScaledDotProductAttention.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "k.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "\n", "        ", "attn", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attn", "=", "attn", "/", "self", ".", "temperature", "\n", "log_attn", "=", "F", ".", "log_softmax", "(", "attn", ",", "2", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "attn", ",", "v", ")", "\n", "return", "output", ",", "attn", ",", "log_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.featstar.MultiHeadAttention.__init__": [[32, 51], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "featstar.ScaledDotProductAttention", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_qs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_ks", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_vs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_v", ")", ")", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.featstar.MultiHeadAttention.forward": [[52, 76], ["q.permute().contiguous().view.permute().contiguous().view.size", "k.permute().contiguous().view.permute().contiguous().view.size", "v.permute().contiguous().view.permute().contiguous().view.size", "featstar.MultiHeadAttention.w_qs().view", "featstar.MultiHeadAttention.w_ks().view", "featstar.MultiHeadAttention.w_vs().view", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "featstar.MultiHeadAttention.attention", "featstar.MultiHeadAttention.view", "featstar.MultiHeadAttention.permute().contiguous().view", "featstar.MultiHeadAttention.dropout", "featstar.MultiHeadAttention.layer_norm", "featstar.MultiHeadAttention.fc", "featstar.MultiHeadAttention.w_qs", "featstar.MultiHeadAttention.w_ks", "featstar.MultiHeadAttention.w_vs", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "featstar.MultiHeadAttention.permute().contiguous", "q.permute().contiguous().view.permute().contiguous().view.permute", "k.permute().contiguous().view.permute().contiguous().view.permute", "v.permute().contiguous().view.permute().contiguous().view.permute", "featstar.MultiHeadAttention.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "sz_b", ",", "len_q", ",", "_", "=", "q", ".", "size", "(", ")", "\n", "sz_b", ",", "len_k", ",", "_", "=", "k", ".", "size", "(", ")", "\n", "sz_b", ",", "len_v", ",", "_", "=", "v", ".", "size", "(", ")", "\n", "\n", "residual", "=", "q", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "q", "=", "q", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_q", ",", "d_k", ")", "# (n*b) x lq x dk", "\n", "k", "=", "k", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_k", ",", "d_k", ")", "# (n*b) x lk x dk", "\n", "v", "=", "v", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_v", ",", "d_v", ")", "# (n*b) x lv x dv", "\n", "\n", "output", ",", "attn", ",", "log_attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ")", "\n", "\n", "output", "=", "output", ".", "view", "(", "n_head", ",", "sz_b", ",", "len_q", ",", "d_v", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "-", "1", ")", "# b x lq x (n*dv)", "\n", "\n", "output", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.featstar.FEATSTAR.__init__": [[78, 92], ["model.models.FewShotModel.__init__", "featstar.MultiHeadAttention", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "if", "args", ".", "backbone_class", "==", "'ConvNet'", ":", "\n", "            ", "hdim", "=", "64", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res12'", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res18'", ":", "\n", "            ", "hdim", "=", "512", "\n", "", "elif", "args", ".", "backbone_class", "==", "'WRN'", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "''", ")", "\n", "\n", "", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "1", ",", "hdim", ",", "hdim", ",", "hdim", ",", "dropout", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.featstar.FEATSTAR._forward": [[93, 130], ["instance_embs.size", "instance_embs[].contiguous().view", "instance_embs[].contiguous().view", "instance_embs[].contiguous().view.mean", "numpy.prod", "query.view().unsqueeze.view().unsqueeze.view().unsqueeze", "torch.normalize.unsqueeze().expand().contiguous", "torch.normalize.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "featstar.FEATSTAR.slf_attn", "featstar.FEATSTAR.split", "query.view().unsqueeze.view().unsqueeze.view().unsqueeze", "torch.normalize", "torch.normalize", "torch.normalize", "logits.view.view.view", "instance_embs[].contiguous", "instance_embs[].contiguous", "query.view().unsqueeze.view().unsqueeze.view", "torch.normalize.unsqueeze().expand", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "query.view().unsqueeze.view().unsqueeze.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.normalize.permute", "torch.normalize.unsqueeze", "support_idx.contiguous().view", "query_idx.contiguous().view", "support_idx.contiguous", "query_idx.contiguous"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize"], ["", "def", "_forward", "(", "self", ",", "instance_embs", ",", "support_idx", ",", "query_idx", ")", ":", "\n", "        ", "emb_dim", "=", "instance_embs", ".", "size", "(", "-", "1", ")", "\n", "\n", "# organize support/query data", "\n", "support", "=", "instance_embs", "[", "support_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "*", "(", "support_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "query", "=", "instance_embs", "[", "query_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "*", "(", "query_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "\n", "# get mean of the support", "\n", "proto", "=", "support", ".", "mean", "(", "dim", "=", "1", ")", "# Ntask x NK x d", "\n", "num_batch", "=", "proto", ".", "shape", "[", "0", "]", "\n", "num_proto", "=", "proto", ".", "shape", "[", "1", "]", "\n", "num_query", "=", "np", ".", "prod", "(", "query_idx", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "\n", "# query: (num_batch, num_query, num_proto, num_emb)", "\n", "# proto: (num_batch, num_proto, num_emb)", "\n", "query", "=", "query", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "proto", "=", "proto", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_query", ",", "num_proto", ",", "emb_dim", ")", ".", "contiguous", "(", ")", "\n", "proto", "=", "proto", ".", "view", "(", "num_batch", "*", "num_query", ",", "num_proto", ",", "emb_dim", ")", "\n", "\n", "# refine by Transformer", "\n", "combined", "=", "torch", ".", "cat", "(", "[", "proto", ",", "query", "]", ",", "1", ")", "# Nk x (N + 1) x d, batch_size = NK", "\n", "combined", "=", "self", ".", "slf_attn", "(", "combined", ",", "combined", ",", "combined", ")", "\n", "# compute distance for all batches", "\n", "proto", ",", "query", "=", "combined", ".", "split", "(", "num_proto", ",", "1", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_euclidean", ":", "\n", "            ", "query", "=", "query", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", "# (Nbatch*Nq*Nw, 1, d)", "\n", "\n", "logits", "=", "-", "torch", ".", "sum", "(", "(", "proto", "-", "query", ")", "**", "2", ",", "2", ")", "/", "self", ".", "args", ".", "temperature", "\n", "", "else", ":", "# cosine similarity: more memory efficient", "\n", "            ", "proto", "=", "F", ".", "normalize", "(", "proto", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "\n", "logits", "=", "torch", ".", "bmm", "(", "query", ",", "proto", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "/", "self", ".", "args", ".", "temperature", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_proto", ")", "\n", "\n", "", "return", "logits", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.bilstm.BidirectionalLSTM.__init__": [[10, 26], ["torch.Module.__init__", "len", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layer_sizes", ",", "vector_dim", ")", ":", "\n", "        ", "super", "(", "BidirectionalLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        Initializes a multi layer bidirectional LSTM\n        :param layer_sizes: A list containing the neuron numbers per layer \n                            e.g. [100, 100, 100] returns a 3 layer, 100\n        :param batch_size: The experiments batch size\n        \"\"\"", "\n", "self", ".", "hidden_size", "=", "layer_sizes", "[", "0", "]", "\n", "self", ".", "vector_dim", "=", "vector_dim", "\n", "self", ".", "num_layers", "=", "len", "(", "layer_sizes", ")", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "self", ".", "vector_dim", ",", "\n", "num_layers", "=", "self", ".", "num_layers", ",", "\n", "hidden_size", "=", "self", ".", "hidden_size", ",", "\n", "bidirectional", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.bilstm.BidirectionalLSTM.forward": [[27, 44], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "bilstm.BidirectionalLSTM.lstm", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "c0.cuda.cuda.cuda", "h0.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        Runs the bidirectional LSTM, produces outputs and saves both forward and backward states as well as gradients.\n        :param x: The inputs should be a list of shape [sequence_length, batch_size, 64]\n        :return: Returns the LSTM outputs, as well as the forward and backward hidden states.\n        \"\"\"", "\n", "c0", "=", "Variable", "(", "torch", ".", "rand", "(", "self", ".", "lstm", ".", "num_layers", "*", "2", ",", "batch_size", ",", "self", ".", "lstm", ".", "hidden_size", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "h0", "=", "Variable", "(", "torch", ".", "rand", "(", "self", ".", "lstm", ".", "num_layers", "*", "2", ",", "batch_size", ",", "self", ".", "lstm", ".", "hidden_size", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "c0", "=", "c0", ".", "cuda", "(", ")", "\n", "h0", "=", "h0", ".", "cuda", "(", ")", "\n", "", "output", ",", "(", "hn", ",", "cn", ")", "=", "self", ".", "lstm", "(", "inputs", ",", "(", "h0", ",", "c0", ")", ")", "\n", "# residual addition", "\n", "output", "=", "output", "+", "inputs", "\n", "return", "output", "# , hn, cn", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.bilstm.BILSTM.__init__": [[47, 62], ["model.models.FewShotModel.__init__", "bilstm.BidirectionalLSTM", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "if", "args", ".", "backbone_class", "==", "'ConvNet'", ":", "\n", "            ", "hdim", "=", "64", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res12'", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res18'", ":", "\n", "            ", "hdim", "=", "512", "\n", "", "elif", "args", ".", "backbone_class", "==", "'WRN'", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "''", ")", "\n", "\n", "", "self", ".", "bilstm", "=", "BidirectionalLSTM", "(", "layer_sizes", "=", "[", "hdim", "//", "2", "]", ",", "\n", "vector_dim", "=", "hdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.bilstm.BILSTM._forward": [[63, 123], ["instance_embs.size", "instance_embs[].contiguous().view", "instance_embs[].contiguous().view", "instance_embs[].contiguous().view.mean", "numpy.prod", "bilstm.BILSTM.bilstm", "torch.normalize.permute", "torch.normalize.permute", "query.view.view.view().unsqueeze", "torch.normalize.unsqueeze().expand().contiguous", "torch.normalize.view", "torch.normalize", "torch.normalize", "torch.normalize", "query.view.view.view", "logits.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.prod", "aux_task.contiguous().view.contiguous().view.permute", "aux_task.contiguous().view.contiguous().view.contiguous().view", "bilstm.BILSTM.bilstm", "aux_emb.view.view.permute", "aux_emb.view.view.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "instance_embs[].contiguous", "instance_embs[].contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "aux_task.contiguous().view.contiguous().view.permute", "aux_task.contiguous().view.contiguous().view.contiguous().view().unsqueeze", "torch.normalize.unsqueeze().expand().contiguous", "torch.normalize.view", "torch.normalize", "torch.normalize", "torch.normalize", "aux_task.contiguous().view.contiguous().view.contiguous().view", "logits_reg.view.view.view", "query.view.view.view", "torch.normalize.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.normalize.permute", "instance_embs[].contiguous().view.view", "query.view.view.view", "aux_task.contiguous().view.contiguous().view.contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "aux_task.contiguous().view.contiguous().view.contiguous().view", "torch.normalize.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "aux_task.contiguous().view.contiguous().view.contiguous", "torch.normalize.permute", "torch.normalize.unsqueeze", "support_idx.contiguous().view", "query_idx.contiguous().view", "aux_task.contiguous().view.contiguous().view.contiguous", "torch.normalize.unsqueeze", "support_idx.contiguous", "query_idx.contiguous"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize"], ["", "def", "_forward", "(", "self", ",", "instance_embs", ",", "support_idx", ",", "query_idx", ")", ":", "\n", "        ", "emb_dim", "=", "instance_embs", ".", "size", "(", "-", "1", ")", "\n", "\n", "# organize support/query data", "\n", "support", "=", "instance_embs", "[", "support_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "*", "(", "support_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "query", "=", "instance_embs", "[", "query_idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "]", ".", "contiguous", "(", ")", ".", "view", "(", "*", "(", "query_idx", ".", "shape", "+", "(", "-", "1", ",", ")", ")", ")", "\n", "\n", "# get mean of the support", "\n", "proto", "=", "support", ".", "mean", "(", "dim", "=", "1", ")", "# Ntask x NK x d", "\n", "num_batch", "=", "proto", ".", "shape", "[", "0", "]", "\n", "num_proto", "=", "proto", ".", "shape", "[", "1", "]", "\n", "num_query", "=", "np", ".", "prod", "(", "query_idx", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "\n", "# query: (num_batch, num_query, num_proto, num_emb)", "\n", "# proto: (num_batch, num_proto, num_emb)", "\n", "proto", "=", "self", ".", "bilstm", "(", "proto", ".", "permute", "(", "[", "1", ",", "0", ",", "2", "]", ")", ",", "num_batch", ")", "\n", "proto", "=", "proto", ".", "permute", "(", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "if", "self", ".", "args", ".", "use_euclidean", ":", "\n", "            ", "query", "=", "query", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", "# (Nbatch*Nq*Nw, 1, d)", "\n", "proto", "=", "proto", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_query", ",", "num_proto", ",", "emb_dim", ")", ".", "contiguous", "(", ")", "\n", "proto", "=", "proto", ".", "view", "(", "num_batch", "*", "num_query", ",", "num_proto", ",", "emb_dim", ")", "# (Nbatch x Nq, Nk, d)", "\n", "\n", "logits", "=", "-", "torch", ".", "sum", "(", "(", "proto", "-", "query", ")", "**", "2", ",", "2", ")", "/", "self", ".", "args", ".", "temperature", "\n", "", "else", ":", "\n", "            ", "proto", "=", "F", ".", "normalize", "(", "proto", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "query", "=", "query", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "# (Nbatch,  Nq*Nw, d)", "\n", "\n", "logits", "=", "torch", ".", "bmm", "(", "query", ",", "proto", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "/", "self", ".", "args", ".", "temperature", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_proto", ")", "\n", "\n", "# for regularization", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "aux_task", "=", "torch", ".", "cat", "(", "[", "support", ".", "view", "(", "1", ",", "self", ".", "args", ".", "shot", ",", "self", ".", "args", ".", "way", ",", "emb_dim", ")", ",", "\n", "query", ".", "view", "(", "1", ",", "self", ".", "args", ".", "query", ",", "self", ".", "args", ".", "way", ",", "emb_dim", ")", "]", ",", "1", ")", "# T x (K+Kq) x N x d", "\n", "num_query", "=", "np", ".", "prod", "(", "aux_task", ".", "shape", "[", "1", ":", "3", "]", ")", "\n", "aux_task", "=", "aux_task", ".", "permute", "(", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "aux_task", "=", "aux_task", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "shot", "+", "self", ".", "args", ".", "query", ",", "emb_dim", ")", "\n", "# apply the transformation over the Aug Task", "\n", "aux_emb", "=", "self", ".", "bilstm", "(", "aux_task", ".", "permute", "(", "[", "1", ",", "0", ",", "2", "]", ")", ",", "num_batch", "*", "self", ".", "args", ".", "way", ")", "# T x N x (K+Kq) x d", "\n", "aux_emb", "=", "aux_emb", ".", "permute", "(", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "# compute class mean", "\n", "aux_emb", "=", "aux_emb", ".", "view", "(", "num_batch", ",", "self", ".", "args", ".", "way", ",", "self", ".", "args", ".", "shot", "+", "self", ".", "args", ".", "query", ",", "emb_dim", ")", "\n", "aux_center", "=", "torch", ".", "mean", "(", "aux_emb", ",", "2", ")", "# T x N x d", "\n", "\n", "if", "self", ".", "args", ".", "use_euclidean", ":", "\n", "                ", "aux_task", "=", "aux_task", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "emb_dim", ")", ".", "unsqueeze", "(", "1", ")", "# (Nbatch*Nq*Nw, 1, d)", "\n", "aux_center", "=", "aux_center", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_query", ",", "num_proto", ",", "emb_dim", ")", ".", "contiguous", "(", ")", "\n", "aux_center", "=", "aux_center", ".", "view", "(", "num_batch", "*", "num_query", ",", "num_proto", ",", "emb_dim", ")", "# (Nbatch x Nq, Nk, d)", "\n", "\n", "logits_reg", "=", "-", "torch", ".", "sum", "(", "(", "aux_center", "-", "aux_task", ")", "**", "2", ",", "2", ")", "/", "self", ".", "args", ".", "temperature2", "\n", "", "else", ":", "\n", "                ", "aux_center", "=", "F", ".", "normalize", "(", "aux_center", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "aux_task", "=", "aux_task", ".", "contiguous", "(", ")", ".", "view", "(", "num_batch", ",", "-", "1", ",", "emb_dim", ")", "# (Nbatch,  Nq*Nw, d)", "\n", "\n", "logits_reg", "=", "torch", ".", "bmm", "(", "aux_task", ",", "aux_center", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ")", "/", "self", ".", "args", ".", "temperature2", "\n", "logits_reg", "=", "logits_reg", ".", "view", "(", "-", "1", ",", "num_proto", ")", "\n", "\n", "", "return", "logits", ",", "logits_reg", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.classifier.Classifier.__init__": [[9, 32], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "ConvNet", "ResNet", "ResNet", "Wide_ResNet", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "if", "args", ".", "backbone_class", "==", "'ConvNet'", ":", "\n", "            ", "from", "model", ".", "networks", ".", "convnet", "import", "ConvNet", "\n", "hdim", "=", "64", "\n", "self", ".", "encoder", "=", "ConvNet", "(", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res12'", ":", "\n", "            ", "hdim", "=", "640", "\n", "from", "model", ".", "networks", ".", "res12", "import", "ResNet", "\n", "self", ".", "encoder", "=", "ResNet", "(", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res18'", ":", "\n", "            ", "hdim", "=", "512", "\n", "from", "model", ".", "networks", ".", "res18", "import", "ResNet", "\n", "self", ".", "encoder", "=", "ResNet", "(", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'WRN'", ":", "\n", "            ", "hdim", "=", "640", "\n", "from", "model", ".", "networks", ".", "WRN28", "import", "Wide_ResNet", "\n", "self", ".", "encoder", "=", "Wide_ResNet", "(", "28", ",", "10", ",", "0.5", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "''", ")", "\n", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hdim", ",", "args", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.classifier.Classifier.forward": [[33, 38], ["classifier.Classifier.encoder", "classifier.Classifier.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "is_emb", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "encoder", "(", "data", ")", "\n", "if", "not", "is_emb", ":", "\n", "            ", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.classifier.Classifier.forward_proto": [[39, 49], ["classifier.Classifier.encoder", "proto.reshape().mean.reshape().mean.reshape().mean", "classifier.Classifier.encoder", "model.utils.euclidean_metric", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.normalize().t", "torch.normalize().t", "torch.normalize().t", "proto.reshape().mean.reshape().mean.reshape", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.euclidean_metric", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.models.graphnet.normalize"], ["", "def", "forward_proto", "(", "self", ",", "data_shot", ",", "data_query", ",", "way", "=", "None", ")", ":", "\n", "        ", "if", "way", "is", "None", ":", "\n", "            ", "way", "=", "self", ".", "args", ".", "num_class", "\n", "", "proto", "=", "self", ".", "encoder", "(", "data_shot", ")", "\n", "proto", "=", "proto", ".", "reshape", "(", "self", ".", "args", ".", "shot", ",", "way", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "query", "=", "self", ".", "encoder", "(", "data_query", ")", "\n", "\n", "logits_dist", "=", "euclidean_metric", "(", "query", ",", "proto", ")", "\n", "logits_sim", "=", "torch", ".", "mm", "(", "query", ",", "F", ".", "normalize", "(", "proto", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ".", "t", "(", ")", ")", "\n", "return", "logits_dist", ",", "logits_sim", "", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.BasicBlock.__init__": [[21, 30], ["torch.Module.__init__", "res18.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "res18.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.conv3x3", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.BasicBlock.forward": [[31, 48], ["res18.BasicBlock.conv1", "res18.BasicBlock.bn1", "res18.BasicBlock.relu", "res18.BasicBlock.conv2", "res18.BasicBlock.bn2", "res18.BasicBlock.relu", "res18.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.Bottleneck.__init__": [[53, 64], ["torch.Module.__init__", "res18.conv1x1", "torch.BatchNorm2d", "res18.conv3x3", "torch.BatchNorm2d", "res18.conv1x1", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.conv1x1", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.conv3x3", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.Bottleneck.forward": [[65, 86], ["res18.Bottleneck.conv1", "res18.Bottleneck.bn1", "res18.Bottleneck.relu", "res18.Bottleneck.conv2", "res18.Bottleneck.bn2", "res18.Bottleneck.relu", "res18.Bottleneck.conv3", "res18.Bottleneck.bn3", "res18.Bottleneck.relu", "res18.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.ResNet.__init__": [[90, 119], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "res18.ResNet._make_layer", "res18.ResNet._make_layer", "res18.ResNet._make_layer", "res18.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "res18.ResNet.modules", "isinstance", "res18.ResNet.modules", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.ResNet._make_layer", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.ResNet._make_layer", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.ResNet._make_layer", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "BasicBlock", ",", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.ResNet._make_layer": [[120, 135], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "res18.conv1x1", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.ResNet.forward": [[136, 150], ["res18.ResNet.conv1", "res18.ResNet.bn1", "res18.ResNet.relu", "res18.ResNet.layer1", "res18.ResNet.layer2", "res18.ResNet.layer3", "res18.ResNet.layer4", "res18.ResNet.avgpool", "x.view.view.view", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.conv3x3": [[7, 11], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.conv1x1": [[13, 16], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.resnet10": [[152, 157], ["res18.ResNet"], "function", ["None"], ["", "", "def", "resnet10", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-10 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.resnet18": [[159, 164], ["res18.ResNet"], "function", ["None"], ["", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.resnet34": [[166, 171], ["res18.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.resnet50": [[173, 178], ["res18.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.resnet101": [[180, 185], ["res18.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res18.resnet152": [[187, 192], ["res18.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.convnet.ConvNet.__init__": [[15, 22], ["torch.Module.__init__", "torch.Sequential", "convnet.conv_block", "convnet.conv_block", "convnet.conv_block", "convnet.conv_block"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.convnet.conv_block", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.convnet.conv_block", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.convnet.conv_block", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.convnet.conv_block"], ["    ", "def", "__init__", "(", "self", ",", "x_dim", "=", "3", ",", "hid_dim", "=", "64", ",", "z_dim", "=", "64", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "conv_block", "(", "x_dim", ",", "hid_dim", ")", ",", "\n", "conv_block", "(", "hid_dim", ",", "hid_dim", ")", ",", "\n", "conv_block", "(", "hid_dim", ",", "hid_dim", ")", ",", "\n", "conv_block", "(", "hid_dim", ",", "z_dim", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.convnet.ConvNet.forward": [[24, 29], ["convnet.ConvNet.encoder", "x.view.view.view", "torch.MaxPool2d", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "x", ")", "\n", "x", "=", "nn", ".", "MaxPool2d", "(", "5", ")", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.convnet.conv_block": [[4, 10], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d"], "function", ["None"], ["def", "conv_block", "(", "in_channels", ",", "out_channels", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.WRN28.wide_basic.__init__": [[23, 35], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.WRN28.wide_basic.forward": [[37, 43], ["WRN28.wide_basic.dropout", "WRN28.wide_basic.conv2", "WRN28.wide_basic.shortcut", "WRN28.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "WRN28.wide_basic.bn2", "WRN28.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.WRN28.Wide_ResNet.__init__": [[45, 61], ["torch.Module.__init__", "int", "print", "WRN28.conv3x3", "WRN28.Wide_ResNet._wide_layer", "WRN28.Wide_ResNet._wide_layer", "WRN28.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.conv3x3", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.WRN28.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.WRN28.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.WRN28.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "6", ")", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.WRN28.Wide_ResNet._wide_layer": [[62, 71], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.WRN28.Wide_ResNet.forward": [[72, 82], ["WRN28.Wide_ResNet.conv1", "WRN28.Wide_ResNet.layer1", "WRN28.Wide_ResNet.layer2", "WRN28.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "WRN28.Wide_ResNet.bn1", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "21", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.WRN28.conv3x3": [[10, 12], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.WRN28.conv_init": [[13, 21], ["classname.find", "torch.xavier_uniform", "torch.constant", "classname.find", "torch.constant", "torch.constant", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.BasicBlock.__init__": [[19, 36], ["torch.Module.__init__", "res12.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "res12.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "res12.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "model.networks.dropblock.DropBlock"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.conv3x3", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.conv3x3", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "drop_rate", "=", "0.0", ",", "drop_block", "=", "False", ",", "block_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "stride", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "num_batches_tracked", "=", "0", "\n", "self", ".", "drop_block", "=", "drop_block", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "DropBlock", "=", "DropBlock", "(", "block_size", "=", "self", ".", "block_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.BasicBlock.forward": [[37, 69], ["res12.BasicBlock.conv1", "res12.BasicBlock.bn1", "res12.BasicBlock.relu", "res12.BasicBlock.conv2", "res12.BasicBlock.bn2", "res12.BasicBlock.relu", "res12.BasicBlock.conv3", "res12.BasicBlock.bn3", "res12.BasicBlock.relu", "res12.BasicBlock.maxpool", "res12.BasicBlock.downsample", "max", "res12.BasicBlock.DropBlock", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "if", "self", ".", "drop_block", "==", "True", ":", "\n", "                ", "feat_size", "=", "out", ".", "size", "(", ")", "[", "2", "]", "\n", "keep_rate", "=", "max", "(", "1.0", "-", "self", ".", "drop_rate", "/", "(", "20", "*", "2000", ")", "*", "(", "self", ".", "num_batches_tracked", ")", ",", "1.0", "-", "self", ".", "drop_rate", ")", "\n", "gamma", "=", "(", "1", "-", "keep_rate", ")", "/", "self", ".", "block_size", "**", "2", "*", "feat_size", "**", "2", "/", "(", "feat_size", "-", "self", ".", "block_size", "+", "1", ")", "**", "2", "\n", "out", "=", "self", ".", "DropBlock", "(", "out", ",", "gamma", "=", "gamma", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "True", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.ResNet.__init__": [[73, 94], ["torch.Module.__init__", "res12.ResNet._make_layer", "res12.ResNet._make_layer", "res12.ResNet._make_layer", "res12.ResNet._make_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "res12.ResNet.modules", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.ResNet._make_layer", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.ResNet._make_layer", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.ResNet._make_layer", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "BasicBlock", ",", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "True", ",", "drop_rate", "=", "0.1", ",", "dropblock_size", "=", "5", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "3", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "160", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "320", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "True", ",", "block_size", "=", "dropblock_size", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "640", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "True", ",", "block_size", "=", "dropblock_size", ")", "\n", "if", "avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "1", ")", "\n", "", "self", ".", "keep_prob", "=", "keep_prob", "\n", "self", ".", "keep_avg_pool", "=", "avg_pool", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "1", "-", "self", ".", "keep_prob", ",", "inplace", "=", "False", ")", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.ResNet._make_layer": [[95, 109], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "stride", "=", "1", ",", "drop_rate", "=", "0.0", ",", "drop_block", "=", "False", ",", "block_size", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "drop_rate", ",", "drop_block", ",", "block_size", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.ResNet.forward": [[110, 119], ["res12.ResNet.layer1", "res12.ResNet.layer2", "res12.ResNet.layer3", "res12.ResNet.layer4", "res12.ResNet.view", "res12.ResNet.avgpool", "res12.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "self", ".", "keep_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.conv3x3": [[10, 14], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.res12.Res12": [[121, 126], ["res12.ResNet"], "function", ["None"], ["", "", "def", "Res12", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.dropblock.DropBlock.__init__": [[8, 12], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", ")", ":", "\n", "        ", "super", "(", "DropBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.dropblock.DropBlock.forward": [[13, 29], ["torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "dropblock.DropBlock._compute_block_mask", "dropblock.DropBlock.sum", "mask.cuda.cuda.cuda", "dropblock.DropBlock.size", "dropblock.DropBlock.size", "dropblock.DropBlock.size", "dropblock.DropBlock.size"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.dropblock.DropBlock._compute_block_mask"], ["", "def", "forward", "(", "self", ",", "x", ",", "gamma", ")", ":", "\n", "# shape: (bsize, channels, height, width)", "\n", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "bernoulli", "=", "Bernoulli", "(", "gamma", ")", "\n", "mask", "=", "bernoulli", ".", "sample", "(", "(", "batch_size", ",", "channels", ",", "height", "-", "(", "self", ".", "block_size", "-", "1", ")", ",", "width", "-", "(", "self", ".", "block_size", "-", "1", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "mask", "=", "mask", ".", "cuda", "(", ")", "\n", "", "block_mask", "=", "self", ".", "_compute_block_mask", "(", "mask", ")", "\n", "countM", "=", "block_mask", ".", "size", "(", ")", "[", "0", "]", "*", "block_mask", ".", "size", "(", ")", "[", "1", "]", "*", "block_mask", ".", "size", "(", ")", "[", "2", "]", "*", "block_mask", ".", "size", "(", ")", "[", "3", "]", "\n", "count_ones", "=", "block_mask", ".", "sum", "(", ")", "\n", "\n", "return", "block_mask", "*", "x", "*", "(", "countM", "/", "count_ones", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.networks.dropblock.DropBlock._compute_block_mask": [[30, 62], ["int", "int", "mask.nonzero", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "offsets.long.long.cuda", "non_zero_idxs.repeat.repeat.repeat", "offsets.long.long.repeat().view", "offsets.long.long.long", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "offsets.long.long.long", "offsets.long.long.repeat", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "", "def", "_compute_block_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "left_padding", "=", "int", "(", "(", "self", ".", "block_size", "-", "1", ")", "/", "2", ")", "\n", "right_padding", "=", "int", "(", "self", ".", "block_size", "/", "2", ")", "\n", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "mask", ".", "shape", "\n", "non_zero_idxs", "=", "mask", ".", "nonzero", "(", ")", "\n", "nr_blocks", "=", "non_zero_idxs", ".", "shape", "[", "0", "]", "\n", "\n", "offsets", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "self", ".", "block_size", ",", "self", ".", "block_size", ")", ".", "reshape", "(", "-", "1", ")", ",", "# - left_padding,", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "repeat", "(", "self", ".", "block_size", ")", ",", "#- left_padding", "\n", "]", "\n", ")", ".", "t", "(", ")", "\n", "offsets", "=", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "self", ".", "block_size", "**", "2", ",", "2", ")", ".", "long", "(", ")", ",", "offsets", ".", "long", "(", ")", ")", ",", "1", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "offsets", "=", "offsets", ".", "cuda", "(", ")", "\n", "\n", "", "if", "nr_blocks", ">", "0", ":", "\n", "            ", "non_zero_idxs", "=", "non_zero_idxs", ".", "repeat", "(", "self", ".", "block_size", "**", "2", ",", "1", ")", "\n", "offsets", "=", "offsets", ".", "repeat", "(", "nr_blocks", ",", "1", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "offsets", "=", "offsets", ".", "long", "(", ")", "\n", "\n", "block_idxs", "=", "non_zero_idxs", "+", "offsets", "\n", "#block_idxs += left_padding", "\n", "padded_mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ")", "\n", "padded_mask", "[", "block_idxs", "[", ":", ",", "0", "]", ",", "block_idxs", "[", ":", ",", "1", "]", ",", "block_idxs", "[", ":", ",", "2", "]", ",", "block_idxs", "[", ":", ",", "3", "]", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "padded_mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ")", "\n", "\n", "", "block_mask", "=", "1", "-", "padded_mask", "#[:height, :width]", "\n", "return", "block_mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.base.Trainer.__init__": [[13, 33], ["model.logger.Logger", "model.utils.Timer", "os.join", "model.utils.Averager", "model.utils.Averager", "model.utils.Averager", "model.utils.Averager"], "methods", ["None"], ["            ", "hdim", "=", "640", "\n", "from", "model", ".", "networks", ".", "res12", "import", "ResNet", "\n", "self", ".", "encoder", "=", "ResNet", "(", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'Res18'", ":", "\n", "            ", "hdim", "=", "512", "\n", "from", "model", ".", "networks", ".", "res18", "import", "ResNet", "\n", "self", ".", "encoder", "=", "ResNet", "(", ")", "\n", "", "elif", "args", ".", "backbone_class", "==", "'WRN'", ":", "\n", "            ", "hdim", "=", "640", "\n", "from", "model", ".", "networks", ".", "WRN28", "import", "Wide_ResNet", "\n", "self", ".", "encoder", "=", "Wide_ResNet", "(", "28", ",", "10", ",", "0.5", ")", "# we set the dropout=0.5 directly here, it may achieve better results by tunning the dropout", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "''", ")", "\n", "\n", "", "", "def", "split_instances", "(", "self", ",", "data", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "(", "torch", ".", "Tensor", "(", "np", ".", "arange", "(", "args", ".", "way", "*", "args", ".", "shot", ")", ")", ".", "long", "(", ")", ".", "view", "(", "1", ",", "args", ".", "shot", ",", "args", ".", "way", ")", ",", "\n", "torch", ".", "Tensor", "(", "np", ".", "arange", "(", "args", ".", "way", "*", "args", ".", "shot", ",", "args", ".", "way", "*", "(", "args", ".", "shot", "+", "args", ".", "query", ")", ")", ")", ".", "long", "(", ")", ".", "view", "(", "1", ",", "args", ".", "query", ",", "args", ".", "way", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "torch", ".", "Tensor", "(", "np", ".", "arange", "(", "args", ".", "eval_way", "*", "args", ".", "eval_shot", ")", ")", ".", "long", "(", ")", ".", "view", "(", "1", ",", "args", ".", "eval_shot", ",", "args", ".", "eval_way", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.base.Trainer.train": [[34, 37], ["None"], "methods", ["None"], ["torch", ".", "Tensor", "(", "np", ".", "arange", "(", "args", ".", "eval_way", "*", "args", ".", "eval_shot", ",", "args", ".", "eval_way", "*", "(", "args", ".", "eval_shot", "+", "args", ".", "eval_query", ")", ")", ")", ".", "long", "(", ")", ".", "view", "(", "1", ",", "args", ".", "eval_query", ",", "args", ".", "eval_way", ")", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "get_feature", "=", "False", ")", ":", "\n", "        ", "if", "get_feature", ":", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.base.Trainer.evaluate": [[38, 41], ["None"], "methods", ["None"], ["# get feature with the provided embeddings", "\n", "            ", "return", "self", ".", "encoder", "(", "x", ")", "\n", "", "else", ":", "\n", "# feature extraction", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.base.Trainer.evaluate_test": [[42, 45], ["None"], "methods", ["None"], ["            ", "x", "=", "x", ".", "squeeze", "(", "0", ")", "\n", "instance_embs", "=", "self", ".", "encoder", "(", "x", ")", "\n", "num_inst", "=", "instance_embs", ".", "shape", "[", "0", "]", "\n", "# split support query set for few-shot data", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.base.Trainer.final_record": [[46, 49], ["None"], "methods", ["None"], ["support_idx", ",", "query_idx", "=", "self", ".", "split_instances", "(", "x", ")", "\n", "if", "self", ".", "training", ":", "\n", "                ", "logits", ",", "logits_reg", "=", "self", ".", "_forward", "(", "instance_embs", ",", "support_idx", ",", "query_idx", ")", "\n", "return", "logits", ",", "logits_reg", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.base.Trainer.try_evaluate": [[50, 63], ["base.Trainer.evaluate", "base.Trainer.logger.add_scalar", "base.Trainer.logger.add_scalar", "print", "float", "float", "base.Trainer.save_model"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.evaluate", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.base.Trainer.save_model"], ["", "else", ":", "\n", "                ", "logits", "=", "self", ".", "_forward", "(", "instance_embs", ",", "support_idx", ",", "query_idx", ")", "\n", "return", "logits", "\n", "\n", "", "", "", "def", "_forward", "(", "self", ",", "x", ",", "support_idx", ",", "query_idx", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Suppose to be implemented by subclass'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.base.Trainer.try_logging": [[64, 86], ["print", "base.Trainer.logger.add_scalar", "base.Trainer.logger.add_scalar", "base.Trainer.logger.add_scalar", "print", "base.Trainer.logger.dump", "tl1.item", "tl2.item", "ta.item", "base.Trainer.logger.add_scalar", "tl1.item", "tl2.item", "ta.item", "tg.item", "base.Trainer.dt.item", "base.Trainer.ft.item", "base.Trainer.bt.item", "base.Trainer.ot.item"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.dump", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item"], []], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.base.Trainer.save_model": [[87, 91], ["torch.save", "dict", "os.join", "base.Trainer.model.state_dict"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.base.Trainer.__str__": [[93, 97], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.helpers.MultiGPUDataloader.__init__": [[18, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataloader", ",", "num_device", ")", ":", "\n", "        ", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "num_device", "=", "num_device", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.helpers.MultiGPUDataloader.__len__": [[22, 24], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataloader", ")", "//", "self", ".", "num_device", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.helpers.MultiGPUDataloader.__iter__": [[25, 41], ["iter", "range", "next", "enumerate", "output_batch[].append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "data_iter", "=", "iter", "(", "self", ".", "dataloader", ")", "\n", "done", "=", "False", "\n", "\n", "while", "not", "done", ":", "\n", "            ", "try", ":", "\n", "                ", "output_batch", "=", "(", "[", "]", ",", "[", "]", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_device", ")", ":", "\n", "                    ", "batch", "=", "next", "(", "data_iter", ")", "\n", "for", "i", ",", "v", "in", "enumerate", "(", "batch", ")", ":", "\n", "                        ", "output_batch", "[", "i", "]", ".", "append", "(", "v", "[", "None", "]", ")", "\n", "\n", "", "", "yield", "(", "torch", ".", "cat", "(", "_", ",", "dim", "=", "0", ")", "for", "_", "in", "output_batch", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "done", "=", "True", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.helpers.get_dataloader": [[42, 92], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "Dataset", "model.dataloader.samplers.CategoriesSampler", "torch.utils.data.DataLoader", "Dataset", "model.dataloader.samplers.CategoriesSampler", "torch.utils.data.DataLoader", "Dataset", "model.dataloader.samplers.CategoriesSampler", "torch.utils.data.DataLoader", "max", "ValueError"], "function", ["None"], ["", "", "def", "get_dataloader", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'MiniImageNet'", ":", "\n", "# Handle MiniImageNet", "\n", "        ", "from", "model", ".", "dataloader", ".", "mini_imagenet", "import", "MiniImageNet", "as", "Dataset", "\n", "", "elif", "args", ".", "dataset", "==", "'CUB'", ":", "\n", "        ", "from", "model", ".", "dataloader", ".", "cub", "import", "CUB", "as", "Dataset", "\n", "", "elif", "args", ".", "dataset", "==", "'TieredImageNet'", ":", "\n", "        ", "from", "model", ".", "dataloader", ".", "tiered_imagenet", "import", "tieredImageNet", "as", "Dataset", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Non-supported Dataset.'", ")", "\n", "\n", "", "num_device", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "num_episodes", "=", "args", ".", "episodes_per_epoch", "*", "num_device", "if", "args", ".", "multi_gpu", "else", "args", ".", "episodes_per_epoch", "\n", "num_workers", "=", "args", ".", "num_workers", "*", "num_device", "if", "args", ".", "multi_gpu", "else", "args", ".", "num_workers", "\n", "trainset", "=", "Dataset", "(", "'train'", ",", "args", ",", "augment", "=", "args", ".", "augment", ")", "\n", "args", ".", "num_class", "=", "trainset", ".", "num_class", "\n", "train_sampler", "=", "CategoriesSampler", "(", "trainset", ".", "label", ",", "\n", "num_episodes", ",", "\n", "max", "(", "args", ".", "way", ",", "args", ".", "num_classes", ")", ",", "\n", "args", ".", "shot", "+", "args", ".", "query", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "trainset", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_sampler", "=", "train_sampler", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "#if args.multi_gpu and num_device > 1:", "\n", "#train_loader = MultiGPUDataloader(train_loader, num_device)", "\n", "#args.way = args.way * num_device", "\n", "\n", "valset", "=", "Dataset", "(", "'val'", ",", "args", ")", "\n", "val_sampler", "=", "CategoriesSampler", "(", "valset", ".", "label", ",", "\n", "args", ".", "num_eval_episodes", ",", "\n", "args", ".", "eval_way", ",", "args", ".", "eval_shot", "+", "args", ".", "eval_query", ")", "\n", "val_loader", "=", "DataLoader", "(", "dataset", "=", "valset", ",", "\n", "batch_sampler", "=", "val_sampler", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "\n", "testset", "=", "Dataset", "(", "'test'", ",", "args", ")", "\n", "test_sampler", "=", "CategoriesSampler", "(", "testset", ".", "label", ",", "\n", "10000", ",", "# args.num_eval_episodes,", "\n", "args", ".", "eval_way", ",", "args", ".", "eval_shot", "+", "args", ".", "eval_query", ")", "\n", "test_loader", "=", "DataLoader", "(", "dataset", "=", "testset", ",", "\n", "batch_sampler", "=", "test_sampler", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.helpers.prepare_model": [[93, 119], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "model.to.to", "eval", "model.to.state_dict", "print", "model.state_dict.update", "model.to.load_state_dict", "torch.DataParallel", "model.to.to", "model.to.to", "torch.load", "torch.load", "torch.load", "pretrained_dict.keys", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "pretrained_dict.items", "pretrained_dict.items"], "function", ["None"], ["", "def", "prepare_model", "(", "args", ")", ":", "\n", "    ", "model", "=", "eval", "(", "args", ".", "model_class", ")", "(", "args", ")", "\n", "\n", "# load pre-trained model (no FC weights)", "\n", "if", "args", ".", "init_weights", "is", "not", "None", ":", "\n", "        ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "args", ".", "init_weights", ")", "[", "'params'", "]", "\n", "if", "args", ".", "backbone_class", "==", "'ConvNet'", ":", "\n", "            ", "pretrained_dict", "=", "{", "'encoder.'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "}", "\n", "", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "print", "(", "pretrained_dict", ".", "keys", "(", ")", ")", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "if", "args", ".", "multi_gpu", ":", "\n", "        ", "model", ".", "encoder", "=", "nn", ".", "DataParallel", "(", "model", ".", "encoder", ",", "dim", "=", "0", ")", "\n", "para_model", "=", "model", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "para_model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "return", "model", ",", "para_model", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.helpers.prepare_optimizer": [[120, 162], ["torch.Adam", "torch.SGD", "torch.lr_scheduler.StepLR", "model.named_parameters", "torch.lr_scheduler.MultiStepLR", "int", "torch.lr_scheduler.CosineAnnealingLR", "ValueError", "model.encoder.parameters", "model.encoder.parameters", "int", "args.step_size.split"], "function", ["None"], ["", "def", "prepare_optimizer", "(", "model", ",", "args", ")", ":", "\n", "    ", "top_para", "=", "[", "v", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "if", "'encoder'", "not", "in", "k", "]", "\n", "# as in the literature, we use ADAM for ConvNet and SGD for other backbones", "\n", "if", "args", ".", "backbone_class", "==", "'ConvNet'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "[", "{", "'params'", ":", "model", ".", "encoder", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "top_para", ",", "'lr'", ":", "args", ".", "lr", "*", "args", ".", "lr_mul", "}", "]", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "# weight_decay=args.weight_decay, do not use weight_decay here", "\n", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "\n", "[", "{", "'params'", ":", "model", ".", "encoder", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "top_para", ",", "'lr'", ":", "args", ".", "lr", "*", "args", ".", "lr_mul", "}", "]", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "mom", ",", "\n", "nesterov", "=", "True", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", "\n", ")", "\n", "\n", "", "if", "args", ".", "lr_scheduler", "==", "'step'", ":", "\n", "        ", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "optimizer", ",", "\n", "step_size", "=", "int", "(", "args", ".", "step_size", ")", ",", "\n", "gamma", "=", "args", ".", "gamma", "\n", ")", "\n", "", "elif", "args", ".", "lr_scheduler", "==", "'multistep'", ":", "\n", "        ", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "\n", "milestones", "=", "[", "int", "(", "_", ")", "for", "_", "in", "args", ".", "step_size", ".", "split", "(", "','", ")", "]", ",", "\n", "gamma", "=", "args", ".", "gamma", ",", "\n", ")", "\n", "", "elif", "args", ".", "lr_scheduler", "==", "'cosine'", ":", "\n", "        ", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "\n", "args", ".", "max_epoch", ",", "\n", "eta_min", "=", "0", "# a tuning parameter", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'No Such Scheduler'", ")", "\n", "\n", "", "return", "optimizer", ",", "lr_scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__": [[22, 28], ["model.trainer.base.Trainer.__init__", "model.trainer.helpers.get_dataloader", "model.trainer.helpers.prepare_model", "model.trainer.helpers.prepare_optimizer"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.__init__", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.helpers.get_dataloader", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.helpers.prepare_model", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.helpers.prepare_optimizer"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "\n", "self", ".", "train_loader", ",", "self", ".", "val_loader", ",", "self", ".", "test_loader", "=", "get_dataloader", "(", "args", ")", "\n", "self", ".", "model", ",", "self", ".", "para_model", "=", "prepare_model", "(", "args", ")", "\n", "self", ".", "optimizer", ",", "self", ".", "lr_scheduler", "=", "prepare_optimizer", "(", "self", ".", "model", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.prepare_label": [[29, 44], ["torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "label.cuda.cuda.type", "label_aux.cuda.cuda.type", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "label.cuda.cuda.cuda", "label_aux.cuda.cuda.cuda", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "prepare_label", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "\n", "# prepare one-hot label", "\n", "label", "=", "torch", ".", "arange", "(", "args", ".", "way", ",", "dtype", "=", "torch", ".", "int16", ")", ".", "repeat", "(", "args", ".", "query", ")", "\n", "label_aux", "=", "torch", ".", "arange", "(", "args", ".", "way", ",", "dtype", "=", "torch", ".", "int8", ")", ".", "repeat", "(", "args", ".", "shot", "+", "args", ".", "query", ")", "\n", "\n", "label", "=", "label", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "label_aux", "=", "label_aux", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "label", "=", "label", ".", "cuda", "(", ")", "\n", "label_aux", "=", "label_aux", ".", "cuda", "(", ")", "\n", "\n", "", "return", "label", ",", "label_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.train": [[45, 114], ["fsl_trainer.FSLTrainer.model.train", "fsl_trainer.FSLTrainer.prepare_label", "range", "torch.save", "torch.save", "torch.save", "torch.save", "fsl_trainer.FSLTrainer.save_model", "fsl_trainer.FSLTrainer.model.encoder.eval", "fsl_trainer.FSLTrainer.model.train", "model.utils.Averager", "model.utils.Averager", "model.utils.Averager", "time.time", "fsl_trainer.FSLTrainer.lr_scheduler.step", "fsl_trainer.FSLTrainer.try_evaluate", "print", "os.join", "fsl_trainer.FSLTrainer.model.encoder.eval", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "time.time", "fsl_trainer.FSLTrainer.dt.add", "fsl_trainer.FSLTrainer.para_model", "model.utils.Averager.add", "time.time", "fsl_trainer.FSLTrainer.ft.add", "model.utils.count_acc", "model.utils.Averager.add", "model.utils.Averager.add", "fsl_trainer.FSLTrainer.optimizer.zero_grad", "torch.cross_entropy.backward", "time.time", "fsl_trainer.FSLTrainer.bt.add", "fsl_trainer.FSLTrainer.optimizer.step", "time.time", "fsl_trainer.FSLTrainer.ot.add", "time.time", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy.item", "fsl_trainer.FSLTrainer.timer.measure", "fsl_trainer.FSLTrainer.timer.measure", "_.cuda", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.train", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.prepare_label", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.base.Trainer.save_model", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.train", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.base.Trainer.try_evaluate", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.add", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.add", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.add", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.count_acc", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.add", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.add", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.add", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.add", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Timer.measure", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Timer.measure"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "args", ".", "fix_BN", ":", "\n", "            ", "self", ".", "model", ".", "encoder", ".", "eval", "(", ")", "\n", "\n", "# start FSL training", "\n", "", "label", ",", "label_aux", "=", "self", ".", "prepare_label", "(", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "self", ".", "train_epoch", "+=", "1", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "args", ".", "fix_BN", ":", "\n", "                ", "self", ".", "model", ".", "encoder", ".", "eval", "(", ")", "\n", "\n", "", "tl1", "=", "Averager", "(", ")", "\n", "tl2", "=", "Averager", "(", ")", "\n", "ta", "=", "Averager", "(", ")", "\n", "\n", "start_tm", "=", "time", ".", "time", "(", ")", "\n", "for", "batch", "in", "self", ".", "train_loader", ":", "\n", "                ", "self", ".", "train_step", "+=", "1", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "data", ",", "gt_label", "=", "[", "_", ".", "cuda", "(", ")", "for", "_", "in", "batch", "]", "\n", "", "else", ":", "\n", "                    ", "data", ",", "gt_label", "=", "batch", "[", "0", "]", ",", "batch", "[", "1", "]", "\n", "\n", "", "data_tm", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "dt", ".", "add", "(", "data_tm", "-", "start_tm", ")", "\n", "\n", "# get saved centers", "\n", "logits", ",", "reg_logits", "=", "self", ".", "para_model", "(", "data", ")", "\n", "if", "reg_logits", "is", "not", "None", ":", "\n", "                    ", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "label", ")", "\n", "total_loss", "=", "loss", "+", "args", ".", "balance", "*", "F", ".", "cross_entropy", "(", "reg_logits", ",", "label_aux", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "label", ")", "\n", "total_loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "label", ")", "\n", "\n", "", "tl2", ".", "add", "(", "loss", ")", "\n", "forward_tm", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "ft", ".", "add", "(", "forward_tm", "-", "data_tm", ")", "\n", "acc", "=", "count_acc", "(", "logits", ",", "label", ")", "\n", "\n", "tl1", ".", "add", "(", "total_loss", ".", "item", "(", ")", ")", "\n", "ta", ".", "add", "(", "acc", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "backward_tm", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "bt", ".", "add", "(", "backward_tm", "-", "forward_tm", ")", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "optimizer_tm", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "ot", ".", "add", "(", "optimizer_tm", "-", "backward_tm", ")", "\n", "\n", "# refresh start_tm", "\n", "start_tm", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "self", ".", "try_evaluate", "(", "epoch", ")", "\n", "\n", "print", "(", "'ETA:{}/{}'", ".", "format", "(", "\n", "self", ".", "timer", ".", "measure", "(", ")", ",", "\n", "self", ".", "timer", ".", "measure", "(", "self", ".", "train_epoch", "/", "args", ".", "max_epoch", ")", ")", "\n", ")", "\n", "\n", "", "torch", ".", "save", "(", "self", ".", "trlog", ",", "osp", ".", "join", "(", "args", ".", "save_path", ",", "'trlog'", ")", ")", "\n", "self", ".", "save_model", "(", "'epoch-last'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.evaluate": [[115, 152], ["fsl_trainer.FSLTrainer.model.eval", "numpy.zeros", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "label.cuda.cuda.type", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "model.utils.compute_confidence_interval", "model.utils.compute_confidence_interval", "fsl_trainer.FSLTrainer.model.train", "label.cuda.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "fsl_trainer.FSLTrainer.model.encoder.eval", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "fsl_trainer.FSLTrainer.model", "torch.cross_entropy", "torch.cross_entropy", "model.utils.count_acc", "torch.cross_entropy.item", "_.cuda"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.compute_confidence_interval", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.compute_confidence_interval", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.train", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.count_acc", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item"], ["", "def", "evaluate", "(", "self", ",", "data_loader", ")", ":", "\n", "# restore model args", "\n", "        ", "args", "=", "self", ".", "args", "\n", "# evaluation mode", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "record", "=", "np", ".", "zeros", "(", "(", "args", ".", "num_eval_episodes", ",", "2", ")", ")", "# loss and acc", "\n", "label", "=", "torch", ".", "arange", "(", "args", ".", "eval_way", ",", "dtype", "=", "torch", ".", "int16", ")", ".", "repeat", "(", "args", ".", "eval_query", ")", "\n", "label", "=", "label", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "label", "=", "label", ".", "cuda", "(", ")", "\n", "", "print", "(", "'best epoch {}, best val acc={:.4f} + {:.4f}'", ".", "format", "(", "\n", "self", ".", "trlog", "[", "'max_acc_epoch'", "]", ",", "\n", "self", ".", "trlog", "[", "'max_acc'", "]", ",", "\n", "self", ".", "trlog", "[", "'max_acc_interval'", "]", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch", "in", "enumerate", "(", "data_loader", ",", "1", ")", ":", "\n", "                ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "data", ",", "_", "=", "[", "_", ".", "cuda", "(", ")", "for", "_", "in", "batch", "]", "\n", "", "else", ":", "\n", "                    ", "data", "=", "batch", "[", "0", "]", "\n", "\n", "", "logits", "=", "self", ".", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "label", ")", "\n", "acc", "=", "count_acc", "(", "logits", ",", "label", ")", "\n", "record", "[", "i", "-", "1", ",", "0", "]", "=", "loss", ".", "item", "(", ")", "\n", "record", "[", "i", "-", "1", ",", "1", "]", "=", "acc", "\n", "\n", "", "", "assert", "(", "i", "==", "record", ".", "shape", "[", "0", "]", ")", "\n", "vl", ",", "_", "=", "compute_confidence_interval", "(", "record", "[", ":", ",", "0", "]", ")", "\n", "va", ",", "vap", "=", "compute_confidence_interval", "(", "record", "[", ":", ",", "1", "]", ")", "\n", "\n", "# train mode", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "args", ".", "fix_BN", ":", "\n", "            ", "self", ".", "model", ".", "encoder", ".", "eval", "(", ")", "\n", "\n", "", "return", "vl", ",", "va", ",", "vap", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.evaluate_test": [[153, 197], ["fsl_trainer.FSLTrainer.model.load_state_dict", "fsl_trainer.FSLTrainer.model.eval", "numpy.zeros", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "label.cuda.cuda.type", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "model.utils.compute_confidence_interval", "model.utils.compute_confidence_interval", "print", "print", "label.cuda.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "torch.load", "torch.load", "torch.load", "torch.load", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "enumerate", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "fsl_trainer.FSLTrainer.model", "torch.cross_entropy", "torch.cross_entropy", "model.utils.count_acc", "torch.cross_entropy.item", "os.join", "_.cuda"], "methods", ["home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.compute_confidence_interval", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.compute_confidence_interval", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.count_acc", "home.repos.pwc.inspect_result.Sha-Lab_FEAT.model.utils.Averager.item"], ["", "def", "evaluate_test", "(", "self", ")", ":", "\n", "# restore model args", "\n", "        ", "args", "=", "self", ".", "args", "\n", "# evaluation mode", "\n", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "osp", ".", "join", "(", "self", ".", "args", ".", "save_path", ",", "'max_acc.pth'", ")", ")", "[", "'params'", "]", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "record", "=", "np", ".", "zeros", "(", "(", "10000", ",", "2", ")", ")", "# loss and acc", "\n", "label", "=", "torch", ".", "arange", "(", "args", ".", "eval_way", ",", "dtype", "=", "torch", ".", "int16", ")", ".", "repeat", "(", "args", ".", "eval_query", ")", "\n", "label", "=", "label", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "label", "=", "label", ".", "cuda", "(", ")", "\n", "", "print", "(", "'best epoch {}, best val acc={:.4f} + {:.4f}'", ".", "format", "(", "\n", "self", ".", "trlog", "[", "'max_acc_epoch'", "]", ",", "\n", "self", ".", "trlog", "[", "'max_acc'", "]", ",", "\n", "self", ".", "trlog", "[", "'max_acc_interval'", "]", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "self", ".", "test_loader", ",", "1", ")", ")", ":", "\n", "                ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "data", ",", "_", "=", "[", "_", ".", "cuda", "(", ")", "for", "_", "in", "batch", "]", "\n", "", "else", ":", "\n", "                    ", "data", "=", "batch", "[", "0", "]", "\n", "\n", "", "logits", "=", "self", ".", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "label", ")", "\n", "acc", "=", "count_acc", "(", "logits", ",", "label", ")", "\n", "record", "[", "i", "-", "1", ",", "0", "]", "=", "loss", ".", "item", "(", ")", "\n", "record", "[", "i", "-", "1", ",", "1", "]", "=", "acc", "\n", "", "", "assert", "(", "i", "==", "record", ".", "shape", "[", "0", "]", ")", "\n", "vl", ",", "_", "=", "compute_confidence_interval", "(", "record", "[", ":", ",", "0", "]", ")", "\n", "va", ",", "vap", "=", "compute_confidence_interval", "(", "record", "[", ":", ",", "1", "]", ")", "\n", "\n", "self", ".", "trlog", "[", "'test_acc'", "]", "=", "va", "\n", "self", ".", "trlog", "[", "'test_acc_interval'", "]", "=", "vap", "\n", "self", ".", "trlog", "[", "'test_loss'", "]", "=", "vl", "\n", "\n", "print", "(", "'best epoch {}, best val acc={:.4f} + {:.4f}\\n'", ".", "format", "(", "\n", "self", ".", "trlog", "[", "'max_acc_epoch'", "]", ",", "\n", "self", ".", "trlog", "[", "'max_acc'", "]", ",", "\n", "self", ".", "trlog", "[", "'max_acc_interval'", "]", ")", ")", "\n", "print", "(", "'Test acc={:.4f} + {:.4f}\\n'", ".", "format", "(", "\n", "self", ".", "trlog", "[", "'test_acc'", "]", ",", "\n", "self", ".", "trlog", "[", "'test_acc_interval'", "]", ")", ")", "\n", "\n", "return", "vl", ",", "va", ",", "vap", "\n", "\n"]], "home.repos.pwc.inspect_result.Sha-Lab_FEAT.trainer.fsl_trainer.FSLTrainer.final_record": [[198, 209], ["open", "f.write", "f.write", "os.join"], "methods", ["None"], ["", "def", "final_record", "(", "self", ")", ":", "\n", "# save the best performance in a txt file", "\n", "\n", "        ", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "args", ".", "save_path", ",", "'{}+{}'", ".", "format", "(", "self", ".", "trlog", "[", "'test_acc'", "]", ",", "self", ".", "trlog", "[", "'test_acc_interval'", "]", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "'best epoch {}, best val acc={:.4f} + {:.4f}\\n'", ".", "format", "(", "\n", "self", ".", "trlog", "[", "'max_acc_epoch'", "]", ",", "\n", "self", ".", "trlog", "[", "'max_acc'", "]", ",", "\n", "self", ".", "trlog", "[", "'max_acc_interval'", "]", ")", ")", "\n", "f", ".", "write", "(", "'Test acc={:.4f} + {:.4f}\\n'", ".", "format", "(", "\n", "self", ".", "trlog", "[", "'test_acc'", "]", ",", "\n", "self", ".", "trlog", "[", "'test_acc_interval'", "]", ")", ")", "", "", "", "", ""]]}