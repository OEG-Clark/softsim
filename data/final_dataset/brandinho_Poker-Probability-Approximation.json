{"home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerProbabilities.fetchProbabilityArray": [[12, 50], ["numpy.ones", "len", "pokerCombinatorics.findHandStatus", "pokerCombinatorics.calcProbs"], "function", ["home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.findHandStatus", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.calcProbs"], ["def", "fetchProbabilityArray", "(", "hand", ",", "table", ",", "currentHandRank", ")", ":", "\n", "    ", "\"\"\"\n    the array has the following probabilities:\n        [straight flush, four of a kind, full house, flush, straight, three of a kind, two pair, pair]\n    \"\"\"", "\n", "\n", "rankTypes", "=", "[", "\"Pair\"", ",", "\"Two Pair\"", ",", "\"Three of a Kind\"", ",", "\"Straight\"", ",", "\"Flush\"", ",", "\"Full House\"", ",", "\"Four of a Kind\"", ",", "\"Straight Flush\"", "]", "\n", "probabilityArray", "=", "np", ".", "ones", "(", "8", ")", "\n", "\n", "numCardsOnTable", "=", "len", "(", "table", ")", "\n", "if", "numCardsOnTable", "==", "0", ":", "\n", "        ", "cardsOnTable", "=", "\"PreFlop\"", "\n", "", "elif", "numCardsOnTable", "==", "3", ":", "\n", "        ", "cardsOnTable", "=", "\"Flop\"", "\n", "", "elif", "numCardsOnTable", "==", "4", ":", "\n", "        ", "cardsOnTable", "=", "\"Turn\"", "\n", "", "elif", "numCardsOnTable", "==", "5", ":", "\n", "        ", "cardsOnTable", "=", "\"River\"", "\n", "\n", "", "handStatus", "=", "findHandStatus", "(", "hand", ",", "table", ")", "\n", "\n", "if", "cardsOnTable", "==", "\"River\"", ":", "\n", "        ", "probabilityArray", "[", ":", "(", "currentHandRank", "-", "1", ")", "]", "=", "0", "\n", "", "else", ":", "\n", "        ", "if", "currentHandRank", "==", "1", ":", "\n", "            ", "return", "probabilityArray", "\n", "", "elif", "currentHandRank", "==", "2", ":", "\n", "            ", "probabilityArray", "[", "0", "]", "=", "0", "\n", "return", "probabilityArray", "\n", "", "elif", "currentHandRank", ">=", "3", ":", "\n", "\n", "            ", "index", "=", "currentHandRank", "-", "1", "\n", "tempRankTypes", "=", "rankTypes", "[", "-", "(", "index", ")", ":", "]", "\n", "for", "rank", "in", "tempRankTypes", ":", "\n", "                ", "probabilityArray", "[", "(", "index", "-", "1", ")", "]", "=", "calcProbs", "(", "hand", ",", "rank", ",", "cardsOnTable", ",", "handStatus", ")", "\n", "index", "-=", "1", "\n", "\n", "", "", "", "return", "probabilityArray", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerProbabilities.simulateProbability": [[51, 78], ["numpy.zeros", "range", "deck.shuffleDeck", "numpy.array", "list", "deck.whoWins", "list", "list", "len"], "function", ["home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.shuffleDeck", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.whoWins"], ["", "def", "simulateProbability", "(", "hand", ",", "table", ",", "deck", ",", "simulations", ")", ":", "\n", "    ", "winner_simulation_counter", "=", "0", "\n", "tie_simulation_counter", "=", "0", "\n", "probability_array", "=", "np", ".", "zeros", "(", "(", "simulations", ",", "2", ")", ")", "\n", "for", "sim", "in", "range", "(", "simulations", ")", ":", "\n", "        ", "deck", ".", "shuffleDeck", "(", ")", "\n", "\n", "cards_to_remove", "=", "list", "(", "hand", ")", "+", "table", "\n", "clean_shuffled_deck", "=", "[", "x", "for", "x", "in", "deck", ".", "currentDeck", "if", "x", "not", "in", "list", "(", "cards_to_remove", ")", "]", "\n", "deck", ".", "table", "=", "table", "\n", "\n", "### We are holding our hands constant but randomly selecting a hand for our opponent from the shuffled deck ###", "\n", "\n", "theoretical_hands", "=", "np", ".", "array", "(", "[", "list", "(", "hand", ")", ",", "clean_shuffled_deck", "[", ":", "2", "]", "]", ")", "\n", "clean_shuffled_deck", "=", "clean_shuffled_deck", "[", "2", ":", "]", "\n", "\n", "### We add randomly selected cards to the board from the shuffled deck to complete the river ###", "\n", "\n", "deck", ".", "table", "=", "deck", ".", "table", "+", "clean_shuffled_deck", "[", ":", "(", "5", "-", "len", "(", "table", ")", ")", "]", "\n", "winner", "=", "deck", ".", "whoWins", "(", "theoretical_hands", ")", "[", "1", "]", "\n", "if", "winner", "==", "0", ":", "\n", "            ", "winner_simulation_counter", "+=", "1", "\n", "", "elif", "winner", "==", "None", ":", "\n", "            ", "tie_simulation_counter", "+=", "1", "\n", "", "probability_array", "[", "sim", ",", "0", "]", "=", "winner_simulation_counter", "/", "(", "sim", "+", "1", ")", "\n", "probability_array", "[", "sim", ",", "1", "]", "=", "tie_simulation_counter", "/", "(", "sim", "+", "1", ")", "\n", "", "return", "probability_array", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerProbabilities.statusDictToInputArray": [[80, 155], ["len", "range", "list", "numpy.array", "len", "NumSplit.append", "numpy.array", "map", "tableDeck.evaluateHand", "numpy.array", "cards[].split"], "function", ["home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.evaluateHand"], ["", "def", "statusDictToInputArray", "(", "statusDict", ",", "hand_or_table", ",", "cards", ",", "tableDeck", ")", ":", "\n", "\n", "### We are taking the hand/board states and converting them into input vectors, which will be stored in an array ###", "\n", "\n", "    ", "if", "len", "(", "cards", ")", ">", "0", ":", "\n", "        ", "pair_status", "=", "1", "if", "statusDict", "[", "'Pair'", "]", "==", "True", "else", "0", "\n", "if", "statusDict", "[", "'straightGap'", "]", "==", "0", ":", "\n", "            ", "straight_gap_status", "=", "1", "\n", "", "elif", "statusDict", "[", "'straightGap'", "]", "==", "1", ":", "\n", "            ", "straight_gap_status", "=", "0.8", "\n", "", "elif", "statusDict", "[", "'straightGap'", "]", "==", "2", ":", "\n", "            ", "straight_gap_status", "=", "0.6", "\n", "", "elif", "statusDict", "[", "'straightGap'", "]", "==", "3", ":", "\n", "            ", "straight_gap_status", "=", "0.4", "\n", "", "elif", "statusDict", "[", "'straightGap'", "]", ">", "3", "or", "statusDict", "[", "'straightGap'", "]", "==", "-", "1", ":", "\n", "            ", "straight_gap_status", "=", "0.2", "\n", "\n", "", "NumSplit", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cards", ")", ")", ":", "NumSplit", ".", "append", "(", "cards", "[", "i", "]", ".", "split", "(", "\"_\"", ")", ")", "\n", "numbersString", "=", "np", ".", "array", "(", "NumSplit", ")", "[", ":", ",", "0", "]", "\n", "handNumbers", "=", "list", "(", "map", "(", "int", ",", "numbersString", ")", ")", "\n", "\n", "if", "hand_or_table", "==", "\"Hand\"", ":", "\n", "            ", "suited_status", "=", "1", "if", "statusDict", "[", "'NumSuited'", "]", "==", "2", "else", "0", "\n", "card1_status", "=", "handNumbers", "[", "0", "]", "/", "14", "\n", "card2_status", "=", "handNumbers", "[", "1", "]", "/", "14", "\n", "", "if", "hand_or_table", "==", "\"Table\"", ":", "\n", "            ", "if", "statusDict", "[", "'NumSuited'", "]", ">", "4", ":", "\n", "                ", "suited_status", "=", "1", "\n", "", "elif", "statusDict", "[", "'NumSuited'", "]", "==", "4", ":", "\n", "                ", "suited_status", "=", "0.75", "\n", "", "elif", "statusDict", "[", "'NumSuited'", "]", "==", "3", ":", "\n", "                ", "suited_status", "=", "0.5", "\n", "", "elif", "statusDict", "[", "'NumSuited'", "]", "==", "2", ":", "\n", "                ", "suited_status", "=", "0.25", "\n", "", "elif", "statusDict", "[", "'NumSuited'", "]", "==", "1", ":", "\n", "                ", "suited_status", "=", "0", "\n", "", "triple_status", "=", "1", "if", "statusDict", "[", "'Triple'", "]", "==", "True", "else", "0", "\n", "two_pair_status", "=", "1", "if", "statusDict", "[", "'TwoPair'", "]", "==", "True", "else", "0", "\n", "full_house_status", "=", "1", "if", "statusDict", "[", "'FullHouse'", "]", "==", "True", "else", "0", "\n", "runner_runner_status", "=", "1", "if", "statusDict", "[", "'StraightRunnerRunner'", "]", "==", "True", "else", "0", "\n", "single_runner_status", "=", "1", "if", "statusDict", "[", "'StraightSingleRunner'", "]", "==", "True", "else", "0", "\n", "\n", "tableDeck", ".", "table", "=", "cards", "\n", "table_rank", ",", "_", "=", "tableDeck", ".", "evaluateHand", "(", "[", "]", ")", "\n", "if", "table_rank", "==", "\"straight\"", ":", "\n", "                ", "additional_table_status", "=", "[", "1", ",", "0", ",", "0", ",", "0", "]", "\n", "", "elif", "table_rank", "==", "\"flush\"", ":", "\n", "                ", "additional_table_status", "=", "[", "0", ",", "1", ",", "0", ",", "0", "]", "\n", "", "elif", "table_rank", "==", "\"four of a kind\"", ":", "\n", "                ", "additional_table_status", "=", "[", "0", ",", "0", ",", "1", ",", "0", "]", "\n", "", "elif", "table_rank", "==", "\"straight flush\"", ":", "\n", "                ", "additional_table_status", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "", "else", ":", "\n", "                ", "additional_table_status", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "pair_status", "=", "0", "\n", "suited_status", "=", "0", "\n", "straight_gap_status", "=", "0", "\n", "card1_status", "=", "0", "\n", "card2_status", "=", "0", "\n", "triple_status", "=", "0", "\n", "two_pair_status", "=", "0", "\n", "full_house_status", "=", "0", "\n", "runner_runner_status", "=", "0", "\n", "single_runner_status", "=", "0", "\n", "additional_table_status", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "", "if", "hand_or_table", "==", "\"Hand\"", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "pair_status", ",", "suited_status", ",", "straight_gap_status", ",", "card1_status", ",", "card2_status", "]", ")", "\n", "", "elif", "hand_or_table", "==", "\"Table\"", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "pair_status", ",", "suited_status", ",", "straight_gap_status", ",", "\n", "triple_status", ",", "two_pair_status", ",", "full_house_status", ",", "runner_runner_status", ",", "\n", "single_runner_status", "]", "+", "additional_table_status", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.__init__": [[12, 26], ["numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "currentDeck", "=", "{", "}", "\n", "self", ".", "table", "=", "[", "]", "\n", "\n", "### 11 is Jack, 12 is Queen, and 13 is King, 14 is Ace ###", "\n", "\n", "self", ".", "cards", "=", "np", ".", "array", "(", "[", "\"2_S\"", ",", "\"3_S\"", ",", "\"4_S\"", ",", "\"5_S\"", ",", "\"6_S\"", ",", "\"7_S\"", ",", "\"8_S\"", ",", "\"9_S\"", ",", "\"10_S\"", ",", "\"11_S\"", ",", "\"12_S\"", ",", "\"13_S\"", ",", "\"14_S\"", ",", "\n", "\"2_H\"", ",", "\"3_H\"", ",", "\"4_H\"", ",", "\"5_H\"", ",", "\"6_H\"", ",", "\"7_H\"", ",", "\"8_H\"", ",", "\"9_H\"", ",", "\"10_H\"", ",", "\"11_H\"", ",", "\"12_H\"", ",", "\"13_H\"", ",", "\"14_H\"", ",", "\n", "\"2_C\"", ",", "\"3_C\"", ",", "\"4_C\"", ",", "\"5_C\"", ",", "\"6_C\"", ",", "\"7_C\"", ",", "\"8_C\"", ",", "\"9_C\"", ",", "\"10_C\"", ",", "\"11_C\"", ",", "\"12_C\"", ",", "\"13_C\"", ",", "\"14_C\"", ",", "\n", "\"2_D\"", ",", "\"3_D\"", ",", "\"4_D\"", ",", "\"5_D\"", ",", "\"6_D\"", ",", "\"7_D\"", ",", "\"8_D\"", ",", "\"9_D\"", ",", "\"10_D\"", ",", "\"11_D\"", ",", "\"12_D\"", ",", "\"13_D\"", ",", "\"14_D\"", "]", ")", "\n", "\n", "### I am only making it heads up for now ###", "\n", "\n", "self", ".", "players", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.shuffleDeck": [[29, 33], ["list", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "shuffleDeck", "(", "self", ")", ":", "\n", "        ", "self", ".", "table", "=", "[", "]", "\n", "self", ".", "currentDeck", "=", "list", "(", "self", ".", "cards", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "currentDeck", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.dealCards": [[36, 43], ["numpy.empty", "range", "range", "pokerDeck.pokerDeck.currentDeck.pop"], "methods", ["None"], ["", "def", "dealCards", "(", "self", ")", ":", "\n", "        ", "tableHands", "=", "np", ".", "empty", "(", "[", "self", ".", "players", ",", "2", "]", ",", "dtype", "=", "'<U4'", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "players", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "                ", "tableHands", "[", "i", ",", "j", "]", "=", "self", ".", "currentDeck", "[", "0", "]", "\n", "self", ".", "currentDeck", ".", "pop", "(", "0", ")", "\n", "", "", "return", "tableHands", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.flipFlop": [[46, 50], ["pokerDeck.pokerDeck.currentDeck.pop", "pokerDeck.pokerDeck.table.extend", "range", "pokerDeck.pokerDeck.currentDeck.pop"], "methods", ["None"], ["", "def", "flipFlop", "(", "self", ")", ":", "\n", "        ", "self", ".", "currentDeck", ".", "pop", "(", "0", ")", "#Burn the first card", "\n", "self", ".", "table", ".", "extend", "(", "self", ".", "currentDeck", "[", ":", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "self", ".", "currentDeck", ".", "pop", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.flipTurn": [[53, 57], ["pokerDeck.pokerDeck.currentDeck.pop", "pokerDeck.pokerDeck.table.append", "pokerDeck.pokerDeck.currentDeck.pop"], "methods", ["None"], ["", "def", "flipTurn", "(", "self", ")", ":", "\n", "        ", "self", ".", "currentDeck", ".", "pop", "(", "0", ")", "\n", "self", ".", "table", ".", "append", "(", "self", ".", "currentDeck", "[", "0", "]", ")", "\n", "self", ".", "currentDeck", ".", "pop", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.flipRiver": [[60, 64], ["pokerDeck.pokerDeck.currentDeck.pop", "pokerDeck.pokerDeck.table.append", "pokerDeck.pokerDeck.currentDeck.pop"], "methods", ["None"], ["", "def", "flipRiver", "(", "self", ")", ":", "\n", "        ", "self", ".", "currentDeck", ".", "pop", "(", "0", ")", "\n", "self", ".", "table", ".", "append", "(", "self", ".", "currentDeck", "[", "0", "]", ")", "\n", "self", ".", "currentDeck", ".", "pop", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.evaluateHand": [[67, 281], ["list", "list.extend", "range", "list", "list.sort", "suits.sort", "numpy.array", "range", "numpy.setdiff1d", "len", "NumSuitSplit.append", "numpy.array", "numpy.array", "map", "len", "list", "evaluationHand[].split", "list", "list.sort", "len", "len", "range", "len", "len", "map", "list", "list.sort", "pair_values.append", "pair_sequences.append", "pair_values.append", "pair_sequences.append", "list", "len", "len", "len", "sum", "len", "len", "map", "list", "list.sort", "len", "filter", "list", "len", "len", "len", "len", "numpy.sum", "len", "numpy.sum", "len", "len", "map", "list", "list.sort", "list", "filter", "list", "len", "len", "max", "list", "list", "list.sort", "list", "len", "len", "map", "set", "list", "filter", "list", "numpy.array", "sum", "sum", "numpy.array", "numpy.array", "range", "map", "list", "list.sort", "range", "len", "set", "list", "filter", "len", "numpy.delete", "map", "list", "list.sort", "list", "set", "list", "map", "list", "list.sort", "filter", "len", "list", "len", "set", "numpy.array", "numpy.array", "map", "list", "len", "list", "len", "len", "set", "len", "list", "len", "list", "list", "len", "list", "len", "list", "list"], "methods", ["None"], ["", "def", "evaluateHand", "(", "self", ",", "hand", ")", ":", "\n", "\n", "### Start by evaluating the top hands and then work my way down ###", "\n", "\n", "        ", "evaluationHand", "=", "list", "(", "self", ".", "table", ")", "\n", "evaluationHand", ".", "extend", "(", "hand", ")", "\n", "\n", "NumSuitSplit", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "evaluationHand", ")", ")", ":", "NumSuitSplit", ".", "append", "(", "evaluationHand", "[", "i", "]", ".", "split", "(", "\"_\"", ")", ")", "\n", "numbers_string", "=", "np", ".", "array", "(", "NumSuitSplit", ")", "[", ":", ",", "0", "]", "\n", "suits", "=", "np", ".", "array", "(", "NumSuitSplit", ")", "[", ":", ",", "1", "]", "\n", "\n", "numbers", "=", "list", "(", "map", "(", "int", ",", "numbers_string", ")", ")", "\n", "numbers", ".", "sort", "(", ")", "\n", "suits", ".", "sort", "(", ")", "\n", "\n", "cardsArray", "=", "np", ".", "array", "(", "NumSuitSplit", ")", "\n", "heartsArray", "=", "cardsArray", "[", "cardsArray", "[", ":", ",", "1", "]", "==", "'H'", ",", "]", "\n", "spadesArray", "=", "cardsArray", "[", "cardsArray", "[", ":", ",", "1", "]", "==", "'S'", ",", "]", "\n", "clubsArray", "=", "cardsArray", "[", "cardsArray", "[", ":", ",", "1", "]", "==", "'C'", ",", "]", "\n", "diamondsArray", "=", "cardsArray", "[", "cardsArray", "[", ":", ",", "1", "]", "==", "'D'", ",", "]", "\n", "\n", "### We check to see if we have a straight flush ###", "\n", "\n", "straight_flush_sequence", "=", "1", "\n", "flush_sequence", "=", "1", "\n", "flush_status", "=", "False", "\n", "straight_sequence", "=", "1", "\n", "straight_status", "=", "False", "\n", "pair_sequence", "=", "1", "\n", "pair_sequences", "=", "[", "]", "\n", "pair_values", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "numbers", ")", ")", ":", "\n", "            ", "diff", "=", "numbers", "[", "i", "]", "-", "numbers", "[", "(", "i", "-", "1", ")", "]", "\n", "\n", "### Check for straight flush ###", "\n", "\n", "if", "len", "(", "heartsArray", ")", ">=", "5", "and", "i", "<", "len", "(", "heartsArray", ")", ":", "\n", "                ", "hearts_numbers_string", "=", "heartsArray", "[", ":", ",", "0", "]", "\n", "hearts_numbers", "=", "list", "(", "map", "(", "int", ",", "hearts_numbers_string", ")", ")", "\n", "hearts_numbers", ".", "sort", "(", ")", "\n", "\n", "hearts_diff", "=", "hearts_numbers", "[", "i", "]", "-", "hearts_numbers", "[", "(", "i", "-", "1", ")", "]", "\n", "if", "hearts_diff", "==", "1", ":", "\n", "                    ", "straight_flush_sequence", "+=", "1", "\n", "high_card", "=", "numbers", "[", "i", "]", "\n", "", "elif", "hearts_diff", ">", "1", "and", "straight_flush_sequence", "<", "5", ":", "\n", "                    ", "straight_flush_sequence", "=", "1", "\n", "", "", "elif", "len", "(", "spadesArray", ")", ">=", "5", "and", "i", "<", "len", "(", "spadesArray", ")", ":", "\n", "                ", "spades_numbers_string", "=", "spadesArray", "[", ":", ",", "0", "]", "\n", "spades_numbers", "=", "list", "(", "map", "(", "int", ",", "spades_numbers_string", ")", ")", "\n", "spades_numbers", ".", "sort", "(", ")", "\n", "\n", "spades_diff", "=", "spades_numbers", "[", "i", "]", "-", "spades_numbers", "[", "(", "i", "-", "1", ")", "]", "\n", "if", "spades_diff", "==", "1", ":", "\n", "                    ", "straight_flush_sequence", "+=", "1", "\n", "high_card", "=", "numbers", "[", "i", "]", "\n", "", "elif", "spades_diff", ">", "1", "and", "straight_flush_sequence", "<", "5", ":", "\n", "                    ", "straight_flush_sequence", "=", "1", "\n", "", "", "elif", "len", "(", "clubsArray", ")", ">=", "5", "and", "i", "<", "len", "(", "clubsArray", ")", ":", "\n", "                ", "clubs_numbers_string", "=", "clubsArray", "[", ":", ",", "0", "]", "\n", "clubs_numbers", "=", "list", "(", "map", "(", "int", ",", "clubs_numbers_string", ")", ")", "\n", "clubs_numbers", ".", "sort", "(", ")", "\n", "\n", "clubs_diff", "=", "clubs_numbers", "[", "i", "]", "-", "clubs_numbers", "[", "(", "i", "-", "1", ")", "]", "\n", "if", "clubs_diff", "==", "1", ":", "\n", "                    ", "straight_flush_sequence", "+=", "1", "\n", "high_card", "=", "numbers", "[", "i", "]", "\n", "", "elif", "clubs_diff", ">", "1", "and", "straight_flush_sequence", "<", "5", ":", "\n", "                    ", "straight_flush_sequence", "=", "1", "\n", "", "", "elif", "len", "(", "diamondsArray", ")", ">=", "5", "and", "i", "<", "len", "(", "diamondsArray", ")", ":", "\n", "                ", "diamonds_numbers_string", "=", "diamondsArray", "[", ":", ",", "0", "]", "\n", "diamonds_numbers", "=", "list", "(", "map", "(", "int", ",", "diamonds_numbers_string", ")", ")", "\n", "diamonds_numbers", ".", "sort", "(", ")", "\n", "\n", "diamonds_diff", "=", "diamonds_numbers", "[", "i", "]", "-", "diamonds_numbers", "[", "(", "i", "-", "1", ")", "]", "\n", "if", "diamonds_diff", "==", "1", ":", "\n", "                    ", "straight_flush_sequence", "+=", "1", "\n", "high_card", "=", "numbers", "[", "i", "]", "\n", "", "elif", "diamonds_diff", ">", "1", "and", "straight_flush_sequence", "<", "5", ":", "\n", "                    ", "straight_flush_sequence", "=", "1", "\n", "\n", "### Check for flush ###", "\n", "\n", "", "", "if", "suits", "[", "i", "]", "==", "suits", "[", "(", "i", "-", "1", ")", "]", "and", "flush_status", "==", "False", ":", "\n", "                ", "flush_sequence", "+=", "1", "\n", "final_suit", "=", "suits", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "if", "flush_sequence", "<", "5", ":", "\n", "                    ", "flush_sequence", "=", "1", "\n", "", "else", ":", "\n", "                    ", "flush_status", "=", "True", "\n", "\n", "### Check for straight ###", "\n", "\n", "", "", "if", "diff", "==", "1", "and", "straight_status", "==", "False", ":", "\n", "                ", "straight_sequence", "+=", "1", "\n", "high_card", "=", "numbers", "[", "i", "]", "\n", "", "elif", "diff", ">", "1", ":", "\n", "                ", "if", "straight_sequence", "<", "5", ":", "\n", "                    ", "straight_sequence", "=", "1", "\n", "", "else", ":", "\n", "                    ", "straight_status", "=", "True", "\n", "\n", "### Check for pairs ###", "\n", "\n", "", "", "if", "diff", "==", "0", ":", "\n", "                ", "pair_sequence", "+=", "1", "\n", "pair", "=", "numbers", "[", "i", "]", "\n", "if", "i", "==", "len", "(", "numbers", ")", "-", "1", ":", "\n", "                    ", "pair_values", ".", "append", "(", "pair", ")", "\n", "pair_sequences", ".", "append", "(", "pair_sequence", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "pair_sequence", ">", "1", ":", "\n", "                    ", "pair_values", ".", "append", "(", "pair", ")", "\n", "pair_sequences", ".", "append", "(", "pair_sequence", ")", "\n", "", "pair_sequence", "=", "1", "\n", "\n", "", "", "if", "straight_flush_sequence", "<", "5", "and", "len", "(", "heartsArray", ")", ">=", "5", ":", "\n", "            ", "if", "len", "(", "list", "(", "filter", "(", "lambda", "x", ":", "x", "in", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "list", "(", "set", "(", "hearts_numbers", ")", ")", ")", ")", ")", "==", "4", ":", "\n", "                ", "if", "14", "in", "hearts_numbers", ":", "\n", "                    ", "straight_flush_sequence", "=", "5", "\n", "top5cards", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "", "", "", "elif", "straight_flush_sequence", "<", "5", "and", "len", "(", "spadesArray", ")", ">=", "5", ":", "\n", "            ", "if", "len", "(", "list", "(", "filter", "(", "lambda", "x", ":", "x", "in", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "list", "(", "set", "(", "spades_numbers", ")", ")", ")", ")", ")", "==", "4", ":", "\n", "                ", "if", "14", "in", "spades_numbers", ":", "\n", "                    ", "straight_flush_sequence", "=", "5", "\n", "top5cards", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "", "", "", "elif", "straight_flush_sequence", "<", "5", "and", "len", "(", "clubsArray", ")", ">=", "5", ":", "\n", "            ", "if", "len", "(", "list", "(", "filter", "(", "lambda", "x", ":", "x", "in", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "list", "(", "set", "(", "clubs_numbers", ")", ")", ")", ")", ")", "==", "4", ":", "\n", "                ", "if", "14", "in", "clubs_numbers", ":", "\n", "                    ", "straight_flush_sequence", "=", "5", "\n", "top5cards", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "", "", "", "elif", "straight_flush_sequence", "<", "5", "and", "len", "(", "diamondsArray", ")", ">=", "5", ":", "\n", "            ", "if", "len", "(", "list", "(", "filter", "(", "lambda", "x", ":", "x", "in", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "list", "(", "set", "(", "diamonds_numbers", ")", ")", ")", ")", ")", "==", "4", ":", "\n", "                ", "if", "14", "in", "diamonds_numbers", ":", "\n", "                    ", "straight_flush_sequence", "=", "5", "\n", "top5cards", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "\n", "", "", "", "non_pairs", "=", "np", ".", "setdiff1d", "(", "numbers", ",", "pair_values", ")", "\n", "\n", "if", "straight_flush_sequence", ">=", "5", ":", "\n", "            ", "hand_description", "=", "\"straight flush\"", "\n", "top5cards", "=", "list", "(", "range", "(", "high_card", "+", "1", "-", "5", ",", "high_card", "+", "1", ")", ")", "\n", "", "elif", "(", "len", "(", "pair_sequences", ")", "==", "1", "and", "pair_sequences", "[", "0", "]", "==", "4", ")", "or", "(", "len", "(", "pair_sequences", ")", ">", "1", "and", "np", ".", "sum", "(", "np", ".", "array", "(", "pair_sequences", ")", "==", "4", ")", ">", "0", ")", ":", "\n", "            ", "hand_description", "=", "\"four of a kind\"", "\n", "if", "len", "(", "non_pairs", ")", ">", "0", ":", "\n", "                ", "top5cards", "=", "[", "non_pairs", "[", "-", "1", "]", "]", "+", "[", "pair_values", "[", "0", "]", "]", "*", "4", "\n", "", "else", ":", "\n", "                ", "top5cards", "=", "[", "max", "(", "sum", "(", "(", "np", ".", "array", "(", "pair_sequences", ")", "!=", "4", ")", "*", "pair_values", ")", ",", "non_pairs", ")", "]", "+", "[", "sum", "(", "(", "np", ".", "array", "(", "pair_sequences", ")", "==", "4", ")", "*", "pair_values", ")", "]", "*", "4", "\n", "", "", "elif", "len", "(", "pair_sequences", ")", ">", "1", "and", "np", ".", "sum", "(", "np", ".", "array", "(", "pair_sequences", ")", "==", "3", ")", ">", "0", ":", "\n", "            ", "hand_description", "=", "\"full house\"", "\n", "triple_index", "=", "sum", "(", "(", "np", ".", "array", "(", "pair_sequences", ")", "==", "3", ")", "*", "list", "(", "range", "(", "len", "(", "pair_sequences", ")", ")", ")", ")", "\n", "top5cards", "=", "[", "np", ".", "delete", "(", "pair_values", ",", "triple_index", ")", "[", "-", "1", "]", "]", "*", "2", "+", "[", "pair_values", "[", "triple_index", "]", "]", "*", "3", "\n", "", "elif", "flush_sequence", ">=", "5", ":", "\n", "            ", "hand_description", "=", "\"flush\"", "\n", "if", "final_suit", "==", "\"H\"", ":", "\n", "                ", "hearts_numbers_string", "=", "heartsArray", "[", ":", ",", "0", "]", "\n", "hearts_numbers", "=", "list", "(", "map", "(", "int", ",", "hearts_numbers_string", ")", ")", "\n", "hearts_numbers", ".", "sort", "(", ")", "\n", "top5cards", "=", "hearts_numbers", "[", "-", "5", ":", "]", "\n", "", "elif", "final_suit", "==", "\"S\"", ":", "\n", "                ", "spades_numbers_string", "=", "spadesArray", "[", ":", ",", "0", "]", "\n", "spades_numbers", "=", "list", "(", "map", "(", "int", ",", "spades_numbers_string", ")", ")", "\n", "spades_numbers", ".", "sort", "(", ")", "\n", "top5cards", "=", "spades_numbers", "[", "-", "5", ":", "]", "\n", "", "elif", "final_suit", "==", "\"C\"", ":", "\n", "                ", "clubs_numbers_string", "=", "clubsArray", "[", ":", ",", "0", "]", "\n", "clubs_numbers", "=", "list", "(", "map", "(", "int", ",", "clubs_numbers_string", ")", ")", "\n", "clubs_numbers", ".", "sort", "(", ")", "\n", "top5cards", "=", "clubs_numbers", "[", "-", "5", ":", "]", "\n", "", "elif", "final_suit", "==", "\"D\"", ":", "\n", "                ", "diamonds_numbers_string", "=", "diamondsArray", "[", ":", ",", "0", "]", "\n", "diamonds_numbers", "=", "list", "(", "map", "(", "int", ",", "diamonds_numbers_string", ")", ")", "\n", "diamonds_numbers", ".", "sort", "(", ")", "\n", "top5cards", "=", "diamonds_numbers", "[", "-", "5", ":", "]", "\n", "\n", "", "", "elif", "straight_sequence", ">=", "5", ":", "\n", "            ", "hand_description", "=", "\"straight\"", "\n", "top5cards", "=", "list", "(", "range", "(", "high_card", "+", "1", "-", "5", ",", "high_card", "+", "1", ")", ")", "\n", "", "elif", "len", "(", "list", "(", "filter", "(", "lambda", "x", ":", "x", "in", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "list", "(", "set", "(", "numbers", ")", ")", ")", ")", ")", "==", "4", ":", "\n", "            ", "if", "14", "in", "numbers", ":", "\n", "                ", "hand_description", "=", "\"straight\"", "\n", "top5cards", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "", "else", ":", "\n", "                ", "if", "len", "(", "pair_sequences", ")", "==", "1", "and", "pair_sequences", "[", "0", "]", "==", "3", ":", "\n", "                    ", "hand_description", "=", "\"three of a kind\"", "\n", "top5cards", "=", "list", "(", "non_pairs", "[", "-", "2", ":", "]", ")", "+", "[", "pair_values", "[", "0", "]", "]", "*", "3", "\n", "", "elif", "len", "(", "pair_sequences", ")", ">", "1", ":", "\n", "                    ", "hand_description", "=", "\"two pairs\"", "\n", "top5cards", "=", "list", "(", "non_pairs", "[", "-", "1", ":", "]", ")", "+", "[", "pair_values", "[", "-", "2", "]", "]", "*", "2", "+", "[", "pair_values", "[", "-", "1", "]", "]", "*", "2", "\n", "", "elif", "len", "(", "pair_sequences", ")", "==", "1", "and", "pair_sequences", "[", "0", "]", "==", "2", ":", "\n", "                    ", "hand_description", "=", "\"pair\"", "\n", "top5cards", "=", "list", "(", "non_pairs", "[", "-", "3", ":", "]", ")", "+", "[", "pair_values", "[", "0", "]", "]", "*", "2", "\n", "", "elif", "len", "(", "pair_sequences", ")", "==", "0", ":", "\n", "                    ", "hand_description", "=", "\"high card\"", "\n", "top5cards", "=", "list", "(", "non_pairs", "[", "-", "5", ":", "]", ")", "\n", "", "", "", "elif", "len", "(", "pair_sequences", ")", "==", "1", "and", "pair_sequences", "[", "0", "]", "==", "3", ":", "\n", "            ", "hand_description", "=", "\"three of a kind\"", "\n", "top5cards", "=", "list", "(", "non_pairs", "[", "-", "2", ":", "]", ")", "+", "[", "pair_values", "[", "0", "]", "]", "*", "3", "\n", "", "elif", "len", "(", "pair_sequences", ")", ">", "1", ":", "\n", "            ", "hand_description", "=", "\"two pairs\"", "\n", "if", "len", "(", "pair_sequences", ")", "==", "3", ":", "\n", "                ", "top5cards", "=", "[", "pair_values", "[", "-", "3", "]", "]", "+", "[", "pair_values", "[", "-", "2", "]", "]", "*", "2", "+", "[", "pair_values", "[", "-", "1", "]", "]", "*", "2", "\n", "", "else", ":", "\n", "                ", "top5cards", "=", "list", "(", "non_pairs", "[", "-", "1", ":", "]", ")", "+", "[", "pair_values", "[", "-", "2", "]", "]", "*", "2", "+", "[", "pair_values", "[", "-", "1", "]", "]", "*", "2", "\n", "", "", "elif", "len", "(", "pair_sequences", ")", "==", "1", "and", "pair_sequences", "[", "0", "]", "==", "2", ":", "\n", "            ", "hand_description", "=", "\"pair\"", "\n", "top5cards", "=", "list", "(", "non_pairs", "[", "-", "3", ":", "]", ")", "+", "[", "pair_values", "[", "0", "]", "]", "*", "2", "\n", "", "elif", "len", "(", "pair_sequences", ")", "==", "0", ":", "\n", "            ", "hand_description", "=", "\"high card\"", "\n", "top5cards", "=", "list", "(", "non_pairs", "[", "-", "5", ":", "]", ")", "\n", "\n", "", "return", "hand_description", ",", "top5cards", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.handRanking": [[284, 304], ["None"], "methods", ["None"], ["", "def", "handRanking", "(", "self", ",", "description", ")", ":", "\n", "        ", "if", "description", "==", "\"straight flush\"", ":", "\n", "            ", "ranking", "=", "1", "\n", "", "elif", "description", "==", "\"four of a kind\"", ":", "\n", "            ", "ranking", "=", "2", "\n", "", "elif", "description", "==", "\"full house\"", ":", "\n", "            ", "ranking", "=", "3", "\n", "", "elif", "description", "==", "\"flush\"", ":", "\n", "            ", "ranking", "=", "4", "\n", "", "elif", "description", "==", "\"straight\"", ":", "\n", "            ", "ranking", "=", "5", "\n", "", "elif", "description", "==", "\"three of a kind\"", ":", "\n", "            ", "ranking", "=", "6", "\n", "", "elif", "description", "==", "\"two pairs\"", ":", "\n", "            ", "ranking", "=", "7", "\n", "", "elif", "description", "==", "\"pair\"", ":", "\n", "            ", "ranking", "=", "8", "\n", "", "elif", "description", "==", "\"high card\"", ":", "\n", "            ", "ranking", "=", "9", "\n", "", "return", "ranking", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.breakTie": [[307, 316], ["range", "numpy.argwhere().flatten", "numpy.argwhere", "numpy.amax"], "methods", ["None"], ["", "def", "breakTie", "(", "self", ",", "top5cards_array", ")", ":", "\n", "\n", "### This method currently only supports heads up ###", "\n", "\n", "        ", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "winner", "=", "np", ".", "argwhere", "(", "top5cards_array", "[", ":", ",", "-", "(", "i", "+", "1", ")", "]", "==", "np", ".", "amax", "(", "top5cards_array", "[", ":", ",", "-", "(", "i", "+", "1", ")", "]", ")", ")", ".", "flatten", "(", ")", "\n", "if", "winner", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "return", "winner", "[", "0", "]", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.whoWins": [[319, 348], ["range", "pokerDeck.pokerDeck.evaluateHand", "pokerDeck.pokerDeck.handRanking", "pokerDeck.pokerDeck.breakTie", "numpy.vstack"], "methods", ["home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.evaluateHand", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.handRanking", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerDeck.pokerDeck.breakTie"], ["", "def", "whoWins", "(", "self", ",", "hands", ")", ":", "\n", "        ", "previousRanking", "=", "10", "# 10 is out of the range, so the first hand will always be better", "\n", "for", "i", "in", "range", "(", "hands", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "currentHand", ",", "tempBestCards", "=", "self", ".", "evaluateHand", "(", "hands", "[", "i", ",", "]", ")", "\n", "currentRanking", "=", "self", ".", "handRanking", "(", "currentHand", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "bestCards", "=", "tempBestCards", "\n", "", "else", ":", "\n", "                ", "bestCards", "=", "np", ".", "vstack", "(", "(", "bestCards", ",", "tempBestCards", ")", ")", "\n", "", "if", "currentRanking", "<", "previousRanking", ":", "\n", "                ", "bestHand", "=", "currentHand", "\n", "bestHandPlayer", "=", "i", "\n", "status", "=", "\"winner\"", "\n", "previousRanking", "=", "currentRanking", "\n", "", "elif", "currentRanking", "==", "previousRanking", ":", "\n", "                ", "bestHand", "=", "currentHand", "\n", "status", "=", "\"tie\"", "\n", "previousRanking", "=", "currentRanking", "\n", "", "", "if", "status", "==", "\"tie\"", ":", "\n", "            ", "bestHandPlayer", "=", "self", ".", "breakTie", "(", "bestCards", ")", "\n", "if", "bestHandPlayer", "==", "None", ":", "\n", "                ", "winningDescription", "=", "\"The result ended in a tie with a {} \\nTop 5 cards were {}\"", ".", "format", "(", "bestHand", ",", "bestCards", ")", "\n", "return", "winningDescription", ",", "bestHandPlayer", "\n", "", "else", ":", "\n", "                ", "winningDescription", "=", "\"Player {} won the hand with a {} \\nTop 5 cards were {}\"", ".", "format", "(", "bestHandPlayer", ",", "bestHand", ",", "bestCards", ")", "\n", "return", "winningDescription", ",", "bestHandPlayer", "\n", "", "", "else", ":", "\n", "            ", "winningDescription", "=", "\"Player {} won the hand with a {} \\nTop 5 cards were {}\"", ".", "format", "(", "bestHandPlayer", ",", "bestHand", ",", "bestCards", ")", "\n", "return", "winningDescription", ",", "bestHandPlayer", "", "", "", "", ""]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr": [[15, 17], ["math.factorial", "math.factorial", "math.factorial"], "function", ["None"], ["def", "nCr", "(", "n", ",", "r", ")", ":", "\n", "    ", "return", "(", "math", ".", "factorial", "(", "n", ")", "/", "(", "math", ".", "factorial", "(", "r", ")", "*", "math", ".", "factorial", "(", "n", "-", "r", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.uniq": [[21, 28], ["object"], "function", ["None"], ["", "def", "uniq", "(", "lst", ")", ":", "\n", "    ", "last", "=", "object", "(", ")", "\n", "for", "item", "in", "lst", ":", "\n", "        ", "if", "item", "==", "last", ":", "\n", "            ", "continue", "\n", "", "yield", "item", "\n", "last", "=", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.sort_and_deduplicate": [[32, 34], ["list", "pokerCombinatorics.uniq", "sorted"], "function", ["home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.uniq"], ["", "", "def", "sort_and_deduplicate", "(", "l", ")", ":", "\n", "    ", "return", "list", "(", "uniq", "(", "sorted", "(", "l", ",", "reverse", "=", "True", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.countOuts": [[38, 76], ["range", "range", "pokerCombinatorics.sort_and_deduplicate", "range", "pokerCombinatorics.sort_and_deduplicate", "list", "range", "len", "possibilityList.append", "len", "range", "len", "frequencyCounter.append", "len", "numpy.arange", "straightPossibilityList.append", "straightPossibilityList.count", "validStraightDraws.append", "list", "len", "range", "max", "len", "list", "len", "missingCards.append", "len", "min", "set", "set", "list.remove", "len", "len", "min"], "function", ["home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.sort_and_deduplicate", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.sort_and_deduplicate"], ["", "def", "countOuts", "(", "numbers", ")", ":", "\n", "    ", "if", "14", "in", "numbers", ":", "\n", "        ", "numbers", "=", "[", "1", "]", "+", "numbers", "\n", "\n", "", "possibilityList", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "numbers", ")", ")", ":", "\n", "        ", "possibilityList", ".", "append", "(", "np", ".", "arange", "(", "max", "(", "numbers", "[", "i", "]", "-", "4", ",", "1", ")", ",", "min", "(", "numbers", "[", "i", "]", "+", "4", ",", "14", ")", "+", "1", ")", ")", "\n", "\n", "", "straightPossibilityList", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "possibilityList", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "possibilityList", "[", "i", "]", ")", "-", "4", ")", ":", "\n", "            ", "straightPossibilityList", ".", "append", "(", "list", "(", "possibilityList", "[", "i", "]", "[", "j", ":", "j", "+", "5", "]", ")", ")", "\n", "\n", "", "", "uniquePossibilityList", "=", "sort_and_deduplicate", "(", "straightPossibilityList", ")", "\n", "\n", "frequencyCounter", "=", "[", "]", "\n", "validStraightDraws", "=", "[", "]", "\n", "missingCards", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "uniquePossibilityList", ")", ")", ":", "\n", "        ", "frequencyCounter", ".", "append", "(", "straightPossibilityList", ".", "count", "(", "uniquePossibilityList", "[", "i", "]", ")", ")", "\n", "if", "frequencyCounter", "[", "i", "]", ">=", "3", ":", "\n", "            ", "validStraightDraws", ".", "append", "(", "uniquePossibilityList", "[", "i", "]", ")", "\n", "tempMissingCards", "=", "list", "(", "set", "(", "uniquePossibilityList", "[", "i", "]", ")", "-", "set", "(", "numbers", ")", ")", "\n", "if", "len", "(", "tempMissingCards", ")", "<", "3", ":", "\n", "                ", "missingCards", ".", "append", "(", "tempMissingCards", ")", "\n", "\n", "", "", "", "outs", "=", "sort_and_deduplicate", "(", "missingCards", ")", "\n", "\n", "newOuts", "=", "list", "(", "outs", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "outs", ")", ")", ":", "\n", "        ", "if", "len", "(", "outs", "[", "i", "]", ")", "==", "1", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "outs", ")", ")", ":", "\n", "                ", "if", "(", "len", "(", "outs", "[", "j", "]", ")", "==", "2", "and", "outs", "[", "i", "]", "[", "0", "]", "in", "outs", "[", "j", "]", "and", "outs", "[", "j", "]", "in", "newOuts", "or", "\n", "outs", "[", "j", "]", "==", "[", "]", "and", "outs", "[", "j", "]", "in", "newOuts", "or", "\n", "len", "(", "outs", "[", "j", "]", ")", "==", "1", "and", "outs", "[", "j", "]", "[", "0", "]", "<", "min", "(", "numbers", ")", "and", "outs", "[", "j", "]", "in", "newOuts", "and", "[", "]", "in", "outs", ")", ":", "\n", "                    ", "newOuts", ".", "remove", "(", "outs", "[", "j", "]", ")", "\n", "\n", "", "", "", "", "return", "newOuts", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.calcProbs": [[78, 468], ["pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "multipliers.append", "multipliers.append", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "multipliers.append", "multipliers.append", "len", "multipliers.append", "pokerCombinatorics.nCr", "multipliers.append", "multipliers.append", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "pokerCombinatorics.nCr", "multipliers.append", "multipliers.append", "multipliers.append", "multipliers.append", "pokerCombinatorics.nCr", "multipliers.append", "multipliers.append", "pokerCombinatorics.nCr", "multipliers.append", "multipliers.append", "pokerCombinatorics.nCr", "multipliers.append", "multipliers.append"], "function", ["home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr", "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.nCr"], ["", "def", "calcProbs", "(", "hand", ",", "rankType", ",", "cardsOnTable", ",", "handStatus", ")", ":", "\n", "\n", "### We extract variables from the status dictionary to be used in our conditional statements ###", "\n", "\n", "    ", "FullHouse", "=", "handStatus", "[", "\"FullHouse\"", "]", "\n", "Triple", "=", "handStatus", "[", "\"Triple\"", "]", "\n", "TwoPair", "=", "handStatus", "[", "\"TwoPair\"", "]", "\n", "Pair", "=", "handStatus", "[", "\"Pair\"", "]", "\n", "NonPair", "=", "handStatus", "[", "\"NonPair\"", "]", "\n", "\n", "StraightRunnerRunner", "=", "handStatus", "[", "\"StraightRunnerRunner\"", "]", "\n", "StraightSingleRunner", "=", "handStatus", "[", "\"StraightSingleRunner\"", "]", "\n", "\n", "numSuited", "=", "handStatus", "[", "\"NumSuited\"", "]", "\n", "\n", "straightGap", "=", "handStatus", "[", "\"straightGap\"", "]", "\n", "straightLowerBound", "=", "handStatus", "[", "\"straightLowerBound\"", "]", "\n", "straightUpperBound", "=", "handStatus", "[", "\"straightUpperBound\"", "]", "\n", "\n", "### We calculate the probabilities using combinatorics ###", "\n", "\n", "if", "cardsOnTable", "==", "\"PreFlop\"", ":", "\n", "        ", "totalCombinations", "=", "nCr", "(", "50", ",", "5", ")", "\n", "if", "rankType", "==", "\"Pair\"", ":", "\n", "# We don't have to worry about if we have a pair in our hand because if we had a pair then we wouldn't be calculating this", "\n", "            ", "probMatchingHand", "=", "6", "*", "nCr", "(", "11", ",", "4", ")", "*", "4", "**", "4", "\n", "probMatchingTable", "=", "11", "*", "nCr", "(", "4", ",", "2", ")", "*", "nCr", "(", "10", ",", "3", ")", "*", "4", "**", "3", "\n", "marginalProbability1", "=", "probMatchingHand", "/", "totalCombinations", "\n", "probability", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probMatchingTable", "/", "totalCombinations", ")", "\n", "", "elif", "rankType", "==", "\"Two Pair\"", ":", "\n", "            ", "if", "NonPair", "==", "True", ":", "\n", "                ", "probMatchingHand", "=", "3", "**", "2", "*", "nCr", "(", "10", ",", "3", ")", "*", "4", "**", "3", "\n", "probMatchingTable", "=", "nCr", "(", "11", ",", "2", ")", "*", "nCr", "(", "4", ",", "2", ")", "**", "2", "*", "9", "*", "4", "\n", "probMatching_HalfHand_HalfTable", "=", "6", "*", "11", "*", "nCr", "(", "4", ",", "2", ")", "*", "nCr", "(", "10", ",", "2", ")", "*", "4", "**", "2", "\n", "marginalProbability1", "=", "probMatchingHand", "/", "totalCombinations", "\n", "marginalProbability2", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probMatchingTable", "/", "totalCombinations", ")", "\n", "probability", "=", "marginalProbability2", "+", "(", "1", "-", "marginalProbability2", ")", "*", "(", "probMatching_HalfHand_HalfTable", "/", "totalCombinations", ")", "\n", "", "elif", "Pair", "==", "True", ":", "\n", "                ", "probability", "=", "(", "12", "*", "nCr", "(", "4", ",", "2", ")", "*", "nCr", "(", "11", ",", "3", ")", "*", "4", "**", "3", ")", "/", "totalCombinations", "\n", "", "", "elif", "rankType", "==", "\"Three of a Kind\"", ":", "\n", "            ", "if", "NonPair", "==", "True", ":", "\n", "                ", "probMatchingHand", "=", "2", "*", "nCr", "(", "3", ",", "2", ")", "*", "nCr", "(", "11", ",", "3", ")", "*", "4", "**", "3", "\n", "probMatchingTable", "=", "11", "*", "nCr", "(", "4", ",", "3", ")", "*", "nCr", "(", "10", ",", "2", ")", "*", "4", "**", "2", "\n", "marginalProbability1", "=", "probMatchingHand", "/", "totalCombinations", "\n", "probability", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probMatchingTable", "/", "totalCombinations", ")", "\n", "", "elif", "Pair", "==", "True", ":", "\n", "                ", "probability", "=", "(", "2", "*", "nCr", "(", "12", ",", "4", ")", "*", "4", "**", "4", ")", "/", "totalCombinations", "\n", "", "", "elif", "rankType", "==", "\"Straight\"", ":", "# I purposely left out the probability of flopping a straight that has nothing to do with your hand", "\n", "            ", "if", "straightGap", "==", "0", ":", "\n", "                ", "if", "straightLowerBound", ">", "3", "or", "straightUpperBound", "<", "12", ":", "\n", "                    ", "firstMultiplier", "=", "4", "\n", "secondMultiplier", "=", "0", "\n", "", "elif", "straightLowerBound", "==", "3", "or", "straightUpperBound", "==", "12", ":", "\n", "                    ", "firstMultiplier", "=", "3", "\n", "secondMultiplier", "=", "0", "\n", "", "elif", "straightLowerBound", "==", "2", "or", "straightUpperBound", "==", "13", ":", "\n", "                    ", "firstMultiplier", "=", "2", "\n", "secondMultiplier", "=", "0", "\n", "", "elif", "straightLowerBound", "==", "1", "or", "straightUpperBound", "==", "14", ":", "\n", "                    ", "firstMultiplier", "=", "1", "\n", "secondMultiplier", "=", "1", "\n", "", "probBothCardsStraight", "=", "(", "firstMultiplier", "*", "3", "*", "4", "**", "3", "*", "nCr", "(", "8", ",", "2", ")", "*", "4", "**", "2", ")", "/", "totalCombinations", "\n", "probability", "=", "probBothCardsStraight", "+", "(", "(", "secondMultiplier", "*", "4", "*", "4", "**", "4", "*", "7", "*", "4", ")", "/", "totalCombinations", ")", "*", "(", "1", "-", "probBothCardsStraight", ")", "\n", "", "elif", "straightGap", "==", "1", ":", "\n", "                ", "if", "straightLowerBound", ">", "4", "or", "straightUpperBound", "<", "11", ":", "\n", "                    ", "firstMultiplier", "=", "3", "\n", "secondMultiplier", "=", "2", "\n", "", "elif", "straightLowerBound", "==", "4", "or", "straightUpperBound", "==", "11", "or", "straightLowerBound", "==", "3", "or", "straightUpperBound", "==", "12", ":", "\n", "                    ", "firstMultiplier", "=", "3", "\n", "secondMultiplier", "=", "1", "\n", "", "elif", "straightLowerBound", "==", "2", "or", "straightUpperBound", "==", "13", ":", "\n", "                    ", "firstMultiplier", "=", "2", "\n", "secondMultiplier", "=", "1", "\n", "", "elif", "straightLowerBound", "==", "1", "or", "straightUpperBound", "==", "14", ":", "\n", "                    ", "firstMultiplier", "=", "1", "\n", "secondMultiplier", "=", "2", "\n", "", "probBothCardsStraight", "=", "(", "firstMultiplier", "*", "3", "*", "4", "**", "3", "*", "nCr", "(", "8", ",", "2", ")", "*", "4", "**", "2", ")", "/", "totalCombinations", "\n", "probability", "=", "probBothCardsStraight", "+", "(", "(", "secondMultiplier", "*", "4", "*", "4", "**", "4", "*", "7", "*", "4", ")", "/", "totalCombinations", ")", "*", "(", "1", "-", "probBothCardsStraight", ")", "\n", "", "elif", "straightGap", "==", "2", ":", "\n", "                ", "if", "straightLowerBound", ">", "4", "or", "straightUpperBound", "<", "11", ":", "\n", "                    ", "firstMultiplier", "=", "2", "\n", "secondMultiplier", "=", "4", "\n", "", "elif", "straightLowerBound", "==", "4", "or", "straightUpperBound", "==", "11", ":", "\n", "                    ", "firstMultiplier", "=", "2", "\n", "secondMultiplier", "=", "3", "\n", "", "elif", "straightLowerBound", "==", "2", "or", "straightUpperBound", "==", "13", "or", "straightLowerBound", "==", "3", "or", "straightUpperBound", "==", "12", ":", "\n", "                    ", "firstMultiplier", "=", "2", "\n", "secondMultiplier", "=", "2", "\n", "", "elif", "straightLowerBound", "==", "1", "or", "straightUpperBound", "==", "14", ":", "\n", "                    ", "firstMultiplier", "=", "1", "\n", "secondMultiplier", "=", "3", "\n", "", "probBothCardsStraight", "=", "(", "firstMultiplier", "*", "3", "*", "4", "**", "3", "*", "nCr", "(", "8", ",", "2", ")", "*", "4", "**", "2", ")", "/", "totalCombinations", "\n", "probability", "=", "probBothCardsStraight", "+", "(", "(", "secondMultiplier", "*", "4", "*", "4", "**", "4", "*", "7", "*", "4", ")", "/", "totalCombinations", ")", "*", "(", "1", "-", "probBothCardsStraight", ")", "\n", "", "elif", "straightGap", "==", "3", ":", "\n", "                ", "if", "straightLowerBound", ">", "4", "or", "straightUpperBound", "<", "11", ":", "\n", "                    ", "firstMultiplier", "=", "1", "\n", "secondMultiplier", "=", "6", "\n", "", "elif", "straightLowerBound", "==", "4", "or", "straightUpperBound", "==", "11", ":", "\n", "                    ", "firstMultiplier", "=", "1", "\n", "secondMultiplier", "=", "5", "\n", "", "elif", "straightLowerBound", "==", "3", "or", "straightUpperBound", "==", "12", "or", "straightLowerBound", "==", "1", "or", "straightUpperBound", "==", "14", ":", "\n", "                    ", "firstMultiplier", "=", "1", "\n", "secondMultiplier", "=", "4", "\n", "", "elif", "straightLowerBound", "==", "2", "or", "straightUpperBound", "==", "13", ":", "\n", "                    ", "firstMultiplier", "=", "1", "\n", "secondMultiplier", "=", "3", "\n", "", "probBothCardsStraight", "=", "(", "firstMultiplier", "*", "3", "*", "4", "**", "3", "*", "nCr", "(", "8", ",", "2", ")", "*", "4", "**", "2", ")", "/", "totalCombinations", "\n", "probability", "=", "probBothCardsStraight", "+", "(", "(", "secondMultiplier", "*", "4", "*", "4", "**", "4", "*", "7", "*", "4", ")", "/", "totalCombinations", ")", "*", "(", "1", "-", "probBothCardsStraight", ")", "\n", "", "elif", "straightGap", ">", "3", ":", "\n", "                ", "multipliers", "=", "[", "]", "\n", "if", "straightLowerBound", "==", "1", "or", "straightLowerBound", "==", "2", ":", "\n", "                    ", "multipliers", ".", "append", "(", "2", ")", "\n", "", "elif", "straightLowerBound", "==", "3", ":", "\n", "                    ", "multipliers", ".", "append", "(", "3", ")", "\n", "", "elif", "straightLowerBound", "==", "4", ":", "\n", "                    ", "multipliers", ".", "append", "(", "4", ")", "\n", "", "elif", "(", "straightLowerBound", "==", "5", "or", "straightLowerBound", "==", "6", "or", "straightLowerBound", "==", "7", "or", "\n", "straightLowerBound", "==", "8", "or", "straightLowerBound", "==", "9", ")", ":", "\n", "                    ", "multipliers", ".", "append", "(", "5", ")", "\n", "", "if", "straightUpperBound", "==", "14", "or", "straightUpperBound", "==", "13", ":", "\n", "                    ", "multipliers", ".", "append", "(", "2", ")", "\n", "", "elif", "straightUpperBound", "==", "12", ":", "\n", "                    ", "multipliers", ".", "append", "(", "3", ")", "\n", "", "elif", "straightUpperBound", "==", "11", ":", "\n", "                    ", "multipliers", ".", "append", "(", "4", ")", "\n", "", "elif", "(", "straightUpperBound", "==", "6", "or", "straightUpperBound", "==", "7", "or", "straightUpperBound", "==", "8", "or", "\n", "straightUpperBound", "==", "9", "or", "straightUpperBound", "==", "10", ")", ":", "\n", "                    ", "multipliers", ".", "append", "(", "5", ")", "\n", "", "firstMultiplier", "=", "multipliers", "[", "0", "]", "\n", "secondMultiplier", "=", "multipliers", "[", "1", "]", "\n", "probability", "=", "(", "(", "firstMultiplier", "+", "secondMultiplier", ")", "*", "4", "*", "4", "**", "4", "*", "7", "*", "4", ")", "/", "totalCombinations", "\n", "", "elif", "straightGap", "==", "-", "1", ":", "# This means that they have a pocket pair", "\n", "                ", "if", "straightLowerBound", ">", "4", "or", "straightUpperBound", "<", "11", ":", "\n", "                    ", "firstMultiplier", "=", "5", "\n", "", "elif", "straightLowerBound", "==", "4", "or", "straightUpperBound", "==", "11", ":", "\n", "                    ", "firstMultiplier", "=", "4", "\n", "", "elif", "straightLowerBound", "==", "3", "or", "straightUpperBound", "==", "12", ":", "\n", "                    ", "firstMultiplier", "=", "3", "\n", "", "elif", "straightLowerBound", "==", "2", "or", "straightUpperBound", "==", "13", "or", "straightLowerBound", "==", "1", "or", "straightUpperBound", "==", "14", ":", "\n", "                    ", "firstMultiplier", "=", "2", "\n", "", "probability", "=", "(", "firstMultiplier", "*", "3", "*", "4", "**", "3", "*", "nCr", "(", "8", ",", "2", ")", "*", "4", "**", "2", ")", "/", "totalCombinations", "\n", "", "", "elif", "rankType", "==", "\"Flush\"", ":", "\n", "            ", "if", "numSuited", "==", "1", ":", "\n", "                ", "probFlushWithHand", "=", "2", "*", "nCr", "(", "12", ",", "4", ")", "*", "46", "\n", "probFlushWithoutHand", "=", "2", "*", "nCr", "(", "13", ",", "5", ")", "\n", "marginalProbability1", "=", "probFlushWithHand", "/", "totalCombinations", "\n", "probability", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probFlushWithoutHand", "/", "totalCombinations", ")", "\n", "", "elif", "numSuited", "==", "2", ":", "\n", "                ", "probFlushWithHand", "=", "nCr", "(", "11", ",", "3", ")", "*", "nCr", "(", "47", ",", "2", ")", "\n", "probFlushWithoutHand", "=", "3", "*", "nCr", "(", "13", ",", "5", ")", "\n", "marginalProbability1", "=", "probFlushWithHand", "/", "totalCombinations", "\n", "probability", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probFlushWithoutHand", "/", "totalCombinations", ")", "\n", "", "", "elif", "rankType", "==", "\"Full House\"", ":", "\n", "            ", "if", "NonPair", "==", "True", ":", "\n", "                ", "probMatchingHand", "=", "3", "**", "2", "*", "nCr", "(", "10", ",", "2", ")", "*", "4", "**", "2", "# The beginning has 3**2 because both 3C2 and 3C1 = 3", "\n", "probMatchingTable", "=", "11", "*", "nCr", "(", "4", ",", "3", ")", "*", "10", "*", "nCr", "(", "4", ",", "2", ")", "\n", "probMatching_HandPair_TableTriple", "=", "6", "*", "11", "*", "nCr", "(", "4", ",", "3", ")", "*", "10", "*", "4", "\n", "probMatching_HandTriple_TablePair", "=", "2", "*", "nCr", "(", "3", ",", "2", ")", "*", "11", "*", "nCr", "(", "4", ",", "2", ")", "*", "10", "*", "4", "\n", "marginalProbability1", "=", "probMatchingHand", "/", "totalCombinations", "\n", "marginalProbability2", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probMatchingTable", "/", "totalCombinations", ")", "\n", "marginalProbability3", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probMatching_HandPair_TableTriple", "/", "totalCombinations", ")", "\n", "probability", "=", "marginalProbability3", "+", "(", "1", "-", "marginalProbability3", ")", "*", "(", "probMatching_HandTriple_TablePair", "/", "totalCombinations", ")", "\n", "", "elif", "Pair", "==", "True", ":", "\n", "                ", "probMatching_HandPair_TableTriple", "=", "12", "*", "nCr", "(", "4", ",", "3", ")", "*", "nCr", "(", "11", ",", "2", ")", "*", "4", "**", "2", "\n", "probMatching_HandTriple_TablePair", "=", "2", "*", "12", "*", "nCr", "(", "4", ",", "2", ")", "*", "nCr", "(", "10", ",", "2", ")", "*", "4", "**", "2", "\n", "marginalProbability1", "=", "probMatching_HandPair_TableTriple", "/", "totalCombinations", "\n", "probability", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probMatching_HandTriple_TablePair", "/", "totalCombinations", ")", "\n", "", "", "elif", "rankType", "==", "\"Four of a Kind\"", ":", "\n", "            ", "if", "NonPair", "==", "True", ":", "\n", "                ", "probMatchingHand", "=", "2", "*", "nCr", "(", "11", ",", "2", ")", "*", "4", "**", "2", "\n", "probMatchingTable", "=", "11", "*", "10", "*", "4", "\n", "marginalProbability1", "=", "probMatchingHand", "/", "totalCombinations", "\n", "probability", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probMatchingTable", "/", "totalCombinations", ")", "\n", "", "elif", "Pair", "==", "True", ":", "\n", "                ", "probability", "=", "(", "nCr", "(", "12", ",", "3", ")", "*", "4", "**", "3", ")", "/", "totalCombinations", "\n", "", "", "elif", "rankType", "==", "\"Straight Flush\"", ":", "\n", "            ", "if", "numSuited", "==", "1", "or", "numSuited", "==", "2", "and", "straightGap", ">", "3", ":", "\n", "                ", "multipliers", "=", "[", "]", "\n", "if", "straightLowerBound", "==", "1", "or", "straightLowerBound", "==", "2", ":", "\n", "                    ", "multipliers", ".", "append", "(", "2", ")", "\n", "", "elif", "straightLowerBound", "==", "3", ":", "\n", "                    ", "multipliers", ".", "append", "(", "3", ")", "\n", "", "elif", "straightLowerBound", "==", "4", ":", "\n", "                    ", "multipliers", ".", "append", "(", "4", ")", "\n", "", "elif", "(", "straightLowerBound", "==", "5", "or", "straightLowerBound", "==", "6", "or", "straightLowerBound", "==", "7", "or", "\n", "straightLowerBound", "==", "8", "or", "straightLowerBound", "==", "9", ")", ":", "\n", "                    ", "multipliers", ".", "append", "(", "5", ")", "\n", "", "if", "straightUpperBound", "==", "14", "or", "straightUpperBound", "==", "13", ":", "\n", "                    ", "multipliers", ".", "append", "(", "2", ")", "\n", "", "elif", "straightUpperBound", "==", "12", ":", "\n", "                    ", "multipliers", ".", "append", "(", "3", ")", "\n", "", "elif", "straightUpperBound", "==", "11", ":", "\n", "                    ", "multipliers", ".", "append", "(", "4", ")", "\n", "", "elif", "(", "straightUpperBound", "==", "6", "or", "straightUpperBound", "==", "7", "or", "straightUpperBound", "==", "8", "or", "\n", "straightUpperBound", "==", "9", "or", "straightUpperBound", "==", "10", ")", ":", "\n", "                    ", "multipliers", ".", "append", "(", "5", ")", "\n", "", "if", "len", "(", "multipliers", ")", "==", "1", ":", "\n", "                    ", "multipliers", ".", "append", "(", "multipliers", "[", "0", "]", ")", "\n", "", "firstMultiplier", "=", "multipliers", "[", "0", "]", "\n", "secondMultiplier", "=", "multipliers", "[", "1", "]", "\n", "probability", "=", "(", "(", "firstMultiplier", "+", "secondMultiplier", ")", "*", "4", "*", "46", ")", "/", "totalCombinations", "\n", "", "elif", "numSuited", "==", "2", ":", "\n", "                ", "if", "straightGap", "==", "0", ":", "\n", "                    ", "if", "straightLowerBound", ">", "3", "or", "straightUpperBound", "<", "12", ":", "\n", "                        ", "firstMultiplier", "=", "4", "\n", "secondMultiplier", "=", "0", "\n", "", "elif", "straightLowerBound", "==", "3", "or", "straightUpperBound", "==", "12", ":", "\n", "                        ", "firstMultiplier", "=", "3", "\n", "secondMultiplier", "=", "0", "\n", "", "elif", "straightLowerBound", "==", "2", "or", "straightUpperBound", "==", "13", ":", "\n", "                        ", "firstMultiplier", "=", "2", "\n", "secondMultiplier", "=", "0", "\n", "", "elif", "straightLowerBound", "==", "1", "or", "straightUpperBound", "==", "14", ":", "\n", "                        ", "firstMultiplier", "=", "1", "\n", "secondMultiplier", "=", "1", "\n", "", "probBothCardsStraight", "=", "(", "firstMultiplier", "*", "3", "*", "47", "*", "46", ")", "/", "totalCombinations", "\n", "probability", "=", "probBothCardsStraight", "+", "(", "(", "secondMultiplier", "*", "4", "*", "46", ")", "/", "totalCombinations", ")", "*", "(", "1", "-", "probBothCardsStraight", ")", "\n", "", "elif", "straightGap", "==", "1", ":", "\n", "                    ", "if", "straightLowerBound", ">", "4", "or", "straightUpperBound", "<", "11", ":", "\n", "                        ", "firstMultiplier", "=", "3", "\n", "secondMultiplier", "=", "2", "\n", "", "elif", "straightLowerBound", "==", "4", "or", "straightUpperBound", "==", "11", "or", "straightLowerBound", "==", "3", "or", "straightUpperBound", "==", "12", ":", "\n", "                        ", "firstMultiplier", "=", "3", "\n", "secondMultiplier", "=", "1", "\n", "", "elif", "straightLowerBound", "==", "2", "or", "straightUpperBound", "==", "13", ":", "\n", "                        ", "firstMultiplier", "=", "2", "\n", "secondMultiplier", "=", "1", "\n", "", "elif", "straightLowerBound", "==", "1", "or", "straightUpperBound", "==", "14", ":", "\n", "                        ", "firstMultiplier", "=", "1", "\n", "secondMultiplier", "=", "2", "\n", "", "probBothCardsStraight", "=", "(", "firstMultiplier", "*", "3", "*", "47", "*", "46", ")", "/", "totalCombinations", "\n", "probability", "=", "probBothCardsStraight", "+", "(", "(", "secondMultiplier", "*", "4", "*", "46", ")", "/", "totalCombinations", ")", "*", "(", "1", "-", "probBothCardsStraight", ")", "\n", "", "elif", "straightGap", "==", "2", ":", "\n", "                    ", "if", "straightLowerBound", ">", "4", "or", "straightUpperBound", "<", "11", ":", "\n", "                        ", "firstMultiplier", "=", "2", "\n", "secondMultiplier", "=", "4", "\n", "", "elif", "straightLowerBound", "==", "4", "or", "straightUpperBound", "==", "11", ":", "\n", "                        ", "firstMultiplier", "=", "2", "\n", "secondMultiplier", "=", "3", "\n", "", "elif", "straightLowerBound", "==", "2", "or", "straightUpperBound", "==", "13", "or", "straightLowerBound", "==", "3", "or", "straightUpperBound", "==", "12", ":", "\n", "                        ", "firstMultiplier", "=", "2", "\n", "secondMultiplier", "=", "2", "\n", "", "elif", "straightLowerBound", "==", "1", "or", "straightUpperBound", "==", "14", ":", "\n", "                        ", "firstMultiplier", "=", "1", "\n", "secondMultiplier", "=", "3", "\n", "", "probBothCardsStraight", "=", "(", "firstMultiplier", "*", "3", "*", "47", "*", "46", ")", "/", "totalCombinations", "\n", "probability", "=", "probBothCardsStraight", "+", "(", "(", "secondMultiplier", "*", "4", "*", "46", ")", "/", "totalCombinations", ")", "*", "(", "1", "-", "probBothCardsStraight", ")", "\n", "", "elif", "straightGap", "==", "3", ":", "\n", "                    ", "if", "straightLowerBound", ">", "4", "or", "straightUpperBound", "<", "11", ":", "\n", "                        ", "firstMultiplier", "=", "1", "\n", "secondMultiplier", "=", "6", "\n", "", "elif", "straightLowerBound", "==", "4", "or", "straightUpperBound", "==", "11", ":", "\n", "                        ", "firstMultiplier", "=", "1", "\n", "secondMultiplier", "=", "5", "\n", "", "elif", "straightLowerBound", "==", "3", "or", "straightUpperBound", "==", "12", "or", "straightLowerBound", "==", "1", "or", "straightUpperBound", "==", "14", ":", "\n", "                        ", "firstMultiplier", "=", "1", "\n", "secondMultiplier", "=", "4", "\n", "", "elif", "straightLowerBound", "==", "2", "or", "straightUpperBound", "==", "13", ":", "\n", "                        ", "firstMultiplier", "=", "1", "\n", "secondMultiplier", "=", "3", "\n", "", "probBothCardsStraight", "=", "(", "firstMultiplier", "*", "3", "*", "47", "*", "46", ")", "/", "totalCombinations", "\n", "probability", "=", "probBothCardsStraight", "+", "(", "(", "secondMultiplier", "*", "4", "*", "46", ")", "/", "totalCombinations", ")", "*", "(", "1", "-", "probBothCardsStraight", ")", "\n", "", "", "", "", "elif", "cardsOnTable", "==", "\"Flop\"", ":", "\n", "        ", "totalCombinations", "=", "nCr", "(", "47", ",", "2", ")", "\n", "if", "rankType", "==", "\"Pair\"", ":", "\n", "            ", "probMatchingHand", "=", "6", "*", "8", "*", "4", "\n", "probMatchingTable", "=", "9", "*", "8", "*", "4", "\n", "probMatchingRunners", "=", "8", "*", "nCr", "(", "4", ",", "2", ")", "\n", "marginalProbability1", "=", "probMatchingHand", "/", "totalCombinations", "\n", "marginalProbability2", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probMatchingTable", "/", "totalCombinations", ")", "\n", "probability", "=", "marginalProbability2", "+", "(", "1", "-", "marginalProbability2", ")", "*", "(", "probMatchingRunners", "/", "totalCombinations", ")", "\n", "", "elif", "rankType", "==", "\"Two Pair\"", ":", "\n", "            ", "if", "NonPair", "==", "True", ":", "\n", "                ", "probMatchingHand", "=", "3", "**", "2", "\n", "probMatchingTable", "=", "3", "*", "3", "**", "2", "\n", "probMatching_HalfHand_HalfTable", "=", "(", "2", "*", "3", ")", "*", "(", "3", "*", "3", ")", "\n", "marginalProbability1", "=", "probMatchingHand", "/", "totalCombinations", "\n", "marginalProbability2", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probMatchingTable", "/", "totalCombinations", ")", "\n", "probability", "=", "marginalProbability2", "+", "(", "1", "-", "marginalProbability2", ")", "*", "(", "probMatching_HalfHand_HalfTable", "/", "totalCombinations", ")", "\n", "", "elif", "Pair", "==", "True", ":", "\n", "                ", "probability", "=", "(", "3", "*", "3", "*", "9", "*", "4", ")", "/", "totalCombinations", "\n", "", "", "elif", "rankType", "==", "\"Three of a Kind\"", ":", "\n", "            ", "if", "NonPair", "==", "True", ":", "\n", "# We multiply by 5 because there are 5 different cards (2 in your hand and 3 on the flop) that need runner, runner", "\n", "                ", "probability", "=", "(", "5", "*", "nCr", "(", "3", ",", "2", ")", ")", "/", "totalCombinations", "\n", "", "elif", "Pair", "==", "True", ":", "\n", "                ", "probability", "=", "(", "2", "*", "9", "*", "4", ")", "/", "totalCombinations", "\n", "", "elif", "TwoPair", "==", "True", ":", "\n", "                ", "probability", "=", "0", "# Because you would get full house", "\n", "", "", "elif", "rankType", "==", "\"Straight\"", ":", "\n", "            ", "probRunnerRunner", "=", "(", "StraightRunnerRunner", "*", "4", "**", "2", ")", "/", "totalCombinations", "\n", "\n", "if", "NonPair", "==", "True", ":", "\n", "                ", "probSingleRunner", "=", "(", "StraightSingleRunner", "*", "4", "*", "8", "*", "4", ")", "/", "totalCombinations", "\n", "", "elif", "Pair", "==", "True", ":", "\n", "                ", "probSingleRunner", "=", "(", "StraightSingleRunner", "*", "4", "*", "9", "*", "4", ")", "/", "totalCombinations", "\n", "", "elif", "TwoPair", "==", "True", "or", "Triple", "==", "True", ":", "\n", "                ", "probSingleRunner", "=", "0", "\n", "\n", "", "probability", "=", "probRunnerRunner", "+", "(", "1", "-", "probRunnerRunner", ")", "*", "probSingleRunner", "\n", "", "elif", "rankType", "==", "\"Flush\"", ":", "\n", "            ", "if", "numSuited", "==", "2", ":", "\n", "                ", "probability", "=", "0", "\n", "", "elif", "numSuited", "==", "3", ":", "\n", "                ", "probability", "=", "nCr", "(", "10", ",", "2", ")", "/", "totalCombinations", "\n", "", "elif", "numSuited", "==", "4", ":", "\n", "                ", "probability", "=", "(", "9", "*", "46", ")", "/", "totalCombinations", "\n", "", "", "elif", "rankType", "==", "\"Full House\"", ":", "\n", "            ", "if", "NonPair", "==", "True", ":", "\n", "                ", "probability", "=", "0", "\n", "", "elif", "Pair", "==", "True", ":", "\n", "                ", "probMatchSetThenPair", "=", "2", "*", "3", "*", "3", "\n", "probRunnerRunnerSet", "=", "3", "*", "3", "\n", "marginalProbability1", "=", "probMatchSetThenPair", "/", "totalCombinations", "\n", "probability", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probRunnerRunnerSet", "/", "totalCombinations", ")", "\n", "", "elif", "TwoPair", "==", "True", ":", "\n", "                ", "probMatchHand", "=", "2", "*", "2", "*", "10", "*", "4", "\n", "probRunnerRunnerSingle", "=", "3", "\n", "marginalProbability1", "=", "probMatchHand", "/", "totalCombinations", "\n", "probability", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probRunnerRunnerSingle", "/", "totalCombinations", ")", "\n", "", "elif", "Triple", "==", "True", ":", "\n", "                ", "probPairTheBoard", "=", "2", "*", "3", "*", "10", "*", "4", "\n", "probRunnerRunner", "=", "10", "*", "nCr", "(", "4", ",", "2", ")", "\n", "marginalProbability1", "=", "probPairTheBoard", "/", "totalCombinations", "\n", "probability", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probRunnerRunner", "/", "totalCombinations", ")", "\n", "", "", "elif", "rankType", "==", "\"Four of a Kind\"", ":", "\n", "            ", "if", "NonPair", "==", "True", ":", "\n", "                ", "probability", "=", "0", "\n", "", "elif", "Pair", "==", "True", ":", "\n", "                ", "probability", "=", "1", "/", "totalCombinations", "\n", "", "elif", "TwoPair", "==", "True", ":", "\n", "                ", "probability", "=", "2", "/", "totalCombinations", "\n", "", "elif", "Triple", "==", "True", ":", "\n", "                ", "probability", "=", "10", "*", "4", "/", "totalCombinations", "\n", "", "elif", "FullHouse", "==", "True", ":", "\n", "                ", "probPairRunnerRunner", "=", "2", "\n", "probMatchTriple", "=", "11", "*", "4", "\n", "marginalProbability1", "=", "probPairRunnerRunner", "/", "totalCombinations", "\n", "probability", "=", "marginalProbability1", "+", "(", "1", "-", "marginalProbability1", ")", "*", "(", "probMatchTriple", "/", "totalCombinations", ")", "\n", "", "", "elif", "rankType", "==", "\"Straight Flush\"", ":", "\n", "            ", "probability", "=", "0", "#FIX THIS WITH AN ACTUAL PROBABILITY                ", "\n", "", "", "elif", "cardsOnTable", "==", "\"Turn\"", ":", "\n", "        ", "totalCombinations", "=", "46", "\n", "if", "rankType", "==", "\"Pair\"", ":", "\n", "            ", "probability", "=", "(", "6", "*", "3", ")", "/", "totalCombinations", "\n", "", "elif", "rankType", "==", "\"Two Pair\"", ":", "\n", "            ", "if", "NonPair", "==", "True", ":", "\n", "                ", "probability", "=", "0", "\n", "", "elif", "Pair", "==", "True", ":", "\n", "                ", "probability", "=", "(", "4", "*", "3", ")", "/", "totalCombinations", "\n", "", "", "elif", "rankType", "==", "\"Three of a Kind\"", ":", "\n", "            ", "if", "NonPair", "==", "True", ":", "\n", "                ", "probability", "=", "0", "\n", "", "elif", "Pair", "==", "True", ":", "\n", "                ", "probability", "=", "2", "/", "totalCombinations", "\n", "", "elif", "TwoPair", "==", "True", ":", "\n", "                ", "probability", "=", "0", "# Because if they get a triple, that would mean a full house", "\n", "", "", "elif", "rankType", "==", "\"Straight\"", ":", "\n", "            ", "probability", "=", "(", "StraightSingleRunner", "*", "4", ")", "/", "totalCombinations", "\n", "", "elif", "rankType", "==", "\"Flush\"", ":", "\n", "            ", "if", "numSuited", "==", "2", ":", "\n", "                ", "probability", "=", "0", "\n", "", "elif", "numSuited", "==", "3", ":", "\n", "                ", "probability", "=", "0", "\n", "", "elif", "numSuited", "==", "4", ":", "\n", "                ", "probability", "=", "9", "/", "totalCombinations", "\n", "", "", "elif", "rankType", "==", "\"Full House\"", ":", "\n", "            ", "if", "NonPair", "==", "True", ":", "\n", "                ", "probability", "=", "0", "\n", "", "elif", "Pair", "==", "True", ":", "\n", "                ", "probability", "=", "0", "\n", "", "elif", "TwoPair", "==", "True", ":", "# Leaving this for right now, but later I need to check if we have three pair as well", "\n", "                ", "probability", "=", "4", "/", "totalCombinations", "\n", "", "elif", "Triple", "==", "True", ":", "\n", "                ", "probability", "=", "(", "3", "*", "3", ")", "/", "totalCombinations", "\n", "", "", "elif", "rankType", "==", "\"Four of a Kind\"", ":", "\n", "            ", "if", "NonPair", "==", "True", ":", "\n", "                ", "probability", "=", "0", "\n", "", "elif", "Pair", "==", "True", ":", "\n", "                ", "probability", "=", "0", "\n", "", "elif", "TwoPair", "==", "True", ":", "\n", "                ", "probability", "=", "0", "\n", "", "elif", "Triple", "or", "FullHouse", "==", "True", ":", "\n", "                ", "probability", "=", "1", "/", "totalCombinations", "\n", "", "", "elif", "rankType", "==", "\"Straight Flush\"", ":", "\n", "            ", "if", "numSuited", "<", "4", "or", "StraightSingleRunner", "==", "0", ":", "\n", "                ", "probability", "=", "0", "\n", "", "else", ":", "\n", "                ", "probability", "=", "0", "# FIX THIS WITH AN ACTUAL PROBABILITY", "\n", "", "", "", "return", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.findHandStatus": [[470, 569], ["list", "list.extend", "range", "list", "list.sort", "suits.sort", "range", "pokerCombinatorics.countOuts", "range", "list", "max", "min", "len", "NumSuitSplit.append", "numpy.array", "numpy.array", "map", "len", "len", "NumSuitSplitHand.append", "numpy.array", "map", "abs", "evaluationHand[].split", "len", "numpy.sum", "len", "hand[].split", "pair_values.append", "pair_sequences.append", "pair_values.append", "pair_sequences.append", "len", "len", "len", "len", "numpy.array", "len", "len"], "function", ["home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerCombinatorics.countOuts"], ["", "def", "findHandStatus", "(", "hand", ",", "table", ")", ":", "\n", "    ", "evaluationHand", "=", "list", "(", "table", ")", "\n", "evaluationHand", ".", "extend", "(", "hand", ")", "\n", "\n", "### Initializing the states to False - will update if they turn out to be True ###", "\n", "\n", "NonPair", "=", "False", "\n", "Pair", "=", "False", "\n", "TwoPair", "=", "False", "\n", "Triple", "=", "False", "\n", "FullHouse", "=", "False", "\n", "\n", "NumSuitSplit", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "evaluationHand", ")", ")", ":", "NumSuitSplit", ".", "append", "(", "evaluationHand", "[", "i", "]", ".", "split", "(", "\"_\"", ")", ")", "\n", "numbers_string", "=", "np", ".", "array", "(", "NumSuitSplit", ")", "[", ":", ",", "0", "]", "\n", "suits", "=", "np", ".", "array", "(", "NumSuitSplit", ")", "[", ":", ",", "1", "]", "\n", "\n", "numbers", "=", "list", "(", "map", "(", "int", ",", "numbers_string", ")", ")", "\n", "numbers", ".", "sort", "(", ")", "\n", "suits", ".", "sort", "(", ")", "\n", "\n", "pair_sequence", "=", "1", "\n", "pair_sequences", "=", "[", "]", "\n", "pair_values", "=", "[", "]", "\n", "tempSuited", "=", "1", "\n", "NumSuited", "=", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "numbers", ")", ")", ":", "\n", "        ", "diff", "=", "numbers", "[", "i", "]", "-", "numbers", "[", "(", "i", "-", "1", ")", "]", "\n", "\n", "### Check for pairs ###", "\n", "\n", "if", "diff", "==", "0", ":", "\n", "            ", "pair_sequence", "+=", "1", "\n", "pair", "=", "numbers", "[", "i", "]", "\n", "if", "i", "==", "len", "(", "numbers", ")", "-", "1", ":", "\n", "                ", "pair_values", ".", "append", "(", "pair", ")", "\n", "pair_sequences", ".", "append", "(", "pair_sequence", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "pair_sequence", ">", "1", ":", "\n", "                ", "pair_values", ".", "append", "(", "pair", ")", "\n", "pair_sequences", ".", "append", "(", "pair_sequence", ")", "\n", "", "pair_sequence", "=", "1", "\n", "\n", "### Check for number of suited cards ###", "\n", "\n", "", "if", "suits", "[", "i", "]", "==", "suits", "[", "(", "i", "-", "1", ")", "]", ":", "\n", "            ", "tempSuited", "+=", "1", "\n", "if", "tempSuited", ">", "NumSuited", ":", "\n", "                ", "NumSuited", "=", "tempSuited", "\n", "", "", "elif", "suits", "[", "i", "]", "!=", "suits", "[", "(", "i", "-", "1", ")", "]", ":", "\n", "            ", "tempSuited", "=", "1", "\n", "\n", "### Check for various states ###", "\n", "\n", "", "", "if", "len", "(", "pair_sequences", ")", ">", "1", "and", "np", ".", "sum", "(", "np", ".", "array", "(", "pair_sequences", ")", "==", "3", ")", ">", "0", ":", "\n", "        ", "FullHouse", "=", "True", "\n", "", "elif", "len", "(", "pair_sequences", ")", "==", "1", "and", "pair_sequences", "[", "0", "]", "==", "3", ":", "\n", "        ", "Triple", "=", "True", "\n", "", "elif", "len", "(", "pair_sequences", ")", ">", "1", ":", "\n", "        ", "TwoPair", "=", "True", "\n", "", "elif", "len", "(", "pair_sequences", ")", "==", "1", "and", "pair_sequences", "[", "0", "]", "==", "2", ":", "\n", "        ", "Pair", "=", "True", "\n", "", "elif", "len", "(", "pair_sequences", ")", "==", "0", ":", "\n", "        ", "NonPair", "=", "True", "\n", "\n", "### Initialize and begin to fill the dictionary ###", "\n", "\n", "", "statusDict", "=", "{", "}", "\n", "statusDict", "[", "\"NonPair\"", "]", "=", "NonPair", "\n", "statusDict", "[", "\"Pair\"", "]", "=", "Pair", "\n", "statusDict", "[", "\"TwoPair\"", "]", "=", "TwoPair", "\n", "statusDict", "[", "\"Triple\"", "]", "=", "Triple", "\n", "statusDict", "[", "\"FullHouse\"", "]", "=", "FullHouse", "\n", "\n", "outs", "=", "countOuts", "(", "numbers", ")", "\n", "\n", "StraightRunnerRunner", "=", "0", "\n", "StraightSingleRunner", "=", "0", "\n", "for", "out", "in", "outs", ":", "\n", "        ", "if", "len", "(", "out", ")", "==", "1", ":", "\n", "            ", "StraightSingleRunner", "+=", "1", "\n", "", "elif", "len", "(", "out", ")", "==", "2", ":", "\n", "            ", "StraightRunnerRunner", "+=", "1", "\n", "\n", "", "", "statusDict", "[", "\"StraightRunnerRunner\"", "]", "=", "StraightRunnerRunner", "\n", "statusDict", "[", "\"StraightSingleRunner\"", "]", "=", "StraightSingleRunner", "\n", "\n", "statusDict", "[", "\"NumSuited\"", "]", "=", "NumSuited", "\n", "\n", "NumSuitSplitHand", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "hand", ")", ")", ":", "NumSuitSplitHand", ".", "append", "(", "hand", "[", "i", "]", ".", "split", "(", "\"_\"", ")", ")", "\n", "hand_numbers_string", "=", "np", ".", "array", "(", "NumSuitSplitHand", ")", "[", ":", ",", "0", "]", "\n", "hand_numbers", "=", "list", "(", "map", "(", "int", ",", "hand_numbers_string", ")", ")", "\n", "\n", "statusDict", "[", "\"straightGap\"", "]", "=", "abs", "(", "hand_numbers", "[", "0", "]", "-", "hand_numbers", "[", "1", "]", ")", "-", "1", "\n", "statusDict", "[", "\"straightUpperBound\"", "]", "=", "max", "(", "hand_numbers", ")", "\n", "statusDict", "[", "\"straightLowerBound\"", "]", "=", "min", "(", "hand_numbers", ")", "\n", "\n", "return", "statusDict", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerNeuralNetwork.probabilityApproximator.__init__": [[13, 51], ["graph.get_tensor_by_name", "graph.get_tensor_by_name", "graph.get_tensor_by_name", "tensorflow.variable_scope", "tensorflow.reduce_mean", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.elu", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.elu", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.sigmoid", "tensorflow.square", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.add_to_collection", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.get_collection", "tensorflow.zeros", "tensorflow.matmul", "tensorflow.zeros", "tensorflow.matmul", "tensorflow.zeros", "tensorflow.matmul", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.sqrt"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "n_features", ",", "lr", ",", "use_existing_model", ",", "graph", "=", "None", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "_n_features", "=", "n_features", "\n", "self", ".", "_neurons1", "=", "24", "# Number of neurons in the first hidden layer", "\n", "self", ".", "_neurons2", "=", "12", "# Number of neurons in the second hidden layer", "\n", "\n", "if", "use_existing_model", "==", "True", ":", "\n", "            ", "self", ".", "inputs", "=", "graph", ".", "get_tensor_by_name", "(", "\"ProbabilityNetwork/Inputs:0\"", ")", "\n", "self", ".", "simulated_probability", "=", "graph", ".", "get_tensor_by_name", "(", "\"ProbabilityNetwork/ActualProbability:0\"", ")", "\n", "\n", "self", ".", "approximate_probability", "=", "graph", ".", "get_tensor_by_name", "(", "\"ProbabilityNetwork/Probability:0\"", ")", "\n", "", "else", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'ProbabilityNetwork'", ")", ":", "\n", "                ", "self", ".", "inputs", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "self", ".", "_n_features", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"Inputs\"", ")", "\n", "self", ".", "simulated_probability", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "2", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"ActualProbability\"", ")", "\n", "\n", "self", ".", "weights", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "_n_features", ",", "self", ".", "_neurons1", "]", ",", "stddev", "=", "tf", ".", "sqrt", "(", "2", "/", "(", "self", ".", "_n_features", "+", "self", ".", "_neurons1", ")", ")", ")", ")", "\n", "self", ".", "bias", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", ",", "self", ".", "_neurons1", "]", ")", "+", "0.01", ")", "\n", "self", ".", "layer", "=", "tf", ".", "nn", ".", "elu", "(", "tf", ".", "matmul", "(", "self", ".", "inputs", ",", "self", ".", "weights", ")", "+", "self", ".", "bias", ")", "\n", "\n", "self", ".", "weights2", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "_neurons1", ",", "self", ".", "_neurons2", "]", ",", "stddev", "=", "tf", ".", "sqrt", "(", "2", "/", "(", "self", ".", "_neurons1", "+", "self", ".", "_neurons2", ")", ")", ")", ")", "\n", "self", ".", "bias2", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", ",", "self", ".", "_neurons2", "]", ")", "+", "0.01", ")", "\n", "self", ".", "layer2", "=", "tf", ".", "nn", ".", "elu", "(", "tf", ".", "matmul", "(", "self", ".", "layer", ",", "self", ".", "weights2", ")", "+", "self", ".", "bias2", ")", "\n", "\n", "self", ".", "weights3", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "_neurons2", ",", "2", "]", ",", "stddev", "=", "tf", ".", "sqrt", "(", "2", "/", "(", "self", ".", "_neurons2", "+", "2", ")", ")", ")", ")", "\n", "self", ".", "bias3", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", "+", "0.01", ")", "\n", "self", ".", "approximate_probability", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "self", ".", "layer2", ",", "self", ".", "weights3", ")", "+", "self", ".", "bias3", ",", "name", "=", "\"Probability\"", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "\"Loss\"", ")", ":", "\n", "            ", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "self", ".", "simulated_probability", "-", "self", ".", "approximate_probability", ")", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"TrainNetwork\"", ")", ":", "\n", "            ", "if", "use_existing_model", "==", "True", ":", "\n", "                ", "self", ".", "train_op", "=", "tf", ".", "get_collection", "(", "\"Trainer\"", ",", "scope", "=", "\"TrainNetwork\"", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ")", "\n", "self", ".", "train_op", "=", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "tf", ".", "add_to_collection", "(", "name", "=", "\"Trainer\"", ",", "value", "=", "self", ".", "train_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brandinho_Poker-Probability-Approximation.src.pokerNeuralNetwork.probabilityApproximator.trainModel": [[52, 78], ["numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "range", "pokerNeuralNetwork.probabilityApproximator.sess.run", "pokerNeuralNetwork.probabilityApproximator.sess.run", "pokerNeuralNetwork.probabilityApproximator.sess.run", "print"], "methods", ["None"], ["", "", "", "def", "trainModel", "(", "self", ",", "inputs", ",", "simulated_probability", ",", "epochs", ",", "batch_size", ",", "inputs_test", ",", "simulated_probability_test", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "        ", "batches_per_epoch", "=", "inputs", ".", "shape", "[", "0", "]", "//", "batch_size", "\n", "training_error_array", "=", "np", ".", "zeros", "(", "epochs", ")", "\n", "testing_error_array", "=", "np", ".", "zeros", "(", "epochs", ")", "\n", "\n", "for", "i", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "shuffled_indexes", "=", "np", ".", "random", ".", "choice", "(", "inputs", ".", "shape", "[", "0", "]", ",", "size", "=", "inputs", ".", "shape", "[", "0", "]", ",", "replace", "=", "False", ")", "\n", "batch_num", "=", "0", "\n", "epoch_error", "=", "0", "\n", "for", "j", "in", "range", "(", "batches_per_epoch", ")", ":", "\n", "                ", "current_index", "=", "shuffled_indexes", "[", "batch_num", ":", "(", "batch_num", "+", "batch_size", ")", "]", "\n", "current_X", "=", "inputs", "[", "current_index", ",", "]", "\n", "current_Y", "=", "simulated_probability", "[", "current_index", ",", "]", "\n", "\n", "_", ",", "error", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "train_op", ",", "self", ".", "loss", "]", ",", "{", "self", ".", "inputs", ":", "current_X", ",", "self", ".", "simulated_probability", ":", "current_Y", "}", ")", "\n", "\n", "epoch_error", "+=", "error", "\n", "batch_num", "+=", "batch_size", "\n", "", "epoch_error", "/=", "batches_per_epoch", "\n", "if", "i", "%", "100", "==", "0", "and", "verbose", "==", "True", ":", "\n", "                ", "print", "(", "\"The error for epoch {} is {}\"", ".", "format", "(", "i", ",", "epoch_error", ")", ")", "\n", "", "training_error_array", "[", "i", "]", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "loss", ",", "{", "self", ".", "inputs", ":", "inputs", ",", "self", ".", "simulated_probability", ":", "simulated_probability", "}", ")", "\n", "testing_error_array", "[", "i", "]", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "loss", ",", "{", "self", ".", "inputs", ":", "inputs_test", ",", "self", ".", "simulated_probability", ":", "simulated_probability_test", "}", ")", "\n", "\n", "", "return", "training_error_array", ",", "testing_error_array", "", "", "", ""]]}